
ATP_S1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028fcc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000439c  08029270  08029270  0002a270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802d60c  0802d60c  0002e60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802d614  0802d614  0002e614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0802d618  0802d618  0002e618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000003e0  24000000  0802d61c  0002f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000bd30  240003e0  0802d9fc  0002f3e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2400c110  0802d9fc  00030110  2**0
                  ALLOC
  9 .lwip_sec     00004a83  30000000  30000000  00030000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000350dc  2**0
                  CONTENTS, READONLY
 11 ._Text_Area   00000658  30004a84  30004a84  00034a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .debug_info   00045f26  00000000  00000000  0003510a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009c37  00000000  00000000  0007b030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c50  00000000  00000000  00084c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000232c  00000000  00000000  000878b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004dbf9  00000000  00000000  00089be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00056699  00000000  00000000  000d77dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018bc3b  00000000  00000000  0012de76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002b9ab1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ca30  00000000  00000000  002b9af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  002c6524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240003e0 	.word	0x240003e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08029254 	.word	0x08029254

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240003e4 	.word	0x240003e4
 80002dc:	08029254 	.word	0x08029254

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <checkData>:
uint8_t setFocusFreq = 0;




uint8_t checkData(uint8_t* data, uint8_t length) {
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	70fb      	strb	r3, [r7, #3]
    uint8_t check = 0x00;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < length; i++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	e009      	b.n	8000a92 <checkData+0x2a>
        check ^= data[i];
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	4413      	add	r3, r2
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	4053      	eors	r3, r2
 8000a8a:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < length; i++) {
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	78fb      	ldrb	r3, [r7, #3]
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	dbf1      	blt.n	8000a7e <checkData+0x16>
    }
    return check;
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <SendFocusData>:

void SendFocusData(SendFocusFrameTypedef *SendType)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    SendType->data[0] = SendType->head[0];
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	711a      	strb	r2, [r3, #4]
    SendType->data[1] = SendType->head[1];
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	785a      	ldrb	r2, [r3, #1]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	715a      	strb	r2, [r3, #5]
    SendType->data[4] = 0x03; // 设备ID
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	721a      	strb	r2, [r3, #8]
    SendType->data[5] = 0x00; //通道
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	725a      	strb	r2, [r3, #9]
    switch (SendType->func)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	78db      	ldrb	r3, [r3, #3]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	2b1a      	cmp	r3, #26
 8000ad4:	f200 80d5 	bhi.w	8000c82 <SendFocusData+0x1da>
 8000ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ae0 <SendFocusData+0x38>)
 8000ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ade:	bf00      	nop
 8000ae0:	08000b4d 	.word	0x08000b4d
 8000ae4:	08000c83 	.word	0x08000c83
 8000ae8:	08000b9d 	.word	0x08000b9d
 8000aec:	08000c83 	.word	0x08000c83
 8000af0:	08000bcd 	.word	0x08000bcd
 8000af4:	08000c83 	.word	0x08000c83
 8000af8:	08000c83 	.word	0x08000c83
 8000afc:	08000c83 	.word	0x08000c83
 8000b00:	08000c83 	.word	0x08000c83
 8000b04:	08000c83 	.word	0x08000c83
 8000b08:	08000c83 	.word	0x08000c83
 8000b0c:	08000c83 	.word	0x08000c83
 8000b10:	08000c83 	.word	0x08000c83
 8000b14:	08000c83 	.word	0x08000c83
 8000b18:	08000bfd 	.word	0x08000bfd
 8000b1c:	08000c2f 	.word	0x08000c2f
 8000b20:	08000c83 	.word	0x08000c83
 8000b24:	08000c83 	.word	0x08000c83
 8000b28:	08000c83 	.word	0x08000c83
 8000b2c:	08000c83 	.word	0x08000c83
 8000b30:	08000c83 	.word	0x08000c83
 8000b34:	08000c83 	.word	0x08000c83
 8000b38:	08000c83 	.word	0x08000c83
 8000b3c:	08000c83 	.word	0x08000c83
 8000b40:	08000c83 	.word	0x08000c83
 8000b44:	08000c83 	.word	0x08000c83
 8000b48:	08000c59 	.word	0x08000c59
    {
        case SetPos:{
            SendType->len = 0x0c;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	220c      	movs	r2, #12
 8000b50:	709a      	strb	r2, [r3, #2]
            SendType->data[2] = SendType->len;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	789a      	ldrb	r2, [r3, #2]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	719a      	strb	r2, [r3, #6]
            SendType->data[3] = SetPos;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	71da      	strb	r2, [r3, #7]
            //     setFocusPos.f = 2000.f;
            // }else if(setFocusPos.f < -2000.f)
            // {
            //     setFocusPos.f = -2000.f;
            // }
            SendType->data[6] = setFocusPos.u8t[3];
 8000b60:	4b5a      	ldr	r3, [pc, #360]	@ (8000ccc <SendFocusData+0x224>)
 8000b62:	78da      	ldrb	r2, [r3, #3]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	729a      	strb	r2, [r3, #10]
            SendType->data[7] = setFocusPos.u8t[2];
 8000b68:	4b58      	ldr	r3, [pc, #352]	@ (8000ccc <SendFocusData+0x224>)
 8000b6a:	789a      	ldrb	r2, [r3, #2]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	72da      	strb	r2, [r3, #11]
            SendType->data[8] = setFocusPos.u8t[1];
 8000b70:	4b56      	ldr	r3, [pc, #344]	@ (8000ccc <SendFocusData+0x224>)
 8000b72:	785a      	ldrb	r2, [r3, #1]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	731a      	strb	r2, [r3, #12]
            SendType->data[9] = setFocusPos.u8t[0];
 8000b78:	4b54      	ldr	r3, [pc, #336]	@ (8000ccc <SendFocusData+0x224>)
 8000b7a:	781a      	ldrb	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	735a      	strb	r2, [r3, #13]
            SendType->data[10] = 0x01;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2201      	movs	r2, #1
 8000b84:	739a      	strb	r2, [r3, #14]
            SendType->data[11] = checkData(SendType->data, 11);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	210b      	movs	r1, #11
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff6b 	bl	8000a68 <checkData>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461a      	mov	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	73da      	strb	r2, [r3, #15]
        }break;
 8000b9a:	e073      	b.n	8000c84 <SendFocusData+0x1dc>
        case GetCurPos:{
            SendType->len = 0x08;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2208      	movs	r2, #8
 8000ba0:	709a      	strb	r2, [r3, #2]
            SendType->data[2] = SendType->len;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	789a      	ldrb	r2, [r3, #2]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	719a      	strb	r2, [r3, #6]
            SendType->data[3] = GetCurPos;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2203      	movs	r2, #3
 8000bae:	71da      	strb	r2, [r3, #7]
            SendType->data[6] = 0x01;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	729a      	strb	r2, [r3, #10]
            SendType->data[7] = checkData(SendType->data, 7);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	2107      	movs	r1, #7
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff53 	bl	8000a68 <checkData>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	72da      	strb	r2, [r3, #11]
        }break;
 8000bca:	e05b      	b.n	8000c84 <SendFocusData+0x1dc>
        case StopRun:{
            SendType->len = 0x08;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2208      	movs	r2, #8
 8000bd0:	709a      	strb	r2, [r3, #2]
            SendType->data[2] = SendType->len;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	789a      	ldrb	r2, [r3, #2]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	719a      	strb	r2, [r3, #6]
            SendType->data[3] = StopRun;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2205      	movs	r2, #5
 8000bde:	71da      	strb	r2, [r3, #7]
            SendType->data[6] = 0x00;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	729a      	strb	r2, [r3, #10]
            SendType->data[7] = checkData(SendType->data, 7);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2107      	movs	r1, #7
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff3b 	bl	8000a68 <checkData>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	72da      	strb	r2, [r3, #11]
        }break;
 8000bfa:	e043      	b.n	8000c84 <SendFocusData+0x1dc>
        case MultiGetCurPos:{
            SendType->len = 0x08;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2208      	movs	r2, #8
 8000c00:	709a      	strb	r2, [r3, #2]
            SendType->data[2] = SendType->len;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	789a      	ldrb	r2, [r3, #2]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	719a      	strb	r2, [r3, #6]
            SendType->data[3] = MultiGetCurPos;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	220f      	movs	r2, #15
 8000c0e:	71da      	strb	r2, [r3, #7]
            SendType->data[6] = setFocusFreq;
 8000c10:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd0 <SendFocusData+0x228>)
 8000c12:	781a      	ldrb	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	729a      	strb	r2, [r3, #10]
            SendType->data[7] = checkData(SendType->data, 7);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	2107      	movs	r1, #7
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff22 	bl	8000a68 <checkData>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	72da      	strb	r2, [r3, #11]
        }break;
 8000c2c:	e02a      	b.n	8000c84 <SendFocusData+0x1dc>
        case StopGetPos:{
            SendType->len = 0x06;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2206      	movs	r2, #6
 8000c32:	709a      	strb	r2, [r3, #2]
            SendType->data[2] = SendType->len;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	789a      	ldrb	r2, [r3, #2]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	719a      	strb	r2, [r3, #6]
            SendType->data[3] = StopGetPos;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2210      	movs	r2, #16
 8000c40:	71da      	strb	r2, [r3, #7]
            SendType->data[5] = checkData(SendType->data, 5);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2105      	movs	r1, #5
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff0d 	bl	8000a68 <checkData>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	725a      	strb	r2, [r3, #9]
        }break;
 8000c56:	e015      	b.n	8000c84 <SendFocusData+0x1dc>
        case ClearPos:{
            SendType->len = 0x06;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2206      	movs	r2, #6
 8000c5c:	709a      	strb	r2, [r3, #2]
            SendType->data[2] = SendType->len;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	789a      	ldrb	r2, [r3, #2]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	719a      	strb	r2, [r3, #6]
            SendType->data[3] = ClearPos;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	221b      	movs	r2, #27
 8000c6a:	71da      	strb	r2, [r3, #7]
            SendType->data[5] = checkData(SendType->data, 5);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3304      	adds	r3, #4
 8000c70:	2105      	movs	r1, #5
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fef8 	bl	8000a68 <checkData>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	725a      	strb	r2, [r3, #9]
        }break;
 8000c80:	e000      	b.n	8000c84 <SendFocusData+0x1dc>
        default:
            break;
 8000c82:	bf00      	nop
    }
    for(int i = 0;i < SendType->len;i++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	e00b      	b.n	8000ca2 <SendFocusData+0x1fa>
    {
        // SendType->data[SendType->len] = SendType->check;
        uart_printf("%02x ", SendType->data[i]);
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	3304      	adds	r3, #4
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	480f      	ldr	r0, [pc, #60]	@ (8000cd4 <SendFocusData+0x22c>)
 8000c98:	f004 f970 	bl	8004f7c <uart_printf>
    for(int i = 0;i < SendType->len;i++)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	789b      	ldrb	r3, [r3, #2]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4293      	cmp	r3, r2
 8000cac:	dbed      	blt.n	8000c8a <SendFocusData+0x1e2>
    }
    HAL_UART_Transmit(&huart6, SendType->data, SendType->len, HAL_MAX_DELAY);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	1d19      	adds	r1, r3, #4
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	789b      	ldrb	r3, [r3, #2]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbc:	4806      	ldr	r0, [pc, #24]	@ (8000cd8 <SendFocusData+0x230>)
 8000cbe:	f00e f86d 	bl	800ed9c <HAL_UART_Transmit>
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	240003fc 	.word	0x240003fc
 8000cd0:	24000404 	.word	0x24000404
 8000cd4:	08029270 	.word	0x08029270
 8000cd8:	24000be0 	.word	0x24000be0

08000cdc <packData>:
        .Offset_Y = 0
};


void packData(ImgSendTypedef_t *SendType,ImgSendDataTypedef *SendData)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]
    switch (SendType->FuncCode) // 功能码
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	799b      	ldrb	r3, [r3, #6]
 8000cee:	3b06      	subs	r3, #6
 8000cf0:	2b0e      	cmp	r3, #14
 8000cf2:	f200 814e 	bhi.w	8000f92 <packData+0x2b6>
 8000cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cfc <packData+0x20>)
 8000cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfc:	08000d39 	.word	0x08000d39
 8000d00:	08000f93 	.word	0x08000f93
 8000d04:	08000e55 	.word	0x08000e55
 8000d08:	08000f93 	.word	0x08000f93
 8000d0c:	08000f93 	.word	0x08000f93
 8000d10:	08000f93 	.word	0x08000f93
 8000d14:	08000f93 	.word	0x08000f93
 8000d18:	08000f93 	.word	0x08000f93
 8000d1c:	08000f93 	.word	0x08000f93
 8000d20:	08000f93 	.word	0x08000f93
 8000d24:	08000f93 	.word	0x08000f93
 8000d28:	08000f93 	.word	0x08000f93
 8000d2c:	08000f93 	.word	0x08000f93
 8000d30:	08000f93 	.word	0x08000f93
 8000d34:	08000f41 	.word	0x08000f41
    {
        case SETTING_DEVICEPARAM: // 0x06
        {
            switch (SendType->FuncSubCode) // 功能码子项
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	79db      	ldrb	r3, [r3, #7]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	f200 8086 	bhi.w	8000e50 <packData+0x174>
 8000d44:	a201      	add	r2, pc, #4	@ (adr r2, 8000d4c <packData+0x70>)
 8000d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4a:	bf00      	nop
 8000d4c:	08000d61 	.word	0x08000d61
 8000d50:	08000d93 	.word	0x08000d93
 8000d54:	08000dc5 	.word	0x08000dc5
 8000d58:	08000df7 	.word	0x08000df7
 8000d5c:	08000e49 	.word	0x08000e49
            {
                case FOCUS_ADJUST: // 0x03
                {
                	for(i = 0;i < 4;i++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	e00e      	b.n	8000d84 <packData+0xa8>
                	{
                		SendType->Data[10+i] = SendData->focusAdjust >> 8*(i);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	40da      	lsrs	r2, r3
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	330a      	adds	r3, #10
 8000d74:	b2d1      	uxtb	r1, r2
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	460a      	mov	r2, r1
 8000d7c:	729a      	strb	r2, [r3, #10]
                	for(i = 0;i < 4;i++)
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	3301      	adds	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d9ed      	bls.n	8000d66 <packData+0x8a>
                	}
                    SendType->DataLen = 6;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2206      	movs	r2, #6
 8000d8e:	805a      	strh	r2, [r3, #2]
                    break;
 8000d90:	e05f      	b.n	8000e52 <packData+0x176>
                }
                case ZOOM_ADJUST: // 0x04
                {
                    for(i = 0;i < 4;i++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	e00e      	b.n	8000db6 <packData+0xda>
                	{
                		SendType->Data[10+i] = SendData->zoomAdjust >> 8*(i);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	40da      	lsrs	r2, r3
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	330a      	adds	r3, #10
 8000da6:	b2d1      	uxtb	r1, r2
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	4413      	add	r3, r2
 8000dac:	460a      	mov	r2, r1
 8000dae:	729a      	strb	r2, [r3, #10]
                    for(i = 0;i < 4;i++)
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	3301      	adds	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d9ed      	bls.n	8000d98 <packData+0xbc>
                	}
                    SendType->DataLen = 6;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2206      	movs	r2, #6
 8000dc0:	805a      	strh	r2, [r3, #2]
                    break;
 8000dc2:	e046      	b.n	8000e52 <packData+0x176>
                }
                case EXPOSURE: // 0x05
                {
                    for(i = 0;i < 4;i++)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73fb      	strb	r3, [r7, #15]
 8000dc8:	e00e      	b.n	8000de8 <packData+0x10c>
                	{
                		SendType->Data[10+i] = SendData->exposure >> 8*(i);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	40da      	lsrs	r2, r3
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	330a      	adds	r3, #10
 8000dd8:	b2d1      	uxtb	r1, r2
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	460a      	mov	r2, r1
 8000de0:	729a      	strb	r2, [r3, #10]
                    for(i = 0;i < 4;i++)
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	3301      	adds	r3, #1
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d9ed      	bls.n	8000dca <packData+0xee>
                	}
                    SendType->DataLen = 6;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2206      	movs	r2, #6
 8000df2:	805a      	strh	r2, [r3, #2]
                    break;
 8000df4:	e02d      	b.n	8000e52 <packData+0x176>
                }
                case OPTICAL_CENTER: // 0x06
                {
                    for(i = 0;i < 4;i++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]
 8000dfa:	e01e      	b.n	8000e3a <packData+0x15e>
                    {
                        SendType->Data[10+i] = SendData->offsetX >> 8*(3-i);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	f1c3 0303 	rsb	r3, r3, #3
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	40da      	lsrs	r2, r3
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	330a      	adds	r3, #10
 8000e0e:	b2d1      	uxtb	r1, r2
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	460a      	mov	r2, r1
 8000e16:	729a      	strb	r2, [r3, #10]
                        SendType->Data[14+i] = SendData->offsetY >> 8*(3-i);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	691a      	ldr	r2, [r3, #16]
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	f1c3 0303 	rsb	r3, r3, #3
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	40da      	lsrs	r2, r3
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	330e      	adds	r3, #14
 8000e2a:	b2d1      	uxtb	r1, r2
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	4413      	add	r3, r2
 8000e30:	460a      	mov	r2, r1
 8000e32:	729a      	strb	r2, [r3, #10]
                    for(i = 0;i < 4;i++)
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	3301      	adds	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d9dd      	bls.n	8000dfc <packData+0x120>
                    }
                    SendType->DataLen = 10;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	220a      	movs	r2, #10
 8000e44:	805a      	strh	r2, [r3, #2]
                    break;
 8000e46:	e004      	b.n	8000e52 <packData+0x176>
                    // SendType->Data[17] = DeviceIPAddr.u8t[1];
                    // SendType->Data[18] = DeviceIPAddr.u8t[2];
                    // SendType->Data[19] = DeviceIPAddr.u8t[3];
                    // SendType->Data[20] = DevicePort >> 8;
                    // SendType->Data[21] = DevicePort;
                    SendType->DataLen = 14;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	220e      	movs	r2, #14
 8000e4c:	805a      	strh	r2, [r3, #2]
                    break;
 8000e4e:	e000      	b.n	8000e52 <packData+0x176>
                }
                default:
                {
                    break;
 8000e50:	bf00      	nop
                }
            }
        }break;
 8000e52:	e09e      	b.n	8000f92 <packData+0x2b6>
        case SETTING_TRACK: // 0x07
        {
            switch (SendType->FuncSubCode) // 功能码子项
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	79db      	ldrb	r3, [r3, #7]
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	d02e      	beq.n	8000eba <packData+0x1de>
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	dc6d      	bgt.n	8000f3c <packData+0x260>
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d002      	beq.n	8000e6a <packData+0x18e>
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d004      	beq.n	8000e72 <packData+0x196>
                    SendType->DataLen = 10;
                    break;
                }
                default:
                {
                    break;
 8000e68:	e068      	b.n	8000f3c <packData+0x260>
                    SendType->DataLen = 2;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	805a      	strh	r2, [r3, #2]
                    break;
 8000e70:	e065      	b.n	8000f3e <packData+0x262>
                    SendType->Data[10] = SendData->AutoTracking.TrackingType;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	7d1a      	ldrb	r2, [r3, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	751a      	strb	r2, [r3, #20]
                    SendType->Data[11] = SendData->AutoTracking.CaptureStrategy;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	7d5a      	ldrb	r2, [r3, #21]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	755a      	strb	r2, [r3, #21]
                    SendType->Data[12] = SendData->AutoTracking.OffsetX;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	8adb      	ldrh	r3, [r3, #22]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	759a      	strb	r2, [r3, #22]
                    SendType->Data[13] = SendData->AutoTracking.OffsetX >> 8;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	8adb      	ldrh	r3, [r3, #22]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	75da      	strb	r2, [r3, #23]
                    SendType->Data[14] = SendData->AutoTracking.OffsetY;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	8b1b      	ldrh	r3, [r3, #24]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	761a      	strb	r2, [r3, #24]
                    SendType->Data[15] = SendData->AutoTracking.OffsetY >> 8;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	8b1b      	ldrh	r3, [r3, #24]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	765a      	strb	r2, [r3, #25]
                    SendType->DataLen = 8;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	805a      	strh	r2, [r3, #2]
                    break;
 8000eb8:	e041      	b.n	8000f3e <packData+0x262>
                    for(i = 0;i < 2;i++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	e036      	b.n	8000f2e <packData+0x252>
                        SendType->Data[10+i] = SendData->ManualTracking.TrackingCenterX >> 8*(i);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	8b5b      	ldrh	r3, [r3, #26]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	411a      	asrs	r2, r3
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	330a      	adds	r3, #10
 8000ed0:	b2d1      	uxtb	r1, r2
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	460a      	mov	r2, r1
 8000ed8:	729a      	strb	r2, [r3, #10]
                        SendType->Data[12+i] = SendData->ManualTracking.TrackingCenterY >> 8*(i);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	8b9b      	ldrh	r3, [r3, #28]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	411a      	asrs	r2, r3
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	330c      	adds	r3, #12
 8000eea:	b2d1      	uxtb	r1, r2
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	729a      	strb	r2, [r3, #10]
                        SendType->Data[14+i] = SendData->ManualTracking.TrackingWidth >> 8*(i);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	8bdb      	ldrh	r3, [r3, #30]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	411a      	asrs	r2, r3
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	330e      	adds	r3, #14
 8000f04:	b2d1      	uxtb	r1, r2
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	460a      	mov	r2, r1
 8000f0c:	729a      	strb	r2, [r3, #10]
                        SendType->Data[16+i] = SendData->ManualTracking.TrackingHeight >> 8*(i);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	8c1b      	ldrh	r3, [r3, #32]
 8000f12:	461a      	mov	r2, r3
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	411a      	asrs	r2, r3
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	3310      	adds	r3, #16
 8000f1e:	b2d1      	uxtb	r1, r2
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	460a      	mov	r2, r1
 8000f26:	729a      	strb	r2, [r3, #10]
                    for(i = 0;i < 2;i++)
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d9c5      	bls.n	8000ec0 <packData+0x1e4>
                    SendType->DataLen = 10;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	220a      	movs	r2, #10
 8000f38:	805a      	strh	r2, [r3, #2]
                    break;
 8000f3a:	e000      	b.n	8000f3e <packData+0x262>
                    break;
 8000f3c:	bf00      	nop
                }
            }
        }break;
 8000f3e:	e028      	b.n	8000f92 <packData+0x2b6>


        }break;
        case SETTING_IMGTRANS: // 0x14
        {
            switch (SendType->FuncSubCode) // 功能码子项
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	79db      	ldrb	r3, [r3, #7]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d002      	beq.n	8000f4e <packData+0x272>
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d121      	bne.n	8000f90 <packData+0x2b4>
            {
                case 0x02: // 停止传输图像
                {
                    break;
 8000f4c:	e020      	b.n	8000f90 <packData+0x2b4>
                }
                case 0x01: // 开始传输图像
                {
                    SendType->Data[10] = SendData->ImgTrans.ResolutionX;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	751a      	strb	r2, [r3, #20]
                    SendType->Data[11] = SendData->ImgTrans.ResolutionX >> 8;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	755a      	strb	r2, [r3, #21]
                    SendType->Data[12] = SendData->ImgTrans.ResolutionY;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	759a      	strb	r2, [r3, #22]
                    SendType->Data[13] = SendData->ImgTrans.ResolutionY >> 8;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	75da      	strb	r2, [r3, #23]
                    SendType->Data[14] = SendData->ImgTrans.OSDType;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	761a      	strb	r2, [r3, #24]
                    SendType->DataLen = 7;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2207      	movs	r2, #7
 8000f8c:	805a      	strh	r2, [r3, #2]
                    break;
 8000f8e:	bf00      	nop
                }
            }
        }break;
 8000f90:	bf00      	nop
    }


    SendType->Data[0] = SendType->Head1;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	781a      	ldrb	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	729a      	strb	r2, [r3, #10]
    SendType->Data[1] = SendType->Head2;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	785a      	ldrb	r2, [r3, #1]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	72da      	strb	r2, [r3, #11]
    SendType->Data[2] = SendType->DataLen >> 8; //小端
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	885b      	ldrh	r3, [r3, #2]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	731a      	strb	r2, [r3, #12]
    SendType->Data[3] = SendType->DataLen;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	885b      	ldrh	r3, [r3, #2]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	735a      	strb	r2, [r3, #13]
    SendType->Data[4] = SendType->FrameMark;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	791a      	ldrb	r2, [r3, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	739a      	strb	r2, [r3, #14]
    SendType->Data[5] = SendType->DeviceID;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	795a      	ldrb	r2, [r3, #5]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	73da      	strb	r2, [r3, #15]
    SendType->Data[6] = SendType->FuncCode;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	799a      	ldrb	r2, [r3, #6]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	741a      	strb	r2, [r3, #16]
    SendType->Data[7] = SendType->FuncSubCode;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	79da      	ldrb	r2, [r3, #7]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	745a      	strb	r2, [r3, #17]
    SendType->Data[8] = 0x00;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	749a      	strb	r2, [r3, #18]
    SendType->Data[9] = 0x00;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	74da      	strb	r2, [r3, #19]
    SendType->Data[TXDATA_LEN - 1] = SendType->Tail;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
}
 8000ff2:	bf00      	nop
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <Send2ImgModule>:

void Send2ImgModule(ImgSendTypedef_t *SendType,ImgSendDataTypedef *SendData)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]

		packData(SendType,SendData);
 800100a:	6839      	ldr	r1, [r7, #0]
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff fe65 	bl	8000cdc <packData>
		// memset(SendType->Data,0xff,64);
        // for(int i = 0;i < 64;i++)
        // {
        //     uart_printf("%02x ",SendType->Data[i]);
        // }
	switch(SendType->DeviceID)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	795b      	ldrb	r3, [r3, #5]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d002      	beq.n	8001020 <Send2ImgModule+0x20>
 800101a:	2b02      	cmp	r3, #2
 800101c:	d011      	beq.n	8001042 <Send2ImgModule+0x42>
		case TRACKING_JING:{
			// 串口4发送
            HAL_UART_Transmit(&huart4,SendType->Data,64, HAL_MAX_DELAY);
            memset(SendType->Data,0xff,64);
		}break;
		default:break;
 800101e:	e021      	b.n	8001064 <Send2ImgModule+0x64>
            HAL_UART_Transmit(&huart3,SendType->Data,64, HAL_MAX_DELAY);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f103 010a 	add.w	r1, r3, #10
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	2240      	movs	r2, #64	@ 0x40
 800102c:	480f      	ldr	r0, [pc, #60]	@ (800106c <Send2ImgModule+0x6c>)
 800102e:	f00d feb5 	bl	800ed9c <HAL_UART_Transmit>
            memset(SendType->Data,0xff,64);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	330a      	adds	r3, #10
 8001036:	2240      	movs	r2, #64	@ 0x40
 8001038:	21ff      	movs	r1, #255	@ 0xff
 800103a:	4618      	mov	r0, r3
 800103c:	f024 fb3e 	bl	80256bc <memset>
		}break;
 8001040:	e010      	b.n	8001064 <Send2ImgModule+0x64>
            HAL_UART_Transmit(&huart4,SendType->Data,64, HAL_MAX_DELAY);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f103 010a 	add.w	r1, r3, #10
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	2240      	movs	r2, #64	@ 0x40
 800104e:	4808      	ldr	r0, [pc, #32]	@ (8001070 <Send2ImgModule+0x70>)
 8001050:	f00d fea4 	bl	800ed9c <HAL_UART_Transmit>
            memset(SendType->Data,0xff,64);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	330a      	adds	r3, #10
 8001058:	2240      	movs	r2, #64	@ 0x40
 800105a:	21ff      	movs	r1, #255	@ 0xff
 800105c:	4618      	mov	r0, r3
 800105e:	f024 fb2d 	bl	80256bc <memset>
		}break;
 8001062:	bf00      	nop
	}

}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	24000b4c 	.word	0x24000b4c
 8001070:	24000868 	.word	0x24000868

08001074 <CheckSumRangefinder>:



// 校验和是将DeviceID、FuncCode、Param[4]相加取低8位
uint8_t CheckSumRangefinder(uint8_t *ptr,uint8_t len)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]
    for(int i = 0;i < len;i++)
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	e009      	b.n	800109e <CheckSumRangefinder+0x2a>
    {
        sum += ptr[i];
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4413      	add	r3, r2
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	4413      	add	r3, r2
 8001096:	73fb      	strb	r3, [r7, #15]
    for(int i = 0;i < len;i++)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	3301      	adds	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dbf1      	blt.n	800108a <CheckSumRangefinder+0x16>
    }
    return sum;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <PackRangefinerData>:

void PackRangefinerData(RangefinderDataFrame_t *SendType)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    switch (SendType->FuncCode)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	791b      	ldrb	r3, [r3, #4]
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	dc25      	bgt.n	8001110 <PackRangefinerData+0x5c>
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	dc13      	bgt.n	80010f0 <PackRangefinerData+0x3c>
        {
            SendType->len = 0x02;
            break;
        }
        default:
            break;
 80010c8:	e06e      	b.n	80011a8 <PackRangefinerData+0xf4>
    switch (SendType->FuncCode)
 80010ca:	3ba0      	subs	r3, #160	@ 0xa0
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	d86b      	bhi.n	80011a8 <PackRangefinerData+0xf4>
 80010d0:	a201      	add	r2, pc, #4	@ (adr r2, 80010d8 <PackRangefinerData+0x24>)
 80010d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d6:	bf00      	nop
 80010d8:	0800114b 	.word	0x0800114b
 80010dc:	08001153 	.word	0x08001153
 80010e0:	08001169 	.word	0x08001169
 80010e4:	08001181 	.word	0x08001181
 80010e8:	08001189 	.word	0x08001189
 80010ec:	080011a1 	.word	0x080011a1
 80010f0:	3b01      	subs	r3, #1
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	d858      	bhi.n	80011a8 <PackRangefinerData+0xf4>
 80010f6:	a201      	add	r2, pc, #4	@ (adr r2, 80010fc <PackRangefinerData+0x48>)
 80010f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fc:	0800111b 	.word	0x0800111b
 8001100:	08001123 	.word	0x08001123
 8001104:	0800112b 	.word	0x0800112b
 8001108:	0800113b 	.word	0x0800113b
 800110c:	08001143 	.word	0x08001143
 8001110:	2ba5      	cmp	r3, #165	@ 0xa5
 8001112:	dc49      	bgt.n	80011a8 <PackRangefinerData+0xf4>
 8001114:	2ba0      	cmp	r3, #160	@ 0xa0
 8001116:	dad8      	bge.n	80010ca <PackRangefinerData+0x16>
            break;
 8001118:	e046      	b.n	80011a8 <PackRangefinerData+0xf4>
            SendType->len = 0x02;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2202      	movs	r2, #2
 800111e:	709a      	strb	r2, [r3, #2]
            break;
 8001120:	e043      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x02;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2202      	movs	r2, #2
 8001126:	709a      	strb	r2, [r3, #2]
            break;
 8001128:	e03f      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x03;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2203      	movs	r2, #3
 800112e:	709a      	strb	r2, [r3, #2]
            SendType->Data[5] = cSetTarget;
 8001130:	4b41      	ldr	r3, [pc, #260]	@ (8001238 <PackRangefinerData+0x184>)
 8001132:	781a      	ldrb	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	739a      	strb	r2, [r3, #14]
            break;
 8001138:	e037      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x02;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2202      	movs	r2, #2
 800113e:	709a      	strb	r2, [r3, #2]
            break;
 8001140:	e033      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x02;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2202      	movs	r2, #2
 8001146:	709a      	strb	r2, [r3, #2]
            break;
 8001148:	e02f      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x06;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2206      	movs	r2, #6
 800114e:	709a      	strb	r2, [r3, #2]
            break;
 8001150:	e02b      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x04;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2204      	movs	r2, #4
 8001156:	709a      	strb	r2, [r3, #2]
            SendType->Data[5] = cSetMultiFreq;
 8001158:	4b38      	ldr	r3, [pc, #224]	@ (800123c <PackRangefinerData+0x188>)
 800115a:	781a      	ldrb	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	739a      	strb	r2, [r3, #14]
            SendType->Data[6] = 0x00;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	73da      	strb	r2, [r3, #15]
            break;
 8001166:	e020      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x04;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2204      	movs	r2, #4
 800116c:	709a      	strb	r2, [r3, #2]
            SendType->Data[5] = cSetMinRange.data_u8[1];
 800116e:	4b34      	ldr	r3, [pc, #208]	@ (8001240 <PackRangefinerData+0x18c>)
 8001170:	785a      	ldrb	r2, [r3, #1]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	739a      	strb	r2, [r3, #14]
            SendType->Data[6] = cSetMinRange.data_u8[0];
 8001176:	4b32      	ldr	r3, [pc, #200]	@ (8001240 <PackRangefinerData+0x18c>)
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	73da      	strb	r2, [r3, #15]
            break;
 800117e:	e014      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x02;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2202      	movs	r2, #2
 8001184:	709a      	strb	r2, [r3, #2]
            break;
 8001186:	e010      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x04;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2204      	movs	r2, #4
 800118c:	709a      	strb	r2, [r3, #2]
            SendType->Data[5] = cSetMaxRange.data_u8[1];
 800118e:	4b2d      	ldr	r3, [pc, #180]	@ (8001244 <PackRangefinerData+0x190>)
 8001190:	785a      	ldrb	r2, [r3, #1]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	739a      	strb	r2, [r3, #14]
            SendType->Data[6] = cSetMaxRange.data_u8[0];
 8001196:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <PackRangefinerData+0x190>)
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	73da      	strb	r2, [r3, #15]
            break;
 800119e:	e004      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x02;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2202      	movs	r2, #2
 80011a4:	709a      	strb	r2, [r3, #2]
            break;
 80011a6:	e000      	b.n	80011aa <PackRangefinerData+0xf6>
            break;
 80011a8:	bf00      	nop
    }
    SendType->Data[0] = SendType->head[0];
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	725a      	strb	r2, [r3, #9]
    SendType->Data[1] = SendType->head[1];
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	785a      	ldrb	r2, [r3, #1]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	729a      	strb	r2, [r3, #10]
    SendType->Data[2] = SendType->len;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	789a      	ldrb	r2, [r3, #2]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	72da      	strb	r2, [r3, #11]
    SendType->Data[3] = SendType->DeviceID; 
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	78da      	ldrb	r2, [r3, #3]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	731a      	strb	r2, [r3, #12]
    SendType->Data[4] = SendType->FuncCode;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	791a      	ldrb	r2, [r3, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	735a      	strb	r2, [r3, #13]

    if(SendType->len == 0x02)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	789b      	ldrb	r3, [r3, #2]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d10b      	bne.n	80011f2 <PackRangefinerData+0x13e>
    {
        SendType->Data[5] = CheckSumRangefinder(SendType->Data+3,2);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3309      	adds	r3, #9
 80011de:	3303      	adds	r3, #3
 80011e0:	2102      	movs	r1, #2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff46 	bl	8001074 <CheckSumRangefinder>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	739a      	strb	r2, [r3, #14]
    else if(SendType->len == 0x04)
    {
        SendType->Data[7] = CheckSumRangefinder(SendType->Data+3,4);
    }
    
}
 80011f0:	e01e      	b.n	8001230 <PackRangefinerData+0x17c>
    else if(SendType->len == 0x03)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	789b      	ldrb	r3, [r3, #2]
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d10b      	bne.n	8001212 <PackRangefinerData+0x15e>
        SendType->Data[6] = CheckSumRangefinder(SendType->Data+3,3);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3309      	adds	r3, #9
 80011fe:	3303      	adds	r3, #3
 8001200:	2103      	movs	r1, #3
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff36 	bl	8001074 <CheckSumRangefinder>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	73da      	strb	r2, [r3, #15]
}
 8001210:	e00e      	b.n	8001230 <PackRangefinerData+0x17c>
    else if(SendType->len == 0x04)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	789b      	ldrb	r3, [r3, #2]
 8001216:	2b04      	cmp	r3, #4
 8001218:	d10a      	bne.n	8001230 <PackRangefinerData+0x17c>
        SendType->Data[7] = CheckSumRangefinder(SendType->Data+3,4);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3309      	adds	r3, #9
 800121e:	3303      	adds	r3, #3
 8001220:	2104      	movs	r1, #4
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff26 	bl	8001074 <CheckSumRangefinder>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	741a      	strb	r2, [r3, #16]
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2400044c 	.word	0x2400044c
 800123c:	2400044d 	.word	0x2400044d
 8001240:	24000450 	.word	0x24000450
 8001244:	24000454 	.word	0x24000454

08001248 <Send2RangefinderModule>:


void Send2RangefinderModule(RangefinderDataFrame_t *SendType)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    PackRangefinerData(SendType);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff2f 	bl	80010b4 <PackRangefinerData>
    if(SendType->len == 0x02)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	789b      	ldrb	r3, [r3, #2]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d109      	bne.n	8001272 <Send2RangefinderModule+0x2a>
    {
        HAL_UART_Transmit(&huart7, SendType->Data, 6, 0xffff);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f103 0109 	add.w	r1, r3, #9
 8001264:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001268:	2206      	movs	r2, #6
 800126a:	4815      	ldr	r0, [pc, #84]	@ (80012c0 <Send2RangefinderModule+0x78>)
 800126c:	f00d fd96 	bl	800ed9c <HAL_UART_Transmit>
 8001270:	e01a      	b.n	80012a8 <Send2RangefinderModule+0x60>
    }
    else if(SendType->len == 0x03)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	789b      	ldrb	r3, [r3, #2]
 8001276:	2b03      	cmp	r3, #3
 8001278:	d109      	bne.n	800128e <Send2RangefinderModule+0x46>
    {
        HAL_UART_Transmit(&huart7, SendType->Data, 7, 0xffff);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f103 0109 	add.w	r1, r3, #9
 8001280:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001284:	2207      	movs	r2, #7
 8001286:	480e      	ldr	r0, [pc, #56]	@ (80012c0 <Send2RangefinderModule+0x78>)
 8001288:	f00d fd88 	bl	800ed9c <HAL_UART_Transmit>
 800128c:	e00c      	b.n	80012a8 <Send2RangefinderModule+0x60>
    }
    else if(SendType->len == 0x04)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	789b      	ldrb	r3, [r3, #2]
 8001292:	2b04      	cmp	r3, #4
 8001294:	d108      	bne.n	80012a8 <Send2RangefinderModule+0x60>
    {
        HAL_UART_Transmit(&huart7, SendType->Data, 8, 0xffff);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f103 0109 	add.w	r1, r3, #9
 800129c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012a0:	2208      	movs	r2, #8
 80012a2:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <Send2RangefinderModule+0x78>)
 80012a4:	f00d fd7a 	bl	800ed9c <HAL_UART_Transmit>
    }
    // for(int i = 0;i < 8;i++)
    // {
    //     uart_printf("%02x ", SendType->Data[i]);
    // }
    memset(SendType->Data, 0, 16);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3309      	adds	r3, #9
 80012ac:	2210      	movs	r2, #16
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f024 fa03 	bl	80256bc <memset>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	24000990 	.word	0x24000990

080012c4 <CheckSum>:
TrackingFaultCu_Typedef TrackingFaultCodeCu;
TrackingFaultJing_Typedef TrackingFaultCodeJing;

// 和校验
uint8_t CheckSum(uint8_t *ptr, uint8_t len)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]
    for(int i = 0;i < len;i++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	e009      	b.n	80012ee <CheckSum+0x2a>
    {
        sum += ptr[i];
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	781a      	ldrb	r2, [r3, #0]
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	4413      	add	r3, r2
 80012e6:	73fb      	strb	r3, [r7, #15]
    for(int i = 0;i < len;i++)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	3301      	adds	r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	dbf1      	blt.n	80012da <CheckSum+0x16>
    }
    return sum;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <ServoDataPack>:


void ServoDataPack(SendCmd_Typedef *SendType,ServoSendData_Typedef *ServoData)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
    static uint8_t crc = 0;
    uint8_t check = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	73fb      	strb	r3, [r7, #15]
    SendType->data[3] = ServoData->TurnMode;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	781a      	ldrb	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	719a      	strb	r2, [r3, #6]
    SendType->data[4] = ServoData->MotorEnable;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	785a      	ldrb	r2, [r3, #1]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	71da      	strb	r2, [r3, #7]
    SendType->data[5] = ServoData->Turntable_Yaw >> 8;
    SendType->data[6] = ServoData->Turntable_Yaw;
    SendType->data[7] = ServoData->Turntable_Pitch >> 8;
    SendType->data[8] = ServoData->Turntable_Pitch;
    #else
    SendType->data[5] = ServoData->Turntable_Yaw;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	721a      	strb	r2, [r3, #8]
    SendType->data[6] = ServoData->Turntable_Yaw >> 8;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001334:	121b      	asrs	r3, r3, #8
 8001336:	b21b      	sxth	r3, r3
 8001338:	b2da      	uxtb	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	725a      	strb	r2, [r3, #9]
    SendType->data[7] = ServoData->Turntable_Pitch;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	729a      	strb	r2, [r3, #10]
    SendType->data[8] = ServoData->Turntable_Pitch >> 8;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001350:	121b      	asrs	r3, r3, #8
 8001352:	b21b      	sxth	r3, r3
 8001354:	b2da      	uxtb	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	72da      	strb	r2, [r3, #11]
    #endif

    SendType->data[9] = ServoData->TrackingDataValid;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	799a      	ldrb	r2, [r3, #6]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	731a      	strb	r2, [r3, #12]

    for(int i = 0;i < 4;i++)
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	e018      	b.n	800139a <ServoDataPack+0x96>
    {
        #if BIG_ENDIAN
        SendType->data[10+i] = ServoData->TargetYaw.u8t[3-i];
        SendType->data[14+i] = ServoData->TargetPitch.u8t[3-i];
        #else
        SendType->data[10+i] = ServoData->TargetYaw.u8t[i];
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	330a      	adds	r3, #10
 800136c:	6839      	ldr	r1, [r7, #0]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	440a      	add	r2, r1
 8001372:	3208      	adds	r2, #8
 8001374:	7811      	ldrb	r1, [r2, #0]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	460a      	mov	r2, r1
 800137c:	70da      	strb	r2, [r3, #3]
        SendType->data[14+i] = ServoData->TargetPitch.u8t[i];
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	330e      	adds	r3, #14
 8001382:	6839      	ldr	r1, [r7, #0]
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	440a      	add	r2, r1
 8001388:	320c      	adds	r2, #12
 800138a:	7811      	ldrb	r1, [r2, #0]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	4413      	add	r3, r2
 8001390:	460a      	mov	r2, r1
 8001392:	70da      	strb	r2, [r3, #3]
    for(int i = 0;i < 4;i++)
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	3301      	adds	r3, #1
 8001398:	61fb      	str	r3, [r7, #28]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	2b03      	cmp	r3, #3
 800139e:	dde3      	ble.n	8001368 <ServoDataPack+0x64>
    //   else
    //   {
    //     ServoData->TrackingFaultCleanCu = 0x55;
    //     errorflag = 0;
    //   }
    if(ServoData->TrackingFaultCleanCu == 0x66)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	7c1b      	ldrb	r3, [r3, #16]
 80013a4:	2b66      	cmp	r3, #102	@ 0x66
 80013a6:	d107      	bne.n	80013b8 <ServoDataPack+0xb4>
    {
        SendType->data[18] = ServoData->TrackingFaultCleanCu;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	7c1a      	ldrb	r2, [r3, #16]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	755a      	strb	r2, [r3, #21]
        ServoData->TrackingFaultCleanCu = 0x55;     
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2255      	movs	r2, #85	@ 0x55
 80013b4:	741a      	strb	r2, [r3, #16]
 80013b6:	e002      	b.n	80013be <ServoDataPack+0xba>
    }else
    {
        SendType->data[18] = 0x55;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2255      	movs	r2, #85	@ 0x55
 80013bc:	755a      	strb	r2, [r3, #21]
    }

    // SendType->data[18] = ServoData->TrackingFaultCleanCu;
    SendType->data[19] = ServoData->FSMMode;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	7c5a      	ldrb	r2, [r3, #17]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	759a      	strb	r2, [r3, #22]
    SendType->data[20] = ServoData->ControlEnableJing;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	7c9a      	ldrb	r2, [r3, #18]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	75da      	strb	r2, [r3, #23]

    for(int i = 0;i < 4;i++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
 80013d2:	e02e      	b.n	8001432 <ServoDataPack+0x12e>
        SendType->data[21+i] = ServoData->TargetFSMYaw.u8t[3-i];
        SendType->data[25+i] = ServoData->TargetFSMPitch.u8t[3-i];
        SendType->data[29+i] = ServoData->ZeroCorrectionFSMX.u8t[3-i];
        SendType->data[33+i] = ServoData->ZeroCorrectionFSMY.u8t[3-i];
        #else
        SendType->data[21+i] = ServoData->TargetFSMYaw.u8t[i];
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	3315      	adds	r3, #21
 80013d8:	6839      	ldr	r1, [r7, #0]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	440a      	add	r2, r1
 80013de:	3214      	adds	r2, #20
 80013e0:	7811      	ldrb	r1, [r2, #0]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	460a      	mov	r2, r1
 80013e8:	70da      	strb	r2, [r3, #3]
        SendType->data[25+i] = ServoData->TargetFSMPitch.u8t[i];
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	3319      	adds	r3, #25
 80013ee:	6839      	ldr	r1, [r7, #0]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	440a      	add	r2, r1
 80013f4:	3218      	adds	r2, #24
 80013f6:	7811      	ldrb	r1, [r2, #0]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	460a      	mov	r2, r1
 80013fe:	70da      	strb	r2, [r3, #3]
        SendType->data[29+i] = ServoData->ZeroCorrectionFSMX.u8t[i];
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	331d      	adds	r3, #29
 8001404:	6839      	ldr	r1, [r7, #0]
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	440a      	add	r2, r1
 800140a:	321c      	adds	r2, #28
 800140c:	7811      	ldrb	r1, [r2, #0]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	460a      	mov	r2, r1
 8001414:	70da      	strb	r2, [r3, #3]
        SendType->data[33+i] = ServoData->ZeroCorrectionFSMY.u8t[i];
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	3321      	adds	r3, #33	@ 0x21
 800141a:	6839      	ldr	r1, [r7, #0]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	440a      	add	r2, r1
 8001420:	3220      	adds	r2, #32
 8001422:	7811      	ldrb	r1, [r2, #0]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	460a      	mov	r2, r1
 800142a:	70da      	strb	r2, [r3, #3]
    for(int i = 0;i < 4;i++)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	3301      	adds	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b03      	cmp	r3, #3
 8001436:	ddcd      	ble.n	80013d4 <ServoDataPack+0xd0>
        #endif
    }

    for(int i = 0;i < 2;i++)
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e01c      	b.n	8001478 <ServoDataPack+0x174>
    {
        #if BIG_ENDIAN
        SendType->data[37+i] = ServoData->MousePointX >> 8*(1-i);
        SendType->data[39+i] = ServoData->MousePointY >> 8*(1-i);
        #else
        SendType->data[37+i] = ServoData->MousePointX >> 8*i;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001442:	461a      	mov	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	411a      	asrs	r2, r3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3325      	adds	r3, #37	@ 0x25
 800144e:	b2d1      	uxtb	r1, r2
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	4413      	add	r3, r2
 8001454:	460a      	mov	r2, r1
 8001456:	70da      	strb	r2, [r3, #3]
        SendType->data[39+i] = ServoData->MousePointY >> 8*i;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800145c:	461a      	mov	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	411a      	asrs	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	3327      	adds	r3, #39	@ 0x27
 8001468:	b2d1      	uxtb	r1, r2
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	460a      	mov	r2, r1
 8001470:	70da      	strb	r2, [r3, #3]
    for(int i = 0;i < 2;i++)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b01      	cmp	r3, #1
 800147c:	dddf      	ble.n	800143e <ServoDataPack+0x13a>
        #endif
    }

    SendType->data[41] = ServoData->MousePointJing;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    //   else
    //   {
    //     errorflag = 0;
    //     ServoData->TrackingFaultCleanJing = 0x55;
    //   }
    if(ServoData->TrackingFaultCleanJing == 0x33)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001490:	2b33      	cmp	r3, #51	@ 0x33
 8001492:	d10a      	bne.n	80014aa <ServoDataPack+0x1a6>
    {
        SendType->data[42] = ServoData->TrackingFaultCleanJing;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        ServoData->TrackingFaultCleanJing = 0x55;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2255      	movs	r2, #85	@ 0x55
 80014a4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 80014a8:	e003      	b.n	80014b2 <ServoDataPack+0x1ae>
    }else
    {
        SendType->data[42] = 0x55;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2255      	movs	r2, #85	@ 0x55
 80014ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
    // SendType->data[42] = ServoData->TrackingFaultCleanJing;

    for(int i = 0;i < 4;i++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	e00d      	b.n	80014d4 <ServoDataPack+0x1d0>
    {
        #if BIG_ENDIAN
        SendType->data[43+i] = ServoData->AngleJing.u8t[3-i];
        #else
        SendType->data[43+i] = ServoData->AngleJing.u8t[i];
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	332b      	adds	r3, #43	@ 0x2b
 80014bc:	6839      	ldr	r1, [r7, #0]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	440a      	add	r2, r1
 80014c2:	322c      	adds	r2, #44	@ 0x2c
 80014c4:	7811      	ldrb	r1, [r2, #0]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	460a      	mov	r2, r1
 80014cc:	70da      	strb	r2, [r3, #3]
    for(int i = 0;i < 4;i++)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	3301      	adds	r3, #1
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	ddee      	ble.n	80014b8 <ServoDataPack+0x1b4>
        #endif
    }
    SendType->crc = crc;
 80014da:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <ServoDataPack+0x23c>)
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    SendType->data[0] = SendType->head[0];
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	70da      	strb	r2, [r3, #3]
    SendType->data[1] = SendType->head[1];
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	785a      	ldrb	r2, [r3, #1]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	711a      	strb	r2, [r3, #4]
    SendType->data[2] = SendType->len;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	789a      	ldrb	r2, [r3, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	715a      	strb	r2, [r3, #5]
    SendType->data[47] = crc;
 80014fc:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <ServoDataPack+0x23c>)
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    check = CheckSum(SendType->data, 48);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3303      	adds	r3, #3
 800150a:	2130      	movs	r1, #48	@ 0x30
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fed9 	bl	80012c4 <CheckSum>
 8001512:	4603      	mov	r3, r0
 8001514:	73fb      	strb	r3, [r7, #15]
    SendType->data[48] = check;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    SendType->data[49] = SendType->end;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 2037 	ldrb.w	r2, [r3, #55]	@ 0x37
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    crc++;
 800152a:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <ServoDataPack+0x23c>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <ServoDataPack+0x23c>)
 8001534:	701a      	strb	r2, [r3, #0]

}
 8001536:	bf00      	nop
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	240004b5 	.word	0x240004b5

08001544 <ServoDataSend>:

void ServoDataSend(SendCmd_Typedef *SendType,ServoSendData_Typedef *ServoData)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
        ServoDataPack(SendType, ServoData);
 800154e:	6839      	ldr	r1, [r7, #0]
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fed7 	bl	8001304 <ServoDataPack>
        // {
        //     uart_printf("%02x ", SendType->data[i]);
        //     // HAL_UART_Transmit(&huart5, SendType->data, 50, 0xffff);
        // }
        // uart_printf("\r\n");
        if(errorflag)
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <ServoDataSend+0x38>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <ServoDataSend+0x20>
        {
            // HAL_UART_Transmit(&huart5, SendType->data, 50, 0xffff);
            errorflag = 0;
 800155e:	4b07      	ldr	r3, [pc, #28]	@ (800157c <ServoDataSend+0x38>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
        }
        // uart_printf("errorflag = %d\r\n",errorflag);
        HAL_UART_Transmit(&huart5, SendType->data, 50, HAL_MAX_DELAY);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	1cd9      	adds	r1, r3, #3
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
 800156c:	2232      	movs	r2, #50	@ 0x32
 800156e:	4804      	ldr	r0, [pc, #16]	@ (8001580 <ServoDataSend+0x3c>)
 8001570:	f00d fc14 	bl	800ed9c <HAL_UART_Transmit>
        // memset(SendType->data, 0, 50);
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	24000456 	.word	0x24000456
 8001580:	240008fc 	.word	0x240008fc

08001584 <processControl>:
uint8_t offset_flag = 0;
uint8_t laserChange = 0;
uint8_t imgFlag[2] = {0};

void processControl()
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b087      	sub	sp, #28
 8001588:	af06      	add	r7, sp, #24
    if(state == STATE_INIT){
 800158a:	4b21      	ldr	r3, [pc, #132]	@ (8001610 <processControl+0x8c>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d111      	bne.n	80015b6 <processControl+0x32>
        
        RangefinderDataFrameSend.FuncCode = SetMultiFreq;
 8001592:	4b20      	ldr	r3, [pc, #128]	@ (8001614 <processControl+0x90>)
 8001594:	22a1      	movs	r2, #161	@ 0xa1
 8001596:	711a      	strb	r2, [r3, #4]
        cSetMultiFreq = 0x0A;
 8001598:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <processControl+0x94>)
 800159a:	220a      	movs	r2, #10
 800159c:	701a      	strb	r2, [r3, #0]
        Send2RangefinderModule(&RangefinderDataFrameSend);
 800159e:	481d      	ldr	r0, [pc, #116]	@ (8001614 <processControl+0x90>)
 80015a0:	f7ff fe52 	bl	8001248 <Send2RangefinderModule>
        state = STATE_STANDBY;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <processControl+0x8c>)
 80015a6:	2202      	movs	r2, #2
 80015a8:	701a      	strb	r2, [r3, #0]

//        setFocusPos.f = 0;
//        SendFocusFrame.func = SetPos;
//        SendFocusData(&SendFocusFrame);
         SendFocusFrame.func = ClearPos;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <processControl+0x98>)
 80015ac:	221b      	movs	r2, #27
 80015ae:	70da      	strb	r2, [r3, #3]
         SendFocusData(&SendFocusFrame);
 80015b0:	481a      	ldr	r0, [pc, #104]	@ (800161c <processControl+0x98>)
 80015b2:	f7ff fa79 	bl	8000aa8 <SendFocusData>
    }



    // 系统状态 
    if(stateChange == 1)
 80015b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <processControl+0x9c>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d141      	bne.n	8001642 <processControl+0xbe>
    {
        stateChange = 0;
 80015be:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <processControl+0x9c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
        if(CommandTypedef.go2Zero == 1)
 80015c4:	4b17      	ldr	r3, [pc, #92]	@ (8001624 <processControl+0xa0>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d103      	bne.n	80015d4 <processControl+0x50>
            // go2Zero(); //! 还没定下零位
        // HAL_GPIO_WritePin(RF_PWD_GPIO_Port,RF_PWD_Pin,GPIO_PIN_SET);
        // RangefinderDataFrameSend.FuncCode = SetMultiFreq;
        // cSetMultiFreq = 0x0A;
        // Send2RangefinderModule(&RangefinderDataFrameSend);
            state = STATE_ZERO;
 80015cc:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <processControl+0x8c>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e036      	b.n	8001642 <processControl+0xbe>
        }
        else if(CommandTypedef.standbyEnable == 1)
 80015d4:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <processControl+0xa0>)
 80015d6:	785b      	ldrb	r3, [r3, #1]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <processControl+0x64>
        {
            standbyEnable();
 80015dc:	f000 fb00 	bl	8001be0 <standbyEnable>
            state = STATE_STANDBY;
 80015e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <processControl+0x8c>)
 80015e2:	2202      	movs	r2, #2
 80015e4:	701a      	strb	r2, [r3, #0]
 80015e6:	e02c      	b.n	8001642 <processControl+0xbe>
        }
        else if(CommandTypedef.catchEnable == 1)
 80015e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <processControl+0xa0>)
 80015ea:	795b      	ldrb	r3, [r3, #5]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <processControl+0x78>
        {
            catchEnable();
 80015f0:	f000 fbba 	bl	8001d68 <catchEnable>
            state = STATE_CATCH;
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <processControl+0x8c>)
 80015f6:	2206      	movs	r2, #6
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	e022      	b.n	8001642 <processControl+0xbe>
        }
        else if(CommandTypedef.guideEnable == 1)
 80015fc:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <processControl+0xa0>)
 80015fe:	791b      	ldrb	r3, [r3, #4]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d111      	bne.n	8001628 <processControl+0xa4>
        {
            guideEnable();
 8001604:	f000 fb64 	bl	8001cd0 <guideEnable>
            state = STATE_GUIDE;
 8001608:	4b01      	ldr	r3, [pc, #4]	@ (8001610 <processControl+0x8c>)
 800160a:	2204      	movs	r2, #4
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	e018      	b.n	8001642 <processControl+0xbe>
 8001610:	240004b6 	.word	0x240004b6
 8001614:	24000100 	.word	0x24000100
 8001618:	2400044d 	.word	0x2400044d
 800161c:	24000000 	.word	0x24000000
 8001620:	240004b7 	.word	0x240004b7
 8001624:	24000184 	.word	0x24000184
        }
        else if(CommandTypedef.standbyDisable == 1 && state == STATE_STANDBY)
 8001628:	4b95      	ldr	r3, [pc, #596]	@ (8001880 <processControl+0x2fc>)
 800162a:	789b      	ldrb	r3, [r3, #2]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d108      	bne.n	8001642 <processControl+0xbe>
 8001630:	4b94      	ldr	r3, [pc, #592]	@ (8001884 <processControl+0x300>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d104      	bne.n	8001642 <processControl+0xbe>
        {
            standbyDisable();
 8001638:	f000 fb34 	bl	8001ca4 <standbyDisable>
            state = STATE_STANDBYDISABLE; // 待机状态进入待机禁止状态
 800163c:	4b91      	ldr	r3, [pc, #580]	@ (8001884 <processControl+0x300>)
 800163e:	2203      	movs	r2, #3
 8001640:	701a      	strb	r2, [r3, #0]
        }
    }

    // 伺服状态
    if((servo_flag == 1) || (sifuFlag.turnStateFlag == 1) || (sifuFlag.FSMModeFlag == 1) || (sifuFlag.controlEnableJingFlag == 1) || (sifuFlag.motorEnableFlag == 1) || (sifuFlag.dgFlag == 1))
 8001642:	4b91      	ldr	r3, [pc, #580]	@ (8001888 <processControl+0x304>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d014      	beq.n	8001674 <processControl+0xf0>
 800164a:	4b90      	ldr	r3, [pc, #576]	@ (800188c <processControl+0x308>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d010      	beq.n	8001674 <processControl+0xf0>
 8001652:	4b8e      	ldr	r3, [pc, #568]	@ (800188c <processControl+0x308>)
 8001654:	78db      	ldrb	r3, [r3, #3]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d00c      	beq.n	8001674 <processControl+0xf0>
 800165a:	4b8c      	ldr	r3, [pc, #560]	@ (800188c <processControl+0x308>)
 800165c:	791b      	ldrb	r3, [r3, #4]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d008      	beq.n	8001674 <processControl+0xf0>
 8001662:	4b8a      	ldr	r3, [pc, #552]	@ (800188c <processControl+0x308>)
 8001664:	785b      	ldrb	r3, [r3, #1]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d004      	beq.n	8001674 <processControl+0xf0>
 800166a:	4b88      	ldr	r3, [pc, #544]	@ (800188c <processControl+0x308>)
 800166c:	795b      	ldrb	r3, [r3, #5]
 800166e:	2b01      	cmp	r3, #1
 8001670:	f040 809c 	bne.w	80017ac <processControl+0x228>
    {
        if(servo_flag == 1 && state == STATE_GUIDE)
 8001674:	4b84      	ldr	r3, [pc, #528]	@ (8001888 <processControl+0x304>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d135      	bne.n	80016e8 <processControl+0x164>
 800167c:	4b81      	ldr	r3, [pc, #516]	@ (8001884 <processControl+0x300>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b04      	cmp	r3, #4
 8001682:	d131      	bne.n	80016e8 <processControl+0x164>
        {
            servo_flag = 0;
 8001684:	4b80      	ldr	r3, [pc, #512]	@ (8001888 <processControl+0x304>)
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
            ServoDataSendTypedef.TargetYaw = CommandTypedef.turnYaw;
 800168a:	4a81      	ldr	r2, [pc, #516]	@ (8001890 <processControl+0x30c>)
 800168c:	4b7c      	ldr	r3, [pc, #496]	@ (8001880 <processControl+0x2fc>)
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	6093      	str	r3, [r2, #8]
            ServoDataSendTypedef.TargetPitch = CommandTypedef.turnPitch;
 8001692:	4a7f      	ldr	r2, [pc, #508]	@ (8001890 <processControl+0x30c>)
 8001694:	4b7a      	ldr	r3, [pc, #488]	@ (8001880 <processControl+0x2fc>)
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	60d3      	str	r3, [r2, #12]
            ServoDataSendTypedef.TargetFSMYaw = CommandTypedef.FSM_Yaw;
 800169a:	4a7d      	ldr	r2, [pc, #500]	@ (8001890 <processControl+0x30c>)
 800169c:	4b78      	ldr	r3, [pc, #480]	@ (8001880 <processControl+0x2fc>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	6153      	str	r3, [r2, #20]
            ServoDataSendTypedef.TargetFSMPitch = CommandTypedef.FSM_Pitch;
 80016a2:	4a7b      	ldr	r2, [pc, #492]	@ (8001890 <processControl+0x30c>)
 80016a4:	4b76      	ldr	r3, [pc, #472]	@ (8001880 <processControl+0x2fc>)
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	6193      	str	r3, [r2, #24]
            uart_printf("TargetYaw:%f,TargetPitch:%f,TargetFSMYaw:%f,TargetFSMPitch:%f\n",CommandTypedef.turnYaw.f,CommandTypedef.turnPitch.f,CommandTypedef.FSM_Yaw.f,CommandTypedef.FSM_Pitch.f);
 80016aa:	4b75      	ldr	r3, [pc, #468]	@ (8001880 <processControl+0x2fc>)
 80016ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80016b0:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80016b4:	4b72      	ldr	r3, [pc, #456]	@ (8001880 <processControl+0x2fc>)
 80016b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80016ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016be:	4b70      	ldr	r3, [pc, #448]	@ (8001880 <processControl+0x2fc>)
 80016c0:	edd3 6a06 	vldr	s13, [r3, #24]
 80016c4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80016c8:	4b6d      	ldr	r3, [pc, #436]	@ (8001880 <processControl+0x2fc>)
 80016ca:	edd3 5a07 	vldr	s11, [r3, #28]
 80016ce:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80016d2:	ed8d 5b04 	vstr	d5, [sp, #16]
 80016d6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80016da:	ed8d 7b00 	vstr	d7, [sp]
 80016de:	ec53 2b14 	vmov	r2, r3, d4
 80016e2:	486c      	ldr	r0, [pc, #432]	@ (8001894 <processControl+0x310>)
 80016e4:	f003 fc4a 	bl	8004f7c <uart_printf>
        }
        if(sifuFlag.turnStateFlag == 1) // 设置转台工作模式
 80016e8:	4b68      	ldr	r3, [pc, #416]	@ (800188c <processControl+0x308>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d11b      	bne.n	8001728 <processControl+0x1a4>
        {
            sifuFlag.turnStateFlag = 0;
 80016f0:	4b66      	ldr	r3, [pc, #408]	@ (800188c <processControl+0x308>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
            ServoDataSendTypedef.TurnMode = CommandTypedef.setTurnState;
 80016f6:	4b62      	ldr	r3, [pc, #392]	@ (8001880 <processControl+0x2fc>)
 80016f8:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 80016fc:	4b64      	ldr	r3, [pc, #400]	@ (8001890 <processControl+0x30c>)
 80016fe:	701a      	strb	r2, [r3, #0]
            if(ServoDataSendTypedef.TurnMode == TurntableTrackingState_GUIDE)
 8001700:	4b63      	ldr	r3, [pc, #396]	@ (8001890 <processControl+0x30c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2bb2      	cmp	r3, #178	@ 0xb2
 8001706:	d10f      	bne.n	8001728 <processControl+0x1a4>
            {
                ServoDataSendTypedef.TargetPitch.f = ServoRevTypedef.ServoPitchPos.f;
 8001708:	4b63      	ldr	r3, [pc, #396]	@ (8001898 <processControl+0x314>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4a60      	ldr	r2, [pc, #384]	@ (8001890 <processControl+0x30c>)
 800170e:	60d3      	str	r3, [r2, #12]
                ServoDataSendTypedef.TargetYaw.f = ServoRevTypedef.ServoYawPos.f;
 8001710:	4b61      	ldr	r3, [pc, #388]	@ (8001898 <processControl+0x314>)
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	4a5e      	ldr	r2, [pc, #376]	@ (8001890 <processControl+0x30c>)
 8001716:	6093      	str	r3, [r2, #8]
                ServoDataSendTypedef.TargetFSMYaw.f = ServoRevTypedef.FSMXPos.f;
 8001718:	4b5f      	ldr	r3, [pc, #380]	@ (8001898 <processControl+0x314>)
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	4a5c      	ldr	r2, [pc, #368]	@ (8001890 <processControl+0x30c>)
 800171e:	6153      	str	r3, [r2, #20]
                ServoDataSendTypedef.TargetFSMPitch.f = ServoRevTypedef.FSMYPos.f;
 8001720:	4b5d      	ldr	r3, [pc, #372]	@ (8001898 <processControl+0x314>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a5a      	ldr	r2, [pc, #360]	@ (8001890 <processControl+0x30c>)
 8001726:	6193      	str	r3, [r2, #24]
            }
        }
        if(sifuFlag.FSMModeFlag == 1)
 8001728:	4b58      	ldr	r3, [pc, #352]	@ (800188c <processControl+0x308>)
 800172a:	78db      	ldrb	r3, [r3, #3]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d107      	bne.n	8001740 <processControl+0x1bc>
        {
            sifuFlag.FSMModeFlag = 0;
 8001730:	4b56      	ldr	r3, [pc, #344]	@ (800188c <processControl+0x308>)
 8001732:	2200      	movs	r2, #0
 8001734:	70da      	strb	r2, [r3, #3]
            ServoDataSendTypedef.FSMMode = CommandTypedef.setFSMState;
 8001736:	4b52      	ldr	r3, [pc, #328]	@ (8001880 <processControl+0x2fc>)
 8001738:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 800173c:	4b54      	ldr	r3, [pc, #336]	@ (8001890 <processControl+0x30c>)
 800173e:	745a      	strb	r2, [r3, #17]
        }
        if(sifuFlag.controlEnableJingFlag == 1)
 8001740:	4b52      	ldr	r3, [pc, #328]	@ (800188c <processControl+0x308>)
 8001742:	791b      	ldrb	r3, [r3, #4]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d10c      	bne.n	8001762 <processControl+0x1de>
        {
            sifuFlag.controlEnableJingFlag = 0;
 8001748:	4b50      	ldr	r3, [pc, #320]	@ (800188c <processControl+0x308>)
 800174a:	2200      	movs	r2, #0
 800174c:	711a      	strb	r2, [r3, #4]
            ServoDataSendTypedef.ControlEnableJing = CommandTypedef.trackJingEnable;
 800174e:	4b4c      	ldr	r3, [pc, #304]	@ (8001880 <processControl+0x2fc>)
 8001750:	7a5a      	ldrb	r2, [r3, #9]
 8001752:	4b4f      	ldr	r3, [pc, #316]	@ (8001890 <processControl+0x30c>)
 8001754:	749a      	strb	r2, [r3, #18]
            uart_printf("trackJingEnable:%d\n",CommandTypedef.trackJingEnable);
 8001756:	4b4a      	ldr	r3, [pc, #296]	@ (8001880 <processControl+0x2fc>)
 8001758:	7a5b      	ldrb	r3, [r3, #9]
 800175a:	4619      	mov	r1, r3
 800175c:	484f      	ldr	r0, [pc, #316]	@ (800189c <processControl+0x318>)
 800175e:	f003 fc0d 	bl	8004f7c <uart_printf>
        }
        if(sifuFlag.motorEnableFlag == 1) // 设置转台电机使能
 8001762:	4b4a      	ldr	r3, [pc, #296]	@ (800188c <processControl+0x308>)
 8001764:	785b      	ldrb	r3, [r3, #1]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d107      	bne.n	800177a <processControl+0x1f6>
        {
            sifuFlag.motorEnableFlag = 0;
 800176a:	4b48      	ldr	r3, [pc, #288]	@ (800188c <processControl+0x308>)
 800176c:	2200      	movs	r2, #0
 800176e:	705a      	strb	r2, [r3, #1]
            ServoDataSendTypedef.MotorEnable = CommandTypedef.motorEnable;
 8001770:	4b43      	ldr	r3, [pc, #268]	@ (8001880 <processControl+0x2fc>)
 8001772:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8001776:	4b46      	ldr	r3, [pc, #280]	@ (8001890 <processControl+0x30c>)
 8001778:	705a      	strb	r2, [r3, #1]
        }
        if(ServoDataSendTypedef.TurnMode == TurntableTrackingState_CLOSE_LOOP && sifuFlag.dgFlag == 1)
 800177a:	4b45      	ldr	r3, [pc, #276]	@ (8001890 <processControl+0x30c>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2bb0      	cmp	r3, #176	@ 0xb0
 8001780:	d110      	bne.n	80017a4 <processControl+0x220>
 8001782:	4b42      	ldr	r3, [pc, #264]	@ (800188c <processControl+0x308>)
 8001784:	795b      	ldrb	r3, [r3, #5]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d10c      	bne.n	80017a4 <processControl+0x220>
        {
            sifuFlag.dgFlag = 0;
 800178a:	4b40      	ldr	r3, [pc, #256]	@ (800188c <processControl+0x308>)
 800178c:	2200      	movs	r2, #0
 800178e:	715a      	strb	r2, [r3, #5]
            ServoDataSendTypedef.Turntable_Pitch = CommandTypedef.dgPitch;
 8001790:	4b3b      	ldr	r3, [pc, #236]	@ (8001880 <processControl+0x2fc>)
 8001792:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	@ 0x4c
 8001796:	4b3e      	ldr	r3, [pc, #248]	@ (8001890 <processControl+0x30c>)
 8001798:	809a      	strh	r2, [r3, #4]
            ServoDataSendTypedef.Turntable_Yaw = CommandTypedef.dgYaw;
 800179a:	4b39      	ldr	r3, [pc, #228]	@ (8001880 <processControl+0x2fc>)
 800179c:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	@ 0x4e
 80017a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001890 <processControl+0x30c>)
 80017a2:	805a      	strh	r2, [r3, #2]
            // uart_printf("dgPitch:%d,dgYaw:%d\n",CommandTypedef.dgPitch,CommandTypedef.dgYaw);
        }
        ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 80017a4:	493a      	ldr	r1, [pc, #232]	@ (8001890 <processControl+0x30c>)
 80017a6:	483e      	ldr	r0, [pc, #248]	@ (80018a0 <processControl+0x31c>)
 80017a8:	f7ff fecc 	bl	8001544 <ServoDataSend>
    }

    if(laserChange == 1)
 80017ac:	4b3d      	ldr	r3, [pc, #244]	@ (80018a4 <processControl+0x320>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d112      	bne.n	80017da <processControl+0x256>
    {
        laserChange = 0;
 80017b4:	4b3b      	ldr	r3, [pc, #236]	@ (80018a4 <processControl+0x320>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
        setFocusPos.f = (float)CommandTypedef.laserAdjust;
 80017ba:	4b31      	ldr	r3, [pc, #196]	@ (8001880 <processControl+0x2fc>)
 80017bc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c8:	4b37      	ldr	r3, [pc, #220]	@ (80018a8 <processControl+0x324>)
 80017ca:	edc3 7a00 	vstr	s15, [r3]
        SendFocusFrame.func = SetPos;
 80017ce:	4b37      	ldr	r3, [pc, #220]	@ (80018ac <processControl+0x328>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	70da      	strb	r2, [r3, #3]
        SendFocusData(&SendFocusFrame);
 80017d4:	4835      	ldr	r0, [pc, #212]	@ (80018ac <processControl+0x328>)
 80017d6:	f7ff f967 	bl	8000aa8 <SendFocusData>
    }

    if(manual_flag == 1 && state == STATE_CATCH) //手动模式
 80017da:	4b35      	ldr	r3, [pc, #212]	@ (80018b0 <processControl+0x32c>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	f040 80a7 	bne.w	8001932 <processControl+0x3ae>
 80017e4:	4b27      	ldr	r3, [pc, #156]	@ (8001884 <processControl+0x300>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b06      	cmp	r3, #6
 80017ea:	f040 80a2 	bne.w	8001932 <processControl+0x3ae>
    {
        manual_flag = 0;
 80017ee:	4b30      	ldr	r3, [pc, #192]	@ (80018b0 <processControl+0x32c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
        if(CommandTypedef.manual_cj == 1)
 80017f4:	4b22      	ldr	r3, [pc, #136]	@ (8001880 <processControl+0x2fc>)
 80017f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d11d      	bne.n	800183a <processControl+0x2b6>
        {
            ImgSendTypedef_CU.FuncCode = SETTING_TRACK;
 80017fe:	4b2d      	ldr	r3, [pc, #180]	@ (80018b4 <processControl+0x330>)
 8001800:	2208      	movs	r2, #8
 8001802:	719a      	strb	r2, [r3, #6]
            ImgSendTypedef_CU.FuncSubCode = MANUAL_TRACK;
 8001804:	4b2b      	ldr	r3, [pc, #172]	@ (80018b4 <processControl+0x330>)
 8001806:	2203      	movs	r2, #3
 8001808:	71da      	strb	r2, [r3, #7]
            ImgSendDataTypedef_CU.ManualTracking.TrackingCenterX = CommandTypedef.manual_center_x;
 800180a:	4b1d      	ldr	r3, [pc, #116]	@ (8001880 <processControl+0x2fc>)
 800180c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800180e:	4b2a      	ldr	r3, [pc, #168]	@ (80018b8 <processControl+0x334>)
 8001810:	835a      	strh	r2, [r3, #26]
            ImgSendDataTypedef_CU.ManualTracking.TrackingCenterY = CommandTypedef.manual_center_y;
 8001812:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <processControl+0x2fc>)
 8001814:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8001816:	4b28      	ldr	r3, [pc, #160]	@ (80018b8 <processControl+0x334>)
 8001818:	839a      	strh	r2, [r3, #28]
            ImgSendDataTypedef_CU.ManualTracking.TrackingWidth = CommandTypedef.manual_width;
 800181a:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <processControl+0x2fc>)
 800181c:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800181e:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <processControl+0x334>)
 8001820:	83da      	strh	r2, [r3, #30]
            ImgSendDataTypedef_CU.ManualTracking.TrackingHeight = CommandTypedef.manual_height;
 8001822:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <processControl+0x2fc>)
 8001824:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 8001826:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <processControl+0x334>)
 8001828:	841a      	strh	r2, [r3, #32]
            uart_printf("cu\n");
 800182a:	4824      	ldr	r0, [pc, #144]	@ (80018bc <processControl+0x338>)
 800182c:	f003 fba6 	bl	8004f7c <uart_printf>
            Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001830:	4921      	ldr	r1, [pc, #132]	@ (80018b8 <processControl+0x334>)
 8001832:	4820      	ldr	r0, [pc, #128]	@ (80018b4 <processControl+0x330>)
 8001834:	f7ff fbe4 	bl	8001000 <Send2ImgModule>
 8001838:	e064      	b.n	8001904 <processControl+0x380>
        }else if(CommandTypedef.manual_cj == 2){
 800183a:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <processControl+0x2fc>)
 800183c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001840:	2b02      	cmp	r3, #2
 8001842:	d143      	bne.n	80018cc <processControl+0x348>
            // TODO: 参数还需要改 这是粗相机的参数

            ImgSendTypedef_JING.FuncCode = SETTING_TRACK;
 8001844:	4b1e      	ldr	r3, [pc, #120]	@ (80018c0 <processControl+0x33c>)
 8001846:	2208      	movs	r2, #8
 8001848:	719a      	strb	r2, [r3, #6]
            ImgSendTypedef_JING.FuncSubCode = MANUAL_TRACK;
 800184a:	4b1d      	ldr	r3, [pc, #116]	@ (80018c0 <processControl+0x33c>)
 800184c:	2203      	movs	r2, #3
 800184e:	71da      	strb	r2, [r3, #7]
            ImgSendDataTypedef_JING.ManualTracking.TrackingCenterX = CommandTypedef.manual_center_x;
 8001850:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <processControl+0x2fc>)
 8001852:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8001854:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <processControl+0x340>)
 8001856:	835a      	strh	r2, [r3, #26]
            ImgSendDataTypedef_JING.ManualTracking.TrackingCenterY = CommandTypedef.manual_center_y;
 8001858:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <processControl+0x2fc>)
 800185a:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 800185c:	4b19      	ldr	r3, [pc, #100]	@ (80018c4 <processControl+0x340>)
 800185e:	839a      	strh	r2, [r3, #28]
            ImgSendDataTypedef_JING.ManualTracking.TrackingWidth = CommandTypedef.manual_width;
 8001860:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <processControl+0x2fc>)
 8001862:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8001864:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <processControl+0x340>)
 8001866:	83da      	strh	r2, [r3, #30]
            ImgSendDataTypedef_JING.ManualTracking.TrackingHeight = CommandTypedef.manual_height;
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <processControl+0x2fc>)
 800186a:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 800186c:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <processControl+0x340>)
 800186e:	841a      	strh	r2, [r3, #32]
            Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8001870:	4914      	ldr	r1, [pc, #80]	@ (80018c4 <processControl+0x340>)
 8001872:	4813      	ldr	r0, [pc, #76]	@ (80018c0 <processControl+0x33c>)
 8001874:	f7ff fbc4 	bl	8001000 <Send2ImgModule>
            uart_printf("jing\n");
 8001878:	4813      	ldr	r0, [pc, #76]	@ (80018c8 <processControl+0x344>)
 800187a:	f003 fb7f 	bl	8004f7c <uart_printf>
 800187e:	e041      	b.n	8001904 <processControl+0x380>
 8001880:	24000184 	.word	0x24000184
 8001884:	240004b6 	.word	0x240004b6
 8001888:	240004c2 	.word	0x240004c2
 800188c:	240004b8 	.word	0x240004b8
 8001890:	24000154 	.word	0x24000154
 8001894:	08029278 	.word	0x08029278
 8001898:	24000458 	.word	0x24000458
 800189c:	080292b8 	.word	0x080292b8
 80018a0:	2400011c 	.word	0x2400011c
 80018a4:	240004c8 	.word	0x240004c8
 80018a8:	240003fc 	.word	0x240003fc
 80018ac:	24000000 	.word	0x24000000
 80018b0:	240001d8 	.word	0x240001d8
 80018b4:	24000018 	.word	0x24000018
 80018b8:	24000064 	.word	0x24000064
 80018bc:	080292cc 	.word	0x080292cc
 80018c0:	2400008c 	.word	0x2400008c
 80018c4:	240000d8 	.word	0x240000d8
 80018c8:	080292d0 	.word	0x080292d0
        }
        else if(CommandTypedef.manual_cj == 3)
 80018cc:	4b9f      	ldr	r3, [pc, #636]	@ (8001b4c <processControl+0x5c8>)
 80018ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d116      	bne.n	8001904 <processControl+0x380>
        {
            ImgSendTypedef_CU.FuncCode = SETTING_TRACK;
 80018d6:	4b9e      	ldr	r3, [pc, #632]	@ (8001b50 <processControl+0x5cc>)
 80018d8:	2208      	movs	r2, #8
 80018da:	719a      	strb	r2, [r3, #6]
            ImgSendTypedef_CU.FuncSubCode = STANDBY_MODE;
 80018dc:	4b9c      	ldr	r3, [pc, #624]	@ (8001b50 <processControl+0x5cc>)
 80018de:	2201      	movs	r2, #1
 80018e0:	71da      	strb	r2, [r3, #7]
            Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 80018e2:	499c      	ldr	r1, [pc, #624]	@ (8001b54 <processControl+0x5d0>)
 80018e4:	489a      	ldr	r0, [pc, #616]	@ (8001b50 <processControl+0x5cc>)
 80018e6:	f7ff fb8b 	bl	8001000 <Send2ImgModule>
            ImgSendTypedef_JING.FuncCode = SETTING_TRACK;
 80018ea:	4b9b      	ldr	r3, [pc, #620]	@ (8001b58 <processControl+0x5d4>)
 80018ec:	2208      	movs	r2, #8
 80018ee:	719a      	strb	r2, [r3, #6]
            ImgSendTypedef_JING.FuncSubCode = STANDBY_MODE;
 80018f0:	4b99      	ldr	r3, [pc, #612]	@ (8001b58 <processControl+0x5d4>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	71da      	strb	r2, [r3, #7]
            Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 80018f6:	4999      	ldr	r1, [pc, #612]	@ (8001b5c <processControl+0x5d8>)
 80018f8:	4897      	ldr	r0, [pc, #604]	@ (8001b58 <processControl+0x5d4>)
 80018fa:	f7ff fb81 	bl	8001000 <Send2ImgModule>
            uart_printf("out\r\n");
 80018fe:	4898      	ldr	r0, [pc, #608]	@ (8001b60 <processControl+0x5dc>)
 8001900:	f003 fb3c 	bl	8004f7c <uart_printf>
        }
//                uart_printf("%d,%d",CommandTypedef.trackCuEnable,CommandTypedef.trackJingEnable);
        uart_printf("manual_cj:%d,TrackingCenterX:%d,TrackingCenterY:%d,TrackingWidth:%d,TrackingHeight:%d\n",CommandTypedef.manual_cj,CommandTypedef.manual_center_x,CommandTypedef.manual_center_y,CommandTypedef.manual_width,CommandTypedef.manual_height);
 8001904:	4b91      	ldr	r3, [pc, #580]	@ (8001b4c <processControl+0x5c8>)
 8001906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800190a:	4619      	mov	r1, r3
 800190c:	4b8f      	ldr	r3, [pc, #572]	@ (8001b4c <processControl+0x5c8>)
 800190e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001910:	4618      	mov	r0, r3
 8001912:	4b8e      	ldr	r3, [pc, #568]	@ (8001b4c <processControl+0x5c8>)
 8001914:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001916:	461c      	mov	r4, r3
 8001918:	4b8c      	ldr	r3, [pc, #560]	@ (8001b4c <processControl+0x5c8>)
 800191a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800191c:	461a      	mov	r2, r3
 800191e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b4c <processControl+0x5c8>)
 8001920:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	9200      	str	r2, [sp, #0]
 8001926:	4623      	mov	r3, r4
 8001928:	4602      	mov	r2, r0
 800192a:	488e      	ldr	r0, [pc, #568]	@ (8001b64 <processControl+0x5e0>)
 800192c:	f003 fb26 	bl	8004f7c <uart_printf>
 8001930:	e053      	b.n	80019da <processControl+0x456>
    }
    else if(manual_flag == 2 && state == STATE_CATCH) //自动模式
 8001932:	4b8d      	ldr	r3, [pc, #564]	@ (8001b68 <processControl+0x5e4>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d14f      	bne.n	80019da <processControl+0x456>
 800193a:	4b8c      	ldr	r3, [pc, #560]	@ (8001b6c <processControl+0x5e8>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b06      	cmp	r3, #6
 8001940:	d14b      	bne.n	80019da <processControl+0x456>
    {
        // manual_flag = 0;
        if(imgFlag[0] == 1) //!:条件待修改
 8001942:	4b8b      	ldr	r3, [pc, #556]	@ (8001b70 <processControl+0x5ec>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d121      	bne.n	800198e <processControl+0x40a>
        {
            if(CommandTypedef.imgEnableCu == 1)
 800194a:	4b80      	ldr	r3, [pc, #512]	@ (8001b4c <processControl+0x5c8>)
 800194c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001950:	2b01      	cmp	r3, #1
 8001952:	d10a      	bne.n	800196a <processControl+0x3e6>
            {
                ImgSendTypedef_CU.FuncCode = SETTING_TRACK;
 8001954:	4b7e      	ldr	r3, [pc, #504]	@ (8001b50 <processControl+0x5cc>)
 8001956:	2208      	movs	r2, #8
 8001958:	719a      	strb	r2, [r3, #6]
                ImgSendTypedef_CU.FuncSubCode = AUTO_TRACK;
 800195a:	4b7d      	ldr	r3, [pc, #500]	@ (8001b50 <processControl+0x5cc>)
 800195c:	2202      	movs	r2, #2
 800195e:	71da      	strb	r2, [r3, #7]
                Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001960:	497c      	ldr	r1, [pc, #496]	@ (8001b54 <processControl+0x5d0>)
 8001962:	487b      	ldr	r0, [pc, #492]	@ (8001b50 <processControl+0x5cc>)
 8001964:	f7ff fb4c 	bl	8001000 <Send2ImgModule>
 8001968:	e00e      	b.n	8001988 <processControl+0x404>
            }
            else if(CommandTypedef.imgEnableCu == 0)
 800196a:	4b78      	ldr	r3, [pc, #480]	@ (8001b4c <processControl+0x5c8>)
 800196c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001970:	2b00      	cmp	r3, #0
 8001972:	d109      	bne.n	8001988 <processControl+0x404>
            {
                ImgSendTypedef_CU.FuncCode = SETTING_TRACK;
 8001974:	4b76      	ldr	r3, [pc, #472]	@ (8001b50 <processControl+0x5cc>)
 8001976:	2208      	movs	r2, #8
 8001978:	719a      	strb	r2, [r3, #6]
                ImgSendTypedef_CU.FuncSubCode = STANDBY_MODE;
 800197a:	4b75      	ldr	r3, [pc, #468]	@ (8001b50 <processControl+0x5cc>)
 800197c:	2201      	movs	r2, #1
 800197e:	71da      	strb	r2, [r3, #7]
                Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001980:	4974      	ldr	r1, [pc, #464]	@ (8001b54 <processControl+0x5d0>)
 8001982:	4873      	ldr	r0, [pc, #460]	@ (8001b50 <processControl+0x5cc>)
 8001984:	f7ff fb3c 	bl	8001000 <Send2ImgModule>
            }
            imgFlag[0] = 0;
 8001988:	4b79      	ldr	r3, [pc, #484]	@ (8001b70 <processControl+0x5ec>)
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
            // uart_printf("cu\n");
        }
        if(imgFlag[1] == 1) //!:条件待修改
 800198e:	4b78      	ldr	r3, [pc, #480]	@ (8001b70 <processControl+0x5ec>)
 8001990:	785b      	ldrb	r3, [r3, #1]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d121      	bne.n	80019da <processControl+0x456>
        {
            if(CommandTypedef.imgEnableJing == 1)
 8001996:	4b6d      	ldr	r3, [pc, #436]	@ (8001b4c <processControl+0x5c8>)
 8001998:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800199c:	2b01      	cmp	r3, #1
 800199e:	d10a      	bne.n	80019b6 <processControl+0x432>
            {
                ImgSendTypedef_JING.FuncCode = SETTING_TRACK;
 80019a0:	4b6d      	ldr	r3, [pc, #436]	@ (8001b58 <processControl+0x5d4>)
 80019a2:	2208      	movs	r2, #8
 80019a4:	719a      	strb	r2, [r3, #6]
                ImgSendTypedef_JING.FuncSubCode = AUTO_TRACK;  //TODO: 数据来源于上位机 待修改
 80019a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001b58 <processControl+0x5d4>)
 80019a8:	2202      	movs	r2, #2
 80019aa:	71da      	strb	r2, [r3, #7]
                Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 80019ac:	496b      	ldr	r1, [pc, #428]	@ (8001b5c <processControl+0x5d8>)
 80019ae:	486a      	ldr	r0, [pc, #424]	@ (8001b58 <processControl+0x5d4>)
 80019b0:	f7ff fb26 	bl	8001000 <Send2ImgModule>
 80019b4:	e00e      	b.n	80019d4 <processControl+0x450>
            }
            else if(CommandTypedef.imgEnableJing == 0)
 80019b6:	4b65      	ldr	r3, [pc, #404]	@ (8001b4c <processControl+0x5c8>)
 80019b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <processControl+0x450>
            {
                ImgSendTypedef_JING.FuncCode = SETTING_TRACK;
 80019c0:	4b65      	ldr	r3, [pc, #404]	@ (8001b58 <processControl+0x5d4>)
 80019c2:	2208      	movs	r2, #8
 80019c4:	719a      	strb	r2, [r3, #6]
                ImgSendTypedef_JING.FuncSubCode = STANDBY_MODE;
 80019c6:	4b64      	ldr	r3, [pc, #400]	@ (8001b58 <processControl+0x5d4>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	71da      	strb	r2, [r3, #7]
                Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 80019cc:	4963      	ldr	r1, [pc, #396]	@ (8001b5c <processControl+0x5d8>)
 80019ce:	4862      	ldr	r0, [pc, #392]	@ (8001b58 <processControl+0x5d4>)
 80019d0:	f7ff fb16 	bl	8001000 <Send2ImgModule>
            }
            imgFlag[1] = 0;
 80019d4:	4b66      	ldr	r3, [pc, #408]	@ (8001b70 <processControl+0x5ec>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	705a      	strb	r2, [r3, #1]
        
    }


    // 曝光调节
    if(expose_flag == 1)
 80019da:	4b66      	ldr	r3, [pc, #408]	@ (8001b74 <processControl+0x5f0>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d116      	bne.n	8001a10 <processControl+0x48c>
    {
        // 粗电视曝光调节
        ImgSendTypedef_CU.FuncCode = SETTING_DEVICEPARAM; 
 80019e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001b50 <processControl+0x5cc>)
 80019e4:	2206      	movs	r2, #6
 80019e6:	719a      	strb	r2, [r3, #6]
        ImgSendDataTypedef_CU.exposure = CommandTypedef.exposureCU;
 80019e8:	4b58      	ldr	r3, [pc, #352]	@ (8001b4c <processControl+0x5c8>)
 80019ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ec:	4a59      	ldr	r2, [pc, #356]	@ (8001b54 <processControl+0x5d0>)
 80019ee:	6093      	str	r3, [r2, #8]
        ImgSendTypedef_CU.FuncSubCode = EXPOSURE;
 80019f0:	4b57      	ldr	r3, [pc, #348]	@ (8001b50 <processControl+0x5cc>)
 80019f2:	2205      	movs	r2, #5
 80019f4:	71da      	strb	r2, [r3, #7]
        Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 80019f6:	4957      	ldr	r1, [pc, #348]	@ (8001b54 <processControl+0x5d0>)
 80019f8:	4855      	ldr	r0, [pc, #340]	@ (8001b50 <processControl+0x5cc>)
 80019fa:	f7ff fb01 	bl	8001000 <Send2ImgModule>
        uart_printf("exposureCU:%ld\n",CommandTypedef.exposureCU);
 80019fe:	4b53      	ldr	r3, [pc, #332]	@ (8001b4c <processControl+0x5c8>)
 8001a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a02:	4619      	mov	r1, r3
 8001a04:	485c      	ldr	r0, [pc, #368]	@ (8001b78 <processControl+0x5f4>)
 8001a06:	f003 fab9 	bl	8004f7c <uart_printf>
        
        expose_flag = 0;
 8001a0a:	4b5a      	ldr	r3, [pc, #360]	@ (8001b74 <processControl+0x5f0>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
    }
    if(exposeJing_flag == 1)
 8001a10:	4b5a      	ldr	r3, [pc, #360]	@ (8001b7c <processControl+0x5f8>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d110      	bne.n	8001a3a <processControl+0x4b6>
    {
        ImgSendTypedef_JING.FuncCode = SETTING_DEVICEPARAM;
 8001a18:	4b4f      	ldr	r3, [pc, #316]	@ (8001b58 <processControl+0x5d4>)
 8001a1a:	2206      	movs	r2, #6
 8001a1c:	719a      	strb	r2, [r3, #6]
        ImgSendDataTypedef_JING.exposure = CommandTypedef.exposureJING;
 8001a1e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b4c <processControl+0x5c8>)
 8001a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a22:	4a4e      	ldr	r2, [pc, #312]	@ (8001b5c <processControl+0x5d8>)
 8001a24:	6093      	str	r3, [r2, #8]
        ImgSendTypedef_JING.FuncSubCode = EXPOSURE;
 8001a26:	4b4c      	ldr	r3, [pc, #304]	@ (8001b58 <processControl+0x5d4>)
 8001a28:	2205      	movs	r2, #5
 8001a2a:	71da      	strb	r2, [r3, #7]
        Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8001a2c:	494b      	ldr	r1, [pc, #300]	@ (8001b5c <processControl+0x5d8>)
 8001a2e:	484a      	ldr	r0, [pc, #296]	@ (8001b58 <processControl+0x5d4>)
 8001a30:	f7ff fae6 	bl	8001000 <Send2ImgModule>
        exposeJing_flag = 0;
 8001a34:	4b51      	ldr	r3, [pc, #324]	@ (8001b7c <processControl+0x5f8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
    }

    if(focus_flag == 1)
 8001a3a:	4b51      	ldr	r3, [pc, #324]	@ (8001b80 <processControl+0x5fc>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d110      	bne.n	8001a64 <processControl+0x4e0>
    {
        // 粗电视调焦
        ImgSendTypedef_CU.FuncCode = SETTING_DEVICEPARAM;
 8001a42:	4b43      	ldr	r3, [pc, #268]	@ (8001b50 <processControl+0x5cc>)
 8001a44:	2206      	movs	r2, #6
 8001a46:	719a      	strb	r2, [r3, #6]
        ImgSendDataTypedef_CU.focusAdjust = CommandTypedef.cuFocusAdjust;
 8001a48:	4b40      	ldr	r3, [pc, #256]	@ (8001b4c <processControl+0x5c8>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4a41      	ldr	r2, [pc, #260]	@ (8001b54 <processControl+0x5d0>)
 8001a4e:	6013      	str	r3, [r2, #0]
        ImgSendTypedef_CU.FuncSubCode = FOCUS_ADJUST;
 8001a50:	4b3f      	ldr	r3, [pc, #252]	@ (8001b50 <processControl+0x5cc>)
 8001a52:	2203      	movs	r2, #3
 8001a54:	71da      	strb	r2, [r3, #7]
        Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001a56:	493f      	ldr	r1, [pc, #252]	@ (8001b54 <processControl+0x5d0>)
 8001a58:	483d      	ldr	r0, [pc, #244]	@ (8001b50 <processControl+0x5cc>)
 8001a5a:	f7ff fad1 	bl	8001000 <Send2ImgModule>
        focus_flag = 0;
 8001a5e:	4b48      	ldr	r3, [pc, #288]	@ (8001b80 <processControl+0x5fc>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
    }
    if(zoom_flag == 1)
 8001a64:	4b47      	ldr	r3, [pc, #284]	@ (8001b84 <processControl+0x600>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d116      	bne.n	8001a9a <processControl+0x516>
    {
        // 粗电视变倍调节
        ImgSendTypedef_CU.FuncCode = SETTING_DEVICEPARAM;
 8001a6c:	4b38      	ldr	r3, [pc, #224]	@ (8001b50 <processControl+0x5cc>)
 8001a6e:	2206      	movs	r2, #6
 8001a70:	719a      	strb	r2, [r3, #6]
        ImgSendDataTypedef_CU.zoomAdjust = CommandTypedef.zoomAdjust;
 8001a72:	4b36      	ldr	r3, [pc, #216]	@ (8001b4c <processControl+0x5c8>)
 8001a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a76:	4a37      	ldr	r2, [pc, #220]	@ (8001b54 <processControl+0x5d0>)
 8001a78:	6053      	str	r3, [r2, #4]
        ImgSendTypedef_CU.FuncSubCode = ZOOM_ADJUST;
 8001a7a:	4b35      	ldr	r3, [pc, #212]	@ (8001b50 <processControl+0x5cc>)
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	71da      	strb	r2, [r3, #7]
        uart_printf("zoomAdjust:%ld\n",CommandTypedef.zoomAdjust);
 8001a80:	4b32      	ldr	r3, [pc, #200]	@ (8001b4c <processControl+0x5c8>)
 8001a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a84:	4619      	mov	r1, r3
 8001a86:	4840      	ldr	r0, [pc, #256]	@ (8001b88 <processControl+0x604>)
 8001a88:	f003 fa78 	bl	8004f7c <uart_printf>
        Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001a8c:	4931      	ldr	r1, [pc, #196]	@ (8001b54 <processControl+0x5d0>)
 8001a8e:	4830      	ldr	r0, [pc, #192]	@ (8001b50 <processControl+0x5cc>)
 8001a90:	f7ff fab6 	bl	8001000 <Send2ImgModule>
        zoom_flag = 0;
 8001a94:	4b3b      	ldr	r3, [pc, #236]	@ (8001b84 <processControl+0x600>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
    }
    if(offset_flag == 1)
 8001a9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b8c <processControl+0x608>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d11e      	bne.n	8001ae0 <processControl+0x55c>
    {
        // 粗电视光学中心设置
        ImgSendTypedef_CU.FuncCode = SETTING_DEVICEPARAM;
 8001aa2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b50 <processControl+0x5cc>)
 8001aa4:	2206      	movs	r2, #6
 8001aa6:	719a      	strb	r2, [r3, #6]
        ImgSendDataTypedef_CU.offsetX = CommandTypedef.x_offset.u32t * 1024 / 640;
 8001aa8:	4b28      	ldr	r3, [pc, #160]	@ (8001b4c <processControl+0x5c8>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	029b      	lsls	r3, r3, #10
 8001aae:	4a38      	ldr	r2, [pc, #224]	@ (8001b90 <processControl+0x60c>)
 8001ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab4:	0a5b      	lsrs	r3, r3, #9
 8001ab6:	4a27      	ldr	r2, [pc, #156]	@ (8001b54 <processControl+0x5d0>)
 8001ab8:	60d3      	str	r3, [r2, #12]
        ImgSendDataTypedef_CU.offsetY = CommandTypedef.y_offset.u32t * 1024 / 640;
 8001aba:	4b24      	ldr	r3, [pc, #144]	@ (8001b4c <processControl+0x5c8>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	029b      	lsls	r3, r3, #10
 8001ac0:	4a33      	ldr	r2, [pc, #204]	@ (8001b90 <processControl+0x60c>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	0a5b      	lsrs	r3, r3, #9
 8001ac8:	4a22      	ldr	r2, [pc, #136]	@ (8001b54 <processControl+0x5d0>)
 8001aca:	6113      	str	r3, [r2, #16]
        ImgSendTypedef_CU.FuncSubCode = OPTICAL_CENTER;
 8001acc:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <processControl+0x5cc>)
 8001ace:	2206      	movs	r2, #6
 8001ad0:	71da      	strb	r2, [r3, #7]
        Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001ad2:	4920      	ldr	r1, [pc, #128]	@ (8001b54 <processControl+0x5d0>)
 8001ad4:	481e      	ldr	r0, [pc, #120]	@ (8001b50 <processControl+0x5cc>)
 8001ad6:	f7ff fa93 	bl	8001000 <Send2ImgModule>
        offset_flag = 0;
 8001ada:	4b2c      	ldr	r3, [pc, #176]	@ (8001b8c <processControl+0x608>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
    }

    // 测距机测距开启关闭
    if(rangefander_flag == 1)
 8001ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b94 <processControl+0x610>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d109      	bne.n	8001afc <processControl+0x578>
    {
        RangefinderDataFrameSend.FuncCode = MultiMeasure;
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b98 <processControl+0x614>)
 8001aea:	2204      	movs	r2, #4
 8001aec:	711a      	strb	r2, [r3, #4]
        Send2RangefinderModule(&RangefinderDataFrameSend);
 8001aee:	482a      	ldr	r0, [pc, #168]	@ (8001b98 <processControl+0x614>)
 8001af0:	f7ff fbaa 	bl	8001248 <Send2RangefinderModule>
        rangefander_flag = 0;
 8001af4:	4b27      	ldr	r3, [pc, #156]	@ (8001b94 <processControl+0x610>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	e00c      	b.n	8001b16 <processControl+0x592>
    }else if(rangefinder_close == 1)
 8001afc:	4b27      	ldr	r3, [pc, #156]	@ (8001b9c <processControl+0x618>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d108      	bne.n	8001b16 <processControl+0x592>
    {
        RangefinderDataFrameSend.FuncCode = StopMeasure;
 8001b04:	4b24      	ldr	r3, [pc, #144]	@ (8001b98 <processControl+0x614>)
 8001b06:	2205      	movs	r2, #5
 8001b08:	711a      	strb	r2, [r3, #4]
        Send2RangefinderModule(&RangefinderDataFrameSend);
 8001b0a:	4823      	ldr	r0, [pc, #140]	@ (8001b98 <processControl+0x614>)
 8001b0c:	f7ff fb9c 	bl	8001248 <Send2RangefinderModule>
        rangefinder_close = 0;
 8001b10:	4b22      	ldr	r3, [pc, #136]	@ (8001b9c <processControl+0x618>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
    }

    // 清除故障
    if(clearerror_flag == 1 && error_cnt < 2)
 8001b16:	4b22      	ldr	r3, [pc, #136]	@ (8001ba0 <processControl+0x61c>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d154      	bne.n	8001bc8 <processControl+0x644>
 8001b1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ba4 <processControl+0x620>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d850      	bhi.n	8001bc8 <processControl+0x644>
    {
        error_cnt++;
 8001b26:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba4 <processControl+0x620>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba4 <processControl+0x620>)
 8001b30:	701a      	strb	r2, [r3, #0]
        if(error_cnt == 1)
 8001b32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba4 <processControl+0x620>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d138      	bne.n	8001bac <processControl+0x628>
        {
            ServoDataSendTypedef.TrackingFaultCleanCu = 0x66;
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <processControl+0x624>)
 8001b3c:	2266      	movs	r2, #102	@ 0x66
 8001b3e:	741a      	strb	r2, [r3, #16]
            ServoDataSendTypedef.TrackingFaultCleanJing = 0x33;
 8001b40:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <processControl+0x624>)
 8001b42:	2233      	movs	r2, #51	@ 0x33
 8001b44:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8001b48:	e03a      	b.n	8001bc0 <processControl+0x63c>
 8001b4a:	bf00      	nop
 8001b4c:	24000184 	.word	0x24000184
 8001b50:	24000018 	.word	0x24000018
 8001b54:	24000064 	.word	0x24000064
 8001b58:	2400008c 	.word	0x2400008c
 8001b5c:	240000d8 	.word	0x240000d8
 8001b60:	080292d8 	.word	0x080292d8
 8001b64:	080292e0 	.word	0x080292e0
 8001b68:	240001d8 	.word	0x240001d8
 8001b6c:	240004b6 	.word	0x240004b6
 8001b70:	240004cc 	.word	0x240004cc
 8001b74:	240004be 	.word	0x240004be
 8001b78:	08029338 	.word	0x08029338
 8001b7c:	240004bf 	.word	0x240004bf
 8001b80:	240004c4 	.word	0x240004c4
 8001b84:	240004c3 	.word	0x240004c3
 8001b88:	08029348 	.word	0x08029348
 8001b8c:	240004c7 	.word	0x240004c7
 8001b90:	cccccccd 	.word	0xcccccccd
 8001b94:	240004c0 	.word	0x240004c0
 8001b98:	24000100 	.word	0x24000100
 8001b9c:	240004c1 	.word	0x240004c1
 8001ba0:	240004c5 	.word	0x240004c5
 8001ba4:	240004c6 	.word	0x240004c6
 8001ba8:	24000154 	.word	0x24000154
        }else if(error_cnt == 2)
 8001bac:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <processControl+0x64c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d105      	bne.n	8001bc0 <processControl+0x63c>
        {
            clearerror_flag = 0;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	@ (8001bd4 <processControl+0x650>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
            error_cnt = 0;
 8001bba:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <processControl+0x64c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
        }
        ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 8001bc0:	4905      	ldr	r1, [pc, #20]	@ (8001bd8 <processControl+0x654>)
 8001bc2:	4806      	ldr	r0, [pc, #24]	@ (8001bdc <processControl+0x658>)
 8001bc4:	f7ff fcbe 	bl	8001544 <ServoDataSend>
    // else if(state == STATE_STANDBYDISABLE)
    // {
    //     // ServoDataSendTypedef.TurnMode = TURNTABLE_OPEN_LOOP;
    //     // ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
    // }
}
 8001bc8:	bf00      	nop
 8001bca:	3704      	adds	r7, #4
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd90      	pop	{r4, r7, pc}
 8001bd0:	240004c6 	.word	0x240004c6
 8001bd4:	240004c5 	.word	0x240004c5
 8001bd8:	24000154 	.word	0x24000154
 8001bdc:	2400011c 	.word	0x2400011c

08001be0 <standbyEnable>:
    Send2RangefinderModule(&RangefinderDataFrameSend);

}

void standbyEnable()
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
    // 电机使能
    ServoDataSendTypedef.TurnMode = TURNTABLE_GUIDE;
 8001be4:	4b27      	ldr	r3, [pc, #156]	@ (8001c84 <standbyEnable+0xa4>)
 8001be6:	22b2      	movs	r2, #178	@ 0xb2
 8001be8:	701a      	strb	r2, [r3, #0]
    ServoDataSendTypedef.MotorEnable = MotorPowerOn;
 8001bea:	4b26      	ldr	r3, [pc, #152]	@ (8001c84 <standbyEnable+0xa4>)
 8001bec:	2266      	movs	r2, #102	@ 0x66
 8001bee:	705a      	strb	r2, [r3, #1]
    ServoDataSendTypedef.Turntable_Yaw = 0;
 8001bf0:	4b24      	ldr	r3, [pc, #144]	@ (8001c84 <standbyEnable+0xa4>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	805a      	strh	r2, [r3, #2]
    ServoDataSendTypedef.Turntable_Pitch = 0;
 8001bf6:	4b23      	ldr	r3, [pc, #140]	@ (8001c84 <standbyEnable+0xa4>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	809a      	strh	r2, [r3, #4]
    ServoDataSendTypedef.TrackingDataValid = DATA_VALID;
 8001bfc:	4b21      	ldr	r3, [pc, #132]	@ (8001c84 <standbyEnable+0xa4>)
 8001bfe:	2233      	movs	r2, #51	@ 0x33
 8001c00:	719a      	strb	r2, [r3, #6]
    ServoDataSendTypedef.TargetYaw.f = ServoRevTypedef.ServoYawPos.f;
 8001c02:	4b21      	ldr	r3, [pc, #132]	@ (8001c88 <standbyEnable+0xa8>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4a1f      	ldr	r2, [pc, #124]	@ (8001c84 <standbyEnable+0xa4>)
 8001c08:	6093      	str	r3, [r2, #8]
    ServoDataSendTypedef.TargetPitch.f = ServoRevTypedef.ServoPitchPos.f;
 8001c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c88 <standbyEnable+0xa8>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	4a1d      	ldr	r2, [pc, #116]	@ (8001c84 <standbyEnable+0xa4>)
 8001c10:	60d3      	str	r3, [r2, #12]
    ServoDataSendTypedef.FSMMode = FSM_DIRECTION;
 8001c12:	4b1c      	ldr	r3, [pc, #112]	@ (8001c84 <standbyEnable+0xa4>)
 8001c14:	22c1      	movs	r2, #193	@ 0xc1
 8001c16:	745a      	strb	r2, [r3, #17]
    ServoDataSendTypedef.ControlEnableJing = ENABLE_JING;
 8001c18:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <standbyEnable+0xa4>)
 8001c1a:	2266      	movs	r2, #102	@ 0x66
 8001c1c:	749a      	strb	r2, [r3, #18]
    ServoDataSendTypedef.TargetFSMYaw.f = ServoRevTypedef.FSMXPos.f;
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c88 <standbyEnable+0xa8>)
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	4a18      	ldr	r2, [pc, #96]	@ (8001c84 <standbyEnable+0xa4>)
 8001c24:	6153      	str	r3, [r2, #20]
    ServoDataSendTypedef.TargetFSMPitch.f = ServoRevTypedef.FSMYPos.f;
 8001c26:	4b18      	ldr	r3, [pc, #96]	@ (8001c88 <standbyEnable+0xa8>)
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	4a16      	ldr	r2, [pc, #88]	@ (8001c84 <standbyEnable+0xa4>)
 8001c2c:	6193      	str	r3, [r2, #24]
    ServoDataSendTypedef.ZeroCorrectionFSMX.f = 0.f;
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <standbyEnable+0xa4>)
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
    ServoDataSendTypedef.ZeroCorrectionFSMY.f = 0.f;
 8001c36:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <standbyEnable+0xa4>)
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	621a      	str	r2, [r3, #32]
    ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 8001c3e:	4911      	ldr	r1, [pc, #68]	@ (8001c84 <standbyEnable+0xa4>)
 8001c40:	4812      	ldr	r0, [pc, #72]	@ (8001c8c <standbyEnable+0xac>)
 8001c42:	f7ff fc7f 	bl	8001544 <ServoDataSend>


    // 粗电视待机
    ImgSendTypedef_CU.FuncCode = SETTING_TRACK;
 8001c46:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <standbyEnable+0xb0>)
 8001c48:	2208      	movs	r2, #8
 8001c4a:	719a      	strb	r2, [r3, #6]
    ImgSendTypedef_CU.FuncSubCode = STANDBY_MODE;
 8001c4c:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <standbyEnable+0xb0>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	71da      	strb	r2, [r3, #7]
    Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001c52:	4910      	ldr	r1, [pc, #64]	@ (8001c94 <standbyEnable+0xb4>)
 8001c54:	480e      	ldr	r0, [pc, #56]	@ (8001c90 <standbyEnable+0xb0>)
 8001c56:	f7ff f9d3 	bl	8001000 <Send2ImgModule>
    DelayMs(2);
 8001c5a:	2002      	movs	r0, #2
 8001c5c:	f003 f9b2 	bl	8004fc4 <DelayMs>

    // 精电视待机
    ImgSendTypedef_JING.FuncCode = SETTING_TRACK;
 8001c60:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <standbyEnable+0xb8>)
 8001c62:	2208      	movs	r2, #8
 8001c64:	719a      	strb	r2, [r3, #6]
    ImgSendTypedef_JING.FuncSubCode = STANDBY_MODE;
 8001c66:	4b0c      	ldr	r3, [pc, #48]	@ (8001c98 <standbyEnable+0xb8>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	71da      	strb	r2, [r3, #7]
    Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8001c6c:	490b      	ldr	r1, [pc, #44]	@ (8001c9c <standbyEnable+0xbc>)
 8001c6e:	480a      	ldr	r0, [pc, #40]	@ (8001c98 <standbyEnable+0xb8>)
 8001c70:	f7ff f9c6 	bl	8001000 <Send2ImgModule>
    // setFocusPos.f = 4000.f;
    // SendFocusFrame.func = SetPos;
    // SendFocusData(&SendFocusFrame);

    // 测距机回零
    RangefinderDataFrameSend.FuncCode = StopMeasure;
 8001c74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <standbyEnable+0xc0>)
 8001c76:	2205      	movs	r2, #5
 8001c78:	711a      	strb	r2, [r3, #4]
    Send2RangefinderModule(&RangefinderDataFrameSend);
 8001c7a:	4809      	ldr	r0, [pc, #36]	@ (8001ca0 <standbyEnable+0xc0>)
 8001c7c:	f7ff fae4 	bl	8001248 <Send2RangefinderModule>
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	24000154 	.word	0x24000154
 8001c88:	24000458 	.word	0x24000458
 8001c8c:	2400011c 	.word	0x2400011c
 8001c90:	24000018 	.word	0x24000018
 8001c94:	24000064 	.word	0x24000064
 8001c98:	2400008c 	.word	0x2400008c
 8001c9c:	240000d8 	.word	0x240000d8
 8001ca0:	24000100 	.word	0x24000100

08001ca4 <standbyDisable>:

void standbyDisable()
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
    // 电机失能
    ServoDataSendTypedef.TurnMode = TURNTABLE_OPEN_LOOP;
 8001ca8:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <standbyDisable+0x24>)
 8001caa:	22b1      	movs	r2, #177	@ 0xb1
 8001cac:	701a      	strb	r2, [r3, #0]
    ServoDataSendTypedef.MotorEnable = MotorPowerOff;
 8001cae:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <standbyDisable+0x24>)
 8001cb0:	2233      	movs	r2, #51	@ 0x33
 8001cb2:	705a      	strb	r2, [r3, #1]
    ServoDataSendTypedef.ControlEnableJing = DISABLE_JING;
 8001cb4:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <standbyDisable+0x24>)
 8001cb6:	2233      	movs	r2, #51	@ 0x33
 8001cb8:	749a      	strb	r2, [r3, #18]
    ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 8001cba:	4903      	ldr	r1, [pc, #12]	@ (8001cc8 <standbyDisable+0x24>)
 8001cbc:	4803      	ldr	r0, [pc, #12]	@ (8001ccc <standbyDisable+0x28>)
 8001cbe:	f7ff fc41 	bl	8001544 <ServoDataSend>
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	24000154 	.word	0x24000154
 8001ccc:	2400011c 	.word	0x2400011c

08001cd0 <guideEnable>:

void guideEnable()
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
    // 电机使能
    ServoDataSendTypedef.TurnMode = TURNTABLE_GUIDE;
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <guideEnable+0x7c>)
 8001cd6:	22b2      	movs	r2, #178	@ 0xb2
 8001cd8:	701a      	strb	r2, [r3, #0]
    ServoDataSendTypedef.MotorEnable = MotorPowerOn;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	@ (8001d4c <guideEnable+0x7c>)
 8001cdc:	2266      	movs	r2, #102	@ 0x66
 8001cde:	705a      	strb	r2, [r3, #1]
    ServoDataSendTypedef.ControlEnableJing = ENABLE_JING;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <guideEnable+0x7c>)
 8001ce2:	2266      	movs	r2, #102	@ 0x66
 8001ce4:	749a      	strb	r2, [r3, #18]
    ServoDataSendTypedef.TargetPitch.f = ServoRevTypedef.ServoPitchPos.f;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <guideEnable+0x80>)
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	4a18      	ldr	r2, [pc, #96]	@ (8001d4c <guideEnable+0x7c>)
 8001cec:	60d3      	str	r3, [r2, #12]
    ServoDataSendTypedef.TargetYaw.f = ServoRevTypedef.ServoYawPos.f;
 8001cee:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <guideEnable+0x80>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	4a16      	ldr	r2, [pc, #88]	@ (8001d4c <guideEnable+0x7c>)
 8001cf4:	6093      	str	r3, [r2, #8]
    ServoDataSendTypedef.TrackingDataValid = DATA_VALID;
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <guideEnable+0x7c>)
 8001cf8:	2233      	movs	r2, #51	@ 0x33
 8001cfa:	719a      	strb	r2, [r3, #6]
    ServoDataSendTypedef.FSMMode = FSM_DIRECTION;
 8001cfc:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <guideEnable+0x7c>)
 8001cfe:	22c1      	movs	r2, #193	@ 0xc1
 8001d00:	745a      	strb	r2, [r3, #17]
    ServoDataSendTypedef.ControlEnableJing = ENABLE_JING;
 8001d02:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <guideEnable+0x7c>)
 8001d04:	2266      	movs	r2, #102	@ 0x66
 8001d06:	749a      	strb	r2, [r3, #18]
    ServoDataSendTypedef.TargetFSMYaw.f = ServoRevTypedef.FSMXPos.f;
 8001d08:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <guideEnable+0x80>)
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d4c <guideEnable+0x7c>)
 8001d0e:	6153      	str	r3, [r2, #20]
    ServoDataSendTypedef.TargetFSMPitch.f = ServoRevTypedef.FSMYPos.f;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <guideEnable+0x80>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	@ (8001d4c <guideEnable+0x7c>)
 8001d16:	6193      	str	r3, [r2, #24]
    ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 8001d18:	490c      	ldr	r1, [pc, #48]	@ (8001d4c <guideEnable+0x7c>)
 8001d1a:	480e      	ldr	r0, [pc, #56]	@ (8001d54 <guideEnable+0x84>)
 8001d1c:	f7ff fc12 	bl	8001544 <ServoDataSend>

    // 粗电视引导  
    ImgSendTypedef_CU.FuncCode = SETTING_TRACK;
 8001d20:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <guideEnable+0x88>)
 8001d22:	2208      	movs	r2, #8
 8001d24:	719a      	strb	r2, [r3, #6]
    // ImgSendTypedef_CU.FuncSubCode = MANUAL_TRACK;  //TODO: 数据来源于上位机 待修改
    
    ImgSendTypedef_CU.FuncSubCode = AUTO_TRACK;  //TODO: 数据来源于上位机 待修改
 8001d26:	4b0c      	ldr	r3, [pc, #48]	@ (8001d58 <guideEnable+0x88>)
 8001d28:	2202      	movs	r2, #2
 8001d2a:	71da      	strb	r2, [r3, #7]
    Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001d2c:	490b      	ldr	r1, [pc, #44]	@ (8001d5c <guideEnable+0x8c>)
 8001d2e:	480a      	ldr	r0, [pc, #40]	@ (8001d58 <guideEnable+0x88>)
 8001d30:	f7ff f966 	bl	8001000 <Send2ImgModule>

    // 精电视引导
    ImgSendTypedef_JING.FuncCode = SETTING_TRACK;
 8001d34:	4b0a      	ldr	r3, [pc, #40]	@ (8001d60 <guideEnable+0x90>)
 8001d36:	2208      	movs	r2, #8
 8001d38:	719a      	strb	r2, [r3, #6]
    ImgSendTypedef_JING.FuncSubCode = AUTO_TRACK;
 8001d3a:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <guideEnable+0x90>)
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	71da      	strb	r2, [r3, #7]
    Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8001d40:	4908      	ldr	r1, [pc, #32]	@ (8001d64 <guideEnable+0x94>)
 8001d42:	4807      	ldr	r0, [pc, #28]	@ (8001d60 <guideEnable+0x90>)
 8001d44:	f7ff f95c 	bl	8001000 <Send2ImgModule>
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	24000154 	.word	0x24000154
 8001d50:	24000458 	.word	0x24000458
 8001d54:	2400011c 	.word	0x2400011c
 8001d58:	24000018 	.word	0x24000018
 8001d5c:	24000064 	.word	0x24000064
 8001d60:	2400008c 	.word	0x2400008c
 8001d64:	240000d8 	.word	0x240000d8

08001d68 <catchEnable>:
    ImgSendTypedef_JING.FuncSubCode = AUTO_TRACK;
    Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
}

void catchEnable()
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
    // ImgSendTypedef_JING.FuncCode = SETTING_TRACK;
    // ImgSendTypedef_JING.FuncSubCode = AUTO_TRACK;
    // Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);

    // 电机使能
    ServoDataSendTypedef.TurnMode = TURNTABLE_GUIDE;
 8001d6c:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <catchEnable+0x6c>)
 8001d6e:	22b2      	movs	r2, #178	@ 0xb2
 8001d70:	701a      	strb	r2, [r3, #0]
    ServoDataSendTypedef.MotorEnable = MotorPowerOn;
 8001d72:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <catchEnable+0x6c>)
 8001d74:	2266      	movs	r2, #102	@ 0x66
 8001d76:	705a      	strb	r2, [r3, #1]
    ServoDataSendTypedef.Turntable_Yaw = 0;
 8001d78:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <catchEnable+0x6c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	805a      	strh	r2, [r3, #2]
    ServoDataSendTypedef.Turntable_Pitch = 0;
 8001d7e:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <catchEnable+0x6c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	809a      	strh	r2, [r3, #4]
    ServoDataSendTypedef.TrackingDataValid = DATA_VALID;
 8001d84:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <catchEnable+0x6c>)
 8001d86:	2233      	movs	r2, #51	@ 0x33
 8001d88:	719a      	strb	r2, [r3, #6]
    ServoDataSendTypedef.TargetYaw.f = ServoRevTypedef.ServoYawPos.f;
 8001d8a:	4b13      	ldr	r3, [pc, #76]	@ (8001dd8 <catchEnable+0x70>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4a11      	ldr	r2, [pc, #68]	@ (8001dd4 <catchEnable+0x6c>)
 8001d90:	6093      	str	r3, [r2, #8]
    ServoDataSendTypedef.TargetPitch.f = ServoRevTypedef.ServoPitchPos.f;
 8001d92:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <catchEnable+0x70>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd4 <catchEnable+0x6c>)
 8001d98:	60d3      	str	r3, [r2, #12]
    ServoDataSendTypedef.FSMMode = FSM_DIRECTION;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <catchEnable+0x6c>)
 8001d9c:	22c1      	movs	r2, #193	@ 0xc1
 8001d9e:	745a      	strb	r2, [r3, #17]
    ServoDataSendTypedef.ControlEnableJing = ENABLE_JING;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <catchEnable+0x6c>)
 8001da2:	2266      	movs	r2, #102	@ 0x66
 8001da4:	749a      	strb	r2, [r3, #18]
    ServoDataSendTypedef.TargetFSMYaw.f = ServoRevTypedef.FSMXPos.f;
 8001da6:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <catchEnable+0x70>)
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <catchEnable+0x6c>)
 8001dac:	6153      	str	r3, [r2, #20]
    ServoDataSendTypedef.TargetFSMPitch.f = ServoRevTypedef.FSMYPos.f;
 8001dae:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <catchEnable+0x70>)
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	4a08      	ldr	r2, [pc, #32]	@ (8001dd4 <catchEnable+0x6c>)
 8001db4:	6193      	str	r3, [r2, #24]
    ServoDataSendTypedef.ZeroCorrectionFSMX.f = 0.f;
 8001db6:	4b07      	ldr	r3, [pc, #28]	@ (8001dd4 <catchEnable+0x6c>)
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
    ServoDataSendTypedef.ZeroCorrectionFSMY.f = 0.f;
 8001dbe:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <catchEnable+0x6c>)
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	621a      	str	r2, [r3, #32]
    ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 8001dc6:	4903      	ldr	r1, [pc, #12]	@ (8001dd4 <catchEnable+0x6c>)
 8001dc8:	4804      	ldr	r0, [pc, #16]	@ (8001ddc <catchEnable+0x74>)
 8001dca:	f7ff fbbb 	bl	8001544 <ServoDataSend>
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	24000154 	.word	0x24000154
 8001dd8:	24000458 	.word	0x24000458
 8001ddc:	2400011c 	.word	0x2400011c

08001de0 <udpecho_thread>:
    .cuOffsetState = 0,
    .jingOffsetState = 0
};

static void udpecho_thread(void *arg)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af02      	add	r7, sp, #8
 8001de6:	6078      	str	r0, [r7, #4]
//    socklen_t addrlen;


    while (1)
    {
        recv_data = (char *)pvPortMalloc(RECV_DATA);
 8001de8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001dec:	f013 fafe 	bl	80153ec <pvPortMalloc>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4a81      	ldr	r2, [pc, #516]	@ (8001ff8 <udpecho_thread+0x218>)
 8001df4:	6013      	str	r3, [r2, #0]
//        senddata = (char *)pvPortMalloc(128);
        if (recv_data == NULL)
 8001df6:	4b80      	ldr	r3, [pc, #512]	@ (8001ff8 <udpecho_thread+0x218>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 83b5 	beq.w	800256a <udpecho_thread+0x78a>
        {
            // uart_printf("No memory\n");
            goto __exit;
        }

        sock = socket(AF_INET, SOCK_DGRAM, 0);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2102      	movs	r1, #2
 8001e04:	2002      	movs	r0, #2
 8001e06:	f016 fb9f 	bl	8018548 <lwip_socket>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4a7b      	ldr	r2, [pc, #492]	@ (8001ffc <udpecho_thread+0x21c>)
 8001e0e:	6013      	str	r3, [r2, #0]
        if (sock < 0)
 8001e10:	4b7a      	ldr	r3, [pc, #488]	@ (8001ffc <udpecho_thread+0x21c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f2c0 83aa 	blt.w	800256e <udpecho_thread+0x78e>
        {
        	// uart_printf("Socket error\n");
            goto __exit;
        }
        addrlen = sizeof(struct sockaddr);
 8001e1a:	4b79      	ldr	r3, [pc, #484]	@ (8002000 <udpecho_thread+0x220>)
 8001e1c:	2210      	movs	r2, #16
 8001e1e:	601a      	str	r2, [r3, #0]
        udp_addr.sin_family = AF_INET;
 8001e20:	4b78      	ldr	r3, [pc, #480]	@ (8002004 <udpecho_thread+0x224>)
 8001e22:	2202      	movs	r2, #2
 8001e24:	705a      	strb	r2, [r3, #1]
        udp_addr.sin_addr.s_addr = INADDR_ANY;
 8001e26:	4b77      	ldr	r3, [pc, #476]	@ (8002004 <udpecho_thread+0x224>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	605a      	str	r2, [r3, #4]
        udp_addr.sin_port = htons(PORT);
 8001e2c:	f241 3089 	movw	r0, #5001	@ 0x1389
 8001e30:	f016 ff2e 	bl	8018c90 <lwip_htons>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	4b72      	ldr	r3, [pc, #456]	@ (8002004 <udpecho_thread+0x224>)
 8001e3a:	805a      	strh	r2, [r3, #2]
        memset(&(udp_addr.sin_zero), 0, sizeof(udp_addr.sin_zero));
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4871      	ldr	r0, [pc, #452]	@ (8002008 <udpecho_thread+0x228>)
 8001e42:	f023 fc3b 	bl	80256bc <memset>

        if (bind(sock, (struct sockaddr *)&udp_addr, sizeof(struct sockaddr)) == -1)
 8001e46:	4b6d      	ldr	r3, [pc, #436]	@ (8001ffc <udpecho_thread+0x21c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2210      	movs	r2, #16
 8001e4c:	496d      	ldr	r1, [pc, #436]	@ (8002004 <udpecho_thread+0x224>)
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f015 fe90 	bl	8017b74 <lwip_bind>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5a:	f000 838a 	beq.w	8002572 <udpecho_thread+0x792>
        }

        while (1)
        {
//        	test++;
             recv_data_len=recvfrom(sock,recv_data,
 8001e5e:	4b67      	ldr	r3, [pc, #412]	@ (8001ffc <udpecho_thread+0x21c>)
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	4b65      	ldr	r3, [pc, #404]	@ (8001ff8 <udpecho_thread+0x218>)
 8001e64:	6819      	ldr	r1, [r3, #0]
 8001e66:	4b66      	ldr	r3, [pc, #408]	@ (8002000 <udpecho_thread+0x220>)
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	4b68      	ldr	r3, [pc, #416]	@ (800200c <udpecho_thread+0x22c>)
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e74:	f016 f9c6 	bl	8018204 <lwip_recvfrom>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4a65      	ldr	r2, [pc, #404]	@ (8002010 <udpecho_thread+0x230>)
 8001e7c:	6013      	str	r3, [r2, #0]
             /*显示发送端的IP地址*/
            //  uart_printf("receive from %s\n",inet_ntoa(seraddr.sin_addr));

             /*显示发送端发来的字串*/
            //  uart_printf("recevce:%s\n",recv_data);
            for(int i = 0;i < recv_data_len;i++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	e00b      	b.n	8001e9c <udpecho_thread+0xbc>
            {
                uart_printf("%02x ",recv_data[i]);
 8001e84:	4b5c      	ldr	r3, [pc, #368]	@ (8001ff8 <udpecho_thread+0x218>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4860      	ldr	r0, [pc, #384]	@ (8002014 <udpecho_thread+0x234>)
 8001e92:	f003 f873 	bl	8004f7c <uart_printf>
            for(int i = 0;i < recv_data_len;i++)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	4b5c      	ldr	r3, [pc, #368]	@ (8002010 <udpecho_thread+0x230>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	dbee      	blt.n	8001e84 <udpecho_thread+0xa4>
            }       
            HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001ea6:	2108      	movs	r1, #8
 8001ea8:	485b      	ldr	r0, [pc, #364]	@ (8002018 <udpecho_thread+0x238>)
 8001eaa:	f009 fdb0 	bl	800ba0e <HAL_GPIO_TogglePin>
            //  uart_printf("recevce:%s,len:%d",mes,recv_data_len);

            if(recv_data[0] == 0x90 && recv_data[1] == 0x60 && recv_data[recv_data_len - 1] == 0xee)
 8001eae:	4b52      	ldr	r3, [pc, #328]	@ (8001ff8 <udpecho_thread+0x218>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b90      	cmp	r3, #144	@ 0x90
 8001eb6:	f040 8354 	bne.w	8002562 <udpecho_thread+0x782>
 8001eba:	4b4f      	ldr	r3, [pc, #316]	@ (8001ff8 <udpecho_thread+0x218>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b60      	cmp	r3, #96	@ 0x60
 8001ec4:	f040 834d 	bne.w	8002562 <udpecho_thread+0x782>
 8001ec8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ff8 <udpecho_thread+0x218>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b50      	ldr	r3, [pc, #320]	@ (8002010 <udpecho_thread+0x230>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2bee      	cmp	r3, #238	@ 0xee
 8001ed8:	f040 8343 	bne.w	8002562 <udpecho_thread+0x782>
            {
                #if testcode
                // --------------------------------------------------
                if(CommandTypedef.state != recv_data[3])
 8001edc:	4b4f      	ldr	r3, [pc, #316]	@ (800201c <udpecho_thread+0x23c>)
 8001ede:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8001ee2:	4b45      	ldr	r3, [pc, #276]	@ (8001ff8 <udpecho_thread+0x218>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	3303      	adds	r3, #3
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d002      	beq.n	8001ef4 <udpecho_thread+0x114>
                {
                    stateChange = 1;
 8001eee:	4b4c      	ldr	r3, [pc, #304]	@ (8002020 <udpecho_thread+0x240>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
                }
                CommandTypedef.go2Zero          = recv_data[3] & bit(0) ? 1 : 0;
 8001ef4:	4b40      	ldr	r3, [pc, #256]	@ (8001ff8 <udpecho_thread+0x218>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	3303      	adds	r3, #3
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b46      	ldr	r3, [pc, #280]	@ (800201c <udpecho_thread+0x23c>)
 8001f04:	701a      	strb	r2, [r3, #0]
                CommandTypedef.standbyEnable    = recv_data[3] & bit(1) ? 1 : 0;
 8001f06:	4b3c      	ldr	r3, [pc, #240]	@ (8001ff8 <udpecho_thread+0x218>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3303      	adds	r3, #3
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	105b      	asrs	r3, r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	4b40      	ldr	r3, [pc, #256]	@ (800201c <udpecho_thread+0x23c>)
 8001f1a:	705a      	strb	r2, [r3, #1]
                CommandTypedef.standbyDisable   = recv_data[3] & bit(2) ? 1 : 0;
 8001f1c:	4b36      	ldr	r3, [pc, #216]	@ (8001ff8 <udpecho_thread+0x218>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	3303      	adds	r3, #3
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	109b      	asrs	r3, r3, #2
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800201c <udpecho_thread+0x23c>)
 8001f30:	709a      	strb	r2, [r3, #2]
                CommandTypedef.guideEnable      = recv_data[3] & bit(3) ? 1 : 0;
 8001f32:	4b31      	ldr	r3, [pc, #196]	@ (8001ff8 <udpecho_thread+0x218>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3303      	adds	r3, #3
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	10db      	asrs	r3, r3, #3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b35      	ldr	r3, [pc, #212]	@ (800201c <udpecho_thread+0x23c>)
 8001f46:	711a      	strb	r2, [r3, #4]
                CommandTypedef.catchEnable      = recv_data[3] & bit(4) ? 1 : 0;
 8001f48:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff8 <udpecho_thread+0x218>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	3303      	adds	r3, #3
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	111b      	asrs	r3, r3, #4
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b30      	ldr	r3, [pc, #192]	@ (800201c <udpecho_thread+0x23c>)
 8001f5c:	715a      	strb	r2, [r3, #5]
                CommandTypedef.state = recv_data[3];
 8001f5e:	4b26      	ldr	r3, [pc, #152]	@ (8001ff8 <udpecho_thread+0x218>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3303      	adds	r3, #3
 8001f64:	781a      	ldrb	r2, [r3, #0]
 8001f66:	4b2d      	ldr	r3, [pc, #180]	@ (800201c <udpecho_thread+0x23c>)
 8001f68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                

                // uart_printf("gozeor:%d,standbyEnable:%d,standbyDisable:%d,guideEnable:%d,catchEnable:%d\n",CommandTypedef.go2Zero,CommandTypedef.standbyEnable,CommandTypedef.standbyDisable,CommandTypedef.guideEnable,CommandTypedef.catchEnable);

                if(CommandTypedef.rangefinderOpen == 0 && recv_data[4] == 1)
 8001f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800201c <udpecho_thread+0x23c>)
 8001f6e:	7a9b      	ldrb	r3, [r3, #10]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d108      	bne.n	8001f86 <udpecho_thread+0x1a6>
 8001f74:	4b20      	ldr	r3, [pc, #128]	@ (8001ff8 <udpecho_thread+0x218>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d102      	bne.n	8001f86 <udpecho_thread+0x1a6>
                {
                    rangefander_flag = 1;
 8001f80:	4b28      	ldr	r3, [pc, #160]	@ (8002024 <udpecho_thread+0x244>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
                }
                if(CommandTypedef.rangefinderOpen == 1 && recv_data[4] == 0)
 8001f86:	4b25      	ldr	r3, [pc, #148]	@ (800201c <udpecho_thread+0x23c>)
 8001f88:	7a9b      	ldrb	r3, [r3, #10]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d108      	bne.n	8001fa0 <udpecho_thread+0x1c0>
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff8 <udpecho_thread+0x218>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	3304      	adds	r3, #4
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d102      	bne.n	8001fa0 <udpecho_thread+0x1c0>
                {
                    rangefinder_close = 1;
 8001f9a:	4b23      	ldr	r3, [pc, #140]	@ (8002028 <udpecho_thread+0x248>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	701a      	strb	r2, [r3, #0]
                }
                if(CommandTypedef.laserAdjust != ((recv_data[6] << 8) | recv_data[5]))
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800201c <udpecho_thread+0x23c>)
 8001fa2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4b13      	ldr	r3, [pc, #76]	@ (8001ff8 <udpecho_thread+0x218>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	3306      	adds	r3, #6
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	4a11      	ldr	r2, [pc, #68]	@ (8001ff8 <udpecho_thread+0x218>)
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	3205      	adds	r2, #5
 8001fb8:	7812      	ldrb	r2, [r2, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	4299      	cmp	r1, r3
 8001fbe:	d002      	beq.n	8001fc6 <udpecho_thread+0x1e6>
                {
                    laserChange = 1;
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <udpecho_thread+0x24c>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
                }

                CommandTypedef.rangefinderOpen  = recv_data[4];
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <udpecho_thread+0x218>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3304      	adds	r3, #4
 8001fcc:	781a      	ldrb	r2, [r3, #0]
 8001fce:	4b13      	ldr	r3, [pc, #76]	@ (800201c <udpecho_thread+0x23c>)
 8001fd0:	729a      	strb	r2, [r3, #10]
                // 数据是低位在前高为在后
                CommandTypedef.laserAdjust = (recv_data[6] << 8) | recv_data[5];
 8001fd2:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <udpecho_thread+0x218>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	3306      	adds	r3, #6
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	b21a      	sxth	r2, r3
 8001fde:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <udpecho_thread+0x218>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	3305      	adds	r3, #5
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	b21a      	sxth	r2, r3
 8001fec:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <udpecho_thread+0x23c>)
 8001fee:	819a      	strh	r2, [r3, #12]
                // uart_printf("laserAdjust:%d\n",CommandTypedef.laserAdjust);
                for(int i = 0;i < 4;i++)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	e04e      	b.n	8002094 <udpecho_thread+0x2b4>
 8001ff6:	bf00      	nop
 8001ff8:	240004d0 	.word	0x240004d0
 8001ffc:	240001dc 	.word	0x240001dc
 8002000:	24000508 	.word	0x24000508
 8002004:	240004d4 	.word	0x240004d4
 8002008:	240004dc 	.word	0x240004dc
 800200c:	240004e4 	.word	0x240004e4
 8002010:	24000504 	.word	0x24000504
 8002014:	08029358 	.word	0x08029358
 8002018:	58021800 	.word	0x58021800
 800201c:	24000184 	.word	0x24000184
 8002020:	240004b7 	.word	0x240004b7
 8002024:	240004c0 	.word	0x240004c0
 8002028:	240004c1 	.word	0x240004c1
 800202c:	240004c8 	.word	0x240004c8
                {
                    angle[0].u8t[i] = recv_data[7 + i];
 8002030:	4b56      	ldr	r3, [pc, #344]	@ (800218c <udpecho_thread+0x3ac>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	3207      	adds	r2, #7
 8002038:	4413      	add	r3, r2
 800203a:	7819      	ldrb	r1, [r3, #0]
 800203c:	4a54      	ldr	r2, [pc, #336]	@ (8002190 <udpecho_thread+0x3b0>)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	4413      	add	r3, r2
 8002042:	460a      	mov	r2, r1
 8002044:	701a      	strb	r2, [r3, #0]
                    angle[1].u8t[i] = recv_data[11 + i];
 8002046:	4b51      	ldr	r3, [pc, #324]	@ (800218c <udpecho_thread+0x3ac>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	320b      	adds	r2, #11
 800204e:	4413      	add	r3, r2
 8002050:	7819      	ldrb	r1, [r3, #0]
 8002052:	4a4f      	ldr	r2, [pc, #316]	@ (8002190 <udpecho_thread+0x3b0>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4413      	add	r3, r2
 8002058:	3304      	adds	r3, #4
 800205a:	460a      	mov	r2, r1
 800205c:	701a      	strb	r2, [r3, #0]
                    angle[2].u8t[i] = recv_data[15 + i];
 800205e:	4b4b      	ldr	r3, [pc, #300]	@ (800218c <udpecho_thread+0x3ac>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	320f      	adds	r2, #15
 8002066:	4413      	add	r3, r2
 8002068:	7819      	ldrb	r1, [r3, #0]
 800206a:	4a49      	ldr	r2, [pc, #292]	@ (8002190 <udpecho_thread+0x3b0>)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4413      	add	r3, r2
 8002070:	3308      	adds	r3, #8
 8002072:	460a      	mov	r2, r1
 8002074:	701a      	strb	r2, [r3, #0]
                    angle[3].u8t[i] = recv_data[19 + i];
 8002076:	4b45      	ldr	r3, [pc, #276]	@ (800218c <udpecho_thread+0x3ac>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	3213      	adds	r2, #19
 800207e:	4413      	add	r3, r2
 8002080:	7819      	ldrb	r1, [r3, #0]
 8002082:	4a43      	ldr	r2, [pc, #268]	@ (8002190 <udpecho_thread+0x3b0>)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4413      	add	r3, r2
 8002088:	330c      	adds	r3, #12
 800208a:	460a      	mov	r2, r1
 800208c:	701a      	strb	r2, [r3, #0]
                for(int i = 0;i < 4;i++)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	3301      	adds	r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2b03      	cmp	r3, #3
 8002098:	ddca      	ble.n	8002030 <udpecho_thread+0x250>
                }
                if((CommandTypedef.turnYaw.f != angle[0].f) || (CommandTypedef.turnPitch.f != angle[1].f) || (CommandTypedef.FSM_Yaw.f != angle[2].f) || (CommandTypedef.FSM_Pitch.f != angle[3].f))
 800209a:	4b3e      	ldr	r3, [pc, #248]	@ (8002194 <udpecho_thread+0x3b4>)
 800209c:	ed93 7a04 	vldr	s14, [r3, #16]
 80020a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002190 <udpecho_thread+0x3b0>)
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	eeb4 7a67 	vcmp.f32	s14, s15
 80020aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ae:	d120      	bne.n	80020f2 <udpecho_thread+0x312>
 80020b0:	4b38      	ldr	r3, [pc, #224]	@ (8002194 <udpecho_thread+0x3b4>)
 80020b2:	ed93 7a05 	vldr	s14, [r3, #20]
 80020b6:	4b36      	ldr	r3, [pc, #216]	@ (8002190 <udpecho_thread+0x3b0>)
 80020b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80020bc:	eeb4 7a67 	vcmp.f32	s14, s15
 80020c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c4:	d115      	bne.n	80020f2 <udpecho_thread+0x312>
 80020c6:	4b33      	ldr	r3, [pc, #204]	@ (8002194 <udpecho_thread+0x3b4>)
 80020c8:	ed93 7a06 	vldr	s14, [r3, #24]
 80020cc:	4b30      	ldr	r3, [pc, #192]	@ (8002190 <udpecho_thread+0x3b0>)
 80020ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80020d2:	eeb4 7a67 	vcmp.f32	s14, s15
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	d10a      	bne.n	80020f2 <udpecho_thread+0x312>
 80020dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002194 <udpecho_thread+0x3b4>)
 80020de:	ed93 7a07 	vldr	s14, [r3, #28]
 80020e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002190 <udpecho_thread+0x3b0>)
 80020e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80020e8:	eeb4 7a67 	vcmp.f32	s14, s15
 80020ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f0:	d002      	beq.n	80020f8 <udpecho_thread+0x318>
                {
                    servo_flag = 1;
 80020f2:	4b29      	ldr	r3, [pc, #164]	@ (8002198 <udpecho_thread+0x3b8>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
                }

                CommandTypedef.turnYaw.f        = angle[0].f;
 80020f8:	4b25      	ldr	r3, [pc, #148]	@ (8002190 <udpecho_thread+0x3b0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a25      	ldr	r2, [pc, #148]	@ (8002194 <udpecho_thread+0x3b4>)
 80020fe:	6113      	str	r3, [r2, #16]
                CommandTypedef.turnPitch.f      = angle[1].f;
 8002100:	4b23      	ldr	r3, [pc, #140]	@ (8002190 <udpecho_thread+0x3b0>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4a23      	ldr	r2, [pc, #140]	@ (8002194 <udpecho_thread+0x3b4>)
 8002106:	6153      	str	r3, [r2, #20]
                CommandTypedef.FSM_Yaw.f        = angle[2].f;
 8002108:	4b21      	ldr	r3, [pc, #132]	@ (8002190 <udpecho_thread+0x3b0>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a21      	ldr	r2, [pc, #132]	@ (8002194 <udpecho_thread+0x3b4>)
 800210e:	6193      	str	r3, [r2, #24]
                CommandTypedef.FSM_Pitch.f      = angle[3].f;
 8002110:	4b1f      	ldr	r3, [pc, #124]	@ (8002190 <udpecho_thread+0x3b0>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4a1f      	ldr	r2, [pc, #124]	@ (8002194 <udpecho_thread+0x3b4>)
 8002116:	61d3      	str	r3, [r2, #28]
                static uint32_t temp[2];
                static uint32_t exp_temp[2];
                static short dg_temp[2];
                static uint32_t offset[2];

                temp[0] = (recv_data[26]<<24) | (recv_data[25]<<16) | (recv_data[24]<<8) | recv_data[23];
 8002118:	4b1c      	ldr	r3, [pc, #112]	@ (800218c <udpecho_thread+0x3ac>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	331a      	adds	r3, #26
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	061a      	lsls	r2, r3, #24
 8002122:	4b1a      	ldr	r3, [pc, #104]	@ (800218c <udpecho_thread+0x3ac>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3319      	adds	r3, #25
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	041b      	lsls	r3, r3, #16
 800212c:	431a      	orrs	r2, r3
 800212e:	4b17      	ldr	r3, [pc, #92]	@ (800218c <udpecho_thread+0x3ac>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3318      	adds	r3, #24
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	4313      	orrs	r3, r2
 800213a:	4a14      	ldr	r2, [pc, #80]	@ (800218c <udpecho_thread+0x3ac>)
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	3217      	adds	r2, #23
 8002140:	7812      	ldrb	r2, [r2, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	461a      	mov	r2, r3
 8002146:	4b15      	ldr	r3, [pc, #84]	@ (800219c <udpecho_thread+0x3bc>)
 8002148:	601a      	str	r2, [r3, #0]
                if(CommandTypedef.zoomAdjust != temp[0])
 800214a:	4b12      	ldr	r3, [pc, #72]	@ (8002194 <udpecho_thread+0x3b4>)
 800214c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800214e:	4b13      	ldr	r3, [pc, #76]	@ (800219c <udpecho_thread+0x3bc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d002      	beq.n	800215c <udpecho_thread+0x37c>
                {
                    // uart_printf("zoomAdjust:%ld,temp:%ld\n",CommandTypedef.zoomAdjust,temp[0]);
                    zoom_flag = 1;
 8002156:	4b12      	ldr	r3, [pc, #72]	@ (80021a0 <udpecho_thread+0x3c0>)
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
                }
                CommandTypedef.zoomAdjust = temp[0];
 800215c:	4b0f      	ldr	r3, [pc, #60]	@ (800219c <udpecho_thread+0x3bc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0c      	ldr	r2, [pc, #48]	@ (8002194 <udpecho_thread+0x3b4>)
 8002162:	6253      	str	r3, [r2, #36]	@ 0x24
                CommandTypedef.clearerror = recv_data[27];
 8002164:	4b09      	ldr	r3, [pc, #36]	@ (800218c <udpecho_thread+0x3ac>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	331b      	adds	r3, #27
 800216a:	781a      	ldrb	r2, [r3, #0]
 800216c:	4b09      	ldr	r3, [pc, #36]	@ (8002194 <udpecho_thread+0x3b4>)
 800216e:	71da      	strb	r2, [r3, #7]
                CommandTypedef.manualEnable = recv_data[28];
 8002170:	4b06      	ldr	r3, [pc, #24]	@ (800218c <udpecho_thread+0x3ac>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	331c      	adds	r3, #28
 8002176:	781a      	ldrb	r2, [r3, #0]
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <udpecho_thread+0x3b4>)
 800217a:	719a      	strb	r2, [r3, #6]
                if(CommandTypedef.manualEnable == 1)
 800217c:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <udpecho_thread+0x3b4>)
 800217e:	799b      	ldrb	r3, [r3, #6]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d111      	bne.n	80021a8 <udpecho_thread+0x3c8>
                {
                    manual_flag = 1;
 8002184:	4b07      	ldr	r3, [pc, #28]	@ (80021a4 <udpecho_thread+0x3c4>)
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
 800218a:	e014      	b.n	80021b6 <udpecho_thread+0x3d6>
 800218c:	240004d0 	.word	0x240004d0
 8002190:	2400050c 	.word	0x2400050c
 8002194:	24000184 	.word	0x24000184
 8002198:	240004c2 	.word	0x240004c2
 800219c:	2400054c 	.word	0x2400054c
 80021a0:	240004c3 	.word	0x240004c3
 80021a4:	240001d8 	.word	0x240001d8
                }else if(CommandTypedef.manualEnable == 2)
 80021a8:	4b9a      	ldr	r3, [pc, #616]	@ (8002414 <udpecho_thread+0x634>)
 80021aa:	799b      	ldrb	r3, [r3, #6]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d102      	bne.n	80021b6 <udpecho_thread+0x3d6>
                {
                    manual_flag = 2;
 80021b0:	4b99      	ldr	r3, [pc, #612]	@ (8002418 <udpecho_thread+0x638>)
 80021b2:	2202      	movs	r2, #2
 80021b4:	701a      	strb	r2, [r3, #0]
                    // uart_printf("manualEnable:%d\n",CommandTypedef.manualEnable);
                }
                if(CommandTypedef.clearerror == 1)
 80021b6:	4b97      	ldr	r3, [pc, #604]	@ (8002414 <udpecho_thread+0x634>)
 80021b8:	79db      	ldrb	r3, [r3, #7]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d102      	bne.n	80021c4 <udpecho_thread+0x3e4>
                {
                    clearerror_flag = 1;
 80021be:	4b97      	ldr	r3, [pc, #604]	@ (800241c <udpecho_thread+0x63c>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
                }
                CommandTypedef.manual_center_x = (recv_data[30] << 8) | recv_data[29];
 80021c4:	4b96      	ldr	r3, [pc, #600]	@ (8002420 <udpecho_thread+0x640>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	331e      	adds	r3, #30
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	b21a      	sxth	r2, r3
 80021d0:	4b93      	ldr	r3, [pc, #588]	@ (8002420 <udpecho_thread+0x640>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	331d      	adds	r3, #29
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b21b      	sxth	r3, r3
 80021da:	4313      	orrs	r3, r2
 80021dc:	b21b      	sxth	r3, r3
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b8c      	ldr	r3, [pc, #560]	@ (8002414 <udpecho_thread+0x634>)
 80021e2:	869a      	strh	r2, [r3, #52]	@ 0x34
                CommandTypedef.manual_center_y = (recv_data[32] << 8) | recv_data[31];
 80021e4:	4b8e      	ldr	r3, [pc, #568]	@ (8002420 <udpecho_thread+0x640>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3320      	adds	r3, #32
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	b21a      	sxth	r2, r3
 80021f0:	4b8b      	ldr	r3, [pc, #556]	@ (8002420 <udpecho_thread+0x640>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	331f      	adds	r3, #31
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	4313      	orrs	r3, r2
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	b29a      	uxth	r2, r3
 8002200:	4b84      	ldr	r3, [pc, #528]	@ (8002414 <udpecho_thread+0x634>)
 8002202:	86da      	strh	r2, [r3, #54]	@ 0x36
                CommandTypedef.manual_width = (recv_data[34] << 8) | recv_data[33];
 8002204:	4b86      	ldr	r3, [pc, #536]	@ (8002420 <udpecho_thread+0x640>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	3322      	adds	r3, #34	@ 0x22
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	b21a      	sxth	r2, r3
 8002210:	4b83      	ldr	r3, [pc, #524]	@ (8002420 <udpecho_thread+0x640>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	3321      	adds	r3, #33	@ 0x21
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	b21b      	sxth	r3, r3
 800221a:	4313      	orrs	r3, r2
 800221c:	b21b      	sxth	r3, r3
 800221e:	b29a      	uxth	r2, r3
 8002220:	4b7c      	ldr	r3, [pc, #496]	@ (8002414 <udpecho_thread+0x634>)
 8002222:	871a      	strh	r2, [r3, #56]	@ 0x38
                CommandTypedef.manual_height = (recv_data[36] << 8) | recv_data[35];
 8002224:	4b7e      	ldr	r3, [pc, #504]	@ (8002420 <udpecho_thread+0x640>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3324      	adds	r3, #36	@ 0x24
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	b21a      	sxth	r2, r3
 8002230:	4b7b      	ldr	r3, [pc, #492]	@ (8002420 <udpecho_thread+0x640>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	3323      	adds	r3, #35	@ 0x23
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b21b      	sxth	r3, r3
 800223a:	4313      	orrs	r3, r2
 800223c:	b21b      	sxth	r3, r3
 800223e:	b29a      	uxth	r2, r3
 8002240:	4b74      	ldr	r3, [pc, #464]	@ (8002414 <udpecho_thread+0x634>)
 8002242:	875a      	strh	r2, [r3, #58]	@ 0x3a
                // uart_printf("manual_center_x:%d,manual_center_y:%d,manual_width:%d,manual_height:%d\n",CommandTypedef.manual_center_x,CommandTypedef.manual_center_y,CommandTypedef.manual_width,CommandTypedef.manual_height);
                CommandTypedef.manual_cj = recv_data[37];
 8002244:	4b76      	ldr	r3, [pc, #472]	@ (8002420 <udpecho_thread+0x640>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3325      	adds	r3, #37	@ 0x25
 800224a:	781a      	ldrb	r2, [r3, #0]
 800224c:	4b71      	ldr	r3, [pc, #452]	@ (8002414 <udpecho_thread+0x634>)
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                if(CommandTypedef.setTurnState != recv_data[38])
 8002252:	4b70      	ldr	r3, [pc, #448]	@ (8002414 <udpecho_thread+0x634>)
 8002254:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 8002258:	4b71      	ldr	r3, [pc, #452]	@ (8002420 <udpecho_thread+0x640>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3326      	adds	r3, #38	@ 0x26
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d002      	beq.n	800226a <udpecho_thread+0x48a>
                {
                    sifuFlag.turnStateFlag = 1;
 8002264:	4b6f      	ldr	r3, [pc, #444]	@ (8002424 <udpecho_thread+0x644>)
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
                }
                if(CommandTypedef.setFSMState != recv_data[39])
 800226a:	4b6a      	ldr	r3, [pc, #424]	@ (8002414 <udpecho_thread+0x634>)
 800226c:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 8002270:	4b6b      	ldr	r3, [pc, #428]	@ (8002420 <udpecho_thread+0x640>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3327      	adds	r3, #39	@ 0x27
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d002      	beq.n	8002282 <udpecho_thread+0x4a2>
                {
                    sifuFlag.FSMModeFlag = 1;
 800227c:	4b69      	ldr	r3, [pc, #420]	@ (8002424 <udpecho_thread+0x644>)
 800227e:	2201      	movs	r2, #1
 8002280:	70da      	strb	r2, [r3, #3]
                }
                if(CommandTypedef.trackJingEnable != recv_data[40])
 8002282:	4b64      	ldr	r3, [pc, #400]	@ (8002414 <udpecho_thread+0x634>)
 8002284:	7a5a      	ldrb	r2, [r3, #9]
 8002286:	4b66      	ldr	r3, [pc, #408]	@ (8002420 <udpecho_thread+0x640>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	3328      	adds	r3, #40	@ 0x28
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d002      	beq.n	8002298 <udpecho_thread+0x4b8>
                {
                    sifuFlag.controlEnableJingFlag = 1;
 8002292:	4b64      	ldr	r3, [pc, #400]	@ (8002424 <udpecho_thread+0x644>)
 8002294:	2201      	movs	r2, #1
 8002296:	711a      	strb	r2, [r3, #4]
                }
                if(ServoDataSendTypedef.MotorEnable != recv_data[41])
 8002298:	4b63      	ldr	r3, [pc, #396]	@ (8002428 <udpecho_thread+0x648>)
 800229a:	785a      	ldrb	r2, [r3, #1]
 800229c:	4b60      	ldr	r3, [pc, #384]	@ (8002420 <udpecho_thread+0x640>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3329      	adds	r3, #41	@ 0x29
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d002      	beq.n	80022ae <udpecho_thread+0x4ce>
                {
                    sifuFlag.motorEnableFlag = 1;
 80022a8:	4b5e      	ldr	r3, [pc, #376]	@ (8002424 <udpecho_thread+0x644>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	705a      	strb	r2, [r3, #1]
                }
                CommandTypedef.setTurnState = recv_data[38];
 80022ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002420 <udpecho_thread+0x640>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	3326      	adds	r3, #38	@ 0x26
 80022b4:	781a      	ldrb	r2, [r3, #0]
 80022b6:	4b57      	ldr	r3, [pc, #348]	@ (8002414 <udpecho_thread+0x634>)
 80022b8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
                CommandTypedef.setFSMState = recv_data[39];
 80022bc:	4b58      	ldr	r3, [pc, #352]	@ (8002420 <udpecho_thread+0x640>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	3327      	adds	r3, #39	@ 0x27
 80022c2:	781a      	ldrb	r2, [r3, #0]
 80022c4:	4b53      	ldr	r3, [pc, #332]	@ (8002414 <udpecho_thread+0x634>)
 80022c6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
                CommandTypedef.trackJingEnable = recv_data[40];
 80022ca:	4b55      	ldr	r3, [pc, #340]	@ (8002420 <udpecho_thread+0x640>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3328      	adds	r3, #40	@ 0x28
 80022d0:	781a      	ldrb	r2, [r3, #0]
 80022d2:	4b50      	ldr	r3, [pc, #320]	@ (8002414 <udpecho_thread+0x634>)
 80022d4:	725a      	strb	r2, [r3, #9]
                CommandTypedef.motorEnable = recv_data[41];
 80022d6:	4b52      	ldr	r3, [pc, #328]	@ (8002420 <udpecho_thread+0x640>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3329      	adds	r3, #41	@ 0x29
 80022dc:	781a      	ldrb	r2, [r3, #0]
 80022de:	4b4d      	ldr	r3, [pc, #308]	@ (8002414 <udpecho_thread+0x634>)
 80022e0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
                ServoDataSendTypedef.TrackingDataValid = recv_data[42];
 80022e4:	4b4e      	ldr	r3, [pc, #312]	@ (8002420 <udpecho_thread+0x640>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	332a      	adds	r3, #42	@ 0x2a
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	4b4e      	ldr	r3, [pc, #312]	@ (8002428 <udpecho_thread+0x648>)
 80022ee:	719a      	strb	r2, [r3, #6]
                exp_temp[0] = recv_data[43] | (recv_data[44] << 8) | (recv_data[45] << 16) | (recv_data[46] << 24);
 80022f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002420 <udpecho_thread+0x640>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	332b      	adds	r3, #43	@ 0x2b
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b49      	ldr	r3, [pc, #292]	@ (8002420 <udpecho_thread+0x640>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	332c      	adds	r3, #44	@ 0x2c
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	021b      	lsls	r3, r3, #8
 8002304:	431a      	orrs	r2, r3
 8002306:	4b46      	ldr	r3, [pc, #280]	@ (8002420 <udpecho_thread+0x640>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	332d      	adds	r3, #45	@ 0x2d
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	041b      	lsls	r3, r3, #16
 8002310:	431a      	orrs	r2, r3
 8002312:	4b43      	ldr	r3, [pc, #268]	@ (8002420 <udpecho_thread+0x640>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	332e      	adds	r3, #46	@ 0x2e
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	061b      	lsls	r3, r3, #24
 800231c:	4313      	orrs	r3, r2
 800231e:	461a      	mov	r2, r3
 8002320:	4b42      	ldr	r3, [pc, #264]	@ (800242c <udpecho_thread+0x64c>)
 8002322:	601a      	str	r2, [r3, #0]
                exp_temp[1] = recv_data[47] | (recv_data[48] << 8) | (recv_data[49] << 16) | (recv_data[50] << 24);
 8002324:	4b3e      	ldr	r3, [pc, #248]	@ (8002420 <udpecho_thread+0x640>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	332f      	adds	r3, #47	@ 0x2f
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	4b3c      	ldr	r3, [pc, #240]	@ (8002420 <udpecho_thread+0x640>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	3330      	adds	r3, #48	@ 0x30
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	431a      	orrs	r2, r3
 800233a:	4b39      	ldr	r3, [pc, #228]	@ (8002420 <udpecho_thread+0x640>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3331      	adds	r3, #49	@ 0x31
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	041b      	lsls	r3, r3, #16
 8002344:	431a      	orrs	r2, r3
 8002346:	4b36      	ldr	r3, [pc, #216]	@ (8002420 <udpecho_thread+0x640>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	3332      	adds	r3, #50	@ 0x32
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	061b      	lsls	r3, r3, #24
 8002350:	4313      	orrs	r3, r2
 8002352:	461a      	mov	r2, r3
 8002354:	4b35      	ldr	r3, [pc, #212]	@ (800242c <udpecho_thread+0x64c>)
 8002356:	605a      	str	r2, [r3, #4]
                if(CommandTypedef.exposureCU != exp_temp[0])
 8002358:	4b2e      	ldr	r3, [pc, #184]	@ (8002414 <udpecho_thread+0x634>)
 800235a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800235c:	4b33      	ldr	r3, [pc, #204]	@ (800242c <udpecho_thread+0x64c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d002      	beq.n	800236a <udpecho_thread+0x58a>
                {
                    expose_flag = 1;
 8002364:	4b32      	ldr	r3, [pc, #200]	@ (8002430 <udpecho_thread+0x650>)
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
                }
                if(CommandTypedef.exposureJING != exp_temp[1])
 800236a:	4b2a      	ldr	r3, [pc, #168]	@ (8002414 <udpecho_thread+0x634>)
 800236c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800236e:	4b2f      	ldr	r3, [pc, #188]	@ (800242c <udpecho_thread+0x64c>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	d002      	beq.n	800237c <udpecho_thread+0x59c>
                {
                    exposeJing_flag = 1;
 8002376:	4b2f      	ldr	r3, [pc, #188]	@ (8002434 <udpecho_thread+0x654>)
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]
                }
                CommandTypedef.exposureCU = exp_temp[0];
 800237c:	4b2b      	ldr	r3, [pc, #172]	@ (800242c <udpecho_thread+0x64c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a24      	ldr	r2, [pc, #144]	@ (8002414 <udpecho_thread+0x634>)
 8002382:	6293      	str	r3, [r2, #40]	@ 0x28
                CommandTypedef.exposureJING = exp_temp[1];
 8002384:	4b29      	ldr	r3, [pc, #164]	@ (800242c <udpecho_thread+0x64c>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4a22      	ldr	r2, [pc, #136]	@ (8002414 <udpecho_thread+0x634>)
 800238a:	62d3      	str	r3, [r2, #44]	@ 0x2c
                dg_temp[0] = (recv_data[51] << 8) | recv_data[52];
 800238c:	4b24      	ldr	r3, [pc, #144]	@ (8002420 <udpecho_thread+0x640>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	3333      	adds	r3, #51	@ 0x33
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	b21a      	sxth	r2, r3
 8002398:	4b21      	ldr	r3, [pc, #132]	@ (8002420 <udpecho_thread+0x640>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	3334      	adds	r3, #52	@ 0x34
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	4313      	orrs	r3, r2
 80023a4:	b21a      	sxth	r2, r3
 80023a6:	4b24      	ldr	r3, [pc, #144]	@ (8002438 <udpecho_thread+0x658>)
 80023a8:	801a      	strh	r2, [r3, #0]
                dg_temp[1] = (recv_data[53] << 8) | recv_data[54];
 80023aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002420 <udpecho_thread+0x640>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	3335      	adds	r3, #53	@ 0x35
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	b21a      	sxth	r2, r3
 80023b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <udpecho_thread+0x640>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	3336      	adds	r3, #54	@ 0x36
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	b21b      	sxth	r3, r3
 80023c0:	4313      	orrs	r3, r2
 80023c2:	b21a      	sxth	r2, r3
 80023c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <udpecho_thread+0x658>)
 80023c6:	805a      	strh	r2, [r3, #2]
                if(CommandTypedef.dgPitch != dg_temp[0] || CommandTypedef.dgYaw != dg_temp[1])
 80023c8:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <udpecho_thread+0x634>)
 80023ca:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	@ 0x4c
 80023ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002438 <udpecho_thread+0x658>)
 80023d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d107      	bne.n	80023e8 <udpecho_thread+0x608>
 80023d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <udpecho_thread+0x634>)
 80023da:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	@ 0x4e
 80023de:	4b16      	ldr	r3, [pc, #88]	@ (8002438 <udpecho_thread+0x658>)
 80023e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d00d      	beq.n	8002404 <udpecho_thread+0x624>
                {
                    uart_printf("dgPitch:%d,dgYaw:%d\n",CommandTypedef.dgPitch,CommandTypedef.dgYaw);
 80023e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <udpecho_thread+0x634>)
 80023ea:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 80023ee:	4619      	mov	r1, r3
 80023f0:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <udpecho_thread+0x634>)
 80023f2:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	@ 0x4e
 80023f6:	461a      	mov	r2, r3
 80023f8:	4810      	ldr	r0, [pc, #64]	@ (800243c <udpecho_thread+0x65c>)
 80023fa:	f002 fdbf 	bl	8004f7c <uart_printf>
                    sifuFlag.dgFlag = 1;
 80023fe:	4b09      	ldr	r3, [pc, #36]	@ (8002424 <udpecho_thread+0x644>)
 8002400:	2201      	movs	r2, #1
 8002402:	715a      	strb	r2, [r3, #5]
                }
                CommandTypedef.dgPitch = (recv_data[52] << 8) | recv_data[51];
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <udpecho_thread+0x640>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3334      	adds	r3, #52	@ 0x34
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	b21a      	sxth	r2, r3
 8002410:	e016      	b.n	8002440 <udpecho_thread+0x660>
 8002412:	bf00      	nop
 8002414:	24000184 	.word	0x24000184
 8002418:	240001d8 	.word	0x240001d8
 800241c:	240004c5 	.word	0x240004c5
 8002420:	240004d0 	.word	0x240004d0
 8002424:	240004b8 	.word	0x240004b8
 8002428:	24000154 	.word	0x24000154
 800242c:	24000554 	.word	0x24000554
 8002430:	240004be 	.word	0x240004be
 8002434:	240004bf 	.word	0x240004bf
 8002438:	2400055c 	.word	0x2400055c
 800243c:	08029360 	.word	0x08029360
 8002440:	4b56      	ldr	r3, [pc, #344]	@ (800259c <udpecho_thread+0x7bc>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3333      	adds	r3, #51	@ 0x33
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b21b      	sxth	r3, r3
 800244a:	4313      	orrs	r3, r2
 800244c:	b21a      	sxth	r2, r3
 800244e:	4b54      	ldr	r3, [pc, #336]	@ (80025a0 <udpecho_thread+0x7c0>)
 8002450:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
                CommandTypedef.dgYaw = (recv_data[54] << 8) | recv_data[53];
 8002454:	4b51      	ldr	r3, [pc, #324]	@ (800259c <udpecho_thread+0x7bc>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	3336      	adds	r3, #54	@ 0x36
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	b21a      	sxth	r2, r3
 8002460:	4b4e      	ldr	r3, [pc, #312]	@ (800259c <udpecho_thread+0x7bc>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	3335      	adds	r3, #53	@ 0x35
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	b21b      	sxth	r3, r3
 800246a:	4313      	orrs	r3, r2
 800246c:	b21a      	sxth	r2, r3
 800246e:	4b4c      	ldr	r3, [pc, #304]	@ (80025a0 <udpecho_thread+0x7c0>)
 8002470:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
                
                if(CommandTypedef.imgEnableCu != recv_data[55])
 8002474:	4b4a      	ldr	r3, [pc, #296]	@ (80025a0 <udpecho_thread+0x7c0>)
 8002476:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800247a:	4b48      	ldr	r3, [pc, #288]	@ (800259c <udpecho_thread+0x7bc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	3337      	adds	r3, #55	@ 0x37
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d002      	beq.n	800248c <udpecho_thread+0x6ac>
                {
                    imgFlag[0] = 1;
 8002486:	4b47      	ldr	r3, [pc, #284]	@ (80025a4 <udpecho_thread+0x7c4>)
 8002488:	2201      	movs	r2, #1
 800248a:	701a      	strb	r2, [r3, #0]
                }
                if(CommandTypedef.imgEnableJing != recv_data[56])
 800248c:	4b44      	ldr	r3, [pc, #272]	@ (80025a0 <udpecho_thread+0x7c0>)
 800248e:	f893 2051 	ldrb.w	r2, [r3, #81]	@ 0x51
 8002492:	4b42      	ldr	r3, [pc, #264]	@ (800259c <udpecho_thread+0x7bc>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3338      	adds	r3, #56	@ 0x38
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d002      	beq.n	80024a4 <udpecho_thread+0x6c4>
                {
                    imgFlag[1] = 1;
 800249e:	4b41      	ldr	r3, [pc, #260]	@ (80025a4 <udpecho_thread+0x7c4>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	705a      	strb	r2, [r3, #1]
                }
                CommandTypedef.imgEnableCu = recv_data[55];
 80024a4:	4b3d      	ldr	r3, [pc, #244]	@ (800259c <udpecho_thread+0x7bc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3337      	adds	r3, #55	@ 0x37
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	4b3c      	ldr	r3, [pc, #240]	@ (80025a0 <udpecho_thread+0x7c0>)
 80024ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                CommandTypedef.imgEnableJing = recv_data[56];
 80024b2:	4b3a      	ldr	r3, [pc, #232]	@ (800259c <udpecho_thread+0x7bc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	3338      	adds	r3, #56	@ 0x38
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	4b39      	ldr	r3, [pc, #228]	@ (80025a0 <udpecho_thread+0x7c0>)
 80024bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
                offset[0] = (recv_data[60] << 24) | (recv_data[59] << 16) | (recv_data[58] << 8) | recv_data[57];
 80024c0:	4b36      	ldr	r3, [pc, #216]	@ (800259c <udpecho_thread+0x7bc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	333c      	adds	r3, #60	@ 0x3c
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	061a      	lsls	r2, r3, #24
 80024ca:	4b34      	ldr	r3, [pc, #208]	@ (800259c <udpecho_thread+0x7bc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	333b      	adds	r3, #59	@ 0x3b
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	041b      	lsls	r3, r3, #16
 80024d4:	431a      	orrs	r2, r3
 80024d6:	4b31      	ldr	r3, [pc, #196]	@ (800259c <udpecho_thread+0x7bc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	333a      	adds	r3, #58	@ 0x3a
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	4313      	orrs	r3, r2
 80024e2:	4a2e      	ldr	r2, [pc, #184]	@ (800259c <udpecho_thread+0x7bc>)
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	3239      	adds	r2, #57	@ 0x39
 80024e8:	7812      	ldrb	r2, [r2, #0]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b2e      	ldr	r3, [pc, #184]	@ (80025a8 <udpecho_thread+0x7c8>)
 80024f0:	601a      	str	r2, [r3, #0]
                offset[1] = (recv_data[64] << 24) | (recv_data[63] << 16) | (recv_data[62] << 8) | recv_data[61];
 80024f2:	4b2a      	ldr	r3, [pc, #168]	@ (800259c <udpecho_thread+0x7bc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	3340      	adds	r3, #64	@ 0x40
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	061a      	lsls	r2, r3, #24
 80024fc:	4b27      	ldr	r3, [pc, #156]	@ (800259c <udpecho_thread+0x7bc>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	333f      	adds	r3, #63	@ 0x3f
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	041b      	lsls	r3, r3, #16
 8002506:	431a      	orrs	r2, r3
 8002508:	4b24      	ldr	r3, [pc, #144]	@ (800259c <udpecho_thread+0x7bc>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	333e      	adds	r3, #62	@ 0x3e
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	4313      	orrs	r3, r2
 8002514:	4a21      	ldr	r2, [pc, #132]	@ (800259c <udpecho_thread+0x7bc>)
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	323d      	adds	r2, #61	@ 0x3d
 800251a:	7812      	ldrb	r2, [r2, #0]
 800251c:	4313      	orrs	r3, r2
 800251e:	461a      	mov	r2, r3
 8002520:	4b21      	ldr	r3, [pc, #132]	@ (80025a8 <udpecho_thread+0x7c8>)
 8002522:	605a      	str	r2, [r3, #4]
                if(CommandTypedef.x_offset.u32t != offset[0] || CommandTypedef.y_offset.u32t != offset[1])
 8002524:	4b1e      	ldr	r3, [pc, #120]	@ (80025a0 <udpecho_thread+0x7c0>)
 8002526:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002528:	4b1f      	ldr	r3, [pc, #124]	@ (80025a8 <udpecho_thread+0x7c8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d105      	bne.n	800253c <udpecho_thread+0x75c>
 8002530:	4b1b      	ldr	r3, [pc, #108]	@ (80025a0 <udpecho_thread+0x7c0>)
 8002532:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002534:	4b1c      	ldr	r3, [pc, #112]	@ (80025a8 <udpecho_thread+0x7c8>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	429a      	cmp	r2, r3
 800253a:	d002      	beq.n	8002542 <udpecho_thread+0x762>
                {
                    offset_flag = 1;
 800253c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <udpecho_thread+0x7cc>)
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]
                }
                CommandTypedef.x_offset.u32t = offset[0];
 8002542:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <udpecho_thread+0x7c8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a16      	ldr	r2, [pc, #88]	@ (80025a0 <udpecho_thread+0x7c0>)
 8002548:	6413      	str	r3, [r2, #64]	@ 0x40
                CommandTypedef.y_offset.u32t = offset[1];
 800254a:	4b17      	ldr	r3, [pc, #92]	@ (80025a8 <udpecho_thread+0x7c8>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4a14      	ldr	r2, [pc, #80]	@ (80025a0 <udpecho_thread+0x7c0>)
 8002550:	6453      	str	r3, [r2, #68]	@ 0x44
                uart_printf("x_offset:%ld,y_offset:%ld\n",CommandTypedef.x_offset.u32t,CommandTypedef.y_offset.u32t);
 8002552:	4b13      	ldr	r3, [pc, #76]	@ (80025a0 <udpecho_thread+0x7c0>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	4a12      	ldr	r2, [pc, #72]	@ (80025a0 <udpecho_thread+0x7c0>)
 8002558:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800255a:	4619      	mov	r1, r3
 800255c:	4814      	ldr	r0, [pc, #80]	@ (80025b0 <udpecho_thread+0x7d0>)
 800255e:	f002 fd0d 	bl	8004f7c <uart_printf>
//           }
//           sendto(sock,recv_data,
//               recv_data_len,0,
//               (struct sockaddr*)&seraddr,
//               addrlen);
             osDelay(10);
 8002562:	200a      	movs	r0, #10
 8002564:	f010 f91e 	bl	80127a4 <osDelay>
             recv_data_len=recvfrom(sock,recv_data,
 8002568:	e479      	b.n	8001e5e <udpecho_thread+0x7e>
            goto __exit;
 800256a:	bf00      	nop
 800256c:	e002      	b.n	8002574 <udpecho_thread+0x794>
            goto __exit;
 800256e:	bf00      	nop
 8002570:	e000      	b.n	8002574 <udpecho_thread+0x794>
            goto __exit;
 8002572:	bf00      	nop
        }

__exit:
        if (sock >= 0) closesocket(sock);
 8002574:	4b0f      	ldr	r3, [pc, #60]	@ (80025b4 <udpecho_thread+0x7d4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db04      	blt.n	8002586 <udpecho_thread+0x7a6>
 800257c:	4b0d      	ldr	r3, [pc, #52]	@ (80025b4 <udpecho_thread+0x7d4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f015 fb65 	bl	8017c50 <lwip_close>
        if (recv_data) free(recv_data);
 8002586:	4b05      	ldr	r3, [pc, #20]	@ (800259c <udpecho_thread+0x7bc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f43f ac2c 	beq.w	8001de8 <udpecho_thread+0x8>
 8002590:	4b02      	ldr	r3, [pc, #8]	@ (800259c <udpecho_thread+0x7bc>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f021 ff31 	bl	80243fc <free>
        recv_data = (char *)pvPortMalloc(RECV_DATA);
 800259a:	e425      	b.n	8001de8 <udpecho_thread+0x8>
 800259c:	240004d0 	.word	0x240004d0
 80025a0:	24000184 	.word	0x24000184
 80025a4:	240004cc 	.word	0x240004cc
 80025a8:	24000560 	.word	0x24000560
 80025ac:	240004c7 	.word	0x240004c7
 80025b0:	08029378 	.word	0x08029378
 80025b4:	240001dc 	.word	0x240001dc

080025b8 <WriteEthTask>:
}

// char data[256];

static void WriteEthTask(void *thread_param)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af02      	add	r7, sp, #8
 80025be:	6078      	str	r0, [r7, #4]
    //         senddata[i] = i;
    //  }
     while(1)
     {
        //  senddata = (char *)pvPortMalloc(128);
        sockw = socket(AF_INET, SOCK_DGRAM, 0);
 80025c0:	2200      	movs	r2, #0
 80025c2:	2102      	movs	r1, #2
 80025c4:	2002      	movs	r0, #2
 80025c6:	f015 ffbf 	bl	8018548 <lwip_socket>
 80025ca:	4603      	mov	r3, r0
 80025cc:	4a95      	ldr	r2, [pc, #596]	@ (8002824 <WriteEthTask+0x26c>)
 80025ce:	6013      	str	r3, [r2, #0]
        // {
        //     // uart_printf("No memory\n");
        //     goto __exit;
        // }
        
        addrlen = sizeof(struct sockaddr);
 80025d0:	4b95      	ldr	r3, [pc, #596]	@ (8002828 <WriteEthTask+0x270>)
 80025d2:	2210      	movs	r2, #16
 80025d4:	601a      	str	r2, [r3, #0]
        sendaddr.sin_family = AF_INET;
 80025d6:	4b95      	ldr	r3, [pc, #596]	@ (800282c <WriteEthTask+0x274>)
 80025d8:	2202      	movs	r2, #2
 80025da:	705a      	strb	r2, [r3, #1]
        sendaddr.sin_addr.s_addr = inet_addr(IP_ADDR);
 80025dc:	4894      	ldr	r0, [pc, #592]	@ (8002830 <WriteEthTask+0x278>)
 80025de:	f020 fcd0 	bl	8022f82 <ipaddr_addr>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4a91      	ldr	r2, [pc, #580]	@ (800282c <WriteEthTask+0x274>)
 80025e6:	6053      	str	r3, [r2, #4]
        sendaddr.sin_port = htons(10802);
 80025e8:	f642 2032 	movw	r0, #10802	@ 0x2a32
 80025ec:	f016 fb50 	bl	8018c90 <lwip_htons>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b8d      	ldr	r3, [pc, #564]	@ (800282c <WriteEthTask+0x274>)
 80025f6:	805a      	strh	r2, [r3, #2]
//        if (bind(sock, (struct sockaddr *)&sendaddr, sizeof(struct sockaddr)) == -1)
//        {
//            // uart_printf("Unable to bind\n");
//            goto __exit;
//        }
        memset(&(sendaddr.sin_zero), 0, sizeof(sendaddr.sin_zero));
 80025f8:	2208      	movs	r2, #8
 80025fa:	2100      	movs	r1, #0
 80025fc:	488d      	ldr	r0, [pc, #564]	@ (8002834 <WriteEthTask+0x27c>)
 80025fe:	f023 f85d 	bl	80256bc <memset>
        while(1)
        {
            senddata[0] = 0x90;
 8002602:	4b8d      	ldr	r3, [pc, #564]	@ (8002838 <WriteEthTask+0x280>)
 8002604:	2290      	movs	r2, #144	@ 0x90
 8002606:	701a      	strb	r2, [r3, #0]
            senddata[1] = 0x60;
 8002608:	4b8b      	ldr	r3, [pc, #556]	@ (8002838 <WriteEthTask+0x280>)
 800260a:	2260      	movs	r2, #96	@ 0x60
 800260c:	705a      	strb	r2, [r3, #1]
            pcSend.XoffsetCu.f = ImgRecvDataTypedef_CU.Offset_X;
 800260e:	4b8b      	ldr	r3, [pc, #556]	@ (800283c <WriteEthTask+0x284>)
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	4a8b      	ldr	r2, [pc, #556]	@ (8002840 <WriteEthTask+0x288>)
 8002614:	6013      	str	r3, [r2, #0]
            pcSend.YoffsetCu.f = ImgRecvDataTypedef_CU.Offset_Y;
 8002616:	4b89      	ldr	r3, [pc, #548]	@ (800283c <WriteEthTask+0x284>)
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	4a89      	ldr	r2, [pc, #548]	@ (8002840 <WriteEthTask+0x288>)
 800261c:	6053      	str	r3, [r2, #4]
            pcSend.XoffsetJing.f = ImgRecvDataTypedef_JING.Offset_X;
 800261e:	4b89      	ldr	r3, [pc, #548]	@ (8002844 <WriteEthTask+0x28c>)
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	4a87      	ldr	r2, [pc, #540]	@ (8002840 <WriteEthTask+0x288>)
 8002624:	6093      	str	r3, [r2, #8]
            pcSend.YoffsetJing.f = ImgRecvDataTypedef_JING.Offset_Y;
 8002626:	4b87      	ldr	r3, [pc, #540]	@ (8002844 <WriteEthTask+0x28c>)
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	4a85      	ldr	r2, [pc, #532]	@ (8002840 <WriteEthTask+0x288>)
 800262c:	60d3      	str	r3, [r2, #12]
            pcSend.rangefinder.f = RangeFinderRevData.Distance;
 800262e:	4b86      	ldr	r3, [pc, #536]	@ (8002848 <WriteEthTask+0x290>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	4a83      	ldr	r2, [pc, #524]	@ (8002840 <WriteEthTask+0x288>)
 8002634:	6113      	str	r3, [r2, #16]
            pcSend.ServoYaw.f = ServoRevTypedef.ServoYawPos.f;
 8002636:	4b85      	ldr	r3, [pc, #532]	@ (800284c <WriteEthTask+0x294>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	4a81      	ldr	r2, [pc, #516]	@ (8002840 <WriteEthTask+0x288>)
 800263c:	6153      	str	r3, [r2, #20]
            // pcSend.ServoYaw.f += 0.01;
            pcSend.ServoPitch.f = ServoRevTypedef.ServoPitchPos.f;
 800263e:	4b83      	ldr	r3, [pc, #524]	@ (800284c <WriteEthTask+0x294>)
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	4a7f      	ldr	r2, [pc, #508]	@ (8002840 <WriteEthTask+0x288>)
 8002644:	6193      	str	r3, [r2, #24]
            // pcSend.state = state;
            // pcSend.cuEnable = 0;
            // pcSend.jingEnable = 0;
            for(int i = 0;i < 4;i++)
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	e040      	b.n	80026ce <WriteEthTask+0x116>
            {
                senddata[2+i] = pcSend.XoffsetCu.u8t[i];
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3302      	adds	r3, #2
 8002650:	497b      	ldr	r1, [pc, #492]	@ (8002840 <WriteEthTask+0x288>)
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	440a      	add	r2, r1
 8002656:	7811      	ldrb	r1, [r2, #0]
 8002658:	4a77      	ldr	r2, [pc, #476]	@ (8002838 <WriteEthTask+0x280>)
 800265a:	54d1      	strb	r1, [r2, r3]
                senddata[6+i] = pcSend.YoffsetCu.u8t[i];
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	3306      	adds	r3, #6
 8002660:	4977      	ldr	r1, [pc, #476]	@ (8002840 <WriteEthTask+0x288>)
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	440a      	add	r2, r1
 8002666:	3204      	adds	r2, #4
 8002668:	7811      	ldrb	r1, [r2, #0]
 800266a:	4a73      	ldr	r2, [pc, #460]	@ (8002838 <WriteEthTask+0x280>)
 800266c:	54d1      	strb	r1, [r2, r3]
                senddata[10+i] = pcSend.XoffsetJing.u8t[i];
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	330a      	adds	r3, #10
 8002672:	4973      	ldr	r1, [pc, #460]	@ (8002840 <WriteEthTask+0x288>)
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	440a      	add	r2, r1
 8002678:	3208      	adds	r2, #8
 800267a:	7811      	ldrb	r1, [r2, #0]
 800267c:	4a6e      	ldr	r2, [pc, #440]	@ (8002838 <WriteEthTask+0x280>)
 800267e:	54d1      	strb	r1, [r2, r3]
                senddata[14+i] = pcSend.YoffsetJing.u8t[i];
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	330e      	adds	r3, #14
 8002684:	496e      	ldr	r1, [pc, #440]	@ (8002840 <WriteEthTask+0x288>)
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	440a      	add	r2, r1
 800268a:	320c      	adds	r2, #12
 800268c:	7811      	ldrb	r1, [r2, #0]
 800268e:	4a6a      	ldr	r2, [pc, #424]	@ (8002838 <WriteEthTask+0x280>)
 8002690:	54d1      	strb	r1, [r2, r3]
                senddata[18+i] = pcSend.rangefinder.u8t[i];
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3312      	adds	r3, #18
 8002696:	496a      	ldr	r1, [pc, #424]	@ (8002840 <WriteEthTask+0x288>)
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	440a      	add	r2, r1
 800269c:	3210      	adds	r2, #16
 800269e:	7811      	ldrb	r1, [r2, #0]
 80026a0:	4a65      	ldr	r2, [pc, #404]	@ (8002838 <WriteEthTask+0x280>)
 80026a2:	54d1      	strb	r1, [r2, r3]
                senddata[22+i] = pcSend.ServoYaw.u8t[i];
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	3316      	adds	r3, #22
 80026a8:	4965      	ldr	r1, [pc, #404]	@ (8002840 <WriteEthTask+0x288>)
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	440a      	add	r2, r1
 80026ae:	3214      	adds	r2, #20
 80026b0:	7811      	ldrb	r1, [r2, #0]
 80026b2:	4a61      	ldr	r2, [pc, #388]	@ (8002838 <WriteEthTask+0x280>)
 80026b4:	54d1      	strb	r1, [r2, r3]
                senddata[26+i] = pcSend.ServoPitch.u8t[i];
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	331a      	adds	r3, #26
 80026ba:	4961      	ldr	r1, [pc, #388]	@ (8002840 <WriteEthTask+0x288>)
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	440a      	add	r2, r1
 80026c0:	3218      	adds	r2, #24
 80026c2:	7811      	ldrb	r1, [r2, #0]
 80026c4:	4a5c      	ldr	r2, [pc, #368]	@ (8002838 <WriteEthTask+0x280>)
 80026c6:	54d1      	strb	r1, [r2, r3]
            for(int i = 0;i < 4;i++)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	3301      	adds	r3, #1
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	ddbb      	ble.n	800264c <WriteEthTask+0x94>
            }
            // senddata[30] = pcSend.state;
            switch(state){
 80026d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002850 <WriteEthTask+0x298>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	3b01      	subs	r3, #1
 80026da:	2b05      	cmp	r3, #5
 80026dc:	d822      	bhi.n	8002724 <WriteEthTask+0x16c>
 80026de:	a201      	add	r2, pc, #4	@ (adr r2, 80026e4 <WriteEthTask+0x12c>)
 80026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e4:	0800271d 	.word	0x0800271d
 80026e8:	0800270d 	.word	0x0800270d
 80026ec:	08002715 	.word	0x08002715
 80026f0:	080026fd 	.word	0x080026fd
 80026f4:	08002725 	.word	0x08002725
 80026f8:	08002705 	.word	0x08002705
                case STATE_GUIDE:
                    senddata[30] = bit(3);
 80026fc:	4b4e      	ldr	r3, [pc, #312]	@ (8002838 <WriteEthTask+0x280>)
 80026fe:	2208      	movs	r2, #8
 8002700:	779a      	strb	r2, [r3, #30]
                    break;
 8002702:	e00f      	b.n	8002724 <WriteEthTask+0x16c>
                case STATE_CATCH:
                    senddata[30] = bit(4);
 8002704:	4b4c      	ldr	r3, [pc, #304]	@ (8002838 <WriteEthTask+0x280>)
 8002706:	2210      	movs	r2, #16
 8002708:	779a      	strb	r2, [r3, #30]
                    break;
 800270a:	e00b      	b.n	8002724 <WriteEthTask+0x16c>
                case STATE_STANDBY:
                    senddata[30] = bit(1);
 800270c:	4b4a      	ldr	r3, [pc, #296]	@ (8002838 <WriteEthTask+0x280>)
 800270e:	2202      	movs	r2, #2
 8002710:	779a      	strb	r2, [r3, #30]
                    break;
 8002712:	e007      	b.n	8002724 <WriteEthTask+0x16c>
                case STATE_STANDBYDISABLE:
                    senddata[30] = bit(2);
 8002714:	4b48      	ldr	r3, [pc, #288]	@ (8002838 <WriteEthTask+0x280>)
 8002716:	2204      	movs	r2, #4
 8002718:	779a      	strb	r2, [r3, #30]
                    break;
 800271a:	e003      	b.n	8002724 <WriteEthTask+0x16c>
                case STATE_ZERO:
                    senddata[30] = bit(0);
 800271c:	4b46      	ldr	r3, [pc, #280]	@ (8002838 <WriteEthTask+0x280>)
 800271e:	2201      	movs	r2, #1
 8002720:	779a      	strb	r2, [r3, #30]
                    break;
 8002722:	bf00      	nop
            }
            senddata[31] = pcSend.cuEnable; 
 8002724:	4b46      	ldr	r3, [pc, #280]	@ (8002840 <WriteEthTask+0x288>)
 8002726:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800272a:	4b43      	ldr	r3, [pc, #268]	@ (8002838 <WriteEthTask+0x280>)
 800272c:	77da      	strb	r2, [r3, #31]
            senddata[32] = pcSend.jingEnable;
 800272e:	4b44      	ldr	r3, [pc, #272]	@ (8002840 <WriteEthTask+0x288>)
 8002730:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8002734:	4b40      	ldr	r3, [pc, #256]	@ (8002838 <WriteEthTask+0x280>)
 8002736:	f883 2020 	strb.w	r2, [r3, #32]
            
            pcSend.FSM_Yaw.f = ServoRevTypedef.FSMXPos.f;
 800273a:	4b44      	ldr	r3, [pc, #272]	@ (800284c <WriteEthTask+0x294>)
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	4a40      	ldr	r2, [pc, #256]	@ (8002840 <WriteEthTask+0x288>)
 8002740:	6213      	str	r3, [r2, #32]
            pcSend.FSM_Pitch.f = ServoRevTypedef.FSMYPos.f;
 8002742:	4b42      	ldr	r3, [pc, #264]	@ (800284c <WriteEthTask+0x294>)
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	4a3e      	ldr	r2, [pc, #248]	@ (8002840 <WriteEthTask+0x288>)
 8002748:	61d3      	str	r3, [r2, #28]

            for(int i = 0;i < 4;i++)
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	e014      	b.n	800277a <WriteEthTask+0x1c2>
            {
                senddata[33+i] = pcSend.FSM_Yaw.u8t[i];
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	3321      	adds	r3, #33	@ 0x21
 8002754:	493a      	ldr	r1, [pc, #232]	@ (8002840 <WriteEthTask+0x288>)
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	440a      	add	r2, r1
 800275a:	3220      	adds	r2, #32
 800275c:	7811      	ldrb	r1, [r2, #0]
 800275e:	4a36      	ldr	r2, [pc, #216]	@ (8002838 <WriteEthTask+0x280>)
 8002760:	54d1      	strb	r1, [r2, r3]
                senddata[37+i] = pcSend.FSM_Pitch.u8t[i];
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	3325      	adds	r3, #37	@ 0x25
 8002766:	4936      	ldr	r1, [pc, #216]	@ (8002840 <WriteEthTask+0x288>)
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	440a      	add	r2, r1
 800276c:	321c      	adds	r2, #28
 800276e:	7811      	ldrb	r1, [r2, #0]
 8002770:	4a31      	ldr	r2, [pc, #196]	@ (8002838 <WriteEthTask+0x280>)
 8002772:	54d1      	strb	r1, [r2, r3]
            for(int i = 0;i < 4;i++)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	3301      	adds	r3, #1
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b03      	cmp	r3, #3
 800277e:	dde7      	ble.n	8002750 <WriteEthTask+0x198>
            }
            pcSend.servoTrackingState = ServoRevTypedef.cTurnTableTrackState;
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <WriteEthTask+0x294>)
 8002782:	7b1a      	ldrb	r2, [r3, #12]
 8002784:	4b2e      	ldr	r3, [pc, #184]	@ (8002840 <WriteEthTask+0x288>)
 8002786:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
            pcSend.FSMTrackingState = ServoRevTypedef.cFSMTrackState;
 800278a:	4b30      	ldr	r3, [pc, #192]	@ (800284c <WriteEthTask+0x294>)
 800278c:	7b5a      	ldrb	r2, [r3, #13]
 800278e:	4b2c      	ldr	r3, [pc, #176]	@ (8002840 <WriteEthTask+0x288>)
 8002790:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            // senddata[41] = pcSend.servoTrackingState;
            // senddata[42] = pcSend.FSMTrackingState;
            senddata[41] = pcSend.servoTrackingState;
 8002794:	4b2a      	ldr	r3, [pc, #168]	@ (8002840 <WriteEthTask+0x288>)
 8002796:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800279a:	4b27      	ldr	r3, [pc, #156]	@ (8002838 <WriteEthTask+0x280>)
 800279c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            senddata[42] = pcSend.FSMTrackingState;
 80027a0:	4b27      	ldr	r3, [pc, #156]	@ (8002840 <WriteEthTask+0x288>)
 80027a2:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80027a6:	4b24      	ldr	r3, [pc, #144]	@ (8002838 <WriteEthTask+0x280>)
 80027a8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            for(int i = 0;i < 2;i++)
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	e014      	b.n	80027dc <WriteEthTask+0x224>
            {
                senddata[43+i] = pcSend.cuErrorCode[i];
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	332b      	adds	r3, #43	@ 0x2b
 80027b6:	4922      	ldr	r1, [pc, #136]	@ (8002840 <WriteEthTask+0x288>)
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	440a      	add	r2, r1
 80027bc:	3229      	adds	r2, #41	@ 0x29
 80027be:	7811      	ldrb	r1, [r2, #0]
 80027c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002838 <WriteEthTask+0x280>)
 80027c2:	54d1      	strb	r1, [r2, r3]
                senddata[45+i] = pcSend.jingErrorCode[i];
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	332d      	adds	r3, #45	@ 0x2d
 80027c8:	491d      	ldr	r1, [pc, #116]	@ (8002840 <WriteEthTask+0x288>)
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	440a      	add	r2, r1
 80027ce:	322b      	adds	r2, #43	@ 0x2b
 80027d0:	7811      	ldrb	r1, [r2, #0]
 80027d2:	4a19      	ldr	r2, [pc, #100]	@ (8002838 <WriteEthTask+0x280>)
 80027d4:	54d1      	strb	r1, [r2, r3]
            for(int i = 0;i < 2;i++)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3301      	adds	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	dde7      	ble.n	80027b2 <WriteEthTask+0x1fa>
            }
            senddata[47] = pcSend.cuOffsetState;
 80027e2:	4b17      	ldr	r3, [pc, #92]	@ (8002840 <WriteEthTask+0x288>)
 80027e4:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80027e8:	4b13      	ldr	r3, [pc, #76]	@ (8002838 <WriteEthTask+0x280>)
 80027ea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
            senddata[48] = pcSend.jingOffsetState; 
 80027ee:	4b14      	ldr	r3, [pc, #80]	@ (8002840 <WriteEthTask+0x288>)
 80027f0:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80027f4:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <WriteEthTask+0x280>)
 80027f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            // senddata[49] = TrackingFaultCodeCu.errorCode[0];
            // senddata[50] = TrackingFaultCodeCu.errorCode[1];
            // senddata[51] = TrackingFaultCodeJing.errorCode[0];
            // senddata[52] = TrackingFaultCodeJing.errorCode[1];

            senddata[53] = 0xee;
 80027fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002838 <WriteEthTask+0x280>)
 80027fc:	22ee      	movs	r2, #238	@ 0xee
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            sendto(sockw,senddata,54,0,(struct sockaddr*)&sendaddr,addrlen);
 8002802:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <WriteEthTask+0x26c>)
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	4b08      	ldr	r3, [pc, #32]	@ (8002828 <WriteEthTask+0x270>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	4b07      	ldr	r3, [pc, #28]	@ (800282c <WriteEthTask+0x274>)
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2300      	movs	r3, #0
 8002812:	2236      	movs	r2, #54	@ 0x36
 8002814:	4908      	ldr	r1, [pc, #32]	@ (8002838 <WriteEthTask+0x280>)
 8002816:	f015 fde5 	bl	80183e4 <lwip_sendto>
            // }
            // if(sendto(sockw,data,128,0,(struct sockaddr*)&sendaddr,addrlen) > 0)
            // {
//                HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
            // }
            osDelay(50);
 800281a:	2032      	movs	r0, #50	@ 0x32
 800281c:	f00f ffc2 	bl	80127a4 <osDelay>
            senddata[0] = 0x90;
 8002820:	e6ef      	b.n	8002602 <WriteEthTask+0x4a>
 8002822:	bf00      	nop
 8002824:	240001e0 	.word	0x240001e0
 8002828:	24000508 	.word	0x24000508
 800282c:	240004f4 	.word	0x240004f4
 8002830:	08029394 	.word	0x08029394
 8002834:	240004fc 	.word	0x240004fc
 8002838:	30004a84 	.word	0x30004a84
 800283c:	24000408 	.word	0x24000408
 8002840:	2400051c 	.word	0x2400051c
 8002844:	24000424 	.word	0x24000424
 8002848:	24000440 	.word	0x24000440
 800284c:	24000458 	.word	0x24000458
 8002850:	240004b6 	.word	0x240004b6

08002854 <udpecho_init>:
}


/*---------------------------------------------------------------------*/
void udpecho_init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af02      	add	r7, sp, #8
    sys_thread_new("udpecho_thread", udpecho_thread, NULL, 2048, osPriorityAboveNormal);
 800285a:	2301      	movs	r3, #1
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002862:	2200      	movs	r2, #0
 8002864:	4907      	ldr	r1, [pc, #28]	@ (8002884 <udpecho_init+0x30>)
 8002866:	4808      	ldr	r0, [pc, #32]	@ (8002888 <udpecho_init+0x34>)
 8002868:	f021 fd7c 	bl	8024364 <sys_thread_new>
    sys_thread_new("writeEthTask", WriteEthTask, NULL, 1024, osPriorityAboveNormal);
 800286c:	2301      	movs	r3, #1
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002874:	2200      	movs	r2, #0
 8002876:	4905      	ldr	r1, [pc, #20]	@ (800288c <udpecho_init+0x38>)
 8002878:	4805      	ldr	r0, [pc, #20]	@ (8002890 <udpecho_init+0x3c>)
 800287a:	f021 fd73 	bl	8024364 <sys_thread_new>
}
 800287e:	bf00      	nop
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	08001de1 	.word	0x08001de1
 8002888:	080293a4 	.word	0x080293a4
 800288c:	080025b9 	.word	0x080025b9
 8002890:	080293b4 	.word	0x080293b4

08002894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800289a:	4b41      	ldr	r3, [pc, #260]	@ (80029a0 <MX_DMA_Init+0x10c>)
 800289c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80028a0:	4a3f      	ldr	r2, [pc, #252]	@ (80029a0 <MX_DMA_Init+0x10c>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80028aa:	4b3d      	ldr	r3, [pc, #244]	@ (80029a0 <MX_DMA_Init+0x10c>)
 80028ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028b8:	4b39      	ldr	r3, [pc, #228]	@ (80029a0 <MX_DMA_Init+0x10c>)
 80028ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80028be:	4a38      	ldr	r2, [pc, #224]	@ (80029a0 <MX_DMA_Init+0x10c>)
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80028c8:	4b35      	ldr	r3, [pc, #212]	@ (80029a0 <MX_DMA_Init+0x10c>)
 80028ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2105      	movs	r1, #5
 80028da:	200b      	movs	r0, #11
 80028dc:	f004 fa8a 	bl	8006df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80028e0:	200b      	movs	r0, #11
 80028e2:	f004 faa1 	bl	8006e28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2105      	movs	r1, #5
 80028ea:	200c      	movs	r0, #12
 80028ec:	f004 fa82 	bl	8006df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80028f0:	200c      	movs	r0, #12
 80028f2:	f004 fa99 	bl	8006e28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2105      	movs	r1, #5
 80028fa:	200d      	movs	r0, #13
 80028fc:	f004 fa7a 	bl	8006df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002900:	200d      	movs	r0, #13
 8002902:	f004 fa91 	bl	8006e28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002906:	2200      	movs	r2, #0
 8002908:	2105      	movs	r1, #5
 800290a:	200e      	movs	r0, #14
 800290c:	f004 fa72 	bl	8006df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002910:	200e      	movs	r0, #14
 8002912:	f004 fa89 	bl	8006e28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2105      	movs	r1, #5
 800291a:	200f      	movs	r0, #15
 800291c:	f004 fa6a 	bl	8006df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002920:	200f      	movs	r0, #15
 8002922:	f004 fa81 	bl	8006e28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2105      	movs	r1, #5
 800292a:	2010      	movs	r0, #16
 800292c:	f004 fa62 	bl	8006df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002930:	2010      	movs	r0, #16
 8002932:	f004 fa79 	bl	8006e28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2105      	movs	r1, #5
 800293a:	2011      	movs	r0, #17
 800293c:	f004 fa5a 	bl	8006df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002940:	2011      	movs	r0, #17
 8002942:	f004 fa71 	bl	8006e28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8002946:	2200      	movs	r2, #0
 8002948:	2105      	movs	r1, #5
 800294a:	202f      	movs	r0, #47	@ 0x2f
 800294c:	f004 fa52 	bl	8006df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002950:	202f      	movs	r0, #47	@ 0x2f
 8002952:	f004 fa69 	bl	8006e28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	2105      	movs	r1, #5
 800295a:	2038      	movs	r0, #56	@ 0x38
 800295c:	f004 fa4a 	bl	8006df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002960:	2038      	movs	r0, #56	@ 0x38
 8002962:	f004 fa61 	bl	8006e28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	2105      	movs	r1, #5
 800296a:	2039      	movs	r0, #57	@ 0x39
 800296c:	f004 fa42 	bl	8006df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002970:	2039      	movs	r0, #57	@ 0x39
 8002972:	f004 fa59 	bl	8006e28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002976:	2200      	movs	r2, #0
 8002978:	2105      	movs	r1, #5
 800297a:	203a      	movs	r0, #58	@ 0x3a
 800297c:	f004 fa3a 	bl	8006df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002980:	203a      	movs	r0, #58	@ 0x3a
 8002982:	f004 fa51 	bl	8006e28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	2105      	movs	r1, #5
 800298a:	203b      	movs	r0, #59	@ 0x3b
 800298c:	f004 fa32 	bl	8006df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002990:	203b      	movs	r0, #59	@ 0x3b
 8002992:	f004 fa49 	bl	8006e28 <HAL_NVIC_EnableIRQ>

}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	58024400 	.word	0x58024400

080029a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a07      	ldr	r2, [pc, #28]	@ (80029d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80029b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4a06      	ldr	r2, [pc, #24]	@ (80029d4 <vApplicationGetIdleTaskMemory+0x30>)
 80029ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2280      	movs	r2, #128	@ 0x80
 80029c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	240005b0 	.word	0x240005b0
 80029d4:	24000604 	.word	0x24000604

080029d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80029d8:	b5b0      	push	{r4, r5, r7, lr}
 80029da:	b0bc      	sub	sp, #240	@ 0xf0
 80029dc:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinaryServo */
  osSemaphoreDef(BinaryServo);
 80029de:	2300      	movs	r3, #0
 80029e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029e4:	2300      	movs	r3, #0
 80029e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  BinaryServoHandle = osSemaphoreCreate(osSemaphore(BinaryServo), 1);
 80029ea:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80029ee:	2101      	movs	r1, #1
 80029f0:	4618      	mov	r0, r3
 80029f2:	f00f ff87 	bl	8012904 <osSemaphoreCreate>
 80029f6:	4603      	mov	r3, r0
 80029f8:	4a62      	ldr	r2, [pc, #392]	@ (8002b84 <MX_FREERTOS_Init+0x1ac>)
 80029fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of BinaryCu */
  osSemaphoreDef(BinaryCu);
 80029fc:	2300      	movs	r3, #0
 80029fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a02:	2300      	movs	r3, #0
 8002a04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  BinaryCuHandle = osSemaphoreCreate(osSemaphore(BinaryCu), 1);
 8002a08:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f00f ff78 	bl	8012904 <osSemaphoreCreate>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4a5c      	ldr	r2, [pc, #368]	@ (8002b88 <MX_FREERTOS_Init+0x1b0>)
 8002a18:	6013      	str	r3, [r2, #0]

  /* definition and creation of BinaryJing */
  osSemaphoreDef(BinaryJing);
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a20:	2300      	movs	r3, #0
 8002a22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  BinaryJingHandle = osSemaphoreCreate(osSemaphore(BinaryJing), 1);
 8002a26:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f00f ff69 	bl	8012904 <osSemaphoreCreate>
 8002a32:	4603      	mov	r3, r0
 8002a34:	4a55      	ldr	r2, [pc, #340]	@ (8002b8c <MX_FREERTOS_Init+0x1b4>)
 8002a36:	6013      	str	r3, [r2, #0]

  /* definition and creation of BinaryFocus */
  osSemaphoreDef(BinaryFocus);
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  BinaryFocusHandle = osSemaphoreCreate(osSemaphore(BinaryFocus), 1);
 8002a44:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f00f ff5a 	bl	8012904 <osSemaphoreCreate>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4a4f      	ldr	r2, [pc, #316]	@ (8002b90 <MX_FREERTOS_Init+0x1b8>)
 8002a54:	6013      	str	r3, [r2, #0]

  /* definition and creation of BinaryRangefinder */
  osSemaphoreDef(BinaryRangefinder);
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  BinaryRangefinderHandle = osSemaphoreCreate(osSemaphore(BinaryRangefinder), 1);
 8002a62:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002a66:	2101      	movs	r1, #1
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f00f ff4b 	bl	8012904 <osSemaphoreCreate>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4a48      	ldr	r2, [pc, #288]	@ (8002b94 <MX_FREERTOS_Init+0x1bc>)
 8002a72:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8002a74:	4b48      	ldr	r3, [pc, #288]	@ (8002b98 <MX_FREERTOS_Init+0x1c0>)
 8002a76:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8002a7a:	461d      	mov	r5, r3
 8002a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002a88:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f00f fe3c 	bl	801270c <osThreadCreate>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4a41      	ldr	r2, [pc, #260]	@ (8002b9c <MX_FREERTOS_Init+0x1c4>)
 8002a98:	6013      	str	r3, [r2, #0]

  /* definition and creation of turn */
  osThreadDef(turn, TurnTask, osPriorityBelowNormal, 0, 256);
 8002a9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ba0 <MX_FREERTOS_Init+0x1c8>)
 8002a9c:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8002aa0:	461d      	mov	r5, r3
 8002aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aa6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002aaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  turnHandle = osThreadCreate(osThread(turn), NULL);
 8002aae:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f00f fe29 	bl	801270c <osThreadCreate>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4a39      	ldr	r2, [pc, #228]	@ (8002ba4 <MX_FREERTOS_Init+0x1cc>)
 8002abe:	6013      	str	r3, [r2, #0]

  /* definition and creation of imgcu */
  osThreadDef(imgcu, ImgCuTask, osPriorityBelowNormal, 0, 256);
 8002ac0:	4b39      	ldr	r3, [pc, #228]	@ (8002ba8 <MX_FREERTOS_Init+0x1d0>)
 8002ac2:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8002ac6:	461d      	mov	r5, r3
 8002ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002acc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ad0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imgcuHandle = osThreadCreate(osThread(imgcu), NULL);
 8002ad4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f00f fe16 	bl	801270c <osThreadCreate>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4a32      	ldr	r2, [pc, #200]	@ (8002bac <MX_FREERTOS_Init+0x1d4>)
 8002ae4:	6013      	str	r3, [r2, #0]

  /* definition and creation of imgjing */
  osThreadDef(imgjing, ImgJingTask, osPriorityBelowNormal, 0, 256);
 8002ae6:	4b32      	ldr	r3, [pc, #200]	@ (8002bb0 <MX_FREERTOS_Init+0x1d8>)
 8002ae8:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8002aec:	461d      	mov	r5, r3
 8002aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002af2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002af6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imgjingHandle = osThreadCreate(osThread(imgjing), NULL);
 8002afa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f00f fe03 	bl	801270c <osThreadCreate>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4a2a      	ldr	r2, [pc, #168]	@ (8002bb4 <MX_FREERTOS_Init+0x1dc>)
 8002b0a:	6013      	str	r3, [r2, #0]

  /* definition and creation of focus */
  osThreadDef(focus, FocusTask, osPriorityBelowNormal, 0, 256);
 8002b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb8 <MX_FREERTOS_Init+0x1e0>)
 8002b0e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002b12:	461d      	mov	r5, r3
 8002b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  focusHandle = osThreadCreate(osThread(focus), NULL);
 8002b20:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f00f fdf0 	bl	801270c <osThreadCreate>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4a23      	ldr	r2, [pc, #140]	@ (8002bbc <MX_FREERTOS_Init+0x1e4>)
 8002b30:	6013      	str	r3, [r2, #0]

  /* definition and creation of rangefinder */
  osThreadDef(rangefinder, RangefinderTask, osPriorityBelowNormal, 0, 256);
 8002b32:	4b23      	ldr	r3, [pc, #140]	@ (8002bc0 <MX_FREERTOS_Init+0x1e8>)
 8002b34:	f107 0420 	add.w	r4, r7, #32
 8002b38:	461d      	mov	r5, r3
 8002b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rangefinderHandle = osThreadCreate(osThread(rangefinder), NULL);
 8002b46:	f107 0320 	add.w	r3, r7, #32
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f00f fddd 	bl	801270c <osThreadCreate>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc4 <MX_FREERTOS_Init+0x1ec>)
 8002b56:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	osThreadDef(mytask, mytask, osPriorityNormal, 0, 256);
 8002b58:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc8 <MX_FREERTOS_Init+0x1f0>)
 8002b5a:	1d3c      	adds	r4, r7, #4
 8002b5c:	461d      	mov	r5, r3
 8002b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	mytaskHandle = osThreadCreate(osThread(mytask), NULL);
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f00f fdcc 	bl	801270c <osThreadCreate>
 8002b74:	4603      	mov	r3, r0
 8002b76:	4a15      	ldr	r2, [pc, #84]	@ (8002bcc <MX_FREERTOS_Init+0x1f4>)
 8002b78:	6013      	str	r3, [r2, #0]



  /* USER CODE END RTOS_THREADS */

}
 8002b7a:	bf00      	nop
 8002b7c:	37f0      	adds	r7, #240	@ 0xf0
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bdb0      	pop	{r4, r5, r7, pc}
 8002b82:	bf00      	nop
 8002b84:	24000598 	.word	0x24000598
 8002b88:	2400059c 	.word	0x2400059c
 8002b8c:	240005a0 	.word	0x240005a0
 8002b90:	240005a4 	.word	0x240005a4
 8002b94:	240005a8 	.word	0x240005a8
 8002b98:	08029498 	.word	0x08029498
 8002b9c:	24000580 	.word	0x24000580
 8002ba0:	080294bc 	.word	0x080294bc
 8002ba4:	24000584 	.word	0x24000584
 8002ba8:	080294e0 	.word	0x080294e0
 8002bac:	24000588 	.word	0x24000588
 8002bb0:	08029504 	.word	0x08029504
 8002bb4:	2400058c 	.word	0x2400058c
 8002bb8:	08029528 	.word	0x08029528
 8002bbc:	24000590 	.word	0x24000590
 8002bc0:	08029550 	.word	0x08029550
 8002bc4:	24000594 	.word	0x24000594
 8002bc8:	08029574 	.word	0x08029574
 8002bcc:	240005ac 	.word	0x240005ac

08002bd0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  memset(ImgSendTypedef_CU.Data,0xff,64);
 8002bd8:	2240      	movs	r2, #64	@ 0x40
 8002bda:	21ff      	movs	r1, #255	@ 0xff
 8002bdc:	4867      	ldr	r0, [pc, #412]	@ (8002d7c <StartDefaultTask+0x1ac>)
 8002bde:	f022 fd6d 	bl	80256bc <memset>
  memset(ImgSendTypedef_JING.Data,0xff,64);
 8002be2:	2240      	movs	r2, #64	@ 0x40
 8002be4:	21ff      	movs	r1, #255	@ 0xff
 8002be6:	4866      	ldr	r0, [pc, #408]	@ (8002d80 <StartDefaultTask+0x1b0>)
 8002be8:	f022 fd68 	bl	80256bc <memset>
  MX_LWIP_Init();
 8002bec:	f00e fee4 	bl	80119b8 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
//  client_init();
  udpecho_init();
 8002bf0:	f7ff fe30 	bl	8002854 <udpecho_init>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxbuff_servo, 128);
 8002bf4:	2280      	movs	r2, #128	@ 0x80
 8002bf6:	4963      	ldr	r1, [pc, #396]	@ (8002d84 <StartDefaultTask+0x1b4>)
 8002bf8:	4863      	ldr	r0, [pc, #396]	@ (8002d88 <StartDefaultTask+0x1b8>)
 8002bfa:	f00e fe3a 	bl	8011872 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_uart5_rx, DMA_IT_HT);
 8002bfe:	4b63      	ldr	r3, [pc, #396]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a63      	ldr	r2, [pc, #396]	@ (8002d90 <StartDefaultTask+0x1c0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d04a      	beq.n	8002c9e <StartDefaultTask+0xce>
 8002c08:	4b60      	ldr	r3, [pc, #384]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a61      	ldr	r2, [pc, #388]	@ (8002d94 <StartDefaultTask+0x1c4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d045      	beq.n	8002c9e <StartDefaultTask+0xce>
 8002c12:	4b5e      	ldr	r3, [pc, #376]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a60      	ldr	r2, [pc, #384]	@ (8002d98 <StartDefaultTask+0x1c8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d040      	beq.n	8002c9e <StartDefaultTask+0xce>
 8002c1c:	4b5b      	ldr	r3, [pc, #364]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a5e      	ldr	r2, [pc, #376]	@ (8002d9c <StartDefaultTask+0x1cc>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d03b      	beq.n	8002c9e <StartDefaultTask+0xce>
 8002c26:	4b59      	ldr	r3, [pc, #356]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a5d      	ldr	r2, [pc, #372]	@ (8002da0 <StartDefaultTask+0x1d0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d036      	beq.n	8002c9e <StartDefaultTask+0xce>
 8002c30:	4b56      	ldr	r3, [pc, #344]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a5b      	ldr	r2, [pc, #364]	@ (8002da4 <StartDefaultTask+0x1d4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d031      	beq.n	8002c9e <StartDefaultTask+0xce>
 8002c3a:	4b54      	ldr	r3, [pc, #336]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a5a      	ldr	r2, [pc, #360]	@ (8002da8 <StartDefaultTask+0x1d8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d02c      	beq.n	8002c9e <StartDefaultTask+0xce>
 8002c44:	4b51      	ldr	r3, [pc, #324]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a58      	ldr	r2, [pc, #352]	@ (8002dac <StartDefaultTask+0x1dc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d027      	beq.n	8002c9e <StartDefaultTask+0xce>
 8002c4e:	4b4f      	ldr	r3, [pc, #316]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a57      	ldr	r2, [pc, #348]	@ (8002db0 <StartDefaultTask+0x1e0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d022      	beq.n	8002c9e <StartDefaultTask+0xce>
 8002c58:	4b4c      	ldr	r3, [pc, #304]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a55      	ldr	r2, [pc, #340]	@ (8002db4 <StartDefaultTask+0x1e4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d01d      	beq.n	8002c9e <StartDefaultTask+0xce>
 8002c62:	4b4a      	ldr	r3, [pc, #296]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a54      	ldr	r2, [pc, #336]	@ (8002db8 <StartDefaultTask+0x1e8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d018      	beq.n	8002c9e <StartDefaultTask+0xce>
 8002c6c:	4b47      	ldr	r3, [pc, #284]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a52      	ldr	r2, [pc, #328]	@ (8002dbc <StartDefaultTask+0x1ec>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <StartDefaultTask+0xce>
 8002c76:	4b45      	ldr	r3, [pc, #276]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a51      	ldr	r2, [pc, #324]	@ (8002dc0 <StartDefaultTask+0x1f0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00e      	beq.n	8002c9e <StartDefaultTask+0xce>
 8002c80:	4b42      	ldr	r3, [pc, #264]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a4f      	ldr	r2, [pc, #316]	@ (8002dc4 <StartDefaultTask+0x1f4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d009      	beq.n	8002c9e <StartDefaultTask+0xce>
 8002c8a:	4b40      	ldr	r3, [pc, #256]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a4e      	ldr	r2, [pc, #312]	@ (8002dc8 <StartDefaultTask+0x1f8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d004      	beq.n	8002c9e <StartDefaultTask+0xce>
 8002c94:	4b3d      	ldr	r3, [pc, #244]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a4c      	ldr	r2, [pc, #304]	@ (8002dcc <StartDefaultTask+0x1fc>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d108      	bne.n	8002cb0 <StartDefaultTask+0xe0>
 8002c9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b39      	ldr	r3, [pc, #228]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0208 	bic.w	r2, r2, #8
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	e007      	b.n	8002cc0 <StartDefaultTask+0xf0>
 8002cb0:	4b36      	ldr	r3, [pc, #216]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	4b35      	ldr	r3, [pc, #212]	@ (8002d8c <StartDefaultTask+0x1bc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0204 	bic.w	r2, r2, #4
 8002cbe:	601a      	str	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxbuff_cu, 128);
 8002cc0:	2280      	movs	r2, #128	@ 0x80
 8002cc2:	4943      	ldr	r1, [pc, #268]	@ (8002dd0 <StartDefaultTask+0x200>)
 8002cc4:	4843      	ldr	r0, [pc, #268]	@ (8002dd4 <StartDefaultTask+0x204>)
 8002cc6:	f00e fdd4 	bl	8011872 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002cca:	4b43      	ldr	r3, [pc, #268]	@ (8002dd8 <StartDefaultTask+0x208>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a30      	ldr	r2, [pc, #192]	@ (8002d90 <StartDefaultTask+0x1c0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d04a      	beq.n	8002d6a <StartDefaultTask+0x19a>
 8002cd4:	4b40      	ldr	r3, [pc, #256]	@ (8002dd8 <StartDefaultTask+0x208>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2e      	ldr	r2, [pc, #184]	@ (8002d94 <StartDefaultTask+0x1c4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d045      	beq.n	8002d6a <StartDefaultTask+0x19a>
 8002cde:	4b3e      	ldr	r3, [pc, #248]	@ (8002dd8 <StartDefaultTask+0x208>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a2d      	ldr	r2, [pc, #180]	@ (8002d98 <StartDefaultTask+0x1c8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d040      	beq.n	8002d6a <StartDefaultTask+0x19a>
 8002ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd8 <StartDefaultTask+0x208>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a2b      	ldr	r2, [pc, #172]	@ (8002d9c <StartDefaultTask+0x1cc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d03b      	beq.n	8002d6a <StartDefaultTask+0x19a>
 8002cf2:	4b39      	ldr	r3, [pc, #228]	@ (8002dd8 <StartDefaultTask+0x208>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a2a      	ldr	r2, [pc, #168]	@ (8002da0 <StartDefaultTask+0x1d0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d036      	beq.n	8002d6a <StartDefaultTask+0x19a>
 8002cfc:	4b36      	ldr	r3, [pc, #216]	@ (8002dd8 <StartDefaultTask+0x208>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a28      	ldr	r2, [pc, #160]	@ (8002da4 <StartDefaultTask+0x1d4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d031      	beq.n	8002d6a <StartDefaultTask+0x19a>
 8002d06:	4b34      	ldr	r3, [pc, #208]	@ (8002dd8 <StartDefaultTask+0x208>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a27      	ldr	r2, [pc, #156]	@ (8002da8 <StartDefaultTask+0x1d8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d02c      	beq.n	8002d6a <StartDefaultTask+0x19a>
 8002d10:	4b31      	ldr	r3, [pc, #196]	@ (8002dd8 <StartDefaultTask+0x208>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a25      	ldr	r2, [pc, #148]	@ (8002dac <StartDefaultTask+0x1dc>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d027      	beq.n	8002d6a <StartDefaultTask+0x19a>
 8002d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002dd8 <StartDefaultTask+0x208>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a24      	ldr	r2, [pc, #144]	@ (8002db0 <StartDefaultTask+0x1e0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d022      	beq.n	8002d6a <StartDefaultTask+0x19a>
 8002d24:	4b2c      	ldr	r3, [pc, #176]	@ (8002dd8 <StartDefaultTask+0x208>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a22      	ldr	r2, [pc, #136]	@ (8002db4 <StartDefaultTask+0x1e4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01d      	beq.n	8002d6a <StartDefaultTask+0x19a>
 8002d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd8 <StartDefaultTask+0x208>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a21      	ldr	r2, [pc, #132]	@ (8002db8 <StartDefaultTask+0x1e8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d018      	beq.n	8002d6a <StartDefaultTask+0x19a>
 8002d38:	4b27      	ldr	r3, [pc, #156]	@ (8002dd8 <StartDefaultTask+0x208>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8002dbc <StartDefaultTask+0x1ec>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d013      	beq.n	8002d6a <StartDefaultTask+0x19a>
 8002d42:	4b25      	ldr	r3, [pc, #148]	@ (8002dd8 <StartDefaultTask+0x208>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1e      	ldr	r2, [pc, #120]	@ (8002dc0 <StartDefaultTask+0x1f0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00e      	beq.n	8002d6a <StartDefaultTask+0x19a>
 8002d4c:	4b22      	ldr	r3, [pc, #136]	@ (8002dd8 <StartDefaultTask+0x208>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc4 <StartDefaultTask+0x1f4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d009      	beq.n	8002d6a <StartDefaultTask+0x19a>
 8002d56:	4b20      	ldr	r3, [pc, #128]	@ (8002dd8 <StartDefaultTask+0x208>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc8 <StartDefaultTask+0x1f8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d004      	beq.n	8002d6a <StartDefaultTask+0x19a>
 8002d60:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd8 <StartDefaultTask+0x208>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a19      	ldr	r2, [pc, #100]	@ (8002dcc <StartDefaultTask+0x1fc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d138      	bne.n	8002ddc <StartDefaultTask+0x20c>
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd8 <StartDefaultTask+0x208>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <StartDefaultTask+0x208>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0208 	bic.w	r2, r2, #8
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e037      	b.n	8002dec <StartDefaultTask+0x21c>
 8002d7c:	24000022 	.word	0x24000022
 8002d80:	24000096 	.word	0x24000096
 8002d84:	30004b84 	.word	0x30004b84
 8002d88:	240008fc 	.word	0x240008fc
 8002d8c:	24000d64 	.word	0x24000d64
 8002d90:	40020010 	.word	0x40020010
 8002d94:	40020028 	.word	0x40020028
 8002d98:	40020040 	.word	0x40020040
 8002d9c:	40020058 	.word	0x40020058
 8002da0:	40020070 	.word	0x40020070
 8002da4:	40020088 	.word	0x40020088
 8002da8:	400200a0 	.word	0x400200a0
 8002dac:	400200b8 	.word	0x400200b8
 8002db0:	40020410 	.word	0x40020410
 8002db4:	40020428 	.word	0x40020428
 8002db8:	40020440 	.word	0x40020440
 8002dbc:	40020458 	.word	0x40020458
 8002dc0:	40020470 	.word	0x40020470
 8002dc4:	40020488 	.word	0x40020488
 8002dc8:	400204a0 	.word	0x400204a0
 8002dcc:	400204b8 	.word	0x400204b8
 8002dd0:	30004d84 	.word	0x30004d84
 8002dd4:	24000b4c 	.word	0x24000b4c
 8002dd8:	24001034 	.word	0x24001034
 8002ddc:	4b65      	ldr	r3, [pc, #404]	@ (8002f74 <StartDefaultTask+0x3a4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	4b64      	ldr	r3, [pc, #400]	@ (8002f74 <StartDefaultTask+0x3a4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0204 	bic.w	r2, r2, #4
 8002dea:	601a      	str	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rxbuff_jing, 128);
 8002dec:	2280      	movs	r2, #128	@ 0x80
 8002dee:	4962      	ldr	r1, [pc, #392]	@ (8002f78 <StartDefaultTask+0x3a8>)
 8002df0:	4862      	ldr	r0, [pc, #392]	@ (8002f7c <StartDefaultTask+0x3ac>)
 8002df2:	f00e fd3e 	bl	8011872 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 8002df6:	4b62      	ldr	r3, [pc, #392]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a62      	ldr	r2, [pc, #392]	@ (8002f84 <StartDefaultTask+0x3b4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d04a      	beq.n	8002e96 <StartDefaultTask+0x2c6>
 8002e00:	4b5f      	ldr	r3, [pc, #380]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a60      	ldr	r2, [pc, #384]	@ (8002f88 <StartDefaultTask+0x3b8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d045      	beq.n	8002e96 <StartDefaultTask+0x2c6>
 8002e0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a5f      	ldr	r2, [pc, #380]	@ (8002f8c <StartDefaultTask+0x3bc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d040      	beq.n	8002e96 <StartDefaultTask+0x2c6>
 8002e14:	4b5a      	ldr	r3, [pc, #360]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a5d      	ldr	r2, [pc, #372]	@ (8002f90 <StartDefaultTask+0x3c0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d03b      	beq.n	8002e96 <StartDefaultTask+0x2c6>
 8002e1e:	4b58      	ldr	r3, [pc, #352]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a5c      	ldr	r2, [pc, #368]	@ (8002f94 <StartDefaultTask+0x3c4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d036      	beq.n	8002e96 <StartDefaultTask+0x2c6>
 8002e28:	4b55      	ldr	r3, [pc, #340]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a5a      	ldr	r2, [pc, #360]	@ (8002f98 <StartDefaultTask+0x3c8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d031      	beq.n	8002e96 <StartDefaultTask+0x2c6>
 8002e32:	4b53      	ldr	r3, [pc, #332]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a59      	ldr	r2, [pc, #356]	@ (8002f9c <StartDefaultTask+0x3cc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d02c      	beq.n	8002e96 <StartDefaultTask+0x2c6>
 8002e3c:	4b50      	ldr	r3, [pc, #320]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a57      	ldr	r2, [pc, #348]	@ (8002fa0 <StartDefaultTask+0x3d0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d027      	beq.n	8002e96 <StartDefaultTask+0x2c6>
 8002e46:	4b4e      	ldr	r3, [pc, #312]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a56      	ldr	r2, [pc, #344]	@ (8002fa4 <StartDefaultTask+0x3d4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d022      	beq.n	8002e96 <StartDefaultTask+0x2c6>
 8002e50:	4b4b      	ldr	r3, [pc, #300]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a54      	ldr	r2, [pc, #336]	@ (8002fa8 <StartDefaultTask+0x3d8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d01d      	beq.n	8002e96 <StartDefaultTask+0x2c6>
 8002e5a:	4b49      	ldr	r3, [pc, #292]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a53      	ldr	r2, [pc, #332]	@ (8002fac <StartDefaultTask+0x3dc>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d018      	beq.n	8002e96 <StartDefaultTask+0x2c6>
 8002e64:	4b46      	ldr	r3, [pc, #280]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a51      	ldr	r2, [pc, #324]	@ (8002fb0 <StartDefaultTask+0x3e0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d013      	beq.n	8002e96 <StartDefaultTask+0x2c6>
 8002e6e:	4b44      	ldr	r3, [pc, #272]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a50      	ldr	r2, [pc, #320]	@ (8002fb4 <StartDefaultTask+0x3e4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00e      	beq.n	8002e96 <StartDefaultTask+0x2c6>
 8002e78:	4b41      	ldr	r3, [pc, #260]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a4e      	ldr	r2, [pc, #312]	@ (8002fb8 <StartDefaultTask+0x3e8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d009      	beq.n	8002e96 <StartDefaultTask+0x2c6>
 8002e82:	4b3f      	ldr	r3, [pc, #252]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a4d      	ldr	r2, [pc, #308]	@ (8002fbc <StartDefaultTask+0x3ec>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d004      	beq.n	8002e96 <StartDefaultTask+0x2c6>
 8002e8c:	4b3c      	ldr	r3, [pc, #240]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a4b      	ldr	r2, [pc, #300]	@ (8002fc0 <StartDefaultTask+0x3f0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d108      	bne.n	8002ea8 <StartDefaultTask+0x2d8>
 8002e96:	4b3a      	ldr	r3, [pc, #232]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4b38      	ldr	r3, [pc, #224]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0208 	bic.w	r2, r2, #8
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	e007      	b.n	8002eb8 <StartDefaultTask+0x2e8>
 8002ea8:	4b35      	ldr	r3, [pc, #212]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	4b34      	ldr	r3, [pc, #208]	@ (8002f80 <StartDefaultTask+0x3b0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0204 	bic.w	r2, r2, #4
 8002eb6:	601a      	str	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rxbuff_focus, 11);
 8002eb8:	220b      	movs	r2, #11
 8002eba:	4942      	ldr	r1, [pc, #264]	@ (8002fc4 <StartDefaultTask+0x3f4>)
 8002ebc:	4842      	ldr	r0, [pc, #264]	@ (8002fc8 <StartDefaultTask+0x3f8>)
 8002ebe:	f00e fcd8 	bl	8011872 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8002ec2:	4b42      	ldr	r3, [pc, #264]	@ (8002fcc <StartDefaultTask+0x3fc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a2f      	ldr	r2, [pc, #188]	@ (8002f84 <StartDefaultTask+0x3b4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d04a      	beq.n	8002f62 <StartDefaultTask+0x392>
 8002ecc:	4b3f      	ldr	r3, [pc, #252]	@ (8002fcc <StartDefaultTask+0x3fc>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8002f88 <StartDefaultTask+0x3b8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d045      	beq.n	8002f62 <StartDefaultTask+0x392>
 8002ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8002fcc <StartDefaultTask+0x3fc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a2c      	ldr	r2, [pc, #176]	@ (8002f8c <StartDefaultTask+0x3bc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d040      	beq.n	8002f62 <StartDefaultTask+0x392>
 8002ee0:	4b3a      	ldr	r3, [pc, #232]	@ (8002fcc <StartDefaultTask+0x3fc>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8002f90 <StartDefaultTask+0x3c0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d03b      	beq.n	8002f62 <StartDefaultTask+0x392>
 8002eea:	4b38      	ldr	r3, [pc, #224]	@ (8002fcc <StartDefaultTask+0x3fc>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a29      	ldr	r2, [pc, #164]	@ (8002f94 <StartDefaultTask+0x3c4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d036      	beq.n	8002f62 <StartDefaultTask+0x392>
 8002ef4:	4b35      	ldr	r3, [pc, #212]	@ (8002fcc <StartDefaultTask+0x3fc>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a27      	ldr	r2, [pc, #156]	@ (8002f98 <StartDefaultTask+0x3c8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d031      	beq.n	8002f62 <StartDefaultTask+0x392>
 8002efe:	4b33      	ldr	r3, [pc, #204]	@ (8002fcc <StartDefaultTask+0x3fc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a26      	ldr	r2, [pc, #152]	@ (8002f9c <StartDefaultTask+0x3cc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d02c      	beq.n	8002f62 <StartDefaultTask+0x392>
 8002f08:	4b30      	ldr	r3, [pc, #192]	@ (8002fcc <StartDefaultTask+0x3fc>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a24      	ldr	r2, [pc, #144]	@ (8002fa0 <StartDefaultTask+0x3d0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d027      	beq.n	8002f62 <StartDefaultTask+0x392>
 8002f12:	4b2e      	ldr	r3, [pc, #184]	@ (8002fcc <StartDefaultTask+0x3fc>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a23      	ldr	r2, [pc, #140]	@ (8002fa4 <StartDefaultTask+0x3d4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d022      	beq.n	8002f62 <StartDefaultTask+0x392>
 8002f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fcc <StartDefaultTask+0x3fc>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a21      	ldr	r2, [pc, #132]	@ (8002fa8 <StartDefaultTask+0x3d8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01d      	beq.n	8002f62 <StartDefaultTask+0x392>
 8002f26:	4b29      	ldr	r3, [pc, #164]	@ (8002fcc <StartDefaultTask+0x3fc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a20      	ldr	r2, [pc, #128]	@ (8002fac <StartDefaultTask+0x3dc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d018      	beq.n	8002f62 <StartDefaultTask+0x392>
 8002f30:	4b26      	ldr	r3, [pc, #152]	@ (8002fcc <StartDefaultTask+0x3fc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1e      	ldr	r2, [pc, #120]	@ (8002fb0 <StartDefaultTask+0x3e0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d013      	beq.n	8002f62 <StartDefaultTask+0x392>
 8002f3a:	4b24      	ldr	r3, [pc, #144]	@ (8002fcc <StartDefaultTask+0x3fc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb4 <StartDefaultTask+0x3e4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00e      	beq.n	8002f62 <StartDefaultTask+0x392>
 8002f44:	4b21      	ldr	r3, [pc, #132]	@ (8002fcc <StartDefaultTask+0x3fc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1b      	ldr	r2, [pc, #108]	@ (8002fb8 <StartDefaultTask+0x3e8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d009      	beq.n	8002f62 <StartDefaultTask+0x392>
 8002f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002fcc <StartDefaultTask+0x3fc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1a      	ldr	r2, [pc, #104]	@ (8002fbc <StartDefaultTask+0x3ec>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d004      	beq.n	8002f62 <StartDefaultTask+0x392>
 8002f58:	4b1c      	ldr	r3, [pc, #112]	@ (8002fcc <StartDefaultTask+0x3fc>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a18      	ldr	r2, [pc, #96]	@ (8002fc0 <StartDefaultTask+0x3f0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d136      	bne.n	8002fd0 <StartDefaultTask+0x400>
 8002f62:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <StartDefaultTask+0x3fc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b18      	ldr	r3, [pc, #96]	@ (8002fcc <StartDefaultTask+0x3fc>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0208 	bic.w	r2, r2, #8
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	e035      	b.n	8002fe0 <StartDefaultTask+0x410>
 8002f74:	24001034 	.word	0x24001034
 8002f78:	30004e84 	.word	0x30004e84
 8002f7c:	24000868 	.word	0x24000868
 8002f80:	24000c74 	.word	0x24000c74
 8002f84:	40020010 	.word	0x40020010
 8002f88:	40020028 	.word	0x40020028
 8002f8c:	40020040 	.word	0x40020040
 8002f90:	40020058 	.word	0x40020058
 8002f94:	40020070 	.word	0x40020070
 8002f98:	40020088 	.word	0x40020088
 8002f9c:	400200a0 	.word	0x400200a0
 8002fa0:	400200b8 	.word	0x400200b8
 8002fa4:	40020410 	.word	0x40020410
 8002fa8:	40020428 	.word	0x40020428
 8002fac:	40020440 	.word	0x40020440
 8002fb0:	40020458 	.word	0x40020458
 8002fb4:	40020470 	.word	0x40020470
 8002fb8:	40020488 	.word	0x40020488
 8002fbc:	400204a0 	.word	0x400204a0
 8002fc0:	400204b8 	.word	0x400204b8
 8002fc4:	30004f10 	.word	0x30004f10
 8002fc8:	24000be0 	.word	0x24000be0
 8002fcc:	24001124 	.word	0x24001124
 8002fd0:	4b7f      	ldr	r3, [pc, #508]	@ (80031d0 <StartDefaultTask+0x600>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4b7e      	ldr	r3, [pc, #504]	@ (80031d0 <StartDefaultTask+0x600>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0204 	bic.w	r2, r2, #4
 8002fde:	601a      	str	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart7, rxbuff_rangefinder, 128);
 8002fe0:	2280      	movs	r2, #128	@ 0x80
 8002fe2:	497c      	ldr	r1, [pc, #496]	@ (80031d4 <StartDefaultTask+0x604>)
 8002fe4:	487c      	ldr	r0, [pc, #496]	@ (80031d8 <StartDefaultTask+0x608>)
 8002fe6:	f00e fc44 	bl	8011872 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8002fea:	4b7c      	ldr	r3, [pc, #496]	@ (80031dc <StartDefaultTask+0x60c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a7c      	ldr	r2, [pc, #496]	@ (80031e0 <StartDefaultTask+0x610>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d04a      	beq.n	800308a <StartDefaultTask+0x4ba>
 8002ff4:	4b79      	ldr	r3, [pc, #484]	@ (80031dc <StartDefaultTask+0x60c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a7a      	ldr	r2, [pc, #488]	@ (80031e4 <StartDefaultTask+0x614>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d045      	beq.n	800308a <StartDefaultTask+0x4ba>
 8002ffe:	4b77      	ldr	r3, [pc, #476]	@ (80031dc <StartDefaultTask+0x60c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a79      	ldr	r2, [pc, #484]	@ (80031e8 <StartDefaultTask+0x618>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d040      	beq.n	800308a <StartDefaultTask+0x4ba>
 8003008:	4b74      	ldr	r3, [pc, #464]	@ (80031dc <StartDefaultTask+0x60c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a77      	ldr	r2, [pc, #476]	@ (80031ec <StartDefaultTask+0x61c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d03b      	beq.n	800308a <StartDefaultTask+0x4ba>
 8003012:	4b72      	ldr	r3, [pc, #456]	@ (80031dc <StartDefaultTask+0x60c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a76      	ldr	r2, [pc, #472]	@ (80031f0 <StartDefaultTask+0x620>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d036      	beq.n	800308a <StartDefaultTask+0x4ba>
 800301c:	4b6f      	ldr	r3, [pc, #444]	@ (80031dc <StartDefaultTask+0x60c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a74      	ldr	r2, [pc, #464]	@ (80031f4 <StartDefaultTask+0x624>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d031      	beq.n	800308a <StartDefaultTask+0x4ba>
 8003026:	4b6d      	ldr	r3, [pc, #436]	@ (80031dc <StartDefaultTask+0x60c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a73      	ldr	r2, [pc, #460]	@ (80031f8 <StartDefaultTask+0x628>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d02c      	beq.n	800308a <StartDefaultTask+0x4ba>
 8003030:	4b6a      	ldr	r3, [pc, #424]	@ (80031dc <StartDefaultTask+0x60c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a71      	ldr	r2, [pc, #452]	@ (80031fc <StartDefaultTask+0x62c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d027      	beq.n	800308a <StartDefaultTask+0x4ba>
 800303a:	4b68      	ldr	r3, [pc, #416]	@ (80031dc <StartDefaultTask+0x60c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a70      	ldr	r2, [pc, #448]	@ (8003200 <StartDefaultTask+0x630>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d022      	beq.n	800308a <StartDefaultTask+0x4ba>
 8003044:	4b65      	ldr	r3, [pc, #404]	@ (80031dc <StartDefaultTask+0x60c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a6e      	ldr	r2, [pc, #440]	@ (8003204 <StartDefaultTask+0x634>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d01d      	beq.n	800308a <StartDefaultTask+0x4ba>
 800304e:	4b63      	ldr	r3, [pc, #396]	@ (80031dc <StartDefaultTask+0x60c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a6d      	ldr	r2, [pc, #436]	@ (8003208 <StartDefaultTask+0x638>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d018      	beq.n	800308a <StartDefaultTask+0x4ba>
 8003058:	4b60      	ldr	r3, [pc, #384]	@ (80031dc <StartDefaultTask+0x60c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a6b      	ldr	r2, [pc, #428]	@ (800320c <StartDefaultTask+0x63c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d013      	beq.n	800308a <StartDefaultTask+0x4ba>
 8003062:	4b5e      	ldr	r3, [pc, #376]	@ (80031dc <StartDefaultTask+0x60c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a6a      	ldr	r2, [pc, #424]	@ (8003210 <StartDefaultTask+0x640>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00e      	beq.n	800308a <StartDefaultTask+0x4ba>
 800306c:	4b5b      	ldr	r3, [pc, #364]	@ (80031dc <StartDefaultTask+0x60c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a68      	ldr	r2, [pc, #416]	@ (8003214 <StartDefaultTask+0x644>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d009      	beq.n	800308a <StartDefaultTask+0x4ba>
 8003076:	4b59      	ldr	r3, [pc, #356]	@ (80031dc <StartDefaultTask+0x60c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a67      	ldr	r2, [pc, #412]	@ (8003218 <StartDefaultTask+0x648>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d004      	beq.n	800308a <StartDefaultTask+0x4ba>
 8003080:	4b56      	ldr	r3, [pc, #344]	@ (80031dc <StartDefaultTask+0x60c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a65      	ldr	r2, [pc, #404]	@ (800321c <StartDefaultTask+0x64c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d108      	bne.n	800309c <StartDefaultTask+0x4cc>
 800308a:	4b54      	ldr	r3, [pc, #336]	@ (80031dc <StartDefaultTask+0x60c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b52      	ldr	r3, [pc, #328]	@ (80031dc <StartDefaultTask+0x60c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0208 	bic.w	r2, r2, #8
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	e007      	b.n	80030ac <StartDefaultTask+0x4dc>
 800309c:	4b4f      	ldr	r3, [pc, #316]	@ (80031dc <StartDefaultTask+0x60c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4b4e      	ldr	r3, [pc, #312]	@ (80031dc <StartDefaultTask+0x60c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0204 	bic.w	r2, r2, #4
 80030aa:	601a      	str	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)chcmd, 64);
 80030ac:	2240      	movs	r2, #64	@ 0x40
 80030ae:	495c      	ldr	r1, [pc, #368]	@ (8003220 <StartDefaultTask+0x650>)
 80030b0:	485c      	ldr	r0, [pc, #368]	@ (8003224 <StartDefaultTask+0x654>)
 80030b2:	f00e fbde 	bl	8011872 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80030b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003228 <StartDefaultTask+0x658>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a49      	ldr	r2, [pc, #292]	@ (80031e0 <StartDefaultTask+0x610>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d04a      	beq.n	8003156 <StartDefaultTask+0x586>
 80030c0:	4b59      	ldr	r3, [pc, #356]	@ (8003228 <StartDefaultTask+0x658>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a47      	ldr	r2, [pc, #284]	@ (80031e4 <StartDefaultTask+0x614>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d045      	beq.n	8003156 <StartDefaultTask+0x586>
 80030ca:	4b57      	ldr	r3, [pc, #348]	@ (8003228 <StartDefaultTask+0x658>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a46      	ldr	r2, [pc, #280]	@ (80031e8 <StartDefaultTask+0x618>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d040      	beq.n	8003156 <StartDefaultTask+0x586>
 80030d4:	4b54      	ldr	r3, [pc, #336]	@ (8003228 <StartDefaultTask+0x658>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a44      	ldr	r2, [pc, #272]	@ (80031ec <StartDefaultTask+0x61c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d03b      	beq.n	8003156 <StartDefaultTask+0x586>
 80030de:	4b52      	ldr	r3, [pc, #328]	@ (8003228 <StartDefaultTask+0x658>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a43      	ldr	r2, [pc, #268]	@ (80031f0 <StartDefaultTask+0x620>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d036      	beq.n	8003156 <StartDefaultTask+0x586>
 80030e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003228 <StartDefaultTask+0x658>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a41      	ldr	r2, [pc, #260]	@ (80031f4 <StartDefaultTask+0x624>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d031      	beq.n	8003156 <StartDefaultTask+0x586>
 80030f2:	4b4d      	ldr	r3, [pc, #308]	@ (8003228 <StartDefaultTask+0x658>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a40      	ldr	r2, [pc, #256]	@ (80031f8 <StartDefaultTask+0x628>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d02c      	beq.n	8003156 <StartDefaultTask+0x586>
 80030fc:	4b4a      	ldr	r3, [pc, #296]	@ (8003228 <StartDefaultTask+0x658>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a3e      	ldr	r2, [pc, #248]	@ (80031fc <StartDefaultTask+0x62c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d027      	beq.n	8003156 <StartDefaultTask+0x586>
 8003106:	4b48      	ldr	r3, [pc, #288]	@ (8003228 <StartDefaultTask+0x658>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a3d      	ldr	r2, [pc, #244]	@ (8003200 <StartDefaultTask+0x630>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d022      	beq.n	8003156 <StartDefaultTask+0x586>
 8003110:	4b45      	ldr	r3, [pc, #276]	@ (8003228 <StartDefaultTask+0x658>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a3b      	ldr	r2, [pc, #236]	@ (8003204 <StartDefaultTask+0x634>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d01d      	beq.n	8003156 <StartDefaultTask+0x586>
 800311a:	4b43      	ldr	r3, [pc, #268]	@ (8003228 <StartDefaultTask+0x658>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a3a      	ldr	r2, [pc, #232]	@ (8003208 <StartDefaultTask+0x638>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d018      	beq.n	8003156 <StartDefaultTask+0x586>
 8003124:	4b40      	ldr	r3, [pc, #256]	@ (8003228 <StartDefaultTask+0x658>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a38      	ldr	r2, [pc, #224]	@ (800320c <StartDefaultTask+0x63c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d013      	beq.n	8003156 <StartDefaultTask+0x586>
 800312e:	4b3e      	ldr	r3, [pc, #248]	@ (8003228 <StartDefaultTask+0x658>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a37      	ldr	r2, [pc, #220]	@ (8003210 <StartDefaultTask+0x640>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00e      	beq.n	8003156 <StartDefaultTask+0x586>
 8003138:	4b3b      	ldr	r3, [pc, #236]	@ (8003228 <StartDefaultTask+0x658>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a35      	ldr	r2, [pc, #212]	@ (8003214 <StartDefaultTask+0x644>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d009      	beq.n	8003156 <StartDefaultTask+0x586>
 8003142:	4b39      	ldr	r3, [pc, #228]	@ (8003228 <StartDefaultTask+0x658>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a34      	ldr	r2, [pc, #208]	@ (8003218 <StartDefaultTask+0x648>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d004      	beq.n	8003156 <StartDefaultTask+0x586>
 800314c:	4b36      	ldr	r3, [pc, #216]	@ (8003228 <StartDefaultTask+0x658>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a32      	ldr	r2, [pc, #200]	@ (800321c <StartDefaultTask+0x64c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d108      	bne.n	8003168 <StartDefaultTask+0x598>
 8003156:	4b34      	ldr	r3, [pc, #208]	@ (8003228 <StartDefaultTask+0x658>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4b32      	ldr	r3, [pc, #200]	@ (8003228 <StartDefaultTask+0x658>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0208 	bic.w	r2, r2, #8
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	e007      	b.n	8003178 <StartDefaultTask+0x5a8>
 8003168:	4b2f      	ldr	r3, [pc, #188]	@ (8003228 <StartDefaultTask+0x658>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	4b2e      	ldr	r3, [pc, #184]	@ (8003228 <StartDefaultTask+0x658>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0204 	bic.w	r2, r2, #4
 8003176:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(RF_PWD_GPIO_Port,RF_PWD_Pin,GPIO_PIN_SET);
 8003178:	2201      	movs	r2, #1
 800317a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800317e:	482b      	ldr	r0, [pc, #172]	@ (800322c <StartDefaultTask+0x65c>)
 8003180:	f008 fc2c 	bl	800b9dc <HAL_GPIO_WritePin>
	// go2init();
	osDelay(1000);
 8003184:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003188:	f00f fb0c 	bl	80127a4 <osDelay>
	RangefinderDataFrameSend.FuncCode = SetMultiFreq;
 800318c:	4b28      	ldr	r3, [pc, #160]	@ (8003230 <StartDefaultTask+0x660>)
 800318e:	22a1      	movs	r2, #161	@ 0xa1
 8003190:	711a      	strb	r2, [r3, #4]
	cSetMultiFreq = 0x0A;
 8003192:	4b28      	ldr	r3, [pc, #160]	@ (8003234 <StartDefaultTask+0x664>)
 8003194:	220a      	movs	r2, #10
 8003196:	701a      	strb	r2, [r3, #0]
	Send2RangefinderModule(&RangefinderDataFrameSend);
 8003198:	4825      	ldr	r0, [pc, #148]	@ (8003230 <StartDefaultTask+0x660>)
 800319a:	f7fe f855 	bl	8001248 <Send2RangefinderModule>
	osDelay(100);
 800319e:	2064      	movs	r0, #100	@ 0x64
 80031a0:	f00f fb00 	bl	80127a4 <osDelay>
	RangefinderDataFrameSend.FuncCode = SetTarget;
 80031a4:	4b22      	ldr	r3, [pc, #136]	@ (8003230 <StartDefaultTask+0x660>)
 80031a6:	2203      	movs	r2, #3
 80031a8:	711a      	strb	r2, [r3, #4]
	cSetTarget = 0x01;
 80031aa:	4b23      	ldr	r3, [pc, #140]	@ (8003238 <StartDefaultTask+0x668>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	701a      	strb	r2, [r3, #0]
	Send2RangefinderModule(&RangefinderDataFrameSend);
 80031b0:	481f      	ldr	r0, [pc, #124]	@ (8003230 <StartDefaultTask+0x660>)
 80031b2:	f7fe f849 	bl	8001248 <Send2RangefinderModule>
//	osDelay(2000);
	vTaskSuspend(mytaskHandle);
 80031b6:	4b21      	ldr	r3, [pc, #132]	@ (800323c <StartDefaultTask+0x66c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f010 ffda 	bl	8014174 <vTaskSuspend>
//	  if(InitFlag == 1)
//	  {
//		  go2init();
//		  InitFlag = 0;
//	  }
		processControl();
 80031c0:	f7fe f9e0 	bl	8001584 <processControl>

//	state = STATE_GUIDE;
//	CommandTypedef.turnYaw.f = 30.f;
//	CommandTypedef.turnPitch.f = 60.f;
//	processControl();
    osDelay(20);
 80031c4:	2014      	movs	r0, #20
 80031c6:	f00f faed 	bl	80127a4 <osDelay>
		processControl();
 80031ca:	bf00      	nop
 80031cc:	e7f8      	b.n	80031c0 <StartDefaultTask+0x5f0>
 80031ce:	bf00      	nop
 80031d0:	24001124 	.word	0x24001124
 80031d4:	30004f9c 	.word	0x30004f9c
 80031d8:	24000990 	.word	0x24000990
 80031dc:	24000e54 	.word	0x24000e54
 80031e0:	40020010 	.word	0x40020010
 80031e4:	40020028 	.word	0x40020028
 80031e8:	40020040 	.word	0x40020040
 80031ec:	40020058 	.word	0x40020058
 80031f0:	40020070 	.word	0x40020070
 80031f4:	40020088 	.word	0x40020088
 80031f8:	400200a0 	.word	0x400200a0
 80031fc:	400200b8 	.word	0x400200b8
 8003200:	40020410 	.word	0x40020410
 8003204:	40020428 	.word	0x40020428
 8003208:	40020440 	.word	0x40020440
 800320c:	40020458 	.word	0x40020458
 8003210:	40020470 	.word	0x40020470
 8003214:	40020488 	.word	0x40020488
 8003218:	400204a0 	.word	0x400204a0
 800321c:	400204b8 	.word	0x400204b8
 8003220:	3000501c 	.word	0x3000501c
 8003224:	24000ab8 	.word	0x24000ab8
 8003228:	24000f44 	.word	0x24000f44
 800322c:	58021400 	.word	0x58021400
 8003230:	24000100 	.word	0x24000100
 8003234:	2400044d 	.word	0x2400044d
 8003238:	2400044c 	.word	0x2400044c
 800323c:	240005ac 	.word	0x240005ac

08003240 <TurnTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TurnTask */
void TurnTask(void const * argument)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TurnTask */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(BinaryServoHandle, 10) == osOK && taskTurnBegin == pdTRUE)
 8003248:	4b8c      	ldr	r3, [pc, #560]	@ (800347c <TurnTask+0x23c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	210a      	movs	r1, #10
 800324e:	4618      	mov	r0, r3
 8003250:	f00f fb8a 	bl	8012968 <osSemaphoreWait>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	f040 81ad 	bne.w	80035b6 <TurnTask+0x376>
 800325c:	4b88      	ldr	r3, [pc, #544]	@ (8003480 <TurnTask+0x240>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b01      	cmp	r3, #1
 8003262:	f040 81a8 	bne.w	80035b6 <TurnTask+0x376>
	  {
		 pcSend.cuErrorCode[0]             			  = rxdata_servo[3];
 8003266:	4b87      	ldr	r3, [pc, #540]	@ (8003484 <TurnTask+0x244>)
 8003268:	78da      	ldrb	r2, [r3, #3]
 800326a:	4b87      	ldr	r3, [pc, #540]	@ (8003488 <TurnTask+0x248>)
 800326c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		 pcSend.cuErrorCode[1]             			  = rxdata_servo[4];
 8003270:	4b84      	ldr	r3, [pc, #528]	@ (8003484 <TurnTask+0x244>)
 8003272:	791a      	ldrb	r2, [r3, #4]
 8003274:	4b84      	ldr	r3, [pc, #528]	@ (8003488 <TurnTask+0x248>)
 8003276:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		 
		 TrackingFaultCodeCu.CommunicationFault       = (rxdata_servo[3] & bit(0)) ? 1 : 0;
 800327a:	4b82      	ldr	r3, [pc, #520]	@ (8003484 <TurnTask+0x244>)
 800327c:	78db      	ldrb	r3, [r3, #3]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	b2da      	uxtb	r2, r3
 8003284:	4b81      	ldr	r3, [pc, #516]	@ (800348c <TurnTask+0x24c>)
 8003286:	701a      	strb	r2, [r3, #0]
		 TrackingFaultCodeCu.EncoderFault             = (rxdata_servo[3] & bit(1)) ? 1 : 0;
 8003288:	4b7e      	ldr	r3, [pc, #504]	@ (8003484 <TurnTask+0x244>)
 800328a:	78db      	ldrb	r3, [r3, #3]
 800328c:	105b      	asrs	r3, r3, #1
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	b2da      	uxtb	r2, r3
 8003296:	4b7d      	ldr	r3, [pc, #500]	@ (800348c <TurnTask+0x24c>)
 8003298:	705a      	strb	r2, [r3, #1]
		 TrackingFaultCodeCu.DriverFaultA             = (rxdata_servo[3] & bit(2)) ? 1 : 0;
 800329a:	4b7a      	ldr	r3, [pc, #488]	@ (8003484 <TurnTask+0x244>)
 800329c:	78db      	ldrb	r3, [r3, #3]
 800329e:	109b      	asrs	r3, r3, #2
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	4b78      	ldr	r3, [pc, #480]	@ (800348c <TurnTask+0x24c>)
 80032aa:	709a      	strb	r2, [r3, #2]
		 TrackingFaultCodeCu.DriverFaultE             = (rxdata_servo[3] & bit(3)) ? 1 : 0;
 80032ac:	4b75      	ldr	r3, [pc, #468]	@ (8003484 <TurnTask+0x244>)
 80032ae:	78db      	ldrb	r3, [r3, #3]
 80032b0:	10db      	asrs	r3, r3, #3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4b74      	ldr	r3, [pc, #464]	@ (800348c <TurnTask+0x24c>)
 80032bc:	70da      	strb	r2, [r3, #3]
		 TrackingFaultCodeCu.OverSpeedA               = (rxdata_servo[3] & bit(4)) ? 1 : 0;
 80032be:	4b71      	ldr	r3, [pc, #452]	@ (8003484 <TurnTask+0x244>)
 80032c0:	78db      	ldrb	r3, [r3, #3]
 80032c2:	111b      	asrs	r3, r3, #4
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	4b6f      	ldr	r3, [pc, #444]	@ (800348c <TurnTask+0x24c>)
 80032ce:	711a      	strb	r2, [r3, #4]
		 TrackingFaultCodeCu.OverSpeedE               = (rxdata_servo[3] & bit(5)) ? 1 : 0;
 80032d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003484 <TurnTask+0x244>)
 80032d2:	78db      	ldrb	r3, [r3, #3]
 80032d4:	115b      	asrs	r3, r3, #5
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	4b6b      	ldr	r3, [pc, #428]	@ (800348c <TurnTask+0x24c>)
 80032e0:	715a      	strb	r2, [r3, #5]
		 TrackingFaultCodeCu.ControlOverLimitA        = (rxdata_servo[3] & bit(6)) ? 1 : 0;
 80032e2:	4b68      	ldr	r3, [pc, #416]	@ (8003484 <TurnTask+0x244>)
 80032e4:	78db      	ldrb	r3, [r3, #3]
 80032e6:	119b      	asrs	r3, r3, #6
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	4b66      	ldr	r3, [pc, #408]	@ (800348c <TurnTask+0x24c>)
 80032f2:	719a      	strb	r2, [r3, #6]
		 TrackingFaultCodeCu.ControlOverLimitE        = (rxdata_servo[3] & bit(7)) ? 1 : 0;
 80032f4:	4b63      	ldr	r3, [pc, #396]	@ (8003484 <TurnTask+0x244>)
 80032f6:	78db      	ldrb	r3, [r3, #3]
 80032f8:	09db      	lsrs	r3, r3, #7
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	4b63      	ldr	r3, [pc, #396]	@ (800348c <TurnTask+0x24c>)
 80032fe:	71da      	strb	r2, [r3, #7]
		 TrackingFaultCodeCu.PositionOverLimitE       = (rxdata_servo[4] & bit(0)) ? 1 : 0;
 8003300:	4b60      	ldr	r3, [pc, #384]	@ (8003484 <TurnTask+0x244>)
 8003302:	791b      	ldrb	r3, [r3, #4]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	b2da      	uxtb	r2, r3
 800330a:	4b60      	ldr	r3, [pc, #384]	@ (800348c <TurnTask+0x24c>)
 800330c:	721a      	strb	r2, [r3, #8]
		 TrackingFaultCodeCu.PositionUnderLimitE      = (rxdata_servo[4] & bit(1)) ? 1 : 0;
 800330e:	4b5d      	ldr	r3, [pc, #372]	@ (8003484 <TurnTask+0x244>)
 8003310:	791b      	ldrb	r3, [r3, #4]
 8003312:	105b      	asrs	r3, r3, #1
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	b2da      	uxtb	r2, r3
 800331c:	4b5b      	ldr	r3, [pc, #364]	@ (800348c <TurnTask+0x24c>)
 800331e:	725a      	strb	r2, [r3, #9]
		 TrackingFaultCodeCu.TrackingFaultCuByte1     = (rxdata_servo[4] & bit(2)) ? 1 : 0;
 8003320:	4b58      	ldr	r3, [pc, #352]	@ (8003484 <TurnTask+0x244>)
 8003322:	791b      	ldrb	r3, [r3, #4]
 8003324:	109b      	asrs	r3, r3, #2
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4b57      	ldr	r3, [pc, #348]	@ (800348c <TurnTask+0x24c>)
 8003330:	729a      	strb	r2, [r3, #10]
		 TrackingFaultCodeCu.TrackingFaultCuByte2     = (rxdata_servo[4] & bit(3)) ? 1 : 0;
 8003332:	4b54      	ldr	r3, [pc, #336]	@ (8003484 <TurnTask+0x244>)
 8003334:	791b      	ldrb	r3, [r3, #4]
 8003336:	10db      	asrs	r3, r3, #3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	b2da      	uxtb	r2, r3
 8003340:	4b52      	ldr	r3, [pc, #328]	@ (800348c <TurnTask+0x24c>)
 8003342:	72da      	strb	r2, [r3, #11]
		 TrackingFaultCodeCu.TrackingFaultCuByte3     = (rxdata_servo[4] & bit(4)) ? 1 : 0;
 8003344:	4b4f      	ldr	r3, [pc, #316]	@ (8003484 <TurnTask+0x244>)
 8003346:	791b      	ldrb	r3, [r3, #4]
 8003348:	111b      	asrs	r3, r3, #4
 800334a:	b2db      	uxtb	r3, r3
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4b4e      	ldr	r3, [pc, #312]	@ (800348c <TurnTask+0x24c>)
 8003354:	731a      	strb	r2, [r3, #12]
		 TrackingFaultCodeCu.TrackingFaultCuByte4     = (rxdata_servo[4] & bit(5)) ? 1 : 0;
 8003356:	4b4b      	ldr	r3, [pc, #300]	@ (8003484 <TurnTask+0x244>)
 8003358:	791b      	ldrb	r3, [r3, #4]
 800335a:	115b      	asrs	r3, r3, #5
 800335c:	b2db      	uxtb	r3, r3
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	b2da      	uxtb	r2, r3
 8003364:	4b49      	ldr	r3, [pc, #292]	@ (800348c <TurnTask+0x24c>)
 8003366:	735a      	strb	r2, [r3, #13]


		 pcSend.jingErrorCode[0]                      = rxdata_servo[5];
 8003368:	4b46      	ldr	r3, [pc, #280]	@ (8003484 <TurnTask+0x244>)
 800336a:	795a      	ldrb	r2, [r3, #5]
 800336c:	4b46      	ldr	r3, [pc, #280]	@ (8003488 <TurnTask+0x248>)
 800336e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		 pcSend.jingErrorCode[1]                      = rxdata_servo[6];
 8003372:	4b44      	ldr	r3, [pc, #272]	@ (8003484 <TurnTask+0x244>)
 8003374:	799a      	ldrb	r2, [r3, #6]
 8003376:	4b44      	ldr	r3, [pc, #272]	@ (8003488 <TurnTask+0x248>)
 8003378:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		 TrackingFaultCodeJing.FSMControlOverLimitX   = (rxdata_servo[5] & bit(0)) ? 1 : 0;
 800337c:	4b41      	ldr	r3, [pc, #260]	@ (8003484 <TurnTask+0x244>)
 800337e:	795b      	ldrb	r3, [r3, #5]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4b42      	ldr	r3, [pc, #264]	@ (8003490 <TurnTask+0x250>)
 8003388:	701a      	strb	r2, [r3, #0]
		 TrackingFaultCodeJing.FSMControlOverLimitY   = (rxdata_servo[5] & bit(1)) ? 1 : 0;
 800338a:	4b3e      	ldr	r3, [pc, #248]	@ (8003484 <TurnTask+0x244>)
 800338c:	795b      	ldrb	r3, [r3, #5]
 800338e:	105b      	asrs	r3, r3, #1
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	b2da      	uxtb	r2, r3
 8003398:	4b3d      	ldr	r3, [pc, #244]	@ (8003490 <TurnTask+0x250>)
 800339a:	705a      	strb	r2, [r3, #1]
		 TrackingFaultCodeJing.FSMPositionOverLimitX  = (rxdata_servo[6] & bit(0)) ? 1 : 0;
 800339c:	4b39      	ldr	r3, [pc, #228]	@ (8003484 <TurnTask+0x244>)
 800339e:	799b      	ldrb	r3, [r3, #6]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003490 <TurnTask+0x250>)
 80033a8:	709a      	strb	r2, [r3, #2]
		 TrackingFaultCodeJing.FSMPositionOverLimitY  = (rxdata_servo[6] & bit(1)) ? 1 : 0;
 80033aa:	4b36      	ldr	r3, [pc, #216]	@ (8003484 <TurnTask+0x244>)
 80033ac:	799b      	ldrb	r3, [r3, #6]
 80033ae:	105b      	asrs	r3, r3, #1
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	4b35      	ldr	r3, [pc, #212]	@ (8003490 <TurnTask+0x250>)
 80033ba:	70da      	strb	r2, [r3, #3]
		 TrackingFaultCodeJing.TrackingFaultJing      = (rxdata_servo[6] & bit(2)) ? 1 : 0;
 80033bc:	4b31      	ldr	r3, [pc, #196]	@ (8003484 <TurnTask+0x244>)
 80033be:	799b      	ldrb	r3, [r3, #6]
 80033c0:	109b      	asrs	r3, r3, #2
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4b31      	ldr	r3, [pc, #196]	@ (8003490 <TurnTask+0x250>)
 80033cc:	711a      	strb	r2, [r3, #4]


		 ServoRevTypedef.cCuOffsetState               =  rxdata_servo[17];
 80033ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003484 <TurnTask+0x244>)
 80033d0:	7c5a      	ldrb	r2, [r3, #17]
 80033d2:	4b30      	ldr	r3, [pc, #192]	@ (8003494 <TurnTask+0x254>)
 80033d4:	701a      	strb	r2, [r3, #0]
		 pcSend.cuOffsetState = ServoRevTypedef.cCuOffsetState;
 80033d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003494 <TurnTask+0x254>)
 80033d8:	781a      	ldrb	r2, [r3, #0]
 80033da:	4b2b      	ldr	r3, [pc, #172]	@ (8003488 <TurnTask+0x248>)
 80033dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		 ServoRevTypedef.CuOffset_X.s                 =  rxdata_servo[18] << 8 | rxdata_servo[19];
 80033e0:	4b28      	ldr	r3, [pc, #160]	@ (8003484 <TurnTask+0x244>)
 80033e2:	7c9b      	ldrb	r3, [r3, #18]
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	b21a      	sxth	r2, r3
 80033e8:	4b26      	ldr	r3, [pc, #152]	@ (8003484 <TurnTask+0x244>)
 80033ea:	7cdb      	ldrb	r3, [r3, #19]
 80033ec:	b21b      	sxth	r3, r3
 80033ee:	4313      	orrs	r3, r2
 80033f0:	b21a      	sxth	r2, r3
 80033f2:	4b28      	ldr	r3, [pc, #160]	@ (8003494 <TurnTask+0x254>)
 80033f4:	809a      	strh	r2, [r3, #4]
		 ServoRevTypedef.CuOffset_Y.s                 =  rxdata_servo[20] << 8 | rxdata_servo[21];
 80033f6:	4b23      	ldr	r3, [pc, #140]	@ (8003484 <TurnTask+0x244>)
 80033f8:	7d1b      	ldrb	r3, [r3, #20]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	b21a      	sxth	r2, r3
 80033fe:	4b21      	ldr	r3, [pc, #132]	@ (8003484 <TurnTask+0x244>)
 8003400:	7d5b      	ldrb	r3, [r3, #21]
 8003402:	b21b      	sxth	r3, r3
 8003404:	4313      	orrs	r3, r2
 8003406:	b21a      	sxth	r2, r3
 8003408:	4b22      	ldr	r3, [pc, #136]	@ (8003494 <TurnTask+0x254>)
 800340a:	80da      	strh	r2, [r3, #6]
		 ServoRevTypedef.cJingOffsetState             =  rxdata_servo[22];
 800340c:	4b1d      	ldr	r3, [pc, #116]	@ (8003484 <TurnTask+0x244>)
 800340e:	7d9a      	ldrb	r2, [r3, #22]
 8003410:	4b20      	ldr	r3, [pc, #128]	@ (8003494 <TurnTask+0x254>)
 8003412:	705a      	strb	r2, [r3, #1]
		 pcSend.jingOffsetState = ServoRevTypedef.cJingOffsetState;
 8003414:	4b1f      	ldr	r3, [pc, #124]	@ (8003494 <TurnTask+0x254>)
 8003416:	785a      	ldrb	r2, [r3, #1]
 8003418:	4b1b      	ldr	r3, [pc, #108]	@ (8003488 <TurnTask+0x248>)
 800341a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		 ServoRevTypedef.cJingISOffsetState           =  rxdata_servo[23];
 800341e:	4b19      	ldr	r3, [pc, #100]	@ (8003484 <TurnTask+0x244>)
 8003420:	7dda      	ldrb	r2, [r3, #23]
 8003422:	4b1c      	ldr	r3, [pc, #112]	@ (8003494 <TurnTask+0x254>)
 8003424:	709a      	strb	r2, [r3, #2]
		 ServoRevTypedef.JingOffset_X.s               =  rxdata_servo[24] << 8 | rxdata_servo[25];
 8003426:	4b17      	ldr	r3, [pc, #92]	@ (8003484 <TurnTask+0x244>)
 8003428:	7e1b      	ldrb	r3, [r3, #24]
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	b21a      	sxth	r2, r3
 800342e:	4b15      	ldr	r3, [pc, #84]	@ (8003484 <TurnTask+0x244>)
 8003430:	7e5b      	ldrb	r3, [r3, #25]
 8003432:	b21b      	sxth	r3, r3
 8003434:	4313      	orrs	r3, r2
 8003436:	b21a      	sxth	r2, r3
 8003438:	4b16      	ldr	r3, [pc, #88]	@ (8003494 <TurnTask+0x254>)
 800343a:	811a      	strh	r2, [r3, #8]
		 ServoRevTypedef.JingOffset_Y.s               =  rxdata_servo[26] << 8 | rxdata_servo[27];
 800343c:	4b11      	ldr	r3, [pc, #68]	@ (8003484 <TurnTask+0x244>)
 800343e:	7e9b      	ldrb	r3, [r3, #26]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	b21a      	sxth	r2, r3
 8003444:	4b0f      	ldr	r3, [pc, #60]	@ (8003484 <TurnTask+0x244>)
 8003446:	7edb      	ldrb	r3, [r3, #27]
 8003448:	b21b      	sxth	r3, r3
 800344a:	4313      	orrs	r3, r2
 800344c:	b21a      	sxth	r2, r3
 800344e:	4b11      	ldr	r3, [pc, #68]	@ (8003494 <TurnTask+0x254>)
 8003450:	815a      	strh	r2, [r3, #10]
		 ServoRevTypedef.cTurnTableTrackState         =  rxdata_servo[28];
 8003452:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <TurnTask+0x244>)
 8003454:	7f1a      	ldrb	r2, [r3, #28]
 8003456:	4b0f      	ldr	r3, [pc, #60]	@ (8003494 <TurnTask+0x254>)
 8003458:	731a      	strb	r2, [r3, #12]
		 ServoRevTypedef.cFSMTrackState               =  rxdata_servo[29];
 800345a:	4b0a      	ldr	r3, [pc, #40]	@ (8003484 <TurnTask+0x244>)
 800345c:	7f5a      	ldrb	r2, [r3, #29]
 800345e:	4b0d      	ldr	r3, [pc, #52]	@ (8003494 <TurnTask+0x254>)
 8003460:	735a      	strb	r2, [r3, #13]
		 // ServoRevTypedef.cElectPositionState          =  rxdata_servo[30];
		 ServoRevTypedef.cTurnTableMotorPowerState    =  rxdata_servo[31];
 8003462:	4b08      	ldr	r3, [pc, #32]	@ (8003484 <TurnTask+0x244>)
 8003464:	7fda      	ldrb	r2, [r3, #31]
 8003466:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <TurnTask+0x254>)
 8003468:	73da      	strb	r2, [r3, #15]
		 ServoRevTypedef.cJingTrackControlState       =  rxdata_servo[32];
 800346a:	4b06      	ldr	r3, [pc, #24]	@ (8003484 <TurnTask+0x244>)
 800346c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003470:	4b08      	ldr	r3, [pc, #32]	@ (8003494 <TurnTask+0x254>)
 8003472:	741a      	strb	r2, [r3, #16]
		 for(int i = 0;i < 4;i++)
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	e089      	b.n	800358e <TurnTask+0x34e>
 800347a:	bf00      	nop
 800347c:	24000598 	.word	0x24000598
 8003480:	2400056c 	.word	0x2400056c
 8003484:	30004b04 	.word	0x30004b04
 8003488:	2400051c 	.word	0x2400051c
 800348c:	240004a0 	.word	0x240004a0
 8003490:	240004b0 	.word	0x240004b0
 8003494:	24000458 	.word	0x24000458
		   ServoRevTypedef.TurnYawOutput.u8t[3-i] = rxdata_servo[65+i];
		   ServoRevTypedef.TurnPitchOutput.u8t[3-i] = rxdata_servo[69+i];
		   ServoRevTypedef.FSMXOutput.u8t[3-i] = rxdata_servo[73+i];
		   ServoRevTypedef.FSMYOutput.u8t[3-i] = rxdata_servo[77+i];
		   #else
		   ServoRevTypedef.FSMXPos.u8t[i] = rxdata_servo[33+i];
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3321      	adds	r3, #33	@ 0x21
 800349c:	4a48      	ldr	r2, [pc, #288]	@ (80035c0 <TurnTask+0x380>)
 800349e:	5cd1      	ldrb	r1, [r2, r3]
 80034a0:	4a48      	ldr	r2, [pc, #288]	@ (80035c4 <TurnTask+0x384>)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4413      	add	r3, r2
 80034a6:	3314      	adds	r3, #20
 80034a8:	460a      	mov	r2, r1
 80034aa:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.FSMYPos.u8t[i] = rxdata_servo[37+i];
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3325      	adds	r3, #37	@ 0x25
 80034b0:	4a43      	ldr	r2, [pc, #268]	@ (80035c0 <TurnTask+0x380>)
 80034b2:	5cd1      	ldrb	r1, [r2, r3]
 80034b4:	4a43      	ldr	r2, [pc, #268]	@ (80035c4 <TurnTask+0x384>)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4413      	add	r3, r2
 80034ba:	3318      	adds	r3, #24
 80034bc:	460a      	mov	r2, r1
 80034be:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.ServoYawPos.u8t[i] = rxdata_servo[41+i];
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3329      	adds	r3, #41	@ 0x29
 80034c4:	4a3e      	ldr	r2, [pc, #248]	@ (80035c0 <TurnTask+0x380>)
 80034c6:	5cd1      	ldrb	r1, [r2, r3]
 80034c8:	4a3e      	ldr	r2, [pc, #248]	@ (80035c4 <TurnTask+0x384>)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4413      	add	r3, r2
 80034ce:	331c      	adds	r3, #28
 80034d0:	460a      	mov	r2, r1
 80034d2:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.ServoPitchPos.u8t[i] = rxdata_servo[45+i];
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	332d      	adds	r3, #45	@ 0x2d
 80034d8:	4a39      	ldr	r2, [pc, #228]	@ (80035c0 <TurnTask+0x380>)
 80034da:	5cd1      	ldrb	r1, [r2, r3]
 80034dc:	4a39      	ldr	r2, [pc, #228]	@ (80035c4 <TurnTask+0x384>)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4413      	add	r3, r2
 80034e2:	3320      	adds	r3, #32
 80034e4:	460a      	mov	r2, r1
 80034e6:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.YawSpeed.u8t[i] = rxdata_servo[49+i];
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3331      	adds	r3, #49	@ 0x31
 80034ec:	4a34      	ldr	r2, [pc, #208]	@ (80035c0 <TurnTask+0x380>)
 80034ee:	5cd1      	ldrb	r1, [r2, r3]
 80034f0:	4a34      	ldr	r2, [pc, #208]	@ (80035c4 <TurnTask+0x384>)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4413      	add	r3, r2
 80034f6:	3324      	adds	r3, #36	@ 0x24
 80034f8:	460a      	mov	r2, r1
 80034fa:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.PitchSpeed.u8t[i] = rxdata_servo[53+i];
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3335      	adds	r3, #53	@ 0x35
 8003500:	4a2f      	ldr	r2, [pc, #188]	@ (80035c0 <TurnTask+0x380>)
 8003502:	5cd1      	ldrb	r1, [r2, r3]
 8003504:	4a2f      	ldr	r2, [pc, #188]	@ (80035c4 <TurnTask+0x384>)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4413      	add	r3, r2
 800350a:	3328      	adds	r3, #40	@ 0x28
 800350c:	460a      	mov	r2, r1
 800350e:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.FSMXPosZero.u8t[i] = rxdata_servo[57+i];
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	3339      	adds	r3, #57	@ 0x39
 8003514:	4a2a      	ldr	r2, [pc, #168]	@ (80035c0 <TurnTask+0x380>)
 8003516:	5cd1      	ldrb	r1, [r2, r3]
 8003518:	4a2a      	ldr	r2, [pc, #168]	@ (80035c4 <TurnTask+0x384>)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4413      	add	r3, r2
 800351e:	332c      	adds	r3, #44	@ 0x2c
 8003520:	460a      	mov	r2, r1
 8003522:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.FSMYPosZero.u8t[i] = rxdata_servo[61+i];
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	333d      	adds	r3, #61	@ 0x3d
 8003528:	4a25      	ldr	r2, [pc, #148]	@ (80035c0 <TurnTask+0x380>)
 800352a:	5cd1      	ldrb	r1, [r2, r3]
 800352c:	4a25      	ldr	r2, [pc, #148]	@ (80035c4 <TurnTask+0x384>)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4413      	add	r3, r2
 8003532:	3330      	adds	r3, #48	@ 0x30
 8003534:	460a      	mov	r2, r1
 8003536:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.TurnYawOutput.u8t[i] = rxdata_servo[65+i];
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	3341      	adds	r3, #65	@ 0x41
 800353c:	4a20      	ldr	r2, [pc, #128]	@ (80035c0 <TurnTask+0x380>)
 800353e:	5cd1      	ldrb	r1, [r2, r3]
 8003540:	4a20      	ldr	r2, [pc, #128]	@ (80035c4 <TurnTask+0x384>)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4413      	add	r3, r2
 8003546:	3334      	adds	r3, #52	@ 0x34
 8003548:	460a      	mov	r2, r1
 800354a:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.TurnPitchOutput.u8t[i] = rxdata_servo[69+i];
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3345      	adds	r3, #69	@ 0x45
 8003550:	4a1b      	ldr	r2, [pc, #108]	@ (80035c0 <TurnTask+0x380>)
 8003552:	5cd1      	ldrb	r1, [r2, r3]
 8003554:	4a1b      	ldr	r2, [pc, #108]	@ (80035c4 <TurnTask+0x384>)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4413      	add	r3, r2
 800355a:	3338      	adds	r3, #56	@ 0x38
 800355c:	460a      	mov	r2, r1
 800355e:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.FSMXOutput.u8t[i] = rxdata_servo[73+i];
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3349      	adds	r3, #73	@ 0x49
 8003564:	4a16      	ldr	r2, [pc, #88]	@ (80035c0 <TurnTask+0x380>)
 8003566:	5cd1      	ldrb	r1, [r2, r3]
 8003568:	4a16      	ldr	r2, [pc, #88]	@ (80035c4 <TurnTask+0x384>)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4413      	add	r3, r2
 800356e:	333c      	adds	r3, #60	@ 0x3c
 8003570:	460a      	mov	r2, r1
 8003572:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.FSMYOutput.u8t[i] = rxdata_servo[77+i];
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	334d      	adds	r3, #77	@ 0x4d
 8003578:	4a11      	ldr	r2, [pc, #68]	@ (80035c0 <TurnTask+0x380>)
 800357a:	5cd1      	ldrb	r1, [r2, r3]
 800357c:	4a11      	ldr	r2, [pc, #68]	@ (80035c4 <TurnTask+0x384>)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4413      	add	r3, r2
 8003582:	3340      	adds	r3, #64	@ 0x40
 8003584:	460a      	mov	r2, r1
 8003586:	701a      	strb	r2, [r3, #0]
		 for(int i = 0;i < 4;i++)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	3301      	adds	r3, #1
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b03      	cmp	r3, #3
 8003592:	dd81      	ble.n	8003498 <TurnTask+0x258>
		   #endif
		 }

		 ServoRevTypedef.ServoCrc                     =  rxdata_servo[81];
 8003594:	4b0a      	ldr	r3, [pc, #40]	@ (80035c0 <TurnTask+0x380>)
 8003596:	f893 2051 	ldrb.w	r2, [r3, #81]	@ 0x51
 800359a:	4b0a      	ldr	r3, [pc, #40]	@ (80035c4 <TurnTask+0x384>)
 800359c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		 ServoRevTypedef.ServoCheck                   =  rxdata_servo[82];
 80035a0:	4b07      	ldr	r3, [pc, #28]	@ (80035c0 <TurnTask+0x380>)
 80035a2:	f893 2052 	ldrb.w	r2, [r3, #82]	@ 0x52
 80035a6:	4b07      	ldr	r3, [pc, #28]	@ (80035c4 <TurnTask+0x384>)
 80035a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
//		         			  	HAL_UART_Transmit_DMA(&huart6, msg2, 12);
//		         			  			  osDelay(3000);
//		         uint8_t msg4[8] = {0xaa, 0x01, 0x08, 0x0f, 0x03, 0x00, 0x32, 0x9d};
//		         HAL_UART_Transmit(&huart6, msg4, 8,0xff);

		        memset(rxdata_servo,0,sizeof(rxdata_servo));
 80035ac:	2280      	movs	r2, #128	@ 0x80
 80035ae:	2100      	movs	r1, #0
 80035b0:	4803      	ldr	r0, [pc, #12]	@ (80035c0 <TurnTask+0x380>)
 80035b2:	f022 f883 	bl	80256bc <memset>
//		  HAL_UART_Transmit_DMA(&huart5, rxdata_servo, rxSize);
	  }
    osDelay(20);
 80035b6:	2014      	movs	r0, #20
 80035b8:	f00f f8f4 	bl	80127a4 <osDelay>
	  if(osSemaphoreWait(BinaryServoHandle, 10) == osOK && taskTurnBegin == pdTRUE)
 80035bc:	e644      	b.n	8003248 <TurnTask+0x8>
 80035be:	bf00      	nop
 80035c0:	30004b04 	.word	0x30004b04
 80035c4:	24000458 	.word	0x24000458

080035c8 <ImgCuTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ImgCuTask */
void ImgCuTask(void const * argument)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ImgCuTask */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(BinaryCuHandle, 10) == osOK && taskCuBegin == pdTRUE)
 80035d0:	4b67      	ldr	r3, [pc, #412]	@ (8003770 <ImgCuTask+0x1a8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	210a      	movs	r1, #10
 80035d6:	4618      	mov	r0, r3
 80035d8:	f00f f9c6 	bl	8012968 <osSemaphoreWait>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f040 80c2 	bne.w	8003768 <ImgCuTask+0x1a0>
 80035e4:	4b63      	ldr	r3, [pc, #396]	@ (8003774 <ImgCuTask+0x1ac>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	f040 80bd 	bne.w	8003768 <ImgCuTask+0x1a0>
	  {
		ImgRecvDataTypedef_CU.code1.SelfCheck     = (rxdata_cu[3] & bit(0)) ? 1 : 0;
 80035ee:	4b62      	ldr	r3, [pc, #392]	@ (8003778 <ImgCuTask+0x1b0>)
 80035f0:	78db      	ldrb	r3, [r3, #3]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	4b60      	ldr	r3, [pc, #384]	@ (800377c <ImgCuTask+0x1b4>)
 80035fa:	701a      	strb	r2, [r3, #0]
		ImgRecvDataTypedef_CU.code1.Standby       = (rxdata_cu[3] & bit(1)) ? 1 : 0;
 80035fc:	4b5e      	ldr	r3, [pc, #376]	@ (8003778 <ImgCuTask+0x1b0>)
 80035fe:	78db      	ldrb	r3, [r3, #3]
 8003600:	105b      	asrs	r3, r3, #1
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4b5c      	ldr	r3, [pc, #368]	@ (800377c <ImgCuTask+0x1b4>)
 800360c:	705a      	strb	r2, [r3, #1]
		ImgRecvDataTypedef_CU.code1.AutoTrack     = (rxdata_cu[3] & bit(2)) ? 1 : 0;
 800360e:	4b5a      	ldr	r3, [pc, #360]	@ (8003778 <ImgCuTask+0x1b0>)
 8003610:	78db      	ldrb	r3, [r3, #3]
 8003612:	109b      	asrs	r3, r3, #2
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	b2da      	uxtb	r2, r3
 800361c:	4b57      	ldr	r3, [pc, #348]	@ (800377c <ImgCuTask+0x1b4>)
 800361e:	709a      	strb	r2, [r3, #2]
		ImgRecvDataTypedef_CU.code1.ManualTrack   = (rxdata_cu[3] & bit(3)) ? 1 : 0;
 8003620:	4b55      	ldr	r3, [pc, #340]	@ (8003778 <ImgCuTask+0x1b0>)
 8003622:	78db      	ldrb	r3, [r3, #3]
 8003624:	10db      	asrs	r3, r3, #3
 8003626:	b2db      	uxtb	r3, r3
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	b2da      	uxtb	r2, r3
 800362e:	4b53      	ldr	r3, [pc, #332]	@ (800377c <ImgCuTask+0x1b4>)
 8003630:	70da      	strb	r2, [r3, #3]

		// uart2_printf("selfcheck:%d,standby:%d,autotrack:%d,manualtrack:%d\r\n",ImgRecvDataTypedef_CU.code1.SelfCheck,ImgRecvDataTypedef_CU.code1.Standby,ImgRecvDataTypedef_CU.code1.AutoTrack,ImgRecvDataTypedef_CU.code1.ManualTrack);
		ImgRecvDataTypedef_CU.code2.CheckState    = (rxdata_cu[4] & bit(7)) ? 1 : 0;
 8003632:	4b51      	ldr	r3, [pc, #324]	@ (8003778 <ImgCuTask+0x1b0>)
 8003634:	791b      	ldrb	r3, [r3, #4]
 8003636:	09db      	lsrs	r3, r3, #7
 8003638:	b2da      	uxtb	r2, r3
 800363a:	4b50      	ldr	r3, [pc, #320]	@ (800377c <ImgCuTask+0x1b4>)
 800363c:	711a      	strb	r2, [r3, #4]
		ImgRecvDataTypedef_CU.code2.InitState     = (rxdata_cu[4] & bit(6)) ? 1 : 0;
 800363e:	4b4e      	ldr	r3, [pc, #312]	@ (8003778 <ImgCuTask+0x1b0>)
 8003640:	791b      	ldrb	r3, [r3, #4]
 8003642:	119b      	asrs	r3, r3, #6
 8003644:	b2db      	uxtb	r3, r3
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	b2da      	uxtb	r2, r3
 800364c:	4b4b      	ldr	r3, [pc, #300]	@ (800377c <ImgCuTask+0x1b4>)
 800364e:	715a      	strb	r2, [r3, #5]
		ImgRecvDataTypedef_CU.code2.NormalTrack   = (rxdata_cu[4] & bit(5)) ? 1 : 0;
 8003650:	4b49      	ldr	r3, [pc, #292]	@ (8003778 <ImgCuTask+0x1b0>)
 8003652:	791b      	ldrb	r3, [r3, #4]
 8003654:	115b      	asrs	r3, r3, #5
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	b2da      	uxtb	r2, r3
 800365e:	4b47      	ldr	r3, [pc, #284]	@ (800377c <ImgCuTask+0x1b4>)
 8003660:	719a      	strb	r2, [r3, #6]
		ImgRecvDataTypedef_CU.code2.RememberTrack = (rxdata_cu[4] & bit(4)) ? 1 : 0;
 8003662:	4b45      	ldr	r3, [pc, #276]	@ (8003778 <ImgCuTask+0x1b0>)
 8003664:	791b      	ldrb	r3, [r3, #4]
 8003666:	111b      	asrs	r3, r3, #4
 8003668:	b2db      	uxtb	r3, r3
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	b2da      	uxtb	r2, r3
 8003670:	4b42      	ldr	r3, [pc, #264]	@ (800377c <ImgCuTask+0x1b4>)
 8003672:	71da      	strb	r2, [r3, #7]
		ImgRecvDataTypedef_CU.code2.TrackLose     = (rxdata_cu[4] & bit(3)) ? 1 : 0;
 8003674:	4b40      	ldr	r3, [pc, #256]	@ (8003778 <ImgCuTask+0x1b0>)
 8003676:	791b      	ldrb	r3, [r3, #4]
 8003678:	10db      	asrs	r3, r3, #3
 800367a:	b2db      	uxtb	r3, r3
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	b2da      	uxtb	r2, r3
 8003682:	4b3e      	ldr	r3, [pc, #248]	@ (800377c <ImgCuTask+0x1b4>)
 8003684:	721a      	strb	r2, [r3, #8]
		pcSend.cuEnable = ImgRecvDataTypedef_CU.code2.NormalTrack || ImgRecvDataTypedef_CU.code2.RememberTrack;
 8003686:	4b3d      	ldr	r3, [pc, #244]	@ (800377c <ImgCuTask+0x1b4>)
 8003688:	799b      	ldrb	r3, [r3, #6]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <ImgCuTask+0xce>
 800368e:	4b3b      	ldr	r3, [pc, #236]	@ (800377c <ImgCuTask+0x1b4>)
 8003690:	79db      	ldrb	r3, [r3, #7]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <ImgCuTask+0xd2>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <ImgCuTask+0xd4>
 800369a:	2300      	movs	r3, #0
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4b38      	ldr	r3, [pc, #224]	@ (8003780 <ImgCuTask+0x1b8>)
 80036a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		
		// uart2_printf("checkstate:%d,initstate:%d,normaltrack:%d,remembertrack:%d,tracklose:%d\r\n",ImgRecvDataTypedef_CU.code2.CheckState,ImgRecvDataTypedef_CU.code2.InitState,ImgRecvDataTypedef_CU.code2.NormalTrack,ImgRecvDataTypedef_CU.code2.RememberTrack,ImgRecvDataTypedef_CU.code2.TrackLose);

		ImgRecvDataTypedef_CU.WorkState           = rxdata_cu[5];
 80036a4:	4b34      	ldr	r3, [pc, #208]	@ (8003778 <ImgCuTask+0x1b0>)
 80036a6:	795a      	ldrb	r2, [r3, #5]
 80036a8:	4b34      	ldr	r3, [pc, #208]	@ (800377c <ImgCuTask+0x1b4>)
 80036aa:	72da      	strb	r2, [r3, #11]

		ImgRecvDataTypedef_CU.HardVersion         = (uint8_t)(rxdata_cu[8] & 00000111);
 80036ac:	4b32      	ldr	r3, [pc, #200]	@ (8003778 <ImgCuTask+0x1b0>)
 80036ae:	7a1b      	ldrb	r3, [r3, #8]
 80036b0:	f003 0349 	and.w	r3, r3, #73	@ 0x49
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	4b31      	ldr	r3, [pc, #196]	@ (800377c <ImgCuTask+0x1b4>)
 80036b8:	735a      	strb	r2, [r3, #13]
		ImgRecvDataTypedef_CU.SoftVersion         = (uint8_t)(rxdata_cu[8] & 01111000);
 80036ba:	4b30      	ldr	r3, [pc, #192]	@ (800377c <ImgCuTask+0x1b4>)
 80036bc:	2200      	movs	r2, #0
 80036be:	731a      	strb	r2, [r3, #12]

		ImgRecvDataTypedef_CU.ImgCount            = rxdata_cu[7] << 8 | rxdata_cu[6];
 80036c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003778 <ImgCuTask+0x1b0>)
 80036c2:	79db      	ldrb	r3, [r3, #7]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	b21a      	sxth	r2, r3
 80036c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003778 <ImgCuTask+0x1b0>)
 80036ca:	799b      	ldrb	r3, [r3, #6]
 80036cc:	b21b      	sxth	r3, r3
 80036ce:	4313      	orrs	r3, r2
 80036d0:	b21b      	sxth	r3, r3
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	4b29      	ldr	r3, [pc, #164]	@ (800377c <ImgCuTask+0x1b4>)
 80036d6:	81da      	strh	r2, [r3, #14]
		ImgRecvDataTypedef_CU.DataCount           = rxdata_cu[10] << 8 | rxdata_cu[9];
 80036d8:	4b27      	ldr	r3, [pc, #156]	@ (8003778 <ImgCuTask+0x1b0>)
 80036da:	7a9b      	ldrb	r3, [r3, #10]
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	b21a      	sxth	r2, r3
 80036e0:	4b25      	ldr	r3, [pc, #148]	@ (8003778 <ImgCuTask+0x1b0>)
 80036e2:	7a5b      	ldrb	r3, [r3, #9]
 80036e4:	b21b      	sxth	r3, r3
 80036e6:	4313      	orrs	r3, r2
 80036e8:	b21b      	sxth	r3, r3
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	4b23      	ldr	r3, [pc, #140]	@ (800377c <ImgCuTask+0x1b4>)
 80036ee:	821a      	strh	r2, [r3, #16]

		int buff[2] = {0,0};
 80036f0:	2300      	movs	r3, #0
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]
		buff[0]							          = (rxdata_cu[15] << 28 | rxdata_cu[14] << 21 | rxdata_cu[13] << 14 | rxdata_cu[12] << 7 | rxdata_cu[11]);
 80036f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003778 <ImgCuTask+0x1b0>)
 80036fa:	7bdb      	ldrb	r3, [r3, #15]
 80036fc:	071a      	lsls	r2, r3, #28
 80036fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003778 <ImgCuTask+0x1b0>)
 8003700:	7b9b      	ldrb	r3, [r3, #14]
 8003702:	055b      	lsls	r3, r3, #21
 8003704:	431a      	orrs	r2, r3
 8003706:	4b1c      	ldr	r3, [pc, #112]	@ (8003778 <ImgCuTask+0x1b0>)
 8003708:	7b5b      	ldrb	r3, [r3, #13]
 800370a:	039b      	lsls	r3, r3, #14
 800370c:	431a      	orrs	r2, r3
 800370e:	4b1a      	ldr	r3, [pc, #104]	@ (8003778 <ImgCuTask+0x1b0>)
 8003710:	7b1b      	ldrb	r3, [r3, #12]
 8003712:	01db      	lsls	r3, r3, #7
 8003714:	4313      	orrs	r3, r2
 8003716:	4a18      	ldr	r2, [pc, #96]	@ (8003778 <ImgCuTask+0x1b0>)
 8003718:	7ad2      	ldrb	r2, [r2, #11]
 800371a:	4313      	orrs	r3, r2
 800371c:	60bb      	str	r3, [r7, #8]
		buff[1]            						  = (rxdata_cu[20] << 28 | rxdata_cu[19] << 21 | rxdata_cu[18] << 14 | rxdata_cu[17] << 7 | rxdata_cu[16]);
 800371e:	4b16      	ldr	r3, [pc, #88]	@ (8003778 <ImgCuTask+0x1b0>)
 8003720:	7d1b      	ldrb	r3, [r3, #20]
 8003722:	071a      	lsls	r2, r3, #28
 8003724:	4b14      	ldr	r3, [pc, #80]	@ (8003778 <ImgCuTask+0x1b0>)
 8003726:	7cdb      	ldrb	r3, [r3, #19]
 8003728:	055b      	lsls	r3, r3, #21
 800372a:	431a      	orrs	r2, r3
 800372c:	4b12      	ldr	r3, [pc, #72]	@ (8003778 <ImgCuTask+0x1b0>)
 800372e:	7c9b      	ldrb	r3, [r3, #18]
 8003730:	039b      	lsls	r3, r3, #14
 8003732:	431a      	orrs	r2, r3
 8003734:	4b10      	ldr	r3, [pc, #64]	@ (8003778 <ImgCuTask+0x1b0>)
 8003736:	7c5b      	ldrb	r3, [r3, #17]
 8003738:	01db      	lsls	r3, r3, #7
 800373a:	4313      	orrs	r3, r2
 800373c:	4a0e      	ldr	r2, [pc, #56]	@ (8003778 <ImgCuTask+0x1b0>)
 800373e:	7c12      	ldrb	r2, [r2, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
		ImgRecvDataTypedef_CU.Offset_X            = *((float *)&buff[0]);
 8003744:	f107 0308 	add.w	r3, r7, #8
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a0c      	ldr	r2, [pc, #48]	@ (800377c <ImgCuTask+0x1b4>)
 800374c:	6153      	str	r3, [r2, #20]
		ImgRecvDataTypedef_CU.Offset_Y            = *((float *)&buff[1]);
 800374e:	f107 0308 	add.w	r3, r7, #8
 8003752:	3304      	adds	r3, #4
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a09      	ldr	r2, [pc, #36]	@ (800377c <ImgCuTask+0x1b4>)
 8003758:	6193      	str	r3, [r2, #24]
		        // ImgRecvDataTypedef_CU.Offset_Y            = (rxdata_cu[20] << 28 | rxdata_cu[19] << 21 | rxdata_cu[18] << 14 | rxdata_cu[17] << 7 | rxdata_cu[16]) / 1.f;

//		        char msg[128];
		        // sprintf(msg,"x:%.2f,y:%.2f",ImgRecvDataTypedef_CU.Offset_X,ImgRecvDataTypedef_CU.Offset_Y);
		        // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)msg, strlen(msg));
		  memset(rxdata_cu,0,rxSize);
 800375a:	4b0a      	ldr	r3, [pc, #40]	@ (8003784 <ImgCuTask+0x1bc>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	2100      	movs	r1, #0
 8003762:	4805      	ldr	r0, [pc, #20]	@ (8003778 <ImgCuTask+0x1b0>)
 8003764:	f021 ffaa 	bl	80256bc <memset>
	  }
    osDelay(10);
 8003768:	200a      	movs	r0, #10
 800376a:	f00f f81b 	bl	80127a4 <osDelay>
	  if(osSemaphoreWait(BinaryCuHandle, 10) == osOK && taskCuBegin == pdTRUE)
 800376e:	e72f      	b.n	80035d0 <ImgCuTask+0x8>
 8003770:	2400059c 	.word	0x2400059c
 8003774:	24000570 	.word	0x24000570
 8003778:	30004d04 	.word	0x30004d04
 800377c:	24000408 	.word	0x24000408
 8003780:	2400051c 	.word	0x2400051c
 8003784:	24000568 	.word	0x24000568

08003788 <ImgJingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ImgJingTask */
void ImgJingTask(void const * argument)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ImgJingTask */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(BinaryJingHandle, 10) == osOK && taskJingBegin == pdTRUE)
 8003790:	4b67      	ldr	r3, [pc, #412]	@ (8003930 <ImgJingTask+0x1a8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	210a      	movs	r1, #10
 8003796:	4618      	mov	r0, r3
 8003798:	f00f f8e6 	bl	8012968 <osSemaphoreWait>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f040 80c2 	bne.w	8003928 <ImgJingTask+0x1a0>
 80037a4:	4b63      	ldr	r3, [pc, #396]	@ (8003934 <ImgJingTask+0x1ac>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	f040 80bd 	bne.w	8003928 <ImgJingTask+0x1a0>
	  {
		  	ImgRecvDataTypedef_JING.code1.SelfCheck     = (rxdata_jing[3] & bit(0)) ? 1 : 0;
 80037ae:	4b62      	ldr	r3, [pc, #392]	@ (8003938 <ImgJingTask+0x1b0>)
 80037b0:	78db      	ldrb	r3, [r3, #3]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	4b60      	ldr	r3, [pc, #384]	@ (800393c <ImgJingTask+0x1b4>)
 80037ba:	701a      	strb	r2, [r3, #0]
	        ImgRecvDataTypedef_JING.code1.Standby       = (rxdata_jing[3] & bit(1)) ? 1 : 0;
 80037bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003938 <ImgJingTask+0x1b0>)
 80037be:	78db      	ldrb	r3, [r3, #3]
 80037c0:	105b      	asrs	r3, r3, #1
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	4b5c      	ldr	r3, [pc, #368]	@ (800393c <ImgJingTask+0x1b4>)
 80037cc:	705a      	strb	r2, [r3, #1]
	        ImgRecvDataTypedef_JING.code1.AutoTrack     = (rxdata_jing[3] & bit(2)) ? 1 : 0;
 80037ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003938 <ImgJingTask+0x1b0>)
 80037d0:	78db      	ldrb	r3, [r3, #3]
 80037d2:	109b      	asrs	r3, r3, #2
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	4b57      	ldr	r3, [pc, #348]	@ (800393c <ImgJingTask+0x1b4>)
 80037de:	709a      	strb	r2, [r3, #2]
	        ImgRecvDataTypedef_JING.code1.ManualTrack   = (rxdata_jing[3] & bit(3)) ? 1 : 0;
 80037e0:	4b55      	ldr	r3, [pc, #340]	@ (8003938 <ImgJingTask+0x1b0>)
 80037e2:	78db      	ldrb	r3, [r3, #3]
 80037e4:	10db      	asrs	r3, r3, #3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	4b53      	ldr	r3, [pc, #332]	@ (800393c <ImgJingTask+0x1b4>)
 80037f0:	70da      	strb	r2, [r3, #3]

	        ImgRecvDataTypedef_JING.code2.CheckState    = (rxdata_jing[4] & bit(7)) ? 1 : 0;
 80037f2:	4b51      	ldr	r3, [pc, #324]	@ (8003938 <ImgJingTask+0x1b0>)
 80037f4:	791b      	ldrb	r3, [r3, #4]
 80037f6:	09db      	lsrs	r3, r3, #7
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	4b50      	ldr	r3, [pc, #320]	@ (800393c <ImgJingTask+0x1b4>)
 80037fc:	711a      	strb	r2, [r3, #4]
	        ImgRecvDataTypedef_JING.code2.InitState     = (rxdata_jing[4] & bit(6)) ? 1 : 0;
 80037fe:	4b4e      	ldr	r3, [pc, #312]	@ (8003938 <ImgJingTask+0x1b0>)
 8003800:	791b      	ldrb	r3, [r3, #4]
 8003802:	119b      	asrs	r3, r3, #6
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	b2da      	uxtb	r2, r3
 800380c:	4b4b      	ldr	r3, [pc, #300]	@ (800393c <ImgJingTask+0x1b4>)
 800380e:	715a      	strb	r2, [r3, #5]
	        ImgRecvDataTypedef_JING.code2.NormalTrack   = (rxdata_jing[4] & bit(5)) ? 1 : 0;
 8003810:	4b49      	ldr	r3, [pc, #292]	@ (8003938 <ImgJingTask+0x1b0>)
 8003812:	791b      	ldrb	r3, [r3, #4]
 8003814:	115b      	asrs	r3, r3, #5
 8003816:	b2db      	uxtb	r3, r3
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	b2da      	uxtb	r2, r3
 800381e:	4b47      	ldr	r3, [pc, #284]	@ (800393c <ImgJingTask+0x1b4>)
 8003820:	719a      	strb	r2, [r3, #6]
	        ImgRecvDataTypedef_JING.code2.RememberTrack = (rxdata_jing[4] & bit(4)) ? 1 : 0;
 8003822:	4b45      	ldr	r3, [pc, #276]	@ (8003938 <ImgJingTask+0x1b0>)
 8003824:	791b      	ldrb	r3, [r3, #4]
 8003826:	111b      	asrs	r3, r3, #4
 8003828:	b2db      	uxtb	r3, r3
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	b2da      	uxtb	r2, r3
 8003830:	4b42      	ldr	r3, [pc, #264]	@ (800393c <ImgJingTask+0x1b4>)
 8003832:	71da      	strb	r2, [r3, #7]
	        ImgRecvDataTypedef_JING.code2.TrackLose     = (rxdata_jing[4] & bit(3)) ? 1 : 0;
 8003834:	4b40      	ldr	r3, [pc, #256]	@ (8003938 <ImgJingTask+0x1b0>)
 8003836:	791b      	ldrb	r3, [r3, #4]
 8003838:	10db      	asrs	r3, r3, #3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	b2da      	uxtb	r2, r3
 8003842:	4b3e      	ldr	r3, [pc, #248]	@ (800393c <ImgJingTask+0x1b4>)
 8003844:	721a      	strb	r2, [r3, #8]
			pcSend.jingEnable = ImgRecvDataTypedef_JING.code2.NormalTrack || ImgRecvDataTypedef_JING.code2.RememberTrack;
 8003846:	4b3d      	ldr	r3, [pc, #244]	@ (800393c <ImgJingTask+0x1b4>)
 8003848:	799b      	ldrb	r3, [r3, #6]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d103      	bne.n	8003856 <ImgJingTask+0xce>
 800384e:	4b3b      	ldr	r3, [pc, #236]	@ (800393c <ImgJingTask+0x1b4>)
 8003850:	79db      	ldrb	r3, [r3, #7]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <ImgJingTask+0xd2>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <ImgJingTask+0xd4>
 800385a:	2300      	movs	r3, #0
 800385c:	b2da      	uxtb	r2, r3
 800385e:	4b38      	ldr	r3, [pc, #224]	@ (8003940 <ImgJingTask+0x1b8>)
 8003860:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

	        ImgRecvDataTypedef_JING.WorkState           = rxdata_jing[5];
 8003864:	4b34      	ldr	r3, [pc, #208]	@ (8003938 <ImgJingTask+0x1b0>)
 8003866:	795a      	ldrb	r2, [r3, #5]
 8003868:	4b34      	ldr	r3, [pc, #208]	@ (800393c <ImgJingTask+0x1b4>)
 800386a:	72da      	strb	r2, [r3, #11]

	        ImgRecvDataTypedef_JING.HardVersion         = (uint8_t)(rxdata_jing[8] & 00000111);
 800386c:	4b32      	ldr	r3, [pc, #200]	@ (8003938 <ImgJingTask+0x1b0>)
 800386e:	7a1b      	ldrb	r3, [r3, #8]
 8003870:	f003 0349 	and.w	r3, r3, #73	@ 0x49
 8003874:	b2da      	uxtb	r2, r3
 8003876:	4b31      	ldr	r3, [pc, #196]	@ (800393c <ImgJingTask+0x1b4>)
 8003878:	735a      	strb	r2, [r3, #13]
	        ImgRecvDataTypedef_JING.SoftVersion         = (uint8_t)(rxdata_jing[8] & 01111000);
 800387a:	4b30      	ldr	r3, [pc, #192]	@ (800393c <ImgJingTask+0x1b4>)
 800387c:	2200      	movs	r2, #0
 800387e:	731a      	strb	r2, [r3, #12]

	        ImgRecvDataTypedef_JING.ImgCount            = rxdata_jing[7] << 8 | rxdata_jing[6];
 8003880:	4b2d      	ldr	r3, [pc, #180]	@ (8003938 <ImgJingTask+0x1b0>)
 8003882:	79db      	ldrb	r3, [r3, #7]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	b21a      	sxth	r2, r3
 8003888:	4b2b      	ldr	r3, [pc, #172]	@ (8003938 <ImgJingTask+0x1b0>)
 800388a:	799b      	ldrb	r3, [r3, #6]
 800388c:	b21b      	sxth	r3, r3
 800388e:	4313      	orrs	r3, r2
 8003890:	b21b      	sxth	r3, r3
 8003892:	b29a      	uxth	r2, r3
 8003894:	4b29      	ldr	r3, [pc, #164]	@ (800393c <ImgJingTask+0x1b4>)
 8003896:	81da      	strh	r2, [r3, #14]
	        ImgRecvDataTypedef_JING.DataCount           = rxdata_jing[10] << 8 | rxdata_jing[9];
 8003898:	4b27      	ldr	r3, [pc, #156]	@ (8003938 <ImgJingTask+0x1b0>)
 800389a:	7a9b      	ldrb	r3, [r3, #10]
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	b21a      	sxth	r2, r3
 80038a0:	4b25      	ldr	r3, [pc, #148]	@ (8003938 <ImgJingTask+0x1b0>)
 80038a2:	7a5b      	ldrb	r3, [r3, #9]
 80038a4:	b21b      	sxth	r3, r3
 80038a6:	4313      	orrs	r3, r2
 80038a8:	b21b      	sxth	r3, r3
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	4b23      	ldr	r3, [pc, #140]	@ (800393c <ImgJingTask+0x1b4>)
 80038ae:	821a      	strh	r2, [r3, #16]
	        
			int buff[2] = {0,0};
 80038b0:	2300      	movs	r3, #0
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]
			buff[0]							            = (rxdata_jing[15] << 28 | rxdata_jing[14] << 21 | rxdata_jing[13] << 14 | rxdata_jing[12] << 7 | rxdata_jing[11]);
 80038b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003938 <ImgJingTask+0x1b0>)
 80038ba:	7bdb      	ldrb	r3, [r3, #15]
 80038bc:	071a      	lsls	r2, r3, #28
 80038be:	4b1e      	ldr	r3, [pc, #120]	@ (8003938 <ImgJingTask+0x1b0>)
 80038c0:	7b9b      	ldrb	r3, [r3, #14]
 80038c2:	055b      	lsls	r3, r3, #21
 80038c4:	431a      	orrs	r2, r3
 80038c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003938 <ImgJingTask+0x1b0>)
 80038c8:	7b5b      	ldrb	r3, [r3, #13]
 80038ca:	039b      	lsls	r3, r3, #14
 80038cc:	431a      	orrs	r2, r3
 80038ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003938 <ImgJingTask+0x1b0>)
 80038d0:	7b1b      	ldrb	r3, [r3, #12]
 80038d2:	01db      	lsls	r3, r3, #7
 80038d4:	4313      	orrs	r3, r2
 80038d6:	4a18      	ldr	r2, [pc, #96]	@ (8003938 <ImgJingTask+0x1b0>)
 80038d8:	7ad2      	ldrb	r2, [r2, #11]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60bb      	str	r3, [r7, #8]
	        buff[1]            							= (rxdata_jing[20] << 28 | rxdata_jing[19] << 21 | rxdata_jing[18] << 14 | rxdata_jing[17] << 7 | rxdata_jing[16]);
 80038de:	4b16      	ldr	r3, [pc, #88]	@ (8003938 <ImgJingTask+0x1b0>)
 80038e0:	7d1b      	ldrb	r3, [r3, #20]
 80038e2:	071a      	lsls	r2, r3, #28
 80038e4:	4b14      	ldr	r3, [pc, #80]	@ (8003938 <ImgJingTask+0x1b0>)
 80038e6:	7cdb      	ldrb	r3, [r3, #19]
 80038e8:	055b      	lsls	r3, r3, #21
 80038ea:	431a      	orrs	r2, r3
 80038ec:	4b12      	ldr	r3, [pc, #72]	@ (8003938 <ImgJingTask+0x1b0>)
 80038ee:	7c9b      	ldrb	r3, [r3, #18]
 80038f0:	039b      	lsls	r3, r3, #14
 80038f2:	431a      	orrs	r2, r3
 80038f4:	4b10      	ldr	r3, [pc, #64]	@ (8003938 <ImgJingTask+0x1b0>)
 80038f6:	7c5b      	ldrb	r3, [r3, #17]
 80038f8:	01db      	lsls	r3, r3, #7
 80038fa:	4313      	orrs	r3, r2
 80038fc:	4a0e      	ldr	r2, [pc, #56]	@ (8003938 <ImgJingTask+0x1b0>)
 80038fe:	7c12      	ldrb	r2, [r2, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
			ImgRecvDataTypedef_JING.Offset_X            = *((float *)&buff[0]);
 8003904:	f107 0308 	add.w	r3, r7, #8
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a0c      	ldr	r2, [pc, #48]	@ (800393c <ImgJingTask+0x1b4>)
 800390c:	6153      	str	r3, [r2, #20]
	        ImgRecvDataTypedef_JING.Offset_Y            = *((float *)&buff[1]);
 800390e:	f107 0308 	add.w	r3, r7, #8
 8003912:	3304      	adds	r3, #4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a09      	ldr	r2, [pc, #36]	@ (800393c <ImgJingTask+0x1b4>)
 8003918:	6193      	str	r3, [r2, #24]
			// uart_printf("workstate:%d,hardversion:%d,softversion:%d,imgcount:%d,datacount:%d,offsetx:%.2f,offsety:%.2f\r\n",ImgRecvDataTypedef_JING.WorkState,ImgRecvDataTypedef_JING.HardVersion,ImgRecvDataTypedef_JING.SoftVersion,ImgRecvDataTypedef_JING.ImgCount,ImgRecvDataTypedef_JING.DataCount,ImgRecvDataTypedef_JING.Offset_X,ImgRecvDataTypedef_JING.Offset_Y);

//	        char msg[128];
	        // sprintf(msg,"x:%.2f,y:%.2f",ImgRecvDataTypedef_JING.Offset_X,ImgRecvDataTypedef_JING.Offset_Y);
//	         uart_printf("%s",msg);
	        memset(rxdata_cu,0,rxSize);
 800391a:	4b0a      	ldr	r3, [pc, #40]	@ (8003944 <ImgJingTask+0x1bc>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	2100      	movs	r1, #0
 8003922:	4809      	ldr	r0, [pc, #36]	@ (8003948 <ImgJingTask+0x1c0>)
 8003924:	f021 feca 	bl	80256bc <memset>
	  }
    osDelay(10);
 8003928:	200a      	movs	r0, #10
 800392a:	f00e ff3b 	bl	80127a4 <osDelay>
	  if(osSemaphoreWait(BinaryJingHandle, 10) == osOK && taskJingBegin == pdTRUE)
 800392e:	e72f      	b.n	8003790 <ImgJingTask+0x8>
 8003930:	240005a0 	.word	0x240005a0
 8003934:	24000574 	.word	0x24000574
 8003938:	30004e04 	.word	0x30004e04
 800393c:	24000424 	.word	0x24000424
 8003940:	2400051c 	.word	0x2400051c
 8003944:	24000568 	.word	0x24000568
 8003948:	30004d04 	.word	0x30004d04

0800394c <FocusTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FocusTask */
void FocusTask(void const * argument)
{
 800394c:	b5b0      	push	{r4, r5, r7, lr}
 800394e:	b0a6      	sub	sp, #152	@ 0x98
 8003950:	af04      	add	r7, sp, #16
 8003952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FocusTask */

  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(BinaryFocusHandle, 10) == osOK && taskFocusBegin == pdTRUE)
 8003954:	4b23      	ldr	r3, [pc, #140]	@ (80039e4 <FocusTask+0x98>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	210a      	movs	r1, #10
 800395a:	4618      	mov	r0, r3
 800395c:	f00f f804 	bl	8012968 <osSemaphoreWait>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d13a      	bne.n	80039dc <FocusTask+0x90>
 8003966:	4b20      	ldr	r3, [pc, #128]	@ (80039e8 <FocusTask+0x9c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d136      	bne.n	80039dc <FocusTask+0x90>
	  {
		  getFocusPos.u8t[3] = rxdata_focus[6];
 800396e:	4b1f      	ldr	r3, [pc, #124]	@ (80039ec <FocusTask+0xa0>)
 8003970:	799a      	ldrb	r2, [r3, #6]
 8003972:	4b1f      	ldr	r3, [pc, #124]	@ (80039f0 <FocusTask+0xa4>)
 8003974:	70da      	strb	r2, [r3, #3]
		  getFocusPos.u8t[2] = rxdata_focus[7];
 8003976:	4b1d      	ldr	r3, [pc, #116]	@ (80039ec <FocusTask+0xa0>)
 8003978:	79da      	ldrb	r2, [r3, #7]
 800397a:	4b1d      	ldr	r3, [pc, #116]	@ (80039f0 <FocusTask+0xa4>)
 800397c:	709a      	strb	r2, [r3, #2]
		  getFocusPos.u8t[1] = rxdata_focus[8];
 800397e:	4b1b      	ldr	r3, [pc, #108]	@ (80039ec <FocusTask+0xa0>)
 8003980:	7a1a      	ldrb	r2, [r3, #8]
 8003982:	4b1b      	ldr	r3, [pc, #108]	@ (80039f0 <FocusTask+0xa4>)
 8003984:	705a      	strb	r2, [r3, #1]
		  getFocusPos.u8t[0] = rxdata_focus[9];
 8003986:	4b19      	ldr	r3, [pc, #100]	@ (80039ec <FocusTask+0xa0>)
 8003988:	7a5a      	ldrb	r2, [r3, #9]
 800398a:	4b19      	ldr	r3, [pc, #100]	@ (80039f0 <FocusTask+0xa4>)
 800398c:	701a      	strb	r2, [r3, #0]

		        char msg[128];
		        sprintf(msg,"%02x,%02x,%02x,%02x,pos:%f",rxdata_focus[6],rxdata_focus[7],rxdata_focus[8],rxdata_focus[9],getFocusPos.f);
 800398e:	4b17      	ldr	r3, [pc, #92]	@ (80039ec <FocusTask+0xa0>)
 8003990:	799b      	ldrb	r3, [r3, #6]
 8003992:	461c      	mov	r4, r3
 8003994:	4b15      	ldr	r3, [pc, #84]	@ (80039ec <FocusTask+0xa0>)
 8003996:	79db      	ldrb	r3, [r3, #7]
 8003998:	461d      	mov	r5, r3
 800399a:	4b14      	ldr	r3, [pc, #80]	@ (80039ec <FocusTask+0xa0>)
 800399c:	7a1b      	ldrb	r3, [r3, #8]
 800399e:	461a      	mov	r2, r3
 80039a0:	4b12      	ldr	r3, [pc, #72]	@ (80039ec <FocusTask+0xa0>)
 80039a2:	7a5b      	ldrb	r3, [r3, #9]
 80039a4:	4619      	mov	r1, r3
 80039a6:	4b12      	ldr	r3, [pc, #72]	@ (80039f0 <FocusTask+0xa4>)
 80039a8:	edd3 7a00 	vldr	s15, [r3]
 80039ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039b0:	f107 0008 	add.w	r0, r7, #8
 80039b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80039b8:	9101      	str	r1, [sp, #4]
 80039ba:	9200      	str	r2, [sp, #0]
 80039bc:	462b      	mov	r3, r5
 80039be:	4622      	mov	r2, r4
 80039c0:	490c      	ldr	r1, [pc, #48]	@ (80039f4 <FocusTask+0xa8>)
 80039c2:	f021 fda1 	bl	8025508 <siprintf>
		        // HAL_UART_Transmit(&huart5, (uint8_t *)msg, strlen(msg), 0xff);
				uart_printf("%s",msg);
 80039c6:	f107 0308 	add.w	r3, r7, #8
 80039ca:	4619      	mov	r1, r3
 80039cc:	480a      	ldr	r0, [pc, #40]	@ (80039f8 <FocusTask+0xac>)
 80039ce:	f001 fad5 	bl	8004f7c <uart_printf>
		        memset(rxdata_focus,0,sizeof(rxdata_focus));
 80039d2:	220b      	movs	r2, #11
 80039d4:	2100      	movs	r1, #0
 80039d6:	4805      	ldr	r0, [pc, #20]	@ (80039ec <FocusTask+0xa0>)
 80039d8:	f021 fe70 	bl	80256bc <memset>
	  }

    osDelay(100);
 80039dc:	2064      	movs	r0, #100	@ 0x64
 80039de:	f00e fee1 	bl	80127a4 <osDelay>
	  if(osSemaphoreWait(BinaryFocusHandle, 10) == osOK && taskFocusBegin == pdTRUE)
 80039e2:	e7b7      	b.n	8003954 <FocusTask+0x8>
 80039e4:	240005a4 	.word	0x240005a4
 80039e8:	24000578 	.word	0x24000578
 80039ec:	30004f04 	.word	0x30004f04
 80039f0:	24000400 	.word	0x24000400
 80039f4:	08029590 	.word	0x08029590
 80039f8:	080295ac 	.word	0x080295ac
 80039fc:	00000000 	.word	0x00000000

08003a00 <RangefinderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RangefinderTask */
void RangefinderTask(void const * argument)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RangefinderTask */
	// TODO:掉电�???????要重新设�???????
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(BinaryRangefinderHandle, 10) == osOK && taskRangeBegin == pdTRUE)
 8003a08:	4b79      	ldr	r3, [pc, #484]	@ (8003bf0 <RangefinderTask+0x1f0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	210a      	movs	r1, #10
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f00e ffaa 	bl	8012968 <osSemaphoreWait>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f040 80df 	bne.w	8003bda <RangefinderTask+0x1da>
 8003a1c:	4b75      	ldr	r3, [pc, #468]	@ (8003bf4 <RangefinderTask+0x1f4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	f040 80da 	bne.w	8003bda <RangefinderTask+0x1da>
		// for(int i = 0;i < rxSize;i++)
	  	// {
		// 	uart_printf("%02x ",rxdata_rangefinder[i]);
		// }

		  switch (rxdata_rangefinder[4])
 8003a26:	4b74      	ldr	r3, [pc, #464]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003a28:	791b      	ldrb	r3, [r3, #4]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	f200 80ba 	bhi.w	8003ba6 <RangefinderTask+0x1a6>
 8003a32:	a201      	add	r2, pc, #4	@ (adr r2, 8003a38 <RangefinderTask+0x38>)
 8003a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a38:	08003a51 	.word	0x08003a51
 8003a3c:	08003acb 	.word	0x08003acb
 8003a40:	08003ba7 	.word	0x08003ba7
 8003a44:	08003b03 	.word	0x08003b03
 8003a48:	08003ba7 	.word	0x08003ba7
 8003a4c:	08003b43 	.word	0x08003b43
		        {
		          case DeviceCheck:{
		            RangeFinderRevData.HuiBoValue = rxdata_rangefinder[6];
 8003a50:	4b69      	ldr	r3, [pc, #420]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003a52:	799a      	ldrb	r2, [r3, #6]
 8003a54:	4b69      	ldr	r3, [pc, #420]	@ (8003bfc <RangefinderTask+0x1fc>)
 8003a56:	701a      	strb	r2, [r3, #0]
		            RangeFinderRevData.FPGAState  = rxdata_rangefinder[7] & bit(0) ? 1 : 0;
 8003a58:	4b67      	ldr	r3, [pc, #412]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003a5a:	79db      	ldrb	r3, [r3, #7]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	4b66      	ldr	r3, [pc, #408]	@ (8003bfc <RangefinderTask+0x1fc>)
 8003a64:	705a      	strb	r2, [r3, #1]
		            RangeFinderRevData.RayState   = rxdata_rangefinder[7] & bit(1) ? 1 : 0;
 8003a66:	4b64      	ldr	r3, [pc, #400]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003a68:	79db      	ldrb	r3, [r3, #7]
 8003a6a:	105b      	asrs	r3, r3, #1
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	4b61      	ldr	r3, [pc, #388]	@ (8003bfc <RangefinderTask+0x1fc>)
 8003a76:	709a      	strb	r2, [r3, #2]
		            RangeFinderRevData.ZhuBoState = rxdata_rangefinder[7] & bit(2) ? 1 : 0;
 8003a78:	4b5f      	ldr	r3, [pc, #380]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003a7a:	79db      	ldrb	r3, [r3, #7]
 8003a7c:	109b      	asrs	r3, r3, #2
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	4b5d      	ldr	r3, [pc, #372]	@ (8003bfc <RangefinderTask+0x1fc>)
 8003a88:	70da      	strb	r2, [r3, #3]
		            RangeFinderRevData.HuiBoState = rxdata_rangefinder[7] & bit(3) ? 1 : 0;
 8003a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003a8c:	79db      	ldrb	r3, [r3, #7]
 8003a8e:	10db      	asrs	r3, r3, #3
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	4b58      	ldr	r3, [pc, #352]	@ (8003bfc <RangefinderTask+0x1fc>)
 8003a9a:	711a      	strb	r2, [r3, #4]
		            RangeFinderRevData.TempState  = rxdata_rangefinder[7] & bit(6) ? 1 : 0;
 8003a9c:	4b56      	ldr	r3, [pc, #344]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003a9e:	79db      	ldrb	r3, [r3, #7]
 8003aa0:	119b      	asrs	r3, r3, #6
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	4b54      	ldr	r3, [pc, #336]	@ (8003bfc <RangefinderTask+0x1fc>)
 8003aac:	715a      	strb	r2, [r3, #5]
		            RangeFinderRevData.RayOn      = rxdata_rangefinder[7] & bit(7) ? 1 : 0;
 8003aae:	4b52      	ldr	r3, [pc, #328]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003ab0:	79db      	ldrb	r3, [r3, #7]
 8003ab2:	09db      	lsrs	r3, r3, #7
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	4b51      	ldr	r3, [pc, #324]	@ (8003bfc <RangefinderTask+0x1fc>)
 8003ab8:	719a      	strb	r2, [r3, #6]
		            RangeFinderRevData.PowerState = rxdata_rangefinder[8] & bit(0) ? 1 : 0;
 8003aba:	4b4f      	ldr	r3, [pc, #316]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003abc:	7a1b      	ldrb	r3, [r3, #8]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	4b4d      	ldr	r3, [pc, #308]	@ (8003bfc <RangefinderTask+0x1fc>)
 8003ac6:	71da      	strb	r2, [r3, #7]
		          }break;
 8003ac8:	e06e      	b.n	8003ba8 <RangefinderTask+0x1a8>
		          case SingleMeasure:{
		            RangeFinderRevData.Distance   = rxdata_rangefinder[6] * 256 + rxdata_rangefinder[7] + rxdata_rangefinder[8] * 0.1;
 8003aca:	4b4b      	ldr	r3, [pc, #300]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003acc:	799b      	ldrb	r3, [r3, #6]
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	4a49      	ldr	r2, [pc, #292]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003ad2:	79d2      	ldrb	r2, [r2, #7]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003ade:	4b46      	ldr	r3, [pc, #280]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003ae0:	7a1b      	ldrb	r3, [r3, #8]
 8003ae2:	ee07 3a90 	vmov	s15, r3
 8003ae6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003aea:	ed9f 5b3f 	vldr	d5, [pc, #252]	@ 8003be8 <RangefinderTask+0x1e8>
 8003aee:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003af2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003af6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003afa:	4b40      	ldr	r3, [pc, #256]	@ (8003bfc <RangefinderTask+0x1fc>)
 8003afc:	edc3 7a02 	vstr	s15, [r3, #8]

		          }break;
 8003b00:	e052      	b.n	8003ba8 <RangefinderTask+0x1a8>
		          case MultiMeasure:{
		            RangeFinderRevData.Distance   = rxdata_rangefinder[6] * 256 + rxdata_rangefinder[7] + rxdata_rangefinder[8] * 0.1;
 8003b02:	4b3d      	ldr	r3, [pc, #244]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003b04:	799b      	ldrb	r3, [r3, #6]
 8003b06:	021b      	lsls	r3, r3, #8
 8003b08:	4a3b      	ldr	r2, [pc, #236]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003b0a:	79d2      	ldrb	r2, [r2, #7]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	ee07 3a90 	vmov	s15, r3
 8003b12:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003b16:	4b38      	ldr	r3, [pc, #224]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003b18:	7a1b      	ldrb	r3, [r3, #8]
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003b22:	ed9f 5b31 	vldr	d5, [pc, #196]	@ 8003be8 <RangefinderTask+0x1e8>
 8003b26:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003b2a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b32:	4b32      	ldr	r3, [pc, #200]	@ (8003bfc <RangefinderTask+0x1fc>)
 8003b34:	edc3 7a02 	vstr	s15, [r3, #8]
					pcSend.rangefinder.f = RangeFinderRevData.Distance;
 8003b38:	4b30      	ldr	r3, [pc, #192]	@ (8003bfc <RangefinderTask+0x1fc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	4a30      	ldr	r2, [pc, #192]	@ (8003c00 <RangefinderTask+0x200>)
 8003b3e:	6113      	str	r3, [r2, #16]
				}break;
 8003b40:	e032      	b.n	8003ba8 <RangefinderTask+0x1a8>
		          case DeviceError:{
		            RangeFinderRevData.FPGAState  = rxdata_rangefinder[8] & bit(0) ? 1 : 0;
 8003b42:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003b44:	7a1b      	ldrb	r3, [r3, #8]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bfc <RangefinderTask+0x1fc>)
 8003b4e:	705a      	strb	r2, [r3, #1]
		            RangeFinderRevData.RayState   = rxdata_rangefinder[8] & bit(1) ? 1 : 0;
 8003b50:	4b29      	ldr	r3, [pc, #164]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003b52:	7a1b      	ldrb	r3, [r3, #8]
 8003b54:	105b      	asrs	r3, r3, #1
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	4b27      	ldr	r3, [pc, #156]	@ (8003bfc <RangefinderTask+0x1fc>)
 8003b60:	709a      	strb	r2, [r3, #2]
		            RangeFinderRevData.ZhuBoState = rxdata_rangefinder[8] & bit(2) ? 1 : 0;
 8003b62:	4b25      	ldr	r3, [pc, #148]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003b64:	7a1b      	ldrb	r3, [r3, #8]
 8003b66:	109b      	asrs	r3, r3, #2
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	4b22      	ldr	r3, [pc, #136]	@ (8003bfc <RangefinderTask+0x1fc>)
 8003b72:	70da      	strb	r2, [r3, #3]
		            RangeFinderRevData.HuiBoState = rxdata_rangefinder[8] & bit(3) ? 1 : 0;
 8003b74:	4b20      	ldr	r3, [pc, #128]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003b76:	7a1b      	ldrb	r3, [r3, #8]
 8003b78:	10db      	asrs	r3, r3, #3
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	4b1e      	ldr	r3, [pc, #120]	@ (8003bfc <RangefinderTask+0x1fc>)
 8003b84:	711a      	strb	r2, [r3, #4]
		            RangeFinderRevData.TempState  = rxdata_rangefinder[8] & bit(6) ? 1 : 0;
 8003b86:	4b1c      	ldr	r3, [pc, #112]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003b88:	7a1b      	ldrb	r3, [r3, #8]
 8003b8a:	119b      	asrs	r3, r3, #6
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	4b19      	ldr	r3, [pc, #100]	@ (8003bfc <RangefinderTask+0x1fc>)
 8003b96:	715a      	strb	r2, [r3, #5]
		            RangeFinderRevData.RayOn      = rxdata_rangefinder[8] & bit(7) ? 1 : 0;
 8003b98:	4b17      	ldr	r3, [pc, #92]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003b9a:	7a1b      	ldrb	r3, [r3, #8]
 8003b9c:	09db      	lsrs	r3, r3, #7
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	4b16      	ldr	r3, [pc, #88]	@ (8003bfc <RangefinderTask+0x1fc>)
 8003ba2:	719a      	strb	r2, [r3, #6]
		          }break;
 8003ba4:	e000      	b.n	8003ba8 <RangefinderTask+0x1a8>
		          default:
		            break;
 8003ba6:	bf00      	nop
		        }
				// uart_printf("distance:%.2f\r\n",RangeFinderRevData.Distance);
				uart_printf("%x,%x,%x,%.2f\n",rxdata_rangefinder[6],rxdata_rangefinder[7],rxdata_rangefinder[8],RangeFinderRevData.Distance);
 8003ba8:	4b13      	ldr	r3, [pc, #76]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003baa:	799b      	ldrb	r3, [r3, #6]
 8003bac:	4619      	mov	r1, r3
 8003bae:	4b12      	ldr	r3, [pc, #72]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003bb0:	79db      	ldrb	r3, [r3, #7]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	4b10      	ldr	r3, [pc, #64]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003bb6:	7a1b      	ldrb	r3, [r3, #8]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	4b10      	ldr	r3, [pc, #64]	@ (8003bfc <RangefinderTask+0x1fc>)
 8003bbc:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bc4:	ed8d 7b00 	vstr	d7, [sp]
 8003bc8:	4603      	mov	r3, r0
 8003bca:	480e      	ldr	r0, [pc, #56]	@ (8003c04 <RangefinderTask+0x204>)
 8003bcc:	f001 f9d6 	bl	8004f7c <uart_printf>
		//   char msg[128];
		//         sprintf(msg,"distance = %.2f\r\n",RangeFinderRevData.Distance);
		//         HAL_UART_Transmit_DMA(&huart5, (uint8_t*)msg, strlen(msg));
		        memset(rxdata_rangefinder,0,sizeof(rxdata_rangefinder));
 8003bd0:	2280      	movs	r2, #128	@ 0x80
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4808      	ldr	r0, [pc, #32]	@ (8003bf8 <RangefinderTask+0x1f8>)
 8003bd6:	f021 fd71 	bl	80256bc <memset>
	  }
    osDelay(10);
 8003bda:	200a      	movs	r0, #10
 8003bdc:	f00e fde2 	bl	80127a4 <osDelay>
	  if(osSemaphoreWait(BinaryRangefinderHandle, 10) == osOK && taskRangeBegin == pdTRUE)
 8003be0:	e712      	b.n	8003a08 <RangefinderTask+0x8>
 8003be2:	bf00      	nop
 8003be4:	f3af 8000 	nop.w
 8003be8:	9999999a 	.word	0x9999999a
 8003bec:	3fb99999 	.word	0x3fb99999
 8003bf0:	240005a8 	.word	0x240005a8
 8003bf4:	2400057c 	.word	0x2400057c
 8003bf8:	30004f1c 	.word	0x30004f1c
 8003bfc:	24000440 	.word	0x24000440
 8003c00:	2400051c 	.word	0x2400051c
 8003c04:	080295b0 	.word	0x080295b0

08003c08 <HAL_UARTEx_RxEventCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c08:	b590      	push	{r4, r7, lr}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  UNUSED(Size);
  rxSize = Size;
 8003c14:	887b      	ldrh	r3, [r7, #2]
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	4b4c      	ldr	r3, [pc, #304]	@ (8003d4c <HAL_UARTEx_RxEventCallback+0x144>)
 8003c1a:	701a      	strb	r2, [r3, #0]
//   static float fPm1, fPm2, fPm3;
// 	static int iPm1, iPm2, iPm3;
  if(huart == &huart5)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a4c      	ldr	r2, [pc, #304]	@ (8003d50 <HAL_UARTEx_RxEventCallback+0x148>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	f040 80c3 	bne.w	8003dac <HAL_UARTEx_RxEventCallback+0x1a4>
  {
	  taskTurnBegin = pdTRUE;
 8003c26:	4b4b      	ldr	r3, [pc, #300]	@ (8003d54 <HAL_UARTEx_RxEventCallback+0x14c>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
	  if(rxbuff_servo[0] == 0xEB && rxbuff_servo[1] == 0x90 && rxbuff_servo[Size - 1] == 0xFE)
 8003c2c:	4b4a      	ldr	r3, [pc, #296]	@ (8003d58 <HAL_UARTEx_RxEventCallback+0x150>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2beb      	cmp	r3, #235	@ 0xeb
 8003c32:	d122      	bne.n	8003c7a <HAL_UARTEx_RxEventCallback+0x72>
 8003c34:	4b48      	ldr	r3, [pc, #288]	@ (8003d58 <HAL_UARTEx_RxEventCallback+0x150>)
 8003c36:	785b      	ldrb	r3, [r3, #1]
 8003c38:	2b90      	cmp	r3, #144	@ 0x90
 8003c3a:	d11e      	bne.n	8003c7a <HAL_UARTEx_RxEventCallback+0x72>
 8003c3c:	887b      	ldrh	r3, [r7, #2]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	4a45      	ldr	r2, [pc, #276]	@ (8003d58 <HAL_UARTEx_RxEventCallback+0x150>)
 8003c42:	5cd3      	ldrb	r3, [r2, r3]
 8003c44:	2bfe      	cmp	r3, #254	@ 0xfe
 8003c46:	d118      	bne.n	8003c7a <HAL_UARTEx_RxEventCallback+0x72>
	  {
		  if(osSemaphoreRelease(BinaryServoHandle) == osOK)
 8003c48:	4b44      	ldr	r3, [pc, #272]	@ (8003d5c <HAL_UARTEx_RxEventCallback+0x154>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f00e fed9 	bl	8012a04 <osSemaphoreRelease>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d110      	bne.n	8003c7a <HAL_UARTEx_RxEventCallback+0x72>
		  {
			  memcpy(rxdata_servo,rxbuff_servo,Size);
 8003c58:	887b      	ldrh	r3, [r7, #2]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	493e      	ldr	r1, [pc, #248]	@ (8003d58 <HAL_UARTEx_RxEventCallback+0x150>)
 8003c5e:	4840      	ldr	r0, [pc, #256]	@ (8003d60 <HAL_UARTEx_RxEventCallback+0x158>)
 8003c60:	f021 fdcd 	bl	80257fe <memcpy>
			  memset(rxbuff_servo,0,Size);
 8003c64:	887b      	ldrh	r3, [r7, #2]
 8003c66:	461a      	mov	r2, r3
 8003c68:	2100      	movs	r1, #0
 8003c6a:	483b      	ldr	r0, [pc, #236]	@ (8003d58 <HAL_UARTEx_RxEventCallback+0x150>)
 8003c6c:	f021 fd26 	bl	80256bc <memset>
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003c70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c74:	483b      	ldr	r0, [pc, #236]	@ (8003d64 <HAL_UARTEx_RxEventCallback+0x15c>)
 8003c76:	f007 feca 	bl	800ba0e <HAL_GPIO_TogglePin>
		  }
	  }
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxbuff_servo, 128);
 8003c7a:	2280      	movs	r2, #128	@ 0x80
 8003c7c:	4936      	ldr	r1, [pc, #216]	@ (8003d58 <HAL_UARTEx_RxEventCallback+0x150>)
 8003c7e:	4834      	ldr	r0, [pc, #208]	@ (8003d50 <HAL_UARTEx_RxEventCallback+0x148>)
 8003c80:	f00d fdf7 	bl	8011872 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_uart5_rx, DMA_IT_HT);
 8003c84:	4b38      	ldr	r3, [pc, #224]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a38      	ldr	r2, [pc, #224]	@ (8003d6c <HAL_UARTEx_RxEventCallback+0x164>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d04a      	beq.n	8003d24 <HAL_UARTEx_RxEventCallback+0x11c>
 8003c8e:	4b36      	ldr	r3, [pc, #216]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a37      	ldr	r2, [pc, #220]	@ (8003d70 <HAL_UARTEx_RxEventCallback+0x168>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d045      	beq.n	8003d24 <HAL_UARTEx_RxEventCallback+0x11c>
 8003c98:	4b33      	ldr	r3, [pc, #204]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a35      	ldr	r2, [pc, #212]	@ (8003d74 <HAL_UARTEx_RxEventCallback+0x16c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d040      	beq.n	8003d24 <HAL_UARTEx_RxEventCallback+0x11c>
 8003ca2:	4b31      	ldr	r3, [pc, #196]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a34      	ldr	r2, [pc, #208]	@ (8003d78 <HAL_UARTEx_RxEventCallback+0x170>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d03b      	beq.n	8003d24 <HAL_UARTEx_RxEventCallback+0x11c>
 8003cac:	4b2e      	ldr	r3, [pc, #184]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a32      	ldr	r2, [pc, #200]	@ (8003d7c <HAL_UARTEx_RxEventCallback+0x174>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d036      	beq.n	8003d24 <HAL_UARTEx_RxEventCallback+0x11c>
 8003cb6:	4b2c      	ldr	r3, [pc, #176]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a31      	ldr	r2, [pc, #196]	@ (8003d80 <HAL_UARTEx_RxEventCallback+0x178>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d031      	beq.n	8003d24 <HAL_UARTEx_RxEventCallback+0x11c>
 8003cc0:	4b29      	ldr	r3, [pc, #164]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a2f      	ldr	r2, [pc, #188]	@ (8003d84 <HAL_UARTEx_RxEventCallback+0x17c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d02c      	beq.n	8003d24 <HAL_UARTEx_RxEventCallback+0x11c>
 8003cca:	4b27      	ldr	r3, [pc, #156]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2e      	ldr	r2, [pc, #184]	@ (8003d88 <HAL_UARTEx_RxEventCallback+0x180>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d027      	beq.n	8003d24 <HAL_UARTEx_RxEventCallback+0x11c>
 8003cd4:	4b24      	ldr	r3, [pc, #144]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a2c      	ldr	r2, [pc, #176]	@ (8003d8c <HAL_UARTEx_RxEventCallback+0x184>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d022      	beq.n	8003d24 <HAL_UARTEx_RxEventCallback+0x11c>
 8003cde:	4b22      	ldr	r3, [pc, #136]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a2b      	ldr	r2, [pc, #172]	@ (8003d90 <HAL_UARTEx_RxEventCallback+0x188>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d01d      	beq.n	8003d24 <HAL_UARTEx_RxEventCallback+0x11c>
 8003ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a29      	ldr	r2, [pc, #164]	@ (8003d94 <HAL_UARTEx_RxEventCallback+0x18c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d018      	beq.n	8003d24 <HAL_UARTEx_RxEventCallback+0x11c>
 8003cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a28      	ldr	r2, [pc, #160]	@ (8003d98 <HAL_UARTEx_RxEventCallback+0x190>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d013      	beq.n	8003d24 <HAL_UARTEx_RxEventCallback+0x11c>
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a26      	ldr	r2, [pc, #152]	@ (8003d9c <HAL_UARTEx_RxEventCallback+0x194>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00e      	beq.n	8003d24 <HAL_UARTEx_RxEventCallback+0x11c>
 8003d06:	4b18      	ldr	r3, [pc, #96]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a25      	ldr	r2, [pc, #148]	@ (8003da0 <HAL_UARTEx_RxEventCallback+0x198>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d009      	beq.n	8003d24 <HAL_UARTEx_RxEventCallback+0x11c>
 8003d10:	4b15      	ldr	r3, [pc, #84]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a23      	ldr	r2, [pc, #140]	@ (8003da4 <HAL_UARTEx_RxEventCallback+0x19c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d004      	beq.n	8003d24 <HAL_UARTEx_RxEventCallback+0x11c>
 8003d1a:	4b13      	ldr	r3, [pc, #76]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a22      	ldr	r2, [pc, #136]	@ (8003da8 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d109      	bne.n	8003d38 <HAL_UARTEx_RxEventCallback+0x130>
 8003d24:	4b10      	ldr	r3, [pc, #64]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0208 	bic.w	r2, r2, #8
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	f000 bcf2 	b.w	800471c <HAL_UARTEx_RxEventCallback+0xb14>
 8003d38:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d68 <HAL_UARTEx_RxEventCallback+0x160>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0204 	bic.w	r2, r2, #4
 8003d46:	601a      	str	r2, [r3, #0]
// 	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
//  }
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d48:	f000 bce8 	b.w	800471c <HAL_UARTEx_RxEventCallback+0xb14>
 8003d4c:	24000568 	.word	0x24000568
 8003d50:	240008fc 	.word	0x240008fc
 8003d54:	2400056c 	.word	0x2400056c
 8003d58:	30004b84 	.word	0x30004b84
 8003d5c:	24000598 	.word	0x24000598
 8003d60:	30004b04 	.word	0x30004b04
 8003d64:	58022000 	.word	0x58022000
 8003d68:	24000d64 	.word	0x24000d64
 8003d6c:	40020010 	.word	0x40020010
 8003d70:	40020028 	.word	0x40020028
 8003d74:	40020040 	.word	0x40020040
 8003d78:	40020058 	.word	0x40020058
 8003d7c:	40020070 	.word	0x40020070
 8003d80:	40020088 	.word	0x40020088
 8003d84:	400200a0 	.word	0x400200a0
 8003d88:	400200b8 	.word	0x400200b8
 8003d8c:	40020410 	.word	0x40020410
 8003d90:	40020428 	.word	0x40020428
 8003d94:	40020440 	.word	0x40020440
 8003d98:	40020458 	.word	0x40020458
 8003d9c:	40020470 	.word	0x40020470
 8003da0:	40020488 	.word	0x40020488
 8003da4:	400204a0 	.word	0x400204a0
 8003da8:	400204b8 	.word	0x400204b8
  }else if(huart == &huart3){
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a4b      	ldr	r2, [pc, #300]	@ (8003edc <HAL_UARTEx_RxEventCallback+0x2d4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	f040 80c1 	bne.w	8003f38 <HAL_UARTEx_RxEventCallback+0x330>
	  taskCuBegin = pdTRUE;
 8003db6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ee0 <HAL_UARTEx_RxEventCallback+0x2d8>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
	  if(rxbuff_cu[0] == 0xCC && rxbuff_cu[1] == 0xC0 && rxbuff_cu[Size - 1] == 0xBB)
 8003dbc:	4b49      	ldr	r3, [pc, #292]	@ (8003ee4 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2bcc      	cmp	r3, #204	@ 0xcc
 8003dc2:	d122      	bne.n	8003e0a <HAL_UARTEx_RxEventCallback+0x202>
 8003dc4:	4b47      	ldr	r3, [pc, #284]	@ (8003ee4 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8003dc6:	785b      	ldrb	r3, [r3, #1]
 8003dc8:	2bc0      	cmp	r3, #192	@ 0xc0
 8003dca:	d11e      	bne.n	8003e0a <HAL_UARTEx_RxEventCallback+0x202>
 8003dcc:	887b      	ldrh	r3, [r7, #2]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	4a44      	ldr	r2, [pc, #272]	@ (8003ee4 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8003dd2:	5cd3      	ldrb	r3, [r2, r3]
 8003dd4:	2bbb      	cmp	r3, #187	@ 0xbb
 8003dd6:	d118      	bne.n	8003e0a <HAL_UARTEx_RxEventCallback+0x202>
		  if(osSemaphoreRelease(BinaryCuHandle) == osOK)
 8003dd8:	4b43      	ldr	r3, [pc, #268]	@ (8003ee8 <HAL_UARTEx_RxEventCallback+0x2e0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f00e fe11 	bl	8012a04 <osSemaphoreRelease>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d110      	bne.n	8003e0a <HAL_UARTEx_RxEventCallback+0x202>
			  memcpy(rxdata_cu,rxbuff_cu,Size);
 8003de8:	887b      	ldrh	r3, [r7, #2]
 8003dea:	461a      	mov	r2, r3
 8003dec:	493d      	ldr	r1, [pc, #244]	@ (8003ee4 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8003dee:	483f      	ldr	r0, [pc, #252]	@ (8003eec <HAL_UARTEx_RxEventCallback+0x2e4>)
 8003df0:	f021 fd05 	bl	80257fe <memcpy>
			  memset(rxbuff_cu,0,Size);
 8003df4:	887b      	ldrh	r3, [r7, #2]
 8003df6:	461a      	mov	r2, r3
 8003df8:	2100      	movs	r1, #0
 8003dfa:	483a      	ldr	r0, [pc, #232]	@ (8003ee4 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8003dfc:	f021 fc5e 	bl	80256bc <memset>
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003e00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e04:	483a      	ldr	r0, [pc, #232]	@ (8003ef0 <HAL_UARTEx_RxEventCallback+0x2e8>)
 8003e06:	f007 fe02 	bl	800ba0e <HAL_GPIO_TogglePin>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxbuff_cu, 128);
 8003e0a:	2280      	movs	r2, #128	@ 0x80
 8003e0c:	4935      	ldr	r1, [pc, #212]	@ (8003ee4 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8003e0e:	4833      	ldr	r0, [pc, #204]	@ (8003edc <HAL_UARTEx_RxEventCallback+0x2d4>)
 8003e10:	f00d fd2f 	bl	8011872 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8003e14:	4b37      	ldr	r3, [pc, #220]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a37      	ldr	r2, [pc, #220]	@ (8003ef8 <HAL_UARTEx_RxEventCallback+0x2f0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d04a      	beq.n	8003eb4 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e1e:	4b35      	ldr	r3, [pc, #212]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a36      	ldr	r2, [pc, #216]	@ (8003efc <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d045      	beq.n	8003eb4 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e28:	4b32      	ldr	r3, [pc, #200]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a34      	ldr	r2, [pc, #208]	@ (8003f00 <HAL_UARTEx_RxEventCallback+0x2f8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d040      	beq.n	8003eb4 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e32:	4b30      	ldr	r3, [pc, #192]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a33      	ldr	r2, [pc, #204]	@ (8003f04 <HAL_UARTEx_RxEventCallback+0x2fc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d03b      	beq.n	8003eb4 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a31      	ldr	r2, [pc, #196]	@ (8003f08 <HAL_UARTEx_RxEventCallback+0x300>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d036      	beq.n	8003eb4 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e46:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a30      	ldr	r2, [pc, #192]	@ (8003f0c <HAL_UARTEx_RxEventCallback+0x304>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d031      	beq.n	8003eb4 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e50:	4b28      	ldr	r3, [pc, #160]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a2e      	ldr	r2, [pc, #184]	@ (8003f10 <HAL_UARTEx_RxEventCallback+0x308>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d02c      	beq.n	8003eb4 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e5a:	4b26      	ldr	r3, [pc, #152]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003f14 <HAL_UARTEx_RxEventCallback+0x30c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d027      	beq.n	8003eb4 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e64:	4b23      	ldr	r3, [pc, #140]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a2b      	ldr	r2, [pc, #172]	@ (8003f18 <HAL_UARTEx_RxEventCallback+0x310>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d022      	beq.n	8003eb4 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e6e:	4b21      	ldr	r3, [pc, #132]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a2a      	ldr	r2, [pc, #168]	@ (8003f1c <HAL_UARTEx_RxEventCallback+0x314>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d01d      	beq.n	8003eb4 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e78:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a28      	ldr	r2, [pc, #160]	@ (8003f20 <HAL_UARTEx_RxEventCallback+0x318>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d018      	beq.n	8003eb4 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e82:	4b1c      	ldr	r3, [pc, #112]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a27      	ldr	r2, [pc, #156]	@ (8003f24 <HAL_UARTEx_RxEventCallback+0x31c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e8c:	4b19      	ldr	r3, [pc, #100]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a25      	ldr	r2, [pc, #148]	@ (8003f28 <HAL_UARTEx_RxEventCallback+0x320>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00e      	beq.n	8003eb4 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e96:	4b17      	ldr	r3, [pc, #92]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a24      	ldr	r2, [pc, #144]	@ (8003f2c <HAL_UARTEx_RxEventCallback+0x324>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d009      	beq.n	8003eb4 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003ea0:	4b14      	ldr	r3, [pc, #80]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a22      	ldr	r2, [pc, #136]	@ (8003f30 <HAL_UARTEx_RxEventCallback+0x328>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d004      	beq.n	8003eb4 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003eaa:	4b12      	ldr	r3, [pc, #72]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a21      	ldr	r2, [pc, #132]	@ (8003f34 <HAL_UARTEx_RxEventCallback+0x32c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d109      	bne.n	8003ec8 <HAL_UARTEx_RxEventCallback+0x2c0>
 8003eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0208 	bic.w	r2, r2, #8
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	f000 bc2a 	b.w	800471c <HAL_UARTEx_RxEventCallback+0xb14>
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4b09      	ldr	r3, [pc, #36]	@ (8003ef4 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0204 	bic.w	r2, r2, #4
 8003ed6:	601a      	str	r2, [r3, #0]
}
 8003ed8:	f000 bc20 	b.w	800471c <HAL_UARTEx_RxEventCallback+0xb14>
 8003edc:	24000b4c 	.word	0x24000b4c
 8003ee0:	24000570 	.word	0x24000570
 8003ee4:	30004d84 	.word	0x30004d84
 8003ee8:	2400059c 	.word	0x2400059c
 8003eec:	30004d04 	.word	0x30004d04
 8003ef0:	58022000 	.word	0x58022000
 8003ef4:	24001034 	.word	0x24001034
 8003ef8:	40020010 	.word	0x40020010
 8003efc:	40020028 	.word	0x40020028
 8003f00:	40020040 	.word	0x40020040
 8003f04:	40020058 	.word	0x40020058
 8003f08:	40020070 	.word	0x40020070
 8003f0c:	40020088 	.word	0x40020088
 8003f10:	400200a0 	.word	0x400200a0
 8003f14:	400200b8 	.word	0x400200b8
 8003f18:	40020410 	.word	0x40020410
 8003f1c:	40020428 	.word	0x40020428
 8003f20:	40020440 	.word	0x40020440
 8003f24:	40020458 	.word	0x40020458
 8003f28:	40020470 	.word	0x40020470
 8003f2c:	40020488 	.word	0x40020488
 8003f30:	400204a0 	.word	0x400204a0
 8003f34:	400204b8 	.word	0x400204b8
  }else if(huart == &huart4){
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a4a      	ldr	r2, [pc, #296]	@ (8004064 <HAL_UARTEx_RxEventCallback+0x45c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	f040 80bf 	bne.w	80040c0 <HAL_UARTEx_RxEventCallback+0x4b8>
	  taskJingBegin = pdTRUE;
 8003f42:	4b49      	ldr	r3, [pc, #292]	@ (8004068 <HAL_UARTEx_RxEventCallback+0x460>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
	  if(rxbuff_jing[0] == 0xCC && rxbuff_jing[1] == 0xC0 && rxbuff_jing[Size - 1] == 0xBB)
 8003f48:	4b48      	ldr	r3, [pc, #288]	@ (800406c <HAL_UARTEx_RxEventCallback+0x464>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2bcc      	cmp	r3, #204	@ 0xcc
 8003f4e:	d122      	bne.n	8003f96 <HAL_UARTEx_RxEventCallback+0x38e>
 8003f50:	4b46      	ldr	r3, [pc, #280]	@ (800406c <HAL_UARTEx_RxEventCallback+0x464>)
 8003f52:	785b      	ldrb	r3, [r3, #1]
 8003f54:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f56:	d11e      	bne.n	8003f96 <HAL_UARTEx_RxEventCallback+0x38e>
 8003f58:	887b      	ldrh	r3, [r7, #2]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	4a43      	ldr	r2, [pc, #268]	@ (800406c <HAL_UARTEx_RxEventCallback+0x464>)
 8003f5e:	5cd3      	ldrb	r3, [r2, r3]
 8003f60:	2bbb      	cmp	r3, #187	@ 0xbb
 8003f62:	d118      	bne.n	8003f96 <HAL_UARTEx_RxEventCallback+0x38e>
	  		  if(osSemaphoreRelease(BinaryJingHandle) == osOK)
 8003f64:	4b42      	ldr	r3, [pc, #264]	@ (8004070 <HAL_UARTEx_RxEventCallback+0x468>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f00e fd4b 	bl	8012a04 <osSemaphoreRelease>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d110      	bne.n	8003f96 <HAL_UARTEx_RxEventCallback+0x38e>
	  			  memcpy(rxdata_jing,rxbuff_jing,Size);
 8003f74:	887b      	ldrh	r3, [r7, #2]
 8003f76:	461a      	mov	r2, r3
 8003f78:	493c      	ldr	r1, [pc, #240]	@ (800406c <HAL_UARTEx_RxEventCallback+0x464>)
 8003f7a:	483e      	ldr	r0, [pc, #248]	@ (8004074 <HAL_UARTEx_RxEventCallback+0x46c>)
 8003f7c:	f021 fc3f 	bl	80257fe <memcpy>
	  			  memset(rxbuff_jing,0,Size);
 8003f80:	887b      	ldrh	r3, [r7, #2]
 8003f82:	461a      	mov	r2, r3
 8003f84:	2100      	movs	r1, #0
 8003f86:	4839      	ldr	r0, [pc, #228]	@ (800406c <HAL_UARTEx_RxEventCallback+0x464>)
 8003f88:	f021 fb98 	bl	80256bc <memset>
	  			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003f8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f90:	4839      	ldr	r0, [pc, #228]	@ (8004078 <HAL_UARTEx_RxEventCallback+0x470>)
 8003f92:	f007 fd3c 	bl	800ba0e <HAL_GPIO_TogglePin>
	  	  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rxbuff_jing, 128);
 8003f96:	2280      	movs	r2, #128	@ 0x80
 8003f98:	4934      	ldr	r1, [pc, #208]	@ (800406c <HAL_UARTEx_RxEventCallback+0x464>)
 8003f9a:	4832      	ldr	r0, [pc, #200]	@ (8004064 <HAL_UARTEx_RxEventCallback+0x45c>)
 8003f9c:	f00d fc69 	bl	8011872 <HAL_UARTEx_ReceiveToIdle_DMA>
	  	  __HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 8003fa0:	4b36      	ldr	r3, [pc, #216]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a36      	ldr	r2, [pc, #216]	@ (8004080 <HAL_UARTEx_RxEventCallback+0x478>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d04a      	beq.n	8004040 <HAL_UARTEx_RxEventCallback+0x438>
 8003faa:	4b34      	ldr	r3, [pc, #208]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a35      	ldr	r2, [pc, #212]	@ (8004084 <HAL_UARTEx_RxEventCallback+0x47c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d045      	beq.n	8004040 <HAL_UARTEx_RxEventCallback+0x438>
 8003fb4:	4b31      	ldr	r3, [pc, #196]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a33      	ldr	r2, [pc, #204]	@ (8004088 <HAL_UARTEx_RxEventCallback+0x480>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d040      	beq.n	8004040 <HAL_UARTEx_RxEventCallback+0x438>
 8003fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a32      	ldr	r2, [pc, #200]	@ (800408c <HAL_UARTEx_RxEventCallback+0x484>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d03b      	beq.n	8004040 <HAL_UARTEx_RxEventCallback+0x438>
 8003fc8:	4b2c      	ldr	r3, [pc, #176]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a30      	ldr	r2, [pc, #192]	@ (8004090 <HAL_UARTEx_RxEventCallback+0x488>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d036      	beq.n	8004040 <HAL_UARTEx_RxEventCallback+0x438>
 8003fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a2f      	ldr	r2, [pc, #188]	@ (8004094 <HAL_UARTEx_RxEventCallback+0x48c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d031      	beq.n	8004040 <HAL_UARTEx_RxEventCallback+0x438>
 8003fdc:	4b27      	ldr	r3, [pc, #156]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8004098 <HAL_UARTEx_RxEventCallback+0x490>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d02c      	beq.n	8004040 <HAL_UARTEx_RxEventCallback+0x438>
 8003fe6:	4b25      	ldr	r3, [pc, #148]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a2c      	ldr	r2, [pc, #176]	@ (800409c <HAL_UARTEx_RxEventCallback+0x494>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d027      	beq.n	8004040 <HAL_UARTEx_RxEventCallback+0x438>
 8003ff0:	4b22      	ldr	r3, [pc, #136]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a2a      	ldr	r2, [pc, #168]	@ (80040a0 <HAL_UARTEx_RxEventCallback+0x498>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d022      	beq.n	8004040 <HAL_UARTEx_RxEventCallback+0x438>
 8003ffa:	4b20      	ldr	r3, [pc, #128]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a29      	ldr	r2, [pc, #164]	@ (80040a4 <HAL_UARTEx_RxEventCallback+0x49c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d01d      	beq.n	8004040 <HAL_UARTEx_RxEventCallback+0x438>
 8004004:	4b1d      	ldr	r3, [pc, #116]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a27      	ldr	r2, [pc, #156]	@ (80040a8 <HAL_UARTEx_RxEventCallback+0x4a0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d018      	beq.n	8004040 <HAL_UARTEx_RxEventCallback+0x438>
 800400e:	4b1b      	ldr	r3, [pc, #108]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a26      	ldr	r2, [pc, #152]	@ (80040ac <HAL_UARTEx_RxEventCallback+0x4a4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d013      	beq.n	8004040 <HAL_UARTEx_RxEventCallback+0x438>
 8004018:	4b18      	ldr	r3, [pc, #96]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a24      	ldr	r2, [pc, #144]	@ (80040b0 <HAL_UARTEx_RxEventCallback+0x4a8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00e      	beq.n	8004040 <HAL_UARTEx_RxEventCallback+0x438>
 8004022:	4b16      	ldr	r3, [pc, #88]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a23      	ldr	r2, [pc, #140]	@ (80040b4 <HAL_UARTEx_RxEventCallback+0x4ac>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d009      	beq.n	8004040 <HAL_UARTEx_RxEventCallback+0x438>
 800402c:	4b13      	ldr	r3, [pc, #76]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a21      	ldr	r2, [pc, #132]	@ (80040b8 <HAL_UARTEx_RxEventCallback+0x4b0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <HAL_UARTEx_RxEventCallback+0x438>
 8004036:	4b11      	ldr	r3, [pc, #68]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a20      	ldr	r2, [pc, #128]	@ (80040bc <HAL_UARTEx_RxEventCallback+0x4b4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d108      	bne.n	8004052 <HAL_UARTEx_RxEventCallback+0x44a>
 8004040:	4b0e      	ldr	r3, [pc, #56]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	4b0d      	ldr	r3, [pc, #52]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0208 	bic.w	r2, r2, #8
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e364      	b.n	800471c <HAL_UARTEx_RxEventCallback+0xb14>
 8004052:	4b0a      	ldr	r3, [pc, #40]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4b08      	ldr	r3, [pc, #32]	@ (800407c <HAL_UARTEx_RxEventCallback+0x474>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0204 	bic.w	r2, r2, #4
 8004060:	601a      	str	r2, [r3, #0]
}
 8004062:	e35b      	b.n	800471c <HAL_UARTEx_RxEventCallback+0xb14>
 8004064:	24000868 	.word	0x24000868
 8004068:	24000574 	.word	0x24000574
 800406c:	30004e84 	.word	0x30004e84
 8004070:	240005a0 	.word	0x240005a0
 8004074:	30004e04 	.word	0x30004e04
 8004078:	58022000 	.word	0x58022000
 800407c:	24000c74 	.word	0x24000c74
 8004080:	40020010 	.word	0x40020010
 8004084:	40020028 	.word	0x40020028
 8004088:	40020040 	.word	0x40020040
 800408c:	40020058 	.word	0x40020058
 8004090:	40020070 	.word	0x40020070
 8004094:	40020088 	.word	0x40020088
 8004098:	400200a0 	.word	0x400200a0
 800409c:	400200b8 	.word	0x400200b8
 80040a0:	40020410 	.word	0x40020410
 80040a4:	40020428 	.word	0x40020428
 80040a8:	40020440 	.word	0x40020440
 80040ac:	40020458 	.word	0x40020458
 80040b0:	40020470 	.word	0x40020470
 80040b4:	40020488 	.word	0x40020488
 80040b8:	400204a0 	.word	0x400204a0
 80040bc:	400204b8 	.word	0x400204b8
  }else if(huart == &huart6){
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a52      	ldr	r2, [pc, #328]	@ (800420c <HAL_UARTEx_RxEventCallback+0x604>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	f040 80d3 	bne.w	8004270 <HAL_UARTEx_RxEventCallback+0x668>
	  taskFocusBegin = pdTRUE;
 80040ca:	4b51      	ldr	r3, [pc, #324]	@ (8004210 <HAL_UARTEx_RxEventCallback+0x608>)
 80040cc:	2201      	movs	r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
	  if(rxbuff_focus[0] == 0xaa && rxbuff_focus[1] == 0x01 && rxbuff_focus[Size - 1] == checkData(rxbuff_focus, Size - 1))
 80040d0:	4b50      	ldr	r3, [pc, #320]	@ (8004214 <HAL_UARTEx_RxEventCallback+0x60c>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2baa      	cmp	r3, #170	@ 0xaa
 80040d6:	d131      	bne.n	800413c <HAL_UARTEx_RxEventCallback+0x534>
 80040d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004214 <HAL_UARTEx_RxEventCallback+0x60c>)
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d12d      	bne.n	800413c <HAL_UARTEx_RxEventCallback+0x534>
 80040e0:	887b      	ldrh	r3, [r7, #2]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004214 <HAL_UARTEx_RxEventCallback+0x60c>)
 80040e6:	5cd4      	ldrb	r4, [r2, r3]
 80040e8:	887b      	ldrh	r3, [r7, #2]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	4619      	mov	r1, r3
 80040f2:	4848      	ldr	r0, [pc, #288]	@ (8004214 <HAL_UARTEx_RxEventCallback+0x60c>)
 80040f4:	f7fc fcb8 	bl	8000a68 <checkData>
 80040f8:	4603      	mov	r3, r0
 80040fa:	429c      	cmp	r4, r3
 80040fc:	d11e      	bne.n	800413c <HAL_UARTEx_RxEventCallback+0x534>
		uart_printf("enter focus\r\n");
 80040fe:	4846      	ldr	r0, [pc, #280]	@ (8004218 <HAL_UARTEx_RxEventCallback+0x610>)
 8004100:	f000 ff3c 	bl	8004f7c <uart_printf>
		  if(osSemaphoreRelease(BinaryFocusHandle) == osOK)
 8004104:	4b45      	ldr	r3, [pc, #276]	@ (800421c <HAL_UARTEx_RxEventCallback+0x614>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f00e fc7b 	bl	8012a04 <osSemaphoreRelease>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d113      	bne.n	800413c <HAL_UARTEx_RxEventCallback+0x534>
			uart_printf("enter\r\n");
 8004114:	4842      	ldr	r0, [pc, #264]	@ (8004220 <HAL_UARTEx_RxEventCallback+0x618>)
 8004116:	f000 ff31 	bl	8004f7c <uart_printf>
			  memcpy(rxdata_focus,rxbuff_focus,Size);
 800411a:	887b      	ldrh	r3, [r7, #2]
 800411c:	461a      	mov	r2, r3
 800411e:	493d      	ldr	r1, [pc, #244]	@ (8004214 <HAL_UARTEx_RxEventCallback+0x60c>)
 8004120:	4840      	ldr	r0, [pc, #256]	@ (8004224 <HAL_UARTEx_RxEventCallback+0x61c>)
 8004122:	f021 fb6c 	bl	80257fe <memcpy>
			  memset(rxbuff_focus,0,Size);
 8004126:	887b      	ldrh	r3, [r7, #2]
 8004128:	461a      	mov	r2, r3
 800412a:	2100      	movs	r1, #0
 800412c:	4839      	ldr	r0, [pc, #228]	@ (8004214 <HAL_UARTEx_RxEventCallback+0x60c>)
 800412e:	f021 fac5 	bl	80256bc <memset>
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8004132:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004136:	483c      	ldr	r0, [pc, #240]	@ (8004228 <HAL_UARTEx_RxEventCallback+0x620>)
 8004138:	f007 fc69 	bl	800ba0e <HAL_GPIO_TogglePin>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rxbuff_focus, 11);
 800413c:	220b      	movs	r2, #11
 800413e:	4935      	ldr	r1, [pc, #212]	@ (8004214 <HAL_UARTEx_RxEventCallback+0x60c>)
 8004140:	4832      	ldr	r0, [pc, #200]	@ (800420c <HAL_UARTEx_RxEventCallback+0x604>)
 8004142:	f00d fb96 	bl	8011872 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8004146:	4b39      	ldr	r3, [pc, #228]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a39      	ldr	r2, [pc, #228]	@ (8004230 <HAL_UARTEx_RxEventCallback+0x628>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d04a      	beq.n	80041e6 <HAL_UARTEx_RxEventCallback+0x5de>
 8004150:	4b36      	ldr	r3, [pc, #216]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a37      	ldr	r2, [pc, #220]	@ (8004234 <HAL_UARTEx_RxEventCallback+0x62c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d045      	beq.n	80041e6 <HAL_UARTEx_RxEventCallback+0x5de>
 800415a:	4b34      	ldr	r3, [pc, #208]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a36      	ldr	r2, [pc, #216]	@ (8004238 <HAL_UARTEx_RxEventCallback+0x630>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d040      	beq.n	80041e6 <HAL_UARTEx_RxEventCallback+0x5de>
 8004164:	4b31      	ldr	r3, [pc, #196]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a34      	ldr	r2, [pc, #208]	@ (800423c <HAL_UARTEx_RxEventCallback+0x634>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d03b      	beq.n	80041e6 <HAL_UARTEx_RxEventCallback+0x5de>
 800416e:	4b2f      	ldr	r3, [pc, #188]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a33      	ldr	r2, [pc, #204]	@ (8004240 <HAL_UARTEx_RxEventCallback+0x638>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d036      	beq.n	80041e6 <HAL_UARTEx_RxEventCallback+0x5de>
 8004178:	4b2c      	ldr	r3, [pc, #176]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a31      	ldr	r2, [pc, #196]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x63c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d031      	beq.n	80041e6 <HAL_UARTEx_RxEventCallback+0x5de>
 8004182:	4b2a      	ldr	r3, [pc, #168]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a30      	ldr	r2, [pc, #192]	@ (8004248 <HAL_UARTEx_RxEventCallback+0x640>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d02c      	beq.n	80041e6 <HAL_UARTEx_RxEventCallback+0x5de>
 800418c:	4b27      	ldr	r3, [pc, #156]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a2e      	ldr	r2, [pc, #184]	@ (800424c <HAL_UARTEx_RxEventCallback+0x644>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d027      	beq.n	80041e6 <HAL_UARTEx_RxEventCallback+0x5de>
 8004196:	4b25      	ldr	r3, [pc, #148]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a2d      	ldr	r2, [pc, #180]	@ (8004250 <HAL_UARTEx_RxEventCallback+0x648>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d022      	beq.n	80041e6 <HAL_UARTEx_RxEventCallback+0x5de>
 80041a0:	4b22      	ldr	r3, [pc, #136]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004254 <HAL_UARTEx_RxEventCallback+0x64c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d01d      	beq.n	80041e6 <HAL_UARTEx_RxEventCallback+0x5de>
 80041aa:	4b20      	ldr	r3, [pc, #128]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004258 <HAL_UARTEx_RxEventCallback+0x650>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d018      	beq.n	80041e6 <HAL_UARTEx_RxEventCallback+0x5de>
 80041b4:	4b1d      	ldr	r3, [pc, #116]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a28      	ldr	r2, [pc, #160]	@ (800425c <HAL_UARTEx_RxEventCallback+0x654>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <HAL_UARTEx_RxEventCallback+0x5de>
 80041be:	4b1b      	ldr	r3, [pc, #108]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a27      	ldr	r2, [pc, #156]	@ (8004260 <HAL_UARTEx_RxEventCallback+0x658>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00e      	beq.n	80041e6 <HAL_UARTEx_RxEventCallback+0x5de>
 80041c8:	4b18      	ldr	r3, [pc, #96]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a25      	ldr	r2, [pc, #148]	@ (8004264 <HAL_UARTEx_RxEventCallback+0x65c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d009      	beq.n	80041e6 <HAL_UARTEx_RxEventCallback+0x5de>
 80041d2:	4b16      	ldr	r3, [pc, #88]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a24      	ldr	r2, [pc, #144]	@ (8004268 <HAL_UARTEx_RxEventCallback+0x660>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d004      	beq.n	80041e6 <HAL_UARTEx_RxEventCallback+0x5de>
 80041dc:	4b13      	ldr	r3, [pc, #76]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a22      	ldr	r2, [pc, #136]	@ (800426c <HAL_UARTEx_RxEventCallback+0x664>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d108      	bne.n	80041f8 <HAL_UARTEx_RxEventCallback+0x5f0>
 80041e6:	4b11      	ldr	r3, [pc, #68]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b0f      	ldr	r3, [pc, #60]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0208 	bic.w	r2, r2, #8
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	e291      	b.n	800471c <HAL_UARTEx_RxEventCallback+0xb14>
 80041f8:	4b0c      	ldr	r3, [pc, #48]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4b0b      	ldr	r3, [pc, #44]	@ (800422c <HAL_UARTEx_RxEventCallback+0x624>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0204 	bic.w	r2, r2, #4
 8004206:	601a      	str	r2, [r3, #0]
}
 8004208:	e288      	b.n	800471c <HAL_UARTEx_RxEventCallback+0xb14>
 800420a:	bf00      	nop
 800420c:	24000be0 	.word	0x24000be0
 8004210:	24000578 	.word	0x24000578
 8004214:	30004f10 	.word	0x30004f10
 8004218:	080295c0 	.word	0x080295c0
 800421c:	240005a4 	.word	0x240005a4
 8004220:	080295d0 	.word	0x080295d0
 8004224:	30004f04 	.word	0x30004f04
 8004228:	58022000 	.word	0x58022000
 800422c:	24001124 	.word	0x24001124
 8004230:	40020010 	.word	0x40020010
 8004234:	40020028 	.word	0x40020028
 8004238:	40020040 	.word	0x40020040
 800423c:	40020058 	.word	0x40020058
 8004240:	40020070 	.word	0x40020070
 8004244:	40020088 	.word	0x40020088
 8004248:	400200a0 	.word	0x400200a0
 800424c:	400200b8 	.word	0x400200b8
 8004250:	40020410 	.word	0x40020410
 8004254:	40020428 	.word	0x40020428
 8004258:	40020440 	.word	0x40020440
 800425c:	40020458 	.word	0x40020458
 8004260:	40020470 	.word	0x40020470
 8004264:	40020488 	.word	0x40020488
 8004268:	400204a0 	.word	0x400204a0
 800426c:	400204b8 	.word	0x400204b8
  }else if(huart == &huart7){
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a9e      	ldr	r2, [pc, #632]	@ (80044ec <HAL_UARTEx_RxEventCallback+0x8e4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	f040 8099 	bne.w	80043ac <HAL_UARTEx_RxEventCallback+0x7a4>
	  taskRangeBegin = pdTRUE;
 800427a:	4b9d      	ldr	r3, [pc, #628]	@ (80044f0 <HAL_UARTEx_RxEventCallback+0x8e8>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]
	  if(rxbuff_rangefinder[0] == 0xee && rxbuff_rangefinder[1] == 0x16 && rxbuff_rangefinder[Size - 1] == CheckSumRangefinder(rxbuff_rangefinder + 3, rxbuff_rangefinder[2]))
 8004280:	4b9c      	ldr	r3, [pc, #624]	@ (80044f4 <HAL_UARTEx_RxEventCallback+0x8ec>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2bee      	cmp	r3, #238	@ 0xee
 8004286:	d12a      	bne.n	80042de <HAL_UARTEx_RxEventCallback+0x6d6>
 8004288:	4b9a      	ldr	r3, [pc, #616]	@ (80044f4 <HAL_UARTEx_RxEventCallback+0x8ec>)
 800428a:	785b      	ldrb	r3, [r3, #1]
 800428c:	2b16      	cmp	r3, #22
 800428e:	d126      	bne.n	80042de <HAL_UARTEx_RxEventCallback+0x6d6>
 8004290:	887b      	ldrh	r3, [r7, #2]
 8004292:	3b01      	subs	r3, #1
 8004294:	4a97      	ldr	r2, [pc, #604]	@ (80044f4 <HAL_UARTEx_RxEventCallback+0x8ec>)
 8004296:	5cd4      	ldrb	r4, [r2, r3]
 8004298:	4a97      	ldr	r2, [pc, #604]	@ (80044f8 <HAL_UARTEx_RxEventCallback+0x8f0>)
 800429a:	4b96      	ldr	r3, [pc, #600]	@ (80044f4 <HAL_UARTEx_RxEventCallback+0x8ec>)
 800429c:	789b      	ldrb	r3, [r3, #2]
 800429e:	4619      	mov	r1, r3
 80042a0:	4610      	mov	r0, r2
 80042a2:	f7fc fee7 	bl	8001074 <CheckSumRangefinder>
 80042a6:	4603      	mov	r3, r0
 80042a8:	429c      	cmp	r4, r3
 80042aa:	d118      	bne.n	80042de <HAL_UARTEx_RxEventCallback+0x6d6>
		  if(osSemaphoreRelease(BinaryRangefinderHandle) == osOK)
 80042ac:	4b93      	ldr	r3, [pc, #588]	@ (80044fc <HAL_UARTEx_RxEventCallback+0x8f4>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f00e fba7 	bl	8012a04 <osSemaphoreRelease>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d110      	bne.n	80042de <HAL_UARTEx_RxEventCallback+0x6d6>
			  memcpy(rxdata_rangefinder,rxbuff_rangefinder,Size);
 80042bc:	887b      	ldrh	r3, [r7, #2]
 80042be:	461a      	mov	r2, r3
 80042c0:	498c      	ldr	r1, [pc, #560]	@ (80044f4 <HAL_UARTEx_RxEventCallback+0x8ec>)
 80042c2:	488f      	ldr	r0, [pc, #572]	@ (8004500 <HAL_UARTEx_RxEventCallback+0x8f8>)
 80042c4:	f021 fa9b 	bl	80257fe <memcpy>
			  memset(rxbuff_rangefinder,0,Size);
 80042c8:	887b      	ldrh	r3, [r7, #2]
 80042ca:	461a      	mov	r2, r3
 80042cc:	2100      	movs	r1, #0
 80042ce:	4889      	ldr	r0, [pc, #548]	@ (80044f4 <HAL_UARTEx_RxEventCallback+0x8ec>)
 80042d0:	f021 f9f4 	bl	80256bc <memset>
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80042d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042d8:	488a      	ldr	r0, [pc, #552]	@ (8004504 <HAL_UARTEx_RxEventCallback+0x8fc>)
 80042da:	f007 fb98 	bl	800ba0e <HAL_GPIO_TogglePin>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart7, rxbuff_rangefinder, 128);
 80042de:	2280      	movs	r2, #128	@ 0x80
 80042e0:	4984      	ldr	r1, [pc, #528]	@ (80044f4 <HAL_UARTEx_RxEventCallback+0x8ec>)
 80042e2:	4882      	ldr	r0, [pc, #520]	@ (80044ec <HAL_UARTEx_RxEventCallback+0x8e4>)
 80042e4:	f00d fac5 	bl	8011872 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 80042e8:	4b87      	ldr	r3, [pc, #540]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a87      	ldr	r2, [pc, #540]	@ (800450c <HAL_UARTEx_RxEventCallback+0x904>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d04a      	beq.n	8004388 <HAL_UARTEx_RxEventCallback+0x780>
 80042f2:	4b85      	ldr	r3, [pc, #532]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a86      	ldr	r2, [pc, #536]	@ (8004510 <HAL_UARTEx_RxEventCallback+0x908>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d045      	beq.n	8004388 <HAL_UARTEx_RxEventCallback+0x780>
 80042fc:	4b82      	ldr	r3, [pc, #520]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a84      	ldr	r2, [pc, #528]	@ (8004514 <HAL_UARTEx_RxEventCallback+0x90c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d040      	beq.n	8004388 <HAL_UARTEx_RxEventCallback+0x780>
 8004306:	4b80      	ldr	r3, [pc, #512]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a83      	ldr	r2, [pc, #524]	@ (8004518 <HAL_UARTEx_RxEventCallback+0x910>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d03b      	beq.n	8004388 <HAL_UARTEx_RxEventCallback+0x780>
 8004310:	4b7d      	ldr	r3, [pc, #500]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a81      	ldr	r2, [pc, #516]	@ (800451c <HAL_UARTEx_RxEventCallback+0x914>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d036      	beq.n	8004388 <HAL_UARTEx_RxEventCallback+0x780>
 800431a:	4b7b      	ldr	r3, [pc, #492]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a80      	ldr	r2, [pc, #512]	@ (8004520 <HAL_UARTEx_RxEventCallback+0x918>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d031      	beq.n	8004388 <HAL_UARTEx_RxEventCallback+0x780>
 8004324:	4b78      	ldr	r3, [pc, #480]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a7e      	ldr	r2, [pc, #504]	@ (8004524 <HAL_UARTEx_RxEventCallback+0x91c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d02c      	beq.n	8004388 <HAL_UARTEx_RxEventCallback+0x780>
 800432e:	4b76      	ldr	r3, [pc, #472]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a7d      	ldr	r2, [pc, #500]	@ (8004528 <HAL_UARTEx_RxEventCallback+0x920>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d027      	beq.n	8004388 <HAL_UARTEx_RxEventCallback+0x780>
 8004338:	4b73      	ldr	r3, [pc, #460]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a7b      	ldr	r2, [pc, #492]	@ (800452c <HAL_UARTEx_RxEventCallback+0x924>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d022      	beq.n	8004388 <HAL_UARTEx_RxEventCallback+0x780>
 8004342:	4b71      	ldr	r3, [pc, #452]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a7a      	ldr	r2, [pc, #488]	@ (8004530 <HAL_UARTEx_RxEventCallback+0x928>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d01d      	beq.n	8004388 <HAL_UARTEx_RxEventCallback+0x780>
 800434c:	4b6e      	ldr	r3, [pc, #440]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a78      	ldr	r2, [pc, #480]	@ (8004534 <HAL_UARTEx_RxEventCallback+0x92c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d018      	beq.n	8004388 <HAL_UARTEx_RxEventCallback+0x780>
 8004356:	4b6c      	ldr	r3, [pc, #432]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a77      	ldr	r2, [pc, #476]	@ (8004538 <HAL_UARTEx_RxEventCallback+0x930>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d013      	beq.n	8004388 <HAL_UARTEx_RxEventCallback+0x780>
 8004360:	4b69      	ldr	r3, [pc, #420]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a75      	ldr	r2, [pc, #468]	@ (800453c <HAL_UARTEx_RxEventCallback+0x934>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00e      	beq.n	8004388 <HAL_UARTEx_RxEventCallback+0x780>
 800436a:	4b67      	ldr	r3, [pc, #412]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a74      	ldr	r2, [pc, #464]	@ (8004540 <HAL_UARTEx_RxEventCallback+0x938>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d009      	beq.n	8004388 <HAL_UARTEx_RxEventCallback+0x780>
 8004374:	4b64      	ldr	r3, [pc, #400]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a72      	ldr	r2, [pc, #456]	@ (8004544 <HAL_UARTEx_RxEventCallback+0x93c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d004      	beq.n	8004388 <HAL_UARTEx_RxEventCallback+0x780>
 800437e:	4b62      	ldr	r3, [pc, #392]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a71      	ldr	r2, [pc, #452]	@ (8004548 <HAL_UARTEx_RxEventCallback+0x940>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d108      	bne.n	800439a <HAL_UARTEx_RxEventCallback+0x792>
 8004388:	4b5f      	ldr	r3, [pc, #380]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4b5e      	ldr	r3, [pc, #376]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0208 	bic.w	r2, r2, #8
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e1c0      	b.n	800471c <HAL_UARTEx_RxEventCallback+0xb14>
 800439a:	4b5b      	ldr	r3, [pc, #364]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4b59      	ldr	r3, [pc, #356]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x900>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0204 	bic.w	r2, r2, #4
 80043a8:	601a      	str	r2, [r3, #0]
}
 80043aa:	e1b7      	b.n	800471c <HAL_UARTEx_RxEventCallback+0xb14>
  else if(huart == &huart2)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a67      	ldr	r2, [pc, #412]	@ (800454c <HAL_UARTEx_RxEventCallback+0x944>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	f040 81b3 	bne.w	800471c <HAL_UARTEx_RxEventCallback+0xb14>
	switch(chcmd[0])
 80043b6:	4b66      	ldr	r3, [pc, #408]	@ (8004550 <HAL_UARTEx_RxEventCallback+0x948>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	3b43      	subs	r3, #67	@ 0x43
 80043bc:	2b13      	cmp	r3, #19
 80043be:	f200 813f 	bhi.w	8004640 <HAL_UARTEx_RxEventCallback+0xa38>
 80043c2:	a201      	add	r2, pc, #4	@ (adr r2, 80043c8 <HAL_UARTEx_RxEventCallback+0x7c0>)
 80043c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c8:	08004613 	.word	0x08004613
 80043cc:	08004641 	.word	0x08004641
 80043d0:	08004641 	.word	0x08004641
 80043d4:	08004623 	.word	0x08004623
 80043d8:	08004641 	.word	0x08004641
 80043dc:	08004641 	.word	0x08004641
 80043e0:	08004641 	.word	0x08004641
 80043e4:	08004641 	.word	0x08004641
 80043e8:	08004641 	.word	0x08004641
 80043ec:	08004641 	.word	0x08004641
 80043f0:	08004419 	.word	0x08004419
 80043f4:	08004641 	.word	0x08004641
 80043f8:	08004641 	.word	0x08004641
 80043fc:	08004439 	.word	0x08004439
 8004400:	08004641 	.word	0x08004641
 8004404:	08004641 	.word	0x08004641
 8004408:	0800445b 	.word	0x0800445b
 800440c:	08004641 	.word	0x08004641
 8004410:	08004641 	.word	0x08004641
 8004414:	080045c5 	.word	0x080045c5
			sscanf(chcmd + 1,"%x", &iPm1);
 8004418:	4b4e      	ldr	r3, [pc, #312]	@ (8004554 <HAL_UARTEx_RxEventCallback+0x94c>)
 800441a:	4a4f      	ldr	r2, [pc, #316]	@ (8004558 <HAL_UARTEx_RxEventCallback+0x950>)
 800441c:	494f      	ldr	r1, [pc, #316]	@ (800455c <HAL_UARTEx_RxEventCallback+0x954>)
 800441e:	4618      	mov	r0, r3
 8004420:	f021 f892 	bl	8025548 <siscanf>
			ServoDataSendTypedef.TurnMode = iPm1;
 8004424:	4b4c      	ldr	r3, [pc, #304]	@ (8004558 <HAL_UARTEx_RxEventCallback+0x950>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	b2da      	uxtb	r2, r3
 800442a:	4b4d      	ldr	r3, [pc, #308]	@ (8004560 <HAL_UARTEx_RxEventCallback+0x958>)
 800442c:	701a      	strb	r2, [r3, #0]
			ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 800442e:	494c      	ldr	r1, [pc, #304]	@ (8004560 <HAL_UARTEx_RxEventCallback+0x958>)
 8004430:	484c      	ldr	r0, [pc, #304]	@ (8004564 <HAL_UARTEx_RxEventCallback+0x95c>)
 8004432:	f7fd f887 	bl	8001544 <ServoDataSend>
		}break;
 8004436:	e104      	b.n	8004642 <HAL_UARTEx_RxEventCallback+0xa3a>
			sscanf(chcmd + 1,"%f,%f", &fPm1, &fPm2, &fPm3);
 8004438:	4846      	ldr	r0, [pc, #280]	@ (8004554 <HAL_UARTEx_RxEventCallback+0x94c>)
 800443a:	4b4b      	ldr	r3, [pc, #300]	@ (8004568 <HAL_UARTEx_RxEventCallback+0x960>)
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	4b4b      	ldr	r3, [pc, #300]	@ (800456c <HAL_UARTEx_RxEventCallback+0x964>)
 8004440:	4a4b      	ldr	r2, [pc, #300]	@ (8004570 <HAL_UARTEx_RxEventCallback+0x968>)
 8004442:	494c      	ldr	r1, [pc, #304]	@ (8004574 <HAL_UARTEx_RxEventCallback+0x96c>)
 8004444:	f021 f880 	bl	8025548 <siscanf>
			CommandTypedef.turnYaw.f = fPm1;
 8004448:	4b49      	ldr	r3, [pc, #292]	@ (8004570 <HAL_UARTEx_RxEventCallback+0x968>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a4a      	ldr	r2, [pc, #296]	@ (8004578 <HAL_UARTEx_RxEventCallback+0x970>)
 800444e:	6113      	str	r3, [r2, #16]
			CommandTypedef.turnPitch.f = fPm2;
 8004450:	4b46      	ldr	r3, [pc, #280]	@ (800456c <HAL_UARTEx_RxEventCallback+0x964>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a48      	ldr	r2, [pc, #288]	@ (8004578 <HAL_UARTEx_RxEventCallback+0x970>)
 8004456:	6153      	str	r3, [r2, #20]
		}break;
 8004458:	e0f3      	b.n	8004642 <HAL_UARTEx_RxEventCallback+0xa3a>
			sscanf(chcmd + 1,"%d", &iPm1);
 800445a:	4b3e      	ldr	r3, [pc, #248]	@ (8004554 <HAL_UARTEx_RxEventCallback+0x94c>)
 800445c:	4a3e      	ldr	r2, [pc, #248]	@ (8004558 <HAL_UARTEx_RxEventCallback+0x950>)
 800445e:	4947      	ldr	r1, [pc, #284]	@ (800457c <HAL_UARTEx_RxEventCallback+0x974>)
 8004460:	4618      	mov	r0, r3
 8004462:	f021 f871 	bl	8025548 <siscanf>
			switch(iPm1)
 8004466:	4b3c      	ldr	r3, [pc, #240]	@ (8004558 <HAL_UARTEx_RxEventCallback+0x950>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b04      	cmp	r3, #4
 800446c:	f200 80a8 	bhi.w	80045c0 <HAL_UARTEx_RxEventCallback+0x9b8>
 8004470:	a201      	add	r2, pc, #4	@ (adr r2, 8004478 <HAL_UARTEx_RxEventCallback+0x870>)
 8004472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004476:	bf00      	nop
 8004478:	0800448d 	.word	0x0800448d
 800447c:	080044ad 	.word	0x080044ad
 8004480:	080044cd 	.word	0x080044cd
 8004484:	08004581 	.word	0x08004581
 8004488:	080045a1 	.word	0x080045a1
					CommandTypedef.go2Zero = 0x01;
 800448c:	4b3a      	ldr	r3, [pc, #232]	@ (8004578 <HAL_UARTEx_RxEventCallback+0x970>)
 800448e:	2201      	movs	r2, #1
 8004490:	701a      	strb	r2, [r3, #0]
					CommandTypedef.standbyEnable = 0x00;
 8004492:	4b39      	ldr	r3, [pc, #228]	@ (8004578 <HAL_UARTEx_RxEventCallback+0x970>)
 8004494:	2200      	movs	r2, #0
 8004496:	705a      	strb	r2, [r3, #1]
					CommandTypedef.standbyDisable = 0x00;
 8004498:	4b37      	ldr	r3, [pc, #220]	@ (8004578 <HAL_UARTEx_RxEventCallback+0x970>)
 800449a:	2200      	movs	r2, #0
 800449c:	709a      	strb	r2, [r3, #2]
					CommandTypedef.guideEnable = 0x00;
 800449e:	4b36      	ldr	r3, [pc, #216]	@ (8004578 <HAL_UARTEx_RxEventCallback+0x970>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	711a      	strb	r2, [r3, #4]
					CommandTypedef.scanEnable = 0x00;
 80044a4:	4b34      	ldr	r3, [pc, #208]	@ (8004578 <HAL_UARTEx_RxEventCallback+0x970>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	70da      	strb	r2, [r3, #3]
				}break;
 80044aa:	e08a      	b.n	80045c2 <HAL_UARTEx_RxEventCallback+0x9ba>
					CommandTypedef.go2Zero = 0x00;
 80044ac:	4b32      	ldr	r3, [pc, #200]	@ (8004578 <HAL_UARTEx_RxEventCallback+0x970>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	701a      	strb	r2, [r3, #0]
					CommandTypedef.standbyEnable = 0x01;
 80044b2:	4b31      	ldr	r3, [pc, #196]	@ (8004578 <HAL_UARTEx_RxEventCallback+0x970>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	705a      	strb	r2, [r3, #1]
					CommandTypedef.standbyDisable = 0x00;
 80044b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004578 <HAL_UARTEx_RxEventCallback+0x970>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	709a      	strb	r2, [r3, #2]
					CommandTypedef.guideEnable = 0x00;
 80044be:	4b2e      	ldr	r3, [pc, #184]	@ (8004578 <HAL_UARTEx_RxEventCallback+0x970>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	711a      	strb	r2, [r3, #4]
					CommandTypedef.scanEnable = 0x00;
 80044c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004578 <HAL_UARTEx_RxEventCallback+0x970>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	70da      	strb	r2, [r3, #3]
				}break;
 80044ca:	e07a      	b.n	80045c2 <HAL_UARTEx_RxEventCallback+0x9ba>
					CommandTypedef.go2Zero = 0x00;
 80044cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004578 <HAL_UARTEx_RxEventCallback+0x970>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	701a      	strb	r2, [r3, #0]
					CommandTypedef.standbyEnable = 0x00;
 80044d2:	4b29      	ldr	r3, [pc, #164]	@ (8004578 <HAL_UARTEx_RxEventCallback+0x970>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	705a      	strb	r2, [r3, #1]
					CommandTypedef.standbyDisable = 0x01;
 80044d8:	4b27      	ldr	r3, [pc, #156]	@ (8004578 <HAL_UARTEx_RxEventCallback+0x970>)
 80044da:	2201      	movs	r2, #1
 80044dc:	709a      	strb	r2, [r3, #2]
					CommandTypedef.guideEnable = 0x00;
 80044de:	4b26      	ldr	r3, [pc, #152]	@ (8004578 <HAL_UARTEx_RxEventCallback+0x970>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	711a      	strb	r2, [r3, #4]
					CommandTypedef.scanEnable = 0x00;
 80044e4:	4b24      	ldr	r3, [pc, #144]	@ (8004578 <HAL_UARTEx_RxEventCallback+0x970>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	70da      	strb	r2, [r3, #3]
				}break;
 80044ea:	e06a      	b.n	80045c2 <HAL_UARTEx_RxEventCallback+0x9ba>
 80044ec:	24000990 	.word	0x24000990
 80044f0:	2400057c 	.word	0x2400057c
 80044f4:	30004f9c 	.word	0x30004f9c
 80044f8:	30004f9f 	.word	0x30004f9f
 80044fc:	240005a8 	.word	0x240005a8
 8004500:	30004f1c 	.word	0x30004f1c
 8004504:	58022000 	.word	0x58022000
 8004508:	24000e54 	.word	0x24000e54
 800450c:	40020010 	.word	0x40020010
 8004510:	40020028 	.word	0x40020028
 8004514:	40020040 	.word	0x40020040
 8004518:	40020058 	.word	0x40020058
 800451c:	40020070 	.word	0x40020070
 8004520:	40020088 	.word	0x40020088
 8004524:	400200a0 	.word	0x400200a0
 8004528:	400200b8 	.word	0x400200b8
 800452c:	40020410 	.word	0x40020410
 8004530:	40020428 	.word	0x40020428
 8004534:	40020440 	.word	0x40020440
 8004538:	40020458 	.word	0x40020458
 800453c:	40020470 	.word	0x40020470
 8004540:	40020488 	.word	0x40020488
 8004544:	400204a0 	.word	0x400204a0
 8004548:	400204b8 	.word	0x400204b8
 800454c:	24000ab8 	.word	0x24000ab8
 8004550:	3000501c 	.word	0x3000501c
 8004554:	3000501d 	.word	0x3000501d
 8004558:	24000804 	.word	0x24000804
 800455c:	080295d8 	.word	0x080295d8
 8004560:	24000154 	.word	0x24000154
 8004564:	2400011c 	.word	0x2400011c
 8004568:	24000810 	.word	0x24000810
 800456c:	2400080c 	.word	0x2400080c
 8004570:	24000808 	.word	0x24000808
 8004574:	080295dc 	.word	0x080295dc
 8004578:	24000184 	.word	0x24000184
 800457c:	080295e4 	.word	0x080295e4
					CommandTypedef.go2Zero = 0x00;
 8004580:	4b68      	ldr	r3, [pc, #416]	@ (8004724 <HAL_UARTEx_RxEventCallback+0xb1c>)
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]
					CommandTypedef.standbyEnable = 0x00;
 8004586:	4b67      	ldr	r3, [pc, #412]	@ (8004724 <HAL_UARTEx_RxEventCallback+0xb1c>)
 8004588:	2200      	movs	r2, #0
 800458a:	705a      	strb	r2, [r3, #1]
					CommandTypedef.standbyDisable = 0x00;
 800458c:	4b65      	ldr	r3, [pc, #404]	@ (8004724 <HAL_UARTEx_RxEventCallback+0xb1c>)
 800458e:	2200      	movs	r2, #0
 8004590:	709a      	strb	r2, [r3, #2]
					CommandTypedef.guideEnable = 0x01;
 8004592:	4b64      	ldr	r3, [pc, #400]	@ (8004724 <HAL_UARTEx_RxEventCallback+0xb1c>)
 8004594:	2201      	movs	r2, #1
 8004596:	711a      	strb	r2, [r3, #4]
					CommandTypedef.scanEnable = 0x00;
 8004598:	4b62      	ldr	r3, [pc, #392]	@ (8004724 <HAL_UARTEx_RxEventCallback+0xb1c>)
 800459a:	2200      	movs	r2, #0
 800459c:	70da      	strb	r2, [r3, #3]
				}break;
 800459e:	e010      	b.n	80045c2 <HAL_UARTEx_RxEventCallback+0x9ba>
					CommandTypedef.go2Zero = 0x00;
 80045a0:	4b60      	ldr	r3, [pc, #384]	@ (8004724 <HAL_UARTEx_RxEventCallback+0xb1c>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	701a      	strb	r2, [r3, #0]
					CommandTypedef.standbyEnable = 0x00;
 80045a6:	4b5f      	ldr	r3, [pc, #380]	@ (8004724 <HAL_UARTEx_RxEventCallback+0xb1c>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	705a      	strb	r2, [r3, #1]
					CommandTypedef.standbyDisable = 0x00;
 80045ac:	4b5d      	ldr	r3, [pc, #372]	@ (8004724 <HAL_UARTEx_RxEventCallback+0xb1c>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	709a      	strb	r2, [r3, #2]
					CommandTypedef.guideEnable = 0x00;
 80045b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004724 <HAL_UARTEx_RxEventCallback+0xb1c>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	711a      	strb	r2, [r3, #4]
					CommandTypedef.scanEnable = 0x01;
 80045b8:	4b5a      	ldr	r3, [pc, #360]	@ (8004724 <HAL_UARTEx_RxEventCallback+0xb1c>)
 80045ba:	2201      	movs	r2, #1
 80045bc:	70da      	strb	r2, [r3, #3]
				}break;
 80045be:	e000      	b.n	80045c2 <HAL_UARTEx_RxEventCallback+0x9ba>
					break;
 80045c0:	bf00      	nop
		}break;
 80045c2:	e03e      	b.n	8004642 <HAL_UARTEx_RxEventCallback+0xa3a>
			sscanf(chcmd + 1,"%d,%d", &iPm1, &iPm2);
 80045c4:	4858      	ldr	r0, [pc, #352]	@ (8004728 <HAL_UARTEx_RxEventCallback+0xb20>)
 80045c6:	4b59      	ldr	r3, [pc, #356]	@ (800472c <HAL_UARTEx_RxEventCallback+0xb24>)
 80045c8:	4a59      	ldr	r2, [pc, #356]	@ (8004730 <HAL_UARTEx_RxEventCallback+0xb28>)
 80045ca:	495a      	ldr	r1, [pc, #360]	@ (8004734 <HAL_UARTEx_RxEventCallback+0xb2c>)
 80045cc:	f020 ffbc 	bl	8025548 <siscanf>
			CommandTypedef.turnYawSpeed = iPm1 * 100;
 80045d0:	4b57      	ldr	r3, [pc, #348]	@ (8004730 <HAL_UARTEx_RxEventCallback+0xb28>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	461a      	mov	r2, r3
 80045d8:	0092      	lsls	r2, r2, #2
 80045da:	4413      	add	r3, r2
 80045dc:	461a      	mov	r2, r3
 80045de:	0091      	lsls	r1, r2, #2
 80045e0:	461a      	mov	r2, r3
 80045e2:	460b      	mov	r3, r1
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	b21a      	sxth	r2, r3
 80045ec:	4b4d      	ldr	r3, [pc, #308]	@ (8004724 <HAL_UARTEx_RxEventCallback+0xb1c>)
 80045ee:	861a      	strh	r2, [r3, #48]	@ 0x30
			CommandTypedef.turnPitchSpeed = iPm2 * 100;
 80045f0:	4b4e      	ldr	r3, [pc, #312]	@ (800472c <HAL_UARTEx_RxEventCallback+0xb24>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	461a      	mov	r2, r3
 80045f8:	0092      	lsls	r2, r2, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	461a      	mov	r2, r3
 80045fe:	0091      	lsls	r1, r2, #2
 8004600:	461a      	mov	r2, r3
 8004602:	460b      	mov	r3, r1
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	b29b      	uxth	r3, r3
 800460a:	b21a      	sxth	r2, r3
 800460c:	4b45      	ldr	r3, [pc, #276]	@ (8004724 <HAL_UARTEx_RxEventCallback+0xb1c>)
 800460e:	865a      	strh	r2, [r3, #50]	@ 0x32
		}break;
 8004610:	e017      	b.n	8004642 <HAL_UARTEx_RxEventCallback+0xa3a>
			ServoDataSendTypedef.TrackingFaultCleanCu = 0x66;
 8004612:	4b49      	ldr	r3, [pc, #292]	@ (8004738 <HAL_UARTEx_RxEventCallback+0xb30>)
 8004614:	2266      	movs	r2, #102	@ 0x66
 8004616:	741a      	strb	r2, [r3, #16]
			ServoDataSendTypedef.TrackingFaultCleanJing = 0x33;
 8004618:	4b47      	ldr	r3, [pc, #284]	@ (8004738 <HAL_UARTEx_RxEventCallback+0xb30>)
 800461a:	2233      	movs	r2, #51	@ 0x33
 800461c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		}break;
 8004620:	e00f      	b.n	8004642 <HAL_UARTEx_RxEventCallback+0xa3a>
			sscanf(chcmd + 1,"%f,%f", &fPm1, &fPm2);
 8004622:	4841      	ldr	r0, [pc, #260]	@ (8004728 <HAL_UARTEx_RxEventCallback+0xb20>)
 8004624:	4b45      	ldr	r3, [pc, #276]	@ (800473c <HAL_UARTEx_RxEventCallback+0xb34>)
 8004626:	4a46      	ldr	r2, [pc, #280]	@ (8004740 <HAL_UARTEx_RxEventCallback+0xb38>)
 8004628:	4946      	ldr	r1, [pc, #280]	@ (8004744 <HAL_UARTEx_RxEventCallback+0xb3c>)
 800462a:	f020 ff8d 	bl	8025548 <siscanf>
			CommandTypedef.FSM_Yaw.f = fPm1;
 800462e:	4b44      	ldr	r3, [pc, #272]	@ (8004740 <HAL_UARTEx_RxEventCallback+0xb38>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a3c      	ldr	r2, [pc, #240]	@ (8004724 <HAL_UARTEx_RxEventCallback+0xb1c>)
 8004634:	6193      	str	r3, [r2, #24]
			CommandTypedef.FSM_Pitch.f = fPm2;
 8004636:	4b41      	ldr	r3, [pc, #260]	@ (800473c <HAL_UARTEx_RxEventCallback+0xb34>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a3a      	ldr	r2, [pc, #232]	@ (8004724 <HAL_UARTEx_RxEventCallback+0xb1c>)
 800463c:	61d3      	str	r3, [r2, #28]
		}break;
 800463e:	e000      	b.n	8004642 <HAL_UARTEx_RxEventCallback+0xa3a>
		break;
 8004640:	bf00      	nop
	HAL_UART_Transmit(&huart2, chcmd, Size, 0xff);
 8004642:	887a      	ldrh	r2, [r7, #2]
 8004644:	23ff      	movs	r3, #255	@ 0xff
 8004646:	4940      	ldr	r1, [pc, #256]	@ (8004748 <HAL_UARTEx_RxEventCallback+0xb40>)
 8004648:	4840      	ldr	r0, [pc, #256]	@ (800474c <HAL_UARTEx_RxEventCallback+0xb44>)
 800464a:	f00a fba7 	bl	800ed9c <HAL_UART_Transmit>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)chcmd, 64);
 800464e:	2240      	movs	r2, #64	@ 0x40
 8004650:	493d      	ldr	r1, [pc, #244]	@ (8004748 <HAL_UARTEx_RxEventCallback+0xb40>)
 8004652:	483e      	ldr	r0, [pc, #248]	@ (800474c <HAL_UARTEx_RxEventCallback+0xb44>)
 8004654:	f00d f90d 	bl	8011872 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8004658:	4b3d      	ldr	r3, [pc, #244]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a3d      	ldr	r2, [pc, #244]	@ (8004754 <HAL_UARTEx_RxEventCallback+0xb4c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d04a      	beq.n	80046f8 <HAL_UARTEx_RxEventCallback+0xaf0>
 8004662:	4b3b      	ldr	r3, [pc, #236]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a3c      	ldr	r2, [pc, #240]	@ (8004758 <HAL_UARTEx_RxEventCallback+0xb50>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d045      	beq.n	80046f8 <HAL_UARTEx_RxEventCallback+0xaf0>
 800466c:	4b38      	ldr	r3, [pc, #224]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a3a      	ldr	r2, [pc, #232]	@ (800475c <HAL_UARTEx_RxEventCallback+0xb54>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d040      	beq.n	80046f8 <HAL_UARTEx_RxEventCallback+0xaf0>
 8004676:	4b36      	ldr	r3, [pc, #216]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a39      	ldr	r2, [pc, #228]	@ (8004760 <HAL_UARTEx_RxEventCallback+0xb58>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d03b      	beq.n	80046f8 <HAL_UARTEx_RxEventCallback+0xaf0>
 8004680:	4b33      	ldr	r3, [pc, #204]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a37      	ldr	r2, [pc, #220]	@ (8004764 <HAL_UARTEx_RxEventCallback+0xb5c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d036      	beq.n	80046f8 <HAL_UARTEx_RxEventCallback+0xaf0>
 800468a:	4b31      	ldr	r3, [pc, #196]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a36      	ldr	r2, [pc, #216]	@ (8004768 <HAL_UARTEx_RxEventCallback+0xb60>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d031      	beq.n	80046f8 <HAL_UARTEx_RxEventCallback+0xaf0>
 8004694:	4b2e      	ldr	r3, [pc, #184]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a34      	ldr	r2, [pc, #208]	@ (800476c <HAL_UARTEx_RxEventCallback+0xb64>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d02c      	beq.n	80046f8 <HAL_UARTEx_RxEventCallback+0xaf0>
 800469e:	4b2c      	ldr	r3, [pc, #176]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a33      	ldr	r2, [pc, #204]	@ (8004770 <HAL_UARTEx_RxEventCallback+0xb68>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d027      	beq.n	80046f8 <HAL_UARTEx_RxEventCallback+0xaf0>
 80046a8:	4b29      	ldr	r3, [pc, #164]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a31      	ldr	r2, [pc, #196]	@ (8004774 <HAL_UARTEx_RxEventCallback+0xb6c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d022      	beq.n	80046f8 <HAL_UARTEx_RxEventCallback+0xaf0>
 80046b2:	4b27      	ldr	r3, [pc, #156]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a30      	ldr	r2, [pc, #192]	@ (8004778 <HAL_UARTEx_RxEventCallback+0xb70>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d01d      	beq.n	80046f8 <HAL_UARTEx_RxEventCallback+0xaf0>
 80046bc:	4b24      	ldr	r3, [pc, #144]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a2e      	ldr	r2, [pc, #184]	@ (800477c <HAL_UARTEx_RxEventCallback+0xb74>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d018      	beq.n	80046f8 <HAL_UARTEx_RxEventCallback+0xaf0>
 80046c6:	4b22      	ldr	r3, [pc, #136]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a2d      	ldr	r2, [pc, #180]	@ (8004780 <HAL_UARTEx_RxEventCallback+0xb78>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d013      	beq.n	80046f8 <HAL_UARTEx_RxEventCallback+0xaf0>
 80046d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a2b      	ldr	r2, [pc, #172]	@ (8004784 <HAL_UARTEx_RxEventCallback+0xb7c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00e      	beq.n	80046f8 <HAL_UARTEx_RxEventCallback+0xaf0>
 80046da:	4b1d      	ldr	r3, [pc, #116]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a2a      	ldr	r2, [pc, #168]	@ (8004788 <HAL_UARTEx_RxEventCallback+0xb80>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_UARTEx_RxEventCallback+0xaf0>
 80046e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a28      	ldr	r2, [pc, #160]	@ (800478c <HAL_UARTEx_RxEventCallback+0xb84>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_UARTEx_RxEventCallback+0xaf0>
 80046ee:	4b18      	ldr	r3, [pc, #96]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a27      	ldr	r2, [pc, #156]	@ (8004790 <HAL_UARTEx_RxEventCallback+0xb88>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d108      	bne.n	800470a <HAL_UARTEx_RxEventCallback+0xb02>
 80046f8:	4b15      	ldr	r3, [pc, #84]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	4b14      	ldr	r3, [pc, #80]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0208 	bic.w	r2, r2, #8
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	e008      	b.n	800471c <HAL_UARTEx_RxEventCallback+0xb14>
 800470a:	4b11      	ldr	r3, [pc, #68]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4b0f      	ldr	r3, [pc, #60]	@ (8004750 <HAL_UARTEx_RxEventCallback+0xb48>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0204 	bic.w	r2, r2, #4
 8004718:	601a      	str	r2, [r3, #0]
}
 800471a:	e7ff      	b.n	800471c <HAL_UARTEx_RxEventCallback+0xb14>
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	bd90      	pop	{r4, r7, pc}
 8004724:	24000184 	.word	0x24000184
 8004728:	3000501d 	.word	0x3000501d
 800472c:	24000814 	.word	0x24000814
 8004730:	24000804 	.word	0x24000804
 8004734:	080295e8 	.word	0x080295e8
 8004738:	24000154 	.word	0x24000154
 800473c:	2400080c 	.word	0x2400080c
 8004740:	24000808 	.word	0x24000808
 8004744:	080295dc 	.word	0x080295dc
 8004748:	3000501c 	.word	0x3000501c
 800474c:	24000ab8 	.word	0x24000ab8
 8004750:	24000f44 	.word	0x24000f44
 8004754:	40020010 	.word	0x40020010
 8004758:	40020028 	.word	0x40020028
 800475c:	40020040 	.word	0x40020040
 8004760:	40020058 	.word	0x40020058
 8004764:	40020070 	.word	0x40020070
 8004768:	40020088 	.word	0x40020088
 800476c:	400200a0 	.word	0x400200a0
 8004770:	400200b8 	.word	0x400200b8
 8004774:	40020410 	.word	0x40020410
 8004778:	40020428 	.word	0x40020428
 800477c:	40020440 	.word	0x40020440
 8004780:	40020458 	.word	0x40020458
 8004784:	40020470 	.word	0x40020470
 8004788:	40020488 	.word	0x40020488
 800478c:	400204a0 	.word	0x400204a0
 8004790:	400204b8 	.word	0x400204b8

08004794 <HAL_UART_ErrorCallback>:
//             the HAL_UART_RxCpltCallback can be implemented in the user file.
//    */
// }

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  if(huart == &huart5)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a6b      	ldr	r2, [pc, #428]	@ (800494c <HAL_UART_ErrorCallback+0x1b8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d166      	bne.n	8004872 <HAL_UART_ErrorCallback+0xde>
  {
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxbuff_servo, 128);
 80047a4:	2280      	movs	r2, #128	@ 0x80
 80047a6:	496a      	ldr	r1, [pc, #424]	@ (8004950 <HAL_UART_ErrorCallback+0x1bc>)
 80047a8:	4868      	ldr	r0, [pc, #416]	@ (800494c <HAL_UART_ErrorCallback+0x1b8>)
 80047aa:	f00d f862 	bl	8011872 <HAL_UARTEx_ReceiveToIdle_DMA>
	   __HAL_DMA_DISABLE_IT(&hdma_uart5_rx, DMA_IT_HT);
 80047ae:	4b69      	ldr	r3, [pc, #420]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a69      	ldr	r2, [pc, #420]	@ (8004958 <HAL_UART_ErrorCallback+0x1c4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d04a      	beq.n	800484e <HAL_UART_ErrorCallback+0xba>
 80047b8:	4b66      	ldr	r3, [pc, #408]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a67      	ldr	r2, [pc, #412]	@ (800495c <HAL_UART_ErrorCallback+0x1c8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d045      	beq.n	800484e <HAL_UART_ErrorCallback+0xba>
 80047c2:	4b64      	ldr	r3, [pc, #400]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a66      	ldr	r2, [pc, #408]	@ (8004960 <HAL_UART_ErrorCallback+0x1cc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d040      	beq.n	800484e <HAL_UART_ErrorCallback+0xba>
 80047cc:	4b61      	ldr	r3, [pc, #388]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a64      	ldr	r2, [pc, #400]	@ (8004964 <HAL_UART_ErrorCallback+0x1d0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d03b      	beq.n	800484e <HAL_UART_ErrorCallback+0xba>
 80047d6:	4b5f      	ldr	r3, [pc, #380]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a63      	ldr	r2, [pc, #396]	@ (8004968 <HAL_UART_ErrorCallback+0x1d4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d036      	beq.n	800484e <HAL_UART_ErrorCallback+0xba>
 80047e0:	4b5c      	ldr	r3, [pc, #368]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a61      	ldr	r2, [pc, #388]	@ (800496c <HAL_UART_ErrorCallback+0x1d8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d031      	beq.n	800484e <HAL_UART_ErrorCallback+0xba>
 80047ea:	4b5a      	ldr	r3, [pc, #360]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a60      	ldr	r2, [pc, #384]	@ (8004970 <HAL_UART_ErrorCallback+0x1dc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d02c      	beq.n	800484e <HAL_UART_ErrorCallback+0xba>
 80047f4:	4b57      	ldr	r3, [pc, #348]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a5e      	ldr	r2, [pc, #376]	@ (8004974 <HAL_UART_ErrorCallback+0x1e0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d027      	beq.n	800484e <HAL_UART_ErrorCallback+0xba>
 80047fe:	4b55      	ldr	r3, [pc, #340]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a5d      	ldr	r2, [pc, #372]	@ (8004978 <HAL_UART_ErrorCallback+0x1e4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d022      	beq.n	800484e <HAL_UART_ErrorCallback+0xba>
 8004808:	4b52      	ldr	r3, [pc, #328]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a5b      	ldr	r2, [pc, #364]	@ (800497c <HAL_UART_ErrorCallback+0x1e8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d01d      	beq.n	800484e <HAL_UART_ErrorCallback+0xba>
 8004812:	4b50      	ldr	r3, [pc, #320]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a5a      	ldr	r2, [pc, #360]	@ (8004980 <HAL_UART_ErrorCallback+0x1ec>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d018      	beq.n	800484e <HAL_UART_ErrorCallback+0xba>
 800481c:	4b4d      	ldr	r3, [pc, #308]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a58      	ldr	r2, [pc, #352]	@ (8004984 <HAL_UART_ErrorCallback+0x1f0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d013      	beq.n	800484e <HAL_UART_ErrorCallback+0xba>
 8004826:	4b4b      	ldr	r3, [pc, #300]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a57      	ldr	r2, [pc, #348]	@ (8004988 <HAL_UART_ErrorCallback+0x1f4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00e      	beq.n	800484e <HAL_UART_ErrorCallback+0xba>
 8004830:	4b48      	ldr	r3, [pc, #288]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a55      	ldr	r2, [pc, #340]	@ (800498c <HAL_UART_ErrorCallback+0x1f8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d009      	beq.n	800484e <HAL_UART_ErrorCallback+0xba>
 800483a:	4b46      	ldr	r3, [pc, #280]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a54      	ldr	r2, [pc, #336]	@ (8004990 <HAL_UART_ErrorCallback+0x1fc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d004      	beq.n	800484e <HAL_UART_ErrorCallback+0xba>
 8004844:	4b43      	ldr	r3, [pc, #268]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a52      	ldr	r2, [pc, #328]	@ (8004994 <HAL_UART_ErrorCallback+0x200>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d108      	bne.n	8004860 <HAL_UART_ErrorCallback+0xcc>
 800484e:	4b41      	ldr	r3, [pc, #260]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	4b3f      	ldr	r3, [pc, #252]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0208 	bic.w	r2, r2, #8
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	e27b      	b.n	8004d58 <HAL_UART_ErrorCallback+0x5c4>
 8004860:	4b3c      	ldr	r3, [pc, #240]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4b3b      	ldr	r3, [pc, #236]	@ (8004954 <HAL_UART_ErrorCallback+0x1c0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0204 	bic.w	r2, r2, #4
 800486e:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);	
	}
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004870:	e272      	b.n	8004d58 <HAL_UART_ErrorCallback+0x5c4>
  }else if(huart == &huart3)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a48      	ldr	r2, [pc, #288]	@ (8004998 <HAL_UART_ErrorCallback+0x204>)
 8004876:	4293      	cmp	r3, r2
 8004878:	f040 8094 	bne.w	80049a4 <HAL_UART_ErrorCallback+0x210>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxbuff_cu, 128);
 800487c:	2280      	movs	r2, #128	@ 0x80
 800487e:	4947      	ldr	r1, [pc, #284]	@ (800499c <HAL_UART_ErrorCallback+0x208>)
 8004880:	4845      	ldr	r0, [pc, #276]	@ (8004998 <HAL_UART_ErrorCallback+0x204>)
 8004882:	f00c fff6 	bl	8011872 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8004886:	4b46      	ldr	r3, [pc, #280]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a33      	ldr	r2, [pc, #204]	@ (8004958 <HAL_UART_ErrorCallback+0x1c4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d04a      	beq.n	8004926 <HAL_UART_ErrorCallback+0x192>
 8004890:	4b43      	ldr	r3, [pc, #268]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a31      	ldr	r2, [pc, #196]	@ (800495c <HAL_UART_ErrorCallback+0x1c8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d045      	beq.n	8004926 <HAL_UART_ErrorCallback+0x192>
 800489a:	4b41      	ldr	r3, [pc, #260]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a30      	ldr	r2, [pc, #192]	@ (8004960 <HAL_UART_ErrorCallback+0x1cc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d040      	beq.n	8004926 <HAL_UART_ErrorCallback+0x192>
 80048a4:	4b3e      	ldr	r3, [pc, #248]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004964 <HAL_UART_ErrorCallback+0x1d0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d03b      	beq.n	8004926 <HAL_UART_ErrorCallback+0x192>
 80048ae:	4b3c      	ldr	r3, [pc, #240]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a2d      	ldr	r2, [pc, #180]	@ (8004968 <HAL_UART_ErrorCallback+0x1d4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d036      	beq.n	8004926 <HAL_UART_ErrorCallback+0x192>
 80048b8:	4b39      	ldr	r3, [pc, #228]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a2b      	ldr	r2, [pc, #172]	@ (800496c <HAL_UART_ErrorCallback+0x1d8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d031      	beq.n	8004926 <HAL_UART_ErrorCallback+0x192>
 80048c2:	4b37      	ldr	r3, [pc, #220]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004970 <HAL_UART_ErrorCallback+0x1dc>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d02c      	beq.n	8004926 <HAL_UART_ErrorCallback+0x192>
 80048cc:	4b34      	ldr	r3, [pc, #208]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a28      	ldr	r2, [pc, #160]	@ (8004974 <HAL_UART_ErrorCallback+0x1e0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d027      	beq.n	8004926 <HAL_UART_ErrorCallback+0x192>
 80048d6:	4b32      	ldr	r3, [pc, #200]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a27      	ldr	r2, [pc, #156]	@ (8004978 <HAL_UART_ErrorCallback+0x1e4>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d022      	beq.n	8004926 <HAL_UART_ErrorCallback+0x192>
 80048e0:	4b2f      	ldr	r3, [pc, #188]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a25      	ldr	r2, [pc, #148]	@ (800497c <HAL_UART_ErrorCallback+0x1e8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d01d      	beq.n	8004926 <HAL_UART_ErrorCallback+0x192>
 80048ea:	4b2d      	ldr	r3, [pc, #180]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a24      	ldr	r2, [pc, #144]	@ (8004980 <HAL_UART_ErrorCallback+0x1ec>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d018      	beq.n	8004926 <HAL_UART_ErrorCallback+0x192>
 80048f4:	4b2a      	ldr	r3, [pc, #168]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a22      	ldr	r2, [pc, #136]	@ (8004984 <HAL_UART_ErrorCallback+0x1f0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d013      	beq.n	8004926 <HAL_UART_ErrorCallback+0x192>
 80048fe:	4b28      	ldr	r3, [pc, #160]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a21      	ldr	r2, [pc, #132]	@ (8004988 <HAL_UART_ErrorCallback+0x1f4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00e      	beq.n	8004926 <HAL_UART_ErrorCallback+0x192>
 8004908:	4b25      	ldr	r3, [pc, #148]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a1f      	ldr	r2, [pc, #124]	@ (800498c <HAL_UART_ErrorCallback+0x1f8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d009      	beq.n	8004926 <HAL_UART_ErrorCallback+0x192>
 8004912:	4b23      	ldr	r3, [pc, #140]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a1e      	ldr	r2, [pc, #120]	@ (8004990 <HAL_UART_ErrorCallback+0x1fc>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d004      	beq.n	8004926 <HAL_UART_ErrorCallback+0x192>
 800491c:	4b20      	ldr	r3, [pc, #128]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a1c      	ldr	r2, [pc, #112]	@ (8004994 <HAL_UART_ErrorCallback+0x200>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d108      	bne.n	8004938 <HAL_UART_ErrorCallback+0x1a4>
 8004926:	4b1e      	ldr	r3, [pc, #120]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	4b1c      	ldr	r3, [pc, #112]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0208 	bic.w	r2, r2, #8
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e20f      	b.n	8004d58 <HAL_UART_ErrorCallback+0x5c4>
 8004938:	4b19      	ldr	r3, [pc, #100]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	4b18      	ldr	r3, [pc, #96]	@ (80049a0 <HAL_UART_ErrorCallback+0x20c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0204 	bic.w	r2, r2, #4
 8004946:	601a      	str	r2, [r3, #0]
}
 8004948:	e206      	b.n	8004d58 <HAL_UART_ErrorCallback+0x5c4>
 800494a:	bf00      	nop
 800494c:	240008fc 	.word	0x240008fc
 8004950:	30004b84 	.word	0x30004b84
 8004954:	24000d64 	.word	0x24000d64
 8004958:	40020010 	.word	0x40020010
 800495c:	40020028 	.word	0x40020028
 8004960:	40020040 	.word	0x40020040
 8004964:	40020058 	.word	0x40020058
 8004968:	40020070 	.word	0x40020070
 800496c:	40020088 	.word	0x40020088
 8004970:	400200a0 	.word	0x400200a0
 8004974:	400200b8 	.word	0x400200b8
 8004978:	40020410 	.word	0x40020410
 800497c:	40020428 	.word	0x40020428
 8004980:	40020440 	.word	0x40020440
 8004984:	40020458 	.word	0x40020458
 8004988:	40020470 	.word	0x40020470
 800498c:	40020488 	.word	0x40020488
 8004990:	400204a0 	.word	0x400204a0
 8004994:	400204b8 	.word	0x400204b8
 8004998:	24000b4c 	.word	0x24000b4c
 800499c:	30004d84 	.word	0x30004d84
 80049a0:	24001034 	.word	0x24001034
  }else if(huart == &huart4)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a6b      	ldr	r2, [pc, #428]	@ (8004b54 <HAL_UART_ErrorCallback+0x3c0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d166      	bne.n	8004a7a <HAL_UART_ErrorCallback+0x2e6>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rxbuff_jing, 128);
 80049ac:	2280      	movs	r2, #128	@ 0x80
 80049ae:	496a      	ldr	r1, [pc, #424]	@ (8004b58 <HAL_UART_ErrorCallback+0x3c4>)
 80049b0:	4868      	ldr	r0, [pc, #416]	@ (8004b54 <HAL_UART_ErrorCallback+0x3c0>)
 80049b2:	f00c ff5e 	bl	8011872 <HAL_UARTEx_ReceiveToIdle_DMA>
	  	  	  __HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 80049b6:	4b69      	ldr	r3, [pc, #420]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a69      	ldr	r2, [pc, #420]	@ (8004b60 <HAL_UART_ErrorCallback+0x3cc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d04a      	beq.n	8004a56 <HAL_UART_ErrorCallback+0x2c2>
 80049c0:	4b66      	ldr	r3, [pc, #408]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a67      	ldr	r2, [pc, #412]	@ (8004b64 <HAL_UART_ErrorCallback+0x3d0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d045      	beq.n	8004a56 <HAL_UART_ErrorCallback+0x2c2>
 80049ca:	4b64      	ldr	r3, [pc, #400]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a66      	ldr	r2, [pc, #408]	@ (8004b68 <HAL_UART_ErrorCallback+0x3d4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d040      	beq.n	8004a56 <HAL_UART_ErrorCallback+0x2c2>
 80049d4:	4b61      	ldr	r3, [pc, #388]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a64      	ldr	r2, [pc, #400]	@ (8004b6c <HAL_UART_ErrorCallback+0x3d8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d03b      	beq.n	8004a56 <HAL_UART_ErrorCallback+0x2c2>
 80049de:	4b5f      	ldr	r3, [pc, #380]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a63      	ldr	r2, [pc, #396]	@ (8004b70 <HAL_UART_ErrorCallback+0x3dc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d036      	beq.n	8004a56 <HAL_UART_ErrorCallback+0x2c2>
 80049e8:	4b5c      	ldr	r3, [pc, #368]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a61      	ldr	r2, [pc, #388]	@ (8004b74 <HAL_UART_ErrorCallback+0x3e0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d031      	beq.n	8004a56 <HAL_UART_ErrorCallback+0x2c2>
 80049f2:	4b5a      	ldr	r3, [pc, #360]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a60      	ldr	r2, [pc, #384]	@ (8004b78 <HAL_UART_ErrorCallback+0x3e4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d02c      	beq.n	8004a56 <HAL_UART_ErrorCallback+0x2c2>
 80049fc:	4b57      	ldr	r3, [pc, #348]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a5e      	ldr	r2, [pc, #376]	@ (8004b7c <HAL_UART_ErrorCallback+0x3e8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d027      	beq.n	8004a56 <HAL_UART_ErrorCallback+0x2c2>
 8004a06:	4b55      	ldr	r3, [pc, #340]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a5d      	ldr	r2, [pc, #372]	@ (8004b80 <HAL_UART_ErrorCallback+0x3ec>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d022      	beq.n	8004a56 <HAL_UART_ErrorCallback+0x2c2>
 8004a10:	4b52      	ldr	r3, [pc, #328]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a5b      	ldr	r2, [pc, #364]	@ (8004b84 <HAL_UART_ErrorCallback+0x3f0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01d      	beq.n	8004a56 <HAL_UART_ErrorCallback+0x2c2>
 8004a1a:	4b50      	ldr	r3, [pc, #320]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a5a      	ldr	r2, [pc, #360]	@ (8004b88 <HAL_UART_ErrorCallback+0x3f4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d018      	beq.n	8004a56 <HAL_UART_ErrorCallback+0x2c2>
 8004a24:	4b4d      	ldr	r3, [pc, #308]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a58      	ldr	r2, [pc, #352]	@ (8004b8c <HAL_UART_ErrorCallback+0x3f8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d013      	beq.n	8004a56 <HAL_UART_ErrorCallback+0x2c2>
 8004a2e:	4b4b      	ldr	r3, [pc, #300]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a57      	ldr	r2, [pc, #348]	@ (8004b90 <HAL_UART_ErrorCallback+0x3fc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00e      	beq.n	8004a56 <HAL_UART_ErrorCallback+0x2c2>
 8004a38:	4b48      	ldr	r3, [pc, #288]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a55      	ldr	r2, [pc, #340]	@ (8004b94 <HAL_UART_ErrorCallback+0x400>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d009      	beq.n	8004a56 <HAL_UART_ErrorCallback+0x2c2>
 8004a42:	4b46      	ldr	r3, [pc, #280]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a54      	ldr	r2, [pc, #336]	@ (8004b98 <HAL_UART_ErrorCallback+0x404>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d004      	beq.n	8004a56 <HAL_UART_ErrorCallback+0x2c2>
 8004a4c:	4b43      	ldr	r3, [pc, #268]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a52      	ldr	r2, [pc, #328]	@ (8004b9c <HAL_UART_ErrorCallback+0x408>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d108      	bne.n	8004a68 <HAL_UART_ErrorCallback+0x2d4>
 8004a56:	4b41      	ldr	r3, [pc, #260]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0208 	bic.w	r2, r2, #8
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	e177      	b.n	8004d58 <HAL_UART_ErrorCallback+0x5c4>
 8004a68:	4b3c      	ldr	r3, [pc, #240]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b5c <HAL_UART_ErrorCallback+0x3c8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0204 	bic.w	r2, r2, #4
 8004a76:	601a      	str	r2, [r3, #0]
}
 8004a78:	e16e      	b.n	8004d58 <HAL_UART_ErrorCallback+0x5c4>
  }else if(huart == &huart6)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a48      	ldr	r2, [pc, #288]	@ (8004ba0 <HAL_UART_ErrorCallback+0x40c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	f040 8094 	bne.w	8004bac <HAL_UART_ErrorCallback+0x418>
	  HAL_UARTEx_ReceiveToIdle_IT(&huart6, rxbuff_focus, 11);
 8004a84:	220b      	movs	r2, #11
 8004a86:	4947      	ldr	r1, [pc, #284]	@ (8004ba4 <HAL_UART_ErrorCallback+0x410>)
 8004a88:	4845      	ldr	r0, [pc, #276]	@ (8004ba0 <HAL_UART_ErrorCallback+0x40c>)
 8004a8a:	f00c fea2 	bl	80117d2 <HAL_UARTEx_ReceiveToIdle_IT>
	  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8004a8e:	4b46      	ldr	r3, [pc, #280]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a33      	ldr	r2, [pc, #204]	@ (8004b60 <HAL_UART_ErrorCallback+0x3cc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d04a      	beq.n	8004b2e <HAL_UART_ErrorCallback+0x39a>
 8004a98:	4b43      	ldr	r3, [pc, #268]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a31      	ldr	r2, [pc, #196]	@ (8004b64 <HAL_UART_ErrorCallback+0x3d0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d045      	beq.n	8004b2e <HAL_UART_ErrorCallback+0x39a>
 8004aa2:	4b41      	ldr	r3, [pc, #260]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a30      	ldr	r2, [pc, #192]	@ (8004b68 <HAL_UART_ErrorCallback+0x3d4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d040      	beq.n	8004b2e <HAL_UART_ErrorCallback+0x39a>
 8004aac:	4b3e      	ldr	r3, [pc, #248]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a2e      	ldr	r2, [pc, #184]	@ (8004b6c <HAL_UART_ErrorCallback+0x3d8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d03b      	beq.n	8004b2e <HAL_UART_ErrorCallback+0x39a>
 8004ab6:	4b3c      	ldr	r3, [pc, #240]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2d      	ldr	r2, [pc, #180]	@ (8004b70 <HAL_UART_ErrorCallback+0x3dc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d036      	beq.n	8004b2e <HAL_UART_ErrorCallback+0x39a>
 8004ac0:	4b39      	ldr	r3, [pc, #228]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8004b74 <HAL_UART_ErrorCallback+0x3e0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d031      	beq.n	8004b2e <HAL_UART_ErrorCallback+0x39a>
 8004aca:	4b37      	ldr	r3, [pc, #220]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a2a      	ldr	r2, [pc, #168]	@ (8004b78 <HAL_UART_ErrorCallback+0x3e4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d02c      	beq.n	8004b2e <HAL_UART_ErrorCallback+0x39a>
 8004ad4:	4b34      	ldr	r3, [pc, #208]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a28      	ldr	r2, [pc, #160]	@ (8004b7c <HAL_UART_ErrorCallback+0x3e8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d027      	beq.n	8004b2e <HAL_UART_ErrorCallback+0x39a>
 8004ade:	4b32      	ldr	r3, [pc, #200]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a27      	ldr	r2, [pc, #156]	@ (8004b80 <HAL_UART_ErrorCallback+0x3ec>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d022      	beq.n	8004b2e <HAL_UART_ErrorCallback+0x39a>
 8004ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a25      	ldr	r2, [pc, #148]	@ (8004b84 <HAL_UART_ErrorCallback+0x3f0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d01d      	beq.n	8004b2e <HAL_UART_ErrorCallback+0x39a>
 8004af2:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a24      	ldr	r2, [pc, #144]	@ (8004b88 <HAL_UART_ErrorCallback+0x3f4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d018      	beq.n	8004b2e <HAL_UART_ErrorCallback+0x39a>
 8004afc:	4b2a      	ldr	r3, [pc, #168]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a22      	ldr	r2, [pc, #136]	@ (8004b8c <HAL_UART_ErrorCallback+0x3f8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d013      	beq.n	8004b2e <HAL_UART_ErrorCallback+0x39a>
 8004b06:	4b28      	ldr	r3, [pc, #160]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a21      	ldr	r2, [pc, #132]	@ (8004b90 <HAL_UART_ErrorCallback+0x3fc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00e      	beq.n	8004b2e <HAL_UART_ErrorCallback+0x39a>
 8004b10:	4b25      	ldr	r3, [pc, #148]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1f      	ldr	r2, [pc, #124]	@ (8004b94 <HAL_UART_ErrorCallback+0x400>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d009      	beq.n	8004b2e <HAL_UART_ErrorCallback+0x39a>
 8004b1a:	4b23      	ldr	r3, [pc, #140]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8004b98 <HAL_UART_ErrorCallback+0x404>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d004      	beq.n	8004b2e <HAL_UART_ErrorCallback+0x39a>
 8004b24:	4b20      	ldr	r3, [pc, #128]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a1c      	ldr	r2, [pc, #112]	@ (8004b9c <HAL_UART_ErrorCallback+0x408>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d108      	bne.n	8004b40 <HAL_UART_ErrorCallback+0x3ac>
 8004b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	4b1c      	ldr	r3, [pc, #112]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0208 	bic.w	r2, r2, #8
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e10b      	b.n	8004d58 <HAL_UART_ErrorCallback+0x5c4>
 8004b40:	4b19      	ldr	r3, [pc, #100]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4b18      	ldr	r3, [pc, #96]	@ (8004ba8 <HAL_UART_ErrorCallback+0x414>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0204 	bic.w	r2, r2, #4
 8004b4e:	601a      	str	r2, [r3, #0]
}
 8004b50:	e102      	b.n	8004d58 <HAL_UART_ErrorCallback+0x5c4>
 8004b52:	bf00      	nop
 8004b54:	24000868 	.word	0x24000868
 8004b58:	30004e84 	.word	0x30004e84
 8004b5c:	24000c74 	.word	0x24000c74
 8004b60:	40020010 	.word	0x40020010
 8004b64:	40020028 	.word	0x40020028
 8004b68:	40020040 	.word	0x40020040
 8004b6c:	40020058 	.word	0x40020058
 8004b70:	40020070 	.word	0x40020070
 8004b74:	40020088 	.word	0x40020088
 8004b78:	400200a0 	.word	0x400200a0
 8004b7c:	400200b8 	.word	0x400200b8
 8004b80:	40020410 	.word	0x40020410
 8004b84:	40020428 	.word	0x40020428
 8004b88:	40020440 	.word	0x40020440
 8004b8c:	40020458 	.word	0x40020458
 8004b90:	40020470 	.word	0x40020470
 8004b94:	40020488 	.word	0x40020488
 8004b98:	400204a0 	.word	0x400204a0
 8004b9c:	400204b8 	.word	0x400204b8
 8004ba0:	24000be0 	.word	0x24000be0
 8004ba4:	30004f10 	.word	0x30004f10
 8004ba8:	24001124 	.word	0x24001124
  }else if(huart == &huart7)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a6c      	ldr	r2, [pc, #432]	@ (8004d60 <HAL_UART_ErrorCallback+0x5cc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d166      	bne.n	8004c82 <HAL_UART_ErrorCallback+0x4ee>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart7, rxbuff_rangefinder, 128);
 8004bb4:	2280      	movs	r2, #128	@ 0x80
 8004bb6:	496b      	ldr	r1, [pc, #428]	@ (8004d64 <HAL_UART_ErrorCallback+0x5d0>)
 8004bb8:	4869      	ldr	r0, [pc, #420]	@ (8004d60 <HAL_UART_ErrorCallback+0x5cc>)
 8004bba:	f00c fe5a 	bl	8011872 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8004bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a6a      	ldr	r2, [pc, #424]	@ (8004d6c <HAL_UART_ErrorCallback+0x5d8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d04a      	beq.n	8004c5e <HAL_UART_ErrorCallback+0x4ca>
 8004bc8:	4b67      	ldr	r3, [pc, #412]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a68      	ldr	r2, [pc, #416]	@ (8004d70 <HAL_UART_ErrorCallback+0x5dc>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d045      	beq.n	8004c5e <HAL_UART_ErrorCallback+0x4ca>
 8004bd2:	4b65      	ldr	r3, [pc, #404]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a67      	ldr	r2, [pc, #412]	@ (8004d74 <HAL_UART_ErrorCallback+0x5e0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d040      	beq.n	8004c5e <HAL_UART_ErrorCallback+0x4ca>
 8004bdc:	4b62      	ldr	r3, [pc, #392]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a65      	ldr	r2, [pc, #404]	@ (8004d78 <HAL_UART_ErrorCallback+0x5e4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d03b      	beq.n	8004c5e <HAL_UART_ErrorCallback+0x4ca>
 8004be6:	4b60      	ldr	r3, [pc, #384]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a64      	ldr	r2, [pc, #400]	@ (8004d7c <HAL_UART_ErrorCallback+0x5e8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d036      	beq.n	8004c5e <HAL_UART_ErrorCallback+0x4ca>
 8004bf0:	4b5d      	ldr	r3, [pc, #372]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a62      	ldr	r2, [pc, #392]	@ (8004d80 <HAL_UART_ErrorCallback+0x5ec>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d031      	beq.n	8004c5e <HAL_UART_ErrorCallback+0x4ca>
 8004bfa:	4b5b      	ldr	r3, [pc, #364]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a61      	ldr	r2, [pc, #388]	@ (8004d84 <HAL_UART_ErrorCallback+0x5f0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d02c      	beq.n	8004c5e <HAL_UART_ErrorCallback+0x4ca>
 8004c04:	4b58      	ldr	r3, [pc, #352]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a5f      	ldr	r2, [pc, #380]	@ (8004d88 <HAL_UART_ErrorCallback+0x5f4>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d027      	beq.n	8004c5e <HAL_UART_ErrorCallback+0x4ca>
 8004c0e:	4b56      	ldr	r3, [pc, #344]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a5e      	ldr	r2, [pc, #376]	@ (8004d8c <HAL_UART_ErrorCallback+0x5f8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d022      	beq.n	8004c5e <HAL_UART_ErrorCallback+0x4ca>
 8004c18:	4b53      	ldr	r3, [pc, #332]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a5c      	ldr	r2, [pc, #368]	@ (8004d90 <HAL_UART_ErrorCallback+0x5fc>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d01d      	beq.n	8004c5e <HAL_UART_ErrorCallback+0x4ca>
 8004c22:	4b51      	ldr	r3, [pc, #324]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a5b      	ldr	r2, [pc, #364]	@ (8004d94 <HAL_UART_ErrorCallback+0x600>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d018      	beq.n	8004c5e <HAL_UART_ErrorCallback+0x4ca>
 8004c2c:	4b4e      	ldr	r3, [pc, #312]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a59      	ldr	r2, [pc, #356]	@ (8004d98 <HAL_UART_ErrorCallback+0x604>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <HAL_UART_ErrorCallback+0x4ca>
 8004c36:	4b4c      	ldr	r3, [pc, #304]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a58      	ldr	r2, [pc, #352]	@ (8004d9c <HAL_UART_ErrorCallback+0x608>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00e      	beq.n	8004c5e <HAL_UART_ErrorCallback+0x4ca>
 8004c40:	4b49      	ldr	r3, [pc, #292]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a56      	ldr	r2, [pc, #344]	@ (8004da0 <HAL_UART_ErrorCallback+0x60c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d009      	beq.n	8004c5e <HAL_UART_ErrorCallback+0x4ca>
 8004c4a:	4b47      	ldr	r3, [pc, #284]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a55      	ldr	r2, [pc, #340]	@ (8004da4 <HAL_UART_ErrorCallback+0x610>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d004      	beq.n	8004c5e <HAL_UART_ErrorCallback+0x4ca>
 8004c54:	4b44      	ldr	r3, [pc, #272]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a53      	ldr	r2, [pc, #332]	@ (8004da8 <HAL_UART_ErrorCallback+0x614>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d108      	bne.n	8004c70 <HAL_UART_ErrorCallback+0x4dc>
 8004c5e:	4b42      	ldr	r3, [pc, #264]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b40      	ldr	r3, [pc, #256]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0208 	bic.w	r2, r2, #8
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	e073      	b.n	8004d58 <HAL_UART_ErrorCallback+0x5c4>
 8004c70:	4b3d      	ldr	r3, [pc, #244]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4b3c      	ldr	r3, [pc, #240]	@ (8004d68 <HAL_UART_ErrorCallback+0x5d4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0204 	bic.w	r2, r2, #4
 8004c7e:	601a      	str	r2, [r3, #0]
}
 8004c80:	e06a      	b.n	8004d58 <HAL_UART_ErrorCallback+0x5c4>
	else if(huart == &huart2)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a49      	ldr	r2, [pc, #292]	@ (8004dac <HAL_UART_ErrorCallback+0x618>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d166      	bne.n	8004d58 <HAL_UART_ErrorCallback+0x5c4>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)chcmd, 16);
 8004c8a:	2210      	movs	r2, #16
 8004c8c:	4948      	ldr	r1, [pc, #288]	@ (8004db0 <HAL_UART_ErrorCallback+0x61c>)
 8004c8e:	4847      	ldr	r0, [pc, #284]	@ (8004dac <HAL_UART_ErrorCallback+0x618>)
 8004c90:	f00c fdef 	bl	8011872 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);	
 8004c94:	4b47      	ldr	r3, [pc, #284]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a34      	ldr	r2, [pc, #208]	@ (8004d6c <HAL_UART_ErrorCallback+0x5d8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d04a      	beq.n	8004d34 <HAL_UART_ErrorCallback+0x5a0>
 8004c9e:	4b45      	ldr	r3, [pc, #276]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a33      	ldr	r2, [pc, #204]	@ (8004d70 <HAL_UART_ErrorCallback+0x5dc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d045      	beq.n	8004d34 <HAL_UART_ErrorCallback+0x5a0>
 8004ca8:	4b42      	ldr	r3, [pc, #264]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a31      	ldr	r2, [pc, #196]	@ (8004d74 <HAL_UART_ErrorCallback+0x5e0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d040      	beq.n	8004d34 <HAL_UART_ErrorCallback+0x5a0>
 8004cb2:	4b40      	ldr	r3, [pc, #256]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a30      	ldr	r2, [pc, #192]	@ (8004d78 <HAL_UART_ErrorCallback+0x5e4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d03b      	beq.n	8004d34 <HAL_UART_ErrorCallback+0x5a0>
 8004cbc:	4b3d      	ldr	r3, [pc, #244]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a2e      	ldr	r2, [pc, #184]	@ (8004d7c <HAL_UART_ErrorCallback+0x5e8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d036      	beq.n	8004d34 <HAL_UART_ErrorCallback+0x5a0>
 8004cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a2d      	ldr	r2, [pc, #180]	@ (8004d80 <HAL_UART_ErrorCallback+0x5ec>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d031      	beq.n	8004d34 <HAL_UART_ErrorCallback+0x5a0>
 8004cd0:	4b38      	ldr	r3, [pc, #224]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a2b      	ldr	r2, [pc, #172]	@ (8004d84 <HAL_UART_ErrorCallback+0x5f0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d02c      	beq.n	8004d34 <HAL_UART_ErrorCallback+0x5a0>
 8004cda:	4b36      	ldr	r3, [pc, #216]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a2a      	ldr	r2, [pc, #168]	@ (8004d88 <HAL_UART_ErrorCallback+0x5f4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d027      	beq.n	8004d34 <HAL_UART_ErrorCallback+0x5a0>
 8004ce4:	4b33      	ldr	r3, [pc, #204]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a28      	ldr	r2, [pc, #160]	@ (8004d8c <HAL_UART_ErrorCallback+0x5f8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d022      	beq.n	8004d34 <HAL_UART_ErrorCallback+0x5a0>
 8004cee:	4b31      	ldr	r3, [pc, #196]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a27      	ldr	r2, [pc, #156]	@ (8004d90 <HAL_UART_ErrorCallback+0x5fc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d01d      	beq.n	8004d34 <HAL_UART_ErrorCallback+0x5a0>
 8004cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a25      	ldr	r2, [pc, #148]	@ (8004d94 <HAL_UART_ErrorCallback+0x600>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d018      	beq.n	8004d34 <HAL_UART_ErrorCallback+0x5a0>
 8004d02:	4b2c      	ldr	r3, [pc, #176]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a24      	ldr	r2, [pc, #144]	@ (8004d98 <HAL_UART_ErrorCallback+0x604>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d013      	beq.n	8004d34 <HAL_UART_ErrorCallback+0x5a0>
 8004d0c:	4b29      	ldr	r3, [pc, #164]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a22      	ldr	r2, [pc, #136]	@ (8004d9c <HAL_UART_ErrorCallback+0x608>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00e      	beq.n	8004d34 <HAL_UART_ErrorCallback+0x5a0>
 8004d16:	4b27      	ldr	r3, [pc, #156]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a21      	ldr	r2, [pc, #132]	@ (8004da0 <HAL_UART_ErrorCallback+0x60c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d009      	beq.n	8004d34 <HAL_UART_ErrorCallback+0x5a0>
 8004d20:	4b24      	ldr	r3, [pc, #144]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1f      	ldr	r2, [pc, #124]	@ (8004da4 <HAL_UART_ErrorCallback+0x610>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d004      	beq.n	8004d34 <HAL_UART_ErrorCallback+0x5a0>
 8004d2a:	4b22      	ldr	r3, [pc, #136]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8004da8 <HAL_UART_ErrorCallback+0x614>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d108      	bne.n	8004d46 <HAL_UART_ErrorCallback+0x5b2>
 8004d34:	4b1f      	ldr	r3, [pc, #124]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0208 	bic.w	r2, r2, #8
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	e008      	b.n	8004d58 <HAL_UART_ErrorCallback+0x5c4>
 8004d46:	4b1b      	ldr	r3, [pc, #108]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	4b19      	ldr	r3, [pc, #100]	@ (8004db4 <HAL_UART_ErrorCallback+0x620>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0204 	bic.w	r2, r2, #4
 8004d54:	601a      	str	r2, [r3, #0]
}
 8004d56:	e7ff      	b.n	8004d58 <HAL_UART_ErrorCallback+0x5c4>
 8004d58:	bf00      	nop
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	24000990 	.word	0x24000990
 8004d64:	30004f9c 	.word	0x30004f9c
 8004d68:	24000e54 	.word	0x24000e54
 8004d6c:	40020010 	.word	0x40020010
 8004d70:	40020028 	.word	0x40020028
 8004d74:	40020040 	.word	0x40020040
 8004d78:	40020058 	.word	0x40020058
 8004d7c:	40020070 	.word	0x40020070
 8004d80:	40020088 	.word	0x40020088
 8004d84:	400200a0 	.word	0x400200a0
 8004d88:	400200b8 	.word	0x400200b8
 8004d8c:	40020410 	.word	0x40020410
 8004d90:	40020428 	.word	0x40020428
 8004d94:	40020440 	.word	0x40020440
 8004d98:	40020458 	.word	0x40020458
 8004d9c:	40020470 	.word	0x40020470
 8004da0:	40020488 	.word	0x40020488
 8004da4:	400204a0 	.word	0x400204a0
 8004da8:	400204b8 	.word	0x400204b8
 8004dac:	24000ab8 	.word	0x24000ab8
 8004db0:	3000501c 	.word	0x3000501c
 8004db4:	24000f44 	.word	0x24000f44

08004db8 <mytask>:



void mytask(void const * argument)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
	static switchFlag = 0;
	osDelay(5000);
 8004dc0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004dc4:	f00d fcee 	bl	80127a4 <osDelay>
	// SendFocusFrame.func = SetPos;
	// SendFocusData(&SendFocusFrame);
	// uart_printf("laserAdjust:%f\r\n",setFocusPos.f);
	// osDelay(100);

	Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8004dc8:	4904      	ldr	r1, [pc, #16]	@ (8004ddc <mytask+0x24>)
 8004dca:	4805      	ldr	r0, [pc, #20]	@ (8004de0 <mytask+0x28>)
 8004dcc:	f7fc f918 	bl	8001000 <Send2ImgModule>
	osDelay(500);
 8004dd0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004dd4:	f00d fce6 	bl	80127a4 <osDelay>
	Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8004dd8:	bf00      	nop
 8004dda:	e7f5      	b.n	8004dc8 <mytask+0x10>
 8004ddc:	240000d8 	.word	0x240000d8
 8004de0:	2400008c 	.word	0x2400008c

08004de4 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08e      	sub	sp, #56	@ 0x38
 8004de8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	605a      	str	r2, [r3, #4]
 8004df4:	609a      	str	r2, [r3, #8]
 8004df6:	60da      	str	r2, [r3, #12]
 8004df8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004dfa:	4b5c      	ldr	r3, [pc, #368]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e00:	4a5a      	ldr	r2, [pc, #360]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e0a:	4b58      	ldr	r3, [pc, #352]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e14:	623b      	str	r3, [r7, #32]
 8004e16:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e18:	4b54      	ldr	r3, [pc, #336]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e1e:	4a53      	ldr	r2, [pc, #332]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004e20:	f043 0320 	orr.w	r3, r3, #32
 8004e24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e28:	4b50      	ldr	r3, [pc, #320]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	61fb      	str	r3, [r7, #28]
 8004e34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e36:	4b4d      	ldr	r3, [pc, #308]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e3c:	4a4b      	ldr	r2, [pc, #300]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004e3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e46:	4b49      	ldr	r3, [pc, #292]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e54:	4b45      	ldr	r3, [pc, #276]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e5a:	4a44      	ldr	r2, [pc, #272]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004e5c:	f043 0304 	orr.w	r3, r3, #4
 8004e60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e64:	4b41      	ldr	r3, [pc, #260]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e72:	4b3e      	ldr	r3, [pc, #248]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e78:	4a3c      	ldr	r2, [pc, #240]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004e7a:	f043 0301 	orr.w	r3, r3, #1
 8004e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e82:	4b3a      	ldr	r3, [pc, #232]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	613b      	str	r3, [r7, #16]
 8004e8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e90:	4b36      	ldr	r3, [pc, #216]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e96:	4a35      	ldr	r2, [pc, #212]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004e98:	f043 0302 	orr.w	r3, r3, #2
 8004e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ea0:	4b32      	ldr	r3, [pc, #200]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004eae:	4b2f      	ldr	r3, [pc, #188]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004eba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ebe:	4b2b      	ldr	r3, [pc, #172]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ecc:	4b27      	ldr	r3, [pc, #156]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ed2:	4a26      	ldr	r2, [pc, #152]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004ed4:	f043 0308 	orr.w	r3, r3, #8
 8004ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004edc:	4b23      	ldr	r3, [pc, #140]	@ (8004f6c <MX_GPIO_Init+0x188>)
 8004ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	607b      	str	r3, [r7, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8004eea:	2200      	movs	r2, #0
 8004eec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004ef0:	481f      	ldr	r0, [pc, #124]	@ (8004f70 <MX_GPIO_Init+0x18c>)
 8004ef2:	f006 fd73 	bl	800b9dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_PWD_GPIO_Port, RF_PWD_Pin, GPIO_PIN_RESET);
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004efc:	481d      	ldr	r0, [pc, #116]	@ (8004f74 <MX_GPIO_Init+0x190>)
 8004efe:	f006 fd6d 	bl	800b9dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8004f02:	2200      	movs	r2, #0
 8004f04:	2108      	movs	r1, #8
 8004f06:	481c      	ldr	r0, [pc, #112]	@ (8004f78 <MX_GPIO_Init+0x194>)
 8004f08:	f006 fd68 	bl	800b9dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8004f0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f12:	2301      	movs	r3, #1
 8004f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8004f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f22:	4619      	mov	r1, r3
 8004f24:	4812      	ldr	r0, [pc, #72]	@ (8004f70 <MX_GPIO_Init+0x18c>)
 8004f26:	f006 fba9 	bl	800b67c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_PWD_Pin;
 8004f2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f30:	2301      	movs	r3, #1
 8004f32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f34:	2300      	movs	r3, #0
 8004f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RF_PWD_GPIO_Port, &GPIO_InitStruct);
 8004f3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f40:	4619      	mov	r1, r3
 8004f42:	480c      	ldr	r0, [pc, #48]	@ (8004f74 <MX_GPIO_Init+0x190>)
 8004f44:	f006 fb9a 	bl	800b67c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8004f48:	2308      	movs	r3, #8
 8004f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f54:	2300      	movs	r3, #0
 8004f56:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8004f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4806      	ldr	r0, [pc, #24]	@ (8004f78 <MX_GPIO_Init+0x194>)
 8004f60:	f006 fb8c 	bl	800b67c <HAL_GPIO_Init>

}
 8004f64:	bf00      	nop
 8004f66:	3738      	adds	r7, #56	@ 0x38
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	58024400 	.word	0x58024400
 8004f70:	58022000 	.word	0x58022000
 8004f74:	58021400 	.word	0x58021400
 8004f78:	58021800 	.word	0x58021800

08004f7c <uart_printf>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
__attribute__((section("._Text_Area"))) static char buff[128];

int uart_printf(const char *fmt, ...){
 8004f7c:	b40f      	push	{r0, r1, r2, r3}
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b082      	sub	sp, #8
 8004f82:	af00      	add	r7, sp, #0
//  static char buff[128];
  va_list va;int ret;
  va_start(va, fmt);
 8004f84:	f107 0314 	add.w	r3, r7, #20
 8004f88:	603b      	str	r3, [r7, #0]
  ret = vsprintf(buff, fmt, va);
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	6939      	ldr	r1, [r7, #16]
 8004f8e:	480b      	ldr	r0, [pc, #44]	@ (8004fbc <uart_printf+0x40>)
 8004f90:	f020 fb60 	bl	8025654 <vsiprintf>
 8004f94:	6078      	str	r0, [r7, #4]
  va_end(va);
  if (ret > 0){
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	dd07      	ble.n	8004fac <uart_printf+0x30>
    HAL_UART_Transmit(&huart1, (uint8_t*)buff, ret, HAL_MAX_DELAY);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa4:	4905      	ldr	r1, [pc, #20]	@ (8004fbc <uart_printf+0x40>)
 8004fa6:	4806      	ldr	r0, [pc, #24]	@ (8004fc0 <uart_printf+0x44>)
 8004fa8:	f009 fef8 	bl	800ed9c <HAL_UART_Transmit>
  }
  return ret;
 8004fac:	687b      	ldr	r3, [r7, #4]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fb8:	b004      	add	sp, #16
 8004fba:	4770      	bx	lr
 8004fbc:	3000505c 	.word	0x3000505c
 8004fc0:	24000a24 	.word	0x24000a24

08004fc4 <DelayMs>:



void DelayMs(uint32_t ms) {
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
    uint32_t startTick = HAL_GetTick();  // 记录当前SysTick�?
 8004fcc:	f001 fe0a 	bl	8006be4 <HAL_GetTick>
 8004fd0:	60f8      	str	r0, [r7, #12]
    while ((HAL_GetTick() - startTick) < ms) {
 8004fd2:	bf00      	nop
 8004fd4:	f001 fe06 	bl	8006be4 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d8f7      	bhi.n	8004fd4 <DelayMs+0x10>
        // 忙等�?
    }
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004ff6:	f000 f935 	bl	8005264 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8004ffa:	4b41      	ldr	r3, [pc, #260]	@ (8005100 <main+0x110>)
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d11b      	bne.n	800503e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005006:	f3bf 8f4f 	dsb	sy
}
 800500a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800500c:	f3bf 8f6f 	isb	sy
}
 8005010:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005012:	4b3b      	ldr	r3, [pc, #236]	@ (8005100 <main+0x110>)
 8005014:	2200      	movs	r2, #0
 8005016:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800501a:	f3bf 8f4f 	dsb	sy
}
 800501e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005020:	f3bf 8f6f 	isb	sy
}
 8005024:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005026:	4b36      	ldr	r3, [pc, #216]	@ (8005100 <main+0x110>)
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	4a35      	ldr	r2, [pc, #212]	@ (8005100 <main+0x110>)
 800502c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005030:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005032:	f3bf 8f4f 	dsb	sy
}
 8005036:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005038:	f3bf 8f6f 	isb	sy
}
 800503c:	e000      	b.n	8005040 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800503e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8005040:	4b2f      	ldr	r3, [pc, #188]	@ (8005100 <main+0x110>)
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d138      	bne.n	80050be <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800504c:	4b2c      	ldr	r3, [pc, #176]	@ (8005100 <main+0x110>)
 800504e:	2200      	movs	r2, #0
 8005050:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005054:	f3bf 8f4f 	dsb	sy
}
 8005058:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800505a:	4b29      	ldr	r3, [pc, #164]	@ (8005100 <main+0x110>)
 800505c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005060:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	0b5b      	lsrs	r3, r3, #13
 8005066:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800506a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	08db      	lsrs	r3, r3, #3
 8005070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005074:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800507e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005084:	491e      	ldr	r1, [pc, #120]	@ (8005100 <main+0x110>)
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	1e5a      	subs	r2, r3, #1
 8005090:	607a      	str	r2, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1ef      	bne.n	8005076 <main+0x86>
    } while(sets-- != 0U);
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	1e5a      	subs	r2, r3, #1
 800509a:	60ba      	str	r2, [r7, #8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e5      	bne.n	800506c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80050a0:	f3bf 8f4f 	dsb	sy
}
 80050a4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80050a6:	4b16      	ldr	r3, [pc, #88]	@ (8005100 <main+0x110>)
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	4a15      	ldr	r2, [pc, #84]	@ (8005100 <main+0x110>)
 80050ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80050b2:	f3bf 8f4f 	dsb	sy
}
 80050b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80050b8:	f3bf 8f6f 	isb	sy
}
 80050bc:	e000      	b.n	80050c0 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80050be:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80050c0:	f001 fd40 	bl	8006b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80050c4:	f000 f81e 	bl	8005104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80050c8:	f7ff fe8c 	bl	8004de4 <MX_GPIO_Init>
  MX_DMA_Init();
 80050cc:	f7fd fbe2 	bl	8002894 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80050d0:	f000 fcc2 	bl	8005a58 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80050d4:	f000 fd0c 	bl	8005af0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80050d8:	f000 fd56 	bl	8005b88 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80050dc:	f000 fda0 	bl	8005c20 <MX_USART6_UART_Init>
  MX_UART4_Init();
 80050e0:	f000 fbd6 	bl	8005890 <MX_UART4_Init>
  MX_UART5_Init();
 80050e4:	f000 fc20 	bl	8005928 <MX_UART5_Init>
  MX_UART7_Init();
 80050e8:	f000 fc6a 	bl	80059c0 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2000);
 80050ec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80050f0:	f001 fd84 	bl	8006bfc <HAL_Delay>
//  uart_printf("hello world");
//  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80050f4:	f7fd fc70 	bl	80029d8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80050f8:	f00d faf1 	bl	80126de <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80050fc:	bf00      	nop
 80050fe:	e7fd      	b.n	80050fc <main+0x10c>
 8005100:	e000ed00 	.word	0xe000ed00

08005104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b09e      	sub	sp, #120	@ 0x78
 8005108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800510a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800510e:	224c      	movs	r2, #76	@ 0x4c
 8005110:	2100      	movs	r1, #0
 8005112:	4618      	mov	r0, r3
 8005114:	f020 fad2 	bl	80256bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005118:	f107 030c 	add.w	r3, r7, #12
 800511c:	2220      	movs	r2, #32
 800511e:	2100      	movs	r1, #0
 8005120:	4618      	mov	r0, r3
 8005122:	f020 facb 	bl	80256bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005126:	2002      	movs	r0, #2
 8005128:	f006 fc8c 	bl	800ba44 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800512c:	2300      	movs	r3, #0
 800512e:	60bb      	str	r3, [r7, #8]
 8005130:	4b49      	ldr	r3, [pc, #292]	@ (8005258 <SystemClock_Config+0x154>)
 8005132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005134:	4a48      	ldr	r2, [pc, #288]	@ (8005258 <SystemClock_Config+0x154>)
 8005136:	f023 0301 	bic.w	r3, r3, #1
 800513a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800513c:	4b46      	ldr	r3, [pc, #280]	@ (8005258 <SystemClock_Config+0x154>)
 800513e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	4b45      	ldr	r3, [pc, #276]	@ (800525c <SystemClock_Config+0x158>)
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	4a44      	ldr	r2, [pc, #272]	@ (800525c <SystemClock_Config+0x158>)
 800514c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005150:	6193      	str	r3, [r2, #24]
 8005152:	4b42      	ldr	r3, [pc, #264]	@ (800525c <SystemClock_Config+0x158>)
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800515a:	60bb      	str	r3, [r7, #8]
 800515c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800515e:	bf00      	nop
 8005160:	4b3e      	ldr	r3, [pc, #248]	@ (800525c <SystemClock_Config+0x158>)
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005168:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800516c:	d1f8      	bne.n	8005160 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800516e:	4b3c      	ldr	r3, [pc, #240]	@ (8005260 <SystemClock_Config+0x15c>)
 8005170:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005174:	4a3a      	ldr	r2, [pc, #232]	@ (8005260 <SystemClock_Config+0x15c>)
 8005176:	f043 0302 	orr.w	r3, r3, #2
 800517a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800517e:	4b38      	ldr	r3, [pc, #224]	@ (8005260 <SystemClock_Config+0x15c>)
 8005180:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	607b      	str	r3, [r7, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800518c:	2300      	movs	r3, #0
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	4b32      	ldr	r3, [pc, #200]	@ (800525c <SystemClock_Config+0x158>)
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	4a31      	ldr	r2, [pc, #196]	@ (800525c <SystemClock_Config+0x158>)
 8005196:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800519a:	6193      	str	r3, [r2, #24]
 800519c:	4b2f      	ldr	r3, [pc, #188]	@ (800525c <SystemClock_Config+0x158>)
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80051a4:	603b      	str	r3, [r7, #0]
 80051a6:	4b2c      	ldr	r3, [pc, #176]	@ (8005258 <SystemClock_Config+0x154>)
 80051a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005258 <SystemClock_Config+0x154>)
 80051ac:	f043 0301 	orr.w	r3, r3, #1
 80051b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051b2:	4b29      	ldr	r3, [pc, #164]	@ (8005258 <SystemClock_Config+0x154>)
 80051b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80051be:	bf00      	nop
 80051c0:	4b26      	ldr	r3, [pc, #152]	@ (800525c <SystemClock_Config+0x158>)
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051cc:	d1f8      	bne.n	80051c0 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80051ce:	2302      	movs	r3, #2
 80051d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80051d2:	2301      	movs	r3, #1
 80051d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80051d6:	2340      	movs	r3, #64	@ 0x40
 80051d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051da:	2302      	movs	r3, #2
 80051dc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80051de:	2300      	movs	r3, #0
 80051e0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80051e2:	2304      	movs	r3, #4
 80051e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80051e6:	233c      	movs	r3, #60	@ 0x3c
 80051e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80051ea:	2302      	movs	r3, #2
 80051ec:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80051ee:	2302      	movs	r3, #2
 80051f0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80051f2:	2302      	movs	r3, #2
 80051f4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80051f6:	230c      	movs	r3, #12
 80051f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80051fa:	2300      	movs	r3, #0
 80051fc:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80051fe:	2300      	movs	r3, #0
 8005200:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005202:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005206:	4618      	mov	r0, r3
 8005208:	f006 fc56 	bl	800bab8 <HAL_RCC_OscConfig>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8005212:	f000 f877 	bl	8005304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005216:	233f      	movs	r3, #63	@ 0x3f
 8005218:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800521a:	2303      	movs	r3, #3
 800521c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800521e:	2300      	movs	r3, #0
 8005220:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005222:	2308      	movs	r3, #8
 8005224:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005226:	2340      	movs	r3, #64	@ 0x40
 8005228:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800522a:	2340      	movs	r3, #64	@ 0x40
 800522c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800522e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005234:	2340      	movs	r3, #64	@ 0x40
 8005236:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005238:	f107 030c 	add.w	r3, r7, #12
 800523c:	2104      	movs	r1, #4
 800523e:	4618      	mov	r0, r3
 8005240:	f007 f894 	bl	800c36c <HAL_RCC_ClockConfig>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800524a:	f000 f85b 	bl	8005304 <Error_Handler>
  }
}
 800524e:	bf00      	nop
 8005250:	3778      	adds	r7, #120	@ 0x78
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	58000400 	.word	0x58000400
 800525c:	58024800 	.word	0x58024800
 8005260:	58024400 	.word	0x58024400

08005264 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800526a:	463b      	mov	r3, r7
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	605a      	str	r2, [r3, #4]
 8005272:	609a      	str	r2, [r3, #8]
 8005274:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8005276:	f001 fde5 	bl	8006e44 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800527a:	2301      	movs	r3, #1
 800527c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800527e:	2300      	movs	r3, #0
 8005280:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8005282:	2300      	movs	r3, #0
 8005284:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8005286:	231f      	movs	r3, #31
 8005288:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800528a:	2387      	movs	r3, #135	@ 0x87
 800528c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800528e:	2300      	movs	r3, #0
 8005290:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8005292:	2300      	movs	r3, #0
 8005294:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005296:	2301      	movs	r3, #1
 8005298:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800529a:	2301      	movs	r3, #1
 800529c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800529e:	2300      	movs	r3, #0
 80052a0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80052a6:	463b      	mov	r3, r7
 80052a8:	4618      	mov	r0, r3
 80052aa:	f001 fe03 	bl	8006eb4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80052ae:	2301      	movs	r3, #1
 80052b0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80052b2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80052b6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80052b8:	230e      	movs	r3, #14
 80052ba:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80052bc:	2300      	movs	r3, #0
 80052be:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80052c0:	2301      	movs	r3, #1
 80052c2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80052c4:	2303      	movs	r3, #3
 80052c6:	72fb      	strb	r3, [r7, #11]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80052c8:	463b      	mov	r3, r7
 80052ca:	4618      	mov	r0, r3
 80052cc:	f001 fdf2 	bl	8006eb4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80052d0:	2004      	movs	r0, #4
 80052d2:	f001 fdcf 	bl	8006e74 <HAL_MPU_Enable>

}
 80052d6:	bf00      	nop
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a04      	ldr	r2, [pc, #16]	@ (8005300 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d101      	bne.n	80052f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80052f2:	f001 fc63 	bl	8006bbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80052f6:	bf00      	nop
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	40001000 	.word	0x40001000

08005304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005308:	b672      	cpsid	i
}
 800530a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800530c:	bf00      	nop
 800530e:	e7fd      	b.n	800530c <Error_Handler+0x8>

08005310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005316:	4b0c      	ldr	r3, [pc, #48]	@ (8005348 <HAL_MspInit+0x38>)
 8005318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800531c:	4a0a      	ldr	r2, [pc, #40]	@ (8005348 <HAL_MspInit+0x38>)
 800531e:	f043 0302 	orr.w	r3, r3, #2
 8005322:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005326:	4b08      	ldr	r3, [pc, #32]	@ (8005348 <HAL_MspInit+0x38>)
 8005328:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	607b      	str	r3, [r7, #4]
 8005332:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005334:	2200      	movs	r2, #0
 8005336:	210f      	movs	r1, #15
 8005338:	f06f 0001 	mvn.w	r0, #1
 800533c:	f001 fd5a 	bl	8006df4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005340:	bf00      	nop
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	58024400 	.word	0x58024400

0800534c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b090      	sub	sp, #64	@ 0x40
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b0f      	cmp	r3, #15
 8005358:	d827      	bhi.n	80053aa <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800535a:	2200      	movs	r2, #0
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	2036      	movs	r0, #54	@ 0x36
 8005360:	f001 fd48 	bl	8006df4 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005364:	2036      	movs	r0, #54	@ 0x36
 8005366:	f001 fd5f 	bl	8006e28 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800536a:	4a29      	ldr	r2, [pc, #164]	@ (8005410 <HAL_InitTick+0xc4>)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005370:	4b28      	ldr	r3, [pc, #160]	@ (8005414 <HAL_InitTick+0xc8>)
 8005372:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005376:	4a27      	ldr	r2, [pc, #156]	@ (8005414 <HAL_InitTick+0xc8>)
 8005378:	f043 0310 	orr.w	r3, r3, #16
 800537c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005380:	4b24      	ldr	r3, [pc, #144]	@ (8005414 <HAL_InitTick+0xc8>)
 8005382:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005386:	f003 0310 	and.w	r3, r3, #16
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800538e:	f107 0210 	add.w	r2, r7, #16
 8005392:	f107 0314 	add.w	r3, r7, #20
 8005396:	4611      	mov	r1, r2
 8005398:	4618      	mov	r0, r3
 800539a:	f007 fb73 	bl	800ca84 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800539e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80053a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d106      	bne.n	80053b6 <HAL_InitTick+0x6a>
 80053a8:	e001      	b.n	80053ae <HAL_InitTick+0x62>
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e02b      	b.n	8005406 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80053ae:	f007 fb3d 	bl	800ca2c <HAL_RCC_GetPCLK1Freq>
 80053b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80053b4:	e004      	b.n	80053c0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80053b6:	f007 fb39 	bl	800ca2c <HAL_RCC_GetPCLK1Freq>
 80053ba:	4603      	mov	r3, r0
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80053c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053c2:	4a15      	ldr	r2, [pc, #84]	@ (8005418 <HAL_InitTick+0xcc>)
 80053c4:	fba2 2303 	umull	r2, r3, r2, r3
 80053c8:	0c9b      	lsrs	r3, r3, #18
 80053ca:	3b01      	subs	r3, #1
 80053cc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80053ce:	4b13      	ldr	r3, [pc, #76]	@ (800541c <HAL_InitTick+0xd0>)
 80053d0:	4a13      	ldr	r2, [pc, #76]	@ (8005420 <HAL_InitTick+0xd4>)
 80053d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80053d4:	4b11      	ldr	r3, [pc, #68]	@ (800541c <HAL_InitTick+0xd0>)
 80053d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80053da:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80053dc:	4a0f      	ldr	r2, [pc, #60]	@ (800541c <HAL_InitTick+0xd0>)
 80053de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80053e2:	4b0e      	ldr	r3, [pc, #56]	@ (800541c <HAL_InitTick+0xd0>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053e8:	4b0c      	ldr	r3, [pc, #48]	@ (800541c <HAL_InitTick+0xd0>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80053ee:	480b      	ldr	r0, [pc, #44]	@ (800541c <HAL_InitTick+0xd0>)
 80053f0:	f009 f9b6 	bl	800e760 <HAL_TIM_Base_Init>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d104      	bne.n	8005404 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80053fa:	4808      	ldr	r0, [pc, #32]	@ (800541c <HAL_InitTick+0xd0>)
 80053fc:	f009 fa12 	bl	800e824 <HAL_TIM_Base_Start_IT>
 8005400:	4603      	mov	r3, r0
 8005402:	e000      	b.n	8005406 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
}
 8005406:	4618      	mov	r0, r3
 8005408:	3740      	adds	r7, #64	@ 0x40
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	240001ec 	.word	0x240001ec
 8005414:	58024400 	.word	0x58024400
 8005418:	431bde83 	.word	0x431bde83
 800541c:	24000818 	.word	0x24000818
 8005420:	40001000 	.word	0x40001000

08005424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005428:	bf00      	nop
 800542a:	e7fd      	b.n	8005428 <NMI_Handler+0x4>

0800542c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005430:	bf00      	nop
 8005432:	e7fd      	b.n	8005430 <HardFault_Handler+0x4>

08005434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005438:	bf00      	nop
 800543a:	e7fd      	b.n	8005438 <MemManage_Handler+0x4>

0800543c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005440:	bf00      	nop
 8005442:	e7fd      	b.n	8005440 <BusFault_Handler+0x4>

08005444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005448:	bf00      	nop
 800544a:	e7fd      	b.n	8005448 <UsageFault_Handler+0x4>

0800544c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005450:	bf00      	nop
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005460:	4802      	ldr	r0, [pc, #8]	@ (800546c <DMA1_Stream0_IRQHandler+0x10>)
 8005462:	f003 f891 	bl	8008588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005466:	bf00      	nop
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	24000f44 	.word	0x24000f44

08005470 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005474:	4802      	ldr	r0, [pc, #8]	@ (8005480 <DMA1_Stream1_IRQHandler+0x10>)
 8005476:	f003 f887 	bl	8008588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800547a:	bf00      	nop
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	24000fbc 	.word	0x24000fbc

08005484 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005488:	4802      	ldr	r0, [pc, #8]	@ (8005494 <DMA1_Stream2_IRQHandler+0x10>)
 800548a:	f003 f87d 	bl	8008588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800548e:	bf00      	nop
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	24001034 	.word	0x24001034

08005498 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800549c:	4802      	ldr	r0, [pc, #8]	@ (80054a8 <DMA1_Stream3_IRQHandler+0x10>)
 800549e:	f003 f873 	bl	8008588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	240010ac 	.word	0x240010ac

080054ac <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80054b0:	4802      	ldr	r0, [pc, #8]	@ (80054bc <DMA1_Stream4_IRQHandler+0x10>)
 80054b2:	f003 f869 	bl	8008588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80054b6:	bf00      	nop
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	24001124 	.word	0x24001124

080054c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80054c4:	4802      	ldr	r0, [pc, #8]	@ (80054d0 <DMA1_Stream5_IRQHandler+0x10>)
 80054c6:	f003 f85f 	bl	8008588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80054ca:	bf00      	nop
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	2400119c 	.word	0x2400119c

080054d4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80054d8:	4802      	ldr	r0, [pc, #8]	@ (80054e4 <DMA1_Stream6_IRQHandler+0x10>)
 80054da:	f003 f855 	bl	8008588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80054de:	bf00      	nop
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	24000c74 	.word	0x24000c74

080054e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80054ec:	4802      	ldr	r0, [pc, #8]	@ (80054f8 <USART2_IRQHandler+0x10>)
 80054ee:	f009 fce3 	bl	800eeb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80054f2:	bf00      	nop
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	24000ab8 	.word	0x24000ab8

080054fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005500:	4802      	ldr	r0, [pc, #8]	@ (800550c <USART3_IRQHandler+0x10>)
 8005502:	f009 fcd9 	bl	800eeb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005506:	bf00      	nop
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	24000b4c 	.word	0x24000b4c

08005510 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005514:	4802      	ldr	r0, [pc, #8]	@ (8005520 <DMA1_Stream7_IRQHandler+0x10>)
 8005516:	f003 f837 	bl	8008588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800551a:	bf00      	nop
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	24000cec 	.word	0x24000cec

08005524 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005528:	4802      	ldr	r0, [pc, #8]	@ (8005534 <UART4_IRQHandler+0x10>)
 800552a:	f009 fcc5 	bl	800eeb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800552e:	bf00      	nop
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	24000868 	.word	0x24000868

08005538 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800553c:	4802      	ldr	r0, [pc, #8]	@ (8005548 <UART5_IRQHandler+0x10>)
 800553e:	f009 fcbb 	bl	800eeb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005542:	bf00      	nop
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	240008fc 	.word	0x240008fc

0800554c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005550:	4802      	ldr	r0, [pc, #8]	@ (800555c <TIM6_DAC_IRQHandler+0x10>)
 8005552:	f009 f9df 	bl	800e914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005556:	bf00      	nop
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	24000818 	.word	0x24000818

08005560 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8005564:	4802      	ldr	r0, [pc, #8]	@ (8005570 <DMA2_Stream0_IRQHandler+0x10>)
 8005566:	f003 f80f 	bl	8008588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800556a:	bf00      	nop
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	24000d64 	.word	0x24000d64

08005574 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8005578:	4802      	ldr	r0, [pc, #8]	@ (8005584 <DMA2_Stream1_IRQHandler+0x10>)
 800557a:	f003 f805 	bl	8008588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800557e:	bf00      	nop
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	24000ddc 	.word	0x24000ddc

08005588 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800558c:	4802      	ldr	r0, [pc, #8]	@ (8005598 <DMA2_Stream2_IRQHandler+0x10>)
 800558e:	f002 fffb 	bl	8008588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005592:	bf00      	nop
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	24000e54 	.word	0x24000e54

0800559c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 80055a0:	4802      	ldr	r0, [pc, #8]	@ (80055ac <DMA2_Stream3_IRQHandler+0x10>)
 80055a2:	f002 fff1 	bl	8008588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80055a6:	bf00      	nop
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	24000ecc 	.word	0x24000ecc

080055b0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80055b4:	4802      	ldr	r0, [pc, #8]	@ (80055c0 <ETH_IRQHandler+0x10>)
 80055b6:	f004 fecd 	bl	800a354 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80055ba:	bf00      	nop
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	24001274 	.word	0x24001274

080055c4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80055c8:	4802      	ldr	r0, [pc, #8]	@ (80055d4 <USART6_IRQHandler+0x10>)
 80055ca:	f009 fc75 	bl	800eeb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
//  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
  /* USER CODE END USART6_IRQn 1 */
}
 80055ce:	bf00      	nop
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	24000be0 	.word	0x24000be0

080055d8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80055dc:	4802      	ldr	r0, [pc, #8]	@ (80055e8 <UART7_IRQHandler+0x10>)
 80055de:	f009 fc6b 	bl	800eeb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80055e2:	bf00      	nop
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	24000990 	.word	0x24000990

080055ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  return 1;
 80055f0:	2301      	movs	r3, #1
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <_kill>:

int _kill(int pid, int sig)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005606:	4b05      	ldr	r3, [pc, #20]	@ (800561c <_kill+0x20>)
 8005608:	2216      	movs	r2, #22
 800560a:	601a      	str	r2, [r3, #0]
  return -1;
 800560c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	2400bfc0 	.word	0x2400bfc0

08005620 <_exit>:

void _exit (int status)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005628:	f04f 31ff 	mov.w	r1, #4294967295
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff ffe5 	bl	80055fc <_kill>
  while (1) {}    /* Make sure we hang here */
 8005632:	bf00      	nop
 8005634:	e7fd      	b.n	8005632 <_exit+0x12>

08005636 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b086      	sub	sp, #24
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	e00a      	b.n	800565e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005648:	f3af 8000 	nop.w
 800564c:	4601      	mov	r1, r0
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	60ba      	str	r2, [r7, #8]
 8005654:	b2ca      	uxtb	r2, r1
 8005656:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	3301      	adds	r3, #1
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	429a      	cmp	r2, r3
 8005664:	dbf0      	blt.n	8005648 <_read+0x12>
  }

  return len;
 8005666:	687b      	ldr	r3, [r7, #4]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	e009      	b.n	8005696 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	60ba      	str	r2, [r7, #8]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	3301      	adds	r3, #1
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	dbf1      	blt.n	8005682 <_write+0x12>
  }
  return len;
 800569e:	687b      	ldr	r3, [r7, #4]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <_close>:

int _close(int file)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80056b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80056d0:	605a      	str	r2, [r3, #4]
  return 0;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <_isatty>:

int _isatty(int file)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80056e8:	2301      	movs	r3, #1
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b085      	sub	sp, #20
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005718:	4a14      	ldr	r2, [pc, #80]	@ (800576c <_sbrk+0x5c>)
 800571a:	4b15      	ldr	r3, [pc, #84]	@ (8005770 <_sbrk+0x60>)
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005724:	4b13      	ldr	r3, [pc, #76]	@ (8005774 <_sbrk+0x64>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d102      	bne.n	8005732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800572c:	4b11      	ldr	r3, [pc, #68]	@ (8005774 <_sbrk+0x64>)
 800572e:	4a12      	ldr	r2, [pc, #72]	@ (8005778 <_sbrk+0x68>)
 8005730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005732:	4b10      	ldr	r3, [pc, #64]	@ (8005774 <_sbrk+0x64>)
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4413      	add	r3, r2
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	429a      	cmp	r2, r3
 800573e:	d205      	bcs.n	800574c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8005740:	4b0e      	ldr	r3, [pc, #56]	@ (800577c <_sbrk+0x6c>)
 8005742:	220c      	movs	r2, #12
 8005744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005746:	f04f 33ff 	mov.w	r3, #4294967295
 800574a:	e009      	b.n	8005760 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800574c:	4b09      	ldr	r3, [pc, #36]	@ (8005774 <_sbrk+0x64>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005752:	4b08      	ldr	r3, [pc, #32]	@ (8005774 <_sbrk+0x64>)
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4413      	add	r3, r2
 800575a:	4a06      	ldr	r2, [pc, #24]	@ (8005774 <_sbrk+0x64>)
 800575c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800575e:	68fb      	ldr	r3, [r7, #12]
}
 8005760:	4618      	mov	r0, r3
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	24080000 	.word	0x24080000
 8005770:	00000400 	.word	0x00000400
 8005774:	24000864 	.word	0x24000864
 8005778:	2400c110 	.word	0x2400c110
 800577c:	2400bfc0 	.word	0x2400bfc0

08005780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005784:	4b37      	ldr	r3, [pc, #220]	@ (8005864 <SystemInit+0xe4>)
 8005786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578a:	4a36      	ldr	r2, [pc, #216]	@ (8005864 <SystemInit+0xe4>)
 800578c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005790:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005794:	4b34      	ldr	r3, [pc, #208]	@ (8005868 <SystemInit+0xe8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 030f 	and.w	r3, r3, #15
 800579c:	2b06      	cmp	r3, #6
 800579e:	d807      	bhi.n	80057b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80057a0:	4b31      	ldr	r3, [pc, #196]	@ (8005868 <SystemInit+0xe8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f023 030f 	bic.w	r3, r3, #15
 80057a8:	4a2f      	ldr	r2, [pc, #188]	@ (8005868 <SystemInit+0xe8>)
 80057aa:	f043 0307 	orr.w	r3, r3, #7
 80057ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80057b0:	4b2e      	ldr	r3, [pc, #184]	@ (800586c <SystemInit+0xec>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a2d      	ldr	r2, [pc, #180]	@ (800586c <SystemInit+0xec>)
 80057b6:	f043 0301 	orr.w	r3, r3, #1
 80057ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80057bc:	4b2b      	ldr	r3, [pc, #172]	@ (800586c <SystemInit+0xec>)
 80057be:	2200      	movs	r2, #0
 80057c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80057c2:	4b2a      	ldr	r3, [pc, #168]	@ (800586c <SystemInit+0xec>)
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	4929      	ldr	r1, [pc, #164]	@ (800586c <SystemInit+0xec>)
 80057c8:	4b29      	ldr	r3, [pc, #164]	@ (8005870 <SystemInit+0xf0>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80057ce:	4b26      	ldr	r3, [pc, #152]	@ (8005868 <SystemInit+0xe8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d007      	beq.n	80057ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80057da:	4b23      	ldr	r3, [pc, #140]	@ (8005868 <SystemInit+0xe8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f023 030f 	bic.w	r3, r3, #15
 80057e2:	4a21      	ldr	r2, [pc, #132]	@ (8005868 <SystemInit+0xe8>)
 80057e4:	f043 0307 	orr.w	r3, r3, #7
 80057e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80057ea:	4b20      	ldr	r3, [pc, #128]	@ (800586c <SystemInit+0xec>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80057f0:	4b1e      	ldr	r3, [pc, #120]	@ (800586c <SystemInit+0xec>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80057f6:	4b1d      	ldr	r3, [pc, #116]	@ (800586c <SystemInit+0xec>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80057fc:	4b1b      	ldr	r3, [pc, #108]	@ (800586c <SystemInit+0xec>)
 80057fe:	4a1d      	ldr	r2, [pc, #116]	@ (8005874 <SystemInit+0xf4>)
 8005800:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005802:	4b1a      	ldr	r3, [pc, #104]	@ (800586c <SystemInit+0xec>)
 8005804:	4a1c      	ldr	r2, [pc, #112]	@ (8005878 <SystemInit+0xf8>)
 8005806:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005808:	4b18      	ldr	r3, [pc, #96]	@ (800586c <SystemInit+0xec>)
 800580a:	4a1c      	ldr	r2, [pc, #112]	@ (800587c <SystemInit+0xfc>)
 800580c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800580e:	4b17      	ldr	r3, [pc, #92]	@ (800586c <SystemInit+0xec>)
 8005810:	2200      	movs	r2, #0
 8005812:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005814:	4b15      	ldr	r3, [pc, #84]	@ (800586c <SystemInit+0xec>)
 8005816:	4a19      	ldr	r2, [pc, #100]	@ (800587c <SystemInit+0xfc>)
 8005818:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800581a:	4b14      	ldr	r3, [pc, #80]	@ (800586c <SystemInit+0xec>)
 800581c:	2200      	movs	r2, #0
 800581e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005820:	4b12      	ldr	r3, [pc, #72]	@ (800586c <SystemInit+0xec>)
 8005822:	4a16      	ldr	r2, [pc, #88]	@ (800587c <SystemInit+0xfc>)
 8005824:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005826:	4b11      	ldr	r3, [pc, #68]	@ (800586c <SystemInit+0xec>)
 8005828:	2200      	movs	r2, #0
 800582a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800582c:	4b0f      	ldr	r3, [pc, #60]	@ (800586c <SystemInit+0xec>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a0e      	ldr	r2, [pc, #56]	@ (800586c <SystemInit+0xec>)
 8005832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005836:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005838:	4b0c      	ldr	r3, [pc, #48]	@ (800586c <SystemInit+0xec>)
 800583a:	2200      	movs	r2, #0
 800583c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800583e:	4b10      	ldr	r3, [pc, #64]	@ (8005880 <SystemInit+0x100>)
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	4b10      	ldr	r3, [pc, #64]	@ (8005884 <SystemInit+0x104>)
 8005844:	4013      	ands	r3, r2
 8005846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800584a:	d202      	bcs.n	8005852 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800584c:	4b0e      	ldr	r3, [pc, #56]	@ (8005888 <SystemInit+0x108>)
 800584e:	2201      	movs	r2, #1
 8005850:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005852:	4b0e      	ldr	r3, [pc, #56]	@ (800588c <SystemInit+0x10c>)
 8005854:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8005858:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800585a:	bf00      	nop
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	e000ed00 	.word	0xe000ed00
 8005868:	52002000 	.word	0x52002000
 800586c:	58024400 	.word	0x58024400
 8005870:	eaf6ed7f 	.word	0xeaf6ed7f
 8005874:	02020200 	.word	0x02020200
 8005878:	01ff0000 	.word	0x01ff0000
 800587c:	01010280 	.word	0x01010280
 8005880:	5c001000 	.word	0x5c001000
 8005884:	ffff0000 	.word	0xffff0000
 8005888:	51008108 	.word	0x51008108
 800588c:	52004000 	.word	0x52004000

08005890 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005894:	4b22      	ldr	r3, [pc, #136]	@ (8005920 <MX_UART4_Init+0x90>)
 8005896:	4a23      	ldr	r2, [pc, #140]	@ (8005924 <MX_UART4_Init+0x94>)
 8005898:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 800589a:	4b21      	ldr	r3, [pc, #132]	@ (8005920 <MX_UART4_Init+0x90>)
 800589c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80058a0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80058a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005920 <MX_UART4_Init+0x90>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80058a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005920 <MX_UART4_Init+0x90>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80058ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005920 <MX_UART4_Init+0x90>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80058b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005920 <MX_UART4_Init+0x90>)
 80058b6:	220c      	movs	r2, #12
 80058b8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058ba:	4b19      	ldr	r3, [pc, #100]	@ (8005920 <MX_UART4_Init+0x90>)
 80058bc:	2200      	movs	r2, #0
 80058be:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80058c0:	4b17      	ldr	r3, [pc, #92]	@ (8005920 <MX_UART4_Init+0x90>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80058c6:	4b16      	ldr	r3, [pc, #88]	@ (8005920 <MX_UART4_Init+0x90>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80058cc:	4b14      	ldr	r3, [pc, #80]	@ (8005920 <MX_UART4_Init+0x90>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80058d2:	4b13      	ldr	r3, [pc, #76]	@ (8005920 <MX_UART4_Init+0x90>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80058d8:	4811      	ldr	r0, [pc, #68]	@ (8005920 <MX_UART4_Init+0x90>)
 80058da:	f009 fa0f 	bl	800ecfc <HAL_UART_Init>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80058e4:	f7ff fd0e 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058e8:	2100      	movs	r1, #0
 80058ea:	480d      	ldr	r0, [pc, #52]	@ (8005920 <MX_UART4_Init+0x90>)
 80058ec:	f00b fef5 	bl	80116da <HAL_UARTEx_SetTxFifoThreshold>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80058f6:	f7ff fd05 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058fa:	2100      	movs	r1, #0
 80058fc:	4808      	ldr	r0, [pc, #32]	@ (8005920 <MX_UART4_Init+0x90>)
 80058fe:	f00b ff2a 	bl	8011756 <HAL_UARTEx_SetRxFifoThreshold>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8005908:	f7ff fcfc 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800590c:	4804      	ldr	r0, [pc, #16]	@ (8005920 <MX_UART4_Init+0x90>)
 800590e:	f00b feab 	bl	8011668 <HAL_UARTEx_DisableFifoMode>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8005918:	f7ff fcf4 	bl	8005304 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800591c:	bf00      	nop
 800591e:	bd80      	pop	{r7, pc}
 8005920:	24000868 	.word	0x24000868
 8005924:	40004c00 	.word	0x40004c00

08005928 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800592c:	4b22      	ldr	r3, [pc, #136]	@ (80059b8 <MX_UART5_Init+0x90>)
 800592e:	4a23      	ldr	r2, [pc, #140]	@ (80059bc <MX_UART5_Init+0x94>)
 8005930:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 8005932:	4b21      	ldr	r3, [pc, #132]	@ (80059b8 <MX_UART5_Init+0x90>)
 8005934:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8005938:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800593a:	4b1f      	ldr	r3, [pc, #124]	@ (80059b8 <MX_UART5_Init+0x90>)
 800593c:	2200      	movs	r2, #0
 800593e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005940:	4b1d      	ldr	r3, [pc, #116]	@ (80059b8 <MX_UART5_Init+0x90>)
 8005942:	2200      	movs	r2, #0
 8005944:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005946:	4b1c      	ldr	r3, [pc, #112]	@ (80059b8 <MX_UART5_Init+0x90>)
 8005948:	2200      	movs	r2, #0
 800594a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800594c:	4b1a      	ldr	r3, [pc, #104]	@ (80059b8 <MX_UART5_Init+0x90>)
 800594e:	220c      	movs	r2, #12
 8005950:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005952:	4b19      	ldr	r3, [pc, #100]	@ (80059b8 <MX_UART5_Init+0x90>)
 8005954:	2200      	movs	r2, #0
 8005956:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005958:	4b17      	ldr	r3, [pc, #92]	@ (80059b8 <MX_UART5_Init+0x90>)
 800595a:	2200      	movs	r2, #0
 800595c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800595e:	4b16      	ldr	r3, [pc, #88]	@ (80059b8 <MX_UART5_Init+0x90>)
 8005960:	2200      	movs	r2, #0
 8005962:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005964:	4b14      	ldr	r3, [pc, #80]	@ (80059b8 <MX_UART5_Init+0x90>)
 8005966:	2200      	movs	r2, #0
 8005968:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800596a:	4b13      	ldr	r3, [pc, #76]	@ (80059b8 <MX_UART5_Init+0x90>)
 800596c:	2200      	movs	r2, #0
 800596e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005970:	4811      	ldr	r0, [pc, #68]	@ (80059b8 <MX_UART5_Init+0x90>)
 8005972:	f009 f9c3 	bl	800ecfc <HAL_UART_Init>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800597c:	f7ff fcc2 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005980:	2100      	movs	r1, #0
 8005982:	480d      	ldr	r0, [pc, #52]	@ (80059b8 <MX_UART5_Init+0x90>)
 8005984:	f00b fea9 	bl	80116da <HAL_UARTEx_SetTxFifoThreshold>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800598e:	f7ff fcb9 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005992:	2100      	movs	r1, #0
 8005994:	4808      	ldr	r0, [pc, #32]	@ (80059b8 <MX_UART5_Init+0x90>)
 8005996:	f00b fede 	bl	8011756 <HAL_UARTEx_SetRxFifoThreshold>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80059a0:	f7ff fcb0 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80059a4:	4804      	ldr	r0, [pc, #16]	@ (80059b8 <MX_UART5_Init+0x90>)
 80059a6:	f00b fe5f 	bl	8011668 <HAL_UARTEx_DisableFifoMode>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80059b0:	f7ff fca8 	bl	8005304 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80059b4:	bf00      	nop
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	240008fc 	.word	0x240008fc
 80059bc:	40005000 	.word	0x40005000

080059c0 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80059c4:	4b22      	ldr	r3, [pc, #136]	@ (8005a50 <MX_UART7_Init+0x90>)
 80059c6:	4a23      	ldr	r2, [pc, #140]	@ (8005a54 <MX_UART7_Init+0x94>)
 80059c8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80059ca:	4b21      	ldr	r3, [pc, #132]	@ (8005a50 <MX_UART7_Init+0x90>)
 80059cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80059d0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80059d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005a50 <MX_UART7_Init+0x90>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80059d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005a50 <MX_UART7_Init+0x90>)
 80059da:	2200      	movs	r2, #0
 80059dc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80059de:	4b1c      	ldr	r3, [pc, #112]	@ (8005a50 <MX_UART7_Init+0x90>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80059e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a50 <MX_UART7_Init+0x90>)
 80059e6:	220c      	movs	r2, #12
 80059e8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059ea:	4b19      	ldr	r3, [pc, #100]	@ (8005a50 <MX_UART7_Init+0x90>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80059f0:	4b17      	ldr	r3, [pc, #92]	@ (8005a50 <MX_UART7_Init+0x90>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059f6:	4b16      	ldr	r3, [pc, #88]	@ (8005a50 <MX_UART7_Init+0x90>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80059fc:	4b14      	ldr	r3, [pc, #80]	@ (8005a50 <MX_UART7_Init+0x90>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a02:	4b13      	ldr	r3, [pc, #76]	@ (8005a50 <MX_UART7_Init+0x90>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8005a08:	4811      	ldr	r0, [pc, #68]	@ (8005a50 <MX_UART7_Init+0x90>)
 8005a0a:	f009 f977 	bl	800ecfc <HAL_UART_Init>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8005a14:	f7ff fc76 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a18:	2100      	movs	r1, #0
 8005a1a:	480d      	ldr	r0, [pc, #52]	@ (8005a50 <MX_UART7_Init+0x90>)
 8005a1c:	f00b fe5d 	bl	80116da <HAL_UARTEx_SetTxFifoThreshold>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8005a26:	f7ff fc6d 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	4808      	ldr	r0, [pc, #32]	@ (8005a50 <MX_UART7_Init+0x90>)
 8005a2e:	f00b fe92 	bl	8011756 <HAL_UARTEx_SetRxFifoThreshold>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8005a38:	f7ff fc64 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8005a3c:	4804      	ldr	r0, [pc, #16]	@ (8005a50 <MX_UART7_Init+0x90>)
 8005a3e:	f00b fe13 	bl	8011668 <HAL_UARTEx_DisableFifoMode>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8005a48:	f7ff fc5c 	bl	8005304 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8005a4c:	bf00      	nop
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	24000990 	.word	0x24000990
 8005a54:	40007800 	.word	0x40007800

08005a58 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005a5c:	4b22      	ldr	r3, [pc, #136]	@ (8005ae8 <MX_USART1_UART_Init+0x90>)
 8005a5e:	4a23      	ldr	r2, [pc, #140]	@ (8005aec <MX_USART1_UART_Init+0x94>)
 8005a60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8005a62:	4b21      	ldr	r3, [pc, #132]	@ (8005ae8 <MX_USART1_UART_Init+0x90>)
 8005a64:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8005a68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ae8 <MX_USART1_UART_Init+0x90>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005a70:	4b1d      	ldr	r3, [pc, #116]	@ (8005ae8 <MX_USART1_UART_Init+0x90>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005a76:	4b1c      	ldr	r3, [pc, #112]	@ (8005ae8 <MX_USART1_UART_Init+0x90>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ae8 <MX_USART1_UART_Init+0x90>)
 8005a7e:	220c      	movs	r2, #12
 8005a80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a82:	4b19      	ldr	r3, [pc, #100]	@ (8005ae8 <MX_USART1_UART_Init+0x90>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a88:	4b17      	ldr	r3, [pc, #92]	@ (8005ae8 <MX_USART1_UART_Init+0x90>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a8e:	4b16      	ldr	r3, [pc, #88]	@ (8005ae8 <MX_USART1_UART_Init+0x90>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005a94:	4b14      	ldr	r3, [pc, #80]	@ (8005ae8 <MX_USART1_UART_Init+0x90>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a9a:	4b13      	ldr	r3, [pc, #76]	@ (8005ae8 <MX_USART1_UART_Init+0x90>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005aa0:	4811      	ldr	r0, [pc, #68]	@ (8005ae8 <MX_USART1_UART_Init+0x90>)
 8005aa2:	f009 f92b 	bl	800ecfc <HAL_UART_Init>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005aac:	f7ff fc2a 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	480d      	ldr	r0, [pc, #52]	@ (8005ae8 <MX_USART1_UART_Init+0x90>)
 8005ab4:	f00b fe11 	bl	80116da <HAL_UARTEx_SetTxFifoThreshold>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005abe:	f7ff fc21 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4808      	ldr	r0, [pc, #32]	@ (8005ae8 <MX_USART1_UART_Init+0x90>)
 8005ac6:	f00b fe46 	bl	8011756 <HAL_UARTEx_SetRxFifoThreshold>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005ad0:	f7ff fc18 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005ad4:	4804      	ldr	r0, [pc, #16]	@ (8005ae8 <MX_USART1_UART_Init+0x90>)
 8005ad6:	f00b fdc7 	bl	8011668 <HAL_UARTEx_DisableFifoMode>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005ae0:	f7ff fc10 	bl	8005304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005ae4:	bf00      	nop
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	24000a24 	.word	0x24000a24
 8005aec:	40011000 	.word	0x40011000

08005af0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005af4:	4b22      	ldr	r3, [pc, #136]	@ (8005b80 <MX_USART2_UART_Init+0x90>)
 8005af6:	4a23      	ldr	r2, [pc, #140]	@ (8005b84 <MX_USART2_UART_Init+0x94>)
 8005af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8005afa:	4b21      	ldr	r3, [pc, #132]	@ (8005b80 <MX_USART2_UART_Init+0x90>)
 8005afc:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8005b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005b02:	4b1f      	ldr	r3, [pc, #124]	@ (8005b80 <MX_USART2_UART_Init+0x90>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b08:	4b1d      	ldr	r3, [pc, #116]	@ (8005b80 <MX_USART2_UART_Init+0x90>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8005b80 <MX_USART2_UART_Init+0x90>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b14:	4b1a      	ldr	r3, [pc, #104]	@ (8005b80 <MX_USART2_UART_Init+0x90>)
 8005b16:	220c      	movs	r2, #12
 8005b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b1a:	4b19      	ldr	r3, [pc, #100]	@ (8005b80 <MX_USART2_UART_Init+0x90>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b20:	4b17      	ldr	r3, [pc, #92]	@ (8005b80 <MX_USART2_UART_Init+0x90>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b26:	4b16      	ldr	r3, [pc, #88]	@ (8005b80 <MX_USART2_UART_Init+0x90>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005b2c:	4b14      	ldr	r3, [pc, #80]	@ (8005b80 <MX_USART2_UART_Init+0x90>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b32:	4b13      	ldr	r3, [pc, #76]	@ (8005b80 <MX_USART2_UART_Init+0x90>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005b38:	4811      	ldr	r0, [pc, #68]	@ (8005b80 <MX_USART2_UART_Init+0x90>)
 8005b3a:	f009 f8df 	bl	800ecfc <HAL_UART_Init>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005b44:	f7ff fbde 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b48:	2100      	movs	r1, #0
 8005b4a:	480d      	ldr	r0, [pc, #52]	@ (8005b80 <MX_USART2_UART_Init+0x90>)
 8005b4c:	f00b fdc5 	bl	80116da <HAL_UARTEx_SetTxFifoThreshold>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005b56:	f7ff fbd5 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	4808      	ldr	r0, [pc, #32]	@ (8005b80 <MX_USART2_UART_Init+0x90>)
 8005b5e:	f00b fdfa 	bl	8011756 <HAL_UARTEx_SetRxFifoThreshold>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005b68:	f7ff fbcc 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005b6c:	4804      	ldr	r0, [pc, #16]	@ (8005b80 <MX_USART2_UART_Init+0x90>)
 8005b6e:	f00b fd7b 	bl	8011668 <HAL_UARTEx_DisableFifoMode>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005b78:	f7ff fbc4 	bl	8005304 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005b7c:	bf00      	nop
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	24000ab8 	.word	0x24000ab8
 8005b84:	40004400 	.word	0x40004400

08005b88 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005b8c:	4b22      	ldr	r3, [pc, #136]	@ (8005c18 <MX_USART3_UART_Init+0x90>)
 8005b8e:	4a23      	ldr	r2, [pc, #140]	@ (8005c1c <MX_USART3_UART_Init+0x94>)
 8005b90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8005b92:	4b21      	ldr	r3, [pc, #132]	@ (8005c18 <MX_USART3_UART_Init+0x90>)
 8005b94:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8005b98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8005c18 <MX_USART3_UART_Init+0x90>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8005c18 <MX_USART3_UART_Init+0x90>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8005c18 <MX_USART3_UART_Init+0x90>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005bac:	4b1a      	ldr	r3, [pc, #104]	@ (8005c18 <MX_USART3_UART_Init+0x90>)
 8005bae:	220c      	movs	r2, #12
 8005bb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005bb2:	4b19      	ldr	r3, [pc, #100]	@ (8005c18 <MX_USART3_UART_Init+0x90>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005bb8:	4b17      	ldr	r3, [pc, #92]	@ (8005c18 <MX_USART3_UART_Init+0x90>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005bbe:	4b16      	ldr	r3, [pc, #88]	@ (8005c18 <MX_USART3_UART_Init+0x90>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005bc4:	4b14      	ldr	r3, [pc, #80]	@ (8005c18 <MX_USART3_UART_Init+0x90>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005bca:	4b13      	ldr	r3, [pc, #76]	@ (8005c18 <MX_USART3_UART_Init+0x90>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005bd0:	4811      	ldr	r0, [pc, #68]	@ (8005c18 <MX_USART3_UART_Init+0x90>)
 8005bd2:	f009 f893 	bl	800ecfc <HAL_UART_Init>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005bdc:	f7ff fb92 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005be0:	2100      	movs	r1, #0
 8005be2:	480d      	ldr	r0, [pc, #52]	@ (8005c18 <MX_USART3_UART_Init+0x90>)
 8005be4:	f00b fd79 	bl	80116da <HAL_UARTEx_SetTxFifoThreshold>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8005bee:	f7ff fb89 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4808      	ldr	r0, [pc, #32]	@ (8005c18 <MX_USART3_UART_Init+0x90>)
 8005bf6:	f00b fdae 	bl	8011756 <HAL_UARTEx_SetRxFifoThreshold>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005c00:	f7ff fb80 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005c04:	4804      	ldr	r0, [pc, #16]	@ (8005c18 <MX_USART3_UART_Init+0x90>)
 8005c06:	f00b fd2f 	bl	8011668 <HAL_UARTEx_DisableFifoMode>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005c10:	f7ff fb78 	bl	8005304 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005c14:	bf00      	nop
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	24000b4c 	.word	0x24000b4c
 8005c1c:	40004800 	.word	0x40004800

08005c20 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005c24:	4b22      	ldr	r3, [pc, #136]	@ (8005cb0 <MX_USART6_UART_Init+0x90>)
 8005c26:	4a23      	ldr	r2, [pc, #140]	@ (8005cb4 <MX_USART6_UART_Init+0x94>)
 8005c28:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005c2a:	4b21      	ldr	r3, [pc, #132]	@ (8005cb0 <MX_USART6_UART_Init+0x90>)
 8005c2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005c30:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005c32:	4b1f      	ldr	r3, [pc, #124]	@ (8005cb0 <MX_USART6_UART_Init+0x90>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005c38:	4b1d      	ldr	r3, [pc, #116]	@ (8005cb0 <MX_USART6_UART_Init+0x90>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8005cb0 <MX_USART6_UART_Init+0x90>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005c44:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb0 <MX_USART6_UART_Init+0x90>)
 8005c46:	220c      	movs	r2, #12
 8005c48:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c4a:	4b19      	ldr	r3, [pc, #100]	@ (8005cb0 <MX_USART6_UART_Init+0x90>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c50:	4b17      	ldr	r3, [pc, #92]	@ (8005cb0 <MX_USART6_UART_Init+0x90>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c56:	4b16      	ldr	r3, [pc, #88]	@ (8005cb0 <MX_USART6_UART_Init+0x90>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005c5c:	4b14      	ldr	r3, [pc, #80]	@ (8005cb0 <MX_USART6_UART_Init+0x90>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c62:	4b13      	ldr	r3, [pc, #76]	@ (8005cb0 <MX_USART6_UART_Init+0x90>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005c68:	4811      	ldr	r0, [pc, #68]	@ (8005cb0 <MX_USART6_UART_Init+0x90>)
 8005c6a:	f009 f847 	bl	800ecfc <HAL_UART_Init>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8005c74:	f7ff fb46 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c78:	2100      	movs	r1, #0
 8005c7a:	480d      	ldr	r0, [pc, #52]	@ (8005cb0 <MX_USART6_UART_Init+0x90>)
 8005c7c:	f00b fd2d 	bl	80116da <HAL_UARTEx_SetTxFifoThreshold>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8005c86:	f7ff fb3d 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	4808      	ldr	r0, [pc, #32]	@ (8005cb0 <MX_USART6_UART_Init+0x90>)
 8005c8e:	f00b fd62 	bl	8011756 <HAL_UARTEx_SetRxFifoThreshold>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8005c98:	f7ff fb34 	bl	8005304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8005c9c:	4804      	ldr	r0, [pc, #16]	@ (8005cb0 <MX_USART6_UART_Init+0x90>)
 8005c9e:	f00b fce3 	bl	8011668 <HAL_UARTEx_DisableFifoMode>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8005ca8:	f7ff fb2c 	bl	8005304 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005cac:	bf00      	nop
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	24000be0 	.word	0x24000be0
 8005cb4:	40011400 	.word	0x40011400

08005cb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b0ca      	sub	sp, #296	@ 0x128
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005cc2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005cc6:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cc8:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	605a      	str	r2, [r3, #4]
 8005cd2:	609a      	str	r2, [r3, #8]
 8005cd4:	60da      	str	r2, [r3, #12]
 8005cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005cd8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005cdc:	22c0      	movs	r2, #192	@ 0xc0
 8005cde:	2100      	movs	r1, #0
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f01f fceb 	bl	80256bc <memset>
  if(uartHandle->Instance==UART4)
 8005ce6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005cea:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a72      	ldr	r2, [pc, #456]	@ (8005ebc <HAL_UART_MspInit+0x204>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	f040 80f1 	bne.w	8005edc <HAL_UART_MspInit+0x224>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005cfa:	f04f 0202 	mov.w	r2, #2
 8005cfe:	f04f 0300 	mov.w	r3, #0
 8005d02:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005d06:	2300      	movs	r3, #0
 8005d08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d0c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005d10:	4618      	mov	r0, r3
 8005d12:	f006 fef9 	bl	800cb08 <HAL_RCCEx_PeriphCLKConfig>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <HAL_UART_MspInit+0x68>
    {
      Error_Handler();
 8005d1c:	f7ff faf2 	bl	8005304 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005d20:	4b67      	ldr	r3, [pc, #412]	@ (8005ec0 <HAL_UART_MspInit+0x208>)
 8005d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d26:	4a66      	ldr	r2, [pc, #408]	@ (8005ec0 <HAL_UART_MspInit+0x208>)
 8005d28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d2c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005d30:	4b63      	ldr	r3, [pc, #396]	@ (8005ec0 <HAL_UART_MspInit+0x208>)
 8005d32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d3e:	4b60      	ldr	r3, [pc, #384]	@ (8005ec0 <HAL_UART_MspInit+0x208>)
 8005d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d44:	4a5e      	ldr	r2, [pc, #376]	@ (8005ec0 <HAL_UART_MspInit+0x208>)
 8005d46:	f043 0301 	orr.w	r3, r3, #1
 8005d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8005ec0 <HAL_UART_MspInit+0x208>)
 8005d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d5c:	4b58      	ldr	r3, [pc, #352]	@ (8005ec0 <HAL_UART_MspInit+0x208>)
 8005d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d62:	4a57      	ldr	r2, [pc, #348]	@ (8005ec0 <HAL_UART_MspInit+0x208>)
 8005d64:	f043 0304 	orr.w	r3, r3, #4
 8005d68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005d6c:	4b54      	ldr	r3, [pc, #336]	@ (8005ec0 <HAL_UART_MspInit+0x208>)
 8005d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d72:	f003 0304 	and.w	r3, r3, #4
 8005d76:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d80:	2302      	movs	r3, #2
 8005d82:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d86:	2300      	movs	r3, #0
 8005d88:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005d92:	2308      	movs	r3, #8
 8005d94:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d98:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4849      	ldr	r0, [pc, #292]	@ (8005ec4 <HAL_UART_MspInit+0x20c>)
 8005da0:	f005 fc6c 	bl	800b67c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005da4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005da8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dac:	2302      	movs	r3, #2
 8005dae:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005db8:	2300      	movs	r3, #0
 8005dba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005dbe:	2308      	movs	r3, #8
 8005dc0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dc4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005dc8:	4619      	mov	r1, r3
 8005dca:	483f      	ldr	r0, [pc, #252]	@ (8005ec8 <HAL_UART_MspInit+0x210>)
 8005dcc:	f005 fc56 	bl	800b67c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream6;
 8005dd0:	4b3e      	ldr	r3, [pc, #248]	@ (8005ecc <HAL_UART_MspInit+0x214>)
 8005dd2:	4a3f      	ldr	r2, [pc, #252]	@ (8005ed0 <HAL_UART_MspInit+0x218>)
 8005dd4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8005dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8005ecc <HAL_UART_MspInit+0x214>)
 8005dd8:	223f      	movs	r2, #63	@ 0x3f
 8005dda:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8005ecc <HAL_UART_MspInit+0x214>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005de2:	4b3a      	ldr	r3, [pc, #232]	@ (8005ecc <HAL_UART_MspInit+0x214>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005de8:	4b38      	ldr	r3, [pc, #224]	@ (8005ecc <HAL_UART_MspInit+0x214>)
 8005dea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005dee:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005df0:	4b36      	ldr	r3, [pc, #216]	@ (8005ecc <HAL_UART_MspInit+0x214>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005df6:	4b35      	ldr	r3, [pc, #212]	@ (8005ecc <HAL_UART_MspInit+0x214>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005dfc:	4b33      	ldr	r3, [pc, #204]	@ (8005ecc <HAL_UART_MspInit+0x214>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e02:	4b32      	ldr	r3, [pc, #200]	@ (8005ecc <HAL_UART_MspInit+0x214>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e08:	4b30      	ldr	r3, [pc, #192]	@ (8005ecc <HAL_UART_MspInit+0x214>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005e0e:	482f      	ldr	r0, [pc, #188]	@ (8005ecc <HAL_UART_MspInit+0x214>)
 8005e10:	f001 f890 	bl	8006f34 <HAL_DMA_Init>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8005e1a:	f7ff fa73 	bl	8005304 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8005e1e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005e22:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a28      	ldr	r2, [pc, #160]	@ (8005ecc <HAL_UART_MspInit+0x214>)
 8005e2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005e2e:	4a27      	ldr	r2, [pc, #156]	@ (8005ecc <HAL_UART_MspInit+0x214>)
 8005e30:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005e34:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream7;
 8005e3c:	4b25      	ldr	r3, [pc, #148]	@ (8005ed4 <HAL_UART_MspInit+0x21c>)
 8005e3e:	4a26      	ldr	r2, [pc, #152]	@ (8005ed8 <HAL_UART_MspInit+0x220>)
 8005e40:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8005e42:	4b24      	ldr	r3, [pc, #144]	@ (8005ed4 <HAL_UART_MspInit+0x21c>)
 8005e44:	2240      	movs	r2, #64	@ 0x40
 8005e46:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e48:	4b22      	ldr	r3, [pc, #136]	@ (8005ed4 <HAL_UART_MspInit+0x21c>)
 8005e4a:	2240      	movs	r2, #64	@ 0x40
 8005e4c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e4e:	4b21      	ldr	r3, [pc, #132]	@ (8005ed4 <HAL_UART_MspInit+0x21c>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e54:	4b1f      	ldr	r3, [pc, #124]	@ (8005ed4 <HAL_UART_MspInit+0x21c>)
 8005e56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e5a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed4 <HAL_UART_MspInit+0x21c>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e62:	4b1c      	ldr	r3, [pc, #112]	@ (8005ed4 <HAL_UART_MspInit+0x21c>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8005e68:	4b1a      	ldr	r3, [pc, #104]	@ (8005ed4 <HAL_UART_MspInit+0x21c>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005e6e:	4b19      	ldr	r3, [pc, #100]	@ (8005ed4 <HAL_UART_MspInit+0x21c>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e74:	4b17      	ldr	r3, [pc, #92]	@ (8005ed4 <HAL_UART_MspInit+0x21c>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005e7a:	4816      	ldr	r0, [pc, #88]	@ (8005ed4 <HAL_UART_MspInit+0x21c>)
 8005e7c:	f001 f85a 	bl	8006f34 <HAL_DMA_Init>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_UART_MspInit+0x1d2>
    {
      Error_Handler();
 8005e86:	f7ff fa3d 	bl	8005304 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8005e8a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005e8e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a0f      	ldr	r2, [pc, #60]	@ (8005ed4 <HAL_UART_MspInit+0x21c>)
 8005e96:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005e98:	4a0e      	ldr	r2, [pc, #56]	@ (8005ed4 <HAL_UART_MspInit+0x21c>)
 8005e9a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005e9e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	2105      	movs	r1, #5
 8005eaa:	2034      	movs	r0, #52	@ 0x34
 8005eac:	f000 ffa2 	bl	8006df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005eb0:	2034      	movs	r0, #52	@ 0x34
 8005eb2:	f000 ffb9 	bl	8006e28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005eb6:	f000 bd02 	b.w	80068be <HAL_UART_MspInit+0xc06>
 8005eba:	bf00      	nop
 8005ebc:	40004c00 	.word	0x40004c00
 8005ec0:	58024400 	.word	0x58024400
 8005ec4:	58020000 	.word	0x58020000
 8005ec8:	58020800 	.word	0x58020800
 8005ecc:	24000c74 	.word	0x24000c74
 8005ed0:	400200a0 	.word	0x400200a0
 8005ed4:	24000cec 	.word	0x24000cec
 8005ed8:	400200b8 	.word	0x400200b8
  else if(uartHandle->Instance==UART5)
 8005edc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005ee0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a71      	ldr	r2, [pc, #452]	@ (80060b0 <HAL_UART_MspInit+0x3f8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	f040 80f0 	bne.w	80060d0 <HAL_UART_MspInit+0x418>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8005ef0:	f04f 0202 	mov.w	r2, #2
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005efc:	2300      	movs	r3, #0
 8005efe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f02:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005f06:	4618      	mov	r0, r3
 8005f08:	f006 fdfe 	bl	800cb08 <HAL_RCCEx_PeriphCLKConfig>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8005f12:	f7ff f9f7 	bl	8005304 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8005f16:	4b67      	ldr	r3, [pc, #412]	@ (80060b4 <HAL_UART_MspInit+0x3fc>)
 8005f18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f1c:	4a65      	ldr	r2, [pc, #404]	@ (80060b4 <HAL_UART_MspInit+0x3fc>)
 8005f1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f22:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005f26:	4b63      	ldr	r3, [pc, #396]	@ (80060b4 <HAL_UART_MspInit+0x3fc>)
 8005f28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f30:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f34:	4b5f      	ldr	r3, [pc, #380]	@ (80060b4 <HAL_UART_MspInit+0x3fc>)
 8005f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f3a:	4a5e      	ldr	r2, [pc, #376]	@ (80060b4 <HAL_UART_MspInit+0x3fc>)
 8005f3c:	f043 0304 	orr.w	r3, r3, #4
 8005f40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f44:	4b5b      	ldr	r3, [pc, #364]	@ (80060b4 <HAL_UART_MspInit+0x3fc>)
 8005f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f52:	4b58      	ldr	r3, [pc, #352]	@ (80060b4 <HAL_UART_MspInit+0x3fc>)
 8005f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f58:	4a56      	ldr	r2, [pc, #344]	@ (80060b4 <HAL_UART_MspInit+0x3fc>)
 8005f5a:	f043 0308 	orr.w	r3, r3, #8
 8005f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f62:	4b54      	ldr	r3, [pc, #336]	@ (80060b4 <HAL_UART_MspInit+0x3fc>)
 8005f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f68:	f003 0308 	and.w	r3, r3, #8
 8005f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005f70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005f74:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f84:	2300      	movs	r3, #0
 8005f86:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005f8a:	2308      	movs	r3, #8
 8005f8c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f90:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005f94:	4619      	mov	r1, r3
 8005f96:	4848      	ldr	r0, [pc, #288]	@ (80060b8 <HAL_UART_MspInit+0x400>)
 8005f98:	f005 fb70 	bl	800b67c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005f9c:	2304      	movs	r3, #4
 8005f9e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005fb4:	2308      	movs	r3, #8
 8005fb6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005fba:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	483e      	ldr	r0, [pc, #248]	@ (80060bc <HAL_UART_MspInit+0x404>)
 8005fc2:	f005 fb5b 	bl	800b67c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA2_Stream0;
 8005fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80060c0 <HAL_UART_MspInit+0x408>)
 8005fc8:	4a3e      	ldr	r2, [pc, #248]	@ (80060c4 <HAL_UART_MspInit+0x40c>)
 8005fca:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8005fcc:	4b3c      	ldr	r3, [pc, #240]	@ (80060c0 <HAL_UART_MspInit+0x408>)
 8005fce:	2241      	movs	r2, #65	@ 0x41
 8005fd0:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80060c0 <HAL_UART_MspInit+0x408>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fd8:	4b39      	ldr	r3, [pc, #228]	@ (80060c0 <HAL_UART_MspInit+0x408>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005fde:	4b38      	ldr	r3, [pc, #224]	@ (80060c0 <HAL_UART_MspInit+0x408>)
 8005fe0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005fe4:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005fe6:	4b36      	ldr	r3, [pc, #216]	@ (80060c0 <HAL_UART_MspInit+0x408>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fec:	4b34      	ldr	r3, [pc, #208]	@ (80060c0 <HAL_UART_MspInit+0x408>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8005ff2:	4b33      	ldr	r3, [pc, #204]	@ (80060c0 <HAL_UART_MspInit+0x408>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ff8:	4b31      	ldr	r3, [pc, #196]	@ (80060c0 <HAL_UART_MspInit+0x408>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ffe:	4b30      	ldr	r3, [pc, #192]	@ (80060c0 <HAL_UART_MspInit+0x408>)
 8006000:	2200      	movs	r2, #0
 8006002:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8006004:	482e      	ldr	r0, [pc, #184]	@ (80060c0 <HAL_UART_MspInit+0x408>)
 8006006:	f000 ff95 	bl	8006f34 <HAL_DMA_Init>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <HAL_UART_MspInit+0x35c>
      Error_Handler();
 8006010:	f7ff f978 	bl	8005304 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8006014:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006018:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a28      	ldr	r2, [pc, #160]	@ (80060c0 <HAL_UART_MspInit+0x408>)
 8006020:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006024:	4a26      	ldr	r2, [pc, #152]	@ (80060c0 <HAL_UART_MspInit+0x408>)
 8006026:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800602a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA2_Stream1;
 8006032:	4b25      	ldr	r3, [pc, #148]	@ (80060c8 <HAL_UART_MspInit+0x410>)
 8006034:	4a25      	ldr	r2, [pc, #148]	@ (80060cc <HAL_UART_MspInit+0x414>)
 8006036:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8006038:	4b23      	ldr	r3, [pc, #140]	@ (80060c8 <HAL_UART_MspInit+0x410>)
 800603a:	2242      	movs	r2, #66	@ 0x42
 800603c:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800603e:	4b22      	ldr	r3, [pc, #136]	@ (80060c8 <HAL_UART_MspInit+0x410>)
 8006040:	2240      	movs	r2, #64	@ 0x40
 8006042:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006044:	4b20      	ldr	r3, [pc, #128]	@ (80060c8 <HAL_UART_MspInit+0x410>)
 8006046:	2200      	movs	r2, #0
 8006048:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800604a:	4b1f      	ldr	r3, [pc, #124]	@ (80060c8 <HAL_UART_MspInit+0x410>)
 800604c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006050:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006052:	4b1d      	ldr	r3, [pc, #116]	@ (80060c8 <HAL_UART_MspInit+0x410>)
 8006054:	2200      	movs	r2, #0
 8006056:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006058:	4b1b      	ldr	r3, [pc, #108]	@ (80060c8 <HAL_UART_MspInit+0x410>)
 800605a:	2200      	movs	r2, #0
 800605c:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800605e:	4b1a      	ldr	r3, [pc, #104]	@ (80060c8 <HAL_UART_MspInit+0x410>)
 8006060:	2200      	movs	r2, #0
 8006062:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006064:	4b18      	ldr	r3, [pc, #96]	@ (80060c8 <HAL_UART_MspInit+0x410>)
 8006066:	2200      	movs	r2, #0
 8006068:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800606a:	4b17      	ldr	r3, [pc, #92]	@ (80060c8 <HAL_UART_MspInit+0x410>)
 800606c:	2200      	movs	r2, #0
 800606e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8006070:	4815      	ldr	r0, [pc, #84]	@ (80060c8 <HAL_UART_MspInit+0x410>)
 8006072:	f000 ff5f 	bl	8006f34 <HAL_DMA_Init>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <HAL_UART_MspInit+0x3c8>
      Error_Handler();
 800607c:	f7ff f942 	bl	8005304 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8006080:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006084:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a0f      	ldr	r2, [pc, #60]	@ (80060c8 <HAL_UART_MspInit+0x410>)
 800608c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800608e:	4a0e      	ldr	r2, [pc, #56]	@ (80060c8 <HAL_UART_MspInit+0x410>)
 8006090:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006094:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800609c:	2200      	movs	r2, #0
 800609e:	2105      	movs	r1, #5
 80060a0:	2035      	movs	r0, #53	@ 0x35
 80060a2:	f000 fea7 	bl	8006df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80060a6:	2035      	movs	r0, #53	@ 0x35
 80060a8:	f000 febe 	bl	8006e28 <HAL_NVIC_EnableIRQ>
}
 80060ac:	f000 bc07 	b.w	80068be <HAL_UART_MspInit+0xc06>
 80060b0:	40005000 	.word	0x40005000
 80060b4:	58024400 	.word	0x58024400
 80060b8:	58020800 	.word	0x58020800
 80060bc:	58020c00 	.word	0x58020c00
 80060c0:	24000d64 	.word	0x24000d64
 80060c4:	40020410 	.word	0x40020410
 80060c8:	24000ddc 	.word	0x24000ddc
 80060cc:	40020428 	.word	0x40020428
  else if(uartHandle->Instance==UART7)
 80060d0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80060d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a8b      	ldr	r2, [pc, #556]	@ (800630c <HAL_UART_MspInit+0x654>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	f040 80ba 	bne.w	8006258 <HAL_UART_MspInit+0x5a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80060e4:	f04f 0202 	mov.w	r2, #2
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80060f0:	2300      	movs	r3, #0
 80060f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060f6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80060fa:	4618      	mov	r0, r3
 80060fc:	f006 fd04 	bl	800cb08 <HAL_RCCEx_PeriphCLKConfig>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <HAL_UART_MspInit+0x452>
      Error_Handler();
 8006106:	f7ff f8fd 	bl	8005304 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800610a:	4b81      	ldr	r3, [pc, #516]	@ (8006310 <HAL_UART_MspInit+0x658>)
 800610c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006110:	4a7f      	ldr	r2, [pc, #508]	@ (8006310 <HAL_UART_MspInit+0x658>)
 8006112:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006116:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800611a:	4b7d      	ldr	r3, [pc, #500]	@ (8006310 <HAL_UART_MspInit+0x658>)
 800611c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006120:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006124:	637b      	str	r3, [r7, #52]	@ 0x34
 8006126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006128:	4b79      	ldr	r3, [pc, #484]	@ (8006310 <HAL_UART_MspInit+0x658>)
 800612a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800612e:	4a78      	ldr	r2, [pc, #480]	@ (8006310 <HAL_UART_MspInit+0x658>)
 8006130:	f043 0320 	orr.w	r3, r3, #32
 8006134:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006138:	4b75      	ldr	r3, [pc, #468]	@ (8006310 <HAL_UART_MspInit+0x658>)
 800613a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800613e:	f003 0320 	and.w	r3, r3, #32
 8006142:	633b      	str	r3, [r7, #48]	@ 0x30
 8006144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006146:	23c0      	movs	r3, #192	@ 0xc0
 8006148:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800614c:	2302      	movs	r3, #2
 800614e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006152:	2300      	movs	r3, #0
 8006154:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006158:	2300      	movs	r3, #0
 800615a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800615e:	2307      	movs	r3, #7
 8006160:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006164:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8006168:	4619      	mov	r1, r3
 800616a:	486a      	ldr	r0, [pc, #424]	@ (8006314 <HAL_UART_MspInit+0x65c>)
 800616c:	f005 fa86 	bl	800b67c <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA2_Stream2;
 8006170:	4b69      	ldr	r3, [pc, #420]	@ (8006318 <HAL_UART_MspInit+0x660>)
 8006172:	4a6a      	ldr	r2, [pc, #424]	@ (800631c <HAL_UART_MspInit+0x664>)
 8006174:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8006176:	4b68      	ldr	r3, [pc, #416]	@ (8006318 <HAL_UART_MspInit+0x660>)
 8006178:	224f      	movs	r2, #79	@ 0x4f
 800617a:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800617c:	4b66      	ldr	r3, [pc, #408]	@ (8006318 <HAL_UART_MspInit+0x660>)
 800617e:	2200      	movs	r2, #0
 8006180:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006182:	4b65      	ldr	r3, [pc, #404]	@ (8006318 <HAL_UART_MspInit+0x660>)
 8006184:	2200      	movs	r2, #0
 8006186:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006188:	4b63      	ldr	r3, [pc, #396]	@ (8006318 <HAL_UART_MspInit+0x660>)
 800618a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800618e:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006190:	4b61      	ldr	r3, [pc, #388]	@ (8006318 <HAL_UART_MspInit+0x660>)
 8006192:	2200      	movs	r2, #0
 8006194:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006196:	4b60      	ldr	r3, [pc, #384]	@ (8006318 <HAL_UART_MspInit+0x660>)
 8006198:	2200      	movs	r2, #0
 800619a:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 800619c:	4b5e      	ldr	r3, [pc, #376]	@ (8006318 <HAL_UART_MspInit+0x660>)
 800619e:	2200      	movs	r2, #0
 80061a0:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80061a2:	4b5d      	ldr	r3, [pc, #372]	@ (8006318 <HAL_UART_MspInit+0x660>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80061a8:	4b5b      	ldr	r3, [pc, #364]	@ (8006318 <HAL_UART_MspInit+0x660>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80061ae:	485a      	ldr	r0, [pc, #360]	@ (8006318 <HAL_UART_MspInit+0x660>)
 80061b0:	f000 fec0 	bl	8006f34 <HAL_DMA_Init>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <HAL_UART_MspInit+0x506>
      Error_Handler();
 80061ba:	f7ff f8a3 	bl	8005304 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 80061be:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80061c2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a53      	ldr	r2, [pc, #332]	@ (8006318 <HAL_UART_MspInit+0x660>)
 80061ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80061ce:	4a52      	ldr	r2, [pc, #328]	@ (8006318 <HAL_UART_MspInit+0x660>)
 80061d0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80061d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart7_tx.Instance = DMA2_Stream3;
 80061dc:	4b50      	ldr	r3, [pc, #320]	@ (8006320 <HAL_UART_MspInit+0x668>)
 80061de:	4a51      	ldr	r2, [pc, #324]	@ (8006324 <HAL_UART_MspInit+0x66c>)
 80061e0:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 80061e2:	4b4f      	ldr	r3, [pc, #316]	@ (8006320 <HAL_UART_MspInit+0x668>)
 80061e4:	2250      	movs	r2, #80	@ 0x50
 80061e6:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061e8:	4b4d      	ldr	r3, [pc, #308]	@ (8006320 <HAL_UART_MspInit+0x668>)
 80061ea:	2240      	movs	r2, #64	@ 0x40
 80061ec:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061ee:	4b4c      	ldr	r3, [pc, #304]	@ (8006320 <HAL_UART_MspInit+0x668>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 80061f4:	4b4a      	ldr	r3, [pc, #296]	@ (8006320 <HAL_UART_MspInit+0x668>)
 80061f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80061fa:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061fc:	4b48      	ldr	r3, [pc, #288]	@ (8006320 <HAL_UART_MspInit+0x668>)
 80061fe:	2200      	movs	r2, #0
 8006200:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006202:	4b47      	ldr	r3, [pc, #284]	@ (8006320 <HAL_UART_MspInit+0x668>)
 8006204:	2200      	movs	r2, #0
 8006206:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8006208:	4b45      	ldr	r3, [pc, #276]	@ (8006320 <HAL_UART_MspInit+0x668>)
 800620a:	2200      	movs	r2, #0
 800620c:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 800620e:	4b44      	ldr	r3, [pc, #272]	@ (8006320 <HAL_UART_MspInit+0x668>)
 8006210:	2200      	movs	r2, #0
 8006212:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006214:	4b42      	ldr	r3, [pc, #264]	@ (8006320 <HAL_UART_MspInit+0x668>)
 8006216:	2200      	movs	r2, #0
 8006218:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800621a:	4841      	ldr	r0, [pc, #260]	@ (8006320 <HAL_UART_MspInit+0x668>)
 800621c:	f000 fe8a 	bl	8006f34 <HAL_DMA_Init>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <HAL_UART_MspInit+0x572>
      Error_Handler();
 8006226:	f7ff f86d 	bl	8005304 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 800622a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800622e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a3a      	ldr	r2, [pc, #232]	@ (8006320 <HAL_UART_MspInit+0x668>)
 8006236:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006238:	4a39      	ldr	r2, [pc, #228]	@ (8006320 <HAL_UART_MspInit+0x668>)
 800623a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800623e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8006246:	2200      	movs	r2, #0
 8006248:	2105      	movs	r1, #5
 800624a:	2052      	movs	r0, #82	@ 0x52
 800624c:	f000 fdd2 	bl	8006df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006250:	2052      	movs	r0, #82	@ 0x52
 8006252:	f000 fde9 	bl	8006e28 <HAL_NVIC_EnableIRQ>
}
 8006256:	e332      	b.n	80068be <HAL_UART_MspInit+0xc06>
  else if(uartHandle->Instance==USART1)
 8006258:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800625c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a30      	ldr	r2, [pc, #192]	@ (8006328 <HAL_UART_MspInit+0x670>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d162      	bne.n	8006330 <HAL_UART_MspInit+0x678>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800626a:	f04f 0201 	mov.w	r2, #1
 800626e:	f04f 0300 	mov.w	r3, #0
 8006272:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006276:	2300      	movs	r3, #0
 8006278:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800627c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8006280:	4618      	mov	r0, r3
 8006282:	f006 fc41 	bl	800cb08 <HAL_RCCEx_PeriphCLKConfig>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <HAL_UART_MspInit+0x5d8>
      Error_Handler();
 800628c:	f7ff f83a 	bl	8005304 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006290:	4b1f      	ldr	r3, [pc, #124]	@ (8006310 <HAL_UART_MspInit+0x658>)
 8006292:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006296:	4a1e      	ldr	r2, [pc, #120]	@ (8006310 <HAL_UART_MspInit+0x658>)
 8006298:	f043 0310 	orr.w	r3, r3, #16
 800629c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062a0:	4b1b      	ldr	r3, [pc, #108]	@ (8006310 <HAL_UART_MspInit+0x658>)
 80062a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062a6:	f003 0310 	and.w	r3, r3, #16
 80062aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062ae:	4b18      	ldr	r3, [pc, #96]	@ (8006310 <HAL_UART_MspInit+0x658>)
 80062b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062b4:	4a16      	ldr	r2, [pc, #88]	@ (8006310 <HAL_UART_MspInit+0x658>)
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80062be:	4b14      	ldr	r3, [pc, #80]	@ (8006310 <HAL_UART_MspInit+0x658>)
 80062c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062c4:	f003 0201 	and.w	r2, r3, #1
 80062c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80062cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80062d6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80062da:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80062dc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80062e0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062e4:	2302      	movs	r3, #2
 80062e6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062f0:	2300      	movs	r3, #0
 80062f2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80062f6:	2307      	movs	r3, #7
 80062f8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062fc:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8006300:	4619      	mov	r1, r3
 8006302:	480a      	ldr	r0, [pc, #40]	@ (800632c <HAL_UART_MspInit+0x674>)
 8006304:	f005 f9ba 	bl	800b67c <HAL_GPIO_Init>
}
 8006308:	e2d9      	b.n	80068be <HAL_UART_MspInit+0xc06>
 800630a:	bf00      	nop
 800630c:	40007800 	.word	0x40007800
 8006310:	58024400 	.word	0x58024400
 8006314:	58021400 	.word	0x58021400
 8006318:	24000e54 	.word	0x24000e54
 800631c:	40020440 	.word	0x40020440
 8006320:	24000ecc 	.word	0x24000ecc
 8006324:	40020458 	.word	0x40020458
 8006328:	40011000 	.word	0x40011000
 800632c:	58020000 	.word	0x58020000
  else if(uartHandle->Instance==USART2)
 8006330:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006334:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a7c      	ldr	r2, [pc, #496]	@ (8006530 <HAL_UART_MspInit+0x878>)
 800633e:	4293      	cmp	r3, r2
 8006340:	f040 8106 	bne.w	8006550 <HAL_UART_MspInit+0x898>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006344:	f04f 0202 	mov.w	r2, #2
 8006348:	f04f 0300 	mov.w	r3, #0
 800634c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006350:	2300      	movs	r3, #0
 8006352:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006356:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800635a:	4618      	mov	r0, r3
 800635c:	f006 fbd4 	bl	800cb08 <HAL_RCCEx_PeriphCLKConfig>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <HAL_UART_MspInit+0x6b2>
      Error_Handler();
 8006366:	f7fe ffcd 	bl	8005304 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800636a:	4b72      	ldr	r3, [pc, #456]	@ (8006534 <HAL_UART_MspInit+0x87c>)
 800636c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006370:	4a70      	ldr	r2, [pc, #448]	@ (8006534 <HAL_UART_MspInit+0x87c>)
 8006372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006376:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800637a:	4b6e      	ldr	r3, [pc, #440]	@ (8006534 <HAL_UART_MspInit+0x87c>)
 800637c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006380:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8006384:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006388:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006392:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006396:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006398:	4b66      	ldr	r3, [pc, #408]	@ (8006534 <HAL_UART_MspInit+0x87c>)
 800639a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800639e:	4a65      	ldr	r2, [pc, #404]	@ (8006534 <HAL_UART_MspInit+0x87c>)
 80063a0:	f043 0301 	orr.w	r3, r3, #1
 80063a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80063a8:	4b62      	ldr	r3, [pc, #392]	@ (8006534 <HAL_UART_MspInit+0x87c>)
 80063aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063ae:	f003 0201 	and.w	r2, r3, #1
 80063b2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80063b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80063c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063c4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80063c6:	4b5b      	ldr	r3, [pc, #364]	@ (8006534 <HAL_UART_MspInit+0x87c>)
 80063c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063cc:	4a59      	ldr	r2, [pc, #356]	@ (8006534 <HAL_UART_MspInit+0x87c>)
 80063ce:	f043 0308 	orr.w	r3, r3, #8
 80063d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80063d6:	4b57      	ldr	r3, [pc, #348]	@ (8006534 <HAL_UART_MspInit+0x87c>)
 80063d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063dc:	f003 0208 	and.w	r2, r3, #8
 80063e0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80063e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80063ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80063f2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80063f4:	2308      	movs	r3, #8
 80063f6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063fa:	2302      	movs	r3, #2
 80063fc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006400:	2300      	movs	r3, #0
 8006402:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006406:	2300      	movs	r3, #0
 8006408:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800640c:	2307      	movs	r3, #7
 800640e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006412:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8006416:	4619      	mov	r1, r3
 8006418:	4847      	ldr	r0, [pc, #284]	@ (8006538 <HAL_UART_MspInit+0x880>)
 800641a:	f005 f92f 	bl	800b67c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800641e:	2320      	movs	r3, #32
 8006420:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006424:	2302      	movs	r3, #2
 8006426:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800642a:	2300      	movs	r3, #0
 800642c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006430:	2300      	movs	r3, #0
 8006432:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006436:	2307      	movs	r3, #7
 8006438:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800643c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8006440:	4619      	mov	r1, r3
 8006442:	483e      	ldr	r0, [pc, #248]	@ (800653c <HAL_UART_MspInit+0x884>)
 8006444:	f005 f91a 	bl	800b67c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream0;
 8006448:	4b3d      	ldr	r3, [pc, #244]	@ (8006540 <HAL_UART_MspInit+0x888>)
 800644a:	4a3e      	ldr	r2, [pc, #248]	@ (8006544 <HAL_UART_MspInit+0x88c>)
 800644c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800644e:	4b3c      	ldr	r3, [pc, #240]	@ (8006540 <HAL_UART_MspInit+0x888>)
 8006450:	222b      	movs	r2, #43	@ 0x2b
 8006452:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006454:	4b3a      	ldr	r3, [pc, #232]	@ (8006540 <HAL_UART_MspInit+0x888>)
 8006456:	2200      	movs	r2, #0
 8006458:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800645a:	4b39      	ldr	r3, [pc, #228]	@ (8006540 <HAL_UART_MspInit+0x888>)
 800645c:	2200      	movs	r2, #0
 800645e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006460:	4b37      	ldr	r3, [pc, #220]	@ (8006540 <HAL_UART_MspInit+0x888>)
 8006462:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006466:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006468:	4b35      	ldr	r3, [pc, #212]	@ (8006540 <HAL_UART_MspInit+0x888>)
 800646a:	2200      	movs	r2, #0
 800646c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800646e:	4b34      	ldr	r3, [pc, #208]	@ (8006540 <HAL_UART_MspInit+0x888>)
 8006470:	2200      	movs	r2, #0
 8006472:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006474:	4b32      	ldr	r3, [pc, #200]	@ (8006540 <HAL_UART_MspInit+0x888>)
 8006476:	2200      	movs	r2, #0
 8006478:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800647a:	4b31      	ldr	r3, [pc, #196]	@ (8006540 <HAL_UART_MspInit+0x888>)
 800647c:	2200      	movs	r2, #0
 800647e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006480:	4b2f      	ldr	r3, [pc, #188]	@ (8006540 <HAL_UART_MspInit+0x888>)
 8006482:	2200      	movs	r2, #0
 8006484:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006486:	482e      	ldr	r0, [pc, #184]	@ (8006540 <HAL_UART_MspInit+0x888>)
 8006488:	f000 fd54 	bl	8006f34 <HAL_DMA_Init>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <HAL_UART_MspInit+0x7de>
      Error_Handler();
 8006492:	f7fe ff37 	bl	8005304 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006496:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800649a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a27      	ldr	r2, [pc, #156]	@ (8006540 <HAL_UART_MspInit+0x888>)
 80064a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80064a6:	4a26      	ldr	r2, [pc, #152]	@ (8006540 <HAL_UART_MspInit+0x888>)
 80064a8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80064ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream1;
 80064b4:	4b24      	ldr	r3, [pc, #144]	@ (8006548 <HAL_UART_MspInit+0x890>)
 80064b6:	4a25      	ldr	r2, [pc, #148]	@ (800654c <HAL_UART_MspInit+0x894>)
 80064b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80064ba:	4b23      	ldr	r3, [pc, #140]	@ (8006548 <HAL_UART_MspInit+0x890>)
 80064bc:	222c      	movs	r2, #44	@ 0x2c
 80064be:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064c0:	4b21      	ldr	r3, [pc, #132]	@ (8006548 <HAL_UART_MspInit+0x890>)
 80064c2:	2240      	movs	r2, #64	@ 0x40
 80064c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064c6:	4b20      	ldr	r3, [pc, #128]	@ (8006548 <HAL_UART_MspInit+0x890>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80064cc:	4b1e      	ldr	r3, [pc, #120]	@ (8006548 <HAL_UART_MspInit+0x890>)
 80064ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80064d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064d4:	4b1c      	ldr	r3, [pc, #112]	@ (8006548 <HAL_UART_MspInit+0x890>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064da:	4b1b      	ldr	r3, [pc, #108]	@ (8006548 <HAL_UART_MspInit+0x890>)
 80064dc:	2200      	movs	r2, #0
 80064de:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80064e0:	4b19      	ldr	r3, [pc, #100]	@ (8006548 <HAL_UART_MspInit+0x890>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80064e6:	4b18      	ldr	r3, [pc, #96]	@ (8006548 <HAL_UART_MspInit+0x890>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064ec:	4b16      	ldr	r3, [pc, #88]	@ (8006548 <HAL_UART_MspInit+0x890>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80064f2:	4815      	ldr	r0, [pc, #84]	@ (8006548 <HAL_UART_MspInit+0x890>)
 80064f4:	f000 fd1e 	bl	8006f34 <HAL_DMA_Init>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <HAL_UART_MspInit+0x84a>
      Error_Handler();
 80064fe:	f7fe ff01 	bl	8005304 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006502:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006506:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a0e      	ldr	r2, [pc, #56]	@ (8006548 <HAL_UART_MspInit+0x890>)
 800650e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006510:	4a0d      	ldr	r2, [pc, #52]	@ (8006548 <HAL_UART_MspInit+0x890>)
 8006512:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006516:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800651e:	2200      	movs	r2, #0
 8006520:	2105      	movs	r1, #5
 8006522:	2026      	movs	r0, #38	@ 0x26
 8006524:	f000 fc66 	bl	8006df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006528:	2026      	movs	r0, #38	@ 0x26
 800652a:	f000 fc7d 	bl	8006e28 <HAL_NVIC_EnableIRQ>
}
 800652e:	e1c6      	b.n	80068be <HAL_UART_MspInit+0xc06>
 8006530:	40004400 	.word	0x40004400
 8006534:	58024400 	.word	0x58024400
 8006538:	58020000 	.word	0x58020000
 800653c:	58020c00 	.word	0x58020c00
 8006540:	24000f44 	.word	0x24000f44
 8006544:	40020010 	.word	0x40020010
 8006548:	24000fbc 	.word	0x24000fbc
 800654c:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART3)
 8006550:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006554:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a67      	ldr	r2, [pc, #412]	@ (80066fc <HAL_UART_MspInit+0xa44>)
 800655e:	4293      	cmp	r3, r2
 8006560:	f040 80da 	bne.w	8006718 <HAL_UART_MspInit+0xa60>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006564:	f04f 0202 	mov.w	r2, #2
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006570:	2300      	movs	r3, #0
 8006572:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006576:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800657a:	4618      	mov	r0, r3
 800657c:	f006 fac4 	bl	800cb08 <HAL_RCCEx_PeriphCLKConfig>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <HAL_UART_MspInit+0x8d2>
      Error_Handler();
 8006586:	f7fe febd 	bl	8005304 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800658a:	4b5d      	ldr	r3, [pc, #372]	@ (8006700 <HAL_UART_MspInit+0xa48>)
 800658c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006590:	4a5b      	ldr	r2, [pc, #364]	@ (8006700 <HAL_UART_MspInit+0xa48>)
 8006592:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006596:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800659a:	4b59      	ldr	r3, [pc, #356]	@ (8006700 <HAL_UART_MspInit+0xa48>)
 800659c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065a0:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 80065a4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80065a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80065b2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80065b6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065b8:	4b51      	ldr	r3, [pc, #324]	@ (8006700 <HAL_UART_MspInit+0xa48>)
 80065ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065be:	4a50      	ldr	r2, [pc, #320]	@ (8006700 <HAL_UART_MspInit+0xa48>)
 80065c0:	f043 0302 	orr.w	r3, r3, #2
 80065c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80065c8:	4b4d      	ldr	r3, [pc, #308]	@ (8006700 <HAL_UART_MspInit+0xa48>)
 80065ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065ce:	f003 0202 	and.w	r2, r3, #2
 80065d2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80065d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80065e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80065e4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80065e6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80065ea:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ee:	2302      	movs	r3, #2
 80065f0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065f4:	2300      	movs	r3, #0
 80065f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065fa:	2300      	movs	r3, #0
 80065fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006600:	2307      	movs	r3, #7
 8006602:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006606:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800660a:	4619      	mov	r1, r3
 800660c:	483d      	ldr	r0, [pc, #244]	@ (8006704 <HAL_UART_MspInit+0xa4c>)
 800660e:	f005 f835 	bl	800b67c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream2;
 8006612:	4b3d      	ldr	r3, [pc, #244]	@ (8006708 <HAL_UART_MspInit+0xa50>)
 8006614:	4a3d      	ldr	r2, [pc, #244]	@ (800670c <HAL_UART_MspInit+0xa54>)
 8006616:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8006618:	4b3b      	ldr	r3, [pc, #236]	@ (8006708 <HAL_UART_MspInit+0xa50>)
 800661a:	222d      	movs	r2, #45	@ 0x2d
 800661c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800661e:	4b3a      	ldr	r3, [pc, #232]	@ (8006708 <HAL_UART_MspInit+0xa50>)
 8006620:	2200      	movs	r2, #0
 8006622:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006624:	4b38      	ldr	r3, [pc, #224]	@ (8006708 <HAL_UART_MspInit+0xa50>)
 8006626:	2200      	movs	r2, #0
 8006628:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800662a:	4b37      	ldr	r3, [pc, #220]	@ (8006708 <HAL_UART_MspInit+0xa50>)
 800662c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006630:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006632:	4b35      	ldr	r3, [pc, #212]	@ (8006708 <HAL_UART_MspInit+0xa50>)
 8006634:	2200      	movs	r2, #0
 8006636:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006638:	4b33      	ldr	r3, [pc, #204]	@ (8006708 <HAL_UART_MspInit+0xa50>)
 800663a:	2200      	movs	r2, #0
 800663c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800663e:	4b32      	ldr	r3, [pc, #200]	@ (8006708 <HAL_UART_MspInit+0xa50>)
 8006640:	2200      	movs	r2, #0
 8006642:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006644:	4b30      	ldr	r3, [pc, #192]	@ (8006708 <HAL_UART_MspInit+0xa50>)
 8006646:	2200      	movs	r2, #0
 8006648:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800664a:	4b2f      	ldr	r3, [pc, #188]	@ (8006708 <HAL_UART_MspInit+0xa50>)
 800664c:	2200      	movs	r2, #0
 800664e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006650:	482d      	ldr	r0, [pc, #180]	@ (8006708 <HAL_UART_MspInit+0xa50>)
 8006652:	f000 fc6f 	bl	8006f34 <HAL_DMA_Init>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <HAL_UART_MspInit+0x9a8>
      Error_Handler();
 800665c:	f7fe fe52 	bl	8005304 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006660:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006664:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a27      	ldr	r2, [pc, #156]	@ (8006708 <HAL_UART_MspInit+0xa50>)
 800666c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006670:	4a25      	ldr	r2, [pc, #148]	@ (8006708 <HAL_UART_MspInit+0xa50>)
 8006672:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006676:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800667e:	4b24      	ldr	r3, [pc, #144]	@ (8006710 <HAL_UART_MspInit+0xa58>)
 8006680:	4a24      	ldr	r2, [pc, #144]	@ (8006714 <HAL_UART_MspInit+0xa5c>)
 8006682:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006684:	4b22      	ldr	r3, [pc, #136]	@ (8006710 <HAL_UART_MspInit+0xa58>)
 8006686:	222e      	movs	r2, #46	@ 0x2e
 8006688:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800668a:	4b21      	ldr	r3, [pc, #132]	@ (8006710 <HAL_UART_MspInit+0xa58>)
 800668c:	2240      	movs	r2, #64	@ 0x40
 800668e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006690:	4b1f      	ldr	r3, [pc, #124]	@ (8006710 <HAL_UART_MspInit+0xa58>)
 8006692:	2200      	movs	r2, #0
 8006694:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006696:	4b1e      	ldr	r3, [pc, #120]	@ (8006710 <HAL_UART_MspInit+0xa58>)
 8006698:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800669c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800669e:	4b1c      	ldr	r3, [pc, #112]	@ (8006710 <HAL_UART_MspInit+0xa58>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006710 <HAL_UART_MspInit+0xa58>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80066aa:	4b19      	ldr	r3, [pc, #100]	@ (8006710 <HAL_UART_MspInit+0xa58>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80066b0:	4b17      	ldr	r3, [pc, #92]	@ (8006710 <HAL_UART_MspInit+0xa58>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80066b6:	4b16      	ldr	r3, [pc, #88]	@ (8006710 <HAL_UART_MspInit+0xa58>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80066bc:	4814      	ldr	r0, [pc, #80]	@ (8006710 <HAL_UART_MspInit+0xa58>)
 80066be:	f000 fc39 	bl	8006f34 <HAL_DMA_Init>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <HAL_UART_MspInit+0xa14>
      Error_Handler();
 80066c8:	f7fe fe1c 	bl	8005304 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80066cc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80066d0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a0e      	ldr	r2, [pc, #56]	@ (8006710 <HAL_UART_MspInit+0xa58>)
 80066d8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80066da:	4a0d      	ldr	r2, [pc, #52]	@ (8006710 <HAL_UART_MspInit+0xa58>)
 80066dc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80066e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80066e8:	2200      	movs	r2, #0
 80066ea:	2105      	movs	r1, #5
 80066ec:	2027      	movs	r0, #39	@ 0x27
 80066ee:	f000 fb81 	bl	8006df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80066f2:	2027      	movs	r0, #39	@ 0x27
 80066f4:	f000 fb98 	bl	8006e28 <HAL_NVIC_EnableIRQ>
}
 80066f8:	e0e1      	b.n	80068be <HAL_UART_MspInit+0xc06>
 80066fa:	bf00      	nop
 80066fc:	40004800 	.word	0x40004800
 8006700:	58024400 	.word	0x58024400
 8006704:	58020400 	.word	0x58020400
 8006708:	24001034 	.word	0x24001034
 800670c:	40020040 	.word	0x40020040
 8006710:	240010ac 	.word	0x240010ac
 8006714:	40020058 	.word	0x40020058
  else if(uartHandle->Instance==USART6)
 8006718:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800671c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a68      	ldr	r2, [pc, #416]	@ (80068c8 <HAL_UART_MspInit+0xc10>)
 8006726:	4293      	cmp	r3, r2
 8006728:	f040 80c9 	bne.w	80068be <HAL_UART_MspInit+0xc06>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800672c:	f04f 0201 	mov.w	r2, #1
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006738:	2300      	movs	r3, #0
 800673a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800673e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8006742:	4618      	mov	r0, r3
 8006744:	f006 f9e0 	bl	800cb08 <HAL_RCCEx_PeriphCLKConfig>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <HAL_UART_MspInit+0xa9a>
      Error_Handler();
 800674e:	f7fe fdd9 	bl	8005304 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006752:	4b5e      	ldr	r3, [pc, #376]	@ (80068cc <HAL_UART_MspInit+0xc14>)
 8006754:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006758:	4a5c      	ldr	r2, [pc, #368]	@ (80068cc <HAL_UART_MspInit+0xc14>)
 800675a:	f043 0320 	orr.w	r3, r3, #32
 800675e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006762:	4b5a      	ldr	r3, [pc, #360]	@ (80068cc <HAL_UART_MspInit+0xc14>)
 8006764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006768:	f003 0220 	and.w	r2, r3, #32
 800676c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006770:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800677a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800677e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006780:	4b52      	ldr	r3, [pc, #328]	@ (80068cc <HAL_UART_MspInit+0xc14>)
 8006782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006786:	4a51      	ldr	r2, [pc, #324]	@ (80068cc <HAL_UART_MspInit+0xc14>)
 8006788:	f043 0304 	orr.w	r3, r3, #4
 800678c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006790:	4b4e      	ldr	r3, [pc, #312]	@ (80068cc <HAL_UART_MspInit+0xc14>)
 8006792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006796:	f003 0204 	and.w	r2, r3, #4
 800679a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800679e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80067a8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80067ac:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80067ae:	23c0      	movs	r3, #192	@ 0xc0
 80067b0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067b4:	2302      	movs	r3, #2
 80067b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067c0:	2300      	movs	r3, #0
 80067c2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80067c6:	2307      	movs	r3, #7
 80067c8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067cc:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80067d0:	4619      	mov	r1, r3
 80067d2:	483f      	ldr	r0, [pc, #252]	@ (80068d0 <HAL_UART_MspInit+0xc18>)
 80067d4:	f004 ff52 	bl	800b67c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA1_Stream4;
 80067d8:	4b3e      	ldr	r3, [pc, #248]	@ (80068d4 <HAL_UART_MspInit+0xc1c>)
 80067da:	4a3f      	ldr	r2, [pc, #252]	@ (80068d8 <HAL_UART_MspInit+0xc20>)
 80067dc:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 80067de:	4b3d      	ldr	r3, [pc, #244]	@ (80068d4 <HAL_UART_MspInit+0xc1c>)
 80067e0:	2247      	movs	r2, #71	@ 0x47
 80067e2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067e4:	4b3b      	ldr	r3, [pc, #236]	@ (80068d4 <HAL_UART_MspInit+0xc1c>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067ea:	4b3a      	ldr	r3, [pc, #232]	@ (80068d4 <HAL_UART_MspInit+0xc1c>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80067f0:	4b38      	ldr	r3, [pc, #224]	@ (80068d4 <HAL_UART_MspInit+0xc1c>)
 80067f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80067f6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067f8:	4b36      	ldr	r3, [pc, #216]	@ (80068d4 <HAL_UART_MspInit+0xc1c>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067fe:	4b35      	ldr	r3, [pc, #212]	@ (80068d4 <HAL_UART_MspInit+0xc1c>)
 8006800:	2200      	movs	r2, #0
 8006802:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8006804:	4b33      	ldr	r3, [pc, #204]	@ (80068d4 <HAL_UART_MspInit+0xc1c>)
 8006806:	2200      	movs	r2, #0
 8006808:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800680a:	4b32      	ldr	r3, [pc, #200]	@ (80068d4 <HAL_UART_MspInit+0xc1c>)
 800680c:	2200      	movs	r2, #0
 800680e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006810:	4b30      	ldr	r3, [pc, #192]	@ (80068d4 <HAL_UART_MspInit+0xc1c>)
 8006812:	2200      	movs	r2, #0
 8006814:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006816:	482f      	ldr	r0, [pc, #188]	@ (80068d4 <HAL_UART_MspInit+0xc1c>)
 8006818:	f000 fb8c 	bl	8006f34 <HAL_DMA_Init>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <HAL_UART_MspInit+0xb6e>
      Error_Handler();
 8006822:	f7fe fd6f 	bl	8005304 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8006826:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800682a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a28      	ldr	r2, [pc, #160]	@ (80068d4 <HAL_UART_MspInit+0xc1c>)
 8006832:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006836:	4a27      	ldr	r2, [pc, #156]	@ (80068d4 <HAL_UART_MspInit+0xc1c>)
 8006838:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800683c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA1_Stream5;
 8006844:	4b25      	ldr	r3, [pc, #148]	@ (80068dc <HAL_UART_MspInit+0xc24>)
 8006846:	4a26      	ldr	r2, [pc, #152]	@ (80068e0 <HAL_UART_MspInit+0xc28>)
 8006848:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 800684a:	4b24      	ldr	r3, [pc, #144]	@ (80068dc <HAL_UART_MspInit+0xc24>)
 800684c:	2248      	movs	r2, #72	@ 0x48
 800684e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006850:	4b22      	ldr	r3, [pc, #136]	@ (80068dc <HAL_UART_MspInit+0xc24>)
 8006852:	2240      	movs	r2, #64	@ 0x40
 8006854:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006856:	4b21      	ldr	r3, [pc, #132]	@ (80068dc <HAL_UART_MspInit+0xc24>)
 8006858:	2200      	movs	r2, #0
 800685a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800685c:	4b1f      	ldr	r3, [pc, #124]	@ (80068dc <HAL_UART_MspInit+0xc24>)
 800685e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006862:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006864:	4b1d      	ldr	r3, [pc, #116]	@ (80068dc <HAL_UART_MspInit+0xc24>)
 8006866:	2200      	movs	r2, #0
 8006868:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800686a:	4b1c      	ldr	r3, [pc, #112]	@ (80068dc <HAL_UART_MspInit+0xc24>)
 800686c:	2200      	movs	r2, #0
 800686e:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8006870:	4b1a      	ldr	r3, [pc, #104]	@ (80068dc <HAL_UART_MspInit+0xc24>)
 8006872:	2200      	movs	r2, #0
 8006874:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006876:	4b19      	ldr	r3, [pc, #100]	@ (80068dc <HAL_UART_MspInit+0xc24>)
 8006878:	2200      	movs	r2, #0
 800687a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800687c:	4b17      	ldr	r3, [pc, #92]	@ (80068dc <HAL_UART_MspInit+0xc24>)
 800687e:	2200      	movs	r2, #0
 8006880:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006882:	4816      	ldr	r0, [pc, #88]	@ (80068dc <HAL_UART_MspInit+0xc24>)
 8006884:	f000 fb56 	bl	8006f34 <HAL_DMA_Init>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <HAL_UART_MspInit+0xbda>
      Error_Handler();
 800688e:	f7fe fd39 	bl	8005304 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8006892:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006896:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a0f      	ldr	r2, [pc, #60]	@ (80068dc <HAL_UART_MspInit+0xc24>)
 800689e:	67da      	str	r2, [r3, #124]	@ 0x7c
 80068a0:	4a0e      	ldr	r2, [pc, #56]	@ (80068dc <HAL_UART_MspInit+0xc24>)
 80068a2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80068a6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80068ae:	2200      	movs	r2, #0
 80068b0:	2105      	movs	r1, #5
 80068b2:	2047      	movs	r0, #71	@ 0x47
 80068b4:	f000 fa9e 	bl	8006df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80068b8:	2047      	movs	r0, #71	@ 0x47
 80068ba:	f000 fab5 	bl	8006e28 <HAL_NVIC_EnableIRQ>
}
 80068be:	bf00      	nop
 80068c0:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	40011400 	.word	0x40011400
 80068cc:	58024400 	.word	0x58024400
 80068d0:	58020800 	.word	0x58020800
 80068d4:	24001124 	.word	0x24001124
 80068d8:	40020070 	.word	0x40020070
 80068dc:	2400119c 	.word	0x2400119c
 80068e0:	40020088 	.word	0x40020088

080068e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80068e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800691c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80068e8:	f7fe ff4a 	bl	8005780 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80068ec:	480c      	ldr	r0, [pc, #48]	@ (8006920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80068ee:	490d      	ldr	r1, [pc, #52]	@ (8006924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80068f0:	4a0d      	ldr	r2, [pc, #52]	@ (8006928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80068f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80068f4:	e002      	b.n	80068fc <LoopCopyDataInit>

080068f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80068f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80068f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80068fa:	3304      	adds	r3, #4

080068fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80068fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80068fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006900:	d3f9      	bcc.n	80068f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006902:	4a0a      	ldr	r2, [pc, #40]	@ (800692c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006904:	4c0a      	ldr	r4, [pc, #40]	@ (8006930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006908:	e001      	b.n	800690e <LoopFillZerobss>

0800690a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800690a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800690c:	3204      	adds	r2, #4

0800690e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800690e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006910:	d3fb      	bcc.n	800690a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006912:	f01e ff4d 	bl	80257b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006916:	f7fe fb6b 	bl	8004ff0 <main>
  bx  lr
 800691a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800691c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8006920:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006924:	240003e0 	.word	0x240003e0
  ldr r2, =_sidata
 8006928:	0802d61c 	.word	0x0802d61c
  ldr r2, =_sbss
 800692c:	240003e0 	.word	0x240003e0
  ldr r4, =_ebss
 8006930:	2400c110 	.word	0x2400c110

08006934 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006934:	e7fe      	b.n	8006934 <ADC3_IRQHandler>

08006936 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00b      	beq.n	800695e <LAN8742_RegisterBusIO+0x28>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d007      	beq.n	800695e <LAN8742_RegisterBusIO+0x28>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <LAN8742_RegisterBusIO+0x28>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d102      	bne.n	8006964 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800695e:	f04f 33ff 	mov.w	r3, #4294967295
 8006962:	e014      	b.n	800698e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800699a:	b580      	push	{r7, lr}
 800699c:	b086      	sub	sp, #24
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	2300      	movs	r3, #0
 80069a8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d139      	bne.n	8006a2a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2220      	movs	r2, #32
 80069c8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80069ca:	2300      	movs	r3, #0
 80069cc:	617b      	str	r3, [r7, #20]
 80069ce:	e01c      	b.n	8006a0a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	f107 020c 	add.w	r2, r7, #12
 80069d8:	2112      	movs	r1, #18
 80069da:	6978      	ldr	r0, [r7, #20]
 80069dc:	4798      	blx	r3
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	da03      	bge.n	80069ec <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80069e4:	f06f 0304 	mvn.w	r3, #4
 80069e8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80069ea:	e00b      	b.n	8006a04 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f003 031f 	and.w	r3, r3, #31
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d105      	bne.n	8006a04 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	613b      	str	r3, [r7, #16]
         break;
 8006a02:	e005      	b.n	8006a10 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	3301      	adds	r3, #1
 8006a08:	617b      	str	r3, [r7, #20]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2b1f      	cmp	r3, #31
 8006a0e:	d9df      	bls.n	80069d0 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b1f      	cmp	r3, #31
 8006a16:	d902      	bls.n	8006a1e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8006a18:	f06f 0302 	mvn.w	r3, #2
 8006a1c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d102      	bne.n	8006a2a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 }
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	6810      	ldr	r0, [r2, #0]
 8006a48:	f107 020c 	add.w	r2, r7, #12
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	4798      	blx	r3
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	da02      	bge.n	8006a5c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8006a56:	f06f 0304 	mvn.w	r3, #4
 8006a5a:	e06e      	b.n	8006b3a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6810      	ldr	r0, [r2, #0]
 8006a64:	f107 020c 	add.w	r2, r7, #12
 8006a68:	2101      	movs	r1, #1
 8006a6a:	4798      	blx	r3
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	da02      	bge.n	8006a78 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8006a72:	f06f 0304 	mvn.w	r3, #4
 8006a76:	e060      	b.n	8006b3a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e059      	b.n	8006b3a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	6810      	ldr	r0, [r2, #0]
 8006a8e:	f107 020c 	add.w	r2, r7, #12
 8006a92:	2100      	movs	r1, #0
 8006a94:	4798      	blx	r3
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	da02      	bge.n	8006aa2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8006a9c:	f06f 0304 	mvn.w	r3, #4
 8006aa0:	e04b      	b.n	8006b3a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d11b      	bne.n	8006ae4 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d006      	beq.n	8006ac4 <LAN8742_GetLinkState+0x90>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e03a      	b.n	8006b3a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e033      	b.n	8006b3a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8006adc:	2304      	movs	r3, #4
 8006ade:	e02c      	b.n	8006b3a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8006ae0:	2305      	movs	r3, #5
 8006ae2:	e02a      	b.n	8006b3a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	6810      	ldr	r0, [r2, #0]
 8006aec:	f107 020c 	add.w	r2, r7, #12
 8006af0:	211f      	movs	r1, #31
 8006af2:	4798      	blx	r3
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	da02      	bge.n	8006b00 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8006afa:	f06f 0304 	mvn.w	r3, #4
 8006afe:	e01c      	b.n	8006b3a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8006b0a:	2306      	movs	r3, #6
 8006b0c:	e015      	b.n	8006b3a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f003 031c 	and.w	r3, r3, #28
 8006b14:	2b18      	cmp	r3, #24
 8006b16:	d101      	bne.n	8006b1c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e00e      	b.n	8006b3a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f003 031c 	and.w	r3, r3, #28
 8006b22:	2b08      	cmp	r3, #8
 8006b24:	d101      	bne.n	8006b2a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e007      	b.n	8006b3a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f003 031c 	and.w	r3, r3, #28
 8006b30:	2b14      	cmp	r3, #20
 8006b32:	d101      	bne.n	8006b38 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8006b34:	2304      	movs	r3, #4
 8006b36:	e000      	b.n	8006b3a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8006b38:	2305      	movs	r3, #5
    }
  }
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
	...

08006b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b4a:	2003      	movs	r0, #3
 8006b4c:	f000 f947 	bl	8006dde <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b50:	f005 fdc2 	bl	800c6d8 <HAL_RCC_GetSysClockFreq>
 8006b54:	4602      	mov	r2, r0
 8006b56:	4b15      	ldr	r3, [pc, #84]	@ (8006bac <HAL_Init+0x68>)
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	0a1b      	lsrs	r3, r3, #8
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	4913      	ldr	r1, [pc, #76]	@ (8006bb0 <HAL_Init+0x6c>)
 8006b62:	5ccb      	ldrb	r3, [r1, r3]
 8006b64:	f003 031f 	and.w	r3, r3, #31
 8006b68:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8006bac <HAL_Init+0x68>)
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	4a0e      	ldr	r2, [pc, #56]	@ (8006bb0 <HAL_Init+0x6c>)
 8006b78:	5cd3      	ldrb	r3, [r2, r3]
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	fa22 f303 	lsr.w	r3, r2, r3
 8006b84:	4a0b      	ldr	r2, [pc, #44]	@ (8006bb4 <HAL_Init+0x70>)
 8006b86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b88:	4a0b      	ldr	r2, [pc, #44]	@ (8006bb8 <HAL_Init+0x74>)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006b8e:	200f      	movs	r0, #15
 8006b90:	f7fe fbdc 	bl	800534c <HAL_InitTick>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e002      	b.n	8006ba4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006b9e:	f7fe fbb7 	bl	8005310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	58024400 	.word	0x58024400
 8006bb0:	0802cfb0 	.word	0x0802cfb0
 8006bb4:	240001e8 	.word	0x240001e8
 8006bb8:	240001e4 	.word	0x240001e4

08006bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006bc0:	4b06      	ldr	r3, [pc, #24]	@ (8006bdc <HAL_IncTick+0x20>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	4b06      	ldr	r3, [pc, #24]	@ (8006be0 <HAL_IncTick+0x24>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4413      	add	r3, r2
 8006bcc:	4a04      	ldr	r2, [pc, #16]	@ (8006be0 <HAL_IncTick+0x24>)
 8006bce:	6013      	str	r3, [r2, #0]
}
 8006bd0:	bf00      	nop
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	240001f0 	.word	0x240001f0
 8006be0:	24001214 	.word	0x24001214

08006be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
  return uwTick;
 8006be8:	4b03      	ldr	r3, [pc, #12]	@ (8006bf8 <HAL_GetTick+0x14>)
 8006bea:	681b      	ldr	r3, [r3, #0]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	24001214 	.word	0x24001214

08006bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c04:	f7ff ffee 	bl	8006be4 <HAL_GetTick>
 8006c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c14:	d005      	beq.n	8006c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c16:	4b0a      	ldr	r3, [pc, #40]	@ (8006c40 <HAL_Delay+0x44>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006c22:	bf00      	nop
 8006c24:	f7ff ffde 	bl	8006be4 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d8f7      	bhi.n	8006c24 <HAL_Delay+0x28>
  {
  }
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	240001f0 	.word	0x240001f0

08006c44 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006c44:	b480      	push	{r7}
 8006c46:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006c48:	4b03      	ldr	r3, [pc, #12]	@ (8006c58 <HAL_GetREVID+0x14>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	0c1b      	lsrs	r3, r3, #16
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	5c001000 	.word	0x5c001000

08006c5c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8006c64:	4b06      	ldr	r3, [pc, #24]	@ (8006c80 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8006c6c:	4904      	ldr	r1, [pc, #16]	@ (8006c80 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	604b      	str	r3, [r1, #4]
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	58000400 	.word	0x58000400

08006c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f003 0307 	and.w	r3, r3, #7
 8006c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c94:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc4 <__NVIC_SetPriorityGrouping+0x40>)
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006cac:	4b06      	ldr	r3, [pc, #24]	@ (8006cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006cb2:	4a04      	ldr	r2, [pc, #16]	@ (8006cc4 <__NVIC_SetPriorityGrouping+0x40>)
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	60d3      	str	r3, [r2, #12]
}
 8006cb8:	bf00      	nop
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	e000ed00 	.word	0xe000ed00
 8006cc8:	05fa0000 	.word	0x05fa0000

08006ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cd0:	4b04      	ldr	r3, [pc, #16]	@ (8006ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	0a1b      	lsrs	r3, r3, #8
 8006cd6:	f003 0307 	and.w	r3, r3, #7
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	e000ed00 	.word	0xe000ed00

08006ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	db0b      	blt.n	8006d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cfa:	88fb      	ldrh	r3, [r7, #6]
 8006cfc:	f003 021f 	and.w	r2, r3, #31
 8006d00:	4907      	ldr	r1, [pc, #28]	@ (8006d20 <__NVIC_EnableIRQ+0x38>)
 8006d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d06:	095b      	lsrs	r3, r3, #5
 8006d08:	2001      	movs	r0, #1
 8006d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8006d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	e000e100 	.word	0xe000e100

08006d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	6039      	str	r1, [r7, #0]
 8006d2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	db0a      	blt.n	8006d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	490c      	ldr	r1, [pc, #48]	@ (8006d70 <__NVIC_SetPriority+0x4c>)
 8006d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d42:	0112      	lsls	r2, r2, #4
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	440b      	add	r3, r1
 8006d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d4c:	e00a      	b.n	8006d64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	4908      	ldr	r1, [pc, #32]	@ (8006d74 <__NVIC_SetPriority+0x50>)
 8006d54:	88fb      	ldrh	r3, [r7, #6]
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	3b04      	subs	r3, #4
 8006d5c:	0112      	lsls	r2, r2, #4
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	440b      	add	r3, r1
 8006d62:	761a      	strb	r2, [r3, #24]
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	e000e100 	.word	0xe000e100
 8006d74:	e000ed00 	.word	0xe000ed00

08006d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b089      	sub	sp, #36	@ 0x24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	f1c3 0307 	rsb	r3, r3, #7
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	bf28      	it	cs
 8006d96:	2304      	movcs	r3, #4
 8006d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	2b06      	cmp	r3, #6
 8006da0:	d902      	bls.n	8006da8 <NVIC_EncodePriority+0x30>
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	3b03      	subs	r3, #3
 8006da6:	e000      	b.n	8006daa <NVIC_EncodePriority+0x32>
 8006da8:	2300      	movs	r3, #0
 8006daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dac:	f04f 32ff 	mov.w	r2, #4294967295
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	fa02 f303 	lsl.w	r3, r2, r3
 8006db6:	43da      	mvns	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	401a      	ands	r2, r3
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dca:	43d9      	mvns	r1, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dd0:	4313      	orrs	r3, r2
         );
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3724      	adds	r7, #36	@ 0x24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7ff ff4c 	bl	8006c84 <__NVIC_SetPriorityGrouping>
}
 8006dec:	bf00      	nop
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
 8006e00:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006e02:	f7ff ff63 	bl	8006ccc <__NVIC_GetPriorityGrouping>
 8006e06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	68b9      	ldr	r1, [r7, #8]
 8006e0c:	6978      	ldr	r0, [r7, #20]
 8006e0e:	f7ff ffb3 	bl	8006d78 <NVIC_EncodePriority>
 8006e12:	4602      	mov	r2, r0
 8006e14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e18:	4611      	mov	r1, r2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff ff82 	bl	8006d24 <__NVIC_SetPriority>
}
 8006e20:	bf00      	nop
 8006e22:	3718      	adds	r7, #24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	4603      	mov	r3, r0
 8006e30:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff ff56 	bl	8006ce8 <__NVIC_EnableIRQ>
}
 8006e3c:	bf00      	nop
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006e44:	b480      	push	{r7}
 8006e46:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006e48:	f3bf 8f5f 	dmb	sy
}
 8006e4c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006e4e:	4b07      	ldr	r3, [pc, #28]	@ (8006e6c <HAL_MPU_Disable+0x28>)
 8006e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e52:	4a06      	ldr	r2, [pc, #24]	@ (8006e6c <HAL_MPU_Disable+0x28>)
 8006e54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e58:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006e5a:	4b05      	ldr	r3, [pc, #20]	@ (8006e70 <HAL_MPU_Disable+0x2c>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	605a      	str	r2, [r3, #4]
}
 8006e60:	bf00      	nop
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	e000ed00 	.word	0xe000ed00
 8006e70:	e000ed90 	.word	0xe000ed90

08006e74 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006e7c:	4a0b      	ldr	r2, [pc, #44]	@ (8006eac <HAL_MPU_Enable+0x38>)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f043 0301 	orr.w	r3, r3, #1
 8006e84:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006e86:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb0 <HAL_MPU_Enable+0x3c>)
 8006e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8a:	4a09      	ldr	r2, [pc, #36]	@ (8006eb0 <HAL_MPU_Enable+0x3c>)
 8006e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e90:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006e92:	f3bf 8f4f 	dsb	sy
}
 8006e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006e98:	f3bf 8f6f 	isb	sy
}
 8006e9c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006e9e:	bf00      	nop
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	e000ed90 	.word	0xe000ed90
 8006eb0:	e000ed00 	.word	0xe000ed00

08006eb4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	785a      	ldrb	r2, [r3, #1]
 8006ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f30 <HAL_MPU_ConfigRegion+0x7c>)
 8006ec2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f30 <HAL_MPU_ConfigRegion+0x7c>)
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	4a19      	ldr	r2, [pc, #100]	@ (8006f30 <HAL_MPU_ConfigRegion+0x7c>)
 8006eca:	f023 0301 	bic.w	r3, r3, #1
 8006ece:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006ed0:	4a17      	ldr	r2, [pc, #92]	@ (8006f30 <HAL_MPU_ConfigRegion+0x7c>)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	7b1b      	ldrb	r3, [r3, #12]
 8006edc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	7adb      	ldrb	r3, [r3, #11]
 8006ee2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ee4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	7a9b      	ldrb	r3, [r3, #10]
 8006eea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006eec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	7b5b      	ldrb	r3, [r3, #13]
 8006ef2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006ef4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	7b9b      	ldrb	r3, [r3, #14]
 8006efa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006efc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	7bdb      	ldrb	r3, [r3, #15]
 8006f02:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006f04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	7a5b      	ldrb	r3, [r3, #9]
 8006f0a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006f0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	7a1b      	ldrb	r3, [r3, #8]
 8006f12:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006f14:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	7812      	ldrb	r2, [r2, #0]
 8006f1a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006f1c:	4a04      	ldr	r2, [pc, #16]	@ (8006f30 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f1e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006f20:	6113      	str	r3, [r2, #16]
}
 8006f22:	bf00      	nop
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	e000ed90 	.word	0xe000ed90

08006f34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006f3c:	f7ff fe52 	bl	8006be4 <HAL_GetTick>
 8006f40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e316      	b.n	800757a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a66      	ldr	r2, [pc, #408]	@ (80070ec <HAL_DMA_Init+0x1b8>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d04a      	beq.n	8006fec <HAL_DMA_Init+0xb8>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a65      	ldr	r2, [pc, #404]	@ (80070f0 <HAL_DMA_Init+0x1bc>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d045      	beq.n	8006fec <HAL_DMA_Init+0xb8>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a63      	ldr	r2, [pc, #396]	@ (80070f4 <HAL_DMA_Init+0x1c0>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d040      	beq.n	8006fec <HAL_DMA_Init+0xb8>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a62      	ldr	r2, [pc, #392]	@ (80070f8 <HAL_DMA_Init+0x1c4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d03b      	beq.n	8006fec <HAL_DMA_Init+0xb8>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a60      	ldr	r2, [pc, #384]	@ (80070fc <HAL_DMA_Init+0x1c8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d036      	beq.n	8006fec <HAL_DMA_Init+0xb8>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a5f      	ldr	r2, [pc, #380]	@ (8007100 <HAL_DMA_Init+0x1cc>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d031      	beq.n	8006fec <HAL_DMA_Init+0xb8>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a5d      	ldr	r2, [pc, #372]	@ (8007104 <HAL_DMA_Init+0x1d0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d02c      	beq.n	8006fec <HAL_DMA_Init+0xb8>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a5c      	ldr	r2, [pc, #368]	@ (8007108 <HAL_DMA_Init+0x1d4>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d027      	beq.n	8006fec <HAL_DMA_Init+0xb8>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a5a      	ldr	r2, [pc, #360]	@ (800710c <HAL_DMA_Init+0x1d8>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d022      	beq.n	8006fec <HAL_DMA_Init+0xb8>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a59      	ldr	r2, [pc, #356]	@ (8007110 <HAL_DMA_Init+0x1dc>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d01d      	beq.n	8006fec <HAL_DMA_Init+0xb8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a57      	ldr	r2, [pc, #348]	@ (8007114 <HAL_DMA_Init+0x1e0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d018      	beq.n	8006fec <HAL_DMA_Init+0xb8>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a56      	ldr	r2, [pc, #344]	@ (8007118 <HAL_DMA_Init+0x1e4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d013      	beq.n	8006fec <HAL_DMA_Init+0xb8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a54      	ldr	r2, [pc, #336]	@ (800711c <HAL_DMA_Init+0x1e8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00e      	beq.n	8006fec <HAL_DMA_Init+0xb8>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a53      	ldr	r2, [pc, #332]	@ (8007120 <HAL_DMA_Init+0x1ec>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d009      	beq.n	8006fec <HAL_DMA_Init+0xb8>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a51      	ldr	r2, [pc, #324]	@ (8007124 <HAL_DMA_Init+0x1f0>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d004      	beq.n	8006fec <HAL_DMA_Init+0xb8>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a50      	ldr	r2, [pc, #320]	@ (8007128 <HAL_DMA_Init+0x1f4>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d101      	bne.n	8006ff0 <HAL_DMA_Init+0xbc>
 8006fec:	2301      	movs	r3, #1
 8006fee:	e000      	b.n	8006ff2 <HAL_DMA_Init+0xbe>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 813b 	beq.w	800726e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a37      	ldr	r2, [pc, #220]	@ (80070ec <HAL_DMA_Init+0x1b8>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d04a      	beq.n	80070a8 <HAL_DMA_Init+0x174>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a36      	ldr	r2, [pc, #216]	@ (80070f0 <HAL_DMA_Init+0x1bc>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d045      	beq.n	80070a8 <HAL_DMA_Init+0x174>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a34      	ldr	r2, [pc, #208]	@ (80070f4 <HAL_DMA_Init+0x1c0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d040      	beq.n	80070a8 <HAL_DMA_Init+0x174>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a33      	ldr	r2, [pc, #204]	@ (80070f8 <HAL_DMA_Init+0x1c4>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d03b      	beq.n	80070a8 <HAL_DMA_Init+0x174>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a31      	ldr	r2, [pc, #196]	@ (80070fc <HAL_DMA_Init+0x1c8>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d036      	beq.n	80070a8 <HAL_DMA_Init+0x174>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a30      	ldr	r2, [pc, #192]	@ (8007100 <HAL_DMA_Init+0x1cc>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d031      	beq.n	80070a8 <HAL_DMA_Init+0x174>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a2e      	ldr	r2, [pc, #184]	@ (8007104 <HAL_DMA_Init+0x1d0>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d02c      	beq.n	80070a8 <HAL_DMA_Init+0x174>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a2d      	ldr	r2, [pc, #180]	@ (8007108 <HAL_DMA_Init+0x1d4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d027      	beq.n	80070a8 <HAL_DMA_Init+0x174>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a2b      	ldr	r2, [pc, #172]	@ (800710c <HAL_DMA_Init+0x1d8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d022      	beq.n	80070a8 <HAL_DMA_Init+0x174>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a2a      	ldr	r2, [pc, #168]	@ (8007110 <HAL_DMA_Init+0x1dc>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d01d      	beq.n	80070a8 <HAL_DMA_Init+0x174>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a28      	ldr	r2, [pc, #160]	@ (8007114 <HAL_DMA_Init+0x1e0>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d018      	beq.n	80070a8 <HAL_DMA_Init+0x174>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a27      	ldr	r2, [pc, #156]	@ (8007118 <HAL_DMA_Init+0x1e4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d013      	beq.n	80070a8 <HAL_DMA_Init+0x174>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a25      	ldr	r2, [pc, #148]	@ (800711c <HAL_DMA_Init+0x1e8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00e      	beq.n	80070a8 <HAL_DMA_Init+0x174>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a24      	ldr	r2, [pc, #144]	@ (8007120 <HAL_DMA_Init+0x1ec>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d009      	beq.n	80070a8 <HAL_DMA_Init+0x174>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a22      	ldr	r2, [pc, #136]	@ (8007124 <HAL_DMA_Init+0x1f0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d004      	beq.n	80070a8 <HAL_DMA_Init+0x174>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a21      	ldr	r2, [pc, #132]	@ (8007128 <HAL_DMA_Init+0x1f4>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d108      	bne.n	80070ba <HAL_DMA_Init+0x186>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0201 	bic.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	e007      	b.n	80070ca <HAL_DMA_Init+0x196>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0201 	bic.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80070ca:	e02f      	b.n	800712c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80070cc:	f7ff fd8a 	bl	8006be4 <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	2b05      	cmp	r3, #5
 80070d8:	d928      	bls.n	800712c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2220      	movs	r2, #32
 80070de:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2203      	movs	r2, #3
 80070e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e246      	b.n	800757a <HAL_DMA_Init+0x646>
 80070ec:	40020010 	.word	0x40020010
 80070f0:	40020028 	.word	0x40020028
 80070f4:	40020040 	.word	0x40020040
 80070f8:	40020058 	.word	0x40020058
 80070fc:	40020070 	.word	0x40020070
 8007100:	40020088 	.word	0x40020088
 8007104:	400200a0 	.word	0x400200a0
 8007108:	400200b8 	.word	0x400200b8
 800710c:	40020410 	.word	0x40020410
 8007110:	40020428 	.word	0x40020428
 8007114:	40020440 	.word	0x40020440
 8007118:	40020458 	.word	0x40020458
 800711c:	40020470 	.word	0x40020470
 8007120:	40020488 	.word	0x40020488
 8007124:	400204a0 	.word	0x400204a0
 8007128:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1c8      	bne.n	80070cc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	4b83      	ldr	r3, [pc, #524]	@ (8007354 <HAL_DMA_Init+0x420>)
 8007146:	4013      	ands	r3, r2
 8007148:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007152:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800715e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800716a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	4313      	orrs	r3, r2
 8007176:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800717c:	2b04      	cmp	r3, #4
 800717e:	d107      	bne.n	8007190 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007188:	4313      	orrs	r3, r2
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	4313      	orrs	r3, r2
 800718e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007190:	4b71      	ldr	r3, [pc, #452]	@ (8007358 <HAL_DMA_Init+0x424>)
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	4b71      	ldr	r3, [pc, #452]	@ (800735c <HAL_DMA_Init+0x428>)
 8007196:	4013      	ands	r3, r2
 8007198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800719c:	d328      	bcc.n	80071f0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	2b28      	cmp	r3, #40	@ 0x28
 80071a4:	d903      	bls.n	80071ae <HAL_DMA_Init+0x27a>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80071ac:	d917      	bls.n	80071de <HAL_DMA_Init+0x2aa>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80071b4:	d903      	bls.n	80071be <HAL_DMA_Init+0x28a>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	2b42      	cmp	r3, #66	@ 0x42
 80071bc:	d90f      	bls.n	80071de <HAL_DMA_Init+0x2aa>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	2b46      	cmp	r3, #70	@ 0x46
 80071c4:	d903      	bls.n	80071ce <HAL_DMA_Init+0x29a>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	2b48      	cmp	r3, #72	@ 0x48
 80071cc:	d907      	bls.n	80071de <HAL_DMA_Init+0x2aa>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	2b4e      	cmp	r3, #78	@ 0x4e
 80071d4:	d905      	bls.n	80071e2 <HAL_DMA_Init+0x2ae>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	2b52      	cmp	r3, #82	@ 0x52
 80071dc:	d801      	bhi.n	80071e2 <HAL_DMA_Init+0x2ae>
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <HAL_DMA_Init+0x2b0>
 80071e2:	2300      	movs	r3, #0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071ee:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f023 0307 	bic.w	r3, r3, #7
 8007206:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	4313      	orrs	r3, r2
 8007210:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007216:	2b04      	cmp	r3, #4
 8007218:	d117      	bne.n	800724a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00e      	beq.n	800724a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f002 fb33 	bl	8009898 <DMA_CheckFifoParam>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d008      	beq.n	800724a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2240      	movs	r2, #64	@ 0x40
 800723c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e197      	b.n	800757a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f002 fa6e 	bl	8009734 <DMA_CalcBaseAndBitshift>
 8007258:	4603      	mov	r3, r0
 800725a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007260:	f003 031f 	and.w	r3, r3, #31
 8007264:	223f      	movs	r2, #63	@ 0x3f
 8007266:	409a      	lsls	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	609a      	str	r2, [r3, #8]
 800726c:	e0cd      	b.n	800740a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a3b      	ldr	r2, [pc, #236]	@ (8007360 <HAL_DMA_Init+0x42c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d022      	beq.n	80072be <HAL_DMA_Init+0x38a>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a39      	ldr	r2, [pc, #228]	@ (8007364 <HAL_DMA_Init+0x430>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d01d      	beq.n	80072be <HAL_DMA_Init+0x38a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a38      	ldr	r2, [pc, #224]	@ (8007368 <HAL_DMA_Init+0x434>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d018      	beq.n	80072be <HAL_DMA_Init+0x38a>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a36      	ldr	r2, [pc, #216]	@ (800736c <HAL_DMA_Init+0x438>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d013      	beq.n	80072be <HAL_DMA_Init+0x38a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a35      	ldr	r2, [pc, #212]	@ (8007370 <HAL_DMA_Init+0x43c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00e      	beq.n	80072be <HAL_DMA_Init+0x38a>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a33      	ldr	r2, [pc, #204]	@ (8007374 <HAL_DMA_Init+0x440>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d009      	beq.n	80072be <HAL_DMA_Init+0x38a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a32      	ldr	r2, [pc, #200]	@ (8007378 <HAL_DMA_Init+0x444>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d004      	beq.n	80072be <HAL_DMA_Init+0x38a>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a30      	ldr	r2, [pc, #192]	@ (800737c <HAL_DMA_Init+0x448>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d101      	bne.n	80072c2 <HAL_DMA_Init+0x38e>
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <HAL_DMA_Init+0x390>
 80072c2:	2300      	movs	r3, #0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 8097 	beq.w	80073f8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a24      	ldr	r2, [pc, #144]	@ (8007360 <HAL_DMA_Init+0x42c>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d021      	beq.n	8007318 <HAL_DMA_Init+0x3e4>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a22      	ldr	r2, [pc, #136]	@ (8007364 <HAL_DMA_Init+0x430>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d01c      	beq.n	8007318 <HAL_DMA_Init+0x3e4>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a21      	ldr	r2, [pc, #132]	@ (8007368 <HAL_DMA_Init+0x434>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d017      	beq.n	8007318 <HAL_DMA_Init+0x3e4>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a1f      	ldr	r2, [pc, #124]	@ (800736c <HAL_DMA_Init+0x438>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d012      	beq.n	8007318 <HAL_DMA_Init+0x3e4>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a1e      	ldr	r2, [pc, #120]	@ (8007370 <HAL_DMA_Init+0x43c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d00d      	beq.n	8007318 <HAL_DMA_Init+0x3e4>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a1c      	ldr	r2, [pc, #112]	@ (8007374 <HAL_DMA_Init+0x440>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d008      	beq.n	8007318 <HAL_DMA_Init+0x3e4>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a1b      	ldr	r2, [pc, #108]	@ (8007378 <HAL_DMA_Init+0x444>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d003      	beq.n	8007318 <HAL_DMA_Init+0x3e4>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a19      	ldr	r2, [pc, #100]	@ (800737c <HAL_DMA_Init+0x448>)
 8007316:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	4b13      	ldr	r3, [pc, #76]	@ (8007380 <HAL_DMA_Init+0x44c>)
 8007334:	4013      	ands	r3, r2
 8007336:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	2b40      	cmp	r3, #64	@ 0x40
 800733e:	d021      	beq.n	8007384 <HAL_DMA_Init+0x450>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	2b80      	cmp	r3, #128	@ 0x80
 8007346:	d102      	bne.n	800734e <HAL_DMA_Init+0x41a>
 8007348:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800734c:	e01b      	b.n	8007386 <HAL_DMA_Init+0x452>
 800734e:	2300      	movs	r3, #0
 8007350:	e019      	b.n	8007386 <HAL_DMA_Init+0x452>
 8007352:	bf00      	nop
 8007354:	fe10803f 	.word	0xfe10803f
 8007358:	5c001000 	.word	0x5c001000
 800735c:	ffff0000 	.word	0xffff0000
 8007360:	58025408 	.word	0x58025408
 8007364:	5802541c 	.word	0x5802541c
 8007368:	58025430 	.word	0x58025430
 800736c:	58025444 	.word	0x58025444
 8007370:	58025458 	.word	0x58025458
 8007374:	5802546c 	.word	0x5802546c
 8007378:	58025480 	.word	0x58025480
 800737c:	58025494 	.word	0x58025494
 8007380:	fffe000f 	.word	0xfffe000f
 8007384:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	68d2      	ldr	r2, [r2, #12]
 800738a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800738c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007394:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800739c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80073a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80073ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80073b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	4b6e      	ldr	r3, [pc, #440]	@ (8007584 <HAL_DMA_Init+0x650>)
 80073cc:	4413      	add	r3, r2
 80073ce:	4a6e      	ldr	r2, [pc, #440]	@ (8007588 <HAL_DMA_Init+0x654>)
 80073d0:	fba2 2303 	umull	r2, r3, r2, r3
 80073d4:	091b      	lsrs	r3, r3, #4
 80073d6:	009a      	lsls	r2, r3, #2
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f002 f9a9 	bl	8009734 <DMA_CalcBaseAndBitshift>
 80073e2:	4603      	mov	r3, r0
 80073e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073ea:	f003 031f 	and.w	r3, r3, #31
 80073ee:	2201      	movs	r2, #1
 80073f0:	409a      	lsls	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	605a      	str	r2, [r3, #4]
 80073f6:	e008      	b.n	800740a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2240      	movs	r2, #64	@ 0x40
 80073fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2203      	movs	r2, #3
 8007402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e0b7      	b.n	800757a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a5f      	ldr	r2, [pc, #380]	@ (800758c <HAL_DMA_Init+0x658>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d072      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a5d      	ldr	r2, [pc, #372]	@ (8007590 <HAL_DMA_Init+0x65c>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d06d      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a5c      	ldr	r2, [pc, #368]	@ (8007594 <HAL_DMA_Init+0x660>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d068      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a5a      	ldr	r2, [pc, #360]	@ (8007598 <HAL_DMA_Init+0x664>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d063      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a59      	ldr	r2, [pc, #356]	@ (800759c <HAL_DMA_Init+0x668>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d05e      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a57      	ldr	r2, [pc, #348]	@ (80075a0 <HAL_DMA_Init+0x66c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d059      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a56      	ldr	r2, [pc, #344]	@ (80075a4 <HAL_DMA_Init+0x670>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d054      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a54      	ldr	r2, [pc, #336]	@ (80075a8 <HAL_DMA_Init+0x674>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d04f      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a53      	ldr	r2, [pc, #332]	@ (80075ac <HAL_DMA_Init+0x678>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d04a      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a51      	ldr	r2, [pc, #324]	@ (80075b0 <HAL_DMA_Init+0x67c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d045      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a50      	ldr	r2, [pc, #320]	@ (80075b4 <HAL_DMA_Init+0x680>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d040      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a4e      	ldr	r2, [pc, #312]	@ (80075b8 <HAL_DMA_Init+0x684>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d03b      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a4d      	ldr	r2, [pc, #308]	@ (80075bc <HAL_DMA_Init+0x688>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d036      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a4b      	ldr	r2, [pc, #300]	@ (80075c0 <HAL_DMA_Init+0x68c>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d031      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a4a      	ldr	r2, [pc, #296]	@ (80075c4 <HAL_DMA_Init+0x690>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d02c      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a48      	ldr	r2, [pc, #288]	@ (80075c8 <HAL_DMA_Init+0x694>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d027      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a47      	ldr	r2, [pc, #284]	@ (80075cc <HAL_DMA_Init+0x698>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d022      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a45      	ldr	r2, [pc, #276]	@ (80075d0 <HAL_DMA_Init+0x69c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d01d      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a44      	ldr	r2, [pc, #272]	@ (80075d4 <HAL_DMA_Init+0x6a0>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d018      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a42      	ldr	r2, [pc, #264]	@ (80075d8 <HAL_DMA_Init+0x6a4>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d013      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a41      	ldr	r2, [pc, #260]	@ (80075dc <HAL_DMA_Init+0x6a8>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d00e      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a3f      	ldr	r2, [pc, #252]	@ (80075e0 <HAL_DMA_Init+0x6ac>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d009      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a3e      	ldr	r2, [pc, #248]	@ (80075e4 <HAL_DMA_Init+0x6b0>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d004      	beq.n	80074fa <HAL_DMA_Init+0x5c6>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a3c      	ldr	r2, [pc, #240]	@ (80075e8 <HAL_DMA_Init+0x6b4>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d101      	bne.n	80074fe <HAL_DMA_Init+0x5ca>
 80074fa:	2301      	movs	r3, #1
 80074fc:	e000      	b.n	8007500 <HAL_DMA_Init+0x5cc>
 80074fe:	2300      	movs	r3, #0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d032      	beq.n	800756a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f002 fa43 	bl	8009990 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	2b80      	cmp	r3, #128	@ 0x80
 8007510:	d102      	bne.n	8007518 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007520:	b2d2      	uxtb	r2, r2
 8007522:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800752c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d010      	beq.n	8007558 <HAL_DMA_Init+0x624>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	2b08      	cmp	r3, #8
 800753c:	d80c      	bhi.n	8007558 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f002 fac0 	bl	8009ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007548:	2200      	movs	r2, #0
 800754a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007554:	605a      	str	r2, [r3, #4]
 8007556:	e008      	b.n	800756a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	a7fdabf8 	.word	0xa7fdabf8
 8007588:	cccccccd 	.word	0xcccccccd
 800758c:	40020010 	.word	0x40020010
 8007590:	40020028 	.word	0x40020028
 8007594:	40020040 	.word	0x40020040
 8007598:	40020058 	.word	0x40020058
 800759c:	40020070 	.word	0x40020070
 80075a0:	40020088 	.word	0x40020088
 80075a4:	400200a0 	.word	0x400200a0
 80075a8:	400200b8 	.word	0x400200b8
 80075ac:	40020410 	.word	0x40020410
 80075b0:	40020428 	.word	0x40020428
 80075b4:	40020440 	.word	0x40020440
 80075b8:	40020458 	.word	0x40020458
 80075bc:	40020470 	.word	0x40020470
 80075c0:	40020488 	.word	0x40020488
 80075c4:	400204a0 	.word	0x400204a0
 80075c8:	400204b8 	.word	0x400204b8
 80075cc:	58025408 	.word	0x58025408
 80075d0:	5802541c 	.word	0x5802541c
 80075d4:	58025430 	.word	0x58025430
 80075d8:	58025444 	.word	0x58025444
 80075dc:	58025458 	.word	0x58025458
 80075e0:	5802546c 	.word	0x5802546c
 80075e4:	58025480 	.word	0x58025480
 80075e8:	58025494 	.word	0x58025494

080075ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
 80075f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e226      	b.n	8007a56 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800760e:	2b01      	cmp	r3, #1
 8007610:	d101      	bne.n	8007616 <HAL_DMA_Start_IT+0x2a>
 8007612:	2302      	movs	r3, #2
 8007614:	e21f      	b.n	8007a56 <HAL_DMA_Start_IT+0x46a>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b01      	cmp	r3, #1
 8007628:	f040 820a 	bne.w	8007a40 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a68      	ldr	r2, [pc, #416]	@ (80077e0 <HAL_DMA_Start_IT+0x1f4>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d04a      	beq.n	80076da <HAL_DMA_Start_IT+0xee>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a66      	ldr	r2, [pc, #408]	@ (80077e4 <HAL_DMA_Start_IT+0x1f8>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d045      	beq.n	80076da <HAL_DMA_Start_IT+0xee>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a65      	ldr	r2, [pc, #404]	@ (80077e8 <HAL_DMA_Start_IT+0x1fc>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d040      	beq.n	80076da <HAL_DMA_Start_IT+0xee>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a63      	ldr	r2, [pc, #396]	@ (80077ec <HAL_DMA_Start_IT+0x200>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d03b      	beq.n	80076da <HAL_DMA_Start_IT+0xee>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a62      	ldr	r2, [pc, #392]	@ (80077f0 <HAL_DMA_Start_IT+0x204>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d036      	beq.n	80076da <HAL_DMA_Start_IT+0xee>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a60      	ldr	r2, [pc, #384]	@ (80077f4 <HAL_DMA_Start_IT+0x208>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d031      	beq.n	80076da <HAL_DMA_Start_IT+0xee>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a5f      	ldr	r2, [pc, #380]	@ (80077f8 <HAL_DMA_Start_IT+0x20c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d02c      	beq.n	80076da <HAL_DMA_Start_IT+0xee>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a5d      	ldr	r2, [pc, #372]	@ (80077fc <HAL_DMA_Start_IT+0x210>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d027      	beq.n	80076da <HAL_DMA_Start_IT+0xee>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a5c      	ldr	r2, [pc, #368]	@ (8007800 <HAL_DMA_Start_IT+0x214>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d022      	beq.n	80076da <HAL_DMA_Start_IT+0xee>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a5a      	ldr	r2, [pc, #360]	@ (8007804 <HAL_DMA_Start_IT+0x218>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d01d      	beq.n	80076da <HAL_DMA_Start_IT+0xee>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a59      	ldr	r2, [pc, #356]	@ (8007808 <HAL_DMA_Start_IT+0x21c>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d018      	beq.n	80076da <HAL_DMA_Start_IT+0xee>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a57      	ldr	r2, [pc, #348]	@ (800780c <HAL_DMA_Start_IT+0x220>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d013      	beq.n	80076da <HAL_DMA_Start_IT+0xee>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a56      	ldr	r2, [pc, #344]	@ (8007810 <HAL_DMA_Start_IT+0x224>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d00e      	beq.n	80076da <HAL_DMA_Start_IT+0xee>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a54      	ldr	r2, [pc, #336]	@ (8007814 <HAL_DMA_Start_IT+0x228>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d009      	beq.n	80076da <HAL_DMA_Start_IT+0xee>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a53      	ldr	r2, [pc, #332]	@ (8007818 <HAL_DMA_Start_IT+0x22c>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d004      	beq.n	80076da <HAL_DMA_Start_IT+0xee>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a51      	ldr	r2, [pc, #324]	@ (800781c <HAL_DMA_Start_IT+0x230>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d108      	bne.n	80076ec <HAL_DMA_Start_IT+0x100>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0201 	bic.w	r2, r2, #1
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	e007      	b.n	80076fc <HAL_DMA_Start_IT+0x110>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f022 0201 	bic.w	r2, r2, #1
 80076fa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	68b9      	ldr	r1, [r7, #8]
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f001 fe6a 	bl	80093dc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a34      	ldr	r2, [pc, #208]	@ (80077e0 <HAL_DMA_Start_IT+0x1f4>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d04a      	beq.n	80077a8 <HAL_DMA_Start_IT+0x1bc>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a33      	ldr	r2, [pc, #204]	@ (80077e4 <HAL_DMA_Start_IT+0x1f8>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d045      	beq.n	80077a8 <HAL_DMA_Start_IT+0x1bc>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a31      	ldr	r2, [pc, #196]	@ (80077e8 <HAL_DMA_Start_IT+0x1fc>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d040      	beq.n	80077a8 <HAL_DMA_Start_IT+0x1bc>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a30      	ldr	r2, [pc, #192]	@ (80077ec <HAL_DMA_Start_IT+0x200>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d03b      	beq.n	80077a8 <HAL_DMA_Start_IT+0x1bc>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a2e      	ldr	r2, [pc, #184]	@ (80077f0 <HAL_DMA_Start_IT+0x204>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d036      	beq.n	80077a8 <HAL_DMA_Start_IT+0x1bc>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a2d      	ldr	r2, [pc, #180]	@ (80077f4 <HAL_DMA_Start_IT+0x208>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d031      	beq.n	80077a8 <HAL_DMA_Start_IT+0x1bc>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a2b      	ldr	r2, [pc, #172]	@ (80077f8 <HAL_DMA_Start_IT+0x20c>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d02c      	beq.n	80077a8 <HAL_DMA_Start_IT+0x1bc>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a2a      	ldr	r2, [pc, #168]	@ (80077fc <HAL_DMA_Start_IT+0x210>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d027      	beq.n	80077a8 <HAL_DMA_Start_IT+0x1bc>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a28      	ldr	r2, [pc, #160]	@ (8007800 <HAL_DMA_Start_IT+0x214>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d022      	beq.n	80077a8 <HAL_DMA_Start_IT+0x1bc>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a27      	ldr	r2, [pc, #156]	@ (8007804 <HAL_DMA_Start_IT+0x218>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d01d      	beq.n	80077a8 <HAL_DMA_Start_IT+0x1bc>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a25      	ldr	r2, [pc, #148]	@ (8007808 <HAL_DMA_Start_IT+0x21c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d018      	beq.n	80077a8 <HAL_DMA_Start_IT+0x1bc>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a24      	ldr	r2, [pc, #144]	@ (800780c <HAL_DMA_Start_IT+0x220>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d013      	beq.n	80077a8 <HAL_DMA_Start_IT+0x1bc>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a22      	ldr	r2, [pc, #136]	@ (8007810 <HAL_DMA_Start_IT+0x224>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d00e      	beq.n	80077a8 <HAL_DMA_Start_IT+0x1bc>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a21      	ldr	r2, [pc, #132]	@ (8007814 <HAL_DMA_Start_IT+0x228>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d009      	beq.n	80077a8 <HAL_DMA_Start_IT+0x1bc>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1f      	ldr	r2, [pc, #124]	@ (8007818 <HAL_DMA_Start_IT+0x22c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d004      	beq.n	80077a8 <HAL_DMA_Start_IT+0x1bc>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a1e      	ldr	r2, [pc, #120]	@ (800781c <HAL_DMA_Start_IT+0x230>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d101      	bne.n	80077ac <HAL_DMA_Start_IT+0x1c0>
 80077a8:	2301      	movs	r3, #1
 80077aa:	e000      	b.n	80077ae <HAL_DMA_Start_IT+0x1c2>
 80077ac:	2300      	movs	r3, #0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d036      	beq.n	8007820 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f023 021e 	bic.w	r2, r3, #30
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f042 0216 	orr.w	r2, r2, #22
 80077c4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d03e      	beq.n	800784c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f042 0208 	orr.w	r2, r2, #8
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	e035      	b.n	800784c <HAL_DMA_Start_IT+0x260>
 80077e0:	40020010 	.word	0x40020010
 80077e4:	40020028 	.word	0x40020028
 80077e8:	40020040 	.word	0x40020040
 80077ec:	40020058 	.word	0x40020058
 80077f0:	40020070 	.word	0x40020070
 80077f4:	40020088 	.word	0x40020088
 80077f8:	400200a0 	.word	0x400200a0
 80077fc:	400200b8 	.word	0x400200b8
 8007800:	40020410 	.word	0x40020410
 8007804:	40020428 	.word	0x40020428
 8007808:	40020440 	.word	0x40020440
 800780c:	40020458 	.word	0x40020458
 8007810:	40020470 	.word	0x40020470
 8007814:	40020488 	.word	0x40020488
 8007818:	400204a0 	.word	0x400204a0
 800781c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f023 020e 	bic.w	r2, r3, #14
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f042 020a 	orr.w	r2, r2, #10
 8007832:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007838:	2b00      	cmp	r3, #0
 800783a:	d007      	beq.n	800784c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f042 0204 	orr.w	r2, r2, #4
 800784a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a83      	ldr	r2, [pc, #524]	@ (8007a60 <HAL_DMA_Start_IT+0x474>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d072      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a82      	ldr	r2, [pc, #520]	@ (8007a64 <HAL_DMA_Start_IT+0x478>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d06d      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a80      	ldr	r2, [pc, #512]	@ (8007a68 <HAL_DMA_Start_IT+0x47c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d068      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a7f      	ldr	r2, [pc, #508]	@ (8007a6c <HAL_DMA_Start_IT+0x480>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d063      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a7d      	ldr	r2, [pc, #500]	@ (8007a70 <HAL_DMA_Start_IT+0x484>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d05e      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a7c      	ldr	r2, [pc, #496]	@ (8007a74 <HAL_DMA_Start_IT+0x488>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d059      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a7a      	ldr	r2, [pc, #488]	@ (8007a78 <HAL_DMA_Start_IT+0x48c>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d054      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a79      	ldr	r2, [pc, #484]	@ (8007a7c <HAL_DMA_Start_IT+0x490>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d04f      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a77      	ldr	r2, [pc, #476]	@ (8007a80 <HAL_DMA_Start_IT+0x494>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d04a      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a76      	ldr	r2, [pc, #472]	@ (8007a84 <HAL_DMA_Start_IT+0x498>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d045      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a74      	ldr	r2, [pc, #464]	@ (8007a88 <HAL_DMA_Start_IT+0x49c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d040      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a73      	ldr	r2, [pc, #460]	@ (8007a8c <HAL_DMA_Start_IT+0x4a0>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d03b      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a71      	ldr	r2, [pc, #452]	@ (8007a90 <HAL_DMA_Start_IT+0x4a4>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d036      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a70      	ldr	r2, [pc, #448]	@ (8007a94 <HAL_DMA_Start_IT+0x4a8>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d031      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a6e      	ldr	r2, [pc, #440]	@ (8007a98 <HAL_DMA_Start_IT+0x4ac>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d02c      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a6d      	ldr	r2, [pc, #436]	@ (8007a9c <HAL_DMA_Start_IT+0x4b0>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d027      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a6b      	ldr	r2, [pc, #428]	@ (8007aa0 <HAL_DMA_Start_IT+0x4b4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d022      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a6a      	ldr	r2, [pc, #424]	@ (8007aa4 <HAL_DMA_Start_IT+0x4b8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d01d      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a68      	ldr	r2, [pc, #416]	@ (8007aa8 <HAL_DMA_Start_IT+0x4bc>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d018      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a67      	ldr	r2, [pc, #412]	@ (8007aac <HAL_DMA_Start_IT+0x4c0>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d013      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a65      	ldr	r2, [pc, #404]	@ (8007ab0 <HAL_DMA_Start_IT+0x4c4>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d00e      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a64      	ldr	r2, [pc, #400]	@ (8007ab4 <HAL_DMA_Start_IT+0x4c8>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d009      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a62      	ldr	r2, [pc, #392]	@ (8007ab8 <HAL_DMA_Start_IT+0x4cc>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d004      	beq.n	800793c <HAL_DMA_Start_IT+0x350>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a61      	ldr	r2, [pc, #388]	@ (8007abc <HAL_DMA_Start_IT+0x4d0>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d101      	bne.n	8007940 <HAL_DMA_Start_IT+0x354>
 800793c:	2301      	movs	r3, #1
 800793e:	e000      	b.n	8007942 <HAL_DMA_Start_IT+0x356>
 8007940:	2300      	movs	r3, #0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d01a      	beq.n	800797c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d007      	beq.n	8007964 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800795e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007962:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007968:	2b00      	cmp	r3, #0
 800796a:	d007      	beq.n	800797c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007976:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800797a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a37      	ldr	r2, [pc, #220]	@ (8007a60 <HAL_DMA_Start_IT+0x474>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d04a      	beq.n	8007a1c <HAL_DMA_Start_IT+0x430>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a36      	ldr	r2, [pc, #216]	@ (8007a64 <HAL_DMA_Start_IT+0x478>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d045      	beq.n	8007a1c <HAL_DMA_Start_IT+0x430>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a34      	ldr	r2, [pc, #208]	@ (8007a68 <HAL_DMA_Start_IT+0x47c>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d040      	beq.n	8007a1c <HAL_DMA_Start_IT+0x430>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a33      	ldr	r2, [pc, #204]	@ (8007a6c <HAL_DMA_Start_IT+0x480>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d03b      	beq.n	8007a1c <HAL_DMA_Start_IT+0x430>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a31      	ldr	r2, [pc, #196]	@ (8007a70 <HAL_DMA_Start_IT+0x484>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d036      	beq.n	8007a1c <HAL_DMA_Start_IT+0x430>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a30      	ldr	r2, [pc, #192]	@ (8007a74 <HAL_DMA_Start_IT+0x488>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d031      	beq.n	8007a1c <HAL_DMA_Start_IT+0x430>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a2e      	ldr	r2, [pc, #184]	@ (8007a78 <HAL_DMA_Start_IT+0x48c>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d02c      	beq.n	8007a1c <HAL_DMA_Start_IT+0x430>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a2d      	ldr	r2, [pc, #180]	@ (8007a7c <HAL_DMA_Start_IT+0x490>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d027      	beq.n	8007a1c <HAL_DMA_Start_IT+0x430>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a2b      	ldr	r2, [pc, #172]	@ (8007a80 <HAL_DMA_Start_IT+0x494>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d022      	beq.n	8007a1c <HAL_DMA_Start_IT+0x430>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a2a      	ldr	r2, [pc, #168]	@ (8007a84 <HAL_DMA_Start_IT+0x498>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d01d      	beq.n	8007a1c <HAL_DMA_Start_IT+0x430>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a28      	ldr	r2, [pc, #160]	@ (8007a88 <HAL_DMA_Start_IT+0x49c>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d018      	beq.n	8007a1c <HAL_DMA_Start_IT+0x430>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a27      	ldr	r2, [pc, #156]	@ (8007a8c <HAL_DMA_Start_IT+0x4a0>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d013      	beq.n	8007a1c <HAL_DMA_Start_IT+0x430>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a25      	ldr	r2, [pc, #148]	@ (8007a90 <HAL_DMA_Start_IT+0x4a4>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d00e      	beq.n	8007a1c <HAL_DMA_Start_IT+0x430>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a24      	ldr	r2, [pc, #144]	@ (8007a94 <HAL_DMA_Start_IT+0x4a8>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d009      	beq.n	8007a1c <HAL_DMA_Start_IT+0x430>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a22      	ldr	r2, [pc, #136]	@ (8007a98 <HAL_DMA_Start_IT+0x4ac>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d004      	beq.n	8007a1c <HAL_DMA_Start_IT+0x430>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a21      	ldr	r2, [pc, #132]	@ (8007a9c <HAL_DMA_Start_IT+0x4b0>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d108      	bne.n	8007a2e <HAL_DMA_Start_IT+0x442>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0201 	orr.w	r2, r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	e012      	b.n	8007a54 <HAL_DMA_Start_IT+0x468>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f042 0201 	orr.w	r2, r2, #1
 8007a3c:	601a      	str	r2, [r3, #0]
 8007a3e:	e009      	b.n	8007a54 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a46:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	40020010 	.word	0x40020010
 8007a64:	40020028 	.word	0x40020028
 8007a68:	40020040 	.word	0x40020040
 8007a6c:	40020058 	.word	0x40020058
 8007a70:	40020070 	.word	0x40020070
 8007a74:	40020088 	.word	0x40020088
 8007a78:	400200a0 	.word	0x400200a0
 8007a7c:	400200b8 	.word	0x400200b8
 8007a80:	40020410 	.word	0x40020410
 8007a84:	40020428 	.word	0x40020428
 8007a88:	40020440 	.word	0x40020440
 8007a8c:	40020458 	.word	0x40020458
 8007a90:	40020470 	.word	0x40020470
 8007a94:	40020488 	.word	0x40020488
 8007a98:	400204a0 	.word	0x400204a0
 8007a9c:	400204b8 	.word	0x400204b8
 8007aa0:	58025408 	.word	0x58025408
 8007aa4:	5802541c 	.word	0x5802541c
 8007aa8:	58025430 	.word	0x58025430
 8007aac:	58025444 	.word	0x58025444
 8007ab0:	58025458 	.word	0x58025458
 8007ab4:	5802546c 	.word	0x5802546c
 8007ab8:	58025480 	.word	0x58025480
 8007abc:	58025494 	.word	0x58025494

08007ac0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007ac8:	f7ff f88c 	bl	8006be4 <HAL_GetTick>
 8007acc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d101      	bne.n	8007ad8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e2dc      	b.n	8008092 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d008      	beq.n	8007af6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2280      	movs	r2, #128	@ 0x80
 8007ae8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e2cd      	b.n	8008092 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a76      	ldr	r2, [pc, #472]	@ (8007cd4 <HAL_DMA_Abort+0x214>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d04a      	beq.n	8007b96 <HAL_DMA_Abort+0xd6>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a74      	ldr	r2, [pc, #464]	@ (8007cd8 <HAL_DMA_Abort+0x218>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d045      	beq.n	8007b96 <HAL_DMA_Abort+0xd6>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a73      	ldr	r2, [pc, #460]	@ (8007cdc <HAL_DMA_Abort+0x21c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d040      	beq.n	8007b96 <HAL_DMA_Abort+0xd6>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a71      	ldr	r2, [pc, #452]	@ (8007ce0 <HAL_DMA_Abort+0x220>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d03b      	beq.n	8007b96 <HAL_DMA_Abort+0xd6>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a70      	ldr	r2, [pc, #448]	@ (8007ce4 <HAL_DMA_Abort+0x224>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d036      	beq.n	8007b96 <HAL_DMA_Abort+0xd6>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a6e      	ldr	r2, [pc, #440]	@ (8007ce8 <HAL_DMA_Abort+0x228>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d031      	beq.n	8007b96 <HAL_DMA_Abort+0xd6>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a6d      	ldr	r2, [pc, #436]	@ (8007cec <HAL_DMA_Abort+0x22c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d02c      	beq.n	8007b96 <HAL_DMA_Abort+0xd6>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a6b      	ldr	r2, [pc, #428]	@ (8007cf0 <HAL_DMA_Abort+0x230>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d027      	beq.n	8007b96 <HAL_DMA_Abort+0xd6>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a6a      	ldr	r2, [pc, #424]	@ (8007cf4 <HAL_DMA_Abort+0x234>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d022      	beq.n	8007b96 <HAL_DMA_Abort+0xd6>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a68      	ldr	r2, [pc, #416]	@ (8007cf8 <HAL_DMA_Abort+0x238>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d01d      	beq.n	8007b96 <HAL_DMA_Abort+0xd6>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a67      	ldr	r2, [pc, #412]	@ (8007cfc <HAL_DMA_Abort+0x23c>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d018      	beq.n	8007b96 <HAL_DMA_Abort+0xd6>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a65      	ldr	r2, [pc, #404]	@ (8007d00 <HAL_DMA_Abort+0x240>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d013      	beq.n	8007b96 <HAL_DMA_Abort+0xd6>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a64      	ldr	r2, [pc, #400]	@ (8007d04 <HAL_DMA_Abort+0x244>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d00e      	beq.n	8007b96 <HAL_DMA_Abort+0xd6>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a62      	ldr	r2, [pc, #392]	@ (8007d08 <HAL_DMA_Abort+0x248>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d009      	beq.n	8007b96 <HAL_DMA_Abort+0xd6>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a61      	ldr	r2, [pc, #388]	@ (8007d0c <HAL_DMA_Abort+0x24c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d004      	beq.n	8007b96 <HAL_DMA_Abort+0xd6>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a5f      	ldr	r2, [pc, #380]	@ (8007d10 <HAL_DMA_Abort+0x250>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d101      	bne.n	8007b9a <HAL_DMA_Abort+0xda>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e000      	b.n	8007b9c <HAL_DMA_Abort+0xdc>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d013      	beq.n	8007bc8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 021e 	bic.w	r2, r2, #30
 8007bae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695a      	ldr	r2, [r3, #20]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007bbe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	617b      	str	r3, [r7, #20]
 8007bc6:	e00a      	b.n	8007bde <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 020e 	bic.w	r2, r2, #14
 8007bd6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a3c      	ldr	r2, [pc, #240]	@ (8007cd4 <HAL_DMA_Abort+0x214>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d072      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a3a      	ldr	r2, [pc, #232]	@ (8007cd8 <HAL_DMA_Abort+0x218>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d06d      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a39      	ldr	r2, [pc, #228]	@ (8007cdc <HAL_DMA_Abort+0x21c>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d068      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a37      	ldr	r2, [pc, #220]	@ (8007ce0 <HAL_DMA_Abort+0x220>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d063      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a36      	ldr	r2, [pc, #216]	@ (8007ce4 <HAL_DMA_Abort+0x224>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d05e      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a34      	ldr	r2, [pc, #208]	@ (8007ce8 <HAL_DMA_Abort+0x228>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d059      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a33      	ldr	r2, [pc, #204]	@ (8007cec <HAL_DMA_Abort+0x22c>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d054      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a31      	ldr	r2, [pc, #196]	@ (8007cf0 <HAL_DMA_Abort+0x230>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d04f      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a30      	ldr	r2, [pc, #192]	@ (8007cf4 <HAL_DMA_Abort+0x234>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d04a      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a2e      	ldr	r2, [pc, #184]	@ (8007cf8 <HAL_DMA_Abort+0x238>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d045      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a2d      	ldr	r2, [pc, #180]	@ (8007cfc <HAL_DMA_Abort+0x23c>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d040      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a2b      	ldr	r2, [pc, #172]	@ (8007d00 <HAL_DMA_Abort+0x240>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d03b      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a2a      	ldr	r2, [pc, #168]	@ (8007d04 <HAL_DMA_Abort+0x244>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d036      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a28      	ldr	r2, [pc, #160]	@ (8007d08 <HAL_DMA_Abort+0x248>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d031      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a27      	ldr	r2, [pc, #156]	@ (8007d0c <HAL_DMA_Abort+0x24c>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d02c      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a25      	ldr	r2, [pc, #148]	@ (8007d10 <HAL_DMA_Abort+0x250>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d027      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a24      	ldr	r2, [pc, #144]	@ (8007d14 <HAL_DMA_Abort+0x254>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d022      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a22      	ldr	r2, [pc, #136]	@ (8007d18 <HAL_DMA_Abort+0x258>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d01d      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a21      	ldr	r2, [pc, #132]	@ (8007d1c <HAL_DMA_Abort+0x25c>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d018      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8007d20 <HAL_DMA_Abort+0x260>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d013      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a1e      	ldr	r2, [pc, #120]	@ (8007d24 <HAL_DMA_Abort+0x264>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d00e      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8007d28 <HAL_DMA_Abort+0x268>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d009      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8007d2c <HAL_DMA_Abort+0x26c>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d004      	beq.n	8007cce <HAL_DMA_Abort+0x20e>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a19      	ldr	r2, [pc, #100]	@ (8007d30 <HAL_DMA_Abort+0x270>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d132      	bne.n	8007d34 <HAL_DMA_Abort+0x274>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e031      	b.n	8007d36 <HAL_DMA_Abort+0x276>
 8007cd2:	bf00      	nop
 8007cd4:	40020010 	.word	0x40020010
 8007cd8:	40020028 	.word	0x40020028
 8007cdc:	40020040 	.word	0x40020040
 8007ce0:	40020058 	.word	0x40020058
 8007ce4:	40020070 	.word	0x40020070
 8007ce8:	40020088 	.word	0x40020088
 8007cec:	400200a0 	.word	0x400200a0
 8007cf0:	400200b8 	.word	0x400200b8
 8007cf4:	40020410 	.word	0x40020410
 8007cf8:	40020428 	.word	0x40020428
 8007cfc:	40020440 	.word	0x40020440
 8007d00:	40020458 	.word	0x40020458
 8007d04:	40020470 	.word	0x40020470
 8007d08:	40020488 	.word	0x40020488
 8007d0c:	400204a0 	.word	0x400204a0
 8007d10:	400204b8 	.word	0x400204b8
 8007d14:	58025408 	.word	0x58025408
 8007d18:	5802541c 	.word	0x5802541c
 8007d1c:	58025430 	.word	0x58025430
 8007d20:	58025444 	.word	0x58025444
 8007d24:	58025458 	.word	0x58025458
 8007d28:	5802546c 	.word	0x5802546c
 8007d2c:	58025480 	.word	0x58025480
 8007d30:	58025494 	.word	0x58025494
 8007d34:	2300      	movs	r3, #0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d007      	beq.n	8007d4a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d48:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a6d      	ldr	r2, [pc, #436]	@ (8007f04 <HAL_DMA_Abort+0x444>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d04a      	beq.n	8007dea <HAL_DMA_Abort+0x32a>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a6b      	ldr	r2, [pc, #428]	@ (8007f08 <HAL_DMA_Abort+0x448>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d045      	beq.n	8007dea <HAL_DMA_Abort+0x32a>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a6a      	ldr	r2, [pc, #424]	@ (8007f0c <HAL_DMA_Abort+0x44c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d040      	beq.n	8007dea <HAL_DMA_Abort+0x32a>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a68      	ldr	r2, [pc, #416]	@ (8007f10 <HAL_DMA_Abort+0x450>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d03b      	beq.n	8007dea <HAL_DMA_Abort+0x32a>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a67      	ldr	r2, [pc, #412]	@ (8007f14 <HAL_DMA_Abort+0x454>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d036      	beq.n	8007dea <HAL_DMA_Abort+0x32a>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a65      	ldr	r2, [pc, #404]	@ (8007f18 <HAL_DMA_Abort+0x458>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d031      	beq.n	8007dea <HAL_DMA_Abort+0x32a>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a64      	ldr	r2, [pc, #400]	@ (8007f1c <HAL_DMA_Abort+0x45c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d02c      	beq.n	8007dea <HAL_DMA_Abort+0x32a>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a62      	ldr	r2, [pc, #392]	@ (8007f20 <HAL_DMA_Abort+0x460>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d027      	beq.n	8007dea <HAL_DMA_Abort+0x32a>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a61      	ldr	r2, [pc, #388]	@ (8007f24 <HAL_DMA_Abort+0x464>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d022      	beq.n	8007dea <HAL_DMA_Abort+0x32a>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a5f      	ldr	r2, [pc, #380]	@ (8007f28 <HAL_DMA_Abort+0x468>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d01d      	beq.n	8007dea <HAL_DMA_Abort+0x32a>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a5e      	ldr	r2, [pc, #376]	@ (8007f2c <HAL_DMA_Abort+0x46c>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d018      	beq.n	8007dea <HAL_DMA_Abort+0x32a>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a5c      	ldr	r2, [pc, #368]	@ (8007f30 <HAL_DMA_Abort+0x470>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d013      	beq.n	8007dea <HAL_DMA_Abort+0x32a>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a5b      	ldr	r2, [pc, #364]	@ (8007f34 <HAL_DMA_Abort+0x474>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d00e      	beq.n	8007dea <HAL_DMA_Abort+0x32a>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a59      	ldr	r2, [pc, #356]	@ (8007f38 <HAL_DMA_Abort+0x478>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d009      	beq.n	8007dea <HAL_DMA_Abort+0x32a>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a58      	ldr	r2, [pc, #352]	@ (8007f3c <HAL_DMA_Abort+0x47c>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d004      	beq.n	8007dea <HAL_DMA_Abort+0x32a>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a56      	ldr	r2, [pc, #344]	@ (8007f40 <HAL_DMA_Abort+0x480>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d108      	bne.n	8007dfc <HAL_DMA_Abort+0x33c>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0201 	bic.w	r2, r2, #1
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	e007      	b.n	8007e0c <HAL_DMA_Abort+0x34c>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0201 	bic.w	r2, r2, #1
 8007e0a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007e0c:	e013      	b.n	8007e36 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e0e:	f7fe fee9 	bl	8006be4 <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	2b05      	cmp	r3, #5
 8007e1a:	d90c      	bls.n	8007e36 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2203      	movs	r2, #3
 8007e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e12d      	b.n	8008092 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1e5      	bne.n	8007e0e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a2f      	ldr	r2, [pc, #188]	@ (8007f04 <HAL_DMA_Abort+0x444>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d04a      	beq.n	8007ee2 <HAL_DMA_Abort+0x422>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a2d      	ldr	r2, [pc, #180]	@ (8007f08 <HAL_DMA_Abort+0x448>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d045      	beq.n	8007ee2 <HAL_DMA_Abort+0x422>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a2c      	ldr	r2, [pc, #176]	@ (8007f0c <HAL_DMA_Abort+0x44c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d040      	beq.n	8007ee2 <HAL_DMA_Abort+0x422>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a2a      	ldr	r2, [pc, #168]	@ (8007f10 <HAL_DMA_Abort+0x450>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d03b      	beq.n	8007ee2 <HAL_DMA_Abort+0x422>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a29      	ldr	r2, [pc, #164]	@ (8007f14 <HAL_DMA_Abort+0x454>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d036      	beq.n	8007ee2 <HAL_DMA_Abort+0x422>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a27      	ldr	r2, [pc, #156]	@ (8007f18 <HAL_DMA_Abort+0x458>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d031      	beq.n	8007ee2 <HAL_DMA_Abort+0x422>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a26      	ldr	r2, [pc, #152]	@ (8007f1c <HAL_DMA_Abort+0x45c>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d02c      	beq.n	8007ee2 <HAL_DMA_Abort+0x422>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a24      	ldr	r2, [pc, #144]	@ (8007f20 <HAL_DMA_Abort+0x460>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d027      	beq.n	8007ee2 <HAL_DMA_Abort+0x422>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a23      	ldr	r2, [pc, #140]	@ (8007f24 <HAL_DMA_Abort+0x464>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d022      	beq.n	8007ee2 <HAL_DMA_Abort+0x422>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a21      	ldr	r2, [pc, #132]	@ (8007f28 <HAL_DMA_Abort+0x468>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d01d      	beq.n	8007ee2 <HAL_DMA_Abort+0x422>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a20      	ldr	r2, [pc, #128]	@ (8007f2c <HAL_DMA_Abort+0x46c>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d018      	beq.n	8007ee2 <HAL_DMA_Abort+0x422>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a1e      	ldr	r2, [pc, #120]	@ (8007f30 <HAL_DMA_Abort+0x470>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d013      	beq.n	8007ee2 <HAL_DMA_Abort+0x422>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a1d      	ldr	r2, [pc, #116]	@ (8007f34 <HAL_DMA_Abort+0x474>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d00e      	beq.n	8007ee2 <HAL_DMA_Abort+0x422>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8007f38 <HAL_DMA_Abort+0x478>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d009      	beq.n	8007ee2 <HAL_DMA_Abort+0x422>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8007f3c <HAL_DMA_Abort+0x47c>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d004      	beq.n	8007ee2 <HAL_DMA_Abort+0x422>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a18      	ldr	r2, [pc, #96]	@ (8007f40 <HAL_DMA_Abort+0x480>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d101      	bne.n	8007ee6 <HAL_DMA_Abort+0x426>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e000      	b.n	8007ee8 <HAL_DMA_Abort+0x428>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d02b      	beq.n	8007f44 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ef0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ef6:	f003 031f 	and.w	r3, r3, #31
 8007efa:	223f      	movs	r2, #63	@ 0x3f
 8007efc:	409a      	lsls	r2, r3
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	609a      	str	r2, [r3, #8]
 8007f02:	e02a      	b.n	8007f5a <HAL_DMA_Abort+0x49a>
 8007f04:	40020010 	.word	0x40020010
 8007f08:	40020028 	.word	0x40020028
 8007f0c:	40020040 	.word	0x40020040
 8007f10:	40020058 	.word	0x40020058
 8007f14:	40020070 	.word	0x40020070
 8007f18:	40020088 	.word	0x40020088
 8007f1c:	400200a0 	.word	0x400200a0
 8007f20:	400200b8 	.word	0x400200b8
 8007f24:	40020410 	.word	0x40020410
 8007f28:	40020428 	.word	0x40020428
 8007f2c:	40020440 	.word	0x40020440
 8007f30:	40020458 	.word	0x40020458
 8007f34:	40020470 	.word	0x40020470
 8007f38:	40020488 	.word	0x40020488
 8007f3c:	400204a0 	.word	0x400204a0
 8007f40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f48:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f4e:	f003 031f 	and.w	r3, r3, #31
 8007f52:	2201      	movs	r2, #1
 8007f54:	409a      	lsls	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a4f      	ldr	r2, [pc, #316]	@ (800809c <HAL_DMA_Abort+0x5dc>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d072      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a4d      	ldr	r2, [pc, #308]	@ (80080a0 <HAL_DMA_Abort+0x5e0>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d06d      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a4c      	ldr	r2, [pc, #304]	@ (80080a4 <HAL_DMA_Abort+0x5e4>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d068      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a4a      	ldr	r2, [pc, #296]	@ (80080a8 <HAL_DMA_Abort+0x5e8>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d063      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a49      	ldr	r2, [pc, #292]	@ (80080ac <HAL_DMA_Abort+0x5ec>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d05e      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a47      	ldr	r2, [pc, #284]	@ (80080b0 <HAL_DMA_Abort+0x5f0>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d059      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a46      	ldr	r2, [pc, #280]	@ (80080b4 <HAL_DMA_Abort+0x5f4>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d054      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a44      	ldr	r2, [pc, #272]	@ (80080b8 <HAL_DMA_Abort+0x5f8>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d04f      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a43      	ldr	r2, [pc, #268]	@ (80080bc <HAL_DMA_Abort+0x5fc>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d04a      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a41      	ldr	r2, [pc, #260]	@ (80080c0 <HAL_DMA_Abort+0x600>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d045      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a40      	ldr	r2, [pc, #256]	@ (80080c4 <HAL_DMA_Abort+0x604>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d040      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a3e      	ldr	r2, [pc, #248]	@ (80080c8 <HAL_DMA_Abort+0x608>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d03b      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a3d      	ldr	r2, [pc, #244]	@ (80080cc <HAL_DMA_Abort+0x60c>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d036      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a3b      	ldr	r2, [pc, #236]	@ (80080d0 <HAL_DMA_Abort+0x610>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d031      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a3a      	ldr	r2, [pc, #232]	@ (80080d4 <HAL_DMA_Abort+0x614>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d02c      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a38      	ldr	r2, [pc, #224]	@ (80080d8 <HAL_DMA_Abort+0x618>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d027      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a37      	ldr	r2, [pc, #220]	@ (80080dc <HAL_DMA_Abort+0x61c>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d022      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a35      	ldr	r2, [pc, #212]	@ (80080e0 <HAL_DMA_Abort+0x620>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d01d      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a34      	ldr	r2, [pc, #208]	@ (80080e4 <HAL_DMA_Abort+0x624>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d018      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a32      	ldr	r2, [pc, #200]	@ (80080e8 <HAL_DMA_Abort+0x628>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d013      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a31      	ldr	r2, [pc, #196]	@ (80080ec <HAL_DMA_Abort+0x62c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d00e      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a2f      	ldr	r2, [pc, #188]	@ (80080f0 <HAL_DMA_Abort+0x630>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d009      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a2e      	ldr	r2, [pc, #184]	@ (80080f4 <HAL_DMA_Abort+0x634>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d004      	beq.n	800804a <HAL_DMA_Abort+0x58a>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a2c      	ldr	r2, [pc, #176]	@ (80080f8 <HAL_DMA_Abort+0x638>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d101      	bne.n	800804e <HAL_DMA_Abort+0x58e>
 800804a:	2301      	movs	r3, #1
 800804c:	e000      	b.n	8008050 <HAL_DMA_Abort+0x590>
 800804e:	2300      	movs	r3, #0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d015      	beq.n	8008080 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800805c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00c      	beq.n	8008080 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008070:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008074:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800807e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3718      	adds	r7, #24
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	40020010 	.word	0x40020010
 80080a0:	40020028 	.word	0x40020028
 80080a4:	40020040 	.word	0x40020040
 80080a8:	40020058 	.word	0x40020058
 80080ac:	40020070 	.word	0x40020070
 80080b0:	40020088 	.word	0x40020088
 80080b4:	400200a0 	.word	0x400200a0
 80080b8:	400200b8 	.word	0x400200b8
 80080bc:	40020410 	.word	0x40020410
 80080c0:	40020428 	.word	0x40020428
 80080c4:	40020440 	.word	0x40020440
 80080c8:	40020458 	.word	0x40020458
 80080cc:	40020470 	.word	0x40020470
 80080d0:	40020488 	.word	0x40020488
 80080d4:	400204a0 	.word	0x400204a0
 80080d8:	400204b8 	.word	0x400204b8
 80080dc:	58025408 	.word	0x58025408
 80080e0:	5802541c 	.word	0x5802541c
 80080e4:	58025430 	.word	0x58025430
 80080e8:	58025444 	.word	0x58025444
 80080ec:	58025458 	.word	0x58025458
 80080f0:	5802546c 	.word	0x5802546c
 80080f4:	58025480 	.word	0x58025480
 80080f8:	58025494 	.word	0x58025494

080080fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e237      	b.n	800857e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b02      	cmp	r3, #2
 8008118:	d004      	beq.n	8008124 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2280      	movs	r2, #128	@ 0x80
 800811e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e22c      	b.n	800857e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a5c      	ldr	r2, [pc, #368]	@ (800829c <HAL_DMA_Abort_IT+0x1a0>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d04a      	beq.n	80081c4 <HAL_DMA_Abort_IT+0xc8>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a5b      	ldr	r2, [pc, #364]	@ (80082a0 <HAL_DMA_Abort_IT+0x1a4>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d045      	beq.n	80081c4 <HAL_DMA_Abort_IT+0xc8>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a59      	ldr	r2, [pc, #356]	@ (80082a4 <HAL_DMA_Abort_IT+0x1a8>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d040      	beq.n	80081c4 <HAL_DMA_Abort_IT+0xc8>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a58      	ldr	r2, [pc, #352]	@ (80082a8 <HAL_DMA_Abort_IT+0x1ac>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d03b      	beq.n	80081c4 <HAL_DMA_Abort_IT+0xc8>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a56      	ldr	r2, [pc, #344]	@ (80082ac <HAL_DMA_Abort_IT+0x1b0>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d036      	beq.n	80081c4 <HAL_DMA_Abort_IT+0xc8>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a55      	ldr	r2, [pc, #340]	@ (80082b0 <HAL_DMA_Abort_IT+0x1b4>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d031      	beq.n	80081c4 <HAL_DMA_Abort_IT+0xc8>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a53      	ldr	r2, [pc, #332]	@ (80082b4 <HAL_DMA_Abort_IT+0x1b8>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d02c      	beq.n	80081c4 <HAL_DMA_Abort_IT+0xc8>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a52      	ldr	r2, [pc, #328]	@ (80082b8 <HAL_DMA_Abort_IT+0x1bc>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d027      	beq.n	80081c4 <HAL_DMA_Abort_IT+0xc8>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a50      	ldr	r2, [pc, #320]	@ (80082bc <HAL_DMA_Abort_IT+0x1c0>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d022      	beq.n	80081c4 <HAL_DMA_Abort_IT+0xc8>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a4f      	ldr	r2, [pc, #316]	@ (80082c0 <HAL_DMA_Abort_IT+0x1c4>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d01d      	beq.n	80081c4 <HAL_DMA_Abort_IT+0xc8>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a4d      	ldr	r2, [pc, #308]	@ (80082c4 <HAL_DMA_Abort_IT+0x1c8>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d018      	beq.n	80081c4 <HAL_DMA_Abort_IT+0xc8>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a4c      	ldr	r2, [pc, #304]	@ (80082c8 <HAL_DMA_Abort_IT+0x1cc>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d013      	beq.n	80081c4 <HAL_DMA_Abort_IT+0xc8>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a4a      	ldr	r2, [pc, #296]	@ (80082cc <HAL_DMA_Abort_IT+0x1d0>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d00e      	beq.n	80081c4 <HAL_DMA_Abort_IT+0xc8>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a49      	ldr	r2, [pc, #292]	@ (80082d0 <HAL_DMA_Abort_IT+0x1d4>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d009      	beq.n	80081c4 <HAL_DMA_Abort_IT+0xc8>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a47      	ldr	r2, [pc, #284]	@ (80082d4 <HAL_DMA_Abort_IT+0x1d8>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d004      	beq.n	80081c4 <HAL_DMA_Abort_IT+0xc8>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a46      	ldr	r2, [pc, #280]	@ (80082d8 <HAL_DMA_Abort_IT+0x1dc>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d101      	bne.n	80081c8 <HAL_DMA_Abort_IT+0xcc>
 80081c4:	2301      	movs	r3, #1
 80081c6:	e000      	b.n	80081ca <HAL_DMA_Abort_IT+0xce>
 80081c8:	2300      	movs	r3, #0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 8086 	beq.w	80082dc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2204      	movs	r2, #4
 80081d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a2f      	ldr	r2, [pc, #188]	@ (800829c <HAL_DMA_Abort_IT+0x1a0>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d04a      	beq.n	8008278 <HAL_DMA_Abort_IT+0x17c>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a2e      	ldr	r2, [pc, #184]	@ (80082a0 <HAL_DMA_Abort_IT+0x1a4>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d045      	beq.n	8008278 <HAL_DMA_Abort_IT+0x17c>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a2c      	ldr	r2, [pc, #176]	@ (80082a4 <HAL_DMA_Abort_IT+0x1a8>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d040      	beq.n	8008278 <HAL_DMA_Abort_IT+0x17c>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a2b      	ldr	r2, [pc, #172]	@ (80082a8 <HAL_DMA_Abort_IT+0x1ac>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d03b      	beq.n	8008278 <HAL_DMA_Abort_IT+0x17c>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a29      	ldr	r2, [pc, #164]	@ (80082ac <HAL_DMA_Abort_IT+0x1b0>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d036      	beq.n	8008278 <HAL_DMA_Abort_IT+0x17c>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a28      	ldr	r2, [pc, #160]	@ (80082b0 <HAL_DMA_Abort_IT+0x1b4>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d031      	beq.n	8008278 <HAL_DMA_Abort_IT+0x17c>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a26      	ldr	r2, [pc, #152]	@ (80082b4 <HAL_DMA_Abort_IT+0x1b8>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d02c      	beq.n	8008278 <HAL_DMA_Abort_IT+0x17c>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a25      	ldr	r2, [pc, #148]	@ (80082b8 <HAL_DMA_Abort_IT+0x1bc>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d027      	beq.n	8008278 <HAL_DMA_Abort_IT+0x17c>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a23      	ldr	r2, [pc, #140]	@ (80082bc <HAL_DMA_Abort_IT+0x1c0>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d022      	beq.n	8008278 <HAL_DMA_Abort_IT+0x17c>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a22      	ldr	r2, [pc, #136]	@ (80082c0 <HAL_DMA_Abort_IT+0x1c4>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d01d      	beq.n	8008278 <HAL_DMA_Abort_IT+0x17c>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a20      	ldr	r2, [pc, #128]	@ (80082c4 <HAL_DMA_Abort_IT+0x1c8>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d018      	beq.n	8008278 <HAL_DMA_Abort_IT+0x17c>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a1f      	ldr	r2, [pc, #124]	@ (80082c8 <HAL_DMA_Abort_IT+0x1cc>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d013      	beq.n	8008278 <HAL_DMA_Abort_IT+0x17c>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a1d      	ldr	r2, [pc, #116]	@ (80082cc <HAL_DMA_Abort_IT+0x1d0>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d00e      	beq.n	8008278 <HAL_DMA_Abort_IT+0x17c>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a1c      	ldr	r2, [pc, #112]	@ (80082d0 <HAL_DMA_Abort_IT+0x1d4>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d009      	beq.n	8008278 <HAL_DMA_Abort_IT+0x17c>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a1a      	ldr	r2, [pc, #104]	@ (80082d4 <HAL_DMA_Abort_IT+0x1d8>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d004      	beq.n	8008278 <HAL_DMA_Abort_IT+0x17c>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a19      	ldr	r2, [pc, #100]	@ (80082d8 <HAL_DMA_Abort_IT+0x1dc>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d108      	bne.n	800828a <HAL_DMA_Abort_IT+0x18e>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f022 0201 	bic.w	r2, r2, #1
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	e178      	b.n	800857c <HAL_DMA_Abort_IT+0x480>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 0201 	bic.w	r2, r2, #1
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	e16f      	b.n	800857c <HAL_DMA_Abort_IT+0x480>
 800829c:	40020010 	.word	0x40020010
 80082a0:	40020028 	.word	0x40020028
 80082a4:	40020040 	.word	0x40020040
 80082a8:	40020058 	.word	0x40020058
 80082ac:	40020070 	.word	0x40020070
 80082b0:	40020088 	.word	0x40020088
 80082b4:	400200a0 	.word	0x400200a0
 80082b8:	400200b8 	.word	0x400200b8
 80082bc:	40020410 	.word	0x40020410
 80082c0:	40020428 	.word	0x40020428
 80082c4:	40020440 	.word	0x40020440
 80082c8:	40020458 	.word	0x40020458
 80082cc:	40020470 	.word	0x40020470
 80082d0:	40020488 	.word	0x40020488
 80082d4:	400204a0 	.word	0x400204a0
 80082d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f022 020e 	bic.w	r2, r2, #14
 80082ea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a6c      	ldr	r2, [pc, #432]	@ (80084a4 <HAL_DMA_Abort_IT+0x3a8>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d04a      	beq.n	800838c <HAL_DMA_Abort_IT+0x290>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a6b      	ldr	r2, [pc, #428]	@ (80084a8 <HAL_DMA_Abort_IT+0x3ac>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d045      	beq.n	800838c <HAL_DMA_Abort_IT+0x290>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a69      	ldr	r2, [pc, #420]	@ (80084ac <HAL_DMA_Abort_IT+0x3b0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d040      	beq.n	800838c <HAL_DMA_Abort_IT+0x290>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a68      	ldr	r2, [pc, #416]	@ (80084b0 <HAL_DMA_Abort_IT+0x3b4>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d03b      	beq.n	800838c <HAL_DMA_Abort_IT+0x290>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a66      	ldr	r2, [pc, #408]	@ (80084b4 <HAL_DMA_Abort_IT+0x3b8>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d036      	beq.n	800838c <HAL_DMA_Abort_IT+0x290>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a65      	ldr	r2, [pc, #404]	@ (80084b8 <HAL_DMA_Abort_IT+0x3bc>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d031      	beq.n	800838c <HAL_DMA_Abort_IT+0x290>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a63      	ldr	r2, [pc, #396]	@ (80084bc <HAL_DMA_Abort_IT+0x3c0>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d02c      	beq.n	800838c <HAL_DMA_Abort_IT+0x290>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a62      	ldr	r2, [pc, #392]	@ (80084c0 <HAL_DMA_Abort_IT+0x3c4>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d027      	beq.n	800838c <HAL_DMA_Abort_IT+0x290>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a60      	ldr	r2, [pc, #384]	@ (80084c4 <HAL_DMA_Abort_IT+0x3c8>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d022      	beq.n	800838c <HAL_DMA_Abort_IT+0x290>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a5f      	ldr	r2, [pc, #380]	@ (80084c8 <HAL_DMA_Abort_IT+0x3cc>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d01d      	beq.n	800838c <HAL_DMA_Abort_IT+0x290>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a5d      	ldr	r2, [pc, #372]	@ (80084cc <HAL_DMA_Abort_IT+0x3d0>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d018      	beq.n	800838c <HAL_DMA_Abort_IT+0x290>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a5c      	ldr	r2, [pc, #368]	@ (80084d0 <HAL_DMA_Abort_IT+0x3d4>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d013      	beq.n	800838c <HAL_DMA_Abort_IT+0x290>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a5a      	ldr	r2, [pc, #360]	@ (80084d4 <HAL_DMA_Abort_IT+0x3d8>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d00e      	beq.n	800838c <HAL_DMA_Abort_IT+0x290>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a59      	ldr	r2, [pc, #356]	@ (80084d8 <HAL_DMA_Abort_IT+0x3dc>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d009      	beq.n	800838c <HAL_DMA_Abort_IT+0x290>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a57      	ldr	r2, [pc, #348]	@ (80084dc <HAL_DMA_Abort_IT+0x3e0>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d004      	beq.n	800838c <HAL_DMA_Abort_IT+0x290>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a56      	ldr	r2, [pc, #344]	@ (80084e0 <HAL_DMA_Abort_IT+0x3e4>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d108      	bne.n	800839e <HAL_DMA_Abort_IT+0x2a2>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0201 	bic.w	r2, r2, #1
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	e007      	b.n	80083ae <HAL_DMA_Abort_IT+0x2b2>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0201 	bic.w	r2, r2, #1
 80083ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a3c      	ldr	r2, [pc, #240]	@ (80084a4 <HAL_DMA_Abort_IT+0x3a8>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d072      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a3a      	ldr	r2, [pc, #232]	@ (80084a8 <HAL_DMA_Abort_IT+0x3ac>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d06d      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a39      	ldr	r2, [pc, #228]	@ (80084ac <HAL_DMA_Abort_IT+0x3b0>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d068      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a37      	ldr	r2, [pc, #220]	@ (80084b0 <HAL_DMA_Abort_IT+0x3b4>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d063      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a36      	ldr	r2, [pc, #216]	@ (80084b4 <HAL_DMA_Abort_IT+0x3b8>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d05e      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a34      	ldr	r2, [pc, #208]	@ (80084b8 <HAL_DMA_Abort_IT+0x3bc>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d059      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a33      	ldr	r2, [pc, #204]	@ (80084bc <HAL_DMA_Abort_IT+0x3c0>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d054      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a31      	ldr	r2, [pc, #196]	@ (80084c0 <HAL_DMA_Abort_IT+0x3c4>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d04f      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a30      	ldr	r2, [pc, #192]	@ (80084c4 <HAL_DMA_Abort_IT+0x3c8>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d04a      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a2e      	ldr	r2, [pc, #184]	@ (80084c8 <HAL_DMA_Abort_IT+0x3cc>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d045      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a2d      	ldr	r2, [pc, #180]	@ (80084cc <HAL_DMA_Abort_IT+0x3d0>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d040      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a2b      	ldr	r2, [pc, #172]	@ (80084d0 <HAL_DMA_Abort_IT+0x3d4>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d03b      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a2a      	ldr	r2, [pc, #168]	@ (80084d4 <HAL_DMA_Abort_IT+0x3d8>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d036      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a28      	ldr	r2, [pc, #160]	@ (80084d8 <HAL_DMA_Abort_IT+0x3dc>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d031      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a27      	ldr	r2, [pc, #156]	@ (80084dc <HAL_DMA_Abort_IT+0x3e0>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d02c      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a25      	ldr	r2, [pc, #148]	@ (80084e0 <HAL_DMA_Abort_IT+0x3e4>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d027      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a24      	ldr	r2, [pc, #144]	@ (80084e4 <HAL_DMA_Abort_IT+0x3e8>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d022      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a22      	ldr	r2, [pc, #136]	@ (80084e8 <HAL_DMA_Abort_IT+0x3ec>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d01d      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a21      	ldr	r2, [pc, #132]	@ (80084ec <HAL_DMA_Abort_IT+0x3f0>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d018      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a1f      	ldr	r2, [pc, #124]	@ (80084f0 <HAL_DMA_Abort_IT+0x3f4>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d013      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a1e      	ldr	r2, [pc, #120]	@ (80084f4 <HAL_DMA_Abort_IT+0x3f8>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d00e      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a1c      	ldr	r2, [pc, #112]	@ (80084f8 <HAL_DMA_Abort_IT+0x3fc>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d009      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a1b      	ldr	r2, [pc, #108]	@ (80084fc <HAL_DMA_Abort_IT+0x400>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d004      	beq.n	800849e <HAL_DMA_Abort_IT+0x3a2>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a19      	ldr	r2, [pc, #100]	@ (8008500 <HAL_DMA_Abort_IT+0x404>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d132      	bne.n	8008504 <HAL_DMA_Abort_IT+0x408>
 800849e:	2301      	movs	r3, #1
 80084a0:	e031      	b.n	8008506 <HAL_DMA_Abort_IT+0x40a>
 80084a2:	bf00      	nop
 80084a4:	40020010 	.word	0x40020010
 80084a8:	40020028 	.word	0x40020028
 80084ac:	40020040 	.word	0x40020040
 80084b0:	40020058 	.word	0x40020058
 80084b4:	40020070 	.word	0x40020070
 80084b8:	40020088 	.word	0x40020088
 80084bc:	400200a0 	.word	0x400200a0
 80084c0:	400200b8 	.word	0x400200b8
 80084c4:	40020410 	.word	0x40020410
 80084c8:	40020428 	.word	0x40020428
 80084cc:	40020440 	.word	0x40020440
 80084d0:	40020458 	.word	0x40020458
 80084d4:	40020470 	.word	0x40020470
 80084d8:	40020488 	.word	0x40020488
 80084dc:	400204a0 	.word	0x400204a0
 80084e0:	400204b8 	.word	0x400204b8
 80084e4:	58025408 	.word	0x58025408
 80084e8:	5802541c 	.word	0x5802541c
 80084ec:	58025430 	.word	0x58025430
 80084f0:	58025444 	.word	0x58025444
 80084f4:	58025458 	.word	0x58025458
 80084f8:	5802546c 	.word	0x5802546c
 80084fc:	58025480 	.word	0x58025480
 8008500:	58025494 	.word	0x58025494
 8008504:	2300      	movs	r3, #0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d028      	beq.n	800855c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008514:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008518:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800851e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008524:	f003 031f 	and.w	r3, r3, #31
 8008528:	2201      	movs	r2, #1
 800852a:	409a      	lsls	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008538:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00c      	beq.n	800855c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800854c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008550:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800855a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008570:	2b00      	cmp	r3, #0
 8008572:	d003      	beq.n	800857c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop

08008588 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b08a      	sub	sp, #40	@ 0x28
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008590:	2300      	movs	r3, #0
 8008592:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008594:	4b67      	ldr	r3, [pc, #412]	@ (8008734 <HAL_DMA_IRQHandler+0x1ac>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a67      	ldr	r2, [pc, #412]	@ (8008738 <HAL_DMA_IRQHandler+0x1b0>)
 800859a:	fba2 2303 	umull	r2, r3, r2, r3
 800859e:	0a9b      	lsrs	r3, r3, #10
 80085a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a5f      	ldr	r2, [pc, #380]	@ (800873c <HAL_DMA_IRQHandler+0x1b4>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d04a      	beq.n	800865a <HAL_DMA_IRQHandler+0xd2>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a5d      	ldr	r2, [pc, #372]	@ (8008740 <HAL_DMA_IRQHandler+0x1b8>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d045      	beq.n	800865a <HAL_DMA_IRQHandler+0xd2>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a5c      	ldr	r2, [pc, #368]	@ (8008744 <HAL_DMA_IRQHandler+0x1bc>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d040      	beq.n	800865a <HAL_DMA_IRQHandler+0xd2>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a5a      	ldr	r2, [pc, #360]	@ (8008748 <HAL_DMA_IRQHandler+0x1c0>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d03b      	beq.n	800865a <HAL_DMA_IRQHandler+0xd2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a59      	ldr	r2, [pc, #356]	@ (800874c <HAL_DMA_IRQHandler+0x1c4>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d036      	beq.n	800865a <HAL_DMA_IRQHandler+0xd2>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a57      	ldr	r2, [pc, #348]	@ (8008750 <HAL_DMA_IRQHandler+0x1c8>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d031      	beq.n	800865a <HAL_DMA_IRQHandler+0xd2>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a56      	ldr	r2, [pc, #344]	@ (8008754 <HAL_DMA_IRQHandler+0x1cc>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d02c      	beq.n	800865a <HAL_DMA_IRQHandler+0xd2>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a54      	ldr	r2, [pc, #336]	@ (8008758 <HAL_DMA_IRQHandler+0x1d0>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d027      	beq.n	800865a <HAL_DMA_IRQHandler+0xd2>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a53      	ldr	r2, [pc, #332]	@ (800875c <HAL_DMA_IRQHandler+0x1d4>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d022      	beq.n	800865a <HAL_DMA_IRQHandler+0xd2>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a51      	ldr	r2, [pc, #324]	@ (8008760 <HAL_DMA_IRQHandler+0x1d8>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d01d      	beq.n	800865a <HAL_DMA_IRQHandler+0xd2>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a50      	ldr	r2, [pc, #320]	@ (8008764 <HAL_DMA_IRQHandler+0x1dc>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d018      	beq.n	800865a <HAL_DMA_IRQHandler+0xd2>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a4e      	ldr	r2, [pc, #312]	@ (8008768 <HAL_DMA_IRQHandler+0x1e0>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d013      	beq.n	800865a <HAL_DMA_IRQHandler+0xd2>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a4d      	ldr	r2, [pc, #308]	@ (800876c <HAL_DMA_IRQHandler+0x1e4>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d00e      	beq.n	800865a <HAL_DMA_IRQHandler+0xd2>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a4b      	ldr	r2, [pc, #300]	@ (8008770 <HAL_DMA_IRQHandler+0x1e8>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d009      	beq.n	800865a <HAL_DMA_IRQHandler+0xd2>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a4a      	ldr	r2, [pc, #296]	@ (8008774 <HAL_DMA_IRQHandler+0x1ec>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d004      	beq.n	800865a <HAL_DMA_IRQHandler+0xd2>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a48      	ldr	r2, [pc, #288]	@ (8008778 <HAL_DMA_IRQHandler+0x1f0>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d101      	bne.n	800865e <HAL_DMA_IRQHandler+0xd6>
 800865a:	2301      	movs	r3, #1
 800865c:	e000      	b.n	8008660 <HAL_DMA_IRQHandler+0xd8>
 800865e:	2300      	movs	r3, #0
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 842b 	beq.w	8008ebc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800866a:	f003 031f 	and.w	r3, r3, #31
 800866e:	2208      	movs	r2, #8
 8008670:	409a      	lsls	r2, r3
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	4013      	ands	r3, r2
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 80a2 	beq.w	80087c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a2e      	ldr	r2, [pc, #184]	@ (800873c <HAL_DMA_IRQHandler+0x1b4>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d04a      	beq.n	800871c <HAL_DMA_IRQHandler+0x194>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a2d      	ldr	r2, [pc, #180]	@ (8008740 <HAL_DMA_IRQHandler+0x1b8>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d045      	beq.n	800871c <HAL_DMA_IRQHandler+0x194>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a2b      	ldr	r2, [pc, #172]	@ (8008744 <HAL_DMA_IRQHandler+0x1bc>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d040      	beq.n	800871c <HAL_DMA_IRQHandler+0x194>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a2a      	ldr	r2, [pc, #168]	@ (8008748 <HAL_DMA_IRQHandler+0x1c0>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d03b      	beq.n	800871c <HAL_DMA_IRQHandler+0x194>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a28      	ldr	r2, [pc, #160]	@ (800874c <HAL_DMA_IRQHandler+0x1c4>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d036      	beq.n	800871c <HAL_DMA_IRQHandler+0x194>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a27      	ldr	r2, [pc, #156]	@ (8008750 <HAL_DMA_IRQHandler+0x1c8>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d031      	beq.n	800871c <HAL_DMA_IRQHandler+0x194>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a25      	ldr	r2, [pc, #148]	@ (8008754 <HAL_DMA_IRQHandler+0x1cc>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d02c      	beq.n	800871c <HAL_DMA_IRQHandler+0x194>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a24      	ldr	r2, [pc, #144]	@ (8008758 <HAL_DMA_IRQHandler+0x1d0>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d027      	beq.n	800871c <HAL_DMA_IRQHandler+0x194>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a22      	ldr	r2, [pc, #136]	@ (800875c <HAL_DMA_IRQHandler+0x1d4>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d022      	beq.n	800871c <HAL_DMA_IRQHandler+0x194>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a21      	ldr	r2, [pc, #132]	@ (8008760 <HAL_DMA_IRQHandler+0x1d8>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d01d      	beq.n	800871c <HAL_DMA_IRQHandler+0x194>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a1f      	ldr	r2, [pc, #124]	@ (8008764 <HAL_DMA_IRQHandler+0x1dc>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d018      	beq.n	800871c <HAL_DMA_IRQHandler+0x194>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a1e      	ldr	r2, [pc, #120]	@ (8008768 <HAL_DMA_IRQHandler+0x1e0>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d013      	beq.n	800871c <HAL_DMA_IRQHandler+0x194>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a1c      	ldr	r2, [pc, #112]	@ (800876c <HAL_DMA_IRQHandler+0x1e4>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d00e      	beq.n	800871c <HAL_DMA_IRQHandler+0x194>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a1b      	ldr	r2, [pc, #108]	@ (8008770 <HAL_DMA_IRQHandler+0x1e8>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d009      	beq.n	800871c <HAL_DMA_IRQHandler+0x194>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a19      	ldr	r2, [pc, #100]	@ (8008774 <HAL_DMA_IRQHandler+0x1ec>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d004      	beq.n	800871c <HAL_DMA_IRQHandler+0x194>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a18      	ldr	r2, [pc, #96]	@ (8008778 <HAL_DMA_IRQHandler+0x1f0>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d12f      	bne.n	800877c <HAL_DMA_IRQHandler+0x1f4>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0304 	and.w	r3, r3, #4
 8008726:	2b00      	cmp	r3, #0
 8008728:	bf14      	ite	ne
 800872a:	2301      	movne	r3, #1
 800872c:	2300      	moveq	r3, #0
 800872e:	b2db      	uxtb	r3, r3
 8008730:	e02e      	b.n	8008790 <HAL_DMA_IRQHandler+0x208>
 8008732:	bf00      	nop
 8008734:	240001e4 	.word	0x240001e4
 8008738:	1b4e81b5 	.word	0x1b4e81b5
 800873c:	40020010 	.word	0x40020010
 8008740:	40020028 	.word	0x40020028
 8008744:	40020040 	.word	0x40020040
 8008748:	40020058 	.word	0x40020058
 800874c:	40020070 	.word	0x40020070
 8008750:	40020088 	.word	0x40020088
 8008754:	400200a0 	.word	0x400200a0
 8008758:	400200b8 	.word	0x400200b8
 800875c:	40020410 	.word	0x40020410
 8008760:	40020428 	.word	0x40020428
 8008764:	40020440 	.word	0x40020440
 8008768:	40020458 	.word	0x40020458
 800876c:	40020470 	.word	0x40020470
 8008770:	40020488 	.word	0x40020488
 8008774:	400204a0 	.word	0x400204a0
 8008778:	400204b8 	.word	0x400204b8
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0308 	and.w	r3, r3, #8
 8008786:	2b00      	cmp	r3, #0
 8008788:	bf14      	ite	ne
 800878a:	2301      	movne	r3, #1
 800878c:	2300      	moveq	r3, #0
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b00      	cmp	r3, #0
 8008792:	d015      	beq.n	80087c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f022 0204 	bic.w	r2, r2, #4
 80087a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087a8:	f003 031f 	and.w	r3, r3, #31
 80087ac:	2208      	movs	r2, #8
 80087ae:	409a      	lsls	r2, r3
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087b8:	f043 0201 	orr.w	r2, r3, #1
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087c4:	f003 031f 	and.w	r3, r3, #31
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	fa22 f303 	lsr.w	r3, r2, r3
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d06e      	beq.n	80088b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a69      	ldr	r2, [pc, #420]	@ (8008980 <HAL_DMA_IRQHandler+0x3f8>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d04a      	beq.n	8008876 <HAL_DMA_IRQHandler+0x2ee>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a67      	ldr	r2, [pc, #412]	@ (8008984 <HAL_DMA_IRQHandler+0x3fc>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d045      	beq.n	8008876 <HAL_DMA_IRQHandler+0x2ee>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a66      	ldr	r2, [pc, #408]	@ (8008988 <HAL_DMA_IRQHandler+0x400>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d040      	beq.n	8008876 <HAL_DMA_IRQHandler+0x2ee>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a64      	ldr	r2, [pc, #400]	@ (800898c <HAL_DMA_IRQHandler+0x404>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d03b      	beq.n	8008876 <HAL_DMA_IRQHandler+0x2ee>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a63      	ldr	r2, [pc, #396]	@ (8008990 <HAL_DMA_IRQHandler+0x408>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d036      	beq.n	8008876 <HAL_DMA_IRQHandler+0x2ee>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a61      	ldr	r2, [pc, #388]	@ (8008994 <HAL_DMA_IRQHandler+0x40c>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d031      	beq.n	8008876 <HAL_DMA_IRQHandler+0x2ee>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a60      	ldr	r2, [pc, #384]	@ (8008998 <HAL_DMA_IRQHandler+0x410>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d02c      	beq.n	8008876 <HAL_DMA_IRQHandler+0x2ee>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a5e      	ldr	r2, [pc, #376]	@ (800899c <HAL_DMA_IRQHandler+0x414>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d027      	beq.n	8008876 <HAL_DMA_IRQHandler+0x2ee>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a5d      	ldr	r2, [pc, #372]	@ (80089a0 <HAL_DMA_IRQHandler+0x418>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d022      	beq.n	8008876 <HAL_DMA_IRQHandler+0x2ee>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a5b      	ldr	r2, [pc, #364]	@ (80089a4 <HAL_DMA_IRQHandler+0x41c>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d01d      	beq.n	8008876 <HAL_DMA_IRQHandler+0x2ee>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a5a      	ldr	r2, [pc, #360]	@ (80089a8 <HAL_DMA_IRQHandler+0x420>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d018      	beq.n	8008876 <HAL_DMA_IRQHandler+0x2ee>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a58      	ldr	r2, [pc, #352]	@ (80089ac <HAL_DMA_IRQHandler+0x424>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d013      	beq.n	8008876 <HAL_DMA_IRQHandler+0x2ee>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a57      	ldr	r2, [pc, #348]	@ (80089b0 <HAL_DMA_IRQHandler+0x428>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d00e      	beq.n	8008876 <HAL_DMA_IRQHandler+0x2ee>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a55      	ldr	r2, [pc, #340]	@ (80089b4 <HAL_DMA_IRQHandler+0x42c>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d009      	beq.n	8008876 <HAL_DMA_IRQHandler+0x2ee>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a54      	ldr	r2, [pc, #336]	@ (80089b8 <HAL_DMA_IRQHandler+0x430>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d004      	beq.n	8008876 <HAL_DMA_IRQHandler+0x2ee>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a52      	ldr	r2, [pc, #328]	@ (80089bc <HAL_DMA_IRQHandler+0x434>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d10a      	bne.n	800888c <HAL_DMA_IRQHandler+0x304>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008880:	2b00      	cmp	r3, #0
 8008882:	bf14      	ite	ne
 8008884:	2301      	movne	r3, #1
 8008886:	2300      	moveq	r3, #0
 8008888:	b2db      	uxtb	r3, r3
 800888a:	e003      	b.n	8008894 <HAL_DMA_IRQHandler+0x30c>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2300      	movs	r3, #0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00d      	beq.n	80088b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800889c:	f003 031f 	and.w	r3, r3, #31
 80088a0:	2201      	movs	r2, #1
 80088a2:	409a      	lsls	r2, r3
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088ac:	f043 0202 	orr.w	r2, r3, #2
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088b8:	f003 031f 	and.w	r3, r3, #31
 80088bc:	2204      	movs	r2, #4
 80088be:	409a      	lsls	r2, r3
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	4013      	ands	r3, r2
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 808f 	beq.w	80089e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a2c      	ldr	r2, [pc, #176]	@ (8008980 <HAL_DMA_IRQHandler+0x3f8>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d04a      	beq.n	800896a <HAL_DMA_IRQHandler+0x3e2>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a2a      	ldr	r2, [pc, #168]	@ (8008984 <HAL_DMA_IRQHandler+0x3fc>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d045      	beq.n	800896a <HAL_DMA_IRQHandler+0x3e2>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a29      	ldr	r2, [pc, #164]	@ (8008988 <HAL_DMA_IRQHandler+0x400>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d040      	beq.n	800896a <HAL_DMA_IRQHandler+0x3e2>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a27      	ldr	r2, [pc, #156]	@ (800898c <HAL_DMA_IRQHandler+0x404>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d03b      	beq.n	800896a <HAL_DMA_IRQHandler+0x3e2>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a26      	ldr	r2, [pc, #152]	@ (8008990 <HAL_DMA_IRQHandler+0x408>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d036      	beq.n	800896a <HAL_DMA_IRQHandler+0x3e2>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a24      	ldr	r2, [pc, #144]	@ (8008994 <HAL_DMA_IRQHandler+0x40c>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d031      	beq.n	800896a <HAL_DMA_IRQHandler+0x3e2>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a23      	ldr	r2, [pc, #140]	@ (8008998 <HAL_DMA_IRQHandler+0x410>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d02c      	beq.n	800896a <HAL_DMA_IRQHandler+0x3e2>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a21      	ldr	r2, [pc, #132]	@ (800899c <HAL_DMA_IRQHandler+0x414>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d027      	beq.n	800896a <HAL_DMA_IRQHandler+0x3e2>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a20      	ldr	r2, [pc, #128]	@ (80089a0 <HAL_DMA_IRQHandler+0x418>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d022      	beq.n	800896a <HAL_DMA_IRQHandler+0x3e2>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a1e      	ldr	r2, [pc, #120]	@ (80089a4 <HAL_DMA_IRQHandler+0x41c>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d01d      	beq.n	800896a <HAL_DMA_IRQHandler+0x3e2>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a1d      	ldr	r2, [pc, #116]	@ (80089a8 <HAL_DMA_IRQHandler+0x420>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d018      	beq.n	800896a <HAL_DMA_IRQHandler+0x3e2>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a1b      	ldr	r2, [pc, #108]	@ (80089ac <HAL_DMA_IRQHandler+0x424>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d013      	beq.n	800896a <HAL_DMA_IRQHandler+0x3e2>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a1a      	ldr	r2, [pc, #104]	@ (80089b0 <HAL_DMA_IRQHandler+0x428>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d00e      	beq.n	800896a <HAL_DMA_IRQHandler+0x3e2>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a18      	ldr	r2, [pc, #96]	@ (80089b4 <HAL_DMA_IRQHandler+0x42c>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d009      	beq.n	800896a <HAL_DMA_IRQHandler+0x3e2>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a17      	ldr	r2, [pc, #92]	@ (80089b8 <HAL_DMA_IRQHandler+0x430>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d004      	beq.n	800896a <HAL_DMA_IRQHandler+0x3e2>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a15      	ldr	r2, [pc, #84]	@ (80089bc <HAL_DMA_IRQHandler+0x434>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d12a      	bne.n	80089c0 <HAL_DMA_IRQHandler+0x438>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 0302 	and.w	r3, r3, #2
 8008974:	2b00      	cmp	r3, #0
 8008976:	bf14      	ite	ne
 8008978:	2301      	movne	r3, #1
 800897a:	2300      	moveq	r3, #0
 800897c:	b2db      	uxtb	r3, r3
 800897e:	e023      	b.n	80089c8 <HAL_DMA_IRQHandler+0x440>
 8008980:	40020010 	.word	0x40020010
 8008984:	40020028 	.word	0x40020028
 8008988:	40020040 	.word	0x40020040
 800898c:	40020058 	.word	0x40020058
 8008990:	40020070 	.word	0x40020070
 8008994:	40020088 	.word	0x40020088
 8008998:	400200a0 	.word	0x400200a0
 800899c:	400200b8 	.word	0x400200b8
 80089a0:	40020410 	.word	0x40020410
 80089a4:	40020428 	.word	0x40020428
 80089a8:	40020440 	.word	0x40020440
 80089ac:	40020458 	.word	0x40020458
 80089b0:	40020470 	.word	0x40020470
 80089b4:	40020488 	.word	0x40020488
 80089b8:	400204a0 	.word	0x400204a0
 80089bc:	400204b8 	.word	0x400204b8
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2300      	movs	r3, #0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00d      	beq.n	80089e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089d0:	f003 031f 	and.w	r3, r3, #31
 80089d4:	2204      	movs	r2, #4
 80089d6:	409a      	lsls	r2, r3
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089e0:	f043 0204 	orr.w	r2, r3, #4
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089ec:	f003 031f 	and.w	r3, r3, #31
 80089f0:	2210      	movs	r2, #16
 80089f2:	409a      	lsls	r2, r3
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	4013      	ands	r3, r2
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 80a6 	beq.w	8008b4a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a85      	ldr	r2, [pc, #532]	@ (8008c18 <HAL_DMA_IRQHandler+0x690>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d04a      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x516>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a83      	ldr	r2, [pc, #524]	@ (8008c1c <HAL_DMA_IRQHandler+0x694>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d045      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x516>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a82      	ldr	r2, [pc, #520]	@ (8008c20 <HAL_DMA_IRQHandler+0x698>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d040      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x516>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a80      	ldr	r2, [pc, #512]	@ (8008c24 <HAL_DMA_IRQHandler+0x69c>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d03b      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x516>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a7f      	ldr	r2, [pc, #508]	@ (8008c28 <HAL_DMA_IRQHandler+0x6a0>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d036      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x516>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a7d      	ldr	r2, [pc, #500]	@ (8008c2c <HAL_DMA_IRQHandler+0x6a4>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d031      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x516>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a7c      	ldr	r2, [pc, #496]	@ (8008c30 <HAL_DMA_IRQHandler+0x6a8>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d02c      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x516>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a7a      	ldr	r2, [pc, #488]	@ (8008c34 <HAL_DMA_IRQHandler+0x6ac>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d027      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x516>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a79      	ldr	r2, [pc, #484]	@ (8008c38 <HAL_DMA_IRQHandler+0x6b0>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d022      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x516>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a77      	ldr	r2, [pc, #476]	@ (8008c3c <HAL_DMA_IRQHandler+0x6b4>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d01d      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x516>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a76      	ldr	r2, [pc, #472]	@ (8008c40 <HAL_DMA_IRQHandler+0x6b8>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d018      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x516>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a74      	ldr	r2, [pc, #464]	@ (8008c44 <HAL_DMA_IRQHandler+0x6bc>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d013      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x516>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a73      	ldr	r2, [pc, #460]	@ (8008c48 <HAL_DMA_IRQHandler+0x6c0>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d00e      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x516>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a71      	ldr	r2, [pc, #452]	@ (8008c4c <HAL_DMA_IRQHandler+0x6c4>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d009      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x516>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a70      	ldr	r2, [pc, #448]	@ (8008c50 <HAL_DMA_IRQHandler+0x6c8>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d004      	beq.n	8008a9e <HAL_DMA_IRQHandler+0x516>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a6e      	ldr	r2, [pc, #440]	@ (8008c54 <HAL_DMA_IRQHandler+0x6cc>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d10a      	bne.n	8008ab4 <HAL_DMA_IRQHandler+0x52c>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0308 	and.w	r3, r3, #8
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	bf14      	ite	ne
 8008aac:	2301      	movne	r3, #1
 8008aae:	2300      	moveq	r3, #0
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	e009      	b.n	8008ac8 <HAL_DMA_IRQHandler+0x540>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0304 	and.w	r3, r3, #4
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	bf14      	ite	ne
 8008ac2:	2301      	movne	r3, #1
 8008ac4:	2300      	moveq	r3, #0
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d03e      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ad0:	f003 031f 	and.w	r3, r3, #31
 8008ad4:	2210      	movs	r2, #16
 8008ad6:	409a      	lsls	r2, r3
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d018      	beq.n	8008b1c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d108      	bne.n	8008b0a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d024      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	4798      	blx	r3
 8008b08:	e01f      	b.n	8008b4a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d01b      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	4798      	blx	r3
 8008b1a:	e016      	b.n	8008b4a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d107      	bne.n	8008b3a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f022 0208 	bic.w	r2, r2, #8
 8008b38:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b4e:	f003 031f 	and.w	r3, r3, #31
 8008b52:	2220      	movs	r2, #32
 8008b54:	409a      	lsls	r2, r3
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	4013      	ands	r3, r2
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 8110 	beq.w	8008d80 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a2c      	ldr	r2, [pc, #176]	@ (8008c18 <HAL_DMA_IRQHandler+0x690>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d04a      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x678>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8008c1c <HAL_DMA_IRQHandler+0x694>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d045      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x678>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a29      	ldr	r2, [pc, #164]	@ (8008c20 <HAL_DMA_IRQHandler+0x698>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d040      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x678>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a28      	ldr	r2, [pc, #160]	@ (8008c24 <HAL_DMA_IRQHandler+0x69c>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d03b      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x678>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a26      	ldr	r2, [pc, #152]	@ (8008c28 <HAL_DMA_IRQHandler+0x6a0>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d036      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x678>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a25      	ldr	r2, [pc, #148]	@ (8008c2c <HAL_DMA_IRQHandler+0x6a4>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d031      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x678>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a23      	ldr	r2, [pc, #140]	@ (8008c30 <HAL_DMA_IRQHandler+0x6a8>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d02c      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x678>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a22      	ldr	r2, [pc, #136]	@ (8008c34 <HAL_DMA_IRQHandler+0x6ac>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d027      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x678>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a20      	ldr	r2, [pc, #128]	@ (8008c38 <HAL_DMA_IRQHandler+0x6b0>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d022      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x678>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8008c3c <HAL_DMA_IRQHandler+0x6b4>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d01d      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x678>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c40 <HAL_DMA_IRQHandler+0x6b8>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d018      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x678>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8008c44 <HAL_DMA_IRQHandler+0x6bc>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d013      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x678>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8008c48 <HAL_DMA_IRQHandler+0x6c0>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00e      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x678>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a19      	ldr	r2, [pc, #100]	@ (8008c4c <HAL_DMA_IRQHandler+0x6c4>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d009      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x678>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a17      	ldr	r2, [pc, #92]	@ (8008c50 <HAL_DMA_IRQHandler+0x6c8>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d004      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x678>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a16      	ldr	r2, [pc, #88]	@ (8008c54 <HAL_DMA_IRQHandler+0x6cc>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d12b      	bne.n	8008c58 <HAL_DMA_IRQHandler+0x6d0>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0310 	and.w	r3, r3, #16
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	bf14      	ite	ne
 8008c0e:	2301      	movne	r3, #1
 8008c10:	2300      	moveq	r3, #0
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	e02a      	b.n	8008c6c <HAL_DMA_IRQHandler+0x6e4>
 8008c16:	bf00      	nop
 8008c18:	40020010 	.word	0x40020010
 8008c1c:	40020028 	.word	0x40020028
 8008c20:	40020040 	.word	0x40020040
 8008c24:	40020058 	.word	0x40020058
 8008c28:	40020070 	.word	0x40020070
 8008c2c:	40020088 	.word	0x40020088
 8008c30:	400200a0 	.word	0x400200a0
 8008c34:	400200b8 	.word	0x400200b8
 8008c38:	40020410 	.word	0x40020410
 8008c3c:	40020428 	.word	0x40020428
 8008c40:	40020440 	.word	0x40020440
 8008c44:	40020458 	.word	0x40020458
 8008c48:	40020470 	.word	0x40020470
 8008c4c:	40020488 	.word	0x40020488
 8008c50:	400204a0 	.word	0x400204a0
 8008c54:	400204b8 	.word	0x400204b8
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 0302 	and.w	r3, r3, #2
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	bf14      	ite	ne
 8008c66:	2301      	movne	r3, #1
 8008c68:	2300      	moveq	r3, #0
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 8087 	beq.w	8008d80 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c76:	f003 031f 	and.w	r3, r3, #31
 8008c7a:	2220      	movs	r2, #32
 8008c7c:	409a      	lsls	r2, r3
 8008c7e:	6a3b      	ldr	r3, [r7, #32]
 8008c80:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b04      	cmp	r3, #4
 8008c8c:	d139      	bne.n	8008d02 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f022 0216 	bic.w	r2, r2, #22
 8008c9c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	695a      	ldr	r2, [r3, #20]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008cac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d103      	bne.n	8008cbe <HAL_DMA_IRQHandler+0x736>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d007      	beq.n	8008cce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f022 0208 	bic.w	r2, r2, #8
 8008ccc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cd2:	f003 031f 	and.w	r3, r3, #31
 8008cd6:	223f      	movs	r2, #63	@ 0x3f
 8008cd8:	409a      	lsls	r2, r3
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 834a 	beq.w	800938c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	4798      	blx	r3
          }
          return;
 8008d00:	e344      	b.n	800938c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d018      	beq.n	8008d42 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d108      	bne.n	8008d30 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d02c      	beq.n	8008d80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	4798      	blx	r3
 8008d2e:	e027      	b.n	8008d80 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d023      	beq.n	8008d80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	4798      	blx	r3
 8008d40:	e01e      	b.n	8008d80 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10f      	bne.n	8008d70 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f022 0210 	bic.w	r2, r2, #16
 8008d5e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d003      	beq.n	8008d80 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 8306 	beq.w	8009396 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f000 8088 	beq.w	8008ea8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2204      	movs	r2, #4
 8008d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a7a      	ldr	r2, [pc, #488]	@ (8008f90 <HAL_DMA_IRQHandler+0xa08>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d04a      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x8b8>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a79      	ldr	r2, [pc, #484]	@ (8008f94 <HAL_DMA_IRQHandler+0xa0c>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d045      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x8b8>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a77      	ldr	r2, [pc, #476]	@ (8008f98 <HAL_DMA_IRQHandler+0xa10>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d040      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x8b8>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a76      	ldr	r2, [pc, #472]	@ (8008f9c <HAL_DMA_IRQHandler+0xa14>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d03b      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x8b8>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a74      	ldr	r2, [pc, #464]	@ (8008fa0 <HAL_DMA_IRQHandler+0xa18>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d036      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x8b8>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a73      	ldr	r2, [pc, #460]	@ (8008fa4 <HAL_DMA_IRQHandler+0xa1c>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d031      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x8b8>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a71      	ldr	r2, [pc, #452]	@ (8008fa8 <HAL_DMA_IRQHandler+0xa20>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d02c      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x8b8>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a70      	ldr	r2, [pc, #448]	@ (8008fac <HAL_DMA_IRQHandler+0xa24>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d027      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x8b8>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a6e      	ldr	r2, [pc, #440]	@ (8008fb0 <HAL_DMA_IRQHandler+0xa28>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d022      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x8b8>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a6d      	ldr	r2, [pc, #436]	@ (8008fb4 <HAL_DMA_IRQHandler+0xa2c>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d01d      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x8b8>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a6b      	ldr	r2, [pc, #428]	@ (8008fb8 <HAL_DMA_IRQHandler+0xa30>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d018      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x8b8>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a6a      	ldr	r2, [pc, #424]	@ (8008fbc <HAL_DMA_IRQHandler+0xa34>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d013      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x8b8>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a68      	ldr	r2, [pc, #416]	@ (8008fc0 <HAL_DMA_IRQHandler+0xa38>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d00e      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x8b8>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a67      	ldr	r2, [pc, #412]	@ (8008fc4 <HAL_DMA_IRQHandler+0xa3c>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d009      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x8b8>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a65      	ldr	r2, [pc, #404]	@ (8008fc8 <HAL_DMA_IRQHandler+0xa40>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d004      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x8b8>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a64      	ldr	r2, [pc, #400]	@ (8008fcc <HAL_DMA_IRQHandler+0xa44>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d108      	bne.n	8008e52 <HAL_DMA_IRQHandler+0x8ca>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f022 0201 	bic.w	r2, r2, #1
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	e007      	b.n	8008e62 <HAL_DMA_IRQHandler+0x8da>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f022 0201 	bic.w	r2, r2, #1
 8008e60:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3301      	adds	r3, #1
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d307      	bcc.n	8008e7e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1f2      	bne.n	8008e62 <HAL_DMA_IRQHandler+0x8da>
 8008e7c:	e000      	b.n	8008e80 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008e7e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d004      	beq.n	8008e98 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2203      	movs	r2, #3
 8008e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008e96:	e003      	b.n	8008ea0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 8272 	beq.w	8009396 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	4798      	blx	r3
 8008eba:	e26c      	b.n	8009396 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a43      	ldr	r2, [pc, #268]	@ (8008fd0 <HAL_DMA_IRQHandler+0xa48>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d022      	beq.n	8008f0c <HAL_DMA_IRQHandler+0x984>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a42      	ldr	r2, [pc, #264]	@ (8008fd4 <HAL_DMA_IRQHandler+0xa4c>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d01d      	beq.n	8008f0c <HAL_DMA_IRQHandler+0x984>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a40      	ldr	r2, [pc, #256]	@ (8008fd8 <HAL_DMA_IRQHandler+0xa50>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d018      	beq.n	8008f0c <HAL_DMA_IRQHandler+0x984>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a3f      	ldr	r2, [pc, #252]	@ (8008fdc <HAL_DMA_IRQHandler+0xa54>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d013      	beq.n	8008f0c <HAL_DMA_IRQHandler+0x984>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a3d      	ldr	r2, [pc, #244]	@ (8008fe0 <HAL_DMA_IRQHandler+0xa58>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d00e      	beq.n	8008f0c <HAL_DMA_IRQHandler+0x984>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a3c      	ldr	r2, [pc, #240]	@ (8008fe4 <HAL_DMA_IRQHandler+0xa5c>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d009      	beq.n	8008f0c <HAL_DMA_IRQHandler+0x984>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a3a      	ldr	r2, [pc, #232]	@ (8008fe8 <HAL_DMA_IRQHandler+0xa60>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d004      	beq.n	8008f0c <HAL_DMA_IRQHandler+0x984>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a39      	ldr	r2, [pc, #228]	@ (8008fec <HAL_DMA_IRQHandler+0xa64>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d101      	bne.n	8008f10 <HAL_DMA_IRQHandler+0x988>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e000      	b.n	8008f12 <HAL_DMA_IRQHandler+0x98a>
 8008f10:	2300      	movs	r3, #0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 823f 	beq.w	8009396 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f24:	f003 031f 	and.w	r3, r3, #31
 8008f28:	2204      	movs	r2, #4
 8008f2a:	409a      	lsls	r2, r3
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	4013      	ands	r3, r2
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 80cd 	beq.w	80090d0 <HAL_DMA_IRQHandler+0xb48>
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f000 80c7 	beq.w	80090d0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f46:	f003 031f 	and.w	r3, r3, #31
 8008f4a:	2204      	movs	r2, #4
 8008f4c:	409a      	lsls	r2, r3
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d049      	beq.n	8008ff0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d109      	bne.n	8008f7a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 8210 	beq.w	8009390 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f78:	e20a      	b.n	8009390 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 8206 	beq.w	8009390 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f8c:	e200      	b.n	8009390 <HAL_DMA_IRQHandler+0xe08>
 8008f8e:	bf00      	nop
 8008f90:	40020010 	.word	0x40020010
 8008f94:	40020028 	.word	0x40020028
 8008f98:	40020040 	.word	0x40020040
 8008f9c:	40020058 	.word	0x40020058
 8008fa0:	40020070 	.word	0x40020070
 8008fa4:	40020088 	.word	0x40020088
 8008fa8:	400200a0 	.word	0x400200a0
 8008fac:	400200b8 	.word	0x400200b8
 8008fb0:	40020410 	.word	0x40020410
 8008fb4:	40020428 	.word	0x40020428
 8008fb8:	40020440 	.word	0x40020440
 8008fbc:	40020458 	.word	0x40020458
 8008fc0:	40020470 	.word	0x40020470
 8008fc4:	40020488 	.word	0x40020488
 8008fc8:	400204a0 	.word	0x400204a0
 8008fcc:	400204b8 	.word	0x400204b8
 8008fd0:	58025408 	.word	0x58025408
 8008fd4:	5802541c 	.word	0x5802541c
 8008fd8:	58025430 	.word	0x58025430
 8008fdc:	58025444 	.word	0x58025444
 8008fe0:	58025458 	.word	0x58025458
 8008fe4:	5802546c 	.word	0x5802546c
 8008fe8:	58025480 	.word	0x58025480
 8008fec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	f003 0320 	and.w	r3, r3, #32
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d160      	bne.n	80090bc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a7f      	ldr	r2, [pc, #508]	@ (80091fc <HAL_DMA_IRQHandler+0xc74>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d04a      	beq.n	800909a <HAL_DMA_IRQHandler+0xb12>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a7d      	ldr	r2, [pc, #500]	@ (8009200 <HAL_DMA_IRQHandler+0xc78>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d045      	beq.n	800909a <HAL_DMA_IRQHandler+0xb12>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a7c      	ldr	r2, [pc, #496]	@ (8009204 <HAL_DMA_IRQHandler+0xc7c>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d040      	beq.n	800909a <HAL_DMA_IRQHandler+0xb12>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a7a      	ldr	r2, [pc, #488]	@ (8009208 <HAL_DMA_IRQHandler+0xc80>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d03b      	beq.n	800909a <HAL_DMA_IRQHandler+0xb12>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a79      	ldr	r2, [pc, #484]	@ (800920c <HAL_DMA_IRQHandler+0xc84>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d036      	beq.n	800909a <HAL_DMA_IRQHandler+0xb12>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a77      	ldr	r2, [pc, #476]	@ (8009210 <HAL_DMA_IRQHandler+0xc88>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d031      	beq.n	800909a <HAL_DMA_IRQHandler+0xb12>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a76      	ldr	r2, [pc, #472]	@ (8009214 <HAL_DMA_IRQHandler+0xc8c>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d02c      	beq.n	800909a <HAL_DMA_IRQHandler+0xb12>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a74      	ldr	r2, [pc, #464]	@ (8009218 <HAL_DMA_IRQHandler+0xc90>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d027      	beq.n	800909a <HAL_DMA_IRQHandler+0xb12>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a73      	ldr	r2, [pc, #460]	@ (800921c <HAL_DMA_IRQHandler+0xc94>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d022      	beq.n	800909a <HAL_DMA_IRQHandler+0xb12>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a71      	ldr	r2, [pc, #452]	@ (8009220 <HAL_DMA_IRQHandler+0xc98>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d01d      	beq.n	800909a <HAL_DMA_IRQHandler+0xb12>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a70      	ldr	r2, [pc, #448]	@ (8009224 <HAL_DMA_IRQHandler+0xc9c>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d018      	beq.n	800909a <HAL_DMA_IRQHandler+0xb12>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a6e      	ldr	r2, [pc, #440]	@ (8009228 <HAL_DMA_IRQHandler+0xca0>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d013      	beq.n	800909a <HAL_DMA_IRQHandler+0xb12>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a6d      	ldr	r2, [pc, #436]	@ (800922c <HAL_DMA_IRQHandler+0xca4>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d00e      	beq.n	800909a <HAL_DMA_IRQHandler+0xb12>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a6b      	ldr	r2, [pc, #428]	@ (8009230 <HAL_DMA_IRQHandler+0xca8>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d009      	beq.n	800909a <HAL_DMA_IRQHandler+0xb12>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a6a      	ldr	r2, [pc, #424]	@ (8009234 <HAL_DMA_IRQHandler+0xcac>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d004      	beq.n	800909a <HAL_DMA_IRQHandler+0xb12>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a68      	ldr	r2, [pc, #416]	@ (8009238 <HAL_DMA_IRQHandler+0xcb0>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d108      	bne.n	80090ac <HAL_DMA_IRQHandler+0xb24>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f022 0208 	bic.w	r2, r2, #8
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	e007      	b.n	80090bc <HAL_DMA_IRQHandler+0xb34>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f022 0204 	bic.w	r2, r2, #4
 80090ba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f000 8165 	beq.w	8009390 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090ce:	e15f      	b.n	8009390 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090d4:	f003 031f 	and.w	r3, r3, #31
 80090d8:	2202      	movs	r2, #2
 80090da:	409a      	lsls	r2, r3
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	4013      	ands	r3, r2
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 80c5 	beq.w	8009270 <HAL_DMA_IRQHandler+0xce8>
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	f003 0302 	and.w	r3, r3, #2
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 80bf 	beq.w	8009270 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090f6:	f003 031f 	and.w	r3, r3, #31
 80090fa:	2202      	movs	r2, #2
 80090fc:	409a      	lsls	r2, r3
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d018      	beq.n	800913e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d109      	bne.n	800912a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 813a 	beq.w	8009394 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009128:	e134      	b.n	8009394 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 8130 	beq.w	8009394 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800913c:	e12a      	b.n	8009394 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	f003 0320 	and.w	r3, r3, #32
 8009144:	2b00      	cmp	r3, #0
 8009146:	f040 8089 	bne.w	800925c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a2b      	ldr	r2, [pc, #172]	@ (80091fc <HAL_DMA_IRQHandler+0xc74>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d04a      	beq.n	80091ea <HAL_DMA_IRQHandler+0xc62>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a29      	ldr	r2, [pc, #164]	@ (8009200 <HAL_DMA_IRQHandler+0xc78>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d045      	beq.n	80091ea <HAL_DMA_IRQHandler+0xc62>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a28      	ldr	r2, [pc, #160]	@ (8009204 <HAL_DMA_IRQHandler+0xc7c>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d040      	beq.n	80091ea <HAL_DMA_IRQHandler+0xc62>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a26      	ldr	r2, [pc, #152]	@ (8009208 <HAL_DMA_IRQHandler+0xc80>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d03b      	beq.n	80091ea <HAL_DMA_IRQHandler+0xc62>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a25      	ldr	r2, [pc, #148]	@ (800920c <HAL_DMA_IRQHandler+0xc84>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d036      	beq.n	80091ea <HAL_DMA_IRQHandler+0xc62>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a23      	ldr	r2, [pc, #140]	@ (8009210 <HAL_DMA_IRQHandler+0xc88>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d031      	beq.n	80091ea <HAL_DMA_IRQHandler+0xc62>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a22      	ldr	r2, [pc, #136]	@ (8009214 <HAL_DMA_IRQHandler+0xc8c>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d02c      	beq.n	80091ea <HAL_DMA_IRQHandler+0xc62>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a20      	ldr	r2, [pc, #128]	@ (8009218 <HAL_DMA_IRQHandler+0xc90>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d027      	beq.n	80091ea <HAL_DMA_IRQHandler+0xc62>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a1f      	ldr	r2, [pc, #124]	@ (800921c <HAL_DMA_IRQHandler+0xc94>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d022      	beq.n	80091ea <HAL_DMA_IRQHandler+0xc62>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009220 <HAL_DMA_IRQHandler+0xc98>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d01d      	beq.n	80091ea <HAL_DMA_IRQHandler+0xc62>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a1c      	ldr	r2, [pc, #112]	@ (8009224 <HAL_DMA_IRQHandler+0xc9c>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d018      	beq.n	80091ea <HAL_DMA_IRQHandler+0xc62>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a1a      	ldr	r2, [pc, #104]	@ (8009228 <HAL_DMA_IRQHandler+0xca0>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d013      	beq.n	80091ea <HAL_DMA_IRQHandler+0xc62>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a19      	ldr	r2, [pc, #100]	@ (800922c <HAL_DMA_IRQHandler+0xca4>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d00e      	beq.n	80091ea <HAL_DMA_IRQHandler+0xc62>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a17      	ldr	r2, [pc, #92]	@ (8009230 <HAL_DMA_IRQHandler+0xca8>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d009      	beq.n	80091ea <HAL_DMA_IRQHandler+0xc62>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a16      	ldr	r2, [pc, #88]	@ (8009234 <HAL_DMA_IRQHandler+0xcac>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d004      	beq.n	80091ea <HAL_DMA_IRQHandler+0xc62>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a14      	ldr	r2, [pc, #80]	@ (8009238 <HAL_DMA_IRQHandler+0xcb0>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d128      	bne.n	800923c <HAL_DMA_IRQHandler+0xcb4>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f022 0214 	bic.w	r2, r2, #20
 80091f8:	601a      	str	r2, [r3, #0]
 80091fa:	e027      	b.n	800924c <HAL_DMA_IRQHandler+0xcc4>
 80091fc:	40020010 	.word	0x40020010
 8009200:	40020028 	.word	0x40020028
 8009204:	40020040 	.word	0x40020040
 8009208:	40020058 	.word	0x40020058
 800920c:	40020070 	.word	0x40020070
 8009210:	40020088 	.word	0x40020088
 8009214:	400200a0 	.word	0x400200a0
 8009218:	400200b8 	.word	0x400200b8
 800921c:	40020410 	.word	0x40020410
 8009220:	40020428 	.word	0x40020428
 8009224:	40020440 	.word	0x40020440
 8009228:	40020458 	.word	0x40020458
 800922c:	40020470 	.word	0x40020470
 8009230:	40020488 	.word	0x40020488
 8009234:	400204a0 	.word	0x400204a0
 8009238:	400204b8 	.word	0x400204b8
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f022 020a 	bic.w	r2, r2, #10
 800924a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 8097 	beq.w	8009394 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800926e:	e091      	b.n	8009394 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009274:	f003 031f 	and.w	r3, r3, #31
 8009278:	2208      	movs	r2, #8
 800927a:	409a      	lsls	r2, r3
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	4013      	ands	r3, r2
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 8088 	beq.w	8009396 <HAL_DMA_IRQHandler+0xe0e>
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	f003 0308 	and.w	r3, r3, #8
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 8082 	beq.w	8009396 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a41      	ldr	r2, [pc, #260]	@ (800939c <HAL_DMA_IRQHandler+0xe14>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d04a      	beq.n	8009332 <HAL_DMA_IRQHandler+0xdaa>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a3f      	ldr	r2, [pc, #252]	@ (80093a0 <HAL_DMA_IRQHandler+0xe18>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d045      	beq.n	8009332 <HAL_DMA_IRQHandler+0xdaa>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a3e      	ldr	r2, [pc, #248]	@ (80093a4 <HAL_DMA_IRQHandler+0xe1c>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d040      	beq.n	8009332 <HAL_DMA_IRQHandler+0xdaa>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a3c      	ldr	r2, [pc, #240]	@ (80093a8 <HAL_DMA_IRQHandler+0xe20>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d03b      	beq.n	8009332 <HAL_DMA_IRQHandler+0xdaa>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a3b      	ldr	r2, [pc, #236]	@ (80093ac <HAL_DMA_IRQHandler+0xe24>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d036      	beq.n	8009332 <HAL_DMA_IRQHandler+0xdaa>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a39      	ldr	r2, [pc, #228]	@ (80093b0 <HAL_DMA_IRQHandler+0xe28>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d031      	beq.n	8009332 <HAL_DMA_IRQHandler+0xdaa>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a38      	ldr	r2, [pc, #224]	@ (80093b4 <HAL_DMA_IRQHandler+0xe2c>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d02c      	beq.n	8009332 <HAL_DMA_IRQHandler+0xdaa>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a36      	ldr	r2, [pc, #216]	@ (80093b8 <HAL_DMA_IRQHandler+0xe30>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d027      	beq.n	8009332 <HAL_DMA_IRQHandler+0xdaa>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a35      	ldr	r2, [pc, #212]	@ (80093bc <HAL_DMA_IRQHandler+0xe34>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d022      	beq.n	8009332 <HAL_DMA_IRQHandler+0xdaa>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a33      	ldr	r2, [pc, #204]	@ (80093c0 <HAL_DMA_IRQHandler+0xe38>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d01d      	beq.n	8009332 <HAL_DMA_IRQHandler+0xdaa>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a32      	ldr	r2, [pc, #200]	@ (80093c4 <HAL_DMA_IRQHandler+0xe3c>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d018      	beq.n	8009332 <HAL_DMA_IRQHandler+0xdaa>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a30      	ldr	r2, [pc, #192]	@ (80093c8 <HAL_DMA_IRQHandler+0xe40>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d013      	beq.n	8009332 <HAL_DMA_IRQHandler+0xdaa>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a2f      	ldr	r2, [pc, #188]	@ (80093cc <HAL_DMA_IRQHandler+0xe44>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d00e      	beq.n	8009332 <HAL_DMA_IRQHandler+0xdaa>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a2d      	ldr	r2, [pc, #180]	@ (80093d0 <HAL_DMA_IRQHandler+0xe48>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d009      	beq.n	8009332 <HAL_DMA_IRQHandler+0xdaa>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a2c      	ldr	r2, [pc, #176]	@ (80093d4 <HAL_DMA_IRQHandler+0xe4c>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d004      	beq.n	8009332 <HAL_DMA_IRQHandler+0xdaa>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a2a      	ldr	r2, [pc, #168]	@ (80093d8 <HAL_DMA_IRQHandler+0xe50>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d108      	bne.n	8009344 <HAL_DMA_IRQHandler+0xdbc>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f022 021c 	bic.w	r2, r2, #28
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	e007      	b.n	8009354 <HAL_DMA_IRQHandler+0xdcc>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f022 020e 	bic.w	r2, r2, #14
 8009352:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009358:	f003 031f 	and.w	r3, r3, #31
 800935c:	2201      	movs	r2, #1
 800935e:	409a      	lsls	r2, r3
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800937e:	2b00      	cmp	r3, #0
 8009380:	d009      	beq.n	8009396 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	4798      	blx	r3
 800938a:	e004      	b.n	8009396 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800938c:	bf00      	nop
 800938e:	e002      	b.n	8009396 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009390:	bf00      	nop
 8009392:	e000      	b.n	8009396 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009394:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009396:	3728      	adds	r7, #40	@ 0x28
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	40020010 	.word	0x40020010
 80093a0:	40020028 	.word	0x40020028
 80093a4:	40020040 	.word	0x40020040
 80093a8:	40020058 	.word	0x40020058
 80093ac:	40020070 	.word	0x40020070
 80093b0:	40020088 	.word	0x40020088
 80093b4:	400200a0 	.word	0x400200a0
 80093b8:	400200b8 	.word	0x400200b8
 80093bc:	40020410 	.word	0x40020410
 80093c0:	40020428 	.word	0x40020428
 80093c4:	40020440 	.word	0x40020440
 80093c8:	40020458 	.word	0x40020458
 80093cc:	40020470 	.word	0x40020470
 80093d0:	40020488 	.word	0x40020488
 80093d4:	400204a0 	.word	0x400204a0
 80093d8:	400204b8 	.word	0x400204b8

080093dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80093dc:	b480      	push	{r7}
 80093de:	b087      	sub	sp, #28
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
 80093e8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093ee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093f4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a7f      	ldr	r2, [pc, #508]	@ (80095f8 <DMA_SetConfig+0x21c>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d072      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a7d      	ldr	r2, [pc, #500]	@ (80095fc <DMA_SetConfig+0x220>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d06d      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a7c      	ldr	r2, [pc, #496]	@ (8009600 <DMA_SetConfig+0x224>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d068      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a7a      	ldr	r2, [pc, #488]	@ (8009604 <DMA_SetConfig+0x228>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d063      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a79      	ldr	r2, [pc, #484]	@ (8009608 <DMA_SetConfig+0x22c>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d05e      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a77      	ldr	r2, [pc, #476]	@ (800960c <DMA_SetConfig+0x230>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d059      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a76      	ldr	r2, [pc, #472]	@ (8009610 <DMA_SetConfig+0x234>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d054      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a74      	ldr	r2, [pc, #464]	@ (8009614 <DMA_SetConfig+0x238>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d04f      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a73      	ldr	r2, [pc, #460]	@ (8009618 <DMA_SetConfig+0x23c>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d04a      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a71      	ldr	r2, [pc, #452]	@ (800961c <DMA_SetConfig+0x240>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d045      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a70      	ldr	r2, [pc, #448]	@ (8009620 <DMA_SetConfig+0x244>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d040      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a6e      	ldr	r2, [pc, #440]	@ (8009624 <DMA_SetConfig+0x248>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d03b      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a6d      	ldr	r2, [pc, #436]	@ (8009628 <DMA_SetConfig+0x24c>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d036      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a6b      	ldr	r2, [pc, #428]	@ (800962c <DMA_SetConfig+0x250>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d031      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a6a      	ldr	r2, [pc, #424]	@ (8009630 <DMA_SetConfig+0x254>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d02c      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a68      	ldr	r2, [pc, #416]	@ (8009634 <DMA_SetConfig+0x258>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d027      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a67      	ldr	r2, [pc, #412]	@ (8009638 <DMA_SetConfig+0x25c>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d022      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a65      	ldr	r2, [pc, #404]	@ (800963c <DMA_SetConfig+0x260>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d01d      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a64      	ldr	r2, [pc, #400]	@ (8009640 <DMA_SetConfig+0x264>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d018      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a62      	ldr	r2, [pc, #392]	@ (8009644 <DMA_SetConfig+0x268>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d013      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a61      	ldr	r2, [pc, #388]	@ (8009648 <DMA_SetConfig+0x26c>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d00e      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a5f      	ldr	r2, [pc, #380]	@ (800964c <DMA_SetConfig+0x270>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d009      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a5e      	ldr	r2, [pc, #376]	@ (8009650 <DMA_SetConfig+0x274>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d004      	beq.n	80094e6 <DMA_SetConfig+0x10a>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a5c      	ldr	r2, [pc, #368]	@ (8009654 <DMA_SetConfig+0x278>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d101      	bne.n	80094ea <DMA_SetConfig+0x10e>
 80094e6:	2301      	movs	r3, #1
 80094e8:	e000      	b.n	80094ec <DMA_SetConfig+0x110>
 80094ea:	2300      	movs	r3, #0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00d      	beq.n	800950c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80094f8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d004      	beq.n	800950c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800950a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a39      	ldr	r2, [pc, #228]	@ (80095f8 <DMA_SetConfig+0x21c>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d04a      	beq.n	80095ac <DMA_SetConfig+0x1d0>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a38      	ldr	r2, [pc, #224]	@ (80095fc <DMA_SetConfig+0x220>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d045      	beq.n	80095ac <DMA_SetConfig+0x1d0>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a36      	ldr	r2, [pc, #216]	@ (8009600 <DMA_SetConfig+0x224>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d040      	beq.n	80095ac <DMA_SetConfig+0x1d0>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a35      	ldr	r2, [pc, #212]	@ (8009604 <DMA_SetConfig+0x228>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d03b      	beq.n	80095ac <DMA_SetConfig+0x1d0>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a33      	ldr	r2, [pc, #204]	@ (8009608 <DMA_SetConfig+0x22c>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d036      	beq.n	80095ac <DMA_SetConfig+0x1d0>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a32      	ldr	r2, [pc, #200]	@ (800960c <DMA_SetConfig+0x230>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d031      	beq.n	80095ac <DMA_SetConfig+0x1d0>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a30      	ldr	r2, [pc, #192]	@ (8009610 <DMA_SetConfig+0x234>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d02c      	beq.n	80095ac <DMA_SetConfig+0x1d0>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a2f      	ldr	r2, [pc, #188]	@ (8009614 <DMA_SetConfig+0x238>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d027      	beq.n	80095ac <DMA_SetConfig+0x1d0>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a2d      	ldr	r2, [pc, #180]	@ (8009618 <DMA_SetConfig+0x23c>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d022      	beq.n	80095ac <DMA_SetConfig+0x1d0>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a2c      	ldr	r2, [pc, #176]	@ (800961c <DMA_SetConfig+0x240>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d01d      	beq.n	80095ac <DMA_SetConfig+0x1d0>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a2a      	ldr	r2, [pc, #168]	@ (8009620 <DMA_SetConfig+0x244>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d018      	beq.n	80095ac <DMA_SetConfig+0x1d0>
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a29      	ldr	r2, [pc, #164]	@ (8009624 <DMA_SetConfig+0x248>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d013      	beq.n	80095ac <DMA_SetConfig+0x1d0>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a27      	ldr	r2, [pc, #156]	@ (8009628 <DMA_SetConfig+0x24c>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d00e      	beq.n	80095ac <DMA_SetConfig+0x1d0>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a26      	ldr	r2, [pc, #152]	@ (800962c <DMA_SetConfig+0x250>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d009      	beq.n	80095ac <DMA_SetConfig+0x1d0>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a24      	ldr	r2, [pc, #144]	@ (8009630 <DMA_SetConfig+0x254>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d004      	beq.n	80095ac <DMA_SetConfig+0x1d0>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a23      	ldr	r2, [pc, #140]	@ (8009634 <DMA_SetConfig+0x258>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d101      	bne.n	80095b0 <DMA_SetConfig+0x1d4>
 80095ac:	2301      	movs	r3, #1
 80095ae:	e000      	b.n	80095b2 <DMA_SetConfig+0x1d6>
 80095b0:	2300      	movs	r3, #0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d059      	beq.n	800966a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095ba:	f003 031f 	and.w	r3, r3, #31
 80095be:	223f      	movs	r2, #63	@ 0x3f
 80095c0:	409a      	lsls	r2, r3
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80095d4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	2b40      	cmp	r3, #64	@ 0x40
 80095e4:	d138      	bne.n	8009658 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80095f6:	e086      	b.n	8009706 <DMA_SetConfig+0x32a>
 80095f8:	40020010 	.word	0x40020010
 80095fc:	40020028 	.word	0x40020028
 8009600:	40020040 	.word	0x40020040
 8009604:	40020058 	.word	0x40020058
 8009608:	40020070 	.word	0x40020070
 800960c:	40020088 	.word	0x40020088
 8009610:	400200a0 	.word	0x400200a0
 8009614:	400200b8 	.word	0x400200b8
 8009618:	40020410 	.word	0x40020410
 800961c:	40020428 	.word	0x40020428
 8009620:	40020440 	.word	0x40020440
 8009624:	40020458 	.word	0x40020458
 8009628:	40020470 	.word	0x40020470
 800962c:	40020488 	.word	0x40020488
 8009630:	400204a0 	.word	0x400204a0
 8009634:	400204b8 	.word	0x400204b8
 8009638:	58025408 	.word	0x58025408
 800963c:	5802541c 	.word	0x5802541c
 8009640:	58025430 	.word	0x58025430
 8009644:	58025444 	.word	0x58025444
 8009648:	58025458 	.word	0x58025458
 800964c:	5802546c 	.word	0x5802546c
 8009650:	58025480 	.word	0x58025480
 8009654:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	60da      	str	r2, [r3, #12]
}
 8009668:	e04d      	b.n	8009706 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a29      	ldr	r2, [pc, #164]	@ (8009714 <DMA_SetConfig+0x338>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d022      	beq.n	80096ba <DMA_SetConfig+0x2de>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a27      	ldr	r2, [pc, #156]	@ (8009718 <DMA_SetConfig+0x33c>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d01d      	beq.n	80096ba <DMA_SetConfig+0x2de>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a26      	ldr	r2, [pc, #152]	@ (800971c <DMA_SetConfig+0x340>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d018      	beq.n	80096ba <DMA_SetConfig+0x2de>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a24      	ldr	r2, [pc, #144]	@ (8009720 <DMA_SetConfig+0x344>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d013      	beq.n	80096ba <DMA_SetConfig+0x2de>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a23      	ldr	r2, [pc, #140]	@ (8009724 <DMA_SetConfig+0x348>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d00e      	beq.n	80096ba <DMA_SetConfig+0x2de>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a21      	ldr	r2, [pc, #132]	@ (8009728 <DMA_SetConfig+0x34c>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d009      	beq.n	80096ba <DMA_SetConfig+0x2de>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a20      	ldr	r2, [pc, #128]	@ (800972c <DMA_SetConfig+0x350>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d004      	beq.n	80096ba <DMA_SetConfig+0x2de>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a1e      	ldr	r2, [pc, #120]	@ (8009730 <DMA_SetConfig+0x354>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d101      	bne.n	80096be <DMA_SetConfig+0x2e2>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e000      	b.n	80096c0 <DMA_SetConfig+0x2e4>
 80096be:	2300      	movs	r3, #0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d020      	beq.n	8009706 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096c8:	f003 031f 	and.w	r3, r3, #31
 80096cc:	2201      	movs	r2, #1
 80096ce:	409a      	lsls	r2, r3
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	683a      	ldr	r2, [r7, #0]
 80096da:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	2b40      	cmp	r3, #64	@ 0x40
 80096e2:	d108      	bne.n	80096f6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	60da      	str	r2, [r3, #12]
}
 80096f4:	e007      	b.n	8009706 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	60da      	str	r2, [r3, #12]
}
 8009706:	bf00      	nop
 8009708:	371c      	adds	r7, #28
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	58025408 	.word	0x58025408
 8009718:	5802541c 	.word	0x5802541c
 800971c:	58025430 	.word	0x58025430
 8009720:	58025444 	.word	0x58025444
 8009724:	58025458 	.word	0x58025458
 8009728:	5802546c 	.word	0x5802546c
 800972c:	58025480 	.word	0x58025480
 8009730:	58025494 	.word	0x58025494

08009734 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a42      	ldr	r2, [pc, #264]	@ (800984c <DMA_CalcBaseAndBitshift+0x118>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d04a      	beq.n	80097dc <DMA_CalcBaseAndBitshift+0xa8>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a41      	ldr	r2, [pc, #260]	@ (8009850 <DMA_CalcBaseAndBitshift+0x11c>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d045      	beq.n	80097dc <DMA_CalcBaseAndBitshift+0xa8>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a3f      	ldr	r2, [pc, #252]	@ (8009854 <DMA_CalcBaseAndBitshift+0x120>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d040      	beq.n	80097dc <DMA_CalcBaseAndBitshift+0xa8>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a3e      	ldr	r2, [pc, #248]	@ (8009858 <DMA_CalcBaseAndBitshift+0x124>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d03b      	beq.n	80097dc <DMA_CalcBaseAndBitshift+0xa8>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a3c      	ldr	r2, [pc, #240]	@ (800985c <DMA_CalcBaseAndBitshift+0x128>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d036      	beq.n	80097dc <DMA_CalcBaseAndBitshift+0xa8>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a3b      	ldr	r2, [pc, #236]	@ (8009860 <DMA_CalcBaseAndBitshift+0x12c>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d031      	beq.n	80097dc <DMA_CalcBaseAndBitshift+0xa8>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a39      	ldr	r2, [pc, #228]	@ (8009864 <DMA_CalcBaseAndBitshift+0x130>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d02c      	beq.n	80097dc <DMA_CalcBaseAndBitshift+0xa8>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a38      	ldr	r2, [pc, #224]	@ (8009868 <DMA_CalcBaseAndBitshift+0x134>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d027      	beq.n	80097dc <DMA_CalcBaseAndBitshift+0xa8>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a36      	ldr	r2, [pc, #216]	@ (800986c <DMA_CalcBaseAndBitshift+0x138>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d022      	beq.n	80097dc <DMA_CalcBaseAndBitshift+0xa8>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a35      	ldr	r2, [pc, #212]	@ (8009870 <DMA_CalcBaseAndBitshift+0x13c>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d01d      	beq.n	80097dc <DMA_CalcBaseAndBitshift+0xa8>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a33      	ldr	r2, [pc, #204]	@ (8009874 <DMA_CalcBaseAndBitshift+0x140>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d018      	beq.n	80097dc <DMA_CalcBaseAndBitshift+0xa8>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a32      	ldr	r2, [pc, #200]	@ (8009878 <DMA_CalcBaseAndBitshift+0x144>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d013      	beq.n	80097dc <DMA_CalcBaseAndBitshift+0xa8>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a30      	ldr	r2, [pc, #192]	@ (800987c <DMA_CalcBaseAndBitshift+0x148>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d00e      	beq.n	80097dc <DMA_CalcBaseAndBitshift+0xa8>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a2f      	ldr	r2, [pc, #188]	@ (8009880 <DMA_CalcBaseAndBitshift+0x14c>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d009      	beq.n	80097dc <DMA_CalcBaseAndBitshift+0xa8>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a2d      	ldr	r2, [pc, #180]	@ (8009884 <DMA_CalcBaseAndBitshift+0x150>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d004      	beq.n	80097dc <DMA_CalcBaseAndBitshift+0xa8>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a2c      	ldr	r2, [pc, #176]	@ (8009888 <DMA_CalcBaseAndBitshift+0x154>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d101      	bne.n	80097e0 <DMA_CalcBaseAndBitshift+0xac>
 80097dc:	2301      	movs	r3, #1
 80097de:	e000      	b.n	80097e2 <DMA_CalcBaseAndBitshift+0xae>
 80097e0:	2300      	movs	r3, #0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d024      	beq.n	8009830 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	3b10      	subs	r3, #16
 80097ee:	4a27      	ldr	r2, [pc, #156]	@ (800988c <DMA_CalcBaseAndBitshift+0x158>)
 80097f0:	fba2 2303 	umull	r2, r3, r2, r3
 80097f4:	091b      	lsrs	r3, r3, #4
 80097f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f003 0307 	and.w	r3, r3, #7
 80097fe:	4a24      	ldr	r2, [pc, #144]	@ (8009890 <DMA_CalcBaseAndBitshift+0x15c>)
 8009800:	5cd3      	ldrb	r3, [r2, r3]
 8009802:	461a      	mov	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2b03      	cmp	r3, #3
 800980c:	d908      	bls.n	8009820 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	461a      	mov	r2, r3
 8009814:	4b1f      	ldr	r3, [pc, #124]	@ (8009894 <DMA_CalcBaseAndBitshift+0x160>)
 8009816:	4013      	ands	r3, r2
 8009818:	1d1a      	adds	r2, r3, #4
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	659a      	str	r2, [r3, #88]	@ 0x58
 800981e:	e00d      	b.n	800983c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	461a      	mov	r2, r3
 8009826:	4b1b      	ldr	r3, [pc, #108]	@ (8009894 <DMA_CalcBaseAndBitshift+0x160>)
 8009828:	4013      	ands	r3, r2
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	6593      	str	r3, [r2, #88]	@ 0x58
 800982e:	e005      	b.n	800983c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009840:	4618      	mov	r0, r3
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	40020010 	.word	0x40020010
 8009850:	40020028 	.word	0x40020028
 8009854:	40020040 	.word	0x40020040
 8009858:	40020058 	.word	0x40020058
 800985c:	40020070 	.word	0x40020070
 8009860:	40020088 	.word	0x40020088
 8009864:	400200a0 	.word	0x400200a0
 8009868:	400200b8 	.word	0x400200b8
 800986c:	40020410 	.word	0x40020410
 8009870:	40020428 	.word	0x40020428
 8009874:	40020440 	.word	0x40020440
 8009878:	40020458 	.word	0x40020458
 800987c:	40020470 	.word	0x40020470
 8009880:	40020488 	.word	0x40020488
 8009884:	400204a0 	.word	0x400204a0
 8009888:	400204b8 	.word	0x400204b8
 800988c:	aaaaaaab 	.word	0xaaaaaaab
 8009890:	0802cfc0 	.word	0x0802cfc0
 8009894:	fffffc00 	.word	0xfffffc00

08009898 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d120      	bne.n	80098ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b0:	2b03      	cmp	r3, #3
 80098b2:	d858      	bhi.n	8009966 <DMA_CheckFifoParam+0xce>
 80098b4:	a201      	add	r2, pc, #4	@ (adr r2, 80098bc <DMA_CheckFifoParam+0x24>)
 80098b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ba:	bf00      	nop
 80098bc:	080098cd 	.word	0x080098cd
 80098c0:	080098df 	.word	0x080098df
 80098c4:	080098cd 	.word	0x080098cd
 80098c8:	08009967 	.word	0x08009967
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d048      	beq.n	800996a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80098dc:	e045      	b.n	800996a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80098e6:	d142      	bne.n	800996e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80098ec:	e03f      	b.n	800996e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098f6:	d123      	bne.n	8009940 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098fc:	2b03      	cmp	r3, #3
 80098fe:	d838      	bhi.n	8009972 <DMA_CheckFifoParam+0xda>
 8009900:	a201      	add	r2, pc, #4	@ (adr r2, 8009908 <DMA_CheckFifoParam+0x70>)
 8009902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009906:	bf00      	nop
 8009908:	08009919 	.word	0x08009919
 800990c:	0800991f 	.word	0x0800991f
 8009910:	08009919 	.word	0x08009919
 8009914:	08009931 	.word	0x08009931
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	73fb      	strb	r3, [r7, #15]
        break;
 800991c:	e030      	b.n	8009980 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009922:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d025      	beq.n	8009976 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800992e:	e022      	b.n	8009976 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009934:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009938:	d11f      	bne.n	800997a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800993e:	e01c      	b.n	800997a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009944:	2b02      	cmp	r3, #2
 8009946:	d902      	bls.n	800994e <DMA_CheckFifoParam+0xb6>
 8009948:	2b03      	cmp	r3, #3
 800994a:	d003      	beq.n	8009954 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800994c:	e018      	b.n	8009980 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	73fb      	strb	r3, [r7, #15]
        break;
 8009952:	e015      	b.n	8009980 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009958:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00e      	beq.n	800997e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	73fb      	strb	r3, [r7, #15]
    break;
 8009964:	e00b      	b.n	800997e <DMA_CheckFifoParam+0xe6>
        break;
 8009966:	bf00      	nop
 8009968:	e00a      	b.n	8009980 <DMA_CheckFifoParam+0xe8>
        break;
 800996a:	bf00      	nop
 800996c:	e008      	b.n	8009980 <DMA_CheckFifoParam+0xe8>
        break;
 800996e:	bf00      	nop
 8009970:	e006      	b.n	8009980 <DMA_CheckFifoParam+0xe8>
        break;
 8009972:	bf00      	nop
 8009974:	e004      	b.n	8009980 <DMA_CheckFifoParam+0xe8>
        break;
 8009976:	bf00      	nop
 8009978:	e002      	b.n	8009980 <DMA_CheckFifoParam+0xe8>
        break;
 800997a:	bf00      	nop
 800997c:	e000      	b.n	8009980 <DMA_CheckFifoParam+0xe8>
    break;
 800997e:	bf00      	nop
    }
  }

  return status;
 8009980:	7bfb      	ldrb	r3, [r7, #15]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop

08009990 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a38      	ldr	r2, [pc, #224]	@ (8009a84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d022      	beq.n	80099ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a36      	ldr	r2, [pc, #216]	@ (8009a88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d01d      	beq.n	80099ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a35      	ldr	r2, [pc, #212]	@ (8009a8c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d018      	beq.n	80099ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a33      	ldr	r2, [pc, #204]	@ (8009a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d013      	beq.n	80099ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a32      	ldr	r2, [pc, #200]	@ (8009a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d00e      	beq.n	80099ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a30      	ldr	r2, [pc, #192]	@ (8009a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d009      	beq.n	80099ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a2f      	ldr	r2, [pc, #188]	@ (8009a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d004      	beq.n	80099ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a2d      	ldr	r2, [pc, #180]	@ (8009aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d101      	bne.n	80099f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80099ee:	2301      	movs	r3, #1
 80099f0:	e000      	b.n	80099f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80099f2:	2300      	movs	r3, #0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d01a      	beq.n	8009a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	3b08      	subs	r3, #8
 8009a00:	4a28      	ldr	r2, [pc, #160]	@ (8009aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009a02:	fba2 2303 	umull	r2, r3, r2, r3
 8009a06:	091b      	lsrs	r3, r3, #4
 8009a08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	4b26      	ldr	r3, [pc, #152]	@ (8009aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009a0e:	4413      	add	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	461a      	mov	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a24      	ldr	r2, [pc, #144]	@ (8009aac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009a1c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f003 031f 	and.w	r3, r3, #31
 8009a24:	2201      	movs	r2, #1
 8009a26:	409a      	lsls	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009a2c:	e024      	b.n	8009a78 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	3b10      	subs	r3, #16
 8009a36:	4a1e      	ldr	r2, [pc, #120]	@ (8009ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009a38:	fba2 2303 	umull	r2, r3, r2, r3
 8009a3c:	091b      	lsrs	r3, r3, #4
 8009a3e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	4a1c      	ldr	r2, [pc, #112]	@ (8009ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d806      	bhi.n	8009a56 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d902      	bls.n	8009a56 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	3308      	adds	r3, #8
 8009a54:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	4b18      	ldr	r3, [pc, #96]	@ (8009abc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009a5a:	4413      	add	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	461a      	mov	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a16      	ldr	r2, [pc, #88]	@ (8009ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009a68:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f003 031f 	and.w	r3, r3, #31
 8009a70:	2201      	movs	r2, #1
 8009a72:	409a      	lsls	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009a78:	bf00      	nop
 8009a7a:	3714      	adds	r7, #20
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr
 8009a84:	58025408 	.word	0x58025408
 8009a88:	5802541c 	.word	0x5802541c
 8009a8c:	58025430 	.word	0x58025430
 8009a90:	58025444 	.word	0x58025444
 8009a94:	58025458 	.word	0x58025458
 8009a98:	5802546c 	.word	0x5802546c
 8009a9c:	58025480 	.word	0x58025480
 8009aa0:	58025494 	.word	0x58025494
 8009aa4:	cccccccd 	.word	0xcccccccd
 8009aa8:	16009600 	.word	0x16009600
 8009aac:	58025880 	.word	0x58025880
 8009ab0:	aaaaaaab 	.word	0xaaaaaaab
 8009ab4:	400204b8 	.word	0x400204b8
 8009ab8:	4002040f 	.word	0x4002040f
 8009abc:	10008200 	.word	0x10008200
 8009ac0:	40020880 	.word	0x40020880

08009ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b085      	sub	sp, #20
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d04a      	beq.n	8009b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2b08      	cmp	r3, #8
 8009ade:	d847      	bhi.n	8009b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a25      	ldr	r2, [pc, #148]	@ (8009b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d022      	beq.n	8009b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a24      	ldr	r2, [pc, #144]	@ (8009b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d01d      	beq.n	8009b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a22      	ldr	r2, [pc, #136]	@ (8009b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d018      	beq.n	8009b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a21      	ldr	r2, [pc, #132]	@ (8009b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d013      	beq.n	8009b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8009b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d00e      	beq.n	8009b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a1e      	ldr	r2, [pc, #120]	@ (8009b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d009      	beq.n	8009b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a1c      	ldr	r2, [pc, #112]	@ (8009b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d004      	beq.n	8009b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8009b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d101      	bne.n	8009b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009b30:	2301      	movs	r3, #1
 8009b32:	e000      	b.n	8009b36 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009b34:	2300      	movs	r3, #0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00a      	beq.n	8009b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	4b17      	ldr	r3, [pc, #92]	@ (8009b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009b3e:	4413      	add	r3, r2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	461a      	mov	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a15      	ldr	r2, [pc, #84]	@ (8009ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009b4c:	671a      	str	r2, [r3, #112]	@ 0x70
 8009b4e:	e009      	b.n	8009b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	4b14      	ldr	r3, [pc, #80]	@ (8009ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009b54:	4413      	add	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	461a      	mov	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a11      	ldr	r2, [pc, #68]	@ (8009ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009b62:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	2201      	movs	r2, #1
 8009b6a:	409a      	lsls	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009b70:	bf00      	nop
 8009b72:	3714      	adds	r7, #20
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	58025408 	.word	0x58025408
 8009b80:	5802541c 	.word	0x5802541c
 8009b84:	58025430 	.word	0x58025430
 8009b88:	58025444 	.word	0x58025444
 8009b8c:	58025458 	.word	0x58025458
 8009b90:	5802546c 	.word	0x5802546c
 8009b94:	58025480 	.word	0x58025480
 8009b98:	58025494 	.word	0x58025494
 8009b9c:	1600963f 	.word	0x1600963f
 8009ba0:	58025940 	.word	0x58025940
 8009ba4:	1000823f 	.word	0x1000823f
 8009ba8:	40020940 	.word	0x40020940

08009bac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d101      	bne.n	8009bbe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e0e3      	b.n	8009d86 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d106      	bne.n	8009bd6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2223      	movs	r2, #35	@ 0x23
 8009bcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f008 fb05 	bl	80121e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009bd6:	4b6e      	ldr	r3, [pc, #440]	@ (8009d90 <HAL_ETH_Init+0x1e4>)
 8009bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009bdc:	4a6c      	ldr	r2, [pc, #432]	@ (8009d90 <HAL_ETH_Init+0x1e4>)
 8009bde:	f043 0302 	orr.w	r3, r3, #2
 8009be2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009be6:	4b6a      	ldr	r3, [pc, #424]	@ (8009d90 <HAL_ETH_Init+0x1e4>)
 8009be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009bec:	f003 0302 	and.w	r3, r3, #2
 8009bf0:	60bb      	str	r3, [r7, #8]
 8009bf2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	7a1b      	ldrb	r3, [r3, #8]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d103      	bne.n	8009c04 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	f7fd f82d 	bl	8006c5c <HAL_SYSCFG_ETHInterfaceSelect>
 8009c02:	e003      	b.n	8009c0c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009c04:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009c08:	f7fd f828 	bl	8006c5c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8009c0c:	4b61      	ldr	r3, [pc, #388]	@ (8009d94 <HAL_ETH_Init+0x1e8>)
 8009c0e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	6812      	ldr	r2, [r2, #0]
 8009c1e:	f043 0301 	orr.w	r3, r3, #1
 8009c22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009c26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c28:	f7fc ffdc 	bl	8006be4 <HAL_GetTick>
 8009c2c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009c2e:	e011      	b.n	8009c54 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8009c30:	f7fc ffd8 	bl	8006be4 <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009c3e:	d909      	bls.n	8009c54 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2204      	movs	r2, #4
 8009c44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	22e0      	movs	r2, #224	@ 0xe0
 8009c4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	e098      	b.n	8009d86 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1e4      	bne.n	8009c30 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 ff1c 	bl	800aaa4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8009c6c:	f002 feae 	bl	800c9cc <HAL_RCC_GetHCLKFreq>
 8009c70:	4603      	mov	r3, r0
 8009c72:	4a49      	ldr	r2, [pc, #292]	@ (8009d98 <HAL_ETH_Init+0x1ec>)
 8009c74:	fba2 2303 	umull	r2, r3, r2, r3
 8009c78:	0c9a      	lsrs	r2, r3, #18
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	3a01      	subs	r2, #1
 8009c80:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f001 f919 	bl	800aebc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c92:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009c96:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	6812      	ldr	r2, [r2, #0]
 8009c9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ca2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009ca6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	f003 0303 	and.w	r3, r3, #3
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d009      	beq.n	8009cca <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	22e0      	movs	r2, #224	@ 0xe0
 8009cc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e05d      	b.n	8009d86 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cd2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009cd6:	4b31      	ldr	r3, [pc, #196]	@ (8009d9c <HAL_ETH_Init+0x1f0>)
 8009cd8:	4013      	ands	r3, r2
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	6952      	ldr	r2, [r2, #20]
 8009cde:	0051      	lsls	r1, r2, #1
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	6812      	ldr	r2, [r2, #0]
 8009ce4:	430b      	orrs	r3, r1
 8009ce6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009cea:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f001 f981 	bl	800aff6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f001 f9c7 	bl	800b088 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	3305      	adds	r3, #5
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	021a      	lsls	r2, r3, #8
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	3304      	adds	r3, #4
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	430a      	orrs	r2, r1
 8009d14:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	3303      	adds	r3, #3
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	061a      	lsls	r2, r3, #24
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	3302      	adds	r3, #2
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	041b      	lsls	r3, r3, #16
 8009d2c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	3301      	adds	r3, #1
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009d38:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009d46:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009d48:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	4b11      	ldr	r3, [pc, #68]	@ (8009da0 <HAL_ETH_Init+0x1f4>)
 8009d5a:	430b      	orrs	r3, r1
 8009d5c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8009da4 <HAL_ETH_Init+0x1f8>)
 8009d6e:	430b      	orrs	r3, r1
 8009d70:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2210      	movs	r2, #16
 8009d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	58024400 	.word	0x58024400
 8009d94:	58000400 	.word	0x58000400
 8009d98:	431bde83 	.word	0x431bde83
 8009d9c:	ffff8001 	.word	0xffff8001
 8009da0:	0c020060 	.word	0x0c020060
 8009da4:	0c20c000 	.word	0x0c20c000

08009da8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009db6:	2b10      	cmp	r3, #16
 8009db8:	d165      	bne.n	8009e86 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2223      	movs	r2, #35	@ 0x23
 8009dbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2204      	movs	r2, #4
 8009dcc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f9e4 	bl	800a19c <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ddc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	6812      	ldr	r2, [r2, #0]
 8009de4:	f043 0301 	orr.w	r3, r3, #1
 8009de8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009dec:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009df8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	6812      	ldr	r2, [r2, #0]
 8009e00:	f043 0301 	orr.w	r3, r3, #1
 8009e04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e08:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e14:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	6812      	ldr	r2, [r2, #0]
 8009e1c:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8009e20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e24:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f042 0201 	orr.w	r2, r2, #1
 8009e38:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f042 0202 	orr.w	r2, r2, #2
 8009e4a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f042 0201 	orr.w	r2, r2, #1
 8009e5a:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e64:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8009e70:	430b      	orrs	r3, r1
 8009e72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e76:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2223      	movs	r2, #35	@ 0x23
 8009e7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	e000      	b.n	8009e88 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
  }
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3708      	adds	r7, #8
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e9e:	2b23      	cmp	r3, #35	@ 0x23
 8009ea0:	d165      	bne.n	8009f6e <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2223      	movs	r2, #35	@ 0x23
 8009ea6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009eb2:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	4b30      	ldr	r3, [pc, #192]	@ (8009f7c <HAL_ETH_Stop_IT+0xec>)
 8009ebc:	400b      	ands	r3, r1
 8009ebe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009ec2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ece:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	6812      	ldr	r2, [r2, #0]
 8009ed6:	f023 0301 	bic.w	r3, r3, #1
 8009eda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009ede:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009eea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	6812      	ldr	r2, [r2, #0]
 8009ef2:	f023 0301 	bic.w	r3, r3, #1
 8009ef6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009efa:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f022 0201 	bic.w	r2, r2, #1
 8009f0c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f042 0201 	orr.w	r2, r2, #1
 8009f1e:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f022 0202 	bic.w	r2, r2, #2
 8009f30:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8009f32:	2300      	movs	r3, #0
 8009f34:	60fb      	str	r3, [r7, #12]
 8009f36:	e00e      	b.n	8009f56 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	3212      	adds	r2, #18
 8009f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f42:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	3301      	adds	r3, #1
 8009f54:	60fb      	str	r3, [r7, #12]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2b03      	cmp	r3, #3
 8009f5a:	d9ed      	bls.n	8009f38 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2210      	movs	r2, #16
 8009f66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	e000      	b.n	8009f70 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
  }
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	ffff2f3e 	.word	0xffff2f3e

08009f80 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d109      	bne.n	8009fa4 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f96:	f043 0201 	orr.w	r2, r3, #1
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e03a      	b.n	800a01a <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009faa:	2b23      	cmp	r3, #35	@ 0x23
 8009fac:	d134      	bne.n	800a018 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f001 f8c2 	bl	800b144 <ETH_Prepare_Tx_Descriptors>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d009      	beq.n	8009fda <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fcc:	f043 0202 	orr.w	r2, r3, #2
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e01f      	b.n	800a01a <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8009fda:	f3bf 8f4f 	dsb	sy
}
 8009fde:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe4:	1c5a      	adds	r2, r3, #1
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	629a      	str	r2, [r3, #40]	@ 0x28
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fee:	2b03      	cmp	r3, #3
 8009ff0:	d904      	bls.n	8009ffc <HAL_ETH_Transmit_IT+0x7c>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff6:	1f1a      	subs	r2, r3, #4
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	3106      	adds	r1, #6
 800a008:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a00c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a010:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 800a014:	2300      	movs	r3, #0
 800a016:	e000      	b.n	800a01a <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 800a018:	2301      	movs	r3, #1
  }
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b088      	sub	sp, #32
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
 800a02a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800a02c:	2300      	movs	r3, #0
 800a02e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800a030:	2300      	movs	r3, #0
 800a032:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d109      	bne.n	800a04e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a040:	f043 0201 	orr.w	r2, r3, #1
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e0a2      	b.n	800a194 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a054:	2b23      	cmp	r3, #35	@ 0x23
 800a056:	d001      	beq.n	800a05c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e09b      	b.n	800a194 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a060:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	69fa      	ldr	r2, [r7, #28]
 800a066:	3212      	adds	r2, #18
 800a068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a06c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a072:	f1c3 0304 	rsb	r3, r3, #4
 800a076:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800a078:	e064      	b.n	800a144 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a082:	2b00      	cmp	r3, #0
 800a084:	d007      	beq.n	800a096 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	685a      	ldr	r2, [r3, #4]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d103      	bne.n	800a0aa <HAL_ETH_ReadData+0x88>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d03a      	beq.n	800a120 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d005      	beq.n	800a0c2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d005      	beq.n	800a0ea <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	68da      	ldr	r2, [r3, #12]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	f008 fa50 	bl	80125a4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a108:	1c5a      	adds	r2, r3, #1
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	441a      	add	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	2200      	movs	r2, #0
 800a11e:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	3301      	adds	r3, #1
 800a124:	61fb      	str	r3, [r7, #28]
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	2b03      	cmp	r3, #3
 800a12a:	d902      	bls.n	800a132 <HAL_ETH_ReadData+0x110>
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	3b04      	subs	r3, #4
 800a130:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	69fa      	ldr	r2, [r7, #28]
 800a136:	3212      	adds	r2, #18
 800a138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a13c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	3301      	adds	r3, #1
 800a142:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 800a148:	2b00      	cmp	r3, #0
 800a14a:	db06      	blt.n	800a15a <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	429a      	cmp	r2, r3
 800a152:	d202      	bcs.n	800a15a <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 800a154:	7cfb      	ldrb	r3, [r7, #19]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d08f      	beq.n	800a07a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	441a      	add	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d002      	beq.n	800a174 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f814 	bl	800a19c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	69fa      	ldr	r2, [r7, #28]
 800a178:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800a17a:	7cfb      	ldrb	r3, [r7, #19]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d108      	bne.n	800a192 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a18e:	2300      	movs	r3, #0
 800a190:	e000      	b.n	800a194 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
}
 800a194:	4618      	mov	r0, r3
 800a196:	3720      	adds	r7, #32
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b088      	sub	sp, #32
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a1b0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	69fa      	ldr	r2, [r7, #28]
 800a1b6:	3212      	adds	r2, #18
 800a1b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1bc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1c2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800a1c4:	e038      	b.n	800a238 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	691b      	ldr	r3, [r3, #16]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d112      	bne.n	800a1f4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800a1ce:	f107 0308 	add.w	r3, r7, #8
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f008 f9b6 	bl	8012544 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d102      	bne.n	800a1e4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	74fb      	strb	r3, [r7, #19]
 800a1e2:	e007      	b.n	800a1f4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 800a1f4:	7cfb      	ldrb	r3, [r7, #19]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d01e      	beq.n	800a238 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d004      	beq.n	800a20c <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 800a208:	60da      	str	r2, [r3, #12]
 800a20a:	e003      	b.n	800a214 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 800a212:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	3301      	adds	r3, #1
 800a218:	61fb      	str	r3, [r7, #28]
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	2b03      	cmp	r3, #3
 800a21e:	d902      	bls.n	800a226 <ETH_UpdateDescriptor+0x8a>
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	3b04      	subs	r3, #4
 800a224:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	69fa      	ldr	r2, [r7, #28]
 800a22a:	3212      	adds	r2, #18
 800a22c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a230:	617b      	str	r3, [r7, #20]
      desccount--;
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	3b01      	subs	r3, #1
 800a236:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d002      	beq.n	800a244 <ETH_UpdateDescriptor+0xa8>
 800a23e:	7cfb      	ldrb	r3, [r7, #19]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1c0      	bne.n	800a1c6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a248:	69ba      	ldr	r2, [r7, #24]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d01b      	beq.n	800a286 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	3301      	adds	r3, #1
 800a252:	f003 0303 	and.w	r3, r3, #3
 800a256:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800a258:	f3bf 8f5f 	dmb	sy
}
 800a25c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6919      	ldr	r1, [r3, #16]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	4613      	mov	r3, r2
 800a266:	005b      	lsls	r3, r3, #1
 800a268:	4413      	add	r3, r2
 800a26a:	00db      	lsls	r3, r3, #3
 800a26c:	18ca      	adds	r2, r1, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a276:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	69fa      	ldr	r2, [r7, #28]
 800a27e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	69ba      	ldr	r2, [r7, #24]
 800a284:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800a286:	bf00      	nop
 800a288:	3720      	adds	r7, #32
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800a28e:	b580      	push	{r7, lr}
 800a290:	b086      	sub	sp, #24
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	3318      	adds	r3, #24
 800a29a:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2a0:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2a6:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800a2ac:	e047      	b.n	800a33e <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	3304      	adds	r3, #4
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4413      	add	r3, r2
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10a      	bne.n	800a2de <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	613b      	str	r3, [r7, #16]
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	2b03      	cmp	r3, #3
 800a2d2:	d902      	bls.n	800a2da <HAL_ETH_ReleaseTxPacket+0x4c>
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	3b04      	subs	r3, #4
 800a2d8:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800a2de:	7bbb      	ldrb	r3, [r7, #14]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d02c      	beq.n	800a33e <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	68d9      	ldr	r1, [r3, #12]
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	005b      	lsls	r3, r3, #1
 800a2ee:	4413      	add	r3, r2
 800a2f0:	00db      	lsls	r3, r3, #3
 800a2f2:	440b      	add	r3, r1
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	db1f      	blt.n	800a33a <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	3304      	adds	r3, #4
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	4413      	add	r3, r2
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	4618      	mov	r0, r3
 800a308:	f008 f9b4 	bl	8012674 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	3304      	adds	r3, #4
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	4413      	add	r3, r2
 800a316:	2200      	movs	r2, #0
 800a318:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	3301      	adds	r3, #1
 800a31e:	613b      	str	r3, [r7, #16]
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	2b03      	cmp	r3, #3
 800a324:	d902      	bls.n	800a32c <HAL_ETH_ReleaseTxPacket+0x9e>
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	3b04      	subs	r3, #4
 800a32a:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	693a      	ldr	r2, [r7, #16]
 800a336:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a338:	e001      	b.n	800a33e <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800a33a:	2300      	movs	r3, #0
 800a33c:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d002      	beq.n	800a34a <HAL_ETH_ReleaseTxPacket+0xbc>
 800a344:	7bfb      	ldrb	r3, [r7, #15]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1b1      	bne.n	800a2ae <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3718      	adds	r7, #24
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a364:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a36e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800a372:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a37c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800a380:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 800a382:	4b6d      	ldr	r3, [pc, #436]	@ (800a538 <HAL_ETH_IRQHandler+0x1e4>)
 800a384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a386:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d010      	beq.n	800a3b4 <HAL_ETH_IRQHandler+0x60>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00b      	beq.n	800a3b4 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	f248 0340 	movw	r3, #32832	@ 0x8040
 800a3aa:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f007 fc44 	bl	8011c3c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	f003 0301 	and.w	r3, r3, #1
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d010      	beq.n	800a3e0 <HAL_ETH_IRQHandler+0x8c>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f003 0301 	and.w	r3, r3, #1
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00b      	beq.n	800a3e0 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	f248 0301 	movw	r3, #32769	@ 0x8001
 800a3d6:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f007 fc3e 	bl	8011c5c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d047      	beq.n	800a47a <HAL_ETH_IRQHandler+0x126>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d042      	beq.n	800a47a <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3fa:	f043 0208 	orr.w	r2, r3, #8
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d01e      	beq.n	800a44c <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a416:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800a41a:	f241 1302 	movw	r3, #4354	@ 0x1102
 800a41e:	4013      	ands	r3, r2
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a42e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	6812      	ldr	r2, [r2, #0]
 800a436:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800a43a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a43e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	22e0      	movs	r2, #224	@ 0xe0
 800a446:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800a44a:	e013      	b.n	800a474 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a454:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800a458:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a46a:	461a      	mov	r2, r3
 800a46c:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 800a470:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f007 fc01 	bl	8011c7c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a480:	2b00      	cmp	r3, #0
 800a482:	d104      	bne.n	800a48e <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d019      	beq.n	800a4c2 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a494:	f043 0210 	orr.w	r2, r3, #16
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	22e0      	movs	r2, #224	@ 0xe0
 800a4b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f007 fbe1 	bl	8011c7c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	f003 0310 	and.w	r3, r3, #16
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00f      	beq.n	800a4ec <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a4d4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f82c 	bl	800a53c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	f003 0320 	and.w	r3, r3, #32
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00f      	beq.n	800a516 <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800a4fe:	f003 020f 	and.w	r2, r3, #15
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f821 	bl	800a550 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d006      	beq.n	800a52e <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800a520:	4b05      	ldr	r3, [pc, #20]	@ (800a538 <HAL_ETH_IRQHandler+0x1e4>)
 800a522:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800a526:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f81b 	bl	800a564 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 800a52e:	bf00      	nop
 800a530:	3718      	adds	r7, #24
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	58000080 	.word	0x58000080

0800a53c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800a544:	bf00      	nop
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 800a558:	bf00      	nop
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b086      	sub	sp, #24
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
 800a584:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a58e:	f003 0301 	and.w	r3, r3, #1
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e03e      	b.n	800a618 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a5a2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	055b      	lsls	r3, r3, #21
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	041b      	lsls	r3, r3, #16
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	f043 030c 	orr.w	r3, r3, #12
 800a5c6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	f043 0301 	orr.w	r3, r3, #1
 800a5ce:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	697a      	ldr	r2, [r7, #20]
 800a5d6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800a5da:	f7fc fb03 	bl	8006be4 <HAL_GetTick>
 800a5de:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800a5e0:	e009      	b.n	800a5f6 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800a5e2:	f7fc faff 	bl	8006be4 <HAL_GetTick>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a5f0:	d901      	bls.n	800a5f6 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e010      	b.n	800a618 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a5fe:	f003 0301 	and.w	r3, r3, #1
 800a602:	2b00      	cmp	r3, #0
 800a604:	d1ed      	bne.n	800a5e2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a60e:	b29b      	uxth	r3, r3
 800a610:	461a      	mov	r2, r3
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3718      	adds	r7, #24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
 800a62c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a636:	f003 0301 	and.w	r3, r3, #1
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e03c      	b.n	800a6bc <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a64a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	055b      	lsls	r3, r3, #21
 800a656:	4313      	orrs	r3, r2
 800a658:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	041b      	lsls	r3, r3, #16
 800a664:	4313      	orrs	r3, r2
 800a666:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f023 030c 	bic.w	r3, r3, #12
 800a66e:	f043 0304 	orr.w	r3, r3, #4
 800a672:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f043 0301 	orr.w	r3, r3, #1
 800a67a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	b29a      	uxth	r2, r3
 800a680:	4b10      	ldr	r3, [pc, #64]	@ (800a6c4 <HAL_ETH_WritePHYRegister+0xa4>)
 800a682:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800a686:	4a0f      	ldr	r2, [pc, #60]	@ (800a6c4 <HAL_ETH_WritePHYRegister+0xa4>)
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800a68e:	f7fc faa9 	bl	8006be4 <HAL_GetTick>
 800a692:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800a694:	e009      	b.n	800a6aa <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800a696:	f7fc faa5 	bl	8006be4 <HAL_GetTick>
 800a69a:	4602      	mov	r2, r0
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a6a4:	d901      	bls.n	800a6aa <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e008      	b.n	800a6bc <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a6b2:	f003 0301 	and.w	r3, r3, #1
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1ed      	bne.n	800a696 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3718      	adds	r7, #24
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	40028000 	.word	0x40028000

0800a6c8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d101      	bne.n	800a6dc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e1c3      	b.n	800aa64 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 020c 	and.w	r2, r3, #12
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 0310 	and.w	r3, r3, #16
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	bf14      	ite	ne
 800a6f8:	2301      	movne	r3, #1
 800a6fa:	2300      	moveq	r3, #0
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	461a      	mov	r2, r3
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a71e:	2b00      	cmp	r3, #0
 800a720:	bf0c      	ite	eq
 800a722:	2301      	moveq	r3, #1
 800a724:	2300      	movne	r3, #0
 800a726:	b2db      	uxtb	r3, r3
 800a728:	461a      	mov	r2, r3
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	bf14      	ite	ne
 800a73e:	2301      	movne	r3, #1
 800a740:	2300      	moveq	r3, #0
 800a742:	b2db      	uxtb	r3, r3
 800a744:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a754:	2b00      	cmp	r3, #0
 800a756:	bf0c      	ite	eq
 800a758:	2301      	moveq	r3, #1
 800a75a:	2300      	movne	r3, #0
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	461a      	mov	r2, r3
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800a76a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a76e:	2b00      	cmp	r3, #0
 800a770:	bf14      	ite	ne
 800a772:	2301      	movne	r3, #1
 800a774:	2300      	moveq	r3, #0
 800a776:	b2db      	uxtb	r3, r3
 800a778:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a788:	2b00      	cmp	r3, #0
 800a78a:	bf14      	ite	ne
 800a78c:	2301      	movne	r3, #1
 800a78e:	2300      	moveq	r3, #0
 800a790:	b2db      	uxtb	r3, r3
 800a792:	461a      	mov	r2, r3
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	bf14      	ite	ne
 800a7c2:	2301      	movne	r3, #1
 800a7c4:	2300      	moveq	r3, #0
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	bf0c      	ite	eq
 800a7dc:	2301      	moveq	r3, #1
 800a7de:	2300      	movne	r3, #0
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	bf0c      	ite	eq
 800a7f6:	2301      	moveq	r3, #1
 800a7f8:	2300      	movne	r3, #0
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	bf14      	ite	ne
 800a810:	2301      	movne	r3, #1
 800a812:	2300      	moveq	r3, #0
 800a814:	b2db      	uxtb	r3, r3
 800a816:	461a      	mov	r2, r3
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a826:	2b00      	cmp	r3, #0
 800a828:	bf14      	ite	ne
 800a82a:	2301      	movne	r3, #1
 800a82c:	2300      	moveq	r3, #0
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	461a      	mov	r2, r3
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a840:	2b00      	cmp	r3, #0
 800a842:	bf14      	ite	ne
 800a844:	2301      	movne	r3, #1
 800a846:	2300      	moveq	r3, #0
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	461a      	mov	r2, r3
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800a856:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	bf14      	ite	ne
 800a85e:	2301      	movne	r3, #1
 800a860:	2300      	moveq	r3, #0
 800a862:	b2db      	uxtb	r3, r3
 800a864:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a882:	2b00      	cmp	r3, #0
 800a884:	bf14      	ite	ne
 800a886:	2301      	movne	r3, #1
 800a888:	2300      	moveq	r3, #0
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	461a      	mov	r2, r3
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	bf0c      	ite	eq
 800a8bc:	2301      	moveq	r3, #1
 800a8be:	2300      	movne	r3, #0
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	bf14      	ite	ne
 800a8d8:	2301      	movne	r3, #1
 800a8da:	2300      	moveq	r3, #0
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	461a      	mov	r2, r3
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800a8ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bf14      	ite	ne
 800a8f4:	2301      	movne	r3, #1
 800a8f6:	2300      	moveq	r3, #0
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	bf14      	ite	ne
 800a910:	2301      	movne	r3, #1
 800a912:	2300      	moveq	r3, #0
 800a914:	b2db      	uxtb	r3, r3
 800a916:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	0e5b      	lsrs	r3, r3, #25
 800a926:	f003 021f 	and.w	r2, r3, #31
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a938:	2b00      	cmp	r3, #0
 800a93a:	bf14      	ite	ne
 800a93c:	2301      	movne	r3, #1
 800a93e:	2300      	moveq	r3, #0
 800a940:	b2db      	uxtb	r3, r3
 800a942:	461a      	mov	r2, r3
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	f003 020f 	and.w	r2, r3, #15
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a95e:	f003 0302 	and.w	r3, r3, #2
 800a962:	2b00      	cmp	r3, #0
 800a964:	bf14      	ite	ne
 800a966:	2301      	movne	r3, #1
 800a968:	2300      	moveq	r3, #0
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	461a      	mov	r2, r3
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a97a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a97e:	2b00      	cmp	r3, #0
 800a980:	bf0c      	ite	eq
 800a982:	2301      	moveq	r3, #1
 800a984:	2300      	movne	r3, #0
 800a986:	b2db      	uxtb	r3, r3
 800a988:	461a      	mov	r2, r3
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a996:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9a4:	0c1b      	lsrs	r3, r3, #16
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9b4:	f003 0301 	and.w	r3, r3, #1
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	bf14      	ite	ne
 800a9bc:	2301      	movne	r3, #1
 800a9be:	2300      	moveq	r3, #0
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9d2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	bf14      	ite	ne
 800a9da:	2301      	movne	r3, #1
 800a9dc:	2300      	moveq	r3, #0
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800a9f0:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800aa00:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800aa10:	f003 0308 	and.w	r3, r3, #8
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	bf14      	ite	ne
 800aa18:	2301      	movne	r3, #1
 800aa1a:	2300      	moveq	r3, #0
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800aa2e:	f003 0310 	and.w	r3, r3, #16
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	bf14      	ite	ne
 800aa36:	2301      	movne	r3, #1
 800aa38:	2300      	moveq	r3, #0
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800aa4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	bf0c      	ite	eq
 800aa54:	2301      	moveq	r3, #1
 800aa56:	2300      	movne	r3, #0
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d101      	bne.n	800aa84 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	e00b      	b.n	800aa9c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa8a:	2b10      	cmp	r3, #16
 800aa8c:	d105      	bne.n	800aa9a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800aa8e:	6839      	ldr	r1, [r7, #0]
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 f871 	bl	800ab78 <ETH_SetMACConfig>

    return HAL_OK;
 800aa96:	2300      	movs	r3, #0
 800aa98:	e000      	b.n	800aa9c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
  }
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800aab4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800aabc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800aabe:	f001 ff85 	bl	800c9cc <HAL_RCC_GetHCLKFreq>
 800aac2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	4a1a      	ldr	r2, [pc, #104]	@ (800ab30 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d804      	bhi.n	800aad6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800aad2:	60fb      	str	r3, [r7, #12]
 800aad4:	e022      	b.n	800ab1c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	4a16      	ldr	r2, [pc, #88]	@ (800ab34 <HAL_ETH_SetMDIOClockRange+0x90>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d204      	bcs.n	800aae8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800aae4:	60fb      	str	r3, [r7, #12]
 800aae6:	e019      	b.n	800ab1c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	4a13      	ldr	r2, [pc, #76]	@ (800ab38 <HAL_ETH_SetMDIOClockRange+0x94>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d915      	bls.n	800ab1c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	4a12      	ldr	r2, [pc, #72]	@ (800ab3c <HAL_ETH_SetMDIOClockRange+0x98>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d804      	bhi.n	800ab02 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aafe:	60fb      	str	r3, [r7, #12]
 800ab00:	e00c      	b.n	800ab1c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	4a0e      	ldr	r2, [pc, #56]	@ (800ab40 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d804      	bhi.n	800ab14 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ab10:	60fb      	str	r3, [r7, #12]
 800ab12:	e003      	b.n	800ab1c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800ab1a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800ab26:	bf00      	nop
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	02160ebf 	.word	0x02160ebf
 800ab34:	03938700 	.word	0x03938700
 800ab38:	05f5e0ff 	.word	0x05f5e0ff
 800ab3c:	08f0d17f 	.word	0x08f0d17f
 800ab40:	0ee6b27f 	.word	0x0ee6b27f

0800ab44 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	370c      	adds	r7, #12
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800ab5e:	b480      	push	{r7}
 800ab60:	b083      	sub	sp, #12
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800ab8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	791b      	ldrb	r3, [r3, #4]
 800ab90:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800ab92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	7b1b      	ldrb	r3, [r3, #12]
 800ab98:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800ab9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	7b5b      	ldrb	r3, [r3, #13]
 800aba0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800aba2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	7b9b      	ldrb	r3, [r3, #14]
 800aba8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800abaa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	7bdb      	ldrb	r3, [r3, #15]
 800abb0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800abb2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	7c12      	ldrb	r2, [r2, #16]
 800abb8:	2a00      	cmp	r2, #0
 800abba:	d102      	bne.n	800abc2 <ETH_SetMACConfig+0x4a>
 800abbc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800abc0:	e000      	b.n	800abc4 <ETH_SetMACConfig+0x4c>
 800abc2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800abc4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800abc6:	683a      	ldr	r2, [r7, #0]
 800abc8:	7c52      	ldrb	r2, [r2, #17]
 800abca:	2a00      	cmp	r2, #0
 800abcc:	d102      	bne.n	800abd4 <ETH_SetMACConfig+0x5c>
 800abce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800abd2:	e000      	b.n	800abd6 <ETH_SetMACConfig+0x5e>
 800abd4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800abd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	7c9b      	ldrb	r3, [r3, #18]
 800abdc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800abde:	431a      	orrs	r2, r3
               macconf->Speed |
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800abe4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800abea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	7f1b      	ldrb	r3, [r3, #28]
 800abf0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800abf2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	7f5b      	ldrb	r3, [r3, #29]
 800abf8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800abfa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800abfc:	683a      	ldr	r2, [r7, #0]
 800abfe:	7f92      	ldrb	r2, [r2, #30]
 800ac00:	2a00      	cmp	r2, #0
 800ac02:	d102      	bne.n	800ac0a <ETH_SetMACConfig+0x92>
 800ac04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ac08:	e000      	b.n	800ac0c <ETH_SetMACConfig+0x94>
 800ac0a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800ac0c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	7fdb      	ldrb	r3, [r3, #31]
 800ac12:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800ac14:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ac1c:	2a00      	cmp	r2, #0
 800ac1e:	d102      	bne.n	800ac26 <ETH_SetMACConfig+0xae>
 800ac20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ac24:	e000      	b.n	800ac28 <ETH_SetMACConfig+0xb0>
 800ac26:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800ac28:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800ac2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac36:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800ac38:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	4b56      	ldr	r3, [pc, #344]	@ (800ada4 <ETH_SetMACConfig+0x22c>)
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	6812      	ldr	r2, [r2, #0]
 800ac50:	68f9      	ldr	r1, [r7, #12]
 800ac52:	430b      	orrs	r3, r1
 800ac54:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac5a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ac62:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800ac64:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ac6c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800ac6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ac76:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800ac78:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800ac80:	2a00      	cmp	r2, #0
 800ac82:	d102      	bne.n	800ac8a <ETH_SetMACConfig+0x112>
 800ac84:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ac88:	e000      	b.n	800ac8c <ETH_SetMACConfig+0x114>
 800ac8a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800ac8c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800ac92:	4313      	orrs	r3, r2
 800ac94:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	685a      	ldr	r2, [r3, #4]
 800ac9c:	4b42      	ldr	r3, [pc, #264]	@ (800ada8 <ETH_SetMACConfig+0x230>)
 800ac9e:	4013      	ands	r3, r2
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	6812      	ldr	r2, [r2, #0]
 800aca4:	68f9      	ldr	r1, [r7, #12]
 800aca6:	430b      	orrs	r3, r1
 800aca8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800acb0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800acb6:	4313      	orrs	r3, r2
 800acb8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68da      	ldr	r2, [r3, #12]
 800acc0:	4b3a      	ldr	r3, [pc, #232]	@ (800adac <ETH_SetMACConfig+0x234>)
 800acc2:	4013      	ands	r3, r2
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	6812      	ldr	r2, [r2, #0]
 800acc8:	68f9      	ldr	r1, [r7, #12]
 800acca:	430b      	orrs	r3, r1
 800accc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800acd4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800acda:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800acdc:	683a      	ldr	r2, [r7, #0]
 800acde:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800ace2:	2a00      	cmp	r2, #0
 800ace4:	d101      	bne.n	800acea <ETH_SetMACConfig+0x172>
 800ace6:	2280      	movs	r2, #128	@ 0x80
 800ace8:	e000      	b.n	800acec <ETH_SetMACConfig+0x174>
 800acea:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800acec:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acf2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800acf4:	4313      	orrs	r3, r2
 800acf6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800acfe:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800ad02:	4013      	ands	r3, r2
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	6812      	ldr	r2, [r2, #0]
 800ad08:	68f9      	ldr	r1, [r7, #12]
 800ad0a:	430b      	orrs	r3, r1
 800ad0c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800ad14:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800ad1c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad2a:	f023 0103 	bic.w	r1, r3, #3
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	430a      	orrs	r2, r1
 800ad36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800ad42:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	430a      	orrs	r2, r1
 800ad50:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800ad58:	683a      	ldr	r2, [r7, #0]
 800ad5a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800ad5e:	2a00      	cmp	r2, #0
 800ad60:	d101      	bne.n	800ad66 <ETH_SetMACConfig+0x1ee>
 800ad62:	2240      	movs	r2, #64	@ 0x40
 800ad64:	e000      	b.n	800ad68 <ETH_SetMACConfig+0x1f0>
 800ad66:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800ad68:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800ad70:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800ad72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800ad7a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800ad88:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	430a      	orrs	r2, r1
 800ad94:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800ad98:	bf00      	nop
 800ad9a:	3714      	adds	r7, #20
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr
 800ada4:	00048083 	.word	0x00048083
 800ada8:	c0f88000 	.word	0xc0f88000
 800adac:	fffffef0 	.word	0xfffffef0

0800adb0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	4b38      	ldr	r3, [pc, #224]	@ (800aea8 <ETH_SetDMAConfig+0xf8>)
 800adc6:	4013      	ands	r3, r2
 800adc8:	683a      	ldr	r2, [r7, #0]
 800adca:	6811      	ldr	r1, [r2, #0]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	6812      	ldr	r2, [r2, #0]
 800add0:	430b      	orrs	r3, r1
 800add2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800add6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	791b      	ldrb	r3, [r3, #4]
 800addc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800ade2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	7b1b      	ldrb	r3, [r3, #12]
 800ade8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800adea:	4313      	orrs	r3, r2
 800adec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800adf6:	685a      	ldr	r2, [r3, #4]
 800adf8:	4b2c      	ldr	r3, [pc, #176]	@ (800aeac <ETH_SetDMAConfig+0xfc>)
 800adfa:	4013      	ands	r3, r2
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	6812      	ldr	r2, [r2, #0]
 800ae00:	68f9      	ldr	r1, [r7, #12]
 800ae02:	430b      	orrs	r3, r1
 800ae04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ae08:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	7b5b      	ldrb	r3, [r3, #13]
 800ae0e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800ae14:	4313      	orrs	r3, r2
 800ae16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae20:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800ae24:	4b22      	ldr	r3, [pc, #136]	@ (800aeb0 <ETH_SetDMAConfig+0x100>)
 800ae26:	4013      	ands	r3, r2
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	6812      	ldr	r2, [r2, #0]
 800ae2c:	68f9      	ldr	r1, [r7, #12]
 800ae2e:	430b      	orrs	r3, r1
 800ae30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ae34:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	7d1b      	ldrb	r3, [r3, #20]
 800ae40:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800ae42:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	7f5b      	ldrb	r3, [r3, #29]
 800ae48:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae56:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800ae5a:	4b16      	ldr	r3, [pc, #88]	@ (800aeb4 <ETH_SetDMAConfig+0x104>)
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	6812      	ldr	r2, [r2, #0]
 800ae62:	68f9      	ldr	r1, [r7, #12]
 800ae64:	430b      	orrs	r3, r1
 800ae66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ae6a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	7f1b      	ldrb	r3, [r3, #28]
 800ae72:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae84:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800ae88:	4b0b      	ldr	r3, [pc, #44]	@ (800aeb8 <ETH_SetDMAConfig+0x108>)
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	6812      	ldr	r2, [r2, #0]
 800ae90:	68f9      	ldr	r1, [r7, #12]
 800ae92:	430b      	orrs	r3, r1
 800ae94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ae98:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800ae9c:	bf00      	nop
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	ffff87fd 	.word	0xffff87fd
 800aeac:	ffff2ffe 	.word	0xffff2ffe
 800aeb0:	fffec000 	.word	0xfffec000
 800aeb4:	ffc0efef 	.word	0xffc0efef
 800aeb8:	7fc0ffff 	.word	0x7fc0ffff

0800aebc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b0a4      	sub	sp, #144	@ 0x90
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800aec4:	2301      	movs	r3, #1
 800aec6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800aeca:	2300      	movs	r3, #0
 800aecc:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800aece:	2300      	movs	r3, #0
 800aed0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800aed4:	2300      	movs	r3, #0
 800aed6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800aeda:	2301      	movs	r3, #1
 800aedc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800aee0:	2301      	movs	r3, #1
 800aee2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800aee6:	2301      	movs	r3, #1
 800aee8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800aeec:	2300      	movs	r3, #0
 800aeee:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800aef2:	2301      	movs	r3, #1
 800aef4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800aef8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800aefc:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800aefe:	2300      	movs	r3, #0
 800af00:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800af04:	2300      	movs	r3, #0
 800af06:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800af08:	2300      	movs	r3, #0
 800af0a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800af0e:	2300      	movs	r3, #0
 800af10:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800af14:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800af18:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800af1a:	2300      	movs	r3, #0
 800af1c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800af20:	2300      	movs	r3, #0
 800af22:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800af24:	2301      	movs	r3, #1
 800af26:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800af2a:	2300      	movs	r3, #0
 800af2c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800af30:	2300      	movs	r3, #0
 800af32:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800af36:	2300      	movs	r3, #0
 800af38:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800af3a:	2300      	movs	r3, #0
 800af3c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800af3e:	2300      	movs	r3, #0
 800af40:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800af42:	2300      	movs	r3, #0
 800af44:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800af48:	2300      	movs	r3, #0
 800af4a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800af4e:	2301      	movs	r3, #1
 800af50:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800af54:	2320      	movs	r3, #32
 800af56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800af5a:	2301      	movs	r3, #1
 800af5c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800af60:	2300      	movs	r3, #0
 800af62:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800af66:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800af6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800af6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800af70:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800af72:	2300      	movs	r3, #0
 800af74:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800af78:	2302      	movs	r3, #2
 800af7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800af7e:	2300      	movs	r3, #0
 800af80:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800af84:	2300      	movs	r3, #0
 800af86:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800af8a:	2300      	movs	r3, #0
 800af8c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800af90:	2301      	movs	r3, #1
 800af92:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800af96:	2300      	movs	r3, #0
 800af98:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800af9a:	2301      	movs	r3, #1
 800af9c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800afa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800afa4:	4619      	mov	r1, r3
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7ff fde6 	bl	800ab78 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800afac:	2301      	movs	r3, #1
 800afae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800afb0:	2301      	movs	r3, #1
 800afb2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800afb4:	2300      	movs	r3, #0
 800afb6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800afb8:	2300      	movs	r3, #0
 800afba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800afbe:	2300      	movs	r3, #0
 800afc0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800afc2:	2300      	movs	r3, #0
 800afc4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800afc6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800afca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800afcc:	2300      	movs	r3, #0
 800afce:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800afd0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800afd4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800afd6:	2300      	movs	r3, #0
 800afd8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800afdc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800afe0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800afe2:	f107 0308 	add.w	r3, r7, #8
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f7ff fee1 	bl	800adb0 <ETH_SetDMAConfig>
}
 800afee:	bf00      	nop
 800aff0:	3790      	adds	r7, #144	@ 0x90
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800aff6:	b480      	push	{r7}
 800aff8:	b085      	sub	sp, #20
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800affe:	2300      	movs	r3, #0
 800b000:	60fb      	str	r3, [r7, #12]
 800b002:	e01d      	b.n	800b040 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	68d9      	ldr	r1, [r3, #12]
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	4613      	mov	r3, r2
 800b00c:	005b      	lsls	r3, r3, #1
 800b00e:	4413      	add	r3, r2
 800b010:	00db      	lsls	r3, r3, #3
 800b012:	440b      	add	r3, r1
 800b014:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	2200      	movs	r2, #0
 800b01a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	2200      	movs	r2, #0
 800b020:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	2200      	movs	r2, #0
 800b026:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2200      	movs	r2, #0
 800b02c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800b02e:	68b9      	ldr	r1, [r7, #8]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	68fa      	ldr	r2, [r7, #12]
 800b034:	3206      	adds	r2, #6
 800b036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	3301      	adds	r3, #1
 800b03e:	60fb      	str	r3, [r7, #12]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2b03      	cmp	r3, #3
 800b044:	d9de      	bls.n	800b004 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b054:	461a      	mov	r2, r3
 800b056:	2303      	movs	r3, #3
 800b058:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	68da      	ldr	r2, [r3, #12]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b068:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	68da      	ldr	r2, [r3, #12]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b078:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800b07c:	bf00      	nop
 800b07e:	3714      	adds	r7, #20
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800b090:	2300      	movs	r3, #0
 800b092:	60fb      	str	r3, [r7, #12]
 800b094:	e023      	b.n	800b0de <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6919      	ldr	r1, [r3, #16]
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	4613      	mov	r3, r2
 800b09e:	005b      	lsls	r3, r3, #1
 800b0a0:	4413      	add	r3, r2
 800b0a2:	00db      	lsls	r3, r3, #3
 800b0a4:	440b      	add	r3, r1
 800b0a6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800b0cc:	68b9      	ldr	r1, [r7, #8]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	3212      	adds	r2, #18
 800b0d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	60fb      	str	r3, [r7, #12]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2b03      	cmp	r3, #3
 800b0e2:	d9d8      	bls.n	800b096 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b10a:	461a      	mov	r2, r3
 800b10c:	2303      	movs	r3, #3
 800b10e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	691a      	ldr	r2, [r3, #16]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b11e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b132:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800b136:	bf00      	nop
 800b138:	3714      	adds	r7, #20
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
	...

0800b144 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800b144:	b480      	push	{r7}
 800b146:	b091      	sub	sp, #68	@ 0x44
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	3318      	adds	r3, #24
 800b154:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800b156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b158:	691b      	ldr	r3, [r3, #16]
 800b15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800b15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800b162:	2300      	movs	r3, #0
 800b164:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b168:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b16a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b16e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800b176:	2300      	movs	r3, #0
 800b178:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800b17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b182:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b186:	d007      	beq.n	800b198 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800b188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b18a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b18c:	3304      	adds	r3, #4
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d001      	beq.n	800b19c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800b198:	2302      	movs	r3, #2
 800b19a:	e266      	b.n	800b66a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f003 0304 	and.w	r3, r3, #4
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d044      	beq.n	800b232 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800b1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1aa:	68da      	ldr	r2, [r3, #12]
 800b1ac:	4b75      	ldr	r3, [pc, #468]	@ (800b384 <ETH_Prepare_Tx_Descriptors+0x240>)
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	68ba      	ldr	r2, [r7, #8]
 800b1b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b1b4:	431a      	orrs	r2, r3
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800b1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800b1d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f003 0308 	and.w	r3, r3, #8
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d027      	beq.n	800b232 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800b1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ec:	041b      	lsls	r3, r3, #16
 800b1ee:	431a      	orrs	r2, r3
 800b1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800b1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fe:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800b200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b20c:	431a      	orrs	r2, r3
 800b20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b210:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800b220:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800b230:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f003 0310 	and.w	r3, r3, #16
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00e      	beq.n	800b25c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800b23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b240:	689a      	ldr	r2, [r3, #8]
 800b242:	4b51      	ldr	r3, [pc, #324]	@ (800b388 <ETH_Prepare_Tx_Descriptors+0x244>)
 800b244:	4013      	ands	r3, r2
 800b246:	68ba      	ldr	r2, [r7, #8]
 800b248:	6992      	ldr	r2, [r2, #24]
 800b24a:	431a      	orrs	r2, r3
 800b24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800b250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800b258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 0304 	and.w	r3, r3, #4
 800b264:	2b00      	cmp	r3, #0
 800b266:	d105      	bne.n	800b274 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f003 0310 	and.w	r3, r3, #16
 800b270:	2b00      	cmp	r3, #0
 800b272:	d036      	beq.n	800b2e2 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800b274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b27e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800b280:	f3bf 8f5f 	dmb	sy
}
 800b284:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800b286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b290:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800b292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b294:	3301      	adds	r3, #1
 800b296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b29a:	2b03      	cmp	r3, #3
 800b29c:	d902      	bls.n	800b2a4 <ETH_Prepare_Tx_Descriptors+0x160>
 800b29e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2a0:	3b04      	subs	r3, #4
 800b2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ac:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 800b2ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800b2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b2bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b2c0:	d10f      	bne.n	800b2e2 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c4:	6a3a      	ldr	r2, [r7, #32]
 800b2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ca:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800b2cc:	f3bf 8f5f 	dmb	sy
}
 800b2d0:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2dc:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800b2de:	2302      	movs	r3, #2
 800b2e0:	e1c3      	b.n	800b66a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800b2e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800b2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f0:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f4:	689a      	ldr	r2, [r3, #8]
 800b2f6:	4b24      	ldr	r3, [pc, #144]	@ (800b388 <ETH_Prepare_Tx_Descriptors+0x244>)
 800b2f8:	4013      	ands	r3, r2
 800b2fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2fc:	6852      	ldr	r2, [r2, #4]
 800b2fe:	431a      	orrs	r2, r3
 800b300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b302:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 800b304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d012      	beq.n	800b332 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 800b30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800b312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	461a      	mov	r2, r3
 800b318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800b31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31e:	689a      	ldr	r2, [r3, #8]
 800b320:	4b1a      	ldr	r3, [pc, #104]	@ (800b38c <ETH_Prepare_Tx_Descriptors+0x248>)
 800b322:	4013      	ands	r3, r2
 800b324:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b326:	6852      	ldr	r2, [r2, #4]
 800b328:	0412      	lsls	r2, r2, #16
 800b32a:	431a      	orrs	r2, r3
 800b32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32e:	609a      	str	r2, [r3, #8]
 800b330:	e008      	b.n	800b344 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800b332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b334:	2200      	movs	r2, #0
 800b336:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800b338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33a:	689a      	ldr	r2, [r3, #8]
 800b33c:	4b13      	ldr	r3, [pc, #76]	@ (800b38c <ETH_Prepare_Tx_Descriptors+0x248>)
 800b33e:	4013      	ands	r3, r2
 800b340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b342:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 0310 	and.w	r3, r3, #16
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d021      	beq.n	800b394 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800b350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	6a1b      	ldr	r3, [r3, #32]
 800b35c:	04db      	lsls	r3, r3, #19
 800b35e:	431a      	orrs	r2, r3
 800b360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b362:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800b364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b366:	68da      	ldr	r2, [r3, #12]
 800b368:	4b09      	ldr	r3, [pc, #36]	@ (800b390 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800b36a:	4013      	ands	r3, r2
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	69d2      	ldr	r2, [r2, #28]
 800b370:	431a      	orrs	r2, r3
 800b372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b374:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800b376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800b37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b380:	60da      	str	r2, [r3, #12]
 800b382:	e02e      	b.n	800b3e2 <ETH_Prepare_Tx_Descriptors+0x29e>
 800b384:	ffff0000 	.word	0xffff0000
 800b388:	ffffc000 	.word	0xffffc000
 800b38c:	c000ffff 	.word	0xc000ffff
 800b390:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800b394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b396:	68da      	ldr	r2, [r3, #12]
 800b398:	4b7b      	ldr	r3, [pc, #492]	@ (800b588 <ETH_Prepare_Tx_Descriptors+0x444>)
 800b39a:	4013      	ands	r3, r2
 800b39c:	68ba      	ldr	r2, [r7, #8]
 800b39e:	6852      	ldr	r2, [r2, #4]
 800b3a0:	431a      	orrs	r2, r3
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a4:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f003 0301 	and.w	r3, r3, #1
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d008      	beq.n	800b3c4 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	695b      	ldr	r3, [r3, #20]
 800b3be:	431a      	orrs	r2, r3
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c2:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f003 0320 	and.w	r3, r3, #32
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d008      	beq.n	800b3e2 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	691b      	ldr	r3, [r3, #16]
 800b3dc:	431a      	orrs	r2, r3
 800b3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e0:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f003 0304 	and.w	r3, r3, #4
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d008      	beq.n	800b400 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3fa:	431a      	orrs	r2, r3
 800b3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fe:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800b400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800b40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800b414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b416:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800b418:	f3bf 8f5f 	dmb	sy
}
 800b41c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800b41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b428:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f003 0302 	and.w	r3, r3, #2
 800b432:	2b00      	cmp	r3, #0
 800b434:	f000 80da 	beq.w	800b5ec <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800b438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	431a      	orrs	r2, r3
 800b446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b448:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800b44a:	e0cf      	b.n	800b5ec <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800b44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b456:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800b458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b45a:	3301      	adds	r3, #1
 800b45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b45e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b460:	2b03      	cmp	r3, #3
 800b462:	d902      	bls.n	800b46a <ETH_Prepare_Tx_Descriptors+0x326>
 800b464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b466:	3b04      	subs	r3, #4
 800b468:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b46e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b472:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800b474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800b480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b488:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b48c:	d007      	beq.n	800b49e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800b48e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b492:	3304      	adds	r3, #4
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	4413      	add	r3, r2
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d029      	beq.n	800b4f2 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800b49e:	6a3b      	ldr	r3, [r7, #32]
 800b4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4aa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b4b0:	e019      	b.n	800b4e6 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800b4b2:	f3bf 8f5f 	dmb	sy
}
 800b4b6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800b4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800b4c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4cc:	2b03      	cmp	r3, #3
 800b4ce:	d902      	bls.n	800b4d6 <ETH_Prepare_Tx_Descriptors+0x392>
 800b4d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4d2:	3b04      	subs	r3, #4
 800b4d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b4da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4de:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800b4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b4e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b4e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d3e1      	bcc.n	800b4b2 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800b4ee:	2302      	movs	r3, #2
 800b4f0:	e0bb      	b.n	800b66a <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 800b4f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800b4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800b4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	461a      	mov	r2, r3
 800b504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b506:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800b508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b50a:	689a      	ldr	r2, [r3, #8]
 800b50c:	4b1f      	ldr	r3, [pc, #124]	@ (800b58c <ETH_Prepare_Tx_Descriptors+0x448>)
 800b50e:	4013      	ands	r3, r2
 800b510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b512:	6852      	ldr	r2, [r2, #4]
 800b514:	431a      	orrs	r2, r3
 800b516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b518:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800b51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b51c:	689b      	ldr	r3, [r3, #8]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d012      	beq.n	800b548 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800b522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800b528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	461a      	mov	r2, r3
 800b52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b530:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800b532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b534:	689a      	ldr	r2, [r3, #8]
 800b536:	4b16      	ldr	r3, [pc, #88]	@ (800b590 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800b538:	4013      	ands	r3, r2
 800b53a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b53c:	6852      	ldr	r2, [r2, #4]
 800b53e:	0412      	lsls	r2, r2, #16
 800b540:	431a      	orrs	r2, r3
 800b542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b544:	609a      	str	r2, [r3, #8]
 800b546:	e008      	b.n	800b55a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800b548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b54a:	2200      	movs	r2, #0
 800b54c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800b54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b550:	689a      	ldr	r2, [r3, #8]
 800b552:	4b0f      	ldr	r3, [pc, #60]	@ (800b590 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800b554:	4013      	ands	r3, r2
 800b556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b558:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f003 0310 	and.w	r3, r3, #16
 800b562:	2b00      	cmp	r3, #0
 800b564:	d018      	beq.n	800b598 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800b566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b568:	68da      	ldr	r2, [r3, #12]
 800b56a:	4b0a      	ldr	r3, [pc, #40]	@ (800b594 <ETH_Prepare_Tx_Descriptors+0x450>)
 800b56c:	4013      	ands	r3, r2
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	69d2      	ldr	r2, [r2, #28]
 800b572:	431a      	orrs	r2, r3
 800b574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b576:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800b578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800b580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b582:	60da      	str	r2, [r3, #12]
 800b584:	e020      	b.n	800b5c8 <ETH_Prepare_Tx_Descriptors+0x484>
 800b586:	bf00      	nop
 800b588:	ffff8000 	.word	0xffff8000
 800b58c:	ffffc000 	.word	0xffffc000
 800b590:	c000ffff 	.word	0xc000ffff
 800b594:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800b598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59a:	68da      	ldr	r2, [r3, #12]
 800b59c:	4b36      	ldr	r3, [pc, #216]	@ (800b678 <ETH_Prepare_Tx_Descriptors+0x534>)
 800b59e:	4013      	ands	r3, r2
 800b5a0:	68ba      	ldr	r2, [r7, #8]
 800b5a2:	6852      	ldr	r2, [r2, #4]
 800b5a4:	431a      	orrs	r2, r3
 800b5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a8:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f003 0301 	and.w	r3, r3, #1
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d008      	beq.n	800b5c8 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	695b      	ldr	r3, [r3, #20]
 800b5c2:	431a      	orrs	r2, r3
 800b5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800b5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800b5ce:	f3bf 8f5f 	dmb	sy
}
 800b5d2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800b5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b5dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5de:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800b5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800b5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ea:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800b5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f47f af2b 	bne.w	800b44c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d006      	beq.n	800b60a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800b5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b606:	609a      	str	r2, [r3, #8]
 800b608:	e005      	b.n	800b616 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800b60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b60c:	689b      	ldr	r3, [r3, #8]
 800b60e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b614:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800b616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b620:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800b622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b624:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b626:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b62a:	3304      	adds	r3, #4
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	440b      	add	r3, r1
 800b630:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800b632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b634:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b636:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b638:	f3ef 8310 	mrs	r3, PRIMASK
 800b63c:	613b      	str	r3, [r7, #16]
  return(result);
 800b63e:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800b640:	61fb      	str	r3, [r7, #28]
 800b642:	2301      	movs	r3, #1
 800b644:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	f383 8810 	msr	PRIMASK, r3
}
 800b64c:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800b64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b650:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b654:	4413      	add	r3, r2
 800b656:	1c5a      	adds	r2, r3, #1
 800b658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b65a:	629a      	str	r2, [r3, #40]	@ 0x28
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	f383 8810 	msr	PRIMASK, r3
}
 800b666:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3744      	adds	r7, #68	@ 0x44
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	ffff8000 	.word	0xffff8000

0800b67c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b089      	sub	sp, #36	@ 0x24
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b686:	2300      	movs	r3, #0
 800b688:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b68a:	4b89      	ldr	r3, [pc, #548]	@ (800b8b0 <HAL_GPIO_Init+0x234>)
 800b68c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b68e:	e194      	b.n	800b9ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	2101      	movs	r1, #1
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	fa01 f303 	lsl.w	r3, r1, r3
 800b69c:	4013      	ands	r3, r2
 800b69e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	f000 8186 	beq.w	800b9b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	f003 0303 	and.w	r3, r3, #3
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d005      	beq.n	800b6c0 <HAL_GPIO_Init+0x44>
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	f003 0303 	and.w	r3, r3, #3
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	d130      	bne.n	800b722 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	005b      	lsls	r3, r3, #1
 800b6ca:	2203      	movs	r2, #3
 800b6cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b6d0:	43db      	mvns	r3, r3
 800b6d2:	69ba      	ldr	r2, [r7, #24]
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	68da      	ldr	r2, [r3, #12]
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	005b      	lsls	r3, r3, #1
 800b6e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b6e4:	69ba      	ldr	r2, [r7, #24]
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	69ba      	ldr	r2, [r7, #24]
 800b6ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	69fb      	ldr	r3, [r7, #28]
 800b6fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b6fe:	43db      	mvns	r3, r3
 800b700:	69ba      	ldr	r2, [r7, #24]
 800b702:	4013      	ands	r3, r2
 800b704:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	091b      	lsrs	r3, r3, #4
 800b70c:	f003 0201 	and.w	r2, r3, #1
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	fa02 f303 	lsl.w	r3, r2, r3
 800b716:	69ba      	ldr	r2, [r7, #24]
 800b718:	4313      	orrs	r3, r2
 800b71a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	69ba      	ldr	r2, [r7, #24]
 800b720:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	f003 0303 	and.w	r3, r3, #3
 800b72a:	2b03      	cmp	r3, #3
 800b72c:	d017      	beq.n	800b75e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	005b      	lsls	r3, r3, #1
 800b738:	2203      	movs	r2, #3
 800b73a:	fa02 f303 	lsl.w	r3, r2, r3
 800b73e:	43db      	mvns	r3, r3
 800b740:	69ba      	ldr	r2, [r7, #24]
 800b742:	4013      	ands	r3, r2
 800b744:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	689a      	ldr	r2, [r3, #8]
 800b74a:	69fb      	ldr	r3, [r7, #28]
 800b74c:	005b      	lsls	r3, r3, #1
 800b74e:	fa02 f303 	lsl.w	r3, r2, r3
 800b752:	69ba      	ldr	r2, [r7, #24]
 800b754:	4313      	orrs	r3, r2
 800b756:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	69ba      	ldr	r2, [r7, #24]
 800b75c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	f003 0303 	and.w	r3, r3, #3
 800b766:	2b02      	cmp	r3, #2
 800b768:	d123      	bne.n	800b7b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b76a:	69fb      	ldr	r3, [r7, #28]
 800b76c:	08da      	lsrs	r2, r3, #3
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	3208      	adds	r2, #8
 800b772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	f003 0307 	and.w	r3, r3, #7
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	220f      	movs	r2, #15
 800b782:	fa02 f303 	lsl.w	r3, r2, r3
 800b786:	43db      	mvns	r3, r3
 800b788:	69ba      	ldr	r2, [r7, #24]
 800b78a:	4013      	ands	r3, r2
 800b78c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	691a      	ldr	r2, [r3, #16]
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	f003 0307 	and.w	r3, r3, #7
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	fa02 f303 	lsl.w	r3, r2, r3
 800b79e:	69ba      	ldr	r2, [r7, #24]
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	08da      	lsrs	r2, r3, #3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	3208      	adds	r2, #8
 800b7ac:	69b9      	ldr	r1, [r7, #24]
 800b7ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	005b      	lsls	r3, r3, #1
 800b7bc:	2203      	movs	r2, #3
 800b7be:	fa02 f303 	lsl.w	r3, r2, r3
 800b7c2:	43db      	mvns	r3, r3
 800b7c4:	69ba      	ldr	r2, [r7, #24]
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	f003 0203 	and.w	r2, r3, #3
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	005b      	lsls	r3, r3, #1
 800b7d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7da:	69ba      	ldr	r2, [r7, #24]
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	69ba      	ldr	r2, [r7, #24]
 800b7e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f000 80e0 	beq.w	800b9b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b7f4:	4b2f      	ldr	r3, [pc, #188]	@ (800b8b4 <HAL_GPIO_Init+0x238>)
 800b7f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b7fa:	4a2e      	ldr	r2, [pc, #184]	@ (800b8b4 <HAL_GPIO_Init+0x238>)
 800b7fc:	f043 0302 	orr.w	r3, r3, #2
 800b800:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b804:	4b2b      	ldr	r3, [pc, #172]	@ (800b8b4 <HAL_GPIO_Init+0x238>)
 800b806:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b80a:	f003 0302 	and.w	r3, r3, #2
 800b80e:	60fb      	str	r3, [r7, #12]
 800b810:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b812:	4a29      	ldr	r2, [pc, #164]	@ (800b8b8 <HAL_GPIO_Init+0x23c>)
 800b814:	69fb      	ldr	r3, [r7, #28]
 800b816:	089b      	lsrs	r3, r3, #2
 800b818:	3302      	adds	r3, #2
 800b81a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b81e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b820:	69fb      	ldr	r3, [r7, #28]
 800b822:	f003 0303 	and.w	r3, r3, #3
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	220f      	movs	r2, #15
 800b82a:	fa02 f303 	lsl.w	r3, r2, r3
 800b82e:	43db      	mvns	r3, r3
 800b830:	69ba      	ldr	r2, [r7, #24]
 800b832:	4013      	ands	r3, r2
 800b834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4a20      	ldr	r2, [pc, #128]	@ (800b8bc <HAL_GPIO_Init+0x240>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d052      	beq.n	800b8e4 <HAL_GPIO_Init+0x268>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a1f      	ldr	r2, [pc, #124]	@ (800b8c0 <HAL_GPIO_Init+0x244>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d031      	beq.n	800b8aa <HAL_GPIO_Init+0x22e>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4a1e      	ldr	r2, [pc, #120]	@ (800b8c4 <HAL_GPIO_Init+0x248>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d02b      	beq.n	800b8a6 <HAL_GPIO_Init+0x22a>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4a1d      	ldr	r2, [pc, #116]	@ (800b8c8 <HAL_GPIO_Init+0x24c>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d025      	beq.n	800b8a2 <HAL_GPIO_Init+0x226>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4a1c      	ldr	r2, [pc, #112]	@ (800b8cc <HAL_GPIO_Init+0x250>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d01f      	beq.n	800b89e <HAL_GPIO_Init+0x222>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	4a1b      	ldr	r2, [pc, #108]	@ (800b8d0 <HAL_GPIO_Init+0x254>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d019      	beq.n	800b89a <HAL_GPIO_Init+0x21e>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4a1a      	ldr	r2, [pc, #104]	@ (800b8d4 <HAL_GPIO_Init+0x258>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d013      	beq.n	800b896 <HAL_GPIO_Init+0x21a>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a19      	ldr	r2, [pc, #100]	@ (800b8d8 <HAL_GPIO_Init+0x25c>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d00d      	beq.n	800b892 <HAL_GPIO_Init+0x216>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4a18      	ldr	r2, [pc, #96]	@ (800b8dc <HAL_GPIO_Init+0x260>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d007      	beq.n	800b88e <HAL_GPIO_Init+0x212>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4a17      	ldr	r2, [pc, #92]	@ (800b8e0 <HAL_GPIO_Init+0x264>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d101      	bne.n	800b88a <HAL_GPIO_Init+0x20e>
 800b886:	2309      	movs	r3, #9
 800b888:	e02d      	b.n	800b8e6 <HAL_GPIO_Init+0x26a>
 800b88a:	230a      	movs	r3, #10
 800b88c:	e02b      	b.n	800b8e6 <HAL_GPIO_Init+0x26a>
 800b88e:	2308      	movs	r3, #8
 800b890:	e029      	b.n	800b8e6 <HAL_GPIO_Init+0x26a>
 800b892:	2307      	movs	r3, #7
 800b894:	e027      	b.n	800b8e6 <HAL_GPIO_Init+0x26a>
 800b896:	2306      	movs	r3, #6
 800b898:	e025      	b.n	800b8e6 <HAL_GPIO_Init+0x26a>
 800b89a:	2305      	movs	r3, #5
 800b89c:	e023      	b.n	800b8e6 <HAL_GPIO_Init+0x26a>
 800b89e:	2304      	movs	r3, #4
 800b8a0:	e021      	b.n	800b8e6 <HAL_GPIO_Init+0x26a>
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	e01f      	b.n	800b8e6 <HAL_GPIO_Init+0x26a>
 800b8a6:	2302      	movs	r3, #2
 800b8a8:	e01d      	b.n	800b8e6 <HAL_GPIO_Init+0x26a>
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e01b      	b.n	800b8e6 <HAL_GPIO_Init+0x26a>
 800b8ae:	bf00      	nop
 800b8b0:	58000080 	.word	0x58000080
 800b8b4:	58024400 	.word	0x58024400
 800b8b8:	58000400 	.word	0x58000400
 800b8bc:	58020000 	.word	0x58020000
 800b8c0:	58020400 	.word	0x58020400
 800b8c4:	58020800 	.word	0x58020800
 800b8c8:	58020c00 	.word	0x58020c00
 800b8cc:	58021000 	.word	0x58021000
 800b8d0:	58021400 	.word	0x58021400
 800b8d4:	58021800 	.word	0x58021800
 800b8d8:	58021c00 	.word	0x58021c00
 800b8dc:	58022000 	.word	0x58022000
 800b8e0:	58022400 	.word	0x58022400
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	69fa      	ldr	r2, [r7, #28]
 800b8e8:	f002 0203 	and.w	r2, r2, #3
 800b8ec:	0092      	lsls	r2, r2, #2
 800b8ee:	4093      	lsls	r3, r2
 800b8f0:	69ba      	ldr	r2, [r7, #24]
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b8f6:	4938      	ldr	r1, [pc, #224]	@ (800b9d8 <HAL_GPIO_Init+0x35c>)
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	089b      	lsrs	r3, r3, #2
 800b8fc:	3302      	adds	r3, #2
 800b8fe:	69ba      	ldr	r2, [r7, #24]
 800b900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	43db      	mvns	r3, r3
 800b910:	69ba      	ldr	r2, [r7, #24]
 800b912:	4013      	ands	r3, r2
 800b914:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d003      	beq.n	800b92a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b922:	69ba      	ldr	r2, [r7, #24]
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	4313      	orrs	r3, r2
 800b928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b92a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	43db      	mvns	r3, r3
 800b93e:	69ba      	ldr	r2, [r7, #24]
 800b940:	4013      	ands	r3, r2
 800b942:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d003      	beq.n	800b958 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b950:	69ba      	ldr	r2, [r7, #24]
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	4313      	orrs	r3, r2
 800b956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b958:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	43db      	mvns	r3, r3
 800b96a:	69ba      	ldr	r2, [r7, #24]
 800b96c:	4013      	ands	r3, r2
 800b96e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d003      	beq.n	800b984 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b97c:	69ba      	ldr	r2, [r7, #24]
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	4313      	orrs	r3, r2
 800b982:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	69ba      	ldr	r2, [r7, #24]
 800b988:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	43db      	mvns	r3, r3
 800b994:	69ba      	ldr	r2, [r7, #24]
 800b996:	4013      	ands	r3, r2
 800b998:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d003      	beq.n	800b9ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b9a6:	69ba      	ldr	r2, [r7, #24]
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	69ba      	ldr	r2, [r7, #24]
 800b9b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f47f ae63 	bne.w	800b690 <HAL_GPIO_Init+0x14>
  }
}
 800b9ca:	bf00      	nop
 800b9cc:	bf00      	nop
 800b9ce:	3724      	adds	r7, #36	@ 0x24
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr
 800b9d8:	58000400 	.word	0x58000400

0800b9dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	807b      	strh	r3, [r7, #2]
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b9ec:	787b      	ldrb	r3, [r7, #1]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d003      	beq.n	800b9fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b9f2:	887a      	ldrh	r2, [r7, #2]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b9f8:	e003      	b.n	800ba02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b9fa:	887b      	ldrh	r3, [r7, #2]
 800b9fc:	041a      	lsls	r2, r3, #16
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	619a      	str	r2, [r3, #24]
}
 800ba02:	bf00      	nop
 800ba04:	370c      	adds	r7, #12
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr

0800ba0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ba0e:	b480      	push	{r7}
 800ba10:	b085      	sub	sp, #20
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
 800ba16:	460b      	mov	r3, r1
 800ba18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ba20:	887a      	ldrh	r2, [r7, #2]
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	4013      	ands	r3, r2
 800ba26:	041a      	lsls	r2, r3, #16
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	43d9      	mvns	r1, r3
 800ba2c:	887b      	ldrh	r3, [r7, #2]
 800ba2e:	400b      	ands	r3, r1
 800ba30:	431a      	orrs	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	619a      	str	r2, [r3, #24]
}
 800ba36:	bf00      	nop
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr
	...

0800ba44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ba4c:	4b19      	ldr	r3, [pc, #100]	@ (800bab4 <HAL_PWREx_ConfigSupply+0x70>)
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	f003 0304 	and.w	r3, r3, #4
 800ba54:	2b04      	cmp	r3, #4
 800ba56:	d00a      	beq.n	800ba6e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ba58:	4b16      	ldr	r3, [pc, #88]	@ (800bab4 <HAL_PWREx_ConfigSupply+0x70>)
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	f003 0307 	and.w	r3, r3, #7
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d001      	beq.n	800ba6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ba66:	2301      	movs	r3, #1
 800ba68:	e01f      	b.n	800baaa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	e01d      	b.n	800baaa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ba6e:	4b11      	ldr	r3, [pc, #68]	@ (800bab4 <HAL_PWREx_ConfigSupply+0x70>)
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	f023 0207 	bic.w	r2, r3, #7
 800ba76:	490f      	ldr	r1, [pc, #60]	@ (800bab4 <HAL_PWREx_ConfigSupply+0x70>)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ba7e:	f7fb f8b1 	bl	8006be4 <HAL_GetTick>
 800ba82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ba84:	e009      	b.n	800ba9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ba86:	f7fb f8ad 	bl	8006be4 <HAL_GetTick>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ba94:	d901      	bls.n	800ba9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	e007      	b.n	800baaa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ba9a:	4b06      	ldr	r3, [pc, #24]	@ (800bab4 <HAL_PWREx_ConfigSupply+0x70>)
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800baa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800baa6:	d1ee      	bne.n	800ba86 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	58024800 	.word	0x58024800

0800bab8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b08c      	sub	sp, #48	@ 0x30
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d102      	bne.n	800bacc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bac6:	2301      	movs	r3, #1
 800bac8:	f000 bc48 	b.w	800c35c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 0301 	and.w	r3, r3, #1
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f000 8088 	beq.w	800bbea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bada:	4b99      	ldr	r3, [pc, #612]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bae4:	4b96      	ldr	r3, [pc, #600]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bae8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800baea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baec:	2b10      	cmp	r3, #16
 800baee:	d007      	beq.n	800bb00 <HAL_RCC_OscConfig+0x48>
 800baf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf2:	2b18      	cmp	r3, #24
 800baf4:	d111      	bne.n	800bb1a <HAL_RCC_OscConfig+0x62>
 800baf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baf8:	f003 0303 	and.w	r3, r3, #3
 800bafc:	2b02      	cmp	r3, #2
 800bafe:	d10c      	bne.n	800bb1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb00:	4b8f      	ldr	r3, [pc, #572]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d06d      	beq.n	800bbe8 <HAL_RCC_OscConfig+0x130>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d169      	bne.n	800bbe8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800bb14:	2301      	movs	r3, #1
 800bb16:	f000 bc21 	b.w	800c35c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb22:	d106      	bne.n	800bb32 <HAL_RCC_OscConfig+0x7a>
 800bb24:	4b86      	ldr	r3, [pc, #536]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a85      	ldr	r2, [pc, #532]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bb2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb2e:	6013      	str	r3, [r2, #0]
 800bb30:	e02e      	b.n	800bb90 <HAL_RCC_OscConfig+0xd8>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d10c      	bne.n	800bb54 <HAL_RCC_OscConfig+0x9c>
 800bb3a:	4b81      	ldr	r3, [pc, #516]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a80      	ldr	r2, [pc, #512]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bb40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb44:	6013      	str	r3, [r2, #0]
 800bb46:	4b7e      	ldr	r3, [pc, #504]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a7d      	ldr	r2, [pc, #500]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bb4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bb50:	6013      	str	r3, [r2, #0]
 800bb52:	e01d      	b.n	800bb90 <HAL_RCC_OscConfig+0xd8>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bb5c:	d10c      	bne.n	800bb78 <HAL_RCC_OscConfig+0xc0>
 800bb5e:	4b78      	ldr	r3, [pc, #480]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a77      	ldr	r2, [pc, #476]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bb64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bb68:	6013      	str	r3, [r2, #0]
 800bb6a:	4b75      	ldr	r3, [pc, #468]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a74      	ldr	r2, [pc, #464]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bb70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb74:	6013      	str	r3, [r2, #0]
 800bb76:	e00b      	b.n	800bb90 <HAL_RCC_OscConfig+0xd8>
 800bb78:	4b71      	ldr	r3, [pc, #452]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a70      	ldr	r2, [pc, #448]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bb7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb82:	6013      	str	r3, [r2, #0]
 800bb84:	4b6e      	ldr	r3, [pc, #440]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4a6d      	ldr	r2, [pc, #436]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bb8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bb8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d013      	beq.n	800bbc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb98:	f7fb f824 	bl	8006be4 <HAL_GetTick>
 800bb9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bb9e:	e008      	b.n	800bbb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bba0:	f7fb f820 	bl	8006be4 <HAL_GetTick>
 800bba4:	4602      	mov	r2, r0
 800bba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba8:	1ad3      	subs	r3, r2, r3
 800bbaa:	2b64      	cmp	r3, #100	@ 0x64
 800bbac:	d901      	bls.n	800bbb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	e3d4      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bbb2:	4b63      	ldr	r3, [pc, #396]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d0f0      	beq.n	800bba0 <HAL_RCC_OscConfig+0xe8>
 800bbbe:	e014      	b.n	800bbea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbc0:	f7fb f810 	bl	8006be4 <HAL_GetTick>
 800bbc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bbc6:	e008      	b.n	800bbda <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bbc8:	f7fb f80c 	bl	8006be4 <HAL_GetTick>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd0:	1ad3      	subs	r3, r2, r3
 800bbd2:	2b64      	cmp	r3, #100	@ 0x64
 800bbd4:	d901      	bls.n	800bbda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800bbd6:	2303      	movs	r3, #3
 800bbd8:	e3c0      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bbda:	4b59      	ldr	r3, [pc, #356]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d1f0      	bne.n	800bbc8 <HAL_RCC_OscConfig+0x110>
 800bbe6:	e000      	b.n	800bbea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bbe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f003 0302 	and.w	r3, r3, #2
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	f000 80ca 	beq.w	800bd8c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bbf8:	4b51      	ldr	r3, [pc, #324]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bc02:	4b4f      	ldr	r3, [pc, #316]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bc04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bc08:	6a3b      	ldr	r3, [r7, #32]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d007      	beq.n	800bc1e <HAL_RCC_OscConfig+0x166>
 800bc0e:	6a3b      	ldr	r3, [r7, #32]
 800bc10:	2b18      	cmp	r3, #24
 800bc12:	d156      	bne.n	800bcc2 <HAL_RCC_OscConfig+0x20a>
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	f003 0303 	and.w	r3, r3, #3
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d151      	bne.n	800bcc2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bc1e:	4b48      	ldr	r3, [pc, #288]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f003 0304 	and.w	r3, r3, #4
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d005      	beq.n	800bc36 <HAL_RCC_OscConfig+0x17e>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d101      	bne.n	800bc36 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800bc32:	2301      	movs	r3, #1
 800bc34:	e392      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bc36:	4b42      	ldr	r3, [pc, #264]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f023 0219 	bic.w	r2, r3, #25
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	493f      	ldr	r1, [pc, #252]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bc44:	4313      	orrs	r3, r2
 800bc46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc48:	f7fa ffcc 	bl	8006be4 <HAL_GetTick>
 800bc4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc4e:	e008      	b.n	800bc62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc50:	f7fa ffc8 	bl	8006be4 <HAL_GetTick>
 800bc54:	4602      	mov	r2, r0
 800bc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc58:	1ad3      	subs	r3, r2, r3
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	d901      	bls.n	800bc62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800bc5e:	2303      	movs	r3, #3
 800bc60:	e37c      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc62:	4b37      	ldr	r3, [pc, #220]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f003 0304 	and.w	r3, r3, #4
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d0f0      	beq.n	800bc50 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc6e:	f7fa ffe9 	bl	8006c44 <HAL_GetREVID>
 800bc72:	4603      	mov	r3, r0
 800bc74:	f241 0203 	movw	r2, #4099	@ 0x1003
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d817      	bhi.n	800bcac <HAL_RCC_OscConfig+0x1f4>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	691b      	ldr	r3, [r3, #16]
 800bc80:	2b40      	cmp	r3, #64	@ 0x40
 800bc82:	d108      	bne.n	800bc96 <HAL_RCC_OscConfig+0x1de>
 800bc84:	4b2e      	ldr	r3, [pc, #184]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800bc8c:	4a2c      	ldr	r2, [pc, #176]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bc8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc92:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bc94:	e07a      	b.n	800bd8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc96:	4b2a      	ldr	r3, [pc, #168]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	031b      	lsls	r3, r3, #12
 800bca4:	4926      	ldr	r1, [pc, #152]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bca6:	4313      	orrs	r3, r2
 800bca8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bcaa:	e06f      	b.n	800bd8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bcac:	4b24      	ldr	r3, [pc, #144]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	691b      	ldr	r3, [r3, #16]
 800bcb8:	061b      	lsls	r3, r3, #24
 800bcba:	4921      	ldr	r1, [pc, #132]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bcc0:	e064      	b.n	800bd8c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d047      	beq.n	800bd5a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bcca:	4b1d      	ldr	r3, [pc, #116]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f023 0219 	bic.w	r2, r3, #25
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	491a      	ldr	r1, [pc, #104]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcdc:	f7fa ff82 	bl	8006be4 <HAL_GetTick>
 800bce0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bce2:	e008      	b.n	800bcf6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bce4:	f7fa ff7e 	bl	8006be4 <HAL_GetTick>
 800bce8:	4602      	mov	r2, r0
 800bcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcec:	1ad3      	subs	r3, r2, r3
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	d901      	bls.n	800bcf6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800bcf2:	2303      	movs	r3, #3
 800bcf4:	e332      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bcf6:	4b12      	ldr	r3, [pc, #72]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f003 0304 	and.w	r3, r3, #4
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d0f0      	beq.n	800bce4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd02:	f7fa ff9f 	bl	8006c44 <HAL_GetREVID>
 800bd06:	4603      	mov	r3, r0
 800bd08:	f241 0203 	movw	r2, #4099	@ 0x1003
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d819      	bhi.n	800bd44 <HAL_RCC_OscConfig+0x28c>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	2b40      	cmp	r3, #64	@ 0x40
 800bd16:	d108      	bne.n	800bd2a <HAL_RCC_OscConfig+0x272>
 800bd18:	4b09      	ldr	r3, [pc, #36]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800bd20:	4a07      	ldr	r2, [pc, #28]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bd22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd26:	6053      	str	r3, [r2, #4]
 800bd28:	e030      	b.n	800bd8c <HAL_RCC_OscConfig+0x2d4>
 800bd2a:	4b05      	ldr	r3, [pc, #20]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	031b      	lsls	r3, r3, #12
 800bd38:	4901      	ldr	r1, [pc, #4]	@ (800bd40 <HAL_RCC_OscConfig+0x288>)
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	604b      	str	r3, [r1, #4]
 800bd3e:	e025      	b.n	800bd8c <HAL_RCC_OscConfig+0x2d4>
 800bd40:	58024400 	.word	0x58024400
 800bd44:	4b9a      	ldr	r3, [pc, #616]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	061b      	lsls	r3, r3, #24
 800bd52:	4997      	ldr	r1, [pc, #604]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bd54:	4313      	orrs	r3, r2
 800bd56:	604b      	str	r3, [r1, #4]
 800bd58:	e018      	b.n	800bd8c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bd5a:	4b95      	ldr	r3, [pc, #596]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a94      	ldr	r2, [pc, #592]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bd60:	f023 0301 	bic.w	r3, r3, #1
 800bd64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd66:	f7fa ff3d 	bl	8006be4 <HAL_GetTick>
 800bd6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bd6c:	e008      	b.n	800bd80 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd6e:	f7fa ff39 	bl	8006be4 <HAL_GetTick>
 800bd72:	4602      	mov	r2, r0
 800bd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd76:	1ad3      	subs	r3, r2, r3
 800bd78:	2b02      	cmp	r3, #2
 800bd7a:	d901      	bls.n	800bd80 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	e2ed      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bd80:	4b8b      	ldr	r3, [pc, #556]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f003 0304 	and.w	r3, r3, #4
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d1f0      	bne.n	800bd6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f003 0310 	and.w	r3, r3, #16
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f000 80a9 	beq.w	800beec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd9a:	4b85      	ldr	r3, [pc, #532]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bd9c:	691b      	ldr	r3, [r3, #16]
 800bd9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bda2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bda4:	4b82      	ldr	r3, [pc, #520]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bda6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	2b08      	cmp	r3, #8
 800bdae:	d007      	beq.n	800bdc0 <HAL_RCC_OscConfig+0x308>
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	2b18      	cmp	r3, #24
 800bdb4:	d13a      	bne.n	800be2c <HAL_RCC_OscConfig+0x374>
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	f003 0303 	and.w	r3, r3, #3
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d135      	bne.n	800be2c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bdc0:	4b7b      	ldr	r3, [pc, #492]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d005      	beq.n	800bdd8 <HAL_RCC_OscConfig+0x320>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	69db      	ldr	r3, [r3, #28]
 800bdd0:	2b80      	cmp	r3, #128	@ 0x80
 800bdd2:	d001      	beq.n	800bdd8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	e2c1      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bdd8:	f7fa ff34 	bl	8006c44 <HAL_GetREVID>
 800bddc:	4603      	mov	r3, r0
 800bdde:	f241 0203 	movw	r2, #4099	@ 0x1003
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d817      	bhi.n	800be16 <HAL_RCC_OscConfig+0x35e>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6a1b      	ldr	r3, [r3, #32]
 800bdea:	2b20      	cmp	r3, #32
 800bdec:	d108      	bne.n	800be00 <HAL_RCC_OscConfig+0x348>
 800bdee:	4b70      	ldr	r3, [pc, #448]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800bdf6:	4a6e      	ldr	r2, [pc, #440]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bdf8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bdfc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bdfe:	e075      	b.n	800beec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800be00:	4b6b      	ldr	r3, [pc, #428]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a1b      	ldr	r3, [r3, #32]
 800be0c:	069b      	lsls	r3, r3, #26
 800be0e:	4968      	ldr	r1, [pc, #416]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800be10:	4313      	orrs	r3, r2
 800be12:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800be14:	e06a      	b.n	800beec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800be16:	4b66      	ldr	r3, [pc, #408]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a1b      	ldr	r3, [r3, #32]
 800be22:	061b      	lsls	r3, r3, #24
 800be24:	4962      	ldr	r1, [pc, #392]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800be26:	4313      	orrs	r3, r2
 800be28:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800be2a:	e05f      	b.n	800beec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	69db      	ldr	r3, [r3, #28]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d042      	beq.n	800beba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800be34:	4b5e      	ldr	r3, [pc, #376]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a5d      	ldr	r2, [pc, #372]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800be3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be40:	f7fa fed0 	bl	8006be4 <HAL_GetTick>
 800be44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800be46:	e008      	b.n	800be5a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800be48:	f7fa fecc 	bl	8006be4 <HAL_GetTick>
 800be4c:	4602      	mov	r2, r0
 800be4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	2b02      	cmp	r3, #2
 800be54:	d901      	bls.n	800be5a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800be56:	2303      	movs	r3, #3
 800be58:	e280      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800be5a:	4b55      	ldr	r3, [pc, #340]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be62:	2b00      	cmp	r3, #0
 800be64:	d0f0      	beq.n	800be48 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800be66:	f7fa feed 	bl	8006c44 <HAL_GetREVID>
 800be6a:	4603      	mov	r3, r0
 800be6c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800be70:	4293      	cmp	r3, r2
 800be72:	d817      	bhi.n	800bea4 <HAL_RCC_OscConfig+0x3ec>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6a1b      	ldr	r3, [r3, #32]
 800be78:	2b20      	cmp	r3, #32
 800be7a:	d108      	bne.n	800be8e <HAL_RCC_OscConfig+0x3d6>
 800be7c:	4b4c      	ldr	r3, [pc, #304]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800be84:	4a4a      	ldr	r2, [pc, #296]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800be86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800be8a:	6053      	str	r3, [r2, #4]
 800be8c:	e02e      	b.n	800beec <HAL_RCC_OscConfig+0x434>
 800be8e:	4b48      	ldr	r3, [pc, #288]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a1b      	ldr	r3, [r3, #32]
 800be9a:	069b      	lsls	r3, r3, #26
 800be9c:	4944      	ldr	r1, [pc, #272]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800be9e:	4313      	orrs	r3, r2
 800bea0:	604b      	str	r3, [r1, #4]
 800bea2:	e023      	b.n	800beec <HAL_RCC_OscConfig+0x434>
 800bea4:	4b42      	ldr	r3, [pc, #264]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6a1b      	ldr	r3, [r3, #32]
 800beb0:	061b      	lsls	r3, r3, #24
 800beb2:	493f      	ldr	r1, [pc, #252]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800beb4:	4313      	orrs	r3, r2
 800beb6:	60cb      	str	r3, [r1, #12]
 800beb8:	e018      	b.n	800beec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800beba:	4b3d      	ldr	r3, [pc, #244]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a3c      	ldr	r2, [pc, #240]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bec0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bec6:	f7fa fe8d 	bl	8006be4 <HAL_GetTick>
 800beca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800becc:	e008      	b.n	800bee0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bece:	f7fa fe89 	bl	8006be4 <HAL_GetTick>
 800bed2:	4602      	mov	r2, r0
 800bed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bed6:	1ad3      	subs	r3, r2, r3
 800bed8:	2b02      	cmp	r3, #2
 800beda:	d901      	bls.n	800bee0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bedc:	2303      	movs	r3, #3
 800bede:	e23d      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bee0:	4b33      	ldr	r3, [pc, #204]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1f0      	bne.n	800bece <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f003 0308 	and.w	r3, r3, #8
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d036      	beq.n	800bf66 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	695b      	ldr	r3, [r3, #20]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d019      	beq.n	800bf34 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bf00:	4b2b      	ldr	r3, [pc, #172]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bf02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf04:	4a2a      	ldr	r2, [pc, #168]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bf06:	f043 0301 	orr.w	r3, r3, #1
 800bf0a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf0c:	f7fa fe6a 	bl	8006be4 <HAL_GetTick>
 800bf10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bf12:	e008      	b.n	800bf26 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bf14:	f7fa fe66 	bl	8006be4 <HAL_GetTick>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf1c:	1ad3      	subs	r3, r2, r3
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	d901      	bls.n	800bf26 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800bf22:	2303      	movs	r3, #3
 800bf24:	e21a      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bf26:	4b22      	ldr	r3, [pc, #136]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bf28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf2a:	f003 0302 	and.w	r3, r3, #2
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d0f0      	beq.n	800bf14 <HAL_RCC_OscConfig+0x45c>
 800bf32:	e018      	b.n	800bf66 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bf34:	4b1e      	ldr	r3, [pc, #120]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bf36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf38:	4a1d      	ldr	r2, [pc, #116]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bf3a:	f023 0301 	bic.w	r3, r3, #1
 800bf3e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf40:	f7fa fe50 	bl	8006be4 <HAL_GetTick>
 800bf44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bf46:	e008      	b.n	800bf5a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bf48:	f7fa fe4c 	bl	8006be4 <HAL_GetTick>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	2b02      	cmp	r3, #2
 800bf54:	d901      	bls.n	800bf5a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800bf56:	2303      	movs	r3, #3
 800bf58:	e200      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bf5a:	4b15      	ldr	r3, [pc, #84]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bf5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf5e:	f003 0302 	and.w	r3, r3, #2
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d1f0      	bne.n	800bf48 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 0320 	and.w	r3, r3, #32
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d039      	beq.n	800bfe6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	699b      	ldr	r3, [r3, #24]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d01c      	beq.n	800bfb4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bf7a:	4b0d      	ldr	r3, [pc, #52]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4a0c      	ldr	r2, [pc, #48]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bf80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800bf84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bf86:	f7fa fe2d 	bl	8006be4 <HAL_GetTick>
 800bf8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bf8c:	e008      	b.n	800bfa0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bf8e:	f7fa fe29 	bl	8006be4 <HAL_GetTick>
 800bf92:	4602      	mov	r2, r0
 800bf94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf96:	1ad3      	subs	r3, r2, r3
 800bf98:	2b02      	cmp	r3, #2
 800bf9a:	d901      	bls.n	800bfa0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	e1dd      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bfa0:	4b03      	ldr	r3, [pc, #12]	@ (800bfb0 <HAL_RCC_OscConfig+0x4f8>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d0f0      	beq.n	800bf8e <HAL_RCC_OscConfig+0x4d6>
 800bfac:	e01b      	b.n	800bfe6 <HAL_RCC_OscConfig+0x52e>
 800bfae:	bf00      	nop
 800bfb0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bfb4:	4b9b      	ldr	r3, [pc, #620]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a9a      	ldr	r2, [pc, #616]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800bfba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bfbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bfc0:	f7fa fe10 	bl	8006be4 <HAL_GetTick>
 800bfc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bfc6:	e008      	b.n	800bfda <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bfc8:	f7fa fe0c 	bl	8006be4 <HAL_GetTick>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd0:	1ad3      	subs	r3, r2, r3
 800bfd2:	2b02      	cmp	r3, #2
 800bfd4:	d901      	bls.n	800bfda <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800bfd6:	2303      	movs	r3, #3
 800bfd8:	e1c0      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bfda:	4b92      	ldr	r3, [pc, #584]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d1f0      	bne.n	800bfc8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f003 0304 	and.w	r3, r3, #4
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	f000 8081 	beq.w	800c0f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bff4:	4b8c      	ldr	r3, [pc, #560]	@ (800c228 <HAL_RCC_OscConfig+0x770>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4a8b      	ldr	r2, [pc, #556]	@ (800c228 <HAL_RCC_OscConfig+0x770>)
 800bffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bffe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c000:	f7fa fdf0 	bl	8006be4 <HAL_GetTick>
 800c004:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c006:	e008      	b.n	800c01a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c008:	f7fa fdec 	bl	8006be4 <HAL_GetTick>
 800c00c:	4602      	mov	r2, r0
 800c00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c010:	1ad3      	subs	r3, r2, r3
 800c012:	2b64      	cmp	r3, #100	@ 0x64
 800c014:	d901      	bls.n	800c01a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800c016:	2303      	movs	r3, #3
 800c018:	e1a0      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c01a:	4b83      	ldr	r3, [pc, #524]	@ (800c228 <HAL_RCC_OscConfig+0x770>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c022:	2b00      	cmp	r3, #0
 800c024:	d0f0      	beq.n	800c008 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d106      	bne.n	800c03c <HAL_RCC_OscConfig+0x584>
 800c02e:	4b7d      	ldr	r3, [pc, #500]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c032:	4a7c      	ldr	r2, [pc, #496]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c034:	f043 0301 	orr.w	r3, r3, #1
 800c038:	6713      	str	r3, [r2, #112]	@ 0x70
 800c03a:	e02d      	b.n	800c098 <HAL_RCC_OscConfig+0x5e0>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d10c      	bne.n	800c05e <HAL_RCC_OscConfig+0x5a6>
 800c044:	4b77      	ldr	r3, [pc, #476]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c048:	4a76      	ldr	r2, [pc, #472]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c04a:	f023 0301 	bic.w	r3, r3, #1
 800c04e:	6713      	str	r3, [r2, #112]	@ 0x70
 800c050:	4b74      	ldr	r3, [pc, #464]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c054:	4a73      	ldr	r2, [pc, #460]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c056:	f023 0304 	bic.w	r3, r3, #4
 800c05a:	6713      	str	r3, [r2, #112]	@ 0x70
 800c05c:	e01c      	b.n	800c098 <HAL_RCC_OscConfig+0x5e0>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	2b05      	cmp	r3, #5
 800c064:	d10c      	bne.n	800c080 <HAL_RCC_OscConfig+0x5c8>
 800c066:	4b6f      	ldr	r3, [pc, #444]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c06a:	4a6e      	ldr	r2, [pc, #440]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c06c:	f043 0304 	orr.w	r3, r3, #4
 800c070:	6713      	str	r3, [r2, #112]	@ 0x70
 800c072:	4b6c      	ldr	r3, [pc, #432]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c076:	4a6b      	ldr	r2, [pc, #428]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c078:	f043 0301 	orr.w	r3, r3, #1
 800c07c:	6713      	str	r3, [r2, #112]	@ 0x70
 800c07e:	e00b      	b.n	800c098 <HAL_RCC_OscConfig+0x5e0>
 800c080:	4b68      	ldr	r3, [pc, #416]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c084:	4a67      	ldr	r2, [pc, #412]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c086:	f023 0301 	bic.w	r3, r3, #1
 800c08a:	6713      	str	r3, [r2, #112]	@ 0x70
 800c08c:	4b65      	ldr	r3, [pc, #404]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c08e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c090:	4a64      	ldr	r2, [pc, #400]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c092:	f023 0304 	bic.w	r3, r3, #4
 800c096:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d015      	beq.n	800c0cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0a0:	f7fa fda0 	bl	8006be4 <HAL_GetTick>
 800c0a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c0a6:	e00a      	b.n	800c0be <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0a8:	f7fa fd9c 	bl	8006be4 <HAL_GetTick>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b0:	1ad3      	subs	r3, r2, r3
 800c0b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d901      	bls.n	800c0be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800c0ba:	2303      	movs	r3, #3
 800c0bc:	e14e      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c0be:	4b59      	ldr	r3, [pc, #356]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c0c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0c2:	f003 0302 	and.w	r3, r3, #2
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d0ee      	beq.n	800c0a8 <HAL_RCC_OscConfig+0x5f0>
 800c0ca:	e014      	b.n	800c0f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0cc:	f7fa fd8a 	bl	8006be4 <HAL_GetTick>
 800c0d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c0d2:	e00a      	b.n	800c0ea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0d4:	f7fa fd86 	bl	8006be4 <HAL_GetTick>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0dc:	1ad3      	subs	r3, r2, r3
 800c0de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d901      	bls.n	800c0ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800c0e6:	2303      	movs	r3, #3
 800c0e8:	e138      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c0ea:	4b4e      	ldr	r3, [pc, #312]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c0ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0ee:	f003 0302 	and.w	r3, r3, #2
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d1ee      	bne.n	800c0d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f000 812d 	beq.w	800c35a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c100:	4b48      	ldr	r3, [pc, #288]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c108:	2b18      	cmp	r3, #24
 800c10a:	f000 80bd 	beq.w	800c288 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c112:	2b02      	cmp	r3, #2
 800c114:	f040 809e 	bne.w	800c254 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c118:	4b42      	ldr	r3, [pc, #264]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a41      	ldr	r2, [pc, #260]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c11e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c124:	f7fa fd5e 	bl	8006be4 <HAL_GetTick>
 800c128:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c12a:	e008      	b.n	800c13e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c12c:	f7fa fd5a 	bl	8006be4 <HAL_GetTick>
 800c130:	4602      	mov	r2, r0
 800c132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c134:	1ad3      	subs	r3, r2, r3
 800c136:	2b02      	cmp	r3, #2
 800c138:	d901      	bls.n	800c13e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800c13a:	2303      	movs	r3, #3
 800c13c:	e10e      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c13e:	4b39      	ldr	r3, [pc, #228]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1f0      	bne.n	800c12c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c14a:	4b36      	ldr	r3, [pc, #216]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c14c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c14e:	4b37      	ldr	r3, [pc, #220]	@ (800c22c <HAL_RCC_OscConfig+0x774>)
 800c150:	4013      	ands	r3, r2
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c15a:	0112      	lsls	r2, r2, #4
 800c15c:	430a      	orrs	r2, r1
 800c15e:	4931      	ldr	r1, [pc, #196]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c160:	4313      	orrs	r3, r2
 800c162:	628b      	str	r3, [r1, #40]	@ 0x28
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c168:	3b01      	subs	r3, #1
 800c16a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c172:	3b01      	subs	r3, #1
 800c174:	025b      	lsls	r3, r3, #9
 800c176:	b29b      	uxth	r3, r3
 800c178:	431a      	orrs	r2, r3
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c17e:	3b01      	subs	r3, #1
 800c180:	041b      	lsls	r3, r3, #16
 800c182:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c186:	431a      	orrs	r2, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c18c:	3b01      	subs	r3, #1
 800c18e:	061b      	lsls	r3, r3, #24
 800c190:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c194:	4923      	ldr	r1, [pc, #140]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c196:	4313      	orrs	r3, r2
 800c198:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c19a:	4b22      	ldr	r3, [pc, #136]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c19e:	4a21      	ldr	r2, [pc, #132]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c1a0:	f023 0301 	bic.w	r3, r3, #1
 800c1a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c1a6:	4b1f      	ldr	r3, [pc, #124]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c1a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1aa:	4b21      	ldr	r3, [pc, #132]	@ (800c230 <HAL_RCC_OscConfig+0x778>)
 800c1ac:	4013      	ands	r3, r2
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c1b2:	00d2      	lsls	r2, r2, #3
 800c1b4:	491b      	ldr	r1, [pc, #108]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c1ba:	4b1a      	ldr	r3, [pc, #104]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1be:	f023 020c 	bic.w	r2, r3, #12
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1c6:	4917      	ldr	r1, [pc, #92]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c1cc:	4b15      	ldr	r3, [pc, #84]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c1ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1d0:	f023 0202 	bic.w	r2, r3, #2
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1d8:	4912      	ldr	r1, [pc, #72]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c1de:	4b11      	ldr	r3, [pc, #68]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1e2:	4a10      	ldr	r2, [pc, #64]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c1e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c1e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1ea:	4b0e      	ldr	r3, [pc, #56]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c1ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ee:	4a0d      	ldr	r2, [pc, #52]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c1f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c1f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c1f6:	4b0b      	ldr	r3, [pc, #44]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c1f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1fa:	4a0a      	ldr	r2, [pc, #40]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c1fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c200:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c202:	4b08      	ldr	r3, [pc, #32]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c206:	4a07      	ldr	r2, [pc, #28]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c208:	f043 0301 	orr.w	r3, r3, #1
 800c20c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c20e:	4b05      	ldr	r3, [pc, #20]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a04      	ldr	r2, [pc, #16]	@ (800c224 <HAL_RCC_OscConfig+0x76c>)
 800c214:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c21a:	f7fa fce3 	bl	8006be4 <HAL_GetTick>
 800c21e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c220:	e011      	b.n	800c246 <HAL_RCC_OscConfig+0x78e>
 800c222:	bf00      	nop
 800c224:	58024400 	.word	0x58024400
 800c228:	58024800 	.word	0x58024800
 800c22c:	fffffc0c 	.word	0xfffffc0c
 800c230:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c234:	f7fa fcd6 	bl	8006be4 <HAL_GetTick>
 800c238:	4602      	mov	r2, r0
 800c23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23c:	1ad3      	subs	r3, r2, r3
 800c23e:	2b02      	cmp	r3, #2
 800c240:	d901      	bls.n	800c246 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c242:	2303      	movs	r3, #3
 800c244:	e08a      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c246:	4b47      	ldr	r3, [pc, #284]	@ (800c364 <HAL_RCC_OscConfig+0x8ac>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d0f0      	beq.n	800c234 <HAL_RCC_OscConfig+0x77c>
 800c252:	e082      	b.n	800c35a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c254:	4b43      	ldr	r3, [pc, #268]	@ (800c364 <HAL_RCC_OscConfig+0x8ac>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a42      	ldr	r2, [pc, #264]	@ (800c364 <HAL_RCC_OscConfig+0x8ac>)
 800c25a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c25e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c260:	f7fa fcc0 	bl	8006be4 <HAL_GetTick>
 800c264:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c266:	e008      	b.n	800c27a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c268:	f7fa fcbc 	bl	8006be4 <HAL_GetTick>
 800c26c:	4602      	mov	r2, r0
 800c26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c270:	1ad3      	subs	r3, r2, r3
 800c272:	2b02      	cmp	r3, #2
 800c274:	d901      	bls.n	800c27a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c276:	2303      	movs	r3, #3
 800c278:	e070      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c27a:	4b3a      	ldr	r3, [pc, #232]	@ (800c364 <HAL_RCC_OscConfig+0x8ac>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c282:	2b00      	cmp	r3, #0
 800c284:	d1f0      	bne.n	800c268 <HAL_RCC_OscConfig+0x7b0>
 800c286:	e068      	b.n	800c35a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c288:	4b36      	ldr	r3, [pc, #216]	@ (800c364 <HAL_RCC_OscConfig+0x8ac>)
 800c28a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c28c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c28e:	4b35      	ldr	r3, [pc, #212]	@ (800c364 <HAL_RCC_OscConfig+0x8ac>)
 800c290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c292:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d031      	beq.n	800c300 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	f003 0203 	and.w	r2, r3, #3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d12a      	bne.n	800c300 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	091b      	lsrs	r3, r3, #4
 800c2ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d122      	bne.n	800c300 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d11a      	bne.n	800c300 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	0a5b      	lsrs	r3, r3, #9
 800c2ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d111      	bne.n	800c300 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	0c1b      	lsrs	r3, r3, #16
 800c2e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d108      	bne.n	800c300 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	0e1b      	lsrs	r3, r3, #24
 800c2f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d001      	beq.n	800c304 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c300:	2301      	movs	r3, #1
 800c302:	e02b      	b.n	800c35c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c304:	4b17      	ldr	r3, [pc, #92]	@ (800c364 <HAL_RCC_OscConfig+0x8ac>)
 800c306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c308:	08db      	lsrs	r3, r3, #3
 800c30a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c30e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c314:	693a      	ldr	r2, [r7, #16]
 800c316:	429a      	cmp	r2, r3
 800c318:	d01f      	beq.n	800c35a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c31a:	4b12      	ldr	r3, [pc, #72]	@ (800c364 <HAL_RCC_OscConfig+0x8ac>)
 800c31c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c31e:	4a11      	ldr	r2, [pc, #68]	@ (800c364 <HAL_RCC_OscConfig+0x8ac>)
 800c320:	f023 0301 	bic.w	r3, r3, #1
 800c324:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c326:	f7fa fc5d 	bl	8006be4 <HAL_GetTick>
 800c32a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c32c:	bf00      	nop
 800c32e:	f7fa fc59 	bl	8006be4 <HAL_GetTick>
 800c332:	4602      	mov	r2, r0
 800c334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c336:	4293      	cmp	r3, r2
 800c338:	d0f9      	beq.n	800c32e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c33a:	4b0a      	ldr	r3, [pc, #40]	@ (800c364 <HAL_RCC_OscConfig+0x8ac>)
 800c33c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c33e:	4b0a      	ldr	r3, [pc, #40]	@ (800c368 <HAL_RCC_OscConfig+0x8b0>)
 800c340:	4013      	ands	r3, r2
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c346:	00d2      	lsls	r2, r2, #3
 800c348:	4906      	ldr	r1, [pc, #24]	@ (800c364 <HAL_RCC_OscConfig+0x8ac>)
 800c34a:	4313      	orrs	r3, r2
 800c34c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c34e:	4b05      	ldr	r3, [pc, #20]	@ (800c364 <HAL_RCC_OscConfig+0x8ac>)
 800c350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c352:	4a04      	ldr	r2, [pc, #16]	@ (800c364 <HAL_RCC_OscConfig+0x8ac>)
 800c354:	f043 0301 	orr.w	r3, r3, #1
 800c358:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3730      	adds	r7, #48	@ 0x30
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	58024400 	.word	0x58024400
 800c368:	ffff0007 	.word	0xffff0007

0800c36c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b086      	sub	sp, #24
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d101      	bne.n	800c380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c37c:	2301      	movs	r3, #1
 800c37e:	e19c      	b.n	800c6ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c380:	4b8a      	ldr	r3, [pc, #552]	@ (800c5ac <HAL_RCC_ClockConfig+0x240>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f003 030f 	and.w	r3, r3, #15
 800c388:	683a      	ldr	r2, [r7, #0]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d910      	bls.n	800c3b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c38e:	4b87      	ldr	r3, [pc, #540]	@ (800c5ac <HAL_RCC_ClockConfig+0x240>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f023 020f 	bic.w	r2, r3, #15
 800c396:	4985      	ldr	r1, [pc, #532]	@ (800c5ac <HAL_RCC_ClockConfig+0x240>)
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	4313      	orrs	r3, r2
 800c39c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c39e:	4b83      	ldr	r3, [pc, #524]	@ (800c5ac <HAL_RCC_ClockConfig+0x240>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f003 030f 	and.w	r3, r3, #15
 800c3a6:	683a      	ldr	r2, [r7, #0]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d001      	beq.n	800c3b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	e184      	b.n	800c6ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f003 0304 	and.w	r3, r3, #4
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d010      	beq.n	800c3de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	691a      	ldr	r2, [r3, #16]
 800c3c0:	4b7b      	ldr	r3, [pc, #492]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c3c2:	699b      	ldr	r3, [r3, #24]
 800c3c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d908      	bls.n	800c3de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c3cc:	4b78      	ldr	r3, [pc, #480]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	691b      	ldr	r3, [r3, #16]
 800c3d8:	4975      	ldr	r1, [pc, #468]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 0308 	and.w	r3, r3, #8
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d010      	beq.n	800c40c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	695a      	ldr	r2, [r3, #20]
 800c3ee:	4b70      	ldr	r3, [pc, #448]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c3f0:	69db      	ldr	r3, [r3, #28]
 800c3f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d908      	bls.n	800c40c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c3fa:	4b6d      	ldr	r3, [pc, #436]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c3fc:	69db      	ldr	r3, [r3, #28]
 800c3fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	695b      	ldr	r3, [r3, #20]
 800c406:	496a      	ldr	r1, [pc, #424]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c408:	4313      	orrs	r3, r2
 800c40a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f003 0310 	and.w	r3, r3, #16
 800c414:	2b00      	cmp	r3, #0
 800c416:	d010      	beq.n	800c43a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	699a      	ldr	r2, [r3, #24]
 800c41c:	4b64      	ldr	r3, [pc, #400]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c41e:	69db      	ldr	r3, [r3, #28]
 800c420:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c424:	429a      	cmp	r2, r3
 800c426:	d908      	bls.n	800c43a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c428:	4b61      	ldr	r3, [pc, #388]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c42a:	69db      	ldr	r3, [r3, #28]
 800c42c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	699b      	ldr	r3, [r3, #24]
 800c434:	495e      	ldr	r1, [pc, #376]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c436:	4313      	orrs	r3, r2
 800c438:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f003 0320 	and.w	r3, r3, #32
 800c442:	2b00      	cmp	r3, #0
 800c444:	d010      	beq.n	800c468 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	69da      	ldr	r2, [r3, #28]
 800c44a:	4b59      	ldr	r3, [pc, #356]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c44c:	6a1b      	ldr	r3, [r3, #32]
 800c44e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c452:	429a      	cmp	r2, r3
 800c454:	d908      	bls.n	800c468 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c456:	4b56      	ldr	r3, [pc, #344]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c458:	6a1b      	ldr	r3, [r3, #32]
 800c45a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	69db      	ldr	r3, [r3, #28]
 800c462:	4953      	ldr	r1, [pc, #332]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c464:	4313      	orrs	r3, r2
 800c466:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f003 0302 	and.w	r3, r3, #2
 800c470:	2b00      	cmp	r3, #0
 800c472:	d010      	beq.n	800c496 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	68da      	ldr	r2, [r3, #12]
 800c478:	4b4d      	ldr	r3, [pc, #308]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c47a:	699b      	ldr	r3, [r3, #24]
 800c47c:	f003 030f 	and.w	r3, r3, #15
 800c480:	429a      	cmp	r2, r3
 800c482:	d908      	bls.n	800c496 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c484:	4b4a      	ldr	r3, [pc, #296]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c486:	699b      	ldr	r3, [r3, #24]
 800c488:	f023 020f 	bic.w	r2, r3, #15
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	4947      	ldr	r1, [pc, #284]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c492:	4313      	orrs	r3, r2
 800c494:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f003 0301 	and.w	r3, r3, #1
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d055      	beq.n	800c54e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c4a2:	4b43      	ldr	r3, [pc, #268]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c4a4:	699b      	ldr	r3, [r3, #24]
 800c4a6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	4940      	ldr	r1, [pc, #256]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	d107      	bne.n	800c4cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c4bc:	4b3c      	ldr	r3, [pc, #240]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d121      	bne.n	800c50c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	e0f6      	b.n	800c6ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	2b03      	cmp	r3, #3
 800c4d2:	d107      	bne.n	800c4e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c4d4:	4b36      	ldr	r3, [pc, #216]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d115      	bne.n	800c50c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	e0ea      	b.n	800c6ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d107      	bne.n	800c4fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c4ec:	4b30      	ldr	r3, [pc, #192]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d109      	bne.n	800c50c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	e0de      	b.n	800c6ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c4fc:	4b2c      	ldr	r3, [pc, #176]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 0304 	and.w	r3, r3, #4
 800c504:	2b00      	cmp	r3, #0
 800c506:	d101      	bne.n	800c50c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c508:	2301      	movs	r3, #1
 800c50a:	e0d6      	b.n	800c6ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c50c:	4b28      	ldr	r3, [pc, #160]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c50e:	691b      	ldr	r3, [r3, #16]
 800c510:	f023 0207 	bic.w	r2, r3, #7
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	4925      	ldr	r1, [pc, #148]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c51a:	4313      	orrs	r3, r2
 800c51c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c51e:	f7fa fb61 	bl	8006be4 <HAL_GetTick>
 800c522:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c524:	e00a      	b.n	800c53c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c526:	f7fa fb5d 	bl	8006be4 <HAL_GetTick>
 800c52a:	4602      	mov	r2, r0
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	1ad3      	subs	r3, r2, r3
 800c530:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c534:	4293      	cmp	r3, r2
 800c536:	d901      	bls.n	800c53c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c538:	2303      	movs	r3, #3
 800c53a:	e0be      	b.n	800c6ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c53c:	4b1c      	ldr	r3, [pc, #112]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c53e:	691b      	ldr	r3, [r3, #16]
 800c540:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	00db      	lsls	r3, r3, #3
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d1eb      	bne.n	800c526 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f003 0302 	and.w	r3, r3, #2
 800c556:	2b00      	cmp	r3, #0
 800c558:	d010      	beq.n	800c57c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	68da      	ldr	r2, [r3, #12]
 800c55e:	4b14      	ldr	r3, [pc, #80]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c560:	699b      	ldr	r3, [r3, #24]
 800c562:	f003 030f 	and.w	r3, r3, #15
 800c566:	429a      	cmp	r2, r3
 800c568:	d208      	bcs.n	800c57c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c56a:	4b11      	ldr	r3, [pc, #68]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c56c:	699b      	ldr	r3, [r3, #24]
 800c56e:	f023 020f 	bic.w	r2, r3, #15
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	490e      	ldr	r1, [pc, #56]	@ (800c5b0 <HAL_RCC_ClockConfig+0x244>)
 800c578:	4313      	orrs	r3, r2
 800c57a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c57c:	4b0b      	ldr	r3, [pc, #44]	@ (800c5ac <HAL_RCC_ClockConfig+0x240>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f003 030f 	and.w	r3, r3, #15
 800c584:	683a      	ldr	r2, [r7, #0]
 800c586:	429a      	cmp	r2, r3
 800c588:	d214      	bcs.n	800c5b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c58a:	4b08      	ldr	r3, [pc, #32]	@ (800c5ac <HAL_RCC_ClockConfig+0x240>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f023 020f 	bic.w	r2, r3, #15
 800c592:	4906      	ldr	r1, [pc, #24]	@ (800c5ac <HAL_RCC_ClockConfig+0x240>)
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	4313      	orrs	r3, r2
 800c598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c59a:	4b04      	ldr	r3, [pc, #16]	@ (800c5ac <HAL_RCC_ClockConfig+0x240>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f003 030f 	and.w	r3, r3, #15
 800c5a2:	683a      	ldr	r2, [r7, #0]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d005      	beq.n	800c5b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	e086      	b.n	800c6ba <HAL_RCC_ClockConfig+0x34e>
 800c5ac:	52002000 	.word	0x52002000
 800c5b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f003 0304 	and.w	r3, r3, #4
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d010      	beq.n	800c5e2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	691a      	ldr	r2, [r3, #16]
 800c5c4:	4b3f      	ldr	r3, [pc, #252]	@ (800c6c4 <HAL_RCC_ClockConfig+0x358>)
 800c5c6:	699b      	ldr	r3, [r3, #24]
 800c5c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d208      	bcs.n	800c5e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c5d0:	4b3c      	ldr	r3, [pc, #240]	@ (800c6c4 <HAL_RCC_ClockConfig+0x358>)
 800c5d2:	699b      	ldr	r3, [r3, #24]
 800c5d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	691b      	ldr	r3, [r3, #16]
 800c5dc:	4939      	ldr	r1, [pc, #228]	@ (800c6c4 <HAL_RCC_ClockConfig+0x358>)
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f003 0308 	and.w	r3, r3, #8
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d010      	beq.n	800c610 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	695a      	ldr	r2, [r3, #20]
 800c5f2:	4b34      	ldr	r3, [pc, #208]	@ (800c6c4 <HAL_RCC_ClockConfig+0x358>)
 800c5f4:	69db      	ldr	r3, [r3, #28]
 800c5f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d208      	bcs.n	800c610 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c5fe:	4b31      	ldr	r3, [pc, #196]	@ (800c6c4 <HAL_RCC_ClockConfig+0x358>)
 800c600:	69db      	ldr	r3, [r3, #28]
 800c602:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	695b      	ldr	r3, [r3, #20]
 800c60a:	492e      	ldr	r1, [pc, #184]	@ (800c6c4 <HAL_RCC_ClockConfig+0x358>)
 800c60c:	4313      	orrs	r3, r2
 800c60e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f003 0310 	and.w	r3, r3, #16
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d010      	beq.n	800c63e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	699a      	ldr	r2, [r3, #24]
 800c620:	4b28      	ldr	r3, [pc, #160]	@ (800c6c4 <HAL_RCC_ClockConfig+0x358>)
 800c622:	69db      	ldr	r3, [r3, #28]
 800c624:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c628:	429a      	cmp	r2, r3
 800c62a:	d208      	bcs.n	800c63e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c62c:	4b25      	ldr	r3, [pc, #148]	@ (800c6c4 <HAL_RCC_ClockConfig+0x358>)
 800c62e:	69db      	ldr	r3, [r3, #28]
 800c630:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	699b      	ldr	r3, [r3, #24]
 800c638:	4922      	ldr	r1, [pc, #136]	@ (800c6c4 <HAL_RCC_ClockConfig+0x358>)
 800c63a:	4313      	orrs	r3, r2
 800c63c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f003 0320 	and.w	r3, r3, #32
 800c646:	2b00      	cmp	r3, #0
 800c648:	d010      	beq.n	800c66c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	69da      	ldr	r2, [r3, #28]
 800c64e:	4b1d      	ldr	r3, [pc, #116]	@ (800c6c4 <HAL_RCC_ClockConfig+0x358>)
 800c650:	6a1b      	ldr	r3, [r3, #32]
 800c652:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c656:	429a      	cmp	r2, r3
 800c658:	d208      	bcs.n	800c66c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c65a:	4b1a      	ldr	r3, [pc, #104]	@ (800c6c4 <HAL_RCC_ClockConfig+0x358>)
 800c65c:	6a1b      	ldr	r3, [r3, #32]
 800c65e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	69db      	ldr	r3, [r3, #28]
 800c666:	4917      	ldr	r1, [pc, #92]	@ (800c6c4 <HAL_RCC_ClockConfig+0x358>)
 800c668:	4313      	orrs	r3, r2
 800c66a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c66c:	f000 f834 	bl	800c6d8 <HAL_RCC_GetSysClockFreq>
 800c670:	4602      	mov	r2, r0
 800c672:	4b14      	ldr	r3, [pc, #80]	@ (800c6c4 <HAL_RCC_ClockConfig+0x358>)
 800c674:	699b      	ldr	r3, [r3, #24]
 800c676:	0a1b      	lsrs	r3, r3, #8
 800c678:	f003 030f 	and.w	r3, r3, #15
 800c67c:	4912      	ldr	r1, [pc, #72]	@ (800c6c8 <HAL_RCC_ClockConfig+0x35c>)
 800c67e:	5ccb      	ldrb	r3, [r1, r3]
 800c680:	f003 031f 	and.w	r3, r3, #31
 800c684:	fa22 f303 	lsr.w	r3, r2, r3
 800c688:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c68a:	4b0e      	ldr	r3, [pc, #56]	@ (800c6c4 <HAL_RCC_ClockConfig+0x358>)
 800c68c:	699b      	ldr	r3, [r3, #24]
 800c68e:	f003 030f 	and.w	r3, r3, #15
 800c692:	4a0d      	ldr	r2, [pc, #52]	@ (800c6c8 <HAL_RCC_ClockConfig+0x35c>)
 800c694:	5cd3      	ldrb	r3, [r2, r3]
 800c696:	f003 031f 	and.w	r3, r3, #31
 800c69a:	693a      	ldr	r2, [r7, #16]
 800c69c:	fa22 f303 	lsr.w	r3, r2, r3
 800c6a0:	4a0a      	ldr	r2, [pc, #40]	@ (800c6cc <HAL_RCC_ClockConfig+0x360>)
 800c6a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c6a4:	4a0a      	ldr	r2, [pc, #40]	@ (800c6d0 <HAL_RCC_ClockConfig+0x364>)
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c6aa:	4b0a      	ldr	r3, [pc, #40]	@ (800c6d4 <HAL_RCC_ClockConfig+0x368>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7f8 fe4c 	bl	800534c <HAL_InitTick>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3718      	adds	r7, #24
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	58024400 	.word	0x58024400
 800c6c8:	0802cfb0 	.word	0x0802cfb0
 800c6cc:	240001e8 	.word	0x240001e8
 800c6d0:	240001e4 	.word	0x240001e4
 800c6d4:	240001ec 	.word	0x240001ec

0800c6d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b089      	sub	sp, #36	@ 0x24
 800c6dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c6de:	4bb3      	ldr	r3, [pc, #716]	@ (800c9ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c6e6:	2b18      	cmp	r3, #24
 800c6e8:	f200 8155 	bhi.w	800c996 <HAL_RCC_GetSysClockFreq+0x2be>
 800c6ec:	a201      	add	r2, pc, #4	@ (adr r2, 800c6f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c6ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6f2:	bf00      	nop
 800c6f4:	0800c759 	.word	0x0800c759
 800c6f8:	0800c997 	.word	0x0800c997
 800c6fc:	0800c997 	.word	0x0800c997
 800c700:	0800c997 	.word	0x0800c997
 800c704:	0800c997 	.word	0x0800c997
 800c708:	0800c997 	.word	0x0800c997
 800c70c:	0800c997 	.word	0x0800c997
 800c710:	0800c997 	.word	0x0800c997
 800c714:	0800c77f 	.word	0x0800c77f
 800c718:	0800c997 	.word	0x0800c997
 800c71c:	0800c997 	.word	0x0800c997
 800c720:	0800c997 	.word	0x0800c997
 800c724:	0800c997 	.word	0x0800c997
 800c728:	0800c997 	.word	0x0800c997
 800c72c:	0800c997 	.word	0x0800c997
 800c730:	0800c997 	.word	0x0800c997
 800c734:	0800c785 	.word	0x0800c785
 800c738:	0800c997 	.word	0x0800c997
 800c73c:	0800c997 	.word	0x0800c997
 800c740:	0800c997 	.word	0x0800c997
 800c744:	0800c997 	.word	0x0800c997
 800c748:	0800c997 	.word	0x0800c997
 800c74c:	0800c997 	.word	0x0800c997
 800c750:	0800c997 	.word	0x0800c997
 800c754:	0800c78b 	.word	0x0800c78b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c758:	4b94      	ldr	r3, [pc, #592]	@ (800c9ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f003 0320 	and.w	r3, r3, #32
 800c760:	2b00      	cmp	r3, #0
 800c762:	d009      	beq.n	800c778 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c764:	4b91      	ldr	r3, [pc, #580]	@ (800c9ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	08db      	lsrs	r3, r3, #3
 800c76a:	f003 0303 	and.w	r3, r3, #3
 800c76e:	4a90      	ldr	r2, [pc, #576]	@ (800c9b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c770:	fa22 f303 	lsr.w	r3, r2, r3
 800c774:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c776:	e111      	b.n	800c99c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c778:	4b8d      	ldr	r3, [pc, #564]	@ (800c9b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c77a:	61bb      	str	r3, [r7, #24]
      break;
 800c77c:	e10e      	b.n	800c99c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c77e:	4b8d      	ldr	r3, [pc, #564]	@ (800c9b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c780:	61bb      	str	r3, [r7, #24]
      break;
 800c782:	e10b      	b.n	800c99c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c784:	4b8c      	ldr	r3, [pc, #560]	@ (800c9b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c786:	61bb      	str	r3, [r7, #24]
      break;
 800c788:	e108      	b.n	800c99c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c78a:	4b88      	ldr	r3, [pc, #544]	@ (800c9ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c78c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c78e:	f003 0303 	and.w	r3, r3, #3
 800c792:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c794:	4b85      	ldr	r3, [pc, #532]	@ (800c9ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c798:	091b      	lsrs	r3, r3, #4
 800c79a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c79e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c7a0:	4b82      	ldr	r3, [pc, #520]	@ (800c9ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c7a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7a4:	f003 0301 	and.w	r3, r3, #1
 800c7a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c7aa:	4b80      	ldr	r3, [pc, #512]	@ (800c9ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c7ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7ae:	08db      	lsrs	r3, r3, #3
 800c7b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c7b4:	68fa      	ldr	r2, [r7, #12]
 800c7b6:	fb02 f303 	mul.w	r3, r2, r3
 800c7ba:	ee07 3a90 	vmov	s15, r3
 800c7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f000 80e1 	beq.w	800c990 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	f000 8083 	beq.w	800c8dc <HAL_RCC_GetSysClockFreq+0x204>
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	2b02      	cmp	r3, #2
 800c7da:	f200 80a1 	bhi.w	800c920 <HAL_RCC_GetSysClockFreq+0x248>
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d003      	beq.n	800c7ec <HAL_RCC_GetSysClockFreq+0x114>
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d056      	beq.n	800c898 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c7ea:	e099      	b.n	800c920 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7ec:	4b6f      	ldr	r3, [pc, #444]	@ (800c9ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f003 0320 	and.w	r3, r3, #32
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d02d      	beq.n	800c854 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7f8:	4b6c      	ldr	r3, [pc, #432]	@ (800c9ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	08db      	lsrs	r3, r3, #3
 800c7fe:	f003 0303 	and.w	r3, r3, #3
 800c802:	4a6b      	ldr	r2, [pc, #428]	@ (800c9b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c804:	fa22 f303 	lsr.w	r3, r2, r3
 800c808:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	ee07 3a90 	vmov	s15, r3
 800c810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	ee07 3a90 	vmov	s15, r3
 800c81a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c81e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c822:	4b62      	ldr	r3, [pc, #392]	@ (800c9ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c82a:	ee07 3a90 	vmov	s15, r3
 800c82e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c832:	ed97 6a02 	vldr	s12, [r7, #8]
 800c836:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800c9bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800c83a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c83e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c84a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c84e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c852:	e087      	b.n	800c964 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	ee07 3a90 	vmov	s15, r3
 800c85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c85e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800c9c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c866:	4b51      	ldr	r3, [pc, #324]	@ (800c9ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c86a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c86e:	ee07 3a90 	vmov	s15, r3
 800c872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c876:	ed97 6a02 	vldr	s12, [r7, #8]
 800c87a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800c9bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800c87e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c88a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c88e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c892:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c896:	e065      	b.n	800c964 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	ee07 3a90 	vmov	s15, r3
 800c89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8a2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800c9c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c8a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8aa:	4b40      	ldr	r3, [pc, #256]	@ (800c9ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8b2:	ee07 3a90 	vmov	s15, r3
 800c8b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800c8be:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c9bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800c8c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c8ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c8da:	e043      	b.n	800c964 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	ee07 3a90 	vmov	s15, r3
 800c8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800c9c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8ee:	4b2f      	ldr	r3, [pc, #188]	@ (800c9ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8f6:	ee07 3a90 	vmov	s15, r3
 800c8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800c902:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800c9bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800c906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c90e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c91a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c91e:	e021      	b.n	800c964 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	ee07 3a90 	vmov	s15, r3
 800c926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c92a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c9c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c92e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c932:	4b1e      	ldr	r3, [pc, #120]	@ (800c9ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c93a:	ee07 3a90 	vmov	s15, r3
 800c93e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c942:	ed97 6a02 	vldr	s12, [r7, #8]
 800c946:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800c9bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800c94a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c94e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c95e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c962:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c964:	4b11      	ldr	r3, [pc, #68]	@ (800c9ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c968:	0a5b      	lsrs	r3, r3, #9
 800c96a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c96e:	3301      	adds	r3, #1
 800c970:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	ee07 3a90 	vmov	s15, r3
 800c978:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c97c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c988:	ee17 3a90 	vmov	r3, s15
 800c98c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c98e:	e005      	b.n	800c99c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c990:	2300      	movs	r3, #0
 800c992:	61bb      	str	r3, [r7, #24]
      break;
 800c994:	e002      	b.n	800c99c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c996:	4b07      	ldr	r3, [pc, #28]	@ (800c9b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c998:	61bb      	str	r3, [r7, #24]
      break;
 800c99a:	bf00      	nop
  }

  return sysclockfreq;
 800c99c:	69bb      	ldr	r3, [r7, #24]
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3724      	adds	r7, #36	@ 0x24
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	58024400 	.word	0x58024400
 800c9b0:	03d09000 	.word	0x03d09000
 800c9b4:	003d0900 	.word	0x003d0900
 800c9b8:	017d7840 	.word	0x017d7840
 800c9bc:	46000000 	.word	0x46000000
 800c9c0:	4c742400 	.word	0x4c742400
 800c9c4:	4a742400 	.word	0x4a742400
 800c9c8:	4bbebc20 	.word	0x4bbebc20

0800c9cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c9d2:	f7ff fe81 	bl	800c6d8 <HAL_RCC_GetSysClockFreq>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	4b10      	ldr	r3, [pc, #64]	@ (800ca1c <HAL_RCC_GetHCLKFreq+0x50>)
 800c9da:	699b      	ldr	r3, [r3, #24]
 800c9dc:	0a1b      	lsrs	r3, r3, #8
 800c9de:	f003 030f 	and.w	r3, r3, #15
 800c9e2:	490f      	ldr	r1, [pc, #60]	@ (800ca20 <HAL_RCC_GetHCLKFreq+0x54>)
 800c9e4:	5ccb      	ldrb	r3, [r1, r3]
 800c9e6:	f003 031f 	and.w	r3, r3, #31
 800c9ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c9ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c9f0:	4b0a      	ldr	r3, [pc, #40]	@ (800ca1c <HAL_RCC_GetHCLKFreq+0x50>)
 800c9f2:	699b      	ldr	r3, [r3, #24]
 800c9f4:	f003 030f 	and.w	r3, r3, #15
 800c9f8:	4a09      	ldr	r2, [pc, #36]	@ (800ca20 <HAL_RCC_GetHCLKFreq+0x54>)
 800c9fa:	5cd3      	ldrb	r3, [r2, r3]
 800c9fc:	f003 031f 	and.w	r3, r3, #31
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	fa22 f303 	lsr.w	r3, r2, r3
 800ca06:	4a07      	ldr	r2, [pc, #28]	@ (800ca24 <HAL_RCC_GetHCLKFreq+0x58>)
 800ca08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ca0a:	4a07      	ldr	r2, [pc, #28]	@ (800ca28 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ca10:	4b04      	ldr	r3, [pc, #16]	@ (800ca24 <HAL_RCC_GetHCLKFreq+0x58>)
 800ca12:	681b      	ldr	r3, [r3, #0]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3708      	adds	r7, #8
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	58024400 	.word	0x58024400
 800ca20:	0802cfb0 	.word	0x0802cfb0
 800ca24:	240001e8 	.word	0x240001e8
 800ca28:	240001e4 	.word	0x240001e4

0800ca2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ca30:	f7ff ffcc 	bl	800c9cc <HAL_RCC_GetHCLKFreq>
 800ca34:	4602      	mov	r2, r0
 800ca36:	4b06      	ldr	r3, [pc, #24]	@ (800ca50 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ca38:	69db      	ldr	r3, [r3, #28]
 800ca3a:	091b      	lsrs	r3, r3, #4
 800ca3c:	f003 0307 	and.w	r3, r3, #7
 800ca40:	4904      	ldr	r1, [pc, #16]	@ (800ca54 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ca42:	5ccb      	ldrb	r3, [r1, r3]
 800ca44:	f003 031f 	and.w	r3, r3, #31
 800ca48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	58024400 	.word	0x58024400
 800ca54:	0802cfb0 	.word	0x0802cfb0

0800ca58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ca5c:	f7ff ffb6 	bl	800c9cc <HAL_RCC_GetHCLKFreq>
 800ca60:	4602      	mov	r2, r0
 800ca62:	4b06      	ldr	r3, [pc, #24]	@ (800ca7c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ca64:	69db      	ldr	r3, [r3, #28]
 800ca66:	0a1b      	lsrs	r3, r3, #8
 800ca68:	f003 0307 	and.w	r3, r3, #7
 800ca6c:	4904      	ldr	r1, [pc, #16]	@ (800ca80 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ca6e:	5ccb      	ldrb	r3, [r1, r3]
 800ca70:	f003 031f 	and.w	r3, r3, #31
 800ca74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	58024400 	.word	0x58024400
 800ca80:	0802cfb0 	.word	0x0802cfb0

0800ca84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b083      	sub	sp, #12
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	223f      	movs	r2, #63	@ 0x3f
 800ca92:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ca94:	4b1a      	ldr	r3, [pc, #104]	@ (800cb00 <HAL_RCC_GetClockConfig+0x7c>)
 800ca96:	691b      	ldr	r3, [r3, #16]
 800ca98:	f003 0207 	and.w	r2, r3, #7
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800caa0:	4b17      	ldr	r3, [pc, #92]	@ (800cb00 <HAL_RCC_GetClockConfig+0x7c>)
 800caa2:	699b      	ldr	r3, [r3, #24]
 800caa4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800caac:	4b14      	ldr	r3, [pc, #80]	@ (800cb00 <HAL_RCC_GetClockConfig+0x7c>)
 800caae:	699b      	ldr	r3, [r3, #24]
 800cab0:	f003 020f 	and.w	r2, r3, #15
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800cab8:	4b11      	ldr	r3, [pc, #68]	@ (800cb00 <HAL_RCC_GetClockConfig+0x7c>)
 800caba:	699b      	ldr	r3, [r3, #24]
 800cabc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800cac4:	4b0e      	ldr	r3, [pc, #56]	@ (800cb00 <HAL_RCC_GetClockConfig+0x7c>)
 800cac6:	69db      	ldr	r3, [r3, #28]
 800cac8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800cad0:	4b0b      	ldr	r3, [pc, #44]	@ (800cb00 <HAL_RCC_GetClockConfig+0x7c>)
 800cad2:	69db      	ldr	r3, [r3, #28]
 800cad4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800cadc:	4b08      	ldr	r3, [pc, #32]	@ (800cb00 <HAL_RCC_GetClockConfig+0x7c>)
 800cade:	6a1b      	ldr	r3, [r3, #32]
 800cae0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cae8:	4b06      	ldr	r3, [pc, #24]	@ (800cb04 <HAL_RCC_GetClockConfig+0x80>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f003 020f 	and.w	r2, r3, #15
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	601a      	str	r2, [r3, #0]
}
 800caf4:	bf00      	nop
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr
 800cb00:	58024400 	.word	0x58024400
 800cb04:	52002000 	.word	0x52002000

0800cb08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cb08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb0c:	b0ca      	sub	sp, #296	@ 0x128
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cb14:	2300      	movs	r3, #0
 800cb16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cb20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb28:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800cb2c:	2500      	movs	r5, #0
 800cb2e:	ea54 0305 	orrs.w	r3, r4, r5
 800cb32:	d049      	beq.n	800cbc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800cb34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cb3e:	d02f      	beq.n	800cba0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800cb40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cb44:	d828      	bhi.n	800cb98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cb46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cb4a:	d01a      	beq.n	800cb82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800cb4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cb50:	d822      	bhi.n	800cb98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d003      	beq.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800cb56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb5a:	d007      	beq.n	800cb6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cb5c:	e01c      	b.n	800cb98 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb5e:	4bb8      	ldr	r3, [pc, #736]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb62:	4ab7      	ldr	r2, [pc, #732]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cb6a:	e01a      	b.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cb6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb70:	3308      	adds	r3, #8
 800cb72:	2102      	movs	r1, #2
 800cb74:	4618      	mov	r0, r3
 800cb76:	f001 fc8f 	bl	800e498 <RCCEx_PLL2_Config>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cb80:	e00f      	b.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cb82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb86:	3328      	adds	r3, #40	@ 0x28
 800cb88:	2102      	movs	r1, #2
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f001 fd36 	bl	800e5fc <RCCEx_PLL3_Config>
 800cb90:	4603      	mov	r3, r0
 800cb92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cb96:	e004      	b.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb98:	2301      	movs	r3, #1
 800cb9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cb9e:	e000      	b.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800cba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d10a      	bne.n	800cbc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800cbaa:	4ba5      	ldr	r3, [pc, #660]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cbac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800cbb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cbb8:	4aa1      	ldr	r2, [pc, #644]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cbba:	430b      	orrs	r3, r1
 800cbbc:	6513      	str	r3, [r2, #80]	@ 0x50
 800cbbe:	e003      	b.n	800cbc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cbc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cbc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800cbd4:	f04f 0900 	mov.w	r9, #0
 800cbd8:	ea58 0309 	orrs.w	r3, r8, r9
 800cbdc:	d047      	beq.n	800cc6e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800cbde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbe4:	2b04      	cmp	r3, #4
 800cbe6:	d82a      	bhi.n	800cc3e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800cbe8:	a201      	add	r2, pc, #4	@ (adr r2, 800cbf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800cbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbee:	bf00      	nop
 800cbf0:	0800cc05 	.word	0x0800cc05
 800cbf4:	0800cc13 	.word	0x0800cc13
 800cbf8:	0800cc29 	.word	0x0800cc29
 800cbfc:	0800cc47 	.word	0x0800cc47
 800cc00:	0800cc47 	.word	0x0800cc47
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc04:	4b8e      	ldr	r3, [pc, #568]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc08:	4a8d      	ldr	r2, [pc, #564]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cc10:	e01a      	b.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cc12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc16:	3308      	adds	r3, #8
 800cc18:	2100      	movs	r1, #0
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f001 fc3c 	bl	800e498 <RCCEx_PLL2_Config>
 800cc20:	4603      	mov	r3, r0
 800cc22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cc26:	e00f      	b.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cc28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc2c:	3328      	adds	r3, #40	@ 0x28
 800cc2e:	2100      	movs	r1, #0
 800cc30:	4618      	mov	r0, r3
 800cc32:	f001 fce3 	bl	800e5fc <RCCEx_PLL3_Config>
 800cc36:	4603      	mov	r3, r0
 800cc38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cc3c:	e004      	b.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cc44:	e000      	b.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800cc46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d10a      	bne.n	800cc66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cc50:	4b7b      	ldr	r3, [pc, #492]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc54:	f023 0107 	bic.w	r1, r3, #7
 800cc58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc5e:	4a78      	ldr	r2, [pc, #480]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc60:	430b      	orrs	r3, r1
 800cc62:	6513      	str	r3, [r2, #80]	@ 0x50
 800cc64:	e003      	b.n	800cc6e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800cc6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc76:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800cc7a:	f04f 0b00 	mov.w	fp, #0
 800cc7e:	ea5a 030b 	orrs.w	r3, sl, fp
 800cc82:	d04c      	beq.n	800cd1e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800cc84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc8e:	d030      	beq.n	800ccf2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800cc90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc94:	d829      	bhi.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cc96:	2bc0      	cmp	r3, #192	@ 0xc0
 800cc98:	d02d      	beq.n	800ccf6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800cc9a:	2bc0      	cmp	r3, #192	@ 0xc0
 800cc9c:	d825      	bhi.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cc9e:	2b80      	cmp	r3, #128	@ 0x80
 800cca0:	d018      	beq.n	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800cca2:	2b80      	cmp	r3, #128	@ 0x80
 800cca4:	d821      	bhi.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d002      	beq.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ccaa:	2b40      	cmp	r3, #64	@ 0x40
 800ccac:	d007      	beq.n	800ccbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ccae:	e01c      	b.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ccb0:	4b63      	ldr	r3, [pc, #396]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ccb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccb4:	4a62      	ldr	r2, [pc, #392]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ccb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ccba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ccbc:	e01c      	b.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ccbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccc2:	3308      	adds	r3, #8
 800ccc4:	2100      	movs	r1, #0
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f001 fbe6 	bl	800e498 <RCCEx_PLL2_Config>
 800cccc:	4603      	mov	r3, r0
 800ccce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ccd2:	e011      	b.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ccd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccd8:	3328      	adds	r3, #40	@ 0x28
 800ccda:	2100      	movs	r1, #0
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f001 fc8d 	bl	800e5fc <RCCEx_PLL3_Config>
 800cce2:	4603      	mov	r3, r0
 800cce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cce8:	e006      	b.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ccea:	2301      	movs	r3, #1
 800ccec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ccf0:	e002      	b.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ccf2:	bf00      	nop
 800ccf4:	e000      	b.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ccf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d10a      	bne.n	800cd16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800cd00:	4b4f      	ldr	r3, [pc, #316]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd04:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800cd08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd0e:	4a4c      	ldr	r2, [pc, #304]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd10:	430b      	orrs	r3, r1
 800cd12:	6513      	str	r3, [r2, #80]	@ 0x50
 800cd14:	e003      	b.n	800cd1e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800cd1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd26:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800cd2a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800cd2e:	2300      	movs	r3, #0
 800cd30:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800cd34:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800cd38:	460b      	mov	r3, r1
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	d053      	beq.n	800cde6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800cd3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800cd46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cd4a:	d035      	beq.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800cd4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cd50:	d82e      	bhi.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cd52:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cd56:	d031      	beq.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800cd58:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cd5c:	d828      	bhi.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cd5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cd62:	d01a      	beq.n	800cd9a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800cd64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cd68:	d822      	bhi.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d003      	beq.n	800cd76 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800cd6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cd72:	d007      	beq.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800cd74:	e01c      	b.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd76:	4b32      	ldr	r3, [pc, #200]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd7a:	4a31      	ldr	r2, [pc, #196]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd82:	e01c      	b.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd88:	3308      	adds	r3, #8
 800cd8a:	2100      	movs	r1, #0
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f001 fb83 	bl	800e498 <RCCEx_PLL2_Config>
 800cd92:	4603      	mov	r3, r0
 800cd94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cd98:	e011      	b.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd9e:	3328      	adds	r3, #40	@ 0x28
 800cda0:	2100      	movs	r1, #0
 800cda2:	4618      	mov	r0, r3
 800cda4:	f001 fc2a 	bl	800e5fc <RCCEx_PLL3_Config>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cdae:	e006      	b.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cdb6:	e002      	b.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cdb8:	bf00      	nop
 800cdba:	e000      	b.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cdbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cdbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d10b      	bne.n	800cdde <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800cdc6:	4b1e      	ldr	r3, [pc, #120]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cdc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800cdce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cdd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800cdd6:	4a1a      	ldr	r2, [pc, #104]	@ (800ce40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cdd8:	430b      	orrs	r3, r1
 800cdda:	6593      	str	r3, [r2, #88]	@ 0x58
 800cddc:	e003      	b.n	800cde6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cde2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800cde6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800cdf2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800cdfc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800ce00:	460b      	mov	r3, r1
 800ce02:	4313      	orrs	r3, r2
 800ce04:	d056      	beq.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ce06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ce0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ce12:	d038      	beq.n	800ce86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ce14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ce18:	d831      	bhi.n	800ce7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ce1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ce1e:	d034      	beq.n	800ce8a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ce20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ce24:	d82b      	bhi.n	800ce7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ce26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ce2a:	d01d      	beq.n	800ce68 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ce2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ce30:	d825      	bhi.n	800ce7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d006      	beq.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ce36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ce3a:	d00a      	beq.n	800ce52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ce3c:	e01f      	b.n	800ce7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ce3e:	bf00      	nop
 800ce40:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce44:	4ba2      	ldr	r3, [pc, #648]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce48:	4aa1      	ldr	r2, [pc, #644]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ce50:	e01c      	b.n	800ce8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce56:	3308      	adds	r3, #8
 800ce58:	2100      	movs	r1, #0
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f001 fb1c 	bl	800e498 <RCCEx_PLL2_Config>
 800ce60:	4603      	mov	r3, r0
 800ce62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ce66:	e011      	b.n	800ce8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ce68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce6c:	3328      	adds	r3, #40	@ 0x28
 800ce6e:	2100      	movs	r1, #0
 800ce70:	4618      	mov	r0, r3
 800ce72:	f001 fbc3 	bl	800e5fc <RCCEx_PLL3_Config>
 800ce76:	4603      	mov	r3, r0
 800ce78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ce7c:	e006      	b.n	800ce8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ce84:	e002      	b.n	800ce8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ce86:	bf00      	nop
 800ce88:	e000      	b.n	800ce8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ce8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d10b      	bne.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ce94:	4b8e      	ldr	r3, [pc, #568]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce98:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800ce9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cea0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cea4:	4a8a      	ldr	r2, [pc, #552]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cea6:	430b      	orrs	r3, r1
 800cea8:	6593      	str	r3, [r2, #88]	@ 0x58
 800ceaa:	e003      	b.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ceac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ceb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ceb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ceb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800cec0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cec4:	2300      	movs	r3, #0
 800cec6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ceca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800cece:	460b      	mov	r3, r1
 800ced0:	4313      	orrs	r3, r2
 800ced2:	d03a      	beq.n	800cf4a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ced4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ced8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ceda:	2b30      	cmp	r3, #48	@ 0x30
 800cedc:	d01f      	beq.n	800cf1e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800cede:	2b30      	cmp	r3, #48	@ 0x30
 800cee0:	d819      	bhi.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cee2:	2b20      	cmp	r3, #32
 800cee4:	d00c      	beq.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800cee6:	2b20      	cmp	r3, #32
 800cee8:	d815      	bhi.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d019      	beq.n	800cf22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ceee:	2b10      	cmp	r3, #16
 800cef0:	d111      	bne.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cef2:	4b77      	ldr	r3, [pc, #476]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cef6:	4a76      	ldr	r2, [pc, #472]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cefc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cefe:	e011      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cf00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf04:	3308      	adds	r3, #8
 800cf06:	2102      	movs	r1, #2
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f001 fac5 	bl	800e498 <RCCEx_PLL2_Config>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cf14:	e006      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cf16:	2301      	movs	r3, #1
 800cf18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cf1c:	e002      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800cf1e:	bf00      	nop
 800cf20:	e000      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800cf22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d10a      	bne.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800cf2c:	4b68      	ldr	r3, [pc, #416]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf30:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800cf34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf3a:	4a65      	ldr	r2, [pc, #404]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf3c:	430b      	orrs	r3, r1
 800cf3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800cf40:	e003      	b.n	800cf4a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cf46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800cf4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf52:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800cf56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800cf60:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800cf64:	460b      	mov	r3, r1
 800cf66:	4313      	orrs	r3, r2
 800cf68:	d051      	beq.n	800d00e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800cf6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cf74:	d035      	beq.n	800cfe2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800cf76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cf7a:	d82e      	bhi.n	800cfda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cf7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cf80:	d031      	beq.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800cf82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cf86:	d828      	bhi.n	800cfda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cf88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cf8c:	d01a      	beq.n	800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800cf8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cf92:	d822      	bhi.n	800cfda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d003      	beq.n	800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800cf98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf9c:	d007      	beq.n	800cfae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800cf9e:	e01c      	b.n	800cfda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cfa0:	4b4b      	ldr	r3, [pc, #300]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cfa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfa4:	4a4a      	ldr	r2, [pc, #296]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cfa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cfaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cfac:	e01c      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cfae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfb2:	3308      	adds	r3, #8
 800cfb4:	2100      	movs	r1, #0
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f001 fa6e 	bl	800e498 <RCCEx_PLL2_Config>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cfc2:	e011      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cfc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfc8:	3328      	adds	r3, #40	@ 0x28
 800cfca:	2100      	movs	r1, #0
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f001 fb15 	bl	800e5fc <RCCEx_PLL3_Config>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cfd8:	e006      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cfe0:	e002      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800cfe2:	bf00      	nop
 800cfe4:	e000      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800cfe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cfe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d10a      	bne.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800cff0:	4b37      	ldr	r3, [pc, #220]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cff4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800cff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cffe:	4a34      	ldr	r2, [pc, #208]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d000:	430b      	orrs	r3, r1
 800d002:	6513      	str	r3, [r2, #80]	@ 0x50
 800d004:	e003      	b.n	800d00e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d00a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d016:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800d01a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d01e:	2300      	movs	r3, #0
 800d020:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d024:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800d028:	460b      	mov	r3, r1
 800d02a:	4313      	orrs	r3, r2
 800d02c:	d056      	beq.n	800d0dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d032:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d034:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d038:	d033      	beq.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800d03a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d03e:	d82c      	bhi.n	800d09a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d040:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d044:	d02f      	beq.n	800d0a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800d046:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d04a:	d826      	bhi.n	800d09a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d04c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d050:	d02b      	beq.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800d052:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d056:	d820      	bhi.n	800d09a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d058:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d05c:	d012      	beq.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800d05e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d062:	d81a      	bhi.n	800d09a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d064:	2b00      	cmp	r3, #0
 800d066:	d022      	beq.n	800d0ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800d068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d06c:	d115      	bne.n	800d09a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d06e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d072:	3308      	adds	r3, #8
 800d074:	2101      	movs	r1, #1
 800d076:	4618      	mov	r0, r3
 800d078:	f001 fa0e 	bl	800e498 <RCCEx_PLL2_Config>
 800d07c:	4603      	mov	r3, r0
 800d07e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d082:	e015      	b.n	800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d088:	3328      	adds	r3, #40	@ 0x28
 800d08a:	2101      	movs	r1, #1
 800d08c:	4618      	mov	r0, r3
 800d08e:	f001 fab5 	bl	800e5fc <RCCEx_PLL3_Config>
 800d092:	4603      	mov	r3, r0
 800d094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d098:	e00a      	b.n	800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d09a:	2301      	movs	r3, #1
 800d09c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d0a0:	e006      	b.n	800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d0a2:	bf00      	nop
 800d0a4:	e004      	b.n	800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d0a6:	bf00      	nop
 800d0a8:	e002      	b.n	800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d0aa:	bf00      	nop
 800d0ac:	e000      	b.n	800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d0ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d10d      	bne.n	800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d0b8:	4b05      	ldr	r3, [pc, #20]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d0ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800d0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0c6:	4a02      	ldr	r2, [pc, #8]	@ (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d0c8:	430b      	orrs	r3, r1
 800d0ca:	6513      	str	r3, [r2, #80]	@ 0x50
 800d0cc:	e006      	b.n	800d0dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d0ce:	bf00      	nop
 800d0d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d0d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800d0e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d0f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	4313      	orrs	r3, r2
 800d0fa:	d055      	beq.n	800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d0fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d100:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d104:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d108:	d033      	beq.n	800d172 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800d10a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d10e:	d82c      	bhi.n	800d16a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d114:	d02f      	beq.n	800d176 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800d116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d11a:	d826      	bhi.n	800d16a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d11c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d120:	d02b      	beq.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800d122:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d126:	d820      	bhi.n	800d16a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d12c:	d012      	beq.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800d12e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d132:	d81a      	bhi.n	800d16a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d134:	2b00      	cmp	r3, #0
 800d136:	d022      	beq.n	800d17e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800d138:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d13c:	d115      	bne.n	800d16a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d142:	3308      	adds	r3, #8
 800d144:	2101      	movs	r1, #1
 800d146:	4618      	mov	r0, r3
 800d148:	f001 f9a6 	bl	800e498 <RCCEx_PLL2_Config>
 800d14c:	4603      	mov	r3, r0
 800d14e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d152:	e015      	b.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d158:	3328      	adds	r3, #40	@ 0x28
 800d15a:	2101      	movs	r1, #1
 800d15c:	4618      	mov	r0, r3
 800d15e:	f001 fa4d 	bl	800e5fc <RCCEx_PLL3_Config>
 800d162:	4603      	mov	r3, r0
 800d164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d168:	e00a      	b.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d16a:	2301      	movs	r3, #1
 800d16c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d170:	e006      	b.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d172:	bf00      	nop
 800d174:	e004      	b.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d176:	bf00      	nop
 800d178:	e002      	b.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d17a:	bf00      	nop
 800d17c:	e000      	b.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d17e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10b      	bne.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d188:	4ba3      	ldr	r3, [pc, #652]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d18a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d18c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d194:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d198:	4a9f      	ldr	r2, [pc, #636]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d19a:	430b      	orrs	r3, r1
 800d19c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d19e:	e003      	b.n	800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d1a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800d1b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d1be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d1c2:	460b      	mov	r3, r1
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	d037      	beq.n	800d238 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1d2:	d00e      	beq.n	800d1f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800d1d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1d8:	d816      	bhi.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d018      	beq.n	800d210 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800d1de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1e2:	d111      	bne.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d1e4:	4b8c      	ldr	r3, [pc, #560]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1e8:	4a8b      	ldr	r2, [pc, #556]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d1ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d1f0:	e00f      	b.n	800d212 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d1f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1f6:	3308      	adds	r3, #8
 800d1f8:	2101      	movs	r1, #1
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f001 f94c 	bl	800e498 <RCCEx_PLL2_Config>
 800d200:	4603      	mov	r3, r0
 800d202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d206:	e004      	b.n	800d212 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d208:	2301      	movs	r3, #1
 800d20a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d20e:	e000      	b.n	800d212 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800d210:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d216:	2b00      	cmp	r3, #0
 800d218:	d10a      	bne.n	800d230 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d21a:	4b7f      	ldr	r3, [pc, #508]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d21c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d21e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d228:	4a7b      	ldr	r2, [pc, #492]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d22a:	430b      	orrs	r3, r1
 800d22c:	6513      	str	r3, [r2, #80]	@ 0x50
 800d22e:	e003      	b.n	800d238 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d230:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d234:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d240:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800d244:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d248:	2300      	movs	r3, #0
 800d24a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d24e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800d252:	460b      	mov	r3, r1
 800d254:	4313      	orrs	r3, r2
 800d256:	d039      	beq.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d25c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d25e:	2b03      	cmp	r3, #3
 800d260:	d81c      	bhi.n	800d29c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800d262:	a201      	add	r2, pc, #4	@ (adr r2, 800d268 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800d264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d268:	0800d2a5 	.word	0x0800d2a5
 800d26c:	0800d279 	.word	0x0800d279
 800d270:	0800d287 	.word	0x0800d287
 800d274:	0800d2a5 	.word	0x0800d2a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d278:	4b67      	ldr	r3, [pc, #412]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d27c:	4a66      	ldr	r2, [pc, #408]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d27e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d282:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d284:	e00f      	b.n	800d2a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d28a:	3308      	adds	r3, #8
 800d28c:	2102      	movs	r1, #2
 800d28e:	4618      	mov	r0, r3
 800d290:	f001 f902 	bl	800e498 <RCCEx_PLL2_Config>
 800d294:	4603      	mov	r3, r0
 800d296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d29a:	e004      	b.n	800d2a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d29c:	2301      	movs	r3, #1
 800d29e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d2a2:	e000      	b.n	800d2a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800d2a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d10a      	bne.n	800d2c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d2ae:	4b5a      	ldr	r3, [pc, #360]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2b2:	f023 0103 	bic.w	r1, r3, #3
 800d2b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d2bc:	4a56      	ldr	r2, [pc, #344]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2be:	430b      	orrs	r3, r1
 800d2c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d2c2:	e003      	b.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d2c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d2cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800d2d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d2dc:	2300      	movs	r3, #0
 800d2de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d2e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800d2e6:	460b      	mov	r3, r1
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	f000 809f 	beq.w	800d42c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d2ee:	4b4b      	ldr	r3, [pc, #300]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4a4a      	ldr	r2, [pc, #296]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d2f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d2f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d2fa:	f7f9 fc73 	bl	8006be4 <HAL_GetTick>
 800d2fe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d302:	e00b      	b.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d304:	f7f9 fc6e 	bl	8006be4 <HAL_GetTick>
 800d308:	4602      	mov	r2, r0
 800d30a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	2b64      	cmp	r3, #100	@ 0x64
 800d312:	d903      	bls.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800d314:	2303      	movs	r3, #3
 800d316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d31a:	e005      	b.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d31c:	4b3f      	ldr	r3, [pc, #252]	@ (800d41c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d324:	2b00      	cmp	r3, #0
 800d326:	d0ed      	beq.n	800d304 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800d328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d179      	bne.n	800d424 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d330:	4b39      	ldr	r3, [pc, #228]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d332:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d338:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d33c:	4053      	eors	r3, r2
 800d33e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d342:	2b00      	cmp	r3, #0
 800d344:	d015      	beq.n	800d372 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d346:	4b34      	ldr	r3, [pc, #208]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d34a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d34e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d352:	4b31      	ldr	r3, [pc, #196]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d356:	4a30      	ldr	r2, [pc, #192]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d35c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d35e:	4b2e      	ldr	r3, [pc, #184]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d362:	4a2d      	ldr	r2, [pc, #180]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d368:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d36a:	4a2b      	ldr	r2, [pc, #172]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d36c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d370:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d376:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d37a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d37e:	d118      	bne.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d380:	f7f9 fc30 	bl	8006be4 <HAL_GetTick>
 800d384:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d388:	e00d      	b.n	800d3a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d38a:	f7f9 fc2b 	bl	8006be4 <HAL_GetTick>
 800d38e:	4602      	mov	r2, r0
 800d390:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d394:	1ad2      	subs	r2, r2, r3
 800d396:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d903      	bls.n	800d3a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800d39e:	2303      	movs	r3, #3
 800d3a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800d3a4:	e005      	b.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d3a6:	4b1c      	ldr	r3, [pc, #112]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3aa:	f003 0302 	and.w	r3, r3, #2
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d0eb      	beq.n	800d38a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800d3b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d129      	bne.n	800d40e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d3ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d3c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d3c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d3ca:	d10e      	bne.n	800d3ea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800d3cc:	4b12      	ldr	r3, [pc, #72]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3ce:	691b      	ldr	r3, [r3, #16]
 800d3d0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800d3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d3dc:	091a      	lsrs	r2, r3, #4
 800d3de:	4b10      	ldr	r3, [pc, #64]	@ (800d420 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800d3e0:	4013      	ands	r3, r2
 800d3e2:	4a0d      	ldr	r2, [pc, #52]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3e4:	430b      	orrs	r3, r1
 800d3e6:	6113      	str	r3, [r2, #16]
 800d3e8:	e005      	b.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800d3ea:	4b0b      	ldr	r3, [pc, #44]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3ec:	691b      	ldr	r3, [r3, #16]
 800d3ee:	4a0a      	ldr	r2, [pc, #40]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d3f4:	6113      	str	r3, [r2, #16]
 800d3f6:	4b08      	ldr	r3, [pc, #32]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3f8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d406:	4a04      	ldr	r2, [pc, #16]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d408:	430b      	orrs	r3, r1
 800d40a:	6713      	str	r3, [r2, #112]	@ 0x70
 800d40c:	e00e      	b.n	800d42c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d40e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d412:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800d416:	e009      	b.n	800d42c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800d418:	58024400 	.word	0x58024400
 800d41c:	58024800 	.word	0x58024800
 800d420:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d428:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d42c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d434:	f002 0301 	and.w	r3, r2, #1
 800d438:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d43c:	2300      	movs	r3, #0
 800d43e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d442:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d446:	460b      	mov	r3, r1
 800d448:	4313      	orrs	r3, r2
 800d44a:	f000 8089 	beq.w	800d560 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d44e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d452:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d454:	2b28      	cmp	r3, #40	@ 0x28
 800d456:	d86b      	bhi.n	800d530 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800d458:	a201      	add	r2, pc, #4	@ (adr r2, 800d460 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d45e:	bf00      	nop
 800d460:	0800d539 	.word	0x0800d539
 800d464:	0800d531 	.word	0x0800d531
 800d468:	0800d531 	.word	0x0800d531
 800d46c:	0800d531 	.word	0x0800d531
 800d470:	0800d531 	.word	0x0800d531
 800d474:	0800d531 	.word	0x0800d531
 800d478:	0800d531 	.word	0x0800d531
 800d47c:	0800d531 	.word	0x0800d531
 800d480:	0800d505 	.word	0x0800d505
 800d484:	0800d531 	.word	0x0800d531
 800d488:	0800d531 	.word	0x0800d531
 800d48c:	0800d531 	.word	0x0800d531
 800d490:	0800d531 	.word	0x0800d531
 800d494:	0800d531 	.word	0x0800d531
 800d498:	0800d531 	.word	0x0800d531
 800d49c:	0800d531 	.word	0x0800d531
 800d4a0:	0800d51b 	.word	0x0800d51b
 800d4a4:	0800d531 	.word	0x0800d531
 800d4a8:	0800d531 	.word	0x0800d531
 800d4ac:	0800d531 	.word	0x0800d531
 800d4b0:	0800d531 	.word	0x0800d531
 800d4b4:	0800d531 	.word	0x0800d531
 800d4b8:	0800d531 	.word	0x0800d531
 800d4bc:	0800d531 	.word	0x0800d531
 800d4c0:	0800d539 	.word	0x0800d539
 800d4c4:	0800d531 	.word	0x0800d531
 800d4c8:	0800d531 	.word	0x0800d531
 800d4cc:	0800d531 	.word	0x0800d531
 800d4d0:	0800d531 	.word	0x0800d531
 800d4d4:	0800d531 	.word	0x0800d531
 800d4d8:	0800d531 	.word	0x0800d531
 800d4dc:	0800d531 	.word	0x0800d531
 800d4e0:	0800d539 	.word	0x0800d539
 800d4e4:	0800d531 	.word	0x0800d531
 800d4e8:	0800d531 	.word	0x0800d531
 800d4ec:	0800d531 	.word	0x0800d531
 800d4f0:	0800d531 	.word	0x0800d531
 800d4f4:	0800d531 	.word	0x0800d531
 800d4f8:	0800d531 	.word	0x0800d531
 800d4fc:	0800d531 	.word	0x0800d531
 800d500:	0800d539 	.word	0x0800d539
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d508:	3308      	adds	r3, #8
 800d50a:	2101      	movs	r1, #1
 800d50c:	4618      	mov	r0, r3
 800d50e:	f000 ffc3 	bl	800e498 <RCCEx_PLL2_Config>
 800d512:	4603      	mov	r3, r0
 800d514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d518:	e00f      	b.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d51e:	3328      	adds	r3, #40	@ 0x28
 800d520:	2101      	movs	r1, #1
 800d522:	4618      	mov	r0, r3
 800d524:	f001 f86a 	bl	800e5fc <RCCEx_PLL3_Config>
 800d528:	4603      	mov	r3, r0
 800d52a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d52e:	e004      	b.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d530:	2301      	movs	r3, #1
 800d532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d536:	e000      	b.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800d538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d53a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d10a      	bne.n	800d558 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d542:	4bbf      	ldr	r3, [pc, #764]	@ (800d840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d546:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800d54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d54e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d550:	4abb      	ldr	r2, [pc, #748]	@ (800d840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d552:	430b      	orrs	r3, r1
 800d554:	6553      	str	r3, [r2, #84]	@ 0x54
 800d556:	e003      	b.n	800d560 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d558:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d55c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d568:	f002 0302 	and.w	r3, r2, #2
 800d56c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d570:	2300      	movs	r3, #0
 800d572:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d576:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800d57a:	460b      	mov	r3, r1
 800d57c:	4313      	orrs	r3, r2
 800d57e:	d041      	beq.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d584:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d586:	2b05      	cmp	r3, #5
 800d588:	d824      	bhi.n	800d5d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800d58a:	a201      	add	r2, pc, #4	@ (adr r2, 800d590 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800d58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d590:	0800d5dd 	.word	0x0800d5dd
 800d594:	0800d5a9 	.word	0x0800d5a9
 800d598:	0800d5bf 	.word	0x0800d5bf
 800d59c:	0800d5dd 	.word	0x0800d5dd
 800d5a0:	0800d5dd 	.word	0x0800d5dd
 800d5a4:	0800d5dd 	.word	0x0800d5dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d5a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5ac:	3308      	adds	r3, #8
 800d5ae:	2101      	movs	r1, #1
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f000 ff71 	bl	800e498 <RCCEx_PLL2_Config>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d5bc:	e00f      	b.n	800d5de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d5be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5c2:	3328      	adds	r3, #40	@ 0x28
 800d5c4:	2101      	movs	r1, #1
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f001 f818 	bl	800e5fc <RCCEx_PLL3_Config>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d5d2:	e004      	b.n	800d5de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d5da:	e000      	b.n	800d5de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800d5dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d10a      	bne.n	800d5fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d5e6:	4b96      	ldr	r3, [pc, #600]	@ (800d840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d5e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5ea:	f023 0107 	bic.w	r1, r3, #7
 800d5ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d5f4:	4a92      	ldr	r2, [pc, #584]	@ (800d840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d5f6:	430b      	orrs	r3, r1
 800d5f8:	6553      	str	r3, [r2, #84]	@ 0x54
 800d5fa:	e003      	b.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d600:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60c:	f002 0304 	and.w	r3, r2, #4
 800d610:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d614:	2300      	movs	r3, #0
 800d616:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d61a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d61e:	460b      	mov	r3, r1
 800d620:	4313      	orrs	r3, r2
 800d622:	d044      	beq.n	800d6ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d62c:	2b05      	cmp	r3, #5
 800d62e:	d825      	bhi.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d630:	a201      	add	r2, pc, #4	@ (adr r2, 800d638 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d636:	bf00      	nop
 800d638:	0800d685 	.word	0x0800d685
 800d63c:	0800d651 	.word	0x0800d651
 800d640:	0800d667 	.word	0x0800d667
 800d644:	0800d685 	.word	0x0800d685
 800d648:	0800d685 	.word	0x0800d685
 800d64c:	0800d685 	.word	0x0800d685
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d654:	3308      	adds	r3, #8
 800d656:	2101      	movs	r1, #1
 800d658:	4618      	mov	r0, r3
 800d65a:	f000 ff1d 	bl	800e498 <RCCEx_PLL2_Config>
 800d65e:	4603      	mov	r3, r0
 800d660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d664:	e00f      	b.n	800d686 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d66a:	3328      	adds	r3, #40	@ 0x28
 800d66c:	2101      	movs	r1, #1
 800d66e:	4618      	mov	r0, r3
 800d670:	f000 ffc4 	bl	800e5fc <RCCEx_PLL3_Config>
 800d674:	4603      	mov	r3, r0
 800d676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d67a:	e004      	b.n	800d686 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d67c:	2301      	movs	r3, #1
 800d67e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d682:	e000      	b.n	800d686 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d684:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d10b      	bne.n	800d6a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d68e:	4b6c      	ldr	r3, [pc, #432]	@ (800d840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d692:	f023 0107 	bic.w	r1, r3, #7
 800d696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d69a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d69e:	4a68      	ldr	r2, [pc, #416]	@ (800d840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d6a0:	430b      	orrs	r3, r1
 800d6a2:	6593      	str	r3, [r2, #88]	@ 0x58
 800d6a4:	e003      	b.n	800d6ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d6aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d6ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b6:	f002 0320 	and.w	r3, r2, #32
 800d6ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d6be:	2300      	movs	r3, #0
 800d6c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d6c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	d055      	beq.n	800d77a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d6ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d6da:	d033      	beq.n	800d744 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d6dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d6e0:	d82c      	bhi.n	800d73c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d6e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6e6:	d02f      	beq.n	800d748 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d6e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6ec:	d826      	bhi.n	800d73c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d6ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d6f2:	d02b      	beq.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d6f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d6f8:	d820      	bhi.n	800d73c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d6fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d6fe:	d012      	beq.n	800d726 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d700:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d704:	d81a      	bhi.n	800d73c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d706:	2b00      	cmp	r3, #0
 800d708:	d022      	beq.n	800d750 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d70a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d70e:	d115      	bne.n	800d73c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d714:	3308      	adds	r3, #8
 800d716:	2100      	movs	r1, #0
 800d718:	4618      	mov	r0, r3
 800d71a:	f000 febd 	bl	800e498 <RCCEx_PLL2_Config>
 800d71e:	4603      	mov	r3, r0
 800d720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d724:	e015      	b.n	800d752 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d72a:	3328      	adds	r3, #40	@ 0x28
 800d72c:	2102      	movs	r1, #2
 800d72e:	4618      	mov	r0, r3
 800d730:	f000 ff64 	bl	800e5fc <RCCEx_PLL3_Config>
 800d734:	4603      	mov	r3, r0
 800d736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d73a:	e00a      	b.n	800d752 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d73c:	2301      	movs	r3, #1
 800d73e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d742:	e006      	b.n	800d752 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d744:	bf00      	nop
 800d746:	e004      	b.n	800d752 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d748:	bf00      	nop
 800d74a:	e002      	b.n	800d752 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d74c:	bf00      	nop
 800d74e:	e000      	b.n	800d752 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d750:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d756:	2b00      	cmp	r3, #0
 800d758:	d10b      	bne.n	800d772 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d75a:	4b39      	ldr	r3, [pc, #228]	@ (800d840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d75c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d75e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d76a:	4a35      	ldr	r2, [pc, #212]	@ (800d840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d76c:	430b      	orrs	r3, r1
 800d76e:	6553      	str	r3, [r2, #84]	@ 0x54
 800d770:	e003      	b.n	800d77a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d776:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d782:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d786:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d78a:	2300      	movs	r3, #0
 800d78c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d790:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d794:	460b      	mov	r3, r1
 800d796:	4313      	orrs	r3, r2
 800d798:	d058      	beq.n	800d84c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d79a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d79e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d7a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d7a6:	d033      	beq.n	800d810 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d7a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d7ac:	d82c      	bhi.n	800d808 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d7ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d7b2:	d02f      	beq.n	800d814 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d7b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d7b8:	d826      	bhi.n	800d808 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d7ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d7be:	d02b      	beq.n	800d818 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d7c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d7c4:	d820      	bhi.n	800d808 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d7c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d7ca:	d012      	beq.n	800d7f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d7cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d7d0:	d81a      	bhi.n	800d808 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d022      	beq.n	800d81c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d7d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7da:	d115      	bne.n	800d808 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7e0:	3308      	adds	r3, #8
 800d7e2:	2100      	movs	r1, #0
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f000 fe57 	bl	800e498 <RCCEx_PLL2_Config>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d7f0:	e015      	b.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7f6:	3328      	adds	r3, #40	@ 0x28
 800d7f8:	2102      	movs	r1, #2
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f000 fefe 	bl	800e5fc <RCCEx_PLL3_Config>
 800d800:	4603      	mov	r3, r0
 800d802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d806:	e00a      	b.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d808:	2301      	movs	r3, #1
 800d80a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d80e:	e006      	b.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d810:	bf00      	nop
 800d812:	e004      	b.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d814:	bf00      	nop
 800d816:	e002      	b.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d818:	bf00      	nop
 800d81a:	e000      	b.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d81c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d81e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d822:	2b00      	cmp	r3, #0
 800d824:	d10e      	bne.n	800d844 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d826:	4b06      	ldr	r3, [pc, #24]	@ (800d840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d82a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800d82e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d832:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d836:	4a02      	ldr	r2, [pc, #8]	@ (800d840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d838:	430b      	orrs	r3, r1
 800d83a:	6593      	str	r3, [r2, #88]	@ 0x58
 800d83c:	e006      	b.n	800d84c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d83e:	bf00      	nop
 800d840:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d84c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d854:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d85c:	2300      	movs	r3, #0
 800d85e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d862:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d866:	460b      	mov	r3, r1
 800d868:	4313      	orrs	r3, r2
 800d86a:	d055      	beq.n	800d918 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d86c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d870:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d874:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d878:	d033      	beq.n	800d8e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d87a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d87e:	d82c      	bhi.n	800d8da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d880:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d884:	d02f      	beq.n	800d8e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d886:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d88a:	d826      	bhi.n	800d8da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d88c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d890:	d02b      	beq.n	800d8ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d892:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d896:	d820      	bhi.n	800d8da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d898:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d89c:	d012      	beq.n	800d8c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d89e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d8a2:	d81a      	bhi.n	800d8da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d022      	beq.n	800d8ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d8a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8ac:	d115      	bne.n	800d8da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8b2:	3308      	adds	r3, #8
 800d8b4:	2100      	movs	r1, #0
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f000 fdee 	bl	800e498 <RCCEx_PLL2_Config>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d8c2:	e015      	b.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d8c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8c8:	3328      	adds	r3, #40	@ 0x28
 800d8ca:	2102      	movs	r1, #2
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f000 fe95 	bl	800e5fc <RCCEx_PLL3_Config>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d8d8:	e00a      	b.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d8da:	2301      	movs	r3, #1
 800d8dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d8e0:	e006      	b.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d8e2:	bf00      	nop
 800d8e4:	e004      	b.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d8e6:	bf00      	nop
 800d8e8:	e002      	b.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d8ea:	bf00      	nop
 800d8ec:	e000      	b.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d8ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d10b      	bne.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d8f8:	4ba1      	ldr	r3, [pc, #644]	@ (800db80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d8fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800d900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d904:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d908:	4a9d      	ldr	r2, [pc, #628]	@ (800db80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d90a:	430b      	orrs	r3, r1
 800d90c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d90e:	e003      	b.n	800d918 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d910:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d914:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d920:	f002 0308 	and.w	r3, r2, #8
 800d924:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d928:	2300      	movs	r3, #0
 800d92a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d92e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800d932:	460b      	mov	r3, r1
 800d934:	4313      	orrs	r3, r2
 800d936:	d01e      	beq.n	800d976 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d93c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d944:	d10c      	bne.n	800d960 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d94a:	3328      	adds	r3, #40	@ 0x28
 800d94c:	2102      	movs	r1, #2
 800d94e:	4618      	mov	r0, r3
 800d950:	f000 fe54 	bl	800e5fc <RCCEx_PLL3_Config>
 800d954:	4603      	mov	r3, r0
 800d956:	2b00      	cmp	r3, #0
 800d958:	d002      	beq.n	800d960 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800d95a:	2301      	movs	r3, #1
 800d95c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d960:	4b87      	ldr	r3, [pc, #540]	@ (800db80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d964:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d96c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d970:	4a83      	ldr	r2, [pc, #524]	@ (800db80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d972:	430b      	orrs	r3, r1
 800d974:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97e:	f002 0310 	and.w	r3, r2, #16
 800d982:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d986:	2300      	movs	r3, #0
 800d988:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d98c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d990:	460b      	mov	r3, r1
 800d992:	4313      	orrs	r3, r2
 800d994:	d01e      	beq.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d99a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d99e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d9a2:	d10c      	bne.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d9a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9a8:	3328      	adds	r3, #40	@ 0x28
 800d9aa:	2102      	movs	r1, #2
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f000 fe25 	bl	800e5fc <RCCEx_PLL3_Config>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d002      	beq.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d9be:	4b70      	ldr	r3, [pc, #448]	@ (800db80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d9ce:	4a6c      	ldr	r2, [pc, #432]	@ (800db80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9d0:	430b      	orrs	r3, r1
 800d9d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d9d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800d9e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d9ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	d03e      	beq.n	800da72 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d9f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d9fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800da00:	d022      	beq.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800da02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800da06:	d81b      	bhi.n	800da40 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d003      	beq.n	800da14 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800da0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da10:	d00b      	beq.n	800da2a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800da12:	e015      	b.n	800da40 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800da14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da18:	3308      	adds	r3, #8
 800da1a:	2100      	movs	r1, #0
 800da1c:	4618      	mov	r0, r3
 800da1e:	f000 fd3b 	bl	800e498 <RCCEx_PLL2_Config>
 800da22:	4603      	mov	r3, r0
 800da24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800da28:	e00f      	b.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800da2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da2e:	3328      	adds	r3, #40	@ 0x28
 800da30:	2102      	movs	r1, #2
 800da32:	4618      	mov	r0, r3
 800da34:	f000 fde2 	bl	800e5fc <RCCEx_PLL3_Config>
 800da38:	4603      	mov	r3, r0
 800da3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800da3e:	e004      	b.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da40:	2301      	movs	r3, #1
 800da42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800da46:	e000      	b.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800da48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d10b      	bne.n	800da6a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800da52:	4b4b      	ldr	r3, [pc, #300]	@ (800db80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da56:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800da5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800da62:	4a47      	ldr	r2, [pc, #284]	@ (800db80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da64:	430b      	orrs	r3, r1
 800da66:	6593      	str	r3, [r2, #88]	@ 0x58
 800da68:	e003      	b.n	800da72 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800da72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800da7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800da80:	2300      	movs	r3, #0
 800da82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800da84:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800da88:	460b      	mov	r3, r1
 800da8a:	4313      	orrs	r3, r2
 800da8c:	d03b      	beq.n	800db06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800da8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800da9a:	d01f      	beq.n	800dadc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800da9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800daa0:	d818      	bhi.n	800dad4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800daa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800daa6:	d003      	beq.n	800dab0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800daa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800daac:	d007      	beq.n	800dabe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800daae:	e011      	b.n	800dad4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dab0:	4b33      	ldr	r3, [pc, #204]	@ (800db80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dab4:	4a32      	ldr	r2, [pc, #200]	@ (800db80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dab6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800daba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800dabc:	e00f      	b.n	800dade <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dabe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dac2:	3328      	adds	r3, #40	@ 0x28
 800dac4:	2101      	movs	r1, #1
 800dac6:	4618      	mov	r0, r3
 800dac8:	f000 fd98 	bl	800e5fc <RCCEx_PLL3_Config>
 800dacc:	4603      	mov	r3, r0
 800dace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800dad2:	e004      	b.n	800dade <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dad4:	2301      	movs	r3, #1
 800dad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dada:	e000      	b.n	800dade <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800dadc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d10b      	bne.n	800dafe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dae6:	4b26      	ldr	r3, [pc, #152]	@ (800db80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800daea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800daee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800daf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800daf6:	4a22      	ldr	r2, [pc, #136]	@ (800db80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800daf8:	430b      	orrs	r3, r1
 800dafa:	6553      	str	r3, [r2, #84]	@ 0x54
 800dafc:	e003      	b.n	800db06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dafe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800db06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800db12:	673b      	str	r3, [r7, #112]	@ 0x70
 800db14:	2300      	movs	r3, #0
 800db16:	677b      	str	r3, [r7, #116]	@ 0x74
 800db18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800db1c:	460b      	mov	r3, r1
 800db1e:	4313      	orrs	r3, r2
 800db20:	d034      	beq.n	800db8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800db22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d003      	beq.n	800db34 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800db2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db30:	d007      	beq.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800db32:	e011      	b.n	800db58 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db34:	4b12      	ldr	r3, [pc, #72]	@ (800db80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db38:	4a11      	ldr	r2, [pc, #68]	@ (800db80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800db40:	e00e      	b.n	800db60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800db42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db46:	3308      	adds	r3, #8
 800db48:	2102      	movs	r1, #2
 800db4a:	4618      	mov	r0, r3
 800db4c:	f000 fca4 	bl	800e498 <RCCEx_PLL2_Config>
 800db50:	4603      	mov	r3, r0
 800db52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800db56:	e003      	b.n	800db60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800db58:	2301      	movs	r3, #1
 800db5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800db5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db64:	2b00      	cmp	r3, #0
 800db66:	d10d      	bne.n	800db84 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800db68:	4b05      	ldr	r3, [pc, #20]	@ (800db80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800db70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db76:	4a02      	ldr	r2, [pc, #8]	@ (800db80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db78:	430b      	orrs	r3, r1
 800db7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800db7c:	e006      	b.n	800db8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800db7e:	bf00      	nop
 800db80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800db8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db94:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800db98:	66bb      	str	r3, [r7, #104]	@ 0x68
 800db9a:	2300      	movs	r3, #0
 800db9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800db9e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800dba2:	460b      	mov	r3, r1
 800dba4:	4313      	orrs	r3, r2
 800dba6:	d00c      	beq.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800dba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbac:	3328      	adds	r3, #40	@ 0x28
 800dbae:	2102      	movs	r1, #2
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f000 fd23 	bl	800e5fc <RCCEx_PLL3_Config>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d002      	beq.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800dbc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800dbce:	663b      	str	r3, [r7, #96]	@ 0x60
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	667b      	str	r3, [r7, #100]	@ 0x64
 800dbd4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800dbd8:	460b      	mov	r3, r1
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	d038      	beq.n	800dc50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800dbde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dbe6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dbea:	d018      	beq.n	800dc1e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800dbec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dbf0:	d811      	bhi.n	800dc16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800dbf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dbf6:	d014      	beq.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800dbf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dbfc:	d80b      	bhi.n	800dc16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d011      	beq.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800dc02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc06:	d106      	bne.n	800dc16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc08:	4bc3      	ldr	r3, [pc, #780]	@ (800df18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dc0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc0c:	4ac2      	ldr	r2, [pc, #776]	@ (800df18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dc0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800dc14:	e008      	b.n	800dc28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dc16:	2301      	movs	r3, #1
 800dc18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dc1c:	e004      	b.n	800dc28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dc1e:	bf00      	nop
 800dc20:	e002      	b.n	800dc28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dc22:	bf00      	nop
 800dc24:	e000      	b.n	800dc28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dc26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d10b      	bne.n	800dc48 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dc30:	4bb9      	ldr	r3, [pc, #740]	@ (800df18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dc32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc34:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800dc38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc40:	4ab5      	ldr	r2, [pc, #724]	@ (800df18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dc42:	430b      	orrs	r3, r1
 800dc44:	6553      	str	r3, [r2, #84]	@ 0x54
 800dc46:	e003      	b.n	800dc50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dc50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc58:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800dc5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dc5e:	2300      	movs	r3, #0
 800dc60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dc62:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800dc66:	460b      	mov	r3, r1
 800dc68:	4313      	orrs	r3, r2
 800dc6a:	d009      	beq.n	800dc80 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dc6c:	4baa      	ldr	r3, [pc, #680]	@ (800df18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dc6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dc74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dc7a:	4aa7      	ldr	r2, [pc, #668]	@ (800df18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dc7c:	430b      	orrs	r3, r1
 800dc7e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800dc80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc88:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800dc8c:	653b      	str	r3, [r7, #80]	@ 0x50
 800dc8e:	2300      	movs	r3, #0
 800dc90:	657b      	str	r3, [r7, #84]	@ 0x54
 800dc92:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800dc96:	460b      	mov	r3, r1
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	d00a      	beq.n	800dcb2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800dc9c:	4b9e      	ldr	r3, [pc, #632]	@ (800df18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dc9e:	691b      	ldr	r3, [r3, #16]
 800dca0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800dca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dca8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800dcac:	4a9a      	ldr	r2, [pc, #616]	@ (800df18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dcae:	430b      	orrs	r3, r1
 800dcb0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800dcb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800dcbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dcc4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800dcc8:	460b      	mov	r3, r1
 800dcca:	4313      	orrs	r3, r2
 800dccc:	d009      	beq.n	800dce2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800dcce:	4b92      	ldr	r3, [pc, #584]	@ (800df18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dcd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcd2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800dcd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dcdc:	4a8e      	ldr	r2, [pc, #568]	@ (800df18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dcde:	430b      	orrs	r3, r1
 800dce0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800dce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800dcee:	643b      	str	r3, [r7, #64]	@ 0x40
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	647b      	str	r3, [r7, #68]	@ 0x44
 800dcf4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	d00e      	beq.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800dcfe:	4b86      	ldr	r3, [pc, #536]	@ (800df18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd00:	691b      	ldr	r3, [r3, #16]
 800dd02:	4a85      	ldr	r2, [pc, #532]	@ (800df18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800dd08:	6113      	str	r3, [r2, #16]
 800dd0a:	4b83      	ldr	r3, [pc, #524]	@ (800df18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd0c:	6919      	ldr	r1, [r3, #16]
 800dd0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800dd16:	4a80      	ldr	r2, [pc, #512]	@ (800df18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd18:	430b      	orrs	r3, r1
 800dd1a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800dd1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd24:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800dd28:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd2e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800dd32:	460b      	mov	r3, r1
 800dd34:	4313      	orrs	r3, r2
 800dd36:	d009      	beq.n	800dd4c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800dd38:	4b77      	ldr	r3, [pc, #476]	@ (800df18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd3c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800dd40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd46:	4a74      	ldr	r2, [pc, #464]	@ (800df18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd48:	430b      	orrs	r3, r1
 800dd4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800dd4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd54:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800dd58:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd5e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800dd62:	460b      	mov	r3, r1
 800dd64:	4313      	orrs	r3, r2
 800dd66:	d00a      	beq.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800dd68:	4b6b      	ldr	r3, [pc, #428]	@ (800df18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd6c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800dd70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dd78:	4a67      	ldr	r2, [pc, #412]	@ (800df18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd7a:	430b      	orrs	r3, r1
 800dd7c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800dd7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd86:	2100      	movs	r1, #0
 800dd88:	62b9      	str	r1, [r7, #40]	@ 0x28
 800dd8a:	f003 0301 	and.w	r3, r3, #1
 800dd8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800dd94:	460b      	mov	r3, r1
 800dd96:	4313      	orrs	r3, r2
 800dd98:	d011      	beq.n	800ddbe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dd9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd9e:	3308      	adds	r3, #8
 800dda0:	2100      	movs	r1, #0
 800dda2:	4618      	mov	r0, r3
 800dda4:	f000 fb78 	bl	800e498 <RCCEx_PLL2_Config>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ddae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d003      	beq.n	800ddbe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ddba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ddbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc6:	2100      	movs	r1, #0
 800ddc8:	6239      	str	r1, [r7, #32]
 800ddca:	f003 0302 	and.w	r3, r3, #2
 800ddce:	627b      	str	r3, [r7, #36]	@ 0x24
 800ddd0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	4313      	orrs	r3, r2
 800ddd8:	d011      	beq.n	800ddfe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ddda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddde:	3308      	adds	r3, #8
 800dde0:	2101      	movs	r1, #1
 800dde2:	4618      	mov	r0, r3
 800dde4:	f000 fb58 	bl	800e498 <RCCEx_PLL2_Config>
 800dde8:	4603      	mov	r3, r0
 800ddea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ddee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d003      	beq.n	800ddfe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ddfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ddfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de06:	2100      	movs	r1, #0
 800de08:	61b9      	str	r1, [r7, #24]
 800de0a:	f003 0304 	and.w	r3, r3, #4
 800de0e:	61fb      	str	r3, [r7, #28]
 800de10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800de14:	460b      	mov	r3, r1
 800de16:	4313      	orrs	r3, r2
 800de18:	d011      	beq.n	800de3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800de1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de1e:	3308      	adds	r3, #8
 800de20:	2102      	movs	r1, #2
 800de22:	4618      	mov	r0, r3
 800de24:	f000 fb38 	bl	800e498 <RCCEx_PLL2_Config>
 800de28:	4603      	mov	r3, r0
 800de2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800de2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de32:	2b00      	cmp	r3, #0
 800de34:	d003      	beq.n	800de3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800de3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de46:	2100      	movs	r1, #0
 800de48:	6139      	str	r1, [r7, #16]
 800de4a:	f003 0308 	and.w	r3, r3, #8
 800de4e:	617b      	str	r3, [r7, #20]
 800de50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800de54:	460b      	mov	r3, r1
 800de56:	4313      	orrs	r3, r2
 800de58:	d011      	beq.n	800de7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800de5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de5e:	3328      	adds	r3, #40	@ 0x28
 800de60:	2100      	movs	r1, #0
 800de62:	4618      	mov	r0, r3
 800de64:	f000 fbca 	bl	800e5fc <RCCEx_PLL3_Config>
 800de68:	4603      	mov	r3, r0
 800de6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800de6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de72:	2b00      	cmp	r3, #0
 800de74:	d003      	beq.n	800de7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800de7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de86:	2100      	movs	r1, #0
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	f003 0310 	and.w	r3, r3, #16
 800de8e:	60fb      	str	r3, [r7, #12]
 800de90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800de94:	460b      	mov	r3, r1
 800de96:	4313      	orrs	r3, r2
 800de98:	d011      	beq.n	800debe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800de9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de9e:	3328      	adds	r3, #40	@ 0x28
 800dea0:	2101      	movs	r1, #1
 800dea2:	4618      	mov	r0, r3
 800dea4:	f000 fbaa 	bl	800e5fc <RCCEx_PLL3_Config>
 800dea8:	4603      	mov	r3, r0
 800deaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800deae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d003      	beq.n	800debe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800deb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800deba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800debe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec6:	2100      	movs	r1, #0
 800dec8:	6039      	str	r1, [r7, #0]
 800deca:	f003 0320 	and.w	r3, r3, #32
 800dece:	607b      	str	r3, [r7, #4]
 800ded0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ded4:	460b      	mov	r3, r1
 800ded6:	4313      	orrs	r3, r2
 800ded8:	d011      	beq.n	800defe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800deda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dede:	3328      	adds	r3, #40	@ 0x28
 800dee0:	2102      	movs	r1, #2
 800dee2:	4618      	mov	r0, r3
 800dee4:	f000 fb8a 	bl	800e5fc <RCCEx_PLL3_Config>
 800dee8:	4603      	mov	r3, r0
 800deea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800deee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800def2:	2b00      	cmp	r3, #0
 800def4:	d003      	beq.n	800defe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800def6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800defa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800defe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800df02:	2b00      	cmp	r3, #0
 800df04:	d101      	bne.n	800df0a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800df06:	2300      	movs	r3, #0
 800df08:	e000      	b.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800df0a:	2301      	movs	r3, #1
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800df12:	46bd      	mov	sp, r7
 800df14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df18:	58024400 	.word	0x58024400

0800df1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800df20:	f7fe fd54 	bl	800c9cc <HAL_RCC_GetHCLKFreq>
 800df24:	4602      	mov	r2, r0
 800df26:	4b06      	ldr	r3, [pc, #24]	@ (800df40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800df28:	6a1b      	ldr	r3, [r3, #32]
 800df2a:	091b      	lsrs	r3, r3, #4
 800df2c:	f003 0307 	and.w	r3, r3, #7
 800df30:	4904      	ldr	r1, [pc, #16]	@ (800df44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800df32:	5ccb      	ldrb	r3, [r1, r3]
 800df34:	f003 031f 	and.w	r3, r3, #31
 800df38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	58024400 	.word	0x58024400
 800df44:	0802cfb0 	.word	0x0802cfb0

0800df48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800df48:	b480      	push	{r7}
 800df4a:	b089      	sub	sp, #36	@ 0x24
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800df50:	4ba1      	ldr	r3, [pc, #644]	@ (800e1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df54:	f003 0303 	and.w	r3, r3, #3
 800df58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800df5a:	4b9f      	ldr	r3, [pc, #636]	@ (800e1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df5e:	0b1b      	lsrs	r3, r3, #12
 800df60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800df64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800df66:	4b9c      	ldr	r3, [pc, #624]	@ (800e1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df6a:	091b      	lsrs	r3, r3, #4
 800df6c:	f003 0301 	and.w	r3, r3, #1
 800df70:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800df72:	4b99      	ldr	r3, [pc, #612]	@ (800e1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df76:	08db      	lsrs	r3, r3, #3
 800df78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800df7c:	693a      	ldr	r2, [r7, #16]
 800df7e:	fb02 f303 	mul.w	r3, r2, r3
 800df82:	ee07 3a90 	vmov	s15, r3
 800df86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	2b00      	cmp	r3, #0
 800df92:	f000 8111 	beq.w	800e1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800df96:	69bb      	ldr	r3, [r7, #24]
 800df98:	2b02      	cmp	r3, #2
 800df9a:	f000 8083 	beq.w	800e0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800df9e:	69bb      	ldr	r3, [r7, #24]
 800dfa0:	2b02      	cmp	r3, #2
 800dfa2:	f200 80a1 	bhi.w	800e0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800dfa6:	69bb      	ldr	r3, [r7, #24]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d003      	beq.n	800dfb4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800dfac:	69bb      	ldr	r3, [r7, #24]
 800dfae:	2b01      	cmp	r3, #1
 800dfb0:	d056      	beq.n	800e060 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800dfb2:	e099      	b.n	800e0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dfb4:	4b88      	ldr	r3, [pc, #544]	@ (800e1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f003 0320 	and.w	r3, r3, #32
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d02d      	beq.n	800e01c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dfc0:	4b85      	ldr	r3, [pc, #532]	@ (800e1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	08db      	lsrs	r3, r3, #3
 800dfc6:	f003 0303 	and.w	r3, r3, #3
 800dfca:	4a84      	ldr	r2, [pc, #528]	@ (800e1dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800dfcc:	fa22 f303 	lsr.w	r3, r2, r3
 800dfd0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	ee07 3a90 	vmov	s15, r3
 800dfd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	ee07 3a90 	vmov	s15, r3
 800dfe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfea:	4b7b      	ldr	r3, [pc, #492]	@ (800e1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dfec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dff2:	ee07 3a90 	vmov	s15, r3
 800dff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dffa:	ed97 6a03 	vldr	s12, [r7, #12]
 800dffe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e00a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e00e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e012:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e016:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e01a:	e087      	b.n	800e12c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	ee07 3a90 	vmov	s15, r3
 800e022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e026:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e02a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e02e:	4b6a      	ldr	r3, [pc, #424]	@ (800e1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e036:	ee07 3a90 	vmov	s15, r3
 800e03a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e03e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e042:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e04a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e04e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e05a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e05e:	e065      	b.n	800e12c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	ee07 3a90 	vmov	s15, r3
 800e066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e06a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e06e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e072:	4b59      	ldr	r3, [pc, #356]	@ (800e1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e07a:	ee07 3a90 	vmov	s15, r3
 800e07e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e082:	ed97 6a03 	vldr	s12, [r7, #12]
 800e086:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e08a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e08e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e09a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e09e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e0a2:	e043      	b.n	800e12c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	ee07 3a90 	vmov	s15, r3
 800e0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e1ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e0b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e0b6:	4b48      	ldr	r3, [pc, #288]	@ (800e1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e0b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0be:	ee07 3a90 	vmov	s15, r3
 800e0c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e0c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e0ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e0ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e0d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e0d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e0da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e0e6:	e021      	b.n	800e12c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	ee07 3a90 	vmov	s15, r3
 800e0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e0fa:	4b37      	ldr	r3, [pc, #220]	@ (800e1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e0fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e102:	ee07 3a90 	vmov	s15, r3
 800e106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e10a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e10e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e11a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e12a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e12c:	4b2a      	ldr	r3, [pc, #168]	@ (800e1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e12e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e130:	0a5b      	lsrs	r3, r3, #9
 800e132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e136:	ee07 3a90 	vmov	s15, r3
 800e13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e13e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e142:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e146:	edd7 6a07 	vldr	s13, [r7, #28]
 800e14a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e14e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e152:	ee17 2a90 	vmov	r2, s15
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e15a:	4b1f      	ldr	r3, [pc, #124]	@ (800e1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e15c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e15e:	0c1b      	lsrs	r3, r3, #16
 800e160:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e164:	ee07 3a90 	vmov	s15, r3
 800e168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e16c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e170:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e174:	edd7 6a07 	vldr	s13, [r7, #28]
 800e178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e17c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e180:	ee17 2a90 	vmov	r2, s15
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e188:	4b13      	ldr	r3, [pc, #76]	@ (800e1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e18a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e18c:	0e1b      	lsrs	r3, r3, #24
 800e18e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e192:	ee07 3a90 	vmov	s15, r3
 800e196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e19a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e19e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e1a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800e1a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e1aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e1ae:	ee17 2a90 	vmov	r2, s15
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e1b6:	e008      	b.n	800e1ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	609a      	str	r2, [r3, #8]
}
 800e1ca:	bf00      	nop
 800e1cc:	3724      	adds	r7, #36	@ 0x24
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr
 800e1d6:	bf00      	nop
 800e1d8:	58024400 	.word	0x58024400
 800e1dc:	03d09000 	.word	0x03d09000
 800e1e0:	46000000 	.word	0x46000000
 800e1e4:	4c742400 	.word	0x4c742400
 800e1e8:	4a742400 	.word	0x4a742400
 800e1ec:	4bbebc20 	.word	0x4bbebc20

0800e1f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b089      	sub	sp, #36	@ 0x24
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e1f8:	4ba1      	ldr	r3, [pc, #644]	@ (800e480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e1fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1fc:	f003 0303 	and.w	r3, r3, #3
 800e200:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e202:	4b9f      	ldr	r3, [pc, #636]	@ (800e480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e206:	0d1b      	lsrs	r3, r3, #20
 800e208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e20c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e20e:	4b9c      	ldr	r3, [pc, #624]	@ (800e480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e212:	0a1b      	lsrs	r3, r3, #8
 800e214:	f003 0301 	and.w	r3, r3, #1
 800e218:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e21a:	4b99      	ldr	r3, [pc, #612]	@ (800e480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e21c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e21e:	08db      	lsrs	r3, r3, #3
 800e220:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e224:	693a      	ldr	r2, [r7, #16]
 800e226:	fb02 f303 	mul.w	r3, r2, r3
 800e22a:	ee07 3a90 	vmov	s15, r3
 800e22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e232:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	f000 8111 	beq.w	800e460 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	2b02      	cmp	r3, #2
 800e242:	f000 8083 	beq.w	800e34c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e246:	69bb      	ldr	r3, [r7, #24]
 800e248:	2b02      	cmp	r3, #2
 800e24a:	f200 80a1 	bhi.w	800e390 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e24e:	69bb      	ldr	r3, [r7, #24]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d003      	beq.n	800e25c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e254:	69bb      	ldr	r3, [r7, #24]
 800e256:	2b01      	cmp	r3, #1
 800e258:	d056      	beq.n	800e308 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e25a:	e099      	b.n	800e390 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e25c:	4b88      	ldr	r3, [pc, #544]	@ (800e480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f003 0320 	and.w	r3, r3, #32
 800e264:	2b00      	cmp	r3, #0
 800e266:	d02d      	beq.n	800e2c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e268:	4b85      	ldr	r3, [pc, #532]	@ (800e480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	08db      	lsrs	r3, r3, #3
 800e26e:	f003 0303 	and.w	r3, r3, #3
 800e272:	4a84      	ldr	r2, [pc, #528]	@ (800e484 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e274:	fa22 f303 	lsr.w	r3, r2, r3
 800e278:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	ee07 3a90 	vmov	s15, r3
 800e280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	ee07 3a90 	vmov	s15, r3
 800e28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e28e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e292:	4b7b      	ldr	r3, [pc, #492]	@ (800e480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e29a:	ee07 3a90 	vmov	s15, r3
 800e29e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800e2a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e2aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e2b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e2c2:	e087      	b.n	800e3d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	ee07 3a90 	vmov	s15, r3
 800e2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e48c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e2d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2d6:	4b6a      	ldr	r3, [pc, #424]	@ (800e480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e2d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2de:	ee07 3a90 	vmov	s15, r3
 800e2e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e2ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e2ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e2fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e306:	e065      	b.n	800e3d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	ee07 3a90 	vmov	s15, r3
 800e30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e312:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e490 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e31a:	4b59      	ldr	r3, [pc, #356]	@ (800e480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e31c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e31e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e322:	ee07 3a90 	vmov	s15, r3
 800e326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e32a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e32e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e33a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e33e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e342:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e34a:	e043      	b.n	800e3d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	ee07 3a90 	vmov	s15, r3
 800e352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e356:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e494 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e35a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e35e:	4b48      	ldr	r3, [pc, #288]	@ (800e480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e366:	ee07 3a90 	vmov	s15, r3
 800e36a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e36e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e372:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e37a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e37e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e38a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e38e:	e021      	b.n	800e3d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	ee07 3a90 	vmov	s15, r3
 800e396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e39a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e490 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e39e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e3a2:	4b37      	ldr	r3, [pc, #220]	@ (800e480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e3a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3aa:	ee07 3a90 	vmov	s15, r3
 800e3ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e3b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800e3b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e3ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e3be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e3c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e3c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e3ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e3d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e3d4:	4b2a      	ldr	r3, [pc, #168]	@ (800e480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e3d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3d8:	0a5b      	lsrs	r3, r3, #9
 800e3da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e3de:	ee07 3a90 	vmov	s15, r3
 800e3e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e3ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e3ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800e3f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e3f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3fa:	ee17 2a90 	vmov	r2, s15
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e402:	4b1f      	ldr	r3, [pc, #124]	@ (800e480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e406:	0c1b      	lsrs	r3, r3, #16
 800e408:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e40c:	ee07 3a90 	vmov	s15, r3
 800e410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e414:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e418:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e41c:	edd7 6a07 	vldr	s13, [r7, #28]
 800e420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e428:	ee17 2a90 	vmov	r2, s15
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e430:	4b13      	ldr	r3, [pc, #76]	@ (800e480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e434:	0e1b      	lsrs	r3, r3, #24
 800e436:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e43a:	ee07 3a90 	vmov	s15, r3
 800e43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e442:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e446:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e44a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e44e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e456:	ee17 2a90 	vmov	r2, s15
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e45e:	e008      	b.n	800e472 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2200      	movs	r2, #0
 800e46a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2200      	movs	r2, #0
 800e470:	609a      	str	r2, [r3, #8]
}
 800e472:	bf00      	nop
 800e474:	3724      	adds	r7, #36	@ 0x24
 800e476:	46bd      	mov	sp, r7
 800e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47c:	4770      	bx	lr
 800e47e:	bf00      	nop
 800e480:	58024400 	.word	0x58024400
 800e484:	03d09000 	.word	0x03d09000
 800e488:	46000000 	.word	0x46000000
 800e48c:	4c742400 	.word	0x4c742400
 800e490:	4a742400 	.word	0x4a742400
 800e494:	4bbebc20 	.word	0x4bbebc20

0800e498 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b084      	sub	sp, #16
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e4a6:	4b53      	ldr	r3, [pc, #332]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e4a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4aa:	f003 0303 	and.w	r3, r3, #3
 800e4ae:	2b03      	cmp	r3, #3
 800e4b0:	d101      	bne.n	800e4b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	e099      	b.n	800e5ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e4b6:	4b4f      	ldr	r3, [pc, #316]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a4e      	ldr	r2, [pc, #312]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e4bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e4c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e4c2:	f7f8 fb8f 	bl	8006be4 <HAL_GetTick>
 800e4c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e4c8:	e008      	b.n	800e4dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e4ca:	f7f8 fb8b 	bl	8006be4 <HAL_GetTick>
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	1ad3      	subs	r3, r2, r3
 800e4d4:	2b02      	cmp	r3, #2
 800e4d6:	d901      	bls.n	800e4dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e4d8:	2303      	movs	r3, #3
 800e4da:	e086      	b.n	800e5ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e4dc:	4b45      	ldr	r3, [pc, #276]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d1f0      	bne.n	800e4ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e4e8:	4b42      	ldr	r3, [pc, #264]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e4ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	031b      	lsls	r3, r3, #12
 800e4f6:	493f      	ldr	r1, [pc, #252]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e4f8:	4313      	orrs	r3, r2
 800e4fa:	628b      	str	r3, [r1, #40]	@ 0x28
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	3b01      	subs	r3, #1
 800e502:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	689b      	ldr	r3, [r3, #8]
 800e50a:	3b01      	subs	r3, #1
 800e50c:	025b      	lsls	r3, r3, #9
 800e50e:	b29b      	uxth	r3, r3
 800e510:	431a      	orrs	r2, r3
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	68db      	ldr	r3, [r3, #12]
 800e516:	3b01      	subs	r3, #1
 800e518:	041b      	lsls	r3, r3, #16
 800e51a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e51e:	431a      	orrs	r2, r3
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	691b      	ldr	r3, [r3, #16]
 800e524:	3b01      	subs	r3, #1
 800e526:	061b      	lsls	r3, r3, #24
 800e528:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e52c:	4931      	ldr	r1, [pc, #196]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e52e:	4313      	orrs	r3, r2
 800e530:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e532:	4b30      	ldr	r3, [pc, #192]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e536:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	695b      	ldr	r3, [r3, #20]
 800e53e:	492d      	ldr	r1, [pc, #180]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e540:	4313      	orrs	r3, r2
 800e542:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e544:	4b2b      	ldr	r3, [pc, #172]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e548:	f023 0220 	bic.w	r2, r3, #32
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	699b      	ldr	r3, [r3, #24]
 800e550:	4928      	ldr	r1, [pc, #160]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e552:	4313      	orrs	r3, r2
 800e554:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e556:	4b27      	ldr	r3, [pc, #156]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e55a:	4a26      	ldr	r2, [pc, #152]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e55c:	f023 0310 	bic.w	r3, r3, #16
 800e560:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e562:	4b24      	ldr	r3, [pc, #144]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e564:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e566:	4b24      	ldr	r3, [pc, #144]	@ (800e5f8 <RCCEx_PLL2_Config+0x160>)
 800e568:	4013      	ands	r3, r2
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	69d2      	ldr	r2, [r2, #28]
 800e56e:	00d2      	lsls	r2, r2, #3
 800e570:	4920      	ldr	r1, [pc, #128]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e572:	4313      	orrs	r3, r2
 800e574:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e576:	4b1f      	ldr	r3, [pc, #124]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e57a:	4a1e      	ldr	r2, [pc, #120]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e57c:	f043 0310 	orr.w	r3, r3, #16
 800e580:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d106      	bne.n	800e596 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e588:	4b1a      	ldr	r3, [pc, #104]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e58c:	4a19      	ldr	r2, [pc, #100]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e58e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e592:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e594:	e00f      	b.n	800e5b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d106      	bne.n	800e5aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e59c:	4b15      	ldr	r3, [pc, #84]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5a0:	4a14      	ldr	r2, [pc, #80]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e5a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e5a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e5a8:	e005      	b.n	800e5b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e5aa:	4b12      	ldr	r3, [pc, #72]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e5ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5ae:	4a11      	ldr	r2, [pc, #68]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e5b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e5b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e5b6:	4b0f      	ldr	r3, [pc, #60]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4a0e      	ldr	r2, [pc, #56]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e5bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e5c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e5c2:	f7f8 fb0f 	bl	8006be4 <HAL_GetTick>
 800e5c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e5c8:	e008      	b.n	800e5dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e5ca:	f7f8 fb0b 	bl	8006be4 <HAL_GetTick>
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	1ad3      	subs	r3, r2, r3
 800e5d4:	2b02      	cmp	r3, #2
 800e5d6:	d901      	bls.n	800e5dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e5d8:	2303      	movs	r3, #3
 800e5da:	e006      	b.n	800e5ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e5dc:	4b05      	ldr	r3, [pc, #20]	@ (800e5f4 <RCCEx_PLL2_Config+0x15c>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d0f0      	beq.n	800e5ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	58024400 	.word	0x58024400
 800e5f8:	ffff0007 	.word	0xffff0007

0800e5fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b084      	sub	sp, #16
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e606:	2300      	movs	r3, #0
 800e608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e60a:	4b53      	ldr	r3, [pc, #332]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e60c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e60e:	f003 0303 	and.w	r3, r3, #3
 800e612:	2b03      	cmp	r3, #3
 800e614:	d101      	bne.n	800e61a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e616:	2301      	movs	r3, #1
 800e618:	e099      	b.n	800e74e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e61a:	4b4f      	ldr	r3, [pc, #316]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4a4e      	ldr	r2, [pc, #312]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e626:	f7f8 fadd 	bl	8006be4 <HAL_GetTick>
 800e62a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e62c:	e008      	b.n	800e640 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e62e:	f7f8 fad9 	bl	8006be4 <HAL_GetTick>
 800e632:	4602      	mov	r2, r0
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	1ad3      	subs	r3, r2, r3
 800e638:	2b02      	cmp	r3, #2
 800e63a:	d901      	bls.n	800e640 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e63c:	2303      	movs	r3, #3
 800e63e:	e086      	b.n	800e74e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e640:	4b45      	ldr	r3, [pc, #276]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d1f0      	bne.n	800e62e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e64c:	4b42      	ldr	r3, [pc, #264]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e64e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e650:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	051b      	lsls	r3, r3, #20
 800e65a:	493f      	ldr	r1, [pc, #252]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e65c:	4313      	orrs	r3, r2
 800e65e:	628b      	str	r3, [r1, #40]	@ 0x28
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	3b01      	subs	r3, #1
 800e666:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	689b      	ldr	r3, [r3, #8]
 800e66e:	3b01      	subs	r3, #1
 800e670:	025b      	lsls	r3, r3, #9
 800e672:	b29b      	uxth	r3, r3
 800e674:	431a      	orrs	r2, r3
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	3b01      	subs	r3, #1
 800e67c:	041b      	lsls	r3, r3, #16
 800e67e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e682:	431a      	orrs	r2, r3
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	691b      	ldr	r3, [r3, #16]
 800e688:	3b01      	subs	r3, #1
 800e68a:	061b      	lsls	r3, r3, #24
 800e68c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e690:	4931      	ldr	r1, [pc, #196]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e692:	4313      	orrs	r3, r2
 800e694:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e696:	4b30      	ldr	r3, [pc, #192]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e69a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	695b      	ldr	r3, [r3, #20]
 800e6a2:	492d      	ldr	r1, [pc, #180]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e6a8:	4b2b      	ldr	r3, [pc, #172]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e6aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	699b      	ldr	r3, [r3, #24]
 800e6b4:	4928      	ldr	r1, [pc, #160]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e6b6:	4313      	orrs	r3, r2
 800e6b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e6ba:	4b27      	ldr	r3, [pc, #156]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e6bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6be:	4a26      	ldr	r2, [pc, #152]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e6c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e6c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e6c6:	4b24      	ldr	r3, [pc, #144]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e6c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e6ca:	4b24      	ldr	r3, [pc, #144]	@ (800e75c <RCCEx_PLL3_Config+0x160>)
 800e6cc:	4013      	ands	r3, r2
 800e6ce:	687a      	ldr	r2, [r7, #4]
 800e6d0:	69d2      	ldr	r2, [r2, #28]
 800e6d2:	00d2      	lsls	r2, r2, #3
 800e6d4:	4920      	ldr	r1, [pc, #128]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e6da:	4b1f      	ldr	r3, [pc, #124]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6de:	4a1e      	ldr	r2, [pc, #120]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e6e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e6e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d106      	bne.n	800e6fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e6ec:	4b1a      	ldr	r3, [pc, #104]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6f0:	4a19      	ldr	r2, [pc, #100]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e6f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e6f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e6f8:	e00f      	b.n	800e71a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	2b01      	cmp	r3, #1
 800e6fe:	d106      	bne.n	800e70e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e700:	4b15      	ldr	r3, [pc, #84]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e704:	4a14      	ldr	r2, [pc, #80]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e706:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e70a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e70c:	e005      	b.n	800e71a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e70e:	4b12      	ldr	r3, [pc, #72]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e712:	4a11      	ldr	r2, [pc, #68]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e714:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e718:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e71a:	4b0f      	ldr	r3, [pc, #60]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4a0e      	ldr	r2, [pc, #56]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e726:	f7f8 fa5d 	bl	8006be4 <HAL_GetTick>
 800e72a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e72c:	e008      	b.n	800e740 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e72e:	f7f8 fa59 	bl	8006be4 <HAL_GetTick>
 800e732:	4602      	mov	r2, r0
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	1ad3      	subs	r3, r2, r3
 800e738:	2b02      	cmp	r3, #2
 800e73a:	d901      	bls.n	800e740 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e73c:	2303      	movs	r3, #3
 800e73e:	e006      	b.n	800e74e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e740:	4b05      	ldr	r3, [pc, #20]	@ (800e758 <RCCEx_PLL3_Config+0x15c>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d0f0      	beq.n	800e72e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e74c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3710      	adds	r7, #16
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop
 800e758:	58024400 	.word	0x58024400
 800e75c:	ffff0007 	.word	0xffff0007

0800e760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d101      	bne.n	800e772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e76e:	2301      	movs	r3, #1
 800e770:	e049      	b.n	800e806 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e778:	b2db      	uxtb	r3, r3
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d106      	bne.n	800e78c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2200      	movs	r2, #0
 800e782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 f841 	bl	800e80e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2202      	movs	r2, #2
 800e790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681a      	ldr	r2, [r3, #0]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	3304      	adds	r3, #4
 800e79c:	4619      	mov	r1, r3
 800e79e:	4610      	mov	r0, r2
 800e7a0:	f000 f9e8 	bl	800eb74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2201      	movs	r2, #1
 800e7c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2201      	movs	r2, #1
 800e7e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2201      	movs	r2, #1
 800e800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e804:	2300      	movs	r3, #0
}
 800e806:	4618      	mov	r0, r3
 800e808:	3708      	adds	r7, #8
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}

0800e80e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e80e:	b480      	push	{r7}
 800e810:	b083      	sub	sp, #12
 800e812:	af00      	add	r7, sp, #0
 800e814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e816:	bf00      	nop
 800e818:	370c      	adds	r7, #12
 800e81a:	46bd      	mov	sp, r7
 800e81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e820:	4770      	bx	lr
	...

0800e824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e824:	b480      	push	{r7}
 800e826:	b085      	sub	sp, #20
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e832:	b2db      	uxtb	r3, r3
 800e834:	2b01      	cmp	r3, #1
 800e836:	d001      	beq.n	800e83c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e838:	2301      	movs	r3, #1
 800e83a:	e054      	b.n	800e8e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2202      	movs	r2, #2
 800e840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	68da      	ldr	r2, [r3, #12]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f042 0201 	orr.w	r2, r2, #1
 800e852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4a26      	ldr	r2, [pc, #152]	@ (800e8f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d022      	beq.n	800e8a4 <HAL_TIM_Base_Start_IT+0x80>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e866:	d01d      	beq.n	800e8a4 <HAL_TIM_Base_Start_IT+0x80>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4a22      	ldr	r2, [pc, #136]	@ (800e8f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d018      	beq.n	800e8a4 <HAL_TIM_Base_Start_IT+0x80>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	4a21      	ldr	r2, [pc, #132]	@ (800e8fc <HAL_TIM_Base_Start_IT+0xd8>)
 800e878:	4293      	cmp	r3, r2
 800e87a:	d013      	beq.n	800e8a4 <HAL_TIM_Base_Start_IT+0x80>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a1f      	ldr	r2, [pc, #124]	@ (800e900 <HAL_TIM_Base_Start_IT+0xdc>)
 800e882:	4293      	cmp	r3, r2
 800e884:	d00e      	beq.n	800e8a4 <HAL_TIM_Base_Start_IT+0x80>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	4a1e      	ldr	r2, [pc, #120]	@ (800e904 <HAL_TIM_Base_Start_IT+0xe0>)
 800e88c:	4293      	cmp	r3, r2
 800e88e:	d009      	beq.n	800e8a4 <HAL_TIM_Base_Start_IT+0x80>
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4a1c      	ldr	r2, [pc, #112]	@ (800e908 <HAL_TIM_Base_Start_IT+0xe4>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d004      	beq.n	800e8a4 <HAL_TIM_Base_Start_IT+0x80>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	4a1b      	ldr	r2, [pc, #108]	@ (800e90c <HAL_TIM_Base_Start_IT+0xe8>)
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d115      	bne.n	800e8d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	689a      	ldr	r2, [r3, #8]
 800e8aa:	4b19      	ldr	r3, [pc, #100]	@ (800e910 <HAL_TIM_Base_Start_IT+0xec>)
 800e8ac:	4013      	ands	r3, r2
 800e8ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2b06      	cmp	r3, #6
 800e8b4:	d015      	beq.n	800e8e2 <HAL_TIM_Base_Start_IT+0xbe>
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8bc:	d011      	beq.n	800e8e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	681a      	ldr	r2, [r3, #0]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f042 0201 	orr.w	r2, r2, #1
 800e8cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8ce:	e008      	b.n	800e8e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	f042 0201 	orr.w	r2, r2, #1
 800e8de:	601a      	str	r2, [r3, #0]
 800e8e0:	e000      	b.n	800e8e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e8e4:	2300      	movs	r3, #0
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3714      	adds	r7, #20
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f0:	4770      	bx	lr
 800e8f2:	bf00      	nop
 800e8f4:	40010000 	.word	0x40010000
 800e8f8:	40000400 	.word	0x40000400
 800e8fc:	40000800 	.word	0x40000800
 800e900:	40000c00 	.word	0x40000c00
 800e904:	40010400 	.word	0x40010400
 800e908:	40001800 	.word	0x40001800
 800e90c:	40014000 	.word	0x40014000
 800e910:	00010007 	.word	0x00010007

0800e914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b084      	sub	sp, #16
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	68db      	ldr	r3, [r3, #12]
 800e922:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	691b      	ldr	r3, [r3, #16]
 800e92a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	f003 0302 	and.w	r3, r3, #2
 800e932:	2b00      	cmp	r3, #0
 800e934:	d020      	beq.n	800e978 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f003 0302 	and.w	r3, r3, #2
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d01b      	beq.n	800e978 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f06f 0202 	mvn.w	r2, #2
 800e948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2201      	movs	r2, #1
 800e94e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	699b      	ldr	r3, [r3, #24]
 800e956:	f003 0303 	and.w	r3, r3, #3
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d003      	beq.n	800e966 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 f8e9 	bl	800eb36 <HAL_TIM_IC_CaptureCallback>
 800e964:	e005      	b.n	800e972 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f000 f8db 	bl	800eb22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f000 f8ec 	bl	800eb4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2200      	movs	r2, #0
 800e976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	f003 0304 	and.w	r3, r3, #4
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d020      	beq.n	800e9c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f003 0304 	and.w	r3, r3, #4
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d01b      	beq.n	800e9c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	f06f 0204 	mvn.w	r2, #4
 800e994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2202      	movs	r2, #2
 800e99a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	699b      	ldr	r3, [r3, #24]
 800e9a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d003      	beq.n	800e9b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 f8c3 	bl	800eb36 <HAL_TIM_IC_CaptureCallback>
 800e9b0:	e005      	b.n	800e9be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f000 f8b5 	bl	800eb22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f000 f8c6 	bl	800eb4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	f003 0308 	and.w	r3, r3, #8
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d020      	beq.n	800ea10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	f003 0308 	and.w	r3, r3, #8
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d01b      	beq.n	800ea10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	f06f 0208 	mvn.w	r2, #8
 800e9e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2204      	movs	r2, #4
 800e9e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	69db      	ldr	r3, [r3, #28]
 800e9ee:	f003 0303 	and.w	r3, r3, #3
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d003      	beq.n	800e9fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 f89d 	bl	800eb36 <HAL_TIM_IC_CaptureCallback>
 800e9fc:	e005      	b.n	800ea0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f000 f88f 	bl	800eb22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f000 f8a0 	bl	800eb4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	f003 0310 	and.w	r3, r3, #16
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d020      	beq.n	800ea5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f003 0310 	and.w	r3, r3, #16
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d01b      	beq.n	800ea5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f06f 0210 	mvn.w	r2, #16
 800ea2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2208      	movs	r2, #8
 800ea32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	69db      	ldr	r3, [r3, #28]
 800ea3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d003      	beq.n	800ea4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f000 f877 	bl	800eb36 <HAL_TIM_IC_CaptureCallback>
 800ea48:	e005      	b.n	800ea56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 f869 	bl	800eb22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 f87a 	bl	800eb4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	f003 0301 	and.w	r3, r3, #1
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d00c      	beq.n	800ea80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f003 0301 	and.w	r3, r3, #1
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d007      	beq.n	800ea80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f06f 0201 	mvn.w	r2, #1
 800ea78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f7f6 fc30 	bl	80052e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d104      	bne.n	800ea94 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d00c      	beq.n	800eaae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d007      	beq.n	800eaae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800eaa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f000 f913 	bl	800ecd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d00c      	beq.n	800ead2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d007      	beq.n	800ead2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800eaca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f000 f90b 	bl	800ece8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d00c      	beq.n	800eaf6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d007      	beq.n	800eaf6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800eaee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f000 f834 	bl	800eb5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	f003 0320 	and.w	r3, r3, #32
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d00c      	beq.n	800eb1a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f003 0320 	and.w	r3, r3, #32
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d007      	beq.n	800eb1a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f06f 0220 	mvn.w	r2, #32
 800eb12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f000 f8d3 	bl	800ecc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eb1a:	bf00      	nop
 800eb1c:	3710      	adds	r7, #16
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eb22:	b480      	push	{r7}
 800eb24:	b083      	sub	sp, #12
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eb2a:	bf00      	nop
 800eb2c:	370c      	adds	r7, #12
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr

0800eb36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eb36:	b480      	push	{r7}
 800eb38:	b083      	sub	sp, #12
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eb3e:	bf00      	nop
 800eb40:	370c      	adds	r7, #12
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr

0800eb4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eb4a:	b480      	push	{r7}
 800eb4c:	b083      	sub	sp, #12
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eb52:	bf00      	nop
 800eb54:	370c      	adds	r7, #12
 800eb56:	46bd      	mov	sp, r7
 800eb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5c:	4770      	bx	lr

0800eb5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eb5e:	b480      	push	{r7}
 800eb60:	b083      	sub	sp, #12
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eb66:	bf00      	nop
 800eb68:	370c      	adds	r7, #12
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr
	...

0800eb74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eb74:	b480      	push	{r7}
 800eb76:	b085      	sub	sp, #20
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	4a46      	ldr	r2, [pc, #280]	@ (800eca0 <TIM_Base_SetConfig+0x12c>)
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d013      	beq.n	800ebb4 <TIM_Base_SetConfig+0x40>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb92:	d00f      	beq.n	800ebb4 <TIM_Base_SetConfig+0x40>
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	4a43      	ldr	r2, [pc, #268]	@ (800eca4 <TIM_Base_SetConfig+0x130>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d00b      	beq.n	800ebb4 <TIM_Base_SetConfig+0x40>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	4a42      	ldr	r2, [pc, #264]	@ (800eca8 <TIM_Base_SetConfig+0x134>)
 800eba0:	4293      	cmp	r3, r2
 800eba2:	d007      	beq.n	800ebb4 <TIM_Base_SetConfig+0x40>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	4a41      	ldr	r2, [pc, #260]	@ (800ecac <TIM_Base_SetConfig+0x138>)
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	d003      	beq.n	800ebb4 <TIM_Base_SetConfig+0x40>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	4a40      	ldr	r2, [pc, #256]	@ (800ecb0 <TIM_Base_SetConfig+0x13c>)
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d108      	bne.n	800ebc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ebba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	685b      	ldr	r3, [r3, #4]
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	4a35      	ldr	r2, [pc, #212]	@ (800eca0 <TIM_Base_SetConfig+0x12c>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d01f      	beq.n	800ec0e <TIM_Base_SetConfig+0x9a>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ebd4:	d01b      	beq.n	800ec0e <TIM_Base_SetConfig+0x9a>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	4a32      	ldr	r2, [pc, #200]	@ (800eca4 <TIM_Base_SetConfig+0x130>)
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d017      	beq.n	800ec0e <TIM_Base_SetConfig+0x9a>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	4a31      	ldr	r2, [pc, #196]	@ (800eca8 <TIM_Base_SetConfig+0x134>)
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d013      	beq.n	800ec0e <TIM_Base_SetConfig+0x9a>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	4a30      	ldr	r2, [pc, #192]	@ (800ecac <TIM_Base_SetConfig+0x138>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d00f      	beq.n	800ec0e <TIM_Base_SetConfig+0x9a>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	4a2f      	ldr	r2, [pc, #188]	@ (800ecb0 <TIM_Base_SetConfig+0x13c>)
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	d00b      	beq.n	800ec0e <TIM_Base_SetConfig+0x9a>
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	4a2e      	ldr	r2, [pc, #184]	@ (800ecb4 <TIM_Base_SetConfig+0x140>)
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	d007      	beq.n	800ec0e <TIM_Base_SetConfig+0x9a>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	4a2d      	ldr	r2, [pc, #180]	@ (800ecb8 <TIM_Base_SetConfig+0x144>)
 800ec02:	4293      	cmp	r3, r2
 800ec04:	d003      	beq.n	800ec0e <TIM_Base_SetConfig+0x9a>
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	4a2c      	ldr	r2, [pc, #176]	@ (800ecbc <TIM_Base_SetConfig+0x148>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d108      	bne.n	800ec20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ec14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	68db      	ldr	r3, [r3, #12]
 800ec1a:	68fa      	ldr	r2, [r7, #12]
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	695b      	ldr	r3, [r3, #20]
 800ec2a:	4313      	orrs	r3, r2
 800ec2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	68fa      	ldr	r2, [r7, #12]
 800ec32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	689a      	ldr	r2, [r3, #8]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	681a      	ldr	r2, [r3, #0]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	4a16      	ldr	r2, [pc, #88]	@ (800eca0 <TIM_Base_SetConfig+0x12c>)
 800ec48:	4293      	cmp	r3, r2
 800ec4a:	d00f      	beq.n	800ec6c <TIM_Base_SetConfig+0xf8>
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	4a18      	ldr	r2, [pc, #96]	@ (800ecb0 <TIM_Base_SetConfig+0x13c>)
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d00b      	beq.n	800ec6c <TIM_Base_SetConfig+0xf8>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	4a17      	ldr	r2, [pc, #92]	@ (800ecb4 <TIM_Base_SetConfig+0x140>)
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d007      	beq.n	800ec6c <TIM_Base_SetConfig+0xf8>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	4a16      	ldr	r2, [pc, #88]	@ (800ecb8 <TIM_Base_SetConfig+0x144>)
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d003      	beq.n	800ec6c <TIM_Base_SetConfig+0xf8>
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	4a15      	ldr	r2, [pc, #84]	@ (800ecbc <TIM_Base_SetConfig+0x148>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d103      	bne.n	800ec74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	691a      	ldr	r2, [r3, #16]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2201      	movs	r2, #1
 800ec78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	691b      	ldr	r3, [r3, #16]
 800ec7e:	f003 0301 	and.w	r3, r3, #1
 800ec82:	2b01      	cmp	r3, #1
 800ec84:	d105      	bne.n	800ec92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	691b      	ldr	r3, [r3, #16]
 800ec8a:	f023 0201 	bic.w	r2, r3, #1
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	611a      	str	r2, [r3, #16]
  }
}
 800ec92:	bf00      	nop
 800ec94:	3714      	adds	r7, #20
 800ec96:	46bd      	mov	sp, r7
 800ec98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9c:	4770      	bx	lr
 800ec9e:	bf00      	nop
 800eca0:	40010000 	.word	0x40010000
 800eca4:	40000400 	.word	0x40000400
 800eca8:	40000800 	.word	0x40000800
 800ecac:	40000c00 	.word	0x40000c00
 800ecb0:	40010400 	.word	0x40010400
 800ecb4:	40014000 	.word	0x40014000
 800ecb8:	40014400 	.word	0x40014400
 800ecbc:	40014800 	.word	0x40014800

0800ecc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b083      	sub	sp, #12
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ecc8:	bf00      	nop
 800ecca:	370c      	adds	r7, #12
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr

0800ecd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b083      	sub	sp, #12
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ecdc:	bf00      	nop
 800ecde:	370c      	adds	r7, #12
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b083      	sub	sp, #12
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ecf0:	bf00      	nop
 800ecf2:	370c      	adds	r7, #12
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr

0800ecfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d101      	bne.n	800ed0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	e042      	b.n	800ed94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d106      	bne.n	800ed26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f7f6 ffc9 	bl	8005cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2224      	movs	r2, #36	@ 0x24
 800ed2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	681a      	ldr	r2, [r3, #0]
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	f022 0201 	bic.w	r2, r2, #1
 800ed3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d002      	beq.n	800ed4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f001 f9f6 	bl	8010138 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f000 fc8b 	bl	800f668 <UART_SetConfig>
 800ed52:	4603      	mov	r3, r0
 800ed54:	2b01      	cmp	r3, #1
 800ed56:	d101      	bne.n	800ed5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	e01b      	b.n	800ed94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	685a      	ldr	r2, [r3, #4]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ed6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	689a      	ldr	r2, [r3, #8]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ed7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f042 0201 	orr.w	r2, r2, #1
 800ed8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f001 fa75 	bl	801027c <UART_CheckIdleState>
 800ed92:	4603      	mov	r3, r0
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3708      	adds	r7, #8
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b08a      	sub	sp, #40	@ 0x28
 800eda0:	af02      	add	r7, sp, #8
 800eda2:	60f8      	str	r0, [r7, #12]
 800eda4:	60b9      	str	r1, [r7, #8]
 800eda6:	603b      	str	r3, [r7, #0]
 800eda8:	4613      	mov	r3, r2
 800edaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800edb2:	2b20      	cmp	r3, #32
 800edb4:	d17b      	bne.n	800eeae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d002      	beq.n	800edc2 <HAL_UART_Transmit+0x26>
 800edbc:	88fb      	ldrh	r3, [r7, #6]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d101      	bne.n	800edc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800edc2:	2301      	movs	r3, #1
 800edc4:	e074      	b.n	800eeb0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2200      	movs	r2, #0
 800edca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	2221      	movs	r2, #33	@ 0x21
 800edd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800edd6:	f7f7 ff05 	bl	8006be4 <HAL_GetTick>
 800edda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	88fa      	ldrh	r2, [r7, #6]
 800ede0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	88fa      	ldrh	r2, [r7, #6]
 800ede8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	689b      	ldr	r3, [r3, #8]
 800edf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800edf4:	d108      	bne.n	800ee08 <HAL_UART_Transmit+0x6c>
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	691b      	ldr	r3, [r3, #16]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d104      	bne.n	800ee08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800edfe:	2300      	movs	r3, #0
 800ee00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	61bb      	str	r3, [r7, #24]
 800ee06:	e003      	b.n	800ee10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ee10:	e030      	b.n	800ee74 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	9300      	str	r3, [sp, #0]
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	2180      	movs	r1, #128	@ 0x80
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f001 fad7 	bl	80103d0 <UART_WaitOnFlagUntilTimeout>
 800ee22:	4603      	mov	r3, r0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d005      	beq.n	800ee34 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2220      	movs	r2, #32
 800ee2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ee30:	2303      	movs	r3, #3
 800ee32:	e03d      	b.n	800eeb0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ee34:	69fb      	ldr	r3, [r7, #28]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d10b      	bne.n	800ee52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ee3a:	69bb      	ldr	r3, [r7, #24]
 800ee3c:	881b      	ldrh	r3, [r3, #0]
 800ee3e:	461a      	mov	r2, r3
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ee48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	3302      	adds	r3, #2
 800ee4e:	61bb      	str	r3, [r7, #24]
 800ee50:	e007      	b.n	800ee62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	781a      	ldrb	r2, [r3, #0]
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ee5c:	69fb      	ldr	r3, [r7, #28]
 800ee5e:	3301      	adds	r3, #1
 800ee60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ee68:	b29b      	uxth	r3, r3
 800ee6a:	3b01      	subs	r3, #1
 800ee6c:	b29a      	uxth	r2, r3
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d1c8      	bne.n	800ee12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	9300      	str	r3, [sp, #0]
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	2200      	movs	r2, #0
 800ee88:	2140      	movs	r1, #64	@ 0x40
 800ee8a:	68f8      	ldr	r0, [r7, #12]
 800ee8c:	f001 faa0 	bl	80103d0 <UART_WaitOnFlagUntilTimeout>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d005      	beq.n	800eea2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	2220      	movs	r2, #32
 800ee9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ee9e:	2303      	movs	r3, #3
 800eea0:	e006      	b.n	800eeb0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2220      	movs	r2, #32
 800eea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	e000      	b.n	800eeb0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800eeae:	2302      	movs	r3, #2
  }
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3720      	adds	r7, #32
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b0ba      	sub	sp, #232	@ 0xe8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	69db      	ldr	r3, [r3, #28]
 800eec6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	689b      	ldr	r3, [r3, #8]
 800eeda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800eede:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800eee2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800eee6:	4013      	ands	r3, r2
 800eee8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800eeec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d11b      	bne.n	800ef2c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eef8:	f003 0320 	and.w	r3, r3, #32
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d015      	beq.n	800ef2c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ef00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ef04:	f003 0320 	and.w	r3, r3, #32
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d105      	bne.n	800ef18 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ef0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ef10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d009      	beq.n	800ef2c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	f000 8377 	beq.w	800f610 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	4798      	blx	r3
      }
      return;
 800ef2a:	e371      	b.n	800f610 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ef2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	f000 8123 	beq.w	800f17c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ef36:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ef3a:	4b8d      	ldr	r3, [pc, #564]	@ (800f170 <HAL_UART_IRQHandler+0x2b8>)
 800ef3c:	4013      	ands	r3, r2
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d106      	bne.n	800ef50 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ef42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ef46:	4b8b      	ldr	r3, [pc, #556]	@ (800f174 <HAL_UART_IRQHandler+0x2bc>)
 800ef48:	4013      	ands	r3, r2
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	f000 8116 	beq.w	800f17c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ef50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef54:	f003 0301 	and.w	r3, r3, #1
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d011      	beq.n	800ef80 <HAL_UART_IRQHandler+0xc8>
 800ef5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ef60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d00b      	beq.n	800ef80 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	2201      	movs	r2, #1
 800ef6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef76:	f043 0201 	orr.w	r2, r3, #1
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef84:	f003 0302 	and.w	r3, r3, #2
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d011      	beq.n	800efb0 <HAL_UART_IRQHandler+0xf8>
 800ef8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ef90:	f003 0301 	and.w	r3, r3, #1
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d00b      	beq.n	800efb0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	2202      	movs	r2, #2
 800ef9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efa6:	f043 0204 	orr.w	r2, r3, #4
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800efb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800efb4:	f003 0304 	and.w	r3, r3, #4
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d011      	beq.n	800efe0 <HAL_UART_IRQHandler+0x128>
 800efbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800efc0:	f003 0301 	and.w	r3, r3, #1
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d00b      	beq.n	800efe0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	2204      	movs	r2, #4
 800efce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efd6:	f043 0202 	orr.w	r2, r3, #2
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800efe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800efe4:	f003 0308 	and.w	r3, r3, #8
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d017      	beq.n	800f01c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800efec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eff0:	f003 0320 	and.w	r3, r3, #32
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d105      	bne.n	800f004 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800eff8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800effc:	4b5c      	ldr	r3, [pc, #368]	@ (800f170 <HAL_UART_IRQHandler+0x2b8>)
 800effe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f000:	2b00      	cmp	r3, #0
 800f002:	d00b      	beq.n	800f01c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	2208      	movs	r2, #8
 800f00a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f012:	f043 0208 	orr.w	r2, r3, #8
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f01c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f024:	2b00      	cmp	r3, #0
 800f026:	d012      	beq.n	800f04e <HAL_UART_IRQHandler+0x196>
 800f028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f02c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f030:	2b00      	cmp	r3, #0
 800f032:	d00c      	beq.n	800f04e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f03c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f044:	f043 0220 	orr.w	r2, r3, #32
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f054:	2b00      	cmp	r3, #0
 800f056:	f000 82dd 	beq.w	800f614 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f05a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f05e:	f003 0320 	and.w	r3, r3, #32
 800f062:	2b00      	cmp	r3, #0
 800f064:	d013      	beq.n	800f08e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f06a:	f003 0320 	and.w	r3, r3, #32
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d105      	bne.n	800f07e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d007      	beq.n	800f08e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f082:	2b00      	cmp	r3, #0
 800f084:	d003      	beq.n	800f08e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f094:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	689b      	ldr	r3, [r3, #8]
 800f09e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0a2:	2b40      	cmp	r3, #64	@ 0x40
 800f0a4:	d005      	beq.n	800f0b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f0a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f0aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d054      	beq.n	800f15c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f001 fc04 	bl	80108c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	689b      	ldr	r3, [r3, #8]
 800f0be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0c2:	2b40      	cmp	r3, #64	@ 0x40
 800f0c4:	d146      	bne.n	800f154 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	3308      	adds	r3, #8
 800f0cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f0d4:	e853 3f00 	ldrex	r3, [r3]
 800f0d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f0dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f0e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f0e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	3308      	adds	r3, #8
 800f0ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f0f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f0f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f0fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f102:	e841 2300 	strex	r3, r2, [r1]
 800f106:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f10a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d1d9      	bne.n	800f0c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d017      	beq.n	800f14c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f122:	4a15      	ldr	r2, [pc, #84]	@ (800f178 <HAL_UART_IRQHandler+0x2c0>)
 800f124:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f12c:	4618      	mov	r0, r3
 800f12e:	f7f8 ffe5 	bl	80080fc <HAL_DMA_Abort_IT>
 800f132:	4603      	mov	r3, r0
 800f134:	2b00      	cmp	r3, #0
 800f136:	d019      	beq.n	800f16c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f13e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f146:	4610      	mov	r0, r2
 800f148:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f14a:	e00f      	b.n	800f16c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f7f5 fb21 	bl	8004794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f152:	e00b      	b.n	800f16c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f7f5 fb1d 	bl	8004794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f15a:	e007      	b.n	800f16c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f7f5 fb19 	bl	8004794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2200      	movs	r2, #0
 800f166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f16a:	e253      	b.n	800f614 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f16c:	bf00      	nop
    return;
 800f16e:	e251      	b.n	800f614 <HAL_UART_IRQHandler+0x75c>
 800f170:	10000001 	.word	0x10000001
 800f174:	04000120 	.word	0x04000120
 800f178:	08010b73 	.word	0x08010b73

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f180:	2b01      	cmp	r3, #1
 800f182:	f040 81e7 	bne.w	800f554 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f18a:	f003 0310 	and.w	r3, r3, #16
 800f18e:	2b00      	cmp	r3, #0
 800f190:	f000 81e0 	beq.w	800f554 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f198:	f003 0310 	and.w	r3, r3, #16
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	f000 81d9 	beq.w	800f554 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	2210      	movs	r2, #16
 800f1a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	689b      	ldr	r3, [r3, #8]
 800f1b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1b4:	2b40      	cmp	r3, #64	@ 0x40
 800f1b6:	f040 8151 	bne.w	800f45c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	4a96      	ldr	r2, [pc, #600]	@ (800f41c <HAL_UART_IRQHandler+0x564>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d068      	beq.n	800f29a <HAL_UART_IRQHandler+0x3e2>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	4a93      	ldr	r2, [pc, #588]	@ (800f420 <HAL_UART_IRQHandler+0x568>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d061      	beq.n	800f29a <HAL_UART_IRQHandler+0x3e2>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	4a91      	ldr	r2, [pc, #580]	@ (800f424 <HAL_UART_IRQHandler+0x56c>)
 800f1e0:	4293      	cmp	r3, r2
 800f1e2:	d05a      	beq.n	800f29a <HAL_UART_IRQHandler+0x3e2>
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4a8e      	ldr	r2, [pc, #568]	@ (800f428 <HAL_UART_IRQHandler+0x570>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d053      	beq.n	800f29a <HAL_UART_IRQHandler+0x3e2>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	4a8c      	ldr	r2, [pc, #560]	@ (800f42c <HAL_UART_IRQHandler+0x574>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d04c      	beq.n	800f29a <HAL_UART_IRQHandler+0x3e2>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4a89      	ldr	r2, [pc, #548]	@ (800f430 <HAL_UART_IRQHandler+0x578>)
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d045      	beq.n	800f29a <HAL_UART_IRQHandler+0x3e2>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	4a87      	ldr	r2, [pc, #540]	@ (800f434 <HAL_UART_IRQHandler+0x57c>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d03e      	beq.n	800f29a <HAL_UART_IRQHandler+0x3e2>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	4a84      	ldr	r2, [pc, #528]	@ (800f438 <HAL_UART_IRQHandler+0x580>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d037      	beq.n	800f29a <HAL_UART_IRQHandler+0x3e2>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	4a82      	ldr	r2, [pc, #520]	@ (800f43c <HAL_UART_IRQHandler+0x584>)
 800f234:	4293      	cmp	r3, r2
 800f236:	d030      	beq.n	800f29a <HAL_UART_IRQHandler+0x3e2>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4a7f      	ldr	r2, [pc, #508]	@ (800f440 <HAL_UART_IRQHandler+0x588>)
 800f242:	4293      	cmp	r3, r2
 800f244:	d029      	beq.n	800f29a <HAL_UART_IRQHandler+0x3e2>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	4a7d      	ldr	r2, [pc, #500]	@ (800f444 <HAL_UART_IRQHandler+0x58c>)
 800f250:	4293      	cmp	r3, r2
 800f252:	d022      	beq.n	800f29a <HAL_UART_IRQHandler+0x3e2>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	4a7a      	ldr	r2, [pc, #488]	@ (800f448 <HAL_UART_IRQHandler+0x590>)
 800f25e:	4293      	cmp	r3, r2
 800f260:	d01b      	beq.n	800f29a <HAL_UART_IRQHandler+0x3e2>
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	4a78      	ldr	r2, [pc, #480]	@ (800f44c <HAL_UART_IRQHandler+0x594>)
 800f26c:	4293      	cmp	r3, r2
 800f26e:	d014      	beq.n	800f29a <HAL_UART_IRQHandler+0x3e2>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	4a75      	ldr	r2, [pc, #468]	@ (800f450 <HAL_UART_IRQHandler+0x598>)
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d00d      	beq.n	800f29a <HAL_UART_IRQHandler+0x3e2>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	4a73      	ldr	r2, [pc, #460]	@ (800f454 <HAL_UART_IRQHandler+0x59c>)
 800f288:	4293      	cmp	r3, r2
 800f28a:	d006      	beq.n	800f29a <HAL_UART_IRQHandler+0x3e2>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	4a70      	ldr	r2, [pc, #448]	@ (800f458 <HAL_UART_IRQHandler+0x5a0>)
 800f296:	4293      	cmp	r3, r2
 800f298:	d106      	bne.n	800f2a8 <HAL_UART_IRQHandler+0x3f0>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	685b      	ldr	r3, [r3, #4]
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	e005      	b.n	800f2b4 <HAL_UART_IRQHandler+0x3fc>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	685b      	ldr	r3, [r3, #4]
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f2b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	f000 81ab 	beq.w	800f618 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f2c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	f080 81a3 	bcs.w	800f618 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f2d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2e2:	69db      	ldr	r3, [r3, #28]
 800f2e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f2e8:	f000 8087 	beq.w	800f3fa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f2f8:	e853 3f00 	ldrex	r3, [r3]
 800f2fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f300:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f308:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	461a      	mov	r2, r3
 800f312:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f316:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f31a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f31e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f322:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f326:	e841 2300 	strex	r3, r2, [r1]
 800f32a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f32e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f332:	2b00      	cmp	r3, #0
 800f334:	d1da      	bne.n	800f2ec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	3308      	adds	r3, #8
 800f33c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f33e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f340:	e853 3f00 	ldrex	r3, [r3]
 800f344:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f346:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f348:	f023 0301 	bic.w	r3, r3, #1
 800f34c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	3308      	adds	r3, #8
 800f356:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f35a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f35e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f360:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f362:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f366:	e841 2300 	strex	r3, r2, [r1]
 800f36a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f36c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d1e1      	bne.n	800f336 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	3308      	adds	r3, #8
 800f378:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f37a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f37c:	e853 3f00 	ldrex	r3, [r3]
 800f380:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f382:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f384:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f388:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	3308      	adds	r3, #8
 800f392:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f396:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f398:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f39a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f39c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f39e:	e841 2300 	strex	r3, r2, [r1]
 800f3a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f3a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d1e3      	bne.n	800f372 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2220      	movs	r2, #32
 800f3ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f3c0:	e853 3f00 	ldrex	r3, [r3]
 800f3c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f3c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f3c8:	f023 0310 	bic.w	r3, r3, #16
 800f3cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	461a      	mov	r2, r3
 800f3d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f3da:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f3dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f3e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f3e2:	e841 2300 	strex	r3, r2, [r1]
 800f3e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f3e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d1e4      	bne.n	800f3b8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7f8 fb63 	bl	8007ac0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2202      	movs	r2, #2
 800f3fe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	1ad3      	subs	r3, r2, r3
 800f410:	b29b      	uxth	r3, r3
 800f412:	4619      	mov	r1, r3
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f7f4 fbf7 	bl	8003c08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f41a:	e0fd      	b.n	800f618 <HAL_UART_IRQHandler+0x760>
 800f41c:	40020010 	.word	0x40020010
 800f420:	40020028 	.word	0x40020028
 800f424:	40020040 	.word	0x40020040
 800f428:	40020058 	.word	0x40020058
 800f42c:	40020070 	.word	0x40020070
 800f430:	40020088 	.word	0x40020088
 800f434:	400200a0 	.word	0x400200a0
 800f438:	400200b8 	.word	0x400200b8
 800f43c:	40020410 	.word	0x40020410
 800f440:	40020428 	.word	0x40020428
 800f444:	40020440 	.word	0x40020440
 800f448:	40020458 	.word	0x40020458
 800f44c:	40020470 	.word	0x40020470
 800f450:	40020488 	.word	0x40020488
 800f454:	400204a0 	.word	0x400204a0
 800f458:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f468:	b29b      	uxth	r3, r3
 800f46a:	1ad3      	subs	r3, r2, r3
 800f46c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f476:	b29b      	uxth	r3, r3
 800f478:	2b00      	cmp	r3, #0
 800f47a:	f000 80cf 	beq.w	800f61c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f47e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f482:	2b00      	cmp	r3, #0
 800f484:	f000 80ca 	beq.w	800f61c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f490:	e853 3f00 	ldrex	r3, [r3]
 800f494:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f498:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f49c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	461a      	mov	r2, r3
 800f4a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f4aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800f4ac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f4b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f4b2:	e841 2300 	strex	r3, r2, [r1]
 800f4b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f4b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d1e4      	bne.n	800f488 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	3308      	adds	r3, #8
 800f4c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c8:	e853 3f00 	ldrex	r3, [r3]
 800f4cc:	623b      	str	r3, [r7, #32]
   return(result);
 800f4ce:	6a3a      	ldr	r2, [r7, #32]
 800f4d0:	4b55      	ldr	r3, [pc, #340]	@ (800f628 <HAL_UART_IRQHandler+0x770>)
 800f4d2:	4013      	ands	r3, r2
 800f4d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	3308      	adds	r3, #8
 800f4de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f4e2:	633a      	str	r2, [r7, #48]	@ 0x30
 800f4e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f4e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4ea:	e841 2300 	strex	r3, r2, [r1]
 800f4ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d1e3      	bne.n	800f4be <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2220      	movs	r2, #32
 800f4fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2200      	movs	r2, #0
 800f502:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2200      	movs	r2, #0
 800f508:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	e853 3f00 	ldrex	r3, [r3]
 800f516:	60fb      	str	r3, [r7, #12]
   return(result);
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f023 0310 	bic.w	r3, r3, #16
 800f51e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	461a      	mov	r2, r3
 800f528:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f52c:	61fb      	str	r3, [r7, #28]
 800f52e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f530:	69b9      	ldr	r1, [r7, #24]
 800f532:	69fa      	ldr	r2, [r7, #28]
 800f534:	e841 2300 	strex	r3, r2, [r1]
 800f538:	617b      	str	r3, [r7, #20]
   return(result);
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d1e4      	bne.n	800f50a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2202      	movs	r2, #2
 800f544:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f546:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f54a:	4619      	mov	r1, r3
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f7f4 fb5b 	bl	8003c08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f552:	e063      	b.n	800f61c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d00e      	beq.n	800f57e <HAL_UART_IRQHandler+0x6c6>
 800f560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f564:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d008      	beq.n	800f57e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f574:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f002 f858 	bl	801162c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f57c:	e051      	b.n	800f622 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f57e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f586:	2b00      	cmp	r3, #0
 800f588:	d014      	beq.n	800f5b4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f58a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f58e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f592:	2b00      	cmp	r3, #0
 800f594:	d105      	bne.n	800f5a2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f59a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d008      	beq.n	800f5b4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d03a      	beq.n	800f620 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	4798      	blx	r3
    }
    return;
 800f5b2:	e035      	b.n	800f620 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f5b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d009      	beq.n	800f5d4 <HAL_UART_IRQHandler+0x71c>
 800f5c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f5c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d003      	beq.n	800f5d4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f001 fae6 	bl	8010b9e <UART_EndTransmit_IT>
    return;
 800f5d2:	e026      	b.n	800f622 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f5d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d009      	beq.n	800f5f4 <HAL_UART_IRQHandler+0x73c>
 800f5e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f5e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d003      	beq.n	800f5f4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f002 f831 	bl	8011654 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f5f2:	e016      	b.n	800f622 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f5f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d010      	beq.n	800f622 <HAL_UART_IRQHandler+0x76a>
 800f600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f604:	2b00      	cmp	r3, #0
 800f606:	da0c      	bge.n	800f622 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f002 f819 	bl	8011640 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f60e:	e008      	b.n	800f622 <HAL_UART_IRQHandler+0x76a>
      return;
 800f610:	bf00      	nop
 800f612:	e006      	b.n	800f622 <HAL_UART_IRQHandler+0x76a>
    return;
 800f614:	bf00      	nop
 800f616:	e004      	b.n	800f622 <HAL_UART_IRQHandler+0x76a>
      return;
 800f618:	bf00      	nop
 800f61a:	e002      	b.n	800f622 <HAL_UART_IRQHandler+0x76a>
      return;
 800f61c:	bf00      	nop
 800f61e:	e000      	b.n	800f622 <HAL_UART_IRQHandler+0x76a>
    return;
 800f620:	bf00      	nop
  }
}
 800f622:	37e8      	adds	r7, #232	@ 0xe8
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}
 800f628:	effffffe 	.word	0xeffffffe

0800f62c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b083      	sub	sp, #12
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f634:	bf00      	nop
 800f636:	370c      	adds	r7, #12
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr

0800f640 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f640:	b480      	push	{r7}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f648:	bf00      	nop
 800f64a:	370c      	adds	r7, #12
 800f64c:	46bd      	mov	sp, r7
 800f64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f652:	4770      	bx	lr

0800f654 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f654:	b480      	push	{r7}
 800f656:	b083      	sub	sp, #12
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f65c:	bf00      	nop
 800f65e:	370c      	adds	r7, #12
 800f660:	46bd      	mov	sp, r7
 800f662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f666:	4770      	bx	lr

0800f668 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f66c:	b092      	sub	sp, #72	@ 0x48
 800f66e:	af00      	add	r7, sp, #0
 800f670:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f672:	2300      	movs	r3, #0
 800f674:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	689a      	ldr	r2, [r3, #8]
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	691b      	ldr	r3, [r3, #16]
 800f680:	431a      	orrs	r2, r3
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	695b      	ldr	r3, [r3, #20]
 800f686:	431a      	orrs	r2, r3
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	69db      	ldr	r3, [r3, #28]
 800f68c:	4313      	orrs	r3, r2
 800f68e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	681a      	ldr	r2, [r3, #0]
 800f696:	4bbe      	ldr	r3, [pc, #760]	@ (800f990 <UART_SetConfig+0x328>)
 800f698:	4013      	ands	r3, r2
 800f69a:	697a      	ldr	r2, [r7, #20]
 800f69c:	6812      	ldr	r2, [r2, #0]
 800f69e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f6a0:	430b      	orrs	r3, r1
 800f6a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	685b      	ldr	r3, [r3, #4]
 800f6aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	68da      	ldr	r2, [r3, #12]
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	430a      	orrs	r2, r1
 800f6b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	699b      	ldr	r3, [r3, #24]
 800f6be:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	4ab3      	ldr	r2, [pc, #716]	@ (800f994 <UART_SetConfig+0x32c>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d004      	beq.n	800f6d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	6a1b      	ldr	r3, [r3, #32]
 800f6ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6d0:	4313      	orrs	r3, r2
 800f6d2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	689a      	ldr	r2, [r3, #8]
 800f6da:	4baf      	ldr	r3, [pc, #700]	@ (800f998 <UART_SetConfig+0x330>)
 800f6dc:	4013      	ands	r3, r2
 800f6de:	697a      	ldr	r2, [r7, #20]
 800f6e0:	6812      	ldr	r2, [r2, #0]
 800f6e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f6e4:	430b      	orrs	r3, r1
 800f6e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6ee:	f023 010f 	bic.w	r1, r3, #15
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	430a      	orrs	r2, r1
 800f6fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	4aa6      	ldr	r2, [pc, #664]	@ (800f99c <UART_SetConfig+0x334>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d177      	bne.n	800f7f8 <UART_SetConfig+0x190>
 800f708:	4ba5      	ldr	r3, [pc, #660]	@ (800f9a0 <UART_SetConfig+0x338>)
 800f70a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f70c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f710:	2b28      	cmp	r3, #40	@ 0x28
 800f712:	d86d      	bhi.n	800f7f0 <UART_SetConfig+0x188>
 800f714:	a201      	add	r2, pc, #4	@ (adr r2, 800f71c <UART_SetConfig+0xb4>)
 800f716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f71a:	bf00      	nop
 800f71c:	0800f7c1 	.word	0x0800f7c1
 800f720:	0800f7f1 	.word	0x0800f7f1
 800f724:	0800f7f1 	.word	0x0800f7f1
 800f728:	0800f7f1 	.word	0x0800f7f1
 800f72c:	0800f7f1 	.word	0x0800f7f1
 800f730:	0800f7f1 	.word	0x0800f7f1
 800f734:	0800f7f1 	.word	0x0800f7f1
 800f738:	0800f7f1 	.word	0x0800f7f1
 800f73c:	0800f7c9 	.word	0x0800f7c9
 800f740:	0800f7f1 	.word	0x0800f7f1
 800f744:	0800f7f1 	.word	0x0800f7f1
 800f748:	0800f7f1 	.word	0x0800f7f1
 800f74c:	0800f7f1 	.word	0x0800f7f1
 800f750:	0800f7f1 	.word	0x0800f7f1
 800f754:	0800f7f1 	.word	0x0800f7f1
 800f758:	0800f7f1 	.word	0x0800f7f1
 800f75c:	0800f7d1 	.word	0x0800f7d1
 800f760:	0800f7f1 	.word	0x0800f7f1
 800f764:	0800f7f1 	.word	0x0800f7f1
 800f768:	0800f7f1 	.word	0x0800f7f1
 800f76c:	0800f7f1 	.word	0x0800f7f1
 800f770:	0800f7f1 	.word	0x0800f7f1
 800f774:	0800f7f1 	.word	0x0800f7f1
 800f778:	0800f7f1 	.word	0x0800f7f1
 800f77c:	0800f7d9 	.word	0x0800f7d9
 800f780:	0800f7f1 	.word	0x0800f7f1
 800f784:	0800f7f1 	.word	0x0800f7f1
 800f788:	0800f7f1 	.word	0x0800f7f1
 800f78c:	0800f7f1 	.word	0x0800f7f1
 800f790:	0800f7f1 	.word	0x0800f7f1
 800f794:	0800f7f1 	.word	0x0800f7f1
 800f798:	0800f7f1 	.word	0x0800f7f1
 800f79c:	0800f7e1 	.word	0x0800f7e1
 800f7a0:	0800f7f1 	.word	0x0800f7f1
 800f7a4:	0800f7f1 	.word	0x0800f7f1
 800f7a8:	0800f7f1 	.word	0x0800f7f1
 800f7ac:	0800f7f1 	.word	0x0800f7f1
 800f7b0:	0800f7f1 	.word	0x0800f7f1
 800f7b4:	0800f7f1 	.word	0x0800f7f1
 800f7b8:	0800f7f1 	.word	0x0800f7f1
 800f7bc:	0800f7e9 	.word	0x0800f7e9
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7c6:	e222      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f7c8:	2304      	movs	r3, #4
 800f7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ce:	e21e      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f7d0:	2308      	movs	r3, #8
 800f7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7d6:	e21a      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f7d8:	2310      	movs	r3, #16
 800f7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7de:	e216      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f7e0:	2320      	movs	r3, #32
 800f7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7e6:	e212      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f7e8:	2340      	movs	r3, #64	@ 0x40
 800f7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ee:	e20e      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f7f0:	2380      	movs	r3, #128	@ 0x80
 800f7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7f6:	e20a      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4a69      	ldr	r2, [pc, #420]	@ (800f9a4 <UART_SetConfig+0x33c>)
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d130      	bne.n	800f864 <UART_SetConfig+0x1fc>
 800f802:	4b67      	ldr	r3, [pc, #412]	@ (800f9a0 <UART_SetConfig+0x338>)
 800f804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f806:	f003 0307 	and.w	r3, r3, #7
 800f80a:	2b05      	cmp	r3, #5
 800f80c:	d826      	bhi.n	800f85c <UART_SetConfig+0x1f4>
 800f80e:	a201      	add	r2, pc, #4	@ (adr r2, 800f814 <UART_SetConfig+0x1ac>)
 800f810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f814:	0800f82d 	.word	0x0800f82d
 800f818:	0800f835 	.word	0x0800f835
 800f81c:	0800f83d 	.word	0x0800f83d
 800f820:	0800f845 	.word	0x0800f845
 800f824:	0800f84d 	.word	0x0800f84d
 800f828:	0800f855 	.word	0x0800f855
 800f82c:	2300      	movs	r3, #0
 800f82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f832:	e1ec      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f834:	2304      	movs	r3, #4
 800f836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f83a:	e1e8      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f83c:	2308      	movs	r3, #8
 800f83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f842:	e1e4      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f844:	2310      	movs	r3, #16
 800f846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f84a:	e1e0      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f84c:	2320      	movs	r3, #32
 800f84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f852:	e1dc      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f854:	2340      	movs	r3, #64	@ 0x40
 800f856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f85a:	e1d8      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f85c:	2380      	movs	r3, #128	@ 0x80
 800f85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f862:	e1d4      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	4a4f      	ldr	r2, [pc, #316]	@ (800f9a8 <UART_SetConfig+0x340>)
 800f86a:	4293      	cmp	r3, r2
 800f86c:	d130      	bne.n	800f8d0 <UART_SetConfig+0x268>
 800f86e:	4b4c      	ldr	r3, [pc, #304]	@ (800f9a0 <UART_SetConfig+0x338>)
 800f870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f872:	f003 0307 	and.w	r3, r3, #7
 800f876:	2b05      	cmp	r3, #5
 800f878:	d826      	bhi.n	800f8c8 <UART_SetConfig+0x260>
 800f87a:	a201      	add	r2, pc, #4	@ (adr r2, 800f880 <UART_SetConfig+0x218>)
 800f87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f880:	0800f899 	.word	0x0800f899
 800f884:	0800f8a1 	.word	0x0800f8a1
 800f888:	0800f8a9 	.word	0x0800f8a9
 800f88c:	0800f8b1 	.word	0x0800f8b1
 800f890:	0800f8b9 	.word	0x0800f8b9
 800f894:	0800f8c1 	.word	0x0800f8c1
 800f898:	2300      	movs	r3, #0
 800f89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f89e:	e1b6      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f8a0:	2304      	movs	r3, #4
 800f8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8a6:	e1b2      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f8a8:	2308      	movs	r3, #8
 800f8aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ae:	e1ae      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f8b0:	2310      	movs	r3, #16
 800f8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8b6:	e1aa      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f8b8:	2320      	movs	r3, #32
 800f8ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8be:	e1a6      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f8c0:	2340      	movs	r3, #64	@ 0x40
 800f8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8c6:	e1a2      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f8c8:	2380      	movs	r3, #128	@ 0x80
 800f8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ce:	e19e      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	4a35      	ldr	r2, [pc, #212]	@ (800f9ac <UART_SetConfig+0x344>)
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d130      	bne.n	800f93c <UART_SetConfig+0x2d4>
 800f8da:	4b31      	ldr	r3, [pc, #196]	@ (800f9a0 <UART_SetConfig+0x338>)
 800f8dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8de:	f003 0307 	and.w	r3, r3, #7
 800f8e2:	2b05      	cmp	r3, #5
 800f8e4:	d826      	bhi.n	800f934 <UART_SetConfig+0x2cc>
 800f8e6:	a201      	add	r2, pc, #4	@ (adr r2, 800f8ec <UART_SetConfig+0x284>)
 800f8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8ec:	0800f905 	.word	0x0800f905
 800f8f0:	0800f90d 	.word	0x0800f90d
 800f8f4:	0800f915 	.word	0x0800f915
 800f8f8:	0800f91d 	.word	0x0800f91d
 800f8fc:	0800f925 	.word	0x0800f925
 800f900:	0800f92d 	.word	0x0800f92d
 800f904:	2300      	movs	r3, #0
 800f906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f90a:	e180      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f90c:	2304      	movs	r3, #4
 800f90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f912:	e17c      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f914:	2308      	movs	r3, #8
 800f916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f91a:	e178      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f91c:	2310      	movs	r3, #16
 800f91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f922:	e174      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f924:	2320      	movs	r3, #32
 800f926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f92a:	e170      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f92c:	2340      	movs	r3, #64	@ 0x40
 800f92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f932:	e16c      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f934:	2380      	movs	r3, #128	@ 0x80
 800f936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f93a:	e168      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	4a1b      	ldr	r2, [pc, #108]	@ (800f9b0 <UART_SetConfig+0x348>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d142      	bne.n	800f9cc <UART_SetConfig+0x364>
 800f946:	4b16      	ldr	r3, [pc, #88]	@ (800f9a0 <UART_SetConfig+0x338>)
 800f948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f94a:	f003 0307 	and.w	r3, r3, #7
 800f94e:	2b05      	cmp	r3, #5
 800f950:	d838      	bhi.n	800f9c4 <UART_SetConfig+0x35c>
 800f952:	a201      	add	r2, pc, #4	@ (adr r2, 800f958 <UART_SetConfig+0x2f0>)
 800f954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f958:	0800f971 	.word	0x0800f971
 800f95c:	0800f979 	.word	0x0800f979
 800f960:	0800f981 	.word	0x0800f981
 800f964:	0800f989 	.word	0x0800f989
 800f968:	0800f9b5 	.word	0x0800f9b5
 800f96c:	0800f9bd 	.word	0x0800f9bd
 800f970:	2300      	movs	r3, #0
 800f972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f976:	e14a      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f978:	2304      	movs	r3, #4
 800f97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f97e:	e146      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f980:	2308      	movs	r3, #8
 800f982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f986:	e142      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f988:	2310      	movs	r3, #16
 800f98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f98e:	e13e      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f990:	cfff69f3 	.word	0xcfff69f3
 800f994:	58000c00 	.word	0x58000c00
 800f998:	11fff4ff 	.word	0x11fff4ff
 800f99c:	40011000 	.word	0x40011000
 800f9a0:	58024400 	.word	0x58024400
 800f9a4:	40004400 	.word	0x40004400
 800f9a8:	40004800 	.word	0x40004800
 800f9ac:	40004c00 	.word	0x40004c00
 800f9b0:	40005000 	.word	0x40005000
 800f9b4:	2320      	movs	r3, #32
 800f9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ba:	e128      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f9bc:	2340      	movs	r3, #64	@ 0x40
 800f9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9c2:	e124      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f9c4:	2380      	movs	r3, #128	@ 0x80
 800f9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ca:	e120      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	4acb      	ldr	r2, [pc, #812]	@ (800fd00 <UART_SetConfig+0x698>)
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	d176      	bne.n	800fac4 <UART_SetConfig+0x45c>
 800f9d6:	4bcb      	ldr	r3, [pc, #812]	@ (800fd04 <UART_SetConfig+0x69c>)
 800f9d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f9de:	2b28      	cmp	r3, #40	@ 0x28
 800f9e0:	d86c      	bhi.n	800fabc <UART_SetConfig+0x454>
 800f9e2:	a201      	add	r2, pc, #4	@ (adr r2, 800f9e8 <UART_SetConfig+0x380>)
 800f9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e8:	0800fa8d 	.word	0x0800fa8d
 800f9ec:	0800fabd 	.word	0x0800fabd
 800f9f0:	0800fabd 	.word	0x0800fabd
 800f9f4:	0800fabd 	.word	0x0800fabd
 800f9f8:	0800fabd 	.word	0x0800fabd
 800f9fc:	0800fabd 	.word	0x0800fabd
 800fa00:	0800fabd 	.word	0x0800fabd
 800fa04:	0800fabd 	.word	0x0800fabd
 800fa08:	0800fa95 	.word	0x0800fa95
 800fa0c:	0800fabd 	.word	0x0800fabd
 800fa10:	0800fabd 	.word	0x0800fabd
 800fa14:	0800fabd 	.word	0x0800fabd
 800fa18:	0800fabd 	.word	0x0800fabd
 800fa1c:	0800fabd 	.word	0x0800fabd
 800fa20:	0800fabd 	.word	0x0800fabd
 800fa24:	0800fabd 	.word	0x0800fabd
 800fa28:	0800fa9d 	.word	0x0800fa9d
 800fa2c:	0800fabd 	.word	0x0800fabd
 800fa30:	0800fabd 	.word	0x0800fabd
 800fa34:	0800fabd 	.word	0x0800fabd
 800fa38:	0800fabd 	.word	0x0800fabd
 800fa3c:	0800fabd 	.word	0x0800fabd
 800fa40:	0800fabd 	.word	0x0800fabd
 800fa44:	0800fabd 	.word	0x0800fabd
 800fa48:	0800faa5 	.word	0x0800faa5
 800fa4c:	0800fabd 	.word	0x0800fabd
 800fa50:	0800fabd 	.word	0x0800fabd
 800fa54:	0800fabd 	.word	0x0800fabd
 800fa58:	0800fabd 	.word	0x0800fabd
 800fa5c:	0800fabd 	.word	0x0800fabd
 800fa60:	0800fabd 	.word	0x0800fabd
 800fa64:	0800fabd 	.word	0x0800fabd
 800fa68:	0800faad 	.word	0x0800faad
 800fa6c:	0800fabd 	.word	0x0800fabd
 800fa70:	0800fabd 	.word	0x0800fabd
 800fa74:	0800fabd 	.word	0x0800fabd
 800fa78:	0800fabd 	.word	0x0800fabd
 800fa7c:	0800fabd 	.word	0x0800fabd
 800fa80:	0800fabd 	.word	0x0800fabd
 800fa84:	0800fabd 	.word	0x0800fabd
 800fa88:	0800fab5 	.word	0x0800fab5
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa92:	e0bc      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fa94:	2304      	movs	r3, #4
 800fa96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa9a:	e0b8      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fa9c:	2308      	movs	r3, #8
 800fa9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faa2:	e0b4      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800faa4:	2310      	movs	r3, #16
 800faa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faaa:	e0b0      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800faac:	2320      	movs	r3, #32
 800faae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fab2:	e0ac      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fab4:	2340      	movs	r3, #64	@ 0x40
 800fab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faba:	e0a8      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fabc:	2380      	movs	r3, #128	@ 0x80
 800fabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fac2:	e0a4      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4a8f      	ldr	r2, [pc, #572]	@ (800fd08 <UART_SetConfig+0x6a0>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d130      	bne.n	800fb30 <UART_SetConfig+0x4c8>
 800face:	4b8d      	ldr	r3, [pc, #564]	@ (800fd04 <UART_SetConfig+0x69c>)
 800fad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fad2:	f003 0307 	and.w	r3, r3, #7
 800fad6:	2b05      	cmp	r3, #5
 800fad8:	d826      	bhi.n	800fb28 <UART_SetConfig+0x4c0>
 800fada:	a201      	add	r2, pc, #4	@ (adr r2, 800fae0 <UART_SetConfig+0x478>)
 800fadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae0:	0800faf9 	.word	0x0800faf9
 800fae4:	0800fb01 	.word	0x0800fb01
 800fae8:	0800fb09 	.word	0x0800fb09
 800faec:	0800fb11 	.word	0x0800fb11
 800faf0:	0800fb19 	.word	0x0800fb19
 800faf4:	0800fb21 	.word	0x0800fb21
 800faf8:	2300      	movs	r3, #0
 800fafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fafe:	e086      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fb00:	2304      	movs	r3, #4
 800fb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb06:	e082      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fb08:	2308      	movs	r3, #8
 800fb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb0e:	e07e      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fb10:	2310      	movs	r3, #16
 800fb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb16:	e07a      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fb18:	2320      	movs	r3, #32
 800fb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb1e:	e076      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fb20:	2340      	movs	r3, #64	@ 0x40
 800fb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb26:	e072      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fb28:	2380      	movs	r3, #128	@ 0x80
 800fb2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb2e:	e06e      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4a75      	ldr	r2, [pc, #468]	@ (800fd0c <UART_SetConfig+0x6a4>)
 800fb36:	4293      	cmp	r3, r2
 800fb38:	d130      	bne.n	800fb9c <UART_SetConfig+0x534>
 800fb3a:	4b72      	ldr	r3, [pc, #456]	@ (800fd04 <UART_SetConfig+0x69c>)
 800fb3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb3e:	f003 0307 	and.w	r3, r3, #7
 800fb42:	2b05      	cmp	r3, #5
 800fb44:	d826      	bhi.n	800fb94 <UART_SetConfig+0x52c>
 800fb46:	a201      	add	r2, pc, #4	@ (adr r2, 800fb4c <UART_SetConfig+0x4e4>)
 800fb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb4c:	0800fb65 	.word	0x0800fb65
 800fb50:	0800fb6d 	.word	0x0800fb6d
 800fb54:	0800fb75 	.word	0x0800fb75
 800fb58:	0800fb7d 	.word	0x0800fb7d
 800fb5c:	0800fb85 	.word	0x0800fb85
 800fb60:	0800fb8d 	.word	0x0800fb8d
 800fb64:	2300      	movs	r3, #0
 800fb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb6a:	e050      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fb6c:	2304      	movs	r3, #4
 800fb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb72:	e04c      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fb74:	2308      	movs	r3, #8
 800fb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb7a:	e048      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fb7c:	2310      	movs	r3, #16
 800fb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb82:	e044      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fb84:	2320      	movs	r3, #32
 800fb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb8a:	e040      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fb8c:	2340      	movs	r3, #64	@ 0x40
 800fb8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb92:	e03c      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fb94:	2380      	movs	r3, #128	@ 0x80
 800fb96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb9a:	e038      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	4a5b      	ldr	r2, [pc, #364]	@ (800fd10 <UART_SetConfig+0x6a8>)
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d130      	bne.n	800fc08 <UART_SetConfig+0x5a0>
 800fba6:	4b57      	ldr	r3, [pc, #348]	@ (800fd04 <UART_SetConfig+0x69c>)
 800fba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fbaa:	f003 0307 	and.w	r3, r3, #7
 800fbae:	2b05      	cmp	r3, #5
 800fbb0:	d826      	bhi.n	800fc00 <UART_SetConfig+0x598>
 800fbb2:	a201      	add	r2, pc, #4	@ (adr r2, 800fbb8 <UART_SetConfig+0x550>)
 800fbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbb8:	0800fbd1 	.word	0x0800fbd1
 800fbbc:	0800fbd9 	.word	0x0800fbd9
 800fbc0:	0800fbe1 	.word	0x0800fbe1
 800fbc4:	0800fbe9 	.word	0x0800fbe9
 800fbc8:	0800fbf1 	.word	0x0800fbf1
 800fbcc:	0800fbf9 	.word	0x0800fbf9
 800fbd0:	2302      	movs	r3, #2
 800fbd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbd6:	e01a      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fbd8:	2304      	movs	r3, #4
 800fbda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbde:	e016      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fbe0:	2308      	movs	r3, #8
 800fbe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbe6:	e012      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fbe8:	2310      	movs	r3, #16
 800fbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbee:	e00e      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fbf0:	2320      	movs	r3, #32
 800fbf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbf6:	e00a      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fbf8:	2340      	movs	r3, #64	@ 0x40
 800fbfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbfe:	e006      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fc00:	2380      	movs	r3, #128	@ 0x80
 800fc02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc06:	e002      	b.n	800fc0e <UART_SetConfig+0x5a6>
 800fc08:	2380      	movs	r3, #128	@ 0x80
 800fc0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	4a3f      	ldr	r2, [pc, #252]	@ (800fd10 <UART_SetConfig+0x6a8>)
 800fc14:	4293      	cmp	r3, r2
 800fc16:	f040 80f8 	bne.w	800fe0a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fc1a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fc1e:	2b20      	cmp	r3, #32
 800fc20:	dc46      	bgt.n	800fcb0 <UART_SetConfig+0x648>
 800fc22:	2b02      	cmp	r3, #2
 800fc24:	f2c0 8082 	blt.w	800fd2c <UART_SetConfig+0x6c4>
 800fc28:	3b02      	subs	r3, #2
 800fc2a:	2b1e      	cmp	r3, #30
 800fc2c:	d87e      	bhi.n	800fd2c <UART_SetConfig+0x6c4>
 800fc2e:	a201      	add	r2, pc, #4	@ (adr r2, 800fc34 <UART_SetConfig+0x5cc>)
 800fc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc34:	0800fcb7 	.word	0x0800fcb7
 800fc38:	0800fd2d 	.word	0x0800fd2d
 800fc3c:	0800fcbf 	.word	0x0800fcbf
 800fc40:	0800fd2d 	.word	0x0800fd2d
 800fc44:	0800fd2d 	.word	0x0800fd2d
 800fc48:	0800fd2d 	.word	0x0800fd2d
 800fc4c:	0800fccf 	.word	0x0800fccf
 800fc50:	0800fd2d 	.word	0x0800fd2d
 800fc54:	0800fd2d 	.word	0x0800fd2d
 800fc58:	0800fd2d 	.word	0x0800fd2d
 800fc5c:	0800fd2d 	.word	0x0800fd2d
 800fc60:	0800fd2d 	.word	0x0800fd2d
 800fc64:	0800fd2d 	.word	0x0800fd2d
 800fc68:	0800fd2d 	.word	0x0800fd2d
 800fc6c:	0800fcdf 	.word	0x0800fcdf
 800fc70:	0800fd2d 	.word	0x0800fd2d
 800fc74:	0800fd2d 	.word	0x0800fd2d
 800fc78:	0800fd2d 	.word	0x0800fd2d
 800fc7c:	0800fd2d 	.word	0x0800fd2d
 800fc80:	0800fd2d 	.word	0x0800fd2d
 800fc84:	0800fd2d 	.word	0x0800fd2d
 800fc88:	0800fd2d 	.word	0x0800fd2d
 800fc8c:	0800fd2d 	.word	0x0800fd2d
 800fc90:	0800fd2d 	.word	0x0800fd2d
 800fc94:	0800fd2d 	.word	0x0800fd2d
 800fc98:	0800fd2d 	.word	0x0800fd2d
 800fc9c:	0800fd2d 	.word	0x0800fd2d
 800fca0:	0800fd2d 	.word	0x0800fd2d
 800fca4:	0800fd2d 	.word	0x0800fd2d
 800fca8:	0800fd2d 	.word	0x0800fd2d
 800fcac:	0800fd1f 	.word	0x0800fd1f
 800fcb0:	2b40      	cmp	r3, #64	@ 0x40
 800fcb2:	d037      	beq.n	800fd24 <UART_SetConfig+0x6bc>
 800fcb4:	e03a      	b.n	800fd2c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fcb6:	f7fe f931 	bl	800df1c <HAL_RCCEx_GetD3PCLK1Freq>
 800fcba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fcbc:	e03c      	b.n	800fd38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fcbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fe f940 	bl	800df48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fcc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fccc:	e034      	b.n	800fd38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fcce:	f107 0318 	add.w	r3, r7, #24
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7fe fa8c 	bl	800e1f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcdc:	e02c      	b.n	800fd38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fcde:	4b09      	ldr	r3, [pc, #36]	@ (800fd04 <UART_SetConfig+0x69c>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	f003 0320 	and.w	r3, r3, #32
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d016      	beq.n	800fd18 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fcea:	4b06      	ldr	r3, [pc, #24]	@ (800fd04 <UART_SetConfig+0x69c>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	08db      	lsrs	r3, r3, #3
 800fcf0:	f003 0303 	and.w	r3, r3, #3
 800fcf4:	4a07      	ldr	r2, [pc, #28]	@ (800fd14 <UART_SetConfig+0x6ac>)
 800fcf6:	fa22 f303 	lsr.w	r3, r2, r3
 800fcfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fcfc:	e01c      	b.n	800fd38 <UART_SetConfig+0x6d0>
 800fcfe:	bf00      	nop
 800fd00:	40011400 	.word	0x40011400
 800fd04:	58024400 	.word	0x58024400
 800fd08:	40007800 	.word	0x40007800
 800fd0c:	40007c00 	.word	0x40007c00
 800fd10:	58000c00 	.word	0x58000c00
 800fd14:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800fd18:	4b9d      	ldr	r3, [pc, #628]	@ (800ff90 <UART_SetConfig+0x928>)
 800fd1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd1c:	e00c      	b.n	800fd38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd1e:	4b9d      	ldr	r3, [pc, #628]	@ (800ff94 <UART_SetConfig+0x92c>)
 800fd20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd22:	e009      	b.n	800fd38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fd28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd2a:	e005      	b.n	800fd38 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fd30:	2301      	movs	r3, #1
 800fd32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fd36:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fd38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	f000 81de 	beq.w	80100fc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd44:	4a94      	ldr	r2, [pc, #592]	@ (800ff98 <UART_SetConfig+0x930>)
 800fd46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd4a:	461a      	mov	r2, r3
 800fd4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd4e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd52:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	685a      	ldr	r2, [r3, #4]
 800fd58:	4613      	mov	r3, r2
 800fd5a:	005b      	lsls	r3, r3, #1
 800fd5c:	4413      	add	r3, r2
 800fd5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d305      	bcc.n	800fd70 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	685b      	ldr	r3, [r3, #4]
 800fd68:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fd6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d903      	bls.n	800fd78 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800fd70:	2301      	movs	r3, #1
 800fd72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fd76:	e1c1      	b.n	80100fc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	60bb      	str	r3, [r7, #8]
 800fd7e:	60fa      	str	r2, [r7, #12]
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd84:	4a84      	ldr	r2, [pc, #528]	@ (800ff98 <UART_SetConfig+0x930>)
 800fd86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	603b      	str	r3, [r7, #0]
 800fd90:	607a      	str	r2, [r7, #4]
 800fd92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fd9a:	f7f0 fcb5 	bl	8000708 <__aeabi_uldivmod>
 800fd9e:	4602      	mov	r2, r0
 800fda0:	460b      	mov	r3, r1
 800fda2:	4610      	mov	r0, r2
 800fda4:	4619      	mov	r1, r3
 800fda6:	f04f 0200 	mov.w	r2, #0
 800fdaa:	f04f 0300 	mov.w	r3, #0
 800fdae:	020b      	lsls	r3, r1, #8
 800fdb0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fdb4:	0202      	lsls	r2, r0, #8
 800fdb6:	6979      	ldr	r1, [r7, #20]
 800fdb8:	6849      	ldr	r1, [r1, #4]
 800fdba:	0849      	lsrs	r1, r1, #1
 800fdbc:	2000      	movs	r0, #0
 800fdbe:	460c      	mov	r4, r1
 800fdc0:	4605      	mov	r5, r0
 800fdc2:	eb12 0804 	adds.w	r8, r2, r4
 800fdc6:	eb43 0905 	adc.w	r9, r3, r5
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	469a      	mov	sl, r3
 800fdd2:	4693      	mov	fp, r2
 800fdd4:	4652      	mov	r2, sl
 800fdd6:	465b      	mov	r3, fp
 800fdd8:	4640      	mov	r0, r8
 800fdda:	4649      	mov	r1, r9
 800fddc:	f7f0 fc94 	bl	8000708 <__aeabi_uldivmod>
 800fde0:	4602      	mov	r2, r0
 800fde2:	460b      	mov	r3, r1
 800fde4:	4613      	mov	r3, r2
 800fde6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fde8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fdee:	d308      	bcc.n	800fe02 <UART_SetConfig+0x79a>
 800fdf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fdf6:	d204      	bcs.n	800fe02 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fdfe:	60da      	str	r2, [r3, #12]
 800fe00:	e17c      	b.n	80100fc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fe02:	2301      	movs	r3, #1
 800fe04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fe08:	e178      	b.n	80100fc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	69db      	ldr	r3, [r3, #28]
 800fe0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fe12:	f040 80c5 	bne.w	800ffa0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800fe16:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fe1a:	2b20      	cmp	r3, #32
 800fe1c:	dc48      	bgt.n	800feb0 <UART_SetConfig+0x848>
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	db7b      	blt.n	800ff1a <UART_SetConfig+0x8b2>
 800fe22:	2b20      	cmp	r3, #32
 800fe24:	d879      	bhi.n	800ff1a <UART_SetConfig+0x8b2>
 800fe26:	a201      	add	r2, pc, #4	@ (adr r2, 800fe2c <UART_SetConfig+0x7c4>)
 800fe28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe2c:	0800feb7 	.word	0x0800feb7
 800fe30:	0800febf 	.word	0x0800febf
 800fe34:	0800ff1b 	.word	0x0800ff1b
 800fe38:	0800ff1b 	.word	0x0800ff1b
 800fe3c:	0800fec7 	.word	0x0800fec7
 800fe40:	0800ff1b 	.word	0x0800ff1b
 800fe44:	0800ff1b 	.word	0x0800ff1b
 800fe48:	0800ff1b 	.word	0x0800ff1b
 800fe4c:	0800fed7 	.word	0x0800fed7
 800fe50:	0800ff1b 	.word	0x0800ff1b
 800fe54:	0800ff1b 	.word	0x0800ff1b
 800fe58:	0800ff1b 	.word	0x0800ff1b
 800fe5c:	0800ff1b 	.word	0x0800ff1b
 800fe60:	0800ff1b 	.word	0x0800ff1b
 800fe64:	0800ff1b 	.word	0x0800ff1b
 800fe68:	0800ff1b 	.word	0x0800ff1b
 800fe6c:	0800fee7 	.word	0x0800fee7
 800fe70:	0800ff1b 	.word	0x0800ff1b
 800fe74:	0800ff1b 	.word	0x0800ff1b
 800fe78:	0800ff1b 	.word	0x0800ff1b
 800fe7c:	0800ff1b 	.word	0x0800ff1b
 800fe80:	0800ff1b 	.word	0x0800ff1b
 800fe84:	0800ff1b 	.word	0x0800ff1b
 800fe88:	0800ff1b 	.word	0x0800ff1b
 800fe8c:	0800ff1b 	.word	0x0800ff1b
 800fe90:	0800ff1b 	.word	0x0800ff1b
 800fe94:	0800ff1b 	.word	0x0800ff1b
 800fe98:	0800ff1b 	.word	0x0800ff1b
 800fe9c:	0800ff1b 	.word	0x0800ff1b
 800fea0:	0800ff1b 	.word	0x0800ff1b
 800fea4:	0800ff1b 	.word	0x0800ff1b
 800fea8:	0800ff1b 	.word	0x0800ff1b
 800feac:	0800ff0d 	.word	0x0800ff0d
 800feb0:	2b40      	cmp	r3, #64	@ 0x40
 800feb2:	d02e      	beq.n	800ff12 <UART_SetConfig+0x8aa>
 800feb4:	e031      	b.n	800ff1a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800feb6:	f7fc fdb9 	bl	800ca2c <HAL_RCC_GetPCLK1Freq>
 800feba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800febc:	e033      	b.n	800ff26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800febe:	f7fc fdcb 	bl	800ca58 <HAL_RCC_GetPCLK2Freq>
 800fec2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fec4:	e02f      	b.n	800ff26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fec6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800feca:	4618      	mov	r0, r3
 800fecc:	f7fe f83c 	bl	800df48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fed4:	e027      	b.n	800ff26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fed6:	f107 0318 	add.w	r3, r7, #24
 800feda:	4618      	mov	r0, r3
 800fedc:	f7fe f988 	bl	800e1f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fee0:	69fb      	ldr	r3, [r7, #28]
 800fee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fee4:	e01f      	b.n	800ff26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fee6:	4b2d      	ldr	r3, [pc, #180]	@ (800ff9c <UART_SetConfig+0x934>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	f003 0320 	and.w	r3, r3, #32
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d009      	beq.n	800ff06 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fef2:	4b2a      	ldr	r3, [pc, #168]	@ (800ff9c <UART_SetConfig+0x934>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	08db      	lsrs	r3, r3, #3
 800fef8:	f003 0303 	and.w	r3, r3, #3
 800fefc:	4a24      	ldr	r2, [pc, #144]	@ (800ff90 <UART_SetConfig+0x928>)
 800fefe:	fa22 f303 	lsr.w	r3, r2, r3
 800ff02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff04:	e00f      	b.n	800ff26 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ff06:	4b22      	ldr	r3, [pc, #136]	@ (800ff90 <UART_SetConfig+0x928>)
 800ff08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff0a:	e00c      	b.n	800ff26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff0c:	4b21      	ldr	r3, [pc, #132]	@ (800ff94 <UART_SetConfig+0x92c>)
 800ff0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff10:	e009      	b.n	800ff26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ff16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff18:	e005      	b.n	800ff26 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ff1e:	2301      	movs	r3, #1
 800ff20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ff24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ff26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	f000 80e7 	beq.w	80100fc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff32:	4a19      	ldr	r2, [pc, #100]	@ (800ff98 <UART_SetConfig+0x930>)
 800ff34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff38:	461a      	mov	r2, r3
 800ff3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff40:	005a      	lsls	r2, r3, #1
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	685b      	ldr	r3, [r3, #4]
 800ff46:	085b      	lsrs	r3, r3, #1
 800ff48:	441a      	add	r2, r3
 800ff4a:	697b      	ldr	r3, [r7, #20]
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff52:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff56:	2b0f      	cmp	r3, #15
 800ff58:	d916      	bls.n	800ff88 <UART_SetConfig+0x920>
 800ff5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ff60:	d212      	bcs.n	800ff88 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ff62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff64:	b29b      	uxth	r3, r3
 800ff66:	f023 030f 	bic.w	r3, r3, #15
 800ff6a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ff6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff6e:	085b      	lsrs	r3, r3, #1
 800ff70:	b29b      	uxth	r3, r3
 800ff72:	f003 0307 	and.w	r3, r3, #7
 800ff76:	b29a      	uxth	r2, r3
 800ff78:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ff7a:	4313      	orrs	r3, r2
 800ff7c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ff84:	60da      	str	r2, [r3, #12]
 800ff86:	e0b9      	b.n	80100fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ff88:	2301      	movs	r3, #1
 800ff8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ff8e:	e0b5      	b.n	80100fc <UART_SetConfig+0xa94>
 800ff90:	03d09000 	.word	0x03d09000
 800ff94:	003d0900 	.word	0x003d0900
 800ff98:	0802cfc8 	.word	0x0802cfc8
 800ff9c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ffa0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ffa4:	2b20      	cmp	r3, #32
 800ffa6:	dc49      	bgt.n	801003c <UART_SetConfig+0x9d4>
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	db7c      	blt.n	80100a6 <UART_SetConfig+0xa3e>
 800ffac:	2b20      	cmp	r3, #32
 800ffae:	d87a      	bhi.n	80100a6 <UART_SetConfig+0xa3e>
 800ffb0:	a201      	add	r2, pc, #4	@ (adr r2, 800ffb8 <UART_SetConfig+0x950>)
 800ffb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffb6:	bf00      	nop
 800ffb8:	08010043 	.word	0x08010043
 800ffbc:	0801004b 	.word	0x0801004b
 800ffc0:	080100a7 	.word	0x080100a7
 800ffc4:	080100a7 	.word	0x080100a7
 800ffc8:	08010053 	.word	0x08010053
 800ffcc:	080100a7 	.word	0x080100a7
 800ffd0:	080100a7 	.word	0x080100a7
 800ffd4:	080100a7 	.word	0x080100a7
 800ffd8:	08010063 	.word	0x08010063
 800ffdc:	080100a7 	.word	0x080100a7
 800ffe0:	080100a7 	.word	0x080100a7
 800ffe4:	080100a7 	.word	0x080100a7
 800ffe8:	080100a7 	.word	0x080100a7
 800ffec:	080100a7 	.word	0x080100a7
 800fff0:	080100a7 	.word	0x080100a7
 800fff4:	080100a7 	.word	0x080100a7
 800fff8:	08010073 	.word	0x08010073
 800fffc:	080100a7 	.word	0x080100a7
 8010000:	080100a7 	.word	0x080100a7
 8010004:	080100a7 	.word	0x080100a7
 8010008:	080100a7 	.word	0x080100a7
 801000c:	080100a7 	.word	0x080100a7
 8010010:	080100a7 	.word	0x080100a7
 8010014:	080100a7 	.word	0x080100a7
 8010018:	080100a7 	.word	0x080100a7
 801001c:	080100a7 	.word	0x080100a7
 8010020:	080100a7 	.word	0x080100a7
 8010024:	080100a7 	.word	0x080100a7
 8010028:	080100a7 	.word	0x080100a7
 801002c:	080100a7 	.word	0x080100a7
 8010030:	080100a7 	.word	0x080100a7
 8010034:	080100a7 	.word	0x080100a7
 8010038:	08010099 	.word	0x08010099
 801003c:	2b40      	cmp	r3, #64	@ 0x40
 801003e:	d02e      	beq.n	801009e <UART_SetConfig+0xa36>
 8010040:	e031      	b.n	80100a6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010042:	f7fc fcf3 	bl	800ca2c <HAL_RCC_GetPCLK1Freq>
 8010046:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010048:	e033      	b.n	80100b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801004a:	f7fc fd05 	bl	800ca58 <HAL_RCC_GetPCLK2Freq>
 801004e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010050:	e02f      	b.n	80100b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010056:	4618      	mov	r0, r3
 8010058:	f7fd ff76 	bl	800df48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801005c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801005e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010060:	e027      	b.n	80100b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010062:	f107 0318 	add.w	r3, r7, #24
 8010066:	4618      	mov	r0, r3
 8010068:	f7fe f8c2 	bl	800e1f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801006c:	69fb      	ldr	r3, [r7, #28]
 801006e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010070:	e01f      	b.n	80100b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010072:	4b2d      	ldr	r3, [pc, #180]	@ (8010128 <UART_SetConfig+0xac0>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	f003 0320 	and.w	r3, r3, #32
 801007a:	2b00      	cmp	r3, #0
 801007c:	d009      	beq.n	8010092 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801007e:	4b2a      	ldr	r3, [pc, #168]	@ (8010128 <UART_SetConfig+0xac0>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	08db      	lsrs	r3, r3, #3
 8010084:	f003 0303 	and.w	r3, r3, #3
 8010088:	4a28      	ldr	r2, [pc, #160]	@ (801012c <UART_SetConfig+0xac4>)
 801008a:	fa22 f303 	lsr.w	r3, r2, r3
 801008e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010090:	e00f      	b.n	80100b2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010092:	4b26      	ldr	r3, [pc, #152]	@ (801012c <UART_SetConfig+0xac4>)
 8010094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010096:	e00c      	b.n	80100b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010098:	4b25      	ldr	r3, [pc, #148]	@ (8010130 <UART_SetConfig+0xac8>)
 801009a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801009c:	e009      	b.n	80100b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801009e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80100a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100a4:	e005      	b.n	80100b2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80100a6:	2300      	movs	r3, #0
 80100a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80100aa:	2301      	movs	r3, #1
 80100ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80100b0:	bf00      	nop
    }

    if (pclk != 0U)
 80100b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d021      	beq.n	80100fc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100bc:	4a1d      	ldr	r2, [pc, #116]	@ (8010134 <UART_SetConfig+0xacc>)
 80100be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80100c2:	461a      	mov	r2, r3
 80100c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	685b      	ldr	r3, [r3, #4]
 80100ce:	085b      	lsrs	r3, r3, #1
 80100d0:	441a      	add	r2, r3
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	685b      	ldr	r3, [r3, #4]
 80100d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80100da:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80100dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100de:	2b0f      	cmp	r3, #15
 80100e0:	d909      	bls.n	80100f6 <UART_SetConfig+0xa8e>
 80100e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80100e8:	d205      	bcs.n	80100f6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80100ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100ec:	b29a      	uxth	r2, r3
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	60da      	str	r2, [r3, #12]
 80100f4:	e002      	b.n	80100fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80100f6:	2301      	movs	r3, #1
 80100f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	2201      	movs	r2, #1
 8010100:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	2201      	movs	r2, #1
 8010108:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	2200      	movs	r2, #0
 8010110:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	2200      	movs	r2, #0
 8010116:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010118:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801011c:	4618      	mov	r0, r3
 801011e:	3748      	adds	r7, #72	@ 0x48
 8010120:	46bd      	mov	sp, r7
 8010122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010126:	bf00      	nop
 8010128:	58024400 	.word	0x58024400
 801012c:	03d09000 	.word	0x03d09000
 8010130:	003d0900 	.word	0x003d0900
 8010134:	0802cfc8 	.word	0x0802cfc8

08010138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010138:	b480      	push	{r7}
 801013a:	b083      	sub	sp, #12
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010144:	f003 0308 	and.w	r3, r3, #8
 8010148:	2b00      	cmp	r3, #0
 801014a:	d00a      	beq.n	8010162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	430a      	orrs	r2, r1
 8010160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010166:	f003 0301 	and.w	r3, r3, #1
 801016a:	2b00      	cmp	r3, #0
 801016c:	d00a      	beq.n	8010184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	430a      	orrs	r2, r1
 8010182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010188:	f003 0302 	and.w	r3, r3, #2
 801018c:	2b00      	cmp	r3, #0
 801018e:	d00a      	beq.n	80101a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	685b      	ldr	r3, [r3, #4]
 8010196:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	430a      	orrs	r2, r1
 80101a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101aa:	f003 0304 	and.w	r3, r3, #4
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d00a      	beq.n	80101c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	685b      	ldr	r3, [r3, #4]
 80101b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	430a      	orrs	r2, r1
 80101c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101cc:	f003 0310 	and.w	r3, r3, #16
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d00a      	beq.n	80101ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	689b      	ldr	r3, [r3, #8]
 80101da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	430a      	orrs	r2, r1
 80101e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101ee:	f003 0320 	and.w	r3, r3, #32
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d00a      	beq.n	801020c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	689b      	ldr	r3, [r3, #8]
 80101fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	430a      	orrs	r2, r1
 801020a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010214:	2b00      	cmp	r3, #0
 8010216:	d01a      	beq.n	801024e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	430a      	orrs	r2, r1
 801022c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010232:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010236:	d10a      	bne.n	801024e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	430a      	orrs	r2, r1
 801024c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010256:	2b00      	cmp	r3, #0
 8010258:	d00a      	beq.n	8010270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	685b      	ldr	r3, [r3, #4]
 8010260:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	430a      	orrs	r2, r1
 801026e:	605a      	str	r2, [r3, #4]
  }
}
 8010270:	bf00      	nop
 8010272:	370c      	adds	r7, #12
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr

0801027c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b098      	sub	sp, #96	@ 0x60
 8010280:	af02      	add	r7, sp, #8
 8010282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2200      	movs	r2, #0
 8010288:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801028c:	f7f6 fcaa 	bl	8006be4 <HAL_GetTick>
 8010290:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	f003 0308 	and.w	r3, r3, #8
 801029c:	2b08      	cmp	r3, #8
 801029e:	d12f      	bne.n	8010300 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80102a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80102a4:	9300      	str	r3, [sp, #0]
 80102a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102a8:	2200      	movs	r2, #0
 80102aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f000 f88e 	bl	80103d0 <UART_WaitOnFlagUntilTimeout>
 80102b4:	4603      	mov	r3, r0
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d022      	beq.n	8010300 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102c2:	e853 3f00 	ldrex	r3, [r3]
 80102c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80102c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80102ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	461a      	mov	r2, r3
 80102d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80102d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80102da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80102de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80102e0:	e841 2300 	strex	r3, r2, [r1]
 80102e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80102e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d1e6      	bne.n	80102ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2220      	movs	r2, #32
 80102f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2200      	movs	r2, #0
 80102f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80102fc:	2303      	movs	r3, #3
 80102fe:	e063      	b.n	80103c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	f003 0304 	and.w	r3, r3, #4
 801030a:	2b04      	cmp	r3, #4
 801030c:	d149      	bne.n	80103a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801030e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010312:	9300      	str	r3, [sp, #0]
 8010314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010316:	2200      	movs	r2, #0
 8010318:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f000 f857 	bl	80103d0 <UART_WaitOnFlagUntilTimeout>
 8010322:	4603      	mov	r3, r0
 8010324:	2b00      	cmp	r3, #0
 8010326:	d03c      	beq.n	80103a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801032e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010330:	e853 3f00 	ldrex	r3, [r3]
 8010334:	623b      	str	r3, [r7, #32]
   return(result);
 8010336:	6a3b      	ldr	r3, [r7, #32]
 8010338:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801033c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	461a      	mov	r2, r3
 8010344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010346:	633b      	str	r3, [r7, #48]	@ 0x30
 8010348:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801034a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801034c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801034e:	e841 2300 	strex	r3, r2, [r1]
 8010352:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010356:	2b00      	cmp	r3, #0
 8010358:	d1e6      	bne.n	8010328 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	3308      	adds	r3, #8
 8010360:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	e853 3f00 	ldrex	r3, [r3]
 8010368:	60fb      	str	r3, [r7, #12]
   return(result);
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	f023 0301 	bic.w	r3, r3, #1
 8010370:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	3308      	adds	r3, #8
 8010378:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801037a:	61fa      	str	r2, [r7, #28]
 801037c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801037e:	69b9      	ldr	r1, [r7, #24]
 8010380:	69fa      	ldr	r2, [r7, #28]
 8010382:	e841 2300 	strex	r3, r2, [r1]
 8010386:	617b      	str	r3, [r7, #20]
   return(result);
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d1e5      	bne.n	801035a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2220      	movs	r2, #32
 8010392:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2200      	movs	r2, #0
 801039a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801039e:	2303      	movs	r3, #3
 80103a0:	e012      	b.n	80103c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2220      	movs	r2, #32
 80103a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2220      	movs	r2, #32
 80103ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2200      	movs	r2, #0
 80103b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2200      	movs	r2, #0
 80103bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2200      	movs	r2, #0
 80103c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80103c6:	2300      	movs	r3, #0
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3758      	adds	r7, #88	@ 0x58
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}

080103d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b084      	sub	sp, #16
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	60f8      	str	r0, [r7, #12]
 80103d8:	60b9      	str	r1, [r7, #8]
 80103da:	603b      	str	r3, [r7, #0]
 80103dc:	4613      	mov	r3, r2
 80103de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80103e0:	e04f      	b.n	8010482 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80103e2:	69bb      	ldr	r3, [r7, #24]
 80103e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103e8:	d04b      	beq.n	8010482 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80103ea:	f7f6 fbfb 	bl	8006be4 <HAL_GetTick>
 80103ee:	4602      	mov	r2, r0
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	1ad3      	subs	r3, r2, r3
 80103f4:	69ba      	ldr	r2, [r7, #24]
 80103f6:	429a      	cmp	r2, r3
 80103f8:	d302      	bcc.n	8010400 <UART_WaitOnFlagUntilTimeout+0x30>
 80103fa:	69bb      	ldr	r3, [r7, #24]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d101      	bne.n	8010404 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010400:	2303      	movs	r3, #3
 8010402:	e04e      	b.n	80104a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	f003 0304 	and.w	r3, r3, #4
 801040e:	2b00      	cmp	r3, #0
 8010410:	d037      	beq.n	8010482 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	2b80      	cmp	r3, #128	@ 0x80
 8010416:	d034      	beq.n	8010482 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	2b40      	cmp	r3, #64	@ 0x40
 801041c:	d031      	beq.n	8010482 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	69db      	ldr	r3, [r3, #28]
 8010424:	f003 0308 	and.w	r3, r3, #8
 8010428:	2b08      	cmp	r3, #8
 801042a:	d110      	bne.n	801044e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	2208      	movs	r2, #8
 8010432:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010434:	68f8      	ldr	r0, [r7, #12]
 8010436:	f000 fa43 	bl	80108c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	2208      	movs	r2, #8
 801043e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2200      	movs	r2, #0
 8010446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801044a:	2301      	movs	r3, #1
 801044c:	e029      	b.n	80104a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	69db      	ldr	r3, [r3, #28]
 8010454:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010458:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801045c:	d111      	bne.n	8010482 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010468:	68f8      	ldr	r0, [r7, #12]
 801046a:	f000 fa29 	bl	80108c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	2220      	movs	r2, #32
 8010472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	2200      	movs	r2, #0
 801047a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801047e:	2303      	movs	r3, #3
 8010480:	e00f      	b.n	80104a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	69da      	ldr	r2, [r3, #28]
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	4013      	ands	r3, r2
 801048c:	68ba      	ldr	r2, [r7, #8]
 801048e:	429a      	cmp	r2, r3
 8010490:	bf0c      	ite	eq
 8010492:	2301      	moveq	r3, #1
 8010494:	2300      	movne	r3, #0
 8010496:	b2db      	uxtb	r3, r3
 8010498:	461a      	mov	r2, r3
 801049a:	79fb      	ldrb	r3, [r7, #7]
 801049c:	429a      	cmp	r2, r3
 801049e:	d0a0      	beq.n	80103e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80104a0:	2300      	movs	r3, #0
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3710      	adds	r7, #16
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
	...

080104ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80104ac:	b480      	push	{r7}
 80104ae:	b0a3      	sub	sp, #140	@ 0x8c
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	60f8      	str	r0, [r7, #12]
 80104b4:	60b9      	str	r1, [r7, #8]
 80104b6:	4613      	mov	r3, r2
 80104b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	68ba      	ldr	r2, [r7, #8]
 80104be:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	88fa      	ldrh	r2, [r7, #6]
 80104c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	88fa      	ldrh	r2, [r7, #6]
 80104cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2200      	movs	r2, #0
 80104d4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	689b      	ldr	r3, [r3, #8]
 80104da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80104de:	d10e      	bne.n	80104fe <UART_Start_Receive_IT+0x52>
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	691b      	ldr	r3, [r3, #16]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d105      	bne.n	80104f4 <UART_Start_Receive_IT+0x48>
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80104ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80104f2:	e02d      	b.n	8010550 <UART_Start_Receive_IT+0xa4>
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	22ff      	movs	r2, #255	@ 0xff
 80104f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80104fc:	e028      	b.n	8010550 <UART_Start_Receive_IT+0xa4>
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	689b      	ldr	r3, [r3, #8]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d10d      	bne.n	8010522 <UART_Start_Receive_IT+0x76>
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	691b      	ldr	r3, [r3, #16]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d104      	bne.n	8010518 <UART_Start_Receive_IT+0x6c>
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	22ff      	movs	r2, #255	@ 0xff
 8010512:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010516:	e01b      	b.n	8010550 <UART_Start_Receive_IT+0xa4>
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	227f      	movs	r2, #127	@ 0x7f
 801051c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010520:	e016      	b.n	8010550 <UART_Start_Receive_IT+0xa4>
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	689b      	ldr	r3, [r3, #8]
 8010526:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801052a:	d10d      	bne.n	8010548 <UART_Start_Receive_IT+0x9c>
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	691b      	ldr	r3, [r3, #16]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d104      	bne.n	801053e <UART_Start_Receive_IT+0x92>
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	227f      	movs	r2, #127	@ 0x7f
 8010538:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801053c:	e008      	b.n	8010550 <UART_Start_Receive_IT+0xa4>
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	223f      	movs	r2, #63	@ 0x3f
 8010542:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010546:	e003      	b.n	8010550 <UART_Start_Receive_IT+0xa4>
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2200      	movs	r2, #0
 801054c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	2200      	movs	r2, #0
 8010554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2222      	movs	r2, #34	@ 0x22
 801055c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	3308      	adds	r3, #8
 8010566:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010568:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801056a:	e853 3f00 	ldrex	r3, [r3]
 801056e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8010570:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010572:	f043 0301 	orr.w	r3, r3, #1
 8010576:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	3308      	adds	r3, #8
 8010580:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010584:	673a      	str	r2, [r7, #112]	@ 0x70
 8010586:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010588:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801058a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801058c:	e841 2300 	strex	r3, r2, [r1]
 8010590:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8010592:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010594:	2b00      	cmp	r3, #0
 8010596:	d1e3      	bne.n	8010560 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801059c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80105a0:	d14f      	bne.n	8010642 <UART_Start_Receive_IT+0x196>
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80105a8:	88fa      	ldrh	r2, [r7, #6]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d349      	bcc.n	8010642 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	689b      	ldr	r3, [r3, #8]
 80105b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80105b6:	d107      	bne.n	80105c8 <UART_Start_Receive_IT+0x11c>
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	691b      	ldr	r3, [r3, #16]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d103      	bne.n	80105c8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	4a47      	ldr	r2, [pc, #284]	@ (80106e0 <UART_Start_Receive_IT+0x234>)
 80105c4:	675a      	str	r2, [r3, #116]	@ 0x74
 80105c6:	e002      	b.n	80105ce <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	4a46      	ldr	r2, [pc, #280]	@ (80106e4 <UART_Start_Receive_IT+0x238>)
 80105cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	691b      	ldr	r3, [r3, #16]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d01a      	beq.n	801060c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80105de:	e853 3f00 	ldrex	r3, [r3]
 80105e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80105e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80105e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80105ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	461a      	mov	r2, r3
 80105f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80105f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80105fa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105fc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80105fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010600:	e841 2300 	strex	r3, r2, [r1]
 8010604:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8010606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010608:	2b00      	cmp	r3, #0
 801060a:	d1e4      	bne.n	80105d6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	3308      	adds	r3, #8
 8010612:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010616:	e853 3f00 	ldrex	r3, [r3]
 801061a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801061c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801061e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010622:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	3308      	adds	r3, #8
 801062a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801062c:	64ba      	str	r2, [r7, #72]	@ 0x48
 801062e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010630:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010632:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010634:	e841 2300 	strex	r3, r2, [r1]
 8010638:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801063a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801063c:	2b00      	cmp	r3, #0
 801063e:	d1e5      	bne.n	801060c <UART_Start_Receive_IT+0x160>
 8010640:	e046      	b.n	80106d0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	689b      	ldr	r3, [r3, #8]
 8010646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801064a:	d107      	bne.n	801065c <UART_Start_Receive_IT+0x1b0>
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	691b      	ldr	r3, [r3, #16]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d103      	bne.n	801065c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	4a24      	ldr	r2, [pc, #144]	@ (80106e8 <UART_Start_Receive_IT+0x23c>)
 8010658:	675a      	str	r2, [r3, #116]	@ 0x74
 801065a:	e002      	b.n	8010662 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	4a23      	ldr	r2, [pc, #140]	@ (80106ec <UART_Start_Receive_IT+0x240>)
 8010660:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	691b      	ldr	r3, [r3, #16]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d019      	beq.n	801069e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010672:	e853 3f00 	ldrex	r3, [r3]
 8010676:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801067a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801067e:	677b      	str	r3, [r7, #116]	@ 0x74
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	461a      	mov	r2, r3
 8010686:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010688:	637b      	str	r3, [r7, #52]	@ 0x34
 801068a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801068c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801068e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010690:	e841 2300 	strex	r3, r2, [r1]
 8010694:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010698:	2b00      	cmp	r3, #0
 801069a:	d1e6      	bne.n	801066a <UART_Start_Receive_IT+0x1be>
 801069c:	e018      	b.n	80106d0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	e853 3f00 	ldrex	r3, [r3]
 80106aa:	613b      	str	r3, [r7, #16]
   return(result);
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	f043 0320 	orr.w	r3, r3, #32
 80106b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	461a      	mov	r2, r3
 80106ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80106bc:	623b      	str	r3, [r7, #32]
 80106be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c0:	69f9      	ldr	r1, [r7, #28]
 80106c2:	6a3a      	ldr	r2, [r7, #32]
 80106c4:	e841 2300 	strex	r3, r2, [r1]
 80106c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80106ca:	69bb      	ldr	r3, [r7, #24]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d1e6      	bne.n	801069e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80106d0:	2300      	movs	r3, #0
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	378c      	adds	r7, #140	@ 0x8c
 80106d6:	46bd      	mov	sp, r7
 80106d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106dc:	4770      	bx	lr
 80106de:	bf00      	nop
 80106e0:	080112c5 	.word	0x080112c5
 80106e4:	08010f65 	.word	0x08010f65
 80106e8:	08010dad 	.word	0x08010dad
 80106ec:	08010bf5 	.word	0x08010bf5

080106f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b096      	sub	sp, #88	@ 0x58
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	60f8      	str	r0, [r7, #12]
 80106f8:	60b9      	str	r1, [r7, #8]
 80106fa:	4613      	mov	r3, r2
 80106fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	68ba      	ldr	r2, [r7, #8]
 8010702:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	88fa      	ldrh	r2, [r7, #6]
 8010708:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	2200      	movs	r2, #0
 8010710:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	2222      	movs	r2, #34	@ 0x22
 8010718:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010722:	2b00      	cmp	r3, #0
 8010724:	d02d      	beq.n	8010782 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801072c:	4a40      	ldr	r2, [pc, #256]	@ (8010830 <UART_Start_Receive_DMA+0x140>)
 801072e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010736:	4a3f      	ldr	r2, [pc, #252]	@ (8010834 <UART_Start_Receive_DMA+0x144>)
 8010738:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010740:	4a3d      	ldr	r2, [pc, #244]	@ (8010838 <UART_Start_Receive_DMA+0x148>)
 8010742:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801074a:	2200      	movs	r2, #0
 801074c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	3324      	adds	r3, #36	@ 0x24
 801075a:	4619      	mov	r1, r3
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010760:	461a      	mov	r2, r3
 8010762:	88fb      	ldrh	r3, [r7, #6]
 8010764:	f7f6 ff42 	bl	80075ec <HAL_DMA_Start_IT>
 8010768:	4603      	mov	r3, r0
 801076a:	2b00      	cmp	r3, #0
 801076c:	d009      	beq.n	8010782 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	2210      	movs	r2, #16
 8010772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	2220      	movs	r2, #32
 801077a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 801077e:	2301      	movs	r3, #1
 8010780:	e051      	b.n	8010826 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	691b      	ldr	r3, [r3, #16]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d018      	beq.n	80107bc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010792:	e853 3f00 	ldrex	r3, [r3]
 8010796:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801079a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801079e:	657b      	str	r3, [r7, #84]	@ 0x54
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	461a      	mov	r2, r3
 80107a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80107aa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80107ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80107b0:	e841 2300 	strex	r3, r2, [r1]
 80107b4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80107b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d1e6      	bne.n	801078a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	3308      	adds	r3, #8
 80107c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107c6:	e853 3f00 	ldrex	r3, [r3]
 80107ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80107cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ce:	f043 0301 	orr.w	r3, r3, #1
 80107d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	3308      	adds	r3, #8
 80107da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80107dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80107de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80107e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80107e4:	e841 2300 	strex	r3, r2, [r1]
 80107e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80107ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d1e5      	bne.n	80107bc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	3308      	adds	r3, #8
 80107f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	e853 3f00 	ldrex	r3, [r3]
 80107fe:	613b      	str	r3, [r7, #16]
   return(result);
 8010800:	693b      	ldr	r3, [r7, #16]
 8010802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	3308      	adds	r3, #8
 801080e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010810:	623a      	str	r2, [r7, #32]
 8010812:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010814:	69f9      	ldr	r1, [r7, #28]
 8010816:	6a3a      	ldr	r2, [r7, #32]
 8010818:	e841 2300 	strex	r3, r2, [r1]
 801081c:	61bb      	str	r3, [r7, #24]
   return(result);
 801081e:	69bb      	ldr	r3, [r7, #24]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d1e5      	bne.n	80107f0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010824:	2300      	movs	r3, #0
}
 8010826:	4618      	mov	r0, r3
 8010828:	3758      	adds	r7, #88	@ 0x58
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop
 8010830:	0801098d 	.word	0x0801098d
 8010834:	08010ab5 	.word	0x08010ab5
 8010838:	08010af3 	.word	0x08010af3

0801083c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801083c:	b480      	push	{r7}
 801083e:	b08f      	sub	sp, #60	@ 0x3c
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801084a:	6a3b      	ldr	r3, [r7, #32]
 801084c:	e853 3f00 	ldrex	r3, [r3]
 8010850:	61fb      	str	r3, [r7, #28]
   return(result);
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010858:	637b      	str	r3, [r7, #52]	@ 0x34
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	461a      	mov	r2, r3
 8010860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010862:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010864:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010866:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010868:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801086a:	e841 2300 	strex	r3, r2, [r1]
 801086e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010872:	2b00      	cmp	r3, #0
 8010874:	d1e6      	bne.n	8010844 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	3308      	adds	r3, #8
 801087c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	e853 3f00 	ldrex	r3, [r3]
 8010884:	60bb      	str	r3, [r7, #8]
   return(result);
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801088c:	633b      	str	r3, [r7, #48]	@ 0x30
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	3308      	adds	r3, #8
 8010894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010896:	61ba      	str	r2, [r7, #24]
 8010898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801089a:	6979      	ldr	r1, [r7, #20]
 801089c:	69ba      	ldr	r2, [r7, #24]
 801089e:	e841 2300 	strex	r3, r2, [r1]
 80108a2:	613b      	str	r3, [r7, #16]
   return(result);
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d1e5      	bne.n	8010876 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2220      	movs	r2, #32
 80108ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80108b2:	bf00      	nop
 80108b4:	373c      	adds	r7, #60	@ 0x3c
 80108b6:	46bd      	mov	sp, r7
 80108b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108bc:	4770      	bx	lr
	...

080108c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80108c0:	b480      	push	{r7}
 80108c2:	b095      	sub	sp, #84	@ 0x54
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108d0:	e853 3f00 	ldrex	r3, [r3]
 80108d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80108d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80108dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	461a      	mov	r2, r3
 80108e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80108e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80108ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80108ee:	e841 2300 	strex	r3, r2, [r1]
 80108f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80108f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d1e6      	bne.n	80108c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	3308      	adds	r3, #8
 8010900:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010902:	6a3b      	ldr	r3, [r7, #32]
 8010904:	e853 3f00 	ldrex	r3, [r3]
 8010908:	61fb      	str	r3, [r7, #28]
   return(result);
 801090a:	69fa      	ldr	r2, [r7, #28]
 801090c:	4b1e      	ldr	r3, [pc, #120]	@ (8010988 <UART_EndRxTransfer+0xc8>)
 801090e:	4013      	ands	r3, r2
 8010910:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	3308      	adds	r3, #8
 8010918:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801091a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801091c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801091e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010920:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010922:	e841 2300 	strex	r3, r2, [r1]
 8010926:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801092a:	2b00      	cmp	r3, #0
 801092c:	d1e5      	bne.n	80108fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010932:	2b01      	cmp	r3, #1
 8010934:	d118      	bne.n	8010968 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	e853 3f00 	ldrex	r3, [r3]
 8010942:	60bb      	str	r3, [r7, #8]
   return(result);
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	f023 0310 	bic.w	r3, r3, #16
 801094a:	647b      	str	r3, [r7, #68]	@ 0x44
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	461a      	mov	r2, r3
 8010952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010954:	61bb      	str	r3, [r7, #24]
 8010956:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010958:	6979      	ldr	r1, [r7, #20]
 801095a:	69ba      	ldr	r2, [r7, #24]
 801095c:	e841 2300 	strex	r3, r2, [r1]
 8010960:	613b      	str	r3, [r7, #16]
   return(result);
 8010962:	693b      	ldr	r3, [r7, #16]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d1e6      	bne.n	8010936 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2220      	movs	r2, #32
 801096c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2200      	movs	r2, #0
 8010974:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2200      	movs	r2, #0
 801097a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801097c:	bf00      	nop
 801097e:	3754      	adds	r7, #84	@ 0x54
 8010980:	46bd      	mov	sp, r7
 8010982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010986:	4770      	bx	lr
 8010988:	effffffe 	.word	0xeffffffe

0801098c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b09c      	sub	sp, #112	@ 0x70
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010998:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	69db      	ldr	r3, [r3, #28]
 801099e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80109a2:	d071      	beq.n	8010a88 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80109a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109a6:	2200      	movs	r2, #0
 80109a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80109ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109b4:	e853 3f00 	ldrex	r3, [r3]
 80109b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80109ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80109c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80109c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	461a      	mov	r2, r3
 80109c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80109ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80109cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80109d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80109d2:	e841 2300 	strex	r3, r2, [r1]
 80109d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80109d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d1e6      	bne.n	80109ac <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	3308      	adds	r3, #8
 80109e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109e8:	e853 3f00 	ldrex	r3, [r3]
 80109ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80109ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109f0:	f023 0301 	bic.w	r3, r3, #1
 80109f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80109f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	3308      	adds	r3, #8
 80109fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80109fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8010a00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010a04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010a06:	e841 2300 	strex	r3, r2, [r1]
 8010a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d1e5      	bne.n	80109de <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	3308      	adds	r3, #8
 8010a18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a1c:	e853 3f00 	ldrex	r3, [r3]
 8010a20:	623b      	str	r3, [r7, #32]
   return(result);
 8010a22:	6a3b      	ldr	r3, [r7, #32]
 8010a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010a28:	663b      	str	r3, [r7, #96]	@ 0x60
 8010a2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	3308      	adds	r3, #8
 8010a30:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010a32:	633a      	str	r2, [r7, #48]	@ 0x30
 8010a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a3a:	e841 2300 	strex	r3, r2, [r1]
 8010a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d1e5      	bne.n	8010a12 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010a46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a48:	2220      	movs	r2, #32
 8010a4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a52:	2b01      	cmp	r3, #1
 8010a54:	d118      	bne.n	8010a88 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	e853 3f00 	ldrex	r3, [r3]
 8010a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	f023 0310 	bic.w	r3, r3, #16
 8010a6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010a6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	461a      	mov	r2, r3
 8010a72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a74:	61fb      	str	r3, [r7, #28]
 8010a76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a78:	69b9      	ldr	r1, [r7, #24]
 8010a7a:	69fa      	ldr	r2, [r7, #28]
 8010a7c:	e841 2300 	strex	r3, r2, [r1]
 8010a80:	617b      	str	r3, [r7, #20]
   return(result);
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d1e6      	bne.n	8010a56 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010a88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a92:	2b01      	cmp	r3, #1
 8010a94:	d107      	bne.n	8010aa6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010aa0:	f7f3 f8b2 	bl	8003c08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010aa4:	e002      	b.n	8010aac <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8010aa6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010aa8:	f7fe fdca 	bl	800f640 <HAL_UART_RxCpltCallback>
}
 8010aac:	bf00      	nop
 8010aae:	3770      	adds	r7, #112	@ 0x70
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b084      	sub	sp, #16
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ac0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	2201      	movs	r2, #1
 8010ac6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d109      	bne.n	8010ae4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010ad6:	085b      	lsrs	r3, r3, #1
 8010ad8:	b29b      	uxth	r3, r3
 8010ada:	4619      	mov	r1, r3
 8010adc:	68f8      	ldr	r0, [r7, #12]
 8010ade:	f7f3 f893 	bl	8003c08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010ae2:	e002      	b.n	8010aea <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010ae4:	68f8      	ldr	r0, [r7, #12]
 8010ae6:	f7fe fdb5 	bl	800f654 <HAL_UART_RxHalfCpltCallback>
}
 8010aea:	bf00      	nop
 8010aec:	3710      	adds	r7, #16
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}

08010af2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010af2:	b580      	push	{r7, lr}
 8010af4:	b086      	sub	sp, #24
 8010af6:	af00      	add	r7, sp, #0
 8010af8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010afe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b06:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010b0e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	689b      	ldr	r3, [r3, #8]
 8010b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010b1a:	2b80      	cmp	r3, #128	@ 0x80
 8010b1c:	d109      	bne.n	8010b32 <UART_DMAError+0x40>
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	2b21      	cmp	r3, #33	@ 0x21
 8010b22:	d106      	bne.n	8010b32 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	2200      	movs	r2, #0
 8010b28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010b2c:	6978      	ldr	r0, [r7, #20]
 8010b2e:	f7ff fe85 	bl	801083c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010b32:	697b      	ldr	r3, [r7, #20]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	689b      	ldr	r3, [r3, #8]
 8010b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b3c:	2b40      	cmp	r3, #64	@ 0x40
 8010b3e:	d109      	bne.n	8010b54 <UART_DMAError+0x62>
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	2b22      	cmp	r3, #34	@ 0x22
 8010b44:	d106      	bne.n	8010b54 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010b4e:	6978      	ldr	r0, [r7, #20]
 8010b50:	f7ff feb6 	bl	80108c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b5a:	f043 0210 	orr.w	r2, r3, #16
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b64:	6978      	ldr	r0, [r7, #20]
 8010b66:	f7f3 fe15 	bl	8004794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b6a:	bf00      	nop
 8010b6c:	3718      	adds	r7, #24
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}

08010b72 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010b72:	b580      	push	{r7, lr}
 8010b74:	b084      	sub	sp, #16
 8010b76:	af00      	add	r7, sp, #0
 8010b78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	2200      	movs	r2, #0
 8010b84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b90:	68f8      	ldr	r0, [r7, #12]
 8010b92:	f7f3 fdff 	bl	8004794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b96:	bf00      	nop
 8010b98:	3710      	adds	r7, #16
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}

08010b9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010b9e:	b580      	push	{r7, lr}
 8010ba0:	b088      	sub	sp, #32
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	e853 3f00 	ldrex	r3, [r3]
 8010bb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010bba:	61fb      	str	r3, [r7, #28]
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	69fb      	ldr	r3, [r7, #28]
 8010bc4:	61bb      	str	r3, [r7, #24]
 8010bc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bc8:	6979      	ldr	r1, [r7, #20]
 8010bca:	69ba      	ldr	r2, [r7, #24]
 8010bcc:	e841 2300 	strex	r3, r2, [r1]
 8010bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8010bd2:	693b      	ldr	r3, [r7, #16]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d1e6      	bne.n	8010ba6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2220      	movs	r2, #32
 8010bdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2200      	movs	r2, #0
 8010be4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f7fe fd20 	bl	800f62c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010bec:	bf00      	nop
 8010bee:	3720      	adds	r7, #32
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}

08010bf4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b09c      	sub	sp, #112	@ 0x70
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010c02:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010c0c:	2b22      	cmp	r3, #34	@ 0x22
 8010c0e:	f040 80be 	bne.w	8010d8e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c18:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010c1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010c20:	b2d9      	uxtb	r1, r3
 8010c22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010c26:	b2da      	uxtb	r2, r3
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010c2c:	400a      	ands	r2, r1
 8010c2e:	b2d2      	uxtb	r2, r2
 8010c30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010c36:	1c5a      	adds	r2, r3, #1
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010c42:	b29b      	uxth	r3, r3
 8010c44:	3b01      	subs	r3, #1
 8010c46:	b29a      	uxth	r2, r3
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010c54:	b29b      	uxth	r3, r3
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	f040 80a1 	bne.w	8010d9e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c64:	e853 3f00 	ldrex	r3, [r3]
 8010c68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010c70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	461a      	mov	r2, r3
 8010c78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010c7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010c7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010c80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010c82:	e841 2300 	strex	r3, r2, [r1]
 8010c86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010c88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d1e6      	bne.n	8010c5c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	3308      	adds	r3, #8
 8010c94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c98:	e853 3f00 	ldrex	r3, [r3]
 8010c9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ca0:	f023 0301 	bic.w	r3, r3, #1
 8010ca4:	667b      	str	r3, [r7, #100]	@ 0x64
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	3308      	adds	r3, #8
 8010cac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010cae:	647a      	str	r2, [r7, #68]	@ 0x44
 8010cb0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cb2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010cb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010cb6:	e841 2300 	strex	r3, r2, [r1]
 8010cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d1e5      	bne.n	8010c8e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2220      	movs	r2, #32
 8010cc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	2200      	movs	r2, #0
 8010cce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	4a33      	ldr	r2, [pc, #204]	@ (8010da8 <UART_RxISR_8BIT+0x1b4>)
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d01f      	beq.n	8010d20 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	685b      	ldr	r3, [r3, #4]
 8010ce6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d018      	beq.n	8010d20 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cf6:	e853 3f00 	ldrex	r3, [r3]
 8010cfa:	623b      	str	r3, [r7, #32]
   return(result);
 8010cfc:	6a3b      	ldr	r3, [r7, #32]
 8010cfe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010d02:	663b      	str	r3, [r7, #96]	@ 0x60
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	461a      	mov	r2, r3
 8010d0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010d0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8010d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010d12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d14:	e841 2300 	strex	r3, r2, [r1]
 8010d18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d1e6      	bne.n	8010cee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d24:	2b01      	cmp	r3, #1
 8010d26:	d12e      	bne.n	8010d86 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d34:	693b      	ldr	r3, [r7, #16]
 8010d36:	e853 3f00 	ldrex	r3, [r3]
 8010d3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	f023 0310 	bic.w	r3, r3, #16
 8010d42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	461a      	mov	r2, r3
 8010d4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010d4c:	61fb      	str	r3, [r7, #28]
 8010d4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d50:	69b9      	ldr	r1, [r7, #24]
 8010d52:	69fa      	ldr	r2, [r7, #28]
 8010d54:	e841 2300 	strex	r3, r2, [r1]
 8010d58:	617b      	str	r3, [r7, #20]
   return(result);
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d1e6      	bne.n	8010d2e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	69db      	ldr	r3, [r3, #28]
 8010d66:	f003 0310 	and.w	r3, r3, #16
 8010d6a:	2b10      	cmp	r3, #16
 8010d6c:	d103      	bne.n	8010d76 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	2210      	movs	r2, #16
 8010d74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010d7c:	4619      	mov	r1, r3
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f7f2 ff42 	bl	8003c08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010d84:	e00b      	b.n	8010d9e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f7fe fc5a 	bl	800f640 <HAL_UART_RxCpltCallback>
}
 8010d8c:	e007      	b.n	8010d9e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	699a      	ldr	r2, [r3, #24]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f042 0208 	orr.w	r2, r2, #8
 8010d9c:	619a      	str	r2, [r3, #24]
}
 8010d9e:	bf00      	nop
 8010da0:	3770      	adds	r7, #112	@ 0x70
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	58000c00 	.word	0x58000c00

08010dac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b09c      	sub	sp, #112	@ 0x70
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010dba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010dc4:	2b22      	cmp	r3, #34	@ 0x22
 8010dc6:	f040 80be 	bne.w	8010f46 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dd0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8010dda:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8010dde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010de2:	4013      	ands	r3, r2
 8010de4:	b29a      	uxth	r2, r3
 8010de6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010de8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010dee:	1c9a      	adds	r2, r3, #2
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010dfa:	b29b      	uxth	r3, r3
 8010dfc:	3b01      	subs	r3, #1
 8010dfe:	b29a      	uxth	r2, r3
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	f040 80a1 	bne.w	8010f56 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e1c:	e853 3f00 	ldrex	r3, [r3]
 8010e20:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010e28:	667b      	str	r3, [r7, #100]	@ 0x64
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	461a      	mov	r2, r3
 8010e30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010e32:	657b      	str	r3, [r7, #84]	@ 0x54
 8010e34:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010e38:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010e3a:	e841 2300 	strex	r3, r2, [r1]
 8010e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d1e6      	bne.n	8010e14 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	3308      	adds	r3, #8
 8010e4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e50:	e853 3f00 	ldrex	r3, [r3]
 8010e54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e58:	f023 0301 	bic.w	r3, r3, #1
 8010e5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	3308      	adds	r3, #8
 8010e64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010e66:	643a      	str	r2, [r7, #64]	@ 0x40
 8010e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010e6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010e6e:	e841 2300 	strex	r3, r2, [r1]
 8010e72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d1e5      	bne.n	8010e46 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2220      	movs	r2, #32
 8010e7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	2200      	movs	r2, #0
 8010e86:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	4a33      	ldr	r2, [pc, #204]	@ (8010f60 <UART_RxISR_16BIT+0x1b4>)
 8010e94:	4293      	cmp	r3, r2
 8010e96:	d01f      	beq.n	8010ed8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	685b      	ldr	r3, [r3, #4]
 8010e9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d018      	beq.n	8010ed8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eac:	6a3b      	ldr	r3, [r7, #32]
 8010eae:	e853 3f00 	ldrex	r3, [r3]
 8010eb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8010eb4:	69fb      	ldr	r3, [r7, #28]
 8010eb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010eba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	461a      	mov	r2, r3
 8010ec2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010ec6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ec8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ecc:	e841 2300 	strex	r3, r2, [r1]
 8010ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d1e6      	bne.n	8010ea6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010edc:	2b01      	cmp	r3, #1
 8010ede:	d12e      	bne.n	8010f3e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	e853 3f00 	ldrex	r3, [r3]
 8010ef2:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	f023 0310 	bic.w	r3, r3, #16
 8010efa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	461a      	mov	r2, r3
 8010f02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010f04:	61bb      	str	r3, [r7, #24]
 8010f06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f08:	6979      	ldr	r1, [r7, #20]
 8010f0a:	69ba      	ldr	r2, [r7, #24]
 8010f0c:	e841 2300 	strex	r3, r2, [r1]
 8010f10:	613b      	str	r3, [r7, #16]
   return(result);
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d1e6      	bne.n	8010ee6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	69db      	ldr	r3, [r3, #28]
 8010f1e:	f003 0310 	and.w	r3, r3, #16
 8010f22:	2b10      	cmp	r3, #16
 8010f24:	d103      	bne.n	8010f2e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	2210      	movs	r2, #16
 8010f2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010f34:	4619      	mov	r1, r3
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f7f2 fe66 	bl	8003c08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010f3c:	e00b      	b.n	8010f56 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f7fe fb7e 	bl	800f640 <HAL_UART_RxCpltCallback>
}
 8010f44:	e007      	b.n	8010f56 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	699a      	ldr	r2, [r3, #24]
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	f042 0208 	orr.w	r2, r2, #8
 8010f54:	619a      	str	r2, [r3, #24]
}
 8010f56:	bf00      	nop
 8010f58:	3770      	adds	r7, #112	@ 0x70
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	58000c00 	.word	0x58000c00

08010f64 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b0ac      	sub	sp, #176	@ 0xb0
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010f72:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	69db      	ldr	r3, [r3, #28]
 8010f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	689b      	ldr	r3, [r3, #8]
 8010f90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010f9a:	2b22      	cmp	r3, #34	@ 0x22
 8010f9c:	f040 8180 	bne.w	80112a0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010fa6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010faa:	e123      	b.n	80111f4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fb2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010fb6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8010fba:	b2d9      	uxtb	r1, r3
 8010fbc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8010fc0:	b2da      	uxtb	r2, r3
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010fc6:	400a      	ands	r2, r1
 8010fc8:	b2d2      	uxtb	r2, r2
 8010fca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010fd0:	1c5a      	adds	r2, r3, #1
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010fdc:	b29b      	uxth	r3, r3
 8010fde:	3b01      	subs	r3, #1
 8010fe0:	b29a      	uxth	r2, r3
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	69db      	ldr	r3, [r3, #28]
 8010fee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010ff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ff6:	f003 0307 	and.w	r3, r3, #7
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d053      	beq.n	80110a6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011002:	f003 0301 	and.w	r3, r3, #1
 8011006:	2b00      	cmp	r3, #0
 8011008:	d011      	beq.n	801102e <UART_RxISR_8BIT_FIFOEN+0xca>
 801100a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801100e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011012:	2b00      	cmp	r3, #0
 8011014:	d00b      	beq.n	801102e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	2201      	movs	r2, #1
 801101c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011024:	f043 0201 	orr.w	r2, r3, #1
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801102e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011032:	f003 0302 	and.w	r3, r3, #2
 8011036:	2b00      	cmp	r3, #0
 8011038:	d011      	beq.n	801105e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801103a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801103e:	f003 0301 	and.w	r3, r3, #1
 8011042:	2b00      	cmp	r3, #0
 8011044:	d00b      	beq.n	801105e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	2202      	movs	r2, #2
 801104c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011054:	f043 0204 	orr.w	r2, r3, #4
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801105e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011062:	f003 0304 	and.w	r3, r3, #4
 8011066:	2b00      	cmp	r3, #0
 8011068:	d011      	beq.n	801108e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801106a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801106e:	f003 0301 	and.w	r3, r3, #1
 8011072:	2b00      	cmp	r3, #0
 8011074:	d00b      	beq.n	801108e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	2204      	movs	r2, #4
 801107c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011084:	f043 0202 	orr.w	r2, r3, #2
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011094:	2b00      	cmp	r3, #0
 8011096:	d006      	beq.n	80110a6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f7f3 fb7b 	bl	8004794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	2200      	movs	r2, #0
 80110a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80110ac:	b29b      	uxth	r3, r3
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	f040 80a0 	bne.w	80111f4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80110bc:	e853 3f00 	ldrex	r3, [r3]
 80110c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80110c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80110c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	461a      	mov	r2, r3
 80110d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80110d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80110d8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110da:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80110dc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80110de:	e841 2300 	strex	r3, r2, [r1]
 80110e2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80110e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d1e4      	bne.n	80110b4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	3308      	adds	r3, #8
 80110f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80110f4:	e853 3f00 	ldrex	r3, [r3]
 80110f8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80110fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80110fc:	4b6e      	ldr	r3, [pc, #440]	@ (80112b8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80110fe:	4013      	ands	r3, r2
 8011100:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	3308      	adds	r3, #8
 801110a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801110e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8011110:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011112:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8011114:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011116:	e841 2300 	strex	r3, r2, [r1]
 801111a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801111c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801111e:	2b00      	cmp	r3, #0
 8011120:	d1e3      	bne.n	80110ea <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2220      	movs	r2, #32
 8011126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	2200      	movs	r2, #0
 801112e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2200      	movs	r2, #0
 8011134:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	4a60      	ldr	r2, [pc, #384]	@ (80112bc <UART_RxISR_8BIT_FIFOEN+0x358>)
 801113c:	4293      	cmp	r3, r2
 801113e:	d021      	beq.n	8011184 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	685b      	ldr	r3, [r3, #4]
 8011146:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801114a:	2b00      	cmp	r3, #0
 801114c:	d01a      	beq.n	8011184 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011154:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011156:	e853 3f00 	ldrex	r3, [r3]
 801115a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801115c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801115e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011162:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	461a      	mov	r2, r3
 801116c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011170:	657b      	str	r3, [r7, #84]	@ 0x54
 8011172:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011174:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011176:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011178:	e841 2300 	strex	r3, r2, [r1]
 801117c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801117e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011180:	2b00      	cmp	r3, #0
 8011182:	d1e4      	bne.n	801114e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011188:	2b01      	cmp	r3, #1
 801118a:	d130      	bne.n	80111ee <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2200      	movs	r2, #0
 8011190:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801119a:	e853 3f00 	ldrex	r3, [r3]
 801119e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80111a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111a2:	f023 0310 	bic.w	r3, r3, #16
 80111a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	461a      	mov	r2, r3
 80111b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80111b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80111b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80111ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80111bc:	e841 2300 	strex	r3, r2, [r1]
 80111c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80111c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d1e4      	bne.n	8011192 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	69db      	ldr	r3, [r3, #28]
 80111ce:	f003 0310 	and.w	r3, r3, #16
 80111d2:	2b10      	cmp	r3, #16
 80111d4:	d103      	bne.n	80111de <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	2210      	movs	r2, #16
 80111dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80111e4:	4619      	mov	r1, r3
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f7f2 fd0e 	bl	8003c08 <HAL_UARTEx_RxEventCallback>
 80111ec:	e002      	b.n	80111f4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80111ee:	6878      	ldr	r0, [r7, #4]
 80111f0:	f7fe fa26 	bl	800f640 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80111f4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d006      	beq.n	801120a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80111fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011200:	f003 0320 	and.w	r3, r3, #32
 8011204:	2b00      	cmp	r3, #0
 8011206:	f47f aed1 	bne.w	8010fac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011210:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011214:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011218:	2b00      	cmp	r3, #0
 801121a:	d049      	beq.n	80112b0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011222:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8011226:	429a      	cmp	r2, r3
 8011228:	d242      	bcs.n	80112b0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	3308      	adds	r3, #8
 8011230:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011232:	6a3b      	ldr	r3, [r7, #32]
 8011234:	e853 3f00 	ldrex	r3, [r3]
 8011238:	61fb      	str	r3, [r7, #28]
   return(result);
 801123a:	69fb      	ldr	r3, [r7, #28]
 801123c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	3308      	adds	r3, #8
 801124a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801124e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011250:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011252:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011256:	e841 2300 	strex	r3, r2, [r1]
 801125a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801125c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801125e:	2b00      	cmp	r3, #0
 8011260:	d1e3      	bne.n	801122a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	4a16      	ldr	r2, [pc, #88]	@ (80112c0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011266:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	e853 3f00 	ldrex	r3, [r3]
 8011274:	60bb      	str	r3, [r7, #8]
   return(result);
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	f043 0320 	orr.w	r3, r3, #32
 801127c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	461a      	mov	r2, r3
 8011286:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801128a:	61bb      	str	r3, [r7, #24]
 801128c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801128e:	6979      	ldr	r1, [r7, #20]
 8011290:	69ba      	ldr	r2, [r7, #24]
 8011292:	e841 2300 	strex	r3, r2, [r1]
 8011296:	613b      	str	r3, [r7, #16]
   return(result);
 8011298:	693b      	ldr	r3, [r7, #16]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d1e4      	bne.n	8011268 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801129e:	e007      	b.n	80112b0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	699a      	ldr	r2, [r3, #24]
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	f042 0208 	orr.w	r2, r2, #8
 80112ae:	619a      	str	r2, [r3, #24]
}
 80112b0:	bf00      	nop
 80112b2:	37b0      	adds	r7, #176	@ 0xb0
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	effffffe 	.word	0xeffffffe
 80112bc:	58000c00 	.word	0x58000c00
 80112c0:	08010bf5 	.word	0x08010bf5

080112c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b0ae      	sub	sp, #184	@ 0xb8
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80112d2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	69db      	ldr	r3, [r3, #28]
 80112dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	689b      	ldr	r3, [r3, #8]
 80112f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80112fa:	2b22      	cmp	r3, #34	@ 0x22
 80112fc:	f040 8184 	bne.w	8011608 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011306:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801130a:	e127      	b.n	801155c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011312:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801131a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801131e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8011322:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8011326:	4013      	ands	r3, r2
 8011328:	b29a      	uxth	r2, r3
 801132a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801132e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011334:	1c9a      	adds	r2, r3, #2
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011340:	b29b      	uxth	r3, r3
 8011342:	3b01      	subs	r3, #1
 8011344:	b29a      	uxth	r2, r3
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	69db      	ldr	r3, [r3, #28]
 8011352:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011356:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801135a:	f003 0307 	and.w	r3, r3, #7
 801135e:	2b00      	cmp	r3, #0
 8011360:	d053      	beq.n	801140a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011362:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011366:	f003 0301 	and.w	r3, r3, #1
 801136a:	2b00      	cmp	r3, #0
 801136c:	d011      	beq.n	8011392 <UART_RxISR_16BIT_FIFOEN+0xce>
 801136e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011376:	2b00      	cmp	r3, #0
 8011378:	d00b      	beq.n	8011392 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	2201      	movs	r2, #1
 8011380:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011388:	f043 0201 	orr.w	r2, r3, #1
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011392:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011396:	f003 0302 	and.w	r3, r3, #2
 801139a:	2b00      	cmp	r3, #0
 801139c:	d011      	beq.n	80113c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801139e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80113a2:	f003 0301 	and.w	r3, r3, #1
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d00b      	beq.n	80113c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	2202      	movs	r2, #2
 80113b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80113b8:	f043 0204 	orr.w	r2, r3, #4
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80113c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80113c6:	f003 0304 	and.w	r3, r3, #4
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d011      	beq.n	80113f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80113ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80113d2:	f003 0301 	and.w	r3, r3, #1
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d00b      	beq.n	80113f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	2204      	movs	r2, #4
 80113e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80113e8:	f043 0202 	orr.w	r2, r3, #2
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d006      	beq.n	801140a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	f7f3 f9c9 	bl	8004794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2200      	movs	r2, #0
 8011406:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011410:	b29b      	uxth	r3, r3
 8011412:	2b00      	cmp	r3, #0
 8011414:	f040 80a2 	bne.w	801155c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801141e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011420:	e853 3f00 	ldrex	r3, [r3]
 8011424:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011426:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801142c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	461a      	mov	r2, r3
 8011436:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801143a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801143e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011440:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011442:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011446:	e841 2300 	strex	r3, r2, [r1]
 801144a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801144c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801144e:	2b00      	cmp	r3, #0
 8011450:	d1e2      	bne.n	8011418 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	3308      	adds	r3, #8
 8011458:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801145a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801145c:	e853 3f00 	ldrex	r3, [r3]
 8011460:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011462:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011464:	4b6e      	ldr	r3, [pc, #440]	@ (8011620 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8011466:	4013      	ands	r3, r2
 8011468:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	3308      	adds	r3, #8
 8011472:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011476:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011478:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801147a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801147c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801147e:	e841 2300 	strex	r3, r2, [r1]
 8011482:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011484:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011486:	2b00      	cmp	r3, #0
 8011488:	d1e3      	bne.n	8011452 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	2220      	movs	r2, #32
 801148e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2200      	movs	r2, #0
 8011496:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2200      	movs	r2, #0
 801149c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	4a60      	ldr	r2, [pc, #384]	@ (8011624 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80114a4:	4293      	cmp	r3, r2
 80114a6:	d021      	beq.n	80114ec <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d01a      	beq.n	80114ec <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114be:	e853 3f00 	ldrex	r3, [r3]
 80114c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80114c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80114c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80114ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	461a      	mov	r2, r3
 80114d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80114d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80114da:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80114de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80114e0:	e841 2300 	strex	r3, r2, [r1]
 80114e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80114e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d1e4      	bne.n	80114b6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80114f0:	2b01      	cmp	r3, #1
 80114f2:	d130      	bne.n	8011556 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2200      	movs	r2, #0
 80114f8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011502:	e853 3f00 	ldrex	r3, [r3]
 8011506:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801150a:	f023 0310 	bic.w	r3, r3, #16
 801150e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	461a      	mov	r2, r3
 8011518:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801151c:	647b      	str	r3, [r7, #68]	@ 0x44
 801151e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011520:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011522:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011524:	e841 2300 	strex	r3, r2, [r1]
 8011528:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801152a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801152c:	2b00      	cmp	r3, #0
 801152e:	d1e4      	bne.n	80114fa <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	69db      	ldr	r3, [r3, #28]
 8011536:	f003 0310 	and.w	r3, r3, #16
 801153a:	2b10      	cmp	r3, #16
 801153c:	d103      	bne.n	8011546 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	2210      	movs	r2, #16
 8011544:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801154c:	4619      	mov	r1, r3
 801154e:	6878      	ldr	r0, [r7, #4]
 8011550:	f7f2 fb5a 	bl	8003c08 <HAL_UARTEx_RxEventCallback>
 8011554:	e002      	b.n	801155c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f7fe f872 	bl	800f640 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801155c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8011560:	2b00      	cmp	r3, #0
 8011562:	d006      	beq.n	8011572 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8011564:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011568:	f003 0320 	and.w	r3, r3, #32
 801156c:	2b00      	cmp	r3, #0
 801156e:	f47f aecd 	bne.w	801130c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011578:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801157c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8011580:	2b00      	cmp	r3, #0
 8011582:	d049      	beq.n	8011618 <UART_RxISR_16BIT_FIFOEN+0x354>
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801158a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801158e:	429a      	cmp	r2, r3
 8011590:	d242      	bcs.n	8011618 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	3308      	adds	r3, #8
 8011598:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801159c:	e853 3f00 	ldrex	r3, [r3]
 80115a0:	623b      	str	r3, [r7, #32]
   return(result);
 80115a2:	6a3b      	ldr	r3, [r7, #32]
 80115a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80115a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	3308      	adds	r3, #8
 80115b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80115b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80115b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80115bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80115be:	e841 2300 	strex	r3, r2, [r1]
 80115c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80115c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d1e3      	bne.n	8011592 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	4a16      	ldr	r2, [pc, #88]	@ (8011628 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80115ce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	e853 3f00 	ldrex	r3, [r3]
 80115dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	f043 0320 	orr.w	r3, r3, #32
 80115e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	461a      	mov	r2, r3
 80115ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80115f2:	61fb      	str	r3, [r7, #28]
 80115f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115f6:	69b9      	ldr	r1, [r7, #24]
 80115f8:	69fa      	ldr	r2, [r7, #28]
 80115fa:	e841 2300 	strex	r3, r2, [r1]
 80115fe:	617b      	str	r3, [r7, #20]
   return(result);
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d1e4      	bne.n	80115d0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011606:	e007      	b.n	8011618 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	699a      	ldr	r2, [r3, #24]
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	f042 0208 	orr.w	r2, r2, #8
 8011616:	619a      	str	r2, [r3, #24]
}
 8011618:	bf00      	nop
 801161a:	37b8      	adds	r7, #184	@ 0xb8
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}
 8011620:	effffffe 	.word	0xeffffffe
 8011624:	58000c00 	.word	0x58000c00
 8011628:	08010dad 	.word	0x08010dad

0801162c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801162c:	b480      	push	{r7}
 801162e:	b083      	sub	sp, #12
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011634:	bf00      	nop
 8011636:	370c      	adds	r7, #12
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr

08011640 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011640:	b480      	push	{r7}
 8011642:	b083      	sub	sp, #12
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011648:	bf00      	nop
 801164a:	370c      	adds	r7, #12
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr

08011654 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011654:	b480      	push	{r7}
 8011656:	b083      	sub	sp, #12
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801165c:	bf00      	nop
 801165e:	370c      	adds	r7, #12
 8011660:	46bd      	mov	sp, r7
 8011662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011666:	4770      	bx	lr

08011668 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011668:	b480      	push	{r7}
 801166a:	b085      	sub	sp, #20
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011676:	2b01      	cmp	r3, #1
 8011678:	d101      	bne.n	801167e <HAL_UARTEx_DisableFifoMode+0x16>
 801167a:	2302      	movs	r3, #2
 801167c:	e027      	b.n	80116ce <HAL_UARTEx_DisableFifoMode+0x66>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	2201      	movs	r2, #1
 8011682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2224      	movs	r2, #36	@ 0x24
 801168a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	681a      	ldr	r2, [r3, #0]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	f022 0201 	bic.w	r2, r2, #1
 80116a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80116ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	2200      	movs	r2, #0
 80116b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	68fa      	ldr	r2, [r7, #12]
 80116ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2220      	movs	r2, #32
 80116c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2200      	movs	r2, #0
 80116c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80116cc:	2300      	movs	r3, #0
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	3714      	adds	r7, #20
 80116d2:	46bd      	mov	sp, r7
 80116d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d8:	4770      	bx	lr

080116da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80116da:	b580      	push	{r7, lr}
 80116dc:	b084      	sub	sp, #16
 80116de:	af00      	add	r7, sp, #0
 80116e0:	6078      	str	r0, [r7, #4]
 80116e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80116ea:	2b01      	cmp	r3, #1
 80116ec:	d101      	bne.n	80116f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80116ee:	2302      	movs	r3, #2
 80116f0:	e02d      	b.n	801174e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2201      	movs	r2, #1
 80116f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	2224      	movs	r2, #36	@ 0x24
 80116fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	681a      	ldr	r2, [r3, #0]
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	f022 0201 	bic.w	r2, r2, #1
 8011718:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	689b      	ldr	r3, [r3, #8]
 8011720:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	683a      	ldr	r2, [r7, #0]
 801172a:	430a      	orrs	r2, r1
 801172c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f000 f8f4 	bl	801191c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	68fa      	ldr	r2, [r7, #12]
 801173a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2220      	movs	r2, #32
 8011740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2200      	movs	r2, #0
 8011748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801174c:	2300      	movs	r3, #0
}
 801174e:	4618      	mov	r0, r3
 8011750:	3710      	adds	r7, #16
 8011752:	46bd      	mov	sp, r7
 8011754:	bd80      	pop	{r7, pc}

08011756 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011756:	b580      	push	{r7, lr}
 8011758:	b084      	sub	sp, #16
 801175a:	af00      	add	r7, sp, #0
 801175c:	6078      	str	r0, [r7, #4]
 801175e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011766:	2b01      	cmp	r3, #1
 8011768:	d101      	bne.n	801176e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801176a:	2302      	movs	r3, #2
 801176c:	e02d      	b.n	80117ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2201      	movs	r2, #1
 8011772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2224      	movs	r2, #36	@ 0x24
 801177a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	681a      	ldr	r2, [r3, #0]
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	f022 0201 	bic.w	r2, r2, #1
 8011794:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	689b      	ldr	r3, [r3, #8]
 801179c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	683a      	ldr	r2, [r7, #0]
 80117a6:	430a      	orrs	r2, r1
 80117a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f000 f8b6 	bl	801191c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	68fa      	ldr	r2, [r7, #12]
 80117b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	2220      	movs	r2, #32
 80117bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2200      	movs	r2, #0
 80117c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80117c8:	2300      	movs	r3, #0
}
 80117ca:	4618      	mov	r0, r3
 80117cc:	3710      	adds	r7, #16
 80117ce:	46bd      	mov	sp, r7
 80117d0:	bd80      	pop	{r7, pc}

080117d2 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80117d2:	b580      	push	{r7, lr}
 80117d4:	b08c      	sub	sp, #48	@ 0x30
 80117d6:	af00      	add	r7, sp, #0
 80117d8:	60f8      	str	r0, [r7, #12]
 80117da:	60b9      	str	r1, [r7, #8]
 80117dc:	4613      	mov	r3, r2
 80117de:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80117e0:	2300      	movs	r3, #0
 80117e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80117ec:	2b20      	cmp	r3, #32
 80117ee:	d13b      	bne.n	8011868 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d002      	beq.n	80117fc <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 80117f6:	88fb      	ldrh	r3, [r7, #6]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d101      	bne.n	8011800 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 80117fc:	2301      	movs	r3, #1
 80117fe:	e034      	b.n	801186a <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	2201      	movs	r2, #1
 8011804:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	2200      	movs	r2, #0
 801180a:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 801180c:	88fb      	ldrh	r3, [r7, #6]
 801180e:	461a      	mov	r2, r3
 8011810:	68b9      	ldr	r1, [r7, #8]
 8011812:	68f8      	ldr	r0, [r7, #12]
 8011814:	f7fe fe4a 	bl	80104ac <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801181c:	2b01      	cmp	r3, #1
 801181e:	d11d      	bne.n	801185c <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	2210      	movs	r2, #16
 8011826:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801182e:	69bb      	ldr	r3, [r7, #24]
 8011830:	e853 3f00 	ldrex	r3, [r3]
 8011834:	617b      	str	r3, [r7, #20]
   return(result);
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	f043 0310 	orr.w	r3, r3, #16
 801183c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	461a      	mov	r2, r3
 8011844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011846:	627b      	str	r3, [r7, #36]	@ 0x24
 8011848:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801184a:	6a39      	ldr	r1, [r7, #32]
 801184c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801184e:	e841 2300 	strex	r3, r2, [r1]
 8011852:	61fb      	str	r3, [r7, #28]
   return(result);
 8011854:	69fb      	ldr	r3, [r7, #28]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d1e6      	bne.n	8011828 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 801185a:	e002      	b.n	8011862 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 801185c:	2301      	movs	r3, #1
 801185e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8011862:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011866:	e000      	b.n	801186a <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8011868:	2302      	movs	r3, #2
  }
}
 801186a:	4618      	mov	r0, r3
 801186c:	3730      	adds	r7, #48	@ 0x30
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}

08011872 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011872:	b580      	push	{r7, lr}
 8011874:	b08c      	sub	sp, #48	@ 0x30
 8011876:	af00      	add	r7, sp, #0
 8011878:	60f8      	str	r0, [r7, #12]
 801187a:	60b9      	str	r1, [r7, #8]
 801187c:	4613      	mov	r3, r2
 801187e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011886:	2b20      	cmp	r3, #32
 8011888:	d142      	bne.n	8011910 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801188a:	68bb      	ldr	r3, [r7, #8]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d002      	beq.n	8011896 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8011890:	88fb      	ldrh	r3, [r7, #6]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d101      	bne.n	801189a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8011896:	2301      	movs	r3, #1
 8011898:	e03b      	b.n	8011912 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	2201      	movs	r2, #1
 801189e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	2200      	movs	r2, #0
 80118a4:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80118a6:	88fb      	ldrh	r3, [r7, #6]
 80118a8:	461a      	mov	r2, r3
 80118aa:	68b9      	ldr	r1, [r7, #8]
 80118ac:	68f8      	ldr	r0, [r7, #12]
 80118ae:	f7fe ff1f 	bl	80106f0 <UART_Start_Receive_DMA>
 80118b2:	4603      	mov	r3, r0
 80118b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80118b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d124      	bne.n	801190a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80118c4:	2b01      	cmp	r3, #1
 80118c6:	d11d      	bne.n	8011904 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	2210      	movs	r2, #16
 80118ce:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118d6:	69bb      	ldr	r3, [r7, #24]
 80118d8:	e853 3f00 	ldrex	r3, [r3]
 80118dc:	617b      	str	r3, [r7, #20]
   return(result);
 80118de:	697b      	ldr	r3, [r7, #20]
 80118e0:	f043 0310 	orr.w	r3, r3, #16
 80118e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	461a      	mov	r2, r3
 80118ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80118f0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118f2:	6a39      	ldr	r1, [r7, #32]
 80118f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118f6:	e841 2300 	strex	r3, r2, [r1]
 80118fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80118fc:	69fb      	ldr	r3, [r7, #28]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d1e6      	bne.n	80118d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8011902:	e002      	b.n	801190a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8011904:	2301      	movs	r3, #1
 8011906:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 801190a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801190e:	e000      	b.n	8011912 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8011910:	2302      	movs	r3, #2
  }
}
 8011912:	4618      	mov	r0, r3
 8011914:	3730      	adds	r7, #48	@ 0x30
 8011916:	46bd      	mov	sp, r7
 8011918:	bd80      	pop	{r7, pc}
	...

0801191c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801191c:	b480      	push	{r7}
 801191e:	b085      	sub	sp, #20
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011928:	2b00      	cmp	r3, #0
 801192a:	d108      	bne.n	801193e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2201      	movs	r2, #1
 8011930:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2201      	movs	r2, #1
 8011938:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801193c:	e031      	b.n	80119a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801193e:	2310      	movs	r3, #16
 8011940:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011942:	2310      	movs	r3, #16
 8011944:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	689b      	ldr	r3, [r3, #8]
 801194c:	0e5b      	lsrs	r3, r3, #25
 801194e:	b2db      	uxtb	r3, r3
 8011950:	f003 0307 	and.w	r3, r3, #7
 8011954:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	689b      	ldr	r3, [r3, #8]
 801195c:	0f5b      	lsrs	r3, r3, #29
 801195e:	b2db      	uxtb	r3, r3
 8011960:	f003 0307 	and.w	r3, r3, #7
 8011964:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011966:	7bbb      	ldrb	r3, [r7, #14]
 8011968:	7b3a      	ldrb	r2, [r7, #12]
 801196a:	4911      	ldr	r1, [pc, #68]	@ (80119b0 <UARTEx_SetNbDataToProcess+0x94>)
 801196c:	5c8a      	ldrb	r2, [r1, r2]
 801196e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011972:	7b3a      	ldrb	r2, [r7, #12]
 8011974:	490f      	ldr	r1, [pc, #60]	@ (80119b4 <UARTEx_SetNbDataToProcess+0x98>)
 8011976:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011978:	fb93 f3f2 	sdiv	r3, r3, r2
 801197c:	b29a      	uxth	r2, r3
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011984:	7bfb      	ldrb	r3, [r7, #15]
 8011986:	7b7a      	ldrb	r2, [r7, #13]
 8011988:	4909      	ldr	r1, [pc, #36]	@ (80119b0 <UARTEx_SetNbDataToProcess+0x94>)
 801198a:	5c8a      	ldrb	r2, [r1, r2]
 801198c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011990:	7b7a      	ldrb	r2, [r7, #13]
 8011992:	4908      	ldr	r1, [pc, #32]	@ (80119b4 <UARTEx_SetNbDataToProcess+0x98>)
 8011994:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011996:	fb93 f3f2 	sdiv	r3, r3, r2
 801199a:	b29a      	uxth	r2, r3
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80119a2:	bf00      	nop
 80119a4:	3714      	adds	r7, #20
 80119a6:	46bd      	mov	sp, r7
 80119a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ac:	4770      	bx	lr
 80119ae:	bf00      	nop
 80119b0:	0802cfe0 	.word	0x0802cfe0
 80119b4:	0802cfe8 	.word	0x0802cfe8

080119b8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80119b8:	b5b0      	push	{r4, r5, r7, lr}
 80119ba:	b08c      	sub	sp, #48	@ 0x30
 80119bc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80119be:	4b8f      	ldr	r3, [pc, #572]	@ (8011bfc <MX_LWIP_Init+0x244>)
 80119c0:	22c0      	movs	r2, #192	@ 0xc0
 80119c2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80119c4:	4b8d      	ldr	r3, [pc, #564]	@ (8011bfc <MX_LWIP_Init+0x244>)
 80119c6:	22a8      	movs	r2, #168	@ 0xa8
 80119c8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80119ca:	4b8c      	ldr	r3, [pc, #560]	@ (8011bfc <MX_LWIP_Init+0x244>)
 80119cc:	2201      	movs	r2, #1
 80119ce:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 50;
 80119d0:	4b8a      	ldr	r3, [pc, #552]	@ (8011bfc <MX_LWIP_Init+0x244>)
 80119d2:	2232      	movs	r2, #50	@ 0x32
 80119d4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80119d6:	4b8a      	ldr	r3, [pc, #552]	@ (8011c00 <MX_LWIP_Init+0x248>)
 80119d8:	22ff      	movs	r2, #255	@ 0xff
 80119da:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80119dc:	4b88      	ldr	r3, [pc, #544]	@ (8011c00 <MX_LWIP_Init+0x248>)
 80119de:	22ff      	movs	r2, #255	@ 0xff
 80119e0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80119e2:	4b87      	ldr	r3, [pc, #540]	@ (8011c00 <MX_LWIP_Init+0x248>)
 80119e4:	22ff      	movs	r2, #255	@ 0xff
 80119e6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80119e8:	4b85      	ldr	r3, [pc, #532]	@ (8011c00 <MX_LWIP_Init+0x248>)
 80119ea:	2200      	movs	r2, #0
 80119ec:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80119ee:	4b85      	ldr	r3, [pc, #532]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 80119f0:	22c0      	movs	r2, #192	@ 0xc0
 80119f2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80119f4:	4b83      	ldr	r3, [pc, #524]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 80119f6:	22a8      	movs	r2, #168	@ 0xa8
 80119f8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80119fa:	4b82      	ldr	r3, [pc, #520]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 80119fc:	2201      	movs	r2, #1
 80119fe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8011a00:	4b80      	ldr	r3, [pc, #512]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 8011a02:	2201      	movs	r2, #1
 8011a04:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8011a06:	2100      	movs	r1, #0
 8011a08:	2000      	movs	r0, #0
 8011a0a:	f007 f8f7 	bl	8018bfc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8011a0e:	4b7b      	ldr	r3, [pc, #492]	@ (8011bfc <MX_LWIP_Init+0x244>)
 8011a10:	781b      	ldrb	r3, [r3, #0]
 8011a12:	061a      	lsls	r2, r3, #24
 8011a14:	4b79      	ldr	r3, [pc, #484]	@ (8011bfc <MX_LWIP_Init+0x244>)
 8011a16:	785b      	ldrb	r3, [r3, #1]
 8011a18:	041b      	lsls	r3, r3, #16
 8011a1a:	431a      	orrs	r2, r3
 8011a1c:	4b77      	ldr	r3, [pc, #476]	@ (8011bfc <MX_LWIP_Init+0x244>)
 8011a1e:	789b      	ldrb	r3, [r3, #2]
 8011a20:	021b      	lsls	r3, r3, #8
 8011a22:	4313      	orrs	r3, r2
 8011a24:	4a75      	ldr	r2, [pc, #468]	@ (8011bfc <MX_LWIP_Init+0x244>)
 8011a26:	78d2      	ldrb	r2, [r2, #3]
 8011a28:	4313      	orrs	r3, r2
 8011a2a:	061a      	lsls	r2, r3, #24
 8011a2c:	4b73      	ldr	r3, [pc, #460]	@ (8011bfc <MX_LWIP_Init+0x244>)
 8011a2e:	781b      	ldrb	r3, [r3, #0]
 8011a30:	0619      	lsls	r1, r3, #24
 8011a32:	4b72      	ldr	r3, [pc, #456]	@ (8011bfc <MX_LWIP_Init+0x244>)
 8011a34:	785b      	ldrb	r3, [r3, #1]
 8011a36:	041b      	lsls	r3, r3, #16
 8011a38:	4319      	orrs	r1, r3
 8011a3a:	4b70      	ldr	r3, [pc, #448]	@ (8011bfc <MX_LWIP_Init+0x244>)
 8011a3c:	789b      	ldrb	r3, [r3, #2]
 8011a3e:	021b      	lsls	r3, r3, #8
 8011a40:	430b      	orrs	r3, r1
 8011a42:	496e      	ldr	r1, [pc, #440]	@ (8011bfc <MX_LWIP_Init+0x244>)
 8011a44:	78c9      	ldrb	r1, [r1, #3]
 8011a46:	430b      	orrs	r3, r1
 8011a48:	021b      	lsls	r3, r3, #8
 8011a4a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011a4e:	431a      	orrs	r2, r3
 8011a50:	4b6a      	ldr	r3, [pc, #424]	@ (8011bfc <MX_LWIP_Init+0x244>)
 8011a52:	781b      	ldrb	r3, [r3, #0]
 8011a54:	0619      	lsls	r1, r3, #24
 8011a56:	4b69      	ldr	r3, [pc, #420]	@ (8011bfc <MX_LWIP_Init+0x244>)
 8011a58:	785b      	ldrb	r3, [r3, #1]
 8011a5a:	041b      	lsls	r3, r3, #16
 8011a5c:	4319      	orrs	r1, r3
 8011a5e:	4b67      	ldr	r3, [pc, #412]	@ (8011bfc <MX_LWIP_Init+0x244>)
 8011a60:	789b      	ldrb	r3, [r3, #2]
 8011a62:	021b      	lsls	r3, r3, #8
 8011a64:	430b      	orrs	r3, r1
 8011a66:	4965      	ldr	r1, [pc, #404]	@ (8011bfc <MX_LWIP_Init+0x244>)
 8011a68:	78c9      	ldrb	r1, [r1, #3]
 8011a6a:	430b      	orrs	r3, r1
 8011a6c:	0a1b      	lsrs	r3, r3, #8
 8011a6e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011a72:	431a      	orrs	r2, r3
 8011a74:	4b61      	ldr	r3, [pc, #388]	@ (8011bfc <MX_LWIP_Init+0x244>)
 8011a76:	781b      	ldrb	r3, [r3, #0]
 8011a78:	0619      	lsls	r1, r3, #24
 8011a7a:	4b60      	ldr	r3, [pc, #384]	@ (8011bfc <MX_LWIP_Init+0x244>)
 8011a7c:	785b      	ldrb	r3, [r3, #1]
 8011a7e:	041b      	lsls	r3, r3, #16
 8011a80:	4319      	orrs	r1, r3
 8011a82:	4b5e      	ldr	r3, [pc, #376]	@ (8011bfc <MX_LWIP_Init+0x244>)
 8011a84:	789b      	ldrb	r3, [r3, #2]
 8011a86:	021b      	lsls	r3, r3, #8
 8011a88:	430b      	orrs	r3, r1
 8011a8a:	495c      	ldr	r1, [pc, #368]	@ (8011bfc <MX_LWIP_Init+0x244>)
 8011a8c:	78c9      	ldrb	r1, [r1, #3]
 8011a8e:	430b      	orrs	r3, r1
 8011a90:	0e1b      	lsrs	r3, r3, #24
 8011a92:	4313      	orrs	r3, r2
 8011a94:	4a5c      	ldr	r2, [pc, #368]	@ (8011c08 <MX_LWIP_Init+0x250>)
 8011a96:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8011a98:	4b59      	ldr	r3, [pc, #356]	@ (8011c00 <MX_LWIP_Init+0x248>)
 8011a9a:	781b      	ldrb	r3, [r3, #0]
 8011a9c:	061a      	lsls	r2, r3, #24
 8011a9e:	4b58      	ldr	r3, [pc, #352]	@ (8011c00 <MX_LWIP_Init+0x248>)
 8011aa0:	785b      	ldrb	r3, [r3, #1]
 8011aa2:	041b      	lsls	r3, r3, #16
 8011aa4:	431a      	orrs	r2, r3
 8011aa6:	4b56      	ldr	r3, [pc, #344]	@ (8011c00 <MX_LWIP_Init+0x248>)
 8011aa8:	789b      	ldrb	r3, [r3, #2]
 8011aaa:	021b      	lsls	r3, r3, #8
 8011aac:	4313      	orrs	r3, r2
 8011aae:	4a54      	ldr	r2, [pc, #336]	@ (8011c00 <MX_LWIP_Init+0x248>)
 8011ab0:	78d2      	ldrb	r2, [r2, #3]
 8011ab2:	4313      	orrs	r3, r2
 8011ab4:	061a      	lsls	r2, r3, #24
 8011ab6:	4b52      	ldr	r3, [pc, #328]	@ (8011c00 <MX_LWIP_Init+0x248>)
 8011ab8:	781b      	ldrb	r3, [r3, #0]
 8011aba:	0619      	lsls	r1, r3, #24
 8011abc:	4b50      	ldr	r3, [pc, #320]	@ (8011c00 <MX_LWIP_Init+0x248>)
 8011abe:	785b      	ldrb	r3, [r3, #1]
 8011ac0:	041b      	lsls	r3, r3, #16
 8011ac2:	4319      	orrs	r1, r3
 8011ac4:	4b4e      	ldr	r3, [pc, #312]	@ (8011c00 <MX_LWIP_Init+0x248>)
 8011ac6:	789b      	ldrb	r3, [r3, #2]
 8011ac8:	021b      	lsls	r3, r3, #8
 8011aca:	430b      	orrs	r3, r1
 8011acc:	494c      	ldr	r1, [pc, #304]	@ (8011c00 <MX_LWIP_Init+0x248>)
 8011ace:	78c9      	ldrb	r1, [r1, #3]
 8011ad0:	430b      	orrs	r3, r1
 8011ad2:	021b      	lsls	r3, r3, #8
 8011ad4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011ad8:	431a      	orrs	r2, r3
 8011ada:	4b49      	ldr	r3, [pc, #292]	@ (8011c00 <MX_LWIP_Init+0x248>)
 8011adc:	781b      	ldrb	r3, [r3, #0]
 8011ade:	0619      	lsls	r1, r3, #24
 8011ae0:	4b47      	ldr	r3, [pc, #284]	@ (8011c00 <MX_LWIP_Init+0x248>)
 8011ae2:	785b      	ldrb	r3, [r3, #1]
 8011ae4:	041b      	lsls	r3, r3, #16
 8011ae6:	4319      	orrs	r1, r3
 8011ae8:	4b45      	ldr	r3, [pc, #276]	@ (8011c00 <MX_LWIP_Init+0x248>)
 8011aea:	789b      	ldrb	r3, [r3, #2]
 8011aec:	021b      	lsls	r3, r3, #8
 8011aee:	430b      	orrs	r3, r1
 8011af0:	4943      	ldr	r1, [pc, #268]	@ (8011c00 <MX_LWIP_Init+0x248>)
 8011af2:	78c9      	ldrb	r1, [r1, #3]
 8011af4:	430b      	orrs	r3, r1
 8011af6:	0a1b      	lsrs	r3, r3, #8
 8011af8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011afc:	431a      	orrs	r2, r3
 8011afe:	4b40      	ldr	r3, [pc, #256]	@ (8011c00 <MX_LWIP_Init+0x248>)
 8011b00:	781b      	ldrb	r3, [r3, #0]
 8011b02:	0619      	lsls	r1, r3, #24
 8011b04:	4b3e      	ldr	r3, [pc, #248]	@ (8011c00 <MX_LWIP_Init+0x248>)
 8011b06:	785b      	ldrb	r3, [r3, #1]
 8011b08:	041b      	lsls	r3, r3, #16
 8011b0a:	4319      	orrs	r1, r3
 8011b0c:	4b3c      	ldr	r3, [pc, #240]	@ (8011c00 <MX_LWIP_Init+0x248>)
 8011b0e:	789b      	ldrb	r3, [r3, #2]
 8011b10:	021b      	lsls	r3, r3, #8
 8011b12:	430b      	orrs	r3, r1
 8011b14:	493a      	ldr	r1, [pc, #232]	@ (8011c00 <MX_LWIP_Init+0x248>)
 8011b16:	78c9      	ldrb	r1, [r1, #3]
 8011b18:	430b      	orrs	r3, r1
 8011b1a:	0e1b      	lsrs	r3, r3, #24
 8011b1c:	4313      	orrs	r3, r2
 8011b1e:	4a3b      	ldr	r2, [pc, #236]	@ (8011c0c <MX_LWIP_Init+0x254>)
 8011b20:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8011b22:	4b38      	ldr	r3, [pc, #224]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 8011b24:	781b      	ldrb	r3, [r3, #0]
 8011b26:	061a      	lsls	r2, r3, #24
 8011b28:	4b36      	ldr	r3, [pc, #216]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 8011b2a:	785b      	ldrb	r3, [r3, #1]
 8011b2c:	041b      	lsls	r3, r3, #16
 8011b2e:	431a      	orrs	r2, r3
 8011b30:	4b34      	ldr	r3, [pc, #208]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 8011b32:	789b      	ldrb	r3, [r3, #2]
 8011b34:	021b      	lsls	r3, r3, #8
 8011b36:	4313      	orrs	r3, r2
 8011b38:	4a32      	ldr	r2, [pc, #200]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 8011b3a:	78d2      	ldrb	r2, [r2, #3]
 8011b3c:	4313      	orrs	r3, r2
 8011b3e:	061a      	lsls	r2, r3, #24
 8011b40:	4b30      	ldr	r3, [pc, #192]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	0619      	lsls	r1, r3, #24
 8011b46:	4b2f      	ldr	r3, [pc, #188]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 8011b48:	785b      	ldrb	r3, [r3, #1]
 8011b4a:	041b      	lsls	r3, r3, #16
 8011b4c:	4319      	orrs	r1, r3
 8011b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 8011b50:	789b      	ldrb	r3, [r3, #2]
 8011b52:	021b      	lsls	r3, r3, #8
 8011b54:	430b      	orrs	r3, r1
 8011b56:	492b      	ldr	r1, [pc, #172]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 8011b58:	78c9      	ldrb	r1, [r1, #3]
 8011b5a:	430b      	orrs	r3, r1
 8011b5c:	021b      	lsls	r3, r3, #8
 8011b5e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011b62:	431a      	orrs	r2, r3
 8011b64:	4b27      	ldr	r3, [pc, #156]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 8011b66:	781b      	ldrb	r3, [r3, #0]
 8011b68:	0619      	lsls	r1, r3, #24
 8011b6a:	4b26      	ldr	r3, [pc, #152]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 8011b6c:	785b      	ldrb	r3, [r3, #1]
 8011b6e:	041b      	lsls	r3, r3, #16
 8011b70:	4319      	orrs	r1, r3
 8011b72:	4b24      	ldr	r3, [pc, #144]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 8011b74:	789b      	ldrb	r3, [r3, #2]
 8011b76:	021b      	lsls	r3, r3, #8
 8011b78:	430b      	orrs	r3, r1
 8011b7a:	4922      	ldr	r1, [pc, #136]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 8011b7c:	78c9      	ldrb	r1, [r1, #3]
 8011b7e:	430b      	orrs	r3, r1
 8011b80:	0a1b      	lsrs	r3, r3, #8
 8011b82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011b86:	431a      	orrs	r2, r3
 8011b88:	4b1e      	ldr	r3, [pc, #120]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 8011b8a:	781b      	ldrb	r3, [r3, #0]
 8011b8c:	0619      	lsls	r1, r3, #24
 8011b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 8011b90:	785b      	ldrb	r3, [r3, #1]
 8011b92:	041b      	lsls	r3, r3, #16
 8011b94:	4319      	orrs	r1, r3
 8011b96:	4b1b      	ldr	r3, [pc, #108]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 8011b98:	789b      	ldrb	r3, [r3, #2]
 8011b9a:	021b      	lsls	r3, r3, #8
 8011b9c:	430b      	orrs	r3, r1
 8011b9e:	4919      	ldr	r1, [pc, #100]	@ (8011c04 <MX_LWIP_Init+0x24c>)
 8011ba0:	78c9      	ldrb	r1, [r1, #3]
 8011ba2:	430b      	orrs	r3, r1
 8011ba4:	0e1b      	lsrs	r3, r3, #24
 8011ba6:	4313      	orrs	r3, r2
 8011ba8:	4a19      	ldr	r2, [pc, #100]	@ (8011c10 <MX_LWIP_Init+0x258>)
 8011baa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8011bac:	4b19      	ldr	r3, [pc, #100]	@ (8011c14 <MX_LWIP_Init+0x25c>)
 8011bae:	9302      	str	r3, [sp, #8]
 8011bb0:	4b19      	ldr	r3, [pc, #100]	@ (8011c18 <MX_LWIP_Init+0x260>)
 8011bb2:	9301      	str	r3, [sp, #4]
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	9300      	str	r3, [sp, #0]
 8011bb8:	4b15      	ldr	r3, [pc, #84]	@ (8011c10 <MX_LWIP_Init+0x258>)
 8011bba:	4a14      	ldr	r2, [pc, #80]	@ (8011c0c <MX_LWIP_Init+0x254>)
 8011bbc:	4912      	ldr	r1, [pc, #72]	@ (8011c08 <MX_LWIP_Init+0x250>)
 8011bbe:	4817      	ldr	r0, [pc, #92]	@ (8011c1c <MX_LWIP_Init+0x264>)
 8011bc0:	f007 fe9e 	bl	8019900 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8011bc4:	4815      	ldr	r0, [pc, #84]	@ (8011c1c <MX_LWIP_Init+0x264>)
 8011bc6:	f008 f84d 	bl	8019c64 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8011bca:	4814      	ldr	r0, [pc, #80]	@ (8011c1c <MX_LWIP_Init+0x264>)
 8011bcc:	f008 f85a 	bl	8019c84 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8011bd0:	4913      	ldr	r1, [pc, #76]	@ (8011c20 <MX_LWIP_Init+0x268>)
 8011bd2:	4812      	ldr	r0, [pc, #72]	@ (8011c1c <MX_LWIP_Init+0x264>)
 8011bd4:	f008 f958 	bl	8019e88 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8011bd8:	4b12      	ldr	r3, [pc, #72]	@ (8011c24 <MX_LWIP_Init+0x26c>)
 8011bda:	1d3c      	adds	r4, r7, #4
 8011bdc:	461d      	mov	r5, r3
 8011bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011be2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011be6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8011bea:	1d3b      	adds	r3, r7, #4
 8011bec:	490b      	ldr	r1, [pc, #44]	@ (8011c1c <MX_LWIP_Init+0x264>)
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f000 fd8c 	bl	801270c <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8011bf4:	bf00      	nop
 8011bf6:	3720      	adds	r7, #32
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8011bfc:	24001258 	.word	0x24001258
 8011c00:	2400125c 	.word	0x2400125c
 8011c04:	24001260 	.word	0x24001260
 8011c08:	2400124c 	.word	0x2400124c
 8011c0c:	24001250 	.word	0x24001250
 8011c10:	24001254 	.word	0x24001254
 8011c14:	08018b0d 	.word	0x08018b0d
 8011c18:	08012135 	.word	0x08012135
 8011c1c:	24001218 	.word	0x24001218
 8011c20:	08011c29 	.word	0x08011c29
 8011c24:	080295f8 	.word	0x080295f8

08011c28 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8011c28:	b480      	push	{r7}
 8011c2a:	b083      	sub	sp, #12
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8011c30:	bf00      	nop
 8011c32:	370c      	adds	r7, #12
 8011c34:	46bd      	mov	sp, r7
 8011c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3a:	4770      	bx	lr

08011c3c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b082      	sub	sp, #8
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8011c44:	4b04      	ldr	r3, [pc, #16]	@ (8011c58 <HAL_ETH_RxCpltCallback+0x1c>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f000 fedb 	bl	8012a04 <osSemaphoreRelease>
}
 8011c4e:	bf00      	nop
 8011c50:	3708      	adds	r7, #8
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}
 8011c56:	bf00      	nop
 8011c58:	2400126c 	.word	0x2400126c

08011c5c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8011c64:	4b04      	ldr	r3, [pc, #16]	@ (8011c78 <HAL_ETH_TxCpltCallback+0x1c>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f000 fecb 	bl	8012a04 <osSemaphoreRelease>
}
 8011c6e:	bf00      	nop
 8011c70:	3708      	adds	r7, #8
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}
 8011c76:	bf00      	nop
 8011c78:	24001270 	.word	0x24001270

08011c7c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b082      	sub	sp, #8
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f7f8 ff6a 	bl	800ab5e <HAL_ETH_GetDMAError>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011c90:	2b80      	cmp	r3, #128	@ 0x80
 8011c92:	d104      	bne.n	8011c9e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8011c94:	4b04      	ldr	r3, [pc, #16]	@ (8011ca8 <HAL_ETH_ErrorCallback+0x2c>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f000 feb3 	bl	8012a04 <osSemaphoreRelease>
  }
}
 8011c9e:	bf00      	nop
 8011ca0:	3708      	adds	r7, #8
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}
 8011ca6:	bf00      	nop
 8011ca8:	2400126c 	.word	0x2400126c

08011cac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8011cac:	b5b0      	push	{r4, r5, r7, lr}
 8011cae:	b0ac      	sub	sp, #176	@ 0xb0
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  uint32_t duplex, speed = 0;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int32_t PHYLinkState = 0;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 8011cc6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011cca:	2264      	movs	r2, #100	@ 0x64
 8011ccc:	2100      	movs	r1, #0
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f013 fcf4 	bl	80256bc <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8011cd4:	4b93      	ldr	r3, [pc, #588]	@ (8011f24 <low_level_init+0x278>)
 8011cd6:	4a94      	ldr	r2, [pc, #592]	@ (8011f28 <low_level_init+0x27c>)
 8011cd8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8011cda:	2300      	movs	r3, #0
 8011cdc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[1] = 0x80;
 8011ce0:	2380      	movs	r3, #128	@ 0x80
 8011ce2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  MACAddr[2] = 0xE1;
 8011ce6:	23e1      	movs	r3, #225	@ 0xe1
 8011ce8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MACAddr[3] = 0x00;
 8011cec:	2300      	movs	r3, #0
 8011cee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MACAddr[4] = 0x00;
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[5] = 0x00;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  heth.Init.MACAddr = &MACAddr[0];
 8011cfe:	4a89      	ldr	r2, [pc, #548]	@ (8011f24 <low_level_init+0x278>)
 8011d00:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011d04:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8011d06:	4b87      	ldr	r3, [pc, #540]	@ (8011f24 <low_level_init+0x278>)
 8011d08:	2201      	movs	r2, #1
 8011d0a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8011d0c:	4b85      	ldr	r3, [pc, #532]	@ (8011f24 <low_level_init+0x278>)
 8011d0e:	4a87      	ldr	r2, [pc, #540]	@ (8011f2c <low_level_init+0x280>)
 8011d10:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8011d12:	4b84      	ldr	r3, [pc, #528]	@ (8011f24 <low_level_init+0x278>)
 8011d14:	4a86      	ldr	r2, [pc, #536]	@ (8011f30 <low_level_init+0x284>)
 8011d16:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8011d18:	4b82      	ldr	r3, [pc, #520]	@ (8011f24 <low_level_init+0x278>)
 8011d1a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8011d1e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8011d20:	4880      	ldr	r0, [pc, #512]	@ (8011f24 <low_level_init+0x278>)
 8011d22:	f7f7 ff43 	bl	8009bac <HAL_ETH_Init>
 8011d26:	4603      	mov	r3, r0
 8011d28:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8011d2c:	2238      	movs	r2, #56	@ 0x38
 8011d2e:	2100      	movs	r1, #0
 8011d30:	4880      	ldr	r0, [pc, #512]	@ (8011f34 <low_level_init+0x288>)
 8011d32:	f013 fcc3 	bl	80256bc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8011d36:	4b7f      	ldr	r3, [pc, #508]	@ (8011f34 <low_level_init+0x288>)
 8011d38:	2221      	movs	r2, #33	@ 0x21
 8011d3a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8011d3c:	4b7d      	ldr	r3, [pc, #500]	@ (8011f34 <low_level_init+0x288>)
 8011d3e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8011d42:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8011d44:	4b7b      	ldr	r3, [pc, #492]	@ (8011f34 <low_level_init+0x288>)
 8011d46:	2200      	movs	r2, #0
 8011d48:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8011d4a:	487b      	ldr	r0, [pc, #492]	@ (8011f38 <low_level_init+0x28c>)
 8011d4c:	f007 fc92 	bl	8019674 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2206      	movs	r2, #6
 8011d54:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8011d58:	4b72      	ldr	r3, [pc, #456]	@ (8011f24 <low_level_init+0x278>)
 8011d5a:	685b      	ldr	r3, [r3, #4]
 8011d5c:	781a      	ldrb	r2, [r3, #0]
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8011d64:	4b6f      	ldr	r3, [pc, #444]	@ (8011f24 <low_level_init+0x278>)
 8011d66:	685b      	ldr	r3, [r3, #4]
 8011d68:	785a      	ldrb	r2, [r3, #1]
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8011d70:	4b6c      	ldr	r3, [pc, #432]	@ (8011f24 <low_level_init+0x278>)
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	789a      	ldrb	r2, [r3, #2]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8011d7c:	4b69      	ldr	r3, [pc, #420]	@ (8011f24 <low_level_init+0x278>)
 8011d7e:	685b      	ldr	r3, [r3, #4]
 8011d80:	78da      	ldrb	r2, [r3, #3]
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8011d88:	4b66      	ldr	r3, [pc, #408]	@ (8011f24 <low_level_init+0x278>)
 8011d8a:	685b      	ldr	r3, [r3, #4]
 8011d8c:	791a      	ldrb	r2, [r3, #4]
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8011d94:	4b63      	ldr	r3, [pc, #396]	@ (8011f24 <low_level_init+0x278>)
 8011d96:	685b      	ldr	r3, [r3, #4]
 8011d98:	795a      	ldrb	r2, [r3, #5]
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8011da6:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011dae:	f043 030a 	orr.w	r3, r3, #10
 8011db2:	b2da      	uxtb	r2, r3
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8011dba:	2300      	movs	r3, #0
 8011dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	633b      	str	r3, [r7, #48]	@ 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8011dc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011dc6:	2101      	movs	r1, #1
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f000 fd9b 	bl	8012904 <osSemaphoreCreate>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	4a5a      	ldr	r2, [pc, #360]	@ (8011f3c <low_level_init+0x290>)
 8011dd2:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8011dd8:	2300      	movs	r3, #0
 8011dda:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8011ddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011de0:	2101      	movs	r1, #1
 8011de2:	4618      	mov	r0, r3
 8011de4:	f000 fd8e 	bl	8012904 <osSemaphoreCreate>
 8011de8:	4603      	mov	r3, r0
 8011dea:	4a55      	ldr	r2, [pc, #340]	@ (8011f40 <low_level_init+0x294>)
 8011dec:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8011dee:	4b53      	ldr	r3, [pc, #332]	@ (8011f3c <low_level_init+0x290>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	2100      	movs	r1, #0
 8011df4:	4618      	mov	r0, r3
 8011df6:	f000 fdb7 	bl	8012968 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8011dfa:	4b51      	ldr	r3, [pc, #324]	@ (8011f40 <low_level_init+0x294>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	2100      	movs	r1, #0
 8011e00:	4618      	mov	r0, r3
 8011e02:	f000 fdb1 	bl	8012968 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8011e06:	4b4f      	ldr	r3, [pc, #316]	@ (8011f44 <low_level_init+0x298>)
 8011e08:	f107 0408 	add.w	r4, r7, #8
 8011e0c:	461d      	mov	r5, r3
 8011e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011e12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011e16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8011e1a:	f107 0308 	add.w	r3, r7, #8
 8011e1e:	6879      	ldr	r1, [r7, #4]
 8011e20:	4618      	mov	r0, r3
 8011e22:	f000 fc73 	bl	801270c <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8011e26:	4948      	ldr	r1, [pc, #288]	@ (8011f48 <low_level_init+0x29c>)
 8011e28:	4848      	ldr	r0, [pc, #288]	@ (8011f4c <low_level_init+0x2a0>)
 8011e2a:	f7f4 fd84 	bl	8006936 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8011e2e:	4847      	ldr	r0, [pc, #284]	@ (8011f4c <low_level_init+0x2a0>)
 8011e30:	f7f4 fdb3 	bl	800699a <LAN8742_Init>
 8011e34:	4603      	mov	r3, r0
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d006      	beq.n	8011e48 <low_level_init+0x19c>
  {
    netif_set_link_down(netif);
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f007 fff4 	bl	8019e28 <netif_set_link_down>
    netif_set_down(netif);
 8011e40:	6878      	ldr	r0, [r7, #4]
 8011e42:	f007 ff8b 	bl	8019d5c <netif_set_down>
 8011e46:	e06a      	b.n	8011f1e <low_level_init+0x272>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8011e48:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d164      	bne.n	8011f1a <low_level_init+0x26e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8011e50:	483e      	ldr	r0, [pc, #248]	@ (8011f4c <low_level_init+0x2a0>)
 8011e52:	f7f4 fdef 	bl	8006a34 <LAN8742_GetLinkState>
 8011e56:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8011e5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011e5e:	2b01      	cmp	r3, #1
 8011e60:	dc06      	bgt.n	8011e70 <low_level_init+0x1c4>
    {
      netif_set_link_down(netif);
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f007 ffe0 	bl	8019e28 <netif_set_link_down>
      netif_set_down(netif);
 8011e68:	6878      	ldr	r0, [r7, #4]
 8011e6a:	f007 ff77 	bl	8019d5c <netif_set_down>
 8011e6e:	e056      	b.n	8011f1e <low_level_init+0x272>
    }
    else
    {
      switch (PHYLinkState)
 8011e70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011e74:	3b02      	subs	r3, #2
 8011e76:	2b03      	cmp	r3, #3
 8011e78:	d82a      	bhi.n	8011ed0 <low_level_init+0x224>
 8011e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8011e80 <low_level_init+0x1d4>)
 8011e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e80:	08011e91 	.word	0x08011e91
 8011e84:	08011ea3 	.word	0x08011ea3
 8011e88:	08011eb3 	.word	0x08011eb3
 8011e8c:	08011ec3 	.word	0x08011ec3
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8011e90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011e94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8011e98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8011ea0:	e01f      	b.n	8011ee2 <low_level_init+0x236>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8011ea8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011eac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8011eb0:	e017      	b.n	8011ee2 <low_level_init+0x236>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8011eb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8011ec0:	e00f      	b.n	8011ee2 <low_level_init+0x236>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8011ece:	e008      	b.n	8011ee2 <low_level_init+0x236>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8011ed0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8011ed8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011edc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8011ee0:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8011ee2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	480e      	ldr	r0, [pc, #56]	@ (8011f24 <low_level_init+0x278>)
 8011eea:	f7f8 fbed 	bl	800a6c8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8011eee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011ef2:	657b      	str	r3, [r7, #84]	@ 0x54
    MACConf.Speed = speed;
 8011ef4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011ef8:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8011efa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011efe:	4619      	mov	r1, r3
 8011f00:	4808      	ldr	r0, [pc, #32]	@ (8011f24 <low_level_init+0x278>)
 8011f02:	f7f8 fdb5 	bl	800aa70 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8011f06:	4807      	ldr	r0, [pc, #28]	@ (8011f24 <low_level_init+0x278>)
 8011f08:	f7f7 ff4e 	bl	8009da8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f007 feb9 	bl	8019c84 <netif_set_up>
    netif_set_link_up(netif);
 8011f12:	6878      	ldr	r0, [r7, #4]
 8011f14:	f007 ff54 	bl	8019dc0 <netif_set_link_up>
 8011f18:	e001      	b.n	8011f1e <low_level_init+0x272>
    }

  }
  else
  {
    Error_Handler();
 8011f1a:	f7f3 f9f3 	bl	8005304 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8011f1e:	37b0      	adds	r7, #176	@ 0xb0
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bdb0      	pop	{r4, r5, r7, pc}
 8011f24:	24001274 	.word	0x24001274
 8011f28:	40028000 	.word	0x40028000
 8011f2c:	30000080 	.word	0x30000080
 8011f30:	30000000 	.word	0x30000000
 8011f34:	24001324 	.word	0x24001324
 8011f38:	0802cff0 	.word	0x0802cff0
 8011f3c:	2400126c 	.word	0x2400126c
 8011f40:	24001270 	.word	0x24001270
 8011f44:	0802961c 	.word	0x0802961c
 8011f48:	240001f4 	.word	0x240001f4
 8011f4c:	2400135c 	.word	0x2400135c

08011f50 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b092      	sub	sp, #72	@ 0x48
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8011f62:	2300      	movs	r3, #0
 8011f64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8011f68:	f107 030c 	add.w	r3, r7, #12
 8011f6c:	2230      	movs	r2, #48	@ 0x30
 8011f6e:	2100      	movs	r1, #0
 8011f70:	4618      	mov	r0, r3
 8011f72:	f013 fba3 	bl	80256bc <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8011f76:	f107 030c 	add.w	r3, r7, #12
 8011f7a:	2230      	movs	r2, #48	@ 0x30
 8011f7c:	2100      	movs	r1, #0
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f013 fb9c 	bl	80256bc <memset>

  for(q = p; q != NULL; q = q->next)
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	643b      	str	r3, [r7, #64]	@ 0x40
 8011f88:	e045      	b.n	8012016 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8011f8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f8c:	2b03      	cmp	r3, #3
 8011f8e:	d902      	bls.n	8011f96 <low_level_output+0x46>
      return ERR_IF;
 8011f90:	f06f 030b 	mvn.w	r3, #11
 8011f94:	e07f      	b.n	8012096 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8011f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f98:	6859      	ldr	r1, [r3, #4]
 8011f9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011f9c:	4613      	mov	r3, r2
 8011f9e:	005b      	lsls	r3, r3, #1
 8011fa0:	4413      	add	r3, r2
 8011fa2:	009b      	lsls	r3, r3, #2
 8011fa4:	3348      	adds	r3, #72	@ 0x48
 8011fa6:	443b      	add	r3, r7
 8011fa8:	3b3c      	subs	r3, #60	@ 0x3c
 8011faa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8011fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011fae:	895b      	ldrh	r3, [r3, #10]
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011fb4:	4613      	mov	r3, r2
 8011fb6:	005b      	lsls	r3, r3, #1
 8011fb8:	4413      	add	r3, r2
 8011fba:	009b      	lsls	r3, r3, #2
 8011fbc:	3348      	adds	r3, #72	@ 0x48
 8011fbe:	443b      	add	r3, r7
 8011fc0:	3b38      	subs	r3, #56	@ 0x38
 8011fc2:	6019      	str	r1, [r3, #0]

    if(i>0)
 8011fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d011      	beq.n	8011fee <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8011fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011fcc:	1e5a      	subs	r2, r3, #1
 8011fce:	f107 000c 	add.w	r0, r7, #12
 8011fd2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011fd4:	460b      	mov	r3, r1
 8011fd6:	005b      	lsls	r3, r3, #1
 8011fd8:	440b      	add	r3, r1
 8011fda:	009b      	lsls	r3, r3, #2
 8011fdc:	18c1      	adds	r1, r0, r3
 8011fde:	4613      	mov	r3, r2
 8011fe0:	005b      	lsls	r3, r3, #1
 8011fe2:	4413      	add	r3, r2
 8011fe4:	009b      	lsls	r3, r3, #2
 8011fe6:	3348      	adds	r3, #72	@ 0x48
 8011fe8:	443b      	add	r3, r7
 8011fea:	3b34      	subs	r3, #52	@ 0x34
 8011fec:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8011fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d109      	bne.n	801200a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8011ff6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011ff8:	4613      	mov	r3, r2
 8011ffa:	005b      	lsls	r3, r3, #1
 8011ffc:	4413      	add	r3, r2
 8011ffe:	009b      	lsls	r3, r3, #2
 8012000:	3348      	adds	r3, #72	@ 0x48
 8012002:	443b      	add	r3, r7
 8012004:	3b34      	subs	r3, #52	@ 0x34
 8012006:	2200      	movs	r2, #0
 8012008:	601a      	str	r2, [r3, #0]
    }

    i++;
 801200a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801200c:	3301      	adds	r3, #1
 801200e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8012010:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	643b      	str	r3, [r7, #64]	@ 0x40
 8012016:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012018:	2b00      	cmp	r3, #0
 801201a:	d1b6      	bne.n	8011f8a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	891b      	ldrh	r3, [r3, #8]
 8012020:	461a      	mov	r2, r3
 8012022:	4b1f      	ldr	r3, [pc, #124]	@ (80120a0 <low_level_output+0x150>)
 8012024:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8012026:	4a1e      	ldr	r2, [pc, #120]	@ (80120a0 <low_level_output+0x150>)
 8012028:	f107 030c 	add.w	r3, r7, #12
 801202c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 801202e:	4a1c      	ldr	r2, [pc, #112]	@ (80120a0 <low_level_output+0x150>)
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8012034:	6838      	ldr	r0, [r7, #0]
 8012036:	f008 fbad 	bl	801a794 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 801203a:	4919      	ldr	r1, [pc, #100]	@ (80120a0 <low_level_output+0x150>)
 801203c:	4819      	ldr	r0, [pc, #100]	@ (80120a4 <low_level_output+0x154>)
 801203e:	f7f7 ff9f 	bl	8009f80 <HAL_ETH_Transmit_IT>
 8012042:	4603      	mov	r3, r0
 8012044:	2b00      	cmp	r3, #0
 8012046:	d103      	bne.n	8012050 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8012048:	2300      	movs	r3, #0
 801204a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801204e:	e01b      	b.n	8012088 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8012050:	4814      	ldr	r0, [pc, #80]	@ (80120a4 <low_level_output+0x154>)
 8012052:	f7f8 fd77 	bl	800ab44 <HAL_ETH_GetError>
 8012056:	4603      	mov	r3, r0
 8012058:	f003 0302 	and.w	r3, r3, #2
 801205c:	2b00      	cmp	r3, #0
 801205e:	d00d      	beq.n	801207c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8012060:	4b11      	ldr	r3, [pc, #68]	@ (80120a8 <low_level_output+0x158>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8012068:	4618      	mov	r0, r3
 801206a:	f000 fc7d 	bl	8012968 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 801206e:	480d      	ldr	r0, [pc, #52]	@ (80120a4 <low_level_output+0x154>)
 8012070:	f7f8 f90d 	bl	800a28e <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8012074:	23fe      	movs	r3, #254	@ 0xfe
 8012076:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801207a:	e005      	b.n	8012088 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 801207c:	6838      	ldr	r0, [r7, #0]
 801207e:	f008 fae3 	bl	801a648 <pbuf_free>
        errval =  ERR_IF;
 8012082:	23f4      	movs	r3, #244	@ 0xf4
 8012084:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8012088:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801208c:	f113 0f02 	cmn.w	r3, #2
 8012090:	d0d3      	beq.n	801203a <low_level_output+0xea>

  return errval;
 8012092:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8012096:	4618      	mov	r0, r3
 8012098:	3748      	adds	r7, #72	@ 0x48
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
 801209e:	bf00      	nop
 80120a0:	24001324 	.word	0x24001324
 80120a4:	24001274 	.word	0x24001274
 80120a8:	24001270 	.word	0x24001270

080120ac <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b084      	sub	sp, #16
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80120b4:	2300      	movs	r3, #0
 80120b6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80120b8:	4b07      	ldr	r3, [pc, #28]	@ (80120d8 <low_level_input+0x2c>)
 80120ba:	781b      	ldrb	r3, [r3, #0]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d105      	bne.n	80120cc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80120c0:	f107 030c 	add.w	r3, r7, #12
 80120c4:	4619      	mov	r1, r3
 80120c6:	4805      	ldr	r0, [pc, #20]	@ (80120dc <low_level_input+0x30>)
 80120c8:	f7f7 ffab 	bl	800a022 <HAL_ETH_ReadData>
  }

  return p;
 80120cc:	68fb      	ldr	r3, [r7, #12]
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3710      	adds	r7, #16
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}
 80120d6:	bf00      	nop
 80120d8:	24001268 	.word	0x24001268
 80120dc:	24001274 	.word	0x24001274

080120e0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b084      	sub	sp, #16
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80120e8:	2300      	movs	r3, #0
 80120ea:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80120f0:	4b0f      	ldr	r3, [pc, #60]	@ (8012130 <ethernetif_input+0x50>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	f04f 31ff 	mov.w	r1, #4294967295
 80120f8:	4618      	mov	r0, r3
 80120fa:	f000 fc35 	bl	8012968 <osSemaphoreWait>
 80120fe:	4603      	mov	r3, r0
 8012100:	2b00      	cmp	r3, #0
 8012102:	d1f5      	bne.n	80120f0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8012104:	68b8      	ldr	r0, [r7, #8]
 8012106:	f7ff ffd1 	bl	80120ac <low_level_input>
 801210a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d00a      	beq.n	8012128 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8012112:	68bb      	ldr	r3, [r7, #8]
 8012114:	691b      	ldr	r3, [r3, #16]
 8012116:	68b9      	ldr	r1, [r7, #8]
 8012118:	68f8      	ldr	r0, [r7, #12]
 801211a:	4798      	blx	r3
 801211c:	4603      	mov	r3, r0
 801211e:	2b00      	cmp	r3, #0
 8012120:	d002      	beq.n	8012128 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8012122:	68f8      	ldr	r0, [r7, #12]
 8012124:	f008 fa90 	bl	801a648 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d1ea      	bne.n	8012104 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 801212e:	e7df      	b.n	80120f0 <ethernetif_input+0x10>
 8012130:	2400126c 	.word	0x2400126c

08012134 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b082      	sub	sp, #8
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d106      	bne.n	8012150 <ethernetif_init+0x1c>
 8012142:	4b0e      	ldr	r3, [pc, #56]	@ (801217c <ethernetif_init+0x48>)
 8012144:	f240 2219 	movw	r2, #537	@ 0x219
 8012148:	490d      	ldr	r1, [pc, #52]	@ (8012180 <ethernetif_init+0x4c>)
 801214a:	480e      	ldr	r0, [pc, #56]	@ (8012184 <ethernetif_init+0x50>)
 801214c:	f013 f9ca 	bl	80254e4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2273      	movs	r2, #115	@ 0x73
 8012154:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2274      	movs	r2, #116	@ 0x74
 801215c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	4a09      	ldr	r2, [pc, #36]	@ (8012188 <ethernetif_init+0x54>)
 8012164:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	4a08      	ldr	r2, [pc, #32]	@ (801218c <ethernetif_init+0x58>)
 801216a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f7ff fd9d 	bl	8011cac <low_level_init>

  return ERR_OK;
 8012172:	2300      	movs	r3, #0
}
 8012174:	4618      	mov	r0, r3
 8012176:	3708      	adds	r7, #8
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}
 801217c:	08029638 	.word	0x08029638
 8012180:	08029654 	.word	0x08029654
 8012184:	08029664 	.word	0x08029664
 8012188:	0802206d 	.word	0x0802206d
 801218c:	08011f51 	.word	0x08011f51

08012190 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b084      	sub	sp, #16
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 801219c:	68f9      	ldr	r1, [r7, #12]
 801219e:	4809      	ldr	r0, [pc, #36]	@ (80121c4 <pbuf_free_custom+0x34>)
 80121a0:	f007 fb58 	bl	8019854 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80121a4:	4b08      	ldr	r3, [pc, #32]	@ (80121c8 <pbuf_free_custom+0x38>)
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	2b01      	cmp	r3, #1
 80121aa:	d107      	bne.n	80121bc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80121ac:	4b06      	ldr	r3, [pc, #24]	@ (80121c8 <pbuf_free_custom+0x38>)
 80121ae:	2200      	movs	r2, #0
 80121b0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80121b2:	4b06      	ldr	r3, [pc, #24]	@ (80121cc <pbuf_free_custom+0x3c>)
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	4618      	mov	r0, r3
 80121b8:	f000 fc24 	bl	8012a04 <osSemaphoreRelease>
  }
}
 80121bc:	bf00      	nop
 80121be:	3710      	adds	r7, #16
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}
 80121c4:	0802cff0 	.word	0x0802cff0
 80121c8:	24001268 	.word	0x24001268
 80121cc:	2400126c 	.word	0x2400126c

080121d0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80121d4:	f7f4 fd06 	bl	8006be4 <HAL_GetTick>
 80121d8:	4603      	mov	r3, r0
}
 80121da:	4618      	mov	r0, r3
 80121dc:	bd80      	pop	{r7, pc}
	...

080121e0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b08e      	sub	sp, #56	@ 0x38
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80121e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80121ec:	2200      	movs	r2, #0
 80121ee:	601a      	str	r2, [r3, #0]
 80121f0:	605a      	str	r2, [r3, #4]
 80121f2:	609a      	str	r2, [r3, #8]
 80121f4:	60da      	str	r2, [r3, #12]
 80121f6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	4a5d      	ldr	r2, [pc, #372]	@ (8012374 <HAL_ETH_MspInit+0x194>)
 80121fe:	4293      	cmp	r3, r2
 8012200:	f040 80b3 	bne.w	801236a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8012204:	4b5c      	ldr	r3, [pc, #368]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 8012206:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801220a:	4a5b      	ldr	r2, [pc, #364]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 801220c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012210:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8012214:	4b58      	ldr	r3, [pc, #352]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 8012216:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801221a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801221e:	623b      	str	r3, [r7, #32]
 8012220:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8012222:	4b55      	ldr	r3, [pc, #340]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 8012224:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012228:	4a53      	ldr	r2, [pc, #332]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 801222a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801222e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8012232:	4b51      	ldr	r3, [pc, #324]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 8012234:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801223c:	61fb      	str	r3, [r7, #28]
 801223e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8012240:	4b4d      	ldr	r3, [pc, #308]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 8012242:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012246:	4a4c      	ldr	r2, [pc, #304]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 8012248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801224c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8012250:	4b49      	ldr	r3, [pc, #292]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 8012252:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801225a:	61bb      	str	r3, [r7, #24]
 801225c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801225e:	4b46      	ldr	r3, [pc, #280]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 8012260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012264:	4a44      	ldr	r2, [pc, #272]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 8012266:	f043 0304 	orr.w	r3, r3, #4
 801226a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801226e:	4b42      	ldr	r3, [pc, #264]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 8012270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012274:	f003 0304 	and.w	r3, r3, #4
 8012278:	617b      	str	r3, [r7, #20]
 801227a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801227c:	4b3e      	ldr	r3, [pc, #248]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 801227e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012282:	4a3d      	ldr	r2, [pc, #244]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 8012284:	f043 0301 	orr.w	r3, r3, #1
 8012288:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801228c:	4b3a      	ldr	r3, [pc, #232]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 801228e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012292:	f003 0301 	and.w	r3, r3, #1
 8012296:	613b      	str	r3, [r7, #16]
 8012298:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801229a:	4b37      	ldr	r3, [pc, #220]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 801229c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80122a0:	4a35      	ldr	r2, [pc, #212]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 80122a2:	f043 0302 	orr.w	r3, r3, #2
 80122a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80122aa:	4b33      	ldr	r3, [pc, #204]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 80122ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80122b0:	f003 0302 	and.w	r3, r3, #2
 80122b4:	60fb      	str	r3, [r7, #12]
 80122b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80122b8:	4b2f      	ldr	r3, [pc, #188]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 80122ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80122be:	4a2e      	ldr	r2, [pc, #184]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 80122c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80122c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80122c8:	4b2b      	ldr	r3, [pc, #172]	@ (8012378 <HAL_ETH_MspInit+0x198>)
 80122ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80122ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80122d2:	60bb      	str	r3, [r7, #8]
 80122d4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80122d6:	2332      	movs	r3, #50	@ 0x32
 80122d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80122da:	2302      	movs	r3, #2
 80122dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80122de:	2300      	movs	r3, #0
 80122e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80122e2:	2303      	movs	r3, #3
 80122e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80122e6:	230b      	movs	r3, #11
 80122e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80122ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80122ee:	4619      	mov	r1, r3
 80122f0:	4822      	ldr	r0, [pc, #136]	@ (801237c <HAL_ETH_MspInit+0x19c>)
 80122f2:	f7f9 f9c3 	bl	800b67c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80122f6:	2386      	movs	r3, #134	@ 0x86
 80122f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80122fa:	2302      	movs	r3, #2
 80122fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80122fe:	2300      	movs	r3, #0
 8012300:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012302:	2303      	movs	r3, #3
 8012304:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012306:	230b      	movs	r3, #11
 8012308:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801230a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801230e:	4619      	mov	r1, r3
 8012310:	481b      	ldr	r0, [pc, #108]	@ (8012380 <HAL_ETH_MspInit+0x1a0>)
 8012312:	f7f9 f9b3 	bl	800b67c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8012316:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 801231a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801231c:	2302      	movs	r3, #2
 801231e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012320:	2300      	movs	r3, #0
 8012322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012324:	2303      	movs	r3, #3
 8012326:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012328:	230b      	movs	r3, #11
 801232a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801232c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012330:	4619      	mov	r1, r3
 8012332:	4814      	ldr	r0, [pc, #80]	@ (8012384 <HAL_ETH_MspInit+0x1a4>)
 8012334:	f7f9 f9a2 	bl	800b67c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8012338:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801233c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801233e:	2302      	movs	r3, #2
 8012340:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012342:	2300      	movs	r3, #0
 8012344:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012346:	2303      	movs	r3, #3
 8012348:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801234a:	230b      	movs	r3, #11
 801234c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801234e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012352:	4619      	mov	r1, r3
 8012354:	480c      	ldr	r0, [pc, #48]	@ (8012388 <HAL_ETH_MspInit+0x1a8>)
 8012356:	f7f9 f991 	bl	800b67c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 801235a:	2200      	movs	r2, #0
 801235c:	2105      	movs	r1, #5
 801235e:	203d      	movs	r0, #61	@ 0x3d
 8012360:	f7f4 fd48 	bl	8006df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8012364:	203d      	movs	r0, #61	@ 0x3d
 8012366:	f7f4 fd5f 	bl	8006e28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 801236a:	bf00      	nop
 801236c:	3738      	adds	r7, #56	@ 0x38
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}
 8012372:	bf00      	nop
 8012374:	40028000 	.word	0x40028000
 8012378:	58024400 	.word	0x58024400
 801237c:	58020800 	.word	0x58020800
 8012380:	58020000 	.word	0x58020000
 8012384:	58020400 	.word	0x58020400
 8012388:	58021800 	.word	0x58021800

0801238c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8012390:	4802      	ldr	r0, [pc, #8]	@ (801239c <ETH_PHY_IO_Init+0x10>)
 8012392:	f7f8 fb87 	bl	800aaa4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8012396:	2300      	movs	r3, #0
}
 8012398:	4618      	mov	r0, r3
 801239a:	bd80      	pop	{r7, pc}
 801239c:	24001274 	.word	0x24001274

080123a0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80123a0:	b480      	push	{r7}
 80123a2:	af00      	add	r7, sp, #0
  return 0;
 80123a4:	2300      	movs	r3, #0
}
 80123a6:	4618      	mov	r0, r3
 80123a8:	46bd      	mov	sp, r7
 80123aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ae:	4770      	bx	lr

080123b0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b084      	sub	sp, #16
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	60f8      	str	r0, [r7, #12]
 80123b8:	60b9      	str	r1, [r7, #8]
 80123ba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	68ba      	ldr	r2, [r7, #8]
 80123c0:	68f9      	ldr	r1, [r7, #12]
 80123c2:	4807      	ldr	r0, [pc, #28]	@ (80123e0 <ETH_PHY_IO_ReadReg+0x30>)
 80123c4:	f7f8 f8d8 	bl	800a578 <HAL_ETH_ReadPHYRegister>
 80123c8:	4603      	mov	r3, r0
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d002      	beq.n	80123d4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80123ce:	f04f 33ff 	mov.w	r3, #4294967295
 80123d2:	e000      	b.n	80123d6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80123d4:	2300      	movs	r3, #0
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3710      	adds	r7, #16
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}
 80123de:	bf00      	nop
 80123e0:	24001274 	.word	0x24001274

080123e4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b084      	sub	sp, #16
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	60f8      	str	r0, [r7, #12]
 80123ec:	60b9      	str	r1, [r7, #8]
 80123ee:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	68ba      	ldr	r2, [r7, #8]
 80123f4:	68f9      	ldr	r1, [r7, #12]
 80123f6:	4807      	ldr	r0, [pc, #28]	@ (8012414 <ETH_PHY_IO_WriteReg+0x30>)
 80123f8:	f7f8 f912 	bl	800a620 <HAL_ETH_WritePHYRegister>
 80123fc:	4603      	mov	r3, r0
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d002      	beq.n	8012408 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8012402:	f04f 33ff 	mov.w	r3, #4294967295
 8012406:	e000      	b.n	801240a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8012408:	2300      	movs	r3, #0
}
 801240a:	4618      	mov	r0, r3
 801240c:	3710      	adds	r7, #16
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}
 8012412:	bf00      	nop
 8012414:	24001274 	.word	0x24001274

08012418 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801241c:	f7f4 fbe2 	bl	8006be4 <HAL_GetTick>
 8012420:	4603      	mov	r3, r0
}
 8012422:	4618      	mov	r0, r3
 8012424:	bd80      	pop	{r7, pc}
	...

08012428 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b0a0      	sub	sp, #128	@ 0x80
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8012430:	f107 0308 	add.w	r3, r7, #8
 8012434:	2264      	movs	r2, #100	@ 0x64
 8012436:	2100      	movs	r1, #0
 8012438:	4618      	mov	r0, r3
 801243a:	f013 f93f 	bl	80256bc <memset>
  int32_t PHYLinkState = 0;
 801243e:	2300      	movs	r3, #0
 8012440:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8012442:	2300      	movs	r3, #0
 8012444:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012446:	2300      	movs	r3, #0
 8012448:	67bb      	str	r3, [r7, #120]	@ 0x78
 801244a:	2300      	movs	r3, #0
 801244c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8012452:	483a      	ldr	r0, [pc, #232]	@ (801253c <ethernet_link_thread+0x114>)
 8012454:	f7f4 faee 	bl	8006a34 <LAN8742_GetLinkState>
 8012458:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 801245a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801245c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012460:	089b      	lsrs	r3, r3, #2
 8012462:	f003 0301 	and.w	r3, r3, #1
 8012466:	b2db      	uxtb	r3, r3
 8012468:	2b00      	cmp	r3, #0
 801246a:	d00c      	beq.n	8012486 <ethernet_link_thread+0x5e>
 801246c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801246e:	2b01      	cmp	r3, #1
 8012470:	dc09      	bgt.n	8012486 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8012472:	4833      	ldr	r0, [pc, #204]	@ (8012540 <ethernet_link_thread+0x118>)
 8012474:	f7f7 fd0c 	bl	8009e90 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8012478:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801247a:	f007 fc6f 	bl	8019d5c <netif_set_down>
    netif_set_link_down(netif);
 801247e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012480:	f007 fcd2 	bl	8019e28 <netif_set_link_down>
 8012484:	e055      	b.n	8012532 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8012486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012488:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801248c:	f003 0304 	and.w	r3, r3, #4
 8012490:	2b00      	cmp	r3, #0
 8012492:	d14e      	bne.n	8012532 <ethernet_link_thread+0x10a>
 8012494:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012496:	2b01      	cmp	r3, #1
 8012498:	dd4b      	ble.n	8012532 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 801249a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801249c:	3b02      	subs	r3, #2
 801249e:	2b03      	cmp	r3, #3
 80124a0:	d82a      	bhi.n	80124f8 <ethernet_link_thread+0xd0>
 80124a2:	a201      	add	r2, pc, #4	@ (adr r2, 80124a8 <ethernet_link_thread+0x80>)
 80124a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124a8:	080124b9 	.word	0x080124b9
 80124ac:	080124cb 	.word	0x080124cb
 80124b0:	080124db 	.word	0x080124db
 80124b4:	080124eb 	.word	0x080124eb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80124b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80124bc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80124be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80124c2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80124c4:	2301      	movs	r3, #1
 80124c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80124c8:	e017      	b.n	80124fa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80124ca:	2300      	movs	r3, #0
 80124cc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80124ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80124d2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80124d4:	2301      	movs	r3, #1
 80124d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80124d8:	e00f      	b.n	80124fa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80124da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80124de:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80124e0:	2300      	movs	r3, #0
 80124e2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80124e4:	2301      	movs	r3, #1
 80124e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80124e8:	e007      	b.n	80124fa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80124ea:	2300      	movs	r3, #0
 80124ec:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80124ee:	2300      	movs	r3, #0
 80124f0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80124f2:	2301      	movs	r3, #1
 80124f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80124f6:	e000      	b.n	80124fa <ethernet_link_thread+0xd2>
    default:
      break;
 80124f8:	bf00      	nop
    }

    if(linkchanged)
 80124fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d018      	beq.n	8012532 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8012500:	f107 0308 	add.w	r3, r7, #8
 8012504:	4619      	mov	r1, r3
 8012506:	480e      	ldr	r0, [pc, #56]	@ (8012540 <ethernet_link_thread+0x118>)
 8012508:	f7f8 f8de 	bl	800a6c8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 801250c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801250e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8012510:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012512:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8012514:	f107 0308 	add.w	r3, r7, #8
 8012518:	4619      	mov	r1, r3
 801251a:	4809      	ldr	r0, [pc, #36]	@ (8012540 <ethernet_link_thread+0x118>)
 801251c:	f7f8 faa8 	bl	800aa70 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8012520:	4807      	ldr	r0, [pc, #28]	@ (8012540 <ethernet_link_thread+0x118>)
 8012522:	f7f7 fc41 	bl	8009da8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8012526:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012528:	f007 fbac 	bl	8019c84 <netif_set_up>
      netif_set_link_up(netif);
 801252c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801252e:	f007 fc47 	bl	8019dc0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8012532:	2064      	movs	r0, #100	@ 0x64
 8012534:	f000 f936 	bl	80127a4 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8012538:	e78b      	b.n	8012452 <ethernet_link_thread+0x2a>
 801253a:	bf00      	nop
 801253c:	2400135c 	.word	0x2400135c
 8012540:	24001274 	.word	0x24001274

08012544 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b086      	sub	sp, #24
 8012548:	af02      	add	r7, sp, #8
 801254a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 801254c:	4812      	ldr	r0, [pc, #72]	@ (8012598 <HAL_ETH_RxAllocateCallback+0x54>)
 801254e:	f007 f90d 	bl	801976c <memp_malloc_pool>
 8012552:	60f8      	str	r0, [r7, #12]
  if (p)
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d014      	beq.n	8012584 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	f103 0220 	add.w	r2, r3, #32
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	4a0d      	ldr	r2, [pc, #52]	@ (801259c <HAL_ETH_RxAllocateCallback+0x58>)
 8012568:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8012572:	9201      	str	r2, [sp, #4]
 8012574:	9300      	str	r3, [sp, #0]
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	2241      	movs	r2, #65	@ 0x41
 801257a:	2100      	movs	r1, #0
 801257c:	2000      	movs	r0, #0
 801257e:	f007 fe77 	bl	801a270 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8012582:	e005      	b.n	8012590 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8012584:	4b06      	ldr	r3, [pc, #24]	@ (80125a0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8012586:	2201      	movs	r2, #1
 8012588:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2200      	movs	r2, #0
 801258e:	601a      	str	r2, [r3, #0]
}
 8012590:	bf00      	nop
 8012592:	3710      	adds	r7, #16
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}
 8012598:	0802cff0 	.word	0x0802cff0
 801259c:	08012191 	.word	0x08012191
 80125a0:	24001268 	.word	0x24001268

080125a4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80125a4:	b480      	push	{r7}
 80125a6:	b08d      	sub	sp, #52	@ 0x34
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	60f8      	str	r0, [r7, #12]
 80125ac:	60b9      	str	r1, [r7, #8]
 80125ae:	607a      	str	r2, [r7, #4]
 80125b0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 80125ba:	2300      	movs	r3, #0
 80125bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	3b20      	subs	r3, #32
 80125c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 80125c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125c6:	2200      	movs	r2, #0
 80125c8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80125ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125cc:	2200      	movs	r2, #0
 80125ce:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80125d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125d2:	887a      	ldrh	r2, [r7, #2]
 80125d4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80125d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d103      	bne.n	80125e6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80125de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80125e2:	601a      	str	r2, [r3, #0]
 80125e4:	e003      	b.n	80125ee <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80125e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80125ec:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80125ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80125f2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80125f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80125fa:	e009      	b.n	8012610 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80125fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125fe:	891a      	ldrh	r2, [r3, #8]
 8012600:	887b      	ldrh	r3, [r7, #2]
 8012602:	4413      	add	r3, r2
 8012604:	b29a      	uxth	r2, r3
 8012606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012608:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 801260a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012612:	2b00      	cmp	r3, #0
 8012614:	d1f2      	bne.n	80125fc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8012616:	887b      	ldrh	r3, [r7, #2]
 8012618:	687a      	ldr	r2, [r7, #4]
 801261a:	623a      	str	r2, [r7, #32]
 801261c:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 801261e:	69fb      	ldr	r3, [r7, #28]
 8012620:	2b00      	cmp	r3, #0
 8012622:	dd1d      	ble.n	8012660 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8012624:	6a3b      	ldr	r3, [r7, #32]
 8012626:	f003 021f 	and.w	r2, r3, #31
 801262a:	69fb      	ldr	r3, [r7, #28]
 801262c:	4413      	add	r3, r2
 801262e:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8012630:	6a3b      	ldr	r3, [r7, #32]
 8012632:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8012634:	f3bf 8f4f 	dsb	sy
}
 8012638:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801263a:	4a0d      	ldr	r2, [pc, #52]	@ (8012670 <HAL_ETH_RxLinkCallback+0xcc>)
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	3320      	adds	r3, #32
 8012646:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8012648:	69bb      	ldr	r3, [r7, #24]
 801264a:	3b20      	subs	r3, #32
 801264c:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 801264e:	69bb      	ldr	r3, [r7, #24]
 8012650:	2b00      	cmp	r3, #0
 8012652:	dcf2      	bgt.n	801263a <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8012654:	f3bf 8f4f 	dsb	sy
}
 8012658:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801265a:	f3bf 8f6f 	isb	sy
}
 801265e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8012660:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8012662:	bf00      	nop
 8012664:	3734      	adds	r7, #52	@ 0x34
 8012666:	46bd      	mov	sp, r7
 8012668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266c:	4770      	bx	lr
 801266e:	bf00      	nop
 8012670:	e000ed00 	.word	0xe000ed00

08012674 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b082      	sub	sp, #8
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 801267c:	6878      	ldr	r0, [r7, #4]
 801267e:	f007 ffe3 	bl	801a648 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8012682:	bf00      	nop
 8012684:	3708      	adds	r7, #8
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}

0801268a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801268a:	b480      	push	{r7}
 801268c:	b085      	sub	sp, #20
 801268e:	af00      	add	r7, sp, #0
 8012690:	4603      	mov	r3, r0
 8012692:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012694:	2300      	movs	r3, #0
 8012696:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801269c:	2b84      	cmp	r3, #132	@ 0x84
 801269e:	d005      	beq.n	80126ac <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80126a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	4413      	add	r3, r2
 80126a8:	3303      	adds	r3, #3
 80126aa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80126ac:	68fb      	ldr	r3, [r7, #12]
}
 80126ae:	4618      	mov	r0, r3
 80126b0:	3714      	adds	r7, #20
 80126b2:	46bd      	mov	sp, r7
 80126b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b8:	4770      	bx	lr

080126ba <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80126ba:	b480      	push	{r7}
 80126bc:	b083      	sub	sp, #12
 80126be:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126c0:	f3ef 8305 	mrs	r3, IPSR
 80126c4:	607b      	str	r3, [r7, #4]
  return(result);
 80126c6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	bf14      	ite	ne
 80126cc:	2301      	movne	r3, #1
 80126ce:	2300      	moveq	r3, #0
 80126d0:	b2db      	uxtb	r3, r3
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	370c      	adds	r7, #12
 80126d6:	46bd      	mov	sp, r7
 80126d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126dc:	4770      	bx	lr

080126de <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80126de:	b580      	push	{r7, lr}
 80126e0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80126e2:	f001 fddb 	bl	801429c <vTaskStartScheduler>
  
  return osOK;
 80126e6:	2300      	movs	r3, #0
}
 80126e8:	4618      	mov	r0, r3
 80126ea:	bd80      	pop	{r7, pc}

080126ec <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80126f0:	f7ff ffe3 	bl	80126ba <inHandlerMode>
 80126f4:	4603      	mov	r3, r0
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d003      	beq.n	8012702 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80126fa:	f001 feed 	bl	80144d8 <xTaskGetTickCountFromISR>
 80126fe:	4603      	mov	r3, r0
 8012700:	e002      	b.n	8012708 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8012702:	f001 fed9 	bl	80144b8 <xTaskGetTickCount>
 8012706:	4603      	mov	r3, r0
  }
}
 8012708:	4618      	mov	r0, r3
 801270a:	bd80      	pop	{r7, pc}

0801270c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801270c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801270e:	b089      	sub	sp, #36	@ 0x24
 8012710:	af04      	add	r7, sp, #16
 8012712:	6078      	str	r0, [r7, #4]
 8012714:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	695b      	ldr	r3, [r3, #20]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d020      	beq.n	8012760 <osThreadCreate+0x54>
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	699b      	ldr	r3, [r3, #24]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d01c      	beq.n	8012760 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	685c      	ldr	r4, [r3, #4]
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	691e      	ldr	r6, [r3, #16]
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012738:	4618      	mov	r0, r3
 801273a:	f7ff ffa6 	bl	801268a <makeFreeRtosPriority>
 801273e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	695b      	ldr	r3, [r3, #20]
 8012744:	687a      	ldr	r2, [r7, #4]
 8012746:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012748:	9202      	str	r2, [sp, #8]
 801274a:	9301      	str	r3, [sp, #4]
 801274c:	9100      	str	r1, [sp, #0]
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	4632      	mov	r2, r6
 8012752:	4629      	mov	r1, r5
 8012754:	4620      	mov	r0, r4
 8012756:	f001 fb3f 	bl	8013dd8 <xTaskCreateStatic>
 801275a:	4603      	mov	r3, r0
 801275c:	60fb      	str	r3, [r7, #12]
 801275e:	e01c      	b.n	801279a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	685c      	ldr	r4, [r3, #4]
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801276c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012774:	4618      	mov	r0, r3
 8012776:	f7ff ff88 	bl	801268a <makeFreeRtosPriority>
 801277a:	4602      	mov	r2, r0
 801277c:	f107 030c 	add.w	r3, r7, #12
 8012780:	9301      	str	r3, [sp, #4]
 8012782:	9200      	str	r2, [sp, #0]
 8012784:	683b      	ldr	r3, [r7, #0]
 8012786:	4632      	mov	r2, r6
 8012788:	4629      	mov	r1, r5
 801278a:	4620      	mov	r0, r4
 801278c:	f001 fb84 	bl	8013e98 <xTaskCreate>
 8012790:	4603      	mov	r3, r0
 8012792:	2b01      	cmp	r3, #1
 8012794:	d001      	beq.n	801279a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012796:	2300      	movs	r3, #0
 8012798:	e000      	b.n	801279c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801279a:	68fb      	ldr	r3, [r7, #12]
}
 801279c:	4618      	mov	r0, r3
 801279e:	3714      	adds	r7, #20
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080127a4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b084      	sub	sp, #16
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d001      	beq.n	80127ba <osDelay+0x16>
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	e000      	b.n	80127bc <osDelay+0x18>
 80127ba:	2301      	movs	r3, #1
 80127bc:	4618      	mov	r0, r3
 80127be:	f001 fca3 	bl	8014108 <vTaskDelay>
  
  return osOK;
 80127c2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80127c4:	4618      	mov	r0, r3
 80127c6:	3710      	adds	r7, #16
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}

080127cc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b082      	sub	sp, #8
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	685b      	ldr	r3, [r3, #4]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d007      	beq.n	80127ec <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	685b      	ldr	r3, [r3, #4]
 80127e0:	4619      	mov	r1, r3
 80127e2:	2001      	movs	r0, #1
 80127e4:	f000 fc85 	bl	80130f2 <xQueueCreateMutexStatic>
 80127e8:	4603      	mov	r3, r0
 80127ea:	e003      	b.n	80127f4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80127ec:	2001      	movs	r0, #1
 80127ee:	f000 fc68 	bl	80130c2 <xQueueCreateMutex>
 80127f2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	3708      	adds	r7, #8
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}

080127fc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b084      	sub	sp, #16
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
 8012804:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012806:	2300      	movs	r3, #0
 8012808:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d101      	bne.n	8012814 <osMutexWait+0x18>
    return osErrorParameter;
 8012810:	2380      	movs	r3, #128	@ 0x80
 8012812:	e03a      	b.n	801288a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8012814:	2300      	movs	r3, #0
 8012816:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8012818:	683b      	ldr	r3, [r7, #0]
 801281a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801281e:	d103      	bne.n	8012828 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8012820:	f04f 33ff 	mov.w	r3, #4294967295
 8012824:	60fb      	str	r3, [r7, #12]
 8012826:	e009      	b.n	801283c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d006      	beq.n	801283c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d101      	bne.n	801283c <osMutexWait+0x40>
      ticks = 1;
 8012838:	2301      	movs	r3, #1
 801283a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 801283c:	f7ff ff3d 	bl	80126ba <inHandlerMode>
 8012840:	4603      	mov	r3, r0
 8012842:	2b00      	cmp	r3, #0
 8012844:	d017      	beq.n	8012876 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012846:	f107 0308 	add.w	r3, r7, #8
 801284a:	461a      	mov	r2, r3
 801284c:	2100      	movs	r1, #0
 801284e:	6878      	ldr	r0, [r7, #4]
 8012850:	f001 f88c 	bl	801396c <xQueueReceiveFromISR>
 8012854:	4603      	mov	r3, r0
 8012856:	2b01      	cmp	r3, #1
 8012858:	d001      	beq.n	801285e <osMutexWait+0x62>
      return osErrorOS;
 801285a:	23ff      	movs	r3, #255	@ 0xff
 801285c:	e015      	b.n	801288a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d011      	beq.n	8012888 <osMutexWait+0x8c>
 8012864:	4b0b      	ldr	r3, [pc, #44]	@ (8012894 <osMutexWait+0x98>)
 8012866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801286a:	601a      	str	r2, [r3, #0]
 801286c:	f3bf 8f4f 	dsb	sy
 8012870:	f3bf 8f6f 	isb	sy
 8012874:	e008      	b.n	8012888 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8012876:	68f9      	ldr	r1, [r7, #12]
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f000 ff67 	bl	801374c <xQueueSemaphoreTake>
 801287e:	4603      	mov	r3, r0
 8012880:	2b01      	cmp	r3, #1
 8012882:	d001      	beq.n	8012888 <osMutexWait+0x8c>
    return osErrorOS;
 8012884:	23ff      	movs	r3, #255	@ 0xff
 8012886:	e000      	b.n	801288a <osMutexWait+0x8e>
  }
  
  return osOK;
 8012888:	2300      	movs	r3, #0
}
 801288a:	4618      	mov	r0, r3
 801288c:	3710      	adds	r7, #16
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}
 8012892:	bf00      	nop
 8012894:	e000ed04 	.word	0xe000ed04

08012898 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b084      	sub	sp, #16
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80128a0:	2300      	movs	r3, #0
 80128a2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80128a4:	2300      	movs	r3, #0
 80128a6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80128a8:	f7ff ff07 	bl	80126ba <inHandlerMode>
 80128ac:	4603      	mov	r3, r0
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d016      	beq.n	80128e0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80128b2:	f107 0308 	add.w	r3, r7, #8
 80128b6:	4619      	mov	r1, r3
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f000 fdd5 	bl	8013468 <xQueueGiveFromISR>
 80128be:	4603      	mov	r3, r0
 80128c0:	2b01      	cmp	r3, #1
 80128c2:	d001      	beq.n	80128c8 <osMutexRelease+0x30>
      return osErrorOS;
 80128c4:	23ff      	movs	r3, #255	@ 0xff
 80128c6:	e017      	b.n	80128f8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d013      	beq.n	80128f6 <osMutexRelease+0x5e>
 80128ce:	4b0c      	ldr	r3, [pc, #48]	@ (8012900 <osMutexRelease+0x68>)
 80128d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80128d4:	601a      	str	r2, [r3, #0]
 80128d6:	f3bf 8f4f 	dsb	sy
 80128da:	f3bf 8f6f 	isb	sy
 80128de:	e00a      	b.n	80128f6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80128e0:	2300      	movs	r3, #0
 80128e2:	2200      	movs	r2, #0
 80128e4:	2100      	movs	r1, #0
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f000 fc1e 	bl	8013128 <xQueueGenericSend>
 80128ec:	4603      	mov	r3, r0
 80128ee:	2b01      	cmp	r3, #1
 80128f0:	d001      	beq.n	80128f6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80128f2:	23ff      	movs	r3, #255	@ 0xff
 80128f4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80128f6:	68fb      	ldr	r3, [r7, #12]
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3710      	adds	r7, #16
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}
 8012900:	e000ed04 	.word	0xe000ed04

08012904 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012904:	b580      	push	{r7, lr}
 8012906:	b086      	sub	sp, #24
 8012908:	af02      	add	r7, sp, #8
 801290a:	6078      	str	r0, [r7, #4]
 801290c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	685b      	ldr	r3, [r3, #4]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d00f      	beq.n	8012936 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	2b01      	cmp	r3, #1
 801291a:	d10a      	bne.n	8012932 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	685b      	ldr	r3, [r3, #4]
 8012920:	2203      	movs	r2, #3
 8012922:	9200      	str	r2, [sp, #0]
 8012924:	2200      	movs	r2, #0
 8012926:	2100      	movs	r1, #0
 8012928:	2001      	movs	r0, #1
 801292a:	f000 fad9 	bl	8012ee0 <xQueueGenericCreateStatic>
 801292e:	4603      	mov	r3, r0
 8012930:	e016      	b.n	8012960 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8012932:	2300      	movs	r3, #0
 8012934:	e014      	b.n	8012960 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8012936:	683b      	ldr	r3, [r7, #0]
 8012938:	2b01      	cmp	r3, #1
 801293a:	d110      	bne.n	801295e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 801293c:	2203      	movs	r2, #3
 801293e:	2100      	movs	r1, #0
 8012940:	2001      	movs	r0, #1
 8012942:	f000 fb4a 	bl	8012fda <xQueueGenericCreate>
 8012946:	60f8      	str	r0, [r7, #12]
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d005      	beq.n	801295a <osSemaphoreCreate+0x56>
 801294e:	2300      	movs	r3, #0
 8012950:	2200      	movs	r2, #0
 8012952:	2100      	movs	r1, #0
 8012954:	68f8      	ldr	r0, [r7, #12]
 8012956:	f000 fbe7 	bl	8013128 <xQueueGenericSend>
      return sema;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	e000      	b.n	8012960 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 801295e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8012960:	4618      	mov	r0, r3
 8012962:	3710      	adds	r7, #16
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}

08012968 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b084      	sub	sp, #16
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012972:	2300      	movs	r3, #0
 8012974:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d101      	bne.n	8012980 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801297c:	2380      	movs	r3, #128	@ 0x80
 801297e:	e03a      	b.n	80129f6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8012980:	2300      	movs	r3, #0
 8012982:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8012984:	683b      	ldr	r3, [r7, #0]
 8012986:	f1b3 3fff 	cmp.w	r3, #4294967295
 801298a:	d103      	bne.n	8012994 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801298c:	f04f 33ff 	mov.w	r3, #4294967295
 8012990:	60fb      	str	r3, [r7, #12]
 8012992:	e009      	b.n	80129a8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d006      	beq.n	80129a8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d101      	bne.n	80129a8 <osSemaphoreWait+0x40>
      ticks = 1;
 80129a4:	2301      	movs	r3, #1
 80129a6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80129a8:	f7ff fe87 	bl	80126ba <inHandlerMode>
 80129ac:	4603      	mov	r3, r0
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d017      	beq.n	80129e2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80129b2:	f107 0308 	add.w	r3, r7, #8
 80129b6:	461a      	mov	r2, r3
 80129b8:	2100      	movs	r1, #0
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f000 ffd6 	bl	801396c <xQueueReceiveFromISR>
 80129c0:	4603      	mov	r3, r0
 80129c2:	2b01      	cmp	r3, #1
 80129c4:	d001      	beq.n	80129ca <osSemaphoreWait+0x62>
      return osErrorOS;
 80129c6:	23ff      	movs	r3, #255	@ 0xff
 80129c8:	e015      	b.n	80129f6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d011      	beq.n	80129f4 <osSemaphoreWait+0x8c>
 80129d0:	4b0b      	ldr	r3, [pc, #44]	@ (8012a00 <osSemaphoreWait+0x98>)
 80129d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80129d6:	601a      	str	r2, [r3, #0]
 80129d8:	f3bf 8f4f 	dsb	sy
 80129dc:	f3bf 8f6f 	isb	sy
 80129e0:	e008      	b.n	80129f4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80129e2:	68f9      	ldr	r1, [r7, #12]
 80129e4:	6878      	ldr	r0, [r7, #4]
 80129e6:	f000 feb1 	bl	801374c <xQueueSemaphoreTake>
 80129ea:	4603      	mov	r3, r0
 80129ec:	2b01      	cmp	r3, #1
 80129ee:	d001      	beq.n	80129f4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80129f0:	23ff      	movs	r3, #255	@ 0xff
 80129f2:	e000      	b.n	80129f6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80129f4:	2300      	movs	r3, #0
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	3710      	adds	r7, #16
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}
 80129fe:	bf00      	nop
 8012a00:	e000ed04 	.word	0xe000ed04

08012a04 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b084      	sub	sp, #16
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012a10:	2300      	movs	r3, #0
 8012a12:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8012a14:	f7ff fe51 	bl	80126ba <inHandlerMode>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d016      	beq.n	8012a4c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012a1e:	f107 0308 	add.w	r3, r7, #8
 8012a22:	4619      	mov	r1, r3
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	f000 fd1f 	bl	8013468 <xQueueGiveFromISR>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	2b01      	cmp	r3, #1
 8012a2e:	d001      	beq.n	8012a34 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8012a30:	23ff      	movs	r3, #255	@ 0xff
 8012a32:	e017      	b.n	8012a64 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d013      	beq.n	8012a62 <osSemaphoreRelease+0x5e>
 8012a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8012a6c <osSemaphoreRelease+0x68>)
 8012a3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a40:	601a      	str	r2, [r3, #0]
 8012a42:	f3bf 8f4f 	dsb	sy
 8012a46:	f3bf 8f6f 	isb	sy
 8012a4a:	e00a      	b.n	8012a62 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	2200      	movs	r2, #0
 8012a50:	2100      	movs	r1, #0
 8012a52:	6878      	ldr	r0, [r7, #4]
 8012a54:	f000 fb68 	bl	8013128 <xQueueGenericSend>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	2b01      	cmp	r3, #1
 8012a5c:	d001      	beq.n	8012a62 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8012a5e:	23ff      	movs	r3, #255	@ 0xff
 8012a60:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8012a62:	68fb      	ldr	r3, [r7, #12]
}
 8012a64:	4618      	mov	r0, r3
 8012a66:	3710      	adds	r7, #16
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd80      	pop	{r7, pc}
 8012a6c:	e000ed04 	.word	0xe000ed04

08012a70 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b082      	sub	sp, #8
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8012a78:	f7ff fe1f 	bl	80126ba <inHandlerMode>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d001      	beq.n	8012a86 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8012a82:	2382      	movs	r3, #130	@ 0x82
 8012a84:	e003      	b.n	8012a8e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8012a86:	6878      	ldr	r0, [r7, #4]
 8012a88:	f001 f830 	bl	8013aec <vQueueDelete>

  return osOK; 
 8012a8c:	2300      	movs	r3, #0
}
 8012a8e:	4618      	mov	r0, r3
 8012a90:	3708      	adds	r7, #8
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd80      	pop	{r7, pc}

08012a96 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8012a96:	b590      	push	{r4, r7, lr}
 8012a98:	b085      	sub	sp, #20
 8012a9a:	af02      	add	r7, sp, #8
 8012a9c:	6078      	str	r0, [r7, #4]
 8012a9e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	689b      	ldr	r3, [r3, #8]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d011      	beq.n	8012acc <osMessageCreate+0x36>
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	68db      	ldr	r3, [r3, #12]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d00d      	beq.n	8012acc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	6818      	ldr	r0, [r3, #0]
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	6859      	ldr	r1, [r3, #4]
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	689a      	ldr	r2, [r3, #8]
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	68db      	ldr	r3, [r3, #12]
 8012ac0:	2400      	movs	r4, #0
 8012ac2:	9400      	str	r4, [sp, #0]
 8012ac4:	f000 fa0c 	bl	8012ee0 <xQueueGenericCreateStatic>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	e008      	b.n	8012ade <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	6818      	ldr	r0, [r3, #0]
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	685b      	ldr	r3, [r3, #4]
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	4619      	mov	r1, r3
 8012ad8:	f000 fa7f 	bl	8012fda <xQueueGenericCreate>
 8012adc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8012ade:	4618      	mov	r0, r3
 8012ae0:	370c      	adds	r7, #12
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	bd90      	pop	{r4, r7, pc}
	...

08012ae8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b086      	sub	sp, #24
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	60f8      	str	r0, [r7, #12]
 8012af0:	60b9      	str	r1, [r7, #8]
 8012af2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012af4:	2300      	movs	r3, #0
 8012af6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8012afc:	697b      	ldr	r3, [r7, #20]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d101      	bne.n	8012b06 <osMessagePut+0x1e>
    ticks = 1;
 8012b02:	2301      	movs	r3, #1
 8012b04:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8012b06:	f7ff fdd8 	bl	80126ba <inHandlerMode>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d018      	beq.n	8012b42 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012b10:	f107 0210 	add.w	r2, r7, #16
 8012b14:	f107 0108 	add.w	r1, r7, #8
 8012b18:	2300      	movs	r3, #0
 8012b1a:	68f8      	ldr	r0, [r7, #12]
 8012b1c:	f000 fc06 	bl	801332c <xQueueGenericSendFromISR>
 8012b20:	4603      	mov	r3, r0
 8012b22:	2b01      	cmp	r3, #1
 8012b24:	d001      	beq.n	8012b2a <osMessagePut+0x42>
      return osErrorOS;
 8012b26:	23ff      	movs	r3, #255	@ 0xff
 8012b28:	e018      	b.n	8012b5c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012b2a:	693b      	ldr	r3, [r7, #16]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d014      	beq.n	8012b5a <osMessagePut+0x72>
 8012b30:	4b0c      	ldr	r3, [pc, #48]	@ (8012b64 <osMessagePut+0x7c>)
 8012b32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b36:	601a      	str	r2, [r3, #0]
 8012b38:	f3bf 8f4f 	dsb	sy
 8012b3c:	f3bf 8f6f 	isb	sy
 8012b40:	e00b      	b.n	8012b5a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012b42:	f107 0108 	add.w	r1, r7, #8
 8012b46:	2300      	movs	r3, #0
 8012b48:	697a      	ldr	r2, [r7, #20]
 8012b4a:	68f8      	ldr	r0, [r7, #12]
 8012b4c:	f000 faec 	bl	8013128 <xQueueGenericSend>
 8012b50:	4603      	mov	r3, r0
 8012b52:	2b01      	cmp	r3, #1
 8012b54:	d001      	beq.n	8012b5a <osMessagePut+0x72>
      return osErrorOS;
 8012b56:	23ff      	movs	r3, #255	@ 0xff
 8012b58:	e000      	b.n	8012b5c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8012b5a:	2300      	movs	r3, #0
}
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	3718      	adds	r7, #24
 8012b60:	46bd      	mov	sp, r7
 8012b62:	bd80      	pop	{r7, pc}
 8012b64:	e000ed04 	.word	0xe000ed04

08012b68 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8012b68:	b590      	push	{r4, r7, lr}
 8012b6a:	b08b      	sub	sp, #44	@ 0x2c
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	60f8      	str	r0, [r7, #12]
 8012b70:	60b9      	str	r1, [r7, #8]
 8012b72:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8012b78:	2300      	movs	r3, #0
 8012b7a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d10a      	bne.n	8012b98 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8012b82:	2380      	movs	r3, #128	@ 0x80
 8012b84:	617b      	str	r3, [r7, #20]
    return event;
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	461c      	mov	r4, r3
 8012b8a:	f107 0314 	add.w	r3, r7, #20
 8012b8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012b92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012b96:	e054      	b.n	8012c42 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012b98:	2300      	movs	r3, #0
 8012b9a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ba6:	d103      	bne.n	8012bb0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8012ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8012bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8012bae:	e009      	b.n	8012bc4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d006      	beq.n	8012bc4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8012bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d101      	bne.n	8012bc4 <osMessageGet+0x5c>
      ticks = 1;
 8012bc0:	2301      	movs	r3, #1
 8012bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012bc4:	f7ff fd79 	bl	80126ba <inHandlerMode>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d01c      	beq.n	8012c08 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012bce:	f107 0220 	add.w	r2, r7, #32
 8012bd2:	f107 0314 	add.w	r3, r7, #20
 8012bd6:	3304      	adds	r3, #4
 8012bd8:	4619      	mov	r1, r3
 8012bda:	68b8      	ldr	r0, [r7, #8]
 8012bdc:	f000 fec6 	bl	801396c <xQueueReceiveFromISR>
 8012be0:	4603      	mov	r3, r0
 8012be2:	2b01      	cmp	r3, #1
 8012be4:	d102      	bne.n	8012bec <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8012be6:	2310      	movs	r3, #16
 8012be8:	617b      	str	r3, [r7, #20]
 8012bea:	e001      	b.n	8012bf0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8012bec:	2300      	movs	r3, #0
 8012bee:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012bf0:	6a3b      	ldr	r3, [r7, #32]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d01d      	beq.n	8012c32 <osMessageGet+0xca>
 8012bf6:	4b15      	ldr	r3, [pc, #84]	@ (8012c4c <osMessageGet+0xe4>)
 8012bf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012bfc:	601a      	str	r2, [r3, #0]
 8012bfe:	f3bf 8f4f 	dsb	sy
 8012c02:	f3bf 8f6f 	isb	sy
 8012c06:	e014      	b.n	8012c32 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012c08:	f107 0314 	add.w	r3, r7, #20
 8012c0c:	3304      	adds	r3, #4
 8012c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c10:	4619      	mov	r1, r3
 8012c12:	68b8      	ldr	r0, [r7, #8]
 8012c14:	f000 fcb8 	bl	8013588 <xQueueReceive>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	2b01      	cmp	r3, #1
 8012c1c:	d102      	bne.n	8012c24 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8012c1e:	2310      	movs	r3, #16
 8012c20:	617b      	str	r3, [r7, #20]
 8012c22:	e006      	b.n	8012c32 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d101      	bne.n	8012c2e <osMessageGet+0xc6>
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	e000      	b.n	8012c30 <osMessageGet+0xc8>
 8012c2e:	2340      	movs	r3, #64	@ 0x40
 8012c30:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	461c      	mov	r4, r3
 8012c36:	f107 0314 	add.w	r3, r7, #20
 8012c3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012c3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012c42:	68f8      	ldr	r0, [r7, #12]
 8012c44:	372c      	adds	r7, #44	@ 0x2c
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd90      	pop	{r4, r7, pc}
 8012c4a:	bf00      	nop
 8012c4c:	e000ed04 	.word	0xe000ed04

08012c50 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b082      	sub	sp, #8
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8012c58:	f7ff fd2f 	bl	80126ba <inHandlerMode>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d004      	beq.n	8012c6c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f000 ff23 	bl	8013aae <uxQueueMessagesWaitingFromISR>
 8012c68:	4603      	mov	r3, r0
 8012c6a:	e003      	b.n	8012c74 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f000 feff 	bl	8013a70 <uxQueueMessagesWaiting>
 8012c72:	4603      	mov	r3, r0
  }
}
 8012c74:	4618      	mov	r0, r3
 8012c76:	3708      	adds	r7, #8
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}

08012c7c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b082      	sub	sp, #8
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8012c84:	f7ff fd19 	bl	80126ba <inHandlerMode>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d001      	beq.n	8012c92 <osMessageDelete+0x16>
    return osErrorISR;
 8012c8e:	2382      	movs	r3, #130	@ 0x82
 8012c90:	e003      	b.n	8012c9a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	f000 ff2a 	bl	8013aec <vQueueDelete>

  return osOK; 
 8012c98:	2300      	movs	r3, #0
}
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	3708      	adds	r7, #8
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}

08012ca2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012ca2:	b480      	push	{r7}
 8012ca4:	b083      	sub	sp, #12
 8012ca6:	af00      	add	r7, sp, #0
 8012ca8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	f103 0208 	add.w	r2, r3, #8
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8012cba:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	f103 0208 	add.w	r2, r3, #8
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	f103 0208 	add.w	r2, r3, #8
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012cd6:	bf00      	nop
 8012cd8:	370c      	adds	r7, #12
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce0:	4770      	bx	lr

08012ce2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012ce2:	b480      	push	{r7}
 8012ce4:	b083      	sub	sp, #12
 8012ce6:	af00      	add	r7, sp, #0
 8012ce8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	2200      	movs	r2, #0
 8012cee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012cf0:	bf00      	nop
 8012cf2:	370c      	adds	r7, #12
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfa:	4770      	bx	lr

08012cfc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012cfc:	b480      	push	{r7}
 8012cfe:	b085      	sub	sp, #20
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
 8012d04:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	685b      	ldr	r3, [r3, #4]
 8012d0a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	68fa      	ldr	r2, [r7, #12]
 8012d10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	689a      	ldr	r2, [r3, #8]
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	689b      	ldr	r3, [r3, #8]
 8012d1e:	683a      	ldr	r2, [r7, #0]
 8012d20:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	683a      	ldr	r2, [r7, #0]
 8012d26:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	687a      	ldr	r2, [r7, #4]
 8012d2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	1c5a      	adds	r2, r3, #1
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	601a      	str	r2, [r3, #0]
}
 8012d38:	bf00      	nop
 8012d3a:	3714      	adds	r7, #20
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d42:	4770      	bx	lr

08012d44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012d44:	b480      	push	{r7}
 8012d46:	b085      	sub	sp, #20
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
 8012d4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d5a:	d103      	bne.n	8012d64 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	691b      	ldr	r3, [r3, #16]
 8012d60:	60fb      	str	r3, [r7, #12]
 8012d62:	e00c      	b.n	8012d7e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	3308      	adds	r3, #8
 8012d68:	60fb      	str	r3, [r7, #12]
 8012d6a:	e002      	b.n	8012d72 <vListInsert+0x2e>
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	685b      	ldr	r3, [r3, #4]
 8012d70:	60fb      	str	r3, [r7, #12]
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	685b      	ldr	r3, [r3, #4]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	68ba      	ldr	r2, [r7, #8]
 8012d7a:	429a      	cmp	r2, r3
 8012d7c:	d2f6      	bcs.n	8012d6c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	685a      	ldr	r2, [r3, #4]
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012d86:	683b      	ldr	r3, [r7, #0]
 8012d88:	685b      	ldr	r3, [r3, #4]
 8012d8a:	683a      	ldr	r2, [r7, #0]
 8012d8c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012d8e:	683b      	ldr	r3, [r7, #0]
 8012d90:	68fa      	ldr	r2, [r7, #12]
 8012d92:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	683a      	ldr	r2, [r7, #0]
 8012d98:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012d9a:	683b      	ldr	r3, [r7, #0]
 8012d9c:	687a      	ldr	r2, [r7, #4]
 8012d9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	1c5a      	adds	r2, r3, #1
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	601a      	str	r2, [r3, #0]
}
 8012daa:	bf00      	nop
 8012dac:	3714      	adds	r7, #20
 8012dae:	46bd      	mov	sp, r7
 8012db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db4:	4770      	bx	lr

08012db6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012db6:	b480      	push	{r7}
 8012db8:	b085      	sub	sp, #20
 8012dba:	af00      	add	r7, sp, #0
 8012dbc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	691b      	ldr	r3, [r3, #16]
 8012dc2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	685b      	ldr	r3, [r3, #4]
 8012dc8:	687a      	ldr	r2, [r7, #4]
 8012dca:	6892      	ldr	r2, [r2, #8]
 8012dcc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	689b      	ldr	r3, [r3, #8]
 8012dd2:	687a      	ldr	r2, [r7, #4]
 8012dd4:	6852      	ldr	r2, [r2, #4]
 8012dd6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	685b      	ldr	r3, [r3, #4]
 8012ddc:	687a      	ldr	r2, [r7, #4]
 8012dde:	429a      	cmp	r2, r3
 8012de0:	d103      	bne.n	8012dea <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	689a      	ldr	r2, [r3, #8]
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	2200      	movs	r2, #0
 8012dee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	1e5a      	subs	r2, r3, #1
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	681b      	ldr	r3, [r3, #0]
}
 8012dfe:	4618      	mov	r0, r3
 8012e00:	3714      	adds	r7, #20
 8012e02:	46bd      	mov	sp, r7
 8012e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e08:	4770      	bx	lr
	...

08012e0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b084      	sub	sp, #16
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
 8012e14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d10b      	bne.n	8012e38 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e24:	f383 8811 	msr	BASEPRI, r3
 8012e28:	f3bf 8f6f 	isb	sy
 8012e2c:	f3bf 8f4f 	dsb	sy
 8012e30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012e32:	bf00      	nop
 8012e34:	bf00      	nop
 8012e36:	e7fd      	b.n	8012e34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012e38:	f002 f9b6 	bl	80151a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	681a      	ldr	r2, [r3, #0]
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e44:	68f9      	ldr	r1, [r7, #12]
 8012e46:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012e48:	fb01 f303 	mul.w	r3, r1, r3
 8012e4c:	441a      	add	r2, r3
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	2200      	movs	r2, #0
 8012e56:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	681a      	ldr	r2, [r3, #0]
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	681a      	ldr	r2, [r3, #0]
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e68:	3b01      	subs	r3, #1
 8012e6a:	68f9      	ldr	r1, [r7, #12]
 8012e6c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012e6e:	fb01 f303 	mul.w	r3, r1, r3
 8012e72:	441a      	add	r2, r3
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	22ff      	movs	r2, #255	@ 0xff
 8012e7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	22ff      	movs	r2, #255	@ 0xff
 8012e84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d114      	bne.n	8012eb8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	691b      	ldr	r3, [r3, #16]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d01a      	beq.n	8012ecc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	3310      	adds	r3, #16
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f001 fc6a 	bl	8014774 <xTaskRemoveFromEventList>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d012      	beq.n	8012ecc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8012edc <xQueueGenericReset+0xd0>)
 8012ea8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012eac:	601a      	str	r2, [r3, #0]
 8012eae:	f3bf 8f4f 	dsb	sy
 8012eb2:	f3bf 8f6f 	isb	sy
 8012eb6:	e009      	b.n	8012ecc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	3310      	adds	r3, #16
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f7ff fef0 	bl	8012ca2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	3324      	adds	r3, #36	@ 0x24
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f7ff feeb 	bl	8012ca2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012ecc:	f002 f99e 	bl	801520c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012ed0:	2301      	movs	r3, #1
}
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	3710      	adds	r7, #16
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bd80      	pop	{r7, pc}
 8012eda:	bf00      	nop
 8012edc:	e000ed04 	.word	0xe000ed04

08012ee0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b08e      	sub	sp, #56	@ 0x38
 8012ee4:	af02      	add	r7, sp, #8
 8012ee6:	60f8      	str	r0, [r7, #12]
 8012ee8:	60b9      	str	r1, [r7, #8]
 8012eea:	607a      	str	r2, [r7, #4]
 8012eec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d10b      	bne.n	8012f0c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8012ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ef8:	f383 8811 	msr	BASEPRI, r3
 8012efc:	f3bf 8f6f 	isb	sy
 8012f00:	f3bf 8f4f 	dsb	sy
 8012f04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012f06:	bf00      	nop
 8012f08:	bf00      	nop
 8012f0a:	e7fd      	b.n	8012f08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d10b      	bne.n	8012f2a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8012f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f16:	f383 8811 	msr	BASEPRI, r3
 8012f1a:	f3bf 8f6f 	isb	sy
 8012f1e:	f3bf 8f4f 	dsb	sy
 8012f22:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012f24:	bf00      	nop
 8012f26:	bf00      	nop
 8012f28:	e7fd      	b.n	8012f26 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d002      	beq.n	8012f36 <xQueueGenericCreateStatic+0x56>
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d001      	beq.n	8012f3a <xQueueGenericCreateStatic+0x5a>
 8012f36:	2301      	movs	r3, #1
 8012f38:	e000      	b.n	8012f3c <xQueueGenericCreateStatic+0x5c>
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d10b      	bne.n	8012f58 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8012f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f44:	f383 8811 	msr	BASEPRI, r3
 8012f48:	f3bf 8f6f 	isb	sy
 8012f4c:	f3bf 8f4f 	dsb	sy
 8012f50:	623b      	str	r3, [r7, #32]
}
 8012f52:	bf00      	nop
 8012f54:	bf00      	nop
 8012f56:	e7fd      	b.n	8012f54 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d102      	bne.n	8012f64 <xQueueGenericCreateStatic+0x84>
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d101      	bne.n	8012f68 <xQueueGenericCreateStatic+0x88>
 8012f64:	2301      	movs	r3, #1
 8012f66:	e000      	b.n	8012f6a <xQueueGenericCreateStatic+0x8a>
 8012f68:	2300      	movs	r3, #0
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d10b      	bne.n	8012f86 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8012f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f72:	f383 8811 	msr	BASEPRI, r3
 8012f76:	f3bf 8f6f 	isb	sy
 8012f7a:	f3bf 8f4f 	dsb	sy
 8012f7e:	61fb      	str	r3, [r7, #28]
}
 8012f80:	bf00      	nop
 8012f82:	bf00      	nop
 8012f84:	e7fd      	b.n	8012f82 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012f86:	2348      	movs	r3, #72	@ 0x48
 8012f88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012f8a:	697b      	ldr	r3, [r7, #20]
 8012f8c:	2b48      	cmp	r3, #72	@ 0x48
 8012f8e:	d00b      	beq.n	8012fa8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8012f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f94:	f383 8811 	msr	BASEPRI, r3
 8012f98:	f3bf 8f6f 	isb	sy
 8012f9c:	f3bf 8f4f 	dsb	sy
 8012fa0:	61bb      	str	r3, [r7, #24]
}
 8012fa2:	bf00      	nop
 8012fa4:	bf00      	nop
 8012fa6:	e7fd      	b.n	8012fa4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012fa8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012faa:	683b      	ldr	r3, [r7, #0]
 8012fac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8012fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d00d      	beq.n	8012fd0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fb6:	2201      	movs	r2, #1
 8012fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012fbc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8012fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fc2:	9300      	str	r3, [sp, #0]
 8012fc4:	4613      	mov	r3, r2
 8012fc6:	687a      	ldr	r2, [r7, #4]
 8012fc8:	68b9      	ldr	r1, [r7, #8]
 8012fca:	68f8      	ldr	r0, [r7, #12]
 8012fcc:	f000 f840 	bl	8013050 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	3730      	adds	r7, #48	@ 0x30
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}

08012fda <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012fda:	b580      	push	{r7, lr}
 8012fdc:	b08a      	sub	sp, #40	@ 0x28
 8012fde:	af02      	add	r7, sp, #8
 8012fe0:	60f8      	str	r0, [r7, #12]
 8012fe2:	60b9      	str	r1, [r7, #8]
 8012fe4:	4613      	mov	r3, r2
 8012fe6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d10b      	bne.n	8013006 <xQueueGenericCreate+0x2c>
	__asm volatile
 8012fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ff2:	f383 8811 	msr	BASEPRI, r3
 8012ff6:	f3bf 8f6f 	isb	sy
 8012ffa:	f3bf 8f4f 	dsb	sy
 8012ffe:	613b      	str	r3, [r7, #16]
}
 8013000:	bf00      	nop
 8013002:	bf00      	nop
 8013004:	e7fd      	b.n	8013002 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	68ba      	ldr	r2, [r7, #8]
 801300a:	fb02 f303 	mul.w	r3, r2, r3
 801300e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013010:	69fb      	ldr	r3, [r7, #28]
 8013012:	3348      	adds	r3, #72	@ 0x48
 8013014:	4618      	mov	r0, r3
 8013016:	f002 f9e9 	bl	80153ec <pvPortMalloc>
 801301a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801301c:	69bb      	ldr	r3, [r7, #24]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d011      	beq.n	8013046 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013022:	69bb      	ldr	r3, [r7, #24]
 8013024:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013026:	697b      	ldr	r3, [r7, #20]
 8013028:	3348      	adds	r3, #72	@ 0x48
 801302a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801302c:	69bb      	ldr	r3, [r7, #24]
 801302e:	2200      	movs	r2, #0
 8013030:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013034:	79fa      	ldrb	r2, [r7, #7]
 8013036:	69bb      	ldr	r3, [r7, #24]
 8013038:	9300      	str	r3, [sp, #0]
 801303a:	4613      	mov	r3, r2
 801303c:	697a      	ldr	r2, [r7, #20]
 801303e:	68b9      	ldr	r1, [r7, #8]
 8013040:	68f8      	ldr	r0, [r7, #12]
 8013042:	f000 f805 	bl	8013050 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013046:	69bb      	ldr	r3, [r7, #24]
	}
 8013048:	4618      	mov	r0, r3
 801304a:	3720      	adds	r7, #32
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}

08013050 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b084      	sub	sp, #16
 8013054:	af00      	add	r7, sp, #0
 8013056:	60f8      	str	r0, [r7, #12]
 8013058:	60b9      	str	r1, [r7, #8]
 801305a:	607a      	str	r2, [r7, #4]
 801305c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801305e:	68bb      	ldr	r3, [r7, #8]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d103      	bne.n	801306c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013064:	69bb      	ldr	r3, [r7, #24]
 8013066:	69ba      	ldr	r2, [r7, #24]
 8013068:	601a      	str	r2, [r3, #0]
 801306a:	e002      	b.n	8013072 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801306c:	69bb      	ldr	r3, [r7, #24]
 801306e:	687a      	ldr	r2, [r7, #4]
 8013070:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013072:	69bb      	ldr	r3, [r7, #24]
 8013074:	68fa      	ldr	r2, [r7, #12]
 8013076:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013078:	69bb      	ldr	r3, [r7, #24]
 801307a:	68ba      	ldr	r2, [r7, #8]
 801307c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801307e:	2101      	movs	r1, #1
 8013080:	69b8      	ldr	r0, [r7, #24]
 8013082:	f7ff fec3 	bl	8012e0c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013086:	bf00      	nop
 8013088:	3710      	adds	r7, #16
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}

0801308e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801308e:	b580      	push	{r7, lr}
 8013090:	b082      	sub	sp, #8
 8013092:	af00      	add	r7, sp, #0
 8013094:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d00e      	beq.n	80130ba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2200      	movs	r2, #0
 80130a0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	2200      	movs	r2, #0
 80130a6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2200      	movs	r2, #0
 80130ac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80130ae:	2300      	movs	r3, #0
 80130b0:	2200      	movs	r2, #0
 80130b2:	2100      	movs	r1, #0
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	f000 f837 	bl	8013128 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80130ba:	bf00      	nop
 80130bc:	3708      	adds	r7, #8
 80130be:	46bd      	mov	sp, r7
 80130c0:	bd80      	pop	{r7, pc}

080130c2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80130c2:	b580      	push	{r7, lr}
 80130c4:	b086      	sub	sp, #24
 80130c6:	af00      	add	r7, sp, #0
 80130c8:	4603      	mov	r3, r0
 80130ca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80130cc:	2301      	movs	r3, #1
 80130ce:	617b      	str	r3, [r7, #20]
 80130d0:	2300      	movs	r3, #0
 80130d2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80130d4:	79fb      	ldrb	r3, [r7, #7]
 80130d6:	461a      	mov	r2, r3
 80130d8:	6939      	ldr	r1, [r7, #16]
 80130da:	6978      	ldr	r0, [r7, #20]
 80130dc:	f7ff ff7d 	bl	8012fda <xQueueGenericCreate>
 80130e0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80130e2:	68f8      	ldr	r0, [r7, #12]
 80130e4:	f7ff ffd3 	bl	801308e <prvInitialiseMutex>

		return xNewQueue;
 80130e8:	68fb      	ldr	r3, [r7, #12]
	}
 80130ea:	4618      	mov	r0, r3
 80130ec:	3718      	adds	r7, #24
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}

080130f2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80130f2:	b580      	push	{r7, lr}
 80130f4:	b088      	sub	sp, #32
 80130f6:	af02      	add	r7, sp, #8
 80130f8:	4603      	mov	r3, r0
 80130fa:	6039      	str	r1, [r7, #0]
 80130fc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80130fe:	2301      	movs	r3, #1
 8013100:	617b      	str	r3, [r7, #20]
 8013102:	2300      	movs	r3, #0
 8013104:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013106:	79fb      	ldrb	r3, [r7, #7]
 8013108:	9300      	str	r3, [sp, #0]
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	2200      	movs	r2, #0
 801310e:	6939      	ldr	r1, [r7, #16]
 8013110:	6978      	ldr	r0, [r7, #20]
 8013112:	f7ff fee5 	bl	8012ee0 <xQueueGenericCreateStatic>
 8013116:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013118:	68f8      	ldr	r0, [r7, #12]
 801311a:	f7ff ffb8 	bl	801308e <prvInitialiseMutex>

		return xNewQueue;
 801311e:	68fb      	ldr	r3, [r7, #12]
	}
 8013120:	4618      	mov	r0, r3
 8013122:	3718      	adds	r7, #24
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}

08013128 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b08e      	sub	sp, #56	@ 0x38
 801312c:	af00      	add	r7, sp, #0
 801312e:	60f8      	str	r0, [r7, #12]
 8013130:	60b9      	str	r1, [r7, #8]
 8013132:	607a      	str	r2, [r7, #4]
 8013134:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013136:	2300      	movs	r3, #0
 8013138:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801313e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013140:	2b00      	cmp	r3, #0
 8013142:	d10b      	bne.n	801315c <xQueueGenericSend+0x34>
	__asm volatile
 8013144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013148:	f383 8811 	msr	BASEPRI, r3
 801314c:	f3bf 8f6f 	isb	sy
 8013150:	f3bf 8f4f 	dsb	sy
 8013154:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013156:	bf00      	nop
 8013158:	bf00      	nop
 801315a:	e7fd      	b.n	8013158 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d103      	bne.n	801316a <xQueueGenericSend+0x42>
 8013162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013166:	2b00      	cmp	r3, #0
 8013168:	d101      	bne.n	801316e <xQueueGenericSend+0x46>
 801316a:	2301      	movs	r3, #1
 801316c:	e000      	b.n	8013170 <xQueueGenericSend+0x48>
 801316e:	2300      	movs	r3, #0
 8013170:	2b00      	cmp	r3, #0
 8013172:	d10b      	bne.n	801318c <xQueueGenericSend+0x64>
	__asm volatile
 8013174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013178:	f383 8811 	msr	BASEPRI, r3
 801317c:	f3bf 8f6f 	isb	sy
 8013180:	f3bf 8f4f 	dsb	sy
 8013184:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013186:	bf00      	nop
 8013188:	bf00      	nop
 801318a:	e7fd      	b.n	8013188 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	2b02      	cmp	r3, #2
 8013190:	d103      	bne.n	801319a <xQueueGenericSend+0x72>
 8013192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013196:	2b01      	cmp	r3, #1
 8013198:	d101      	bne.n	801319e <xQueueGenericSend+0x76>
 801319a:	2301      	movs	r3, #1
 801319c:	e000      	b.n	80131a0 <xQueueGenericSend+0x78>
 801319e:	2300      	movs	r3, #0
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d10b      	bne.n	80131bc <xQueueGenericSend+0x94>
	__asm volatile
 80131a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131a8:	f383 8811 	msr	BASEPRI, r3
 80131ac:	f3bf 8f6f 	isb	sy
 80131b0:	f3bf 8f4f 	dsb	sy
 80131b4:	623b      	str	r3, [r7, #32]
}
 80131b6:	bf00      	nop
 80131b8:	bf00      	nop
 80131ba:	e7fd      	b.n	80131b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80131bc:	f001 fc9a 	bl	8014af4 <xTaskGetSchedulerState>
 80131c0:	4603      	mov	r3, r0
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d102      	bne.n	80131cc <xQueueGenericSend+0xa4>
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d101      	bne.n	80131d0 <xQueueGenericSend+0xa8>
 80131cc:	2301      	movs	r3, #1
 80131ce:	e000      	b.n	80131d2 <xQueueGenericSend+0xaa>
 80131d0:	2300      	movs	r3, #0
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d10b      	bne.n	80131ee <xQueueGenericSend+0xc6>
	__asm volatile
 80131d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131da:	f383 8811 	msr	BASEPRI, r3
 80131de:	f3bf 8f6f 	isb	sy
 80131e2:	f3bf 8f4f 	dsb	sy
 80131e6:	61fb      	str	r3, [r7, #28]
}
 80131e8:	bf00      	nop
 80131ea:	bf00      	nop
 80131ec:	e7fd      	b.n	80131ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80131ee:	f001 ffdb 	bl	80151a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80131f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80131f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80131fa:	429a      	cmp	r2, r3
 80131fc:	d302      	bcc.n	8013204 <xQueueGenericSend+0xdc>
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	2b02      	cmp	r3, #2
 8013202:	d129      	bne.n	8013258 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013204:	683a      	ldr	r2, [r7, #0]
 8013206:	68b9      	ldr	r1, [r7, #8]
 8013208:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801320a:	f000 fcab 	bl	8013b64 <prvCopyDataToQueue>
 801320e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013214:	2b00      	cmp	r3, #0
 8013216:	d010      	beq.n	801323a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801321a:	3324      	adds	r3, #36	@ 0x24
 801321c:	4618      	mov	r0, r3
 801321e:	f001 faa9 	bl	8014774 <xTaskRemoveFromEventList>
 8013222:	4603      	mov	r3, r0
 8013224:	2b00      	cmp	r3, #0
 8013226:	d013      	beq.n	8013250 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013228:	4b3f      	ldr	r3, [pc, #252]	@ (8013328 <xQueueGenericSend+0x200>)
 801322a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801322e:	601a      	str	r2, [r3, #0]
 8013230:	f3bf 8f4f 	dsb	sy
 8013234:	f3bf 8f6f 	isb	sy
 8013238:	e00a      	b.n	8013250 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801323a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801323c:	2b00      	cmp	r3, #0
 801323e:	d007      	beq.n	8013250 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013240:	4b39      	ldr	r3, [pc, #228]	@ (8013328 <xQueueGenericSend+0x200>)
 8013242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013246:	601a      	str	r2, [r3, #0]
 8013248:	f3bf 8f4f 	dsb	sy
 801324c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013250:	f001 ffdc 	bl	801520c <vPortExitCritical>
				return pdPASS;
 8013254:	2301      	movs	r3, #1
 8013256:	e063      	b.n	8013320 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d103      	bne.n	8013266 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801325e:	f001 ffd5 	bl	801520c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013262:	2300      	movs	r3, #0
 8013264:	e05c      	b.n	8013320 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013268:	2b00      	cmp	r3, #0
 801326a:	d106      	bne.n	801327a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801326c:	f107 0314 	add.w	r3, r7, #20
 8013270:	4618      	mov	r0, r3
 8013272:	f001 fae3 	bl	801483c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013276:	2301      	movs	r3, #1
 8013278:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801327a:	f001 ffc7 	bl	801520c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801327e:	f001 f86f 	bl	8014360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013282:	f001 ff91 	bl	80151a8 <vPortEnterCritical>
 8013286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013288:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801328c:	b25b      	sxtb	r3, r3
 801328e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013292:	d103      	bne.n	801329c <xQueueGenericSend+0x174>
 8013294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013296:	2200      	movs	r2, #0
 8013298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801329c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801329e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80132a2:	b25b      	sxtb	r3, r3
 80132a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132a8:	d103      	bne.n	80132b2 <xQueueGenericSend+0x18a>
 80132aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132ac:	2200      	movs	r2, #0
 80132ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80132b2:	f001 ffab 	bl	801520c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80132b6:	1d3a      	adds	r2, r7, #4
 80132b8:	f107 0314 	add.w	r3, r7, #20
 80132bc:	4611      	mov	r1, r2
 80132be:	4618      	mov	r0, r3
 80132c0:	f001 fad2 	bl	8014868 <xTaskCheckForTimeOut>
 80132c4:	4603      	mov	r3, r0
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d124      	bne.n	8013314 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80132ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80132cc:	f000 fd42 	bl	8013d54 <prvIsQueueFull>
 80132d0:	4603      	mov	r3, r0
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d018      	beq.n	8013308 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80132d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132d8:	3310      	adds	r3, #16
 80132da:	687a      	ldr	r2, [r7, #4]
 80132dc:	4611      	mov	r1, r2
 80132de:	4618      	mov	r0, r3
 80132e0:	f001 fa22 	bl	8014728 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80132e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80132e6:	f000 fccd 	bl	8013c84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80132ea:	f001 f847 	bl	801437c <xTaskResumeAll>
 80132ee:	4603      	mov	r3, r0
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	f47f af7c 	bne.w	80131ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80132f6:	4b0c      	ldr	r3, [pc, #48]	@ (8013328 <xQueueGenericSend+0x200>)
 80132f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80132fc:	601a      	str	r2, [r3, #0]
 80132fe:	f3bf 8f4f 	dsb	sy
 8013302:	f3bf 8f6f 	isb	sy
 8013306:	e772      	b.n	80131ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013308:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801330a:	f000 fcbb 	bl	8013c84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801330e:	f001 f835 	bl	801437c <xTaskResumeAll>
 8013312:	e76c      	b.n	80131ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013314:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013316:	f000 fcb5 	bl	8013c84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801331a:	f001 f82f 	bl	801437c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801331e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013320:	4618      	mov	r0, r3
 8013322:	3738      	adds	r7, #56	@ 0x38
 8013324:	46bd      	mov	sp, r7
 8013326:	bd80      	pop	{r7, pc}
 8013328:	e000ed04 	.word	0xe000ed04

0801332c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b090      	sub	sp, #64	@ 0x40
 8013330:	af00      	add	r7, sp, #0
 8013332:	60f8      	str	r0, [r7, #12]
 8013334:	60b9      	str	r1, [r7, #8]
 8013336:	607a      	str	r2, [r7, #4]
 8013338:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801333e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013340:	2b00      	cmp	r3, #0
 8013342:	d10b      	bne.n	801335c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8013344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013348:	f383 8811 	msr	BASEPRI, r3
 801334c:	f3bf 8f6f 	isb	sy
 8013350:	f3bf 8f4f 	dsb	sy
 8013354:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013356:	bf00      	nop
 8013358:	bf00      	nop
 801335a:	e7fd      	b.n	8013358 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801335c:	68bb      	ldr	r3, [r7, #8]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d103      	bne.n	801336a <xQueueGenericSendFromISR+0x3e>
 8013362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013366:	2b00      	cmp	r3, #0
 8013368:	d101      	bne.n	801336e <xQueueGenericSendFromISR+0x42>
 801336a:	2301      	movs	r3, #1
 801336c:	e000      	b.n	8013370 <xQueueGenericSendFromISR+0x44>
 801336e:	2300      	movs	r3, #0
 8013370:	2b00      	cmp	r3, #0
 8013372:	d10b      	bne.n	801338c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8013374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013378:	f383 8811 	msr	BASEPRI, r3
 801337c:	f3bf 8f6f 	isb	sy
 8013380:	f3bf 8f4f 	dsb	sy
 8013384:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013386:	bf00      	nop
 8013388:	bf00      	nop
 801338a:	e7fd      	b.n	8013388 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801338c:	683b      	ldr	r3, [r7, #0]
 801338e:	2b02      	cmp	r3, #2
 8013390:	d103      	bne.n	801339a <xQueueGenericSendFromISR+0x6e>
 8013392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013396:	2b01      	cmp	r3, #1
 8013398:	d101      	bne.n	801339e <xQueueGenericSendFromISR+0x72>
 801339a:	2301      	movs	r3, #1
 801339c:	e000      	b.n	80133a0 <xQueueGenericSendFromISR+0x74>
 801339e:	2300      	movs	r3, #0
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d10b      	bne.n	80133bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80133a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133a8:	f383 8811 	msr	BASEPRI, r3
 80133ac:	f3bf 8f6f 	isb	sy
 80133b0:	f3bf 8f4f 	dsb	sy
 80133b4:	623b      	str	r3, [r7, #32]
}
 80133b6:	bf00      	nop
 80133b8:	bf00      	nop
 80133ba:	e7fd      	b.n	80133b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80133bc:	f001 ffd4 	bl	8015368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80133c0:	f3ef 8211 	mrs	r2, BASEPRI
 80133c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133c8:	f383 8811 	msr	BASEPRI, r3
 80133cc:	f3bf 8f6f 	isb	sy
 80133d0:	f3bf 8f4f 	dsb	sy
 80133d4:	61fa      	str	r2, [r7, #28]
 80133d6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80133d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80133da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80133dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80133e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80133e4:	429a      	cmp	r2, r3
 80133e6:	d302      	bcc.n	80133ee <xQueueGenericSendFromISR+0xc2>
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	2b02      	cmp	r3, #2
 80133ec:	d12f      	bne.n	801344e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80133ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80133f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80133fe:	683a      	ldr	r2, [r7, #0]
 8013400:	68b9      	ldr	r1, [r7, #8]
 8013402:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013404:	f000 fbae 	bl	8013b64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013408:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 801340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013410:	d112      	bne.n	8013438 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013416:	2b00      	cmp	r3, #0
 8013418:	d016      	beq.n	8013448 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801341a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801341c:	3324      	adds	r3, #36	@ 0x24
 801341e:	4618      	mov	r0, r3
 8013420:	f001 f9a8 	bl	8014774 <xTaskRemoveFromEventList>
 8013424:	4603      	mov	r3, r0
 8013426:	2b00      	cmp	r3, #0
 8013428:	d00e      	beq.n	8013448 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d00b      	beq.n	8013448 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	2201      	movs	r2, #1
 8013434:	601a      	str	r2, [r3, #0]
 8013436:	e007      	b.n	8013448 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013438:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801343c:	3301      	adds	r3, #1
 801343e:	b2db      	uxtb	r3, r3
 8013440:	b25a      	sxtb	r2, r3
 8013442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013448:	2301      	movs	r3, #1
 801344a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 801344c:	e001      	b.n	8013452 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801344e:	2300      	movs	r3, #0
 8013450:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013454:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801345c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801345e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013460:	4618      	mov	r0, r3
 8013462:	3740      	adds	r7, #64	@ 0x40
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}

08013468 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b08e      	sub	sp, #56	@ 0x38
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
 8013470:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013478:	2b00      	cmp	r3, #0
 801347a:	d10b      	bne.n	8013494 <xQueueGiveFromISR+0x2c>
	__asm volatile
 801347c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013480:	f383 8811 	msr	BASEPRI, r3
 8013484:	f3bf 8f6f 	isb	sy
 8013488:	f3bf 8f4f 	dsb	sy
 801348c:	623b      	str	r3, [r7, #32]
}
 801348e:	bf00      	nop
 8013490:	bf00      	nop
 8013492:	e7fd      	b.n	8013490 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013498:	2b00      	cmp	r3, #0
 801349a:	d00b      	beq.n	80134b4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 801349c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134a0:	f383 8811 	msr	BASEPRI, r3
 80134a4:	f3bf 8f6f 	isb	sy
 80134a8:	f3bf 8f4f 	dsb	sy
 80134ac:	61fb      	str	r3, [r7, #28]
}
 80134ae:	bf00      	nop
 80134b0:	bf00      	nop
 80134b2:	e7fd      	b.n	80134b0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80134b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d103      	bne.n	80134c4 <xQueueGiveFromISR+0x5c>
 80134bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134be:	689b      	ldr	r3, [r3, #8]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d101      	bne.n	80134c8 <xQueueGiveFromISR+0x60>
 80134c4:	2301      	movs	r3, #1
 80134c6:	e000      	b.n	80134ca <xQueueGiveFromISR+0x62>
 80134c8:	2300      	movs	r3, #0
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d10b      	bne.n	80134e6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80134ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134d2:	f383 8811 	msr	BASEPRI, r3
 80134d6:	f3bf 8f6f 	isb	sy
 80134da:	f3bf 8f4f 	dsb	sy
 80134de:	61bb      	str	r3, [r7, #24]
}
 80134e0:	bf00      	nop
 80134e2:	bf00      	nop
 80134e4:	e7fd      	b.n	80134e2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80134e6:	f001 ff3f 	bl	8015368 <vPortValidateInterruptPriority>
	__asm volatile
 80134ea:	f3ef 8211 	mrs	r2, BASEPRI
 80134ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134f2:	f383 8811 	msr	BASEPRI, r3
 80134f6:	f3bf 8f6f 	isb	sy
 80134fa:	f3bf 8f4f 	dsb	sy
 80134fe:	617a      	str	r2, [r7, #20]
 8013500:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013502:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013504:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801350a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801350c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801350e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013512:	429a      	cmp	r2, r3
 8013514:	d22b      	bcs.n	801356e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013518:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801351c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013522:	1c5a      	adds	r2, r3, #1
 8013524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013526:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013528:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013530:	d112      	bne.n	8013558 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013536:	2b00      	cmp	r3, #0
 8013538:	d016      	beq.n	8013568 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801353a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801353c:	3324      	adds	r3, #36	@ 0x24
 801353e:	4618      	mov	r0, r3
 8013540:	f001 f918 	bl	8014774 <xTaskRemoveFromEventList>
 8013544:	4603      	mov	r3, r0
 8013546:	2b00      	cmp	r3, #0
 8013548:	d00e      	beq.n	8013568 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801354a:	683b      	ldr	r3, [r7, #0]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d00b      	beq.n	8013568 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	2201      	movs	r2, #1
 8013554:	601a      	str	r2, [r3, #0]
 8013556:	e007      	b.n	8013568 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801355c:	3301      	adds	r3, #1
 801355e:	b2db      	uxtb	r3, r3
 8013560:	b25a      	sxtb	r2, r3
 8013562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013568:	2301      	movs	r3, #1
 801356a:	637b      	str	r3, [r7, #52]	@ 0x34
 801356c:	e001      	b.n	8013572 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801356e:	2300      	movs	r3, #0
 8013570:	637b      	str	r3, [r7, #52]	@ 0x34
 8013572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013574:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	f383 8811 	msr	BASEPRI, r3
}
 801357c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801357e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013580:	4618      	mov	r0, r3
 8013582:	3738      	adds	r7, #56	@ 0x38
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}

08013588 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b08c      	sub	sp, #48	@ 0x30
 801358c:	af00      	add	r7, sp, #0
 801358e:	60f8      	str	r0, [r7, #12]
 8013590:	60b9      	str	r1, [r7, #8]
 8013592:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013594:	2300      	movs	r3, #0
 8013596:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801359c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d10b      	bne.n	80135ba <xQueueReceive+0x32>
	__asm volatile
 80135a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135a6:	f383 8811 	msr	BASEPRI, r3
 80135aa:	f3bf 8f6f 	isb	sy
 80135ae:	f3bf 8f4f 	dsb	sy
 80135b2:	623b      	str	r3, [r7, #32]
}
 80135b4:	bf00      	nop
 80135b6:	bf00      	nop
 80135b8:	e7fd      	b.n	80135b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80135ba:	68bb      	ldr	r3, [r7, #8]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d103      	bne.n	80135c8 <xQueueReceive+0x40>
 80135c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d101      	bne.n	80135cc <xQueueReceive+0x44>
 80135c8:	2301      	movs	r3, #1
 80135ca:	e000      	b.n	80135ce <xQueueReceive+0x46>
 80135cc:	2300      	movs	r3, #0
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d10b      	bne.n	80135ea <xQueueReceive+0x62>
	__asm volatile
 80135d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135d6:	f383 8811 	msr	BASEPRI, r3
 80135da:	f3bf 8f6f 	isb	sy
 80135de:	f3bf 8f4f 	dsb	sy
 80135e2:	61fb      	str	r3, [r7, #28]
}
 80135e4:	bf00      	nop
 80135e6:	bf00      	nop
 80135e8:	e7fd      	b.n	80135e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80135ea:	f001 fa83 	bl	8014af4 <xTaskGetSchedulerState>
 80135ee:	4603      	mov	r3, r0
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d102      	bne.n	80135fa <xQueueReceive+0x72>
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d101      	bne.n	80135fe <xQueueReceive+0x76>
 80135fa:	2301      	movs	r3, #1
 80135fc:	e000      	b.n	8013600 <xQueueReceive+0x78>
 80135fe:	2300      	movs	r3, #0
 8013600:	2b00      	cmp	r3, #0
 8013602:	d10b      	bne.n	801361c <xQueueReceive+0x94>
	__asm volatile
 8013604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013608:	f383 8811 	msr	BASEPRI, r3
 801360c:	f3bf 8f6f 	isb	sy
 8013610:	f3bf 8f4f 	dsb	sy
 8013614:	61bb      	str	r3, [r7, #24]
}
 8013616:	bf00      	nop
 8013618:	bf00      	nop
 801361a:	e7fd      	b.n	8013618 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801361c:	f001 fdc4 	bl	80151a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013624:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013628:	2b00      	cmp	r3, #0
 801362a:	d01f      	beq.n	801366c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801362c:	68b9      	ldr	r1, [r7, #8]
 801362e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013630:	f000 fb02 	bl	8013c38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013636:	1e5a      	subs	r2, r3, #1
 8013638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801363a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801363c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801363e:	691b      	ldr	r3, [r3, #16]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d00f      	beq.n	8013664 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013646:	3310      	adds	r3, #16
 8013648:	4618      	mov	r0, r3
 801364a:	f001 f893 	bl	8014774 <xTaskRemoveFromEventList>
 801364e:	4603      	mov	r3, r0
 8013650:	2b00      	cmp	r3, #0
 8013652:	d007      	beq.n	8013664 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013654:	4b3c      	ldr	r3, [pc, #240]	@ (8013748 <xQueueReceive+0x1c0>)
 8013656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801365a:	601a      	str	r2, [r3, #0]
 801365c:	f3bf 8f4f 	dsb	sy
 8013660:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013664:	f001 fdd2 	bl	801520c <vPortExitCritical>
				return pdPASS;
 8013668:	2301      	movs	r3, #1
 801366a:	e069      	b.n	8013740 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d103      	bne.n	801367a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013672:	f001 fdcb 	bl	801520c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013676:	2300      	movs	r3, #0
 8013678:	e062      	b.n	8013740 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801367a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801367c:	2b00      	cmp	r3, #0
 801367e:	d106      	bne.n	801368e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013680:	f107 0310 	add.w	r3, r7, #16
 8013684:	4618      	mov	r0, r3
 8013686:	f001 f8d9 	bl	801483c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801368a:	2301      	movs	r3, #1
 801368c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801368e:	f001 fdbd 	bl	801520c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013692:	f000 fe65 	bl	8014360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013696:	f001 fd87 	bl	80151a8 <vPortEnterCritical>
 801369a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801369c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80136a0:	b25b      	sxtb	r3, r3
 80136a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136a6:	d103      	bne.n	80136b0 <xQueueReceive+0x128>
 80136a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136aa:	2200      	movs	r2, #0
 80136ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80136b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80136b6:	b25b      	sxtb	r3, r3
 80136b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136bc:	d103      	bne.n	80136c6 <xQueueReceive+0x13e>
 80136be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136c0:	2200      	movs	r2, #0
 80136c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80136c6:	f001 fda1 	bl	801520c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80136ca:	1d3a      	adds	r2, r7, #4
 80136cc:	f107 0310 	add.w	r3, r7, #16
 80136d0:	4611      	mov	r1, r2
 80136d2:	4618      	mov	r0, r3
 80136d4:	f001 f8c8 	bl	8014868 <xTaskCheckForTimeOut>
 80136d8:	4603      	mov	r3, r0
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d123      	bne.n	8013726 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80136de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80136e0:	f000 fb22 	bl	8013d28 <prvIsQueueEmpty>
 80136e4:	4603      	mov	r3, r0
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d017      	beq.n	801371a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80136ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136ec:	3324      	adds	r3, #36	@ 0x24
 80136ee:	687a      	ldr	r2, [r7, #4]
 80136f0:	4611      	mov	r1, r2
 80136f2:	4618      	mov	r0, r3
 80136f4:	f001 f818 	bl	8014728 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80136f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80136fa:	f000 fac3 	bl	8013c84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80136fe:	f000 fe3d 	bl	801437c <xTaskResumeAll>
 8013702:	4603      	mov	r3, r0
 8013704:	2b00      	cmp	r3, #0
 8013706:	d189      	bne.n	801361c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8013708:	4b0f      	ldr	r3, [pc, #60]	@ (8013748 <xQueueReceive+0x1c0>)
 801370a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801370e:	601a      	str	r2, [r3, #0]
 8013710:	f3bf 8f4f 	dsb	sy
 8013714:	f3bf 8f6f 	isb	sy
 8013718:	e780      	b.n	801361c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801371a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801371c:	f000 fab2 	bl	8013c84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013720:	f000 fe2c 	bl	801437c <xTaskResumeAll>
 8013724:	e77a      	b.n	801361c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013728:	f000 faac 	bl	8013c84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801372c:	f000 fe26 	bl	801437c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013730:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013732:	f000 faf9 	bl	8013d28 <prvIsQueueEmpty>
 8013736:	4603      	mov	r3, r0
 8013738:	2b00      	cmp	r3, #0
 801373a:	f43f af6f 	beq.w	801361c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801373e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013740:	4618      	mov	r0, r3
 8013742:	3730      	adds	r7, #48	@ 0x30
 8013744:	46bd      	mov	sp, r7
 8013746:	bd80      	pop	{r7, pc}
 8013748:	e000ed04 	.word	0xe000ed04

0801374c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801374c:	b580      	push	{r7, lr}
 801374e:	b08e      	sub	sp, #56	@ 0x38
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013756:	2300      	movs	r3, #0
 8013758:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801375e:	2300      	movs	r3, #0
 8013760:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013764:	2b00      	cmp	r3, #0
 8013766:	d10b      	bne.n	8013780 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8013768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801376c:	f383 8811 	msr	BASEPRI, r3
 8013770:	f3bf 8f6f 	isb	sy
 8013774:	f3bf 8f4f 	dsb	sy
 8013778:	623b      	str	r3, [r7, #32]
}
 801377a:	bf00      	nop
 801377c:	bf00      	nop
 801377e:	e7fd      	b.n	801377c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013784:	2b00      	cmp	r3, #0
 8013786:	d00b      	beq.n	80137a0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8013788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801378c:	f383 8811 	msr	BASEPRI, r3
 8013790:	f3bf 8f6f 	isb	sy
 8013794:	f3bf 8f4f 	dsb	sy
 8013798:	61fb      	str	r3, [r7, #28]
}
 801379a:	bf00      	nop
 801379c:	bf00      	nop
 801379e:	e7fd      	b.n	801379c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80137a0:	f001 f9a8 	bl	8014af4 <xTaskGetSchedulerState>
 80137a4:	4603      	mov	r3, r0
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d102      	bne.n	80137b0 <xQueueSemaphoreTake+0x64>
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d101      	bne.n	80137b4 <xQueueSemaphoreTake+0x68>
 80137b0:	2301      	movs	r3, #1
 80137b2:	e000      	b.n	80137b6 <xQueueSemaphoreTake+0x6a>
 80137b4:	2300      	movs	r3, #0
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d10b      	bne.n	80137d2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80137ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137be:	f383 8811 	msr	BASEPRI, r3
 80137c2:	f3bf 8f6f 	isb	sy
 80137c6:	f3bf 8f4f 	dsb	sy
 80137ca:	61bb      	str	r3, [r7, #24]
}
 80137cc:	bf00      	nop
 80137ce:	bf00      	nop
 80137d0:	e7fd      	b.n	80137ce <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80137d2:	f001 fce9 	bl	80151a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80137d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80137da:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80137dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d024      	beq.n	801382c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80137e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137e4:	1e5a      	subs	r2, r3, #1
 80137e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137e8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80137ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d104      	bne.n	80137fc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80137f2:	f001 fb2b 	bl	8014e4c <pvTaskIncrementMutexHeldCount>
 80137f6:	4602      	mov	r2, r0
 80137f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137fa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80137fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137fe:	691b      	ldr	r3, [r3, #16]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d00f      	beq.n	8013824 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013806:	3310      	adds	r3, #16
 8013808:	4618      	mov	r0, r3
 801380a:	f000 ffb3 	bl	8014774 <xTaskRemoveFromEventList>
 801380e:	4603      	mov	r3, r0
 8013810:	2b00      	cmp	r3, #0
 8013812:	d007      	beq.n	8013824 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013814:	4b54      	ldr	r3, [pc, #336]	@ (8013968 <xQueueSemaphoreTake+0x21c>)
 8013816:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801381a:	601a      	str	r2, [r3, #0]
 801381c:	f3bf 8f4f 	dsb	sy
 8013820:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013824:	f001 fcf2 	bl	801520c <vPortExitCritical>
				return pdPASS;
 8013828:	2301      	movs	r3, #1
 801382a:	e098      	b.n	801395e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d112      	bne.n	8013858 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013834:	2b00      	cmp	r3, #0
 8013836:	d00b      	beq.n	8013850 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8013838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801383c:	f383 8811 	msr	BASEPRI, r3
 8013840:	f3bf 8f6f 	isb	sy
 8013844:	f3bf 8f4f 	dsb	sy
 8013848:	617b      	str	r3, [r7, #20]
}
 801384a:	bf00      	nop
 801384c:	bf00      	nop
 801384e:	e7fd      	b.n	801384c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013850:	f001 fcdc 	bl	801520c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013854:	2300      	movs	r3, #0
 8013856:	e082      	b.n	801395e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801385a:	2b00      	cmp	r3, #0
 801385c:	d106      	bne.n	801386c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801385e:	f107 030c 	add.w	r3, r7, #12
 8013862:	4618      	mov	r0, r3
 8013864:	f000 ffea 	bl	801483c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013868:	2301      	movs	r3, #1
 801386a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801386c:	f001 fcce 	bl	801520c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013870:	f000 fd76 	bl	8014360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013874:	f001 fc98 	bl	80151a8 <vPortEnterCritical>
 8013878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801387a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801387e:	b25b      	sxtb	r3, r3
 8013880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013884:	d103      	bne.n	801388e <xQueueSemaphoreTake+0x142>
 8013886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013888:	2200      	movs	r2, #0
 801388a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801388e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013890:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013894:	b25b      	sxtb	r3, r3
 8013896:	f1b3 3fff 	cmp.w	r3, #4294967295
 801389a:	d103      	bne.n	80138a4 <xQueueSemaphoreTake+0x158>
 801389c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801389e:	2200      	movs	r2, #0
 80138a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80138a4:	f001 fcb2 	bl	801520c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80138a8:	463a      	mov	r2, r7
 80138aa:	f107 030c 	add.w	r3, r7, #12
 80138ae:	4611      	mov	r1, r2
 80138b0:	4618      	mov	r0, r3
 80138b2:	f000 ffd9 	bl	8014868 <xTaskCheckForTimeOut>
 80138b6:	4603      	mov	r3, r0
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d132      	bne.n	8013922 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80138bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80138be:	f000 fa33 	bl	8013d28 <prvIsQueueEmpty>
 80138c2:	4603      	mov	r3, r0
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d026      	beq.n	8013916 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80138c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d109      	bne.n	80138e4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80138d0:	f001 fc6a 	bl	80151a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80138d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138d6:	689b      	ldr	r3, [r3, #8]
 80138d8:	4618      	mov	r0, r3
 80138da:	f001 f929 	bl	8014b30 <xTaskPriorityInherit>
 80138de:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80138e0:	f001 fc94 	bl	801520c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80138e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138e6:	3324      	adds	r3, #36	@ 0x24
 80138e8:	683a      	ldr	r2, [r7, #0]
 80138ea:	4611      	mov	r1, r2
 80138ec:	4618      	mov	r0, r3
 80138ee:	f000 ff1b 	bl	8014728 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80138f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80138f4:	f000 f9c6 	bl	8013c84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80138f8:	f000 fd40 	bl	801437c <xTaskResumeAll>
 80138fc:	4603      	mov	r3, r0
 80138fe:	2b00      	cmp	r3, #0
 8013900:	f47f af67 	bne.w	80137d2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8013904:	4b18      	ldr	r3, [pc, #96]	@ (8013968 <xQueueSemaphoreTake+0x21c>)
 8013906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801390a:	601a      	str	r2, [r3, #0]
 801390c:	f3bf 8f4f 	dsb	sy
 8013910:	f3bf 8f6f 	isb	sy
 8013914:	e75d      	b.n	80137d2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013916:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013918:	f000 f9b4 	bl	8013c84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801391c:	f000 fd2e 	bl	801437c <xTaskResumeAll>
 8013920:	e757      	b.n	80137d2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013922:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013924:	f000 f9ae 	bl	8013c84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013928:	f000 fd28 	bl	801437c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801392c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801392e:	f000 f9fb 	bl	8013d28 <prvIsQueueEmpty>
 8013932:	4603      	mov	r3, r0
 8013934:	2b00      	cmp	r3, #0
 8013936:	f43f af4c 	beq.w	80137d2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801393a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801393c:	2b00      	cmp	r3, #0
 801393e:	d00d      	beq.n	801395c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8013940:	f001 fc32 	bl	80151a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013944:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013946:	f000 f8f5 	bl	8013b34 <prvGetDisinheritPriorityAfterTimeout>
 801394a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801394c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801394e:	689b      	ldr	r3, [r3, #8]
 8013950:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013952:	4618      	mov	r0, r3
 8013954:	f001 f9ea 	bl	8014d2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013958:	f001 fc58 	bl	801520c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801395c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801395e:	4618      	mov	r0, r3
 8013960:	3738      	adds	r7, #56	@ 0x38
 8013962:	46bd      	mov	sp, r7
 8013964:	bd80      	pop	{r7, pc}
 8013966:	bf00      	nop
 8013968:	e000ed04 	.word	0xe000ed04

0801396c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b08e      	sub	sp, #56	@ 0x38
 8013970:	af00      	add	r7, sp, #0
 8013972:	60f8      	str	r0, [r7, #12]
 8013974:	60b9      	str	r1, [r7, #8]
 8013976:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801397c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801397e:	2b00      	cmp	r3, #0
 8013980:	d10b      	bne.n	801399a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8013982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013986:	f383 8811 	msr	BASEPRI, r3
 801398a:	f3bf 8f6f 	isb	sy
 801398e:	f3bf 8f4f 	dsb	sy
 8013992:	623b      	str	r3, [r7, #32]
}
 8013994:	bf00      	nop
 8013996:	bf00      	nop
 8013998:	e7fd      	b.n	8013996 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801399a:	68bb      	ldr	r3, [r7, #8]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d103      	bne.n	80139a8 <xQueueReceiveFromISR+0x3c>
 80139a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d101      	bne.n	80139ac <xQueueReceiveFromISR+0x40>
 80139a8:	2301      	movs	r3, #1
 80139aa:	e000      	b.n	80139ae <xQueueReceiveFromISR+0x42>
 80139ac:	2300      	movs	r3, #0
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d10b      	bne.n	80139ca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80139b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139b6:	f383 8811 	msr	BASEPRI, r3
 80139ba:	f3bf 8f6f 	isb	sy
 80139be:	f3bf 8f4f 	dsb	sy
 80139c2:	61fb      	str	r3, [r7, #28]
}
 80139c4:	bf00      	nop
 80139c6:	bf00      	nop
 80139c8:	e7fd      	b.n	80139c6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80139ca:	f001 fccd 	bl	8015368 <vPortValidateInterruptPriority>
	__asm volatile
 80139ce:	f3ef 8211 	mrs	r2, BASEPRI
 80139d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139d6:	f383 8811 	msr	BASEPRI, r3
 80139da:	f3bf 8f6f 	isb	sy
 80139de:	f3bf 8f4f 	dsb	sy
 80139e2:	61ba      	str	r2, [r7, #24]
 80139e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80139e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80139e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80139ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139ee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80139f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d02f      	beq.n	8013a56 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80139f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80139fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013a00:	68b9      	ldr	r1, [r7, #8]
 8013a02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a04:	f000 f918 	bl	8013c38 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a0a:	1e5a      	subs	r2, r3, #1
 8013a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a0e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013a10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a18:	d112      	bne.n	8013a40 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a1c:	691b      	ldr	r3, [r3, #16]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d016      	beq.n	8013a50 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a24:	3310      	adds	r3, #16
 8013a26:	4618      	mov	r0, r3
 8013a28:	f000 fea4 	bl	8014774 <xTaskRemoveFromEventList>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d00e      	beq.n	8013a50 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d00b      	beq.n	8013a50 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	2201      	movs	r2, #1
 8013a3c:	601a      	str	r2, [r3, #0]
 8013a3e:	e007      	b.n	8013a50 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013a40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013a44:	3301      	adds	r3, #1
 8013a46:	b2db      	uxtb	r3, r3
 8013a48:	b25a      	sxtb	r2, r3
 8013a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013a50:	2301      	movs	r3, #1
 8013a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8013a54:	e001      	b.n	8013a5a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8013a56:	2300      	movs	r3, #0
 8013a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8013a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	f383 8811 	msr	BASEPRI, r3
}
 8013a64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013a68:	4618      	mov	r0, r3
 8013a6a:	3738      	adds	r7, #56	@ 0x38
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd80      	pop	{r7, pc}

08013a70 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b084      	sub	sp, #16
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d10b      	bne.n	8013a96 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8013a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a82:	f383 8811 	msr	BASEPRI, r3
 8013a86:	f3bf 8f6f 	isb	sy
 8013a8a:	f3bf 8f4f 	dsb	sy
 8013a8e:	60bb      	str	r3, [r7, #8]
}
 8013a90:	bf00      	nop
 8013a92:	bf00      	nop
 8013a94:	e7fd      	b.n	8013a92 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8013a96:	f001 fb87 	bl	80151a8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a9e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8013aa0:	f001 fbb4 	bl	801520c <vPortExitCritical>

	return uxReturn;
 8013aa4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	3710      	adds	r7, #16
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	bd80      	pop	{r7, pc}

08013aae <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8013aae:	b480      	push	{r7}
 8013ab0:	b087      	sub	sp, #28
 8013ab2:	af00      	add	r7, sp, #0
 8013ab4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d10b      	bne.n	8013ad8 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8013ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ac4:	f383 8811 	msr	BASEPRI, r3
 8013ac8:	f3bf 8f6f 	isb	sy
 8013acc:	f3bf 8f4f 	dsb	sy
 8013ad0:	60fb      	str	r3, [r7, #12]
}
 8013ad2:	bf00      	nop
 8013ad4:	bf00      	nop
 8013ad6:	e7fd      	b.n	8013ad4 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013adc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8013ade:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	371c      	adds	r7, #28
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aea:	4770      	bx	lr

08013aec <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b084      	sub	sp, #16
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d10b      	bne.n	8013b16 <vQueueDelete+0x2a>
	__asm volatile
 8013afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b02:	f383 8811 	msr	BASEPRI, r3
 8013b06:	f3bf 8f6f 	isb	sy
 8013b0a:	f3bf 8f4f 	dsb	sy
 8013b0e:	60bb      	str	r3, [r7, #8]
}
 8013b10:	bf00      	nop
 8013b12:	bf00      	nop
 8013b14:	e7fd      	b.n	8013b12 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013b16:	68f8      	ldr	r0, [r7, #12]
 8013b18:	f000 f934 	bl	8013d84 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d102      	bne.n	8013b2c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8013b26:	68f8      	ldr	r0, [r7, #12]
 8013b28:	f001 fd2e 	bl	8015588 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013b2c:	bf00      	nop
 8013b2e:	3710      	adds	r7, #16
 8013b30:	46bd      	mov	sp, r7
 8013b32:	bd80      	pop	{r7, pc}

08013b34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013b34:	b480      	push	{r7}
 8013b36:	b085      	sub	sp, #20
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d006      	beq.n	8013b52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	f1c3 0307 	rsb	r3, r3, #7
 8013b4e:	60fb      	str	r3, [r7, #12]
 8013b50:	e001      	b.n	8013b56 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013b52:	2300      	movs	r3, #0
 8013b54:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013b56:	68fb      	ldr	r3, [r7, #12]
	}
 8013b58:	4618      	mov	r0, r3
 8013b5a:	3714      	adds	r7, #20
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b62:	4770      	bx	lr

08013b64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b086      	sub	sp, #24
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	60f8      	str	r0, [r7, #12]
 8013b6c:	60b9      	str	r1, [r7, #8]
 8013b6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013b70:	2300      	movs	r3, #0
 8013b72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d10d      	bne.n	8013b9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d14d      	bne.n	8013c26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	689b      	ldr	r3, [r3, #8]
 8013b8e:	4618      	mov	r0, r3
 8013b90:	f001 f844 	bl	8014c1c <xTaskPriorityDisinherit>
 8013b94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	2200      	movs	r2, #0
 8013b9a:	609a      	str	r2, [r3, #8]
 8013b9c:	e043      	b.n	8013c26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d119      	bne.n	8013bd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	6858      	ldr	r0, [r3, #4]
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bac:	461a      	mov	r2, r3
 8013bae:	68b9      	ldr	r1, [r7, #8]
 8013bb0:	f011 fe25 	bl	80257fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	685a      	ldr	r2, [r3, #4]
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bbc:	441a      	add	r2, r3
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	685a      	ldr	r2, [r3, #4]
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	689b      	ldr	r3, [r3, #8]
 8013bca:	429a      	cmp	r2, r3
 8013bcc:	d32b      	bcc.n	8013c26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	681a      	ldr	r2, [r3, #0]
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	605a      	str	r2, [r3, #4]
 8013bd6:	e026      	b.n	8013c26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	68d8      	ldr	r0, [r3, #12]
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013be0:	461a      	mov	r2, r3
 8013be2:	68b9      	ldr	r1, [r7, #8]
 8013be4:	f011 fe0b 	bl	80257fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	68da      	ldr	r2, [r3, #12]
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bf0:	425b      	negs	r3, r3
 8013bf2:	441a      	add	r2, r3
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	68da      	ldr	r2, [r3, #12]
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	429a      	cmp	r2, r3
 8013c02:	d207      	bcs.n	8013c14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	689a      	ldr	r2, [r3, #8]
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c0c:	425b      	negs	r3, r3
 8013c0e:	441a      	add	r2, r3
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2b02      	cmp	r3, #2
 8013c18:	d105      	bne.n	8013c26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013c1a:	693b      	ldr	r3, [r7, #16]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d002      	beq.n	8013c26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013c20:	693b      	ldr	r3, [r7, #16]
 8013c22:	3b01      	subs	r3, #1
 8013c24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013c26:	693b      	ldr	r3, [r7, #16]
 8013c28:	1c5a      	adds	r2, r3, #1
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013c2e:	697b      	ldr	r3, [r7, #20]
}
 8013c30:	4618      	mov	r0, r3
 8013c32:	3718      	adds	r7, #24
 8013c34:	46bd      	mov	sp, r7
 8013c36:	bd80      	pop	{r7, pc}

08013c38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b082      	sub	sp, #8
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
 8013c40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d018      	beq.n	8013c7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	68da      	ldr	r2, [r3, #12]
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c52:	441a      	add	r2, r3
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	68da      	ldr	r2, [r3, #12]
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	689b      	ldr	r3, [r3, #8]
 8013c60:	429a      	cmp	r2, r3
 8013c62:	d303      	bcc.n	8013c6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	681a      	ldr	r2, [r3, #0]
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	68d9      	ldr	r1, [r3, #12]
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c74:	461a      	mov	r2, r3
 8013c76:	6838      	ldr	r0, [r7, #0]
 8013c78:	f011 fdc1 	bl	80257fe <memcpy>
	}
}
 8013c7c:	bf00      	nop
 8013c7e:	3708      	adds	r7, #8
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}

08013c84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b084      	sub	sp, #16
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013c8c:	f001 fa8c 	bl	80151a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013c96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013c98:	e011      	b.n	8013cbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d012      	beq.n	8013cc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	3324      	adds	r3, #36	@ 0x24
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f000 fd64 	bl	8014774 <xTaskRemoveFromEventList>
 8013cac:	4603      	mov	r3, r0
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d001      	beq.n	8013cb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013cb2:	f000 fe3d 	bl	8014930 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013cb6:	7bfb      	ldrb	r3, [r7, #15]
 8013cb8:	3b01      	subs	r3, #1
 8013cba:	b2db      	uxtb	r3, r3
 8013cbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	dce9      	bgt.n	8013c9a <prvUnlockQueue+0x16>
 8013cc6:	e000      	b.n	8013cca <prvUnlockQueue+0x46>
					break;
 8013cc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	22ff      	movs	r2, #255	@ 0xff
 8013cce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013cd2:	f001 fa9b 	bl	801520c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013cd6:	f001 fa67 	bl	80151a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013ce0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013ce2:	e011      	b.n	8013d08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	691b      	ldr	r3, [r3, #16]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d012      	beq.n	8013d12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	3310      	adds	r3, #16
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f000 fd3f 	bl	8014774 <xTaskRemoveFromEventList>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d001      	beq.n	8013d00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013cfc:	f000 fe18 	bl	8014930 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013d00:	7bbb      	ldrb	r3, [r7, #14]
 8013d02:	3b01      	subs	r3, #1
 8013d04:	b2db      	uxtb	r3, r3
 8013d06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013d08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	dce9      	bgt.n	8013ce4 <prvUnlockQueue+0x60>
 8013d10:	e000      	b.n	8013d14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013d12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	22ff      	movs	r2, #255	@ 0xff
 8013d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013d1c:	f001 fa76 	bl	801520c <vPortExitCritical>
}
 8013d20:	bf00      	nop
 8013d22:	3710      	adds	r7, #16
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b084      	sub	sp, #16
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013d30:	f001 fa3a 	bl	80151a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d102      	bne.n	8013d42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	60fb      	str	r3, [r7, #12]
 8013d40:	e001      	b.n	8013d46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013d42:	2300      	movs	r3, #0
 8013d44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013d46:	f001 fa61 	bl	801520c <vPortExitCritical>

	return xReturn;
 8013d4a:	68fb      	ldr	r3, [r7, #12]
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3710      	adds	r7, #16
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd80      	pop	{r7, pc}

08013d54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b084      	sub	sp, #16
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013d5c:	f001 fa24 	bl	80151a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	d102      	bne.n	8013d72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	60fb      	str	r3, [r7, #12]
 8013d70:	e001      	b.n	8013d76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013d72:	2300      	movs	r3, #0
 8013d74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013d76:	f001 fa49 	bl	801520c <vPortExitCritical>

	return xReturn;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3710      	adds	r7, #16
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}

08013d84 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013d84:	b480      	push	{r7}
 8013d86:	b085      	sub	sp, #20
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	60fb      	str	r3, [r7, #12]
 8013d90:	e016      	b.n	8013dc0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013d92:	4a10      	ldr	r2, [pc, #64]	@ (8013dd4 <vQueueUnregisterQueue+0x50>)
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	00db      	lsls	r3, r3, #3
 8013d98:	4413      	add	r3, r2
 8013d9a:	685b      	ldr	r3, [r3, #4]
 8013d9c:	687a      	ldr	r2, [r7, #4]
 8013d9e:	429a      	cmp	r2, r3
 8013da0:	d10b      	bne.n	8013dba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013da2:	4a0c      	ldr	r2, [pc, #48]	@ (8013dd4 <vQueueUnregisterQueue+0x50>)
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	2100      	movs	r1, #0
 8013da8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013dac:	4a09      	ldr	r2, [pc, #36]	@ (8013dd4 <vQueueUnregisterQueue+0x50>)
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	00db      	lsls	r3, r3, #3
 8013db2:	4413      	add	r3, r2
 8013db4:	2200      	movs	r2, #0
 8013db6:	605a      	str	r2, [r3, #4]
				break;
 8013db8:	e006      	b.n	8013dc8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	3301      	adds	r3, #1
 8013dbe:	60fb      	str	r3, [r7, #12]
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	2b07      	cmp	r3, #7
 8013dc4:	d9e5      	bls.n	8013d92 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013dc6:	bf00      	nop
 8013dc8:	bf00      	nop
 8013dca:	3714      	adds	r7, #20
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd2:	4770      	bx	lr
 8013dd4:	2400137c 	.word	0x2400137c

08013dd8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b08e      	sub	sp, #56	@ 0x38
 8013ddc:	af04      	add	r7, sp, #16
 8013dde:	60f8      	str	r0, [r7, #12]
 8013de0:	60b9      	str	r1, [r7, #8]
 8013de2:	607a      	str	r2, [r7, #4]
 8013de4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d10b      	bne.n	8013e04 <xTaskCreateStatic+0x2c>
	__asm volatile
 8013dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013df0:	f383 8811 	msr	BASEPRI, r3
 8013df4:	f3bf 8f6f 	isb	sy
 8013df8:	f3bf 8f4f 	dsb	sy
 8013dfc:	623b      	str	r3, [r7, #32]
}
 8013dfe:	bf00      	nop
 8013e00:	bf00      	nop
 8013e02:	e7fd      	b.n	8013e00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d10b      	bne.n	8013e22 <xTaskCreateStatic+0x4a>
	__asm volatile
 8013e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e0e:	f383 8811 	msr	BASEPRI, r3
 8013e12:	f3bf 8f6f 	isb	sy
 8013e16:	f3bf 8f4f 	dsb	sy
 8013e1a:	61fb      	str	r3, [r7, #28]
}
 8013e1c:	bf00      	nop
 8013e1e:	bf00      	nop
 8013e20:	e7fd      	b.n	8013e1e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013e22:	2354      	movs	r3, #84	@ 0x54
 8013e24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013e26:	693b      	ldr	r3, [r7, #16]
 8013e28:	2b54      	cmp	r3, #84	@ 0x54
 8013e2a:	d00b      	beq.n	8013e44 <xTaskCreateStatic+0x6c>
	__asm volatile
 8013e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e30:	f383 8811 	msr	BASEPRI, r3
 8013e34:	f3bf 8f6f 	isb	sy
 8013e38:	f3bf 8f4f 	dsb	sy
 8013e3c:	61bb      	str	r3, [r7, #24]
}
 8013e3e:	bf00      	nop
 8013e40:	bf00      	nop
 8013e42:	e7fd      	b.n	8013e40 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013e44:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d01e      	beq.n	8013e8a <xTaskCreateStatic+0xb2>
 8013e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d01b      	beq.n	8013e8a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e54:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013e5a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e5e:	2202      	movs	r2, #2
 8013e60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013e64:	2300      	movs	r3, #0
 8013e66:	9303      	str	r3, [sp, #12]
 8013e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e6a:	9302      	str	r3, [sp, #8]
 8013e6c:	f107 0314 	add.w	r3, r7, #20
 8013e70:	9301      	str	r3, [sp, #4]
 8013e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e74:	9300      	str	r3, [sp, #0]
 8013e76:	683b      	ldr	r3, [r7, #0]
 8013e78:	687a      	ldr	r2, [r7, #4]
 8013e7a:	68b9      	ldr	r1, [r7, #8]
 8013e7c:	68f8      	ldr	r0, [r7, #12]
 8013e7e:	f000 f850 	bl	8013f22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013e82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013e84:	f000 f8d6 	bl	8014034 <prvAddNewTaskToReadyList>
 8013e88:	e001      	b.n	8013e8e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013e8e:	697b      	ldr	r3, [r7, #20]
	}
 8013e90:	4618      	mov	r0, r3
 8013e92:	3728      	adds	r7, #40	@ 0x28
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}

08013e98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b08c      	sub	sp, #48	@ 0x30
 8013e9c:	af04      	add	r7, sp, #16
 8013e9e:	60f8      	str	r0, [r7, #12]
 8013ea0:	60b9      	str	r1, [r7, #8]
 8013ea2:	603b      	str	r3, [r7, #0]
 8013ea4:	4613      	mov	r3, r2
 8013ea6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013ea8:	88fb      	ldrh	r3, [r7, #6]
 8013eaa:	009b      	lsls	r3, r3, #2
 8013eac:	4618      	mov	r0, r3
 8013eae:	f001 fa9d 	bl	80153ec <pvPortMalloc>
 8013eb2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013eb4:	697b      	ldr	r3, [r7, #20]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d00e      	beq.n	8013ed8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013eba:	2054      	movs	r0, #84	@ 0x54
 8013ebc:	f001 fa96 	bl	80153ec <pvPortMalloc>
 8013ec0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013ec2:	69fb      	ldr	r3, [r7, #28]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d003      	beq.n	8013ed0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013ec8:	69fb      	ldr	r3, [r7, #28]
 8013eca:	697a      	ldr	r2, [r7, #20]
 8013ecc:	631a      	str	r2, [r3, #48]	@ 0x30
 8013ece:	e005      	b.n	8013edc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013ed0:	6978      	ldr	r0, [r7, #20]
 8013ed2:	f001 fb59 	bl	8015588 <vPortFree>
 8013ed6:	e001      	b.n	8013edc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013ed8:	2300      	movs	r3, #0
 8013eda:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013edc:	69fb      	ldr	r3, [r7, #28]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d017      	beq.n	8013f12 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013ee2:	69fb      	ldr	r3, [r7, #28]
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013eea:	88fa      	ldrh	r2, [r7, #6]
 8013eec:	2300      	movs	r3, #0
 8013eee:	9303      	str	r3, [sp, #12]
 8013ef0:	69fb      	ldr	r3, [r7, #28]
 8013ef2:	9302      	str	r3, [sp, #8]
 8013ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ef6:	9301      	str	r3, [sp, #4]
 8013ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013efa:	9300      	str	r3, [sp, #0]
 8013efc:	683b      	ldr	r3, [r7, #0]
 8013efe:	68b9      	ldr	r1, [r7, #8]
 8013f00:	68f8      	ldr	r0, [r7, #12]
 8013f02:	f000 f80e 	bl	8013f22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013f06:	69f8      	ldr	r0, [r7, #28]
 8013f08:	f000 f894 	bl	8014034 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	61bb      	str	r3, [r7, #24]
 8013f10:	e002      	b.n	8013f18 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013f12:	f04f 33ff 	mov.w	r3, #4294967295
 8013f16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013f18:	69bb      	ldr	r3, [r7, #24]
	}
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	3720      	adds	r7, #32
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd80      	pop	{r7, pc}

08013f22 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013f22:	b580      	push	{r7, lr}
 8013f24:	b088      	sub	sp, #32
 8013f26:	af00      	add	r7, sp, #0
 8013f28:	60f8      	str	r0, [r7, #12]
 8013f2a:	60b9      	str	r1, [r7, #8]
 8013f2c:	607a      	str	r2, [r7, #4]
 8013f2e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013f34:	6879      	ldr	r1, [r7, #4]
 8013f36:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013f3a:	440b      	add	r3, r1
 8013f3c:	009b      	lsls	r3, r3, #2
 8013f3e:	4413      	add	r3, r2
 8013f40:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013f42:	69bb      	ldr	r3, [r7, #24]
 8013f44:	f023 0307 	bic.w	r3, r3, #7
 8013f48:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013f4a:	69bb      	ldr	r3, [r7, #24]
 8013f4c:	f003 0307 	and.w	r3, r3, #7
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d00b      	beq.n	8013f6c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8013f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f58:	f383 8811 	msr	BASEPRI, r3
 8013f5c:	f3bf 8f6f 	isb	sy
 8013f60:	f3bf 8f4f 	dsb	sy
 8013f64:	617b      	str	r3, [r7, #20]
}
 8013f66:	bf00      	nop
 8013f68:	bf00      	nop
 8013f6a:	e7fd      	b.n	8013f68 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013f6c:	68bb      	ldr	r3, [r7, #8]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d01f      	beq.n	8013fb2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013f72:	2300      	movs	r3, #0
 8013f74:	61fb      	str	r3, [r7, #28]
 8013f76:	e012      	b.n	8013f9e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013f78:	68ba      	ldr	r2, [r7, #8]
 8013f7a:	69fb      	ldr	r3, [r7, #28]
 8013f7c:	4413      	add	r3, r2
 8013f7e:	7819      	ldrb	r1, [r3, #0]
 8013f80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013f82:	69fb      	ldr	r3, [r7, #28]
 8013f84:	4413      	add	r3, r2
 8013f86:	3334      	adds	r3, #52	@ 0x34
 8013f88:	460a      	mov	r2, r1
 8013f8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013f8c:	68ba      	ldr	r2, [r7, #8]
 8013f8e:	69fb      	ldr	r3, [r7, #28]
 8013f90:	4413      	add	r3, r2
 8013f92:	781b      	ldrb	r3, [r3, #0]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d006      	beq.n	8013fa6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013f98:	69fb      	ldr	r3, [r7, #28]
 8013f9a:	3301      	adds	r3, #1
 8013f9c:	61fb      	str	r3, [r7, #28]
 8013f9e:	69fb      	ldr	r3, [r7, #28]
 8013fa0:	2b0f      	cmp	r3, #15
 8013fa2:	d9e9      	bls.n	8013f78 <prvInitialiseNewTask+0x56>
 8013fa4:	e000      	b.n	8013fa8 <prvInitialiseNewTask+0x86>
			{
				break;
 8013fa6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013faa:	2200      	movs	r2, #0
 8013fac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013fb0:	e003      	b.n	8013fba <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fbc:	2b06      	cmp	r3, #6
 8013fbe:	d901      	bls.n	8013fc4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013fc0:	2306      	movs	r3, #6
 8013fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013fce:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fd8:	3304      	adds	r3, #4
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f7fe fe81 	bl	8012ce2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fe2:	3318      	adds	r3, #24
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f7fe fe7c 	bl	8012ce2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013fee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ff2:	f1c3 0207 	rsb	r2, r3, #7
 8013ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ff8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ffc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013ffe:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014002:	2200      	movs	r2, #0
 8014004:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014008:	2200      	movs	r2, #0
 801400a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801400e:	683a      	ldr	r2, [r7, #0]
 8014010:	68f9      	ldr	r1, [r7, #12]
 8014012:	69b8      	ldr	r0, [r7, #24]
 8014014:	f000 ff94 	bl	8014f40 <pxPortInitialiseStack>
 8014018:	4602      	mov	r2, r0
 801401a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801401c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801401e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014020:	2b00      	cmp	r3, #0
 8014022:	d002      	beq.n	801402a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014028:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801402a:	bf00      	nop
 801402c:	3720      	adds	r7, #32
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}
	...

08014034 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b082      	sub	sp, #8
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801403c:	f001 f8b4 	bl	80151a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014040:	4b2a      	ldr	r3, [pc, #168]	@ (80140ec <prvAddNewTaskToReadyList+0xb8>)
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	3301      	adds	r3, #1
 8014046:	4a29      	ldr	r2, [pc, #164]	@ (80140ec <prvAddNewTaskToReadyList+0xb8>)
 8014048:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801404a:	4b29      	ldr	r3, [pc, #164]	@ (80140f0 <prvAddNewTaskToReadyList+0xbc>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d109      	bne.n	8014066 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014052:	4a27      	ldr	r2, [pc, #156]	@ (80140f0 <prvAddNewTaskToReadyList+0xbc>)
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014058:	4b24      	ldr	r3, [pc, #144]	@ (80140ec <prvAddNewTaskToReadyList+0xb8>)
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	2b01      	cmp	r3, #1
 801405e:	d110      	bne.n	8014082 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014060:	f000 fc8a 	bl	8014978 <prvInitialiseTaskLists>
 8014064:	e00d      	b.n	8014082 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014066:	4b23      	ldr	r3, [pc, #140]	@ (80140f4 <prvAddNewTaskToReadyList+0xc0>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d109      	bne.n	8014082 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801406e:	4b20      	ldr	r3, [pc, #128]	@ (80140f0 <prvAddNewTaskToReadyList+0xbc>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014078:	429a      	cmp	r2, r3
 801407a:	d802      	bhi.n	8014082 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801407c:	4a1c      	ldr	r2, [pc, #112]	@ (80140f0 <prvAddNewTaskToReadyList+0xbc>)
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014082:	4b1d      	ldr	r3, [pc, #116]	@ (80140f8 <prvAddNewTaskToReadyList+0xc4>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	3301      	adds	r3, #1
 8014088:	4a1b      	ldr	r2, [pc, #108]	@ (80140f8 <prvAddNewTaskToReadyList+0xc4>)
 801408a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014090:	2201      	movs	r2, #1
 8014092:	409a      	lsls	r2, r3
 8014094:	4b19      	ldr	r3, [pc, #100]	@ (80140fc <prvAddNewTaskToReadyList+0xc8>)
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	4313      	orrs	r3, r2
 801409a:	4a18      	ldr	r2, [pc, #96]	@ (80140fc <prvAddNewTaskToReadyList+0xc8>)
 801409c:	6013      	str	r3, [r2, #0]
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140a2:	4613      	mov	r3, r2
 80140a4:	009b      	lsls	r3, r3, #2
 80140a6:	4413      	add	r3, r2
 80140a8:	009b      	lsls	r3, r3, #2
 80140aa:	4a15      	ldr	r2, [pc, #84]	@ (8014100 <prvAddNewTaskToReadyList+0xcc>)
 80140ac:	441a      	add	r2, r3
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	3304      	adds	r3, #4
 80140b2:	4619      	mov	r1, r3
 80140b4:	4610      	mov	r0, r2
 80140b6:	f7fe fe21 	bl	8012cfc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80140ba:	f001 f8a7 	bl	801520c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80140be:	4b0d      	ldr	r3, [pc, #52]	@ (80140f4 <prvAddNewTaskToReadyList+0xc0>)
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d00e      	beq.n	80140e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80140c6:	4b0a      	ldr	r3, [pc, #40]	@ (80140f0 <prvAddNewTaskToReadyList+0xbc>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140d0:	429a      	cmp	r2, r3
 80140d2:	d207      	bcs.n	80140e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80140d4:	4b0b      	ldr	r3, [pc, #44]	@ (8014104 <prvAddNewTaskToReadyList+0xd0>)
 80140d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80140da:	601a      	str	r2, [r3, #0]
 80140dc:	f3bf 8f4f 	dsb	sy
 80140e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80140e4:	bf00      	nop
 80140e6:	3708      	adds	r7, #8
 80140e8:	46bd      	mov	sp, r7
 80140ea:	bd80      	pop	{r7, pc}
 80140ec:	240014bc 	.word	0x240014bc
 80140f0:	240013bc 	.word	0x240013bc
 80140f4:	240014c8 	.word	0x240014c8
 80140f8:	240014d8 	.word	0x240014d8
 80140fc:	240014c4 	.word	0x240014c4
 8014100:	240013c0 	.word	0x240013c0
 8014104:	e000ed04 	.word	0xe000ed04

08014108 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014108:	b580      	push	{r7, lr}
 801410a:	b084      	sub	sp, #16
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014110:	2300      	movs	r3, #0
 8014112:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d018      	beq.n	801414c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801411a:	4b14      	ldr	r3, [pc, #80]	@ (801416c <vTaskDelay+0x64>)
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d00b      	beq.n	801413a <vTaskDelay+0x32>
	__asm volatile
 8014122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014126:	f383 8811 	msr	BASEPRI, r3
 801412a:	f3bf 8f6f 	isb	sy
 801412e:	f3bf 8f4f 	dsb	sy
 8014132:	60bb      	str	r3, [r7, #8]
}
 8014134:	bf00      	nop
 8014136:	bf00      	nop
 8014138:	e7fd      	b.n	8014136 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801413a:	f000 f911 	bl	8014360 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801413e:	2100      	movs	r1, #0
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f000 fe97 	bl	8014e74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014146:	f000 f919 	bl	801437c <xTaskResumeAll>
 801414a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d107      	bne.n	8014162 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8014152:	4b07      	ldr	r3, [pc, #28]	@ (8014170 <vTaskDelay+0x68>)
 8014154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014158:	601a      	str	r2, [r3, #0]
 801415a:	f3bf 8f4f 	dsb	sy
 801415e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014162:	bf00      	nop
 8014164:	3710      	adds	r7, #16
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}
 801416a:	bf00      	nop
 801416c:	240014e4 	.word	0x240014e4
 8014170:	e000ed04 	.word	0xe000ed04

08014174 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014174:	b580      	push	{r7, lr}
 8014176:	b084      	sub	sp, #16
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801417c:	f001 f814 	bl	80151a8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d102      	bne.n	801418c <vTaskSuspend+0x18>
 8014186:	4b3d      	ldr	r3, [pc, #244]	@ (801427c <vTaskSuspend+0x108>)
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	e000      	b.n	801418e <vTaskSuspend+0x1a>
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	3304      	adds	r3, #4
 8014194:	4618      	mov	r0, r3
 8014196:	f7fe fe0e 	bl	8012db6 <uxListRemove>
 801419a:	4603      	mov	r3, r0
 801419c:	2b00      	cmp	r3, #0
 801419e:	d115      	bne.n	80141cc <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80141a4:	4936      	ldr	r1, [pc, #216]	@ (8014280 <vTaskSuspend+0x10c>)
 80141a6:	4613      	mov	r3, r2
 80141a8:	009b      	lsls	r3, r3, #2
 80141aa:	4413      	add	r3, r2
 80141ac:	009b      	lsls	r3, r3, #2
 80141ae:	440b      	add	r3, r1
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d10a      	bne.n	80141cc <vTaskSuspend+0x58>
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141ba:	2201      	movs	r2, #1
 80141bc:	fa02 f303 	lsl.w	r3, r2, r3
 80141c0:	43da      	mvns	r2, r3
 80141c2:	4b30      	ldr	r3, [pc, #192]	@ (8014284 <vTaskSuspend+0x110>)
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	4013      	ands	r3, r2
 80141c8:	4a2e      	ldr	r2, [pc, #184]	@ (8014284 <vTaskSuspend+0x110>)
 80141ca:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d004      	beq.n	80141de <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	3318      	adds	r3, #24
 80141d8:	4618      	mov	r0, r3
 80141da:	f7fe fdec 	bl	8012db6 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	3304      	adds	r3, #4
 80141e2:	4619      	mov	r1, r3
 80141e4:	4828      	ldr	r0, [pc, #160]	@ (8014288 <vTaskSuspend+0x114>)
 80141e6:	f7fe fd89 	bl	8012cfc <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80141f0:	b2db      	uxtb	r3, r3
 80141f2:	2b01      	cmp	r3, #1
 80141f4:	d103      	bne.n	80141fe <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	2200      	movs	r2, #0
 80141fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80141fe:	f001 f805 	bl	801520c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014202:	4b22      	ldr	r3, [pc, #136]	@ (801428c <vTaskSuspend+0x118>)
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d005      	beq.n	8014216 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801420a:	f000 ffcd 	bl	80151a8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801420e:	f000 fc51 	bl	8014ab4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014212:	f000 fffb 	bl	801520c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014216:	4b19      	ldr	r3, [pc, #100]	@ (801427c <vTaskSuspend+0x108>)
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	68fa      	ldr	r2, [r7, #12]
 801421c:	429a      	cmp	r2, r3
 801421e:	d128      	bne.n	8014272 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8014220:	4b1a      	ldr	r3, [pc, #104]	@ (801428c <vTaskSuspend+0x118>)
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d018      	beq.n	801425a <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014228:	4b19      	ldr	r3, [pc, #100]	@ (8014290 <vTaskSuspend+0x11c>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d00b      	beq.n	8014248 <vTaskSuspend+0xd4>
	__asm volatile
 8014230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014234:	f383 8811 	msr	BASEPRI, r3
 8014238:	f3bf 8f6f 	isb	sy
 801423c:	f3bf 8f4f 	dsb	sy
 8014240:	60bb      	str	r3, [r7, #8]
}
 8014242:	bf00      	nop
 8014244:	bf00      	nop
 8014246:	e7fd      	b.n	8014244 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8014248:	4b12      	ldr	r3, [pc, #72]	@ (8014294 <vTaskSuspend+0x120>)
 801424a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801424e:	601a      	str	r2, [r3, #0]
 8014250:	f3bf 8f4f 	dsb	sy
 8014254:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014258:	e00b      	b.n	8014272 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801425a:	4b0b      	ldr	r3, [pc, #44]	@ (8014288 <vTaskSuspend+0x114>)
 801425c:	681a      	ldr	r2, [r3, #0]
 801425e:	4b0e      	ldr	r3, [pc, #56]	@ (8014298 <vTaskSuspend+0x124>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	429a      	cmp	r2, r3
 8014264:	d103      	bne.n	801426e <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8014266:	4b05      	ldr	r3, [pc, #20]	@ (801427c <vTaskSuspend+0x108>)
 8014268:	2200      	movs	r2, #0
 801426a:	601a      	str	r2, [r3, #0]
	}
 801426c:	e001      	b.n	8014272 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 801426e:	f000 f9ff 	bl	8014670 <vTaskSwitchContext>
	}
 8014272:	bf00      	nop
 8014274:	3710      	adds	r7, #16
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}
 801427a:	bf00      	nop
 801427c:	240013bc 	.word	0x240013bc
 8014280:	240013c0 	.word	0x240013c0
 8014284:	240014c4 	.word	0x240014c4
 8014288:	240014a8 	.word	0x240014a8
 801428c:	240014c8 	.word	0x240014c8
 8014290:	240014e4 	.word	0x240014e4
 8014294:	e000ed04 	.word	0xe000ed04
 8014298:	240014bc 	.word	0x240014bc

0801429c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b08a      	sub	sp, #40	@ 0x28
 80142a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80142a2:	2300      	movs	r3, #0
 80142a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80142a6:	2300      	movs	r3, #0
 80142a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80142aa:	463a      	mov	r2, r7
 80142ac:	1d39      	adds	r1, r7, #4
 80142ae:	f107 0308 	add.w	r3, r7, #8
 80142b2:	4618      	mov	r0, r3
 80142b4:	f7ee fb76 	bl	80029a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80142b8:	6839      	ldr	r1, [r7, #0]
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	68ba      	ldr	r2, [r7, #8]
 80142be:	9202      	str	r2, [sp, #8]
 80142c0:	9301      	str	r3, [sp, #4]
 80142c2:	2300      	movs	r3, #0
 80142c4:	9300      	str	r3, [sp, #0]
 80142c6:	2300      	movs	r3, #0
 80142c8:	460a      	mov	r2, r1
 80142ca:	491f      	ldr	r1, [pc, #124]	@ (8014348 <vTaskStartScheduler+0xac>)
 80142cc:	481f      	ldr	r0, [pc, #124]	@ (801434c <vTaskStartScheduler+0xb0>)
 80142ce:	f7ff fd83 	bl	8013dd8 <xTaskCreateStatic>
 80142d2:	4603      	mov	r3, r0
 80142d4:	4a1e      	ldr	r2, [pc, #120]	@ (8014350 <vTaskStartScheduler+0xb4>)
 80142d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80142d8:	4b1d      	ldr	r3, [pc, #116]	@ (8014350 <vTaskStartScheduler+0xb4>)
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d002      	beq.n	80142e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80142e0:	2301      	movs	r3, #1
 80142e2:	617b      	str	r3, [r7, #20]
 80142e4:	e001      	b.n	80142ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80142e6:	2300      	movs	r3, #0
 80142e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80142ea:	697b      	ldr	r3, [r7, #20]
 80142ec:	2b01      	cmp	r3, #1
 80142ee:	d116      	bne.n	801431e <vTaskStartScheduler+0x82>
	__asm volatile
 80142f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142f4:	f383 8811 	msr	BASEPRI, r3
 80142f8:	f3bf 8f6f 	isb	sy
 80142fc:	f3bf 8f4f 	dsb	sy
 8014300:	613b      	str	r3, [r7, #16]
}
 8014302:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014304:	4b13      	ldr	r3, [pc, #76]	@ (8014354 <vTaskStartScheduler+0xb8>)
 8014306:	f04f 32ff 	mov.w	r2, #4294967295
 801430a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801430c:	4b12      	ldr	r3, [pc, #72]	@ (8014358 <vTaskStartScheduler+0xbc>)
 801430e:	2201      	movs	r2, #1
 8014310:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014312:	4b12      	ldr	r3, [pc, #72]	@ (801435c <vTaskStartScheduler+0xc0>)
 8014314:	2200      	movs	r2, #0
 8014316:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014318:	f000 fea2 	bl	8015060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801431c:	e00f      	b.n	801433e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014324:	d10b      	bne.n	801433e <vTaskStartScheduler+0xa2>
	__asm volatile
 8014326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801432a:	f383 8811 	msr	BASEPRI, r3
 801432e:	f3bf 8f6f 	isb	sy
 8014332:	f3bf 8f4f 	dsb	sy
 8014336:	60fb      	str	r3, [r7, #12]
}
 8014338:	bf00      	nop
 801433a:	bf00      	nop
 801433c:	e7fd      	b.n	801433a <vTaskStartScheduler+0x9e>
}
 801433e:	bf00      	nop
 8014340:	3718      	adds	r7, #24
 8014342:	46bd      	mov	sp, r7
 8014344:	bd80      	pop	{r7, pc}
 8014346:	bf00      	nop
 8014348:	0802968c 	.word	0x0802968c
 801434c:	08014949 	.word	0x08014949
 8014350:	240014e0 	.word	0x240014e0
 8014354:	240014dc 	.word	0x240014dc
 8014358:	240014c8 	.word	0x240014c8
 801435c:	240014c0 	.word	0x240014c0

08014360 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014360:	b480      	push	{r7}
 8014362:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014364:	4b04      	ldr	r3, [pc, #16]	@ (8014378 <vTaskSuspendAll+0x18>)
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	3301      	adds	r3, #1
 801436a:	4a03      	ldr	r2, [pc, #12]	@ (8014378 <vTaskSuspendAll+0x18>)
 801436c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801436e:	bf00      	nop
 8014370:	46bd      	mov	sp, r7
 8014372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014376:	4770      	bx	lr
 8014378:	240014e4 	.word	0x240014e4

0801437c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b084      	sub	sp, #16
 8014380:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014382:	2300      	movs	r3, #0
 8014384:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014386:	2300      	movs	r3, #0
 8014388:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801438a:	4b42      	ldr	r3, [pc, #264]	@ (8014494 <xTaskResumeAll+0x118>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	2b00      	cmp	r3, #0
 8014390:	d10b      	bne.n	80143aa <xTaskResumeAll+0x2e>
	__asm volatile
 8014392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014396:	f383 8811 	msr	BASEPRI, r3
 801439a:	f3bf 8f6f 	isb	sy
 801439e:	f3bf 8f4f 	dsb	sy
 80143a2:	603b      	str	r3, [r7, #0]
}
 80143a4:	bf00      	nop
 80143a6:	bf00      	nop
 80143a8:	e7fd      	b.n	80143a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80143aa:	f000 fefd 	bl	80151a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80143ae:	4b39      	ldr	r3, [pc, #228]	@ (8014494 <xTaskResumeAll+0x118>)
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	3b01      	subs	r3, #1
 80143b4:	4a37      	ldr	r2, [pc, #220]	@ (8014494 <xTaskResumeAll+0x118>)
 80143b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80143b8:	4b36      	ldr	r3, [pc, #216]	@ (8014494 <xTaskResumeAll+0x118>)
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d161      	bne.n	8014484 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80143c0:	4b35      	ldr	r3, [pc, #212]	@ (8014498 <xTaskResumeAll+0x11c>)
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d05d      	beq.n	8014484 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80143c8:	e02e      	b.n	8014428 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143ca:	4b34      	ldr	r3, [pc, #208]	@ (801449c <xTaskResumeAll+0x120>)
 80143cc:	68db      	ldr	r3, [r3, #12]
 80143ce:	68db      	ldr	r3, [r3, #12]
 80143d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	3318      	adds	r3, #24
 80143d6:	4618      	mov	r0, r3
 80143d8:	f7fe fced 	bl	8012db6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	3304      	adds	r3, #4
 80143e0:	4618      	mov	r0, r3
 80143e2:	f7fe fce8 	bl	8012db6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143ea:	2201      	movs	r2, #1
 80143ec:	409a      	lsls	r2, r3
 80143ee:	4b2c      	ldr	r3, [pc, #176]	@ (80144a0 <xTaskResumeAll+0x124>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	4313      	orrs	r3, r2
 80143f4:	4a2a      	ldr	r2, [pc, #168]	@ (80144a0 <xTaskResumeAll+0x124>)
 80143f6:	6013      	str	r3, [r2, #0]
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143fc:	4613      	mov	r3, r2
 80143fe:	009b      	lsls	r3, r3, #2
 8014400:	4413      	add	r3, r2
 8014402:	009b      	lsls	r3, r3, #2
 8014404:	4a27      	ldr	r2, [pc, #156]	@ (80144a4 <xTaskResumeAll+0x128>)
 8014406:	441a      	add	r2, r3
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	3304      	adds	r3, #4
 801440c:	4619      	mov	r1, r3
 801440e:	4610      	mov	r0, r2
 8014410:	f7fe fc74 	bl	8012cfc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014418:	4b23      	ldr	r3, [pc, #140]	@ (80144a8 <xTaskResumeAll+0x12c>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801441e:	429a      	cmp	r2, r3
 8014420:	d302      	bcc.n	8014428 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014422:	4b22      	ldr	r3, [pc, #136]	@ (80144ac <xTaskResumeAll+0x130>)
 8014424:	2201      	movs	r2, #1
 8014426:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014428:	4b1c      	ldr	r3, [pc, #112]	@ (801449c <xTaskResumeAll+0x120>)
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d1cc      	bne.n	80143ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d001      	beq.n	801443a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014436:	f000 fb3d 	bl	8014ab4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801443a:	4b1d      	ldr	r3, [pc, #116]	@ (80144b0 <xTaskResumeAll+0x134>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d010      	beq.n	8014468 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014446:	f000 f859 	bl	80144fc <xTaskIncrementTick>
 801444a:	4603      	mov	r3, r0
 801444c:	2b00      	cmp	r3, #0
 801444e:	d002      	beq.n	8014456 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014450:	4b16      	ldr	r3, [pc, #88]	@ (80144ac <xTaskResumeAll+0x130>)
 8014452:	2201      	movs	r2, #1
 8014454:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	3b01      	subs	r3, #1
 801445a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d1f1      	bne.n	8014446 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8014462:	4b13      	ldr	r3, [pc, #76]	@ (80144b0 <xTaskResumeAll+0x134>)
 8014464:	2200      	movs	r2, #0
 8014466:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014468:	4b10      	ldr	r3, [pc, #64]	@ (80144ac <xTaskResumeAll+0x130>)
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d009      	beq.n	8014484 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014470:	2301      	movs	r3, #1
 8014472:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014474:	4b0f      	ldr	r3, [pc, #60]	@ (80144b4 <xTaskResumeAll+0x138>)
 8014476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801447a:	601a      	str	r2, [r3, #0]
 801447c:	f3bf 8f4f 	dsb	sy
 8014480:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014484:	f000 fec2 	bl	801520c <vPortExitCritical>

	return xAlreadyYielded;
 8014488:	68bb      	ldr	r3, [r7, #8]
}
 801448a:	4618      	mov	r0, r3
 801448c:	3710      	adds	r7, #16
 801448e:	46bd      	mov	sp, r7
 8014490:	bd80      	pop	{r7, pc}
 8014492:	bf00      	nop
 8014494:	240014e4 	.word	0x240014e4
 8014498:	240014bc 	.word	0x240014bc
 801449c:	2400147c 	.word	0x2400147c
 80144a0:	240014c4 	.word	0x240014c4
 80144a4:	240013c0 	.word	0x240013c0
 80144a8:	240013bc 	.word	0x240013bc
 80144ac:	240014d0 	.word	0x240014d0
 80144b0:	240014cc 	.word	0x240014cc
 80144b4:	e000ed04 	.word	0xe000ed04

080144b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80144b8:	b480      	push	{r7}
 80144ba:	b083      	sub	sp, #12
 80144bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80144be:	4b05      	ldr	r3, [pc, #20]	@ (80144d4 <xTaskGetTickCount+0x1c>)
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80144c4:	687b      	ldr	r3, [r7, #4]
}
 80144c6:	4618      	mov	r0, r3
 80144c8:	370c      	adds	r7, #12
 80144ca:	46bd      	mov	sp, r7
 80144cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d0:	4770      	bx	lr
 80144d2:	bf00      	nop
 80144d4:	240014c0 	.word	0x240014c0

080144d8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b082      	sub	sp, #8
 80144dc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80144de:	f000 ff43 	bl	8015368 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80144e2:	2300      	movs	r3, #0
 80144e4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80144e6:	4b04      	ldr	r3, [pc, #16]	@ (80144f8 <xTaskGetTickCountFromISR+0x20>)
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80144ec:	683b      	ldr	r3, [r7, #0]
}
 80144ee:	4618      	mov	r0, r3
 80144f0:	3708      	adds	r7, #8
 80144f2:	46bd      	mov	sp, r7
 80144f4:	bd80      	pop	{r7, pc}
 80144f6:	bf00      	nop
 80144f8:	240014c0 	.word	0x240014c0

080144fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b086      	sub	sp, #24
 8014500:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014502:	2300      	movs	r3, #0
 8014504:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014506:	4b4f      	ldr	r3, [pc, #316]	@ (8014644 <xTaskIncrementTick+0x148>)
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	2b00      	cmp	r3, #0
 801450c:	f040 808f 	bne.w	801462e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014510:	4b4d      	ldr	r3, [pc, #308]	@ (8014648 <xTaskIncrementTick+0x14c>)
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	3301      	adds	r3, #1
 8014516:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014518:	4a4b      	ldr	r2, [pc, #300]	@ (8014648 <xTaskIncrementTick+0x14c>)
 801451a:	693b      	ldr	r3, [r7, #16]
 801451c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d121      	bne.n	8014568 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8014524:	4b49      	ldr	r3, [pc, #292]	@ (801464c <xTaskIncrementTick+0x150>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d00b      	beq.n	8014546 <xTaskIncrementTick+0x4a>
	__asm volatile
 801452e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014532:	f383 8811 	msr	BASEPRI, r3
 8014536:	f3bf 8f6f 	isb	sy
 801453a:	f3bf 8f4f 	dsb	sy
 801453e:	603b      	str	r3, [r7, #0]
}
 8014540:	bf00      	nop
 8014542:	bf00      	nop
 8014544:	e7fd      	b.n	8014542 <xTaskIncrementTick+0x46>
 8014546:	4b41      	ldr	r3, [pc, #260]	@ (801464c <xTaskIncrementTick+0x150>)
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	60fb      	str	r3, [r7, #12]
 801454c:	4b40      	ldr	r3, [pc, #256]	@ (8014650 <xTaskIncrementTick+0x154>)
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	4a3e      	ldr	r2, [pc, #248]	@ (801464c <xTaskIncrementTick+0x150>)
 8014552:	6013      	str	r3, [r2, #0]
 8014554:	4a3e      	ldr	r2, [pc, #248]	@ (8014650 <xTaskIncrementTick+0x154>)
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	6013      	str	r3, [r2, #0]
 801455a:	4b3e      	ldr	r3, [pc, #248]	@ (8014654 <xTaskIncrementTick+0x158>)
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	3301      	adds	r3, #1
 8014560:	4a3c      	ldr	r2, [pc, #240]	@ (8014654 <xTaskIncrementTick+0x158>)
 8014562:	6013      	str	r3, [r2, #0]
 8014564:	f000 faa6 	bl	8014ab4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014568:	4b3b      	ldr	r3, [pc, #236]	@ (8014658 <xTaskIncrementTick+0x15c>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	693a      	ldr	r2, [r7, #16]
 801456e:	429a      	cmp	r2, r3
 8014570:	d348      	bcc.n	8014604 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014572:	4b36      	ldr	r3, [pc, #216]	@ (801464c <xTaskIncrementTick+0x150>)
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d104      	bne.n	8014586 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801457c:	4b36      	ldr	r3, [pc, #216]	@ (8014658 <xTaskIncrementTick+0x15c>)
 801457e:	f04f 32ff 	mov.w	r2, #4294967295
 8014582:	601a      	str	r2, [r3, #0]
					break;
 8014584:	e03e      	b.n	8014604 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014586:	4b31      	ldr	r3, [pc, #196]	@ (801464c <xTaskIncrementTick+0x150>)
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	68db      	ldr	r3, [r3, #12]
 801458c:	68db      	ldr	r3, [r3, #12]
 801458e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014590:	68bb      	ldr	r3, [r7, #8]
 8014592:	685b      	ldr	r3, [r3, #4]
 8014594:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014596:	693a      	ldr	r2, [r7, #16]
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	429a      	cmp	r2, r3
 801459c:	d203      	bcs.n	80145a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801459e:	4a2e      	ldr	r2, [pc, #184]	@ (8014658 <xTaskIncrementTick+0x15c>)
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80145a4:	e02e      	b.n	8014604 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80145a6:	68bb      	ldr	r3, [r7, #8]
 80145a8:	3304      	adds	r3, #4
 80145aa:	4618      	mov	r0, r3
 80145ac:	f7fe fc03 	bl	8012db6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80145b0:	68bb      	ldr	r3, [r7, #8]
 80145b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d004      	beq.n	80145c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80145b8:	68bb      	ldr	r3, [r7, #8]
 80145ba:	3318      	adds	r3, #24
 80145bc:	4618      	mov	r0, r3
 80145be:	f7fe fbfa 	bl	8012db6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80145c2:	68bb      	ldr	r3, [r7, #8]
 80145c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145c6:	2201      	movs	r2, #1
 80145c8:	409a      	lsls	r2, r3
 80145ca:	4b24      	ldr	r3, [pc, #144]	@ (801465c <xTaskIncrementTick+0x160>)
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	4313      	orrs	r3, r2
 80145d0:	4a22      	ldr	r2, [pc, #136]	@ (801465c <xTaskIncrementTick+0x160>)
 80145d2:	6013      	str	r3, [r2, #0]
 80145d4:	68bb      	ldr	r3, [r7, #8]
 80145d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145d8:	4613      	mov	r3, r2
 80145da:	009b      	lsls	r3, r3, #2
 80145dc:	4413      	add	r3, r2
 80145de:	009b      	lsls	r3, r3, #2
 80145e0:	4a1f      	ldr	r2, [pc, #124]	@ (8014660 <xTaskIncrementTick+0x164>)
 80145e2:	441a      	add	r2, r3
 80145e4:	68bb      	ldr	r3, [r7, #8]
 80145e6:	3304      	adds	r3, #4
 80145e8:	4619      	mov	r1, r3
 80145ea:	4610      	mov	r0, r2
 80145ec:	f7fe fb86 	bl	8012cfc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80145f0:	68bb      	ldr	r3, [r7, #8]
 80145f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145f4:	4b1b      	ldr	r3, [pc, #108]	@ (8014664 <xTaskIncrementTick+0x168>)
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145fa:	429a      	cmp	r2, r3
 80145fc:	d3b9      	bcc.n	8014572 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80145fe:	2301      	movs	r3, #1
 8014600:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014602:	e7b6      	b.n	8014572 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014604:	4b17      	ldr	r3, [pc, #92]	@ (8014664 <xTaskIncrementTick+0x168>)
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801460a:	4915      	ldr	r1, [pc, #84]	@ (8014660 <xTaskIncrementTick+0x164>)
 801460c:	4613      	mov	r3, r2
 801460e:	009b      	lsls	r3, r3, #2
 8014610:	4413      	add	r3, r2
 8014612:	009b      	lsls	r3, r3, #2
 8014614:	440b      	add	r3, r1
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	2b01      	cmp	r3, #1
 801461a:	d901      	bls.n	8014620 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801461c:	2301      	movs	r3, #1
 801461e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014620:	4b11      	ldr	r3, [pc, #68]	@ (8014668 <xTaskIncrementTick+0x16c>)
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d007      	beq.n	8014638 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8014628:	2301      	movs	r3, #1
 801462a:	617b      	str	r3, [r7, #20]
 801462c:	e004      	b.n	8014638 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801462e:	4b0f      	ldr	r3, [pc, #60]	@ (801466c <xTaskIncrementTick+0x170>)
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	3301      	adds	r3, #1
 8014634:	4a0d      	ldr	r2, [pc, #52]	@ (801466c <xTaskIncrementTick+0x170>)
 8014636:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014638:	697b      	ldr	r3, [r7, #20]
}
 801463a:	4618      	mov	r0, r3
 801463c:	3718      	adds	r7, #24
 801463e:	46bd      	mov	sp, r7
 8014640:	bd80      	pop	{r7, pc}
 8014642:	bf00      	nop
 8014644:	240014e4 	.word	0x240014e4
 8014648:	240014c0 	.word	0x240014c0
 801464c:	24001474 	.word	0x24001474
 8014650:	24001478 	.word	0x24001478
 8014654:	240014d4 	.word	0x240014d4
 8014658:	240014dc 	.word	0x240014dc
 801465c:	240014c4 	.word	0x240014c4
 8014660:	240013c0 	.word	0x240013c0
 8014664:	240013bc 	.word	0x240013bc
 8014668:	240014d0 	.word	0x240014d0
 801466c:	240014cc 	.word	0x240014cc

08014670 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014670:	b480      	push	{r7}
 8014672:	b087      	sub	sp, #28
 8014674:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014676:	4b27      	ldr	r3, [pc, #156]	@ (8014714 <vTaskSwitchContext+0xa4>)
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d003      	beq.n	8014686 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801467e:	4b26      	ldr	r3, [pc, #152]	@ (8014718 <vTaskSwitchContext+0xa8>)
 8014680:	2201      	movs	r2, #1
 8014682:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014684:	e040      	b.n	8014708 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8014686:	4b24      	ldr	r3, [pc, #144]	@ (8014718 <vTaskSwitchContext+0xa8>)
 8014688:	2200      	movs	r2, #0
 801468a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801468c:	4b23      	ldr	r3, [pc, #140]	@ (801471c <vTaskSwitchContext+0xac>)
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	fab3 f383 	clz	r3, r3
 8014698:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801469a:	7afb      	ldrb	r3, [r7, #11]
 801469c:	f1c3 031f 	rsb	r3, r3, #31
 80146a0:	617b      	str	r3, [r7, #20]
 80146a2:	491f      	ldr	r1, [pc, #124]	@ (8014720 <vTaskSwitchContext+0xb0>)
 80146a4:	697a      	ldr	r2, [r7, #20]
 80146a6:	4613      	mov	r3, r2
 80146a8:	009b      	lsls	r3, r3, #2
 80146aa:	4413      	add	r3, r2
 80146ac:	009b      	lsls	r3, r3, #2
 80146ae:	440b      	add	r3, r1
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d10b      	bne.n	80146ce <vTaskSwitchContext+0x5e>
	__asm volatile
 80146b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146ba:	f383 8811 	msr	BASEPRI, r3
 80146be:	f3bf 8f6f 	isb	sy
 80146c2:	f3bf 8f4f 	dsb	sy
 80146c6:	607b      	str	r3, [r7, #4]
}
 80146c8:	bf00      	nop
 80146ca:	bf00      	nop
 80146cc:	e7fd      	b.n	80146ca <vTaskSwitchContext+0x5a>
 80146ce:	697a      	ldr	r2, [r7, #20]
 80146d0:	4613      	mov	r3, r2
 80146d2:	009b      	lsls	r3, r3, #2
 80146d4:	4413      	add	r3, r2
 80146d6:	009b      	lsls	r3, r3, #2
 80146d8:	4a11      	ldr	r2, [pc, #68]	@ (8014720 <vTaskSwitchContext+0xb0>)
 80146da:	4413      	add	r3, r2
 80146dc:	613b      	str	r3, [r7, #16]
 80146de:	693b      	ldr	r3, [r7, #16]
 80146e0:	685b      	ldr	r3, [r3, #4]
 80146e2:	685a      	ldr	r2, [r3, #4]
 80146e4:	693b      	ldr	r3, [r7, #16]
 80146e6:	605a      	str	r2, [r3, #4]
 80146e8:	693b      	ldr	r3, [r7, #16]
 80146ea:	685a      	ldr	r2, [r3, #4]
 80146ec:	693b      	ldr	r3, [r7, #16]
 80146ee:	3308      	adds	r3, #8
 80146f0:	429a      	cmp	r2, r3
 80146f2:	d104      	bne.n	80146fe <vTaskSwitchContext+0x8e>
 80146f4:	693b      	ldr	r3, [r7, #16]
 80146f6:	685b      	ldr	r3, [r3, #4]
 80146f8:	685a      	ldr	r2, [r3, #4]
 80146fa:	693b      	ldr	r3, [r7, #16]
 80146fc:	605a      	str	r2, [r3, #4]
 80146fe:	693b      	ldr	r3, [r7, #16]
 8014700:	685b      	ldr	r3, [r3, #4]
 8014702:	68db      	ldr	r3, [r3, #12]
 8014704:	4a07      	ldr	r2, [pc, #28]	@ (8014724 <vTaskSwitchContext+0xb4>)
 8014706:	6013      	str	r3, [r2, #0]
}
 8014708:	bf00      	nop
 801470a:	371c      	adds	r7, #28
 801470c:	46bd      	mov	sp, r7
 801470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014712:	4770      	bx	lr
 8014714:	240014e4 	.word	0x240014e4
 8014718:	240014d0 	.word	0x240014d0
 801471c:	240014c4 	.word	0x240014c4
 8014720:	240013c0 	.word	0x240013c0
 8014724:	240013bc 	.word	0x240013bc

08014728 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b084      	sub	sp, #16
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
 8014730:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d10b      	bne.n	8014750 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8014738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801473c:	f383 8811 	msr	BASEPRI, r3
 8014740:	f3bf 8f6f 	isb	sy
 8014744:	f3bf 8f4f 	dsb	sy
 8014748:	60fb      	str	r3, [r7, #12]
}
 801474a:	bf00      	nop
 801474c:	bf00      	nop
 801474e:	e7fd      	b.n	801474c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014750:	4b07      	ldr	r3, [pc, #28]	@ (8014770 <vTaskPlaceOnEventList+0x48>)
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	3318      	adds	r3, #24
 8014756:	4619      	mov	r1, r3
 8014758:	6878      	ldr	r0, [r7, #4]
 801475a:	f7fe faf3 	bl	8012d44 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801475e:	2101      	movs	r1, #1
 8014760:	6838      	ldr	r0, [r7, #0]
 8014762:	f000 fb87 	bl	8014e74 <prvAddCurrentTaskToDelayedList>
}
 8014766:	bf00      	nop
 8014768:	3710      	adds	r7, #16
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}
 801476e:	bf00      	nop
 8014770:	240013bc 	.word	0x240013bc

08014774 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b086      	sub	sp, #24
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	68db      	ldr	r3, [r3, #12]
 8014780:	68db      	ldr	r3, [r3, #12]
 8014782:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014784:	693b      	ldr	r3, [r7, #16]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d10b      	bne.n	80147a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801478a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801478e:	f383 8811 	msr	BASEPRI, r3
 8014792:	f3bf 8f6f 	isb	sy
 8014796:	f3bf 8f4f 	dsb	sy
 801479a:	60fb      	str	r3, [r7, #12]
}
 801479c:	bf00      	nop
 801479e:	bf00      	nop
 80147a0:	e7fd      	b.n	801479e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80147a2:	693b      	ldr	r3, [r7, #16]
 80147a4:	3318      	adds	r3, #24
 80147a6:	4618      	mov	r0, r3
 80147a8:	f7fe fb05 	bl	8012db6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80147ac:	4b1d      	ldr	r3, [pc, #116]	@ (8014824 <xTaskRemoveFromEventList+0xb0>)
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d11c      	bne.n	80147ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80147b4:	693b      	ldr	r3, [r7, #16]
 80147b6:	3304      	adds	r3, #4
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7fe fafc 	bl	8012db6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80147be:	693b      	ldr	r3, [r7, #16]
 80147c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147c2:	2201      	movs	r2, #1
 80147c4:	409a      	lsls	r2, r3
 80147c6:	4b18      	ldr	r3, [pc, #96]	@ (8014828 <xTaskRemoveFromEventList+0xb4>)
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	4313      	orrs	r3, r2
 80147cc:	4a16      	ldr	r2, [pc, #88]	@ (8014828 <xTaskRemoveFromEventList+0xb4>)
 80147ce:	6013      	str	r3, [r2, #0]
 80147d0:	693b      	ldr	r3, [r7, #16]
 80147d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147d4:	4613      	mov	r3, r2
 80147d6:	009b      	lsls	r3, r3, #2
 80147d8:	4413      	add	r3, r2
 80147da:	009b      	lsls	r3, r3, #2
 80147dc:	4a13      	ldr	r2, [pc, #76]	@ (801482c <xTaskRemoveFromEventList+0xb8>)
 80147de:	441a      	add	r2, r3
 80147e0:	693b      	ldr	r3, [r7, #16]
 80147e2:	3304      	adds	r3, #4
 80147e4:	4619      	mov	r1, r3
 80147e6:	4610      	mov	r0, r2
 80147e8:	f7fe fa88 	bl	8012cfc <vListInsertEnd>
 80147ec:	e005      	b.n	80147fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80147ee:	693b      	ldr	r3, [r7, #16]
 80147f0:	3318      	adds	r3, #24
 80147f2:	4619      	mov	r1, r3
 80147f4:	480e      	ldr	r0, [pc, #56]	@ (8014830 <xTaskRemoveFromEventList+0xbc>)
 80147f6:	f7fe fa81 	bl	8012cfc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80147fa:	693b      	ldr	r3, [r7, #16]
 80147fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147fe:	4b0d      	ldr	r3, [pc, #52]	@ (8014834 <xTaskRemoveFromEventList+0xc0>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014804:	429a      	cmp	r2, r3
 8014806:	d905      	bls.n	8014814 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014808:	2301      	movs	r3, #1
 801480a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801480c:	4b0a      	ldr	r3, [pc, #40]	@ (8014838 <xTaskRemoveFromEventList+0xc4>)
 801480e:	2201      	movs	r2, #1
 8014810:	601a      	str	r2, [r3, #0]
 8014812:	e001      	b.n	8014818 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014814:	2300      	movs	r3, #0
 8014816:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014818:	697b      	ldr	r3, [r7, #20]
}
 801481a:	4618      	mov	r0, r3
 801481c:	3718      	adds	r7, #24
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	240014e4 	.word	0x240014e4
 8014828:	240014c4 	.word	0x240014c4
 801482c:	240013c0 	.word	0x240013c0
 8014830:	2400147c 	.word	0x2400147c
 8014834:	240013bc 	.word	0x240013bc
 8014838:	240014d0 	.word	0x240014d0

0801483c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801483c:	b480      	push	{r7}
 801483e:	b083      	sub	sp, #12
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014844:	4b06      	ldr	r3, [pc, #24]	@ (8014860 <vTaskInternalSetTimeOutState+0x24>)
 8014846:	681a      	ldr	r2, [r3, #0]
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801484c:	4b05      	ldr	r3, [pc, #20]	@ (8014864 <vTaskInternalSetTimeOutState+0x28>)
 801484e:	681a      	ldr	r2, [r3, #0]
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	605a      	str	r2, [r3, #4]
}
 8014854:	bf00      	nop
 8014856:	370c      	adds	r7, #12
 8014858:	46bd      	mov	sp, r7
 801485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485e:	4770      	bx	lr
 8014860:	240014d4 	.word	0x240014d4
 8014864:	240014c0 	.word	0x240014c0

08014868 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b088      	sub	sp, #32
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]
 8014870:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d10b      	bne.n	8014890 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8014878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801487c:	f383 8811 	msr	BASEPRI, r3
 8014880:	f3bf 8f6f 	isb	sy
 8014884:	f3bf 8f4f 	dsb	sy
 8014888:	613b      	str	r3, [r7, #16]
}
 801488a:	bf00      	nop
 801488c:	bf00      	nop
 801488e:	e7fd      	b.n	801488c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d10b      	bne.n	80148ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8014896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801489a:	f383 8811 	msr	BASEPRI, r3
 801489e:	f3bf 8f6f 	isb	sy
 80148a2:	f3bf 8f4f 	dsb	sy
 80148a6:	60fb      	str	r3, [r7, #12]
}
 80148a8:	bf00      	nop
 80148aa:	bf00      	nop
 80148ac:	e7fd      	b.n	80148aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80148ae:	f000 fc7b 	bl	80151a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80148b2:	4b1d      	ldr	r3, [pc, #116]	@ (8014928 <xTaskCheckForTimeOut+0xc0>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	685b      	ldr	r3, [r3, #4]
 80148bc:	69ba      	ldr	r2, [r7, #24]
 80148be:	1ad3      	subs	r3, r2, r3
 80148c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80148c2:	683b      	ldr	r3, [r7, #0]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148ca:	d102      	bne.n	80148d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80148cc:	2300      	movs	r3, #0
 80148ce:	61fb      	str	r3, [r7, #28]
 80148d0:	e023      	b.n	801491a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681a      	ldr	r2, [r3, #0]
 80148d6:	4b15      	ldr	r3, [pc, #84]	@ (801492c <xTaskCheckForTimeOut+0xc4>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	429a      	cmp	r2, r3
 80148dc:	d007      	beq.n	80148ee <xTaskCheckForTimeOut+0x86>
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	685b      	ldr	r3, [r3, #4]
 80148e2:	69ba      	ldr	r2, [r7, #24]
 80148e4:	429a      	cmp	r2, r3
 80148e6:	d302      	bcc.n	80148ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80148e8:	2301      	movs	r3, #1
 80148ea:	61fb      	str	r3, [r7, #28]
 80148ec:	e015      	b.n	801491a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80148ee:	683b      	ldr	r3, [r7, #0]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	697a      	ldr	r2, [r7, #20]
 80148f4:	429a      	cmp	r2, r3
 80148f6:	d20b      	bcs.n	8014910 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80148f8:	683b      	ldr	r3, [r7, #0]
 80148fa:	681a      	ldr	r2, [r3, #0]
 80148fc:	697b      	ldr	r3, [r7, #20]
 80148fe:	1ad2      	subs	r2, r2, r3
 8014900:	683b      	ldr	r3, [r7, #0]
 8014902:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f7ff ff99 	bl	801483c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801490a:	2300      	movs	r3, #0
 801490c:	61fb      	str	r3, [r7, #28]
 801490e:	e004      	b.n	801491a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014910:	683b      	ldr	r3, [r7, #0]
 8014912:	2200      	movs	r2, #0
 8014914:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014916:	2301      	movs	r3, #1
 8014918:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801491a:	f000 fc77 	bl	801520c <vPortExitCritical>

	return xReturn;
 801491e:	69fb      	ldr	r3, [r7, #28]
}
 8014920:	4618      	mov	r0, r3
 8014922:	3720      	adds	r7, #32
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}
 8014928:	240014c0 	.word	0x240014c0
 801492c:	240014d4 	.word	0x240014d4

08014930 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014930:	b480      	push	{r7}
 8014932:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014934:	4b03      	ldr	r3, [pc, #12]	@ (8014944 <vTaskMissedYield+0x14>)
 8014936:	2201      	movs	r2, #1
 8014938:	601a      	str	r2, [r3, #0]
}
 801493a:	bf00      	nop
 801493c:	46bd      	mov	sp, r7
 801493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014942:	4770      	bx	lr
 8014944:	240014d0 	.word	0x240014d0

08014948 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b082      	sub	sp, #8
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014950:	f000 f852 	bl	80149f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014954:	4b06      	ldr	r3, [pc, #24]	@ (8014970 <prvIdleTask+0x28>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	2b01      	cmp	r3, #1
 801495a:	d9f9      	bls.n	8014950 <prvIdleTask+0x8>
			{
				taskYIELD();
 801495c:	4b05      	ldr	r3, [pc, #20]	@ (8014974 <prvIdleTask+0x2c>)
 801495e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014962:	601a      	str	r2, [r3, #0]
 8014964:	f3bf 8f4f 	dsb	sy
 8014968:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801496c:	e7f0      	b.n	8014950 <prvIdleTask+0x8>
 801496e:	bf00      	nop
 8014970:	240013c0 	.word	0x240013c0
 8014974:	e000ed04 	.word	0xe000ed04

08014978 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b082      	sub	sp, #8
 801497c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801497e:	2300      	movs	r3, #0
 8014980:	607b      	str	r3, [r7, #4]
 8014982:	e00c      	b.n	801499e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014984:	687a      	ldr	r2, [r7, #4]
 8014986:	4613      	mov	r3, r2
 8014988:	009b      	lsls	r3, r3, #2
 801498a:	4413      	add	r3, r2
 801498c:	009b      	lsls	r3, r3, #2
 801498e:	4a12      	ldr	r2, [pc, #72]	@ (80149d8 <prvInitialiseTaskLists+0x60>)
 8014990:	4413      	add	r3, r2
 8014992:	4618      	mov	r0, r3
 8014994:	f7fe f985 	bl	8012ca2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	3301      	adds	r3, #1
 801499c:	607b      	str	r3, [r7, #4]
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	2b06      	cmp	r3, #6
 80149a2:	d9ef      	bls.n	8014984 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80149a4:	480d      	ldr	r0, [pc, #52]	@ (80149dc <prvInitialiseTaskLists+0x64>)
 80149a6:	f7fe f97c 	bl	8012ca2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80149aa:	480d      	ldr	r0, [pc, #52]	@ (80149e0 <prvInitialiseTaskLists+0x68>)
 80149ac:	f7fe f979 	bl	8012ca2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80149b0:	480c      	ldr	r0, [pc, #48]	@ (80149e4 <prvInitialiseTaskLists+0x6c>)
 80149b2:	f7fe f976 	bl	8012ca2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80149b6:	480c      	ldr	r0, [pc, #48]	@ (80149e8 <prvInitialiseTaskLists+0x70>)
 80149b8:	f7fe f973 	bl	8012ca2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80149bc:	480b      	ldr	r0, [pc, #44]	@ (80149ec <prvInitialiseTaskLists+0x74>)
 80149be:	f7fe f970 	bl	8012ca2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80149c2:	4b0b      	ldr	r3, [pc, #44]	@ (80149f0 <prvInitialiseTaskLists+0x78>)
 80149c4:	4a05      	ldr	r2, [pc, #20]	@ (80149dc <prvInitialiseTaskLists+0x64>)
 80149c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80149c8:	4b0a      	ldr	r3, [pc, #40]	@ (80149f4 <prvInitialiseTaskLists+0x7c>)
 80149ca:	4a05      	ldr	r2, [pc, #20]	@ (80149e0 <prvInitialiseTaskLists+0x68>)
 80149cc:	601a      	str	r2, [r3, #0]
}
 80149ce:	bf00      	nop
 80149d0:	3708      	adds	r7, #8
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}
 80149d6:	bf00      	nop
 80149d8:	240013c0 	.word	0x240013c0
 80149dc:	2400144c 	.word	0x2400144c
 80149e0:	24001460 	.word	0x24001460
 80149e4:	2400147c 	.word	0x2400147c
 80149e8:	24001490 	.word	0x24001490
 80149ec:	240014a8 	.word	0x240014a8
 80149f0:	24001474 	.word	0x24001474
 80149f4:	24001478 	.word	0x24001478

080149f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b082      	sub	sp, #8
 80149fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80149fe:	e019      	b.n	8014a34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014a00:	f000 fbd2 	bl	80151a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a04:	4b10      	ldr	r3, [pc, #64]	@ (8014a48 <prvCheckTasksWaitingTermination+0x50>)
 8014a06:	68db      	ldr	r3, [r3, #12]
 8014a08:	68db      	ldr	r3, [r3, #12]
 8014a0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	3304      	adds	r3, #4
 8014a10:	4618      	mov	r0, r3
 8014a12:	f7fe f9d0 	bl	8012db6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014a16:	4b0d      	ldr	r3, [pc, #52]	@ (8014a4c <prvCheckTasksWaitingTermination+0x54>)
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	3b01      	subs	r3, #1
 8014a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8014a4c <prvCheckTasksWaitingTermination+0x54>)
 8014a1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014a20:	4b0b      	ldr	r3, [pc, #44]	@ (8014a50 <prvCheckTasksWaitingTermination+0x58>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	3b01      	subs	r3, #1
 8014a26:	4a0a      	ldr	r2, [pc, #40]	@ (8014a50 <prvCheckTasksWaitingTermination+0x58>)
 8014a28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014a2a:	f000 fbef 	bl	801520c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014a2e:	6878      	ldr	r0, [r7, #4]
 8014a30:	f000 f810 	bl	8014a54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014a34:	4b06      	ldr	r3, [pc, #24]	@ (8014a50 <prvCheckTasksWaitingTermination+0x58>)
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d1e1      	bne.n	8014a00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014a3c:	bf00      	nop
 8014a3e:	bf00      	nop
 8014a40:	3708      	adds	r7, #8
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}
 8014a46:	bf00      	nop
 8014a48:	24001490 	.word	0x24001490
 8014a4c:	240014bc 	.word	0x240014bc
 8014a50:	240014a4 	.word	0x240014a4

08014a54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b084      	sub	sp, #16
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d108      	bne.n	8014a78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f000 fd8c 	bl	8015588 <vPortFree>
				vPortFree( pxTCB );
 8014a70:	6878      	ldr	r0, [r7, #4]
 8014a72:	f000 fd89 	bl	8015588 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014a76:	e019      	b.n	8014aac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8014a7e:	2b01      	cmp	r3, #1
 8014a80:	d103      	bne.n	8014a8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014a82:	6878      	ldr	r0, [r7, #4]
 8014a84:	f000 fd80 	bl	8015588 <vPortFree>
	}
 8014a88:	e010      	b.n	8014aac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8014a90:	2b02      	cmp	r3, #2
 8014a92:	d00b      	beq.n	8014aac <prvDeleteTCB+0x58>
	__asm volatile
 8014a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a98:	f383 8811 	msr	BASEPRI, r3
 8014a9c:	f3bf 8f6f 	isb	sy
 8014aa0:	f3bf 8f4f 	dsb	sy
 8014aa4:	60fb      	str	r3, [r7, #12]
}
 8014aa6:	bf00      	nop
 8014aa8:	bf00      	nop
 8014aaa:	e7fd      	b.n	8014aa8 <prvDeleteTCB+0x54>
	}
 8014aac:	bf00      	nop
 8014aae:	3710      	adds	r7, #16
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}

08014ab4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014ab4:	b480      	push	{r7}
 8014ab6:	b083      	sub	sp, #12
 8014ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014aba:	4b0c      	ldr	r3, [pc, #48]	@ (8014aec <prvResetNextTaskUnblockTime+0x38>)
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d104      	bne.n	8014ace <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8014af0 <prvResetNextTaskUnblockTime+0x3c>)
 8014ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8014aca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014acc:	e008      	b.n	8014ae0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ace:	4b07      	ldr	r3, [pc, #28]	@ (8014aec <prvResetNextTaskUnblockTime+0x38>)
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	68db      	ldr	r3, [r3, #12]
 8014ad4:	68db      	ldr	r3, [r3, #12]
 8014ad6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	685b      	ldr	r3, [r3, #4]
 8014adc:	4a04      	ldr	r2, [pc, #16]	@ (8014af0 <prvResetNextTaskUnblockTime+0x3c>)
 8014ade:	6013      	str	r3, [r2, #0]
}
 8014ae0:	bf00      	nop
 8014ae2:	370c      	adds	r7, #12
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aea:	4770      	bx	lr
 8014aec:	24001474 	.word	0x24001474
 8014af0:	240014dc 	.word	0x240014dc

08014af4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014af4:	b480      	push	{r7}
 8014af6:	b083      	sub	sp, #12
 8014af8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014afa:	4b0b      	ldr	r3, [pc, #44]	@ (8014b28 <xTaskGetSchedulerState+0x34>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d102      	bne.n	8014b08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014b02:	2301      	movs	r3, #1
 8014b04:	607b      	str	r3, [r7, #4]
 8014b06:	e008      	b.n	8014b1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014b08:	4b08      	ldr	r3, [pc, #32]	@ (8014b2c <xTaskGetSchedulerState+0x38>)
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d102      	bne.n	8014b16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014b10:	2302      	movs	r3, #2
 8014b12:	607b      	str	r3, [r7, #4]
 8014b14:	e001      	b.n	8014b1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014b16:	2300      	movs	r3, #0
 8014b18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014b1a:	687b      	ldr	r3, [r7, #4]
	}
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	370c      	adds	r7, #12
 8014b20:	46bd      	mov	sp, r7
 8014b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b26:	4770      	bx	lr
 8014b28:	240014c8 	.word	0x240014c8
 8014b2c:	240014e4 	.word	0x240014e4

08014b30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b084      	sub	sp, #16
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d05e      	beq.n	8014c04 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014b46:	68bb      	ldr	r3, [r7, #8]
 8014b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b4a:	4b31      	ldr	r3, [pc, #196]	@ (8014c10 <xTaskPriorityInherit+0xe0>)
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b50:	429a      	cmp	r2, r3
 8014b52:	d24e      	bcs.n	8014bf2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014b54:	68bb      	ldr	r3, [r7, #8]
 8014b56:	699b      	ldr	r3, [r3, #24]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	db06      	blt.n	8014b6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b5c:	4b2c      	ldr	r3, [pc, #176]	@ (8014c10 <xTaskPriorityInherit+0xe0>)
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b62:	f1c3 0207 	rsb	r2, r3, #7
 8014b66:	68bb      	ldr	r3, [r7, #8]
 8014b68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014b6a:	68bb      	ldr	r3, [r7, #8]
 8014b6c:	6959      	ldr	r1, [r3, #20]
 8014b6e:	68bb      	ldr	r3, [r7, #8]
 8014b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b72:	4613      	mov	r3, r2
 8014b74:	009b      	lsls	r3, r3, #2
 8014b76:	4413      	add	r3, r2
 8014b78:	009b      	lsls	r3, r3, #2
 8014b7a:	4a26      	ldr	r2, [pc, #152]	@ (8014c14 <xTaskPriorityInherit+0xe4>)
 8014b7c:	4413      	add	r3, r2
 8014b7e:	4299      	cmp	r1, r3
 8014b80:	d12f      	bne.n	8014be2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014b82:	68bb      	ldr	r3, [r7, #8]
 8014b84:	3304      	adds	r3, #4
 8014b86:	4618      	mov	r0, r3
 8014b88:	f7fe f915 	bl	8012db6 <uxListRemove>
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d10a      	bne.n	8014ba8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b96:	2201      	movs	r2, #1
 8014b98:	fa02 f303 	lsl.w	r3, r2, r3
 8014b9c:	43da      	mvns	r2, r3
 8014b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8014c18 <xTaskPriorityInherit+0xe8>)
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	4013      	ands	r3, r2
 8014ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8014c18 <xTaskPriorityInherit+0xe8>)
 8014ba6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014ba8:	4b19      	ldr	r3, [pc, #100]	@ (8014c10 <xTaskPriorityInherit+0xe0>)
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014bae:	68bb      	ldr	r3, [r7, #8]
 8014bb0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014bb2:	68bb      	ldr	r3, [r7, #8]
 8014bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014bb6:	2201      	movs	r2, #1
 8014bb8:	409a      	lsls	r2, r3
 8014bba:	4b17      	ldr	r3, [pc, #92]	@ (8014c18 <xTaskPriorityInherit+0xe8>)
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	4313      	orrs	r3, r2
 8014bc0:	4a15      	ldr	r2, [pc, #84]	@ (8014c18 <xTaskPriorityInherit+0xe8>)
 8014bc2:	6013      	str	r3, [r2, #0]
 8014bc4:	68bb      	ldr	r3, [r7, #8]
 8014bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014bc8:	4613      	mov	r3, r2
 8014bca:	009b      	lsls	r3, r3, #2
 8014bcc:	4413      	add	r3, r2
 8014bce:	009b      	lsls	r3, r3, #2
 8014bd0:	4a10      	ldr	r2, [pc, #64]	@ (8014c14 <xTaskPriorityInherit+0xe4>)
 8014bd2:	441a      	add	r2, r3
 8014bd4:	68bb      	ldr	r3, [r7, #8]
 8014bd6:	3304      	adds	r3, #4
 8014bd8:	4619      	mov	r1, r3
 8014bda:	4610      	mov	r0, r2
 8014bdc:	f7fe f88e 	bl	8012cfc <vListInsertEnd>
 8014be0:	e004      	b.n	8014bec <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014be2:	4b0b      	ldr	r3, [pc, #44]	@ (8014c10 <xTaskPriorityInherit+0xe0>)
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014be8:	68bb      	ldr	r3, [r7, #8]
 8014bea:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014bec:	2301      	movs	r3, #1
 8014bee:	60fb      	str	r3, [r7, #12]
 8014bf0:	e008      	b.n	8014c04 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014bf2:	68bb      	ldr	r3, [r7, #8]
 8014bf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014bf6:	4b06      	ldr	r3, [pc, #24]	@ (8014c10 <xTaskPriorityInherit+0xe0>)
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014bfc:	429a      	cmp	r2, r3
 8014bfe:	d201      	bcs.n	8014c04 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014c00:	2301      	movs	r3, #1
 8014c02:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014c04:	68fb      	ldr	r3, [r7, #12]
	}
 8014c06:	4618      	mov	r0, r3
 8014c08:	3710      	adds	r7, #16
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	bd80      	pop	{r7, pc}
 8014c0e:	bf00      	nop
 8014c10:	240013bc 	.word	0x240013bc
 8014c14:	240013c0 	.word	0x240013c0
 8014c18:	240014c4 	.word	0x240014c4

08014c1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b086      	sub	sp, #24
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014c28:	2300      	movs	r3, #0
 8014c2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d070      	beq.n	8014d14 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014c32:	4b3b      	ldr	r3, [pc, #236]	@ (8014d20 <xTaskPriorityDisinherit+0x104>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	693a      	ldr	r2, [r7, #16]
 8014c38:	429a      	cmp	r2, r3
 8014c3a:	d00b      	beq.n	8014c54 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c40:	f383 8811 	msr	BASEPRI, r3
 8014c44:	f3bf 8f6f 	isb	sy
 8014c48:	f3bf 8f4f 	dsb	sy
 8014c4c:	60fb      	str	r3, [r7, #12]
}
 8014c4e:	bf00      	nop
 8014c50:	bf00      	nop
 8014c52:	e7fd      	b.n	8014c50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014c54:	693b      	ldr	r3, [r7, #16]
 8014c56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d10b      	bne.n	8014c74 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8014c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c60:	f383 8811 	msr	BASEPRI, r3
 8014c64:	f3bf 8f6f 	isb	sy
 8014c68:	f3bf 8f4f 	dsb	sy
 8014c6c:	60bb      	str	r3, [r7, #8]
}
 8014c6e:	bf00      	nop
 8014c70:	bf00      	nop
 8014c72:	e7fd      	b.n	8014c70 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8014c74:	693b      	ldr	r3, [r7, #16]
 8014c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014c78:	1e5a      	subs	r2, r3, #1
 8014c7a:	693b      	ldr	r3, [r7, #16]
 8014c7c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014c7e:	693b      	ldr	r3, [r7, #16]
 8014c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c82:	693b      	ldr	r3, [r7, #16]
 8014c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014c86:	429a      	cmp	r2, r3
 8014c88:	d044      	beq.n	8014d14 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014c8a:	693b      	ldr	r3, [r7, #16]
 8014c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d140      	bne.n	8014d14 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014c92:	693b      	ldr	r3, [r7, #16]
 8014c94:	3304      	adds	r3, #4
 8014c96:	4618      	mov	r0, r3
 8014c98:	f7fe f88d 	bl	8012db6 <uxListRemove>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d115      	bne.n	8014cce <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014ca2:	693b      	ldr	r3, [r7, #16]
 8014ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ca6:	491f      	ldr	r1, [pc, #124]	@ (8014d24 <xTaskPriorityDisinherit+0x108>)
 8014ca8:	4613      	mov	r3, r2
 8014caa:	009b      	lsls	r3, r3, #2
 8014cac:	4413      	add	r3, r2
 8014cae:	009b      	lsls	r3, r3, #2
 8014cb0:	440b      	add	r3, r1
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d10a      	bne.n	8014cce <xTaskPriorityDisinherit+0xb2>
 8014cb8:	693b      	ldr	r3, [r7, #16]
 8014cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cbc:	2201      	movs	r2, #1
 8014cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8014cc2:	43da      	mvns	r2, r3
 8014cc4:	4b18      	ldr	r3, [pc, #96]	@ (8014d28 <xTaskPriorityDisinherit+0x10c>)
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	4013      	ands	r3, r2
 8014cca:	4a17      	ldr	r2, [pc, #92]	@ (8014d28 <xTaskPriorityDisinherit+0x10c>)
 8014ccc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014cd2:	693b      	ldr	r3, [r7, #16]
 8014cd4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cda:	f1c3 0207 	rsb	r2, r3, #7
 8014cde:	693b      	ldr	r3, [r7, #16]
 8014ce0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014ce2:	693b      	ldr	r3, [r7, #16]
 8014ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ce6:	2201      	movs	r2, #1
 8014ce8:	409a      	lsls	r2, r3
 8014cea:	4b0f      	ldr	r3, [pc, #60]	@ (8014d28 <xTaskPriorityDisinherit+0x10c>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	4313      	orrs	r3, r2
 8014cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8014d28 <xTaskPriorityDisinherit+0x10c>)
 8014cf2:	6013      	str	r3, [r2, #0]
 8014cf4:	693b      	ldr	r3, [r7, #16]
 8014cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014cf8:	4613      	mov	r3, r2
 8014cfa:	009b      	lsls	r3, r3, #2
 8014cfc:	4413      	add	r3, r2
 8014cfe:	009b      	lsls	r3, r3, #2
 8014d00:	4a08      	ldr	r2, [pc, #32]	@ (8014d24 <xTaskPriorityDisinherit+0x108>)
 8014d02:	441a      	add	r2, r3
 8014d04:	693b      	ldr	r3, [r7, #16]
 8014d06:	3304      	adds	r3, #4
 8014d08:	4619      	mov	r1, r3
 8014d0a:	4610      	mov	r0, r2
 8014d0c:	f7fd fff6 	bl	8012cfc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014d10:	2301      	movs	r3, #1
 8014d12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014d14:	697b      	ldr	r3, [r7, #20]
	}
 8014d16:	4618      	mov	r0, r3
 8014d18:	3718      	adds	r7, #24
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}
 8014d1e:	bf00      	nop
 8014d20:	240013bc 	.word	0x240013bc
 8014d24:	240013c0 	.word	0x240013c0
 8014d28:	240014c4 	.word	0x240014c4

08014d2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014d2c:	b580      	push	{r7, lr}
 8014d2e:	b088      	sub	sp, #32
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
 8014d34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014d3a:	2301      	movs	r3, #1
 8014d3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d079      	beq.n	8014e38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014d44:	69bb      	ldr	r3, [r7, #24]
 8014d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d10b      	bne.n	8014d64 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8014d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d50:	f383 8811 	msr	BASEPRI, r3
 8014d54:	f3bf 8f6f 	isb	sy
 8014d58:	f3bf 8f4f 	dsb	sy
 8014d5c:	60fb      	str	r3, [r7, #12]
}
 8014d5e:	bf00      	nop
 8014d60:	bf00      	nop
 8014d62:	e7fd      	b.n	8014d60 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014d64:	69bb      	ldr	r3, [r7, #24]
 8014d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d68:	683a      	ldr	r2, [r7, #0]
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	d902      	bls.n	8014d74 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	61fb      	str	r3, [r7, #28]
 8014d72:	e002      	b.n	8014d7a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014d74:	69bb      	ldr	r3, [r7, #24]
 8014d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d78:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014d7a:	69bb      	ldr	r3, [r7, #24]
 8014d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d7e:	69fa      	ldr	r2, [r7, #28]
 8014d80:	429a      	cmp	r2, r3
 8014d82:	d059      	beq.n	8014e38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014d84:	69bb      	ldr	r3, [r7, #24]
 8014d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014d88:	697a      	ldr	r2, [r7, #20]
 8014d8a:	429a      	cmp	r2, r3
 8014d8c:	d154      	bne.n	8014e38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8014e40 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	69ba      	ldr	r2, [r7, #24]
 8014d94:	429a      	cmp	r2, r3
 8014d96:	d10b      	bne.n	8014db0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8014d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d9c:	f383 8811 	msr	BASEPRI, r3
 8014da0:	f3bf 8f6f 	isb	sy
 8014da4:	f3bf 8f4f 	dsb	sy
 8014da8:	60bb      	str	r3, [r7, #8]
}
 8014daa:	bf00      	nop
 8014dac:	bf00      	nop
 8014dae:	e7fd      	b.n	8014dac <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014db0:	69bb      	ldr	r3, [r7, #24]
 8014db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014db4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014db6:	69bb      	ldr	r3, [r7, #24]
 8014db8:	69fa      	ldr	r2, [r7, #28]
 8014dba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014dbc:	69bb      	ldr	r3, [r7, #24]
 8014dbe:	699b      	ldr	r3, [r3, #24]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	db04      	blt.n	8014dce <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014dc4:	69fb      	ldr	r3, [r7, #28]
 8014dc6:	f1c3 0207 	rsb	r2, r3, #7
 8014dca:	69bb      	ldr	r3, [r7, #24]
 8014dcc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014dce:	69bb      	ldr	r3, [r7, #24]
 8014dd0:	6959      	ldr	r1, [r3, #20]
 8014dd2:	693a      	ldr	r2, [r7, #16]
 8014dd4:	4613      	mov	r3, r2
 8014dd6:	009b      	lsls	r3, r3, #2
 8014dd8:	4413      	add	r3, r2
 8014dda:	009b      	lsls	r3, r3, #2
 8014ddc:	4a19      	ldr	r2, [pc, #100]	@ (8014e44 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8014dde:	4413      	add	r3, r2
 8014de0:	4299      	cmp	r1, r3
 8014de2:	d129      	bne.n	8014e38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014de4:	69bb      	ldr	r3, [r7, #24]
 8014de6:	3304      	adds	r3, #4
 8014de8:	4618      	mov	r0, r3
 8014dea:	f7fd ffe4 	bl	8012db6 <uxListRemove>
 8014dee:	4603      	mov	r3, r0
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d10a      	bne.n	8014e0a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8014df4:	69bb      	ldr	r3, [r7, #24]
 8014df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014df8:	2201      	movs	r2, #1
 8014dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8014dfe:	43da      	mvns	r2, r3
 8014e00:	4b11      	ldr	r3, [pc, #68]	@ (8014e48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	4013      	ands	r3, r2
 8014e06:	4a10      	ldr	r2, [pc, #64]	@ (8014e48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8014e08:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014e0a:	69bb      	ldr	r3, [r7, #24]
 8014e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e0e:	2201      	movs	r2, #1
 8014e10:	409a      	lsls	r2, r3
 8014e12:	4b0d      	ldr	r3, [pc, #52]	@ (8014e48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	4313      	orrs	r3, r2
 8014e18:	4a0b      	ldr	r2, [pc, #44]	@ (8014e48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8014e1a:	6013      	str	r3, [r2, #0]
 8014e1c:	69bb      	ldr	r3, [r7, #24]
 8014e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e20:	4613      	mov	r3, r2
 8014e22:	009b      	lsls	r3, r3, #2
 8014e24:	4413      	add	r3, r2
 8014e26:	009b      	lsls	r3, r3, #2
 8014e28:	4a06      	ldr	r2, [pc, #24]	@ (8014e44 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8014e2a:	441a      	add	r2, r3
 8014e2c:	69bb      	ldr	r3, [r7, #24]
 8014e2e:	3304      	adds	r3, #4
 8014e30:	4619      	mov	r1, r3
 8014e32:	4610      	mov	r0, r2
 8014e34:	f7fd ff62 	bl	8012cfc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014e38:	bf00      	nop
 8014e3a:	3720      	adds	r7, #32
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd80      	pop	{r7, pc}
 8014e40:	240013bc 	.word	0x240013bc
 8014e44:	240013c0 	.word	0x240013c0
 8014e48:	240014c4 	.word	0x240014c4

08014e4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014e4c:	b480      	push	{r7}
 8014e4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014e50:	4b07      	ldr	r3, [pc, #28]	@ (8014e70 <pvTaskIncrementMutexHeldCount+0x24>)
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d004      	beq.n	8014e62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014e58:	4b05      	ldr	r3, [pc, #20]	@ (8014e70 <pvTaskIncrementMutexHeldCount+0x24>)
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014e5e:	3201      	adds	r2, #1
 8014e60:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8014e62:	4b03      	ldr	r3, [pc, #12]	@ (8014e70 <pvTaskIncrementMutexHeldCount+0x24>)
 8014e64:	681b      	ldr	r3, [r3, #0]
	}
 8014e66:	4618      	mov	r0, r3
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6e:	4770      	bx	lr
 8014e70:	240013bc 	.word	0x240013bc

08014e74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b084      	sub	sp, #16
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
 8014e7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014e7e:	4b29      	ldr	r3, [pc, #164]	@ (8014f24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014e84:	4b28      	ldr	r3, [pc, #160]	@ (8014f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	3304      	adds	r3, #4
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	f7fd ff93 	bl	8012db6 <uxListRemove>
 8014e90:	4603      	mov	r3, r0
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d10b      	bne.n	8014eae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014e96:	4b24      	ldr	r3, [pc, #144]	@ (8014f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e9c:	2201      	movs	r2, #1
 8014e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8014ea2:	43da      	mvns	r2, r3
 8014ea4:	4b21      	ldr	r3, [pc, #132]	@ (8014f2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	4013      	ands	r3, r2
 8014eaa:	4a20      	ldr	r2, [pc, #128]	@ (8014f2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8014eac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014eb4:	d10a      	bne.n	8014ecc <prvAddCurrentTaskToDelayedList+0x58>
 8014eb6:	683b      	ldr	r3, [r7, #0]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d007      	beq.n	8014ecc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8014f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	3304      	adds	r3, #4
 8014ec2:	4619      	mov	r1, r3
 8014ec4:	481a      	ldr	r0, [pc, #104]	@ (8014f30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014ec6:	f7fd ff19 	bl	8012cfc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014eca:	e026      	b.n	8014f1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014ecc:	68fa      	ldr	r2, [r7, #12]
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	4413      	add	r3, r2
 8014ed2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014ed4:	4b14      	ldr	r3, [pc, #80]	@ (8014f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	68ba      	ldr	r2, [r7, #8]
 8014eda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014edc:	68ba      	ldr	r2, [r7, #8]
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	429a      	cmp	r2, r3
 8014ee2:	d209      	bcs.n	8014ef8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014ee4:	4b13      	ldr	r3, [pc, #76]	@ (8014f34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014ee6:	681a      	ldr	r2, [r3, #0]
 8014ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8014f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	3304      	adds	r3, #4
 8014eee:	4619      	mov	r1, r3
 8014ef0:	4610      	mov	r0, r2
 8014ef2:	f7fd ff27 	bl	8012d44 <vListInsert>
}
 8014ef6:	e010      	b.n	8014f1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8014f38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014efa:	681a      	ldr	r2, [r3, #0]
 8014efc:	4b0a      	ldr	r3, [pc, #40]	@ (8014f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	3304      	adds	r3, #4
 8014f02:	4619      	mov	r1, r3
 8014f04:	4610      	mov	r0, r2
 8014f06:	f7fd ff1d 	bl	8012d44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8014f3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	68ba      	ldr	r2, [r7, #8]
 8014f10:	429a      	cmp	r2, r3
 8014f12:	d202      	bcs.n	8014f1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014f14:	4a09      	ldr	r2, [pc, #36]	@ (8014f3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	6013      	str	r3, [r2, #0]
}
 8014f1a:	bf00      	nop
 8014f1c:	3710      	adds	r7, #16
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	bd80      	pop	{r7, pc}
 8014f22:	bf00      	nop
 8014f24:	240014c0 	.word	0x240014c0
 8014f28:	240013bc 	.word	0x240013bc
 8014f2c:	240014c4 	.word	0x240014c4
 8014f30:	240014a8 	.word	0x240014a8
 8014f34:	24001478 	.word	0x24001478
 8014f38:	24001474 	.word	0x24001474
 8014f3c:	240014dc 	.word	0x240014dc

08014f40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014f40:	b480      	push	{r7}
 8014f42:	b085      	sub	sp, #20
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	60f8      	str	r0, [r7, #12]
 8014f48:	60b9      	str	r1, [r7, #8]
 8014f4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	3b04      	subs	r3, #4
 8014f50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014f58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	3b04      	subs	r3, #4
 8014f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	f023 0201 	bic.w	r2, r3, #1
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	3b04      	subs	r3, #4
 8014f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014f70:	4a0c      	ldr	r2, [pc, #48]	@ (8014fa4 <pxPortInitialiseStack+0x64>)
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	3b14      	subs	r3, #20
 8014f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014f7c:	687a      	ldr	r2, [r7, #4]
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	3b04      	subs	r3, #4
 8014f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	f06f 0202 	mvn.w	r2, #2
 8014f8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	3b20      	subs	r3, #32
 8014f94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014f96:	68fb      	ldr	r3, [r7, #12]
}
 8014f98:	4618      	mov	r0, r3
 8014f9a:	3714      	adds	r7, #20
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa2:	4770      	bx	lr
 8014fa4:	08014fa9 	.word	0x08014fa9

08014fa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014fa8:	b480      	push	{r7}
 8014faa:	b085      	sub	sp, #20
 8014fac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014fae:	2300      	movs	r3, #0
 8014fb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014fb2:	4b13      	ldr	r3, [pc, #76]	@ (8015000 <prvTaskExitError+0x58>)
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fba:	d00b      	beq.n	8014fd4 <prvTaskExitError+0x2c>
	__asm volatile
 8014fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fc0:	f383 8811 	msr	BASEPRI, r3
 8014fc4:	f3bf 8f6f 	isb	sy
 8014fc8:	f3bf 8f4f 	dsb	sy
 8014fcc:	60fb      	str	r3, [r7, #12]
}
 8014fce:	bf00      	nop
 8014fd0:	bf00      	nop
 8014fd2:	e7fd      	b.n	8014fd0 <prvTaskExitError+0x28>
	__asm volatile
 8014fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fd8:	f383 8811 	msr	BASEPRI, r3
 8014fdc:	f3bf 8f6f 	isb	sy
 8014fe0:	f3bf 8f4f 	dsb	sy
 8014fe4:	60bb      	str	r3, [r7, #8]
}
 8014fe6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014fe8:	bf00      	nop
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d0fc      	beq.n	8014fea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014ff0:	bf00      	nop
 8014ff2:	bf00      	nop
 8014ff4:	3714      	adds	r7, #20
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffc:	4770      	bx	lr
 8014ffe:	bf00      	nop
 8015000:	24000208 	.word	0x24000208
	...

08015010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015010:	4b07      	ldr	r3, [pc, #28]	@ (8015030 <pxCurrentTCBConst2>)
 8015012:	6819      	ldr	r1, [r3, #0]
 8015014:	6808      	ldr	r0, [r1, #0]
 8015016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801501a:	f380 8809 	msr	PSP, r0
 801501e:	f3bf 8f6f 	isb	sy
 8015022:	f04f 0000 	mov.w	r0, #0
 8015026:	f380 8811 	msr	BASEPRI, r0
 801502a:	4770      	bx	lr
 801502c:	f3af 8000 	nop.w

08015030 <pxCurrentTCBConst2>:
 8015030:	240013bc 	.word	0x240013bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015034:	bf00      	nop
 8015036:	bf00      	nop

08015038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015038:	4808      	ldr	r0, [pc, #32]	@ (801505c <prvPortStartFirstTask+0x24>)
 801503a:	6800      	ldr	r0, [r0, #0]
 801503c:	6800      	ldr	r0, [r0, #0]
 801503e:	f380 8808 	msr	MSP, r0
 8015042:	f04f 0000 	mov.w	r0, #0
 8015046:	f380 8814 	msr	CONTROL, r0
 801504a:	b662      	cpsie	i
 801504c:	b661      	cpsie	f
 801504e:	f3bf 8f4f 	dsb	sy
 8015052:	f3bf 8f6f 	isb	sy
 8015056:	df00      	svc	0
 8015058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801505a:	bf00      	nop
 801505c:	e000ed08 	.word	0xe000ed08

08015060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b086      	sub	sp, #24
 8015064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015066:	4b47      	ldr	r3, [pc, #284]	@ (8015184 <xPortStartScheduler+0x124>)
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	4a47      	ldr	r2, [pc, #284]	@ (8015188 <xPortStartScheduler+0x128>)
 801506c:	4293      	cmp	r3, r2
 801506e:	d10b      	bne.n	8015088 <xPortStartScheduler+0x28>
	__asm volatile
 8015070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015074:	f383 8811 	msr	BASEPRI, r3
 8015078:	f3bf 8f6f 	isb	sy
 801507c:	f3bf 8f4f 	dsb	sy
 8015080:	613b      	str	r3, [r7, #16]
}
 8015082:	bf00      	nop
 8015084:	bf00      	nop
 8015086:	e7fd      	b.n	8015084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015088:	4b3e      	ldr	r3, [pc, #248]	@ (8015184 <xPortStartScheduler+0x124>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	4a3f      	ldr	r2, [pc, #252]	@ (801518c <xPortStartScheduler+0x12c>)
 801508e:	4293      	cmp	r3, r2
 8015090:	d10b      	bne.n	80150aa <xPortStartScheduler+0x4a>
	__asm volatile
 8015092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015096:	f383 8811 	msr	BASEPRI, r3
 801509a:	f3bf 8f6f 	isb	sy
 801509e:	f3bf 8f4f 	dsb	sy
 80150a2:	60fb      	str	r3, [r7, #12]
}
 80150a4:	bf00      	nop
 80150a6:	bf00      	nop
 80150a8:	e7fd      	b.n	80150a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80150aa:	4b39      	ldr	r3, [pc, #228]	@ (8015190 <xPortStartScheduler+0x130>)
 80150ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80150ae:	697b      	ldr	r3, [r7, #20]
 80150b0:	781b      	ldrb	r3, [r3, #0]
 80150b2:	b2db      	uxtb	r3, r3
 80150b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80150b6:	697b      	ldr	r3, [r7, #20]
 80150b8:	22ff      	movs	r2, #255	@ 0xff
 80150ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	781b      	ldrb	r3, [r3, #0]
 80150c0:	b2db      	uxtb	r3, r3
 80150c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80150c4:	78fb      	ldrb	r3, [r7, #3]
 80150c6:	b2db      	uxtb	r3, r3
 80150c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80150cc:	b2da      	uxtb	r2, r3
 80150ce:	4b31      	ldr	r3, [pc, #196]	@ (8015194 <xPortStartScheduler+0x134>)
 80150d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80150d2:	4b31      	ldr	r3, [pc, #196]	@ (8015198 <xPortStartScheduler+0x138>)
 80150d4:	2207      	movs	r2, #7
 80150d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80150d8:	e009      	b.n	80150ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80150da:	4b2f      	ldr	r3, [pc, #188]	@ (8015198 <xPortStartScheduler+0x138>)
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	3b01      	subs	r3, #1
 80150e0:	4a2d      	ldr	r2, [pc, #180]	@ (8015198 <xPortStartScheduler+0x138>)
 80150e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80150e4:	78fb      	ldrb	r3, [r7, #3]
 80150e6:	b2db      	uxtb	r3, r3
 80150e8:	005b      	lsls	r3, r3, #1
 80150ea:	b2db      	uxtb	r3, r3
 80150ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80150ee:	78fb      	ldrb	r3, [r7, #3]
 80150f0:	b2db      	uxtb	r3, r3
 80150f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80150f6:	2b80      	cmp	r3, #128	@ 0x80
 80150f8:	d0ef      	beq.n	80150da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80150fa:	4b27      	ldr	r3, [pc, #156]	@ (8015198 <xPortStartScheduler+0x138>)
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	f1c3 0307 	rsb	r3, r3, #7
 8015102:	2b04      	cmp	r3, #4
 8015104:	d00b      	beq.n	801511e <xPortStartScheduler+0xbe>
	__asm volatile
 8015106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801510a:	f383 8811 	msr	BASEPRI, r3
 801510e:	f3bf 8f6f 	isb	sy
 8015112:	f3bf 8f4f 	dsb	sy
 8015116:	60bb      	str	r3, [r7, #8]
}
 8015118:	bf00      	nop
 801511a:	bf00      	nop
 801511c:	e7fd      	b.n	801511a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801511e:	4b1e      	ldr	r3, [pc, #120]	@ (8015198 <xPortStartScheduler+0x138>)
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	021b      	lsls	r3, r3, #8
 8015124:	4a1c      	ldr	r2, [pc, #112]	@ (8015198 <xPortStartScheduler+0x138>)
 8015126:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015128:	4b1b      	ldr	r3, [pc, #108]	@ (8015198 <xPortStartScheduler+0x138>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015130:	4a19      	ldr	r2, [pc, #100]	@ (8015198 <xPortStartScheduler+0x138>)
 8015132:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	b2da      	uxtb	r2, r3
 8015138:	697b      	ldr	r3, [r7, #20]
 801513a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801513c:	4b17      	ldr	r3, [pc, #92]	@ (801519c <xPortStartScheduler+0x13c>)
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	4a16      	ldr	r2, [pc, #88]	@ (801519c <xPortStartScheduler+0x13c>)
 8015142:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015146:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015148:	4b14      	ldr	r3, [pc, #80]	@ (801519c <xPortStartScheduler+0x13c>)
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	4a13      	ldr	r2, [pc, #76]	@ (801519c <xPortStartScheduler+0x13c>)
 801514e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015152:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015154:	f000 f8da 	bl	801530c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015158:	4b11      	ldr	r3, [pc, #68]	@ (80151a0 <xPortStartScheduler+0x140>)
 801515a:	2200      	movs	r2, #0
 801515c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801515e:	f000 f8f9 	bl	8015354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015162:	4b10      	ldr	r3, [pc, #64]	@ (80151a4 <xPortStartScheduler+0x144>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	4a0f      	ldr	r2, [pc, #60]	@ (80151a4 <xPortStartScheduler+0x144>)
 8015168:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801516c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801516e:	f7ff ff63 	bl	8015038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015172:	f7ff fa7d 	bl	8014670 <vTaskSwitchContext>
	prvTaskExitError();
 8015176:	f7ff ff17 	bl	8014fa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801517a:	2300      	movs	r3, #0
}
 801517c:	4618      	mov	r0, r3
 801517e:	3718      	adds	r7, #24
 8015180:	46bd      	mov	sp, r7
 8015182:	bd80      	pop	{r7, pc}
 8015184:	e000ed00 	.word	0xe000ed00
 8015188:	410fc271 	.word	0x410fc271
 801518c:	410fc270 	.word	0x410fc270
 8015190:	e000e400 	.word	0xe000e400
 8015194:	240014e8 	.word	0x240014e8
 8015198:	240014ec 	.word	0x240014ec
 801519c:	e000ed20 	.word	0xe000ed20
 80151a0:	24000208 	.word	0x24000208
 80151a4:	e000ef34 	.word	0xe000ef34

080151a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80151a8:	b480      	push	{r7}
 80151aa:	b083      	sub	sp, #12
 80151ac:	af00      	add	r7, sp, #0
	__asm volatile
 80151ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151b2:	f383 8811 	msr	BASEPRI, r3
 80151b6:	f3bf 8f6f 	isb	sy
 80151ba:	f3bf 8f4f 	dsb	sy
 80151be:	607b      	str	r3, [r7, #4]
}
 80151c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80151c2:	4b10      	ldr	r3, [pc, #64]	@ (8015204 <vPortEnterCritical+0x5c>)
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	3301      	adds	r3, #1
 80151c8:	4a0e      	ldr	r2, [pc, #56]	@ (8015204 <vPortEnterCritical+0x5c>)
 80151ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80151cc:	4b0d      	ldr	r3, [pc, #52]	@ (8015204 <vPortEnterCritical+0x5c>)
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	2b01      	cmp	r3, #1
 80151d2:	d110      	bne.n	80151f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80151d4:	4b0c      	ldr	r3, [pc, #48]	@ (8015208 <vPortEnterCritical+0x60>)
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	b2db      	uxtb	r3, r3
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d00b      	beq.n	80151f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80151de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151e2:	f383 8811 	msr	BASEPRI, r3
 80151e6:	f3bf 8f6f 	isb	sy
 80151ea:	f3bf 8f4f 	dsb	sy
 80151ee:	603b      	str	r3, [r7, #0]
}
 80151f0:	bf00      	nop
 80151f2:	bf00      	nop
 80151f4:	e7fd      	b.n	80151f2 <vPortEnterCritical+0x4a>
	}
}
 80151f6:	bf00      	nop
 80151f8:	370c      	adds	r7, #12
 80151fa:	46bd      	mov	sp, r7
 80151fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015200:	4770      	bx	lr
 8015202:	bf00      	nop
 8015204:	24000208 	.word	0x24000208
 8015208:	e000ed04 	.word	0xe000ed04

0801520c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801520c:	b480      	push	{r7}
 801520e:	b083      	sub	sp, #12
 8015210:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015212:	4b12      	ldr	r3, [pc, #72]	@ (801525c <vPortExitCritical+0x50>)
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d10b      	bne.n	8015232 <vPortExitCritical+0x26>
	__asm volatile
 801521a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801521e:	f383 8811 	msr	BASEPRI, r3
 8015222:	f3bf 8f6f 	isb	sy
 8015226:	f3bf 8f4f 	dsb	sy
 801522a:	607b      	str	r3, [r7, #4]
}
 801522c:	bf00      	nop
 801522e:	bf00      	nop
 8015230:	e7fd      	b.n	801522e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015232:	4b0a      	ldr	r3, [pc, #40]	@ (801525c <vPortExitCritical+0x50>)
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	3b01      	subs	r3, #1
 8015238:	4a08      	ldr	r2, [pc, #32]	@ (801525c <vPortExitCritical+0x50>)
 801523a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801523c:	4b07      	ldr	r3, [pc, #28]	@ (801525c <vPortExitCritical+0x50>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d105      	bne.n	8015250 <vPortExitCritical+0x44>
 8015244:	2300      	movs	r3, #0
 8015246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015248:	683b      	ldr	r3, [r7, #0]
 801524a:	f383 8811 	msr	BASEPRI, r3
}
 801524e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015250:	bf00      	nop
 8015252:	370c      	adds	r7, #12
 8015254:	46bd      	mov	sp, r7
 8015256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525a:	4770      	bx	lr
 801525c:	24000208 	.word	0x24000208

08015260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015260:	f3ef 8009 	mrs	r0, PSP
 8015264:	f3bf 8f6f 	isb	sy
 8015268:	4b15      	ldr	r3, [pc, #84]	@ (80152c0 <pxCurrentTCBConst>)
 801526a:	681a      	ldr	r2, [r3, #0]
 801526c:	f01e 0f10 	tst.w	lr, #16
 8015270:	bf08      	it	eq
 8015272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801527a:	6010      	str	r0, [r2, #0]
 801527c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015280:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015284:	f380 8811 	msr	BASEPRI, r0
 8015288:	f3bf 8f4f 	dsb	sy
 801528c:	f3bf 8f6f 	isb	sy
 8015290:	f7ff f9ee 	bl	8014670 <vTaskSwitchContext>
 8015294:	f04f 0000 	mov.w	r0, #0
 8015298:	f380 8811 	msr	BASEPRI, r0
 801529c:	bc09      	pop	{r0, r3}
 801529e:	6819      	ldr	r1, [r3, #0]
 80152a0:	6808      	ldr	r0, [r1, #0]
 80152a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152a6:	f01e 0f10 	tst.w	lr, #16
 80152aa:	bf08      	it	eq
 80152ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80152b0:	f380 8809 	msr	PSP, r0
 80152b4:	f3bf 8f6f 	isb	sy
 80152b8:	4770      	bx	lr
 80152ba:	bf00      	nop
 80152bc:	f3af 8000 	nop.w

080152c0 <pxCurrentTCBConst>:
 80152c0:	240013bc 	.word	0x240013bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80152c4:	bf00      	nop
 80152c6:	bf00      	nop

080152c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b082      	sub	sp, #8
 80152cc:	af00      	add	r7, sp, #0
	__asm volatile
 80152ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152d2:	f383 8811 	msr	BASEPRI, r3
 80152d6:	f3bf 8f6f 	isb	sy
 80152da:	f3bf 8f4f 	dsb	sy
 80152de:	607b      	str	r3, [r7, #4]
}
 80152e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80152e2:	f7ff f90b 	bl	80144fc <xTaskIncrementTick>
 80152e6:	4603      	mov	r3, r0
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d003      	beq.n	80152f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80152ec:	4b06      	ldr	r3, [pc, #24]	@ (8015308 <SysTick_Handler+0x40>)
 80152ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80152f2:	601a      	str	r2, [r3, #0]
 80152f4:	2300      	movs	r3, #0
 80152f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80152f8:	683b      	ldr	r3, [r7, #0]
 80152fa:	f383 8811 	msr	BASEPRI, r3
}
 80152fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015300:	bf00      	nop
 8015302:	3708      	adds	r7, #8
 8015304:	46bd      	mov	sp, r7
 8015306:	bd80      	pop	{r7, pc}
 8015308:	e000ed04 	.word	0xe000ed04

0801530c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801530c:	b480      	push	{r7}
 801530e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015310:	4b0b      	ldr	r3, [pc, #44]	@ (8015340 <vPortSetupTimerInterrupt+0x34>)
 8015312:	2200      	movs	r2, #0
 8015314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015316:	4b0b      	ldr	r3, [pc, #44]	@ (8015344 <vPortSetupTimerInterrupt+0x38>)
 8015318:	2200      	movs	r2, #0
 801531a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801531c:	4b0a      	ldr	r3, [pc, #40]	@ (8015348 <vPortSetupTimerInterrupt+0x3c>)
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	4a0a      	ldr	r2, [pc, #40]	@ (801534c <vPortSetupTimerInterrupt+0x40>)
 8015322:	fba2 2303 	umull	r2, r3, r2, r3
 8015326:	099b      	lsrs	r3, r3, #6
 8015328:	4a09      	ldr	r2, [pc, #36]	@ (8015350 <vPortSetupTimerInterrupt+0x44>)
 801532a:	3b01      	subs	r3, #1
 801532c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801532e:	4b04      	ldr	r3, [pc, #16]	@ (8015340 <vPortSetupTimerInterrupt+0x34>)
 8015330:	2207      	movs	r2, #7
 8015332:	601a      	str	r2, [r3, #0]
}
 8015334:	bf00      	nop
 8015336:	46bd      	mov	sp, r7
 8015338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801533c:	4770      	bx	lr
 801533e:	bf00      	nop
 8015340:	e000e010 	.word	0xe000e010
 8015344:	e000e018 	.word	0xe000e018
 8015348:	240001e4 	.word	0x240001e4
 801534c:	10624dd3 	.word	0x10624dd3
 8015350:	e000e014 	.word	0xe000e014

08015354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015354:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8015364 <vPortEnableVFP+0x10>
 8015358:	6801      	ldr	r1, [r0, #0]
 801535a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801535e:	6001      	str	r1, [r0, #0]
 8015360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015362:	bf00      	nop
 8015364:	e000ed88 	.word	0xe000ed88

08015368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015368:	b480      	push	{r7}
 801536a:	b085      	sub	sp, #20
 801536c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801536e:	f3ef 8305 	mrs	r3, IPSR
 8015372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	2b0f      	cmp	r3, #15
 8015378:	d915      	bls.n	80153a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801537a:	4a18      	ldr	r2, [pc, #96]	@ (80153dc <vPortValidateInterruptPriority+0x74>)
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	4413      	add	r3, r2
 8015380:	781b      	ldrb	r3, [r3, #0]
 8015382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015384:	4b16      	ldr	r3, [pc, #88]	@ (80153e0 <vPortValidateInterruptPriority+0x78>)
 8015386:	781b      	ldrb	r3, [r3, #0]
 8015388:	7afa      	ldrb	r2, [r7, #11]
 801538a:	429a      	cmp	r2, r3
 801538c:	d20b      	bcs.n	80153a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015392:	f383 8811 	msr	BASEPRI, r3
 8015396:	f3bf 8f6f 	isb	sy
 801539a:	f3bf 8f4f 	dsb	sy
 801539e:	607b      	str	r3, [r7, #4]
}
 80153a0:	bf00      	nop
 80153a2:	bf00      	nop
 80153a4:	e7fd      	b.n	80153a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80153a6:	4b0f      	ldr	r3, [pc, #60]	@ (80153e4 <vPortValidateInterruptPriority+0x7c>)
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80153ae:	4b0e      	ldr	r3, [pc, #56]	@ (80153e8 <vPortValidateInterruptPriority+0x80>)
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	429a      	cmp	r2, r3
 80153b4:	d90b      	bls.n	80153ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80153b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153ba:	f383 8811 	msr	BASEPRI, r3
 80153be:	f3bf 8f6f 	isb	sy
 80153c2:	f3bf 8f4f 	dsb	sy
 80153c6:	603b      	str	r3, [r7, #0]
}
 80153c8:	bf00      	nop
 80153ca:	bf00      	nop
 80153cc:	e7fd      	b.n	80153ca <vPortValidateInterruptPriority+0x62>
	}
 80153ce:	bf00      	nop
 80153d0:	3714      	adds	r7, #20
 80153d2:	46bd      	mov	sp, r7
 80153d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d8:	4770      	bx	lr
 80153da:	bf00      	nop
 80153dc:	e000e3f0 	.word	0xe000e3f0
 80153e0:	240014e8 	.word	0x240014e8
 80153e4:	e000ed0c 	.word	0xe000ed0c
 80153e8:	240014ec 	.word	0x240014ec

080153ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b08a      	sub	sp, #40	@ 0x28
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80153f4:	2300      	movs	r3, #0
 80153f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80153f8:	f7fe ffb2 	bl	8014360 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80153fc:	4b5c      	ldr	r3, [pc, #368]	@ (8015570 <pvPortMalloc+0x184>)
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d101      	bne.n	8015408 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015404:	f000 f924 	bl	8015650 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015408:	4b5a      	ldr	r3, [pc, #360]	@ (8015574 <pvPortMalloc+0x188>)
 801540a:	681a      	ldr	r2, [r3, #0]
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	4013      	ands	r3, r2
 8015410:	2b00      	cmp	r3, #0
 8015412:	f040 8095 	bne.w	8015540 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d01e      	beq.n	801545a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801541c:	2208      	movs	r2, #8
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	4413      	add	r3, r2
 8015422:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	f003 0307 	and.w	r3, r3, #7
 801542a:	2b00      	cmp	r3, #0
 801542c:	d015      	beq.n	801545a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	f023 0307 	bic.w	r3, r3, #7
 8015434:	3308      	adds	r3, #8
 8015436:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	f003 0307 	and.w	r3, r3, #7
 801543e:	2b00      	cmp	r3, #0
 8015440:	d00b      	beq.n	801545a <pvPortMalloc+0x6e>
	__asm volatile
 8015442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015446:	f383 8811 	msr	BASEPRI, r3
 801544a:	f3bf 8f6f 	isb	sy
 801544e:	f3bf 8f4f 	dsb	sy
 8015452:	617b      	str	r3, [r7, #20]
}
 8015454:	bf00      	nop
 8015456:	bf00      	nop
 8015458:	e7fd      	b.n	8015456 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d06f      	beq.n	8015540 <pvPortMalloc+0x154>
 8015460:	4b45      	ldr	r3, [pc, #276]	@ (8015578 <pvPortMalloc+0x18c>)
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	687a      	ldr	r2, [r7, #4]
 8015466:	429a      	cmp	r2, r3
 8015468:	d86a      	bhi.n	8015540 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801546a:	4b44      	ldr	r3, [pc, #272]	@ (801557c <pvPortMalloc+0x190>)
 801546c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801546e:	4b43      	ldr	r3, [pc, #268]	@ (801557c <pvPortMalloc+0x190>)
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015474:	e004      	b.n	8015480 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015478:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015482:	685b      	ldr	r3, [r3, #4]
 8015484:	687a      	ldr	r2, [r7, #4]
 8015486:	429a      	cmp	r2, r3
 8015488:	d903      	bls.n	8015492 <pvPortMalloc+0xa6>
 801548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d1f1      	bne.n	8015476 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015492:	4b37      	ldr	r3, [pc, #220]	@ (8015570 <pvPortMalloc+0x184>)
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015498:	429a      	cmp	r2, r3
 801549a:	d051      	beq.n	8015540 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801549c:	6a3b      	ldr	r3, [r7, #32]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	2208      	movs	r2, #8
 80154a2:	4413      	add	r3, r2
 80154a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80154a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154a8:	681a      	ldr	r2, [r3, #0]
 80154aa:	6a3b      	ldr	r3, [r7, #32]
 80154ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80154ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154b0:	685a      	ldr	r2, [r3, #4]
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	1ad2      	subs	r2, r2, r3
 80154b6:	2308      	movs	r3, #8
 80154b8:	005b      	lsls	r3, r3, #1
 80154ba:	429a      	cmp	r2, r3
 80154bc:	d920      	bls.n	8015500 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80154be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	4413      	add	r3, r2
 80154c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80154c6:	69bb      	ldr	r3, [r7, #24]
 80154c8:	f003 0307 	and.w	r3, r3, #7
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d00b      	beq.n	80154e8 <pvPortMalloc+0xfc>
	__asm volatile
 80154d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154d4:	f383 8811 	msr	BASEPRI, r3
 80154d8:	f3bf 8f6f 	isb	sy
 80154dc:	f3bf 8f4f 	dsb	sy
 80154e0:	613b      	str	r3, [r7, #16]
}
 80154e2:	bf00      	nop
 80154e4:	bf00      	nop
 80154e6:	e7fd      	b.n	80154e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80154e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154ea:	685a      	ldr	r2, [r3, #4]
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	1ad2      	subs	r2, r2, r3
 80154f0:	69bb      	ldr	r3, [r7, #24]
 80154f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80154f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154f6:	687a      	ldr	r2, [r7, #4]
 80154f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80154fa:	69b8      	ldr	r0, [r7, #24]
 80154fc:	f000 f90a 	bl	8015714 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015500:	4b1d      	ldr	r3, [pc, #116]	@ (8015578 <pvPortMalloc+0x18c>)
 8015502:	681a      	ldr	r2, [r3, #0]
 8015504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015506:	685b      	ldr	r3, [r3, #4]
 8015508:	1ad3      	subs	r3, r2, r3
 801550a:	4a1b      	ldr	r2, [pc, #108]	@ (8015578 <pvPortMalloc+0x18c>)
 801550c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801550e:	4b1a      	ldr	r3, [pc, #104]	@ (8015578 <pvPortMalloc+0x18c>)
 8015510:	681a      	ldr	r2, [r3, #0]
 8015512:	4b1b      	ldr	r3, [pc, #108]	@ (8015580 <pvPortMalloc+0x194>)
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	429a      	cmp	r2, r3
 8015518:	d203      	bcs.n	8015522 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801551a:	4b17      	ldr	r3, [pc, #92]	@ (8015578 <pvPortMalloc+0x18c>)
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	4a18      	ldr	r2, [pc, #96]	@ (8015580 <pvPortMalloc+0x194>)
 8015520:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015524:	685a      	ldr	r2, [r3, #4]
 8015526:	4b13      	ldr	r3, [pc, #76]	@ (8015574 <pvPortMalloc+0x188>)
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	431a      	orrs	r2, r3
 801552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801552e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015532:	2200      	movs	r2, #0
 8015534:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015536:	4b13      	ldr	r3, [pc, #76]	@ (8015584 <pvPortMalloc+0x198>)
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	3301      	adds	r3, #1
 801553c:	4a11      	ldr	r2, [pc, #68]	@ (8015584 <pvPortMalloc+0x198>)
 801553e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015540:	f7fe ff1c 	bl	801437c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015544:	69fb      	ldr	r3, [r7, #28]
 8015546:	f003 0307 	and.w	r3, r3, #7
 801554a:	2b00      	cmp	r3, #0
 801554c:	d00b      	beq.n	8015566 <pvPortMalloc+0x17a>
	__asm volatile
 801554e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015552:	f383 8811 	msr	BASEPRI, r3
 8015556:	f3bf 8f6f 	isb	sy
 801555a:	f3bf 8f4f 	dsb	sy
 801555e:	60fb      	str	r3, [r7, #12]
}
 8015560:	bf00      	nop
 8015562:	bf00      	nop
 8015564:	e7fd      	b.n	8015562 <pvPortMalloc+0x176>
	return pvReturn;
 8015566:	69fb      	ldr	r3, [r7, #28]
}
 8015568:	4618      	mov	r0, r3
 801556a:	3728      	adds	r7, #40	@ 0x28
 801556c:	46bd      	mov	sp, r7
 801556e:	bd80      	pop	{r7, pc}
 8015570:	24008cf8 	.word	0x24008cf8
 8015574:	24008d0c 	.word	0x24008d0c
 8015578:	24008cfc 	.word	0x24008cfc
 801557c:	24008cf0 	.word	0x24008cf0
 8015580:	24008d00 	.word	0x24008d00
 8015584:	24008d04 	.word	0x24008d04

08015588 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015588:	b580      	push	{r7, lr}
 801558a:	b086      	sub	sp, #24
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d04f      	beq.n	801563a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801559a:	2308      	movs	r3, #8
 801559c:	425b      	negs	r3, r3
 801559e:	697a      	ldr	r2, [r7, #20]
 80155a0:	4413      	add	r3, r2
 80155a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80155a4:	697b      	ldr	r3, [r7, #20]
 80155a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80155a8:	693b      	ldr	r3, [r7, #16]
 80155aa:	685a      	ldr	r2, [r3, #4]
 80155ac:	4b25      	ldr	r3, [pc, #148]	@ (8015644 <vPortFree+0xbc>)
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	4013      	ands	r3, r2
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d10b      	bne.n	80155ce <vPortFree+0x46>
	__asm volatile
 80155b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155ba:	f383 8811 	msr	BASEPRI, r3
 80155be:	f3bf 8f6f 	isb	sy
 80155c2:	f3bf 8f4f 	dsb	sy
 80155c6:	60fb      	str	r3, [r7, #12]
}
 80155c8:	bf00      	nop
 80155ca:	bf00      	nop
 80155cc:	e7fd      	b.n	80155ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80155ce:	693b      	ldr	r3, [r7, #16]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d00b      	beq.n	80155ee <vPortFree+0x66>
	__asm volatile
 80155d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155da:	f383 8811 	msr	BASEPRI, r3
 80155de:	f3bf 8f6f 	isb	sy
 80155e2:	f3bf 8f4f 	dsb	sy
 80155e6:	60bb      	str	r3, [r7, #8]
}
 80155e8:	bf00      	nop
 80155ea:	bf00      	nop
 80155ec:	e7fd      	b.n	80155ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80155ee:	693b      	ldr	r3, [r7, #16]
 80155f0:	685a      	ldr	r2, [r3, #4]
 80155f2:	4b14      	ldr	r3, [pc, #80]	@ (8015644 <vPortFree+0xbc>)
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	4013      	ands	r3, r2
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d01e      	beq.n	801563a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80155fc:	693b      	ldr	r3, [r7, #16]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d11a      	bne.n	801563a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015604:	693b      	ldr	r3, [r7, #16]
 8015606:	685a      	ldr	r2, [r3, #4]
 8015608:	4b0e      	ldr	r3, [pc, #56]	@ (8015644 <vPortFree+0xbc>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	43db      	mvns	r3, r3
 801560e:	401a      	ands	r2, r3
 8015610:	693b      	ldr	r3, [r7, #16]
 8015612:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015614:	f7fe fea4 	bl	8014360 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015618:	693b      	ldr	r3, [r7, #16]
 801561a:	685a      	ldr	r2, [r3, #4]
 801561c:	4b0a      	ldr	r3, [pc, #40]	@ (8015648 <vPortFree+0xc0>)
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	4413      	add	r3, r2
 8015622:	4a09      	ldr	r2, [pc, #36]	@ (8015648 <vPortFree+0xc0>)
 8015624:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015626:	6938      	ldr	r0, [r7, #16]
 8015628:	f000 f874 	bl	8015714 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801562c:	4b07      	ldr	r3, [pc, #28]	@ (801564c <vPortFree+0xc4>)
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	3301      	adds	r3, #1
 8015632:	4a06      	ldr	r2, [pc, #24]	@ (801564c <vPortFree+0xc4>)
 8015634:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015636:	f7fe fea1 	bl	801437c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801563a:	bf00      	nop
 801563c:	3718      	adds	r7, #24
 801563e:	46bd      	mov	sp, r7
 8015640:	bd80      	pop	{r7, pc}
 8015642:	bf00      	nop
 8015644:	24008d0c 	.word	0x24008d0c
 8015648:	24008cfc 	.word	0x24008cfc
 801564c:	24008d08 	.word	0x24008d08

08015650 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015650:	b480      	push	{r7}
 8015652:	b085      	sub	sp, #20
 8015654:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015656:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 801565a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801565c:	4b27      	ldr	r3, [pc, #156]	@ (80156fc <prvHeapInit+0xac>)
 801565e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	f003 0307 	and.w	r3, r3, #7
 8015666:	2b00      	cmp	r3, #0
 8015668:	d00c      	beq.n	8015684 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	3307      	adds	r3, #7
 801566e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	f023 0307 	bic.w	r3, r3, #7
 8015676:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015678:	68ba      	ldr	r2, [r7, #8]
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	1ad3      	subs	r3, r2, r3
 801567e:	4a1f      	ldr	r2, [pc, #124]	@ (80156fc <prvHeapInit+0xac>)
 8015680:	4413      	add	r3, r2
 8015682:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015688:	4a1d      	ldr	r2, [pc, #116]	@ (8015700 <prvHeapInit+0xb0>)
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801568e:	4b1c      	ldr	r3, [pc, #112]	@ (8015700 <prvHeapInit+0xb0>)
 8015690:	2200      	movs	r2, #0
 8015692:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	68ba      	ldr	r2, [r7, #8]
 8015698:	4413      	add	r3, r2
 801569a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801569c:	2208      	movs	r2, #8
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	1a9b      	subs	r3, r3, r2
 80156a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	f023 0307 	bic.w	r3, r3, #7
 80156aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	4a15      	ldr	r2, [pc, #84]	@ (8015704 <prvHeapInit+0xb4>)
 80156b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80156b2:	4b14      	ldr	r3, [pc, #80]	@ (8015704 <prvHeapInit+0xb4>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	2200      	movs	r2, #0
 80156b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80156ba:	4b12      	ldr	r3, [pc, #72]	@ (8015704 <prvHeapInit+0xb4>)
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	2200      	movs	r2, #0
 80156c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	68fa      	ldr	r2, [r7, #12]
 80156ca:	1ad2      	subs	r2, r2, r3
 80156cc:	683b      	ldr	r3, [r7, #0]
 80156ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80156d0:	4b0c      	ldr	r3, [pc, #48]	@ (8015704 <prvHeapInit+0xb4>)
 80156d2:	681a      	ldr	r2, [r3, #0]
 80156d4:	683b      	ldr	r3, [r7, #0]
 80156d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	685b      	ldr	r3, [r3, #4]
 80156dc:	4a0a      	ldr	r2, [pc, #40]	@ (8015708 <prvHeapInit+0xb8>)
 80156de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80156e0:	683b      	ldr	r3, [r7, #0]
 80156e2:	685b      	ldr	r3, [r3, #4]
 80156e4:	4a09      	ldr	r2, [pc, #36]	@ (801570c <prvHeapInit+0xbc>)
 80156e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80156e8:	4b09      	ldr	r3, [pc, #36]	@ (8015710 <prvHeapInit+0xc0>)
 80156ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80156ee:	601a      	str	r2, [r3, #0]
}
 80156f0:	bf00      	nop
 80156f2:	3714      	adds	r7, #20
 80156f4:	46bd      	mov	sp, r7
 80156f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156fa:	4770      	bx	lr
 80156fc:	240014f0 	.word	0x240014f0
 8015700:	24008cf0 	.word	0x24008cf0
 8015704:	24008cf8 	.word	0x24008cf8
 8015708:	24008d00 	.word	0x24008d00
 801570c:	24008cfc 	.word	0x24008cfc
 8015710:	24008d0c 	.word	0x24008d0c

08015714 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015714:	b480      	push	{r7}
 8015716:	b085      	sub	sp, #20
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801571c:	4b28      	ldr	r3, [pc, #160]	@ (80157c0 <prvInsertBlockIntoFreeList+0xac>)
 801571e:	60fb      	str	r3, [r7, #12]
 8015720:	e002      	b.n	8015728 <prvInsertBlockIntoFreeList+0x14>
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	60fb      	str	r3, [r7, #12]
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	687a      	ldr	r2, [r7, #4]
 801572e:	429a      	cmp	r2, r3
 8015730:	d8f7      	bhi.n	8015722 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	685b      	ldr	r3, [r3, #4]
 801573a:	68ba      	ldr	r2, [r7, #8]
 801573c:	4413      	add	r3, r2
 801573e:	687a      	ldr	r2, [r7, #4]
 8015740:	429a      	cmp	r2, r3
 8015742:	d108      	bne.n	8015756 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	685a      	ldr	r2, [r3, #4]
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	685b      	ldr	r3, [r3, #4]
 801574c:	441a      	add	r2, r3
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	685b      	ldr	r3, [r3, #4]
 801575e:	68ba      	ldr	r2, [r7, #8]
 8015760:	441a      	add	r2, r3
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	429a      	cmp	r2, r3
 8015768:	d118      	bne.n	801579c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	681a      	ldr	r2, [r3, #0]
 801576e:	4b15      	ldr	r3, [pc, #84]	@ (80157c4 <prvInsertBlockIntoFreeList+0xb0>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	429a      	cmp	r2, r3
 8015774:	d00d      	beq.n	8015792 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	685a      	ldr	r2, [r3, #4]
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	685b      	ldr	r3, [r3, #4]
 8015780:	441a      	add	r2, r3
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	681a      	ldr	r2, [r3, #0]
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	601a      	str	r2, [r3, #0]
 8015790:	e008      	b.n	80157a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015792:	4b0c      	ldr	r3, [pc, #48]	@ (80157c4 <prvInsertBlockIntoFreeList+0xb0>)
 8015794:	681a      	ldr	r2, [r3, #0]
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	601a      	str	r2, [r3, #0]
 801579a:	e003      	b.n	80157a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	681a      	ldr	r2, [r3, #0]
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80157a4:	68fa      	ldr	r2, [r7, #12]
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	429a      	cmp	r2, r3
 80157aa:	d002      	beq.n	80157b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	687a      	ldr	r2, [r7, #4]
 80157b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80157b2:	bf00      	nop
 80157b4:	3714      	adds	r7, #20
 80157b6:	46bd      	mov	sp, r7
 80157b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157bc:	4770      	bx	lr
 80157be:	bf00      	nop
 80157c0:	24008cf0 	.word	0x24008cf0
 80157c4:	24008cf8 	.word	0x24008cf8

080157c8 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b084      	sub	sp, #16
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
 80157d0:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80157d2:	683b      	ldr	r3, [r7, #0]
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	330c      	adds	r3, #12
 80157d8:	461a      	mov	r2, r3
 80157da:	6839      	ldr	r1, [r7, #0]
 80157dc:	6878      	ldr	r0, [r7, #4]
 80157de:	f003 f9f7 	bl	8018bd0 <tcpip_send_msg_wait_sem>
 80157e2:	4603      	mov	r3, r0
 80157e4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80157e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d103      	bne.n	80157f6 <netconn_apimsg+0x2e>
    return apimsg->err;
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80157f4:	e001      	b.n	80157fa <netconn_apimsg+0x32>
  }
  return err;
 80157f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80157fa:	4618      	mov	r0, r3
 80157fc:	3710      	adds	r7, #16
 80157fe:	46bd      	mov	sp, r7
 8015800:	bd80      	pop	{r7, pc}
	...

08015804 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8015804:	b580      	push	{r7, lr}
 8015806:	b08c      	sub	sp, #48	@ 0x30
 8015808:	af00      	add	r7, sp, #0
 801580a:	4603      	mov	r3, r0
 801580c:	603a      	str	r2, [r7, #0]
 801580e:	71fb      	strb	r3, [r7, #7]
 8015810:	460b      	mov	r3, r1
 8015812:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8015814:	79fb      	ldrb	r3, [r7, #7]
 8015816:	6839      	ldr	r1, [r7, #0]
 8015818:	4618      	mov	r0, r3
 801581a:	f001 f82f 	bl	801687c <netconn_alloc>
 801581e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8015820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015822:	2b00      	cmp	r3, #0
 8015824:	d054      	beq.n	80158d0 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8015826:	79bb      	ldrb	r3, [r7, #6]
 8015828:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 801582a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801582c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 801582e:	f107 0308 	add.w	r3, r7, #8
 8015832:	4619      	mov	r1, r3
 8015834:	4829      	ldr	r0, [pc, #164]	@ (80158dc <netconn_new_with_proto_and_callback+0xd8>)
 8015836:	f7ff ffc7 	bl	80157c8 <netconn_apimsg>
 801583a:	4603      	mov	r3, r0
 801583c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8015840:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8015844:	2b00      	cmp	r3, #0
 8015846:	d043      	beq.n	80158d0 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8015848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801584a:	685b      	ldr	r3, [r3, #4]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d005      	beq.n	801585c <netconn_new_with_proto_and_callback+0x58>
 8015850:	4b23      	ldr	r3, [pc, #140]	@ (80158e0 <netconn_new_with_proto_and_callback+0xdc>)
 8015852:	22a3      	movs	r2, #163	@ 0xa3
 8015854:	4923      	ldr	r1, [pc, #140]	@ (80158e4 <netconn_new_with_proto_and_callback+0xe0>)
 8015856:	4824      	ldr	r0, [pc, #144]	@ (80158e8 <netconn_new_with_proto_and_callback+0xe4>)
 8015858:	f00f fe44 	bl	80254e4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 801585c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801585e:	3310      	adds	r3, #16
 8015860:	4618      	mov	r0, r3
 8015862:	f00e fc8a 	bl	802417a <sys_mbox_valid>
 8015866:	4603      	mov	r3, r0
 8015868:	2b00      	cmp	r3, #0
 801586a:	d105      	bne.n	8015878 <netconn_new_with_proto_and_callback+0x74>
 801586c:	4b1c      	ldr	r3, [pc, #112]	@ (80158e0 <netconn_new_with_proto_and_callback+0xdc>)
 801586e:	22a4      	movs	r2, #164	@ 0xa4
 8015870:	491e      	ldr	r1, [pc, #120]	@ (80158ec <netconn_new_with_proto_and_callback+0xe8>)
 8015872:	481d      	ldr	r0, [pc, #116]	@ (80158e8 <netconn_new_with_proto_and_callback+0xe4>)
 8015874:	f00f fe36 	bl	80254e4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8015878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801587a:	3314      	adds	r3, #20
 801587c:	4618      	mov	r0, r3
 801587e:	f00e fc7c 	bl	802417a <sys_mbox_valid>
 8015882:	4603      	mov	r3, r0
 8015884:	2b00      	cmp	r3, #0
 8015886:	d005      	beq.n	8015894 <netconn_new_with_proto_and_callback+0x90>
 8015888:	4b15      	ldr	r3, [pc, #84]	@ (80158e0 <netconn_new_with_proto_and_callback+0xdc>)
 801588a:	22a6      	movs	r2, #166	@ 0xa6
 801588c:	4918      	ldr	r1, [pc, #96]	@ (80158f0 <netconn_new_with_proto_and_callback+0xec>)
 801588e:	4816      	ldr	r0, [pc, #88]	@ (80158e8 <netconn_new_with_proto_and_callback+0xe4>)
 8015890:	f00f fe28 	bl	80254e4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8015894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015896:	330c      	adds	r3, #12
 8015898:	4618      	mov	r0, r3
 801589a:	f00e fcff 	bl	802429c <sys_sem_valid>
 801589e:	4603      	mov	r3, r0
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d105      	bne.n	80158b0 <netconn_new_with_proto_and_callback+0xac>
 80158a4:	4b0e      	ldr	r3, [pc, #56]	@ (80158e0 <netconn_new_with_proto_and_callback+0xdc>)
 80158a6:	22a9      	movs	r2, #169	@ 0xa9
 80158a8:	4912      	ldr	r1, [pc, #72]	@ (80158f4 <netconn_new_with_proto_and_callback+0xf0>)
 80158aa:	480f      	ldr	r0, [pc, #60]	@ (80158e8 <netconn_new_with_proto_and_callback+0xe4>)
 80158ac:	f00f fe1a 	bl	80254e4 <iprintf>
      sys_sem_free(&conn->op_completed);
 80158b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158b2:	330c      	adds	r3, #12
 80158b4:	4618      	mov	r0, r3
 80158b6:	f00e fce4 	bl	8024282 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80158ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158bc:	3310      	adds	r3, #16
 80158be:	4618      	mov	r0, r3
 80158c0:	f00e fbd4 	bl	802406c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80158c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80158c6:	2007      	movs	r0, #7
 80158c8:	f003 ffe8 	bl	801989c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80158cc:	2300      	movs	r3, #0
 80158ce:	e000      	b.n	80158d2 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80158d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80158d2:	4618      	mov	r0, r3
 80158d4:	3730      	adds	r7, #48	@ 0x30
 80158d6:	46bd      	mov	sp, r7
 80158d8:	bd80      	pop	{r7, pc}
 80158da:	bf00      	nop
 80158dc:	08016851 	.word	0x08016851
 80158e0:	08029694 	.word	0x08029694
 80158e4:	080296c8 	.word	0x080296c8
 80158e8:	080296ec 	.word	0x080296ec
 80158ec:	08029714 	.word	0x08029714
 80158f0:	0802972c 	.word	0x0802972c
 80158f4:	08029750 	.word	0x08029750

080158f8 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b08c      	sub	sp, #48	@ 0x30
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d101      	bne.n	801590a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8015906:	2300      	movs	r3, #0
 8015908:	e014      	b.n	8015934 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801590e:	2329      	movs	r3, #41	@ 0x29
 8015910:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8015912:	f107 030c 	add.w	r3, r7, #12
 8015916:	4619      	mov	r1, r3
 8015918:	4808      	ldr	r0, [pc, #32]	@ (801593c <netconn_prepare_delete+0x44>)
 801591a:	f7ff ff55 	bl	80157c8 <netconn_apimsg>
 801591e:	4603      	mov	r3, r0
 8015920:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8015924:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8015928:	2b00      	cmp	r3, #0
 801592a:	d002      	beq.n	8015932 <netconn_prepare_delete+0x3a>
    return err;
 801592c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8015930:	e000      	b.n	8015934 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8015932:	2300      	movs	r3, #0
}
 8015934:	4618      	mov	r0, r3
 8015936:	3730      	adds	r7, #48	@ 0x30
 8015938:	46bd      	mov	sp, r7
 801593a:	bd80      	pop	{r7, pc}
 801593c:	08016dbd 	.word	0x08016dbd

08015940 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b084      	sub	sp, #16
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d101      	bne.n	8015952 <netconn_delete+0x12>
    return ERR_OK;
 801594e:	2300      	movs	r3, #0
 8015950:	e00d      	b.n	801596e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8015952:	6878      	ldr	r0, [r7, #4]
 8015954:	f7ff ffd0 	bl	80158f8 <netconn_prepare_delete>
 8015958:	4603      	mov	r3, r0
 801595a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 801595c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d102      	bne.n	801596a <netconn_delete+0x2a>
    netconn_free(conn);
 8015964:	6878      	ldr	r0, [r7, #4]
 8015966:	f000 fff7 	bl	8016958 <netconn_free>
  }
  return err;
 801596a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801596e:	4618      	mov	r0, r3
 8015970:	3710      	adds	r7, #16
 8015972:	46bd      	mov	sp, r7
 8015974:	bd80      	pop	{r7, pc}
	...

08015978 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b08e      	sub	sp, #56	@ 0x38
 801597c:	af00      	add	r7, sp, #0
 801597e:	60f8      	str	r0, [r7, #12]
 8015980:	60b9      	str	r1, [r7, #8]
 8015982:	607a      	str	r2, [r7, #4]
 8015984:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d109      	bne.n	80159a0 <netconn_getaddr+0x28>
 801598c:	4b1d      	ldr	r3, [pc, #116]	@ (8015a04 <netconn_getaddr+0x8c>)
 801598e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8015992:	491d      	ldr	r1, [pc, #116]	@ (8015a08 <netconn_getaddr+0x90>)
 8015994:	481d      	ldr	r0, [pc, #116]	@ (8015a0c <netconn_getaddr+0x94>)
 8015996:	f00f fda5 	bl	80254e4 <iprintf>
 801599a:	f06f 030f 	mvn.w	r3, #15
 801599e:	e02d      	b.n	80159fc <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 80159a0:	68bb      	ldr	r3, [r7, #8]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d109      	bne.n	80159ba <netconn_getaddr+0x42>
 80159a6:	4b17      	ldr	r3, [pc, #92]	@ (8015a04 <netconn_getaddr+0x8c>)
 80159a8:	f240 1213 	movw	r2, #275	@ 0x113
 80159ac:	4918      	ldr	r1, [pc, #96]	@ (8015a10 <netconn_getaddr+0x98>)
 80159ae:	4817      	ldr	r0, [pc, #92]	@ (8015a0c <netconn_getaddr+0x94>)
 80159b0:	f00f fd98 	bl	80254e4 <iprintf>
 80159b4:	f06f 030f 	mvn.w	r3, #15
 80159b8:	e020      	b.n	80159fc <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d109      	bne.n	80159d4 <netconn_getaddr+0x5c>
 80159c0:	4b10      	ldr	r3, [pc, #64]	@ (8015a04 <netconn_getaddr+0x8c>)
 80159c2:	f44f 728a 	mov.w	r2, #276	@ 0x114
 80159c6:	4913      	ldr	r1, [pc, #76]	@ (8015a14 <netconn_getaddr+0x9c>)
 80159c8:	4810      	ldr	r0, [pc, #64]	@ (8015a0c <netconn_getaddr+0x94>)
 80159ca:	f00f fd8b 	bl	80254e4 <iprintf>
 80159ce:	f06f 030f 	mvn.w	r3, #15
 80159d2:	e013      	b.n	80159fc <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 80159d8:	78fb      	ldrb	r3, [r7, #3]
 80159da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 80159de:	68bb      	ldr	r3, [r7, #8]
 80159e0:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 80159e6:	f107 0314 	add.w	r3, r7, #20
 80159ea:	4619      	mov	r1, r3
 80159ec:	480a      	ldr	r0, [pc, #40]	@ (8015a18 <netconn_getaddr+0xa0>)
 80159ee:	f7ff feeb 	bl	80157c8 <netconn_apimsg>
 80159f2:	4603      	mov	r3, r0
 80159f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 80159f8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80159fc:	4618      	mov	r0, r3
 80159fe:	3738      	adds	r7, #56	@ 0x38
 8015a00:	46bd      	mov	sp, r7
 8015a02:	bd80      	pop	{r7, pc}
 8015a04:	08029694 	.word	0x08029694
 8015a08:	0802976c 	.word	0x0802976c
 8015a0c:	080296ec 	.word	0x080296ec
 8015a10:	0802978c 	.word	0x0802978c
 8015a14:	080297ac 	.word	0x080297ac
 8015a18:	080175ad 	.word	0x080175ad

08015a1c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b08e      	sub	sp, #56	@ 0x38
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	60f8      	str	r0, [r7, #12]
 8015a24:	60b9      	str	r1, [r7, #8]
 8015a26:	4613      	mov	r3, r2
 8015a28:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d109      	bne.n	8015a44 <netconn_bind+0x28>
 8015a30:	4b11      	ldr	r3, [pc, #68]	@ (8015a78 <netconn_bind+0x5c>)
 8015a32:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8015a36:	4911      	ldr	r1, [pc, #68]	@ (8015a7c <netconn_bind+0x60>)
 8015a38:	4811      	ldr	r0, [pc, #68]	@ (8015a80 <netconn_bind+0x64>)
 8015a3a:	f00f fd53 	bl	80254e4 <iprintf>
 8015a3e:	f06f 030f 	mvn.w	r3, #15
 8015a42:	e015      	b.n	8015a70 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8015a44:	68bb      	ldr	r3, [r7, #8]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d101      	bne.n	8015a4e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8015a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8015a84 <netconn_bind+0x68>)
 8015a4c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8015a52:	68bb      	ldr	r3, [r7, #8]
 8015a54:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8015a56:	88fb      	ldrh	r3, [r7, #6]
 8015a58:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8015a5a:	f107 0314 	add.w	r3, r7, #20
 8015a5e:	4619      	mov	r1, r3
 8015a60:	4809      	ldr	r0, [pc, #36]	@ (8015a88 <netconn_bind+0x6c>)
 8015a62:	f7ff feb1 	bl	80157c8 <netconn_apimsg>
 8015a66:	4603      	mov	r3, r0
 8015a68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8015a6c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8015a70:	4618      	mov	r0, r3
 8015a72:	3738      	adds	r7, #56	@ 0x38
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}
 8015a78:	08029694 	.word	0x08029694
 8015a7c:	080297cc 	.word	0x080297cc
 8015a80:	080296ec 	.word	0x080296ec
 8015a84:	0802d154 	.word	0x0802d154
 8015a88:	08016f85 	.word	0x08016f85

08015a8c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b088      	sub	sp, #32
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	60f8      	str	r0, [r7, #12]
 8015a94:	60b9      	str	r1, [r7, #8]
 8015a96:	4613      	mov	r3, r2
 8015a98:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8015a9e:	68bb      	ldr	r3, [r7, #8]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d109      	bne.n	8015ab8 <netconn_recv_data+0x2c>
 8015aa4:	4b58      	ldr	r3, [pc, #352]	@ (8015c08 <netconn_recv_data+0x17c>)
 8015aa6:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8015aaa:	4958      	ldr	r1, [pc, #352]	@ (8015c0c <netconn_recv_data+0x180>)
 8015aac:	4858      	ldr	r0, [pc, #352]	@ (8015c10 <netconn_recv_data+0x184>)
 8015aae:	f00f fd19 	bl	80254e4 <iprintf>
 8015ab2:	f06f 030f 	mvn.w	r3, #15
 8015ab6:	e0a2      	b.n	8015bfe <netconn_recv_data+0x172>
  *new_buf = NULL;
 8015ab8:	68bb      	ldr	r3, [r7, #8]
 8015aba:	2200      	movs	r2, #0
 8015abc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d109      	bne.n	8015ad8 <netconn_recv_data+0x4c>
 8015ac4:	4b50      	ldr	r3, [pc, #320]	@ (8015c08 <netconn_recv_data+0x17c>)
 8015ac6:	f240 224a 	movw	r2, #586	@ 0x24a
 8015aca:	4952      	ldr	r1, [pc, #328]	@ (8015c14 <netconn_recv_data+0x188>)
 8015acc:	4850      	ldr	r0, [pc, #320]	@ (8015c10 <netconn_recv_data+0x184>)
 8015ace:	f00f fd09 	bl	80254e4 <iprintf>
 8015ad2:	f06f 030f 	mvn.w	r3, #15
 8015ad6:	e092      	b.n	8015bfe <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	3310      	adds	r3, #16
 8015adc:	4618      	mov	r0, r3
 8015ade:	f00e fb4c 	bl	802417a <sys_mbox_valid>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d10e      	bne.n	8015b06 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8015ae8:	68f8      	ldr	r0, [r7, #12]
 8015aea:	f000 fb01 	bl	80160f0 <netconn_err>
 8015aee:	4603      	mov	r3, r0
 8015af0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8015af2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d002      	beq.n	8015b00 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8015afa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8015afe:	e07e      	b.n	8015bfe <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8015b00:	f06f 030a 	mvn.w	r3, #10
 8015b04:	e07b      	b.n	8015bfe <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	7f1b      	ldrb	r3, [r3, #28]
 8015b0a:	f003 0302 	and.w	r3, r3, #2
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d10f      	bne.n	8015b32 <netconn_recv_data+0xa6>
 8015b12:	79fb      	ldrb	r3, [r7, #7]
 8015b14:	f003 0304 	and.w	r3, r3, #4
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d10a      	bne.n	8015b32 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	7f1b      	ldrb	r3, [r3, #28]
 8015b20:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d104      	bne.n	8015b32 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d023      	beq.n	8015b7a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	3310      	adds	r3, #16
 8015b36:	f107 0218 	add.w	r2, r7, #24
 8015b3a:	4611      	mov	r1, r2
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	f00e fb00 	bl	8024142 <sys_arch_mbox_tryfetch>
 8015b42:	4603      	mov	r3, r0
 8015b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b48:	d11f      	bne.n	8015b8a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8015b4a:	68f8      	ldr	r0, [r7, #12]
 8015b4c:	f000 fad0 	bl	80160f0 <netconn_err>
 8015b50:	4603      	mov	r3, r0
 8015b52:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8015b54:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d002      	beq.n	8015b62 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8015b5c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015b60:	e04d      	b.n	8015bfe <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	7f1b      	ldrb	r3, [r3, #28]
 8015b66:	f003 0301 	and.w	r3, r3, #1
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d002      	beq.n	8015b74 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8015b6e:	f06f 030a 	mvn.w	r3, #10
 8015b72:	e044      	b.n	8015bfe <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8015b74:	f06f 0306 	mvn.w	r3, #6
 8015b78:	e041      	b.n	8015bfe <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	3310      	adds	r3, #16
 8015b7e:	f107 0118 	add.w	r1, r7, #24
 8015b82:	2200      	movs	r2, #0
 8015b84:	4618      	mov	r0, r3
 8015b86:	f00e fa9d 	bl	80240c4 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	781b      	ldrb	r3, [r3, #0]
 8015b8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015b92:	2b10      	cmp	r3, #16
 8015b94:	d117      	bne.n	8015bc6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8015b96:	69bb      	ldr	r3, [r7, #24]
 8015b98:	f107 0217 	add.w	r2, r7, #23
 8015b9c:	4611      	mov	r1, r2
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	f000 faf8 	bl	8016194 <lwip_netconn_is_err_msg>
 8015ba4:	4603      	mov	r3, r0
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d009      	beq.n	8015bbe <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8015baa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015bae:	f113 0f0f 	cmn.w	r3, #15
 8015bb2:	d101      	bne.n	8015bb8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	e022      	b.n	8015bfe <netconn_recv_data+0x172>
      }
      return err;
 8015bb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015bbc:	e01f      	b.n	8015bfe <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8015bbe:	69bb      	ldr	r3, [r7, #24]
 8015bc0:	891b      	ldrh	r3, [r3, #8]
 8015bc2:	83fb      	strh	r3, [r7, #30]
 8015bc4:	e00d      	b.n	8015be2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8015bc6:	69bb      	ldr	r3, [r7, #24]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d106      	bne.n	8015bda <netconn_recv_data+0x14e>
 8015bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8015c08 <netconn_recv_data+0x17c>)
 8015bce:	f240 2291 	movw	r2, #657	@ 0x291
 8015bd2:	4911      	ldr	r1, [pc, #68]	@ (8015c18 <netconn_recv_data+0x18c>)
 8015bd4:	480e      	ldr	r0, [pc, #56]	@ (8015c10 <netconn_recv_data+0x184>)
 8015bd6:	f00f fc85 	bl	80254e4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8015bda:	69bb      	ldr	r3, [r7, #24]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	891b      	ldrh	r3, [r3, #8]
 8015be0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d005      	beq.n	8015bf6 <netconn_recv_data+0x16a>
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015bee:	8bfa      	ldrh	r2, [r7, #30]
 8015bf0:	2101      	movs	r1, #1
 8015bf2:	68f8      	ldr	r0, [r7, #12]
 8015bf4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8015bf6:	69ba      	ldr	r2, [r7, #24]
 8015bf8:	68bb      	ldr	r3, [r7, #8]
 8015bfa:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8015bfc:	2300      	movs	r3, #0
}
 8015bfe:	4618      	mov	r0, r3
 8015c00:	3720      	adds	r7, #32
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}
 8015c06:	bf00      	nop
 8015c08:	08029694 	.word	0x08029694
 8015c0c:	080298ac 	.word	0x080298ac
 8015c10:	080296ec 	.word	0x080296ec
 8015c14:	080298cc 	.word	0x080298cc
 8015c18:	080298e8 	.word	0x080298e8

08015c1c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b084      	sub	sp, #16
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	60f8      	str	r0, [r7, #12]
 8015c24:	60b9      	str	r1, [r7, #8]
 8015c26:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d005      	beq.n	8015c3a <netconn_tcp_recvd_msg+0x1e>
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	781b      	ldrb	r3, [r3, #0]
 8015c32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015c36:	2b10      	cmp	r3, #16
 8015c38:	d009      	beq.n	8015c4e <netconn_tcp_recvd_msg+0x32>
 8015c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8015c6c <netconn_tcp_recvd_msg+0x50>)
 8015c3c:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8015c40:	490b      	ldr	r1, [pc, #44]	@ (8015c70 <netconn_tcp_recvd_msg+0x54>)
 8015c42:	480c      	ldr	r0, [pc, #48]	@ (8015c74 <netconn_tcp_recvd_msg+0x58>)
 8015c44:	f00f fc4e 	bl	80254e4 <iprintf>
 8015c48:	f06f 030f 	mvn.w	r3, #15
 8015c4c:	e00a      	b.n	8015c64 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	68fa      	ldr	r2, [r7, #12]
 8015c52:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	68ba      	ldr	r2, [r7, #8]
 8015c58:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8015c5a:	6879      	ldr	r1, [r7, #4]
 8015c5c:	4806      	ldr	r0, [pc, #24]	@ (8015c78 <netconn_tcp_recvd_msg+0x5c>)
 8015c5e:	f7ff fdb3 	bl	80157c8 <netconn_apimsg>
 8015c62:	4603      	mov	r3, r0
}
 8015c64:	4618      	mov	r0, r3
 8015c66:	3710      	adds	r7, #16
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	bd80      	pop	{r7, pc}
 8015c6c:	08029694 	.word	0x08029694
 8015c70:	080298f4 	.word	0x080298f4
 8015c74:	080296ec 	.word	0x080296ec
 8015c78:	08017093 	.word	0x08017093

08015c7c <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b08c      	sub	sp, #48	@ 0x30
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
 8015c84:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d005      	beq.n	8015c98 <netconn_tcp_recvd+0x1c>
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	781b      	ldrb	r3, [r3, #0]
 8015c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015c94:	2b10      	cmp	r3, #16
 8015c96:	d009      	beq.n	8015cac <netconn_tcp_recvd+0x30>
 8015c98:	4b0c      	ldr	r3, [pc, #48]	@ (8015ccc <netconn_tcp_recvd+0x50>)
 8015c9a:	f240 22b5 	movw	r2, #693	@ 0x2b5
 8015c9e:	490c      	ldr	r1, [pc, #48]	@ (8015cd0 <netconn_tcp_recvd+0x54>)
 8015ca0:	480c      	ldr	r0, [pc, #48]	@ (8015cd4 <netconn_tcp_recvd+0x58>)
 8015ca2:	f00f fc1f 	bl	80254e4 <iprintf>
 8015ca6:	f06f 030f 	mvn.w	r3, #15
 8015caa:	e00b      	b.n	8015cc4 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8015cac:	f107 030c 	add.w	r3, r7, #12
 8015cb0:	461a      	mov	r2, r3
 8015cb2:	6839      	ldr	r1, [r7, #0]
 8015cb4:	6878      	ldr	r0, [r7, #4]
 8015cb6:	f7ff ffb1 	bl	8015c1c <netconn_tcp_recvd_msg>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8015cc0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	3730      	adds	r7, #48	@ 0x30
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	bd80      	pop	{r7, pc}
 8015ccc:	08029694 	.word	0x08029694
 8015cd0:	080298f4 	.word	0x080298f4
 8015cd4:	080296ec 	.word	0x080296ec

08015cd8 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b090      	sub	sp, #64	@ 0x40
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	60f8      	str	r0, [r7, #12]
 8015ce0:	60b9      	str	r1, [r7, #8]
 8015ce2:	4613      	mov	r3, r2
 8015ce4:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	3310      	adds	r3, #16
 8015cea:	4618      	mov	r0, r3
 8015cec:	f00e fa45 	bl	802417a <sys_mbox_valid>
 8015cf0:	4603      	mov	r3, r0
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d102      	bne.n	8015cfc <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8015cf6:	f06f 030a 	mvn.w	r3, #10
 8015cfa:	e06d      	b.n	8015dd8 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	7f1b      	ldrb	r3, [r3, #28]
 8015d00:	b25b      	sxtb	r3, r3
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	da07      	bge.n	8015d16 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	7f1b      	ldrb	r3, [r3, #28]
 8015d0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015d0e:	b2da      	uxtb	r2, r3
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8015d14:	e039      	b.n	8015d8a <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8015d16:	79fb      	ldrb	r3, [r7, #7]
 8015d18:	461a      	mov	r2, r3
 8015d1a:	68b9      	ldr	r1, [r7, #8]
 8015d1c:	68f8      	ldr	r0, [r7, #12]
 8015d1e:	f7ff feb5 	bl	8015a8c <netconn_recv_data>
 8015d22:	4603      	mov	r3, r0
 8015d24:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8015d28:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d002      	beq.n	8015d36 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8015d30:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8015d34:	e050      	b.n	8015dd8 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8015d36:	68bb      	ldr	r3, [r7, #8]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8015d3c:	79fb      	ldrb	r3, [r7, #7]
 8015d3e:	f003 0308 	and.w	r3, r3, #8
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d10e      	bne.n	8015d64 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8015d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d002      	beq.n	8015d52 <netconn_recv_data_tcp+0x7a>
 8015d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d4e:	891b      	ldrh	r3, [r3, #8]
 8015d50:	e000      	b.n	8015d54 <netconn_recv_data_tcp+0x7c>
 8015d52:	2301      	movs	r3, #1
 8015d54:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8015d56:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015d58:	f107 0214 	add.w	r2, r7, #20
 8015d5c:	4619      	mov	r1, r3
 8015d5e:	68f8      	ldr	r0, [r7, #12]
 8015d60:	f7ff ff5c 	bl	8015c1c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8015d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d134      	bne.n	8015dd4 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8015d6a:	79fb      	ldrb	r3, [r7, #7]
 8015d6c:	f003 0310 	and.w	r3, r3, #16
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d009      	beq.n	8015d88 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	7f1b      	ldrb	r3, [r3, #28]
 8015d78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8015d7c:	b2da      	uxtb	r2, r3
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8015d82:	f06f 0306 	mvn.w	r3, #6
 8015d86:	e027      	b.n	8015dd8 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8015d88:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d005      	beq.n	8015d9e <netconn_recv_data_tcp+0xc6>
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d96:	2200      	movs	r2, #0
 8015d98:	2101      	movs	r1, #1
 8015d9a:	68f8      	ldr	r0, [r7, #12]
 8015d9c:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	685b      	ldr	r3, [r3, #4]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d10f      	bne.n	8015dc6 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8015da6:	68f8      	ldr	r0, [r7, #12]
 8015da8:	f000 f9a2 	bl	80160f0 <netconn_err>
 8015dac:	4603      	mov	r3, r0
 8015dae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8015db2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d002      	beq.n	8015dc0 <netconn_recv_data_tcp+0xe8>
          return err;
 8015dba:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8015dbe:	e00b      	b.n	8015dd8 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8015dc0:	f06f 030d 	mvn.w	r3, #13
 8015dc4:	e008      	b.n	8015dd8 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8015dc6:	2101      	movs	r1, #1
 8015dc8:	68f8      	ldr	r0, [r7, #12]
 8015dca:	f000 f961 	bl	8016090 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8015dce:	f06f 030e 	mvn.w	r3, #14
 8015dd2:	e001      	b.n	8015dd8 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8015dd4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8015dd8:	4618      	mov	r0, r3
 8015dda:	3740      	adds	r7, #64	@ 0x40
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bd80      	pop	{r7, pc}

08015de0 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b084      	sub	sp, #16
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	60f8      	str	r0, [r7, #12]
 8015de8:	60b9      	str	r1, [r7, #8]
 8015dea:	4613      	mov	r3, r2
 8015dec:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d005      	beq.n	8015e00 <netconn_recv_tcp_pbuf_flags+0x20>
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	781b      	ldrb	r3, [r3, #0]
 8015df8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015dfc:	2b10      	cmp	r3, #16
 8015dfe:	d009      	beq.n	8015e14 <netconn_recv_tcp_pbuf_flags+0x34>
 8015e00:	4b0a      	ldr	r3, [pc, #40]	@ (8015e2c <netconn_recv_tcp_pbuf_flags+0x4c>)
 8015e02:	f240 3225 	movw	r2, #805	@ 0x325
 8015e06:	490a      	ldr	r1, [pc, #40]	@ (8015e30 <netconn_recv_tcp_pbuf_flags+0x50>)
 8015e08:	480a      	ldr	r0, [pc, #40]	@ (8015e34 <netconn_recv_tcp_pbuf_flags+0x54>)
 8015e0a:	f00f fb6b 	bl	80254e4 <iprintf>
 8015e0e:	f06f 030f 	mvn.w	r3, #15
 8015e12:	e006      	b.n	8015e22 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8015e14:	79fb      	ldrb	r3, [r7, #7]
 8015e16:	461a      	mov	r2, r3
 8015e18:	68b9      	ldr	r1, [r7, #8]
 8015e1a:	68f8      	ldr	r0, [r7, #12]
 8015e1c:	f7ff ff5c 	bl	8015cd8 <netconn_recv_data_tcp>
 8015e20:	4603      	mov	r3, r0
}
 8015e22:	4618      	mov	r0, r3
 8015e24:	3710      	adds	r7, #16
 8015e26:	46bd      	mov	sp, r7
 8015e28:	bd80      	pop	{r7, pc}
 8015e2a:	bf00      	nop
 8015e2c:	08029694 	.word	0x08029694
 8015e30:	080298f4 	.word	0x080298f4
 8015e34:	080296ec 	.word	0x080296ec

08015e38 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b084      	sub	sp, #16
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	60f8      	str	r0, [r7, #12]
 8015e40:	60b9      	str	r1, [r7, #8]
 8015e42:	4613      	mov	r3, r2
 8015e44:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d005      	beq.n	8015e58 <netconn_recv_udp_raw_netbuf_flags+0x20>
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	781b      	ldrb	r3, [r3, #0]
 8015e50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015e54:	2b10      	cmp	r3, #16
 8015e56:	d109      	bne.n	8015e6c <netconn_recv_udp_raw_netbuf_flags+0x34>
 8015e58:	4b0a      	ldr	r3, [pc, #40]	@ (8015e84 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 8015e5a:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 8015e5e:	490a      	ldr	r1, [pc, #40]	@ (8015e88 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 8015e60:	480a      	ldr	r0, [pc, #40]	@ (8015e8c <netconn_recv_udp_raw_netbuf_flags+0x54>)
 8015e62:	f00f fb3f 	bl	80254e4 <iprintf>
 8015e66:	f06f 030f 	mvn.w	r3, #15
 8015e6a:	e006      	b.n	8015e7a <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8015e6c:	79fb      	ldrb	r3, [r7, #7]
 8015e6e:	461a      	mov	r2, r3
 8015e70:	68b9      	ldr	r1, [r7, #8]
 8015e72:	68f8      	ldr	r0, [r7, #12]
 8015e74:	f7ff fe0a 	bl	8015a8c <netconn_recv_data>
 8015e78:	4603      	mov	r3, r0
}
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	3710      	adds	r7, #16
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}
 8015e82:	bf00      	nop
 8015e84:	08029694 	.word	0x08029694
 8015e88:	08029918 	.word	0x08029918
 8015e8c:	080296ec 	.word	0x080296ec

08015e90 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b08c      	sub	sp, #48	@ 0x30
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
 8015e98:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d109      	bne.n	8015eb4 <netconn_send+0x24>
 8015ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8015edc <netconn_send+0x4c>)
 8015ea2:	f240 32b2 	movw	r2, #946	@ 0x3b2
 8015ea6:	490e      	ldr	r1, [pc, #56]	@ (8015ee0 <netconn_send+0x50>)
 8015ea8:	480e      	ldr	r0, [pc, #56]	@ (8015ee4 <netconn_send+0x54>)
 8015eaa:	f00f fb1b 	bl	80254e4 <iprintf>
 8015eae:	f06f 030f 	mvn.w	r3, #15
 8015eb2:	e00e      	b.n	8015ed2 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8015eb8:	683b      	ldr	r3, [r7, #0]
 8015eba:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8015ebc:	f107 030c 	add.w	r3, r7, #12
 8015ec0:	4619      	mov	r1, r3
 8015ec2:	4809      	ldr	r0, [pc, #36]	@ (8015ee8 <netconn_send+0x58>)
 8015ec4:	f7ff fc80 	bl	80157c8 <netconn_apimsg>
 8015ec8:	4603      	mov	r3, r0
 8015eca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8015ece:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	3730      	adds	r7, #48	@ 0x30
 8015ed6:	46bd      	mov	sp, r7
 8015ed8:	bd80      	pop	{r7, pc}
 8015eda:	bf00      	nop
 8015edc:	08029694 	.word	0x08029694
 8015ee0:	08029950 	.word	0x08029950
 8015ee4:	080296ec 	.word	0x080296ec
 8015ee8:	08016ff9 	.word	0x08016ff9

08015eec <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b088      	sub	sp, #32
 8015ef0:	af02      	add	r7, sp, #8
 8015ef2:	60f8      	str	r0, [r7, #12]
 8015ef4:	60b9      	str	r1, [r7, #8]
 8015ef6:	607a      	str	r2, [r7, #4]
 8015ef8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8015efa:	68bb      	ldr	r3, [r7, #8]
 8015efc:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8015f02:	78fa      	ldrb	r2, [r7, #3]
 8015f04:	f107 0110 	add.w	r1, r7, #16
 8015f08:	6a3b      	ldr	r3, [r7, #32]
 8015f0a:	9300      	str	r3, [sp, #0]
 8015f0c:	4613      	mov	r3, r2
 8015f0e:	2201      	movs	r2, #1
 8015f10:	68f8      	ldr	r0, [r7, #12]
 8015f12:	f000 f805 	bl	8015f20 <netconn_write_vectors_partly>
 8015f16:	4603      	mov	r3, r0
}
 8015f18:	4618      	mov	r0, r3
 8015f1a:	3718      	adds	r7, #24
 8015f1c:	46bd      	mov	sp, r7
 8015f1e:	bd80      	pop	{r7, pc}

08015f20 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b092      	sub	sp, #72	@ 0x48
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	60f8      	str	r0, [r7, #12]
 8015f28:	60b9      	str	r1, [r7, #8]
 8015f2a:	4611      	mov	r1, r2
 8015f2c:	461a      	mov	r2, r3
 8015f2e:	460b      	mov	r3, r1
 8015f30:	80fb      	strh	r3, [r7, #6]
 8015f32:	4613      	mov	r3, r2
 8015f34:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d109      	bne.n	8015f50 <netconn_write_vectors_partly+0x30>
 8015f3c:	4b4e      	ldr	r3, [pc, #312]	@ (8016078 <netconn_write_vectors_partly+0x158>)
 8015f3e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8015f42:	494e      	ldr	r1, [pc, #312]	@ (801607c <netconn_write_vectors_partly+0x15c>)
 8015f44:	484e      	ldr	r0, [pc, #312]	@ (8016080 <netconn_write_vectors_partly+0x160>)
 8015f46:	f00f facd 	bl	80254e4 <iprintf>
 8015f4a:	f06f 030f 	mvn.w	r3, #15
 8015f4e:	e08e      	b.n	801606e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	781b      	ldrb	r3, [r3, #0]
 8015f54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015f58:	2b10      	cmp	r3, #16
 8015f5a:	d009      	beq.n	8015f70 <netconn_write_vectors_partly+0x50>
 8015f5c:	4b46      	ldr	r3, [pc, #280]	@ (8016078 <netconn_write_vectors_partly+0x158>)
 8015f5e:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8015f62:	4948      	ldr	r1, [pc, #288]	@ (8016084 <netconn_write_vectors_partly+0x164>)
 8015f64:	4846      	ldr	r0, [pc, #280]	@ (8016080 <netconn_write_vectors_partly+0x160>)
 8015f66:	f00f fabd 	bl	80254e4 <iprintf>
 8015f6a:	f06f 0305 	mvn.w	r3, #5
 8015f6e:	e07e      	b.n	801606e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	7f1b      	ldrb	r3, [r3, #28]
 8015f74:	f003 0302 	and.w	r3, r3, #2
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d104      	bne.n	8015f86 <netconn_write_vectors_partly+0x66>
 8015f7c:	797b      	ldrb	r3, [r7, #5]
 8015f7e:	f003 0304 	and.w	r3, r3, #4
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d001      	beq.n	8015f8a <netconn_write_vectors_partly+0x6a>
 8015f86:	2301      	movs	r3, #1
 8015f88:	e000      	b.n	8015f8c <netconn_write_vectors_partly+0x6c>
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8015f90:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d005      	beq.n	8015fa4 <netconn_write_vectors_partly+0x84>
 8015f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d102      	bne.n	8015fa4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8015f9e:	f06f 0305 	mvn.w	r3, #5
 8015fa2:	e064      	b.n	801606e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 8015fa8:	2300      	movs	r3, #0
 8015faa:	643b      	str	r3, [r7, #64]	@ 0x40
 8015fac:	e015      	b.n	8015fda <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8015fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015fb0:	00db      	lsls	r3, r3, #3
 8015fb2:	68ba      	ldr	r2, [r7, #8]
 8015fb4:	4413      	add	r3, r2
 8015fb6:	685b      	ldr	r3, [r3, #4]
 8015fb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015fba:	4413      	add	r3, r2
 8015fbc:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 8015fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015fc0:	00db      	lsls	r3, r3, #3
 8015fc2:	68ba      	ldr	r2, [r7, #8]
 8015fc4:	4413      	add	r3, r2
 8015fc6:	685b      	ldr	r3, [r3, #4]
 8015fc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015fca:	429a      	cmp	r2, r3
 8015fcc:	d202      	bcs.n	8015fd4 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8015fce:	f06f 0305 	mvn.w	r3, #5
 8015fd2:	e04c      	b.n	801606e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8015fd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015fd6:	3301      	adds	r3, #1
 8015fd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8015fda:	88fb      	ldrh	r3, [r7, #6]
 8015fdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015fde:	429a      	cmp	r2, r3
 8015fe0:	dbe5      	blt.n	8015fae <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8015fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d101      	bne.n	8015fec <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8015fe8:	2300      	movs	r3, #0
 8015fea:	e040      	b.n	801606e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8015fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	da0a      	bge.n	8016008 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8015ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d102      	bne.n	8015ffe <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8015ff8:	f06f 0305 	mvn.w	r3, #5
 8015ffc:	e037      	b.n	801606e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8015ffe:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016002:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8016004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016006:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 801600c:	68bb      	ldr	r3, [r7, #8]
 801600e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8016010:	88fb      	ldrh	r3, [r7, #6]
 8016012:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8016014:	2300      	movs	r3, #0
 8016016:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8016018:	797b      	ldrb	r3, [r7, #5]
 801601a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 801601e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016020:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8016022:	2300      	movs	r3, #0
 8016024:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8016026:	f107 0314 	add.w	r3, r7, #20
 801602a:	4619      	mov	r1, r3
 801602c:	4816      	ldr	r0, [pc, #88]	@ (8016088 <netconn_write_vectors_partly+0x168>)
 801602e:	f7ff fbcb 	bl	80157c8 <netconn_apimsg>
 8016032:	4603      	mov	r3, r0
 8016034:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8016038:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801603c:	2b00      	cmp	r3, #0
 801603e:	d114      	bne.n	801606a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8016040:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016042:	2b00      	cmp	r3, #0
 8016044:	d002      	beq.n	801604c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8016046:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801604a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 801604c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016050:	2b00      	cmp	r3, #0
 8016052:	d10a      	bne.n	801606a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8016054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016058:	429a      	cmp	r2, r3
 801605a:	d006      	beq.n	801606a <netconn_write_vectors_partly+0x14a>
 801605c:	4b06      	ldr	r3, [pc, #24]	@ (8016078 <netconn_write_vectors_partly+0x158>)
 801605e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8016062:	490a      	ldr	r1, [pc, #40]	@ (801608c <netconn_write_vectors_partly+0x16c>)
 8016064:	4806      	ldr	r0, [pc, #24]	@ (8016080 <netconn_write_vectors_partly+0x160>)
 8016066:	f00f fa3d 	bl	80254e4 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 801606a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801606e:	4618      	mov	r0, r3
 8016070:	3748      	adds	r7, #72	@ 0x48
 8016072:	46bd      	mov	sp, r7
 8016074:	bd80      	pop	{r7, pc}
 8016076:	bf00      	nop
 8016078:	08029694 	.word	0x08029694
 801607c:	0802996c 	.word	0x0802996c
 8016080:	080296ec 	.word	0x080296ec
 8016084:	08029988 	.word	0x08029988
 8016088:	08017495 	.word	0x08017495
 801608c:	080299ac 	.word	0x080299ac

08016090 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b08c      	sub	sp, #48	@ 0x30
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
 8016098:	460b      	mov	r3, r1
 801609a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d109      	bne.n	80160b6 <netconn_close_shutdown+0x26>
 80160a2:	4b0f      	ldr	r3, [pc, #60]	@ (80160e0 <netconn_close_shutdown+0x50>)
 80160a4:	f240 4247 	movw	r2, #1095	@ 0x447
 80160a8:	490e      	ldr	r1, [pc, #56]	@ (80160e4 <netconn_close_shutdown+0x54>)
 80160aa:	480f      	ldr	r0, [pc, #60]	@ (80160e8 <netconn_close_shutdown+0x58>)
 80160ac:	f00f fa1a 	bl	80254e4 <iprintf>
 80160b0:	f06f 030f 	mvn.w	r3, #15
 80160b4:	e010      	b.n	80160d8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80160ba:	78fb      	ldrb	r3, [r7, #3]
 80160bc:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80160be:	2329      	movs	r3, #41	@ 0x29
 80160c0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80160c2:	f107 030c 	add.w	r3, r7, #12
 80160c6:	4619      	mov	r1, r3
 80160c8:	4808      	ldr	r0, [pc, #32]	@ (80160ec <netconn_close_shutdown+0x5c>)
 80160ca:	f7ff fb7d 	bl	80157c8 <netconn_apimsg>
 80160ce:	4603      	mov	r3, r0
 80160d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80160d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80160d8:	4618      	mov	r0, r3
 80160da:	3730      	adds	r7, #48	@ 0x30
 80160dc:	46bd      	mov	sp, r7
 80160de:	bd80      	pop	{r7, pc}
 80160e0:	08029694 	.word	0x08029694
 80160e4:	080299d0 	.word	0x080299d0
 80160e8:	080296ec 	.word	0x080296ec
 80160ec:	080176b9 	.word	0x080176b9

080160f0 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b084      	sub	sp, #16
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d101      	bne.n	8016102 <netconn_err+0x12>
    return ERR_OK;
 80160fe:	2300      	movs	r3, #0
 8016100:	e00d      	b.n	801611e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8016102:	f00e f955 	bl	80243b0 <sys_arch_protect>
 8016106:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	7a1b      	ldrb	r3, [r3, #8]
 801610c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	2200      	movs	r2, #0
 8016112:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8016114:	68f8      	ldr	r0, [r7, #12]
 8016116:	f00e f959 	bl	80243cc <sys_arch_unprotect>
  return err;
 801611a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801611e:	4618      	mov	r0, r3
 8016120:	3710      	adds	r7, #16
 8016122:	46bd      	mov	sp, r7
 8016124:	bd80      	pop	{r7, pc}
	...

08016128 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b082      	sub	sp, #8
 801612c:	af00      	add	r7, sp, #0
 801612e:	4603      	mov	r3, r0
 8016130:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8016132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016136:	f113 0f0d 	cmn.w	r3, #13
 801613a:	d009      	beq.n	8016150 <lwip_netconn_err_to_msg+0x28>
 801613c:	f113 0f0d 	cmn.w	r3, #13
 8016140:	dc0c      	bgt.n	801615c <lwip_netconn_err_to_msg+0x34>
 8016142:	f113 0f0f 	cmn.w	r3, #15
 8016146:	d007      	beq.n	8016158 <lwip_netconn_err_to_msg+0x30>
 8016148:	f113 0f0e 	cmn.w	r3, #14
 801614c:	d002      	beq.n	8016154 <lwip_netconn_err_to_msg+0x2c>
 801614e:	e005      	b.n	801615c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8016150:	4b0a      	ldr	r3, [pc, #40]	@ (801617c <lwip_netconn_err_to_msg+0x54>)
 8016152:	e00e      	b.n	8016172 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8016154:	4b0a      	ldr	r3, [pc, #40]	@ (8016180 <lwip_netconn_err_to_msg+0x58>)
 8016156:	e00c      	b.n	8016172 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8016158:	4b0a      	ldr	r3, [pc, #40]	@ (8016184 <lwip_netconn_err_to_msg+0x5c>)
 801615a:	e00a      	b.n	8016172 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 801615c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d005      	beq.n	8016170 <lwip_netconn_err_to_msg+0x48>
 8016164:	4b08      	ldr	r3, [pc, #32]	@ (8016188 <lwip_netconn_err_to_msg+0x60>)
 8016166:	227d      	movs	r2, #125	@ 0x7d
 8016168:	4908      	ldr	r1, [pc, #32]	@ (801618c <lwip_netconn_err_to_msg+0x64>)
 801616a:	4809      	ldr	r0, [pc, #36]	@ (8016190 <lwip_netconn_err_to_msg+0x68>)
 801616c:	f00f f9ba 	bl	80254e4 <iprintf>
      return NULL;
 8016170:	2300      	movs	r3, #0
  }
}
 8016172:	4618      	mov	r0, r3
 8016174:	3708      	adds	r7, #8
 8016176:	46bd      	mov	sp, r7
 8016178:	bd80      	pop	{r7, pc}
 801617a:	bf00      	nop
 801617c:	0802cffc 	.word	0x0802cffc
 8016180:	0802cffd 	.word	0x0802cffd
 8016184:	0802cffe 	.word	0x0802cffe
 8016188:	080299ec 	.word	0x080299ec
 801618c:	08029a20 	.word	0x08029a20
 8016190:	08029a30 	.word	0x08029a30

08016194 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b082      	sub	sp, #8
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]
 801619c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 801619e:	683b      	ldr	r3, [r7, #0]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d105      	bne.n	80161b0 <lwip_netconn_is_err_msg+0x1c>
 80161a4:	4b12      	ldr	r3, [pc, #72]	@ (80161f0 <lwip_netconn_is_err_msg+0x5c>)
 80161a6:	2285      	movs	r2, #133	@ 0x85
 80161a8:	4912      	ldr	r1, [pc, #72]	@ (80161f4 <lwip_netconn_is_err_msg+0x60>)
 80161aa:	4813      	ldr	r0, [pc, #76]	@ (80161f8 <lwip_netconn_is_err_msg+0x64>)
 80161ac:	f00f f99a 	bl	80254e4 <iprintf>

  if (msg == &netconn_aborted) {
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	4a12      	ldr	r2, [pc, #72]	@ (80161fc <lwip_netconn_is_err_msg+0x68>)
 80161b4:	4293      	cmp	r3, r2
 80161b6:	d104      	bne.n	80161c2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80161b8:	683b      	ldr	r3, [r7, #0]
 80161ba:	22f3      	movs	r2, #243	@ 0xf3
 80161bc:	701a      	strb	r2, [r3, #0]
    return 1;
 80161be:	2301      	movs	r3, #1
 80161c0:	e012      	b.n	80161e8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	4a0e      	ldr	r2, [pc, #56]	@ (8016200 <lwip_netconn_is_err_msg+0x6c>)
 80161c6:	4293      	cmp	r3, r2
 80161c8:	d104      	bne.n	80161d4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80161ca:	683b      	ldr	r3, [r7, #0]
 80161cc:	22f2      	movs	r2, #242	@ 0xf2
 80161ce:	701a      	strb	r2, [r3, #0]
    return 1;
 80161d0:	2301      	movs	r3, #1
 80161d2:	e009      	b.n	80161e8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	4a0b      	ldr	r2, [pc, #44]	@ (8016204 <lwip_netconn_is_err_msg+0x70>)
 80161d8:	4293      	cmp	r3, r2
 80161da:	d104      	bne.n	80161e6 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80161dc:	683b      	ldr	r3, [r7, #0]
 80161de:	22f1      	movs	r2, #241	@ 0xf1
 80161e0:	701a      	strb	r2, [r3, #0]
    return 1;
 80161e2:	2301      	movs	r3, #1
 80161e4:	e000      	b.n	80161e8 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80161e6:	2300      	movs	r3, #0
}
 80161e8:	4618      	mov	r0, r3
 80161ea:	3708      	adds	r7, #8
 80161ec:	46bd      	mov	sp, r7
 80161ee:	bd80      	pop	{r7, pc}
 80161f0:	080299ec 	.word	0x080299ec
 80161f4:	08029a58 	.word	0x08029a58
 80161f8:	08029a30 	.word	0x08029a30
 80161fc:	0802cffc 	.word	0x0802cffc
 8016200:	0802cffd 	.word	0x0802cffd
 8016204:	0802cffe 	.word	0x0802cffe

08016208 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b088      	sub	sp, #32
 801620c:	af00      	add	r7, sp, #0
 801620e:	60f8      	str	r0, [r7, #12]
 8016210:	60b9      	str	r1, [r7, #8]
 8016212:	607a      	str	r2, [r7, #4]
 8016214:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8016216:	68bb      	ldr	r3, [r7, #8]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d105      	bne.n	8016228 <recv_udp+0x20>
 801621c:	4b34      	ldr	r3, [pc, #208]	@ (80162f0 <recv_udp+0xe8>)
 801621e:	22e5      	movs	r2, #229	@ 0xe5
 8016220:	4934      	ldr	r1, [pc, #208]	@ (80162f4 <recv_udp+0xec>)
 8016222:	4835      	ldr	r0, [pc, #212]	@ (80162f8 <recv_udp+0xf0>)
 8016224:	f00f f95e 	bl	80254e4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d105      	bne.n	801623a <recv_udp+0x32>
 801622e:	4b30      	ldr	r3, [pc, #192]	@ (80162f0 <recv_udp+0xe8>)
 8016230:	22e6      	movs	r2, #230	@ 0xe6
 8016232:	4932      	ldr	r1, [pc, #200]	@ (80162fc <recv_udp+0xf4>)
 8016234:	4830      	ldr	r0, [pc, #192]	@ (80162f8 <recv_udp+0xf0>)
 8016236:	f00f f955 	bl	80254e4 <iprintf>
  conn = (struct netconn *)arg;
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 801623e:	69fb      	ldr	r3, [r7, #28]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d103      	bne.n	801624c <recv_udp+0x44>
    pbuf_free(p);
 8016244:	6878      	ldr	r0, [r7, #4]
 8016246:	f004 f9ff 	bl	801a648 <pbuf_free>
    return;
 801624a:	e04d      	b.n	80162e8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 801624c:	69fb      	ldr	r3, [r7, #28]
 801624e:	685b      	ldr	r3, [r3, #4]
 8016250:	68ba      	ldr	r2, [r7, #8]
 8016252:	429a      	cmp	r2, r3
 8016254:	d005      	beq.n	8016262 <recv_udp+0x5a>
 8016256:	4b26      	ldr	r3, [pc, #152]	@ (80162f0 <recv_udp+0xe8>)
 8016258:	22ee      	movs	r2, #238	@ 0xee
 801625a:	4929      	ldr	r1, [pc, #164]	@ (8016300 <recv_udp+0xf8>)
 801625c:	4826      	ldr	r0, [pc, #152]	@ (80162f8 <recv_udp+0xf0>)
 801625e:	f00f f941 	bl	80254e4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8016262:	69fb      	ldr	r3, [r7, #28]
 8016264:	3310      	adds	r3, #16
 8016266:	4618      	mov	r0, r3
 8016268:	f00d ff87 	bl	802417a <sys_mbox_valid>
 801626c:	4603      	mov	r3, r0
 801626e:	2b00      	cmp	r3, #0
 8016270:	d103      	bne.n	801627a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8016272:	6878      	ldr	r0, [r7, #4]
 8016274:	f004 f9e8 	bl	801a648 <pbuf_free>
    return;
 8016278:	e036      	b.n	80162e8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801627a:	2006      	movs	r0, #6
 801627c:	f003 fa98 	bl	80197b0 <memp_malloc>
 8016280:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8016282:	69bb      	ldr	r3, [r7, #24]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d103      	bne.n	8016290 <recv_udp+0x88>
    pbuf_free(p);
 8016288:	6878      	ldr	r0, [r7, #4]
 801628a:	f004 f9dd 	bl	801a648 <pbuf_free>
    return;
 801628e:	e02b      	b.n	80162e8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8016290:	69bb      	ldr	r3, [r7, #24]
 8016292:	687a      	ldr	r2, [r7, #4]
 8016294:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8016296:	69bb      	ldr	r3, [r7, #24]
 8016298:	687a      	ldr	r2, [r7, #4]
 801629a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 801629c:	683b      	ldr	r3, [r7, #0]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d002      	beq.n	80162a8 <recv_udp+0xa0>
 80162a2:	683b      	ldr	r3, [r7, #0]
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	e000      	b.n	80162aa <recv_udp+0xa2>
 80162a8:	2300      	movs	r3, #0
 80162aa:	69ba      	ldr	r2, [r7, #24]
 80162ac:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80162ae:	69bb      	ldr	r3, [r7, #24]
 80162b0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80162b2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	891b      	ldrh	r3, [r3, #8]
 80162b8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80162ba:	69fb      	ldr	r3, [r7, #28]
 80162bc:	3310      	adds	r3, #16
 80162be:	69b9      	ldr	r1, [r7, #24]
 80162c0:	4618      	mov	r0, r3
 80162c2:	f00d fee5 	bl	8024090 <sys_mbox_trypost>
 80162c6:	4603      	mov	r3, r0
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d003      	beq.n	80162d4 <recv_udp+0xcc>
    netbuf_delete(buf);
 80162cc:	69b8      	ldr	r0, [r7, #24]
 80162ce:	f001 fa9d 	bl	801780c <netbuf_delete>
    return;
 80162d2:	e009      	b.n	80162e8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80162d4:	69fb      	ldr	r3, [r7, #28]
 80162d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d005      	beq.n	80162e8 <recv_udp+0xe0>
 80162dc:	69fb      	ldr	r3, [r7, #28]
 80162de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162e0:	8afa      	ldrh	r2, [r7, #22]
 80162e2:	2100      	movs	r1, #0
 80162e4:	69f8      	ldr	r0, [r7, #28]
 80162e6:	4798      	blx	r3
  }
}
 80162e8:	3720      	adds	r7, #32
 80162ea:	46bd      	mov	sp, r7
 80162ec:	bd80      	pop	{r7, pc}
 80162ee:	bf00      	nop
 80162f0:	080299ec 	.word	0x080299ec
 80162f4:	08029a64 	.word	0x08029a64
 80162f8:	08029a30 	.word	0x08029a30
 80162fc:	08029a88 	.word	0x08029a88
 8016300:	08029aa8 	.word	0x08029aa8

08016304 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b088      	sub	sp, #32
 8016308:	af00      	add	r7, sp, #0
 801630a:	60f8      	str	r0, [r7, #12]
 801630c:	60b9      	str	r1, [r7, #8]
 801630e:	607a      	str	r2, [r7, #4]
 8016310:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8016312:	68bb      	ldr	r3, [r7, #8]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d106      	bne.n	8016326 <recv_tcp+0x22>
 8016318:	4b36      	ldr	r3, [pc, #216]	@ (80163f4 <recv_tcp+0xf0>)
 801631a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 801631e:	4936      	ldr	r1, [pc, #216]	@ (80163f8 <recv_tcp+0xf4>)
 8016320:	4836      	ldr	r0, [pc, #216]	@ (80163fc <recv_tcp+0xf8>)
 8016322:	f00f f8df 	bl	80254e4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d106      	bne.n	801633a <recv_tcp+0x36>
 801632c:	4b31      	ldr	r3, [pc, #196]	@ (80163f4 <recv_tcp+0xf0>)
 801632e:	f240 122d 	movw	r2, #301	@ 0x12d
 8016332:	4933      	ldr	r1, [pc, #204]	@ (8016400 <recv_tcp+0xfc>)
 8016334:	4831      	ldr	r0, [pc, #196]	@ (80163fc <recv_tcp+0xf8>)
 8016336:	f00f f8d5 	bl	80254e4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 801633a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d006      	beq.n	8016350 <recv_tcp+0x4c>
 8016342:	4b2c      	ldr	r3, [pc, #176]	@ (80163f4 <recv_tcp+0xf0>)
 8016344:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8016348:	492e      	ldr	r1, [pc, #184]	@ (8016404 <recv_tcp+0x100>)
 801634a:	482c      	ldr	r0, [pc, #176]	@ (80163fc <recv_tcp+0xf8>)
 801634c:	f00f f8ca 	bl	80254e4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8016354:	697b      	ldr	r3, [r7, #20]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d102      	bne.n	8016360 <recv_tcp+0x5c>
    return ERR_VAL;
 801635a:	f06f 0305 	mvn.w	r3, #5
 801635e:	e045      	b.n	80163ec <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8016360:	697b      	ldr	r3, [r7, #20]
 8016362:	685b      	ldr	r3, [r3, #4]
 8016364:	68ba      	ldr	r2, [r7, #8]
 8016366:	429a      	cmp	r2, r3
 8016368:	d006      	beq.n	8016378 <recv_tcp+0x74>
 801636a:	4b22      	ldr	r3, [pc, #136]	@ (80163f4 <recv_tcp+0xf0>)
 801636c:	f240 1235 	movw	r2, #309	@ 0x135
 8016370:	4925      	ldr	r1, [pc, #148]	@ (8016408 <recv_tcp+0x104>)
 8016372:	4822      	ldr	r0, [pc, #136]	@ (80163fc <recv_tcp+0xf8>)
 8016374:	f00f f8b6 	bl	80254e4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8016378:	697b      	ldr	r3, [r7, #20]
 801637a:	3310      	adds	r3, #16
 801637c:	4618      	mov	r0, r3
 801637e:	f00d fefc 	bl	802417a <sys_mbox_valid>
 8016382:	4603      	mov	r3, r0
 8016384:	2b00      	cmp	r3, #0
 8016386:	d10d      	bne.n	80163a4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d008      	beq.n	80163a0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	891b      	ldrh	r3, [r3, #8]
 8016392:	4619      	mov	r1, r3
 8016394:	68b8      	ldr	r0, [r7, #8]
 8016396:	f005 f855 	bl	801b444 <tcp_recved>
      pbuf_free(p);
 801639a:	6878      	ldr	r0, [r7, #4]
 801639c:	f004 f954 	bl	801a648 <pbuf_free>
    }
    return ERR_OK;
 80163a0:	2300      	movs	r3, #0
 80163a2:	e023      	b.n	80163ec <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d005      	beq.n	80163b6 <recv_tcp+0xb2>
    msg = p;
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	891b      	ldrh	r3, [r3, #8]
 80163b2:	83fb      	strh	r3, [r7, #30]
 80163b4:	e003      	b.n	80163be <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80163b6:	4b15      	ldr	r3, [pc, #84]	@ (801640c <recv_tcp+0x108>)
 80163b8:	61bb      	str	r3, [r7, #24]
    len = 0;
 80163ba:	2300      	movs	r3, #0
 80163bc:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80163be:	697b      	ldr	r3, [r7, #20]
 80163c0:	3310      	adds	r3, #16
 80163c2:	69b9      	ldr	r1, [r7, #24]
 80163c4:	4618      	mov	r0, r3
 80163c6:	f00d fe63 	bl	8024090 <sys_mbox_trypost>
 80163ca:	4603      	mov	r3, r0
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d002      	beq.n	80163d6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80163d0:	f04f 33ff 	mov.w	r3, #4294967295
 80163d4:	e00a      	b.n	80163ec <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80163d6:	697b      	ldr	r3, [r7, #20]
 80163d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d005      	beq.n	80163ea <recv_tcp+0xe6>
 80163de:	697b      	ldr	r3, [r7, #20]
 80163e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163e2:	8bfa      	ldrh	r2, [r7, #30]
 80163e4:	2100      	movs	r1, #0
 80163e6:	6978      	ldr	r0, [r7, #20]
 80163e8:	4798      	blx	r3
  }

  return ERR_OK;
 80163ea:	2300      	movs	r3, #0
}
 80163ec:	4618      	mov	r0, r3
 80163ee:	3720      	adds	r7, #32
 80163f0:	46bd      	mov	sp, r7
 80163f2:	bd80      	pop	{r7, pc}
 80163f4:	080299ec 	.word	0x080299ec
 80163f8:	08029ac8 	.word	0x08029ac8
 80163fc:	08029a30 	.word	0x08029a30
 8016400:	08029aec 	.word	0x08029aec
 8016404:	08029b0c 	.word	0x08029b0c
 8016408:	08029b24 	.word	0x08029b24
 801640c:	0802cffe 	.word	0x0802cffe

08016410 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b084      	sub	sp, #16
 8016414:	af00      	add	r7, sp, #0
 8016416:	6078      	str	r0, [r7, #4]
 8016418:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d106      	bne.n	8016432 <poll_tcp+0x22>
 8016424:	4b29      	ldr	r3, [pc, #164]	@ (80164cc <poll_tcp+0xbc>)
 8016426:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 801642a:	4929      	ldr	r1, [pc, #164]	@ (80164d0 <poll_tcp+0xc0>)
 801642c:	4829      	ldr	r0, [pc, #164]	@ (80164d4 <poll_tcp+0xc4>)
 801642e:	f00f f859 	bl	80254e4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	785b      	ldrb	r3, [r3, #1]
 8016436:	2b01      	cmp	r3, #1
 8016438:	d104      	bne.n	8016444 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801643a:	2101      	movs	r1, #1
 801643c:	68f8      	ldr	r0, [r7, #12]
 801643e:	f000 fe5d 	bl	80170fc <lwip_netconn_do_writemore>
 8016442:	e016      	b.n	8016472 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	785b      	ldrb	r3, [r3, #1]
 8016448:	2b04      	cmp	r3, #4
 801644a:	d112      	bne.n	8016472 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	6a1b      	ldr	r3, [r3, #32]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d00a      	beq.n	801646a <poll_tcp+0x5a>
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	6a1b      	ldr	r3, [r3, #32]
 8016458:	7a5b      	ldrb	r3, [r3, #9]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d005      	beq.n	801646a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	6a1b      	ldr	r3, [r3, #32]
 8016462:	7a5a      	ldrb	r2, [r3, #9]
 8016464:	3a01      	subs	r2, #1
 8016466:	b2d2      	uxtb	r2, r2
 8016468:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801646a:	2101      	movs	r1, #1
 801646c:	68f8      	ldr	r0, [r7, #12]
 801646e:	f000 fb3b 	bl	8016ae8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	7f1b      	ldrb	r3, [r3, #28]
 8016476:	f003 0310 	and.w	r3, r3, #16
 801647a:	2b00      	cmp	r3, #0
 801647c:	d021      	beq.n	80164c2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	685b      	ldr	r3, [r3, #4]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d01d      	beq.n	80164c2 <poll_tcp+0xb2>
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	685b      	ldr	r3, [r3, #4]
 801648a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801648e:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8016492:	d316      	bcc.n	80164c2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	685b      	ldr	r3, [r3, #4]
 8016498:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801649c:	2b04      	cmp	r3, #4
 801649e:	d810      	bhi.n	80164c2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	7f1b      	ldrb	r3, [r3, #28]
 80164a4:	f023 0310 	bic.w	r3, r3, #16
 80164a8:	b2da      	uxtb	r2, r3
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d005      	beq.n	80164c2 <poll_tcp+0xb2>
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164ba:	2200      	movs	r2, #0
 80164bc:	2102      	movs	r1, #2
 80164be:	68f8      	ldr	r0, [r7, #12]
 80164c0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80164c2:	2300      	movs	r3, #0
}
 80164c4:	4618      	mov	r0, r3
 80164c6:	3710      	adds	r7, #16
 80164c8:	46bd      	mov	sp, r7
 80164ca:	bd80      	pop	{r7, pc}
 80164cc:	080299ec 	.word	0x080299ec
 80164d0:	08029b44 	.word	0x08029b44
 80164d4:	08029a30 	.word	0x08029a30

080164d8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80164d8:	b580      	push	{r7, lr}
 80164da:	b086      	sub	sp, #24
 80164dc:	af00      	add	r7, sp, #0
 80164de:	60f8      	str	r0, [r7, #12]
 80164e0:	60b9      	str	r1, [r7, #8]
 80164e2:	4613      	mov	r3, r2
 80164e4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80164ea:	697b      	ldr	r3, [r7, #20]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d106      	bne.n	80164fe <sent_tcp+0x26>
 80164f0:	4b20      	ldr	r3, [pc, #128]	@ (8016574 <sent_tcp+0x9c>)
 80164f2:	f240 1293 	movw	r2, #403	@ 0x193
 80164f6:	4920      	ldr	r1, [pc, #128]	@ (8016578 <sent_tcp+0xa0>)
 80164f8:	4820      	ldr	r0, [pc, #128]	@ (801657c <sent_tcp+0xa4>)
 80164fa:	f00e fff3 	bl	80254e4 <iprintf>

  if (conn) {
 80164fe:	697b      	ldr	r3, [r7, #20]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d032      	beq.n	801656a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8016504:	697b      	ldr	r3, [r7, #20]
 8016506:	785b      	ldrb	r3, [r3, #1]
 8016508:	2b01      	cmp	r3, #1
 801650a:	d104      	bne.n	8016516 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801650c:	2101      	movs	r1, #1
 801650e:	6978      	ldr	r0, [r7, #20]
 8016510:	f000 fdf4 	bl	80170fc <lwip_netconn_do_writemore>
 8016514:	e007      	b.n	8016526 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8016516:	697b      	ldr	r3, [r7, #20]
 8016518:	785b      	ldrb	r3, [r3, #1]
 801651a:	2b04      	cmp	r3, #4
 801651c:	d103      	bne.n	8016526 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801651e:	2101      	movs	r1, #1
 8016520:	6978      	ldr	r0, [r7, #20]
 8016522:	f000 fae1 	bl	8016ae8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8016526:	697b      	ldr	r3, [r7, #20]
 8016528:	685b      	ldr	r3, [r3, #4]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d01d      	beq.n	801656a <sent_tcp+0x92>
 801652e:	697b      	ldr	r3, [r7, #20]
 8016530:	685b      	ldr	r3, [r3, #4]
 8016532:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8016536:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 801653a:	d316      	bcc.n	801656a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801653c:	697b      	ldr	r3, [r7, #20]
 801653e:	685b      	ldr	r3, [r3, #4]
 8016540:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8016544:	2b04      	cmp	r3, #4
 8016546:	d810      	bhi.n	801656a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8016548:	697b      	ldr	r3, [r7, #20]
 801654a:	7f1b      	ldrb	r3, [r3, #28]
 801654c:	f023 0310 	bic.w	r3, r3, #16
 8016550:	b2da      	uxtb	r2, r3
 8016552:	697b      	ldr	r3, [r7, #20]
 8016554:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8016556:	697b      	ldr	r3, [r7, #20]
 8016558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801655a:	2b00      	cmp	r3, #0
 801655c:	d005      	beq.n	801656a <sent_tcp+0x92>
 801655e:	697b      	ldr	r3, [r7, #20]
 8016560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016562:	88fa      	ldrh	r2, [r7, #6]
 8016564:	2102      	movs	r1, #2
 8016566:	6978      	ldr	r0, [r7, #20]
 8016568:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801656a:	2300      	movs	r3, #0
}
 801656c:	4618      	mov	r0, r3
 801656e:	3718      	adds	r7, #24
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}
 8016574:	080299ec 	.word	0x080299ec
 8016578:	08029b44 	.word	0x08029b44
 801657c:	08029a30 	.word	0x08029a30

08016580 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b088      	sub	sp, #32
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
 8016588:	460b      	mov	r3, r1
 801658a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8016590:	69fb      	ldr	r3, [r7, #28]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d106      	bne.n	80165a4 <err_tcp+0x24>
 8016596:	4b5f      	ldr	r3, [pc, #380]	@ (8016714 <err_tcp+0x194>)
 8016598:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801659c:	495e      	ldr	r1, [pc, #376]	@ (8016718 <err_tcp+0x198>)
 801659e:	485f      	ldr	r0, [pc, #380]	@ (801671c <err_tcp+0x19c>)
 80165a0:	f00e ffa0 	bl	80254e4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80165a4:	f00d ff04 	bl	80243b0 <sys_arch_protect>
 80165a8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80165aa:	69fb      	ldr	r3, [r7, #28]
 80165ac:	2200      	movs	r2, #0
 80165ae:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80165b0:	69fb      	ldr	r3, [r7, #28]
 80165b2:	78fa      	ldrb	r2, [r7, #3]
 80165b4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80165b6:	69fb      	ldr	r3, [r7, #28]
 80165b8:	7f1b      	ldrb	r3, [r3, #28]
 80165ba:	f043 0301 	orr.w	r3, r3, #1
 80165be:	b2da      	uxtb	r2, r3
 80165c0:	69fb      	ldr	r3, [r7, #28]
 80165c2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80165c4:	69fb      	ldr	r3, [r7, #28]
 80165c6:	785b      	ldrb	r3, [r3, #1]
 80165c8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80165ca:	69fb      	ldr	r3, [r7, #28]
 80165cc:	2200      	movs	r2, #0
 80165ce:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80165d0:	69b8      	ldr	r0, [r7, #24]
 80165d2:	f00d fefb 	bl	80243cc <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80165d6:	69fb      	ldr	r3, [r7, #28]
 80165d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d005      	beq.n	80165ea <err_tcp+0x6a>
 80165de:	69fb      	ldr	r3, [r7, #28]
 80165e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80165e2:	2200      	movs	r2, #0
 80165e4:	2104      	movs	r1, #4
 80165e6:	69f8      	ldr	r0, [r7, #28]
 80165e8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80165ea:	69fb      	ldr	r3, [r7, #28]
 80165ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d005      	beq.n	80165fe <err_tcp+0x7e>
 80165f2:	69fb      	ldr	r3, [r7, #28]
 80165f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80165f6:	2200      	movs	r2, #0
 80165f8:	2100      	movs	r1, #0
 80165fa:	69f8      	ldr	r0, [r7, #28]
 80165fc:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80165fe:	69fb      	ldr	r3, [r7, #28]
 8016600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016602:	2b00      	cmp	r3, #0
 8016604:	d005      	beq.n	8016612 <err_tcp+0x92>
 8016606:	69fb      	ldr	r3, [r7, #28]
 8016608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801660a:	2200      	movs	r2, #0
 801660c:	2102      	movs	r1, #2
 801660e:	69f8      	ldr	r0, [r7, #28]
 8016610:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8016612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016616:	4618      	mov	r0, r3
 8016618:	f7ff fd86 	bl	8016128 <lwip_netconn_err_to_msg>
 801661c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801661e:	69fb      	ldr	r3, [r7, #28]
 8016620:	3310      	adds	r3, #16
 8016622:	4618      	mov	r0, r3
 8016624:	f00d fda9 	bl	802417a <sys_mbox_valid>
 8016628:	4603      	mov	r3, r0
 801662a:	2b00      	cmp	r3, #0
 801662c:	d005      	beq.n	801663a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 801662e:	69fb      	ldr	r3, [r7, #28]
 8016630:	3310      	adds	r3, #16
 8016632:	6939      	ldr	r1, [r7, #16]
 8016634:	4618      	mov	r0, r3
 8016636:	f00d fd2b 	bl	8024090 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801663a:	69fb      	ldr	r3, [r7, #28]
 801663c:	3314      	adds	r3, #20
 801663e:	4618      	mov	r0, r3
 8016640:	f00d fd9b 	bl	802417a <sys_mbox_valid>
 8016644:	4603      	mov	r3, r0
 8016646:	2b00      	cmp	r3, #0
 8016648:	d005      	beq.n	8016656 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 801664a:	69fb      	ldr	r3, [r7, #28]
 801664c:	3314      	adds	r3, #20
 801664e:	6939      	ldr	r1, [r7, #16]
 8016650:	4618      	mov	r0, r3
 8016652:	f00d fd1d 	bl	8024090 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8016656:	7dfb      	ldrb	r3, [r7, #23]
 8016658:	2b01      	cmp	r3, #1
 801665a:	d005      	beq.n	8016668 <err_tcp+0xe8>
 801665c:	7dfb      	ldrb	r3, [r7, #23]
 801665e:	2b04      	cmp	r3, #4
 8016660:	d002      	beq.n	8016668 <err_tcp+0xe8>
 8016662:	7dfb      	ldrb	r3, [r7, #23]
 8016664:	2b03      	cmp	r3, #3
 8016666:	d143      	bne.n	80166f0 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8016668:	69fb      	ldr	r3, [r7, #28]
 801666a:	7f1b      	ldrb	r3, [r3, #28]
 801666c:	f003 0304 	and.w	r3, r3, #4
 8016670:	2b00      	cmp	r3, #0
 8016672:	bf14      	ite	ne
 8016674:	2301      	movne	r3, #1
 8016676:	2300      	moveq	r3, #0
 8016678:	b2db      	uxtb	r3, r3
 801667a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 801667c:	69fb      	ldr	r3, [r7, #28]
 801667e:	7f1b      	ldrb	r3, [r3, #28]
 8016680:	f023 0304 	bic.w	r3, r3, #4
 8016684:	b2da      	uxtb	r2, r3
 8016686:	69fb      	ldr	r3, [r7, #28]
 8016688:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d13b      	bne.n	8016708 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8016690:	69fb      	ldr	r3, [r7, #28]
 8016692:	6a1b      	ldr	r3, [r3, #32]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d106      	bne.n	80166a6 <err_tcp+0x126>
 8016698:	4b1e      	ldr	r3, [pc, #120]	@ (8016714 <err_tcp+0x194>)
 801669a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801669e:	4920      	ldr	r1, [pc, #128]	@ (8016720 <err_tcp+0x1a0>)
 80166a0:	481e      	ldr	r0, [pc, #120]	@ (801671c <err_tcp+0x19c>)
 80166a2:	f00e ff1f 	bl	80254e4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80166a6:	7dfb      	ldrb	r3, [r7, #23]
 80166a8:	2b04      	cmp	r3, #4
 80166aa:	d104      	bne.n	80166b6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80166ac:	69fb      	ldr	r3, [r7, #28]
 80166ae:	6a1b      	ldr	r3, [r3, #32]
 80166b0:	2200      	movs	r2, #0
 80166b2:	711a      	strb	r2, [r3, #4]
 80166b4:	e003      	b.n	80166be <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80166b6:	69fb      	ldr	r3, [r7, #28]
 80166b8:	6a1b      	ldr	r3, [r3, #32]
 80166ba:	78fa      	ldrb	r2, [r7, #3]
 80166bc:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80166be:	69fb      	ldr	r3, [r7, #28]
 80166c0:	6a1b      	ldr	r3, [r3, #32]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	330c      	adds	r3, #12
 80166c6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80166c8:	68b8      	ldr	r0, [r7, #8]
 80166ca:	f00d fde7 	bl	802429c <sys_sem_valid>
 80166ce:	4603      	mov	r3, r0
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d106      	bne.n	80166e2 <err_tcp+0x162>
 80166d4:	4b0f      	ldr	r3, [pc, #60]	@ (8016714 <err_tcp+0x194>)
 80166d6:	f240 12ef 	movw	r2, #495	@ 0x1ef
 80166da:	4912      	ldr	r1, [pc, #72]	@ (8016724 <err_tcp+0x1a4>)
 80166dc:	480f      	ldr	r0, [pc, #60]	@ (801671c <err_tcp+0x19c>)
 80166de:	f00e ff01 	bl	80254e4 <iprintf>
      conn->current_msg = NULL;
 80166e2:	69fb      	ldr	r3, [r7, #28]
 80166e4:	2200      	movs	r2, #0
 80166e6:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80166e8:	68b8      	ldr	r0, [r7, #8]
 80166ea:	f00d fdbd 	bl	8024268 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80166ee:	e00b      	b.n	8016708 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80166f0:	69fb      	ldr	r3, [r7, #28]
 80166f2:	6a1b      	ldr	r3, [r3, #32]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d008      	beq.n	801670a <err_tcp+0x18a>
 80166f8:	4b06      	ldr	r3, [pc, #24]	@ (8016714 <err_tcp+0x194>)
 80166fa:	f240 12f7 	movw	r2, #503	@ 0x1f7
 80166fe:	490a      	ldr	r1, [pc, #40]	@ (8016728 <err_tcp+0x1a8>)
 8016700:	4806      	ldr	r0, [pc, #24]	@ (801671c <err_tcp+0x19c>)
 8016702:	f00e feef 	bl	80254e4 <iprintf>
  }
}
 8016706:	e000      	b.n	801670a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8016708:	bf00      	nop
}
 801670a:	bf00      	nop
 801670c:	3720      	adds	r7, #32
 801670e:	46bd      	mov	sp, r7
 8016710:	bd80      	pop	{r7, pc}
 8016712:	bf00      	nop
 8016714:	080299ec 	.word	0x080299ec
 8016718:	08029b44 	.word	0x08029b44
 801671c:	08029a30 	.word	0x08029a30
 8016720:	08029b54 	.word	0x08029b54
 8016724:	08029b70 	.word	0x08029b70
 8016728:	08029b8c 	.word	0x08029b8c

0801672c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b084      	sub	sp, #16
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	685b      	ldr	r3, [r3, #4]
 8016738:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 801673a:	6879      	ldr	r1, [r7, #4]
 801673c:	68f8      	ldr	r0, [r7, #12]
 801673e:	f005 fd49 	bl	801c1d4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8016742:	490a      	ldr	r1, [pc, #40]	@ (801676c <setup_tcp+0x40>)
 8016744:	68f8      	ldr	r0, [r7, #12]
 8016746:	f005 fd57 	bl	801c1f8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 801674a:	4909      	ldr	r1, [pc, #36]	@ (8016770 <setup_tcp+0x44>)
 801674c:	68f8      	ldr	r0, [r7, #12]
 801674e:	f005 fd75 	bl	801c23c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8016752:	2202      	movs	r2, #2
 8016754:	4907      	ldr	r1, [pc, #28]	@ (8016774 <setup_tcp+0x48>)
 8016756:	68f8      	ldr	r0, [r7, #12]
 8016758:	f005 fdcc 	bl	801c2f4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 801675c:	4906      	ldr	r1, [pc, #24]	@ (8016778 <setup_tcp+0x4c>)
 801675e:	68f8      	ldr	r0, [r7, #12]
 8016760:	f005 fd8e 	bl	801c280 <tcp_err>
}
 8016764:	bf00      	nop
 8016766:	3710      	adds	r7, #16
 8016768:	46bd      	mov	sp, r7
 801676a:	bd80      	pop	{r7, pc}
 801676c:	08016305 	.word	0x08016305
 8016770:	080164d9 	.word	0x080164d9
 8016774:	08016411 	.word	0x08016411
 8016778:	08016581 	.word	0x08016581

0801677c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 801677c:	b590      	push	{r4, r7, lr}
 801677e:	b085      	sub	sp, #20
 8016780:	af00      	add	r7, sp, #0
 8016782:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8016784:	2300      	movs	r3, #0
 8016786:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	685b      	ldr	r3, [r3, #4]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d006      	beq.n	80167a0 <pcb_new+0x24>
 8016792:	4b2b      	ldr	r3, [pc, #172]	@ (8016840 <pcb_new+0xc4>)
 8016794:	f240 2265 	movw	r2, #613	@ 0x265
 8016798:	492a      	ldr	r1, [pc, #168]	@ (8016844 <pcb_new+0xc8>)
 801679a:	482b      	ldr	r0, [pc, #172]	@ (8016848 <pcb_new+0xcc>)
 801679c:	f00e fea2 	bl	80254e4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	781b      	ldrb	r3, [r3, #0]
 80167a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80167aa:	2b10      	cmp	r3, #16
 80167ac:	d022      	beq.n	80167f4 <pcb_new+0x78>
 80167ae:	2b20      	cmp	r3, #32
 80167b0:	d133      	bne.n	801681a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	681c      	ldr	r4, [r3, #0]
 80167b6:	7bfb      	ldrb	r3, [r7, #15]
 80167b8:	4618      	mov	r0, r3
 80167ba:	f00a ffce 	bl	802175a <udp_new_ip_type>
 80167be:	4603      	mov	r3, r0
 80167c0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	685b      	ldr	r3, [r3, #4]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d02a      	beq.n	8016822 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	781b      	ldrb	r3, [r3, #0]
 80167d2:	2b22      	cmp	r3, #34	@ 0x22
 80167d4:	d104      	bne.n	80167e0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	685b      	ldr	r3, [r3, #4]
 80167dc:	2201      	movs	r2, #1
 80167de:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	6858      	ldr	r0, [r3, #4]
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	461a      	mov	r2, r3
 80167ec:	4917      	ldr	r1, [pc, #92]	@ (801684c <pcb_new+0xd0>)
 80167ee:	f00a ff3b 	bl	8021668 <udp_recv>
      }
      break;
 80167f2:	e016      	b.n	8016822 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	681c      	ldr	r4, [r3, #0]
 80167f8:	7bfb      	ldrb	r3, [r7, #15]
 80167fa:	4618      	mov	r0, r3
 80167fc:	f005 fcdc 	bl	801c1b8 <tcp_new_ip_type>
 8016800:	4603      	mov	r3, r0
 8016802:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	685b      	ldr	r3, [r3, #4]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d00b      	beq.n	8016826 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	4618      	mov	r0, r3
 8016814:	f7ff ff8a 	bl	801672c <setup_tcp>
      }
      break;
 8016818:	e005      	b.n	8016826 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	22fa      	movs	r2, #250	@ 0xfa
 801681e:	711a      	strb	r2, [r3, #4]
      return;
 8016820:	e00a      	b.n	8016838 <pcb_new+0xbc>
      break;
 8016822:	bf00      	nop
 8016824:	e000      	b.n	8016828 <pcb_new+0xac>
      break;
 8016826:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	685b      	ldr	r3, [r3, #4]
 801682e:	2b00      	cmp	r3, #0
 8016830:	d102      	bne.n	8016838 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	22ff      	movs	r2, #255	@ 0xff
 8016836:	711a      	strb	r2, [r3, #4]
  }
}
 8016838:	3714      	adds	r7, #20
 801683a:	46bd      	mov	sp, r7
 801683c:	bd90      	pop	{r4, r7, pc}
 801683e:	bf00      	nop
 8016840:	080299ec 	.word	0x080299ec
 8016844:	08029bd0 	.word	0x08029bd0
 8016848:	08029a30 	.word	0x08029a30
 801684c:	08016209 	.word	0x08016209

08016850 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b084      	sub	sp, #16
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	2200      	movs	r2, #0
 8016860:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	685b      	ldr	r3, [r3, #4]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d102      	bne.n	8016872 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 801686c:	68f8      	ldr	r0, [r7, #12]
 801686e:	f7ff ff85 	bl	801677c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8016872:	bf00      	nop
 8016874:	3710      	adds	r7, #16
 8016876:	46bd      	mov	sp, r7
 8016878:	bd80      	pop	{r7, pc}
	...

0801687c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 801687c:	b580      	push	{r7, lr}
 801687e:	b086      	sub	sp, #24
 8016880:	af00      	add	r7, sp, #0
 8016882:	4603      	mov	r3, r0
 8016884:	6039      	str	r1, [r7, #0]
 8016886:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8016888:	2300      	movs	r3, #0
 801688a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 801688c:	2007      	movs	r0, #7
 801688e:	f002 ff8f 	bl	80197b0 <memp_malloc>
 8016892:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d101      	bne.n	801689e <netconn_alloc+0x22>
    return NULL;
 801689a:	2300      	movs	r3, #0
 801689c:	e052      	b.n	8016944 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	2200      	movs	r2, #0
 80168a2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	79fa      	ldrb	r2, [r7, #7]
 80168a8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	2200      	movs	r2, #0
 80168ae:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80168b0:	79fb      	ldrb	r3, [r7, #7]
 80168b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80168b6:	2b10      	cmp	r3, #16
 80168b8:	d004      	beq.n	80168c4 <netconn_alloc+0x48>
 80168ba:	2b20      	cmp	r3, #32
 80168bc:	d105      	bne.n	80168ca <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80168be:	2306      	movs	r3, #6
 80168c0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80168c2:	e00a      	b.n	80168da <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80168c4:	2306      	movs	r3, #6
 80168c6:	617b      	str	r3, [r7, #20]
      break;
 80168c8:	e007      	b.n	80168da <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80168ca:	4b20      	ldr	r3, [pc, #128]	@ (801694c <netconn_alloc+0xd0>)
 80168cc:	f240 22e5 	movw	r2, #741	@ 0x2e5
 80168d0:	491f      	ldr	r1, [pc, #124]	@ (8016950 <netconn_alloc+0xd4>)
 80168d2:	4820      	ldr	r0, [pc, #128]	@ (8016954 <netconn_alloc+0xd8>)
 80168d4:	f00e fe06 	bl	80254e4 <iprintf>
      goto free_and_return;
 80168d8:	e02f      	b.n	801693a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	3310      	adds	r3, #16
 80168de:	6979      	ldr	r1, [r7, #20]
 80168e0:	4618      	mov	r0, r3
 80168e2:	f00d fba1 	bl	8024028 <sys_mbox_new>
 80168e6:	4603      	mov	r3, r0
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d125      	bne.n	8016938 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	330c      	adds	r3, #12
 80168f0:	2100      	movs	r1, #0
 80168f2:	4618      	mov	r0, r3
 80168f4:	f00d fc5f 	bl	80241b6 <sys_sem_new>
 80168f8:	4603      	mov	r3, r0
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d005      	beq.n	801690a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	3310      	adds	r3, #16
 8016902:	4618      	mov	r0, r3
 8016904:	f00d fbb2 	bl	802406c <sys_mbox_free>
    goto free_and_return;
 8016908:	e017      	b.n	801693a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	3314      	adds	r3, #20
 801690e:	4618      	mov	r0, r3
 8016910:	f00d fc44 	bl	802419c <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	2200      	movs	r2, #0
 8016918:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	f04f 32ff 	mov.w	r2, #4294967295
 8016920:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	683a      	ldr	r2, [r7, #0]
 8016926:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	2200      	movs	r2, #0
 801692c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	7cfa      	ldrb	r2, [r7, #19]
 8016932:	771a      	strb	r2, [r3, #28]
  return conn;
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	e005      	b.n	8016944 <netconn_alloc+0xc8>
    goto free_and_return;
 8016938:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 801693a:	68f9      	ldr	r1, [r7, #12]
 801693c:	2007      	movs	r0, #7
 801693e:	f002 ffad 	bl	801989c <memp_free>
  return NULL;
 8016942:	2300      	movs	r3, #0
}
 8016944:	4618      	mov	r0, r3
 8016946:	3718      	adds	r7, #24
 8016948:	46bd      	mov	sp, r7
 801694a:	bd80      	pop	{r7, pc}
 801694c:	080299ec 	.word	0x080299ec
 8016950:	08029bf0 	.word	0x08029bf0
 8016954:	08029a30 	.word	0x08029a30

08016958 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b082      	sub	sp, #8
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	685b      	ldr	r3, [r3, #4]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d006      	beq.n	8016976 <netconn_free+0x1e>
 8016968:	4b1b      	ldr	r3, [pc, #108]	@ (80169d8 <netconn_free+0x80>)
 801696a:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801696e:	491b      	ldr	r1, [pc, #108]	@ (80169dc <netconn_free+0x84>)
 8016970:	481b      	ldr	r0, [pc, #108]	@ (80169e0 <netconn_free+0x88>)
 8016972:	f00e fdb7 	bl	80254e4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	3310      	adds	r3, #16
 801697a:	4618      	mov	r0, r3
 801697c:	f00d fbfd 	bl	802417a <sys_mbox_valid>
 8016980:	4603      	mov	r3, r0
 8016982:	2b00      	cmp	r3, #0
 8016984:	d006      	beq.n	8016994 <netconn_free+0x3c>
 8016986:	4b14      	ldr	r3, [pc, #80]	@ (80169d8 <netconn_free+0x80>)
 8016988:	f240 3223 	movw	r2, #803	@ 0x323
 801698c:	4915      	ldr	r1, [pc, #84]	@ (80169e4 <netconn_free+0x8c>)
 801698e:	4814      	ldr	r0, [pc, #80]	@ (80169e0 <netconn_free+0x88>)
 8016990:	f00e fda8 	bl	80254e4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	3314      	adds	r3, #20
 8016998:	4618      	mov	r0, r3
 801699a:	f00d fbee 	bl	802417a <sys_mbox_valid>
 801699e:	4603      	mov	r3, r0
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d006      	beq.n	80169b2 <netconn_free+0x5a>
 80169a4:	4b0c      	ldr	r3, [pc, #48]	@ (80169d8 <netconn_free+0x80>)
 80169a6:	f240 3226 	movw	r2, #806	@ 0x326
 80169aa:	490f      	ldr	r1, [pc, #60]	@ (80169e8 <netconn_free+0x90>)
 80169ac:	480c      	ldr	r0, [pc, #48]	@ (80169e0 <netconn_free+0x88>)
 80169ae:	f00e fd99 	bl	80254e4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	330c      	adds	r3, #12
 80169b6:	4618      	mov	r0, r3
 80169b8:	f00d fc63 	bl	8024282 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	330c      	adds	r3, #12
 80169c0:	4618      	mov	r0, r3
 80169c2:	f00d fc7c 	bl	80242be <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80169c6:	6879      	ldr	r1, [r7, #4]
 80169c8:	2007      	movs	r0, #7
 80169ca:	f002 ff67 	bl	801989c <memp_free>
}
 80169ce:	bf00      	nop
 80169d0:	3708      	adds	r7, #8
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bd80      	pop	{r7, pc}
 80169d6:	bf00      	nop
 80169d8:	080299ec 	.word	0x080299ec
 80169dc:	08029c18 	.word	0x08029c18
 80169e0:	08029a30 	.word	0x08029a30
 80169e4:	08029c48 	.word	0x08029c48
 80169e8:	08029c84 	.word	0x08029c84

080169ec <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b086      	sub	sp, #24
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	3310      	adds	r3, #16
 80169f8:	4618      	mov	r0, r3
 80169fa:	f00d fbbe 	bl	802417a <sys_mbox_valid>
 80169fe:	4603      	mov	r3, r0
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d02f      	beq.n	8016a64 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8016a04:	e018      	b.n	8016a38 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	781b      	ldrb	r3, [r3, #0]
 8016a0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016a0e:	2b10      	cmp	r3, #16
 8016a10:	d10e      	bne.n	8016a30 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8016a12:	693b      	ldr	r3, [r7, #16]
 8016a14:	f107 020f 	add.w	r2, r7, #15
 8016a18:	4611      	mov	r1, r2
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	f7ff fbba 	bl	8016194 <lwip_netconn_is_err_msg>
 8016a20:	4603      	mov	r3, r0
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d108      	bne.n	8016a38 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8016a26:	693b      	ldr	r3, [r7, #16]
 8016a28:	4618      	mov	r0, r3
 8016a2a:	f003 fe0d 	bl	801a648 <pbuf_free>
 8016a2e:	e003      	b.n	8016a38 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8016a30:	693b      	ldr	r3, [r7, #16]
 8016a32:	4618      	mov	r0, r3
 8016a34:	f000 feea 	bl	801780c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	3310      	adds	r3, #16
 8016a3c:	f107 0210 	add.w	r2, r7, #16
 8016a40:	4611      	mov	r1, r2
 8016a42:	4618      	mov	r0, r3
 8016a44:	f00d fb7d 	bl	8024142 <sys_arch_mbox_tryfetch>
 8016a48:	4603      	mov	r3, r0
 8016a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a4e:	d1da      	bne.n	8016a06 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	3310      	adds	r3, #16
 8016a54:	4618      	mov	r0, r3
 8016a56:	f00d fb09 	bl	802406c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	3310      	adds	r3, #16
 8016a5e:	4618      	mov	r0, r3
 8016a60:	f00d fb9c 	bl	802419c <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	3314      	adds	r3, #20
 8016a68:	4618      	mov	r0, r3
 8016a6a:	f00d fb86 	bl	802417a <sys_mbox_valid>
 8016a6e:	4603      	mov	r3, r0
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d034      	beq.n	8016ade <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8016a74:	e01d      	b.n	8016ab2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8016a76:	693b      	ldr	r3, [r7, #16]
 8016a78:	f107 020e 	add.w	r2, r7, #14
 8016a7c:	4611      	mov	r1, r2
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f7ff fb88 	bl	8016194 <lwip_netconn_is_err_msg>
 8016a84:	4603      	mov	r3, r0
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d113      	bne.n	8016ab2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8016a8a:	693b      	ldr	r3, [r7, #16]
 8016a8c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8016a8e:	6978      	ldr	r0, [r7, #20]
 8016a90:	f7ff ffac 	bl	80169ec <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8016a94:	697b      	ldr	r3, [r7, #20]
 8016a96:	685b      	ldr	r3, [r3, #4]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d007      	beq.n	8016aac <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8016a9c:	697b      	ldr	r3, [r7, #20]
 8016a9e:	685b      	ldr	r3, [r3, #4]
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	f004 fbd1 	bl	801b248 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8016aa6:	697b      	ldr	r3, [r7, #20]
 8016aa8:	2200      	movs	r2, #0
 8016aaa:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8016aac:	6978      	ldr	r0, [r7, #20]
 8016aae:	f7ff ff53 	bl	8016958 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	3314      	adds	r3, #20
 8016ab6:	f107 0210 	add.w	r2, r7, #16
 8016aba:	4611      	mov	r1, r2
 8016abc:	4618      	mov	r0, r3
 8016abe:	f00d fb40 	bl	8024142 <sys_arch_mbox_tryfetch>
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ac8:	d1d5      	bne.n	8016a76 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	3314      	adds	r3, #20
 8016ace:	4618      	mov	r0, r3
 8016ad0:	f00d facc 	bl	802406c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	3314      	adds	r3, #20
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f00d fb5f 	bl	802419c <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8016ade:	bf00      	nop
 8016ae0:	3718      	adds	r7, #24
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	bd80      	pop	{r7, pc}
	...

08016ae8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b086      	sub	sp, #24
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	6078      	str	r0, [r7, #4]
 8016af0:	460b      	mov	r3, r1
 8016af2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8016af4:	2300      	movs	r3, #0
 8016af6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d106      	bne.n	8016b0c <lwip_netconn_do_close_internal+0x24>
 8016afe:	4b87      	ldr	r3, [pc, #540]	@ (8016d1c <lwip_netconn_do_close_internal+0x234>)
 8016b00:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8016b04:	4986      	ldr	r1, [pc, #536]	@ (8016d20 <lwip_netconn_do_close_internal+0x238>)
 8016b06:	4887      	ldr	r0, [pc, #540]	@ (8016d24 <lwip_netconn_do_close_internal+0x23c>)
 8016b08:	f00e fcec 	bl	80254e4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	781b      	ldrb	r3, [r3, #0]
 8016b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016b14:	2b10      	cmp	r3, #16
 8016b16:	d006      	beq.n	8016b26 <lwip_netconn_do_close_internal+0x3e>
 8016b18:	4b80      	ldr	r3, [pc, #512]	@ (8016d1c <lwip_netconn_do_close_internal+0x234>)
 8016b1a:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8016b1e:	4982      	ldr	r1, [pc, #520]	@ (8016d28 <lwip_netconn_do_close_internal+0x240>)
 8016b20:	4880      	ldr	r0, [pc, #512]	@ (8016d24 <lwip_netconn_do_close_internal+0x23c>)
 8016b22:	f00e fcdf 	bl	80254e4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	785b      	ldrb	r3, [r3, #1]
 8016b2a:	2b04      	cmp	r3, #4
 8016b2c:	d006      	beq.n	8016b3c <lwip_netconn_do_close_internal+0x54>
 8016b2e:	4b7b      	ldr	r3, [pc, #492]	@ (8016d1c <lwip_netconn_do_close_internal+0x234>)
 8016b30:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8016b34:	497d      	ldr	r1, [pc, #500]	@ (8016d2c <lwip_netconn_do_close_internal+0x244>)
 8016b36:	487b      	ldr	r0, [pc, #492]	@ (8016d24 <lwip_netconn_do_close_internal+0x23c>)
 8016b38:	f00e fcd4 	bl	80254e4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	685b      	ldr	r3, [r3, #4]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d106      	bne.n	8016b52 <lwip_netconn_do_close_internal+0x6a>
 8016b44:	4b75      	ldr	r3, [pc, #468]	@ (8016d1c <lwip_netconn_do_close_internal+0x234>)
 8016b46:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8016b4a:	4979      	ldr	r1, [pc, #484]	@ (8016d30 <lwip_netconn_do_close_internal+0x248>)
 8016b4c:	4875      	ldr	r0, [pc, #468]	@ (8016d24 <lwip_netconn_do_close_internal+0x23c>)
 8016b4e:	f00e fcc9 	bl	80254e4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	6a1b      	ldr	r3, [r3, #32]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d106      	bne.n	8016b68 <lwip_netconn_do_close_internal+0x80>
 8016b5a:	4b70      	ldr	r3, [pc, #448]	@ (8016d1c <lwip_netconn_do_close_internal+0x234>)
 8016b5c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8016b60:	4974      	ldr	r1, [pc, #464]	@ (8016d34 <lwip_netconn_do_close_internal+0x24c>)
 8016b62:	4870      	ldr	r0, [pc, #448]	@ (8016d24 <lwip_netconn_do_close_internal+0x23c>)
 8016b64:	f00e fcbe 	bl	80254e4 <iprintf>

  tpcb = conn->pcb.tcp;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	685b      	ldr	r3, [r3, #4]
 8016b6c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	6a1b      	ldr	r3, [r3, #32]
 8016b72:	7a1b      	ldrb	r3, [r3, #8]
 8016b74:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8016b76:	7bfb      	ldrb	r3, [r7, #15]
 8016b78:	f003 0301 	and.w	r3, r3, #1
 8016b7c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8016b7e:	7bfb      	ldrb	r3, [r7, #15]
 8016b80:	f003 0302 	and.w	r3, r3, #2
 8016b84:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8016b86:	7bfb      	ldrb	r3, [r7, #15]
 8016b88:	2b03      	cmp	r3, #3
 8016b8a:	d102      	bne.n	8016b92 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8016b8c:	2301      	movs	r3, #1
 8016b8e:	75bb      	strb	r3, [r7, #22]
 8016b90:	e01f      	b.n	8016bd2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8016b92:	7bbb      	ldrb	r3, [r7, #14]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d00e      	beq.n	8016bb6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8016b98:	693b      	ldr	r3, [r7, #16]
 8016b9a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8016b9c:	2b05      	cmp	r3, #5
 8016b9e:	d007      	beq.n	8016bb0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8016ba0:	693b      	ldr	r3, [r7, #16]
 8016ba2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8016ba4:	2b06      	cmp	r3, #6
 8016ba6:	d003      	beq.n	8016bb0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8016ba8:	693b      	ldr	r3, [r7, #16]
 8016baa:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8016bac:	2b08      	cmp	r3, #8
 8016bae:	d102      	bne.n	8016bb6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8016bb0:	2301      	movs	r3, #1
 8016bb2:	75bb      	strb	r3, [r7, #22]
 8016bb4:	e00d      	b.n	8016bd2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8016bb6:	7b7b      	ldrb	r3, [r7, #13]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d008      	beq.n	8016bce <lwip_netconn_do_close_internal+0xe6>
 8016bbc:	693b      	ldr	r3, [r7, #16]
 8016bbe:	8b5b      	ldrh	r3, [r3, #26]
 8016bc0:	f003 0310 	and.w	r3, r3, #16
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d002      	beq.n	8016bce <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8016bc8:	2301      	movs	r3, #1
 8016bca:	75bb      	strb	r3, [r7, #22]
 8016bcc:	e001      	b.n	8016bd2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8016bce:	2300      	movs	r3, #0
 8016bd0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8016bd2:	7dbb      	ldrb	r3, [r7, #22]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d003      	beq.n	8016be0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8016bd8:	2100      	movs	r1, #0
 8016bda:	6938      	ldr	r0, [r7, #16]
 8016bdc:	f005 fafa 	bl	801c1d4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8016be0:	693b      	ldr	r3, [r7, #16]
 8016be2:	7d1b      	ldrb	r3, [r3, #20]
 8016be4:	2b01      	cmp	r3, #1
 8016be6:	d104      	bne.n	8016bf2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8016be8:	2100      	movs	r1, #0
 8016bea:	6938      	ldr	r0, [r7, #16]
 8016bec:	f005 fb6a 	bl	801c2c4 <tcp_accept>
 8016bf0:	e01d      	b.n	8016c2e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8016bf2:	7bbb      	ldrb	r3, [r7, #14]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d007      	beq.n	8016c08 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8016bf8:	2100      	movs	r1, #0
 8016bfa:	6938      	ldr	r0, [r7, #16]
 8016bfc:	f005 fafc 	bl	801c1f8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8016c00:	2100      	movs	r1, #0
 8016c02:	6938      	ldr	r0, [r7, #16]
 8016c04:	f005 fb5e 	bl	801c2c4 <tcp_accept>
    }
    if (shut_tx) {
 8016c08:	7b7b      	ldrb	r3, [r7, #13]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d003      	beq.n	8016c16 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8016c0e:	2100      	movs	r1, #0
 8016c10:	6938      	ldr	r0, [r7, #16]
 8016c12:	f005 fb13 	bl	801c23c <tcp_sent>
    }
    if (shut_close) {
 8016c16:	7dbb      	ldrb	r3, [r7, #22]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d008      	beq.n	8016c2e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8016c1c:	2200      	movs	r2, #0
 8016c1e:	2100      	movs	r1, #0
 8016c20:	6938      	ldr	r0, [r7, #16]
 8016c22:	f005 fb67 	bl	801c2f4 <tcp_poll>
      tcp_err(tpcb, NULL);
 8016c26:	2100      	movs	r1, #0
 8016c28:	6938      	ldr	r0, [r7, #16]
 8016c2a:	f005 fb29 	bl	801c280 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8016c2e:	7dbb      	ldrb	r3, [r7, #22]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d005      	beq.n	8016c40 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8016c34:	6938      	ldr	r0, [r7, #16]
 8016c36:	f004 f9c1 	bl	801afbc <tcp_close>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	75fb      	strb	r3, [r7, #23]
 8016c3e:	e007      	b.n	8016c50 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8016c40:	7bbb      	ldrb	r3, [r7, #14]
 8016c42:	7b7a      	ldrb	r2, [r7, #13]
 8016c44:	4619      	mov	r1, r3
 8016c46:	6938      	ldr	r0, [r7, #16]
 8016c48:	f004 f9e4 	bl	801b014 <tcp_shutdown>
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8016c50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d102      	bne.n	8016c5e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8016c58:	2301      	movs	r3, #1
 8016c5a:	757b      	strb	r3, [r7, #21]
 8016c5c:	e016      	b.n	8016c8c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8016c5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c66:	d10f      	bne.n	8016c88 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	6a1b      	ldr	r3, [r3, #32]
 8016c6c:	7a5b      	ldrb	r3, [r3, #9]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d10c      	bne.n	8016c8c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8016c72:	2301      	movs	r3, #1
 8016c74:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8016c76:	7dbb      	ldrb	r3, [r7, #22]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d007      	beq.n	8016c8c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8016c7c:	6938      	ldr	r0, [r7, #16]
 8016c7e:	f004 fae3 	bl	801b248 <tcp_abort>
          err = ERR_OK;
 8016c82:	2300      	movs	r3, #0
 8016c84:	75fb      	strb	r3, [r7, #23]
 8016c86:	e001      	b.n	8016c8c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8016c88:	2301      	movs	r3, #1
 8016c8a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8016c8c:	7d7b      	ldrb	r3, [r7, #21]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d052      	beq.n	8016d38 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	6a1b      	ldr	r3, [r3, #32]
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	330c      	adds	r3, #12
 8016c9a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	6a1b      	ldr	r3, [r3, #32]
 8016ca0:	7dfa      	ldrb	r2, [r7, #23]
 8016ca2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	2200      	movs	r2, #0
 8016cae:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8016cb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d129      	bne.n	8016d0c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8016cb8:	7dbb      	ldrb	r3, [r7, #22]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d00c      	beq.n	8016cd8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d005      	beq.n	8016cd8 <lwip_netconn_do_close_internal+0x1f0>
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016cd0:	2200      	movs	r2, #0
 8016cd2:	2104      	movs	r1, #4
 8016cd4:	6878      	ldr	r0, [r7, #4]
 8016cd6:	4798      	blx	r3
      }
      if (shut_rx) {
 8016cd8:	7bbb      	ldrb	r3, [r7, #14]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d009      	beq.n	8016cf2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d005      	beq.n	8016cf2 <lwip_netconn_do_close_internal+0x20a>
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016cea:	2200      	movs	r2, #0
 8016cec:	2100      	movs	r1, #0
 8016cee:	6878      	ldr	r0, [r7, #4]
 8016cf0:	4798      	blx	r3
      }
      if (shut_tx) {
 8016cf2:	7b7b      	ldrb	r3, [r7, #13]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d009      	beq.n	8016d0c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d005      	beq.n	8016d0c <lwip_netconn_do_close_internal+0x224>
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d04:	2200      	movs	r2, #0
 8016d06:	2102      	movs	r1, #2
 8016d08:	6878      	ldr	r0, [r7, #4]
 8016d0a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8016d0c:	78fb      	ldrb	r3, [r7, #3]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d002      	beq.n	8016d18 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8016d12:	68b8      	ldr	r0, [r7, #8]
 8016d14:	f00d faa8 	bl	8024268 <sys_sem_signal>
    }
    return ERR_OK;
 8016d18:	2300      	movs	r3, #0
 8016d1a:	e03c      	b.n	8016d96 <lwip_netconn_do_close_internal+0x2ae>
 8016d1c:	080299ec 	.word	0x080299ec
 8016d20:	08029cc0 	.word	0x08029cc0
 8016d24:	08029a30 	.word	0x08029a30
 8016d28:	08029cd0 	.word	0x08029cd0
 8016d2c:	08029cf0 	.word	0x08029cf0
 8016d30:	08029d14 	.word	0x08029d14
 8016d34:	08029b54 	.word	0x08029b54
  }
  if (!close_finished) {
 8016d38:	7d7b      	ldrb	r3, [r7, #21]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d11e      	bne.n	8016d7c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8016d3e:	693b      	ldr	r3, [r7, #16]
 8016d40:	7d1b      	ldrb	r3, [r3, #20]
 8016d42:	2b01      	cmp	r3, #1
 8016d44:	d106      	bne.n	8016d54 <lwip_netconn_do_close_internal+0x26c>
 8016d46:	4b16      	ldr	r3, [pc, #88]	@ (8016da0 <lwip_netconn_do_close_internal+0x2b8>)
 8016d48:	f240 4241 	movw	r2, #1089	@ 0x441
 8016d4c:	4915      	ldr	r1, [pc, #84]	@ (8016da4 <lwip_netconn_do_close_internal+0x2bc>)
 8016d4e:	4816      	ldr	r0, [pc, #88]	@ (8016da8 <lwip_netconn_do_close_internal+0x2c0>)
 8016d50:	f00e fbc8 	bl	80254e4 <iprintf>
    if (shut_tx) {
 8016d54:	7b7b      	ldrb	r3, [r7, #13]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d003      	beq.n	8016d62 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8016d5a:	4914      	ldr	r1, [pc, #80]	@ (8016dac <lwip_netconn_do_close_internal+0x2c4>)
 8016d5c:	6938      	ldr	r0, [r7, #16]
 8016d5e:	f005 fa6d 	bl	801c23c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8016d62:	2201      	movs	r2, #1
 8016d64:	4912      	ldr	r1, [pc, #72]	@ (8016db0 <lwip_netconn_do_close_internal+0x2c8>)
 8016d66:	6938      	ldr	r0, [r7, #16]
 8016d68:	f005 fac4 	bl	801c2f4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8016d6c:	4911      	ldr	r1, [pc, #68]	@ (8016db4 <lwip_netconn_do_close_internal+0x2cc>)
 8016d6e:	6938      	ldr	r0, [r7, #16]
 8016d70:	f005 fa86 	bl	801c280 <tcp_err>
    tcp_arg(tpcb, conn);
 8016d74:	6879      	ldr	r1, [r7, #4]
 8016d76:	6938      	ldr	r0, [r7, #16]
 8016d78:	f005 fa2c 	bl	801c1d4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8016d7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d106      	bne.n	8016d92 <lwip_netconn_do_close_internal+0x2aa>
 8016d84:	4b06      	ldr	r3, [pc, #24]	@ (8016da0 <lwip_netconn_do_close_internal+0x2b8>)
 8016d86:	f240 424d 	movw	r2, #1101	@ 0x44d
 8016d8a:	490b      	ldr	r1, [pc, #44]	@ (8016db8 <lwip_netconn_do_close_internal+0x2d0>)
 8016d8c:	4806      	ldr	r0, [pc, #24]	@ (8016da8 <lwip_netconn_do_close_internal+0x2c0>)
 8016d8e:	f00e fba9 	bl	80254e4 <iprintf>
  return err;
 8016d92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016d96:	4618      	mov	r0, r3
 8016d98:	3718      	adds	r7, #24
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	bd80      	pop	{r7, pc}
 8016d9e:	bf00      	nop
 8016da0:	080299ec 	.word	0x080299ec
 8016da4:	08029d28 	.word	0x08029d28
 8016da8:	08029a30 	.word	0x08029a30
 8016dac:	080164d9 	.word	0x080164d9
 8016db0:	08016411 	.word	0x08016411
 8016db4:	08016581 	.word	0x08016581
 8016db8:	08029d4c 	.word	0x08029d4c

08016dbc <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	b084      	sub	sp, #16
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	785b      	ldrb	r3, [r3, #1]
 8016dce:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8016dd0:	7afb      	ldrb	r3, [r7, #11]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d00d      	beq.n	8016df2 <lwip_netconn_do_delconn+0x36>
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	781b      	ldrb	r3, [r3, #0]
 8016ddc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016de0:	2b10      	cmp	r3, #16
 8016de2:	d006      	beq.n	8016df2 <lwip_netconn_do_delconn+0x36>
 8016de4:	4b60      	ldr	r3, [pc, #384]	@ (8016f68 <lwip_netconn_do_delconn+0x1ac>)
 8016de6:	f240 425e 	movw	r2, #1118	@ 0x45e
 8016dea:	4960      	ldr	r1, [pc, #384]	@ (8016f6c <lwip_netconn_do_delconn+0x1b0>)
 8016dec:	4860      	ldr	r0, [pc, #384]	@ (8016f70 <lwip_netconn_do_delconn+0x1b4>)
 8016dee:	f00e fb79 	bl	80254e4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8016df2:	7afb      	ldrb	r3, [r7, #11]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d005      	beq.n	8016e04 <lwip_netconn_do_delconn+0x48>
 8016df8:	7afb      	ldrb	r3, [r7, #11]
 8016dfa:	2b02      	cmp	r3, #2
 8016dfc:	d002      	beq.n	8016e04 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8016dfe:	7afb      	ldrb	r3, [r7, #11]
 8016e00:	2b03      	cmp	r3, #3
 8016e02:	d109      	bne.n	8016e18 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8016e04:	7afb      	ldrb	r3, [r7, #11]
 8016e06:	2b03      	cmp	r3, #3
 8016e08:	d10a      	bne.n	8016e20 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	7f1b      	ldrb	r3, [r3, #28]
 8016e10:	f003 0304 	and.w	r3, r3, #4
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d103      	bne.n	8016e20 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	22fb      	movs	r2, #251	@ 0xfb
 8016e1c:	711a      	strb	r2, [r3, #4]
 8016e1e:	e097      	b.n	8016f50 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8016e20:	7afb      	ldrb	r3, [r7, #11]
 8016e22:	2b03      	cmp	r3, #3
 8016e24:	d10d      	bne.n	8016e42 <lwip_netconn_do_delconn+0x86>
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	7f1b      	ldrb	r3, [r3, #28]
 8016e2c:	f003 0304 	and.w	r3, r3, #4
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d106      	bne.n	8016e42 <lwip_netconn_do_delconn+0x86>
 8016e34:	4b4c      	ldr	r3, [pc, #304]	@ (8016f68 <lwip_netconn_do_delconn+0x1ac>)
 8016e36:	f240 427a 	movw	r2, #1146	@ 0x47a
 8016e3a:	494e      	ldr	r1, [pc, #312]	@ (8016f74 <lwip_netconn_do_delconn+0x1b8>)
 8016e3c:	484c      	ldr	r0, [pc, #304]	@ (8016f70 <lwip_netconn_do_delconn+0x1b4>)
 8016e3e:	f00e fb51 	bl	80254e4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	2200      	movs	r2, #0
 8016e46:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	f7ff fdcd 	bl	80169ec <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	685b      	ldr	r3, [r3, #4]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d05f      	beq.n	8016f1c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	781b      	ldrb	r3, [r3, #0]
 8016e62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016e66:	2b10      	cmp	r3, #16
 8016e68:	d00d      	beq.n	8016e86 <lwip_netconn_do_delconn+0xca>
 8016e6a:	2b20      	cmp	r3, #32
 8016e6c:	d151      	bne.n	8016f12 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	685b      	ldr	r3, [r3, #4]
 8016e74:	2200      	movs	r2, #0
 8016e76:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	685b      	ldr	r3, [r3, #4]
 8016e7e:	4618      	mov	r0, r3
 8016e80:	f00a fc12 	bl	80216a8 <udp_remove>
          break;
 8016e84:	e046      	b.n	8016f14 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	6a1b      	ldr	r3, [r3, #32]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d006      	beq.n	8016e9e <lwip_netconn_do_delconn+0xe2>
 8016e90:	4b35      	ldr	r3, [pc, #212]	@ (8016f68 <lwip_netconn_do_delconn+0x1ac>)
 8016e92:	f240 4294 	movw	r2, #1172	@ 0x494
 8016e96:	4938      	ldr	r1, [pc, #224]	@ (8016f78 <lwip_netconn_do_delconn+0x1bc>)
 8016e98:	4835      	ldr	r0, [pc, #212]	@ (8016f70 <lwip_netconn_do_delconn+0x1b4>)
 8016e9a:	f00e fb23 	bl	80254e4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	2204      	movs	r2, #4
 8016ea4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	2203      	movs	r2, #3
 8016eaa:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	68fa      	ldr	r2, [r7, #12]
 8016eb2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	2100      	movs	r1, #0
 8016eba:	4618      	mov	r0, r3
 8016ebc:	f7ff fe14 	bl	8016ae8 <lwip_netconn_do_close_internal>
 8016ec0:	4603      	mov	r3, r0
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d04b      	beq.n	8016f5e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	785b      	ldrb	r3, [r3, #1]
 8016ecc:	2b04      	cmp	r3, #4
 8016ece:	d006      	beq.n	8016ede <lwip_netconn_do_delconn+0x122>
 8016ed0:	4b25      	ldr	r3, [pc, #148]	@ (8016f68 <lwip_netconn_do_delconn+0x1ac>)
 8016ed2:	f240 429a 	movw	r2, #1178	@ 0x49a
 8016ed6:	4929      	ldr	r1, [pc, #164]	@ (8016f7c <lwip_netconn_do_delconn+0x1c0>)
 8016ed8:	4825      	ldr	r0, [pc, #148]	@ (8016f70 <lwip_netconn_do_delconn+0x1b4>)
 8016eda:	f00e fb03 	bl	80254e4 <iprintf>
            UNLOCK_TCPIP_CORE();
 8016ede:	4828      	ldr	r0, [pc, #160]	@ (8016f80 <lwip_netconn_do_delconn+0x1c4>)
 8016ee0:	f00d fa33 	bl	802434a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	330c      	adds	r3, #12
 8016eea:	2100      	movs	r1, #0
 8016eec:	4618      	mov	r0, r3
 8016eee:	f00d f98a 	bl	8024206 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8016ef2:	4823      	ldr	r0, [pc, #140]	@ (8016f80 <lwip_netconn_do_delconn+0x1c4>)
 8016ef4:	f00d fa1a 	bl	802432c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	785b      	ldrb	r3, [r3, #1]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d02d      	beq.n	8016f5e <lwip_netconn_do_delconn+0x1a2>
 8016f02:	4b19      	ldr	r3, [pc, #100]	@ (8016f68 <lwip_netconn_do_delconn+0x1ac>)
 8016f04:	f240 429e 	movw	r2, #1182	@ 0x49e
 8016f08:	491c      	ldr	r1, [pc, #112]	@ (8016f7c <lwip_netconn_do_delconn+0x1c0>)
 8016f0a:	4819      	ldr	r0, [pc, #100]	@ (8016f70 <lwip_netconn_do_delconn+0x1b4>)
 8016f0c:	f00e faea 	bl	80254e4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8016f10:	e025      	b.n	8016f5e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8016f12:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	2200      	movs	r2, #0
 8016f1a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d007      	beq.n	8016f36 <lwip_netconn_do_delconn+0x17a>
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f2c:	68fa      	ldr	r2, [r7, #12]
 8016f2e:	6810      	ldr	r0, [r2, #0]
 8016f30:	2200      	movs	r2, #0
 8016f32:	2100      	movs	r1, #0
 8016f34:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d007      	beq.n	8016f50 <lwip_netconn_do_delconn+0x194>
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f46:	68fa      	ldr	r2, [r7, #12]
 8016f48:	6810      	ldr	r0, [r2, #0]
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	2102      	movs	r1, #2
 8016f4e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	330c      	adds	r3, #12
 8016f56:	4618      	mov	r0, r3
 8016f58:	f00d f9a0 	bl	802429c <sys_sem_valid>
 8016f5c:	e000      	b.n	8016f60 <lwip_netconn_do_delconn+0x1a4>
          return;
 8016f5e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8016f60:	3710      	adds	r7, #16
 8016f62:	46bd      	mov	sp, r7
 8016f64:	bd80      	pop	{r7, pc}
 8016f66:	bf00      	nop
 8016f68:	080299ec 	.word	0x080299ec
 8016f6c:	08029d5c 	.word	0x08029d5c
 8016f70:	08029a30 	.word	0x08029a30
 8016f74:	08029d70 	.word	0x08029d70
 8016f78:	08029d90 	.word	0x08029d90
 8016f7c:	08029dac 	.word	0x08029dac
 8016f80:	24008d60 	.word	0x24008d60

08016f84 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b084      	sub	sp, #16
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8016f90:	68bb      	ldr	r3, [r7, #8]
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	685b      	ldr	r3, [r3, #4]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d025      	beq.n	8016fe6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016f9a:	68bb      	ldr	r3, [r7, #8]
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	781b      	ldrb	r3, [r3, #0]
 8016fa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016fa4:	2b10      	cmp	r3, #16
 8016fa6:	d00e      	beq.n	8016fc6 <lwip_netconn_do_bind+0x42>
 8016fa8:	2b20      	cmp	r3, #32
 8016faa:	d119      	bne.n	8016fe0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8016fac:	68bb      	ldr	r3, [r7, #8]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	6858      	ldr	r0, [r3, #4]
 8016fb2:	68bb      	ldr	r3, [r7, #8]
 8016fb4:	6899      	ldr	r1, [r3, #8]
 8016fb6:	68bb      	ldr	r3, [r7, #8]
 8016fb8:	899b      	ldrh	r3, [r3, #12]
 8016fba:	461a      	mov	r2, r3
 8016fbc:	f00a facc 	bl	8021558 <udp_bind>
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	73fb      	strb	r3, [r7, #15]
        break;
 8016fc4:	e011      	b.n	8016fea <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8016fc6:	68bb      	ldr	r3, [r7, #8]
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	6858      	ldr	r0, [r3, #4]
 8016fcc:	68bb      	ldr	r3, [r7, #8]
 8016fce:	6899      	ldr	r1, [r3, #8]
 8016fd0:	68bb      	ldr	r3, [r7, #8]
 8016fd2:	899b      	ldrh	r3, [r3, #12]
 8016fd4:	461a      	mov	r2, r3
 8016fd6:	f004 f943 	bl	801b260 <tcp_bind>
 8016fda:	4603      	mov	r3, r0
 8016fdc:	73fb      	strb	r3, [r7, #15]
        break;
 8016fde:	e004      	b.n	8016fea <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8016fe0:	23fa      	movs	r3, #250	@ 0xfa
 8016fe2:	73fb      	strb	r3, [r7, #15]
        break;
 8016fe4:	e001      	b.n	8016fea <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8016fe6:	23fa      	movs	r3, #250	@ 0xfa
 8016fe8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8016fea:	68bb      	ldr	r3, [r7, #8]
 8016fec:	7bfa      	ldrb	r2, [r7, #15]
 8016fee:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8016ff0:	bf00      	nop
 8016ff2:	3710      	adds	r7, #16
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	bd80      	pop	{r7, pc}

08016ff8 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8016ff8:	b580      	push	{r7, lr}
 8016ffa:	b084      	sub	sp, #16
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8017004:	68bb      	ldr	r3, [r7, #8]
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	4618      	mov	r0, r3
 801700a:	f7ff f871 	bl	80160f0 <netconn_err>
 801700e:	4603      	mov	r3, r0
 8017010:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8017012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d134      	bne.n	8017084 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 801701a:	68bb      	ldr	r3, [r7, #8]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	685b      	ldr	r3, [r3, #4]
 8017020:	2b00      	cmp	r3, #0
 8017022:	d02d      	beq.n	8017080 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8017024:	68bb      	ldr	r3, [r7, #8]
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	781b      	ldrb	r3, [r3, #0]
 801702a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801702e:	2b20      	cmp	r3, #32
 8017030:	d123      	bne.n	801707a <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8017032:	68bb      	ldr	r3, [r7, #8]
 8017034:	689b      	ldr	r3, [r3, #8]
 8017036:	689b      	ldr	r3, [r3, #8]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d10c      	bne.n	8017056 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 801703c:	68bb      	ldr	r3, [r7, #8]
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	685a      	ldr	r2, [r3, #4]
 8017042:	68bb      	ldr	r3, [r7, #8]
 8017044:	689b      	ldr	r3, [r3, #8]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	4619      	mov	r1, r3
 801704a:	4610      	mov	r0, r2
 801704c:	f00a f89a 	bl	8021184 <udp_send>
 8017050:	4603      	mov	r3, r0
 8017052:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8017054:	e016      	b.n	8017084 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8017056:	68bb      	ldr	r3, [r7, #8]
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	6858      	ldr	r0, [r3, #4]
 801705c:	68bb      	ldr	r3, [r7, #8]
 801705e:	689b      	ldr	r3, [r3, #8]
 8017060:	6819      	ldr	r1, [r3, #0]
 8017062:	68bb      	ldr	r3, [r7, #8]
 8017064:	689b      	ldr	r3, [r3, #8]
 8017066:	f103 0208 	add.w	r2, r3, #8
 801706a:	68bb      	ldr	r3, [r7, #8]
 801706c:	689b      	ldr	r3, [r3, #8]
 801706e:	899b      	ldrh	r3, [r3, #12]
 8017070:	f00a f8bc 	bl	80211ec <udp_sendto>
 8017074:	4603      	mov	r3, r0
 8017076:	73fb      	strb	r3, [r7, #15]
          break;
 8017078:	e004      	b.n	8017084 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 801707a:	23f5      	movs	r3, #245	@ 0xf5
 801707c:	73fb      	strb	r3, [r7, #15]
          break;
 801707e:	e001      	b.n	8017084 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8017080:	23f5      	movs	r3, #245	@ 0xf5
 8017082:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8017084:	68bb      	ldr	r3, [r7, #8]
 8017086:	7bfa      	ldrb	r2, [r7, #15]
 8017088:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801708a:	bf00      	nop
 801708c:	3710      	adds	r7, #16
 801708e:	46bd      	mov	sp, r7
 8017090:	bd80      	pop	{r7, pc}

08017092 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8017092:	b580      	push	{r7, lr}
 8017094:	b086      	sub	sp, #24
 8017096:	af00      	add	r7, sp, #0
 8017098:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 801709e:	693b      	ldr	r3, [r7, #16]
 80170a0:	2200      	movs	r2, #0
 80170a2:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80170a4:	693b      	ldr	r3, [r7, #16]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	685b      	ldr	r3, [r3, #4]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d022      	beq.n	80170f4 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80170ae:	693b      	ldr	r3, [r7, #16]
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	781b      	ldrb	r3, [r3, #0]
 80170b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80170b8:	2b10      	cmp	r3, #16
 80170ba:	d11b      	bne.n	80170f4 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80170bc:	693b      	ldr	r3, [r7, #16]
 80170be:	689b      	ldr	r3, [r3, #8]
 80170c0:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80170c2:	697b      	ldr	r3, [r7, #20]
 80170c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80170c8:	d202      	bcs.n	80170d0 <lwip_netconn_do_recv+0x3e>
 80170ca:	697b      	ldr	r3, [r7, #20]
 80170cc:	b29b      	uxth	r3, r3
 80170ce:	e001      	b.n	80170d4 <lwip_netconn_do_recv+0x42>
 80170d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80170d4:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80170d6:	693b      	ldr	r3, [r7, #16]
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	685b      	ldr	r3, [r3, #4]
 80170dc:	89fa      	ldrh	r2, [r7, #14]
 80170de:	4611      	mov	r1, r2
 80170e0:	4618      	mov	r0, r3
 80170e2:	f004 f9af 	bl	801b444 <tcp_recved>
        remaining -= recved;
 80170e6:	89fb      	ldrh	r3, [r7, #14]
 80170e8:	697a      	ldr	r2, [r7, #20]
 80170ea:	1ad3      	subs	r3, r2, r3
 80170ec:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80170ee:	697b      	ldr	r3, [r7, #20]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d1e6      	bne.n	80170c2 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 80170f4:	bf00      	nop
 80170f6:	3718      	adds	r7, #24
 80170f8:	46bd      	mov	sp, r7
 80170fa:	bd80      	pop	{r7, pc}

080170fc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b088      	sub	sp, #32
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
 8017104:	460b      	mov	r3, r1
 8017106:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8017108:	2300      	movs	r3, #0
 801710a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d106      	bne.n	8017120 <lwip_netconn_do_writemore+0x24>
 8017112:	4b96      	ldr	r3, [pc, #600]	@ (801736c <lwip_netconn_do_writemore+0x270>)
 8017114:	f240 6273 	movw	r2, #1651	@ 0x673
 8017118:	4995      	ldr	r1, [pc, #596]	@ (8017370 <lwip_netconn_do_writemore+0x274>)
 801711a:	4896      	ldr	r0, [pc, #600]	@ (8017374 <lwip_netconn_do_writemore+0x278>)
 801711c:	f00e f9e2 	bl	80254e4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	785b      	ldrb	r3, [r3, #1]
 8017124:	2b01      	cmp	r3, #1
 8017126:	d006      	beq.n	8017136 <lwip_netconn_do_writemore+0x3a>
 8017128:	4b90      	ldr	r3, [pc, #576]	@ (801736c <lwip_netconn_do_writemore+0x270>)
 801712a:	f240 6274 	movw	r2, #1652	@ 0x674
 801712e:	4992      	ldr	r1, [pc, #584]	@ (8017378 <lwip_netconn_do_writemore+0x27c>)
 8017130:	4890      	ldr	r0, [pc, #576]	@ (8017374 <lwip_netconn_do_writemore+0x278>)
 8017132:	f00e f9d7 	bl	80254e4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	6a1b      	ldr	r3, [r3, #32]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d106      	bne.n	801714c <lwip_netconn_do_writemore+0x50>
 801713e:	4b8b      	ldr	r3, [pc, #556]	@ (801736c <lwip_netconn_do_writemore+0x270>)
 8017140:	f240 6275 	movw	r2, #1653	@ 0x675
 8017144:	498d      	ldr	r1, [pc, #564]	@ (801737c <lwip_netconn_do_writemore+0x280>)
 8017146:	488b      	ldr	r0, [pc, #556]	@ (8017374 <lwip_netconn_do_writemore+0x278>)
 8017148:	f00e f9cc 	bl	80254e4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	685b      	ldr	r3, [r3, #4]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d106      	bne.n	8017162 <lwip_netconn_do_writemore+0x66>
 8017154:	4b85      	ldr	r3, [pc, #532]	@ (801736c <lwip_netconn_do_writemore+0x270>)
 8017156:	f240 6276 	movw	r2, #1654	@ 0x676
 801715a:	4989      	ldr	r1, [pc, #548]	@ (8017380 <lwip_netconn_do_writemore+0x284>)
 801715c:	4885      	ldr	r0, [pc, #532]	@ (8017374 <lwip_netconn_do_writemore+0x278>)
 801715e:	f00e f9c1 	bl	80254e4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	6a1b      	ldr	r3, [r3, #32]
 8017166:	699a      	ldr	r2, [r3, #24]
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	6a1b      	ldr	r3, [r3, #32]
 801716c:	695b      	ldr	r3, [r3, #20]
 801716e:	429a      	cmp	r2, r3
 8017170:	d306      	bcc.n	8017180 <lwip_netconn_do_writemore+0x84>
 8017172:	4b7e      	ldr	r3, [pc, #504]	@ (801736c <lwip_netconn_do_writemore+0x270>)
 8017174:	f240 6277 	movw	r2, #1655	@ 0x677
 8017178:	4982      	ldr	r1, [pc, #520]	@ (8017384 <lwip_netconn_do_writemore+0x288>)
 801717a:	487e      	ldr	r0, [pc, #504]	@ (8017374 <lwip_netconn_do_writemore+0x278>)
 801717c:	f00e f9b2 	bl	80254e4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	6a1b      	ldr	r3, [r3, #32]
 8017184:	899b      	ldrh	r3, [r3, #12]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d106      	bne.n	8017198 <lwip_netconn_do_writemore+0x9c>
 801718a:	4b78      	ldr	r3, [pc, #480]	@ (801736c <lwip_netconn_do_writemore+0x270>)
 801718c:	f240 6279 	movw	r2, #1657	@ 0x679
 8017190:	497d      	ldr	r1, [pc, #500]	@ (8017388 <lwip_netconn_do_writemore+0x28c>)
 8017192:	4878      	ldr	r0, [pc, #480]	@ (8017374 <lwip_netconn_do_writemore+0x278>)
 8017194:	f00e f9a6 	bl	80254e4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	6a1b      	ldr	r3, [r3, #32]
 801719c:	7f1b      	ldrb	r3, [r3, #28]
 801719e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	7f1b      	ldrb	r3, [r3, #28]
 80171a4:	f003 0302 	and.w	r3, r3, #2
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d104      	bne.n	80171b6 <lwip_netconn_do_writemore+0xba>
 80171ac:	7ebb      	ldrb	r3, [r7, #26]
 80171ae:	f003 0304 	and.w	r3, r3, #4
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d001      	beq.n	80171ba <lwip_netconn_do_writemore+0xbe>
 80171b6:	2301      	movs	r3, #1
 80171b8:	e000      	b.n	80171bc <lwip_netconn_do_writemore+0xc0>
 80171ba:	2300      	movs	r3, #0
 80171bc:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	6a1b      	ldr	r3, [r3, #32]
 80171c2:	689b      	ldr	r3, [r3, #8]
 80171c4:	681a      	ldr	r2, [r3, #0]
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	6a1b      	ldr	r3, [r3, #32]
 80171ca:	691b      	ldr	r3, [r3, #16]
 80171cc:	4413      	add	r3, r2
 80171ce:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	6a1b      	ldr	r3, [r3, #32]
 80171d4:	689b      	ldr	r3, [r3, #8]
 80171d6:	685a      	ldr	r2, [r3, #4]
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	6a1b      	ldr	r3, [r3, #32]
 80171dc:	691b      	ldr	r3, [r3, #16]
 80171de:	1ad3      	subs	r3, r2, r3
 80171e0:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80171e2:	693b      	ldr	r3, [r7, #16]
 80171e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80171e8:	d307      	bcc.n	80171fa <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80171ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80171ee:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80171f0:	7ebb      	ldrb	r3, [r7, #26]
 80171f2:	f043 0302 	orr.w	r3, r3, #2
 80171f6:	76bb      	strb	r3, [r7, #26]
 80171f8:	e001      	b.n	80171fe <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 80171fa:	693b      	ldr	r3, [r7, #16]
 80171fc:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	685b      	ldr	r3, [r3, #4]
 8017202:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017206:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8017208:	89fa      	ldrh	r2, [r7, #14]
 801720a:	8bbb      	ldrh	r3, [r7, #28]
 801720c:	429a      	cmp	r2, r3
 801720e:	d216      	bcs.n	801723e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8017210:	89fb      	ldrh	r3, [r7, #14]
 8017212:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8017214:	7e3b      	ldrb	r3, [r7, #24]
 8017216:	2b00      	cmp	r3, #0
 8017218:	d00d      	beq.n	8017236 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801721a:	8bbb      	ldrh	r3, [r7, #28]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d10e      	bne.n	801723e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	6a1b      	ldr	r3, [r3, #32]
 8017224:	699b      	ldr	r3, [r3, #24]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d102      	bne.n	8017230 <lwip_netconn_do_writemore+0x134>
 801722a:	f06f 0306 	mvn.w	r3, #6
 801722e:	e000      	b.n	8017232 <lwip_netconn_do_writemore+0x136>
 8017230:	2300      	movs	r3, #0
 8017232:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8017234:	e07d      	b.n	8017332 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8017236:	7ebb      	ldrb	r3, [r7, #26]
 8017238:	f043 0302 	orr.w	r3, r3, #2
 801723c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	6a1b      	ldr	r3, [r3, #32]
 8017242:	691a      	ldr	r2, [r3, #16]
 8017244:	8bbb      	ldrh	r3, [r7, #28]
 8017246:	441a      	add	r2, r3
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	6a1b      	ldr	r3, [r3, #32]
 801724c:	689b      	ldr	r3, [r3, #8]
 801724e:	685b      	ldr	r3, [r3, #4]
 8017250:	429a      	cmp	r2, r3
 8017252:	d906      	bls.n	8017262 <lwip_netconn_do_writemore+0x166>
 8017254:	4b45      	ldr	r3, [pc, #276]	@ (801736c <lwip_netconn_do_writemore+0x270>)
 8017256:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 801725a:	494c      	ldr	r1, [pc, #304]	@ (801738c <lwip_netconn_do_writemore+0x290>)
 801725c:	4845      	ldr	r0, [pc, #276]	@ (8017374 <lwip_netconn_do_writemore+0x278>)
 801725e:	f00e f941 	bl	80254e4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8017262:	8bbb      	ldrh	r3, [r7, #28]
 8017264:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017268:	4293      	cmp	r3, r2
 801726a:	d103      	bne.n	8017274 <lwip_netconn_do_writemore+0x178>
 801726c:	693b      	ldr	r3, [r7, #16]
 801726e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017272:	d209      	bcs.n	8017288 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8017274:	693b      	ldr	r3, [r7, #16]
 8017276:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8017278:	8bba      	ldrh	r2, [r7, #28]
 801727a:	429a      	cmp	r2, r3
 801727c:	d10b      	bne.n	8017296 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	6a1b      	ldr	r3, [r3, #32]
 8017282:	899b      	ldrh	r3, [r3, #12]
 8017284:	2b01      	cmp	r3, #1
 8017286:	d906      	bls.n	8017296 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8017288:	2301      	movs	r3, #1
 801728a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 801728c:	7ebb      	ldrb	r3, [r7, #26]
 801728e:	f043 0302 	orr.w	r3, r3, #2
 8017292:	76bb      	strb	r3, [r7, #26]
 8017294:	e001      	b.n	801729a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8017296:	2300      	movs	r3, #0
 8017298:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	6858      	ldr	r0, [r3, #4]
 801729e:	7ebb      	ldrb	r3, [r7, #26]
 80172a0:	8bba      	ldrh	r2, [r7, #28]
 80172a2:	6979      	ldr	r1, [r7, #20]
 80172a4:	f007 fed2 	bl	801f04c <tcp_write>
 80172a8:	4603      	mov	r3, r0
 80172aa:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80172ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d12c      	bne.n	801730e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	6a1b      	ldr	r3, [r3, #32]
 80172b8:	6999      	ldr	r1, [r3, #24]
 80172ba:	8bba      	ldrh	r2, [r7, #28]
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	6a1b      	ldr	r3, [r3, #32]
 80172c0:	440a      	add	r2, r1
 80172c2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	6a1b      	ldr	r3, [r3, #32]
 80172c8:	6919      	ldr	r1, [r3, #16]
 80172ca:	8bba      	ldrh	r2, [r7, #28]
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	6a1b      	ldr	r3, [r3, #32]
 80172d0:	440a      	add	r2, r1
 80172d2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	6a1b      	ldr	r3, [r3, #32]
 80172d8:	691a      	ldr	r2, [r3, #16]
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	6a1b      	ldr	r3, [r3, #32]
 80172de:	689b      	ldr	r3, [r3, #8]
 80172e0:	685b      	ldr	r3, [r3, #4]
 80172e2:	429a      	cmp	r2, r3
 80172e4:	d113      	bne.n	801730e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	6a1b      	ldr	r3, [r3, #32]
 80172ea:	899a      	ldrh	r2, [r3, #12]
 80172ec:	3a01      	subs	r2, #1
 80172ee:	b292      	uxth	r2, r2
 80172f0:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	6a1b      	ldr	r3, [r3, #32]
 80172f6:	899b      	ldrh	r3, [r3, #12]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d008      	beq.n	801730e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	6a1b      	ldr	r3, [r3, #32]
 8017300:	689a      	ldr	r2, [r3, #8]
 8017302:	3208      	adds	r2, #8
 8017304:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	6a1b      	ldr	r3, [r3, #32]
 801730a:	2200      	movs	r2, #0
 801730c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 801730e:	7e7b      	ldrb	r3, [r7, #25]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d004      	beq.n	801731e <lwip_netconn_do_writemore+0x222>
 8017314:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017318:	2b00      	cmp	r3, #0
 801731a:	f43f af50 	beq.w	80171be <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 801731e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d004      	beq.n	8017330 <lwip_netconn_do_writemore+0x234>
 8017326:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801732a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801732e:	d146      	bne.n	80173be <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8017330:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8017332:	7e3b      	ldrb	r3, [r7, #24]
 8017334:	2b00      	cmp	r3, #0
 8017336:	d02b      	beq.n	8017390 <lwip_netconn_do_writemore+0x294>
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	6a1b      	ldr	r3, [r3, #32]
 801733c:	699a      	ldr	r2, [r3, #24]
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	6a1b      	ldr	r3, [r3, #32]
 8017342:	695b      	ldr	r3, [r3, #20]
 8017344:	429a      	cmp	r2, r3
 8017346:	d223      	bcs.n	8017390 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801734c:	2b00      	cmp	r3, #0
 801734e:	d005      	beq.n	801735c <lwip_netconn_do_writemore+0x260>
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017354:	2200      	movs	r2, #0
 8017356:	2103      	movs	r1, #3
 8017358:	6878      	ldr	r0, [r7, #4]
 801735a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	7f1b      	ldrb	r3, [r3, #28]
 8017360:	f043 0310 	orr.w	r3, r3, #16
 8017364:	b2da      	uxtb	r2, r3
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	771a      	strb	r2, [r3, #28]
 801736a:	e028      	b.n	80173be <lwip_netconn_do_writemore+0x2c2>
 801736c:	080299ec 	.word	0x080299ec
 8017370:	08029b44 	.word	0x08029b44
 8017374:	08029a30 	.word	0x08029a30
 8017378:	08029e4c 	.word	0x08029e4c
 801737c:	08029b54 	.word	0x08029b54
 8017380:	08029e6c 	.word	0x08029e6c
 8017384:	08029e84 	.word	0x08029e84
 8017388:	08029ec4 	.word	0x08029ec4
 801738c:	08029eec 	.word	0x08029eec
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	685b      	ldr	r3, [r3, #4]
 8017394:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017398:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 801739c:	d305      	bcc.n	80173aa <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	685b      	ldr	r3, [r3, #4]
 80173a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80173a6:	2b04      	cmp	r3, #4
 80173a8:	d909      	bls.n	80173be <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d005      	beq.n	80173be <lwip_netconn_do_writemore+0x2c2>
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80173b6:	2200      	movs	r2, #0
 80173b8:	2103      	movs	r1, #3
 80173ba:	6878      	ldr	r0, [r7, #4]
 80173bc:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80173be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d11d      	bne.n	8017402 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	6a1b      	ldr	r3, [r3, #32]
 80173ca:	699a      	ldr	r2, [r3, #24]
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	6a1b      	ldr	r3, [r3, #32]
 80173d0:	695b      	ldr	r3, [r3, #20]
 80173d2:	429a      	cmp	r2, r3
 80173d4:	d002      	beq.n	80173dc <lwip_netconn_do_writemore+0x2e0>
 80173d6:	7e3b      	ldrb	r3, [r7, #24]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d001      	beq.n	80173e0 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80173dc:	2301      	movs	r3, #1
 80173de:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	685b      	ldr	r3, [r3, #4]
 80173e4:	4618      	mov	r0, r3
 80173e6:	f008 fc1b 	bl	801fc20 <tcp_output>
 80173ea:	4603      	mov	r3, r0
 80173ec:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 80173ee:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80173f2:	f113 0f04 	cmn.w	r3, #4
 80173f6:	d12c      	bne.n	8017452 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80173f8:	7b3b      	ldrb	r3, [r7, #12]
 80173fa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80173fc:	2301      	movs	r3, #1
 80173fe:	76fb      	strb	r3, [r7, #27]
 8017400:	e027      	b.n	8017452 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8017402:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017406:	f1b3 3fff 	cmp.w	r3, #4294967295
 801740a:	d120      	bne.n	801744e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	685b      	ldr	r3, [r3, #4]
 8017410:	4618      	mov	r0, r3
 8017412:	f008 fc05 	bl	801fc20 <tcp_output>
 8017416:	4603      	mov	r3, r0
 8017418:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 801741a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801741e:	f113 0f04 	cmn.w	r3, #4
 8017422:	d104      	bne.n	801742e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8017424:	7b7b      	ldrb	r3, [r7, #13]
 8017426:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8017428:	2301      	movs	r3, #1
 801742a:	76fb      	strb	r3, [r7, #27]
 801742c:	e011      	b.n	8017452 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 801742e:	7e3b      	ldrb	r3, [r7, #24]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d00e      	beq.n	8017452 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	6a1b      	ldr	r3, [r3, #32]
 8017438:	699b      	ldr	r3, [r3, #24]
 801743a:	2b00      	cmp	r3, #0
 801743c:	d102      	bne.n	8017444 <lwip_netconn_do_writemore+0x348>
 801743e:	f06f 0306 	mvn.w	r3, #6
 8017442:	e000      	b.n	8017446 <lwip_netconn_do_writemore+0x34a>
 8017444:	2300      	movs	r3, #0
 8017446:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8017448:	2301      	movs	r3, #1
 801744a:	76fb      	strb	r3, [r7, #27]
 801744c:	e001      	b.n	8017452 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 801744e:	2301      	movs	r3, #1
 8017450:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8017452:	7efb      	ldrb	r3, [r7, #27]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d015      	beq.n	8017484 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	6a1b      	ldr	r3, [r3, #32]
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	330c      	adds	r3, #12
 8017460:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	6a1b      	ldr	r3, [r3, #32]
 8017466:	7ffa      	ldrb	r2, [r7, #31]
 8017468:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	2200      	movs	r2, #0
 801746e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	2200      	movs	r2, #0
 8017474:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8017476:	78fb      	ldrb	r3, [r7, #3]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d006      	beq.n	801748a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 801747c:	68b8      	ldr	r0, [r7, #8]
 801747e:	f00c fef3 	bl	8024268 <sys_sem_signal>
 8017482:	e002      	b.n	801748a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8017484:	f04f 33ff 	mov.w	r3, #4294967295
 8017488:	e000      	b.n	801748c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 801748a:	2300      	movs	r3, #0
}
 801748c:	4618      	mov	r0, r3
 801748e:	3720      	adds	r7, #32
 8017490:	46bd      	mov	sp, r7
 8017492:	bd80      	pop	{r7, pc}

08017494 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8017494:	b580      	push	{r7, lr}
 8017496:	b084      	sub	sp, #16
 8017498:	af00      	add	r7, sp, #0
 801749a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80174a0:	68bb      	ldr	r3, [r7, #8]
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	4618      	mov	r0, r3
 80174a6:	f7fe fe23 	bl	80160f0 <netconn_err>
 80174aa:	4603      	mov	r3, r0
 80174ac:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80174ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d166      	bne.n	8017584 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80174b6:	68bb      	ldr	r3, [r7, #8]
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	781b      	ldrb	r3, [r3, #0]
 80174bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80174c0:	2b10      	cmp	r3, #16
 80174c2:	d15d      	bne.n	8017580 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80174c4:	68bb      	ldr	r3, [r7, #8]
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	785b      	ldrb	r3, [r3, #1]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d002      	beq.n	80174d4 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 80174ce:	23fb      	movs	r3, #251	@ 0xfb
 80174d0:	73fb      	strb	r3, [r7, #15]
 80174d2:	e057      	b.n	8017584 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 80174d4:	68bb      	ldr	r3, [r7, #8]
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	685b      	ldr	r3, [r3, #4]
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d04d      	beq.n	801757a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 80174de:	68bb      	ldr	r3, [r7, #8]
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	2201      	movs	r2, #1
 80174e4:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80174e6:	68bb      	ldr	r3, [r7, #8]
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	6a1b      	ldr	r3, [r3, #32]
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d006      	beq.n	80174fe <lwip_netconn_do_write+0x6a>
 80174f0:	4b28      	ldr	r3, [pc, #160]	@ (8017594 <lwip_netconn_do_write+0x100>)
 80174f2:	f240 7223 	movw	r2, #1827	@ 0x723
 80174f6:	4928      	ldr	r1, [pc, #160]	@ (8017598 <lwip_netconn_do_write+0x104>)
 80174f8:	4828      	ldr	r0, [pc, #160]	@ (801759c <lwip_netconn_do_write+0x108>)
 80174fa:	f00d fff3 	bl	80254e4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80174fe:	68bb      	ldr	r3, [r7, #8]
 8017500:	695b      	ldr	r3, [r3, #20]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d106      	bne.n	8017514 <lwip_netconn_do_write+0x80>
 8017506:	4b23      	ldr	r3, [pc, #140]	@ (8017594 <lwip_netconn_do_write+0x100>)
 8017508:	f240 7224 	movw	r2, #1828	@ 0x724
 801750c:	4924      	ldr	r1, [pc, #144]	@ (80175a0 <lwip_netconn_do_write+0x10c>)
 801750e:	4823      	ldr	r0, [pc, #140]	@ (801759c <lwip_netconn_do_write+0x108>)
 8017510:	f00d ffe8 	bl	80254e4 <iprintf>
        msg->conn->current_msg = msg;
 8017514:	68bb      	ldr	r3, [r7, #8]
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	68ba      	ldr	r2, [r7, #8]
 801751a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 801751c:	68bb      	ldr	r3, [r7, #8]
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	2100      	movs	r1, #0
 8017522:	4618      	mov	r0, r3
 8017524:	f7ff fdea 	bl	80170fc <lwip_netconn_do_writemore>
 8017528:	4603      	mov	r3, r0
 801752a:	2b00      	cmp	r3, #0
 801752c:	d02e      	beq.n	801758c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 801752e:	68bb      	ldr	r3, [r7, #8]
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	785b      	ldrb	r3, [r3, #1]
 8017534:	2b01      	cmp	r3, #1
 8017536:	d006      	beq.n	8017546 <lwip_netconn_do_write+0xb2>
 8017538:	4b16      	ldr	r3, [pc, #88]	@ (8017594 <lwip_netconn_do_write+0x100>)
 801753a:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 801753e:	4919      	ldr	r1, [pc, #100]	@ (80175a4 <lwip_netconn_do_write+0x110>)
 8017540:	4816      	ldr	r0, [pc, #88]	@ (801759c <lwip_netconn_do_write+0x108>)
 8017542:	f00d ffcf 	bl	80254e4 <iprintf>
          UNLOCK_TCPIP_CORE();
 8017546:	4818      	ldr	r0, [pc, #96]	@ (80175a8 <lwip_netconn_do_write+0x114>)
 8017548:	f00c feff 	bl	802434a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801754c:	68bb      	ldr	r3, [r7, #8]
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	330c      	adds	r3, #12
 8017552:	2100      	movs	r1, #0
 8017554:	4618      	mov	r0, r3
 8017556:	f00c fe56 	bl	8024206 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 801755a:	4813      	ldr	r0, [pc, #76]	@ (80175a8 <lwip_netconn_do_write+0x114>)
 801755c:	f00c fee6 	bl	802432c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8017560:	68bb      	ldr	r3, [r7, #8]
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	785b      	ldrb	r3, [r3, #1]
 8017566:	2b01      	cmp	r3, #1
 8017568:	d110      	bne.n	801758c <lwip_netconn_do_write+0xf8>
 801756a:	4b0a      	ldr	r3, [pc, #40]	@ (8017594 <lwip_netconn_do_write+0x100>)
 801756c:	f240 722c 	movw	r2, #1836	@ 0x72c
 8017570:	490c      	ldr	r1, [pc, #48]	@ (80175a4 <lwip_netconn_do_write+0x110>)
 8017572:	480a      	ldr	r0, [pc, #40]	@ (801759c <lwip_netconn_do_write+0x108>)
 8017574:	f00d ffb6 	bl	80254e4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8017578:	e008      	b.n	801758c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 801757a:	23f5      	movs	r3, #245	@ 0xf5
 801757c:	73fb      	strb	r3, [r7, #15]
 801757e:	e001      	b.n	8017584 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8017580:	23fa      	movs	r3, #250	@ 0xfa
 8017582:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8017584:	68bb      	ldr	r3, [r7, #8]
 8017586:	7bfa      	ldrb	r2, [r7, #15]
 8017588:	711a      	strb	r2, [r3, #4]
 801758a:	e000      	b.n	801758e <lwip_netconn_do_write+0xfa>
        return;
 801758c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 801758e:	3710      	adds	r7, #16
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}
 8017594:	080299ec 	.word	0x080299ec
 8017598:	08029d90 	.word	0x08029d90
 801759c:	08029a30 	.word	0x08029a30
 80175a0:	08029f18 	.word	0x08029f18
 80175a4:	08029dac 	.word	0x08029dac
 80175a8:	24008d60 	.word	0x24008d60

080175ac <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b084      	sub	sp, #16
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	685b      	ldr	r3, [r3, #4]
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d06b      	beq.n	801769a <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	7c1b      	ldrb	r3, [r3, #16]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d007      	beq.n	80175da <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	685a      	ldr	r2, [r3, #4]
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	689b      	ldr	r3, [r3, #8]
 80175d4:	6812      	ldr	r2, [r2, #0]
 80175d6:	601a      	str	r2, [r3, #0]
 80175d8:	e006      	b.n	80175e8 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	685a      	ldr	r2, [r3, #4]
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	689b      	ldr	r3, [r3, #8]
 80175e4:	6852      	ldr	r2, [r2, #4]
 80175e6:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	2200      	movs	r2, #0
 80175ec:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	781b      	ldrb	r3, [r3, #0]
 80175f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80175f8:	2b10      	cmp	r3, #16
 80175fa:	d021      	beq.n	8017640 <lwip_netconn_do_getaddr+0x94>
 80175fc:	2b20      	cmp	r3, #32
 80175fe:	d144      	bne.n	801768a <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	7c1b      	ldrb	r3, [r3, #16]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d007      	beq.n	8017618 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	685a      	ldr	r2, [r3, #4]
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	68db      	ldr	r3, [r3, #12]
 8017612:	8a52      	ldrh	r2, [r2, #18]
 8017614:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 8017616:	e044      	b.n	80176a2 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	685b      	ldr	r3, [r3, #4]
 801761e:	7c1b      	ldrb	r3, [r3, #16]
 8017620:	f003 0304 	and.w	r3, r3, #4
 8017624:	2b00      	cmp	r3, #0
 8017626:	d103      	bne.n	8017630 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	22f5      	movs	r2, #245	@ 0xf5
 801762c:	711a      	strb	r2, [r3, #4]
        break;
 801762e:	e038      	b.n	80176a2 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	685a      	ldr	r2, [r3, #4]
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	68db      	ldr	r3, [r3, #12]
 801763a:	8a92      	ldrh	r2, [r2, #20]
 801763c:	801a      	strh	r2, [r3, #0]
        break;
 801763e:	e030      	b.n	80176a2 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	7c1b      	ldrb	r3, [r3, #16]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d10f      	bne.n	8017668 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8017648:	68fb      	ldr	r3, [r7, #12]
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	685b      	ldr	r3, [r3, #4]
 801764e:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 8017650:	2b00      	cmp	r3, #0
 8017652:	d005      	beq.n	8017660 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	685b      	ldr	r3, [r3, #4]
 801765a:	7d1b      	ldrb	r3, [r3, #20]
 801765c:	2b01      	cmp	r3, #1
 801765e:	d103      	bne.n	8017668 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	22f5      	movs	r2, #245	@ 0xf5
 8017664:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 8017666:	e01c      	b.n	80176a2 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	7c1b      	ldrb	r3, [r3, #16]
 801766c:	2b00      	cmp	r3, #0
 801766e:	d004      	beq.n	801767a <lwip_netconn_do_getaddr+0xce>
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	685b      	ldr	r3, [r3, #4]
 8017676:	8adb      	ldrh	r3, [r3, #22]
 8017678:	e003      	b.n	8017682 <lwip_netconn_do_getaddr+0xd6>
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	685b      	ldr	r3, [r3, #4]
 8017680:	8b1b      	ldrh	r3, [r3, #24]
 8017682:	68fa      	ldr	r2, [r7, #12]
 8017684:	68d2      	ldr	r2, [r2, #12]
 8017686:	8013      	strh	r3, [r2, #0]
        break;
 8017688:	e00b      	b.n	80176a2 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 801768a:	4b08      	ldr	r3, [pc, #32]	@ (80176ac <lwip_netconn_do_getaddr+0x100>)
 801768c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8017690:	4907      	ldr	r1, [pc, #28]	@ (80176b0 <lwip_netconn_do_getaddr+0x104>)
 8017692:	4808      	ldr	r0, [pc, #32]	@ (80176b4 <lwip_netconn_do_getaddr+0x108>)
 8017694:	f00d ff26 	bl	80254e4 <iprintf>
        break;
 8017698:	e003      	b.n	80176a2 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	22f5      	movs	r2, #245	@ 0xf5
 801769e:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 80176a0:	bf00      	nop
 80176a2:	bf00      	nop
 80176a4:	3710      	adds	r7, #16
 80176a6:	46bd      	mov	sp, r7
 80176a8:	bd80      	pop	{r7, pc}
 80176aa:	bf00      	nop
 80176ac:	080299ec 	.word	0x080299ec
 80176b0:	08029f2c 	.word	0x08029f2c
 80176b4:	08029a30 	.word	0x08029a30

080176b8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b084      	sub	sp, #16
 80176bc:	af00      	add	r7, sp, #0
 80176be:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	785b      	ldrb	r3, [r3, #1]
 80176ca:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	685b      	ldr	r3, [r3, #4]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d069      	beq.n	80177aa <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	781b      	ldrb	r3, [r3, #0]
 80176dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80176e0:	2b10      	cmp	r3, #16
 80176e2:	d162      	bne.n	80177aa <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80176e8:	2b03      	cmp	r3, #3
 80176ea:	d002      	beq.n	80176f2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80176ec:	7afb      	ldrb	r3, [r7, #11]
 80176ee:	2b02      	cmp	r3, #2
 80176f0:	d05b      	beq.n	80177aa <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80176f2:	7afb      	ldrb	r3, [r7, #11]
 80176f4:	2b03      	cmp	r3, #3
 80176f6:	d103      	bne.n	8017700 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	22f5      	movs	r2, #245	@ 0xf5
 80176fc:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80176fe:	e059      	b.n	80177b4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8017700:	7afb      	ldrb	r3, [r7, #11]
 8017702:	2b01      	cmp	r3, #1
 8017704:	d103      	bne.n	801770e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	22fb      	movs	r2, #251	@ 0xfb
 801770a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801770c:	e052      	b.n	80177b4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	7a1b      	ldrb	r3, [r3, #8]
 8017712:	f003 0301 	and.w	r3, r3, #1
 8017716:	2b00      	cmp	r3, #0
 8017718:	d004      	beq.n	8017724 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	4618      	mov	r0, r3
 8017720:	f7ff f964 	bl	80169ec <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	6a1b      	ldr	r3, [r3, #32]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d006      	beq.n	801773c <lwip_netconn_do_close+0x84>
 801772e:	4b23      	ldr	r3, [pc, #140]	@ (80177bc <lwip_netconn_do_close+0x104>)
 8017730:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8017734:	4922      	ldr	r1, [pc, #136]	@ (80177c0 <lwip_netconn_do_close+0x108>)
 8017736:	4823      	ldr	r0, [pc, #140]	@ (80177c4 <lwip_netconn_do_close+0x10c>)
 8017738:	f00d fed4 	bl	80254e4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	2204      	movs	r2, #4
 8017742:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	68fa      	ldr	r2, [r7, #12]
 801774a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	2100      	movs	r1, #0
 8017752:	4618      	mov	r0, r3
 8017754:	f7ff f9c8 	bl	8016ae8 <lwip_netconn_do_close_internal>
 8017758:	4603      	mov	r3, r0
 801775a:	2b00      	cmp	r3, #0
 801775c:	d029      	beq.n	80177b2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	785b      	ldrb	r3, [r3, #1]
 8017764:	2b04      	cmp	r3, #4
 8017766:	d006      	beq.n	8017776 <lwip_netconn_do_close+0xbe>
 8017768:	4b14      	ldr	r3, [pc, #80]	@ (80177bc <lwip_netconn_do_close+0x104>)
 801776a:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 801776e:	4916      	ldr	r1, [pc, #88]	@ (80177c8 <lwip_netconn_do_close+0x110>)
 8017770:	4814      	ldr	r0, [pc, #80]	@ (80177c4 <lwip_netconn_do_close+0x10c>)
 8017772:	f00d feb7 	bl	80254e4 <iprintf>
        UNLOCK_TCPIP_CORE();
 8017776:	4815      	ldr	r0, [pc, #84]	@ (80177cc <lwip_netconn_do_close+0x114>)
 8017778:	f00c fde7 	bl	802434a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	330c      	adds	r3, #12
 8017782:	2100      	movs	r1, #0
 8017784:	4618      	mov	r0, r3
 8017786:	f00c fd3e 	bl	8024206 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 801778a:	4810      	ldr	r0, [pc, #64]	@ (80177cc <lwip_netconn_do_close+0x114>)
 801778c:	f00c fdce 	bl	802432c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	785b      	ldrb	r3, [r3, #1]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d00b      	beq.n	80177b2 <lwip_netconn_do_close+0xfa>
 801779a:	4b08      	ldr	r3, [pc, #32]	@ (80177bc <lwip_netconn_do_close+0x104>)
 801779c:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 80177a0:	4909      	ldr	r1, [pc, #36]	@ (80177c8 <lwip_netconn_do_close+0x110>)
 80177a2:	4808      	ldr	r0, [pc, #32]	@ (80177c4 <lwip_netconn_do_close+0x10c>)
 80177a4:	f00d fe9e 	bl	80254e4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80177a8:	e003      	b.n	80177b2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	22f5      	movs	r2, #245	@ 0xf5
 80177ae:	711a      	strb	r2, [r3, #4]
 80177b0:	e000      	b.n	80177b4 <lwip_netconn_do_close+0xfc>
      return;
 80177b2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80177b4:	3710      	adds	r7, #16
 80177b6:	46bd      	mov	sp, r7
 80177b8:	bd80      	pop	{r7, pc}
 80177ba:	bf00      	nop
 80177bc:	080299ec 	.word	0x080299ec
 80177c0:	08029d90 	.word	0x08029d90
 80177c4:	08029a30 	.word	0x08029a30
 80177c8:	08029dac 	.word	0x08029dac
 80177cc:	24008d60 	.word	0x24008d60

080177d0 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 80177d0:	b480      	push	{r7}
 80177d2:	b083      	sub	sp, #12
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	4603      	mov	r3, r0
 80177d8:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 80177da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	dc04      	bgt.n	80177ec <err_to_errno+0x1c>
 80177e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80177e6:	f113 0f10 	cmn.w	r3, #16
 80177ea:	da01      	bge.n	80177f0 <err_to_errno+0x20>
    return EIO;
 80177ec:	2305      	movs	r3, #5
 80177ee:	e005      	b.n	80177fc <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 80177f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80177f4:	425b      	negs	r3, r3
 80177f6:	4a04      	ldr	r2, [pc, #16]	@ (8017808 <err_to_errno+0x38>)
 80177f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80177fc:	4618      	mov	r0, r3
 80177fe:	370c      	adds	r7, #12
 8017800:	46bd      	mov	sp, r7
 8017802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017806:	4770      	bx	lr
 8017808:	0802d000 	.word	0x0802d000

0801780c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 801780c:	b580      	push	{r7, lr}
 801780e:	b082      	sub	sp, #8
 8017810:	af00      	add	r7, sp, #0
 8017812:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	2b00      	cmp	r3, #0
 8017818:	d013      	beq.n	8017842 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d00b      	beq.n	801783a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	4618      	mov	r0, r3
 8017828:	f002 ff0e 	bl	801a648 <pbuf_free>
      buf->p = buf->ptr = NULL;
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	2200      	movs	r2, #0
 8017830:	605a      	str	r2, [r3, #4]
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	685a      	ldr	r2, [r3, #4]
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801783a:	6879      	ldr	r1, [r7, #4]
 801783c:	2006      	movs	r0, #6
 801783e:	f002 f82d 	bl	801989c <memp_free>
  }
}
 8017842:	bf00      	nop
 8017844:	3708      	adds	r7, #8
 8017846:	46bd      	mov	sp, r7
 8017848:	bd80      	pop	{r7, pc}
	...

0801784c <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 801784c:	b580      	push	{r7, lr}
 801784e:	b082      	sub	sp, #8
 8017850:	af00      	add	r7, sp, #0
 8017852:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d106      	bne.n	8017868 <netbuf_free+0x1c>
 801785a:	4b0d      	ldr	r3, [pc, #52]	@ (8017890 <netbuf_free+0x44>)
 801785c:	2281      	movs	r2, #129	@ 0x81
 801785e:	490d      	ldr	r1, [pc, #52]	@ (8017894 <netbuf_free+0x48>)
 8017860:	480d      	ldr	r0, [pc, #52]	@ (8017898 <netbuf_free+0x4c>)
 8017862:	f00d fe3f 	bl	80254e4 <iprintf>
 8017866:	e00f      	b.n	8017888 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d004      	beq.n	801787a <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	4618      	mov	r0, r3
 8017876:	f002 fee7 	bl	801a648 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	2200      	movs	r2, #0
 801787e:	605a      	str	r2, [r3, #4]
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	685a      	ldr	r2, [r3, #4]
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8017888:	3708      	adds	r7, #8
 801788a:	46bd      	mov	sp, r7
 801788c:	bd80      	pop	{r7, pc}
 801788e:	bf00      	nop
 8017890:	08029f44 	.word	0x08029f44
 8017894:	08029fe0 	.word	0x08029fe0
 8017898:	08029f94 	.word	0x08029f94

0801789c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 801789c:	b580      	push	{r7, lr}
 801789e:	b084      	sub	sp, #16
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	60f8      	str	r0, [r7, #12]
 80178a4:	60b9      	str	r1, [r7, #8]
 80178a6:	4613      	mov	r3, r2
 80178a8:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d108      	bne.n	80178c2 <netbuf_ref+0x26>
 80178b0:	4b1c      	ldr	r3, [pc, #112]	@ (8017924 <netbuf_ref+0x88>)
 80178b2:	2299      	movs	r2, #153	@ 0x99
 80178b4:	491c      	ldr	r1, [pc, #112]	@ (8017928 <netbuf_ref+0x8c>)
 80178b6:	481d      	ldr	r0, [pc, #116]	@ (801792c <netbuf_ref+0x90>)
 80178b8:	f00d fe14 	bl	80254e4 <iprintf>
 80178bc:	f06f 030f 	mvn.w	r3, #15
 80178c0:	e02b      	b.n	801791a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d004      	beq.n	80178d4 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	4618      	mov	r0, r3
 80178d0:	f002 feba 	bl	801a648 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 80178d4:	2241      	movs	r2, #65	@ 0x41
 80178d6:	2100      	movs	r1, #0
 80178d8:	2036      	movs	r0, #54	@ 0x36
 80178da:	f002 fb9f 	bl	801a01c <pbuf_alloc>
 80178de:	4602      	mov	r2, r0
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d105      	bne.n	80178f8 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	2200      	movs	r2, #0
 80178f0:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 80178f2:	f04f 33ff 	mov.w	r3, #4294967295
 80178f6:	e010      	b.n	801791a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	68ba      	ldr	r2, [r7, #8]
 80178fe:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	88fa      	ldrh	r2, [r7, #6]
 8017906:	811a      	strh	r2, [r3, #8]
 8017908:	68fa      	ldr	r2, [r7, #12]
 801790a:	6812      	ldr	r2, [r2, #0]
 801790c:	891b      	ldrh	r3, [r3, #8]
 801790e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	681a      	ldr	r2, [r3, #0]
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8017918:	2300      	movs	r3, #0
}
 801791a:	4618      	mov	r0, r3
 801791c:	3710      	adds	r7, #16
 801791e:	46bd      	mov	sp, r7
 8017920:	bd80      	pop	{r7, pc}
 8017922:	bf00      	nop
 8017924:	08029f44 	.word	0x08029f44
 8017928:	08029ffc 	.word	0x08029ffc
 801792c:	08029f94 	.word	0x08029f94

08017930 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8017930:	b480      	push	{r7}
 8017932:	b085      	sub	sp, #20
 8017934:	af00      	add	r7, sp, #0
 8017936:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	2b00      	cmp	r3, #0
 8017940:	db02      	blt.n	8017948 <tryget_socket_unconn_nouse+0x18>
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	2b03      	cmp	r3, #3
 8017946:	dd01      	ble.n	801794c <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8017948:	2300      	movs	r3, #0
 801794a:	e003      	b.n	8017954 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	011b      	lsls	r3, r3, #4
 8017950:	4a03      	ldr	r2, [pc, #12]	@ (8017960 <tryget_socket_unconn_nouse+0x30>)
 8017952:	4413      	add	r3, r2
}
 8017954:	4618      	mov	r0, r3
 8017956:	3714      	adds	r7, #20
 8017958:	46bd      	mov	sp, r7
 801795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801795e:	4770      	bx	lr
 8017960:	24008d10 	.word	0x24008d10

08017964 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 8017964:	b580      	push	{r7, lr}
 8017966:	b084      	sub	sp, #16
 8017968:	af00      	add	r7, sp, #0
 801796a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 801796c:	6878      	ldr	r0, [r7, #4]
 801796e:	f7ff ffdf 	bl	8017930 <tryget_socket_unconn_nouse>
 8017972:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 8017974:	68fb      	ldr	r3, [r7, #12]
}
 8017976:	4618      	mov	r0, r3
 8017978:	3710      	adds	r7, #16
 801797a:	46bd      	mov	sp, r7
 801797c:	bd80      	pop	{r7, pc}

0801797e <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 801797e:	b580      	push	{r7, lr}
 8017980:	b084      	sub	sp, #16
 8017982:	af00      	add	r7, sp, #0
 8017984:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 8017986:	6878      	ldr	r0, [r7, #4]
 8017988:	f7ff ffec 	bl	8017964 <tryget_socket_unconn>
 801798c:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d005      	beq.n	80179a0 <tryget_socket+0x22>
    if (sock->conn) {
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	2b00      	cmp	r3, #0
 801799a:	d001      	beq.n	80179a0 <tryget_socket+0x22>
      return sock;
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	e000      	b.n	80179a2 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 80179a0:	2300      	movs	r3, #0
}
 80179a2:	4618      	mov	r0, r3
 80179a4:	3710      	adds	r7, #16
 80179a6:	46bd      	mov	sp, r7
 80179a8:	bd80      	pop	{r7, pc}
	...

080179ac <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 80179ac:	b580      	push	{r7, lr}
 80179ae:	b084      	sub	sp, #16
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 80179b4:	6878      	ldr	r0, [r7, #4]
 80179b6:	f7ff ffe2 	bl	801797e <tryget_socket>
 80179ba:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d104      	bne.n	80179cc <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 80179c2:	4b05      	ldr	r3, [pc, #20]	@ (80179d8 <get_socket+0x2c>)
 80179c4:	2209      	movs	r2, #9
 80179c6:	601a      	str	r2, [r3, #0]
    return NULL;
 80179c8:	2300      	movs	r3, #0
 80179ca:	e000      	b.n	80179ce <get_socket+0x22>
  }
  return sock;
 80179cc:	68fb      	ldr	r3, [r7, #12]
}
 80179ce:	4618      	mov	r0, r3
 80179d0:	3710      	adds	r7, #16
 80179d2:	46bd      	mov	sp, r7
 80179d4:	bd80      	pop	{r7, pc}
 80179d6:	bf00      	nop
 80179d8:	2400bfc0 	.word	0x2400bfc0

080179dc <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	b084      	sub	sp, #16
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	6078      	str	r0, [r7, #4]
 80179e4:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80179e6:	2300      	movs	r3, #0
 80179e8:	60fb      	str	r3, [r7, #12]
 80179ea:	e052      	b.n	8017a92 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 80179ec:	f00c fce0 	bl	80243b0 <sys_arch_protect>
 80179f0:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 80179f2:	4a2c      	ldr	r2, [pc, #176]	@ (8017aa4 <alloc_socket+0xc8>)
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	011b      	lsls	r3, r3, #4
 80179f8:	4413      	add	r3, r2
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d142      	bne.n	8017a86 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8017a00:	4a28      	ldr	r2, [pc, #160]	@ (8017aa4 <alloc_socket+0xc8>)
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	011b      	lsls	r3, r3, #4
 8017a06:	4413      	add	r3, r2
 8017a08:	687a      	ldr	r2, [r7, #4]
 8017a0a:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8017a0c:	68b8      	ldr	r0, [r7, #8]
 8017a0e:	f00c fcdd 	bl	80243cc <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 8017a12:	4a24      	ldr	r2, [pc, #144]	@ (8017aa4 <alloc_socket+0xc8>)
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	011b      	lsls	r3, r3, #4
 8017a18:	4413      	add	r3, r2
 8017a1a:	3304      	adds	r3, #4
 8017a1c:	2200      	movs	r2, #0
 8017a1e:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8017a20:	4a20      	ldr	r2, [pc, #128]	@ (8017aa4 <alloc_socket+0xc8>)
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	011b      	lsls	r3, r3, #4
 8017a26:	4413      	add	r3, r2
 8017a28:	330e      	adds	r3, #14
 8017a2a:	781b      	ldrb	r3, [r3, #0]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d006      	beq.n	8017a3e <alloc_socket+0x62>
 8017a30:	4b1d      	ldr	r3, [pc, #116]	@ (8017aa8 <alloc_socket+0xcc>)
 8017a32:	f240 220e 	movw	r2, #526	@ 0x20e
 8017a36:	491d      	ldr	r1, [pc, #116]	@ (8017aac <alloc_socket+0xd0>)
 8017a38:	481d      	ldr	r0, [pc, #116]	@ (8017ab0 <alloc_socket+0xd4>)
 8017a3a:	f00d fd53 	bl	80254e4 <iprintf>
      sockets[i].rcvevent   = 0;
 8017a3e:	4a19      	ldr	r2, [pc, #100]	@ (8017aa4 <alloc_socket+0xc8>)
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	011b      	lsls	r3, r3, #4
 8017a44:	4413      	add	r3, r2
 8017a46:	3308      	adds	r3, #8
 8017a48:	2200      	movs	r2, #0
 8017a4a:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	781b      	ldrb	r3, [r3, #0]
 8017a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017a54:	2b10      	cmp	r3, #16
 8017a56:	d102      	bne.n	8017a5e <alloc_socket+0x82>
 8017a58:	683b      	ldr	r3, [r7, #0]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d001      	beq.n	8017a62 <alloc_socket+0x86>
 8017a5e:	2301      	movs	r3, #1
 8017a60:	e000      	b.n	8017a64 <alloc_socket+0x88>
 8017a62:	2300      	movs	r3, #0
 8017a64:	b299      	uxth	r1, r3
 8017a66:	4a0f      	ldr	r2, [pc, #60]	@ (8017aa4 <alloc_socket+0xc8>)
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	011b      	lsls	r3, r3, #4
 8017a6c:	4413      	add	r3, r2
 8017a6e:	330a      	adds	r3, #10
 8017a70:	460a      	mov	r2, r1
 8017a72:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 8017a74:	4a0b      	ldr	r2, [pc, #44]	@ (8017aa4 <alloc_socket+0xc8>)
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	011b      	lsls	r3, r3, #4
 8017a7a:	4413      	add	r3, r2
 8017a7c:	330c      	adds	r3, #12
 8017a7e:	2200      	movs	r2, #0
 8017a80:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	e00a      	b.n	8017a9c <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 8017a86:	68b8      	ldr	r0, [r7, #8]
 8017a88:	f00c fca0 	bl	80243cc <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	3301      	adds	r3, #1
 8017a90:	60fb      	str	r3, [r7, #12]
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	2b03      	cmp	r3, #3
 8017a96:	dda9      	ble.n	80179ec <alloc_socket+0x10>
  }
  return -1;
 8017a98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	3710      	adds	r7, #16
 8017aa0:	46bd      	mov	sp, r7
 8017aa2:	bd80      	pop	{r7, pc}
 8017aa4:	24008d10 	.word	0x24008d10
 8017aa8:	0802a0dc 	.word	0x0802a0dc
 8017aac:	0802a110 	.word	0x0802a110
 8017ab0:	0802a130 	.word	0x0802a130

08017ab4 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 8017ab4:	b480      	push	{r7}
 8017ab6:	b085      	sub	sp, #20
 8017ab8:	af00      	add	r7, sp, #0
 8017aba:	60f8      	str	r0, [r7, #12]
 8017abc:	60b9      	str	r1, [r7, #8]
 8017abe:	607a      	str	r2, [r7, #4]
 8017ac0:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 8017ac2:	683b      	ldr	r3, [r7, #0]
 8017ac4:	68fa      	ldr	r2, [r7, #12]
 8017ac6:	6852      	ldr	r2, [r2, #4]
 8017ac8:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	2200      	movs	r2, #0
 8017ace:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	681a      	ldr	r2, [r3, #0]
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	2200      	movs	r2, #0
 8017adc:	601a      	str	r2, [r3, #0]
  return 1;
 8017ade:	2301      	movs	r3, #1
}
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	3714      	adds	r7, #20
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aea:	4770      	bx	lr

08017aec <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b084      	sub	sp, #16
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	60f8      	str	r0, [r7, #12]
 8017af4:	60b9      	str	r1, [r7, #8]
 8017af6:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d00d      	beq.n	8017b1c <free_socket_free_elements+0x30>
    if (is_tcp) {
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d005      	beq.n	8017b12 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f002 fd9c 	bl	801a648 <pbuf_free>
 8017b10:	e004      	b.n	8017b1c <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	4618      	mov	r0, r3
 8017b18:	f7ff fe78 	bl	801780c <netbuf_delete>
    }
  }
  if (conn != NULL) {
 8017b1c:	68bb      	ldr	r3, [r7, #8]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d002      	beq.n	8017b28 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 8017b22:	68b8      	ldr	r0, [r7, #8]
 8017b24:	f7fd ff0c 	bl	8015940 <netconn_delete>
  }
}
 8017b28:	bf00      	nop
 8017b2a:	3710      	adds	r7, #16
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	bd80      	pop	{r7, pc}

08017b30 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b086      	sub	sp, #24
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
 8017b38:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 8017b3a:	f00c fc39 	bl	80243b0 <sys_arch_protect>
 8017b3e:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 8017b40:	f107 0308 	add.w	r3, r7, #8
 8017b44:	f107 020c 	add.w	r2, r7, #12
 8017b48:	6839      	ldr	r1, [r7, #0]
 8017b4a:	6878      	ldr	r0, [r7, #4]
 8017b4c:	f7ff ffb2 	bl	8017ab4 <free_socket_locked>
 8017b50:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 8017b52:	6978      	ldr	r0, [r7, #20]
 8017b54:	f00c fc3a 	bl	80243cc <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 8017b58:	693b      	ldr	r3, [r7, #16]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d006      	beq.n	8017b6c <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	f107 0208 	add.w	r2, r7, #8
 8017b64:	4619      	mov	r1, r3
 8017b66:	6838      	ldr	r0, [r7, #0]
 8017b68:	f7ff ffc0 	bl	8017aec <free_socket_free_elements>
  }
}
 8017b6c:	bf00      	nop
 8017b6e:	3718      	adds	r7, #24
 8017b70:	46bd      	mov	sp, r7
 8017b72:	bd80      	pop	{r7, pc}

08017b74 <lwip_bind>:
  return newsock;
}

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b08a      	sub	sp, #40	@ 0x28
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	60f8      	str	r0, [r7, #12]
 8017b7c:	60b9      	str	r1, [r7, #8]
 8017b7e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 8017b80:	68f8      	ldr	r0, [r7, #12]
 8017b82:	f7ff ff13 	bl	80179ac <get_socket>
 8017b86:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!sock) {
 8017b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d102      	bne.n	8017b94 <lwip_bind+0x20>
    return -1;
 8017b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8017b92:	e051      	b.n	8017c38 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	2b10      	cmp	r3, #16
 8017b98:	d108      	bne.n	8017bac <lwip_bind+0x38>
 8017b9a:	68bb      	ldr	r3, [r7, #8]
 8017b9c:	785b      	ldrb	r3, [r3, #1]
 8017b9e:	2b02      	cmp	r3, #2
 8017ba0:	d104      	bne.n	8017bac <lwip_bind+0x38>
 8017ba2:	68bb      	ldr	r3, [r7, #8]
 8017ba4:	f003 0303 	and.w	r3, r3, #3
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d014      	beq.n	8017bd6 <lwip_bind+0x62>
 8017bac:	4b24      	ldr	r3, [pc, #144]	@ (8017c40 <lwip_bind+0xcc>)
 8017bae:	f240 22e2 	movw	r2, #738	@ 0x2e2
 8017bb2:	4924      	ldr	r1, [pc, #144]	@ (8017c44 <lwip_bind+0xd0>)
 8017bb4:	4824      	ldr	r0, [pc, #144]	@ (8017c48 <lwip_bind+0xd4>)
 8017bb6:	f00d fc95 	bl	80254e4 <iprintf>
 8017bba:	f06f 000f 	mvn.w	r0, #15
 8017bbe:	f7ff fe07 	bl	80177d0 <err_to_errno>
 8017bc2:	6178      	str	r0, [r7, #20]
 8017bc4:	697b      	ldr	r3, [r7, #20]
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d002      	beq.n	8017bd0 <lwip_bind+0x5c>
 8017bca:	4a20      	ldr	r2, [pc, #128]	@ (8017c4c <lwip_bind+0xd8>)
 8017bcc:	697b      	ldr	r3, [r7, #20]
 8017bce:	6013      	str	r3, [r2, #0]
 8017bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8017bd4:	e030      	b.n	8017c38 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8017bd6:	68bb      	ldr	r3, [r7, #8]
 8017bd8:	685b      	ldr	r3, [r3, #4]
 8017bda:	613b      	str	r3, [r7, #16]
 8017bdc:	68bb      	ldr	r3, [r7, #8]
 8017bde:	885b      	ldrh	r3, [r3, #2]
 8017be0:	4618      	mov	r0, r3
 8017be2:	f001 f855 	bl	8018c90 <lwip_htons>
 8017be6:	4603      	mov	r3, r0
 8017be8:	847b      	strh	r3, [r7, #34]	@ 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 8017bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017bf0:	f107 0110 	add.w	r1, r7, #16
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	f7fd ff11 	bl	8015a1c <netconn_bind>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

  if (err != ERR_OK) {
 8017c00:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d00e      	beq.n	8017c26 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8017c08:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	f7ff fddf 	bl	80177d0 <err_to_errno>
 8017c12:	61b8      	str	r0, [r7, #24]
 8017c14:	69bb      	ldr	r3, [r7, #24]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d002      	beq.n	8017c20 <lwip_bind+0xac>
 8017c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8017c4c <lwip_bind+0xd8>)
 8017c1c:	69bb      	ldr	r3, [r7, #24]
 8017c1e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8017c20:	f04f 33ff 	mov.w	r3, #4294967295
 8017c24:	e008      	b.n	8017c38 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8017c26:	2300      	movs	r3, #0
 8017c28:	61fb      	str	r3, [r7, #28]
 8017c2a:	69fb      	ldr	r3, [r7, #28]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d002      	beq.n	8017c36 <lwip_bind+0xc2>
 8017c30:	4a06      	ldr	r2, [pc, #24]	@ (8017c4c <lwip_bind+0xd8>)
 8017c32:	69fb      	ldr	r3, [r7, #28]
 8017c34:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8017c36:	2300      	movs	r3, #0
}
 8017c38:	4618      	mov	r0, r3
 8017c3a:	3728      	adds	r7, #40	@ 0x28
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	bd80      	pop	{r7, pc}
 8017c40:	0802a0dc 	.word	0x0802a0dc
 8017c44:	0802a180 	.word	0x0802a180
 8017c48:	0802a130 	.word	0x0802a130
 8017c4c:	2400bfc0 	.word	0x2400bfc0

08017c50 <lwip_close>:

int
lwip_close(int s)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b086      	sub	sp, #24
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 8017c58:	2300      	movs	r3, #0
 8017c5a:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 8017c5c:	6878      	ldr	r0, [r7, #4]
 8017c5e:	f7ff fea5 	bl	80179ac <get_socket>
 8017c62:	6138      	str	r0, [r7, #16]
  if (!sock) {
 8017c64:	693b      	ldr	r3, [r7, #16]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d102      	bne.n	8017c70 <lwip_close+0x20>
    return -1;
 8017c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8017c6e:	e039      	b.n	8017ce4 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 8017c70:	693b      	ldr	r3, [r7, #16]
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d00b      	beq.n	8017c90 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 8017c78:	693b      	ldr	r3, [r7, #16]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	781b      	ldrb	r3, [r3, #0]
 8017c7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017c82:	2b10      	cmp	r3, #16
 8017c84:	bf0c      	ite	eq
 8017c86:	2301      	moveq	r3, #1
 8017c88:	2300      	movne	r3, #0
 8017c8a:	b2db      	uxtb	r3, r3
 8017c8c:	617b      	str	r3, [r7, #20]
 8017c8e:	e00a      	b.n	8017ca6 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 8017c90:	693b      	ldr	r3, [r7, #16]
 8017c92:	685b      	ldr	r3, [r3, #4]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d006      	beq.n	8017ca6 <lwip_close+0x56>
 8017c98:	4b14      	ldr	r3, [pc, #80]	@ (8017cec <lwip_close+0x9c>)
 8017c9a:	f44f 7245 	mov.w	r2, #788	@ 0x314
 8017c9e:	4914      	ldr	r1, [pc, #80]	@ (8017cf0 <lwip_close+0xa0>)
 8017ca0:	4814      	ldr	r0, [pc, #80]	@ (8017cf4 <lwip_close+0xa4>)
 8017ca2:	f00d fc1f 	bl	80254e4 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 8017ca6:	693b      	ldr	r3, [r7, #16]
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	4618      	mov	r0, r3
 8017cac:	f7fd fe24 	bl	80158f8 <netconn_prepare_delete>
 8017cb0:	4603      	mov	r3, r0
 8017cb2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d00e      	beq.n	8017cda <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 8017cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	f7ff fd85 	bl	80177d0 <err_to_errno>
 8017cc6:	60b8      	str	r0, [r7, #8]
 8017cc8:	68bb      	ldr	r3, [r7, #8]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d002      	beq.n	8017cd4 <lwip_close+0x84>
 8017cce:	4a0a      	ldr	r2, [pc, #40]	@ (8017cf8 <lwip_close+0xa8>)
 8017cd0:	68bb      	ldr	r3, [r7, #8]
 8017cd2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8017cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8017cd8:	e004      	b.n	8017ce4 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 8017cda:	6979      	ldr	r1, [r7, #20]
 8017cdc:	6938      	ldr	r0, [r7, #16]
 8017cde:	f7ff ff27 	bl	8017b30 <free_socket>
  set_errno(0);
  return 0;
 8017ce2:	2300      	movs	r3, #0
}
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	3718      	adds	r7, #24
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	bd80      	pop	{r7, pc}
 8017cec:	0802a0dc 	.word	0x0802a0dc
 8017cf0:	0802a19c 	.word	0x0802a19c
 8017cf4:	0802a130 	.word	0x0802a130
 8017cf8:	2400bfc0 	.word	0x2400bfc0

08017cfc <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b08c      	sub	sp, #48	@ 0x30
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	60f8      	str	r0, [r7, #12]
 8017d04:	60b9      	str	r1, [r7, #8]
 8017d06:	607a      	str	r2, [r7, #4]
 8017d08:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 8017d0a:	2308      	movs	r3, #8
 8017d0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  ssize_t recvd = 0;
 8017d10:	2300      	movs	r3, #0
 8017d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	db01      	blt.n	8017d1e <lwip_recv_tcp+0x22>
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	e001      	b.n	8017d22 <lwip_recv_tcp+0x26>
 8017d1e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017d22:	627b      	str	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d106      	bne.n	8017d38 <lwip_recv_tcp+0x3c>
 8017d2a:	4b74      	ldr	r3, [pc, #464]	@ (8017efc <lwip_recv_tcp+0x200>)
 8017d2c:	f240 329e 	movw	r2, #926	@ 0x39e
 8017d30:	4973      	ldr	r1, [pc, #460]	@ (8017f00 <lwip_recv_tcp+0x204>)
 8017d32:	4874      	ldr	r0, [pc, #464]	@ (8017f04 <lwip_recv_tcp+0x208>)
 8017d34:	f00d fbd6 	bl	80254e4 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	781b      	ldrb	r3, [r3, #0]
 8017d3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017d42:	2b10      	cmp	r3, #16
 8017d44:	d006      	beq.n	8017d54 <lwip_recv_tcp+0x58>
 8017d46:	4b6d      	ldr	r3, [pc, #436]	@ (8017efc <lwip_recv_tcp+0x200>)
 8017d48:	f240 329f 	movw	r2, #927	@ 0x39f
 8017d4c:	496e      	ldr	r1, [pc, #440]	@ (8017f08 <lwip_recv_tcp+0x20c>)
 8017d4e:	486d      	ldr	r0, [pc, #436]	@ (8017f04 <lwip_recv_tcp+0x208>)
 8017d50:	f00d fbc8 	bl	80254e4 <iprintf>

  if (flags & MSG_DONTWAIT) {
 8017d54:	683b      	ldr	r3, [r7, #0]
 8017d56:	f003 0308 	and.w	r3, r3, #8
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d005      	beq.n	8017d6a <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 8017d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017d62:	f043 0304 	orr.w	r3, r3, #4
 8017d66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	685b      	ldr	r3, [r3, #4]
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d003      	beq.n	8017d7a <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	685b      	ldr	r3, [r3, #4]
 8017d76:	617b      	str	r3, [r7, #20]
 8017d78:	e036      	b.n	8017de8 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8017d82:	f107 0114 	add.w	r1, r7, #20
 8017d86:	4618      	mov	r0, r3
 8017d88:	f7fe f82a 	bl	8015de0 <netconn_recv_tcp_pbuf_flags>
 8017d8c:	4603      	mov	r3, r0
 8017d8e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 8017d92:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d019      	beq.n	8017dce <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 8017d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	f300 808d 	bgt.w	8017ebc <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 8017da2:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8017da6:	4618      	mov	r0, r3
 8017da8:	f7ff fd12 	bl	80177d0 <err_to_errno>
 8017dac:	61f8      	str	r0, [r7, #28]
 8017dae:	69fb      	ldr	r3, [r7, #28]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d002      	beq.n	8017dba <lwip_recv_tcp+0xbe>
 8017db4:	4a55      	ldr	r2, [pc, #340]	@ (8017f0c <lwip_recv_tcp+0x210>)
 8017db6:	69fb      	ldr	r3, [r7, #28]
 8017db8:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 8017dba:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8017dbe:	f113 0f0f 	cmn.w	r3, #15
 8017dc2:	d101      	bne.n	8017dc8 <lwip_recv_tcp+0xcc>
          return 0;
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	e094      	b.n	8017ef2 <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 8017dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8017dcc:	e091      	b.n	8017ef2 <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 8017dce:	697b      	ldr	r3, [r7, #20]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d106      	bne.n	8017de2 <lwip_recv_tcp+0xe6>
 8017dd4:	4b49      	ldr	r3, [pc, #292]	@ (8017efc <lwip_recv_tcp+0x200>)
 8017dd6:	f240 32c5 	movw	r2, #965	@ 0x3c5
 8017dda:	494d      	ldr	r1, [pc, #308]	@ (8017f10 <lwip_recv_tcp+0x214>)
 8017ddc:	4849      	ldr	r0, [pc, #292]	@ (8017f04 <lwip_recv_tcp+0x208>)
 8017dde:	f00d fb81 	bl	80254e4 <iprintf>
      sock->lastdata.pbuf = p;
 8017de2:	697a      	ldr	r2, [r7, #20]
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 8017de8:	697b      	ldr	r3, [r7, #20]
 8017dea:	891b      	ldrh	r3, [r3, #8]
 8017dec:	461a      	mov	r2, r3
 8017dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017df0:	4293      	cmp	r3, r2
 8017df2:	dd03      	ble.n	8017dfc <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 8017df4:	697b      	ldr	r3, [r7, #20]
 8017df6:	891b      	ldrh	r3, [r3, #8]
 8017df8:	847b      	strh	r3, [r7, #34]	@ 0x22
 8017dfa:	e001      	b.n	8017e00 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 8017dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dfe:	847b      	strh	r3, [r7, #34]	@ 0x22
    }
    if (recvd + copylen < recvd) {
 8017e00:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e04:	4413      	add	r3, r2
 8017e06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017e08:	429a      	cmp	r2, r3
 8017e0a:	dd03      	ble.n	8017e14 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 8017e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e0e:	b29b      	uxth	r3, r3
 8017e10:	43db      	mvns	r3, r3
 8017e12:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8017e14:	6978      	ldr	r0, [r7, #20]
 8017e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e18:	68ba      	ldr	r2, [r7, #8]
 8017e1a:	18d1      	adds	r1, r2, r3
 8017e1c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017e1e:	2300      	movs	r3, #0
 8017e20:	f002 fe18 	bl	801aa54 <pbuf_copy_partial>

    recvd += copylen;
 8017e24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017e26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017e28:	4413      	add	r3, r2
 8017e2a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8017e2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017e30:	429a      	cmp	r2, r3
 8017e32:	da06      	bge.n	8017e42 <lwip_recv_tcp+0x146>
 8017e34:	4b31      	ldr	r3, [pc, #196]	@ (8017efc <lwip_recv_tcp+0x200>)
 8017e36:	f240 32dd 	movw	r2, #989	@ 0x3dd
 8017e3a:	4936      	ldr	r1, [pc, #216]	@ (8017f14 <lwip_recv_tcp+0x218>)
 8017e3c:	4831      	ldr	r0, [pc, #196]	@ (8017f04 <lwip_recv_tcp+0x208>)
 8017e3e:	f00d fb51 	bl	80254e4 <iprintf>
    recv_left -= copylen;
 8017e42:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017e46:	1ad3      	subs	r3, r2, r3
 8017e48:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 8017e4a:	683b      	ldr	r3, [r7, #0]
 8017e4c:	f003 0301 	and.w	r3, r3, #1
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d123      	bne.n	8017e9c <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8017e54:	697b      	ldr	r3, [r7, #20]
 8017e56:	891b      	ldrh	r3, [r3, #8]
 8017e58:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017e5a:	429a      	cmp	r2, r3
 8017e5c:	d906      	bls.n	8017e6c <lwip_recv_tcp+0x170>
 8017e5e:	4b27      	ldr	r3, [pc, #156]	@ (8017efc <lwip_recv_tcp+0x200>)
 8017e60:	f240 32e3 	movw	r2, #995	@ 0x3e3
 8017e64:	492c      	ldr	r1, [pc, #176]	@ (8017f18 <lwip_recv_tcp+0x21c>)
 8017e66:	4827      	ldr	r0, [pc, #156]	@ (8017f04 <lwip_recv_tcp+0x208>)
 8017e68:	f00d fb3c 	bl	80254e4 <iprintf>
      if (p->tot_len - copylen > 0) {
 8017e6c:	697b      	ldr	r3, [r7, #20]
 8017e6e:	891b      	ldrh	r3, [r3, #8]
 8017e70:	461a      	mov	r2, r3
 8017e72:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017e74:	1ad3      	subs	r3, r2, r3
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	dd09      	ble.n	8017e8e <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8017e7a:	697b      	ldr	r3, [r7, #20]
 8017e7c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017e7e:	4611      	mov	r1, r2
 8017e80:	4618      	mov	r0, r3
 8017e82:	f002 fbae 	bl	801a5e2 <pbuf_free_header>
 8017e86:	4602      	mov	r2, r0
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	605a      	str	r2, [r3, #4]
 8017e8c:	e006      	b.n	8017e9c <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	2200      	movs	r2, #0
 8017e92:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 8017e94:	697b      	ldr	r3, [r7, #20]
 8017e96:	4618      	mov	r0, r3
 8017e98:	f002 fbd6 	bl	801a648 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8017e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017ea0:	f043 0314 	orr.w	r3, r3, #20
 8017ea4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8017ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	dd08      	ble.n	8017ec0 <lwip_recv_tcp+0x1c4>
 8017eae:	683b      	ldr	r3, [r7, #0]
 8017eb0:	f003 0301 	and.w	r3, r3, #1
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	f43f af58 	beq.w	8017d6a <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 8017eba:	e001      	b.n	8017ec0 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 8017ebc:	bf00      	nop
 8017ebe:	e000      	b.n	8017ec2 <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 8017ec0:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8017ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	dd0b      	ble.n	8017ee0 <lwip_recv_tcp+0x1e4>
 8017ec8:	683b      	ldr	r3, [r7, #0]
 8017eca:	f003 0301 	and.w	r3, r3, #1
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d106      	bne.n	8017ee0 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017ed8:	4611      	mov	r1, r2
 8017eda:	4618      	mov	r0, r3
 8017edc:	f7fd fece 	bl	8015c7c <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 8017ee0:	2300      	movs	r3, #0
 8017ee2:	61bb      	str	r3, [r7, #24]
 8017ee4:	69bb      	ldr	r3, [r7, #24]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d002      	beq.n	8017ef0 <lwip_recv_tcp+0x1f4>
 8017eea:	4a08      	ldr	r2, [pc, #32]	@ (8017f0c <lwip_recv_tcp+0x210>)
 8017eec:	69bb      	ldr	r3, [r7, #24]
 8017eee:	6013      	str	r3, [r2, #0]
  return recvd;
 8017ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	3730      	adds	r7, #48	@ 0x30
 8017ef6:	46bd      	mov	sp, r7
 8017ef8:	bd80      	pop	{r7, pc}
 8017efa:	bf00      	nop
 8017efc:	0802a0dc 	.word	0x0802a0dc
 8017f00:	0802a1d4 	.word	0x0802a1d4
 8017f04:	0802a130 	.word	0x0802a130
 8017f08:	0802a1e4 	.word	0x0802a1e4
 8017f0c:	2400bfc0 	.word	0x2400bfc0
 8017f10:	0802a208 	.word	0x0802a208
 8017f14:	0802a214 	.word	0x0802a214
 8017f18:	0802a23c 	.word	0x0802a23c

08017f1c <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 8017f1c:	b590      	push	{r4, r7, lr}
 8017f1e:	b08b      	sub	sp, #44	@ 0x2c
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	60f8      	str	r0, [r7, #12]
 8017f24:	60b9      	str	r1, [r7, #8]
 8017f26:	603b      	str	r3, [r7, #0]
 8017f28:	4613      	mov	r3, r2
 8017f2a:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 8017f2c:	2300      	movs	r3, #0
 8017f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 8017f30:	68bb      	ldr	r3, [r7, #8]
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d106      	bne.n	8017f44 <lwip_sock_make_addr+0x28>
 8017f36:	4b2b      	ldr	r3, [pc, #172]	@ (8017fe4 <lwip_sock_make_addr+0xc8>)
 8017f38:	f240 4207 	movw	r2, #1031	@ 0x407
 8017f3c:	492a      	ldr	r1, [pc, #168]	@ (8017fe8 <lwip_sock_make_addr+0xcc>)
 8017f3e:	482b      	ldr	r0, [pc, #172]	@ (8017fec <lwip_sock_make_addr+0xd0>)
 8017f40:	f00d fad0 	bl	80254e4 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 8017f44:	683b      	ldr	r3, [r7, #0]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d106      	bne.n	8017f58 <lwip_sock_make_addr+0x3c>
 8017f4a:	4b26      	ldr	r3, [pc, #152]	@ (8017fe4 <lwip_sock_make_addr+0xc8>)
 8017f4c:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 8017f50:	4927      	ldr	r1, [pc, #156]	@ (8017ff0 <lwip_sock_make_addr+0xd4>)
 8017f52:	4826      	ldr	r0, [pc, #152]	@ (8017fec <lwip_sock_make_addr+0xd0>)
 8017f54:	f00d fac6 	bl	80254e4 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8017f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d106      	bne.n	8017f6c <lwip_sock_make_addr+0x50>
 8017f5e:	4b21      	ldr	r3, [pc, #132]	@ (8017fe4 <lwip_sock_make_addr+0xc8>)
 8017f60:	f240 4209 	movw	r2, #1033	@ 0x409
 8017f64:	4923      	ldr	r1, [pc, #140]	@ (8017ff4 <lwip_sock_make_addr+0xd8>)
 8017f66:	4821      	ldr	r0, [pc, #132]	@ (8017fec <lwip_sock_make_addr+0xd0>)
 8017f68:	f00d fabc 	bl	80254e4 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8017f6c:	f107 0314 	add.w	r3, r7, #20
 8017f70:	2210      	movs	r2, #16
 8017f72:	701a      	strb	r2, [r3, #0]
 8017f74:	f107 0314 	add.w	r3, r7, #20
 8017f78:	2202      	movs	r2, #2
 8017f7a:	705a      	strb	r2, [r3, #1]
 8017f7c:	f107 0414 	add.w	r4, r7, #20
 8017f80:	88fb      	ldrh	r3, [r7, #6]
 8017f82:	4618      	mov	r0, r3
 8017f84:	f000 fe84 	bl	8018c90 <lwip_htons>
 8017f88:	4603      	mov	r3, r0
 8017f8a:	8063      	strh	r3, [r4, #2]
 8017f8c:	f107 0314 	add.w	r3, r7, #20
 8017f90:	68ba      	ldr	r2, [r7, #8]
 8017f92:	6812      	ldr	r2, [r2, #0]
 8017f94:	605a      	str	r2, [r3, #4]
 8017f96:	f107 0314 	add.w	r3, r7, #20
 8017f9a:	3308      	adds	r3, #8
 8017f9c:	2208      	movs	r2, #8
 8017f9e:	2100      	movs	r1, #0
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	f00d fb8b 	bl	80256bc <memset>
  if (*fromlen < saddr.sa.sa_len) {
 8017fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	7d3a      	ldrb	r2, [r7, #20]
 8017fac:	4293      	cmp	r3, r2
 8017fae:	d202      	bcs.n	8017fb6 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 8017fb0:	2301      	movs	r3, #1
 8017fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8017fb4:	e008      	b.n	8017fc8 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 8017fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	7d3a      	ldrb	r2, [r7, #20]
 8017fbc:	4293      	cmp	r3, r2
 8017fbe:	d903      	bls.n	8017fc8 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 8017fc0:	7d3b      	ldrb	r3, [r7, #20]
 8017fc2:	461a      	mov	r2, r3
 8017fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fc6:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 8017fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fca:	681a      	ldr	r2, [r3, #0]
 8017fcc:	f107 0314 	add.w	r3, r7, #20
 8017fd0:	4619      	mov	r1, r3
 8017fd2:	6838      	ldr	r0, [r7, #0]
 8017fd4:	f00d fc13 	bl	80257fe <memcpy>
  return truncated;
 8017fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017fda:	4618      	mov	r0, r3
 8017fdc:	372c      	adds	r7, #44	@ 0x2c
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	bd90      	pop	{r4, r7, pc}
 8017fe2:	bf00      	nop
 8017fe4:	0802a0dc 	.word	0x0802a0dc
 8017fe8:	0802a24c 	.word	0x0802a24c
 8017fec:	0802a130 	.word	0x0802a130
 8017ff0:	0802a260 	.word	0x0802a260
 8017ff4:	0802a270 	.word	0x0802a270

08017ff8 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 8017ff8:	b580      	push	{r7, lr}
 8017ffa:	b088      	sub	sp, #32
 8017ffc:	af02      	add	r7, sp, #8
 8017ffe:	60f8      	str	r0, [r7, #12]
 8018000:	60b9      	str	r1, [r7, #8]
 8018002:	607a      	str	r2, [r7, #4]
 8018004:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d101      	bne.n	8018010 <lwip_recv_tcp_from+0x18>
    return 0;
 801800c:	2300      	movs	r3, #0
 801800e:	e021      	b.n	8018054 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 8018010:	68bb      	ldr	r3, [r7, #8]
 8018012:	2b00      	cmp	r3, #0
 8018014:	d01d      	beq.n	8018052 <lwip_recv_tcp_from+0x5a>
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	2b00      	cmp	r3, #0
 801801a:	d01a      	beq.n	8018052 <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	6818      	ldr	r0, [r3, #0]
 8018020:	f107 0216 	add.w	r2, r7, #22
 8018024:	f107 0110 	add.w	r1, r7, #16
 8018028:	2300      	movs	r3, #0
 801802a:	f7fd fca5 	bl	8015978 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 801802e:	68bb      	ldr	r3, [r7, #8]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d00e      	beq.n	8018052 <lwip_recv_tcp_from+0x5a>
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d00b      	beq.n	8018052 <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	6818      	ldr	r0, [r3, #0]
 801803e:	8afa      	ldrh	r2, [r7, #22]
 8018040:	f107 0110 	add.w	r1, r7, #16
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	9300      	str	r3, [sp, #0]
 8018048:	68bb      	ldr	r3, [r7, #8]
 801804a:	f7ff ff67 	bl	8017f1c <lwip_sock_make_addr>
 801804e:	4603      	mov	r3, r0
 8018050:	e000      	b.n	8018054 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 8018052:	2300      	movs	r3, #0
}
 8018054:	4618      	mov	r0, r3
 8018056:	3718      	adds	r7, #24
 8018058:	46bd      	mov	sp, r7
 801805a:	bd80      	pop	{r7, pc}

0801805c <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 801805c:	b590      	push	{r4, r7, lr}
 801805e:	b08d      	sub	sp, #52	@ 0x34
 8018060:	af02      	add	r7, sp, #8
 8018062:	60f8      	str	r0, [r7, #12]
 8018064:	60b9      	str	r1, [r7, #8]
 8018066:	607a      	str	r2, [r7, #4]
 8018068:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	689b      	ldr	r3, [r3, #8]
 801806e:	2b00      	cmp	r3, #0
 8018070:	d10d      	bne.n	801808e <lwip_recvfrom_udp_raw+0x32>
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	68db      	ldr	r3, [r3, #12]
 8018076:	2b00      	cmp	r3, #0
 8018078:	dd09      	ble.n	801808e <lwip_recvfrom_udp_raw+0x32>
 801807a:	4b5e      	ldr	r3, [pc, #376]	@ (80181f4 <lwip_recvfrom_udp_raw+0x198>)
 801807c:	f240 4249 	movw	r2, #1097	@ 0x449
 8018080:	495d      	ldr	r1, [pc, #372]	@ (80181f8 <lwip_recvfrom_udp_raw+0x19c>)
 8018082:	485e      	ldr	r0, [pc, #376]	@ (80181fc <lwip_recvfrom_udp_raw+0x1a0>)
 8018084:	f00d fa2e 	bl	80254e4 <iprintf>
 8018088:	f06f 030f 	mvn.w	r3, #15
 801808c:	e0ad      	b.n	80181ea <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 801808e:	68bb      	ldr	r3, [r7, #8]
 8018090:	f003 0308 	and.w	r3, r3, #8
 8018094:	2b00      	cmp	r3, #0
 8018096:	d003      	beq.n	80180a0 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 8018098:	2304      	movs	r3, #4
 801809a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801809e:	e002      	b.n	80180a6 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 80180a0:	2300      	movs	r3, #0
 80180a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	685b      	ldr	r3, [r3, #4]
 80180aa:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 80180ac:	693b      	ldr	r3, [r7, #16]
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d11e      	bne.n	80180f0 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80180ba:	f107 0110 	add.w	r1, r7, #16
 80180be:	4618      	mov	r0, r3
 80180c0:	f7fd feba 	bl	8015e38 <netconn_recv_udp_raw_netbuf_flags>
 80180c4:	4603      	mov	r3, r0
 80180c6:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 80180c8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d002      	beq.n	80180d6 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 80180d0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80180d4:	e089      	b.n	80181ea <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80180d6:	693b      	ldr	r3, [r7, #16]
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d106      	bne.n	80180ea <lwip_recvfrom_udp_raw+0x8e>
 80180dc:	4b45      	ldr	r3, [pc, #276]	@ (80181f4 <lwip_recvfrom_udp_raw+0x198>)
 80180de:	f240 425e 	movw	r2, #1118	@ 0x45e
 80180e2:	4947      	ldr	r1, [pc, #284]	@ (8018200 <lwip_recvfrom_udp_raw+0x1a4>)
 80180e4:	4845      	ldr	r0, [pc, #276]	@ (80181fc <lwip_recvfrom_udp_raw+0x1a0>)
 80180e6:	f00d f9fd 	bl	80254e4 <iprintf>
    sock->lastdata.netbuf = buf;
 80180ea:	693a      	ldr	r2, [r7, #16]
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 80180f0:	693b      	ldr	r3, [r7, #16]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	891b      	ldrh	r3, [r3, #8]
 80180f6:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 80180f8:	2300      	movs	r3, #0
 80180fa:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 80180fc:	2300      	movs	r3, #0
 80180fe:	61fb      	str	r3, [r7, #28]
 8018100:	e029      	b.n	8018156 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 8018102:	8b3a      	ldrh	r2, [r7, #24]
 8018104:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018106:	1ad3      	subs	r3, r2, r3
 8018108:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	689a      	ldr	r2, [r3, #8]
 801810e:	69fb      	ldr	r3, [r7, #28]
 8018110:	00db      	lsls	r3, r3, #3
 8018112:	4413      	add	r3, r2
 8018114:	685a      	ldr	r2, [r3, #4]
 8018116:	8afb      	ldrh	r3, [r7, #22]
 8018118:	429a      	cmp	r2, r3
 801811a:	d902      	bls.n	8018122 <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 801811c:	8afb      	ldrh	r3, [r7, #22]
 801811e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8018120:	e006      	b.n	8018130 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	689a      	ldr	r2, [r3, #8]
 8018126:	69fb      	ldr	r3, [r7, #28]
 8018128:	00db      	lsls	r3, r3, #3
 801812a:	4413      	add	r3, r2
 801812c:	685b      	ldr	r3, [r3, #4]
 801812e:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8018130:	693b      	ldr	r3, [r7, #16]
 8018132:	6818      	ldr	r0, [r3, #0]
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	689a      	ldr	r2, [r3, #8]
 8018138:	69fb      	ldr	r3, [r7, #28]
 801813a:	00db      	lsls	r3, r3, #3
 801813c:	4413      	add	r3, r2
 801813e:	6819      	ldr	r1, [r3, #0]
 8018140:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018142:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018144:	f002 fc86 	bl	801aa54 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 8018148:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801814a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801814c:	4413      	add	r3, r2
 801814e:	847b      	strh	r3, [r7, #34]	@ 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8018150:	69fb      	ldr	r3, [r7, #28]
 8018152:	3301      	adds	r3, #1
 8018154:	61fb      	str	r3, [r7, #28]
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	68db      	ldr	r3, [r3, #12]
 801815a:	69fa      	ldr	r2, [r7, #28]
 801815c:	429a      	cmp	r2, r3
 801815e:	da03      	bge.n	8018168 <lwip_recvfrom_udp_raw+0x10c>
 8018160:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018162:	8b3b      	ldrh	r3, [r7, #24]
 8018164:	429a      	cmp	r2, r3
 8018166:	d3cc      	bcc.n	8018102 <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	2b00      	cmp	r3, #0
 801816e:	d01a      	beq.n	80181a6 <lwip_recvfrom_udp_raw+0x14a>
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	685b      	ldr	r3, [r3, #4]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d016      	beq.n	80181a6 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d012      	beq.n	80181a6 <lwip_recvfrom_udp_raw+0x14a>
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	685b      	ldr	r3, [r3, #4]
 8018184:	2b00      	cmp	r3, #0
 8018186:	d00e      	beq.n	80181a6 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	6818      	ldr	r0, [r3, #0]
 801818c:	693b      	ldr	r3, [r7, #16]
 801818e:	f103 0108 	add.w	r1, r3, #8
 8018192:	693b      	ldr	r3, [r7, #16]
 8018194:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	3304      	adds	r3, #4
 801819e:	9300      	str	r3, [sp, #0]
 80181a0:	4623      	mov	r3, r4
 80181a2:	f7ff febb 	bl	8017f1c <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	2200      	movs	r2, #0
 80181aa:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	691b      	ldr	r3, [r3, #16]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d007      	beq.n	80181c4 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 80181b4:	2300      	movs	r3, #0
 80181b6:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 80181b8:	7d7b      	ldrb	r3, [r7, #21]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d102      	bne.n	80181c4 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	2200      	movs	r2, #0
 80181c2:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 80181c4:	68bb      	ldr	r3, [r7, #8]
 80181c6:	f003 0301 	and.w	r3, r3, #1
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d106      	bne.n	80181dc <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	2200      	movs	r2, #0
 80181d2:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 80181d4:	693b      	ldr	r3, [r7, #16]
 80181d6:	4618      	mov	r0, r3
 80181d8:	f7ff fb18 	bl	801780c <netbuf_delete>
  }
  if (datagram_len) {
 80181dc:	683b      	ldr	r3, [r7, #0]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d002      	beq.n	80181e8 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 80181e2:	683b      	ldr	r3, [r7, #0]
 80181e4:	8b3a      	ldrh	r2, [r7, #24]
 80181e6:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 80181e8:	2300      	movs	r3, #0
}
 80181ea:	4618      	mov	r0, r3
 80181ec:	372c      	adds	r7, #44	@ 0x2c
 80181ee:	46bd      	mov	sp, r7
 80181f0:	bd90      	pop	{r4, r7, pc}
 80181f2:	bf00      	nop
 80181f4:	0802a0dc 	.word	0x0802a0dc
 80181f8:	0802a280 	.word	0x0802a280
 80181fc:	0802a130 	.word	0x0802a130
 8018200:	0802a2ac 	.word	0x0802a2ac

08018204 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 8018204:	b580      	push	{r7, lr}
 8018206:	b096      	sub	sp, #88	@ 0x58
 8018208:	af02      	add	r7, sp, #8
 801820a:	60f8      	str	r0, [r7, #12]
 801820c:	60b9      	str	r1, [r7, #8]
 801820e:	607a      	str	r2, [r7, #4]
 8018210:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 8018212:	68f8      	ldr	r0, [r7, #12]
 8018214:	f7ff fbca 	bl	80179ac <get_socket>
 8018218:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (!sock) {
 801821a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801821c:	2b00      	cmp	r3, #0
 801821e:	d102      	bne.n	8018226 <lwip_recvfrom+0x22>
    return -1;
 8018220:	f04f 33ff 	mov.w	r3, #4294967295
 8018224:	e078      	b.n	8018318 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8018226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	781b      	ldrb	r3, [r3, #0]
 801822c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018230:	2b10      	cmp	r3, #16
 8018232:	d112      	bne.n	801825a <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 8018234:	683b      	ldr	r3, [r7, #0]
 8018236:	687a      	ldr	r2, [r7, #4]
 8018238:	68b9      	ldr	r1, [r7, #8]
 801823a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801823c:	f7ff fd5e 	bl	8017cfc <lwip_recv_tcp>
 8018240:	6478      	str	r0, [r7, #68]	@ 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 8018242:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018244:	9301      	str	r3, [sp, #4]
 8018246:	68fb      	ldr	r3, [r7, #12]
 8018248:	9300      	str	r3, [sp, #0]
 801824a:	4b35      	ldr	r3, [pc, #212]	@ (8018320 <lwip_recvfrom+0x11c>)
 801824c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801824e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8018250:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8018252:	f7ff fed1 	bl	8017ff8 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 8018256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018258:	e05e      	b.n	8018318 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 801825a:	2300      	movs	r3, #0
 801825c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 801825e:	68bb      	ldr	r3, [r7, #8]
 8018260:	633b      	str	r3, [r7, #48]	@ 0x30
    vec.iov_len = len;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	637b      	str	r3, [r7, #52]	@ 0x34
    msg.msg_control = NULL;
 8018266:	2300      	movs	r3, #0
 8018268:	627b      	str	r3, [r7, #36]	@ 0x24
    msg.msg_controllen = 0;
 801826a:	2300      	movs	r3, #0
 801826c:	62bb      	str	r3, [r7, #40]	@ 0x28
    msg.msg_flags = 0;
 801826e:	2300      	movs	r3, #0
 8018270:	62fb      	str	r3, [r7, #44]	@ 0x2c
    msg.msg_iov = &vec;
 8018272:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8018276:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 8018278:	2301      	movs	r3, #1
 801827a:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 801827c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801827e:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 8018280:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018282:	2b00      	cmp	r3, #0
 8018284:	d002      	beq.n	801828c <lwip_recvfrom+0x88>
 8018286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	e000      	b.n	801828e <lwip_recvfrom+0x8a>
 801828c:	2300      	movs	r3, #0
 801828e:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 8018290:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 8018294:	f107 0214 	add.w	r2, r7, #20
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	9300      	str	r3, [sp, #0]
 801829c:	460b      	mov	r3, r1
 801829e:	6839      	ldr	r1, [r7, #0]
 80182a0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80182a2:	f7ff fedb 	bl	801805c <lwip_recvfrom_udp_raw>
 80182a6:	4603      	mov	r3, r0
 80182a8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    if (err != ERR_OK) {
 80182ac:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d00e      	beq.n	80182d2 <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 80182b4:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 80182b8:	4618      	mov	r0, r3
 80182ba:	f7ff fa89 	bl	80177d0 <err_to_errno>
 80182be:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80182c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d002      	beq.n	80182cc <lwip_recvfrom+0xc8>
 80182c6:	4a17      	ldr	r2, [pc, #92]	@ (8018324 <lwip_recvfrom+0x120>)
 80182c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182ca:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 80182cc:	f04f 33ff 	mov.w	r3, #4294967295
 80182d0:	e022      	b.n	8018318 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 80182d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80182d4:	461a      	mov	r2, r3
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	4293      	cmp	r3, r2
 80182da:	bf28      	it	cs
 80182dc:	4613      	movcs	r3, r2
 80182de:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80182e2:	4293      	cmp	r3, r2
 80182e4:	d206      	bcs.n	80182f4 <lwip_recvfrom+0xf0>
 80182e6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80182e8:	461a      	mov	r2, r3
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	4293      	cmp	r3, r2
 80182ee:	bf28      	it	cs
 80182f0:	4613      	movcs	r3, r2
 80182f2:	e001      	b.n	80182f8 <lwip_recvfrom+0xf4>
 80182f4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80182f8:	647b      	str	r3, [r7, #68]	@ 0x44
    if (fromlen) {
 80182fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d002      	beq.n	8018306 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 8018300:	69ba      	ldr	r2, [r7, #24]
 8018302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018304:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 8018306:	2300      	movs	r3, #0
 8018308:	643b      	str	r3, [r7, #64]	@ 0x40
 801830a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801830c:	2b00      	cmp	r3, #0
 801830e:	d002      	beq.n	8018316 <lwip_recvfrom+0x112>
 8018310:	4a04      	ldr	r2, [pc, #16]	@ (8018324 <lwip_recvfrom+0x120>)
 8018312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018314:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 8018316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8018318:	4618      	mov	r0, r3
 801831a:	3750      	adds	r7, #80	@ 0x50
 801831c:	46bd      	mov	sp, r7
 801831e:	bd80      	pop	{r7, pc}
 8018320:	0802a2b8 	.word	0x0802a2b8
 8018324:	2400bfc0 	.word	0x2400bfc0

08018328 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 8018328:	b580      	push	{r7, lr}
 801832a:	b08a      	sub	sp, #40	@ 0x28
 801832c:	af02      	add	r7, sp, #8
 801832e:	60f8      	str	r0, [r7, #12]
 8018330:	60b9      	str	r1, [r7, #8]
 8018332:	607a      	str	r2, [r7, #4]
 8018334:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 8018336:	68f8      	ldr	r0, [r7, #12]
 8018338:	f7ff fb38 	bl	80179ac <get_socket>
 801833c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 801833e:	69fb      	ldr	r3, [r7, #28]
 8018340:	2b00      	cmp	r3, #0
 8018342:	d102      	bne.n	801834a <lwip_send+0x22>
    return -1;
 8018344:	f04f 33ff 	mov.w	r3, #4294967295
 8018348:	e046      	b.n	80183d8 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 801834a:	69fb      	ldr	r3, [r7, #28]
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	781b      	ldrb	r3, [r3, #0]
 8018350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018354:	2b10      	cmp	r3, #16
 8018356:	d00b      	beq.n	8018370 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8018358:	2300      	movs	r3, #0
 801835a:	9301      	str	r3, [sp, #4]
 801835c:	2300      	movs	r3, #0
 801835e:	9300      	str	r3, [sp, #0]
 8018360:	683b      	ldr	r3, [r7, #0]
 8018362:	687a      	ldr	r2, [r7, #4]
 8018364:	68b9      	ldr	r1, [r7, #8]
 8018366:	68f8      	ldr	r0, [r7, #12]
 8018368:	f000 f83c 	bl	80183e4 <lwip_sendto>
 801836c:	4603      	mov	r3, r0
 801836e:	e033      	b.n	80183d8 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8018370:	683b      	ldr	r3, [r7, #0]
 8018372:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 8018376:	2b00      	cmp	r3, #0
 8018378:	d001      	beq.n	801837e <lwip_send+0x56>
 801837a:	2203      	movs	r2, #3
 801837c:	e000      	b.n	8018380 <lwip_send+0x58>
 801837e:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8018380:	683b      	ldr	r3, [r7, #0]
 8018382:	105b      	asrs	r3, r3, #1
 8018384:	b25b      	sxtb	r3, r3
 8018386:	f003 0304 	and.w	r3, r3, #4
 801838a:	b25b      	sxtb	r3, r3
 801838c:	4313      	orrs	r3, r2
 801838e:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 8018390:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 8018392:	2300      	movs	r3, #0
 8018394:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8018396:	69fb      	ldr	r3, [r7, #28]
 8018398:	6818      	ldr	r0, [r3, #0]
 801839a:	7efa      	ldrb	r2, [r7, #27]
 801839c:	f107 0310 	add.w	r3, r7, #16
 80183a0:	9300      	str	r3, [sp, #0]
 80183a2:	4613      	mov	r3, r2
 80183a4:	687a      	ldr	r2, [r7, #4]
 80183a6:	68b9      	ldr	r1, [r7, #8]
 80183a8:	f7fd fda0 	bl	8015eec <netconn_write_partly>
 80183ac:	4603      	mov	r3, r0
 80183ae:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 80183b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80183b4:	4618      	mov	r0, r3
 80183b6:	f7ff fa0b 	bl	80177d0 <err_to_errno>
 80183ba:	6178      	str	r0, [r7, #20]
 80183bc:	697b      	ldr	r3, [r7, #20]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d002      	beq.n	80183c8 <lwip_send+0xa0>
 80183c2:	4a07      	ldr	r2, [pc, #28]	@ (80183e0 <lwip_send+0xb8>)
 80183c4:	697b      	ldr	r3, [r7, #20]
 80183c6:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 80183c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d101      	bne.n	80183d4 <lwip_send+0xac>
 80183d0:	693b      	ldr	r3, [r7, #16]
 80183d2:	e001      	b.n	80183d8 <lwip_send+0xb0>
 80183d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80183d8:	4618      	mov	r0, r3
 80183da:	3720      	adds	r7, #32
 80183dc:	46bd      	mov	sp, r7
 80183de:	bd80      	pop	{r7, pc}
 80183e0:	2400bfc0 	.word	0x2400bfc0

080183e4 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 80183e4:	b580      	push	{r7, lr}
 80183e6:	b08e      	sub	sp, #56	@ 0x38
 80183e8:	af00      	add	r7, sp, #0
 80183ea:	60f8      	str	r0, [r7, #12]
 80183ec:	60b9      	str	r1, [r7, #8]
 80183ee:	607a      	str	r2, [r7, #4]
 80183f0:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 80183f2:	68f8      	ldr	r0, [r7, #12]
 80183f4:	f7ff fada 	bl	80179ac <get_socket>
 80183f8:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 80183fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d102      	bne.n	8018406 <lwip_sendto+0x22>
    return -1;
 8018400:	f04f 33ff 	mov.w	r3, #4294967295
 8018404:	e093      	b.n	801852e <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8018406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	781b      	ldrb	r3, [r3, #0]
 801840c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018410:	2b10      	cmp	r3, #16
 8018412:	d107      	bne.n	8018424 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 8018414:	683b      	ldr	r3, [r7, #0]
 8018416:	687a      	ldr	r2, [r7, #4]
 8018418:	68b9      	ldr	r1, [r7, #8]
 801841a:	68f8      	ldr	r0, [r7, #12]
 801841c:	f7ff ff84 	bl	8018328 <lwip_send>
 8018420:	4603      	mov	r3, r0
 8018422:	e084      	b.n	801852e <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801842a:	d30a      	bcc.n	8018442 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 801842c:	235a      	movs	r3, #90	@ 0x5a
 801842e:	623b      	str	r3, [r7, #32]
 8018430:	6a3b      	ldr	r3, [r7, #32]
 8018432:	2b00      	cmp	r3, #0
 8018434:	d002      	beq.n	801843c <lwip_sendto+0x58>
 8018436:	4a40      	ldr	r2, [pc, #256]	@ (8018538 <lwip_sendto+0x154>)
 8018438:	6a3b      	ldr	r3, [r7, #32]
 801843a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 801843c:	f04f 33ff 	mov.w	r3, #4294967295
 8018440:	e075      	b.n	801852e <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8018446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018448:	2b00      	cmp	r3, #0
 801844a:	d102      	bne.n	8018452 <lwip_sendto+0x6e>
 801844c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801844e:	2b00      	cmp	r3, #0
 8018450:	d023      	beq.n	801849a <lwip_sendto+0xb6>
 8018452:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018454:	2b10      	cmp	r3, #16
 8018456:	d10b      	bne.n	8018470 <lwip_sendto+0x8c>
 8018458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801845a:	2b00      	cmp	r3, #0
 801845c:	d008      	beq.n	8018470 <lwip_sendto+0x8c>
 801845e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018460:	785b      	ldrb	r3, [r3, #1]
 8018462:	2b02      	cmp	r3, #2
 8018464:	d104      	bne.n	8018470 <lwip_sendto+0x8c>
 8018466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018468:	f003 0303 	and.w	r3, r3, #3
 801846c:	2b00      	cmp	r3, #0
 801846e:	d014      	beq.n	801849a <lwip_sendto+0xb6>
 8018470:	4b32      	ldr	r3, [pc, #200]	@ (801853c <lwip_sendto+0x158>)
 8018472:	f240 6252 	movw	r2, #1618	@ 0x652
 8018476:	4932      	ldr	r1, [pc, #200]	@ (8018540 <lwip_sendto+0x15c>)
 8018478:	4832      	ldr	r0, [pc, #200]	@ (8018544 <lwip_sendto+0x160>)
 801847a:	f00d f833 	bl	80254e4 <iprintf>
 801847e:	f06f 000f 	mvn.w	r0, #15
 8018482:	f7ff f9a5 	bl	80177d0 <err_to_errno>
 8018486:	62b8      	str	r0, [r7, #40]	@ 0x28
 8018488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801848a:	2b00      	cmp	r3, #0
 801848c:	d002      	beq.n	8018494 <lwip_sendto+0xb0>
 801848e:	4a2a      	ldr	r2, [pc, #168]	@ (8018538 <lwip_sendto+0x154>)
 8018490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018492:	6013      	str	r3, [r2, #0]
 8018494:	f04f 33ff 	mov.w	r3, #4294967295
 8018498:	e049      	b.n	801852e <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 801849a:	2300      	movs	r3, #0
 801849c:	617b      	str	r3, [r7, #20]
 801849e:	697b      	ldr	r3, [r7, #20]
 80184a0:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 80184a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d00a      	beq.n	80184be <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 80184a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80184aa:	685b      	ldr	r3, [r3, #4]
 80184ac:	61bb      	str	r3, [r7, #24]
 80184ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80184b0:	885b      	ldrh	r3, [r3, #2]
 80184b2:	4618      	mov	r0, r3
 80184b4:	f000 fbec 	bl	8018c90 <lwip_htons>
 80184b8:	4603      	mov	r3, r0
 80184ba:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80184bc:	e003      	b.n	80184c6 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 80184be:	2300      	movs	r3, #0
 80184c0:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 80184c2:	2300      	movs	r3, #0
 80184c4:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 80184c6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80184c8:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 80184ca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80184cc:	f107 0310 	add.w	r3, r7, #16
 80184d0:	68b9      	ldr	r1, [r7, #8]
 80184d2:	4618      	mov	r0, r3
 80184d4:	f7ff f9e2 	bl	801789c <netbuf_ref>
 80184d8:	4603      	mov	r3, r0
 80184da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 80184de:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d10a      	bne.n	80184fc <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 80184e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	f107 0210 	add.w	r2, r7, #16
 80184ee:	4611      	mov	r1, r2
 80184f0:	4618      	mov	r0, r3
 80184f2:	f7fd fccd 	bl	8015e90 <netconn_send>
 80184f6:	4603      	mov	r3, r0
 80184f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 80184fc:	f107 0310 	add.w	r3, r7, #16
 8018500:	4618      	mov	r0, r3
 8018502:	f7ff f9a3 	bl	801784c <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8018506:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801850a:	4618      	mov	r0, r3
 801850c:	f7ff f960 	bl	80177d0 <err_to_errno>
 8018510:	6278      	str	r0, [r7, #36]	@ 0x24
 8018512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018514:	2b00      	cmp	r3, #0
 8018516:	d002      	beq.n	801851e <lwip_sendto+0x13a>
 8018518:	4a07      	ldr	r2, [pc, #28]	@ (8018538 <lwip_sendto+0x154>)
 801851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801851c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 801851e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8018522:	2b00      	cmp	r3, #0
 8018524:	d101      	bne.n	801852a <lwip_sendto+0x146>
 8018526:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018528:	e001      	b.n	801852e <lwip_sendto+0x14a>
 801852a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801852e:	4618      	mov	r0, r3
 8018530:	3738      	adds	r7, #56	@ 0x38
 8018532:	46bd      	mov	sp, r7
 8018534:	bd80      	pop	{r7, pc}
 8018536:	bf00      	nop
 8018538:	2400bfc0 	.word	0x2400bfc0
 801853c:	0802a0dc 	.word	0x0802a0dc
 8018540:	0802a3bc 	.word	0x0802a3bc
 8018544:	0802a130 	.word	0x0802a130

08018548 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 8018548:	b580      	push	{r7, lr}
 801854a:	b086      	sub	sp, #24
 801854c:	af00      	add	r7, sp, #0
 801854e:	60f8      	str	r0, [r7, #12]
 8018550:	60b9      	str	r1, [r7, #8]
 8018552:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 8018554:	68bb      	ldr	r3, [r7, #8]
 8018556:	2b03      	cmp	r3, #3
 8018558:	d009      	beq.n	801856e <lwip_socket+0x26>
 801855a:	68bb      	ldr	r3, [r7, #8]
 801855c:	2b03      	cmp	r3, #3
 801855e:	dc23      	bgt.n	80185a8 <lwip_socket+0x60>
 8018560:	68bb      	ldr	r3, [r7, #8]
 8018562:	2b01      	cmp	r3, #1
 8018564:	d019      	beq.n	801859a <lwip_socket+0x52>
 8018566:	68bb      	ldr	r3, [r7, #8]
 8018568:	2b02      	cmp	r3, #2
 801856a:	d009      	beq.n	8018580 <lwip_socket+0x38>
 801856c:	e01c      	b.n	80185a8 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	b2db      	uxtb	r3, r3
 8018572:	4a22      	ldr	r2, [pc, #136]	@ (80185fc <lwip_socket+0xb4>)
 8018574:	4619      	mov	r1, r3
 8018576:	2040      	movs	r0, #64	@ 0x40
 8018578:	f7fd f944 	bl	8015804 <netconn_new_with_proto_and_callback>
 801857c:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 801857e:	e019      	b.n	80185b4 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	2b88      	cmp	r3, #136	@ 0x88
 8018584:	d101      	bne.n	801858a <lwip_socket+0x42>
 8018586:	2321      	movs	r3, #33	@ 0x21
 8018588:	e000      	b.n	801858c <lwip_socket+0x44>
 801858a:	2320      	movs	r3, #32
 801858c:	4a1b      	ldr	r2, [pc, #108]	@ (80185fc <lwip_socket+0xb4>)
 801858e:	2100      	movs	r1, #0
 8018590:	4618      	mov	r0, r3
 8018592:	f7fd f937 	bl	8015804 <netconn_new_with_proto_and_callback>
 8018596:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8018598:	e00c      	b.n	80185b4 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 801859a:	4a18      	ldr	r2, [pc, #96]	@ (80185fc <lwip_socket+0xb4>)
 801859c:	2100      	movs	r1, #0
 801859e:	2010      	movs	r0, #16
 80185a0:	f7fd f930 	bl	8015804 <netconn_new_with_proto_and_callback>
 80185a4:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 80185a6:	e005      	b.n	80185b4 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 80185a8:	4b15      	ldr	r3, [pc, #84]	@ (8018600 <lwip_socket+0xb8>)
 80185aa:	2216      	movs	r2, #22
 80185ac:	601a      	str	r2, [r3, #0]
      return -1;
 80185ae:	f04f 33ff 	mov.w	r3, #4294967295
 80185b2:	e01e      	b.n	80185f2 <lwip_socket+0xaa>
  }

  if (!conn) {
 80185b4:	697b      	ldr	r3, [r7, #20]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d105      	bne.n	80185c6 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 80185ba:	4b11      	ldr	r3, [pc, #68]	@ (8018600 <lwip_socket+0xb8>)
 80185bc:	2269      	movs	r2, #105	@ 0x69
 80185be:	601a      	str	r2, [r3, #0]
    return -1;
 80185c0:	f04f 33ff 	mov.w	r3, #4294967295
 80185c4:	e015      	b.n	80185f2 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 80185c6:	2100      	movs	r1, #0
 80185c8:	6978      	ldr	r0, [r7, #20]
 80185ca:	f7ff fa07 	bl	80179dc <alloc_socket>
 80185ce:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 80185d0:	693b      	ldr	r3, [r7, #16]
 80185d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80185d6:	d108      	bne.n	80185ea <lwip_socket+0xa2>
    netconn_delete(conn);
 80185d8:	6978      	ldr	r0, [r7, #20]
 80185da:	f7fd f9b1 	bl	8015940 <netconn_delete>
    set_errno(ENFILE);
 80185de:	4b08      	ldr	r3, [pc, #32]	@ (8018600 <lwip_socket+0xb8>)
 80185e0:	2217      	movs	r2, #23
 80185e2:	601a      	str	r2, [r3, #0]
    return -1;
 80185e4:	f04f 33ff 	mov.w	r3, #4294967295
 80185e8:	e003      	b.n	80185f2 <lwip_socket+0xaa>
  }
  conn->socket = i;
 80185ea:	697b      	ldr	r3, [r7, #20]
 80185ec:	693a      	ldr	r2, [r7, #16]
 80185ee:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 80185f0:	693b      	ldr	r3, [r7, #16]
}
 80185f2:	4618      	mov	r0, r3
 80185f4:	3718      	adds	r7, #24
 80185f6:	46bd      	mov	sp, r7
 80185f8:	bd80      	pop	{r7, pc}
 80185fa:	bf00      	nop
 80185fc:	0801868d 	.word	0x0801868d
 8018600:	2400bfc0 	.word	0x2400bfc0

08018604 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 8018604:	b480      	push	{r7}
 8018606:	b087      	sub	sp, #28
 8018608:	af00      	add	r7, sp, #0
 801860a:	60f8      	str	r0, [r7, #12]
 801860c:	60b9      	str	r1, [r7, #8]
 801860e:	607a      	str	r2, [r7, #4]
 8018610:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8018612:	2300      	movs	r3, #0
 8018614:	617b      	str	r3, [r7, #20]
 8018616:	e02c      	b.n	8018672 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	695a      	ldr	r2, [r3, #20]
 801861c:	697b      	ldr	r3, [r7, #20]
 801861e:	00db      	lsls	r3, r3, #3
 8018620:	4413      	add	r3, r2
 8018622:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 8018624:	693b      	ldr	r3, [r7, #16]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	68ba      	ldr	r2, [r7, #8]
 801862a:	429a      	cmp	r2, r3
 801862c:	d11e      	bne.n	801866c <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d009      	beq.n	8018648 <lwip_poll_should_wake+0x44>
 8018634:	693b      	ldr	r3, [r7, #16]
 8018636:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801863a:	b29b      	uxth	r3, r3
 801863c:	f003 0301 	and.w	r3, r3, #1
 8018640:	2b00      	cmp	r3, #0
 8018642:	d001      	beq.n	8018648 <lwip_poll_should_wake+0x44>
        return 1;
 8018644:	2301      	movs	r3, #1
 8018646:	e01a      	b.n	801867e <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8018648:	683b      	ldr	r3, [r7, #0]
 801864a:	2b00      	cmp	r3, #0
 801864c:	d009      	beq.n	8018662 <lwip_poll_should_wake+0x5e>
 801864e:	693b      	ldr	r3, [r7, #16]
 8018650:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018654:	b29b      	uxth	r3, r3
 8018656:	f003 0302 	and.w	r3, r3, #2
 801865a:	2b00      	cmp	r3, #0
 801865c:	d001      	beq.n	8018662 <lwip_poll_should_wake+0x5e>
        return 1;
 801865e:	2301      	movs	r3, #1
 8018660:	e00d      	b.n	801867e <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 8018662:	6a3b      	ldr	r3, [r7, #32]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d001      	beq.n	801866c <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 8018668:	2301      	movs	r3, #1
 801866a:	e008      	b.n	801867e <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 801866c:	697b      	ldr	r3, [r7, #20]
 801866e:	3301      	adds	r3, #1
 8018670:	617b      	str	r3, [r7, #20]
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	699b      	ldr	r3, [r3, #24]
 8018676:	697a      	ldr	r2, [r7, #20]
 8018678:	429a      	cmp	r2, r3
 801867a:	d3cd      	bcc.n	8018618 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 801867c:	2300      	movs	r3, #0
}
 801867e:	4618      	mov	r0, r3
 8018680:	371c      	adds	r7, #28
 8018682:	46bd      	mov	sp, r7
 8018684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018688:	4770      	bx	lr
	...

0801868c <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 801868c:	b580      	push	{r7, lr}
 801868e:	b08a      	sub	sp, #40	@ 0x28
 8018690:	af00      	add	r7, sp, #0
 8018692:	6078      	str	r0, [r7, #4]
 8018694:	460b      	mov	r3, r1
 8018696:	70fb      	strb	r3, [r7, #3]
 8018698:	4613      	mov	r3, r2
 801869a:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	f000 80a4 	beq.w	80187ec <event_callback+0x160>
    s = conn->socket;
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	699b      	ldr	r3, [r3, #24]
 80186a8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 80186aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	da18      	bge.n	80186e2 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 80186b0:	f00b fe7e 	bl	80243b0 <sys_arch_protect>
 80186b4:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	699b      	ldr	r3, [r3, #24]
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	da0b      	bge.n	80186d6 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 80186be:	78fb      	ldrb	r3, [r7, #3]
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d104      	bne.n	80186ce <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	699b      	ldr	r3, [r3, #24]
 80186c8:	1e5a      	subs	r2, r3, #1
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 80186ce:	69f8      	ldr	r0, [r7, #28]
 80186d0:	f00b fe7c 	bl	80243cc <sys_arch_unprotect>
        return;
 80186d4:	e08d      	b.n	80187f2 <event_callback+0x166>
      }
      s = conn->socket;
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	699b      	ldr	r3, [r3, #24]
 80186da:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 80186dc:	69f8      	ldr	r0, [r7, #28]
 80186de:	f00b fe75 	bl	80243cc <sys_arch_unprotect>
    }

    sock = get_socket(s);
 80186e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80186e4:	f7ff f962 	bl	80179ac <get_socket>
 80186e8:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 80186ea:	69bb      	ldr	r3, [r7, #24]
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d07f      	beq.n	80187f0 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 80186f0:	2301      	movs	r3, #1
 80186f2:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 80186f4:	f00b fe5c 	bl	80243b0 <sys_arch_protect>
 80186f8:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 80186fa:	78fb      	ldrb	r3, [r7, #3]
 80186fc:	2b04      	cmp	r3, #4
 80186fe:	d83e      	bhi.n	801877e <event_callback+0xf2>
 8018700:	a201      	add	r2, pc, #4	@ (adr r2, 8018708 <event_callback+0x7c>)
 8018702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018706:	bf00      	nop
 8018708:	0801871d 	.word	0x0801871d
 801870c:	0801873f 	.word	0x0801873f
 8018710:	08018757 	.word	0x08018757
 8018714:	0801876b 	.word	0x0801876b
 8018718:	08018777 	.word	0x08018777
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 801871c:	69bb      	ldr	r3, [r7, #24]
 801871e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018722:	b29b      	uxth	r3, r3
 8018724:	3301      	adds	r3, #1
 8018726:	b29b      	uxth	r3, r3
 8018728:	b21a      	sxth	r2, r3
 801872a:	69bb      	ldr	r3, [r7, #24]
 801872c:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 801872e:	69bb      	ldr	r3, [r7, #24]
 8018730:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018734:	2b01      	cmp	r3, #1
 8018736:	dd2a      	ble.n	801878e <event_callback+0x102>
        check_waiters = 0;
 8018738:	2300      	movs	r3, #0
 801873a:	623b      	str	r3, [r7, #32]
      }
      break;
 801873c:	e027      	b.n	801878e <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 801873e:	69bb      	ldr	r3, [r7, #24]
 8018740:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018744:	b29b      	uxth	r3, r3
 8018746:	3b01      	subs	r3, #1
 8018748:	b29b      	uxth	r3, r3
 801874a:	b21a      	sxth	r2, r3
 801874c:	69bb      	ldr	r3, [r7, #24]
 801874e:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 8018750:	2300      	movs	r3, #0
 8018752:	623b      	str	r3, [r7, #32]
      break;
 8018754:	e01c      	b.n	8018790 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 8018756:	69bb      	ldr	r3, [r7, #24]
 8018758:	895b      	ldrh	r3, [r3, #10]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d001      	beq.n	8018762 <event_callback+0xd6>
        check_waiters = 0;
 801875e:	2300      	movs	r3, #0
 8018760:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 8018762:	69bb      	ldr	r3, [r7, #24]
 8018764:	2201      	movs	r2, #1
 8018766:	815a      	strh	r2, [r3, #10]
      break;
 8018768:	e012      	b.n	8018790 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 801876a:	69bb      	ldr	r3, [r7, #24]
 801876c:	2200      	movs	r2, #0
 801876e:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 8018770:	2300      	movs	r3, #0
 8018772:	623b      	str	r3, [r7, #32]
      break;
 8018774:	e00c      	b.n	8018790 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8018776:	69bb      	ldr	r3, [r7, #24]
 8018778:	2201      	movs	r2, #1
 801877a:	819a      	strh	r2, [r3, #12]
      break;
 801877c:	e008      	b.n	8018790 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 801877e:	4b1e      	ldr	r3, [pc, #120]	@ (80187f8 <event_callback+0x16c>)
 8018780:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 8018784:	491d      	ldr	r1, [pc, #116]	@ (80187fc <event_callback+0x170>)
 8018786:	481e      	ldr	r0, [pc, #120]	@ (8018800 <event_callback+0x174>)
 8018788:	f00c feac 	bl	80254e4 <iprintf>
      break;
 801878c:	e000      	b.n	8018790 <event_callback+0x104>
      break;
 801878e:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8018790:	69bb      	ldr	r3, [r7, #24]
 8018792:	7b9b      	ldrb	r3, [r3, #14]
 8018794:	2b00      	cmp	r3, #0
 8018796:	d025      	beq.n	80187e4 <event_callback+0x158>
 8018798:	6a3b      	ldr	r3, [r7, #32]
 801879a:	2b00      	cmp	r3, #0
 801879c:	d022      	beq.n	80187e4 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 801879e:	69bb      	ldr	r3, [r7, #24]
 80187a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	bfcc      	ite	gt
 80187a8:	2301      	movgt	r3, #1
 80187aa:	2300      	movle	r3, #0
 80187ac:	b2db      	uxtb	r3, r3
 80187ae:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 80187b0:	69bb      	ldr	r3, [r7, #24]
 80187b2:	895b      	ldrh	r3, [r3, #10]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	bf14      	ite	ne
 80187b8:	2301      	movne	r3, #1
 80187ba:	2300      	moveq	r3, #0
 80187bc:	b2db      	uxtb	r3, r3
 80187be:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 80187c0:	69bb      	ldr	r3, [r7, #24]
 80187c2:	899b      	ldrh	r3, [r3, #12]
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	bf14      	ite	ne
 80187c8:	2301      	movne	r3, #1
 80187ca:	2300      	moveq	r3, #0
 80187cc:	b2db      	uxtb	r3, r3
 80187ce:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 80187d0:	69f8      	ldr	r0, [r7, #28]
 80187d2:	f00b fdfb 	bl	80243cc <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 80187d6:	68fb      	ldr	r3, [r7, #12]
 80187d8:	693a      	ldr	r2, [r7, #16]
 80187da:	6979      	ldr	r1, [r7, #20]
 80187dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80187de:	f000 f811 	bl	8018804 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 80187e2:	e006      	b.n	80187f2 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 80187e4:	69f8      	ldr	r0, [r7, #28]
 80187e6:	f00b fdf1 	bl	80243cc <sys_arch_unprotect>
 80187ea:	e002      	b.n	80187f2 <event_callback+0x166>
    return;
 80187ec:	bf00      	nop
 80187ee:	e000      	b.n	80187f2 <event_callback+0x166>
      return;
 80187f0:	bf00      	nop
  }
  done_socket(sock);
}
 80187f2:	3728      	adds	r7, #40	@ 0x28
 80187f4:	46bd      	mov	sp, r7
 80187f6:	bd80      	pop	{r7, pc}
 80187f8:	0802a0dc 	.word	0x0802a0dc
 80187fc:	0802a458 	.word	0x0802a458
 8018800:	0802a130 	.word	0x0802a130

08018804 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 8018804:	b580      	push	{r7, lr}
 8018806:	b088      	sub	sp, #32
 8018808:	af02      	add	r7, sp, #8
 801880a:	60f8      	str	r0, [r7, #12]
 801880c:	60b9      	str	r1, [r7, #8]
 801880e:	607a      	str	r2, [r7, #4]
 8018810:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8018812:	4b42      	ldr	r3, [pc, #264]	@ (801891c <select_check_waiters+0x118>)
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	617b      	str	r3, [r7, #20]
 8018818:	e078      	b.n	801890c <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 801881a:	697b      	ldr	r3, [r7, #20]
 801881c:	69db      	ldr	r3, [r3, #28]
 801881e:	2b00      	cmp	r3, #0
 8018820:	d171      	bne.n	8018906 <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 8018822:	2300      	movs	r3, #0
 8018824:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 8018826:	697b      	ldr	r3, [r7, #20]
 8018828:	695b      	ldr	r3, [r3, #20]
 801882a:	2b00      	cmp	r3, #0
 801882c:	d009      	beq.n	8018842 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 801882e:	683b      	ldr	r3, [r7, #0]
 8018830:	9300      	str	r3, [sp, #0]
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	68ba      	ldr	r2, [r7, #8]
 8018836:	68f9      	ldr	r1, [r7, #12]
 8018838:	6978      	ldr	r0, [r7, #20]
 801883a:	f7ff fee3 	bl	8018604 <lwip_poll_should_wake>
 801883e:	6138      	str	r0, [r7, #16]
 8018840:	e056      	b.n	80188f0 <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 8018842:	68bb      	ldr	r3, [r7, #8]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d017      	beq.n	8018878 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8018848:	697b      	ldr	r3, [r7, #20]
 801884a:	689b      	ldr	r3, [r3, #8]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d013      	beq.n	8018878 <select_check_waiters+0x74>
 8018850:	697b      	ldr	r3, [r7, #20]
 8018852:	689a      	ldr	r2, [r3, #8]
 8018854:	68fb      	ldr	r3, [r7, #12]
 8018856:	2b00      	cmp	r3, #0
 8018858:	da00      	bge.n	801885c <select_check_waiters+0x58>
 801885a:	331f      	adds	r3, #31
 801885c:	115b      	asrs	r3, r3, #5
 801885e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	f003 031f 	and.w	r3, r3, #31
 8018868:	fa22 f303 	lsr.w	r3, r2, r3
 801886c:	f003 0301 	and.w	r3, r3, #1
 8018870:	2b00      	cmp	r3, #0
 8018872:	d001      	beq.n	8018878 <select_check_waiters+0x74>
            do_signal = 1;
 8018874:	2301      	movs	r3, #1
 8018876:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	2b00      	cmp	r3, #0
 801887c:	d01a      	beq.n	80188b4 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 801887e:	693b      	ldr	r3, [r7, #16]
 8018880:	2b00      	cmp	r3, #0
 8018882:	d117      	bne.n	80188b4 <select_check_waiters+0xb0>
 8018884:	697b      	ldr	r3, [r7, #20]
 8018886:	68db      	ldr	r3, [r3, #12]
 8018888:	2b00      	cmp	r3, #0
 801888a:	d013      	beq.n	80188b4 <select_check_waiters+0xb0>
 801888c:	697b      	ldr	r3, [r7, #20]
 801888e:	68da      	ldr	r2, [r3, #12]
 8018890:	68fb      	ldr	r3, [r7, #12]
 8018892:	2b00      	cmp	r3, #0
 8018894:	da00      	bge.n	8018898 <select_check_waiters+0x94>
 8018896:	331f      	adds	r3, #31
 8018898:	115b      	asrs	r3, r3, #5
 801889a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	f003 031f 	and.w	r3, r3, #31
 80188a4:	fa22 f303 	lsr.w	r3, r2, r3
 80188a8:	f003 0301 	and.w	r3, r3, #1
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d001      	beq.n	80188b4 <select_check_waiters+0xb0>
            do_signal = 1;
 80188b0:	2301      	movs	r3, #1
 80188b2:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 80188b4:	683b      	ldr	r3, [r7, #0]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d01a      	beq.n	80188f0 <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 80188ba:	693b      	ldr	r3, [r7, #16]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d117      	bne.n	80188f0 <select_check_waiters+0xec>
 80188c0:	697b      	ldr	r3, [r7, #20]
 80188c2:	691b      	ldr	r3, [r3, #16]
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d013      	beq.n	80188f0 <select_check_waiters+0xec>
 80188c8:	697b      	ldr	r3, [r7, #20]
 80188ca:	691a      	ldr	r2, [r3, #16]
 80188cc:	68fb      	ldr	r3, [r7, #12]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	da00      	bge.n	80188d4 <select_check_waiters+0xd0>
 80188d2:	331f      	adds	r3, #31
 80188d4:	115b      	asrs	r3, r3, #5
 80188d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80188da:	68fb      	ldr	r3, [r7, #12]
 80188dc:	f003 031f 	and.w	r3, r3, #31
 80188e0:	fa22 f303 	lsr.w	r3, r2, r3
 80188e4:	f003 0301 	and.w	r3, r3, #1
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d001      	beq.n	80188f0 <select_check_waiters+0xec>
            do_signal = 1;
 80188ec:	2301      	movs	r3, #1
 80188ee:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 80188f0:	693b      	ldr	r3, [r7, #16]
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d007      	beq.n	8018906 <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 80188f6:	697b      	ldr	r3, [r7, #20]
 80188f8:	2201      	movs	r2, #1
 80188fa:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 80188fc:	697b      	ldr	r3, [r7, #20]
 80188fe:	3320      	adds	r3, #32
 8018900:	4618      	mov	r0, r3
 8018902:	f00b fcb1 	bl	8024268 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8018906:	697b      	ldr	r3, [r7, #20]
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	617b      	str	r3, [r7, #20]
 801890c:	697b      	ldr	r3, [r7, #20]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d183      	bne.n	801881a <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 8018912:	bf00      	nop
 8018914:	bf00      	nop
 8018916:	3718      	adds	r7, #24
 8018918:	46bd      	mov	sp, r7
 801891a:	bd80      	pop	{r7, pc}
 801891c:	24008d50 	.word	0x24008d50

08018920 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8018920:	b580      	push	{r7, lr}
 8018922:	b084      	sub	sp, #16
 8018924:	af00      	add	r7, sp, #0
 8018926:	6078      	str	r0, [r7, #4]
 8018928:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801892a:	f008 fa31 	bl	8020d90 <sys_timeouts_sleeptime>
 801892e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018936:	d10b      	bne.n	8018950 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8018938:	4813      	ldr	r0, [pc, #76]	@ (8018988 <tcpip_timeouts_mbox_fetch+0x68>)
 801893a:	f00b fd06 	bl	802434a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801893e:	2200      	movs	r2, #0
 8018940:	6839      	ldr	r1, [r7, #0]
 8018942:	6878      	ldr	r0, [r7, #4]
 8018944:	f00b fbbe 	bl	80240c4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8018948:	480f      	ldr	r0, [pc, #60]	@ (8018988 <tcpip_timeouts_mbox_fetch+0x68>)
 801894a:	f00b fcef 	bl	802432c <sys_mutex_lock>
    return;
 801894e:	e018      	b.n	8018982 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	2b00      	cmp	r3, #0
 8018954:	d102      	bne.n	801895c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8018956:	f008 f9e1 	bl	8020d1c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801895a:	e7e6      	b.n	801892a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801895c:	480a      	ldr	r0, [pc, #40]	@ (8018988 <tcpip_timeouts_mbox_fetch+0x68>)
 801895e:	f00b fcf4 	bl	802434a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8018962:	68fa      	ldr	r2, [r7, #12]
 8018964:	6839      	ldr	r1, [r7, #0]
 8018966:	6878      	ldr	r0, [r7, #4]
 8018968:	f00b fbac 	bl	80240c4 <sys_arch_mbox_fetch>
 801896c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801896e:	4806      	ldr	r0, [pc, #24]	@ (8018988 <tcpip_timeouts_mbox_fetch+0x68>)
 8018970:	f00b fcdc 	bl	802432c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8018974:	68bb      	ldr	r3, [r7, #8]
 8018976:	f1b3 3fff 	cmp.w	r3, #4294967295
 801897a:	d102      	bne.n	8018982 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801897c:	f008 f9ce 	bl	8020d1c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8018980:	e7d3      	b.n	801892a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8018982:	3710      	adds	r7, #16
 8018984:	46bd      	mov	sp, r7
 8018986:	bd80      	pop	{r7, pc}
 8018988:	24008d60 	.word	0x24008d60

0801898c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801898c:	b580      	push	{r7, lr}
 801898e:	b084      	sub	sp, #16
 8018990:	af00      	add	r7, sp, #0
 8018992:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8018994:	4810      	ldr	r0, [pc, #64]	@ (80189d8 <tcpip_thread+0x4c>)
 8018996:	f00b fcc9 	bl	802432c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801899a:	4b10      	ldr	r3, [pc, #64]	@ (80189dc <tcpip_thread+0x50>)
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d005      	beq.n	80189ae <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80189a2:	4b0e      	ldr	r3, [pc, #56]	@ (80189dc <tcpip_thread+0x50>)
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	4a0e      	ldr	r2, [pc, #56]	@ (80189e0 <tcpip_thread+0x54>)
 80189a8:	6812      	ldr	r2, [r2, #0]
 80189aa:	4610      	mov	r0, r2
 80189ac:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80189ae:	f107 030c 	add.w	r3, r7, #12
 80189b2:	4619      	mov	r1, r3
 80189b4:	480b      	ldr	r0, [pc, #44]	@ (80189e4 <tcpip_thread+0x58>)
 80189b6:	f7ff ffb3 	bl	8018920 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d106      	bne.n	80189ce <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80189c0:	4b09      	ldr	r3, [pc, #36]	@ (80189e8 <tcpip_thread+0x5c>)
 80189c2:	2291      	movs	r2, #145	@ 0x91
 80189c4:	4909      	ldr	r1, [pc, #36]	@ (80189ec <tcpip_thread+0x60>)
 80189c6:	480a      	ldr	r0, [pc, #40]	@ (80189f0 <tcpip_thread+0x64>)
 80189c8:	f00c fd8c 	bl	80254e4 <iprintf>
      continue;
 80189cc:	e003      	b.n	80189d6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80189ce:	68fb      	ldr	r3, [r7, #12]
 80189d0:	4618      	mov	r0, r3
 80189d2:	f000 f80f 	bl	80189f4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80189d6:	e7ea      	b.n	80189ae <tcpip_thread+0x22>
 80189d8:	24008d60 	.word	0x24008d60
 80189dc:	24008d54 	.word	0x24008d54
 80189e0:	24008d58 	.word	0x24008d58
 80189e4:	24008d5c 	.word	0x24008d5c
 80189e8:	0802a4ac 	.word	0x0802a4ac
 80189ec:	0802a4dc 	.word	0x0802a4dc
 80189f0:	0802a4fc 	.word	0x0802a4fc

080189f4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80189f4:	b580      	push	{r7, lr}
 80189f6:	b082      	sub	sp, #8
 80189f8:	af00      	add	r7, sp, #0
 80189fa:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	781b      	ldrb	r3, [r3, #0]
 8018a00:	2b02      	cmp	r3, #2
 8018a02:	d026      	beq.n	8018a52 <tcpip_thread_handle_msg+0x5e>
 8018a04:	2b02      	cmp	r3, #2
 8018a06:	dc2b      	bgt.n	8018a60 <tcpip_thread_handle_msg+0x6c>
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d002      	beq.n	8018a12 <tcpip_thread_handle_msg+0x1e>
 8018a0c:	2b01      	cmp	r3, #1
 8018a0e:	d015      	beq.n	8018a3c <tcpip_thread_handle_msg+0x48>
 8018a10:	e026      	b.n	8018a60 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	68db      	ldr	r3, [r3, #12]
 8018a16:	687a      	ldr	r2, [r7, #4]
 8018a18:	6850      	ldr	r0, [r2, #4]
 8018a1a:	687a      	ldr	r2, [r7, #4]
 8018a1c:	6892      	ldr	r2, [r2, #8]
 8018a1e:	4611      	mov	r1, r2
 8018a20:	4798      	blx	r3
 8018a22:	4603      	mov	r3, r0
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d004      	beq.n	8018a32 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	685b      	ldr	r3, [r3, #4]
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	f001 fe0b 	bl	801a648 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8018a32:	6879      	ldr	r1, [r7, #4]
 8018a34:	2009      	movs	r0, #9
 8018a36:	f000 ff31 	bl	801989c <memp_free>
      break;
 8018a3a:	e018      	b.n	8018a6e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	685b      	ldr	r3, [r3, #4]
 8018a40:	687a      	ldr	r2, [r7, #4]
 8018a42:	6892      	ldr	r2, [r2, #8]
 8018a44:	4610      	mov	r0, r2
 8018a46:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8018a48:	6879      	ldr	r1, [r7, #4]
 8018a4a:	2008      	movs	r0, #8
 8018a4c:	f000 ff26 	bl	801989c <memp_free>
      break;
 8018a50:	e00d      	b.n	8018a6e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	685b      	ldr	r3, [r3, #4]
 8018a56:	687a      	ldr	r2, [r7, #4]
 8018a58:	6892      	ldr	r2, [r2, #8]
 8018a5a:	4610      	mov	r0, r2
 8018a5c:	4798      	blx	r3
      break;
 8018a5e:	e006      	b.n	8018a6e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8018a60:	4b05      	ldr	r3, [pc, #20]	@ (8018a78 <tcpip_thread_handle_msg+0x84>)
 8018a62:	22cf      	movs	r2, #207	@ 0xcf
 8018a64:	4905      	ldr	r1, [pc, #20]	@ (8018a7c <tcpip_thread_handle_msg+0x88>)
 8018a66:	4806      	ldr	r0, [pc, #24]	@ (8018a80 <tcpip_thread_handle_msg+0x8c>)
 8018a68:	f00c fd3c 	bl	80254e4 <iprintf>
      break;
 8018a6c:	bf00      	nop
  }
}
 8018a6e:	bf00      	nop
 8018a70:	3708      	adds	r7, #8
 8018a72:	46bd      	mov	sp, r7
 8018a74:	bd80      	pop	{r7, pc}
 8018a76:	bf00      	nop
 8018a78:	0802a4ac 	.word	0x0802a4ac
 8018a7c:	0802a4dc 	.word	0x0802a4dc
 8018a80:	0802a4fc 	.word	0x0802a4fc

08018a84 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8018a84:	b580      	push	{r7, lr}
 8018a86:	b086      	sub	sp, #24
 8018a88:	af00      	add	r7, sp, #0
 8018a8a:	60f8      	str	r0, [r7, #12]
 8018a8c:	60b9      	str	r1, [r7, #8]
 8018a8e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8018a90:	481a      	ldr	r0, [pc, #104]	@ (8018afc <tcpip_inpkt+0x78>)
 8018a92:	f00b fb72 	bl	802417a <sys_mbox_valid>
 8018a96:	4603      	mov	r3, r0
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d105      	bne.n	8018aa8 <tcpip_inpkt+0x24>
 8018a9c:	4b18      	ldr	r3, [pc, #96]	@ (8018b00 <tcpip_inpkt+0x7c>)
 8018a9e:	22fc      	movs	r2, #252	@ 0xfc
 8018aa0:	4918      	ldr	r1, [pc, #96]	@ (8018b04 <tcpip_inpkt+0x80>)
 8018aa2:	4819      	ldr	r0, [pc, #100]	@ (8018b08 <tcpip_inpkt+0x84>)
 8018aa4:	f00c fd1e 	bl	80254e4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8018aa8:	2009      	movs	r0, #9
 8018aaa:	f000 fe81 	bl	80197b0 <memp_malloc>
 8018aae:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8018ab0:	697b      	ldr	r3, [r7, #20]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d102      	bne.n	8018abc <tcpip_inpkt+0x38>
    return ERR_MEM;
 8018ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8018aba:	e01a      	b.n	8018af2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8018abc:	697b      	ldr	r3, [r7, #20]
 8018abe:	2200      	movs	r2, #0
 8018ac0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8018ac2:	697b      	ldr	r3, [r7, #20]
 8018ac4:	68fa      	ldr	r2, [r7, #12]
 8018ac6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8018ac8:	697b      	ldr	r3, [r7, #20]
 8018aca:	68ba      	ldr	r2, [r7, #8]
 8018acc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8018ace:	697b      	ldr	r3, [r7, #20]
 8018ad0:	687a      	ldr	r2, [r7, #4]
 8018ad2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8018ad4:	6979      	ldr	r1, [r7, #20]
 8018ad6:	4809      	ldr	r0, [pc, #36]	@ (8018afc <tcpip_inpkt+0x78>)
 8018ad8:	f00b fada 	bl	8024090 <sys_mbox_trypost>
 8018adc:	4603      	mov	r3, r0
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d006      	beq.n	8018af0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8018ae2:	6979      	ldr	r1, [r7, #20]
 8018ae4:	2009      	movs	r0, #9
 8018ae6:	f000 fed9 	bl	801989c <memp_free>
    return ERR_MEM;
 8018aea:	f04f 33ff 	mov.w	r3, #4294967295
 8018aee:	e000      	b.n	8018af2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8018af0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8018af2:	4618      	mov	r0, r3
 8018af4:	3718      	adds	r7, #24
 8018af6:	46bd      	mov	sp, r7
 8018af8:	bd80      	pop	{r7, pc}
 8018afa:	bf00      	nop
 8018afc:	24008d5c 	.word	0x24008d5c
 8018b00:	0802a4ac 	.word	0x0802a4ac
 8018b04:	0802a524 	.word	0x0802a524
 8018b08:	0802a4fc 	.word	0x0802a4fc

08018b0c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8018b0c:	b580      	push	{r7, lr}
 8018b0e:	b082      	sub	sp, #8
 8018b10:	af00      	add	r7, sp, #0
 8018b12:	6078      	str	r0, [r7, #4]
 8018b14:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8018b16:	683b      	ldr	r3, [r7, #0]
 8018b18:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018b1c:	f003 0318 	and.w	r3, r3, #24
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d006      	beq.n	8018b32 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8018b24:	4a08      	ldr	r2, [pc, #32]	@ (8018b48 <tcpip_input+0x3c>)
 8018b26:	6839      	ldr	r1, [r7, #0]
 8018b28:	6878      	ldr	r0, [r7, #4]
 8018b2a:	f7ff ffab 	bl	8018a84 <tcpip_inpkt>
 8018b2e:	4603      	mov	r3, r0
 8018b30:	e005      	b.n	8018b3e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8018b32:	4a06      	ldr	r2, [pc, #24]	@ (8018b4c <tcpip_input+0x40>)
 8018b34:	6839      	ldr	r1, [r7, #0]
 8018b36:	6878      	ldr	r0, [r7, #4]
 8018b38:	f7ff ffa4 	bl	8018a84 <tcpip_inpkt>
 8018b3c:	4603      	mov	r3, r0
}
 8018b3e:	4618      	mov	r0, r3
 8018b40:	3708      	adds	r7, #8
 8018b42:	46bd      	mov	sp, r7
 8018b44:	bd80      	pop	{r7, pc}
 8018b46:	bf00      	nop
 8018b48:	08023e7d 	.word	0x08023e7d
 8018b4c:	08022b09 	.word	0x08022b09

08018b50 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8018b50:	b580      	push	{r7, lr}
 8018b52:	b084      	sub	sp, #16
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	6078      	str	r0, [r7, #4]
 8018b58:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8018b5a:	4819      	ldr	r0, [pc, #100]	@ (8018bc0 <tcpip_try_callback+0x70>)
 8018b5c:	f00b fb0d 	bl	802417a <sys_mbox_valid>
 8018b60:	4603      	mov	r3, r0
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d106      	bne.n	8018b74 <tcpip_try_callback+0x24>
 8018b66:	4b17      	ldr	r3, [pc, #92]	@ (8018bc4 <tcpip_try_callback+0x74>)
 8018b68:	f240 125d 	movw	r2, #349	@ 0x15d
 8018b6c:	4916      	ldr	r1, [pc, #88]	@ (8018bc8 <tcpip_try_callback+0x78>)
 8018b6e:	4817      	ldr	r0, [pc, #92]	@ (8018bcc <tcpip_try_callback+0x7c>)
 8018b70:	f00c fcb8 	bl	80254e4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8018b74:	2008      	movs	r0, #8
 8018b76:	f000 fe1b 	bl	80197b0 <memp_malloc>
 8018b7a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d102      	bne.n	8018b88 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8018b82:	f04f 33ff 	mov.w	r3, #4294967295
 8018b86:	e017      	b.n	8018bb8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	2201      	movs	r2, #1
 8018b8c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	687a      	ldr	r2, [r7, #4]
 8018b92:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	683a      	ldr	r2, [r7, #0]
 8018b98:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8018b9a:	68f9      	ldr	r1, [r7, #12]
 8018b9c:	4808      	ldr	r0, [pc, #32]	@ (8018bc0 <tcpip_try_callback+0x70>)
 8018b9e:	f00b fa77 	bl	8024090 <sys_mbox_trypost>
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d006      	beq.n	8018bb6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8018ba8:	68f9      	ldr	r1, [r7, #12]
 8018baa:	2008      	movs	r0, #8
 8018bac:	f000 fe76 	bl	801989c <memp_free>
    return ERR_MEM;
 8018bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8018bb4:	e000      	b.n	8018bb8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8018bb6:	2300      	movs	r3, #0
}
 8018bb8:	4618      	mov	r0, r3
 8018bba:	3710      	adds	r7, #16
 8018bbc:	46bd      	mov	sp, r7
 8018bbe:	bd80      	pop	{r7, pc}
 8018bc0:	24008d5c 	.word	0x24008d5c
 8018bc4:	0802a4ac 	.word	0x0802a4ac
 8018bc8:	0802a524 	.word	0x0802a524
 8018bcc:	0802a4fc 	.word	0x0802a4fc

08018bd0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8018bd0:	b580      	push	{r7, lr}
 8018bd2:	b084      	sub	sp, #16
 8018bd4:	af00      	add	r7, sp, #0
 8018bd6:	60f8      	str	r0, [r7, #12]
 8018bd8:	60b9      	str	r1, [r7, #8]
 8018bda:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8018bdc:	4806      	ldr	r0, [pc, #24]	@ (8018bf8 <tcpip_send_msg_wait_sem+0x28>)
 8018bde:	f00b fba5 	bl	802432c <sys_mutex_lock>
  fn(apimsg);
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	68b8      	ldr	r0, [r7, #8]
 8018be6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8018be8:	4803      	ldr	r0, [pc, #12]	@ (8018bf8 <tcpip_send_msg_wait_sem+0x28>)
 8018bea:	f00b fbae 	bl	802434a <sys_mutex_unlock>
  return ERR_OK;
 8018bee:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8018bf0:	4618      	mov	r0, r3
 8018bf2:	3710      	adds	r7, #16
 8018bf4:	46bd      	mov	sp, r7
 8018bf6:	bd80      	pop	{r7, pc}
 8018bf8:	24008d60 	.word	0x24008d60

08018bfc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b084      	sub	sp, #16
 8018c00:	af02      	add	r7, sp, #8
 8018c02:	6078      	str	r0, [r7, #4]
 8018c04:	6039      	str	r1, [r7, #0]
  lwip_init();
 8018c06:	f000 f92d 	bl	8018e64 <lwip_init>

  tcpip_init_done = initfunc;
 8018c0a:	4a17      	ldr	r2, [pc, #92]	@ (8018c68 <tcpip_init+0x6c>)
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8018c10:	4a16      	ldr	r2, [pc, #88]	@ (8018c6c <tcpip_init+0x70>)
 8018c12:	683b      	ldr	r3, [r7, #0]
 8018c14:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8018c16:	2106      	movs	r1, #6
 8018c18:	4815      	ldr	r0, [pc, #84]	@ (8018c70 <tcpip_init+0x74>)
 8018c1a:	f00b fa05 	bl	8024028 <sys_mbox_new>
 8018c1e:	4603      	mov	r3, r0
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d006      	beq.n	8018c32 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8018c24:	4b13      	ldr	r3, [pc, #76]	@ (8018c74 <tcpip_init+0x78>)
 8018c26:	f240 2261 	movw	r2, #609	@ 0x261
 8018c2a:	4913      	ldr	r1, [pc, #76]	@ (8018c78 <tcpip_init+0x7c>)
 8018c2c:	4813      	ldr	r0, [pc, #76]	@ (8018c7c <tcpip_init+0x80>)
 8018c2e:	f00c fc59 	bl	80254e4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8018c32:	4813      	ldr	r0, [pc, #76]	@ (8018c80 <tcpip_init+0x84>)
 8018c34:	f00b fb5e 	bl	80242f4 <sys_mutex_new>
 8018c38:	4603      	mov	r3, r0
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d006      	beq.n	8018c4c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8018c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8018c74 <tcpip_init+0x78>)
 8018c40:	f240 2265 	movw	r2, #613	@ 0x265
 8018c44:	490f      	ldr	r1, [pc, #60]	@ (8018c84 <tcpip_init+0x88>)
 8018c46:	480d      	ldr	r0, [pc, #52]	@ (8018c7c <tcpip_init+0x80>)
 8018c48:	f00c fc4c 	bl	80254e4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8018c4c:	2300      	movs	r3, #0
 8018c4e:	9300      	str	r3, [sp, #0]
 8018c50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018c54:	2200      	movs	r2, #0
 8018c56:	490c      	ldr	r1, [pc, #48]	@ (8018c88 <tcpip_init+0x8c>)
 8018c58:	480c      	ldr	r0, [pc, #48]	@ (8018c8c <tcpip_init+0x90>)
 8018c5a:	f00b fb83 	bl	8024364 <sys_thread_new>
}
 8018c5e:	bf00      	nop
 8018c60:	3708      	adds	r7, #8
 8018c62:	46bd      	mov	sp, r7
 8018c64:	bd80      	pop	{r7, pc}
 8018c66:	bf00      	nop
 8018c68:	24008d54 	.word	0x24008d54
 8018c6c:	24008d58 	.word	0x24008d58
 8018c70:	24008d5c 	.word	0x24008d5c
 8018c74:	0802a4ac 	.word	0x0802a4ac
 8018c78:	0802a534 	.word	0x0802a534
 8018c7c:	0802a4fc 	.word	0x0802a4fc
 8018c80:	24008d60 	.word	0x24008d60
 8018c84:	0802a558 	.word	0x0802a558
 8018c88:	0801898d 	.word	0x0801898d
 8018c8c:	0802a57c 	.word	0x0802a57c

08018c90 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8018c90:	b480      	push	{r7}
 8018c92:	b083      	sub	sp, #12
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	4603      	mov	r3, r0
 8018c98:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8018c9a:	88fb      	ldrh	r3, [r7, #6]
 8018c9c:	021b      	lsls	r3, r3, #8
 8018c9e:	b21a      	sxth	r2, r3
 8018ca0:	88fb      	ldrh	r3, [r7, #6]
 8018ca2:	0a1b      	lsrs	r3, r3, #8
 8018ca4:	b29b      	uxth	r3, r3
 8018ca6:	b21b      	sxth	r3, r3
 8018ca8:	4313      	orrs	r3, r2
 8018caa:	b21b      	sxth	r3, r3
 8018cac:	b29b      	uxth	r3, r3
}
 8018cae:	4618      	mov	r0, r3
 8018cb0:	370c      	adds	r7, #12
 8018cb2:	46bd      	mov	sp, r7
 8018cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cb8:	4770      	bx	lr

08018cba <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8018cba:	b480      	push	{r7}
 8018cbc:	b083      	sub	sp, #12
 8018cbe:	af00      	add	r7, sp, #0
 8018cc0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	061a      	lsls	r2, r3, #24
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	021b      	lsls	r3, r3, #8
 8018cca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8018cce:	431a      	orrs	r2, r3
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	0a1b      	lsrs	r3, r3, #8
 8018cd4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8018cd8:	431a      	orrs	r2, r3
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	0e1b      	lsrs	r3, r3, #24
 8018cde:	4313      	orrs	r3, r2
}
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	370c      	adds	r7, #12
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cea:	4770      	bx	lr

08018cec <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8018cec:	b480      	push	{r7}
 8018cee:	b089      	sub	sp, #36	@ 0x24
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
 8018cf4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8018cfa:	2300      	movs	r3, #0
 8018cfc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8018cfe:	2300      	movs	r3, #0
 8018d00:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8018d02:	69fb      	ldr	r3, [r7, #28]
 8018d04:	f003 0301 	and.w	r3, r3, #1
 8018d08:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8018d0a:	693b      	ldr	r3, [r7, #16]
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d00d      	beq.n	8018d2c <lwip_standard_chksum+0x40>
 8018d10:	683b      	ldr	r3, [r7, #0]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	dd0a      	ble.n	8018d2c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8018d16:	69fa      	ldr	r2, [r7, #28]
 8018d18:	1c53      	adds	r3, r2, #1
 8018d1a:	61fb      	str	r3, [r7, #28]
 8018d1c:	f107 030e 	add.w	r3, r7, #14
 8018d20:	3301      	adds	r3, #1
 8018d22:	7812      	ldrb	r2, [r2, #0]
 8018d24:	701a      	strb	r2, [r3, #0]
    len--;
 8018d26:	683b      	ldr	r3, [r7, #0]
 8018d28:	3b01      	subs	r3, #1
 8018d2a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8018d2c:	69fb      	ldr	r3, [r7, #28]
 8018d2e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8018d30:	e00a      	b.n	8018d48 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8018d32:	69bb      	ldr	r3, [r7, #24]
 8018d34:	1c9a      	adds	r2, r3, #2
 8018d36:	61ba      	str	r2, [r7, #24]
 8018d38:	881b      	ldrh	r3, [r3, #0]
 8018d3a:	461a      	mov	r2, r3
 8018d3c:	697b      	ldr	r3, [r7, #20]
 8018d3e:	4413      	add	r3, r2
 8018d40:	617b      	str	r3, [r7, #20]
    len -= 2;
 8018d42:	683b      	ldr	r3, [r7, #0]
 8018d44:	3b02      	subs	r3, #2
 8018d46:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8018d48:	683b      	ldr	r3, [r7, #0]
 8018d4a:	2b01      	cmp	r3, #1
 8018d4c:	dcf1      	bgt.n	8018d32 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8018d4e:	683b      	ldr	r3, [r7, #0]
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	dd04      	ble.n	8018d5e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8018d54:	f107 030e 	add.w	r3, r7, #14
 8018d58:	69ba      	ldr	r2, [r7, #24]
 8018d5a:	7812      	ldrb	r2, [r2, #0]
 8018d5c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8018d5e:	89fb      	ldrh	r3, [r7, #14]
 8018d60:	461a      	mov	r2, r3
 8018d62:	697b      	ldr	r3, [r7, #20]
 8018d64:	4413      	add	r3, r2
 8018d66:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8018d68:	697b      	ldr	r3, [r7, #20]
 8018d6a:	0c1a      	lsrs	r2, r3, #16
 8018d6c:	697b      	ldr	r3, [r7, #20]
 8018d6e:	b29b      	uxth	r3, r3
 8018d70:	4413      	add	r3, r2
 8018d72:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8018d74:	697b      	ldr	r3, [r7, #20]
 8018d76:	0c1a      	lsrs	r2, r3, #16
 8018d78:	697b      	ldr	r3, [r7, #20]
 8018d7a:	b29b      	uxth	r3, r3
 8018d7c:	4413      	add	r3, r2
 8018d7e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8018d80:	693b      	ldr	r3, [r7, #16]
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d007      	beq.n	8018d96 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8018d86:	697b      	ldr	r3, [r7, #20]
 8018d88:	021b      	lsls	r3, r3, #8
 8018d8a:	b29a      	uxth	r2, r3
 8018d8c:	697b      	ldr	r3, [r7, #20]
 8018d8e:	0a1b      	lsrs	r3, r3, #8
 8018d90:	b2db      	uxtb	r3, r3
 8018d92:	4313      	orrs	r3, r2
 8018d94:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8018d96:	697b      	ldr	r3, [r7, #20]
 8018d98:	b29b      	uxth	r3, r3
}
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	3724      	adds	r7, #36	@ 0x24
 8018d9e:	46bd      	mov	sp, r7
 8018da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da4:	4770      	bx	lr

08018da6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8018da6:	b580      	push	{r7, lr}
 8018da8:	b082      	sub	sp, #8
 8018daa:	af00      	add	r7, sp, #0
 8018dac:	6078      	str	r0, [r7, #4]
 8018dae:	460b      	mov	r3, r1
 8018db0:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8018db2:	887b      	ldrh	r3, [r7, #2]
 8018db4:	4619      	mov	r1, r3
 8018db6:	6878      	ldr	r0, [r7, #4]
 8018db8:	f7ff ff98 	bl	8018cec <lwip_standard_chksum>
 8018dbc:	4603      	mov	r3, r0
 8018dbe:	43db      	mvns	r3, r3
 8018dc0:	b29b      	uxth	r3, r3
}
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	3708      	adds	r7, #8
 8018dc6:	46bd      	mov	sp, r7
 8018dc8:	bd80      	pop	{r7, pc}

08018dca <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8018dca:	b580      	push	{r7, lr}
 8018dcc:	b086      	sub	sp, #24
 8018dce:	af00      	add	r7, sp, #0
 8018dd0:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8018dd2:	2300      	movs	r3, #0
 8018dd4:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8018dd6:	2300      	movs	r3, #0
 8018dd8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	613b      	str	r3, [r7, #16]
 8018dde:	e02b      	b.n	8018e38 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8018de0:	693b      	ldr	r3, [r7, #16]
 8018de2:	685a      	ldr	r2, [r3, #4]
 8018de4:	693b      	ldr	r3, [r7, #16]
 8018de6:	895b      	ldrh	r3, [r3, #10]
 8018de8:	4619      	mov	r1, r3
 8018dea:	4610      	mov	r0, r2
 8018dec:	f7ff ff7e 	bl	8018cec <lwip_standard_chksum>
 8018df0:	4603      	mov	r3, r0
 8018df2:	461a      	mov	r2, r3
 8018df4:	697b      	ldr	r3, [r7, #20]
 8018df6:	4413      	add	r3, r2
 8018df8:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8018dfa:	697b      	ldr	r3, [r7, #20]
 8018dfc:	0c1a      	lsrs	r2, r3, #16
 8018dfe:	697b      	ldr	r3, [r7, #20]
 8018e00:	b29b      	uxth	r3, r3
 8018e02:	4413      	add	r3, r2
 8018e04:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8018e06:	693b      	ldr	r3, [r7, #16]
 8018e08:	895b      	ldrh	r3, [r3, #10]
 8018e0a:	f003 0301 	and.w	r3, r3, #1
 8018e0e:	b29b      	uxth	r3, r3
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d00e      	beq.n	8018e32 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	bf0c      	ite	eq
 8018e1a:	2301      	moveq	r3, #1
 8018e1c:	2300      	movne	r3, #0
 8018e1e:	b2db      	uxtb	r3, r3
 8018e20:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8018e22:	697b      	ldr	r3, [r7, #20]
 8018e24:	021b      	lsls	r3, r3, #8
 8018e26:	b29a      	uxth	r2, r3
 8018e28:	697b      	ldr	r3, [r7, #20]
 8018e2a:	0a1b      	lsrs	r3, r3, #8
 8018e2c:	b2db      	uxtb	r3, r3
 8018e2e:	4313      	orrs	r3, r2
 8018e30:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8018e32:	693b      	ldr	r3, [r7, #16]
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	613b      	str	r3, [r7, #16]
 8018e38:	693b      	ldr	r3, [r7, #16]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d1d0      	bne.n	8018de0 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8018e3e:	68fb      	ldr	r3, [r7, #12]
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d007      	beq.n	8018e54 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8018e44:	697b      	ldr	r3, [r7, #20]
 8018e46:	021b      	lsls	r3, r3, #8
 8018e48:	b29a      	uxth	r2, r3
 8018e4a:	697b      	ldr	r3, [r7, #20]
 8018e4c:	0a1b      	lsrs	r3, r3, #8
 8018e4e:	b2db      	uxtb	r3, r3
 8018e50:	4313      	orrs	r3, r2
 8018e52:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8018e54:	697b      	ldr	r3, [r7, #20]
 8018e56:	b29b      	uxth	r3, r3
 8018e58:	43db      	mvns	r3, r3
 8018e5a:	b29b      	uxth	r3, r3
}
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	3718      	adds	r7, #24
 8018e60:	46bd      	mov	sp, r7
 8018e62:	bd80      	pop	{r7, pc}

08018e64 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8018e64:	b580      	push	{r7, lr}
 8018e66:	b082      	sub	sp, #8
 8018e68:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8018e6a:	2300      	movs	r3, #0
 8018e6c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8018e6e:	f00b fa33 	bl	80242d8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8018e72:	f000 f8d5 	bl	8019020 <mem_init>
  memp_init();
 8018e76:	f000 fc2d 	bl	80196d4 <memp_init>
  pbuf_init();
  netif_init();
 8018e7a:	f000 fd39 	bl	80198f0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8018e7e:	f007 ffbf 	bl	8020e00 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8018e82:	f001 fe8b 	bl	801ab9c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8018e86:	f007 ff01 	bl	8020c8c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8018e8a:	bf00      	nop
 8018e8c:	3708      	adds	r7, #8
 8018e8e:	46bd      	mov	sp, r7
 8018e90:	bd80      	pop	{r7, pc}
	...

08018e94 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8018e94:	b480      	push	{r7}
 8018e96:	b083      	sub	sp, #12
 8018e98:	af00      	add	r7, sp, #0
 8018e9a:	4603      	mov	r3, r0
 8018e9c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8018e9e:	4b05      	ldr	r3, [pc, #20]	@ (8018eb4 <ptr_to_mem+0x20>)
 8018ea0:	681a      	ldr	r2, [r3, #0]
 8018ea2:	88fb      	ldrh	r3, [r7, #6]
 8018ea4:	4413      	add	r3, r2
}
 8018ea6:	4618      	mov	r0, r3
 8018ea8:	370c      	adds	r7, #12
 8018eaa:	46bd      	mov	sp, r7
 8018eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb0:	4770      	bx	lr
 8018eb2:	bf00      	nop
 8018eb4:	24008d7c 	.word	0x24008d7c

08018eb8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8018eb8:	b480      	push	{r7}
 8018eba:	b083      	sub	sp, #12
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8018ec0:	4b05      	ldr	r3, [pc, #20]	@ (8018ed8 <mem_to_ptr+0x20>)
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	687a      	ldr	r2, [r7, #4]
 8018ec6:	1ad3      	subs	r3, r2, r3
 8018ec8:	b29b      	uxth	r3, r3
}
 8018eca:	4618      	mov	r0, r3
 8018ecc:	370c      	adds	r7, #12
 8018ece:	46bd      	mov	sp, r7
 8018ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ed4:	4770      	bx	lr
 8018ed6:	bf00      	nop
 8018ed8:	24008d7c 	.word	0x24008d7c

08018edc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8018edc:	b590      	push	{r4, r7, lr}
 8018ede:	b085      	sub	sp, #20
 8018ee0:	af00      	add	r7, sp, #0
 8018ee2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8018ee4:	4b45      	ldr	r3, [pc, #276]	@ (8018ffc <plug_holes+0x120>)
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	687a      	ldr	r2, [r7, #4]
 8018eea:	429a      	cmp	r2, r3
 8018eec:	d206      	bcs.n	8018efc <plug_holes+0x20>
 8018eee:	4b44      	ldr	r3, [pc, #272]	@ (8019000 <plug_holes+0x124>)
 8018ef0:	f240 12df 	movw	r2, #479	@ 0x1df
 8018ef4:	4943      	ldr	r1, [pc, #268]	@ (8019004 <plug_holes+0x128>)
 8018ef6:	4844      	ldr	r0, [pc, #272]	@ (8019008 <plug_holes+0x12c>)
 8018ef8:	f00c faf4 	bl	80254e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8018efc:	4b43      	ldr	r3, [pc, #268]	@ (801900c <plug_holes+0x130>)
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	687a      	ldr	r2, [r7, #4]
 8018f02:	429a      	cmp	r2, r3
 8018f04:	d306      	bcc.n	8018f14 <plug_holes+0x38>
 8018f06:	4b3e      	ldr	r3, [pc, #248]	@ (8019000 <plug_holes+0x124>)
 8018f08:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8018f0c:	4940      	ldr	r1, [pc, #256]	@ (8019010 <plug_holes+0x134>)
 8018f0e:	483e      	ldr	r0, [pc, #248]	@ (8019008 <plug_holes+0x12c>)
 8018f10:	f00c fae8 	bl	80254e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	791b      	ldrb	r3, [r3, #4]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d006      	beq.n	8018f2a <plug_holes+0x4e>
 8018f1c:	4b38      	ldr	r3, [pc, #224]	@ (8019000 <plug_holes+0x124>)
 8018f1e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8018f22:	493c      	ldr	r1, [pc, #240]	@ (8019014 <plug_holes+0x138>)
 8018f24:	4838      	ldr	r0, [pc, #224]	@ (8019008 <plug_holes+0x12c>)
 8018f26:	f00c fadd 	bl	80254e4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	881b      	ldrh	r3, [r3, #0]
 8018f2e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8018f32:	d906      	bls.n	8018f42 <plug_holes+0x66>
 8018f34:	4b32      	ldr	r3, [pc, #200]	@ (8019000 <plug_holes+0x124>)
 8018f36:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8018f3a:	4937      	ldr	r1, [pc, #220]	@ (8019018 <plug_holes+0x13c>)
 8018f3c:	4832      	ldr	r0, [pc, #200]	@ (8019008 <plug_holes+0x12c>)
 8018f3e:	f00c fad1 	bl	80254e4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	881b      	ldrh	r3, [r3, #0]
 8018f46:	4618      	mov	r0, r3
 8018f48:	f7ff ffa4 	bl	8018e94 <ptr_to_mem>
 8018f4c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8018f4e:	687a      	ldr	r2, [r7, #4]
 8018f50:	68fb      	ldr	r3, [r7, #12]
 8018f52:	429a      	cmp	r2, r3
 8018f54:	d024      	beq.n	8018fa0 <plug_holes+0xc4>
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	791b      	ldrb	r3, [r3, #4]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d120      	bne.n	8018fa0 <plug_holes+0xc4>
 8018f5e:	4b2b      	ldr	r3, [pc, #172]	@ (801900c <plug_holes+0x130>)
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	68fa      	ldr	r2, [r7, #12]
 8018f64:	429a      	cmp	r2, r3
 8018f66:	d01b      	beq.n	8018fa0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8018f68:	4b2c      	ldr	r3, [pc, #176]	@ (801901c <plug_holes+0x140>)
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	68fa      	ldr	r2, [r7, #12]
 8018f6e:	429a      	cmp	r2, r3
 8018f70:	d102      	bne.n	8018f78 <plug_holes+0x9c>
      lfree = mem;
 8018f72:	4a2a      	ldr	r2, [pc, #168]	@ (801901c <plug_holes+0x140>)
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8018f78:	68fb      	ldr	r3, [r7, #12]
 8018f7a:	881a      	ldrh	r2, [r3, #0]
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	881b      	ldrh	r3, [r3, #0]
 8018f84:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8018f88:	d00a      	beq.n	8018fa0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	881b      	ldrh	r3, [r3, #0]
 8018f8e:	4618      	mov	r0, r3
 8018f90:	f7ff ff80 	bl	8018e94 <ptr_to_mem>
 8018f94:	4604      	mov	r4, r0
 8018f96:	6878      	ldr	r0, [r7, #4]
 8018f98:	f7ff ff8e 	bl	8018eb8 <mem_to_ptr>
 8018f9c:	4603      	mov	r3, r0
 8018f9e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	885b      	ldrh	r3, [r3, #2]
 8018fa4:	4618      	mov	r0, r3
 8018fa6:	f7ff ff75 	bl	8018e94 <ptr_to_mem>
 8018faa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8018fac:	68ba      	ldr	r2, [r7, #8]
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	429a      	cmp	r2, r3
 8018fb2:	d01f      	beq.n	8018ff4 <plug_holes+0x118>
 8018fb4:	68bb      	ldr	r3, [r7, #8]
 8018fb6:	791b      	ldrb	r3, [r3, #4]
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d11b      	bne.n	8018ff4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8018fbc:	4b17      	ldr	r3, [pc, #92]	@ (801901c <plug_holes+0x140>)
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	687a      	ldr	r2, [r7, #4]
 8018fc2:	429a      	cmp	r2, r3
 8018fc4:	d102      	bne.n	8018fcc <plug_holes+0xf0>
      lfree = pmem;
 8018fc6:	4a15      	ldr	r2, [pc, #84]	@ (801901c <plug_holes+0x140>)
 8018fc8:	68bb      	ldr	r3, [r7, #8]
 8018fca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	881a      	ldrh	r2, [r3, #0]
 8018fd0:	68bb      	ldr	r3, [r7, #8]
 8018fd2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	881b      	ldrh	r3, [r3, #0]
 8018fd8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8018fdc:	d00a      	beq.n	8018ff4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	881b      	ldrh	r3, [r3, #0]
 8018fe2:	4618      	mov	r0, r3
 8018fe4:	f7ff ff56 	bl	8018e94 <ptr_to_mem>
 8018fe8:	4604      	mov	r4, r0
 8018fea:	68b8      	ldr	r0, [r7, #8]
 8018fec:	f7ff ff64 	bl	8018eb8 <mem_to_ptr>
 8018ff0:	4603      	mov	r3, r0
 8018ff2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8018ff4:	bf00      	nop
 8018ff6:	3714      	adds	r7, #20
 8018ff8:	46bd      	mov	sp, r7
 8018ffa:	bd90      	pop	{r4, r7, pc}
 8018ffc:	24008d7c 	.word	0x24008d7c
 8019000:	0802a58c 	.word	0x0802a58c
 8019004:	0802a5bc 	.word	0x0802a5bc
 8019008:	0802a5d4 	.word	0x0802a5d4
 801900c:	24008d80 	.word	0x24008d80
 8019010:	0802a5fc 	.word	0x0802a5fc
 8019014:	0802a618 	.word	0x0802a618
 8019018:	0802a634 	.word	0x0802a634
 801901c:	24008d88 	.word	0x24008d88

08019020 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8019020:	b580      	push	{r7, lr}
 8019022:	b082      	sub	sp, #8
 8019024:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8019026:	4b1d      	ldr	r3, [pc, #116]	@ (801909c <mem_init+0x7c>)
 8019028:	4a1d      	ldr	r2, [pc, #116]	@ (80190a0 <mem_init+0x80>)
 801902a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801902c:	4b1b      	ldr	r3, [pc, #108]	@ (801909c <mem_init+0x7c>)
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8019038:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	2200      	movs	r2, #0
 801903e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	2200      	movs	r2, #0
 8019044:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8019046:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 801904a:	f7ff ff23 	bl	8018e94 <ptr_to_mem>
 801904e:	4603      	mov	r3, r0
 8019050:	4a14      	ldr	r2, [pc, #80]	@ (80190a4 <mem_init+0x84>)
 8019052:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8019054:	4b13      	ldr	r3, [pc, #76]	@ (80190a4 <mem_init+0x84>)
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	2201      	movs	r2, #1
 801905a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801905c:	4b11      	ldr	r3, [pc, #68]	@ (80190a4 <mem_init+0x84>)
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8019064:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8019066:	4b0f      	ldr	r3, [pc, #60]	@ (80190a4 <mem_init+0x84>)
 8019068:	681b      	ldr	r3, [r3, #0]
 801906a:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 801906e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8019070:	4b0a      	ldr	r3, [pc, #40]	@ (801909c <mem_init+0x7c>)
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	4a0c      	ldr	r2, [pc, #48]	@ (80190a8 <mem_init+0x88>)
 8019076:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8019078:	480c      	ldr	r0, [pc, #48]	@ (80190ac <mem_init+0x8c>)
 801907a:	f00b f93b 	bl	80242f4 <sys_mutex_new>
 801907e:	4603      	mov	r3, r0
 8019080:	2b00      	cmp	r3, #0
 8019082:	d006      	beq.n	8019092 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8019084:	4b0a      	ldr	r3, [pc, #40]	@ (80190b0 <mem_init+0x90>)
 8019086:	f240 221f 	movw	r2, #543	@ 0x21f
 801908a:	490a      	ldr	r1, [pc, #40]	@ (80190b4 <mem_init+0x94>)
 801908c:	480a      	ldr	r0, [pc, #40]	@ (80190b8 <mem_init+0x98>)
 801908e:	f00c fa29 	bl	80254e4 <iprintf>
  }
}
 8019092:	bf00      	nop
 8019094:	3708      	adds	r7, #8
 8019096:	46bd      	mov	sp, r7
 8019098:	bd80      	pop	{r7, pc}
 801909a:	bf00      	nop
 801909c:	24008d7c 	.word	0x24008d7c
 80190a0:	30002000 	.word	0x30002000
 80190a4:	24008d80 	.word	0x24008d80
 80190a8:	24008d88 	.word	0x24008d88
 80190ac:	24008d84 	.word	0x24008d84
 80190b0:	0802a58c 	.word	0x0802a58c
 80190b4:	0802a660 	.word	0x0802a660
 80190b8:	0802a5d4 	.word	0x0802a5d4

080190bc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b086      	sub	sp, #24
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80190c4:	6878      	ldr	r0, [r7, #4]
 80190c6:	f7ff fef7 	bl	8018eb8 <mem_to_ptr>
 80190ca:	4603      	mov	r3, r0
 80190cc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	881b      	ldrh	r3, [r3, #0]
 80190d2:	4618      	mov	r0, r3
 80190d4:	f7ff fede 	bl	8018e94 <ptr_to_mem>
 80190d8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	885b      	ldrh	r3, [r3, #2]
 80190de:	4618      	mov	r0, r3
 80190e0:	f7ff fed8 	bl	8018e94 <ptr_to_mem>
 80190e4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	881b      	ldrh	r3, [r3, #0]
 80190ea:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80190ee:	d818      	bhi.n	8019122 <mem_link_valid+0x66>
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	885b      	ldrh	r3, [r3, #2]
 80190f4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80190f8:	d813      	bhi.n	8019122 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80190fe:	8afa      	ldrh	r2, [r7, #22]
 8019100:	429a      	cmp	r2, r3
 8019102:	d004      	beq.n	801910e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8019104:	68fb      	ldr	r3, [r7, #12]
 8019106:	881b      	ldrh	r3, [r3, #0]
 8019108:	8afa      	ldrh	r2, [r7, #22]
 801910a:	429a      	cmp	r2, r3
 801910c:	d109      	bne.n	8019122 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801910e:	4b08      	ldr	r3, [pc, #32]	@ (8019130 <mem_link_valid+0x74>)
 8019110:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8019112:	693a      	ldr	r2, [r7, #16]
 8019114:	429a      	cmp	r2, r3
 8019116:	d006      	beq.n	8019126 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8019118:	693b      	ldr	r3, [r7, #16]
 801911a:	885b      	ldrh	r3, [r3, #2]
 801911c:	8afa      	ldrh	r2, [r7, #22]
 801911e:	429a      	cmp	r2, r3
 8019120:	d001      	beq.n	8019126 <mem_link_valid+0x6a>
    return 0;
 8019122:	2300      	movs	r3, #0
 8019124:	e000      	b.n	8019128 <mem_link_valid+0x6c>
  }
  return 1;
 8019126:	2301      	movs	r3, #1
}
 8019128:	4618      	mov	r0, r3
 801912a:	3718      	adds	r7, #24
 801912c:	46bd      	mov	sp, r7
 801912e:	bd80      	pop	{r7, pc}
 8019130:	24008d80 	.word	0x24008d80

08019134 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8019134:	b580      	push	{r7, lr}
 8019136:	b088      	sub	sp, #32
 8019138:	af00      	add	r7, sp, #0
 801913a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	2b00      	cmp	r3, #0
 8019140:	d070      	beq.n	8019224 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	f003 0303 	and.w	r3, r3, #3
 8019148:	2b00      	cmp	r3, #0
 801914a:	d00d      	beq.n	8019168 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801914c:	4b37      	ldr	r3, [pc, #220]	@ (801922c <mem_free+0xf8>)
 801914e:	f240 2273 	movw	r2, #627	@ 0x273
 8019152:	4937      	ldr	r1, [pc, #220]	@ (8019230 <mem_free+0xfc>)
 8019154:	4837      	ldr	r0, [pc, #220]	@ (8019234 <mem_free+0x100>)
 8019156:	f00c f9c5 	bl	80254e4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801915a:	f00b f929 	bl	80243b0 <sys_arch_protect>
 801915e:	60f8      	str	r0, [r7, #12]
 8019160:	68f8      	ldr	r0, [r7, #12]
 8019162:	f00b f933 	bl	80243cc <sys_arch_unprotect>
    return;
 8019166:	e05e      	b.n	8019226 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	3b08      	subs	r3, #8
 801916c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801916e:	4b32      	ldr	r3, [pc, #200]	@ (8019238 <mem_free+0x104>)
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	69fa      	ldr	r2, [r7, #28]
 8019174:	429a      	cmp	r2, r3
 8019176:	d306      	bcc.n	8019186 <mem_free+0x52>
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	f103 020c 	add.w	r2, r3, #12
 801917e:	4b2f      	ldr	r3, [pc, #188]	@ (801923c <mem_free+0x108>)
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	429a      	cmp	r2, r3
 8019184:	d90d      	bls.n	80191a2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8019186:	4b29      	ldr	r3, [pc, #164]	@ (801922c <mem_free+0xf8>)
 8019188:	f240 227f 	movw	r2, #639	@ 0x27f
 801918c:	492c      	ldr	r1, [pc, #176]	@ (8019240 <mem_free+0x10c>)
 801918e:	4829      	ldr	r0, [pc, #164]	@ (8019234 <mem_free+0x100>)
 8019190:	f00c f9a8 	bl	80254e4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8019194:	f00b f90c 	bl	80243b0 <sys_arch_protect>
 8019198:	6138      	str	r0, [r7, #16]
 801919a:	6938      	ldr	r0, [r7, #16]
 801919c:	f00b f916 	bl	80243cc <sys_arch_unprotect>
    return;
 80191a0:	e041      	b.n	8019226 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80191a2:	4828      	ldr	r0, [pc, #160]	@ (8019244 <mem_free+0x110>)
 80191a4:	f00b f8c2 	bl	802432c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80191a8:	69fb      	ldr	r3, [r7, #28]
 80191aa:	791b      	ldrb	r3, [r3, #4]
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d110      	bne.n	80191d2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80191b0:	4b1e      	ldr	r3, [pc, #120]	@ (801922c <mem_free+0xf8>)
 80191b2:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80191b6:	4924      	ldr	r1, [pc, #144]	@ (8019248 <mem_free+0x114>)
 80191b8:	481e      	ldr	r0, [pc, #120]	@ (8019234 <mem_free+0x100>)
 80191ba:	f00c f993 	bl	80254e4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80191be:	4821      	ldr	r0, [pc, #132]	@ (8019244 <mem_free+0x110>)
 80191c0:	f00b f8c3 	bl	802434a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80191c4:	f00b f8f4 	bl	80243b0 <sys_arch_protect>
 80191c8:	6178      	str	r0, [r7, #20]
 80191ca:	6978      	ldr	r0, [r7, #20]
 80191cc:	f00b f8fe 	bl	80243cc <sys_arch_unprotect>
    return;
 80191d0:	e029      	b.n	8019226 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80191d2:	69f8      	ldr	r0, [r7, #28]
 80191d4:	f7ff ff72 	bl	80190bc <mem_link_valid>
 80191d8:	4603      	mov	r3, r0
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d110      	bne.n	8019200 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80191de:	4b13      	ldr	r3, [pc, #76]	@ (801922c <mem_free+0xf8>)
 80191e0:	f240 2295 	movw	r2, #661	@ 0x295
 80191e4:	4919      	ldr	r1, [pc, #100]	@ (801924c <mem_free+0x118>)
 80191e6:	4813      	ldr	r0, [pc, #76]	@ (8019234 <mem_free+0x100>)
 80191e8:	f00c f97c 	bl	80254e4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80191ec:	4815      	ldr	r0, [pc, #84]	@ (8019244 <mem_free+0x110>)
 80191ee:	f00b f8ac 	bl	802434a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80191f2:	f00b f8dd 	bl	80243b0 <sys_arch_protect>
 80191f6:	61b8      	str	r0, [r7, #24]
 80191f8:	69b8      	ldr	r0, [r7, #24]
 80191fa:	f00b f8e7 	bl	80243cc <sys_arch_unprotect>
    return;
 80191fe:	e012      	b.n	8019226 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8019200:	69fb      	ldr	r3, [r7, #28]
 8019202:	2200      	movs	r2, #0
 8019204:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8019206:	4b12      	ldr	r3, [pc, #72]	@ (8019250 <mem_free+0x11c>)
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	69fa      	ldr	r2, [r7, #28]
 801920c:	429a      	cmp	r2, r3
 801920e:	d202      	bcs.n	8019216 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8019210:	4a0f      	ldr	r2, [pc, #60]	@ (8019250 <mem_free+0x11c>)
 8019212:	69fb      	ldr	r3, [r7, #28]
 8019214:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8019216:	69f8      	ldr	r0, [r7, #28]
 8019218:	f7ff fe60 	bl	8018edc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801921c:	4809      	ldr	r0, [pc, #36]	@ (8019244 <mem_free+0x110>)
 801921e:	f00b f894 	bl	802434a <sys_mutex_unlock>
 8019222:	e000      	b.n	8019226 <mem_free+0xf2>
    return;
 8019224:	bf00      	nop
}
 8019226:	3720      	adds	r7, #32
 8019228:	46bd      	mov	sp, r7
 801922a:	bd80      	pop	{r7, pc}
 801922c:	0802a58c 	.word	0x0802a58c
 8019230:	0802a67c 	.word	0x0802a67c
 8019234:	0802a5d4 	.word	0x0802a5d4
 8019238:	24008d7c 	.word	0x24008d7c
 801923c:	24008d80 	.word	0x24008d80
 8019240:	0802a6a0 	.word	0x0802a6a0
 8019244:	24008d84 	.word	0x24008d84
 8019248:	0802a6bc 	.word	0x0802a6bc
 801924c:	0802a6e4 	.word	0x0802a6e4
 8019250:	24008d88 	.word	0x24008d88

08019254 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8019254:	b580      	push	{r7, lr}
 8019256:	b088      	sub	sp, #32
 8019258:	af00      	add	r7, sp, #0
 801925a:	6078      	str	r0, [r7, #4]
 801925c:	460b      	mov	r3, r1
 801925e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8019260:	887b      	ldrh	r3, [r7, #2]
 8019262:	3303      	adds	r3, #3
 8019264:	b29b      	uxth	r3, r3
 8019266:	f023 0303 	bic.w	r3, r3, #3
 801926a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801926c:	8bfb      	ldrh	r3, [r7, #30]
 801926e:	2b0b      	cmp	r3, #11
 8019270:	d801      	bhi.n	8019276 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8019272:	230c      	movs	r3, #12
 8019274:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8019276:	8bfb      	ldrh	r3, [r7, #30]
 8019278:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801927c:	d803      	bhi.n	8019286 <mem_trim+0x32>
 801927e:	8bfa      	ldrh	r2, [r7, #30]
 8019280:	887b      	ldrh	r3, [r7, #2]
 8019282:	429a      	cmp	r2, r3
 8019284:	d201      	bcs.n	801928a <mem_trim+0x36>
    return NULL;
 8019286:	2300      	movs	r3, #0
 8019288:	e0d8      	b.n	801943c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801928a:	4b6e      	ldr	r3, [pc, #440]	@ (8019444 <mem_trim+0x1f0>)
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	687a      	ldr	r2, [r7, #4]
 8019290:	429a      	cmp	r2, r3
 8019292:	d304      	bcc.n	801929e <mem_trim+0x4a>
 8019294:	4b6c      	ldr	r3, [pc, #432]	@ (8019448 <mem_trim+0x1f4>)
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	687a      	ldr	r2, [r7, #4]
 801929a:	429a      	cmp	r2, r3
 801929c:	d306      	bcc.n	80192ac <mem_trim+0x58>
 801929e:	4b6b      	ldr	r3, [pc, #428]	@ (801944c <mem_trim+0x1f8>)
 80192a0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80192a4:	496a      	ldr	r1, [pc, #424]	@ (8019450 <mem_trim+0x1fc>)
 80192a6:	486b      	ldr	r0, [pc, #428]	@ (8019454 <mem_trim+0x200>)
 80192a8:	f00c f91c 	bl	80254e4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80192ac:	4b65      	ldr	r3, [pc, #404]	@ (8019444 <mem_trim+0x1f0>)
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	687a      	ldr	r2, [r7, #4]
 80192b2:	429a      	cmp	r2, r3
 80192b4:	d304      	bcc.n	80192c0 <mem_trim+0x6c>
 80192b6:	4b64      	ldr	r3, [pc, #400]	@ (8019448 <mem_trim+0x1f4>)
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	687a      	ldr	r2, [r7, #4]
 80192bc:	429a      	cmp	r2, r3
 80192be:	d307      	bcc.n	80192d0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80192c0:	f00b f876 	bl	80243b0 <sys_arch_protect>
 80192c4:	60b8      	str	r0, [r7, #8]
 80192c6:	68b8      	ldr	r0, [r7, #8]
 80192c8:	f00b f880 	bl	80243cc <sys_arch_unprotect>
    return rmem;
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	e0b5      	b.n	801943c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	3b08      	subs	r3, #8
 80192d4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80192d6:	69b8      	ldr	r0, [r7, #24]
 80192d8:	f7ff fdee 	bl	8018eb8 <mem_to_ptr>
 80192dc:	4603      	mov	r3, r0
 80192de:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80192e0:	69bb      	ldr	r3, [r7, #24]
 80192e2:	881a      	ldrh	r2, [r3, #0]
 80192e4:	8afb      	ldrh	r3, [r7, #22]
 80192e6:	1ad3      	subs	r3, r2, r3
 80192e8:	b29b      	uxth	r3, r3
 80192ea:	3b08      	subs	r3, #8
 80192ec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80192ee:	8bfa      	ldrh	r2, [r7, #30]
 80192f0:	8abb      	ldrh	r3, [r7, #20]
 80192f2:	429a      	cmp	r2, r3
 80192f4:	d906      	bls.n	8019304 <mem_trim+0xb0>
 80192f6:	4b55      	ldr	r3, [pc, #340]	@ (801944c <mem_trim+0x1f8>)
 80192f8:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80192fc:	4956      	ldr	r1, [pc, #344]	@ (8019458 <mem_trim+0x204>)
 80192fe:	4855      	ldr	r0, [pc, #340]	@ (8019454 <mem_trim+0x200>)
 8019300:	f00c f8f0 	bl	80254e4 <iprintf>
  if (newsize > size) {
 8019304:	8bfa      	ldrh	r2, [r7, #30]
 8019306:	8abb      	ldrh	r3, [r7, #20]
 8019308:	429a      	cmp	r2, r3
 801930a:	d901      	bls.n	8019310 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801930c:	2300      	movs	r3, #0
 801930e:	e095      	b.n	801943c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8019310:	8bfa      	ldrh	r2, [r7, #30]
 8019312:	8abb      	ldrh	r3, [r7, #20]
 8019314:	429a      	cmp	r2, r3
 8019316:	d101      	bne.n	801931c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	e08f      	b.n	801943c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801931c:	484f      	ldr	r0, [pc, #316]	@ (801945c <mem_trim+0x208>)
 801931e:	f00b f805 	bl	802432c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8019322:	69bb      	ldr	r3, [r7, #24]
 8019324:	881b      	ldrh	r3, [r3, #0]
 8019326:	4618      	mov	r0, r3
 8019328:	f7ff fdb4 	bl	8018e94 <ptr_to_mem>
 801932c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801932e:	693b      	ldr	r3, [r7, #16]
 8019330:	791b      	ldrb	r3, [r3, #4]
 8019332:	2b00      	cmp	r3, #0
 8019334:	d13f      	bne.n	80193b6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8019336:	69bb      	ldr	r3, [r7, #24]
 8019338:	881b      	ldrh	r3, [r3, #0]
 801933a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801933e:	d106      	bne.n	801934e <mem_trim+0xfa>
 8019340:	4b42      	ldr	r3, [pc, #264]	@ (801944c <mem_trim+0x1f8>)
 8019342:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8019346:	4946      	ldr	r1, [pc, #280]	@ (8019460 <mem_trim+0x20c>)
 8019348:	4842      	ldr	r0, [pc, #264]	@ (8019454 <mem_trim+0x200>)
 801934a:	f00c f8cb 	bl	80254e4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801934e:	693b      	ldr	r3, [r7, #16]
 8019350:	881b      	ldrh	r3, [r3, #0]
 8019352:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019354:	8afa      	ldrh	r2, [r7, #22]
 8019356:	8bfb      	ldrh	r3, [r7, #30]
 8019358:	4413      	add	r3, r2
 801935a:	b29b      	uxth	r3, r3
 801935c:	3308      	adds	r3, #8
 801935e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8019360:	4b40      	ldr	r3, [pc, #256]	@ (8019464 <mem_trim+0x210>)
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	693a      	ldr	r2, [r7, #16]
 8019366:	429a      	cmp	r2, r3
 8019368:	d106      	bne.n	8019378 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801936a:	89fb      	ldrh	r3, [r7, #14]
 801936c:	4618      	mov	r0, r3
 801936e:	f7ff fd91 	bl	8018e94 <ptr_to_mem>
 8019372:	4603      	mov	r3, r0
 8019374:	4a3b      	ldr	r2, [pc, #236]	@ (8019464 <mem_trim+0x210>)
 8019376:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8019378:	89fb      	ldrh	r3, [r7, #14]
 801937a:	4618      	mov	r0, r3
 801937c:	f7ff fd8a 	bl	8018e94 <ptr_to_mem>
 8019380:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8019382:	693b      	ldr	r3, [r7, #16]
 8019384:	2200      	movs	r2, #0
 8019386:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8019388:	693b      	ldr	r3, [r7, #16]
 801938a:	89ba      	ldrh	r2, [r7, #12]
 801938c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801938e:	693b      	ldr	r3, [r7, #16]
 8019390:	8afa      	ldrh	r2, [r7, #22]
 8019392:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8019394:	69bb      	ldr	r3, [r7, #24]
 8019396:	89fa      	ldrh	r2, [r7, #14]
 8019398:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801939a:	693b      	ldr	r3, [r7, #16]
 801939c:	881b      	ldrh	r3, [r3, #0]
 801939e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80193a2:	d047      	beq.n	8019434 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80193a4:	693b      	ldr	r3, [r7, #16]
 80193a6:	881b      	ldrh	r3, [r3, #0]
 80193a8:	4618      	mov	r0, r3
 80193aa:	f7ff fd73 	bl	8018e94 <ptr_to_mem>
 80193ae:	4602      	mov	r2, r0
 80193b0:	89fb      	ldrh	r3, [r7, #14]
 80193b2:	8053      	strh	r3, [r2, #2]
 80193b4:	e03e      	b.n	8019434 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80193b6:	8bfb      	ldrh	r3, [r7, #30]
 80193b8:	f103 0214 	add.w	r2, r3, #20
 80193bc:	8abb      	ldrh	r3, [r7, #20]
 80193be:	429a      	cmp	r2, r3
 80193c0:	d838      	bhi.n	8019434 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80193c2:	8afa      	ldrh	r2, [r7, #22]
 80193c4:	8bfb      	ldrh	r3, [r7, #30]
 80193c6:	4413      	add	r3, r2
 80193c8:	b29b      	uxth	r3, r3
 80193ca:	3308      	adds	r3, #8
 80193cc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80193ce:	69bb      	ldr	r3, [r7, #24]
 80193d0:	881b      	ldrh	r3, [r3, #0]
 80193d2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80193d6:	d106      	bne.n	80193e6 <mem_trim+0x192>
 80193d8:	4b1c      	ldr	r3, [pc, #112]	@ (801944c <mem_trim+0x1f8>)
 80193da:	f240 3216 	movw	r2, #790	@ 0x316
 80193de:	4920      	ldr	r1, [pc, #128]	@ (8019460 <mem_trim+0x20c>)
 80193e0:	481c      	ldr	r0, [pc, #112]	@ (8019454 <mem_trim+0x200>)
 80193e2:	f00c f87f 	bl	80254e4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80193e6:	89fb      	ldrh	r3, [r7, #14]
 80193e8:	4618      	mov	r0, r3
 80193ea:	f7ff fd53 	bl	8018e94 <ptr_to_mem>
 80193ee:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80193f0:	4b1c      	ldr	r3, [pc, #112]	@ (8019464 <mem_trim+0x210>)
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	693a      	ldr	r2, [r7, #16]
 80193f6:	429a      	cmp	r2, r3
 80193f8:	d202      	bcs.n	8019400 <mem_trim+0x1ac>
      lfree = mem2;
 80193fa:	4a1a      	ldr	r2, [pc, #104]	@ (8019464 <mem_trim+0x210>)
 80193fc:	693b      	ldr	r3, [r7, #16]
 80193fe:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8019400:	693b      	ldr	r3, [r7, #16]
 8019402:	2200      	movs	r2, #0
 8019404:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8019406:	69bb      	ldr	r3, [r7, #24]
 8019408:	881a      	ldrh	r2, [r3, #0]
 801940a:	693b      	ldr	r3, [r7, #16]
 801940c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801940e:	693b      	ldr	r3, [r7, #16]
 8019410:	8afa      	ldrh	r2, [r7, #22]
 8019412:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8019414:	69bb      	ldr	r3, [r7, #24]
 8019416:	89fa      	ldrh	r2, [r7, #14]
 8019418:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801941a:	693b      	ldr	r3, [r7, #16]
 801941c:	881b      	ldrh	r3, [r3, #0]
 801941e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8019422:	d007      	beq.n	8019434 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8019424:	693b      	ldr	r3, [r7, #16]
 8019426:	881b      	ldrh	r3, [r3, #0]
 8019428:	4618      	mov	r0, r3
 801942a:	f7ff fd33 	bl	8018e94 <ptr_to_mem>
 801942e:	4602      	mov	r2, r0
 8019430:	89fb      	ldrh	r3, [r7, #14]
 8019432:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8019434:	4809      	ldr	r0, [pc, #36]	@ (801945c <mem_trim+0x208>)
 8019436:	f00a ff88 	bl	802434a <sys_mutex_unlock>
  return rmem;
 801943a:	687b      	ldr	r3, [r7, #4]
}
 801943c:	4618      	mov	r0, r3
 801943e:	3720      	adds	r7, #32
 8019440:	46bd      	mov	sp, r7
 8019442:	bd80      	pop	{r7, pc}
 8019444:	24008d7c 	.word	0x24008d7c
 8019448:	24008d80 	.word	0x24008d80
 801944c:	0802a58c 	.word	0x0802a58c
 8019450:	0802a718 	.word	0x0802a718
 8019454:	0802a5d4 	.word	0x0802a5d4
 8019458:	0802a730 	.word	0x0802a730
 801945c:	24008d84 	.word	0x24008d84
 8019460:	0802a750 	.word	0x0802a750
 8019464:	24008d88 	.word	0x24008d88

08019468 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8019468:	b580      	push	{r7, lr}
 801946a:	b088      	sub	sp, #32
 801946c:	af00      	add	r7, sp, #0
 801946e:	4603      	mov	r3, r0
 8019470:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8019472:	88fb      	ldrh	r3, [r7, #6]
 8019474:	2b00      	cmp	r3, #0
 8019476:	d101      	bne.n	801947c <mem_malloc+0x14>
    return NULL;
 8019478:	2300      	movs	r3, #0
 801947a:	e0e2      	b.n	8019642 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801947c:	88fb      	ldrh	r3, [r7, #6]
 801947e:	3303      	adds	r3, #3
 8019480:	b29b      	uxth	r3, r3
 8019482:	f023 0303 	bic.w	r3, r3, #3
 8019486:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8019488:	8bbb      	ldrh	r3, [r7, #28]
 801948a:	2b0b      	cmp	r3, #11
 801948c:	d801      	bhi.n	8019492 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801948e:	230c      	movs	r3, #12
 8019490:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8019492:	8bbb      	ldrh	r3, [r7, #28]
 8019494:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8019498:	d803      	bhi.n	80194a2 <mem_malloc+0x3a>
 801949a:	8bba      	ldrh	r2, [r7, #28]
 801949c:	88fb      	ldrh	r3, [r7, #6]
 801949e:	429a      	cmp	r2, r3
 80194a0:	d201      	bcs.n	80194a6 <mem_malloc+0x3e>
    return NULL;
 80194a2:	2300      	movs	r3, #0
 80194a4:	e0cd      	b.n	8019642 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80194a6:	4869      	ldr	r0, [pc, #420]	@ (801964c <mem_malloc+0x1e4>)
 80194a8:	f00a ff40 	bl	802432c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80194ac:	4b68      	ldr	r3, [pc, #416]	@ (8019650 <mem_malloc+0x1e8>)
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	4618      	mov	r0, r3
 80194b2:	f7ff fd01 	bl	8018eb8 <mem_to_ptr>
 80194b6:	4603      	mov	r3, r0
 80194b8:	83fb      	strh	r3, [r7, #30]
 80194ba:	e0b7      	b.n	801962c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80194bc:	8bfb      	ldrh	r3, [r7, #30]
 80194be:	4618      	mov	r0, r3
 80194c0:	f7ff fce8 	bl	8018e94 <ptr_to_mem>
 80194c4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80194c6:	697b      	ldr	r3, [r7, #20]
 80194c8:	791b      	ldrb	r3, [r3, #4]
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	f040 80a7 	bne.w	801961e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80194d0:	697b      	ldr	r3, [r7, #20]
 80194d2:	881b      	ldrh	r3, [r3, #0]
 80194d4:	461a      	mov	r2, r3
 80194d6:	8bfb      	ldrh	r3, [r7, #30]
 80194d8:	1ad3      	subs	r3, r2, r3
 80194da:	f1a3 0208 	sub.w	r2, r3, #8
 80194de:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80194e0:	429a      	cmp	r2, r3
 80194e2:	f0c0 809c 	bcc.w	801961e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80194e6:	697b      	ldr	r3, [r7, #20]
 80194e8:	881b      	ldrh	r3, [r3, #0]
 80194ea:	461a      	mov	r2, r3
 80194ec:	8bfb      	ldrh	r3, [r7, #30]
 80194ee:	1ad3      	subs	r3, r2, r3
 80194f0:	f1a3 0208 	sub.w	r2, r3, #8
 80194f4:	8bbb      	ldrh	r3, [r7, #28]
 80194f6:	3314      	adds	r3, #20
 80194f8:	429a      	cmp	r2, r3
 80194fa:	d333      	bcc.n	8019564 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80194fc:	8bfa      	ldrh	r2, [r7, #30]
 80194fe:	8bbb      	ldrh	r3, [r7, #28]
 8019500:	4413      	add	r3, r2
 8019502:	b29b      	uxth	r3, r3
 8019504:	3308      	adds	r3, #8
 8019506:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8019508:	8a7b      	ldrh	r3, [r7, #18]
 801950a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801950e:	d106      	bne.n	801951e <mem_malloc+0xb6>
 8019510:	4b50      	ldr	r3, [pc, #320]	@ (8019654 <mem_malloc+0x1ec>)
 8019512:	f240 3287 	movw	r2, #903	@ 0x387
 8019516:	4950      	ldr	r1, [pc, #320]	@ (8019658 <mem_malloc+0x1f0>)
 8019518:	4850      	ldr	r0, [pc, #320]	@ (801965c <mem_malloc+0x1f4>)
 801951a:	f00b ffe3 	bl	80254e4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801951e:	8a7b      	ldrh	r3, [r7, #18]
 8019520:	4618      	mov	r0, r3
 8019522:	f7ff fcb7 	bl	8018e94 <ptr_to_mem>
 8019526:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8019528:	68fb      	ldr	r3, [r7, #12]
 801952a:	2200      	movs	r2, #0
 801952c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801952e:	697b      	ldr	r3, [r7, #20]
 8019530:	881a      	ldrh	r2, [r3, #0]
 8019532:	68fb      	ldr	r3, [r7, #12]
 8019534:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	8bfa      	ldrh	r2, [r7, #30]
 801953a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801953c:	697b      	ldr	r3, [r7, #20]
 801953e:	8a7a      	ldrh	r2, [r7, #18]
 8019540:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8019542:	697b      	ldr	r3, [r7, #20]
 8019544:	2201      	movs	r2, #1
 8019546:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8019548:	68fb      	ldr	r3, [r7, #12]
 801954a:	881b      	ldrh	r3, [r3, #0]
 801954c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8019550:	d00b      	beq.n	801956a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8019552:	68fb      	ldr	r3, [r7, #12]
 8019554:	881b      	ldrh	r3, [r3, #0]
 8019556:	4618      	mov	r0, r3
 8019558:	f7ff fc9c 	bl	8018e94 <ptr_to_mem>
 801955c:	4602      	mov	r2, r0
 801955e:	8a7b      	ldrh	r3, [r7, #18]
 8019560:	8053      	strh	r3, [r2, #2]
 8019562:	e002      	b.n	801956a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8019564:	697b      	ldr	r3, [r7, #20]
 8019566:	2201      	movs	r2, #1
 8019568:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801956a:	4b39      	ldr	r3, [pc, #228]	@ (8019650 <mem_malloc+0x1e8>)
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	697a      	ldr	r2, [r7, #20]
 8019570:	429a      	cmp	r2, r3
 8019572:	d127      	bne.n	80195c4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8019574:	4b36      	ldr	r3, [pc, #216]	@ (8019650 <mem_malloc+0x1e8>)
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801957a:	e005      	b.n	8019588 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801957c:	69bb      	ldr	r3, [r7, #24]
 801957e:	881b      	ldrh	r3, [r3, #0]
 8019580:	4618      	mov	r0, r3
 8019582:	f7ff fc87 	bl	8018e94 <ptr_to_mem>
 8019586:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8019588:	69bb      	ldr	r3, [r7, #24]
 801958a:	791b      	ldrb	r3, [r3, #4]
 801958c:	2b00      	cmp	r3, #0
 801958e:	d004      	beq.n	801959a <mem_malloc+0x132>
 8019590:	4b33      	ldr	r3, [pc, #204]	@ (8019660 <mem_malloc+0x1f8>)
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	69ba      	ldr	r2, [r7, #24]
 8019596:	429a      	cmp	r2, r3
 8019598:	d1f0      	bne.n	801957c <mem_malloc+0x114>
          }
          lfree = cur;
 801959a:	4a2d      	ldr	r2, [pc, #180]	@ (8019650 <mem_malloc+0x1e8>)
 801959c:	69bb      	ldr	r3, [r7, #24]
 801959e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80195a0:	4b2b      	ldr	r3, [pc, #172]	@ (8019650 <mem_malloc+0x1e8>)
 80195a2:	681a      	ldr	r2, [r3, #0]
 80195a4:	4b2e      	ldr	r3, [pc, #184]	@ (8019660 <mem_malloc+0x1f8>)
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	429a      	cmp	r2, r3
 80195aa:	d00b      	beq.n	80195c4 <mem_malloc+0x15c>
 80195ac:	4b28      	ldr	r3, [pc, #160]	@ (8019650 <mem_malloc+0x1e8>)
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	791b      	ldrb	r3, [r3, #4]
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d006      	beq.n	80195c4 <mem_malloc+0x15c>
 80195b6:	4b27      	ldr	r3, [pc, #156]	@ (8019654 <mem_malloc+0x1ec>)
 80195b8:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80195bc:	4929      	ldr	r1, [pc, #164]	@ (8019664 <mem_malloc+0x1fc>)
 80195be:	4827      	ldr	r0, [pc, #156]	@ (801965c <mem_malloc+0x1f4>)
 80195c0:	f00b ff90 	bl	80254e4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80195c4:	4821      	ldr	r0, [pc, #132]	@ (801964c <mem_malloc+0x1e4>)
 80195c6:	f00a fec0 	bl	802434a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80195ca:	8bba      	ldrh	r2, [r7, #28]
 80195cc:	697b      	ldr	r3, [r7, #20]
 80195ce:	4413      	add	r3, r2
 80195d0:	3308      	adds	r3, #8
 80195d2:	4a23      	ldr	r2, [pc, #140]	@ (8019660 <mem_malloc+0x1f8>)
 80195d4:	6812      	ldr	r2, [r2, #0]
 80195d6:	4293      	cmp	r3, r2
 80195d8:	d906      	bls.n	80195e8 <mem_malloc+0x180>
 80195da:	4b1e      	ldr	r3, [pc, #120]	@ (8019654 <mem_malloc+0x1ec>)
 80195dc:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80195e0:	4921      	ldr	r1, [pc, #132]	@ (8019668 <mem_malloc+0x200>)
 80195e2:	481e      	ldr	r0, [pc, #120]	@ (801965c <mem_malloc+0x1f4>)
 80195e4:	f00b ff7e 	bl	80254e4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80195e8:	697b      	ldr	r3, [r7, #20]
 80195ea:	f003 0303 	and.w	r3, r3, #3
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d006      	beq.n	8019600 <mem_malloc+0x198>
 80195f2:	4b18      	ldr	r3, [pc, #96]	@ (8019654 <mem_malloc+0x1ec>)
 80195f4:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80195f8:	491c      	ldr	r1, [pc, #112]	@ (801966c <mem_malloc+0x204>)
 80195fa:	4818      	ldr	r0, [pc, #96]	@ (801965c <mem_malloc+0x1f4>)
 80195fc:	f00b ff72 	bl	80254e4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8019600:	697b      	ldr	r3, [r7, #20]
 8019602:	f003 0303 	and.w	r3, r3, #3
 8019606:	2b00      	cmp	r3, #0
 8019608:	d006      	beq.n	8019618 <mem_malloc+0x1b0>
 801960a:	4b12      	ldr	r3, [pc, #72]	@ (8019654 <mem_malloc+0x1ec>)
 801960c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8019610:	4917      	ldr	r1, [pc, #92]	@ (8019670 <mem_malloc+0x208>)
 8019612:	4812      	ldr	r0, [pc, #72]	@ (801965c <mem_malloc+0x1f4>)
 8019614:	f00b ff66 	bl	80254e4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8019618:	697b      	ldr	r3, [r7, #20]
 801961a:	3308      	adds	r3, #8
 801961c:	e011      	b.n	8019642 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801961e:	8bfb      	ldrh	r3, [r7, #30]
 8019620:	4618      	mov	r0, r3
 8019622:	f7ff fc37 	bl	8018e94 <ptr_to_mem>
 8019626:	4603      	mov	r3, r0
 8019628:	881b      	ldrh	r3, [r3, #0]
 801962a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801962c:	8bfa      	ldrh	r2, [r7, #30]
 801962e:	8bbb      	ldrh	r3, [r7, #28]
 8019630:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 8019634:	429a      	cmp	r2, r3
 8019636:	f4ff af41 	bcc.w	80194bc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801963a:	4804      	ldr	r0, [pc, #16]	@ (801964c <mem_malloc+0x1e4>)
 801963c:	f00a fe85 	bl	802434a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8019640:	2300      	movs	r3, #0
}
 8019642:	4618      	mov	r0, r3
 8019644:	3720      	adds	r7, #32
 8019646:	46bd      	mov	sp, r7
 8019648:	bd80      	pop	{r7, pc}
 801964a:	bf00      	nop
 801964c:	24008d84 	.word	0x24008d84
 8019650:	24008d88 	.word	0x24008d88
 8019654:	0802a58c 	.word	0x0802a58c
 8019658:	0802a750 	.word	0x0802a750
 801965c:	0802a5d4 	.word	0x0802a5d4
 8019660:	24008d80 	.word	0x24008d80
 8019664:	0802a764 	.word	0x0802a764
 8019668:	0802a780 	.word	0x0802a780
 801966c:	0802a7b0 	.word	0x0802a7b0
 8019670:	0802a7e0 	.word	0x0802a7e0

08019674 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8019674:	b480      	push	{r7}
 8019676:	b085      	sub	sp, #20
 8019678:	af00      	add	r7, sp, #0
 801967a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	689b      	ldr	r3, [r3, #8]
 8019680:	2200      	movs	r2, #0
 8019682:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	685b      	ldr	r3, [r3, #4]
 8019688:	3303      	adds	r3, #3
 801968a:	f023 0303 	bic.w	r3, r3, #3
 801968e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8019690:	2300      	movs	r3, #0
 8019692:	60fb      	str	r3, [r7, #12]
 8019694:	e011      	b.n	80196ba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	689b      	ldr	r3, [r3, #8]
 801969a:	681a      	ldr	r2, [r3, #0]
 801969c:	68bb      	ldr	r3, [r7, #8]
 801969e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	689b      	ldr	r3, [r3, #8]
 80196a4:	68ba      	ldr	r2, [r7, #8]
 80196a6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	881b      	ldrh	r3, [r3, #0]
 80196ac:	461a      	mov	r2, r3
 80196ae:	68bb      	ldr	r3, [r7, #8]
 80196b0:	4413      	add	r3, r2
 80196b2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	3301      	adds	r3, #1
 80196b8:	60fb      	str	r3, [r7, #12]
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	885b      	ldrh	r3, [r3, #2]
 80196be:	461a      	mov	r2, r3
 80196c0:	68fb      	ldr	r3, [r7, #12]
 80196c2:	4293      	cmp	r3, r2
 80196c4:	dbe7      	blt.n	8019696 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80196c6:	bf00      	nop
 80196c8:	bf00      	nop
 80196ca:	3714      	adds	r7, #20
 80196cc:	46bd      	mov	sp, r7
 80196ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196d2:	4770      	bx	lr

080196d4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80196d4:	b580      	push	{r7, lr}
 80196d6:	b082      	sub	sp, #8
 80196d8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80196da:	2300      	movs	r3, #0
 80196dc:	80fb      	strh	r3, [r7, #6]
 80196de:	e009      	b.n	80196f4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80196e0:	88fb      	ldrh	r3, [r7, #6]
 80196e2:	4a08      	ldr	r2, [pc, #32]	@ (8019704 <memp_init+0x30>)
 80196e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80196e8:	4618      	mov	r0, r3
 80196ea:	f7ff ffc3 	bl	8019674 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80196ee:	88fb      	ldrh	r3, [r7, #6]
 80196f0:	3301      	adds	r3, #1
 80196f2:	80fb      	strh	r3, [r7, #6]
 80196f4:	88fb      	ldrh	r3, [r7, #6]
 80196f6:	2b0c      	cmp	r3, #12
 80196f8:	d9f2      	bls.n	80196e0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80196fa:	bf00      	nop
 80196fc:	bf00      	nop
 80196fe:	3708      	adds	r7, #8
 8019700:	46bd      	mov	sp, r7
 8019702:	bd80      	pop	{r7, pc}
 8019704:	0802d0e0 	.word	0x0802d0e0

08019708 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8019708:	b580      	push	{r7, lr}
 801970a:	b084      	sub	sp, #16
 801970c:	af00      	add	r7, sp, #0
 801970e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8019710:	f00a fe4e 	bl	80243b0 <sys_arch_protect>
 8019714:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	689b      	ldr	r3, [r3, #8]
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801971e:	68bb      	ldr	r3, [r7, #8]
 8019720:	2b00      	cmp	r3, #0
 8019722:	d015      	beq.n	8019750 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	689b      	ldr	r3, [r3, #8]
 8019728:	68ba      	ldr	r2, [r7, #8]
 801972a:	6812      	ldr	r2, [r2, #0]
 801972c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801972e:	68bb      	ldr	r3, [r7, #8]
 8019730:	f003 0303 	and.w	r3, r3, #3
 8019734:	2b00      	cmp	r3, #0
 8019736:	d006      	beq.n	8019746 <do_memp_malloc_pool+0x3e>
 8019738:	4b09      	ldr	r3, [pc, #36]	@ (8019760 <do_memp_malloc_pool+0x58>)
 801973a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 801973e:	4909      	ldr	r1, [pc, #36]	@ (8019764 <do_memp_malloc_pool+0x5c>)
 8019740:	4809      	ldr	r0, [pc, #36]	@ (8019768 <do_memp_malloc_pool+0x60>)
 8019742:	f00b fecf 	bl	80254e4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8019746:	68f8      	ldr	r0, [r7, #12]
 8019748:	f00a fe40 	bl	80243cc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801974c:	68bb      	ldr	r3, [r7, #8]
 801974e:	e003      	b.n	8019758 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8019750:	68f8      	ldr	r0, [r7, #12]
 8019752:	f00a fe3b 	bl	80243cc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8019756:	2300      	movs	r3, #0
}
 8019758:	4618      	mov	r0, r3
 801975a:	3710      	adds	r7, #16
 801975c:	46bd      	mov	sp, r7
 801975e:	bd80      	pop	{r7, pc}
 8019760:	0802a804 	.word	0x0802a804
 8019764:	0802a834 	.word	0x0802a834
 8019768:	0802a858 	.word	0x0802a858

0801976c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801976c:	b580      	push	{r7, lr}
 801976e:	b082      	sub	sp, #8
 8019770:	af00      	add	r7, sp, #0
 8019772:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	2b00      	cmp	r3, #0
 8019778:	d106      	bne.n	8019788 <memp_malloc_pool+0x1c>
 801977a:	4b0a      	ldr	r3, [pc, #40]	@ (80197a4 <memp_malloc_pool+0x38>)
 801977c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8019780:	4909      	ldr	r1, [pc, #36]	@ (80197a8 <memp_malloc_pool+0x3c>)
 8019782:	480a      	ldr	r0, [pc, #40]	@ (80197ac <memp_malloc_pool+0x40>)
 8019784:	f00b feae 	bl	80254e4 <iprintf>
  if (desc == NULL) {
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d101      	bne.n	8019792 <memp_malloc_pool+0x26>
    return NULL;
 801978e:	2300      	movs	r3, #0
 8019790:	e003      	b.n	801979a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8019792:	6878      	ldr	r0, [r7, #4]
 8019794:	f7ff ffb8 	bl	8019708 <do_memp_malloc_pool>
 8019798:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801979a:	4618      	mov	r0, r3
 801979c:	3708      	adds	r7, #8
 801979e:	46bd      	mov	sp, r7
 80197a0:	bd80      	pop	{r7, pc}
 80197a2:	bf00      	nop
 80197a4:	0802a804 	.word	0x0802a804
 80197a8:	0802a880 	.word	0x0802a880
 80197ac:	0802a858 	.word	0x0802a858

080197b0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80197b0:	b580      	push	{r7, lr}
 80197b2:	b084      	sub	sp, #16
 80197b4:	af00      	add	r7, sp, #0
 80197b6:	4603      	mov	r3, r0
 80197b8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80197ba:	79fb      	ldrb	r3, [r7, #7]
 80197bc:	2b0c      	cmp	r3, #12
 80197be:	d908      	bls.n	80197d2 <memp_malloc+0x22>
 80197c0:	4b0a      	ldr	r3, [pc, #40]	@ (80197ec <memp_malloc+0x3c>)
 80197c2:	f240 1257 	movw	r2, #343	@ 0x157
 80197c6:	490a      	ldr	r1, [pc, #40]	@ (80197f0 <memp_malloc+0x40>)
 80197c8:	480a      	ldr	r0, [pc, #40]	@ (80197f4 <memp_malloc+0x44>)
 80197ca:	f00b fe8b 	bl	80254e4 <iprintf>
 80197ce:	2300      	movs	r3, #0
 80197d0:	e008      	b.n	80197e4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80197d2:	79fb      	ldrb	r3, [r7, #7]
 80197d4:	4a08      	ldr	r2, [pc, #32]	@ (80197f8 <memp_malloc+0x48>)
 80197d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80197da:	4618      	mov	r0, r3
 80197dc:	f7ff ff94 	bl	8019708 <do_memp_malloc_pool>
 80197e0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80197e2:	68fb      	ldr	r3, [r7, #12]
}
 80197e4:	4618      	mov	r0, r3
 80197e6:	3710      	adds	r7, #16
 80197e8:	46bd      	mov	sp, r7
 80197ea:	bd80      	pop	{r7, pc}
 80197ec:	0802a804 	.word	0x0802a804
 80197f0:	0802a894 	.word	0x0802a894
 80197f4:	0802a858 	.word	0x0802a858
 80197f8:	0802d0e0 	.word	0x0802d0e0

080197fc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80197fc:	b580      	push	{r7, lr}
 80197fe:	b084      	sub	sp, #16
 8019800:	af00      	add	r7, sp, #0
 8019802:	6078      	str	r0, [r7, #4]
 8019804:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8019806:	683b      	ldr	r3, [r7, #0]
 8019808:	f003 0303 	and.w	r3, r3, #3
 801980c:	2b00      	cmp	r3, #0
 801980e:	d006      	beq.n	801981e <do_memp_free_pool+0x22>
 8019810:	4b0d      	ldr	r3, [pc, #52]	@ (8019848 <do_memp_free_pool+0x4c>)
 8019812:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8019816:	490d      	ldr	r1, [pc, #52]	@ (801984c <do_memp_free_pool+0x50>)
 8019818:	480d      	ldr	r0, [pc, #52]	@ (8019850 <do_memp_free_pool+0x54>)
 801981a:	f00b fe63 	bl	80254e4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801981e:	683b      	ldr	r3, [r7, #0]
 8019820:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8019822:	f00a fdc5 	bl	80243b0 <sys_arch_protect>
 8019826:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	689b      	ldr	r3, [r3, #8]
 801982c:	681a      	ldr	r2, [r3, #0]
 801982e:	68fb      	ldr	r3, [r7, #12]
 8019830:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	689b      	ldr	r3, [r3, #8]
 8019836:	68fa      	ldr	r2, [r7, #12]
 8019838:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801983a:	68b8      	ldr	r0, [r7, #8]
 801983c:	f00a fdc6 	bl	80243cc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8019840:	bf00      	nop
 8019842:	3710      	adds	r7, #16
 8019844:	46bd      	mov	sp, r7
 8019846:	bd80      	pop	{r7, pc}
 8019848:	0802a804 	.word	0x0802a804
 801984c:	0802a8b4 	.word	0x0802a8b4
 8019850:	0802a858 	.word	0x0802a858

08019854 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8019854:	b580      	push	{r7, lr}
 8019856:	b082      	sub	sp, #8
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
 801985c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	2b00      	cmp	r3, #0
 8019862:	d106      	bne.n	8019872 <memp_free_pool+0x1e>
 8019864:	4b0a      	ldr	r3, [pc, #40]	@ (8019890 <memp_free_pool+0x3c>)
 8019866:	f240 1295 	movw	r2, #405	@ 0x195
 801986a:	490a      	ldr	r1, [pc, #40]	@ (8019894 <memp_free_pool+0x40>)
 801986c:	480a      	ldr	r0, [pc, #40]	@ (8019898 <memp_free_pool+0x44>)
 801986e:	f00b fe39 	bl	80254e4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	2b00      	cmp	r3, #0
 8019876:	d007      	beq.n	8019888 <memp_free_pool+0x34>
 8019878:	683b      	ldr	r3, [r7, #0]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d004      	beq.n	8019888 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801987e:	6839      	ldr	r1, [r7, #0]
 8019880:	6878      	ldr	r0, [r7, #4]
 8019882:	f7ff ffbb 	bl	80197fc <do_memp_free_pool>
 8019886:	e000      	b.n	801988a <memp_free_pool+0x36>
    return;
 8019888:	bf00      	nop
}
 801988a:	3708      	adds	r7, #8
 801988c:	46bd      	mov	sp, r7
 801988e:	bd80      	pop	{r7, pc}
 8019890:	0802a804 	.word	0x0802a804
 8019894:	0802a880 	.word	0x0802a880
 8019898:	0802a858 	.word	0x0802a858

0801989c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801989c:	b580      	push	{r7, lr}
 801989e:	b082      	sub	sp, #8
 80198a0:	af00      	add	r7, sp, #0
 80198a2:	4603      	mov	r3, r0
 80198a4:	6039      	str	r1, [r7, #0]
 80198a6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80198a8:	79fb      	ldrb	r3, [r7, #7]
 80198aa:	2b0c      	cmp	r3, #12
 80198ac:	d907      	bls.n	80198be <memp_free+0x22>
 80198ae:	4b0c      	ldr	r3, [pc, #48]	@ (80198e0 <memp_free+0x44>)
 80198b0:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80198b4:	490b      	ldr	r1, [pc, #44]	@ (80198e4 <memp_free+0x48>)
 80198b6:	480c      	ldr	r0, [pc, #48]	@ (80198e8 <memp_free+0x4c>)
 80198b8:	f00b fe14 	bl	80254e4 <iprintf>
 80198bc:	e00c      	b.n	80198d8 <memp_free+0x3c>

  if (mem == NULL) {
 80198be:	683b      	ldr	r3, [r7, #0]
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	d008      	beq.n	80198d6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80198c4:	79fb      	ldrb	r3, [r7, #7]
 80198c6:	4a09      	ldr	r2, [pc, #36]	@ (80198ec <memp_free+0x50>)
 80198c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80198cc:	6839      	ldr	r1, [r7, #0]
 80198ce:	4618      	mov	r0, r3
 80198d0:	f7ff ff94 	bl	80197fc <do_memp_free_pool>
 80198d4:	e000      	b.n	80198d8 <memp_free+0x3c>
    return;
 80198d6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80198d8:	3708      	adds	r7, #8
 80198da:	46bd      	mov	sp, r7
 80198dc:	bd80      	pop	{r7, pc}
 80198de:	bf00      	nop
 80198e0:	0802a804 	.word	0x0802a804
 80198e4:	0802a8d4 	.word	0x0802a8d4
 80198e8:	0802a858 	.word	0x0802a858
 80198ec:	0802d0e0 	.word	0x0802d0e0

080198f0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80198f0:	b480      	push	{r7}
 80198f2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80198f4:	bf00      	nop
 80198f6:	46bd      	mov	sp, r7
 80198f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198fc:	4770      	bx	lr
	...

08019900 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8019900:	b580      	push	{r7, lr}
 8019902:	b086      	sub	sp, #24
 8019904:	af00      	add	r7, sp, #0
 8019906:	60f8      	str	r0, [r7, #12]
 8019908:	60b9      	str	r1, [r7, #8]
 801990a:	607a      	str	r2, [r7, #4]
 801990c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	2b00      	cmp	r3, #0
 8019912:	d108      	bne.n	8019926 <netif_add+0x26>
 8019914:	4b57      	ldr	r3, [pc, #348]	@ (8019a74 <netif_add+0x174>)
 8019916:	f240 1227 	movw	r2, #295	@ 0x127
 801991a:	4957      	ldr	r1, [pc, #348]	@ (8019a78 <netif_add+0x178>)
 801991c:	4857      	ldr	r0, [pc, #348]	@ (8019a7c <netif_add+0x17c>)
 801991e:	f00b fde1 	bl	80254e4 <iprintf>
 8019922:	2300      	movs	r3, #0
 8019924:	e0a2      	b.n	8019a6c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8019926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019928:	2b00      	cmp	r3, #0
 801992a:	d108      	bne.n	801993e <netif_add+0x3e>
 801992c:	4b51      	ldr	r3, [pc, #324]	@ (8019a74 <netif_add+0x174>)
 801992e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8019932:	4953      	ldr	r1, [pc, #332]	@ (8019a80 <netif_add+0x180>)
 8019934:	4851      	ldr	r0, [pc, #324]	@ (8019a7c <netif_add+0x17c>)
 8019936:	f00b fdd5 	bl	80254e4 <iprintf>
 801993a:	2300      	movs	r3, #0
 801993c:	e096      	b.n	8019a6c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801993e:	68bb      	ldr	r3, [r7, #8]
 8019940:	2b00      	cmp	r3, #0
 8019942:	d101      	bne.n	8019948 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8019944:	4b4f      	ldr	r3, [pc, #316]	@ (8019a84 <netif_add+0x184>)
 8019946:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	2b00      	cmp	r3, #0
 801994c:	d101      	bne.n	8019952 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801994e:	4b4d      	ldr	r3, [pc, #308]	@ (8019a84 <netif_add+0x184>)
 8019950:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8019952:	683b      	ldr	r3, [r7, #0]
 8019954:	2b00      	cmp	r3, #0
 8019956:	d101      	bne.n	801995c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8019958:	4b4a      	ldr	r3, [pc, #296]	@ (8019a84 <netif_add+0x184>)
 801995a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	2200      	movs	r2, #0
 8019960:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	2200      	movs	r2, #0
 8019966:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	2200      	movs	r2, #0
 801996c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	4a45      	ldr	r2, [pc, #276]	@ (8019a88 <netif_add+0x188>)
 8019972:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8019974:	68fb      	ldr	r3, [r7, #12]
 8019976:	2200      	movs	r2, #0
 8019978:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 801997a:	68fb      	ldr	r3, [r7, #12]
 801997c:	2200      	movs	r2, #0
 801997e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8019982:	68fb      	ldr	r3, [r7, #12]
 8019984:	2200      	movs	r2, #0
 8019986:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8019988:	68fb      	ldr	r3, [r7, #12]
 801998a:	6a3a      	ldr	r2, [r7, #32]
 801998c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801998e:	4b3f      	ldr	r3, [pc, #252]	@ (8019a8c <netif_add+0x18c>)
 8019990:	781a      	ldrb	r2, [r3, #0]
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801999c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801999e:	683b      	ldr	r3, [r7, #0]
 80199a0:	687a      	ldr	r2, [r7, #4]
 80199a2:	68b9      	ldr	r1, [r7, #8]
 80199a4:	68f8      	ldr	r0, [r7, #12]
 80199a6:	f000 f913 	bl	8019bd0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80199aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199ac:	68f8      	ldr	r0, [r7, #12]
 80199ae:	4798      	blx	r3
 80199b0:	4603      	mov	r3, r0
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d001      	beq.n	80199ba <netif_add+0xba>
    return NULL;
 80199b6:	2300      	movs	r3, #0
 80199b8:	e058      	b.n	8019a6c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80199ba:	68fb      	ldr	r3, [r7, #12]
 80199bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80199c0:	2bff      	cmp	r3, #255	@ 0xff
 80199c2:	d103      	bne.n	80199cc <netif_add+0xcc>
        netif->num = 0;
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	2200      	movs	r2, #0
 80199c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80199cc:	2300      	movs	r3, #0
 80199ce:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80199d0:	4b2f      	ldr	r3, [pc, #188]	@ (8019a90 <netif_add+0x190>)
 80199d2:	681b      	ldr	r3, [r3, #0]
 80199d4:	617b      	str	r3, [r7, #20]
 80199d6:	e02b      	b.n	8019a30 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80199d8:	697a      	ldr	r2, [r7, #20]
 80199da:	68fb      	ldr	r3, [r7, #12]
 80199dc:	429a      	cmp	r2, r3
 80199de:	d106      	bne.n	80199ee <netif_add+0xee>
 80199e0:	4b24      	ldr	r3, [pc, #144]	@ (8019a74 <netif_add+0x174>)
 80199e2:	f240 128b 	movw	r2, #395	@ 0x18b
 80199e6:	492b      	ldr	r1, [pc, #172]	@ (8019a94 <netif_add+0x194>)
 80199e8:	4824      	ldr	r0, [pc, #144]	@ (8019a7c <netif_add+0x17c>)
 80199ea:	f00b fd7b 	bl	80254e4 <iprintf>
        num_netifs++;
 80199ee:	693b      	ldr	r3, [r7, #16]
 80199f0:	3301      	adds	r3, #1
 80199f2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80199f4:	693b      	ldr	r3, [r7, #16]
 80199f6:	2bff      	cmp	r3, #255	@ 0xff
 80199f8:	dd06      	ble.n	8019a08 <netif_add+0x108>
 80199fa:	4b1e      	ldr	r3, [pc, #120]	@ (8019a74 <netif_add+0x174>)
 80199fc:	f240 128d 	movw	r2, #397	@ 0x18d
 8019a00:	4925      	ldr	r1, [pc, #148]	@ (8019a98 <netif_add+0x198>)
 8019a02:	481e      	ldr	r0, [pc, #120]	@ (8019a7c <netif_add+0x17c>)
 8019a04:	f00b fd6e 	bl	80254e4 <iprintf>
        if (netif2->num == netif->num) {
 8019a08:	697b      	ldr	r3, [r7, #20]
 8019a0a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019a14:	429a      	cmp	r2, r3
 8019a16:	d108      	bne.n	8019a2a <netif_add+0x12a>
          netif->num++;
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019a1e:	3301      	adds	r3, #1
 8019a20:	b2da      	uxtb	r2, r3
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8019a28:	e005      	b.n	8019a36 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8019a2a:	697b      	ldr	r3, [r7, #20]
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	617b      	str	r3, [r7, #20]
 8019a30:	697b      	ldr	r3, [r7, #20]
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d1d0      	bne.n	80199d8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8019a36:	697b      	ldr	r3, [r7, #20]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d1be      	bne.n	80199ba <netif_add+0xba>
  }
  if (netif->num == 254) {
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019a42:	2bfe      	cmp	r3, #254	@ 0xfe
 8019a44:	d103      	bne.n	8019a4e <netif_add+0x14e>
    netif_num = 0;
 8019a46:	4b11      	ldr	r3, [pc, #68]	@ (8019a8c <netif_add+0x18c>)
 8019a48:	2200      	movs	r2, #0
 8019a4a:	701a      	strb	r2, [r3, #0]
 8019a4c:	e006      	b.n	8019a5c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019a54:	3301      	adds	r3, #1
 8019a56:	b2da      	uxtb	r2, r3
 8019a58:	4b0c      	ldr	r3, [pc, #48]	@ (8019a8c <netif_add+0x18c>)
 8019a5a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8019a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8019a90 <netif_add+0x190>)
 8019a5e:	681a      	ldr	r2, [r3, #0]
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8019a64:	4a0a      	ldr	r2, [pc, #40]	@ (8019a90 <netif_add+0x190>)
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8019a6a:	68fb      	ldr	r3, [r7, #12]
}
 8019a6c:	4618      	mov	r0, r3
 8019a6e:	3718      	adds	r7, #24
 8019a70:	46bd      	mov	sp, r7
 8019a72:	bd80      	pop	{r7, pc}
 8019a74:	0802a8f0 	.word	0x0802a8f0
 8019a78:	0802a984 	.word	0x0802a984
 8019a7c:	0802a940 	.word	0x0802a940
 8019a80:	0802a9a0 	.word	0x0802a9a0
 8019a84:	0802d154 	.word	0x0802d154
 8019a88:	08019eab 	.word	0x08019eab
 8019a8c:	2400be60 	.word	0x2400be60
 8019a90:	2400be58 	.word	0x2400be58
 8019a94:	0802a9c4 	.word	0x0802a9c4
 8019a98:	0802a9d8 	.word	0x0802a9d8

08019a9c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019a9c:	b580      	push	{r7, lr}
 8019a9e:	b082      	sub	sp, #8
 8019aa0:	af00      	add	r7, sp, #0
 8019aa2:	6078      	str	r0, [r7, #4]
 8019aa4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8019aa6:	6839      	ldr	r1, [r7, #0]
 8019aa8:	6878      	ldr	r0, [r7, #4]
 8019aaa:	f002 fdc9 	bl	801c640 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8019aae:	6839      	ldr	r1, [r7, #0]
 8019ab0:	6878      	ldr	r0, [r7, #4]
 8019ab2:	f007 fe5f 	bl	8021774 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8019ab6:	bf00      	nop
 8019ab8:	3708      	adds	r7, #8
 8019aba:	46bd      	mov	sp, r7
 8019abc:	bd80      	pop	{r7, pc}
	...

08019ac0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8019ac0:	b580      	push	{r7, lr}
 8019ac2:	b086      	sub	sp, #24
 8019ac4:	af00      	add	r7, sp, #0
 8019ac6:	60f8      	str	r0, [r7, #12]
 8019ac8:	60b9      	str	r1, [r7, #8]
 8019aca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8019acc:	68bb      	ldr	r3, [r7, #8]
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d106      	bne.n	8019ae0 <netif_do_set_ipaddr+0x20>
 8019ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8019b48 <netif_do_set_ipaddr+0x88>)
 8019ad4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8019ad8:	491c      	ldr	r1, [pc, #112]	@ (8019b4c <netif_do_set_ipaddr+0x8c>)
 8019ada:	481d      	ldr	r0, [pc, #116]	@ (8019b50 <netif_do_set_ipaddr+0x90>)
 8019adc:	f00b fd02 	bl	80254e4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	d106      	bne.n	8019af4 <netif_do_set_ipaddr+0x34>
 8019ae6:	4b18      	ldr	r3, [pc, #96]	@ (8019b48 <netif_do_set_ipaddr+0x88>)
 8019ae8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8019aec:	4917      	ldr	r1, [pc, #92]	@ (8019b4c <netif_do_set_ipaddr+0x8c>)
 8019aee:	4818      	ldr	r0, [pc, #96]	@ (8019b50 <netif_do_set_ipaddr+0x90>)
 8019af0:	f00b fcf8 	bl	80254e4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8019af4:	68bb      	ldr	r3, [r7, #8]
 8019af6:	681a      	ldr	r2, [r3, #0]
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	3304      	adds	r3, #4
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	429a      	cmp	r2, r3
 8019b00:	d01c      	beq.n	8019b3c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8019b02:	68bb      	ldr	r3, [r7, #8]
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8019b08:	68fb      	ldr	r3, [r7, #12]
 8019b0a:	3304      	adds	r3, #4
 8019b0c:	681a      	ldr	r2, [r3, #0]
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8019b12:	f107 0314 	add.w	r3, r7, #20
 8019b16:	4619      	mov	r1, r3
 8019b18:	6878      	ldr	r0, [r7, #4]
 8019b1a:	f7ff ffbf 	bl	8019a9c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8019b1e:	68bb      	ldr	r3, [r7, #8]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d002      	beq.n	8019b2a <netif_do_set_ipaddr+0x6a>
 8019b24:	68bb      	ldr	r3, [r7, #8]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	e000      	b.n	8019b2c <netif_do_set_ipaddr+0x6c>
 8019b2a:	2300      	movs	r3, #0
 8019b2c:	68fa      	ldr	r2, [r7, #12]
 8019b2e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8019b30:	2101      	movs	r1, #1
 8019b32:	68f8      	ldr	r0, [r7, #12]
 8019b34:	f000 f8d2 	bl	8019cdc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8019b38:	2301      	movs	r3, #1
 8019b3a:	e000      	b.n	8019b3e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8019b3c:	2300      	movs	r3, #0
}
 8019b3e:	4618      	mov	r0, r3
 8019b40:	3718      	adds	r7, #24
 8019b42:	46bd      	mov	sp, r7
 8019b44:	bd80      	pop	{r7, pc}
 8019b46:	bf00      	nop
 8019b48:	0802a8f0 	.word	0x0802a8f0
 8019b4c:	0802aa08 	.word	0x0802aa08
 8019b50:	0802a940 	.word	0x0802a940

08019b54 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8019b54:	b480      	push	{r7}
 8019b56:	b085      	sub	sp, #20
 8019b58:	af00      	add	r7, sp, #0
 8019b5a:	60f8      	str	r0, [r7, #12]
 8019b5c:	60b9      	str	r1, [r7, #8]
 8019b5e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8019b60:	68bb      	ldr	r3, [r7, #8]
 8019b62:	681a      	ldr	r2, [r3, #0]
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	3308      	adds	r3, #8
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	429a      	cmp	r2, r3
 8019b6c:	d00a      	beq.n	8019b84 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8019b6e:	68bb      	ldr	r3, [r7, #8]
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d002      	beq.n	8019b7a <netif_do_set_netmask+0x26>
 8019b74:	68bb      	ldr	r3, [r7, #8]
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	e000      	b.n	8019b7c <netif_do_set_netmask+0x28>
 8019b7a:	2300      	movs	r3, #0
 8019b7c:	68fa      	ldr	r2, [r7, #12]
 8019b7e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8019b80:	2301      	movs	r3, #1
 8019b82:	e000      	b.n	8019b86 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8019b84:	2300      	movs	r3, #0
}
 8019b86:	4618      	mov	r0, r3
 8019b88:	3714      	adds	r7, #20
 8019b8a:	46bd      	mov	sp, r7
 8019b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b90:	4770      	bx	lr

08019b92 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8019b92:	b480      	push	{r7}
 8019b94:	b085      	sub	sp, #20
 8019b96:	af00      	add	r7, sp, #0
 8019b98:	60f8      	str	r0, [r7, #12]
 8019b9a:	60b9      	str	r1, [r7, #8]
 8019b9c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8019b9e:	68bb      	ldr	r3, [r7, #8]
 8019ba0:	681a      	ldr	r2, [r3, #0]
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	330c      	adds	r3, #12
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	429a      	cmp	r2, r3
 8019baa:	d00a      	beq.n	8019bc2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8019bac:	68bb      	ldr	r3, [r7, #8]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d002      	beq.n	8019bb8 <netif_do_set_gw+0x26>
 8019bb2:	68bb      	ldr	r3, [r7, #8]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	e000      	b.n	8019bba <netif_do_set_gw+0x28>
 8019bb8:	2300      	movs	r3, #0
 8019bba:	68fa      	ldr	r2, [r7, #12]
 8019bbc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8019bbe:	2301      	movs	r3, #1
 8019bc0:	e000      	b.n	8019bc4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8019bc2:	2300      	movs	r3, #0
}
 8019bc4:	4618      	mov	r0, r3
 8019bc6:	3714      	adds	r7, #20
 8019bc8:	46bd      	mov	sp, r7
 8019bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bce:	4770      	bx	lr

08019bd0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8019bd0:	b580      	push	{r7, lr}
 8019bd2:	b088      	sub	sp, #32
 8019bd4:	af00      	add	r7, sp, #0
 8019bd6:	60f8      	str	r0, [r7, #12]
 8019bd8:	60b9      	str	r1, [r7, #8]
 8019bda:	607a      	str	r2, [r7, #4]
 8019bdc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8019bde:	2300      	movs	r3, #0
 8019be0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8019be2:	2300      	movs	r3, #0
 8019be4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019be6:	68bb      	ldr	r3, [r7, #8]
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d101      	bne.n	8019bf0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8019bec:	4b1c      	ldr	r3, [pc, #112]	@ (8019c60 <netif_set_addr+0x90>)
 8019bee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d101      	bne.n	8019bfa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8019bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8019c60 <netif_set_addr+0x90>)
 8019bf8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8019bfa:	683b      	ldr	r3, [r7, #0]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d101      	bne.n	8019c04 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8019c00:	4b17      	ldr	r3, [pc, #92]	@ (8019c60 <netif_set_addr+0x90>)
 8019c02:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8019c04:	68bb      	ldr	r3, [r7, #8]
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d003      	beq.n	8019c12 <netif_set_addr+0x42>
 8019c0a:	68bb      	ldr	r3, [r7, #8]
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d101      	bne.n	8019c16 <netif_set_addr+0x46>
 8019c12:	2301      	movs	r3, #1
 8019c14:	e000      	b.n	8019c18 <netif_set_addr+0x48>
 8019c16:	2300      	movs	r3, #0
 8019c18:	617b      	str	r3, [r7, #20]
  if (remove) {
 8019c1a:	697b      	ldr	r3, [r7, #20]
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d006      	beq.n	8019c2e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8019c20:	f107 0310 	add.w	r3, r7, #16
 8019c24:	461a      	mov	r2, r3
 8019c26:	68b9      	ldr	r1, [r7, #8]
 8019c28:	68f8      	ldr	r0, [r7, #12]
 8019c2a:	f7ff ff49 	bl	8019ac0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8019c2e:	69fa      	ldr	r2, [r7, #28]
 8019c30:	6879      	ldr	r1, [r7, #4]
 8019c32:	68f8      	ldr	r0, [r7, #12]
 8019c34:	f7ff ff8e 	bl	8019b54 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8019c38:	69ba      	ldr	r2, [r7, #24]
 8019c3a:	6839      	ldr	r1, [r7, #0]
 8019c3c:	68f8      	ldr	r0, [r7, #12]
 8019c3e:	f7ff ffa8 	bl	8019b92 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8019c42:	697b      	ldr	r3, [r7, #20]
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d106      	bne.n	8019c56 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8019c48:	f107 0310 	add.w	r3, r7, #16
 8019c4c:	461a      	mov	r2, r3
 8019c4e:	68b9      	ldr	r1, [r7, #8]
 8019c50:	68f8      	ldr	r0, [r7, #12]
 8019c52:	f7ff ff35 	bl	8019ac0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8019c56:	bf00      	nop
 8019c58:	3720      	adds	r7, #32
 8019c5a:	46bd      	mov	sp, r7
 8019c5c:	bd80      	pop	{r7, pc}
 8019c5e:	bf00      	nop
 8019c60:	0802d154 	.word	0x0802d154

08019c64 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8019c64:	b480      	push	{r7}
 8019c66:	b083      	sub	sp, #12
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8019c6c:	4a04      	ldr	r2, [pc, #16]	@ (8019c80 <netif_set_default+0x1c>)
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8019c72:	bf00      	nop
 8019c74:	370c      	adds	r7, #12
 8019c76:	46bd      	mov	sp, r7
 8019c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c7c:	4770      	bx	lr
 8019c7e:	bf00      	nop
 8019c80:	2400be5c 	.word	0x2400be5c

08019c84 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8019c84:	b580      	push	{r7, lr}
 8019c86:	b082      	sub	sp, #8
 8019c88:	af00      	add	r7, sp, #0
 8019c8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d107      	bne.n	8019ca2 <netif_set_up+0x1e>
 8019c92:	4b0f      	ldr	r3, [pc, #60]	@ (8019cd0 <netif_set_up+0x4c>)
 8019c94:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8019c98:	490e      	ldr	r1, [pc, #56]	@ (8019cd4 <netif_set_up+0x50>)
 8019c9a:	480f      	ldr	r0, [pc, #60]	@ (8019cd8 <netif_set_up+0x54>)
 8019c9c:	f00b fc22 	bl	80254e4 <iprintf>
 8019ca0:	e013      	b.n	8019cca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019ca8:	f003 0301 	and.w	r3, r3, #1
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d10c      	bne.n	8019cca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019cb6:	f043 0301 	orr.w	r3, r3, #1
 8019cba:	b2da      	uxtb	r2, r3
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8019cc2:	2103      	movs	r1, #3
 8019cc4:	6878      	ldr	r0, [r7, #4]
 8019cc6:	f000 f809 	bl	8019cdc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8019cca:	3708      	adds	r7, #8
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	bd80      	pop	{r7, pc}
 8019cd0:	0802a8f0 	.word	0x0802a8f0
 8019cd4:	0802aa78 	.word	0x0802aa78
 8019cd8:	0802a940 	.word	0x0802a940

08019cdc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8019cdc:	b580      	push	{r7, lr}
 8019cde:	b082      	sub	sp, #8
 8019ce0:	af00      	add	r7, sp, #0
 8019ce2:	6078      	str	r0, [r7, #4]
 8019ce4:	460b      	mov	r3, r1
 8019ce6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d106      	bne.n	8019cfc <netif_issue_reports+0x20>
 8019cee:	4b18      	ldr	r3, [pc, #96]	@ (8019d50 <netif_issue_reports+0x74>)
 8019cf0:	f240 326d 	movw	r2, #877	@ 0x36d
 8019cf4:	4917      	ldr	r1, [pc, #92]	@ (8019d54 <netif_issue_reports+0x78>)
 8019cf6:	4818      	ldr	r0, [pc, #96]	@ (8019d58 <netif_issue_reports+0x7c>)
 8019cf8:	f00b fbf4 	bl	80254e4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019d02:	f003 0304 	and.w	r3, r3, #4
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d01e      	beq.n	8019d48 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019d10:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d017      	beq.n	8019d48 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8019d18:	78fb      	ldrb	r3, [r7, #3]
 8019d1a:	f003 0301 	and.w	r3, r3, #1
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d013      	beq.n	8019d4a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	3304      	adds	r3, #4
 8019d26:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d00e      	beq.n	8019d4a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019d32:	f003 0308 	and.w	r3, r3, #8
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d007      	beq.n	8019d4a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	3304      	adds	r3, #4
 8019d3e:	4619      	mov	r1, r3
 8019d40:	6878      	ldr	r0, [r7, #4]
 8019d42:	f008 fc81 	bl	8022648 <etharp_request>
 8019d46:	e000      	b.n	8019d4a <netif_issue_reports+0x6e>
    return;
 8019d48:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8019d4a:	3708      	adds	r7, #8
 8019d4c:	46bd      	mov	sp, r7
 8019d4e:	bd80      	pop	{r7, pc}
 8019d50:	0802a8f0 	.word	0x0802a8f0
 8019d54:	0802aa94 	.word	0x0802aa94
 8019d58:	0802a940 	.word	0x0802a940

08019d5c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8019d5c:	b580      	push	{r7, lr}
 8019d5e:	b082      	sub	sp, #8
 8019d60:	af00      	add	r7, sp, #0
 8019d62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d107      	bne.n	8019d7a <netif_set_down+0x1e>
 8019d6a:	4b12      	ldr	r3, [pc, #72]	@ (8019db4 <netif_set_down+0x58>)
 8019d6c:	f240 329b 	movw	r2, #923	@ 0x39b
 8019d70:	4911      	ldr	r1, [pc, #68]	@ (8019db8 <netif_set_down+0x5c>)
 8019d72:	4812      	ldr	r0, [pc, #72]	@ (8019dbc <netif_set_down+0x60>)
 8019d74:	f00b fbb6 	bl	80254e4 <iprintf>
 8019d78:	e019      	b.n	8019dae <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019d80:	f003 0301 	and.w	r3, r3, #1
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d012      	beq.n	8019dae <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019d8e:	f023 0301 	bic.w	r3, r3, #1
 8019d92:	b2da      	uxtb	r2, r3
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019da0:	f003 0308 	and.w	r3, r3, #8
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d002      	beq.n	8019dae <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8019da8:	6878      	ldr	r0, [r7, #4]
 8019daa:	f008 f80b 	bl	8021dc4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8019dae:	3708      	adds	r7, #8
 8019db0:	46bd      	mov	sp, r7
 8019db2:	bd80      	pop	{r7, pc}
 8019db4:	0802a8f0 	.word	0x0802a8f0
 8019db8:	0802aab8 	.word	0x0802aab8
 8019dbc:	0802a940 	.word	0x0802a940

08019dc0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8019dc0:	b580      	push	{r7, lr}
 8019dc2:	b082      	sub	sp, #8
 8019dc4:	af00      	add	r7, sp, #0
 8019dc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d107      	bne.n	8019dde <netif_set_link_up+0x1e>
 8019dce:	4b13      	ldr	r3, [pc, #76]	@ (8019e1c <netif_set_link_up+0x5c>)
 8019dd0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8019dd4:	4912      	ldr	r1, [pc, #72]	@ (8019e20 <netif_set_link_up+0x60>)
 8019dd6:	4813      	ldr	r0, [pc, #76]	@ (8019e24 <netif_set_link_up+0x64>)
 8019dd8:	f00b fb84 	bl	80254e4 <iprintf>
 8019ddc:	e01b      	b.n	8019e16 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019de4:	f003 0304 	and.w	r3, r3, #4
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d114      	bne.n	8019e16 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019df2:	f043 0304 	orr.w	r3, r3, #4
 8019df6:	b2da      	uxtb	r2, r3
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8019dfe:	2103      	movs	r1, #3
 8019e00:	6878      	ldr	r0, [r7, #4]
 8019e02:	f7ff ff6b 	bl	8019cdc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	69db      	ldr	r3, [r3, #28]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d003      	beq.n	8019e16 <netif_set_link_up+0x56>
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	69db      	ldr	r3, [r3, #28]
 8019e12:	6878      	ldr	r0, [r7, #4]
 8019e14:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8019e16:	3708      	adds	r7, #8
 8019e18:	46bd      	mov	sp, r7
 8019e1a:	bd80      	pop	{r7, pc}
 8019e1c:	0802a8f0 	.word	0x0802a8f0
 8019e20:	0802aad8 	.word	0x0802aad8
 8019e24:	0802a940 	.word	0x0802a940

08019e28 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8019e28:	b580      	push	{r7, lr}
 8019e2a:	b082      	sub	sp, #8
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d107      	bne.n	8019e46 <netif_set_link_down+0x1e>
 8019e36:	4b11      	ldr	r3, [pc, #68]	@ (8019e7c <netif_set_link_down+0x54>)
 8019e38:	f240 4206 	movw	r2, #1030	@ 0x406
 8019e3c:	4910      	ldr	r1, [pc, #64]	@ (8019e80 <netif_set_link_down+0x58>)
 8019e3e:	4811      	ldr	r0, [pc, #68]	@ (8019e84 <netif_set_link_down+0x5c>)
 8019e40:	f00b fb50 	bl	80254e4 <iprintf>
 8019e44:	e017      	b.n	8019e76 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019e4c:	f003 0304 	and.w	r3, r3, #4
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d010      	beq.n	8019e76 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019e5a:	f023 0304 	bic.w	r3, r3, #4
 8019e5e:	b2da      	uxtb	r2, r3
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	69db      	ldr	r3, [r3, #28]
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d003      	beq.n	8019e76 <netif_set_link_down+0x4e>
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	69db      	ldr	r3, [r3, #28]
 8019e72:	6878      	ldr	r0, [r7, #4]
 8019e74:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8019e76:	3708      	adds	r7, #8
 8019e78:	46bd      	mov	sp, r7
 8019e7a:	bd80      	pop	{r7, pc}
 8019e7c:	0802a8f0 	.word	0x0802a8f0
 8019e80:	0802aafc 	.word	0x0802aafc
 8019e84:	0802a940 	.word	0x0802a940

08019e88 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8019e88:	b480      	push	{r7}
 8019e8a:	b083      	sub	sp, #12
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	6078      	str	r0, [r7, #4]
 8019e90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	d002      	beq.n	8019e9e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	683a      	ldr	r2, [r7, #0]
 8019e9c:	61da      	str	r2, [r3, #28]
  }
}
 8019e9e:	bf00      	nop
 8019ea0:	370c      	adds	r7, #12
 8019ea2:	46bd      	mov	sp, r7
 8019ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ea8:	4770      	bx	lr

08019eaa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8019eaa:	b480      	push	{r7}
 8019eac:	b085      	sub	sp, #20
 8019eae:	af00      	add	r7, sp, #0
 8019eb0:	60f8      	str	r0, [r7, #12]
 8019eb2:	60b9      	str	r1, [r7, #8]
 8019eb4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8019eb6:	f06f 030b 	mvn.w	r3, #11
}
 8019eba:	4618      	mov	r0, r3
 8019ebc:	3714      	adds	r7, #20
 8019ebe:	46bd      	mov	sp, r7
 8019ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ec4:	4770      	bx	lr
	...

08019ec8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8019ec8:	b480      	push	{r7}
 8019eca:	b085      	sub	sp, #20
 8019ecc:	af00      	add	r7, sp, #0
 8019ece:	4603      	mov	r3, r0
 8019ed0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8019ed2:	79fb      	ldrb	r3, [r7, #7]
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d013      	beq.n	8019f00 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8019ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8019f10 <netif_get_by_index+0x48>)
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	60fb      	str	r3, [r7, #12]
 8019ede:	e00c      	b.n	8019efa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8019ee0:	68fb      	ldr	r3, [r7, #12]
 8019ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019ee6:	3301      	adds	r3, #1
 8019ee8:	b2db      	uxtb	r3, r3
 8019eea:	79fa      	ldrb	r2, [r7, #7]
 8019eec:	429a      	cmp	r2, r3
 8019eee:	d101      	bne.n	8019ef4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	e006      	b.n	8019f02 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8019ef4:	68fb      	ldr	r3, [r7, #12]
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	60fb      	str	r3, [r7, #12]
 8019efa:	68fb      	ldr	r3, [r7, #12]
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d1ef      	bne.n	8019ee0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8019f00:	2300      	movs	r3, #0
}
 8019f02:	4618      	mov	r0, r3
 8019f04:	3714      	adds	r7, #20
 8019f06:	46bd      	mov	sp, r7
 8019f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f0c:	4770      	bx	lr
 8019f0e:	bf00      	nop
 8019f10:	2400be58 	.word	0x2400be58

08019f14 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8019f14:	b580      	push	{r7, lr}
 8019f16:	b082      	sub	sp, #8
 8019f18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8019f1a:	f00a fa49 	bl	80243b0 <sys_arch_protect>
 8019f1e:	6038      	str	r0, [r7, #0]
 8019f20:	4b0d      	ldr	r3, [pc, #52]	@ (8019f58 <pbuf_free_ooseq+0x44>)
 8019f22:	2200      	movs	r2, #0
 8019f24:	701a      	strb	r2, [r3, #0]
 8019f26:	6838      	ldr	r0, [r7, #0]
 8019f28:	f00a fa50 	bl	80243cc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8019f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8019f5c <pbuf_free_ooseq+0x48>)
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	607b      	str	r3, [r7, #4]
 8019f32:	e00a      	b.n	8019f4a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019f38:	2b00      	cmp	r3, #0
 8019f3a:	d003      	beq.n	8019f44 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8019f3c:	6878      	ldr	r0, [r7, #4]
 8019f3e:	f002 fbbd 	bl	801c6bc <tcp_free_ooseq>
      return;
 8019f42:	e005      	b.n	8019f50 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	68db      	ldr	r3, [r3, #12]
 8019f48:	607b      	str	r3, [r7, #4]
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d1f1      	bne.n	8019f34 <pbuf_free_ooseq+0x20>
    }
  }
}
 8019f50:	3708      	adds	r7, #8
 8019f52:	46bd      	mov	sp, r7
 8019f54:	bd80      	pop	{r7, pc}
 8019f56:	bf00      	nop
 8019f58:	2400be61 	.word	0x2400be61
 8019f5c:	2400be70 	.word	0x2400be70

08019f60 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8019f60:	b580      	push	{r7, lr}
 8019f62:	b082      	sub	sp, #8
 8019f64:	af00      	add	r7, sp, #0
 8019f66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8019f68:	f7ff ffd4 	bl	8019f14 <pbuf_free_ooseq>
}
 8019f6c:	bf00      	nop
 8019f6e:	3708      	adds	r7, #8
 8019f70:	46bd      	mov	sp, r7
 8019f72:	bd80      	pop	{r7, pc}

08019f74 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8019f74:	b580      	push	{r7, lr}
 8019f76:	b082      	sub	sp, #8
 8019f78:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8019f7a:	f00a fa19 	bl	80243b0 <sys_arch_protect>
 8019f7e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8019f80:	4b0f      	ldr	r3, [pc, #60]	@ (8019fc0 <pbuf_pool_is_empty+0x4c>)
 8019f82:	781b      	ldrb	r3, [r3, #0]
 8019f84:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8019f86:	4b0e      	ldr	r3, [pc, #56]	@ (8019fc0 <pbuf_pool_is_empty+0x4c>)
 8019f88:	2201      	movs	r2, #1
 8019f8a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8019f8c:	6878      	ldr	r0, [r7, #4]
 8019f8e:	f00a fa1d 	bl	80243cc <sys_arch_unprotect>

  if (!queued) {
 8019f92:	78fb      	ldrb	r3, [r7, #3]
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	d10f      	bne.n	8019fb8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8019f98:	2100      	movs	r1, #0
 8019f9a:	480a      	ldr	r0, [pc, #40]	@ (8019fc4 <pbuf_pool_is_empty+0x50>)
 8019f9c:	f7fe fdd8 	bl	8018b50 <tcpip_try_callback>
 8019fa0:	4603      	mov	r3, r0
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d008      	beq.n	8019fb8 <pbuf_pool_is_empty+0x44>
 8019fa6:	f00a fa03 	bl	80243b0 <sys_arch_protect>
 8019faa:	6078      	str	r0, [r7, #4]
 8019fac:	4b04      	ldr	r3, [pc, #16]	@ (8019fc0 <pbuf_pool_is_empty+0x4c>)
 8019fae:	2200      	movs	r2, #0
 8019fb0:	701a      	strb	r2, [r3, #0]
 8019fb2:	6878      	ldr	r0, [r7, #4]
 8019fb4:	f00a fa0a 	bl	80243cc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8019fb8:	bf00      	nop
 8019fba:	3708      	adds	r7, #8
 8019fbc:	46bd      	mov	sp, r7
 8019fbe:	bd80      	pop	{r7, pc}
 8019fc0:	2400be61 	.word	0x2400be61
 8019fc4:	08019f61 	.word	0x08019f61

08019fc8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8019fc8:	b480      	push	{r7}
 8019fca:	b085      	sub	sp, #20
 8019fcc:	af00      	add	r7, sp, #0
 8019fce:	60f8      	str	r0, [r7, #12]
 8019fd0:	60b9      	str	r1, [r7, #8]
 8019fd2:	4611      	mov	r1, r2
 8019fd4:	461a      	mov	r2, r3
 8019fd6:	460b      	mov	r3, r1
 8019fd8:	80fb      	strh	r3, [r7, #6]
 8019fda:	4613      	mov	r3, r2
 8019fdc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8019fde:	68fb      	ldr	r3, [r7, #12]
 8019fe0:	2200      	movs	r2, #0
 8019fe2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	68ba      	ldr	r2, [r7, #8]
 8019fe8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	88fa      	ldrh	r2, [r7, #6]
 8019fee:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	88ba      	ldrh	r2, [r7, #4]
 8019ff4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8019ff6:	8b3b      	ldrh	r3, [r7, #24]
 8019ff8:	b2da      	uxtb	r2, r3
 8019ffa:	68fb      	ldr	r3, [r7, #12]
 8019ffc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	7f3a      	ldrb	r2, [r7, #28]
 801a002:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801a004:	68fb      	ldr	r3, [r7, #12]
 801a006:	2201      	movs	r2, #1
 801a008:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	2200      	movs	r2, #0
 801a00e:	73da      	strb	r2, [r3, #15]
}
 801a010:	bf00      	nop
 801a012:	3714      	adds	r7, #20
 801a014:	46bd      	mov	sp, r7
 801a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a01a:	4770      	bx	lr

0801a01c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801a01c:	b580      	push	{r7, lr}
 801a01e:	b08c      	sub	sp, #48	@ 0x30
 801a020:	af02      	add	r7, sp, #8
 801a022:	4603      	mov	r3, r0
 801a024:	71fb      	strb	r3, [r7, #7]
 801a026:	460b      	mov	r3, r1
 801a028:	80bb      	strh	r3, [r7, #4]
 801a02a:	4613      	mov	r3, r2
 801a02c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801a02e:	79fb      	ldrb	r3, [r7, #7]
 801a030:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801a032:	887b      	ldrh	r3, [r7, #2]
 801a034:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801a038:	d07f      	beq.n	801a13a <pbuf_alloc+0x11e>
 801a03a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801a03e:	f300 80c8 	bgt.w	801a1d2 <pbuf_alloc+0x1b6>
 801a042:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801a046:	d010      	beq.n	801a06a <pbuf_alloc+0x4e>
 801a048:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801a04c:	f300 80c1 	bgt.w	801a1d2 <pbuf_alloc+0x1b6>
 801a050:	2b01      	cmp	r3, #1
 801a052:	d002      	beq.n	801a05a <pbuf_alloc+0x3e>
 801a054:	2b41      	cmp	r3, #65	@ 0x41
 801a056:	f040 80bc 	bne.w	801a1d2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801a05a:	887a      	ldrh	r2, [r7, #2]
 801a05c:	88bb      	ldrh	r3, [r7, #4]
 801a05e:	4619      	mov	r1, r3
 801a060:	2000      	movs	r0, #0
 801a062:	f000 f8d1 	bl	801a208 <pbuf_alloc_reference>
 801a066:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 801a068:	e0bd      	b.n	801a1e6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801a06a:	2300      	movs	r3, #0
 801a06c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 801a06e:	2300      	movs	r3, #0
 801a070:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801a072:	88bb      	ldrh	r3, [r7, #4]
 801a074:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801a076:	200c      	movs	r0, #12
 801a078:	f7ff fb9a 	bl	80197b0 <memp_malloc>
 801a07c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801a07e:	693b      	ldr	r3, [r7, #16]
 801a080:	2b00      	cmp	r3, #0
 801a082:	d109      	bne.n	801a098 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801a084:	f7ff ff76 	bl	8019f74 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801a088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d002      	beq.n	801a094 <pbuf_alloc+0x78>
            pbuf_free(p);
 801a08e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a090:	f000 fada 	bl	801a648 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801a094:	2300      	movs	r3, #0
 801a096:	e0a7      	b.n	801a1e8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801a098:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a09a:	3303      	adds	r3, #3
 801a09c:	b29b      	uxth	r3, r3
 801a09e:	f023 0303 	bic.w	r3, r3, #3
 801a0a2:	b29b      	uxth	r3, r3
 801a0a4:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 801a0a8:	b29b      	uxth	r3, r3
 801a0aa:	8b7a      	ldrh	r2, [r7, #26]
 801a0ac:	4293      	cmp	r3, r2
 801a0ae:	bf28      	it	cs
 801a0b0:	4613      	movcs	r3, r2
 801a0b2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801a0b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a0b6:	3310      	adds	r3, #16
 801a0b8:	693a      	ldr	r2, [r7, #16]
 801a0ba:	4413      	add	r3, r2
 801a0bc:	3303      	adds	r3, #3
 801a0be:	f023 0303 	bic.w	r3, r3, #3
 801a0c2:	4618      	mov	r0, r3
 801a0c4:	89f9      	ldrh	r1, [r7, #14]
 801a0c6:	8b7a      	ldrh	r2, [r7, #26]
 801a0c8:	2300      	movs	r3, #0
 801a0ca:	9301      	str	r3, [sp, #4]
 801a0cc:	887b      	ldrh	r3, [r7, #2]
 801a0ce:	9300      	str	r3, [sp, #0]
 801a0d0:	460b      	mov	r3, r1
 801a0d2:	4601      	mov	r1, r0
 801a0d4:	6938      	ldr	r0, [r7, #16]
 801a0d6:	f7ff ff77 	bl	8019fc8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801a0da:	693b      	ldr	r3, [r7, #16]
 801a0dc:	685b      	ldr	r3, [r3, #4]
 801a0de:	f003 0303 	and.w	r3, r3, #3
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d006      	beq.n	801a0f4 <pbuf_alloc+0xd8>
 801a0e6:	4b42      	ldr	r3, [pc, #264]	@ (801a1f0 <pbuf_alloc+0x1d4>)
 801a0e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a0ec:	4941      	ldr	r1, [pc, #260]	@ (801a1f4 <pbuf_alloc+0x1d8>)
 801a0ee:	4842      	ldr	r0, [pc, #264]	@ (801a1f8 <pbuf_alloc+0x1dc>)
 801a0f0:	f00b f9f8 	bl	80254e4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801a0f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a0f6:	3303      	adds	r3, #3
 801a0f8:	f023 0303 	bic.w	r3, r3, #3
 801a0fc:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 801a100:	d106      	bne.n	801a110 <pbuf_alloc+0xf4>
 801a102:	4b3b      	ldr	r3, [pc, #236]	@ (801a1f0 <pbuf_alloc+0x1d4>)
 801a104:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801a108:	493c      	ldr	r1, [pc, #240]	@ (801a1fc <pbuf_alloc+0x1e0>)
 801a10a:	483b      	ldr	r0, [pc, #236]	@ (801a1f8 <pbuf_alloc+0x1dc>)
 801a10c:	f00b f9ea 	bl	80254e4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801a110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a112:	2b00      	cmp	r3, #0
 801a114:	d102      	bne.n	801a11c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801a116:	693b      	ldr	r3, [r7, #16]
 801a118:	627b      	str	r3, [r7, #36]	@ 0x24
 801a11a:	e002      	b.n	801a122 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801a11c:	69fb      	ldr	r3, [r7, #28]
 801a11e:	693a      	ldr	r2, [r7, #16]
 801a120:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801a122:	693b      	ldr	r3, [r7, #16]
 801a124:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801a126:	8b7a      	ldrh	r2, [r7, #26]
 801a128:	89fb      	ldrh	r3, [r7, #14]
 801a12a:	1ad3      	subs	r3, r2, r3
 801a12c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801a12e:	2300      	movs	r3, #0
 801a130:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801a132:	8b7b      	ldrh	r3, [r7, #26]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d19e      	bne.n	801a076 <pbuf_alloc+0x5a>
      break;
 801a138:	e055      	b.n	801a1e6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801a13a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a13c:	3303      	adds	r3, #3
 801a13e:	b29b      	uxth	r3, r3
 801a140:	f023 0303 	bic.w	r3, r3, #3
 801a144:	b29a      	uxth	r2, r3
 801a146:	88bb      	ldrh	r3, [r7, #4]
 801a148:	3303      	adds	r3, #3
 801a14a:	b29b      	uxth	r3, r3
 801a14c:	f023 0303 	bic.w	r3, r3, #3
 801a150:	b29b      	uxth	r3, r3
 801a152:	4413      	add	r3, r2
 801a154:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801a156:	8b3b      	ldrh	r3, [r7, #24]
 801a158:	3310      	adds	r3, #16
 801a15a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801a15c:	8b3a      	ldrh	r2, [r7, #24]
 801a15e:	88bb      	ldrh	r3, [r7, #4]
 801a160:	3303      	adds	r3, #3
 801a162:	f023 0303 	bic.w	r3, r3, #3
 801a166:	429a      	cmp	r2, r3
 801a168:	d306      	bcc.n	801a178 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801a16a:	8afa      	ldrh	r2, [r7, #22]
 801a16c:	88bb      	ldrh	r3, [r7, #4]
 801a16e:	3303      	adds	r3, #3
 801a170:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801a174:	429a      	cmp	r2, r3
 801a176:	d201      	bcs.n	801a17c <pbuf_alloc+0x160>
        return NULL;
 801a178:	2300      	movs	r3, #0
 801a17a:	e035      	b.n	801a1e8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801a17c:	8afb      	ldrh	r3, [r7, #22]
 801a17e:	4618      	mov	r0, r3
 801a180:	f7ff f972 	bl	8019468 <mem_malloc>
 801a184:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801a186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d101      	bne.n	801a190 <pbuf_alloc+0x174>
        return NULL;
 801a18c:	2300      	movs	r3, #0
 801a18e:	e02b      	b.n	801a1e8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801a190:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a192:	3310      	adds	r3, #16
 801a194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a196:	4413      	add	r3, r2
 801a198:	3303      	adds	r3, #3
 801a19a:	f023 0303 	bic.w	r3, r3, #3
 801a19e:	4618      	mov	r0, r3
 801a1a0:	88b9      	ldrh	r1, [r7, #4]
 801a1a2:	88ba      	ldrh	r2, [r7, #4]
 801a1a4:	2300      	movs	r3, #0
 801a1a6:	9301      	str	r3, [sp, #4]
 801a1a8:	887b      	ldrh	r3, [r7, #2]
 801a1aa:	9300      	str	r3, [sp, #0]
 801a1ac:	460b      	mov	r3, r1
 801a1ae:	4601      	mov	r1, r0
 801a1b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a1b2:	f7ff ff09 	bl	8019fc8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801a1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1b8:	685b      	ldr	r3, [r3, #4]
 801a1ba:	f003 0303 	and.w	r3, r3, #3
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d010      	beq.n	801a1e4 <pbuf_alloc+0x1c8>
 801a1c2:	4b0b      	ldr	r3, [pc, #44]	@ (801a1f0 <pbuf_alloc+0x1d4>)
 801a1c4:	f44f 7291 	mov.w	r2, #290	@ 0x122
 801a1c8:	490d      	ldr	r1, [pc, #52]	@ (801a200 <pbuf_alloc+0x1e4>)
 801a1ca:	480b      	ldr	r0, [pc, #44]	@ (801a1f8 <pbuf_alloc+0x1dc>)
 801a1cc:	f00b f98a 	bl	80254e4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801a1d0:	e008      	b.n	801a1e4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801a1d2:	4b07      	ldr	r3, [pc, #28]	@ (801a1f0 <pbuf_alloc+0x1d4>)
 801a1d4:	f240 1227 	movw	r2, #295	@ 0x127
 801a1d8:	490a      	ldr	r1, [pc, #40]	@ (801a204 <pbuf_alloc+0x1e8>)
 801a1da:	4807      	ldr	r0, [pc, #28]	@ (801a1f8 <pbuf_alloc+0x1dc>)
 801a1dc:	f00b f982 	bl	80254e4 <iprintf>
      return NULL;
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	e001      	b.n	801a1e8 <pbuf_alloc+0x1cc>
      break;
 801a1e4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801a1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801a1e8:	4618      	mov	r0, r3
 801a1ea:	3728      	adds	r7, #40	@ 0x28
 801a1ec:	46bd      	mov	sp, r7
 801a1ee:	bd80      	pop	{r7, pc}
 801a1f0:	0802ab20 	.word	0x0802ab20
 801a1f4:	0802ab50 	.word	0x0802ab50
 801a1f8:	0802ab80 	.word	0x0802ab80
 801a1fc:	0802aba8 	.word	0x0802aba8
 801a200:	0802abdc 	.word	0x0802abdc
 801a204:	0802ac08 	.word	0x0802ac08

0801a208 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801a208:	b580      	push	{r7, lr}
 801a20a:	b086      	sub	sp, #24
 801a20c:	af02      	add	r7, sp, #8
 801a20e:	6078      	str	r0, [r7, #4]
 801a210:	460b      	mov	r3, r1
 801a212:	807b      	strh	r3, [r7, #2]
 801a214:	4613      	mov	r3, r2
 801a216:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801a218:	883b      	ldrh	r3, [r7, #0]
 801a21a:	2b41      	cmp	r3, #65	@ 0x41
 801a21c:	d009      	beq.n	801a232 <pbuf_alloc_reference+0x2a>
 801a21e:	883b      	ldrh	r3, [r7, #0]
 801a220:	2b01      	cmp	r3, #1
 801a222:	d006      	beq.n	801a232 <pbuf_alloc_reference+0x2a>
 801a224:	4b0f      	ldr	r3, [pc, #60]	@ (801a264 <pbuf_alloc_reference+0x5c>)
 801a226:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801a22a:	490f      	ldr	r1, [pc, #60]	@ (801a268 <pbuf_alloc_reference+0x60>)
 801a22c:	480f      	ldr	r0, [pc, #60]	@ (801a26c <pbuf_alloc_reference+0x64>)
 801a22e:	f00b f959 	bl	80254e4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801a232:	200b      	movs	r0, #11
 801a234:	f7ff fabc 	bl	80197b0 <memp_malloc>
 801a238:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d101      	bne.n	801a244 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801a240:	2300      	movs	r3, #0
 801a242:	e00b      	b.n	801a25c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801a244:	8879      	ldrh	r1, [r7, #2]
 801a246:	887a      	ldrh	r2, [r7, #2]
 801a248:	2300      	movs	r3, #0
 801a24a:	9301      	str	r3, [sp, #4]
 801a24c:	883b      	ldrh	r3, [r7, #0]
 801a24e:	9300      	str	r3, [sp, #0]
 801a250:	460b      	mov	r3, r1
 801a252:	6879      	ldr	r1, [r7, #4]
 801a254:	68f8      	ldr	r0, [r7, #12]
 801a256:	f7ff feb7 	bl	8019fc8 <pbuf_init_alloced_pbuf>
  return p;
 801a25a:	68fb      	ldr	r3, [r7, #12]
}
 801a25c:	4618      	mov	r0, r3
 801a25e:	3710      	adds	r7, #16
 801a260:	46bd      	mov	sp, r7
 801a262:	bd80      	pop	{r7, pc}
 801a264:	0802ab20 	.word	0x0802ab20
 801a268:	0802ac24 	.word	0x0802ac24
 801a26c:	0802ab80 	.word	0x0802ab80

0801a270 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801a270:	b580      	push	{r7, lr}
 801a272:	b088      	sub	sp, #32
 801a274:	af02      	add	r7, sp, #8
 801a276:	607b      	str	r3, [r7, #4]
 801a278:	4603      	mov	r3, r0
 801a27a:	73fb      	strb	r3, [r7, #15]
 801a27c:	460b      	mov	r3, r1
 801a27e:	81bb      	strh	r3, [r7, #12]
 801a280:	4613      	mov	r3, r2
 801a282:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801a284:	7bfb      	ldrb	r3, [r7, #15]
 801a286:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801a288:	8a7b      	ldrh	r3, [r7, #18]
 801a28a:	3303      	adds	r3, #3
 801a28c:	f023 0203 	bic.w	r2, r3, #3
 801a290:	89bb      	ldrh	r3, [r7, #12]
 801a292:	441a      	add	r2, r3
 801a294:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a296:	429a      	cmp	r2, r3
 801a298:	d901      	bls.n	801a29e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801a29a:	2300      	movs	r3, #0
 801a29c:	e018      	b.n	801a2d0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801a29e:	6a3b      	ldr	r3, [r7, #32]
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	d007      	beq.n	801a2b4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801a2a4:	8a7b      	ldrh	r3, [r7, #18]
 801a2a6:	3303      	adds	r3, #3
 801a2a8:	f023 0303 	bic.w	r3, r3, #3
 801a2ac:	6a3a      	ldr	r2, [r7, #32]
 801a2ae:	4413      	add	r3, r2
 801a2b0:	617b      	str	r3, [r7, #20]
 801a2b2:	e001      	b.n	801a2b8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801a2b4:	2300      	movs	r3, #0
 801a2b6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801a2b8:	6878      	ldr	r0, [r7, #4]
 801a2ba:	89b9      	ldrh	r1, [r7, #12]
 801a2bc:	89ba      	ldrh	r2, [r7, #12]
 801a2be:	2302      	movs	r3, #2
 801a2c0:	9301      	str	r3, [sp, #4]
 801a2c2:	897b      	ldrh	r3, [r7, #10]
 801a2c4:	9300      	str	r3, [sp, #0]
 801a2c6:	460b      	mov	r3, r1
 801a2c8:	6979      	ldr	r1, [r7, #20]
 801a2ca:	f7ff fe7d 	bl	8019fc8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801a2ce:	687b      	ldr	r3, [r7, #4]
}
 801a2d0:	4618      	mov	r0, r3
 801a2d2:	3718      	adds	r7, #24
 801a2d4:	46bd      	mov	sp, r7
 801a2d6:	bd80      	pop	{r7, pc}

0801a2d8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801a2d8:	b580      	push	{r7, lr}
 801a2da:	b084      	sub	sp, #16
 801a2dc:	af00      	add	r7, sp, #0
 801a2de:	6078      	str	r0, [r7, #4]
 801a2e0:	460b      	mov	r3, r1
 801a2e2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	d106      	bne.n	801a2f8 <pbuf_realloc+0x20>
 801a2ea:	4b3a      	ldr	r3, [pc, #232]	@ (801a3d4 <pbuf_realloc+0xfc>)
 801a2ec:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 801a2f0:	4939      	ldr	r1, [pc, #228]	@ (801a3d8 <pbuf_realloc+0x100>)
 801a2f2:	483a      	ldr	r0, [pc, #232]	@ (801a3dc <pbuf_realloc+0x104>)
 801a2f4:	f00b f8f6 	bl	80254e4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	891b      	ldrh	r3, [r3, #8]
 801a2fc:	887a      	ldrh	r2, [r7, #2]
 801a2fe:	429a      	cmp	r2, r3
 801a300:	d263      	bcs.n	801a3ca <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	891a      	ldrh	r2, [r3, #8]
 801a306:	887b      	ldrh	r3, [r7, #2]
 801a308:	1ad3      	subs	r3, r2, r3
 801a30a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801a30c:	887b      	ldrh	r3, [r7, #2]
 801a30e:	817b      	strh	r3, [r7, #10]
  q = p;
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801a314:	e018      	b.n	801a348 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801a316:	68fb      	ldr	r3, [r7, #12]
 801a318:	895b      	ldrh	r3, [r3, #10]
 801a31a:	897a      	ldrh	r2, [r7, #10]
 801a31c:	1ad3      	subs	r3, r2, r3
 801a31e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801a320:	68fb      	ldr	r3, [r7, #12]
 801a322:	891a      	ldrh	r2, [r3, #8]
 801a324:	893b      	ldrh	r3, [r7, #8]
 801a326:	1ad3      	subs	r3, r2, r3
 801a328:	b29a      	uxth	r2, r3
 801a32a:	68fb      	ldr	r3, [r7, #12]
 801a32c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801a32e:	68fb      	ldr	r3, [r7, #12]
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801a334:	68fb      	ldr	r3, [r7, #12]
 801a336:	2b00      	cmp	r3, #0
 801a338:	d106      	bne.n	801a348 <pbuf_realloc+0x70>
 801a33a:	4b26      	ldr	r3, [pc, #152]	@ (801a3d4 <pbuf_realloc+0xfc>)
 801a33c:	f240 12af 	movw	r2, #431	@ 0x1af
 801a340:	4927      	ldr	r1, [pc, #156]	@ (801a3e0 <pbuf_realloc+0x108>)
 801a342:	4826      	ldr	r0, [pc, #152]	@ (801a3dc <pbuf_realloc+0x104>)
 801a344:	f00b f8ce 	bl	80254e4 <iprintf>
  while (rem_len > q->len) {
 801a348:	68fb      	ldr	r3, [r7, #12]
 801a34a:	895b      	ldrh	r3, [r3, #10]
 801a34c:	897a      	ldrh	r2, [r7, #10]
 801a34e:	429a      	cmp	r2, r3
 801a350:	d8e1      	bhi.n	801a316 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	7b1b      	ldrb	r3, [r3, #12]
 801a356:	f003 030f 	and.w	r3, r3, #15
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d121      	bne.n	801a3a2 <pbuf_realloc+0xca>
 801a35e:	68fb      	ldr	r3, [r7, #12]
 801a360:	895b      	ldrh	r3, [r3, #10]
 801a362:	897a      	ldrh	r2, [r7, #10]
 801a364:	429a      	cmp	r2, r3
 801a366:	d01c      	beq.n	801a3a2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	7b5b      	ldrb	r3, [r3, #13]
 801a36c:	f003 0302 	and.w	r3, r3, #2
 801a370:	2b00      	cmp	r3, #0
 801a372:	d116      	bne.n	801a3a2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801a374:	68fb      	ldr	r3, [r7, #12]
 801a376:	685a      	ldr	r2, [r3, #4]
 801a378:	68fb      	ldr	r3, [r7, #12]
 801a37a:	1ad3      	subs	r3, r2, r3
 801a37c:	b29a      	uxth	r2, r3
 801a37e:	897b      	ldrh	r3, [r7, #10]
 801a380:	4413      	add	r3, r2
 801a382:	b29b      	uxth	r3, r3
 801a384:	4619      	mov	r1, r3
 801a386:	68f8      	ldr	r0, [r7, #12]
 801a388:	f7fe ff64 	bl	8019254 <mem_trim>
 801a38c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	2b00      	cmp	r3, #0
 801a392:	d106      	bne.n	801a3a2 <pbuf_realloc+0xca>
 801a394:	4b0f      	ldr	r3, [pc, #60]	@ (801a3d4 <pbuf_realloc+0xfc>)
 801a396:	f240 12bd 	movw	r2, #445	@ 0x1bd
 801a39a:	4912      	ldr	r1, [pc, #72]	@ (801a3e4 <pbuf_realloc+0x10c>)
 801a39c:	480f      	ldr	r0, [pc, #60]	@ (801a3dc <pbuf_realloc+0x104>)
 801a39e:	f00b f8a1 	bl	80254e4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801a3a2:	68fb      	ldr	r3, [r7, #12]
 801a3a4:	897a      	ldrh	r2, [r7, #10]
 801a3a6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	895a      	ldrh	r2, [r3, #10]
 801a3ac:	68fb      	ldr	r3, [r7, #12]
 801a3ae:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801a3b0:	68fb      	ldr	r3, [r7, #12]
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d004      	beq.n	801a3c2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	681b      	ldr	r3, [r3, #0]
 801a3bc:	4618      	mov	r0, r3
 801a3be:	f000 f943 	bl	801a648 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801a3c2:	68fb      	ldr	r3, [r7, #12]
 801a3c4:	2200      	movs	r2, #0
 801a3c6:	601a      	str	r2, [r3, #0]
 801a3c8:	e000      	b.n	801a3cc <pbuf_realloc+0xf4>
    return;
 801a3ca:	bf00      	nop

}
 801a3cc:	3710      	adds	r7, #16
 801a3ce:	46bd      	mov	sp, r7
 801a3d0:	bd80      	pop	{r7, pc}
 801a3d2:	bf00      	nop
 801a3d4:	0802ab20 	.word	0x0802ab20
 801a3d8:	0802ac38 	.word	0x0802ac38
 801a3dc:	0802ab80 	.word	0x0802ab80
 801a3e0:	0802ac50 	.word	0x0802ac50
 801a3e4:	0802ac68 	.word	0x0802ac68

0801a3e8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801a3e8:	b580      	push	{r7, lr}
 801a3ea:	b086      	sub	sp, #24
 801a3ec:	af00      	add	r7, sp, #0
 801a3ee:	60f8      	str	r0, [r7, #12]
 801a3f0:	60b9      	str	r1, [r7, #8]
 801a3f2:	4613      	mov	r3, r2
 801a3f4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d106      	bne.n	801a40a <pbuf_add_header_impl+0x22>
 801a3fc:	4b2b      	ldr	r3, [pc, #172]	@ (801a4ac <pbuf_add_header_impl+0xc4>)
 801a3fe:	f240 12df 	movw	r2, #479	@ 0x1df
 801a402:	492b      	ldr	r1, [pc, #172]	@ (801a4b0 <pbuf_add_header_impl+0xc8>)
 801a404:	482b      	ldr	r0, [pc, #172]	@ (801a4b4 <pbuf_add_header_impl+0xcc>)
 801a406:	f00b f86d 	bl	80254e4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801a40a:	68fb      	ldr	r3, [r7, #12]
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	d003      	beq.n	801a418 <pbuf_add_header_impl+0x30>
 801a410:	68bb      	ldr	r3, [r7, #8]
 801a412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a416:	d301      	bcc.n	801a41c <pbuf_add_header_impl+0x34>
    return 1;
 801a418:	2301      	movs	r3, #1
 801a41a:	e043      	b.n	801a4a4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801a41c:	68bb      	ldr	r3, [r7, #8]
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d101      	bne.n	801a426 <pbuf_add_header_impl+0x3e>
    return 0;
 801a422:	2300      	movs	r3, #0
 801a424:	e03e      	b.n	801a4a4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801a426:	68bb      	ldr	r3, [r7, #8]
 801a428:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801a42a:	68fb      	ldr	r3, [r7, #12]
 801a42c:	891a      	ldrh	r2, [r3, #8]
 801a42e:	8a7b      	ldrh	r3, [r7, #18]
 801a430:	4413      	add	r3, r2
 801a432:	b29b      	uxth	r3, r3
 801a434:	8a7a      	ldrh	r2, [r7, #18]
 801a436:	429a      	cmp	r2, r3
 801a438:	d901      	bls.n	801a43e <pbuf_add_header_impl+0x56>
    return 1;
 801a43a:	2301      	movs	r3, #1
 801a43c:	e032      	b.n	801a4a4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801a43e:	68fb      	ldr	r3, [r7, #12]
 801a440:	7b1b      	ldrb	r3, [r3, #12]
 801a442:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801a444:	8a3b      	ldrh	r3, [r7, #16]
 801a446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d00c      	beq.n	801a468 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801a44e:	68fb      	ldr	r3, [r7, #12]
 801a450:	685a      	ldr	r2, [r3, #4]
 801a452:	68bb      	ldr	r3, [r7, #8]
 801a454:	425b      	negs	r3, r3
 801a456:	4413      	add	r3, r2
 801a458:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801a45a:	68fb      	ldr	r3, [r7, #12]
 801a45c:	3310      	adds	r3, #16
 801a45e:	697a      	ldr	r2, [r7, #20]
 801a460:	429a      	cmp	r2, r3
 801a462:	d20d      	bcs.n	801a480 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801a464:	2301      	movs	r3, #1
 801a466:	e01d      	b.n	801a4a4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801a468:	79fb      	ldrb	r3, [r7, #7]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d006      	beq.n	801a47c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801a46e:	68fb      	ldr	r3, [r7, #12]
 801a470:	685a      	ldr	r2, [r3, #4]
 801a472:	68bb      	ldr	r3, [r7, #8]
 801a474:	425b      	negs	r3, r3
 801a476:	4413      	add	r3, r2
 801a478:	617b      	str	r3, [r7, #20]
 801a47a:	e001      	b.n	801a480 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801a47c:	2301      	movs	r3, #1
 801a47e:	e011      	b.n	801a4a4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801a480:	68fb      	ldr	r3, [r7, #12]
 801a482:	697a      	ldr	r2, [r7, #20]
 801a484:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	895a      	ldrh	r2, [r3, #10]
 801a48a:	8a7b      	ldrh	r3, [r7, #18]
 801a48c:	4413      	add	r3, r2
 801a48e:	b29a      	uxth	r2, r3
 801a490:	68fb      	ldr	r3, [r7, #12]
 801a492:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801a494:	68fb      	ldr	r3, [r7, #12]
 801a496:	891a      	ldrh	r2, [r3, #8]
 801a498:	8a7b      	ldrh	r3, [r7, #18]
 801a49a:	4413      	add	r3, r2
 801a49c:	b29a      	uxth	r2, r3
 801a49e:	68fb      	ldr	r3, [r7, #12]
 801a4a0:	811a      	strh	r2, [r3, #8]


  return 0;
 801a4a2:	2300      	movs	r3, #0
}
 801a4a4:	4618      	mov	r0, r3
 801a4a6:	3718      	adds	r7, #24
 801a4a8:	46bd      	mov	sp, r7
 801a4aa:	bd80      	pop	{r7, pc}
 801a4ac:	0802ab20 	.word	0x0802ab20
 801a4b0:	0802ac84 	.word	0x0802ac84
 801a4b4:	0802ab80 	.word	0x0802ab80

0801a4b8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801a4b8:	b580      	push	{r7, lr}
 801a4ba:	b082      	sub	sp, #8
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	6078      	str	r0, [r7, #4]
 801a4c0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801a4c2:	2200      	movs	r2, #0
 801a4c4:	6839      	ldr	r1, [r7, #0]
 801a4c6:	6878      	ldr	r0, [r7, #4]
 801a4c8:	f7ff ff8e 	bl	801a3e8 <pbuf_add_header_impl>
 801a4cc:	4603      	mov	r3, r0
}
 801a4ce:	4618      	mov	r0, r3
 801a4d0:	3708      	adds	r7, #8
 801a4d2:	46bd      	mov	sp, r7
 801a4d4:	bd80      	pop	{r7, pc}
	...

0801a4d8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801a4d8:	b580      	push	{r7, lr}
 801a4da:	b084      	sub	sp, #16
 801a4dc:	af00      	add	r7, sp, #0
 801a4de:	6078      	str	r0, [r7, #4]
 801a4e0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d106      	bne.n	801a4f6 <pbuf_remove_header+0x1e>
 801a4e8:	4b20      	ldr	r3, [pc, #128]	@ (801a56c <pbuf_remove_header+0x94>)
 801a4ea:	f240 224b 	movw	r2, #587	@ 0x24b
 801a4ee:	4920      	ldr	r1, [pc, #128]	@ (801a570 <pbuf_remove_header+0x98>)
 801a4f0:	4820      	ldr	r0, [pc, #128]	@ (801a574 <pbuf_remove_header+0x9c>)
 801a4f2:	f00a fff7 	bl	80254e4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d003      	beq.n	801a504 <pbuf_remove_header+0x2c>
 801a4fc:	683b      	ldr	r3, [r7, #0]
 801a4fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a502:	d301      	bcc.n	801a508 <pbuf_remove_header+0x30>
    return 1;
 801a504:	2301      	movs	r3, #1
 801a506:	e02c      	b.n	801a562 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801a508:	683b      	ldr	r3, [r7, #0]
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	d101      	bne.n	801a512 <pbuf_remove_header+0x3a>
    return 0;
 801a50e:	2300      	movs	r3, #0
 801a510:	e027      	b.n	801a562 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801a512:	683b      	ldr	r3, [r7, #0]
 801a514:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	895b      	ldrh	r3, [r3, #10]
 801a51a:	89fa      	ldrh	r2, [r7, #14]
 801a51c:	429a      	cmp	r2, r3
 801a51e:	d908      	bls.n	801a532 <pbuf_remove_header+0x5a>
 801a520:	4b12      	ldr	r3, [pc, #72]	@ (801a56c <pbuf_remove_header+0x94>)
 801a522:	f240 2255 	movw	r2, #597	@ 0x255
 801a526:	4914      	ldr	r1, [pc, #80]	@ (801a578 <pbuf_remove_header+0xa0>)
 801a528:	4812      	ldr	r0, [pc, #72]	@ (801a574 <pbuf_remove_header+0x9c>)
 801a52a:	f00a ffdb 	bl	80254e4 <iprintf>
 801a52e:	2301      	movs	r3, #1
 801a530:	e017      	b.n	801a562 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	685b      	ldr	r3, [r3, #4]
 801a536:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	685a      	ldr	r2, [r3, #4]
 801a53c:	683b      	ldr	r3, [r7, #0]
 801a53e:	441a      	add	r2, r3
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	895a      	ldrh	r2, [r3, #10]
 801a548:	89fb      	ldrh	r3, [r7, #14]
 801a54a:	1ad3      	subs	r3, r2, r3
 801a54c:	b29a      	uxth	r2, r3
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	891a      	ldrh	r2, [r3, #8]
 801a556:	89fb      	ldrh	r3, [r7, #14]
 801a558:	1ad3      	subs	r3, r2, r3
 801a55a:	b29a      	uxth	r2, r3
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801a560:	2300      	movs	r3, #0
}
 801a562:	4618      	mov	r0, r3
 801a564:	3710      	adds	r7, #16
 801a566:	46bd      	mov	sp, r7
 801a568:	bd80      	pop	{r7, pc}
 801a56a:	bf00      	nop
 801a56c:	0802ab20 	.word	0x0802ab20
 801a570:	0802ac84 	.word	0x0802ac84
 801a574:	0802ab80 	.word	0x0802ab80
 801a578:	0802ac90 	.word	0x0802ac90

0801a57c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801a57c:	b580      	push	{r7, lr}
 801a57e:	b082      	sub	sp, #8
 801a580:	af00      	add	r7, sp, #0
 801a582:	6078      	str	r0, [r7, #4]
 801a584:	460b      	mov	r3, r1
 801a586:	807b      	strh	r3, [r7, #2]
 801a588:	4613      	mov	r3, r2
 801a58a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801a58c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a590:	2b00      	cmp	r3, #0
 801a592:	da08      	bge.n	801a5a6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801a594:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a598:	425b      	negs	r3, r3
 801a59a:	4619      	mov	r1, r3
 801a59c:	6878      	ldr	r0, [r7, #4]
 801a59e:	f7ff ff9b 	bl	801a4d8 <pbuf_remove_header>
 801a5a2:	4603      	mov	r3, r0
 801a5a4:	e007      	b.n	801a5b6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801a5a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a5aa:	787a      	ldrb	r2, [r7, #1]
 801a5ac:	4619      	mov	r1, r3
 801a5ae:	6878      	ldr	r0, [r7, #4]
 801a5b0:	f7ff ff1a 	bl	801a3e8 <pbuf_add_header_impl>
 801a5b4:	4603      	mov	r3, r0
  }
}
 801a5b6:	4618      	mov	r0, r3
 801a5b8:	3708      	adds	r7, #8
 801a5ba:	46bd      	mov	sp, r7
 801a5bc:	bd80      	pop	{r7, pc}

0801a5be <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801a5be:	b580      	push	{r7, lr}
 801a5c0:	b082      	sub	sp, #8
 801a5c2:	af00      	add	r7, sp, #0
 801a5c4:	6078      	str	r0, [r7, #4]
 801a5c6:	460b      	mov	r3, r1
 801a5c8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801a5ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a5ce:	2201      	movs	r2, #1
 801a5d0:	4619      	mov	r1, r3
 801a5d2:	6878      	ldr	r0, [r7, #4]
 801a5d4:	f7ff ffd2 	bl	801a57c <pbuf_header_impl>
 801a5d8:	4603      	mov	r3, r0
}
 801a5da:	4618      	mov	r0, r3
 801a5dc:	3708      	adds	r7, #8
 801a5de:	46bd      	mov	sp, r7
 801a5e0:	bd80      	pop	{r7, pc}

0801a5e2 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 801a5e2:	b580      	push	{r7, lr}
 801a5e4:	b086      	sub	sp, #24
 801a5e6:	af00      	add	r7, sp, #0
 801a5e8:	6078      	str	r0, [r7, #4]
 801a5ea:	460b      	mov	r3, r1
 801a5ec:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 801a5f2:	887b      	ldrh	r3, [r7, #2]
 801a5f4:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801a5f6:	e01c      	b.n	801a632 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 801a5f8:	697b      	ldr	r3, [r7, #20]
 801a5fa:	895b      	ldrh	r3, [r3, #10]
 801a5fc:	8a7a      	ldrh	r2, [r7, #18]
 801a5fe:	429a      	cmp	r2, r3
 801a600:	d310      	bcc.n	801a624 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 801a602:	697b      	ldr	r3, [r7, #20]
 801a604:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 801a606:	697b      	ldr	r3, [r7, #20]
 801a608:	895b      	ldrh	r3, [r3, #10]
 801a60a:	8a7a      	ldrh	r2, [r7, #18]
 801a60c:	1ad3      	subs	r3, r2, r3
 801a60e:	827b      	strh	r3, [r7, #18]
      p = p->next;
 801a610:	697b      	ldr	r3, [r7, #20]
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	617b      	str	r3, [r7, #20]
      f->next = 0;
 801a616:	68fb      	ldr	r3, [r7, #12]
 801a618:	2200      	movs	r2, #0
 801a61a:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 801a61c:	68f8      	ldr	r0, [r7, #12]
 801a61e:	f000 f813 	bl	801a648 <pbuf_free>
 801a622:	e006      	b.n	801a632 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 801a624:	8a7b      	ldrh	r3, [r7, #18]
 801a626:	4619      	mov	r1, r3
 801a628:	6978      	ldr	r0, [r7, #20]
 801a62a:	f7ff ff55 	bl	801a4d8 <pbuf_remove_header>
      free_left = 0;
 801a62e:	2300      	movs	r3, #0
 801a630:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801a632:	8a7b      	ldrh	r3, [r7, #18]
 801a634:	2b00      	cmp	r3, #0
 801a636:	d002      	beq.n	801a63e <pbuf_free_header+0x5c>
 801a638:	697b      	ldr	r3, [r7, #20]
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d1dc      	bne.n	801a5f8 <pbuf_free_header+0x16>
    }
  }
  return p;
 801a63e:	697b      	ldr	r3, [r7, #20]
}
 801a640:	4618      	mov	r0, r3
 801a642:	3718      	adds	r7, #24
 801a644:	46bd      	mov	sp, r7
 801a646:	bd80      	pop	{r7, pc}

0801a648 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801a648:	b580      	push	{r7, lr}
 801a64a:	b088      	sub	sp, #32
 801a64c:	af00      	add	r7, sp, #0
 801a64e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	2b00      	cmp	r3, #0
 801a654:	d10b      	bne.n	801a66e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d106      	bne.n	801a66a <pbuf_free+0x22>
 801a65c:	4b3b      	ldr	r3, [pc, #236]	@ (801a74c <pbuf_free+0x104>)
 801a65e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 801a662:	493b      	ldr	r1, [pc, #236]	@ (801a750 <pbuf_free+0x108>)
 801a664:	483b      	ldr	r0, [pc, #236]	@ (801a754 <pbuf_free+0x10c>)
 801a666:	f00a ff3d 	bl	80254e4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801a66a:	2300      	movs	r3, #0
 801a66c:	e069      	b.n	801a742 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801a66e:	2300      	movs	r3, #0
 801a670:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801a672:	e062      	b.n	801a73a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801a674:	f009 fe9c 	bl	80243b0 <sys_arch_protect>
 801a678:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	7b9b      	ldrb	r3, [r3, #14]
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d106      	bne.n	801a690 <pbuf_free+0x48>
 801a682:	4b32      	ldr	r3, [pc, #200]	@ (801a74c <pbuf_free+0x104>)
 801a684:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801a688:	4933      	ldr	r1, [pc, #204]	@ (801a758 <pbuf_free+0x110>)
 801a68a:	4832      	ldr	r0, [pc, #200]	@ (801a754 <pbuf_free+0x10c>)
 801a68c:	f00a ff2a 	bl	80254e4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	7b9b      	ldrb	r3, [r3, #14]
 801a694:	3b01      	subs	r3, #1
 801a696:	b2da      	uxtb	r2, r3
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	739a      	strb	r2, [r3, #14]
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	7b9b      	ldrb	r3, [r3, #14]
 801a6a0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801a6a2:	69b8      	ldr	r0, [r7, #24]
 801a6a4:	f009 fe92 	bl	80243cc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801a6a8:	7dfb      	ldrb	r3, [r7, #23]
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d143      	bne.n	801a736 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	681b      	ldr	r3, [r3, #0]
 801a6b2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	7b1b      	ldrb	r3, [r3, #12]
 801a6b8:	f003 030f 	and.w	r3, r3, #15
 801a6bc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	7b5b      	ldrb	r3, [r3, #13]
 801a6c2:	f003 0302 	and.w	r3, r3, #2
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d011      	beq.n	801a6ee <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801a6ce:	68bb      	ldr	r3, [r7, #8]
 801a6d0:	691b      	ldr	r3, [r3, #16]
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d106      	bne.n	801a6e4 <pbuf_free+0x9c>
 801a6d6:	4b1d      	ldr	r3, [pc, #116]	@ (801a74c <pbuf_free+0x104>)
 801a6d8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 801a6dc:	491f      	ldr	r1, [pc, #124]	@ (801a75c <pbuf_free+0x114>)
 801a6de:	481d      	ldr	r0, [pc, #116]	@ (801a754 <pbuf_free+0x10c>)
 801a6e0:	f00a ff00 	bl	80254e4 <iprintf>
        pc->custom_free_function(p);
 801a6e4:	68bb      	ldr	r3, [r7, #8]
 801a6e6:	691b      	ldr	r3, [r3, #16]
 801a6e8:	6878      	ldr	r0, [r7, #4]
 801a6ea:	4798      	blx	r3
 801a6ec:	e01d      	b.n	801a72a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801a6ee:	7bfb      	ldrb	r3, [r7, #15]
 801a6f0:	2b02      	cmp	r3, #2
 801a6f2:	d104      	bne.n	801a6fe <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801a6f4:	6879      	ldr	r1, [r7, #4]
 801a6f6:	200c      	movs	r0, #12
 801a6f8:	f7ff f8d0 	bl	801989c <memp_free>
 801a6fc:	e015      	b.n	801a72a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801a6fe:	7bfb      	ldrb	r3, [r7, #15]
 801a700:	2b01      	cmp	r3, #1
 801a702:	d104      	bne.n	801a70e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801a704:	6879      	ldr	r1, [r7, #4]
 801a706:	200b      	movs	r0, #11
 801a708:	f7ff f8c8 	bl	801989c <memp_free>
 801a70c:	e00d      	b.n	801a72a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801a70e:	7bfb      	ldrb	r3, [r7, #15]
 801a710:	2b00      	cmp	r3, #0
 801a712:	d103      	bne.n	801a71c <pbuf_free+0xd4>
          mem_free(p);
 801a714:	6878      	ldr	r0, [r7, #4]
 801a716:	f7fe fd0d 	bl	8019134 <mem_free>
 801a71a:	e006      	b.n	801a72a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801a71c:	4b0b      	ldr	r3, [pc, #44]	@ (801a74c <pbuf_free+0x104>)
 801a71e:	f240 320f 	movw	r2, #783	@ 0x30f
 801a722:	490f      	ldr	r1, [pc, #60]	@ (801a760 <pbuf_free+0x118>)
 801a724:	480b      	ldr	r0, [pc, #44]	@ (801a754 <pbuf_free+0x10c>)
 801a726:	f00a fedd 	bl	80254e4 <iprintf>
        }
      }
      count++;
 801a72a:	7ffb      	ldrb	r3, [r7, #31]
 801a72c:	3301      	adds	r3, #1
 801a72e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801a730:	693b      	ldr	r3, [r7, #16]
 801a732:	607b      	str	r3, [r7, #4]
 801a734:	e001      	b.n	801a73a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801a736:	2300      	movs	r3, #0
 801a738:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d199      	bne.n	801a674 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801a740:	7ffb      	ldrb	r3, [r7, #31]
}
 801a742:	4618      	mov	r0, r3
 801a744:	3720      	adds	r7, #32
 801a746:	46bd      	mov	sp, r7
 801a748:	bd80      	pop	{r7, pc}
 801a74a:	bf00      	nop
 801a74c:	0802ab20 	.word	0x0802ab20
 801a750:	0802ac84 	.word	0x0802ac84
 801a754:	0802ab80 	.word	0x0802ab80
 801a758:	0802acb0 	.word	0x0802acb0
 801a75c:	0802acc8 	.word	0x0802acc8
 801a760:	0802acec 	.word	0x0802acec

0801a764 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801a764:	b480      	push	{r7}
 801a766:	b085      	sub	sp, #20
 801a768:	af00      	add	r7, sp, #0
 801a76a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801a76c:	2300      	movs	r3, #0
 801a76e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801a770:	e005      	b.n	801a77e <pbuf_clen+0x1a>
    ++len;
 801a772:	89fb      	ldrh	r3, [r7, #14]
 801a774:	3301      	adds	r3, #1
 801a776:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	2b00      	cmp	r3, #0
 801a782:	d1f6      	bne.n	801a772 <pbuf_clen+0xe>
  }
  return len;
 801a784:	89fb      	ldrh	r3, [r7, #14]
}
 801a786:	4618      	mov	r0, r3
 801a788:	3714      	adds	r7, #20
 801a78a:	46bd      	mov	sp, r7
 801a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a790:	4770      	bx	lr
	...

0801a794 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801a794:	b580      	push	{r7, lr}
 801a796:	b084      	sub	sp, #16
 801a798:	af00      	add	r7, sp, #0
 801a79a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	d016      	beq.n	801a7d0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801a7a2:	f009 fe05 	bl	80243b0 <sys_arch_protect>
 801a7a6:	60f8      	str	r0, [r7, #12]
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	7b9b      	ldrb	r3, [r3, #14]
 801a7ac:	3301      	adds	r3, #1
 801a7ae:	b2da      	uxtb	r2, r3
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	739a      	strb	r2, [r3, #14]
 801a7b4:	68f8      	ldr	r0, [r7, #12]
 801a7b6:	f009 fe09 	bl	80243cc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	7b9b      	ldrb	r3, [r3, #14]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d106      	bne.n	801a7d0 <pbuf_ref+0x3c>
 801a7c2:	4b05      	ldr	r3, [pc, #20]	@ (801a7d8 <pbuf_ref+0x44>)
 801a7c4:	f240 3242 	movw	r2, #834	@ 0x342
 801a7c8:	4904      	ldr	r1, [pc, #16]	@ (801a7dc <pbuf_ref+0x48>)
 801a7ca:	4805      	ldr	r0, [pc, #20]	@ (801a7e0 <pbuf_ref+0x4c>)
 801a7cc:	f00a fe8a 	bl	80254e4 <iprintf>
  }
}
 801a7d0:	bf00      	nop
 801a7d2:	3710      	adds	r7, #16
 801a7d4:	46bd      	mov	sp, r7
 801a7d6:	bd80      	pop	{r7, pc}
 801a7d8:	0802ab20 	.word	0x0802ab20
 801a7dc:	0802ad00 	.word	0x0802ad00
 801a7e0:	0802ab80 	.word	0x0802ab80

0801a7e4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801a7e4:	b580      	push	{r7, lr}
 801a7e6:	b084      	sub	sp, #16
 801a7e8:	af00      	add	r7, sp, #0
 801a7ea:	6078      	str	r0, [r7, #4]
 801a7ec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	d002      	beq.n	801a7fa <pbuf_cat+0x16>
 801a7f4:	683b      	ldr	r3, [r7, #0]
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d107      	bne.n	801a80a <pbuf_cat+0x26>
 801a7fa:	4b20      	ldr	r3, [pc, #128]	@ (801a87c <pbuf_cat+0x98>)
 801a7fc:	f240 3259 	movw	r2, #857	@ 0x359
 801a800:	491f      	ldr	r1, [pc, #124]	@ (801a880 <pbuf_cat+0x9c>)
 801a802:	4820      	ldr	r0, [pc, #128]	@ (801a884 <pbuf_cat+0xa0>)
 801a804:	f00a fe6e 	bl	80254e4 <iprintf>
 801a808:	e034      	b.n	801a874 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	60fb      	str	r3, [r7, #12]
 801a80e:	e00a      	b.n	801a826 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	891a      	ldrh	r2, [r3, #8]
 801a814:	683b      	ldr	r3, [r7, #0]
 801a816:	891b      	ldrh	r3, [r3, #8]
 801a818:	4413      	add	r3, r2
 801a81a:	b29a      	uxth	r2, r3
 801a81c:	68fb      	ldr	r3, [r7, #12]
 801a81e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	60fb      	str	r3, [r7, #12]
 801a826:	68fb      	ldr	r3, [r7, #12]
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d1f0      	bne.n	801a810 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801a82e:	68fb      	ldr	r3, [r7, #12]
 801a830:	891a      	ldrh	r2, [r3, #8]
 801a832:	68fb      	ldr	r3, [r7, #12]
 801a834:	895b      	ldrh	r3, [r3, #10]
 801a836:	429a      	cmp	r2, r3
 801a838:	d006      	beq.n	801a848 <pbuf_cat+0x64>
 801a83a:	4b10      	ldr	r3, [pc, #64]	@ (801a87c <pbuf_cat+0x98>)
 801a83c:	f240 3262 	movw	r2, #866	@ 0x362
 801a840:	4911      	ldr	r1, [pc, #68]	@ (801a888 <pbuf_cat+0xa4>)
 801a842:	4810      	ldr	r0, [pc, #64]	@ (801a884 <pbuf_cat+0xa0>)
 801a844:	f00a fe4e 	bl	80254e4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801a848:	68fb      	ldr	r3, [r7, #12]
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d006      	beq.n	801a85e <pbuf_cat+0x7a>
 801a850:	4b0a      	ldr	r3, [pc, #40]	@ (801a87c <pbuf_cat+0x98>)
 801a852:	f240 3263 	movw	r2, #867	@ 0x363
 801a856:	490d      	ldr	r1, [pc, #52]	@ (801a88c <pbuf_cat+0xa8>)
 801a858:	480a      	ldr	r0, [pc, #40]	@ (801a884 <pbuf_cat+0xa0>)
 801a85a:	f00a fe43 	bl	80254e4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801a85e:	68fb      	ldr	r3, [r7, #12]
 801a860:	891a      	ldrh	r2, [r3, #8]
 801a862:	683b      	ldr	r3, [r7, #0]
 801a864:	891b      	ldrh	r3, [r3, #8]
 801a866:	4413      	add	r3, r2
 801a868:	b29a      	uxth	r2, r3
 801a86a:	68fb      	ldr	r3, [r7, #12]
 801a86c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	683a      	ldr	r2, [r7, #0]
 801a872:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801a874:	3710      	adds	r7, #16
 801a876:	46bd      	mov	sp, r7
 801a878:	bd80      	pop	{r7, pc}
 801a87a:	bf00      	nop
 801a87c:	0802ab20 	.word	0x0802ab20
 801a880:	0802ad14 	.word	0x0802ad14
 801a884:	0802ab80 	.word	0x0802ab80
 801a888:	0802ad4c 	.word	0x0802ad4c
 801a88c:	0802ad7c 	.word	0x0802ad7c

0801a890 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801a890:	b580      	push	{r7, lr}
 801a892:	b082      	sub	sp, #8
 801a894:	af00      	add	r7, sp, #0
 801a896:	6078      	str	r0, [r7, #4]
 801a898:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801a89a:	6839      	ldr	r1, [r7, #0]
 801a89c:	6878      	ldr	r0, [r7, #4]
 801a89e:	f7ff ffa1 	bl	801a7e4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801a8a2:	6838      	ldr	r0, [r7, #0]
 801a8a4:	f7ff ff76 	bl	801a794 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801a8a8:	bf00      	nop
 801a8aa:	3708      	adds	r7, #8
 801a8ac:	46bd      	mov	sp, r7
 801a8ae:	bd80      	pop	{r7, pc}

0801a8b0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801a8b0:	b580      	push	{r7, lr}
 801a8b2:	b086      	sub	sp, #24
 801a8b4:	af00      	add	r7, sp, #0
 801a8b6:	6078      	str	r0, [r7, #4]
 801a8b8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801a8ba:	2300      	movs	r3, #0
 801a8bc:	617b      	str	r3, [r7, #20]
 801a8be:	2300      	movs	r3, #0
 801a8c0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d008      	beq.n	801a8da <pbuf_copy+0x2a>
 801a8c8:	683b      	ldr	r3, [r7, #0]
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	d005      	beq.n	801a8da <pbuf_copy+0x2a>
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	891a      	ldrh	r2, [r3, #8]
 801a8d2:	683b      	ldr	r3, [r7, #0]
 801a8d4:	891b      	ldrh	r3, [r3, #8]
 801a8d6:	429a      	cmp	r2, r3
 801a8d8:	d209      	bcs.n	801a8ee <pbuf_copy+0x3e>
 801a8da:	4b57      	ldr	r3, [pc, #348]	@ (801aa38 <pbuf_copy+0x188>)
 801a8dc:	f240 32c9 	movw	r2, #969	@ 0x3c9
 801a8e0:	4956      	ldr	r1, [pc, #344]	@ (801aa3c <pbuf_copy+0x18c>)
 801a8e2:	4857      	ldr	r0, [pc, #348]	@ (801aa40 <pbuf_copy+0x190>)
 801a8e4:	f00a fdfe 	bl	80254e4 <iprintf>
 801a8e8:	f06f 030f 	mvn.w	r3, #15
 801a8ec:	e09f      	b.n	801aa2e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	895b      	ldrh	r3, [r3, #10]
 801a8f2:	461a      	mov	r2, r3
 801a8f4:	697b      	ldr	r3, [r7, #20]
 801a8f6:	1ad2      	subs	r2, r2, r3
 801a8f8:	683b      	ldr	r3, [r7, #0]
 801a8fa:	895b      	ldrh	r3, [r3, #10]
 801a8fc:	4619      	mov	r1, r3
 801a8fe:	693b      	ldr	r3, [r7, #16]
 801a900:	1acb      	subs	r3, r1, r3
 801a902:	429a      	cmp	r2, r3
 801a904:	d306      	bcc.n	801a914 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801a906:	683b      	ldr	r3, [r7, #0]
 801a908:	895b      	ldrh	r3, [r3, #10]
 801a90a:	461a      	mov	r2, r3
 801a90c:	693b      	ldr	r3, [r7, #16]
 801a90e:	1ad3      	subs	r3, r2, r3
 801a910:	60fb      	str	r3, [r7, #12]
 801a912:	e005      	b.n	801a920 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	895b      	ldrh	r3, [r3, #10]
 801a918:	461a      	mov	r2, r3
 801a91a:	697b      	ldr	r3, [r7, #20]
 801a91c:	1ad3      	subs	r3, r2, r3
 801a91e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	685a      	ldr	r2, [r3, #4]
 801a924:	697b      	ldr	r3, [r7, #20]
 801a926:	18d0      	adds	r0, r2, r3
 801a928:	683b      	ldr	r3, [r7, #0]
 801a92a:	685a      	ldr	r2, [r3, #4]
 801a92c:	693b      	ldr	r3, [r7, #16]
 801a92e:	4413      	add	r3, r2
 801a930:	68fa      	ldr	r2, [r7, #12]
 801a932:	4619      	mov	r1, r3
 801a934:	f00a ff63 	bl	80257fe <memcpy>
    offset_to += len;
 801a938:	697a      	ldr	r2, [r7, #20]
 801a93a:	68fb      	ldr	r3, [r7, #12]
 801a93c:	4413      	add	r3, r2
 801a93e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801a940:	693a      	ldr	r2, [r7, #16]
 801a942:	68fb      	ldr	r3, [r7, #12]
 801a944:	4413      	add	r3, r2
 801a946:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	895b      	ldrh	r3, [r3, #10]
 801a94c:	461a      	mov	r2, r3
 801a94e:	697b      	ldr	r3, [r7, #20]
 801a950:	4293      	cmp	r3, r2
 801a952:	d906      	bls.n	801a962 <pbuf_copy+0xb2>
 801a954:	4b38      	ldr	r3, [pc, #224]	@ (801aa38 <pbuf_copy+0x188>)
 801a956:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801a95a:	493a      	ldr	r1, [pc, #232]	@ (801aa44 <pbuf_copy+0x194>)
 801a95c:	4838      	ldr	r0, [pc, #224]	@ (801aa40 <pbuf_copy+0x190>)
 801a95e:	f00a fdc1 	bl	80254e4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801a962:	683b      	ldr	r3, [r7, #0]
 801a964:	895b      	ldrh	r3, [r3, #10]
 801a966:	461a      	mov	r2, r3
 801a968:	693b      	ldr	r3, [r7, #16]
 801a96a:	4293      	cmp	r3, r2
 801a96c:	d906      	bls.n	801a97c <pbuf_copy+0xcc>
 801a96e:	4b32      	ldr	r3, [pc, #200]	@ (801aa38 <pbuf_copy+0x188>)
 801a970:	f240 32da 	movw	r2, #986	@ 0x3da
 801a974:	4934      	ldr	r1, [pc, #208]	@ (801aa48 <pbuf_copy+0x198>)
 801a976:	4832      	ldr	r0, [pc, #200]	@ (801aa40 <pbuf_copy+0x190>)
 801a978:	f00a fdb4 	bl	80254e4 <iprintf>
    if (offset_from >= p_from->len) {
 801a97c:	683b      	ldr	r3, [r7, #0]
 801a97e:	895b      	ldrh	r3, [r3, #10]
 801a980:	461a      	mov	r2, r3
 801a982:	693b      	ldr	r3, [r7, #16]
 801a984:	4293      	cmp	r3, r2
 801a986:	d304      	bcc.n	801a992 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801a988:	2300      	movs	r3, #0
 801a98a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801a98c:	683b      	ldr	r3, [r7, #0]
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	895b      	ldrh	r3, [r3, #10]
 801a996:	461a      	mov	r2, r3
 801a998:	697b      	ldr	r3, [r7, #20]
 801a99a:	4293      	cmp	r3, r2
 801a99c:	d114      	bne.n	801a9c8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801a99e:	2300      	movs	r3, #0
 801a9a0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d10c      	bne.n	801a9c8 <pbuf_copy+0x118>
 801a9ae:	683b      	ldr	r3, [r7, #0]
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	d009      	beq.n	801a9c8 <pbuf_copy+0x118>
 801a9b4:	4b20      	ldr	r3, [pc, #128]	@ (801aa38 <pbuf_copy+0x188>)
 801a9b6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801a9ba:	4924      	ldr	r1, [pc, #144]	@ (801aa4c <pbuf_copy+0x19c>)
 801a9bc:	4820      	ldr	r0, [pc, #128]	@ (801aa40 <pbuf_copy+0x190>)
 801a9be:	f00a fd91 	bl	80254e4 <iprintf>
 801a9c2:	f06f 030f 	mvn.w	r3, #15
 801a9c6:	e032      	b.n	801aa2e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801a9c8:	683b      	ldr	r3, [r7, #0]
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	d013      	beq.n	801a9f6 <pbuf_copy+0x146>
 801a9ce:	683b      	ldr	r3, [r7, #0]
 801a9d0:	895a      	ldrh	r2, [r3, #10]
 801a9d2:	683b      	ldr	r3, [r7, #0]
 801a9d4:	891b      	ldrh	r3, [r3, #8]
 801a9d6:	429a      	cmp	r2, r3
 801a9d8:	d10d      	bne.n	801a9f6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801a9da:	683b      	ldr	r3, [r7, #0]
 801a9dc:	681b      	ldr	r3, [r3, #0]
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d009      	beq.n	801a9f6 <pbuf_copy+0x146>
 801a9e2:	4b15      	ldr	r3, [pc, #84]	@ (801aa38 <pbuf_copy+0x188>)
 801a9e4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801a9e8:	4919      	ldr	r1, [pc, #100]	@ (801aa50 <pbuf_copy+0x1a0>)
 801a9ea:	4815      	ldr	r0, [pc, #84]	@ (801aa40 <pbuf_copy+0x190>)
 801a9ec:	f00a fd7a 	bl	80254e4 <iprintf>
 801a9f0:	f06f 0305 	mvn.w	r3, #5
 801a9f4:	e01b      	b.n	801aa2e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d013      	beq.n	801aa24 <pbuf_copy+0x174>
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	895a      	ldrh	r2, [r3, #10]
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	891b      	ldrh	r3, [r3, #8]
 801aa04:	429a      	cmp	r2, r3
 801aa06:	d10d      	bne.n	801aa24 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	681b      	ldr	r3, [r3, #0]
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	d009      	beq.n	801aa24 <pbuf_copy+0x174>
 801aa10:	4b09      	ldr	r3, [pc, #36]	@ (801aa38 <pbuf_copy+0x188>)
 801aa12:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801aa16:	490e      	ldr	r1, [pc, #56]	@ (801aa50 <pbuf_copy+0x1a0>)
 801aa18:	4809      	ldr	r0, [pc, #36]	@ (801aa40 <pbuf_copy+0x190>)
 801aa1a:	f00a fd63 	bl	80254e4 <iprintf>
 801aa1e:	f06f 0305 	mvn.w	r3, #5
 801aa22:	e004      	b.n	801aa2e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801aa24:	683b      	ldr	r3, [r7, #0]
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	f47f af61 	bne.w	801a8ee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801aa2c:	2300      	movs	r3, #0
}
 801aa2e:	4618      	mov	r0, r3
 801aa30:	3718      	adds	r7, #24
 801aa32:	46bd      	mov	sp, r7
 801aa34:	bd80      	pop	{r7, pc}
 801aa36:	bf00      	nop
 801aa38:	0802ab20 	.word	0x0802ab20
 801aa3c:	0802adc8 	.word	0x0802adc8
 801aa40:	0802ab80 	.word	0x0802ab80
 801aa44:	0802adf8 	.word	0x0802adf8
 801aa48:	0802ae10 	.word	0x0802ae10
 801aa4c:	0802ae2c 	.word	0x0802ae2c
 801aa50:	0802ae3c 	.word	0x0802ae3c

0801aa54 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801aa54:	b580      	push	{r7, lr}
 801aa56:	b088      	sub	sp, #32
 801aa58:	af00      	add	r7, sp, #0
 801aa5a:	60f8      	str	r0, [r7, #12]
 801aa5c:	60b9      	str	r1, [r7, #8]
 801aa5e:	4611      	mov	r1, r2
 801aa60:	461a      	mov	r2, r3
 801aa62:	460b      	mov	r3, r1
 801aa64:	80fb      	strh	r3, [r7, #6]
 801aa66:	4613      	mov	r3, r2
 801aa68:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801aa6a:	2300      	movs	r3, #0
 801aa6c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801aa6e:	2300      	movs	r3, #0
 801aa70:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801aa72:	68fb      	ldr	r3, [r7, #12]
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d108      	bne.n	801aa8a <pbuf_copy_partial+0x36>
 801aa78:	4b2b      	ldr	r3, [pc, #172]	@ (801ab28 <pbuf_copy_partial+0xd4>)
 801aa7a:	f240 420a 	movw	r2, #1034	@ 0x40a
 801aa7e:	492b      	ldr	r1, [pc, #172]	@ (801ab2c <pbuf_copy_partial+0xd8>)
 801aa80:	482b      	ldr	r0, [pc, #172]	@ (801ab30 <pbuf_copy_partial+0xdc>)
 801aa82:	f00a fd2f 	bl	80254e4 <iprintf>
 801aa86:	2300      	movs	r3, #0
 801aa88:	e04a      	b.n	801ab20 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801aa8a:	68bb      	ldr	r3, [r7, #8]
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	d108      	bne.n	801aaa2 <pbuf_copy_partial+0x4e>
 801aa90:	4b25      	ldr	r3, [pc, #148]	@ (801ab28 <pbuf_copy_partial+0xd4>)
 801aa92:	f240 420b 	movw	r2, #1035	@ 0x40b
 801aa96:	4927      	ldr	r1, [pc, #156]	@ (801ab34 <pbuf_copy_partial+0xe0>)
 801aa98:	4825      	ldr	r0, [pc, #148]	@ (801ab30 <pbuf_copy_partial+0xdc>)
 801aa9a:	f00a fd23 	bl	80254e4 <iprintf>
 801aa9e:	2300      	movs	r3, #0
 801aaa0:	e03e      	b.n	801ab20 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801aaa2:	68fb      	ldr	r3, [r7, #12]
 801aaa4:	61fb      	str	r3, [r7, #28]
 801aaa6:	e034      	b.n	801ab12 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801aaa8:	88bb      	ldrh	r3, [r7, #4]
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d00a      	beq.n	801aac4 <pbuf_copy_partial+0x70>
 801aaae:	69fb      	ldr	r3, [r7, #28]
 801aab0:	895b      	ldrh	r3, [r3, #10]
 801aab2:	88ba      	ldrh	r2, [r7, #4]
 801aab4:	429a      	cmp	r2, r3
 801aab6:	d305      	bcc.n	801aac4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801aab8:	69fb      	ldr	r3, [r7, #28]
 801aaba:	895b      	ldrh	r3, [r3, #10]
 801aabc:	88ba      	ldrh	r2, [r7, #4]
 801aabe:	1ad3      	subs	r3, r2, r3
 801aac0:	80bb      	strh	r3, [r7, #4]
 801aac2:	e023      	b.n	801ab0c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801aac4:	69fb      	ldr	r3, [r7, #28]
 801aac6:	895a      	ldrh	r2, [r3, #10]
 801aac8:	88bb      	ldrh	r3, [r7, #4]
 801aaca:	1ad3      	subs	r3, r2, r3
 801aacc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801aace:	8b3a      	ldrh	r2, [r7, #24]
 801aad0:	88fb      	ldrh	r3, [r7, #6]
 801aad2:	429a      	cmp	r2, r3
 801aad4:	d901      	bls.n	801aada <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801aad6:	88fb      	ldrh	r3, [r7, #6]
 801aad8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801aada:	8b7b      	ldrh	r3, [r7, #26]
 801aadc:	68ba      	ldr	r2, [r7, #8]
 801aade:	18d0      	adds	r0, r2, r3
 801aae0:	69fb      	ldr	r3, [r7, #28]
 801aae2:	685a      	ldr	r2, [r3, #4]
 801aae4:	88bb      	ldrh	r3, [r7, #4]
 801aae6:	4413      	add	r3, r2
 801aae8:	8b3a      	ldrh	r2, [r7, #24]
 801aaea:	4619      	mov	r1, r3
 801aaec:	f00a fe87 	bl	80257fe <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801aaf0:	8afa      	ldrh	r2, [r7, #22]
 801aaf2:	8b3b      	ldrh	r3, [r7, #24]
 801aaf4:	4413      	add	r3, r2
 801aaf6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801aaf8:	8b7a      	ldrh	r2, [r7, #26]
 801aafa:	8b3b      	ldrh	r3, [r7, #24]
 801aafc:	4413      	add	r3, r2
 801aafe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801ab00:	88fa      	ldrh	r2, [r7, #6]
 801ab02:	8b3b      	ldrh	r3, [r7, #24]
 801ab04:	1ad3      	subs	r3, r2, r3
 801ab06:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801ab08:	2300      	movs	r3, #0
 801ab0a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801ab0c:	69fb      	ldr	r3, [r7, #28]
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	61fb      	str	r3, [r7, #28]
 801ab12:	88fb      	ldrh	r3, [r7, #6]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d002      	beq.n	801ab1e <pbuf_copy_partial+0xca>
 801ab18:	69fb      	ldr	r3, [r7, #28]
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d1c4      	bne.n	801aaa8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801ab1e:	8afb      	ldrh	r3, [r7, #22]
}
 801ab20:	4618      	mov	r0, r3
 801ab22:	3720      	adds	r7, #32
 801ab24:	46bd      	mov	sp, r7
 801ab26:	bd80      	pop	{r7, pc}
 801ab28:	0802ab20 	.word	0x0802ab20
 801ab2c:	0802ae68 	.word	0x0802ae68
 801ab30:	0802ab80 	.word	0x0802ab80
 801ab34:	0802ae88 	.word	0x0802ae88

0801ab38 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801ab38:	b580      	push	{r7, lr}
 801ab3a:	b084      	sub	sp, #16
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	4603      	mov	r3, r0
 801ab40:	603a      	str	r2, [r7, #0]
 801ab42:	71fb      	strb	r3, [r7, #7]
 801ab44:	460b      	mov	r3, r1
 801ab46:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801ab48:	683b      	ldr	r3, [r7, #0]
 801ab4a:	8919      	ldrh	r1, [r3, #8]
 801ab4c:	88ba      	ldrh	r2, [r7, #4]
 801ab4e:	79fb      	ldrb	r3, [r7, #7]
 801ab50:	4618      	mov	r0, r3
 801ab52:	f7ff fa63 	bl	801a01c <pbuf_alloc>
 801ab56:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801ab58:	68fb      	ldr	r3, [r7, #12]
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d101      	bne.n	801ab62 <pbuf_clone+0x2a>
    return NULL;
 801ab5e:	2300      	movs	r3, #0
 801ab60:	e011      	b.n	801ab86 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801ab62:	6839      	ldr	r1, [r7, #0]
 801ab64:	68f8      	ldr	r0, [r7, #12]
 801ab66:	f7ff fea3 	bl	801a8b0 <pbuf_copy>
 801ab6a:	4603      	mov	r3, r0
 801ab6c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801ab6e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d006      	beq.n	801ab84 <pbuf_clone+0x4c>
 801ab76:	4b06      	ldr	r3, [pc, #24]	@ (801ab90 <pbuf_clone+0x58>)
 801ab78:	f240 5224 	movw	r2, #1316	@ 0x524
 801ab7c:	4905      	ldr	r1, [pc, #20]	@ (801ab94 <pbuf_clone+0x5c>)
 801ab7e:	4806      	ldr	r0, [pc, #24]	@ (801ab98 <pbuf_clone+0x60>)
 801ab80:	f00a fcb0 	bl	80254e4 <iprintf>
  return q;
 801ab84:	68fb      	ldr	r3, [r7, #12]
}
 801ab86:	4618      	mov	r0, r3
 801ab88:	3710      	adds	r7, #16
 801ab8a:	46bd      	mov	sp, r7
 801ab8c:	bd80      	pop	{r7, pc}
 801ab8e:	bf00      	nop
 801ab90:	0802ab20 	.word	0x0802ab20
 801ab94:	0802af94 	.word	0x0802af94
 801ab98:	0802ab80 	.word	0x0802ab80

0801ab9c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801ab9c:	b580      	push	{r7, lr}
 801ab9e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801aba0:	f009 fce2 	bl	8024568 <rand>
 801aba4:	4603      	mov	r3, r0
 801aba6:	b29b      	uxth	r3, r3
 801aba8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801abac:	b29b      	uxth	r3, r3
 801abae:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801abb2:	b29a      	uxth	r2, r3
 801abb4:	4b01      	ldr	r3, [pc, #4]	@ (801abbc <tcp_init+0x20>)
 801abb6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801abb8:	bf00      	nop
 801abba:	bd80      	pop	{r7, pc}
 801abbc:	2400020c 	.word	0x2400020c

0801abc0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b082      	sub	sp, #8
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	7d1b      	ldrb	r3, [r3, #20]
 801abcc:	2b01      	cmp	r3, #1
 801abce:	d105      	bne.n	801abdc <tcp_free+0x1c>
 801abd0:	4b06      	ldr	r3, [pc, #24]	@ (801abec <tcp_free+0x2c>)
 801abd2:	22d4      	movs	r2, #212	@ 0xd4
 801abd4:	4906      	ldr	r1, [pc, #24]	@ (801abf0 <tcp_free+0x30>)
 801abd6:	4807      	ldr	r0, [pc, #28]	@ (801abf4 <tcp_free+0x34>)
 801abd8:	f00a fc84 	bl	80254e4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801abdc:	6879      	ldr	r1, [r7, #4]
 801abde:	2001      	movs	r0, #1
 801abe0:	f7fe fe5c 	bl	801989c <memp_free>
}
 801abe4:	bf00      	nop
 801abe6:	3708      	adds	r7, #8
 801abe8:	46bd      	mov	sp, r7
 801abea:	bd80      	pop	{r7, pc}
 801abec:	0802b020 	.word	0x0802b020
 801abf0:	0802b050 	.word	0x0802b050
 801abf4:	0802b064 	.word	0x0802b064

0801abf8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801abf8:	b580      	push	{r7, lr}
 801abfa:	b082      	sub	sp, #8
 801abfc:	af00      	add	r7, sp, #0
 801abfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	7d1b      	ldrb	r3, [r3, #20]
 801ac04:	2b01      	cmp	r3, #1
 801ac06:	d105      	bne.n	801ac14 <tcp_free_listen+0x1c>
 801ac08:	4b06      	ldr	r3, [pc, #24]	@ (801ac24 <tcp_free_listen+0x2c>)
 801ac0a:	22df      	movs	r2, #223	@ 0xdf
 801ac0c:	4906      	ldr	r1, [pc, #24]	@ (801ac28 <tcp_free_listen+0x30>)
 801ac0e:	4807      	ldr	r0, [pc, #28]	@ (801ac2c <tcp_free_listen+0x34>)
 801ac10:	f00a fc68 	bl	80254e4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801ac14:	6879      	ldr	r1, [r7, #4]
 801ac16:	2002      	movs	r0, #2
 801ac18:	f7fe fe40 	bl	801989c <memp_free>
}
 801ac1c:	bf00      	nop
 801ac1e:	3708      	adds	r7, #8
 801ac20:	46bd      	mov	sp, r7
 801ac22:	bd80      	pop	{r7, pc}
 801ac24:	0802b020 	.word	0x0802b020
 801ac28:	0802b08c 	.word	0x0802b08c
 801ac2c:	0802b064 	.word	0x0802b064

0801ac30 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801ac30:	b580      	push	{r7, lr}
 801ac32:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801ac34:	f000 ffde 	bl	801bbf4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801ac38:	4b07      	ldr	r3, [pc, #28]	@ (801ac58 <tcp_tmr+0x28>)
 801ac3a:	781b      	ldrb	r3, [r3, #0]
 801ac3c:	3301      	adds	r3, #1
 801ac3e:	b2da      	uxtb	r2, r3
 801ac40:	4b05      	ldr	r3, [pc, #20]	@ (801ac58 <tcp_tmr+0x28>)
 801ac42:	701a      	strb	r2, [r3, #0]
 801ac44:	4b04      	ldr	r3, [pc, #16]	@ (801ac58 <tcp_tmr+0x28>)
 801ac46:	781b      	ldrb	r3, [r3, #0]
 801ac48:	f003 0301 	and.w	r3, r3, #1
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d001      	beq.n	801ac54 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801ac50:	f000 fc8e 	bl	801b570 <tcp_slowtmr>
  }
}
 801ac54:	bf00      	nop
 801ac56:	bd80      	pop	{r7, pc}
 801ac58:	2400be79 	.word	0x2400be79

0801ac5c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801ac5c:	b580      	push	{r7, lr}
 801ac5e:	b084      	sub	sp, #16
 801ac60:	af00      	add	r7, sp, #0
 801ac62:	6078      	str	r0, [r7, #4]
 801ac64:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801ac66:	683b      	ldr	r3, [r7, #0]
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	d105      	bne.n	801ac78 <tcp_remove_listener+0x1c>
 801ac6c:	4b0d      	ldr	r3, [pc, #52]	@ (801aca4 <tcp_remove_listener+0x48>)
 801ac6e:	22ff      	movs	r2, #255	@ 0xff
 801ac70:	490d      	ldr	r1, [pc, #52]	@ (801aca8 <tcp_remove_listener+0x4c>)
 801ac72:	480e      	ldr	r0, [pc, #56]	@ (801acac <tcp_remove_listener+0x50>)
 801ac74:	f00a fc36 	bl	80254e4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	60fb      	str	r3, [r7, #12]
 801ac7c:	e00a      	b.n	801ac94 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801ac7e:	68fb      	ldr	r3, [r7, #12]
 801ac80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ac82:	683a      	ldr	r2, [r7, #0]
 801ac84:	429a      	cmp	r2, r3
 801ac86:	d102      	bne.n	801ac8e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801ac88:	68fb      	ldr	r3, [r7, #12]
 801ac8a:	2200      	movs	r2, #0
 801ac8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801ac8e:	68fb      	ldr	r3, [r7, #12]
 801ac90:	68db      	ldr	r3, [r3, #12]
 801ac92:	60fb      	str	r3, [r7, #12]
 801ac94:	68fb      	ldr	r3, [r7, #12]
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	d1f1      	bne.n	801ac7e <tcp_remove_listener+0x22>
    }
  }
}
 801ac9a:	bf00      	nop
 801ac9c:	bf00      	nop
 801ac9e:	3710      	adds	r7, #16
 801aca0:	46bd      	mov	sp, r7
 801aca2:	bd80      	pop	{r7, pc}
 801aca4:	0802b020 	.word	0x0802b020
 801aca8:	0802b0a8 	.word	0x0802b0a8
 801acac:	0802b064 	.word	0x0802b064

0801acb0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801acb0:	b580      	push	{r7, lr}
 801acb2:	b084      	sub	sp, #16
 801acb4:	af00      	add	r7, sp, #0
 801acb6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	2b00      	cmp	r3, #0
 801acbc:	d106      	bne.n	801accc <tcp_listen_closed+0x1c>
 801acbe:	4b14      	ldr	r3, [pc, #80]	@ (801ad10 <tcp_listen_closed+0x60>)
 801acc0:	f240 1211 	movw	r2, #273	@ 0x111
 801acc4:	4913      	ldr	r1, [pc, #76]	@ (801ad14 <tcp_listen_closed+0x64>)
 801acc6:	4814      	ldr	r0, [pc, #80]	@ (801ad18 <tcp_listen_closed+0x68>)
 801acc8:	f00a fc0c 	bl	80254e4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	7d1b      	ldrb	r3, [r3, #20]
 801acd0:	2b01      	cmp	r3, #1
 801acd2:	d006      	beq.n	801ace2 <tcp_listen_closed+0x32>
 801acd4:	4b0e      	ldr	r3, [pc, #56]	@ (801ad10 <tcp_listen_closed+0x60>)
 801acd6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801acda:	4910      	ldr	r1, [pc, #64]	@ (801ad1c <tcp_listen_closed+0x6c>)
 801acdc:	480e      	ldr	r0, [pc, #56]	@ (801ad18 <tcp_listen_closed+0x68>)
 801acde:	f00a fc01 	bl	80254e4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801ace2:	2301      	movs	r3, #1
 801ace4:	60fb      	str	r3, [r7, #12]
 801ace6:	e00b      	b.n	801ad00 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801ace8:	4a0d      	ldr	r2, [pc, #52]	@ (801ad20 <tcp_listen_closed+0x70>)
 801acea:	68fb      	ldr	r3, [r7, #12]
 801acec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	6879      	ldr	r1, [r7, #4]
 801acf4:	4618      	mov	r0, r3
 801acf6:	f7ff ffb1 	bl	801ac5c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801acfa:	68fb      	ldr	r3, [r7, #12]
 801acfc:	3301      	adds	r3, #1
 801acfe:	60fb      	str	r3, [r7, #12]
 801ad00:	68fb      	ldr	r3, [r7, #12]
 801ad02:	2b03      	cmp	r3, #3
 801ad04:	d9f0      	bls.n	801ace8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801ad06:	bf00      	nop
 801ad08:	bf00      	nop
 801ad0a:	3710      	adds	r7, #16
 801ad0c:	46bd      	mov	sp, r7
 801ad0e:	bd80      	pop	{r7, pc}
 801ad10:	0802b020 	.word	0x0802b020
 801ad14:	0802b0d0 	.word	0x0802b0d0
 801ad18:	0802b064 	.word	0x0802b064
 801ad1c:	0802b0dc 	.word	0x0802b0dc
 801ad20:	0802d12c 	.word	0x0802d12c

0801ad24 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801ad24:	b5b0      	push	{r4, r5, r7, lr}
 801ad26:	b088      	sub	sp, #32
 801ad28:	af04      	add	r7, sp, #16
 801ad2a:	6078      	str	r0, [r7, #4]
 801ad2c:	460b      	mov	r3, r1
 801ad2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d106      	bne.n	801ad44 <tcp_close_shutdown+0x20>
 801ad36:	4b63      	ldr	r3, [pc, #396]	@ (801aec4 <tcp_close_shutdown+0x1a0>)
 801ad38:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801ad3c:	4962      	ldr	r1, [pc, #392]	@ (801aec8 <tcp_close_shutdown+0x1a4>)
 801ad3e:	4863      	ldr	r0, [pc, #396]	@ (801aecc <tcp_close_shutdown+0x1a8>)
 801ad40:	f00a fbd0 	bl	80254e4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801ad44:	78fb      	ldrb	r3, [r7, #3]
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	d066      	beq.n	801ae18 <tcp_close_shutdown+0xf4>
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	7d1b      	ldrb	r3, [r3, #20]
 801ad4e:	2b04      	cmp	r3, #4
 801ad50:	d003      	beq.n	801ad5a <tcp_close_shutdown+0x36>
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	7d1b      	ldrb	r3, [r3, #20]
 801ad56:	2b07      	cmp	r3, #7
 801ad58:	d15e      	bne.n	801ae18 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	d104      	bne.n	801ad6c <tcp_close_shutdown+0x48>
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ad66:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801ad6a:	d055      	beq.n	801ae18 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	8b5b      	ldrh	r3, [r3, #26]
 801ad70:	f003 0310 	and.w	r3, r3, #16
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d106      	bne.n	801ad86 <tcp_close_shutdown+0x62>
 801ad78:	4b52      	ldr	r3, [pc, #328]	@ (801aec4 <tcp_close_shutdown+0x1a0>)
 801ad7a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801ad7e:	4954      	ldr	r1, [pc, #336]	@ (801aed0 <tcp_close_shutdown+0x1ac>)
 801ad80:	4852      	ldr	r0, [pc, #328]	@ (801aecc <tcp_close_shutdown+0x1a8>)
 801ad82:	f00a fbaf 	bl	80254e4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801ad8e:	687d      	ldr	r5, [r7, #4]
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	3304      	adds	r3, #4
 801ad94:	687a      	ldr	r2, [r7, #4]
 801ad96:	8ad2      	ldrh	r2, [r2, #22]
 801ad98:	6879      	ldr	r1, [r7, #4]
 801ad9a:	8b09      	ldrh	r1, [r1, #24]
 801ad9c:	9102      	str	r1, [sp, #8]
 801ad9e:	9201      	str	r2, [sp, #4]
 801ada0:	9300      	str	r3, [sp, #0]
 801ada2:	462b      	mov	r3, r5
 801ada4:	4622      	mov	r2, r4
 801ada6:	4601      	mov	r1, r0
 801ada8:	6878      	ldr	r0, [r7, #4]
 801adaa:	f005 fced 	bl	8020788 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801adae:	6878      	ldr	r0, [r7, #4]
 801adb0:	f001 fad0 	bl	801c354 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801adb4:	4b47      	ldr	r3, [pc, #284]	@ (801aed4 <tcp_close_shutdown+0x1b0>)
 801adb6:	681b      	ldr	r3, [r3, #0]
 801adb8:	687a      	ldr	r2, [r7, #4]
 801adba:	429a      	cmp	r2, r3
 801adbc:	d105      	bne.n	801adca <tcp_close_shutdown+0xa6>
 801adbe:	4b45      	ldr	r3, [pc, #276]	@ (801aed4 <tcp_close_shutdown+0x1b0>)
 801adc0:	681b      	ldr	r3, [r3, #0]
 801adc2:	68db      	ldr	r3, [r3, #12]
 801adc4:	4a43      	ldr	r2, [pc, #268]	@ (801aed4 <tcp_close_shutdown+0x1b0>)
 801adc6:	6013      	str	r3, [r2, #0]
 801adc8:	e013      	b.n	801adf2 <tcp_close_shutdown+0xce>
 801adca:	4b42      	ldr	r3, [pc, #264]	@ (801aed4 <tcp_close_shutdown+0x1b0>)
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	60fb      	str	r3, [r7, #12]
 801add0:	e00c      	b.n	801adec <tcp_close_shutdown+0xc8>
 801add2:	68fb      	ldr	r3, [r7, #12]
 801add4:	68db      	ldr	r3, [r3, #12]
 801add6:	687a      	ldr	r2, [r7, #4]
 801add8:	429a      	cmp	r2, r3
 801adda:	d104      	bne.n	801ade6 <tcp_close_shutdown+0xc2>
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	68da      	ldr	r2, [r3, #12]
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	60da      	str	r2, [r3, #12]
 801ade4:	e005      	b.n	801adf2 <tcp_close_shutdown+0xce>
 801ade6:	68fb      	ldr	r3, [r7, #12]
 801ade8:	68db      	ldr	r3, [r3, #12]
 801adea:	60fb      	str	r3, [r7, #12]
 801adec:	68fb      	ldr	r3, [r7, #12]
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d1ef      	bne.n	801add2 <tcp_close_shutdown+0xae>
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	2200      	movs	r2, #0
 801adf6:	60da      	str	r2, [r3, #12]
 801adf8:	4b37      	ldr	r3, [pc, #220]	@ (801aed8 <tcp_close_shutdown+0x1b4>)
 801adfa:	2201      	movs	r2, #1
 801adfc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801adfe:	4b37      	ldr	r3, [pc, #220]	@ (801aedc <tcp_close_shutdown+0x1b8>)
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	687a      	ldr	r2, [r7, #4]
 801ae04:	429a      	cmp	r2, r3
 801ae06:	d102      	bne.n	801ae0e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801ae08:	f003 ff64 	bl	801ecd4 <tcp_trigger_input_pcb_close>
 801ae0c:	e002      	b.n	801ae14 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801ae0e:	6878      	ldr	r0, [r7, #4]
 801ae10:	f7ff fed6 	bl	801abc0 <tcp_free>
      }
      return ERR_OK;
 801ae14:	2300      	movs	r3, #0
 801ae16:	e050      	b.n	801aeba <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	7d1b      	ldrb	r3, [r3, #20]
 801ae1c:	2b02      	cmp	r3, #2
 801ae1e:	d03b      	beq.n	801ae98 <tcp_close_shutdown+0x174>
 801ae20:	2b02      	cmp	r3, #2
 801ae22:	dc44      	bgt.n	801aeae <tcp_close_shutdown+0x18a>
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	d002      	beq.n	801ae2e <tcp_close_shutdown+0x10a>
 801ae28:	2b01      	cmp	r3, #1
 801ae2a:	d02a      	beq.n	801ae82 <tcp_close_shutdown+0x15e>
 801ae2c:	e03f      	b.n	801aeae <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	8adb      	ldrh	r3, [r3, #22]
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	d021      	beq.n	801ae7a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801ae36:	4b2a      	ldr	r3, [pc, #168]	@ (801aee0 <tcp_close_shutdown+0x1bc>)
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	687a      	ldr	r2, [r7, #4]
 801ae3c:	429a      	cmp	r2, r3
 801ae3e:	d105      	bne.n	801ae4c <tcp_close_shutdown+0x128>
 801ae40:	4b27      	ldr	r3, [pc, #156]	@ (801aee0 <tcp_close_shutdown+0x1bc>)
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	68db      	ldr	r3, [r3, #12]
 801ae46:	4a26      	ldr	r2, [pc, #152]	@ (801aee0 <tcp_close_shutdown+0x1bc>)
 801ae48:	6013      	str	r3, [r2, #0]
 801ae4a:	e013      	b.n	801ae74 <tcp_close_shutdown+0x150>
 801ae4c:	4b24      	ldr	r3, [pc, #144]	@ (801aee0 <tcp_close_shutdown+0x1bc>)
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	60bb      	str	r3, [r7, #8]
 801ae52:	e00c      	b.n	801ae6e <tcp_close_shutdown+0x14a>
 801ae54:	68bb      	ldr	r3, [r7, #8]
 801ae56:	68db      	ldr	r3, [r3, #12]
 801ae58:	687a      	ldr	r2, [r7, #4]
 801ae5a:	429a      	cmp	r2, r3
 801ae5c:	d104      	bne.n	801ae68 <tcp_close_shutdown+0x144>
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	68da      	ldr	r2, [r3, #12]
 801ae62:	68bb      	ldr	r3, [r7, #8]
 801ae64:	60da      	str	r2, [r3, #12]
 801ae66:	e005      	b.n	801ae74 <tcp_close_shutdown+0x150>
 801ae68:	68bb      	ldr	r3, [r7, #8]
 801ae6a:	68db      	ldr	r3, [r3, #12]
 801ae6c:	60bb      	str	r3, [r7, #8]
 801ae6e:	68bb      	ldr	r3, [r7, #8]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d1ef      	bne.n	801ae54 <tcp_close_shutdown+0x130>
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	2200      	movs	r2, #0
 801ae78:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801ae7a:	6878      	ldr	r0, [r7, #4]
 801ae7c:	f7ff fea0 	bl	801abc0 <tcp_free>
      break;
 801ae80:	e01a      	b.n	801aeb8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801ae82:	6878      	ldr	r0, [r7, #4]
 801ae84:	f7ff ff14 	bl	801acb0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801ae88:	6879      	ldr	r1, [r7, #4]
 801ae8a:	4816      	ldr	r0, [pc, #88]	@ (801aee4 <tcp_close_shutdown+0x1c0>)
 801ae8c:	f001 fab2 	bl	801c3f4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801ae90:	6878      	ldr	r0, [r7, #4]
 801ae92:	f7ff feb1 	bl	801abf8 <tcp_free_listen>
      break;
 801ae96:	e00f      	b.n	801aeb8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801ae98:	6879      	ldr	r1, [r7, #4]
 801ae9a:	480e      	ldr	r0, [pc, #56]	@ (801aed4 <tcp_close_shutdown+0x1b0>)
 801ae9c:	f001 faaa 	bl	801c3f4 <tcp_pcb_remove>
 801aea0:	4b0d      	ldr	r3, [pc, #52]	@ (801aed8 <tcp_close_shutdown+0x1b4>)
 801aea2:	2201      	movs	r2, #1
 801aea4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801aea6:	6878      	ldr	r0, [r7, #4]
 801aea8:	f7ff fe8a 	bl	801abc0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801aeac:	e004      	b.n	801aeb8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801aeae:	6878      	ldr	r0, [r7, #4]
 801aeb0:	f000 f81a 	bl	801aee8 <tcp_close_shutdown_fin>
 801aeb4:	4603      	mov	r3, r0
 801aeb6:	e000      	b.n	801aeba <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801aeb8:	2300      	movs	r3, #0
}
 801aeba:	4618      	mov	r0, r3
 801aebc:	3710      	adds	r7, #16
 801aebe:	46bd      	mov	sp, r7
 801aec0:	bdb0      	pop	{r4, r5, r7, pc}
 801aec2:	bf00      	nop
 801aec4:	0802b020 	.word	0x0802b020
 801aec8:	0802b0f4 	.word	0x0802b0f4
 801aecc:	0802b064 	.word	0x0802b064
 801aed0:	0802b114 	.word	0x0802b114
 801aed4:	2400be70 	.word	0x2400be70
 801aed8:	2400be78 	.word	0x2400be78
 801aedc:	2400beb0 	.word	0x2400beb0
 801aee0:	2400be68 	.word	0x2400be68
 801aee4:	2400be6c 	.word	0x2400be6c

0801aee8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801aee8:	b580      	push	{r7, lr}
 801aeea:	b084      	sub	sp, #16
 801aeec:	af00      	add	r7, sp, #0
 801aeee:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d106      	bne.n	801af04 <tcp_close_shutdown_fin+0x1c>
 801aef6:	4b2e      	ldr	r3, [pc, #184]	@ (801afb0 <tcp_close_shutdown_fin+0xc8>)
 801aef8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801aefc:	492d      	ldr	r1, [pc, #180]	@ (801afb4 <tcp_close_shutdown_fin+0xcc>)
 801aefe:	482e      	ldr	r0, [pc, #184]	@ (801afb8 <tcp_close_shutdown_fin+0xd0>)
 801af00:	f00a faf0 	bl	80254e4 <iprintf>

  switch (pcb->state) {
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	7d1b      	ldrb	r3, [r3, #20]
 801af08:	2b07      	cmp	r3, #7
 801af0a:	d020      	beq.n	801af4e <tcp_close_shutdown_fin+0x66>
 801af0c:	2b07      	cmp	r3, #7
 801af0e:	dc2b      	bgt.n	801af68 <tcp_close_shutdown_fin+0x80>
 801af10:	2b03      	cmp	r3, #3
 801af12:	d002      	beq.n	801af1a <tcp_close_shutdown_fin+0x32>
 801af14:	2b04      	cmp	r3, #4
 801af16:	d00d      	beq.n	801af34 <tcp_close_shutdown_fin+0x4c>
 801af18:	e026      	b.n	801af68 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801af1a:	6878      	ldr	r0, [r7, #4]
 801af1c:	f004 fd42 	bl	801f9a4 <tcp_send_fin>
 801af20:	4603      	mov	r3, r0
 801af22:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801af24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d11f      	bne.n	801af6c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	2205      	movs	r2, #5
 801af30:	751a      	strb	r2, [r3, #20]
      }
      break;
 801af32:	e01b      	b.n	801af6c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801af34:	6878      	ldr	r0, [r7, #4]
 801af36:	f004 fd35 	bl	801f9a4 <tcp_send_fin>
 801af3a:	4603      	mov	r3, r0
 801af3c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801af3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801af42:	2b00      	cmp	r3, #0
 801af44:	d114      	bne.n	801af70 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	2205      	movs	r2, #5
 801af4a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801af4c:	e010      	b.n	801af70 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801af4e:	6878      	ldr	r0, [r7, #4]
 801af50:	f004 fd28 	bl	801f9a4 <tcp_send_fin>
 801af54:	4603      	mov	r3, r0
 801af56:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801af58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d109      	bne.n	801af74 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	2209      	movs	r2, #9
 801af64:	751a      	strb	r2, [r3, #20]
      }
      break;
 801af66:	e005      	b.n	801af74 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801af68:	2300      	movs	r3, #0
 801af6a:	e01c      	b.n	801afa6 <tcp_close_shutdown_fin+0xbe>
      break;
 801af6c:	bf00      	nop
 801af6e:	e002      	b.n	801af76 <tcp_close_shutdown_fin+0x8e>
      break;
 801af70:	bf00      	nop
 801af72:	e000      	b.n	801af76 <tcp_close_shutdown_fin+0x8e>
      break;
 801af74:	bf00      	nop
  }

  if (err == ERR_OK) {
 801af76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d103      	bne.n	801af86 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801af7e:	6878      	ldr	r0, [r7, #4]
 801af80:	f004 fe4e 	bl	801fc20 <tcp_output>
 801af84:	e00d      	b.n	801afa2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801af86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801af8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af8e:	d108      	bne.n	801afa2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	8b5b      	ldrh	r3, [r3, #26]
 801af94:	f043 0308 	orr.w	r3, r3, #8
 801af98:	b29a      	uxth	r2, r3
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801af9e:	2300      	movs	r3, #0
 801afa0:	e001      	b.n	801afa6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801afa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801afa6:	4618      	mov	r0, r3
 801afa8:	3710      	adds	r7, #16
 801afaa:	46bd      	mov	sp, r7
 801afac:	bd80      	pop	{r7, pc}
 801afae:	bf00      	nop
 801afb0:	0802b020 	.word	0x0802b020
 801afb4:	0802b0d0 	.word	0x0802b0d0
 801afb8:	0802b064 	.word	0x0802b064

0801afbc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801afbc:	b580      	push	{r7, lr}
 801afbe:	b082      	sub	sp, #8
 801afc0:	af00      	add	r7, sp, #0
 801afc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d109      	bne.n	801afde <tcp_close+0x22>
 801afca:	4b0f      	ldr	r3, [pc, #60]	@ (801b008 <tcp_close+0x4c>)
 801afcc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 801afd0:	490e      	ldr	r1, [pc, #56]	@ (801b00c <tcp_close+0x50>)
 801afd2:	480f      	ldr	r0, [pc, #60]	@ (801b010 <tcp_close+0x54>)
 801afd4:	f00a fa86 	bl	80254e4 <iprintf>
 801afd8:	f06f 030f 	mvn.w	r3, #15
 801afdc:	e00f      	b.n	801affe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	7d1b      	ldrb	r3, [r3, #20]
 801afe2:	2b01      	cmp	r3, #1
 801afe4:	d006      	beq.n	801aff4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	8b5b      	ldrh	r3, [r3, #26]
 801afea:	f043 0310 	orr.w	r3, r3, #16
 801afee:	b29a      	uxth	r2, r3
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801aff4:	2101      	movs	r1, #1
 801aff6:	6878      	ldr	r0, [r7, #4]
 801aff8:	f7ff fe94 	bl	801ad24 <tcp_close_shutdown>
 801affc:	4603      	mov	r3, r0
}
 801affe:	4618      	mov	r0, r3
 801b000:	3708      	adds	r7, #8
 801b002:	46bd      	mov	sp, r7
 801b004:	bd80      	pop	{r7, pc}
 801b006:	bf00      	nop
 801b008:	0802b020 	.word	0x0802b020
 801b00c:	0802b130 	.word	0x0802b130
 801b010:	0802b064 	.word	0x0802b064

0801b014 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801b014:	b580      	push	{r7, lr}
 801b016:	b084      	sub	sp, #16
 801b018:	af00      	add	r7, sp, #0
 801b01a:	60f8      	str	r0, [r7, #12]
 801b01c:	60b9      	str	r1, [r7, #8]
 801b01e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801b020:	68fb      	ldr	r3, [r7, #12]
 801b022:	2b00      	cmp	r3, #0
 801b024:	d109      	bne.n	801b03a <tcp_shutdown+0x26>
 801b026:	4b26      	ldr	r3, [pc, #152]	@ (801b0c0 <tcp_shutdown+0xac>)
 801b028:	f240 2207 	movw	r2, #519	@ 0x207
 801b02c:	4925      	ldr	r1, [pc, #148]	@ (801b0c4 <tcp_shutdown+0xb0>)
 801b02e:	4826      	ldr	r0, [pc, #152]	@ (801b0c8 <tcp_shutdown+0xb4>)
 801b030:	f00a fa58 	bl	80254e4 <iprintf>
 801b034:	f06f 030f 	mvn.w	r3, #15
 801b038:	e03d      	b.n	801b0b6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	7d1b      	ldrb	r3, [r3, #20]
 801b03e:	2b01      	cmp	r3, #1
 801b040:	d102      	bne.n	801b048 <tcp_shutdown+0x34>
    return ERR_CONN;
 801b042:	f06f 030a 	mvn.w	r3, #10
 801b046:	e036      	b.n	801b0b6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 801b048:	68bb      	ldr	r3, [r7, #8]
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d01b      	beq.n	801b086 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801b04e:	68fb      	ldr	r3, [r7, #12]
 801b050:	8b5b      	ldrh	r3, [r3, #26]
 801b052:	f043 0310 	orr.w	r3, r3, #16
 801b056:	b29a      	uxth	r2, r3
 801b058:	68fb      	ldr	r3, [r7, #12]
 801b05a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d005      	beq.n	801b06e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801b062:	2101      	movs	r1, #1
 801b064:	68f8      	ldr	r0, [r7, #12]
 801b066:	f7ff fe5d 	bl	801ad24 <tcp_close_shutdown>
 801b06a:	4603      	mov	r3, r0
 801b06c:	e023      	b.n	801b0b6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801b06e:	68fb      	ldr	r3, [r7, #12]
 801b070:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b072:	2b00      	cmp	r3, #0
 801b074:	d007      	beq.n	801b086 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801b076:	68fb      	ldr	r3, [r7, #12]
 801b078:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b07a:	4618      	mov	r0, r3
 801b07c:	f7ff fae4 	bl	801a648 <pbuf_free>
      pcb->refused_data = NULL;
 801b080:	68fb      	ldr	r3, [r7, #12]
 801b082:	2200      	movs	r2, #0
 801b084:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	2b00      	cmp	r3, #0
 801b08a:	d013      	beq.n	801b0b4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801b08c:	68fb      	ldr	r3, [r7, #12]
 801b08e:	7d1b      	ldrb	r3, [r3, #20]
 801b090:	2b04      	cmp	r3, #4
 801b092:	dc02      	bgt.n	801b09a <tcp_shutdown+0x86>
 801b094:	2b03      	cmp	r3, #3
 801b096:	da02      	bge.n	801b09e <tcp_shutdown+0x8a>
 801b098:	e009      	b.n	801b0ae <tcp_shutdown+0x9a>
 801b09a:	2b07      	cmp	r3, #7
 801b09c:	d107      	bne.n	801b0ae <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801b09e:	68bb      	ldr	r3, [r7, #8]
 801b0a0:	b2db      	uxtb	r3, r3
 801b0a2:	4619      	mov	r1, r3
 801b0a4:	68f8      	ldr	r0, [r7, #12]
 801b0a6:	f7ff fe3d 	bl	801ad24 <tcp_close_shutdown>
 801b0aa:	4603      	mov	r3, r0
 801b0ac:	e003      	b.n	801b0b6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801b0ae:	f06f 030a 	mvn.w	r3, #10
 801b0b2:	e000      	b.n	801b0b6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 801b0b4:	2300      	movs	r3, #0
}
 801b0b6:	4618      	mov	r0, r3
 801b0b8:	3710      	adds	r7, #16
 801b0ba:	46bd      	mov	sp, r7
 801b0bc:	bd80      	pop	{r7, pc}
 801b0be:	bf00      	nop
 801b0c0:	0802b020 	.word	0x0802b020
 801b0c4:	0802b148 	.word	0x0802b148
 801b0c8:	0802b064 	.word	0x0802b064

0801b0cc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801b0cc:	b580      	push	{r7, lr}
 801b0ce:	b08e      	sub	sp, #56	@ 0x38
 801b0d0:	af04      	add	r7, sp, #16
 801b0d2:	6078      	str	r0, [r7, #4]
 801b0d4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d107      	bne.n	801b0ec <tcp_abandon+0x20>
 801b0dc:	4b52      	ldr	r3, [pc, #328]	@ (801b228 <tcp_abandon+0x15c>)
 801b0de:	f240 223d 	movw	r2, #573	@ 0x23d
 801b0e2:	4952      	ldr	r1, [pc, #328]	@ (801b22c <tcp_abandon+0x160>)
 801b0e4:	4852      	ldr	r0, [pc, #328]	@ (801b230 <tcp_abandon+0x164>)
 801b0e6:	f00a f9fd 	bl	80254e4 <iprintf>
 801b0ea:	e099      	b.n	801b220 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	7d1b      	ldrb	r3, [r3, #20]
 801b0f0:	2b01      	cmp	r3, #1
 801b0f2:	d106      	bne.n	801b102 <tcp_abandon+0x36>
 801b0f4:	4b4c      	ldr	r3, [pc, #304]	@ (801b228 <tcp_abandon+0x15c>)
 801b0f6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801b0fa:	494e      	ldr	r1, [pc, #312]	@ (801b234 <tcp_abandon+0x168>)
 801b0fc:	484c      	ldr	r0, [pc, #304]	@ (801b230 <tcp_abandon+0x164>)
 801b0fe:	f00a f9f1 	bl	80254e4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	7d1b      	ldrb	r3, [r3, #20]
 801b106:	2b0a      	cmp	r3, #10
 801b108:	d107      	bne.n	801b11a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801b10a:	6879      	ldr	r1, [r7, #4]
 801b10c:	484a      	ldr	r0, [pc, #296]	@ (801b238 <tcp_abandon+0x16c>)
 801b10e:	f001 f971 	bl	801c3f4 <tcp_pcb_remove>
    tcp_free(pcb);
 801b112:	6878      	ldr	r0, [r7, #4]
 801b114:	f7ff fd54 	bl	801abc0 <tcp_free>
 801b118:	e082      	b.n	801b220 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801b11a:	2300      	movs	r3, #0
 801b11c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801b11e:	2300      	movs	r3, #0
 801b120:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b126:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b12c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b134:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	691b      	ldr	r3, [r3, #16]
 801b13a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	7d1b      	ldrb	r3, [r3, #20]
 801b140:	2b00      	cmp	r3, #0
 801b142:	d126      	bne.n	801b192 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	8adb      	ldrh	r3, [r3, #22]
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d02e      	beq.n	801b1aa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b14c:	4b3b      	ldr	r3, [pc, #236]	@ (801b23c <tcp_abandon+0x170>)
 801b14e:	681b      	ldr	r3, [r3, #0]
 801b150:	687a      	ldr	r2, [r7, #4]
 801b152:	429a      	cmp	r2, r3
 801b154:	d105      	bne.n	801b162 <tcp_abandon+0x96>
 801b156:	4b39      	ldr	r3, [pc, #228]	@ (801b23c <tcp_abandon+0x170>)
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	68db      	ldr	r3, [r3, #12]
 801b15c:	4a37      	ldr	r2, [pc, #220]	@ (801b23c <tcp_abandon+0x170>)
 801b15e:	6013      	str	r3, [r2, #0]
 801b160:	e013      	b.n	801b18a <tcp_abandon+0xbe>
 801b162:	4b36      	ldr	r3, [pc, #216]	@ (801b23c <tcp_abandon+0x170>)
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	61fb      	str	r3, [r7, #28]
 801b168:	e00c      	b.n	801b184 <tcp_abandon+0xb8>
 801b16a:	69fb      	ldr	r3, [r7, #28]
 801b16c:	68db      	ldr	r3, [r3, #12]
 801b16e:	687a      	ldr	r2, [r7, #4]
 801b170:	429a      	cmp	r2, r3
 801b172:	d104      	bne.n	801b17e <tcp_abandon+0xb2>
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	68da      	ldr	r2, [r3, #12]
 801b178:	69fb      	ldr	r3, [r7, #28]
 801b17a:	60da      	str	r2, [r3, #12]
 801b17c:	e005      	b.n	801b18a <tcp_abandon+0xbe>
 801b17e:	69fb      	ldr	r3, [r7, #28]
 801b180:	68db      	ldr	r3, [r3, #12]
 801b182:	61fb      	str	r3, [r7, #28]
 801b184:	69fb      	ldr	r3, [r7, #28]
 801b186:	2b00      	cmp	r3, #0
 801b188:	d1ef      	bne.n	801b16a <tcp_abandon+0x9e>
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	2200      	movs	r2, #0
 801b18e:	60da      	str	r2, [r3, #12]
 801b190:	e00b      	b.n	801b1aa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801b192:	683b      	ldr	r3, [r7, #0]
 801b194:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	8adb      	ldrh	r3, [r3, #22]
 801b19a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801b19c:	6879      	ldr	r1, [r7, #4]
 801b19e:	4828      	ldr	r0, [pc, #160]	@ (801b240 <tcp_abandon+0x174>)
 801b1a0:	f001 f928 	bl	801c3f4 <tcp_pcb_remove>
 801b1a4:	4b27      	ldr	r3, [pc, #156]	@ (801b244 <tcp_abandon+0x178>)
 801b1a6:	2201      	movs	r2, #1
 801b1a8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d004      	beq.n	801b1bc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	f000 fdfc 	bl	801bdb4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d004      	beq.n	801b1ce <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b1c8:	4618      	mov	r0, r3
 801b1ca:	f000 fdf3 	bl	801bdb4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d004      	beq.n	801b1e0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b1da:	4618      	mov	r0, r3
 801b1dc:	f000 fdea 	bl	801bdb4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801b1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	d00e      	beq.n	801b204 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801b1e6:	6879      	ldr	r1, [r7, #4]
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	3304      	adds	r3, #4
 801b1ec:	687a      	ldr	r2, [r7, #4]
 801b1ee:	8b12      	ldrh	r2, [r2, #24]
 801b1f0:	9202      	str	r2, [sp, #8]
 801b1f2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b1f4:	9201      	str	r2, [sp, #4]
 801b1f6:	9300      	str	r3, [sp, #0]
 801b1f8:	460b      	mov	r3, r1
 801b1fa:	697a      	ldr	r2, [r7, #20]
 801b1fc:	69b9      	ldr	r1, [r7, #24]
 801b1fe:	6878      	ldr	r0, [r7, #4]
 801b200:	f005 fac2 	bl	8020788 <tcp_rst>
    }
    last_state = pcb->state;
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	7d1b      	ldrb	r3, [r3, #20]
 801b208:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801b20a:	6878      	ldr	r0, [r7, #4]
 801b20c:	f7ff fcd8 	bl	801abc0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801b210:	693b      	ldr	r3, [r7, #16]
 801b212:	2b00      	cmp	r3, #0
 801b214:	d004      	beq.n	801b220 <tcp_abandon+0x154>
 801b216:	693b      	ldr	r3, [r7, #16]
 801b218:	f06f 010c 	mvn.w	r1, #12
 801b21c:	68f8      	ldr	r0, [r7, #12]
 801b21e:	4798      	blx	r3
  }
}
 801b220:	3728      	adds	r7, #40	@ 0x28
 801b222:	46bd      	mov	sp, r7
 801b224:	bd80      	pop	{r7, pc}
 801b226:	bf00      	nop
 801b228:	0802b020 	.word	0x0802b020
 801b22c:	0802b164 	.word	0x0802b164
 801b230:	0802b064 	.word	0x0802b064
 801b234:	0802b180 	.word	0x0802b180
 801b238:	2400be74 	.word	0x2400be74
 801b23c:	2400be68 	.word	0x2400be68
 801b240:	2400be70 	.word	0x2400be70
 801b244:	2400be78 	.word	0x2400be78

0801b248 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801b248:	b580      	push	{r7, lr}
 801b24a:	b082      	sub	sp, #8
 801b24c:	af00      	add	r7, sp, #0
 801b24e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801b250:	2101      	movs	r1, #1
 801b252:	6878      	ldr	r0, [r7, #4]
 801b254:	f7ff ff3a 	bl	801b0cc <tcp_abandon>
}
 801b258:	bf00      	nop
 801b25a:	3708      	adds	r7, #8
 801b25c:	46bd      	mov	sp, r7
 801b25e:	bd80      	pop	{r7, pc}

0801b260 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b260:	b580      	push	{r7, lr}
 801b262:	b088      	sub	sp, #32
 801b264:	af00      	add	r7, sp, #0
 801b266:	60f8      	str	r0, [r7, #12]
 801b268:	60b9      	str	r1, [r7, #8]
 801b26a:	4613      	mov	r3, r2
 801b26c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801b26e:	2304      	movs	r3, #4
 801b270:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b272:	68bb      	ldr	r3, [r7, #8]
 801b274:	2b00      	cmp	r3, #0
 801b276:	d101      	bne.n	801b27c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801b278:	4b3e      	ldr	r3, [pc, #248]	@ (801b374 <tcp_bind+0x114>)
 801b27a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b27c:	68fb      	ldr	r3, [r7, #12]
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d109      	bne.n	801b296 <tcp_bind+0x36>
 801b282:	4b3d      	ldr	r3, [pc, #244]	@ (801b378 <tcp_bind+0x118>)
 801b284:	f240 22a9 	movw	r2, #681	@ 0x2a9
 801b288:	493c      	ldr	r1, [pc, #240]	@ (801b37c <tcp_bind+0x11c>)
 801b28a:	483d      	ldr	r0, [pc, #244]	@ (801b380 <tcp_bind+0x120>)
 801b28c:	f00a f92a 	bl	80254e4 <iprintf>
 801b290:	f06f 030f 	mvn.w	r3, #15
 801b294:	e06a      	b.n	801b36c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801b296:	68fb      	ldr	r3, [r7, #12]
 801b298:	7d1b      	ldrb	r3, [r3, #20]
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d009      	beq.n	801b2b2 <tcp_bind+0x52>
 801b29e:	4b36      	ldr	r3, [pc, #216]	@ (801b378 <tcp_bind+0x118>)
 801b2a0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801b2a4:	4937      	ldr	r1, [pc, #220]	@ (801b384 <tcp_bind+0x124>)
 801b2a6:	4836      	ldr	r0, [pc, #216]	@ (801b380 <tcp_bind+0x120>)
 801b2a8:	f00a f91c 	bl	80254e4 <iprintf>
 801b2ac:	f06f 0305 	mvn.w	r3, #5
 801b2b0:	e05c      	b.n	801b36c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801b2b2:	88fb      	ldrh	r3, [r7, #6]
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	d109      	bne.n	801b2cc <tcp_bind+0x6c>
    port = tcp_new_port();
 801b2b8:	f000 f914 	bl	801b4e4 <tcp_new_port>
 801b2bc:	4603      	mov	r3, r0
 801b2be:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b2c0:	88fb      	ldrh	r3, [r7, #6]
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d135      	bne.n	801b332 <tcp_bind+0xd2>
      return ERR_BUF;
 801b2c6:	f06f 0301 	mvn.w	r3, #1
 801b2ca:	e04f      	b.n	801b36c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801b2cc:	2300      	movs	r3, #0
 801b2ce:	61fb      	str	r3, [r7, #28]
 801b2d0:	e02b      	b.n	801b32a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b2d2:	4a2d      	ldr	r2, [pc, #180]	@ (801b388 <tcp_bind+0x128>)
 801b2d4:	69fb      	ldr	r3, [r7, #28]
 801b2d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	61bb      	str	r3, [r7, #24]
 801b2de:	e01e      	b.n	801b31e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801b2e0:	69bb      	ldr	r3, [r7, #24]
 801b2e2:	8adb      	ldrh	r3, [r3, #22]
 801b2e4:	88fa      	ldrh	r2, [r7, #6]
 801b2e6:	429a      	cmp	r2, r3
 801b2e8:	d116      	bne.n	801b318 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801b2ea:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d010      	beq.n	801b312 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801b2f0:	69bb      	ldr	r3, [r7, #24]
 801b2f2:	681b      	ldr	r3, [r3, #0]
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d00c      	beq.n	801b312 <tcp_bind+0xb2>
 801b2f8:	68bb      	ldr	r3, [r7, #8]
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	d009      	beq.n	801b312 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801b2fe:	68bb      	ldr	r3, [r7, #8]
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	2b00      	cmp	r3, #0
 801b304:	d005      	beq.n	801b312 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801b306:	69bb      	ldr	r3, [r7, #24]
 801b308:	681a      	ldr	r2, [r3, #0]
 801b30a:	68bb      	ldr	r3, [r7, #8]
 801b30c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801b30e:	429a      	cmp	r2, r3
 801b310:	d102      	bne.n	801b318 <tcp_bind+0xb8>
              return ERR_USE;
 801b312:	f06f 0307 	mvn.w	r3, #7
 801b316:	e029      	b.n	801b36c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b318:	69bb      	ldr	r3, [r7, #24]
 801b31a:	68db      	ldr	r3, [r3, #12]
 801b31c:	61bb      	str	r3, [r7, #24]
 801b31e:	69bb      	ldr	r3, [r7, #24]
 801b320:	2b00      	cmp	r3, #0
 801b322:	d1dd      	bne.n	801b2e0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801b324:	69fb      	ldr	r3, [r7, #28]
 801b326:	3301      	adds	r3, #1
 801b328:	61fb      	str	r3, [r7, #28]
 801b32a:	69fa      	ldr	r2, [r7, #28]
 801b32c:	697b      	ldr	r3, [r7, #20]
 801b32e:	429a      	cmp	r2, r3
 801b330:	dbcf      	blt.n	801b2d2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801b332:	68bb      	ldr	r3, [r7, #8]
 801b334:	2b00      	cmp	r3, #0
 801b336:	d00c      	beq.n	801b352 <tcp_bind+0xf2>
 801b338:	68bb      	ldr	r3, [r7, #8]
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	d008      	beq.n	801b352 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801b340:	68bb      	ldr	r3, [r7, #8]
 801b342:	2b00      	cmp	r3, #0
 801b344:	d002      	beq.n	801b34c <tcp_bind+0xec>
 801b346:	68bb      	ldr	r3, [r7, #8]
 801b348:	681b      	ldr	r3, [r3, #0]
 801b34a:	e000      	b.n	801b34e <tcp_bind+0xee>
 801b34c:	2300      	movs	r3, #0
 801b34e:	68fa      	ldr	r2, [r7, #12]
 801b350:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801b352:	68fb      	ldr	r3, [r7, #12]
 801b354:	88fa      	ldrh	r2, [r7, #6]
 801b356:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801b358:	4b0c      	ldr	r3, [pc, #48]	@ (801b38c <tcp_bind+0x12c>)
 801b35a:	681a      	ldr	r2, [r3, #0]
 801b35c:	68fb      	ldr	r3, [r7, #12]
 801b35e:	60da      	str	r2, [r3, #12]
 801b360:	4a0a      	ldr	r2, [pc, #40]	@ (801b38c <tcp_bind+0x12c>)
 801b362:	68fb      	ldr	r3, [r7, #12]
 801b364:	6013      	str	r3, [r2, #0]
 801b366:	f005 fbd1 	bl	8020b0c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801b36a:	2300      	movs	r3, #0
}
 801b36c:	4618      	mov	r0, r3
 801b36e:	3720      	adds	r7, #32
 801b370:	46bd      	mov	sp, r7
 801b372:	bd80      	pop	{r7, pc}
 801b374:	0802d154 	.word	0x0802d154
 801b378:	0802b020 	.word	0x0802b020
 801b37c:	0802b1b4 	.word	0x0802b1b4
 801b380:	0802b064 	.word	0x0802b064
 801b384:	0802b1cc 	.word	0x0802b1cc
 801b388:	0802d12c 	.word	0x0802d12c
 801b38c:	2400be68 	.word	0x2400be68

0801b390 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801b390:	b580      	push	{r7, lr}
 801b392:	b084      	sub	sp, #16
 801b394:	af00      	add	r7, sp, #0
 801b396:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	d106      	bne.n	801b3ac <tcp_update_rcv_ann_wnd+0x1c>
 801b39e:	4b25      	ldr	r3, [pc, #148]	@ (801b434 <tcp_update_rcv_ann_wnd+0xa4>)
 801b3a0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 801b3a4:	4924      	ldr	r1, [pc, #144]	@ (801b438 <tcp_update_rcv_ann_wnd+0xa8>)
 801b3a6:	4825      	ldr	r0, [pc, #148]	@ (801b43c <tcp_update_rcv_ann_wnd+0xac>)
 801b3a8:	f00a f89c 	bl	80254e4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b3b0:	687a      	ldr	r2, [r7, #4]
 801b3b2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801b3b4:	4413      	add	r3, r2
 801b3b6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3bc:	687a      	ldr	r2, [r7, #4]
 801b3be:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801b3c0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 801b3c4:	bf28      	it	cs
 801b3c6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801b3ca:	b292      	uxth	r2, r2
 801b3cc:	4413      	add	r3, r2
 801b3ce:	68fa      	ldr	r2, [r7, #12]
 801b3d0:	1ad3      	subs	r3, r2, r3
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	db08      	blt.n	801b3e8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3e2:	68fa      	ldr	r2, [r7, #12]
 801b3e4:	1ad3      	subs	r3, r2, r3
 801b3e6:	e020      	b.n	801b42a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3f0:	1ad3      	subs	r3, r2, r3
 801b3f2:	2b00      	cmp	r3, #0
 801b3f4:	dd03      	ble.n	801b3fe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	2200      	movs	r2, #0
 801b3fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801b3fc:	e014      	b.n	801b428 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b406:	1ad3      	subs	r3, r2, r3
 801b408:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801b40a:	68bb      	ldr	r3, [r7, #8]
 801b40c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b410:	d306      	bcc.n	801b420 <tcp_update_rcv_ann_wnd+0x90>
 801b412:	4b08      	ldr	r3, [pc, #32]	@ (801b434 <tcp_update_rcv_ann_wnd+0xa4>)
 801b414:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801b418:	4909      	ldr	r1, [pc, #36]	@ (801b440 <tcp_update_rcv_ann_wnd+0xb0>)
 801b41a:	4808      	ldr	r0, [pc, #32]	@ (801b43c <tcp_update_rcv_ann_wnd+0xac>)
 801b41c:	f00a f862 	bl	80254e4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801b420:	68bb      	ldr	r3, [r7, #8]
 801b422:	b29a      	uxth	r2, r3
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801b428:	2300      	movs	r3, #0
  }
}
 801b42a:	4618      	mov	r0, r3
 801b42c:	3710      	adds	r7, #16
 801b42e:	46bd      	mov	sp, r7
 801b430:	bd80      	pop	{r7, pc}
 801b432:	bf00      	nop
 801b434:	0802b020 	.word	0x0802b020
 801b438:	0802b27c 	.word	0x0802b27c
 801b43c:	0802b064 	.word	0x0802b064
 801b440:	0802b2a0 	.word	0x0802b2a0

0801b444 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801b444:	b580      	push	{r7, lr}
 801b446:	b084      	sub	sp, #16
 801b448:	af00      	add	r7, sp, #0
 801b44a:	6078      	str	r0, [r7, #4]
 801b44c:	460b      	mov	r3, r1
 801b44e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	2b00      	cmp	r3, #0
 801b454:	d107      	bne.n	801b466 <tcp_recved+0x22>
 801b456:	4b1f      	ldr	r3, [pc, #124]	@ (801b4d4 <tcp_recved+0x90>)
 801b458:	f240 32cf 	movw	r2, #975	@ 0x3cf
 801b45c:	491e      	ldr	r1, [pc, #120]	@ (801b4d8 <tcp_recved+0x94>)
 801b45e:	481f      	ldr	r0, [pc, #124]	@ (801b4dc <tcp_recved+0x98>)
 801b460:	f00a f840 	bl	80254e4 <iprintf>
 801b464:	e032      	b.n	801b4cc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	7d1b      	ldrb	r3, [r3, #20]
 801b46a:	2b01      	cmp	r3, #1
 801b46c:	d106      	bne.n	801b47c <tcp_recved+0x38>
 801b46e:	4b19      	ldr	r3, [pc, #100]	@ (801b4d4 <tcp_recved+0x90>)
 801b470:	f240 32d2 	movw	r2, #978	@ 0x3d2
 801b474:	491a      	ldr	r1, [pc, #104]	@ (801b4e0 <tcp_recved+0x9c>)
 801b476:	4819      	ldr	r0, [pc, #100]	@ (801b4dc <tcp_recved+0x98>)
 801b478:	f00a f834 	bl	80254e4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801b480:	887b      	ldrh	r3, [r7, #2]
 801b482:	4413      	add	r3, r2
 801b484:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801b486:	89fb      	ldrh	r3, [r7, #14]
 801b488:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801b48c:	d804      	bhi.n	801b498 <tcp_recved+0x54>
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801b492:	89fa      	ldrh	r2, [r7, #14]
 801b494:	429a      	cmp	r2, r3
 801b496:	d204      	bcs.n	801b4a2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801b49e:	851a      	strh	r2, [r3, #40]	@ 0x28
 801b4a0:	e002      	b.n	801b4a8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	89fa      	ldrh	r2, [r7, #14]
 801b4a6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801b4a8:	6878      	ldr	r0, [r7, #4]
 801b4aa:	f7ff ff71 	bl	801b390 <tcp_update_rcv_ann_wnd>
 801b4ae:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801b4b0:	68bb      	ldr	r3, [r7, #8]
 801b4b2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801b4b6:	d309      	bcc.n	801b4cc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	8b5b      	ldrh	r3, [r3, #26]
 801b4bc:	f043 0302 	orr.w	r3, r3, #2
 801b4c0:	b29a      	uxth	r2, r3
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801b4c6:	6878      	ldr	r0, [r7, #4]
 801b4c8:	f004 fbaa 	bl	801fc20 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801b4cc:	3710      	adds	r7, #16
 801b4ce:	46bd      	mov	sp, r7
 801b4d0:	bd80      	pop	{r7, pc}
 801b4d2:	bf00      	nop
 801b4d4:	0802b020 	.word	0x0802b020
 801b4d8:	0802b2bc 	.word	0x0802b2bc
 801b4dc:	0802b064 	.word	0x0802b064
 801b4e0:	0802b2d4 	.word	0x0802b2d4

0801b4e4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801b4e4:	b480      	push	{r7}
 801b4e6:	b083      	sub	sp, #12
 801b4e8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801b4ea:	2300      	movs	r3, #0
 801b4ec:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801b4ee:	4b1e      	ldr	r3, [pc, #120]	@ (801b568 <tcp_new_port+0x84>)
 801b4f0:	881b      	ldrh	r3, [r3, #0]
 801b4f2:	3301      	adds	r3, #1
 801b4f4:	b29a      	uxth	r2, r3
 801b4f6:	4b1c      	ldr	r3, [pc, #112]	@ (801b568 <tcp_new_port+0x84>)
 801b4f8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801b4fa:	4b1b      	ldr	r3, [pc, #108]	@ (801b568 <tcp_new_port+0x84>)
 801b4fc:	881b      	ldrh	r3, [r3, #0]
 801b4fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b502:	4293      	cmp	r3, r2
 801b504:	d103      	bne.n	801b50e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801b506:	4b18      	ldr	r3, [pc, #96]	@ (801b568 <tcp_new_port+0x84>)
 801b508:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801b50c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801b50e:	2300      	movs	r3, #0
 801b510:	71fb      	strb	r3, [r7, #7]
 801b512:	e01e      	b.n	801b552 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801b514:	79fb      	ldrb	r3, [r7, #7]
 801b516:	4a15      	ldr	r2, [pc, #84]	@ (801b56c <tcp_new_port+0x88>)
 801b518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b51c:	681b      	ldr	r3, [r3, #0]
 801b51e:	603b      	str	r3, [r7, #0]
 801b520:	e011      	b.n	801b546 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801b522:	683b      	ldr	r3, [r7, #0]
 801b524:	8ada      	ldrh	r2, [r3, #22]
 801b526:	4b10      	ldr	r3, [pc, #64]	@ (801b568 <tcp_new_port+0x84>)
 801b528:	881b      	ldrh	r3, [r3, #0]
 801b52a:	429a      	cmp	r2, r3
 801b52c:	d108      	bne.n	801b540 <tcp_new_port+0x5c>
        n++;
 801b52e:	88bb      	ldrh	r3, [r7, #4]
 801b530:	3301      	adds	r3, #1
 801b532:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801b534:	88bb      	ldrh	r3, [r7, #4]
 801b536:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b53a:	d3d8      	bcc.n	801b4ee <tcp_new_port+0xa>
          return 0;
 801b53c:	2300      	movs	r3, #0
 801b53e:	e00d      	b.n	801b55c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801b540:	683b      	ldr	r3, [r7, #0]
 801b542:	68db      	ldr	r3, [r3, #12]
 801b544:	603b      	str	r3, [r7, #0]
 801b546:	683b      	ldr	r3, [r7, #0]
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d1ea      	bne.n	801b522 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801b54c:	79fb      	ldrb	r3, [r7, #7]
 801b54e:	3301      	adds	r3, #1
 801b550:	71fb      	strb	r3, [r7, #7]
 801b552:	79fb      	ldrb	r3, [r7, #7]
 801b554:	2b03      	cmp	r3, #3
 801b556:	d9dd      	bls.n	801b514 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801b558:	4b03      	ldr	r3, [pc, #12]	@ (801b568 <tcp_new_port+0x84>)
 801b55a:	881b      	ldrh	r3, [r3, #0]
}
 801b55c:	4618      	mov	r0, r3
 801b55e:	370c      	adds	r7, #12
 801b560:	46bd      	mov	sp, r7
 801b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b566:	4770      	bx	lr
 801b568:	2400020c 	.word	0x2400020c
 801b56c:	0802d12c 	.word	0x0802d12c

0801b570 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801b570:	b5b0      	push	{r4, r5, r7, lr}
 801b572:	b090      	sub	sp, #64	@ 0x40
 801b574:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801b576:	2300      	movs	r3, #0
 801b578:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801b57c:	4b95      	ldr	r3, [pc, #596]	@ (801b7d4 <tcp_slowtmr+0x264>)
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	3301      	adds	r3, #1
 801b582:	4a94      	ldr	r2, [pc, #592]	@ (801b7d4 <tcp_slowtmr+0x264>)
 801b584:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801b586:	4b94      	ldr	r3, [pc, #592]	@ (801b7d8 <tcp_slowtmr+0x268>)
 801b588:	781b      	ldrb	r3, [r3, #0]
 801b58a:	3301      	adds	r3, #1
 801b58c:	b2da      	uxtb	r2, r3
 801b58e:	4b92      	ldr	r3, [pc, #584]	@ (801b7d8 <tcp_slowtmr+0x268>)
 801b590:	701a      	strb	r2, [r3, #0]
 801b592:	e000      	b.n	801b596 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 801b594:	bf00      	nop
  prev = NULL;
 801b596:	2300      	movs	r3, #0
 801b598:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801b59a:	4b90      	ldr	r3, [pc, #576]	@ (801b7dc <tcp_slowtmr+0x26c>)
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801b5a0:	e29d      	b.n	801bade <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801b5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5a4:	7d1b      	ldrb	r3, [r3, #20]
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d106      	bne.n	801b5b8 <tcp_slowtmr+0x48>
 801b5aa:	4b8d      	ldr	r3, [pc, #564]	@ (801b7e0 <tcp_slowtmr+0x270>)
 801b5ac:	f240 42be 	movw	r2, #1214	@ 0x4be
 801b5b0:	498c      	ldr	r1, [pc, #560]	@ (801b7e4 <tcp_slowtmr+0x274>)
 801b5b2:	488d      	ldr	r0, [pc, #564]	@ (801b7e8 <tcp_slowtmr+0x278>)
 801b5b4:	f009 ff96 	bl	80254e4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801b5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5ba:	7d1b      	ldrb	r3, [r3, #20]
 801b5bc:	2b01      	cmp	r3, #1
 801b5be:	d106      	bne.n	801b5ce <tcp_slowtmr+0x5e>
 801b5c0:	4b87      	ldr	r3, [pc, #540]	@ (801b7e0 <tcp_slowtmr+0x270>)
 801b5c2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801b5c6:	4989      	ldr	r1, [pc, #548]	@ (801b7ec <tcp_slowtmr+0x27c>)
 801b5c8:	4887      	ldr	r0, [pc, #540]	@ (801b7e8 <tcp_slowtmr+0x278>)
 801b5ca:	f009 ff8b 	bl	80254e4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801b5ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5d0:	7d1b      	ldrb	r3, [r3, #20]
 801b5d2:	2b0a      	cmp	r3, #10
 801b5d4:	d106      	bne.n	801b5e4 <tcp_slowtmr+0x74>
 801b5d6:	4b82      	ldr	r3, [pc, #520]	@ (801b7e0 <tcp_slowtmr+0x270>)
 801b5d8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801b5dc:	4984      	ldr	r1, [pc, #528]	@ (801b7f0 <tcp_slowtmr+0x280>)
 801b5de:	4882      	ldr	r0, [pc, #520]	@ (801b7e8 <tcp_slowtmr+0x278>)
 801b5e0:	f009 ff80 	bl	80254e4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801b5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5e6:	7f9a      	ldrb	r2, [r3, #30]
 801b5e8:	4b7b      	ldr	r3, [pc, #492]	@ (801b7d8 <tcp_slowtmr+0x268>)
 801b5ea:	781b      	ldrb	r3, [r3, #0]
 801b5ec:	429a      	cmp	r2, r3
 801b5ee:	d105      	bne.n	801b5fc <tcp_slowtmr+0x8c>
      prev = pcb;
 801b5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801b5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5f6:	68db      	ldr	r3, [r3, #12]
 801b5f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801b5fa:	e270      	b.n	801bade <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801b5fc:	4b76      	ldr	r3, [pc, #472]	@ (801b7d8 <tcp_slowtmr+0x268>)
 801b5fe:	781a      	ldrb	r2, [r3, #0]
 801b600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b602:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 801b604:	2300      	movs	r3, #0
 801b606:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801b60a:	2300      	movs	r3, #0
 801b60c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801b610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b612:	7d1b      	ldrb	r3, [r3, #20]
 801b614:	2b02      	cmp	r3, #2
 801b616:	d10a      	bne.n	801b62e <tcp_slowtmr+0xbe>
 801b618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b61a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b61e:	2b05      	cmp	r3, #5
 801b620:	d905      	bls.n	801b62e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801b622:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b626:	3301      	adds	r3, #1
 801b628:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b62c:	e11e      	b.n	801b86c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801b62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b630:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b634:	2b0b      	cmp	r3, #11
 801b636:	d905      	bls.n	801b644 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 801b638:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b63c:	3301      	adds	r3, #1
 801b63e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b642:	e113      	b.n	801b86c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 801b644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b646:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d075      	beq.n	801b73a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801b64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b652:	2b00      	cmp	r3, #0
 801b654:	d006      	beq.n	801b664 <tcp_slowtmr+0xf4>
 801b656:	4b62      	ldr	r3, [pc, #392]	@ (801b7e0 <tcp_slowtmr+0x270>)
 801b658:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801b65c:	4965      	ldr	r1, [pc, #404]	@ (801b7f4 <tcp_slowtmr+0x284>)
 801b65e:	4862      	ldr	r0, [pc, #392]	@ (801b7e8 <tcp_slowtmr+0x278>)
 801b660:	f009 ff40 	bl	80254e4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801b664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b666:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b668:	2b00      	cmp	r3, #0
 801b66a:	d106      	bne.n	801b67a <tcp_slowtmr+0x10a>
 801b66c:	4b5c      	ldr	r3, [pc, #368]	@ (801b7e0 <tcp_slowtmr+0x270>)
 801b66e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 801b672:	4961      	ldr	r1, [pc, #388]	@ (801b7f8 <tcp_slowtmr+0x288>)
 801b674:	485c      	ldr	r0, [pc, #368]	@ (801b7e8 <tcp_slowtmr+0x278>)
 801b676:	f009 ff35 	bl	80254e4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801b67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b67c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b680:	2b0b      	cmp	r3, #11
 801b682:	d905      	bls.n	801b690 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 801b684:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b688:	3301      	adds	r3, #1
 801b68a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b68e:	e0ed      	b.n	801b86c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801b690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b692:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801b696:	3b01      	subs	r3, #1
 801b698:	4a58      	ldr	r2, [pc, #352]	@ (801b7fc <tcp_slowtmr+0x28c>)
 801b69a:	5cd3      	ldrb	r3, [r2, r3]
 801b69c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801b69e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6a0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801b6a4:	7c7a      	ldrb	r2, [r7, #17]
 801b6a6:	429a      	cmp	r2, r3
 801b6a8:	d907      	bls.n	801b6ba <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801b6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6ac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801b6b0:	3301      	adds	r3, #1
 801b6b2:	b2da      	uxtb	r2, r3
 801b6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6b6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801b6ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801b6c0:	7c7a      	ldrb	r2, [r7, #17]
 801b6c2:	429a      	cmp	r2, r3
 801b6c4:	f200 80d2 	bhi.w	801b86c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801b6c8:	2301      	movs	r3, #1
 801b6ca:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801b6cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	d108      	bne.n	801b6e8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801b6d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b6d8:	f005 f94a 	bl	8020970 <tcp_zero_window_probe>
 801b6dc:	4603      	mov	r3, r0
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	d014      	beq.n	801b70c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801b6e2:	2300      	movs	r3, #0
 801b6e4:	623b      	str	r3, [r7, #32]
 801b6e6:	e011      	b.n	801b70c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801b6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b6ee:	4619      	mov	r1, r3
 801b6f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b6f2:	f004 f80f 	bl	801f714 <tcp_split_unsent_seg>
 801b6f6:	4603      	mov	r3, r0
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d107      	bne.n	801b70c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801b6fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b6fe:	f004 fa8f 	bl	801fc20 <tcp_output>
 801b702:	4603      	mov	r3, r0
 801b704:	2b00      	cmp	r3, #0
 801b706:	d101      	bne.n	801b70c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801b708:	2300      	movs	r3, #0
 801b70a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801b70c:	6a3b      	ldr	r3, [r7, #32]
 801b70e:	2b00      	cmp	r3, #0
 801b710:	f000 80ac 	beq.w	801b86c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 801b714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b716:	2200      	movs	r2, #0
 801b718:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801b71c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b71e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801b722:	2b06      	cmp	r3, #6
 801b724:	f200 80a2 	bhi.w	801b86c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801b728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b72a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801b72e:	3301      	adds	r3, #1
 801b730:	b2da      	uxtb	r2, r3
 801b732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b734:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 801b738:	e098      	b.n	801b86c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801b73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b73c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801b740:	2b00      	cmp	r3, #0
 801b742:	db0f      	blt.n	801b764 <tcp_slowtmr+0x1f4>
 801b744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b746:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801b74a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801b74e:	4293      	cmp	r3, r2
 801b750:	d008      	beq.n	801b764 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801b752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b754:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801b758:	b29b      	uxth	r3, r3
 801b75a:	3301      	adds	r3, #1
 801b75c:	b29b      	uxth	r3, r3
 801b75e:	b21a      	sxth	r2, r3
 801b760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b762:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 801b764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b766:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801b76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b76c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801b770:	429a      	cmp	r2, r3
 801b772:	db7b      	blt.n	801b86c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801b774:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b776:	f004 fd47 	bl	8020208 <tcp_rexmit_rto_prepare>
 801b77a:	4603      	mov	r3, r0
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d007      	beq.n	801b790 <tcp_slowtmr+0x220>
 801b780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b784:	2b00      	cmp	r3, #0
 801b786:	d171      	bne.n	801b86c <tcp_slowtmr+0x2fc>
 801b788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b78a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b78c:	2b00      	cmp	r3, #0
 801b78e:	d06d      	beq.n	801b86c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 801b790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b792:	7d1b      	ldrb	r3, [r3, #20]
 801b794:	2b02      	cmp	r3, #2
 801b796:	d03a      	beq.n	801b80e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801b798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b79a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b79e:	2b0c      	cmp	r3, #12
 801b7a0:	bf28      	it	cs
 801b7a2:	230c      	movcs	r3, #12
 801b7a4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801b7a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801b7ac:	10db      	asrs	r3, r3, #3
 801b7ae:	b21b      	sxth	r3, r3
 801b7b0:	461a      	mov	r2, r3
 801b7b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801b7b8:	4413      	add	r3, r2
 801b7ba:	7efa      	ldrb	r2, [r7, #27]
 801b7bc:	4910      	ldr	r1, [pc, #64]	@ (801b800 <tcp_slowtmr+0x290>)
 801b7be:	5c8a      	ldrb	r2, [r1, r2]
 801b7c0:	4093      	lsls	r3, r2
 801b7c2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801b7c4:	697b      	ldr	r3, [r7, #20]
 801b7c6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801b7ca:	4293      	cmp	r3, r2
 801b7cc:	dc1a      	bgt.n	801b804 <tcp_slowtmr+0x294>
 801b7ce:	697b      	ldr	r3, [r7, #20]
 801b7d0:	b21a      	sxth	r2, r3
 801b7d2:	e019      	b.n	801b808 <tcp_slowtmr+0x298>
 801b7d4:	2400be64 	.word	0x2400be64
 801b7d8:	2400be7a 	.word	0x2400be7a
 801b7dc:	2400be70 	.word	0x2400be70
 801b7e0:	0802b020 	.word	0x0802b020
 801b7e4:	0802b364 	.word	0x0802b364
 801b7e8:	0802b064 	.word	0x0802b064
 801b7ec:	0802b390 	.word	0x0802b390
 801b7f0:	0802b3bc 	.word	0x0802b3bc
 801b7f4:	0802b3ec 	.word	0x0802b3ec
 801b7f8:	0802b420 	.word	0x0802b420
 801b7fc:	0802d124 	.word	0x0802d124
 801b800:	0802d114 	.word	0x0802d114
 801b804:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801b808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b80a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801b80e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b810:	2200      	movs	r2, #0
 801b812:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801b814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b816:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801b81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b81c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801b820:	4293      	cmp	r3, r2
 801b822:	bf28      	it	cs
 801b824:	4613      	movcs	r3, r2
 801b826:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801b828:	8a7b      	ldrh	r3, [r7, #18]
 801b82a:	085b      	lsrs	r3, r3, #1
 801b82c:	b29a      	uxth	r2, r3
 801b82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b830:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801b834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b836:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801b83a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b83c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b83e:	005b      	lsls	r3, r3, #1
 801b840:	b29b      	uxth	r3, r3
 801b842:	429a      	cmp	r2, r3
 801b844:	d206      	bcs.n	801b854 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801b846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b848:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b84a:	005b      	lsls	r3, r3, #1
 801b84c:	b29a      	uxth	r2, r3
 801b84e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b850:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 801b854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b856:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801b858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b85a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801b85e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b860:	2200      	movs	r2, #0
 801b862:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801b866:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b868:	f004 fd3e 	bl	80202e8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801b86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b86e:	7d1b      	ldrb	r3, [r3, #20]
 801b870:	2b06      	cmp	r3, #6
 801b872:	d111      	bne.n	801b898 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 801b874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b876:	8b5b      	ldrh	r3, [r3, #26]
 801b878:	f003 0310 	and.w	r3, r3, #16
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d00b      	beq.n	801b898 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b880:	4b9c      	ldr	r3, [pc, #624]	@ (801baf4 <tcp_slowtmr+0x584>)
 801b882:	681a      	ldr	r2, [r3, #0]
 801b884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b886:	6a1b      	ldr	r3, [r3, #32]
 801b888:	1ad3      	subs	r3, r2, r3
 801b88a:	2b28      	cmp	r3, #40	@ 0x28
 801b88c:	d904      	bls.n	801b898 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801b88e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b892:	3301      	adds	r3, #1
 801b894:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801b898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b89a:	7a5b      	ldrb	r3, [r3, #9]
 801b89c:	f003 0308 	and.w	r3, r3, #8
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d04a      	beq.n	801b93a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801b8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8a6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801b8a8:	2b04      	cmp	r3, #4
 801b8aa:	d003      	beq.n	801b8b4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801b8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8ae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801b8b0:	2b07      	cmp	r3, #7
 801b8b2:	d142      	bne.n	801b93a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b8b4:	4b8f      	ldr	r3, [pc, #572]	@ (801baf4 <tcp_slowtmr+0x584>)
 801b8b6:	681a      	ldr	r2, [r3, #0]
 801b8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8ba:	6a1b      	ldr	r3, [r3, #32]
 801b8bc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801b8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8c0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801b8c4:	4b8c      	ldr	r3, [pc, #560]	@ (801baf8 <tcp_slowtmr+0x588>)
 801b8c6:	440b      	add	r3, r1
 801b8c8:	498c      	ldr	r1, [pc, #560]	@ (801bafc <tcp_slowtmr+0x58c>)
 801b8ca:	fba1 1303 	umull	r1, r3, r1, r3
 801b8ce:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b8d0:	429a      	cmp	r2, r3
 801b8d2:	d90a      	bls.n	801b8ea <tcp_slowtmr+0x37a>
        ++pcb_remove;
 801b8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b8d8:	3301      	adds	r3, #1
 801b8da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801b8de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b8e2:	3301      	adds	r3, #1
 801b8e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801b8e8:	e027      	b.n	801b93a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b8ea:	4b82      	ldr	r3, [pc, #520]	@ (801baf4 <tcp_slowtmr+0x584>)
 801b8ec:	681a      	ldr	r2, [r3, #0]
 801b8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8f0:	6a1b      	ldr	r3, [r3, #32]
 801b8f2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801b8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8f6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801b8fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8fc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801b900:	4618      	mov	r0, r3
 801b902:	4b7f      	ldr	r3, [pc, #508]	@ (801bb00 <tcp_slowtmr+0x590>)
 801b904:	fb00 f303 	mul.w	r3, r0, r3
 801b908:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801b90a:	497c      	ldr	r1, [pc, #496]	@ (801bafc <tcp_slowtmr+0x58c>)
 801b90c:	fba1 1303 	umull	r1, r3, r1, r3
 801b910:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b912:	429a      	cmp	r2, r3
 801b914:	d911      	bls.n	801b93a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801b916:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b918:	f004 ffea 	bl	80208f0 <tcp_keepalive>
 801b91c:	4603      	mov	r3, r0
 801b91e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801b922:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801b926:	2b00      	cmp	r3, #0
 801b928:	d107      	bne.n	801b93a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801b92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b92c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801b930:	3301      	adds	r3, #1
 801b932:	b2da      	uxtb	r2, r3
 801b934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b936:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801b93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b93c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b93e:	2b00      	cmp	r3, #0
 801b940:	d011      	beq.n	801b966 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801b942:	4b6c      	ldr	r3, [pc, #432]	@ (801baf4 <tcp_slowtmr+0x584>)
 801b944:	681a      	ldr	r2, [r3, #0]
 801b946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b948:	6a1b      	ldr	r3, [r3, #32]
 801b94a:	1ad2      	subs	r2, r2, r3
 801b94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b94e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801b952:	4619      	mov	r1, r3
 801b954:	460b      	mov	r3, r1
 801b956:	005b      	lsls	r3, r3, #1
 801b958:	440b      	add	r3, r1
 801b95a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801b95c:	429a      	cmp	r2, r3
 801b95e:	d302      	bcc.n	801b966 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 801b960:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b962:	f000 feab 	bl	801c6bc <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801b966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b968:	7d1b      	ldrb	r3, [r3, #20]
 801b96a:	2b03      	cmp	r3, #3
 801b96c:	d10b      	bne.n	801b986 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b96e:	4b61      	ldr	r3, [pc, #388]	@ (801baf4 <tcp_slowtmr+0x584>)
 801b970:	681a      	ldr	r2, [r3, #0]
 801b972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b974:	6a1b      	ldr	r3, [r3, #32]
 801b976:	1ad3      	subs	r3, r2, r3
 801b978:	2b28      	cmp	r3, #40	@ 0x28
 801b97a:	d904      	bls.n	801b986 <tcp_slowtmr+0x416>
        ++pcb_remove;
 801b97c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b980:	3301      	adds	r3, #1
 801b982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801b986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b988:	7d1b      	ldrb	r3, [r3, #20]
 801b98a:	2b09      	cmp	r3, #9
 801b98c:	d10b      	bne.n	801b9a6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801b98e:	4b59      	ldr	r3, [pc, #356]	@ (801baf4 <tcp_slowtmr+0x584>)
 801b990:	681a      	ldr	r2, [r3, #0]
 801b992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b994:	6a1b      	ldr	r3, [r3, #32]
 801b996:	1ad3      	subs	r3, r2, r3
 801b998:	2bf0      	cmp	r3, #240	@ 0xf0
 801b99a:	d904      	bls.n	801b9a6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801b99c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b9a0:	3301      	adds	r3, #1
 801b9a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801b9a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d060      	beq.n	801ba70 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801b9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b9b4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801b9b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b9b8:	f000 fccc 	bl	801c354 <tcp_pcb_purge>
      if (prev != NULL) {
 801b9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d010      	beq.n	801b9e4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801b9c2:	4b50      	ldr	r3, [pc, #320]	@ (801bb04 <tcp_slowtmr+0x594>)
 801b9c4:	681b      	ldr	r3, [r3, #0]
 801b9c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b9c8:	429a      	cmp	r2, r3
 801b9ca:	d106      	bne.n	801b9da <tcp_slowtmr+0x46a>
 801b9cc:	4b4e      	ldr	r3, [pc, #312]	@ (801bb08 <tcp_slowtmr+0x598>)
 801b9ce:	f240 526d 	movw	r2, #1389	@ 0x56d
 801b9d2:	494e      	ldr	r1, [pc, #312]	@ (801bb0c <tcp_slowtmr+0x59c>)
 801b9d4:	484e      	ldr	r0, [pc, #312]	@ (801bb10 <tcp_slowtmr+0x5a0>)
 801b9d6:	f009 fd85 	bl	80254e4 <iprintf>
        prev->next = pcb->next;
 801b9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9dc:	68da      	ldr	r2, [r3, #12]
 801b9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b9e0:	60da      	str	r2, [r3, #12]
 801b9e2:	e00f      	b.n	801ba04 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801b9e4:	4b47      	ldr	r3, [pc, #284]	@ (801bb04 <tcp_slowtmr+0x594>)
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b9ea:	429a      	cmp	r2, r3
 801b9ec:	d006      	beq.n	801b9fc <tcp_slowtmr+0x48c>
 801b9ee:	4b46      	ldr	r3, [pc, #280]	@ (801bb08 <tcp_slowtmr+0x598>)
 801b9f0:	f240 5271 	movw	r2, #1393	@ 0x571
 801b9f4:	4947      	ldr	r1, [pc, #284]	@ (801bb14 <tcp_slowtmr+0x5a4>)
 801b9f6:	4846      	ldr	r0, [pc, #280]	@ (801bb10 <tcp_slowtmr+0x5a0>)
 801b9f8:	f009 fd74 	bl	80254e4 <iprintf>
        tcp_active_pcbs = pcb->next;
 801b9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9fe:	68db      	ldr	r3, [r3, #12]
 801ba00:	4a40      	ldr	r2, [pc, #256]	@ (801bb04 <tcp_slowtmr+0x594>)
 801ba02:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 801ba04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	d013      	beq.n	801ba34 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801ba0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba0e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801ba10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba12:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801ba14:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801ba16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba18:	3304      	adds	r3, #4
 801ba1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ba1c:	8ad2      	ldrh	r2, [r2, #22]
 801ba1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ba20:	8b09      	ldrh	r1, [r1, #24]
 801ba22:	9102      	str	r1, [sp, #8]
 801ba24:	9201      	str	r2, [sp, #4]
 801ba26:	9300      	str	r3, [sp, #0]
 801ba28:	462b      	mov	r3, r5
 801ba2a:	4622      	mov	r2, r4
 801ba2c:	4601      	mov	r1, r0
 801ba2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801ba30:	f004 feaa 	bl	8020788 <tcp_rst>
      err_arg = pcb->callback_arg;
 801ba34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba36:	691b      	ldr	r3, [r3, #16]
 801ba38:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801ba3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba3c:	7d1b      	ldrb	r3, [r3, #20]
 801ba3e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801ba40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba42:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801ba44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba46:	68db      	ldr	r3, [r3, #12]
 801ba48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801ba4a:	6838      	ldr	r0, [r7, #0]
 801ba4c:	f7ff f8b8 	bl	801abc0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 801ba50:	4b31      	ldr	r3, [pc, #196]	@ (801bb18 <tcp_slowtmr+0x5a8>)
 801ba52:	2200      	movs	r2, #0
 801ba54:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801ba56:	68fb      	ldr	r3, [r7, #12]
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d004      	beq.n	801ba66 <tcp_slowtmr+0x4f6>
 801ba5c:	68fb      	ldr	r3, [r7, #12]
 801ba5e:	f06f 010c 	mvn.w	r1, #12
 801ba62:	68b8      	ldr	r0, [r7, #8]
 801ba64:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801ba66:	4b2c      	ldr	r3, [pc, #176]	@ (801bb18 <tcp_slowtmr+0x5a8>)
 801ba68:	781b      	ldrb	r3, [r3, #0]
 801ba6a:	2b00      	cmp	r3, #0
 801ba6c:	d037      	beq.n	801bade <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801ba6e:	e592      	b.n	801b596 <tcp_slowtmr+0x26>
      prev = pcb;
 801ba70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba72:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801ba74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba76:	68db      	ldr	r3, [r3, #12]
 801ba78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801ba7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba7c:	7f1b      	ldrb	r3, [r3, #28]
 801ba7e:	3301      	adds	r3, #1
 801ba80:	b2da      	uxtb	r2, r3
 801ba82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba84:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801ba86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba88:	7f1a      	ldrb	r2, [r3, #28]
 801ba8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba8c:	7f5b      	ldrb	r3, [r3, #29]
 801ba8e:	429a      	cmp	r2, r3
 801ba90:	d325      	bcc.n	801bade <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801ba92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba94:	2200      	movs	r2, #0
 801ba96:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 801ba98:	4b1f      	ldr	r3, [pc, #124]	@ (801bb18 <tcp_slowtmr+0x5a8>)
 801ba9a:	2200      	movs	r2, #0
 801ba9c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801ba9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801baa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801baa4:	2b00      	cmp	r3, #0
 801baa6:	d00b      	beq.n	801bac0 <tcp_slowtmr+0x550>
 801baa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801baaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801baae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801bab0:	6912      	ldr	r2, [r2, #16]
 801bab2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801bab4:	4610      	mov	r0, r2
 801bab6:	4798      	blx	r3
 801bab8:	4603      	mov	r3, r0
 801baba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801babe:	e002      	b.n	801bac6 <tcp_slowtmr+0x556>
 801bac0:	2300      	movs	r3, #0
 801bac2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801bac6:	4b14      	ldr	r3, [pc, #80]	@ (801bb18 <tcp_slowtmr+0x5a8>)
 801bac8:	781b      	ldrb	r3, [r3, #0]
 801baca:	2b00      	cmp	r3, #0
 801bacc:	f47f ad62 	bne.w	801b594 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801bad0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801bad4:	2b00      	cmp	r3, #0
 801bad6:	d102      	bne.n	801bade <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801bad8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bada:	f004 f8a1 	bl	801fc20 <tcp_output>
  while (pcb != NULL) {
 801bade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	f47f ad5e 	bne.w	801b5a2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801bae6:	2300      	movs	r3, #0
 801bae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801baea:	4b0c      	ldr	r3, [pc, #48]	@ (801bb1c <tcp_slowtmr+0x5ac>)
 801baec:	681b      	ldr	r3, [r3, #0]
 801baee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801baf0:	e069      	b.n	801bbc6 <tcp_slowtmr+0x656>
 801baf2:	bf00      	nop
 801baf4:	2400be64 	.word	0x2400be64
 801baf8:	000a4cb8 	.word	0x000a4cb8
 801bafc:	10624dd3 	.word	0x10624dd3
 801bb00:	000124f8 	.word	0x000124f8
 801bb04:	2400be70 	.word	0x2400be70
 801bb08:	0802b020 	.word	0x0802b020
 801bb0c:	0802b458 	.word	0x0802b458
 801bb10:	0802b064 	.word	0x0802b064
 801bb14:	0802b484 	.word	0x0802b484
 801bb18:	2400be78 	.word	0x2400be78
 801bb1c:	2400be74 	.word	0x2400be74
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801bb20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb22:	7d1b      	ldrb	r3, [r3, #20]
 801bb24:	2b0a      	cmp	r3, #10
 801bb26:	d006      	beq.n	801bb36 <tcp_slowtmr+0x5c6>
 801bb28:	4b2b      	ldr	r3, [pc, #172]	@ (801bbd8 <tcp_slowtmr+0x668>)
 801bb2a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801bb2e:	492b      	ldr	r1, [pc, #172]	@ (801bbdc <tcp_slowtmr+0x66c>)
 801bb30:	482b      	ldr	r0, [pc, #172]	@ (801bbe0 <tcp_slowtmr+0x670>)
 801bb32:	f009 fcd7 	bl	80254e4 <iprintf>
    pcb_remove = 0;
 801bb36:	2300      	movs	r3, #0
 801bb38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801bb3c:	4b29      	ldr	r3, [pc, #164]	@ (801bbe4 <tcp_slowtmr+0x674>)
 801bb3e:	681a      	ldr	r2, [r3, #0]
 801bb40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb42:	6a1b      	ldr	r3, [r3, #32]
 801bb44:	1ad3      	subs	r3, r2, r3
 801bb46:	2bf0      	cmp	r3, #240	@ 0xf0
 801bb48:	d904      	bls.n	801bb54 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801bb4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801bb4e:	3301      	adds	r3, #1
 801bb50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801bb54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d02f      	beq.n	801bbbc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801bb5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801bb5e:	f000 fbf9 	bl	801c354 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801bb62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d010      	beq.n	801bb8a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801bb68:	4b1f      	ldr	r3, [pc, #124]	@ (801bbe8 <tcp_slowtmr+0x678>)
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bb6e:	429a      	cmp	r2, r3
 801bb70:	d106      	bne.n	801bb80 <tcp_slowtmr+0x610>
 801bb72:	4b19      	ldr	r3, [pc, #100]	@ (801bbd8 <tcp_slowtmr+0x668>)
 801bb74:	f240 52af 	movw	r2, #1455	@ 0x5af
 801bb78:	491c      	ldr	r1, [pc, #112]	@ (801bbec <tcp_slowtmr+0x67c>)
 801bb7a:	4819      	ldr	r0, [pc, #100]	@ (801bbe0 <tcp_slowtmr+0x670>)
 801bb7c:	f009 fcb2 	bl	80254e4 <iprintf>
        prev->next = pcb->next;
 801bb80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb82:	68da      	ldr	r2, [r3, #12]
 801bb84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb86:	60da      	str	r2, [r3, #12]
 801bb88:	e00f      	b.n	801bbaa <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801bb8a:	4b17      	ldr	r3, [pc, #92]	@ (801bbe8 <tcp_slowtmr+0x678>)
 801bb8c:	681b      	ldr	r3, [r3, #0]
 801bb8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bb90:	429a      	cmp	r2, r3
 801bb92:	d006      	beq.n	801bba2 <tcp_slowtmr+0x632>
 801bb94:	4b10      	ldr	r3, [pc, #64]	@ (801bbd8 <tcp_slowtmr+0x668>)
 801bb96:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801bb9a:	4915      	ldr	r1, [pc, #84]	@ (801bbf0 <tcp_slowtmr+0x680>)
 801bb9c:	4810      	ldr	r0, [pc, #64]	@ (801bbe0 <tcp_slowtmr+0x670>)
 801bb9e:	f009 fca1 	bl	80254e4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801bba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bba4:	68db      	ldr	r3, [r3, #12]
 801bba6:	4a10      	ldr	r2, [pc, #64]	@ (801bbe8 <tcp_slowtmr+0x678>)
 801bba8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801bbaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bbac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801bbae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bbb0:	68db      	ldr	r3, [r3, #12]
 801bbb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801bbb4:	69f8      	ldr	r0, [r7, #28]
 801bbb6:	f7ff f803 	bl	801abc0 <tcp_free>
 801bbba:	e004      	b.n	801bbc6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 801bbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bbbe:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801bbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bbc2:	68db      	ldr	r3, [r3, #12]
 801bbc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801bbc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d1a9      	bne.n	801bb20 <tcp_slowtmr+0x5b0>
    }
  }
}
 801bbcc:	bf00      	nop
 801bbce:	bf00      	nop
 801bbd0:	3730      	adds	r7, #48	@ 0x30
 801bbd2:	46bd      	mov	sp, r7
 801bbd4:	bdb0      	pop	{r4, r5, r7, pc}
 801bbd6:	bf00      	nop
 801bbd8:	0802b020 	.word	0x0802b020
 801bbdc:	0802b4b0 	.word	0x0802b4b0
 801bbe0:	0802b064 	.word	0x0802b064
 801bbe4:	2400be64 	.word	0x2400be64
 801bbe8:	2400be74 	.word	0x2400be74
 801bbec:	0802b4e0 	.word	0x0802b4e0
 801bbf0:	0802b508 	.word	0x0802b508

0801bbf4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801bbf4:	b580      	push	{r7, lr}
 801bbf6:	b082      	sub	sp, #8
 801bbf8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801bbfa:	4b2d      	ldr	r3, [pc, #180]	@ (801bcb0 <tcp_fasttmr+0xbc>)
 801bbfc:	781b      	ldrb	r3, [r3, #0]
 801bbfe:	3301      	adds	r3, #1
 801bc00:	b2da      	uxtb	r2, r3
 801bc02:	4b2b      	ldr	r3, [pc, #172]	@ (801bcb0 <tcp_fasttmr+0xbc>)
 801bc04:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801bc06:	4b2b      	ldr	r3, [pc, #172]	@ (801bcb4 <tcp_fasttmr+0xc0>)
 801bc08:	681b      	ldr	r3, [r3, #0]
 801bc0a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801bc0c:	e048      	b.n	801bca0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	7f9a      	ldrb	r2, [r3, #30]
 801bc12:	4b27      	ldr	r3, [pc, #156]	@ (801bcb0 <tcp_fasttmr+0xbc>)
 801bc14:	781b      	ldrb	r3, [r3, #0]
 801bc16:	429a      	cmp	r2, r3
 801bc18:	d03f      	beq.n	801bc9a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801bc1a:	4b25      	ldr	r3, [pc, #148]	@ (801bcb0 <tcp_fasttmr+0xbc>)
 801bc1c:	781a      	ldrb	r2, [r3, #0]
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	8b5b      	ldrh	r3, [r3, #26]
 801bc26:	f003 0301 	and.w	r3, r3, #1
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d010      	beq.n	801bc50 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	8b5b      	ldrh	r3, [r3, #26]
 801bc32:	f043 0302 	orr.w	r3, r3, #2
 801bc36:	b29a      	uxth	r2, r3
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801bc3c:	6878      	ldr	r0, [r7, #4]
 801bc3e:	f003 ffef 	bl	801fc20 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	8b5b      	ldrh	r3, [r3, #26]
 801bc46:	f023 0303 	bic.w	r3, r3, #3
 801bc4a:	b29a      	uxth	r2, r3
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	8b5b      	ldrh	r3, [r3, #26]
 801bc54:	f003 0308 	and.w	r3, r3, #8
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	d009      	beq.n	801bc70 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	8b5b      	ldrh	r3, [r3, #26]
 801bc60:	f023 0308 	bic.w	r3, r3, #8
 801bc64:	b29a      	uxth	r2, r3
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801bc6a:	6878      	ldr	r0, [r7, #4]
 801bc6c:	f7ff f93c 	bl	801aee8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	68db      	ldr	r3, [r3, #12]
 801bc74:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d00a      	beq.n	801bc94 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801bc7e:	4b0e      	ldr	r3, [pc, #56]	@ (801bcb8 <tcp_fasttmr+0xc4>)
 801bc80:	2200      	movs	r2, #0
 801bc82:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801bc84:	6878      	ldr	r0, [r7, #4]
 801bc86:	f000 f819 	bl	801bcbc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801bc8a:	4b0b      	ldr	r3, [pc, #44]	@ (801bcb8 <tcp_fasttmr+0xc4>)
 801bc8c:	781b      	ldrb	r3, [r3, #0]
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d000      	beq.n	801bc94 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801bc92:	e7b8      	b.n	801bc06 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801bc94:	683b      	ldr	r3, [r7, #0]
 801bc96:	607b      	str	r3, [r7, #4]
 801bc98:	e002      	b.n	801bca0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	68db      	ldr	r3, [r3, #12]
 801bc9e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d1b3      	bne.n	801bc0e <tcp_fasttmr+0x1a>
    }
  }
}
 801bca6:	bf00      	nop
 801bca8:	bf00      	nop
 801bcaa:	3708      	adds	r7, #8
 801bcac:	46bd      	mov	sp, r7
 801bcae:	bd80      	pop	{r7, pc}
 801bcb0:	2400be7a 	.word	0x2400be7a
 801bcb4:	2400be70 	.word	0x2400be70
 801bcb8:	2400be78 	.word	0x2400be78

0801bcbc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801bcbc:	b590      	push	{r4, r7, lr}
 801bcbe:	b085      	sub	sp, #20
 801bcc0:	af00      	add	r7, sp, #0
 801bcc2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d109      	bne.n	801bcde <tcp_process_refused_data+0x22>
 801bcca:	4b37      	ldr	r3, [pc, #220]	@ (801bda8 <tcp_process_refused_data+0xec>)
 801bccc:	f240 6209 	movw	r2, #1545	@ 0x609
 801bcd0:	4936      	ldr	r1, [pc, #216]	@ (801bdac <tcp_process_refused_data+0xf0>)
 801bcd2:	4837      	ldr	r0, [pc, #220]	@ (801bdb0 <tcp_process_refused_data+0xf4>)
 801bcd4:	f009 fc06 	bl	80254e4 <iprintf>
 801bcd8:	f06f 030f 	mvn.w	r3, #15
 801bcdc:	e060      	b.n	801bda0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801bce2:	7b5b      	ldrb	r3, [r3, #13]
 801bce4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801bcea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	2200      	movs	r2, #0
 801bcf0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801bcf8:	2b00      	cmp	r3, #0
 801bcfa:	d00b      	beq.n	801bd14 <tcp_process_refused_data+0x58>
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	6918      	ldr	r0, [r3, #16]
 801bd06:	2300      	movs	r3, #0
 801bd08:	68ba      	ldr	r2, [r7, #8]
 801bd0a:	6879      	ldr	r1, [r7, #4]
 801bd0c:	47a0      	blx	r4
 801bd0e:	4603      	mov	r3, r0
 801bd10:	73fb      	strb	r3, [r7, #15]
 801bd12:	e007      	b.n	801bd24 <tcp_process_refused_data+0x68>
 801bd14:	2300      	movs	r3, #0
 801bd16:	68ba      	ldr	r2, [r7, #8]
 801bd18:	6879      	ldr	r1, [r7, #4]
 801bd1a:	2000      	movs	r0, #0
 801bd1c:	f000 f8a4 	bl	801be68 <tcp_recv_null>
 801bd20:	4603      	mov	r3, r0
 801bd22:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801bd24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d12a      	bne.n	801bd82 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801bd2c:	7bbb      	ldrb	r3, [r7, #14]
 801bd2e:	f003 0320 	and.w	r3, r3, #32
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d033      	beq.n	801bd9e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801bd3a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801bd3e:	d005      	beq.n	801bd4c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801bd44:	3301      	adds	r3, #1
 801bd46:	b29a      	uxth	r2, r3
 801bd48:	687b      	ldr	r3, [r7, #4]
 801bd4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d00b      	beq.n	801bd6e <tcp_process_refused_data+0xb2>
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	6918      	ldr	r0, [r3, #16]
 801bd60:	2300      	movs	r3, #0
 801bd62:	2200      	movs	r2, #0
 801bd64:	6879      	ldr	r1, [r7, #4]
 801bd66:	47a0      	blx	r4
 801bd68:	4603      	mov	r3, r0
 801bd6a:	73fb      	strb	r3, [r7, #15]
 801bd6c:	e001      	b.n	801bd72 <tcp_process_refused_data+0xb6>
 801bd6e:	2300      	movs	r3, #0
 801bd70:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801bd72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bd76:	f113 0f0d 	cmn.w	r3, #13
 801bd7a:	d110      	bne.n	801bd9e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801bd7c:	f06f 030c 	mvn.w	r3, #12
 801bd80:	e00e      	b.n	801bda0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801bd82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bd86:	f113 0f0d 	cmn.w	r3, #13
 801bd8a:	d102      	bne.n	801bd92 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801bd8c:	f06f 030c 	mvn.w	r3, #12
 801bd90:	e006      	b.n	801bda0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	68ba      	ldr	r2, [r7, #8]
 801bd96:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801bd98:	f06f 0304 	mvn.w	r3, #4
 801bd9c:	e000      	b.n	801bda0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801bd9e:	2300      	movs	r3, #0
}
 801bda0:	4618      	mov	r0, r3
 801bda2:	3714      	adds	r7, #20
 801bda4:	46bd      	mov	sp, r7
 801bda6:	bd90      	pop	{r4, r7, pc}
 801bda8:	0802b020 	.word	0x0802b020
 801bdac:	0802b530 	.word	0x0802b530
 801bdb0:	0802b064 	.word	0x0802b064

0801bdb4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	b084      	sub	sp, #16
 801bdb8:	af00      	add	r7, sp, #0
 801bdba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801bdbc:	e007      	b.n	801bdce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	681b      	ldr	r3, [r3, #0]
 801bdc2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801bdc4:	6878      	ldr	r0, [r7, #4]
 801bdc6:	f000 f80a 	bl	801bdde <tcp_seg_free>
    seg = next;
 801bdca:	68fb      	ldr	r3, [r7, #12]
 801bdcc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	d1f4      	bne.n	801bdbe <tcp_segs_free+0xa>
  }
}
 801bdd4:	bf00      	nop
 801bdd6:	bf00      	nop
 801bdd8:	3710      	adds	r7, #16
 801bdda:	46bd      	mov	sp, r7
 801bddc:	bd80      	pop	{r7, pc}

0801bdde <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801bdde:	b580      	push	{r7, lr}
 801bde0:	b082      	sub	sp, #8
 801bde2:	af00      	add	r7, sp, #0
 801bde4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	d00c      	beq.n	801be06 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	685b      	ldr	r3, [r3, #4]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d004      	beq.n	801bdfe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	685b      	ldr	r3, [r3, #4]
 801bdf8:	4618      	mov	r0, r3
 801bdfa:	f7fe fc25 	bl	801a648 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801bdfe:	6879      	ldr	r1, [r7, #4]
 801be00:	2003      	movs	r0, #3
 801be02:	f7fd fd4b 	bl	801989c <memp_free>
  }
}
 801be06:	bf00      	nop
 801be08:	3708      	adds	r7, #8
 801be0a:	46bd      	mov	sp, r7
 801be0c:	bd80      	pop	{r7, pc}
	...

0801be10 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801be10:	b580      	push	{r7, lr}
 801be12:	b084      	sub	sp, #16
 801be14:	af00      	add	r7, sp, #0
 801be16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d106      	bne.n	801be2c <tcp_seg_copy+0x1c>
 801be1e:	4b0f      	ldr	r3, [pc, #60]	@ (801be5c <tcp_seg_copy+0x4c>)
 801be20:	f240 6282 	movw	r2, #1666	@ 0x682
 801be24:	490e      	ldr	r1, [pc, #56]	@ (801be60 <tcp_seg_copy+0x50>)
 801be26:	480f      	ldr	r0, [pc, #60]	@ (801be64 <tcp_seg_copy+0x54>)
 801be28:	f009 fb5c 	bl	80254e4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801be2c:	2003      	movs	r0, #3
 801be2e:	f7fd fcbf 	bl	80197b0 <memp_malloc>
 801be32:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801be34:	68fb      	ldr	r3, [r7, #12]
 801be36:	2b00      	cmp	r3, #0
 801be38:	d101      	bne.n	801be3e <tcp_seg_copy+0x2e>
    return NULL;
 801be3a:	2300      	movs	r3, #0
 801be3c:	e00a      	b.n	801be54 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801be3e:	2210      	movs	r2, #16
 801be40:	6879      	ldr	r1, [r7, #4]
 801be42:	68f8      	ldr	r0, [r7, #12]
 801be44:	f009 fcdb 	bl	80257fe <memcpy>
  pbuf_ref(cseg->p);
 801be48:	68fb      	ldr	r3, [r7, #12]
 801be4a:	685b      	ldr	r3, [r3, #4]
 801be4c:	4618      	mov	r0, r3
 801be4e:	f7fe fca1 	bl	801a794 <pbuf_ref>
  return cseg;
 801be52:	68fb      	ldr	r3, [r7, #12]
}
 801be54:	4618      	mov	r0, r3
 801be56:	3710      	adds	r7, #16
 801be58:	46bd      	mov	sp, r7
 801be5a:	bd80      	pop	{r7, pc}
 801be5c:	0802b020 	.word	0x0802b020
 801be60:	0802b574 	.word	0x0802b574
 801be64:	0802b064 	.word	0x0802b064

0801be68 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801be68:	b580      	push	{r7, lr}
 801be6a:	b084      	sub	sp, #16
 801be6c:	af00      	add	r7, sp, #0
 801be6e:	60f8      	str	r0, [r7, #12]
 801be70:	60b9      	str	r1, [r7, #8]
 801be72:	607a      	str	r2, [r7, #4]
 801be74:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801be76:	68bb      	ldr	r3, [r7, #8]
 801be78:	2b00      	cmp	r3, #0
 801be7a:	d109      	bne.n	801be90 <tcp_recv_null+0x28>
 801be7c:	4b12      	ldr	r3, [pc, #72]	@ (801bec8 <tcp_recv_null+0x60>)
 801be7e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801be82:	4912      	ldr	r1, [pc, #72]	@ (801becc <tcp_recv_null+0x64>)
 801be84:	4812      	ldr	r0, [pc, #72]	@ (801bed0 <tcp_recv_null+0x68>)
 801be86:	f009 fb2d 	bl	80254e4 <iprintf>
 801be8a:	f06f 030f 	mvn.w	r3, #15
 801be8e:	e016      	b.n	801bebe <tcp_recv_null+0x56>

  if (p != NULL) {
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	2b00      	cmp	r3, #0
 801be94:	d009      	beq.n	801beaa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	891b      	ldrh	r3, [r3, #8]
 801be9a:	4619      	mov	r1, r3
 801be9c:	68b8      	ldr	r0, [r7, #8]
 801be9e:	f7ff fad1 	bl	801b444 <tcp_recved>
    pbuf_free(p);
 801bea2:	6878      	ldr	r0, [r7, #4]
 801bea4:	f7fe fbd0 	bl	801a648 <pbuf_free>
 801bea8:	e008      	b.n	801bebc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801beaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801beae:	2b00      	cmp	r3, #0
 801beb0:	d104      	bne.n	801bebc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801beb2:	68b8      	ldr	r0, [r7, #8]
 801beb4:	f7ff f882 	bl	801afbc <tcp_close>
 801beb8:	4603      	mov	r3, r0
 801beba:	e000      	b.n	801bebe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801bebc:	2300      	movs	r3, #0
}
 801bebe:	4618      	mov	r0, r3
 801bec0:	3710      	adds	r7, #16
 801bec2:	46bd      	mov	sp, r7
 801bec4:	bd80      	pop	{r7, pc}
 801bec6:	bf00      	nop
 801bec8:	0802b020 	.word	0x0802b020
 801becc:	0802b590 	.word	0x0802b590
 801bed0:	0802b064 	.word	0x0802b064

0801bed4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801bed4:	b580      	push	{r7, lr}
 801bed6:	b086      	sub	sp, #24
 801bed8:	af00      	add	r7, sp, #0
 801beda:	4603      	mov	r3, r0
 801bedc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801bede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	db01      	blt.n	801beea <tcp_kill_prio+0x16>
 801bee6:	79fb      	ldrb	r3, [r7, #7]
 801bee8:	e000      	b.n	801beec <tcp_kill_prio+0x18>
 801beea:	237f      	movs	r3, #127	@ 0x7f
 801beec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801beee:	7afb      	ldrb	r3, [r7, #11]
 801bef0:	2b00      	cmp	r3, #0
 801bef2:	d034      	beq.n	801bf5e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801bef4:	7afb      	ldrb	r3, [r7, #11]
 801bef6:	3b01      	subs	r3, #1
 801bef8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801befa:	2300      	movs	r3, #0
 801befc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801befe:	2300      	movs	r3, #0
 801bf00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bf02:	4b19      	ldr	r3, [pc, #100]	@ (801bf68 <tcp_kill_prio+0x94>)
 801bf04:	681b      	ldr	r3, [r3, #0]
 801bf06:	617b      	str	r3, [r7, #20]
 801bf08:	e01f      	b.n	801bf4a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801bf0a:	697b      	ldr	r3, [r7, #20]
 801bf0c:	7d5b      	ldrb	r3, [r3, #21]
 801bf0e:	7afa      	ldrb	r2, [r7, #11]
 801bf10:	429a      	cmp	r2, r3
 801bf12:	d80c      	bhi.n	801bf2e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801bf14:	697b      	ldr	r3, [r7, #20]
 801bf16:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801bf18:	7afa      	ldrb	r2, [r7, #11]
 801bf1a:	429a      	cmp	r2, r3
 801bf1c:	d112      	bne.n	801bf44 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801bf1e:	4b13      	ldr	r3, [pc, #76]	@ (801bf6c <tcp_kill_prio+0x98>)
 801bf20:	681a      	ldr	r2, [r3, #0]
 801bf22:	697b      	ldr	r3, [r7, #20]
 801bf24:	6a1b      	ldr	r3, [r3, #32]
 801bf26:	1ad3      	subs	r3, r2, r3
 801bf28:	68fa      	ldr	r2, [r7, #12]
 801bf2a:	429a      	cmp	r2, r3
 801bf2c:	d80a      	bhi.n	801bf44 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801bf2e:	4b0f      	ldr	r3, [pc, #60]	@ (801bf6c <tcp_kill_prio+0x98>)
 801bf30:	681a      	ldr	r2, [r3, #0]
 801bf32:	697b      	ldr	r3, [r7, #20]
 801bf34:	6a1b      	ldr	r3, [r3, #32]
 801bf36:	1ad3      	subs	r3, r2, r3
 801bf38:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801bf3a:	697b      	ldr	r3, [r7, #20]
 801bf3c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801bf3e:	697b      	ldr	r3, [r7, #20]
 801bf40:	7d5b      	ldrb	r3, [r3, #21]
 801bf42:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bf44:	697b      	ldr	r3, [r7, #20]
 801bf46:	68db      	ldr	r3, [r3, #12]
 801bf48:	617b      	str	r3, [r7, #20]
 801bf4a:	697b      	ldr	r3, [r7, #20]
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	d1dc      	bne.n	801bf0a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801bf50:	693b      	ldr	r3, [r7, #16]
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d004      	beq.n	801bf60 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801bf56:	6938      	ldr	r0, [r7, #16]
 801bf58:	f7ff f976 	bl	801b248 <tcp_abort>
 801bf5c:	e000      	b.n	801bf60 <tcp_kill_prio+0x8c>
    return;
 801bf5e:	bf00      	nop
  }
}
 801bf60:	3718      	adds	r7, #24
 801bf62:	46bd      	mov	sp, r7
 801bf64:	bd80      	pop	{r7, pc}
 801bf66:	bf00      	nop
 801bf68:	2400be70 	.word	0x2400be70
 801bf6c:	2400be64 	.word	0x2400be64

0801bf70 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801bf70:	b580      	push	{r7, lr}
 801bf72:	b086      	sub	sp, #24
 801bf74:	af00      	add	r7, sp, #0
 801bf76:	4603      	mov	r3, r0
 801bf78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801bf7a:	79fb      	ldrb	r3, [r7, #7]
 801bf7c:	2b08      	cmp	r3, #8
 801bf7e:	d009      	beq.n	801bf94 <tcp_kill_state+0x24>
 801bf80:	79fb      	ldrb	r3, [r7, #7]
 801bf82:	2b09      	cmp	r3, #9
 801bf84:	d006      	beq.n	801bf94 <tcp_kill_state+0x24>
 801bf86:	4b1a      	ldr	r3, [pc, #104]	@ (801bff0 <tcp_kill_state+0x80>)
 801bf88:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 801bf8c:	4919      	ldr	r1, [pc, #100]	@ (801bff4 <tcp_kill_state+0x84>)
 801bf8e:	481a      	ldr	r0, [pc, #104]	@ (801bff8 <tcp_kill_state+0x88>)
 801bf90:	f009 faa8 	bl	80254e4 <iprintf>

  inactivity = 0;
 801bf94:	2300      	movs	r3, #0
 801bf96:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801bf98:	2300      	movs	r3, #0
 801bf9a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bf9c:	4b17      	ldr	r3, [pc, #92]	@ (801bffc <tcp_kill_state+0x8c>)
 801bf9e:	681b      	ldr	r3, [r3, #0]
 801bfa0:	617b      	str	r3, [r7, #20]
 801bfa2:	e017      	b.n	801bfd4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801bfa4:	697b      	ldr	r3, [r7, #20]
 801bfa6:	7d1b      	ldrb	r3, [r3, #20]
 801bfa8:	79fa      	ldrb	r2, [r7, #7]
 801bfaa:	429a      	cmp	r2, r3
 801bfac:	d10f      	bne.n	801bfce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801bfae:	4b14      	ldr	r3, [pc, #80]	@ (801c000 <tcp_kill_state+0x90>)
 801bfb0:	681a      	ldr	r2, [r3, #0]
 801bfb2:	697b      	ldr	r3, [r7, #20]
 801bfb4:	6a1b      	ldr	r3, [r3, #32]
 801bfb6:	1ad3      	subs	r3, r2, r3
 801bfb8:	68fa      	ldr	r2, [r7, #12]
 801bfba:	429a      	cmp	r2, r3
 801bfbc:	d807      	bhi.n	801bfce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801bfbe:	4b10      	ldr	r3, [pc, #64]	@ (801c000 <tcp_kill_state+0x90>)
 801bfc0:	681a      	ldr	r2, [r3, #0]
 801bfc2:	697b      	ldr	r3, [r7, #20]
 801bfc4:	6a1b      	ldr	r3, [r3, #32]
 801bfc6:	1ad3      	subs	r3, r2, r3
 801bfc8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801bfca:	697b      	ldr	r3, [r7, #20]
 801bfcc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bfce:	697b      	ldr	r3, [r7, #20]
 801bfd0:	68db      	ldr	r3, [r3, #12]
 801bfd2:	617b      	str	r3, [r7, #20]
 801bfd4:	697b      	ldr	r3, [r7, #20]
 801bfd6:	2b00      	cmp	r3, #0
 801bfd8:	d1e4      	bne.n	801bfa4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801bfda:	693b      	ldr	r3, [r7, #16]
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d003      	beq.n	801bfe8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801bfe0:	2100      	movs	r1, #0
 801bfe2:	6938      	ldr	r0, [r7, #16]
 801bfe4:	f7ff f872 	bl	801b0cc <tcp_abandon>
  }
}
 801bfe8:	bf00      	nop
 801bfea:	3718      	adds	r7, #24
 801bfec:	46bd      	mov	sp, r7
 801bfee:	bd80      	pop	{r7, pc}
 801bff0:	0802b020 	.word	0x0802b020
 801bff4:	0802b5ac 	.word	0x0802b5ac
 801bff8:	0802b064 	.word	0x0802b064
 801bffc:	2400be70 	.word	0x2400be70
 801c000:	2400be64 	.word	0x2400be64

0801c004 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801c004:	b580      	push	{r7, lr}
 801c006:	b084      	sub	sp, #16
 801c008:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801c00a:	2300      	movs	r3, #0
 801c00c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801c00e:	2300      	movs	r3, #0
 801c010:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c012:	4b12      	ldr	r3, [pc, #72]	@ (801c05c <tcp_kill_timewait+0x58>)
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	60fb      	str	r3, [r7, #12]
 801c018:	e012      	b.n	801c040 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c01a:	4b11      	ldr	r3, [pc, #68]	@ (801c060 <tcp_kill_timewait+0x5c>)
 801c01c:	681a      	ldr	r2, [r3, #0]
 801c01e:	68fb      	ldr	r3, [r7, #12]
 801c020:	6a1b      	ldr	r3, [r3, #32]
 801c022:	1ad3      	subs	r3, r2, r3
 801c024:	687a      	ldr	r2, [r7, #4]
 801c026:	429a      	cmp	r2, r3
 801c028:	d807      	bhi.n	801c03a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801c02a:	4b0d      	ldr	r3, [pc, #52]	@ (801c060 <tcp_kill_timewait+0x5c>)
 801c02c:	681a      	ldr	r2, [r3, #0]
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	6a1b      	ldr	r3, [r3, #32]
 801c032:	1ad3      	subs	r3, r2, r3
 801c034:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801c036:	68fb      	ldr	r3, [r7, #12]
 801c038:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c03a:	68fb      	ldr	r3, [r7, #12]
 801c03c:	68db      	ldr	r3, [r3, #12]
 801c03e:	60fb      	str	r3, [r7, #12]
 801c040:	68fb      	ldr	r3, [r7, #12]
 801c042:	2b00      	cmp	r3, #0
 801c044:	d1e9      	bne.n	801c01a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801c046:	68bb      	ldr	r3, [r7, #8]
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d002      	beq.n	801c052 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801c04c:	68b8      	ldr	r0, [r7, #8]
 801c04e:	f7ff f8fb 	bl	801b248 <tcp_abort>
  }
}
 801c052:	bf00      	nop
 801c054:	3710      	adds	r7, #16
 801c056:	46bd      	mov	sp, r7
 801c058:	bd80      	pop	{r7, pc}
 801c05a:	bf00      	nop
 801c05c:	2400be74 	.word	0x2400be74
 801c060:	2400be64 	.word	0x2400be64

0801c064 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801c064:	b580      	push	{r7, lr}
 801c066:	b082      	sub	sp, #8
 801c068:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801c06a:	4b10      	ldr	r3, [pc, #64]	@ (801c0ac <tcp_handle_closepend+0x48>)
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801c070:	e014      	b.n	801c09c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	68db      	ldr	r3, [r3, #12]
 801c076:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	8b5b      	ldrh	r3, [r3, #26]
 801c07c:	f003 0308 	and.w	r3, r3, #8
 801c080:	2b00      	cmp	r3, #0
 801c082:	d009      	beq.n	801c098 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	8b5b      	ldrh	r3, [r3, #26]
 801c088:	f023 0308 	bic.w	r3, r3, #8
 801c08c:	b29a      	uxth	r2, r3
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801c092:	6878      	ldr	r0, [r7, #4]
 801c094:	f7fe ff28 	bl	801aee8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801c098:	683b      	ldr	r3, [r7, #0]
 801c09a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	d1e7      	bne.n	801c072 <tcp_handle_closepend+0xe>
  }
}
 801c0a2:	bf00      	nop
 801c0a4:	bf00      	nop
 801c0a6:	3708      	adds	r7, #8
 801c0a8:	46bd      	mov	sp, r7
 801c0aa:	bd80      	pop	{r7, pc}
 801c0ac:	2400be70 	.word	0x2400be70

0801c0b0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801c0b0:	b580      	push	{r7, lr}
 801c0b2:	b084      	sub	sp, #16
 801c0b4:	af00      	add	r7, sp, #0
 801c0b6:	4603      	mov	r3, r0
 801c0b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c0ba:	2001      	movs	r0, #1
 801c0bc:	f7fd fb78 	bl	80197b0 <memp_malloc>
 801c0c0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801c0c2:	68fb      	ldr	r3, [r7, #12]
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	d126      	bne.n	801c116 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801c0c8:	f7ff ffcc 	bl	801c064 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801c0cc:	f7ff ff9a 	bl	801c004 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c0d0:	2001      	movs	r0, #1
 801c0d2:	f7fd fb6d 	bl	80197b0 <memp_malloc>
 801c0d6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	2b00      	cmp	r3, #0
 801c0dc:	d11b      	bne.n	801c116 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801c0de:	2009      	movs	r0, #9
 801c0e0:	f7ff ff46 	bl	801bf70 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c0e4:	2001      	movs	r0, #1
 801c0e6:	f7fd fb63 	bl	80197b0 <memp_malloc>
 801c0ea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801c0ec:	68fb      	ldr	r3, [r7, #12]
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	d111      	bne.n	801c116 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801c0f2:	2008      	movs	r0, #8
 801c0f4:	f7ff ff3c 	bl	801bf70 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c0f8:	2001      	movs	r0, #1
 801c0fa:	f7fd fb59 	bl	80197b0 <memp_malloc>
 801c0fe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801c100:	68fb      	ldr	r3, [r7, #12]
 801c102:	2b00      	cmp	r3, #0
 801c104:	d107      	bne.n	801c116 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801c106:	79fb      	ldrb	r3, [r7, #7]
 801c108:	4618      	mov	r0, r3
 801c10a:	f7ff fee3 	bl	801bed4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c10e:	2001      	movs	r0, #1
 801c110:	f7fd fb4e 	bl	80197b0 <memp_malloc>
 801c114:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801c116:	68fb      	ldr	r3, [r7, #12]
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d03f      	beq.n	801c19c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801c11c:	229c      	movs	r2, #156	@ 0x9c
 801c11e:	2100      	movs	r1, #0
 801c120:	68f8      	ldr	r0, [r7, #12]
 801c122:	f009 facb 	bl	80256bc <memset>
    pcb->prio = prio;
 801c126:	68fb      	ldr	r3, [r7, #12]
 801c128:	79fa      	ldrb	r2, [r7, #7]
 801c12a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801c12c:	68fb      	ldr	r3, [r7, #12]
 801c12e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801c132:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801c136:	68fb      	ldr	r3, [r7, #12]
 801c138:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801c13c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801c13e:	68fb      	ldr	r3, [r7, #12]
 801c140:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801c142:	68fb      	ldr	r3, [r7, #12]
 801c144:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801c146:	68fb      	ldr	r3, [r7, #12]
 801c148:	22ff      	movs	r2, #255	@ 0xff
 801c14a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801c14c:	68fb      	ldr	r3, [r7, #12]
 801c14e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801c152:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801c154:	68fb      	ldr	r3, [r7, #12]
 801c156:	2206      	movs	r2, #6
 801c158:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801c15c:	68fb      	ldr	r3, [r7, #12]
 801c15e:	2206      	movs	r2, #6
 801c160:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801c162:	68fb      	ldr	r3, [r7, #12]
 801c164:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c168:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801c16a:	68fb      	ldr	r3, [r7, #12]
 801c16c:	2201      	movs	r2, #1
 801c16e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801c172:	4b0d      	ldr	r3, [pc, #52]	@ (801c1a8 <tcp_alloc+0xf8>)
 801c174:	681a      	ldr	r2, [r3, #0]
 801c176:	68fb      	ldr	r3, [r7, #12]
 801c178:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801c17a:	4b0c      	ldr	r3, [pc, #48]	@ (801c1ac <tcp_alloc+0xfc>)
 801c17c:	781a      	ldrb	r2, [r3, #0]
 801c17e:	68fb      	ldr	r3, [r7, #12]
 801c180:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801c182:	68fb      	ldr	r3, [r7, #12]
 801c184:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801c188:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801c18c:	68fb      	ldr	r3, [r7, #12]
 801c18e:	4a08      	ldr	r2, [pc, #32]	@ (801c1b0 <tcp_alloc+0x100>)
 801c190:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801c194:	68fb      	ldr	r3, [r7, #12]
 801c196:	4a07      	ldr	r2, [pc, #28]	@ (801c1b4 <tcp_alloc+0x104>)
 801c198:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801c19c:	68fb      	ldr	r3, [r7, #12]
}
 801c19e:	4618      	mov	r0, r3
 801c1a0:	3710      	adds	r7, #16
 801c1a2:	46bd      	mov	sp, r7
 801c1a4:	bd80      	pop	{r7, pc}
 801c1a6:	bf00      	nop
 801c1a8:	2400be64 	.word	0x2400be64
 801c1ac:	2400be7a 	.word	0x2400be7a
 801c1b0:	0801be69 	.word	0x0801be69
 801c1b4:	006ddd00 	.word	0x006ddd00

0801c1b8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801c1b8:	b580      	push	{r7, lr}
 801c1ba:	b084      	sub	sp, #16
 801c1bc:	af00      	add	r7, sp, #0
 801c1be:	4603      	mov	r3, r0
 801c1c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801c1c2:	2040      	movs	r0, #64	@ 0x40
 801c1c4:	f7ff ff74 	bl	801c0b0 <tcp_alloc>
 801c1c8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801c1ca:	68fb      	ldr	r3, [r7, #12]
}
 801c1cc:	4618      	mov	r0, r3
 801c1ce:	3710      	adds	r7, #16
 801c1d0:	46bd      	mov	sp, r7
 801c1d2:	bd80      	pop	{r7, pc}

0801c1d4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801c1d4:	b480      	push	{r7}
 801c1d6:	b083      	sub	sp, #12
 801c1d8:	af00      	add	r7, sp, #0
 801c1da:	6078      	str	r0, [r7, #4]
 801c1dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	d002      	beq.n	801c1ea <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	683a      	ldr	r2, [r7, #0]
 801c1e8:	611a      	str	r2, [r3, #16]
  }
}
 801c1ea:	bf00      	nop
 801c1ec:	370c      	adds	r7, #12
 801c1ee:	46bd      	mov	sp, r7
 801c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1f4:	4770      	bx	lr
	...

0801c1f8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801c1f8:	b580      	push	{r7, lr}
 801c1fa:	b082      	sub	sp, #8
 801c1fc:	af00      	add	r7, sp, #0
 801c1fe:	6078      	str	r0, [r7, #4]
 801c200:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	2b00      	cmp	r3, #0
 801c206:	d00e      	beq.n	801c226 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	7d1b      	ldrb	r3, [r3, #20]
 801c20c:	2b01      	cmp	r3, #1
 801c20e:	d106      	bne.n	801c21e <tcp_recv+0x26>
 801c210:	4b07      	ldr	r3, [pc, #28]	@ (801c230 <tcp_recv+0x38>)
 801c212:	f240 72df 	movw	r2, #2015	@ 0x7df
 801c216:	4907      	ldr	r1, [pc, #28]	@ (801c234 <tcp_recv+0x3c>)
 801c218:	4807      	ldr	r0, [pc, #28]	@ (801c238 <tcp_recv+0x40>)
 801c21a:	f009 f963 	bl	80254e4 <iprintf>
    pcb->recv = recv;
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	683a      	ldr	r2, [r7, #0]
 801c222:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801c226:	bf00      	nop
 801c228:	3708      	adds	r7, #8
 801c22a:	46bd      	mov	sp, r7
 801c22c:	bd80      	pop	{r7, pc}
 801c22e:	bf00      	nop
 801c230:	0802b020 	.word	0x0802b020
 801c234:	0802b5bc 	.word	0x0802b5bc
 801c238:	0802b064 	.word	0x0802b064

0801c23c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801c23c:	b580      	push	{r7, lr}
 801c23e:	b082      	sub	sp, #8
 801c240:	af00      	add	r7, sp, #0
 801c242:	6078      	str	r0, [r7, #4]
 801c244:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d00e      	beq.n	801c26a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801c24c:	687b      	ldr	r3, [r7, #4]
 801c24e:	7d1b      	ldrb	r3, [r3, #20]
 801c250:	2b01      	cmp	r3, #1
 801c252:	d106      	bne.n	801c262 <tcp_sent+0x26>
 801c254:	4b07      	ldr	r3, [pc, #28]	@ (801c274 <tcp_sent+0x38>)
 801c256:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 801c25a:	4907      	ldr	r1, [pc, #28]	@ (801c278 <tcp_sent+0x3c>)
 801c25c:	4807      	ldr	r0, [pc, #28]	@ (801c27c <tcp_sent+0x40>)
 801c25e:	f009 f941 	bl	80254e4 <iprintf>
    pcb->sent = sent;
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	683a      	ldr	r2, [r7, #0]
 801c266:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801c26a:	bf00      	nop
 801c26c:	3708      	adds	r7, #8
 801c26e:	46bd      	mov	sp, r7
 801c270:	bd80      	pop	{r7, pc}
 801c272:	bf00      	nop
 801c274:	0802b020 	.word	0x0802b020
 801c278:	0802b5e4 	.word	0x0802b5e4
 801c27c:	0802b064 	.word	0x0802b064

0801c280 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801c280:	b580      	push	{r7, lr}
 801c282:	b082      	sub	sp, #8
 801c284:	af00      	add	r7, sp, #0
 801c286:	6078      	str	r0, [r7, #4]
 801c288:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d00e      	beq.n	801c2ae <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	7d1b      	ldrb	r3, [r3, #20]
 801c294:	2b01      	cmp	r3, #1
 801c296:	d106      	bne.n	801c2a6 <tcp_err+0x26>
 801c298:	4b07      	ldr	r3, [pc, #28]	@ (801c2b8 <tcp_err+0x38>)
 801c29a:	f640 020d 	movw	r2, #2061	@ 0x80d
 801c29e:	4907      	ldr	r1, [pc, #28]	@ (801c2bc <tcp_err+0x3c>)
 801c2a0:	4807      	ldr	r0, [pc, #28]	@ (801c2c0 <tcp_err+0x40>)
 801c2a2:	f009 f91f 	bl	80254e4 <iprintf>
    pcb->errf = err;
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	683a      	ldr	r2, [r7, #0]
 801c2aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801c2ae:	bf00      	nop
 801c2b0:	3708      	adds	r7, #8
 801c2b2:	46bd      	mov	sp, r7
 801c2b4:	bd80      	pop	{r7, pc}
 801c2b6:	bf00      	nop
 801c2b8:	0802b020 	.word	0x0802b020
 801c2bc:	0802b60c 	.word	0x0802b60c
 801c2c0:	0802b064 	.word	0x0802b064

0801c2c4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801c2c4:	b480      	push	{r7}
 801c2c6:	b085      	sub	sp, #20
 801c2c8:	af00      	add	r7, sp, #0
 801c2ca:	6078      	str	r0, [r7, #4]
 801c2cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	2b00      	cmp	r3, #0
 801c2d2:	d008      	beq.n	801c2e6 <tcp_accept+0x22>
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	7d1b      	ldrb	r3, [r3, #20]
 801c2d8:	2b01      	cmp	r3, #1
 801c2da:	d104      	bne.n	801c2e6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	683a      	ldr	r2, [r7, #0]
 801c2e4:	619a      	str	r2, [r3, #24]
  }
}
 801c2e6:	bf00      	nop
 801c2e8:	3714      	adds	r7, #20
 801c2ea:	46bd      	mov	sp, r7
 801c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2f0:	4770      	bx	lr
	...

0801c2f4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801c2f4:	b580      	push	{r7, lr}
 801c2f6:	b084      	sub	sp, #16
 801c2f8:	af00      	add	r7, sp, #0
 801c2fa:	60f8      	str	r0, [r7, #12]
 801c2fc:	60b9      	str	r1, [r7, #8]
 801c2fe:	4613      	mov	r3, r2
 801c300:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801c302:	68fb      	ldr	r3, [r7, #12]
 801c304:	2b00      	cmp	r3, #0
 801c306:	d107      	bne.n	801c318 <tcp_poll+0x24>
 801c308:	4b0e      	ldr	r3, [pc, #56]	@ (801c344 <tcp_poll+0x50>)
 801c30a:	f640 023d 	movw	r2, #2109	@ 0x83d
 801c30e:	490e      	ldr	r1, [pc, #56]	@ (801c348 <tcp_poll+0x54>)
 801c310:	480e      	ldr	r0, [pc, #56]	@ (801c34c <tcp_poll+0x58>)
 801c312:	f009 f8e7 	bl	80254e4 <iprintf>
 801c316:	e011      	b.n	801c33c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801c318:	68fb      	ldr	r3, [r7, #12]
 801c31a:	7d1b      	ldrb	r3, [r3, #20]
 801c31c:	2b01      	cmp	r3, #1
 801c31e:	d106      	bne.n	801c32e <tcp_poll+0x3a>
 801c320:	4b08      	ldr	r3, [pc, #32]	@ (801c344 <tcp_poll+0x50>)
 801c322:	f640 023e 	movw	r2, #2110	@ 0x83e
 801c326:	490a      	ldr	r1, [pc, #40]	@ (801c350 <tcp_poll+0x5c>)
 801c328:	4808      	ldr	r0, [pc, #32]	@ (801c34c <tcp_poll+0x58>)
 801c32a:	f009 f8db 	bl	80254e4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801c32e:	68fb      	ldr	r3, [r7, #12]
 801c330:	68ba      	ldr	r2, [r7, #8]
 801c332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801c336:	68fb      	ldr	r3, [r7, #12]
 801c338:	79fa      	ldrb	r2, [r7, #7]
 801c33a:	775a      	strb	r2, [r3, #29]
}
 801c33c:	3710      	adds	r7, #16
 801c33e:	46bd      	mov	sp, r7
 801c340:	bd80      	pop	{r7, pc}
 801c342:	bf00      	nop
 801c344:	0802b020 	.word	0x0802b020
 801c348:	0802b634 	.word	0x0802b634
 801c34c:	0802b064 	.word	0x0802b064
 801c350:	0802b64c 	.word	0x0802b64c

0801c354 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801c354:	b580      	push	{r7, lr}
 801c356:	b082      	sub	sp, #8
 801c358:	af00      	add	r7, sp, #0
 801c35a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	2b00      	cmp	r3, #0
 801c360:	d107      	bne.n	801c372 <tcp_pcb_purge+0x1e>
 801c362:	4b21      	ldr	r3, [pc, #132]	@ (801c3e8 <tcp_pcb_purge+0x94>)
 801c364:	f640 0251 	movw	r2, #2129	@ 0x851
 801c368:	4920      	ldr	r1, [pc, #128]	@ (801c3ec <tcp_pcb_purge+0x98>)
 801c36a:	4821      	ldr	r0, [pc, #132]	@ (801c3f0 <tcp_pcb_purge+0x9c>)
 801c36c:	f009 f8ba 	bl	80254e4 <iprintf>
 801c370:	e037      	b.n	801c3e2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	7d1b      	ldrb	r3, [r3, #20]
 801c376:	2b00      	cmp	r3, #0
 801c378:	d033      	beq.n	801c3e2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801c37e:	2b0a      	cmp	r3, #10
 801c380:	d02f      	beq.n	801c3e2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801c386:	2b01      	cmp	r3, #1
 801c388:	d02b      	beq.n	801c3e2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c38e:	2b00      	cmp	r3, #0
 801c390:	d007      	beq.n	801c3a2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c396:	4618      	mov	r0, r3
 801c398:	f7fe f956 	bl	801a648 <pbuf_free>
      pcb->refused_data = NULL;
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	2200      	movs	r2, #0
 801c3a0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d002      	beq.n	801c3b0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801c3aa:	6878      	ldr	r0, [r7, #4]
 801c3ac:	f000 f986 	bl	801c6bc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c3b6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c3bc:	4618      	mov	r0, r3
 801c3be:	f7ff fcf9 	bl	801bdb4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c3c6:	4618      	mov	r0, r3
 801c3c8:	f7ff fcf4 	bl	801bdb4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	2200      	movs	r2, #0
 801c3d0:	66da      	str	r2, [r3, #108]	@ 0x6c
 801c3d2:	687b      	ldr	r3, [r7, #4]
 801c3d4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	2200      	movs	r2, #0
 801c3de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801c3e2:	3708      	adds	r7, #8
 801c3e4:	46bd      	mov	sp, r7
 801c3e6:	bd80      	pop	{r7, pc}
 801c3e8:	0802b020 	.word	0x0802b020
 801c3ec:	0802b66c 	.word	0x0802b66c
 801c3f0:	0802b064 	.word	0x0802b064

0801c3f4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801c3f4:	b580      	push	{r7, lr}
 801c3f6:	b084      	sub	sp, #16
 801c3f8:	af00      	add	r7, sp, #0
 801c3fa:	6078      	str	r0, [r7, #4]
 801c3fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801c3fe:	683b      	ldr	r3, [r7, #0]
 801c400:	2b00      	cmp	r3, #0
 801c402:	d106      	bne.n	801c412 <tcp_pcb_remove+0x1e>
 801c404:	4b3e      	ldr	r3, [pc, #248]	@ (801c500 <tcp_pcb_remove+0x10c>)
 801c406:	f640 0283 	movw	r2, #2179	@ 0x883
 801c40a:	493e      	ldr	r1, [pc, #248]	@ (801c504 <tcp_pcb_remove+0x110>)
 801c40c:	483e      	ldr	r0, [pc, #248]	@ (801c508 <tcp_pcb_remove+0x114>)
 801c40e:	f009 f869 	bl	80254e4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801c412:	687b      	ldr	r3, [r7, #4]
 801c414:	2b00      	cmp	r3, #0
 801c416:	d106      	bne.n	801c426 <tcp_pcb_remove+0x32>
 801c418:	4b39      	ldr	r3, [pc, #228]	@ (801c500 <tcp_pcb_remove+0x10c>)
 801c41a:	f640 0284 	movw	r2, #2180	@ 0x884
 801c41e:	493b      	ldr	r1, [pc, #236]	@ (801c50c <tcp_pcb_remove+0x118>)
 801c420:	4839      	ldr	r0, [pc, #228]	@ (801c508 <tcp_pcb_remove+0x114>)
 801c422:	f009 f85f 	bl	80254e4 <iprintf>

  TCP_RMV(pcblist, pcb);
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	681b      	ldr	r3, [r3, #0]
 801c42a:	683a      	ldr	r2, [r7, #0]
 801c42c:	429a      	cmp	r2, r3
 801c42e:	d105      	bne.n	801c43c <tcp_pcb_remove+0x48>
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	681b      	ldr	r3, [r3, #0]
 801c434:	68da      	ldr	r2, [r3, #12]
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	601a      	str	r2, [r3, #0]
 801c43a:	e013      	b.n	801c464 <tcp_pcb_remove+0x70>
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	681b      	ldr	r3, [r3, #0]
 801c440:	60fb      	str	r3, [r7, #12]
 801c442:	e00c      	b.n	801c45e <tcp_pcb_remove+0x6a>
 801c444:	68fb      	ldr	r3, [r7, #12]
 801c446:	68db      	ldr	r3, [r3, #12]
 801c448:	683a      	ldr	r2, [r7, #0]
 801c44a:	429a      	cmp	r2, r3
 801c44c:	d104      	bne.n	801c458 <tcp_pcb_remove+0x64>
 801c44e:	683b      	ldr	r3, [r7, #0]
 801c450:	68da      	ldr	r2, [r3, #12]
 801c452:	68fb      	ldr	r3, [r7, #12]
 801c454:	60da      	str	r2, [r3, #12]
 801c456:	e005      	b.n	801c464 <tcp_pcb_remove+0x70>
 801c458:	68fb      	ldr	r3, [r7, #12]
 801c45a:	68db      	ldr	r3, [r3, #12]
 801c45c:	60fb      	str	r3, [r7, #12]
 801c45e:	68fb      	ldr	r3, [r7, #12]
 801c460:	2b00      	cmp	r3, #0
 801c462:	d1ef      	bne.n	801c444 <tcp_pcb_remove+0x50>
 801c464:	683b      	ldr	r3, [r7, #0]
 801c466:	2200      	movs	r2, #0
 801c468:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801c46a:	6838      	ldr	r0, [r7, #0]
 801c46c:	f7ff ff72 	bl	801c354 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801c470:	683b      	ldr	r3, [r7, #0]
 801c472:	7d1b      	ldrb	r3, [r3, #20]
 801c474:	2b0a      	cmp	r3, #10
 801c476:	d013      	beq.n	801c4a0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801c478:	683b      	ldr	r3, [r7, #0]
 801c47a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801c47c:	2b01      	cmp	r3, #1
 801c47e:	d00f      	beq.n	801c4a0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801c480:	683b      	ldr	r3, [r7, #0]
 801c482:	8b5b      	ldrh	r3, [r3, #26]
 801c484:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801c488:	2b00      	cmp	r3, #0
 801c48a:	d009      	beq.n	801c4a0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801c48c:	683b      	ldr	r3, [r7, #0]
 801c48e:	8b5b      	ldrh	r3, [r3, #26]
 801c490:	f043 0302 	orr.w	r3, r3, #2
 801c494:	b29a      	uxth	r2, r3
 801c496:	683b      	ldr	r3, [r7, #0]
 801c498:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801c49a:	6838      	ldr	r0, [r7, #0]
 801c49c:	f003 fbc0 	bl	801fc20 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801c4a0:	683b      	ldr	r3, [r7, #0]
 801c4a2:	7d1b      	ldrb	r3, [r3, #20]
 801c4a4:	2b01      	cmp	r3, #1
 801c4a6:	d020      	beq.n	801c4ea <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801c4a8:	683b      	ldr	r3, [r7, #0]
 801c4aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d006      	beq.n	801c4be <tcp_pcb_remove+0xca>
 801c4b0:	4b13      	ldr	r3, [pc, #76]	@ (801c500 <tcp_pcb_remove+0x10c>)
 801c4b2:	f640 0293 	movw	r2, #2195	@ 0x893
 801c4b6:	4916      	ldr	r1, [pc, #88]	@ (801c510 <tcp_pcb_remove+0x11c>)
 801c4b8:	4813      	ldr	r0, [pc, #76]	@ (801c508 <tcp_pcb_remove+0x114>)
 801c4ba:	f009 f813 	bl	80254e4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801c4be:	683b      	ldr	r3, [r7, #0]
 801c4c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d006      	beq.n	801c4d4 <tcp_pcb_remove+0xe0>
 801c4c6:	4b0e      	ldr	r3, [pc, #56]	@ (801c500 <tcp_pcb_remove+0x10c>)
 801c4c8:	f640 0294 	movw	r2, #2196	@ 0x894
 801c4cc:	4911      	ldr	r1, [pc, #68]	@ (801c514 <tcp_pcb_remove+0x120>)
 801c4ce:	480e      	ldr	r0, [pc, #56]	@ (801c508 <tcp_pcb_remove+0x114>)
 801c4d0:	f009 f808 	bl	80254e4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801c4d4:	683b      	ldr	r3, [r7, #0]
 801c4d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	d006      	beq.n	801c4ea <tcp_pcb_remove+0xf6>
 801c4dc:	4b08      	ldr	r3, [pc, #32]	@ (801c500 <tcp_pcb_remove+0x10c>)
 801c4de:	f640 0296 	movw	r2, #2198	@ 0x896
 801c4e2:	490d      	ldr	r1, [pc, #52]	@ (801c518 <tcp_pcb_remove+0x124>)
 801c4e4:	4808      	ldr	r0, [pc, #32]	@ (801c508 <tcp_pcb_remove+0x114>)
 801c4e6:	f008 fffd 	bl	80254e4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801c4ea:	683b      	ldr	r3, [r7, #0]
 801c4ec:	2200      	movs	r2, #0
 801c4ee:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801c4f0:	683b      	ldr	r3, [r7, #0]
 801c4f2:	2200      	movs	r2, #0
 801c4f4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801c4f6:	bf00      	nop
 801c4f8:	3710      	adds	r7, #16
 801c4fa:	46bd      	mov	sp, r7
 801c4fc:	bd80      	pop	{r7, pc}
 801c4fe:	bf00      	nop
 801c500:	0802b020 	.word	0x0802b020
 801c504:	0802b688 	.word	0x0802b688
 801c508:	0802b064 	.word	0x0802b064
 801c50c:	0802b6a4 	.word	0x0802b6a4
 801c510:	0802b6c4 	.word	0x0802b6c4
 801c514:	0802b6dc 	.word	0x0802b6dc
 801c518:	0802b6f8 	.word	0x0802b6f8

0801c51c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801c51c:	b580      	push	{r7, lr}
 801c51e:	b082      	sub	sp, #8
 801c520:	af00      	add	r7, sp, #0
 801c522:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	2b00      	cmp	r3, #0
 801c528:	d106      	bne.n	801c538 <tcp_next_iss+0x1c>
 801c52a:	4b0a      	ldr	r3, [pc, #40]	@ (801c554 <tcp_next_iss+0x38>)
 801c52c:	f640 02af 	movw	r2, #2223	@ 0x8af
 801c530:	4909      	ldr	r1, [pc, #36]	@ (801c558 <tcp_next_iss+0x3c>)
 801c532:	480a      	ldr	r0, [pc, #40]	@ (801c55c <tcp_next_iss+0x40>)
 801c534:	f008 ffd6 	bl	80254e4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801c538:	4b09      	ldr	r3, [pc, #36]	@ (801c560 <tcp_next_iss+0x44>)
 801c53a:	681a      	ldr	r2, [r3, #0]
 801c53c:	4b09      	ldr	r3, [pc, #36]	@ (801c564 <tcp_next_iss+0x48>)
 801c53e:	681b      	ldr	r3, [r3, #0]
 801c540:	4413      	add	r3, r2
 801c542:	4a07      	ldr	r2, [pc, #28]	@ (801c560 <tcp_next_iss+0x44>)
 801c544:	6013      	str	r3, [r2, #0]
  return iss;
 801c546:	4b06      	ldr	r3, [pc, #24]	@ (801c560 <tcp_next_iss+0x44>)
 801c548:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801c54a:	4618      	mov	r0, r3
 801c54c:	3708      	adds	r7, #8
 801c54e:	46bd      	mov	sp, r7
 801c550:	bd80      	pop	{r7, pc}
 801c552:	bf00      	nop
 801c554:	0802b020 	.word	0x0802b020
 801c558:	0802b710 	.word	0x0802b710
 801c55c:	0802b064 	.word	0x0802b064
 801c560:	24000210 	.word	0x24000210
 801c564:	2400be64 	.word	0x2400be64

0801c568 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801c568:	b580      	push	{r7, lr}
 801c56a:	b086      	sub	sp, #24
 801c56c:	af00      	add	r7, sp, #0
 801c56e:	4603      	mov	r3, r0
 801c570:	60b9      	str	r1, [r7, #8]
 801c572:	607a      	str	r2, [r7, #4]
 801c574:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d106      	bne.n	801c58a <tcp_eff_send_mss_netif+0x22>
 801c57c:	4b14      	ldr	r3, [pc, #80]	@ (801c5d0 <tcp_eff_send_mss_netif+0x68>)
 801c57e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801c582:	4914      	ldr	r1, [pc, #80]	@ (801c5d4 <tcp_eff_send_mss_netif+0x6c>)
 801c584:	4814      	ldr	r0, [pc, #80]	@ (801c5d8 <tcp_eff_send_mss_netif+0x70>)
 801c586:	f008 ffad 	bl	80254e4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801c58a:	68bb      	ldr	r3, [r7, #8]
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	d101      	bne.n	801c594 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801c590:	89fb      	ldrh	r3, [r7, #14]
 801c592:	e019      	b.n	801c5c8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801c594:	68bb      	ldr	r3, [r7, #8]
 801c596:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c598:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801c59a:	8afb      	ldrh	r3, [r7, #22]
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d012      	beq.n	801c5c6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801c5a0:	2328      	movs	r3, #40	@ 0x28
 801c5a2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801c5a4:	8afa      	ldrh	r2, [r7, #22]
 801c5a6:	8abb      	ldrh	r3, [r7, #20]
 801c5a8:	429a      	cmp	r2, r3
 801c5aa:	d904      	bls.n	801c5b6 <tcp_eff_send_mss_netif+0x4e>
 801c5ac:	8afa      	ldrh	r2, [r7, #22]
 801c5ae:	8abb      	ldrh	r3, [r7, #20]
 801c5b0:	1ad3      	subs	r3, r2, r3
 801c5b2:	b29b      	uxth	r3, r3
 801c5b4:	e000      	b.n	801c5b8 <tcp_eff_send_mss_netif+0x50>
 801c5b6:	2300      	movs	r3, #0
 801c5b8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801c5ba:	8a7a      	ldrh	r2, [r7, #18]
 801c5bc:	89fb      	ldrh	r3, [r7, #14]
 801c5be:	4293      	cmp	r3, r2
 801c5c0:	bf28      	it	cs
 801c5c2:	4613      	movcs	r3, r2
 801c5c4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801c5c6:	89fb      	ldrh	r3, [r7, #14]
}
 801c5c8:	4618      	mov	r0, r3
 801c5ca:	3718      	adds	r7, #24
 801c5cc:	46bd      	mov	sp, r7
 801c5ce:	bd80      	pop	{r7, pc}
 801c5d0:	0802b020 	.word	0x0802b020
 801c5d4:	0802b72c 	.word	0x0802b72c
 801c5d8:	0802b064 	.word	0x0802b064

0801c5dc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801c5dc:	b580      	push	{r7, lr}
 801c5de:	b084      	sub	sp, #16
 801c5e0:	af00      	add	r7, sp, #0
 801c5e2:	6078      	str	r0, [r7, #4]
 801c5e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801c5e6:	683b      	ldr	r3, [r7, #0]
 801c5e8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	d119      	bne.n	801c624 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801c5f0:	4b10      	ldr	r3, [pc, #64]	@ (801c634 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801c5f2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801c5f6:	4910      	ldr	r1, [pc, #64]	@ (801c638 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801c5f8:	4810      	ldr	r0, [pc, #64]	@ (801c63c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801c5fa:	f008 ff73 	bl	80254e4 <iprintf>

  while (pcb != NULL) {
 801c5fe:	e011      	b.n	801c624 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801c600:	68fb      	ldr	r3, [r7, #12]
 801c602:	681a      	ldr	r2, [r3, #0]
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	681b      	ldr	r3, [r3, #0]
 801c608:	429a      	cmp	r2, r3
 801c60a:	d108      	bne.n	801c61e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801c60c:	68fb      	ldr	r3, [r7, #12]
 801c60e:	68db      	ldr	r3, [r3, #12]
 801c610:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801c612:	68f8      	ldr	r0, [r7, #12]
 801c614:	f7fe fe18 	bl	801b248 <tcp_abort>
      pcb = next;
 801c618:	68bb      	ldr	r3, [r7, #8]
 801c61a:	60fb      	str	r3, [r7, #12]
 801c61c:	e002      	b.n	801c624 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801c61e:	68fb      	ldr	r3, [r7, #12]
 801c620:	68db      	ldr	r3, [r3, #12]
 801c622:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801c624:	68fb      	ldr	r3, [r7, #12]
 801c626:	2b00      	cmp	r3, #0
 801c628:	d1ea      	bne.n	801c600 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801c62a:	bf00      	nop
 801c62c:	bf00      	nop
 801c62e:	3710      	adds	r7, #16
 801c630:	46bd      	mov	sp, r7
 801c632:	bd80      	pop	{r7, pc}
 801c634:	0802b020 	.word	0x0802b020
 801c638:	0802b754 	.word	0x0802b754
 801c63c:	0802b064 	.word	0x0802b064

0801c640 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c640:	b580      	push	{r7, lr}
 801c642:	b084      	sub	sp, #16
 801c644:	af00      	add	r7, sp, #0
 801c646:	6078      	str	r0, [r7, #4]
 801c648:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d02a      	beq.n	801c6a6 <tcp_netif_ip_addr_changed+0x66>
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	681b      	ldr	r3, [r3, #0]
 801c654:	2b00      	cmp	r3, #0
 801c656:	d026      	beq.n	801c6a6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801c658:	4b15      	ldr	r3, [pc, #84]	@ (801c6b0 <tcp_netif_ip_addr_changed+0x70>)
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	4619      	mov	r1, r3
 801c65e:	6878      	ldr	r0, [r7, #4]
 801c660:	f7ff ffbc 	bl	801c5dc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801c664:	4b13      	ldr	r3, [pc, #76]	@ (801c6b4 <tcp_netif_ip_addr_changed+0x74>)
 801c666:	681b      	ldr	r3, [r3, #0]
 801c668:	4619      	mov	r1, r3
 801c66a:	6878      	ldr	r0, [r7, #4]
 801c66c:	f7ff ffb6 	bl	801c5dc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801c670:	683b      	ldr	r3, [r7, #0]
 801c672:	2b00      	cmp	r3, #0
 801c674:	d017      	beq.n	801c6a6 <tcp_netif_ip_addr_changed+0x66>
 801c676:	683b      	ldr	r3, [r7, #0]
 801c678:	681b      	ldr	r3, [r3, #0]
 801c67a:	2b00      	cmp	r3, #0
 801c67c:	d013      	beq.n	801c6a6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c67e:	4b0e      	ldr	r3, [pc, #56]	@ (801c6b8 <tcp_netif_ip_addr_changed+0x78>)
 801c680:	681b      	ldr	r3, [r3, #0]
 801c682:	60fb      	str	r3, [r7, #12]
 801c684:	e00c      	b.n	801c6a0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801c686:	68fb      	ldr	r3, [r7, #12]
 801c688:	681a      	ldr	r2, [r3, #0]
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	429a      	cmp	r2, r3
 801c690:	d103      	bne.n	801c69a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801c692:	683b      	ldr	r3, [r7, #0]
 801c694:	681a      	ldr	r2, [r3, #0]
 801c696:	68fb      	ldr	r3, [r7, #12]
 801c698:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	68db      	ldr	r3, [r3, #12]
 801c69e:	60fb      	str	r3, [r7, #12]
 801c6a0:	68fb      	ldr	r3, [r7, #12]
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	d1ef      	bne.n	801c686 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801c6a6:	bf00      	nop
 801c6a8:	3710      	adds	r7, #16
 801c6aa:	46bd      	mov	sp, r7
 801c6ac:	bd80      	pop	{r7, pc}
 801c6ae:	bf00      	nop
 801c6b0:	2400be70 	.word	0x2400be70
 801c6b4:	2400be68 	.word	0x2400be68
 801c6b8:	2400be6c 	.word	0x2400be6c

0801c6bc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801c6bc:	b580      	push	{r7, lr}
 801c6be:	b082      	sub	sp, #8
 801c6c0:	af00      	add	r7, sp, #0
 801c6c2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d007      	beq.n	801c6dc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c6d0:	4618      	mov	r0, r3
 801c6d2:	f7ff fb6f 	bl	801bdb4 <tcp_segs_free>
    pcb->ooseq = NULL;
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	2200      	movs	r2, #0
 801c6da:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801c6dc:	bf00      	nop
 801c6de:	3708      	adds	r7, #8
 801c6e0:	46bd      	mov	sp, r7
 801c6e2:	bd80      	pop	{r7, pc}

0801c6e4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801c6e4:	b590      	push	{r4, r7, lr}
 801c6e6:	b08d      	sub	sp, #52	@ 0x34
 801c6e8:	af04      	add	r7, sp, #16
 801c6ea:	6078      	str	r0, [r7, #4]
 801c6ec:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801c6ee:	687b      	ldr	r3, [r7, #4]
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d105      	bne.n	801c700 <tcp_input+0x1c>
 801c6f4:	4b9b      	ldr	r3, [pc, #620]	@ (801c964 <tcp_input+0x280>)
 801c6f6:	2283      	movs	r2, #131	@ 0x83
 801c6f8:	499b      	ldr	r1, [pc, #620]	@ (801c968 <tcp_input+0x284>)
 801c6fa:	489c      	ldr	r0, [pc, #624]	@ (801c96c <tcp_input+0x288>)
 801c6fc:	f008 fef2 	bl	80254e4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	685b      	ldr	r3, [r3, #4]
 801c704:	4a9a      	ldr	r2, [pc, #616]	@ (801c970 <tcp_input+0x28c>)
 801c706:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	895b      	ldrh	r3, [r3, #10]
 801c70c:	2b13      	cmp	r3, #19
 801c70e:	f240 83d1 	bls.w	801ceb4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801c712:	4b98      	ldr	r3, [pc, #608]	@ (801c974 <tcp_input+0x290>)
 801c714:	695b      	ldr	r3, [r3, #20]
 801c716:	4a97      	ldr	r2, [pc, #604]	@ (801c974 <tcp_input+0x290>)
 801c718:	6812      	ldr	r2, [r2, #0]
 801c71a:	4611      	mov	r1, r2
 801c71c:	4618      	mov	r0, r3
 801c71e:	f006 fbef 	bl	8022f00 <ip4_addr_isbroadcast_u32>
 801c722:	4603      	mov	r3, r0
 801c724:	2b00      	cmp	r3, #0
 801c726:	f040 83c7 	bne.w	801ceb8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801c72a:	4b92      	ldr	r3, [pc, #584]	@ (801c974 <tcp_input+0x290>)
 801c72c:	695b      	ldr	r3, [r3, #20]
 801c72e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801c732:	2be0      	cmp	r3, #224	@ 0xe0
 801c734:	f000 83c0 	beq.w	801ceb8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801c738:	4b8d      	ldr	r3, [pc, #564]	@ (801c970 <tcp_input+0x28c>)
 801c73a:	681b      	ldr	r3, [r3, #0]
 801c73c:	899b      	ldrh	r3, [r3, #12]
 801c73e:	b29b      	uxth	r3, r3
 801c740:	4618      	mov	r0, r3
 801c742:	f7fc faa5 	bl	8018c90 <lwip_htons>
 801c746:	4603      	mov	r3, r0
 801c748:	0b1b      	lsrs	r3, r3, #12
 801c74a:	b29b      	uxth	r3, r3
 801c74c:	b2db      	uxtb	r3, r3
 801c74e:	009b      	lsls	r3, r3, #2
 801c750:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801c752:	7cbb      	ldrb	r3, [r7, #18]
 801c754:	2b13      	cmp	r3, #19
 801c756:	f240 83b1 	bls.w	801cebc <tcp_input+0x7d8>
 801c75a:	7cbb      	ldrb	r3, [r7, #18]
 801c75c:	b29a      	uxth	r2, r3
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	891b      	ldrh	r3, [r3, #8]
 801c762:	429a      	cmp	r2, r3
 801c764:	f200 83aa 	bhi.w	801cebc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801c768:	7cbb      	ldrb	r3, [r7, #18]
 801c76a:	b29b      	uxth	r3, r3
 801c76c:	3b14      	subs	r3, #20
 801c76e:	b29a      	uxth	r2, r3
 801c770:	4b81      	ldr	r3, [pc, #516]	@ (801c978 <tcp_input+0x294>)
 801c772:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801c774:	4b81      	ldr	r3, [pc, #516]	@ (801c97c <tcp_input+0x298>)
 801c776:	2200      	movs	r2, #0
 801c778:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801c77a:	687b      	ldr	r3, [r7, #4]
 801c77c:	895a      	ldrh	r2, [r3, #10]
 801c77e:	7cbb      	ldrb	r3, [r7, #18]
 801c780:	b29b      	uxth	r3, r3
 801c782:	429a      	cmp	r2, r3
 801c784:	d309      	bcc.n	801c79a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801c786:	4b7c      	ldr	r3, [pc, #496]	@ (801c978 <tcp_input+0x294>)
 801c788:	881a      	ldrh	r2, [r3, #0]
 801c78a:	4b7d      	ldr	r3, [pc, #500]	@ (801c980 <tcp_input+0x29c>)
 801c78c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801c78e:	7cbb      	ldrb	r3, [r7, #18]
 801c790:	4619      	mov	r1, r3
 801c792:	6878      	ldr	r0, [r7, #4]
 801c794:	f7fd fea0 	bl	801a4d8 <pbuf_remove_header>
 801c798:	e04e      	b.n	801c838 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801c79a:	687b      	ldr	r3, [r7, #4]
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d105      	bne.n	801c7ae <tcp_input+0xca>
 801c7a2:	4b70      	ldr	r3, [pc, #448]	@ (801c964 <tcp_input+0x280>)
 801c7a4:	22c2      	movs	r2, #194	@ 0xc2
 801c7a6:	4977      	ldr	r1, [pc, #476]	@ (801c984 <tcp_input+0x2a0>)
 801c7a8:	4870      	ldr	r0, [pc, #448]	@ (801c96c <tcp_input+0x288>)
 801c7aa:	f008 fe9b 	bl	80254e4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801c7ae:	2114      	movs	r1, #20
 801c7b0:	6878      	ldr	r0, [r7, #4]
 801c7b2:	f7fd fe91 	bl	801a4d8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	895a      	ldrh	r2, [r3, #10]
 801c7ba:	4b71      	ldr	r3, [pc, #452]	@ (801c980 <tcp_input+0x29c>)
 801c7bc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801c7be:	4b6e      	ldr	r3, [pc, #440]	@ (801c978 <tcp_input+0x294>)
 801c7c0:	881a      	ldrh	r2, [r3, #0]
 801c7c2:	4b6f      	ldr	r3, [pc, #444]	@ (801c980 <tcp_input+0x29c>)
 801c7c4:	881b      	ldrh	r3, [r3, #0]
 801c7c6:	1ad3      	subs	r3, r2, r3
 801c7c8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801c7ca:	4b6d      	ldr	r3, [pc, #436]	@ (801c980 <tcp_input+0x29c>)
 801c7cc:	881b      	ldrh	r3, [r3, #0]
 801c7ce:	4619      	mov	r1, r3
 801c7d0:	6878      	ldr	r0, [r7, #4]
 801c7d2:	f7fd fe81 	bl	801a4d8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	681b      	ldr	r3, [r3, #0]
 801c7da:	895b      	ldrh	r3, [r3, #10]
 801c7dc:	8a3a      	ldrh	r2, [r7, #16]
 801c7de:	429a      	cmp	r2, r3
 801c7e0:	f200 836e 	bhi.w	801cec0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	681b      	ldr	r3, [r3, #0]
 801c7e8:	685b      	ldr	r3, [r3, #4]
 801c7ea:	4a64      	ldr	r2, [pc, #400]	@ (801c97c <tcp_input+0x298>)
 801c7ec:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801c7ee:	687b      	ldr	r3, [r7, #4]
 801c7f0:	681b      	ldr	r3, [r3, #0]
 801c7f2:	8a3a      	ldrh	r2, [r7, #16]
 801c7f4:	4611      	mov	r1, r2
 801c7f6:	4618      	mov	r0, r3
 801c7f8:	f7fd fe6e 	bl	801a4d8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801c7fc:	687b      	ldr	r3, [r7, #4]
 801c7fe:	891a      	ldrh	r2, [r3, #8]
 801c800:	8a3b      	ldrh	r3, [r7, #16]
 801c802:	1ad3      	subs	r3, r2, r3
 801c804:	b29a      	uxth	r2, r3
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	895b      	ldrh	r3, [r3, #10]
 801c80e:	2b00      	cmp	r3, #0
 801c810:	d005      	beq.n	801c81e <tcp_input+0x13a>
 801c812:	4b54      	ldr	r3, [pc, #336]	@ (801c964 <tcp_input+0x280>)
 801c814:	22df      	movs	r2, #223	@ 0xdf
 801c816:	495c      	ldr	r1, [pc, #368]	@ (801c988 <tcp_input+0x2a4>)
 801c818:	4854      	ldr	r0, [pc, #336]	@ (801c96c <tcp_input+0x288>)
 801c81a:	f008 fe63 	bl	80254e4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	891a      	ldrh	r2, [r3, #8]
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	681b      	ldr	r3, [r3, #0]
 801c826:	891b      	ldrh	r3, [r3, #8]
 801c828:	429a      	cmp	r2, r3
 801c82a:	d005      	beq.n	801c838 <tcp_input+0x154>
 801c82c:	4b4d      	ldr	r3, [pc, #308]	@ (801c964 <tcp_input+0x280>)
 801c82e:	22e0      	movs	r2, #224	@ 0xe0
 801c830:	4956      	ldr	r1, [pc, #344]	@ (801c98c <tcp_input+0x2a8>)
 801c832:	484e      	ldr	r0, [pc, #312]	@ (801c96c <tcp_input+0x288>)
 801c834:	f008 fe56 	bl	80254e4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801c838:	4b4d      	ldr	r3, [pc, #308]	@ (801c970 <tcp_input+0x28c>)
 801c83a:	681b      	ldr	r3, [r3, #0]
 801c83c:	881b      	ldrh	r3, [r3, #0]
 801c83e:	b29b      	uxth	r3, r3
 801c840:	4a4b      	ldr	r2, [pc, #300]	@ (801c970 <tcp_input+0x28c>)
 801c842:	6814      	ldr	r4, [r2, #0]
 801c844:	4618      	mov	r0, r3
 801c846:	f7fc fa23 	bl	8018c90 <lwip_htons>
 801c84a:	4603      	mov	r3, r0
 801c84c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801c84e:	4b48      	ldr	r3, [pc, #288]	@ (801c970 <tcp_input+0x28c>)
 801c850:	681b      	ldr	r3, [r3, #0]
 801c852:	885b      	ldrh	r3, [r3, #2]
 801c854:	b29b      	uxth	r3, r3
 801c856:	4a46      	ldr	r2, [pc, #280]	@ (801c970 <tcp_input+0x28c>)
 801c858:	6814      	ldr	r4, [r2, #0]
 801c85a:	4618      	mov	r0, r3
 801c85c:	f7fc fa18 	bl	8018c90 <lwip_htons>
 801c860:	4603      	mov	r3, r0
 801c862:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801c864:	4b42      	ldr	r3, [pc, #264]	@ (801c970 <tcp_input+0x28c>)
 801c866:	681b      	ldr	r3, [r3, #0]
 801c868:	685b      	ldr	r3, [r3, #4]
 801c86a:	4a41      	ldr	r2, [pc, #260]	@ (801c970 <tcp_input+0x28c>)
 801c86c:	6814      	ldr	r4, [r2, #0]
 801c86e:	4618      	mov	r0, r3
 801c870:	f7fc fa23 	bl	8018cba <lwip_htonl>
 801c874:	4603      	mov	r3, r0
 801c876:	6063      	str	r3, [r4, #4]
 801c878:	6863      	ldr	r3, [r4, #4]
 801c87a:	4a45      	ldr	r2, [pc, #276]	@ (801c990 <tcp_input+0x2ac>)
 801c87c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801c87e:	4b3c      	ldr	r3, [pc, #240]	@ (801c970 <tcp_input+0x28c>)
 801c880:	681b      	ldr	r3, [r3, #0]
 801c882:	689b      	ldr	r3, [r3, #8]
 801c884:	4a3a      	ldr	r2, [pc, #232]	@ (801c970 <tcp_input+0x28c>)
 801c886:	6814      	ldr	r4, [r2, #0]
 801c888:	4618      	mov	r0, r3
 801c88a:	f7fc fa16 	bl	8018cba <lwip_htonl>
 801c88e:	4603      	mov	r3, r0
 801c890:	60a3      	str	r3, [r4, #8]
 801c892:	68a3      	ldr	r3, [r4, #8]
 801c894:	4a3f      	ldr	r2, [pc, #252]	@ (801c994 <tcp_input+0x2b0>)
 801c896:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801c898:	4b35      	ldr	r3, [pc, #212]	@ (801c970 <tcp_input+0x28c>)
 801c89a:	681b      	ldr	r3, [r3, #0]
 801c89c:	89db      	ldrh	r3, [r3, #14]
 801c89e:	b29b      	uxth	r3, r3
 801c8a0:	4a33      	ldr	r2, [pc, #204]	@ (801c970 <tcp_input+0x28c>)
 801c8a2:	6814      	ldr	r4, [r2, #0]
 801c8a4:	4618      	mov	r0, r3
 801c8a6:	f7fc f9f3 	bl	8018c90 <lwip_htons>
 801c8aa:	4603      	mov	r3, r0
 801c8ac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801c8ae:	4b30      	ldr	r3, [pc, #192]	@ (801c970 <tcp_input+0x28c>)
 801c8b0:	681b      	ldr	r3, [r3, #0]
 801c8b2:	899b      	ldrh	r3, [r3, #12]
 801c8b4:	b29b      	uxth	r3, r3
 801c8b6:	4618      	mov	r0, r3
 801c8b8:	f7fc f9ea 	bl	8018c90 <lwip_htons>
 801c8bc:	4603      	mov	r3, r0
 801c8be:	b2db      	uxtb	r3, r3
 801c8c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c8c4:	b2da      	uxtb	r2, r3
 801c8c6:	4b34      	ldr	r3, [pc, #208]	@ (801c998 <tcp_input+0x2b4>)
 801c8c8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801c8ca:	687b      	ldr	r3, [r7, #4]
 801c8cc:	891a      	ldrh	r2, [r3, #8]
 801c8ce:	4b33      	ldr	r3, [pc, #204]	@ (801c99c <tcp_input+0x2b8>)
 801c8d0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801c8d2:	4b31      	ldr	r3, [pc, #196]	@ (801c998 <tcp_input+0x2b4>)
 801c8d4:	781b      	ldrb	r3, [r3, #0]
 801c8d6:	f003 0303 	and.w	r3, r3, #3
 801c8da:	2b00      	cmp	r3, #0
 801c8dc:	d00c      	beq.n	801c8f8 <tcp_input+0x214>
    tcplen++;
 801c8de:	4b2f      	ldr	r3, [pc, #188]	@ (801c99c <tcp_input+0x2b8>)
 801c8e0:	881b      	ldrh	r3, [r3, #0]
 801c8e2:	3301      	adds	r3, #1
 801c8e4:	b29a      	uxth	r2, r3
 801c8e6:	4b2d      	ldr	r3, [pc, #180]	@ (801c99c <tcp_input+0x2b8>)
 801c8e8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801c8ea:	687b      	ldr	r3, [r7, #4]
 801c8ec:	891a      	ldrh	r2, [r3, #8]
 801c8ee:	4b2b      	ldr	r3, [pc, #172]	@ (801c99c <tcp_input+0x2b8>)
 801c8f0:	881b      	ldrh	r3, [r3, #0]
 801c8f2:	429a      	cmp	r2, r3
 801c8f4:	f200 82e6 	bhi.w	801cec4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801c8f8:	2300      	movs	r3, #0
 801c8fa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c8fc:	4b28      	ldr	r3, [pc, #160]	@ (801c9a0 <tcp_input+0x2bc>)
 801c8fe:	681b      	ldr	r3, [r3, #0]
 801c900:	61fb      	str	r3, [r7, #28]
 801c902:	e09d      	b.n	801ca40 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801c904:	69fb      	ldr	r3, [r7, #28]
 801c906:	7d1b      	ldrb	r3, [r3, #20]
 801c908:	2b00      	cmp	r3, #0
 801c90a:	d105      	bne.n	801c918 <tcp_input+0x234>
 801c90c:	4b15      	ldr	r3, [pc, #84]	@ (801c964 <tcp_input+0x280>)
 801c90e:	22fb      	movs	r2, #251	@ 0xfb
 801c910:	4924      	ldr	r1, [pc, #144]	@ (801c9a4 <tcp_input+0x2c0>)
 801c912:	4816      	ldr	r0, [pc, #88]	@ (801c96c <tcp_input+0x288>)
 801c914:	f008 fde6 	bl	80254e4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801c918:	69fb      	ldr	r3, [r7, #28]
 801c91a:	7d1b      	ldrb	r3, [r3, #20]
 801c91c:	2b0a      	cmp	r3, #10
 801c91e:	d105      	bne.n	801c92c <tcp_input+0x248>
 801c920:	4b10      	ldr	r3, [pc, #64]	@ (801c964 <tcp_input+0x280>)
 801c922:	22fc      	movs	r2, #252	@ 0xfc
 801c924:	4920      	ldr	r1, [pc, #128]	@ (801c9a8 <tcp_input+0x2c4>)
 801c926:	4811      	ldr	r0, [pc, #68]	@ (801c96c <tcp_input+0x288>)
 801c928:	f008 fddc 	bl	80254e4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801c92c:	69fb      	ldr	r3, [r7, #28]
 801c92e:	7d1b      	ldrb	r3, [r3, #20]
 801c930:	2b01      	cmp	r3, #1
 801c932:	d105      	bne.n	801c940 <tcp_input+0x25c>
 801c934:	4b0b      	ldr	r3, [pc, #44]	@ (801c964 <tcp_input+0x280>)
 801c936:	22fd      	movs	r2, #253	@ 0xfd
 801c938:	491c      	ldr	r1, [pc, #112]	@ (801c9ac <tcp_input+0x2c8>)
 801c93a:	480c      	ldr	r0, [pc, #48]	@ (801c96c <tcp_input+0x288>)
 801c93c:	f008 fdd2 	bl	80254e4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c940:	69fb      	ldr	r3, [r7, #28]
 801c942:	7a1b      	ldrb	r3, [r3, #8]
 801c944:	2b00      	cmp	r3, #0
 801c946:	d033      	beq.n	801c9b0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c948:	69fb      	ldr	r3, [r7, #28]
 801c94a:	7a1a      	ldrb	r2, [r3, #8]
 801c94c:	4b09      	ldr	r3, [pc, #36]	@ (801c974 <tcp_input+0x290>)
 801c94e:	685b      	ldr	r3, [r3, #4]
 801c950:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c954:	3301      	adds	r3, #1
 801c956:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c958:	429a      	cmp	r2, r3
 801c95a:	d029      	beq.n	801c9b0 <tcp_input+0x2cc>
      prev = pcb;
 801c95c:	69fb      	ldr	r3, [r7, #28]
 801c95e:	61bb      	str	r3, [r7, #24]
      continue;
 801c960:	e06b      	b.n	801ca3a <tcp_input+0x356>
 801c962:	bf00      	nop
 801c964:	0802b788 	.word	0x0802b788
 801c968:	0802b7bc 	.word	0x0802b7bc
 801c96c:	0802b7d4 	.word	0x0802b7d4
 801c970:	2400be8c 	.word	0x2400be8c
 801c974:	24008d64 	.word	0x24008d64
 801c978:	2400be90 	.word	0x2400be90
 801c97c:	2400be94 	.word	0x2400be94
 801c980:	2400be92 	.word	0x2400be92
 801c984:	0802b7fc 	.word	0x0802b7fc
 801c988:	0802b80c 	.word	0x0802b80c
 801c98c:	0802b818 	.word	0x0802b818
 801c990:	2400be9c 	.word	0x2400be9c
 801c994:	2400bea0 	.word	0x2400bea0
 801c998:	2400bea8 	.word	0x2400bea8
 801c99c:	2400bea6 	.word	0x2400bea6
 801c9a0:	2400be70 	.word	0x2400be70
 801c9a4:	0802b838 	.word	0x0802b838
 801c9a8:	0802b860 	.word	0x0802b860
 801c9ac:	0802b88c 	.word	0x0802b88c
    }

    if (pcb->remote_port == tcphdr->src &&
 801c9b0:	69fb      	ldr	r3, [r7, #28]
 801c9b2:	8b1a      	ldrh	r2, [r3, #24]
 801c9b4:	4b72      	ldr	r3, [pc, #456]	@ (801cb80 <tcp_input+0x49c>)
 801c9b6:	681b      	ldr	r3, [r3, #0]
 801c9b8:	881b      	ldrh	r3, [r3, #0]
 801c9ba:	b29b      	uxth	r3, r3
 801c9bc:	429a      	cmp	r2, r3
 801c9be:	d13a      	bne.n	801ca36 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801c9c0:	69fb      	ldr	r3, [r7, #28]
 801c9c2:	8ada      	ldrh	r2, [r3, #22]
 801c9c4:	4b6e      	ldr	r3, [pc, #440]	@ (801cb80 <tcp_input+0x49c>)
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	885b      	ldrh	r3, [r3, #2]
 801c9ca:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801c9cc:	429a      	cmp	r2, r3
 801c9ce:	d132      	bne.n	801ca36 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c9d0:	69fb      	ldr	r3, [r7, #28]
 801c9d2:	685a      	ldr	r2, [r3, #4]
 801c9d4:	4b6b      	ldr	r3, [pc, #428]	@ (801cb84 <tcp_input+0x4a0>)
 801c9d6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801c9d8:	429a      	cmp	r2, r3
 801c9da:	d12c      	bne.n	801ca36 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c9dc:	69fb      	ldr	r3, [r7, #28]
 801c9de:	681a      	ldr	r2, [r3, #0]
 801c9e0:	4b68      	ldr	r3, [pc, #416]	@ (801cb84 <tcp_input+0x4a0>)
 801c9e2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c9e4:	429a      	cmp	r2, r3
 801c9e6:	d126      	bne.n	801ca36 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801c9e8:	69fb      	ldr	r3, [r7, #28]
 801c9ea:	68db      	ldr	r3, [r3, #12]
 801c9ec:	69fa      	ldr	r2, [r7, #28]
 801c9ee:	429a      	cmp	r2, r3
 801c9f0:	d106      	bne.n	801ca00 <tcp_input+0x31c>
 801c9f2:	4b65      	ldr	r3, [pc, #404]	@ (801cb88 <tcp_input+0x4a4>)
 801c9f4:	f240 120d 	movw	r2, #269	@ 0x10d
 801c9f8:	4964      	ldr	r1, [pc, #400]	@ (801cb8c <tcp_input+0x4a8>)
 801c9fa:	4865      	ldr	r0, [pc, #404]	@ (801cb90 <tcp_input+0x4ac>)
 801c9fc:	f008 fd72 	bl	80254e4 <iprintf>
      if (prev != NULL) {
 801ca00:	69bb      	ldr	r3, [r7, #24]
 801ca02:	2b00      	cmp	r3, #0
 801ca04:	d00a      	beq.n	801ca1c <tcp_input+0x338>
        prev->next = pcb->next;
 801ca06:	69fb      	ldr	r3, [r7, #28]
 801ca08:	68da      	ldr	r2, [r3, #12]
 801ca0a:	69bb      	ldr	r3, [r7, #24]
 801ca0c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801ca0e:	4b61      	ldr	r3, [pc, #388]	@ (801cb94 <tcp_input+0x4b0>)
 801ca10:	681a      	ldr	r2, [r3, #0]
 801ca12:	69fb      	ldr	r3, [r7, #28]
 801ca14:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801ca16:	4a5f      	ldr	r2, [pc, #380]	@ (801cb94 <tcp_input+0x4b0>)
 801ca18:	69fb      	ldr	r3, [r7, #28]
 801ca1a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801ca1c:	69fb      	ldr	r3, [r7, #28]
 801ca1e:	68db      	ldr	r3, [r3, #12]
 801ca20:	69fa      	ldr	r2, [r7, #28]
 801ca22:	429a      	cmp	r2, r3
 801ca24:	d111      	bne.n	801ca4a <tcp_input+0x366>
 801ca26:	4b58      	ldr	r3, [pc, #352]	@ (801cb88 <tcp_input+0x4a4>)
 801ca28:	f240 1215 	movw	r2, #277	@ 0x115
 801ca2c:	495a      	ldr	r1, [pc, #360]	@ (801cb98 <tcp_input+0x4b4>)
 801ca2e:	4858      	ldr	r0, [pc, #352]	@ (801cb90 <tcp_input+0x4ac>)
 801ca30:	f008 fd58 	bl	80254e4 <iprintf>
      break;
 801ca34:	e009      	b.n	801ca4a <tcp_input+0x366>
    }
    prev = pcb;
 801ca36:	69fb      	ldr	r3, [r7, #28]
 801ca38:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ca3a:	69fb      	ldr	r3, [r7, #28]
 801ca3c:	68db      	ldr	r3, [r3, #12]
 801ca3e:	61fb      	str	r3, [r7, #28]
 801ca40:	69fb      	ldr	r3, [r7, #28]
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	f47f af5e 	bne.w	801c904 <tcp_input+0x220>
 801ca48:	e000      	b.n	801ca4c <tcp_input+0x368>
      break;
 801ca4a:	bf00      	nop
  }

  if (pcb == NULL) {
 801ca4c:	69fb      	ldr	r3, [r7, #28]
 801ca4e:	2b00      	cmp	r3, #0
 801ca50:	f040 80aa 	bne.w	801cba8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ca54:	4b51      	ldr	r3, [pc, #324]	@ (801cb9c <tcp_input+0x4b8>)
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	61fb      	str	r3, [r7, #28]
 801ca5a:	e03f      	b.n	801cadc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801ca5c:	69fb      	ldr	r3, [r7, #28]
 801ca5e:	7d1b      	ldrb	r3, [r3, #20]
 801ca60:	2b0a      	cmp	r3, #10
 801ca62:	d006      	beq.n	801ca72 <tcp_input+0x38e>
 801ca64:	4b48      	ldr	r3, [pc, #288]	@ (801cb88 <tcp_input+0x4a4>)
 801ca66:	f240 121f 	movw	r2, #287	@ 0x11f
 801ca6a:	494d      	ldr	r1, [pc, #308]	@ (801cba0 <tcp_input+0x4bc>)
 801ca6c:	4848      	ldr	r0, [pc, #288]	@ (801cb90 <tcp_input+0x4ac>)
 801ca6e:	f008 fd39 	bl	80254e4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ca72:	69fb      	ldr	r3, [r7, #28]
 801ca74:	7a1b      	ldrb	r3, [r3, #8]
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	d009      	beq.n	801ca8e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ca7a:	69fb      	ldr	r3, [r7, #28]
 801ca7c:	7a1a      	ldrb	r2, [r3, #8]
 801ca7e:	4b41      	ldr	r3, [pc, #260]	@ (801cb84 <tcp_input+0x4a0>)
 801ca80:	685b      	ldr	r3, [r3, #4]
 801ca82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ca86:	3301      	adds	r3, #1
 801ca88:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ca8a:	429a      	cmp	r2, r3
 801ca8c:	d122      	bne.n	801cad4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801ca8e:	69fb      	ldr	r3, [r7, #28]
 801ca90:	8b1a      	ldrh	r2, [r3, #24]
 801ca92:	4b3b      	ldr	r3, [pc, #236]	@ (801cb80 <tcp_input+0x49c>)
 801ca94:	681b      	ldr	r3, [r3, #0]
 801ca96:	881b      	ldrh	r3, [r3, #0]
 801ca98:	b29b      	uxth	r3, r3
 801ca9a:	429a      	cmp	r2, r3
 801ca9c:	d11b      	bne.n	801cad6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801ca9e:	69fb      	ldr	r3, [r7, #28]
 801caa0:	8ada      	ldrh	r2, [r3, #22]
 801caa2:	4b37      	ldr	r3, [pc, #220]	@ (801cb80 <tcp_input+0x49c>)
 801caa4:	681b      	ldr	r3, [r3, #0]
 801caa6:	885b      	ldrh	r3, [r3, #2]
 801caa8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801caaa:	429a      	cmp	r2, r3
 801caac:	d113      	bne.n	801cad6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801caae:	69fb      	ldr	r3, [r7, #28]
 801cab0:	685a      	ldr	r2, [r3, #4]
 801cab2:	4b34      	ldr	r3, [pc, #208]	@ (801cb84 <tcp_input+0x4a0>)
 801cab4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801cab6:	429a      	cmp	r2, r3
 801cab8:	d10d      	bne.n	801cad6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801caba:	69fb      	ldr	r3, [r7, #28]
 801cabc:	681a      	ldr	r2, [r3, #0]
 801cabe:	4b31      	ldr	r3, [pc, #196]	@ (801cb84 <tcp_input+0x4a0>)
 801cac0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801cac2:	429a      	cmp	r2, r3
 801cac4:	d107      	bne.n	801cad6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801cac6:	69f8      	ldr	r0, [r7, #28]
 801cac8:	f000 fb56 	bl	801d178 <tcp_timewait_input>
        }
        pbuf_free(p);
 801cacc:	6878      	ldr	r0, [r7, #4]
 801cace:	f7fd fdbb 	bl	801a648 <pbuf_free>
        return;
 801cad2:	e1fd      	b.n	801ced0 <tcp_input+0x7ec>
        continue;
 801cad4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801cad6:	69fb      	ldr	r3, [r7, #28]
 801cad8:	68db      	ldr	r3, [r3, #12]
 801cada:	61fb      	str	r3, [r7, #28]
 801cadc:	69fb      	ldr	r3, [r7, #28]
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d1bc      	bne.n	801ca5c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801cae2:	2300      	movs	r3, #0
 801cae4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801cae6:	4b2f      	ldr	r3, [pc, #188]	@ (801cba4 <tcp_input+0x4c0>)
 801cae8:	681b      	ldr	r3, [r3, #0]
 801caea:	617b      	str	r3, [r7, #20]
 801caec:	e02a      	b.n	801cb44 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801caee:	697b      	ldr	r3, [r7, #20]
 801caf0:	7a1b      	ldrb	r3, [r3, #8]
 801caf2:	2b00      	cmp	r3, #0
 801caf4:	d00c      	beq.n	801cb10 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801caf6:	697b      	ldr	r3, [r7, #20]
 801caf8:	7a1a      	ldrb	r2, [r3, #8]
 801cafa:	4b22      	ldr	r3, [pc, #136]	@ (801cb84 <tcp_input+0x4a0>)
 801cafc:	685b      	ldr	r3, [r3, #4]
 801cafe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801cb02:	3301      	adds	r3, #1
 801cb04:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801cb06:	429a      	cmp	r2, r3
 801cb08:	d002      	beq.n	801cb10 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801cb0a:	697b      	ldr	r3, [r7, #20]
 801cb0c:	61bb      	str	r3, [r7, #24]
        continue;
 801cb0e:	e016      	b.n	801cb3e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801cb10:	697b      	ldr	r3, [r7, #20]
 801cb12:	8ada      	ldrh	r2, [r3, #22]
 801cb14:	4b1a      	ldr	r3, [pc, #104]	@ (801cb80 <tcp_input+0x49c>)
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	885b      	ldrh	r3, [r3, #2]
 801cb1a:	b29b      	uxth	r3, r3
 801cb1c:	429a      	cmp	r2, r3
 801cb1e:	d10c      	bne.n	801cb3a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801cb20:	697b      	ldr	r3, [r7, #20]
 801cb22:	681a      	ldr	r2, [r3, #0]
 801cb24:	4b17      	ldr	r3, [pc, #92]	@ (801cb84 <tcp_input+0x4a0>)
 801cb26:	695b      	ldr	r3, [r3, #20]
 801cb28:	429a      	cmp	r2, r3
 801cb2a:	d00f      	beq.n	801cb4c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801cb2c:	697b      	ldr	r3, [r7, #20]
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	d00d      	beq.n	801cb4e <tcp_input+0x46a>
 801cb32:	697b      	ldr	r3, [r7, #20]
 801cb34:	681b      	ldr	r3, [r3, #0]
 801cb36:	2b00      	cmp	r3, #0
 801cb38:	d009      	beq.n	801cb4e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801cb3a:	697b      	ldr	r3, [r7, #20]
 801cb3c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801cb3e:	697b      	ldr	r3, [r7, #20]
 801cb40:	68db      	ldr	r3, [r3, #12]
 801cb42:	617b      	str	r3, [r7, #20]
 801cb44:	697b      	ldr	r3, [r7, #20]
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d1d1      	bne.n	801caee <tcp_input+0x40a>
 801cb4a:	e000      	b.n	801cb4e <tcp_input+0x46a>
            break;
 801cb4c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801cb4e:	697b      	ldr	r3, [r7, #20]
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	d029      	beq.n	801cba8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801cb54:	69bb      	ldr	r3, [r7, #24]
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d00a      	beq.n	801cb70 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801cb5a:	697b      	ldr	r3, [r7, #20]
 801cb5c:	68da      	ldr	r2, [r3, #12]
 801cb5e:	69bb      	ldr	r3, [r7, #24]
 801cb60:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801cb62:	4b10      	ldr	r3, [pc, #64]	@ (801cba4 <tcp_input+0x4c0>)
 801cb64:	681a      	ldr	r2, [r3, #0]
 801cb66:	697b      	ldr	r3, [r7, #20]
 801cb68:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801cb6a:	4a0e      	ldr	r2, [pc, #56]	@ (801cba4 <tcp_input+0x4c0>)
 801cb6c:	697b      	ldr	r3, [r7, #20]
 801cb6e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801cb70:	6978      	ldr	r0, [r7, #20]
 801cb72:	f000 fa03 	bl	801cf7c <tcp_listen_input>
      }
      pbuf_free(p);
 801cb76:	6878      	ldr	r0, [r7, #4]
 801cb78:	f7fd fd66 	bl	801a648 <pbuf_free>
      return;
 801cb7c:	e1a8      	b.n	801ced0 <tcp_input+0x7ec>
 801cb7e:	bf00      	nop
 801cb80:	2400be8c 	.word	0x2400be8c
 801cb84:	24008d64 	.word	0x24008d64
 801cb88:	0802b788 	.word	0x0802b788
 801cb8c:	0802b8b4 	.word	0x0802b8b4
 801cb90:	0802b7d4 	.word	0x0802b7d4
 801cb94:	2400be70 	.word	0x2400be70
 801cb98:	0802b8e0 	.word	0x0802b8e0
 801cb9c:	2400be74 	.word	0x2400be74
 801cba0:	0802b90c 	.word	0x0802b90c
 801cba4:	2400be6c 	.word	0x2400be6c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801cba8:	69fb      	ldr	r3, [r7, #28]
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	f000 8158 	beq.w	801ce60 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801cbb0:	4b95      	ldr	r3, [pc, #596]	@ (801ce08 <tcp_input+0x724>)
 801cbb2:	2200      	movs	r2, #0
 801cbb4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801cbb6:	687b      	ldr	r3, [r7, #4]
 801cbb8:	891a      	ldrh	r2, [r3, #8]
 801cbba:	4b93      	ldr	r3, [pc, #588]	@ (801ce08 <tcp_input+0x724>)
 801cbbc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801cbbe:	4a92      	ldr	r2, [pc, #584]	@ (801ce08 <tcp_input+0x724>)
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801cbc4:	4b91      	ldr	r3, [pc, #580]	@ (801ce0c <tcp_input+0x728>)
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	4a8f      	ldr	r2, [pc, #572]	@ (801ce08 <tcp_input+0x724>)
 801cbca:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801cbcc:	4b90      	ldr	r3, [pc, #576]	@ (801ce10 <tcp_input+0x72c>)
 801cbce:	2200      	movs	r2, #0
 801cbd0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801cbd2:	4b90      	ldr	r3, [pc, #576]	@ (801ce14 <tcp_input+0x730>)
 801cbd4:	2200      	movs	r2, #0
 801cbd6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801cbd8:	4b8f      	ldr	r3, [pc, #572]	@ (801ce18 <tcp_input+0x734>)
 801cbda:	2200      	movs	r2, #0
 801cbdc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801cbde:	4b8f      	ldr	r3, [pc, #572]	@ (801ce1c <tcp_input+0x738>)
 801cbe0:	781b      	ldrb	r3, [r3, #0]
 801cbe2:	f003 0308 	and.w	r3, r3, #8
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	d006      	beq.n	801cbf8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	7b5b      	ldrb	r3, [r3, #13]
 801cbee:	f043 0301 	orr.w	r3, r3, #1
 801cbf2:	b2da      	uxtb	r2, r3
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801cbf8:	69fb      	ldr	r3, [r7, #28]
 801cbfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d017      	beq.n	801cc30 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801cc00:	69f8      	ldr	r0, [r7, #28]
 801cc02:	f7ff f85b 	bl	801bcbc <tcp_process_refused_data>
 801cc06:	4603      	mov	r3, r0
 801cc08:	f113 0f0d 	cmn.w	r3, #13
 801cc0c:	d007      	beq.n	801cc1e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801cc0e:	69fb      	ldr	r3, [r7, #28]
 801cc10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801cc12:	2b00      	cmp	r3, #0
 801cc14:	d00c      	beq.n	801cc30 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801cc16:	4b82      	ldr	r3, [pc, #520]	@ (801ce20 <tcp_input+0x73c>)
 801cc18:	881b      	ldrh	r3, [r3, #0]
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	d008      	beq.n	801cc30 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801cc1e:	69fb      	ldr	r3, [r7, #28]
 801cc20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	f040 80e3 	bne.w	801cdee <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801cc28:	69f8      	ldr	r0, [r7, #28]
 801cc2a:	f003 fdff 	bl	802082c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801cc2e:	e0de      	b.n	801cdee <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801cc30:	4a7c      	ldr	r2, [pc, #496]	@ (801ce24 <tcp_input+0x740>)
 801cc32:	69fb      	ldr	r3, [r7, #28]
 801cc34:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801cc36:	69f8      	ldr	r0, [r7, #28]
 801cc38:	f000 fb18 	bl	801d26c <tcp_process>
 801cc3c:	4603      	mov	r3, r0
 801cc3e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801cc40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cc44:	f113 0f0d 	cmn.w	r3, #13
 801cc48:	f000 80d3 	beq.w	801cdf2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801cc4c:	4b71      	ldr	r3, [pc, #452]	@ (801ce14 <tcp_input+0x730>)
 801cc4e:	781b      	ldrb	r3, [r3, #0]
 801cc50:	f003 0308 	and.w	r3, r3, #8
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d015      	beq.n	801cc84 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801cc58:	69fb      	ldr	r3, [r7, #28]
 801cc5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801cc5e:	2b00      	cmp	r3, #0
 801cc60:	d008      	beq.n	801cc74 <tcp_input+0x590>
 801cc62:	69fb      	ldr	r3, [r7, #28]
 801cc64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801cc68:	69fa      	ldr	r2, [r7, #28]
 801cc6a:	6912      	ldr	r2, [r2, #16]
 801cc6c:	f06f 010d 	mvn.w	r1, #13
 801cc70:	4610      	mov	r0, r2
 801cc72:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801cc74:	69f9      	ldr	r1, [r7, #28]
 801cc76:	486c      	ldr	r0, [pc, #432]	@ (801ce28 <tcp_input+0x744>)
 801cc78:	f7ff fbbc 	bl	801c3f4 <tcp_pcb_remove>
        tcp_free(pcb);
 801cc7c:	69f8      	ldr	r0, [r7, #28]
 801cc7e:	f7fd ff9f 	bl	801abc0 <tcp_free>
 801cc82:	e0da      	b.n	801ce3a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801cc84:	2300      	movs	r3, #0
 801cc86:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801cc88:	4b63      	ldr	r3, [pc, #396]	@ (801ce18 <tcp_input+0x734>)
 801cc8a:	881b      	ldrh	r3, [r3, #0]
 801cc8c:	2b00      	cmp	r3, #0
 801cc8e:	d01d      	beq.n	801cccc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801cc90:	4b61      	ldr	r3, [pc, #388]	@ (801ce18 <tcp_input+0x734>)
 801cc92:	881b      	ldrh	r3, [r3, #0]
 801cc94:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801cc96:	69fb      	ldr	r3, [r7, #28]
 801cc98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	d00a      	beq.n	801ccb6 <tcp_input+0x5d2>
 801cca0:	69fb      	ldr	r3, [r7, #28]
 801cca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801cca6:	69fa      	ldr	r2, [r7, #28]
 801cca8:	6910      	ldr	r0, [r2, #16]
 801ccaa:	89fa      	ldrh	r2, [r7, #14]
 801ccac:	69f9      	ldr	r1, [r7, #28]
 801ccae:	4798      	blx	r3
 801ccb0:	4603      	mov	r3, r0
 801ccb2:	74fb      	strb	r3, [r7, #19]
 801ccb4:	e001      	b.n	801ccba <tcp_input+0x5d6>
 801ccb6:	2300      	movs	r3, #0
 801ccb8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801ccba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ccbe:	f113 0f0d 	cmn.w	r3, #13
 801ccc2:	f000 8098 	beq.w	801cdf6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801ccc6:	4b54      	ldr	r3, [pc, #336]	@ (801ce18 <tcp_input+0x734>)
 801ccc8:	2200      	movs	r2, #0
 801ccca:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801cccc:	69f8      	ldr	r0, [r7, #28]
 801ccce:	f000 f915 	bl	801cefc <tcp_input_delayed_close>
 801ccd2:	4603      	mov	r3, r0
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	f040 8090 	bne.w	801cdfa <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801ccda:	4b4d      	ldr	r3, [pc, #308]	@ (801ce10 <tcp_input+0x72c>)
 801ccdc:	681b      	ldr	r3, [r3, #0]
 801ccde:	2b00      	cmp	r3, #0
 801cce0:	d041      	beq.n	801cd66 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801cce2:	69fb      	ldr	r3, [r7, #28]
 801cce4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cce6:	2b00      	cmp	r3, #0
 801cce8:	d006      	beq.n	801ccf8 <tcp_input+0x614>
 801ccea:	4b50      	ldr	r3, [pc, #320]	@ (801ce2c <tcp_input+0x748>)
 801ccec:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801ccf0:	494f      	ldr	r1, [pc, #316]	@ (801ce30 <tcp_input+0x74c>)
 801ccf2:	4850      	ldr	r0, [pc, #320]	@ (801ce34 <tcp_input+0x750>)
 801ccf4:	f008 fbf6 	bl	80254e4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801ccf8:	69fb      	ldr	r3, [r7, #28]
 801ccfa:	8b5b      	ldrh	r3, [r3, #26]
 801ccfc:	f003 0310 	and.w	r3, r3, #16
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d008      	beq.n	801cd16 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801cd04:	4b42      	ldr	r3, [pc, #264]	@ (801ce10 <tcp_input+0x72c>)
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	4618      	mov	r0, r3
 801cd0a:	f7fd fc9d 	bl	801a648 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801cd0e:	69f8      	ldr	r0, [r7, #28]
 801cd10:	f7fe fa9a 	bl	801b248 <tcp_abort>
            goto aborted;
 801cd14:	e091      	b.n	801ce3a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801cd16:	69fb      	ldr	r3, [r7, #28]
 801cd18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	d00c      	beq.n	801cd3a <tcp_input+0x656>
 801cd20:	69fb      	ldr	r3, [r7, #28]
 801cd22:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801cd26:	69fb      	ldr	r3, [r7, #28]
 801cd28:	6918      	ldr	r0, [r3, #16]
 801cd2a:	4b39      	ldr	r3, [pc, #228]	@ (801ce10 <tcp_input+0x72c>)
 801cd2c:	681a      	ldr	r2, [r3, #0]
 801cd2e:	2300      	movs	r3, #0
 801cd30:	69f9      	ldr	r1, [r7, #28]
 801cd32:	47a0      	blx	r4
 801cd34:	4603      	mov	r3, r0
 801cd36:	74fb      	strb	r3, [r7, #19]
 801cd38:	e008      	b.n	801cd4c <tcp_input+0x668>
 801cd3a:	4b35      	ldr	r3, [pc, #212]	@ (801ce10 <tcp_input+0x72c>)
 801cd3c:	681a      	ldr	r2, [r3, #0]
 801cd3e:	2300      	movs	r3, #0
 801cd40:	69f9      	ldr	r1, [r7, #28]
 801cd42:	2000      	movs	r0, #0
 801cd44:	f7ff f890 	bl	801be68 <tcp_recv_null>
 801cd48:	4603      	mov	r3, r0
 801cd4a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801cd4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cd50:	f113 0f0d 	cmn.w	r3, #13
 801cd54:	d053      	beq.n	801cdfe <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801cd56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	d003      	beq.n	801cd66 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801cd5e:	4b2c      	ldr	r3, [pc, #176]	@ (801ce10 <tcp_input+0x72c>)
 801cd60:	681a      	ldr	r2, [r3, #0]
 801cd62:	69fb      	ldr	r3, [r7, #28]
 801cd64:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801cd66:	4b2b      	ldr	r3, [pc, #172]	@ (801ce14 <tcp_input+0x730>)
 801cd68:	781b      	ldrb	r3, [r3, #0]
 801cd6a:	f003 0320 	and.w	r3, r3, #32
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	d030      	beq.n	801cdd4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801cd72:	69fb      	ldr	r3, [r7, #28]
 801cd74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	d009      	beq.n	801cd8e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801cd7a:	69fb      	ldr	r3, [r7, #28]
 801cd7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cd7e:	7b5a      	ldrb	r2, [r3, #13]
 801cd80:	69fb      	ldr	r3, [r7, #28]
 801cd82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cd84:	f042 0220 	orr.w	r2, r2, #32
 801cd88:	b2d2      	uxtb	r2, r2
 801cd8a:	735a      	strb	r2, [r3, #13]
 801cd8c:	e022      	b.n	801cdd4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801cd8e:	69fb      	ldr	r3, [r7, #28]
 801cd90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801cd92:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801cd96:	d005      	beq.n	801cda4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801cd98:	69fb      	ldr	r3, [r7, #28]
 801cd9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801cd9c:	3301      	adds	r3, #1
 801cd9e:	b29a      	uxth	r2, r3
 801cda0:	69fb      	ldr	r3, [r7, #28]
 801cda2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801cda4:	69fb      	ldr	r3, [r7, #28]
 801cda6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	d00b      	beq.n	801cdc6 <tcp_input+0x6e2>
 801cdae:	69fb      	ldr	r3, [r7, #28]
 801cdb0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801cdb4:	69fb      	ldr	r3, [r7, #28]
 801cdb6:	6918      	ldr	r0, [r3, #16]
 801cdb8:	2300      	movs	r3, #0
 801cdba:	2200      	movs	r2, #0
 801cdbc:	69f9      	ldr	r1, [r7, #28]
 801cdbe:	47a0      	blx	r4
 801cdc0:	4603      	mov	r3, r0
 801cdc2:	74fb      	strb	r3, [r7, #19]
 801cdc4:	e001      	b.n	801cdca <tcp_input+0x6e6>
 801cdc6:	2300      	movs	r3, #0
 801cdc8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801cdca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cdce:	f113 0f0d 	cmn.w	r3, #13
 801cdd2:	d016      	beq.n	801ce02 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801cdd4:	4b13      	ldr	r3, [pc, #76]	@ (801ce24 <tcp_input+0x740>)
 801cdd6:	2200      	movs	r2, #0
 801cdd8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801cdda:	69f8      	ldr	r0, [r7, #28]
 801cddc:	f000 f88e 	bl	801cefc <tcp_input_delayed_close>
 801cde0:	4603      	mov	r3, r0
 801cde2:	2b00      	cmp	r3, #0
 801cde4:	d128      	bne.n	801ce38 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801cde6:	69f8      	ldr	r0, [r7, #28]
 801cde8:	f002 ff1a 	bl	801fc20 <tcp_output>
 801cdec:	e025      	b.n	801ce3a <tcp_input+0x756>
        goto aborted;
 801cdee:	bf00      	nop
 801cdf0:	e023      	b.n	801ce3a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801cdf2:	bf00      	nop
 801cdf4:	e021      	b.n	801ce3a <tcp_input+0x756>
              goto aborted;
 801cdf6:	bf00      	nop
 801cdf8:	e01f      	b.n	801ce3a <tcp_input+0x756>
          goto aborted;
 801cdfa:	bf00      	nop
 801cdfc:	e01d      	b.n	801ce3a <tcp_input+0x756>
            goto aborted;
 801cdfe:	bf00      	nop
 801ce00:	e01b      	b.n	801ce3a <tcp_input+0x756>
              goto aborted;
 801ce02:	bf00      	nop
 801ce04:	e019      	b.n	801ce3a <tcp_input+0x756>
 801ce06:	bf00      	nop
 801ce08:	2400be7c 	.word	0x2400be7c
 801ce0c:	2400be8c 	.word	0x2400be8c
 801ce10:	2400beac 	.word	0x2400beac
 801ce14:	2400bea9 	.word	0x2400bea9
 801ce18:	2400bea4 	.word	0x2400bea4
 801ce1c:	2400bea8 	.word	0x2400bea8
 801ce20:	2400bea6 	.word	0x2400bea6
 801ce24:	2400beb0 	.word	0x2400beb0
 801ce28:	2400be70 	.word	0x2400be70
 801ce2c:	0802b788 	.word	0x0802b788
 801ce30:	0802b93c 	.word	0x0802b93c
 801ce34:	0802b7d4 	.word	0x0802b7d4
          goto aborted;
 801ce38:	bf00      	nop
    tcp_input_pcb = NULL;
 801ce3a:	4b27      	ldr	r3, [pc, #156]	@ (801ced8 <tcp_input+0x7f4>)
 801ce3c:	2200      	movs	r2, #0
 801ce3e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801ce40:	4b26      	ldr	r3, [pc, #152]	@ (801cedc <tcp_input+0x7f8>)
 801ce42:	2200      	movs	r2, #0
 801ce44:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801ce46:	4b26      	ldr	r3, [pc, #152]	@ (801cee0 <tcp_input+0x7fc>)
 801ce48:	685b      	ldr	r3, [r3, #4]
 801ce4a:	2b00      	cmp	r3, #0
 801ce4c:	d03f      	beq.n	801cece <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801ce4e:	4b24      	ldr	r3, [pc, #144]	@ (801cee0 <tcp_input+0x7fc>)
 801ce50:	685b      	ldr	r3, [r3, #4]
 801ce52:	4618      	mov	r0, r3
 801ce54:	f7fd fbf8 	bl	801a648 <pbuf_free>
      inseg.p = NULL;
 801ce58:	4b21      	ldr	r3, [pc, #132]	@ (801cee0 <tcp_input+0x7fc>)
 801ce5a:	2200      	movs	r2, #0
 801ce5c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801ce5e:	e036      	b.n	801cece <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801ce60:	4b20      	ldr	r3, [pc, #128]	@ (801cee4 <tcp_input+0x800>)
 801ce62:	681b      	ldr	r3, [r3, #0]
 801ce64:	899b      	ldrh	r3, [r3, #12]
 801ce66:	b29b      	uxth	r3, r3
 801ce68:	4618      	mov	r0, r3
 801ce6a:	f7fb ff11 	bl	8018c90 <lwip_htons>
 801ce6e:	4603      	mov	r3, r0
 801ce70:	b2db      	uxtb	r3, r3
 801ce72:	f003 0304 	and.w	r3, r3, #4
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	d118      	bne.n	801ceac <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ce7a:	4b1b      	ldr	r3, [pc, #108]	@ (801cee8 <tcp_input+0x804>)
 801ce7c:	6819      	ldr	r1, [r3, #0]
 801ce7e:	4b1b      	ldr	r3, [pc, #108]	@ (801ceec <tcp_input+0x808>)
 801ce80:	881b      	ldrh	r3, [r3, #0]
 801ce82:	461a      	mov	r2, r3
 801ce84:	4b1a      	ldr	r3, [pc, #104]	@ (801cef0 <tcp_input+0x80c>)
 801ce86:	681b      	ldr	r3, [r3, #0]
 801ce88:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ce8a:	4b16      	ldr	r3, [pc, #88]	@ (801cee4 <tcp_input+0x800>)
 801ce8c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ce8e:	885b      	ldrh	r3, [r3, #2]
 801ce90:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ce92:	4a14      	ldr	r2, [pc, #80]	@ (801cee4 <tcp_input+0x800>)
 801ce94:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ce96:	8812      	ldrh	r2, [r2, #0]
 801ce98:	b292      	uxth	r2, r2
 801ce9a:	9202      	str	r2, [sp, #8]
 801ce9c:	9301      	str	r3, [sp, #4]
 801ce9e:	4b15      	ldr	r3, [pc, #84]	@ (801cef4 <tcp_input+0x810>)
 801cea0:	9300      	str	r3, [sp, #0]
 801cea2:	4b15      	ldr	r3, [pc, #84]	@ (801cef8 <tcp_input+0x814>)
 801cea4:	4602      	mov	r2, r0
 801cea6:	2000      	movs	r0, #0
 801cea8:	f003 fc6e 	bl	8020788 <tcp_rst>
    pbuf_free(p);
 801ceac:	6878      	ldr	r0, [r7, #4]
 801ceae:	f7fd fbcb 	bl	801a648 <pbuf_free>
  return;
 801ceb2:	e00c      	b.n	801cece <tcp_input+0x7ea>
    goto dropped;
 801ceb4:	bf00      	nop
 801ceb6:	e006      	b.n	801cec6 <tcp_input+0x7e2>
    goto dropped;
 801ceb8:	bf00      	nop
 801ceba:	e004      	b.n	801cec6 <tcp_input+0x7e2>
    goto dropped;
 801cebc:	bf00      	nop
 801cebe:	e002      	b.n	801cec6 <tcp_input+0x7e2>
      goto dropped;
 801cec0:	bf00      	nop
 801cec2:	e000      	b.n	801cec6 <tcp_input+0x7e2>
      goto dropped;
 801cec4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801cec6:	6878      	ldr	r0, [r7, #4]
 801cec8:	f7fd fbbe 	bl	801a648 <pbuf_free>
 801cecc:	e000      	b.n	801ced0 <tcp_input+0x7ec>
  return;
 801cece:	bf00      	nop
}
 801ced0:	3724      	adds	r7, #36	@ 0x24
 801ced2:	46bd      	mov	sp, r7
 801ced4:	bd90      	pop	{r4, r7, pc}
 801ced6:	bf00      	nop
 801ced8:	2400beb0 	.word	0x2400beb0
 801cedc:	2400beac 	.word	0x2400beac
 801cee0:	2400be7c 	.word	0x2400be7c
 801cee4:	2400be8c 	.word	0x2400be8c
 801cee8:	2400bea0 	.word	0x2400bea0
 801ceec:	2400bea6 	.word	0x2400bea6
 801cef0:	2400be9c 	.word	0x2400be9c
 801cef4:	24008d74 	.word	0x24008d74
 801cef8:	24008d78 	.word	0x24008d78

0801cefc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801cefc:	b580      	push	{r7, lr}
 801cefe:	b082      	sub	sp, #8
 801cf00:	af00      	add	r7, sp, #0
 801cf02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	2b00      	cmp	r3, #0
 801cf08:	d106      	bne.n	801cf18 <tcp_input_delayed_close+0x1c>
 801cf0a:	4b17      	ldr	r3, [pc, #92]	@ (801cf68 <tcp_input_delayed_close+0x6c>)
 801cf0c:	f240 225a 	movw	r2, #602	@ 0x25a
 801cf10:	4916      	ldr	r1, [pc, #88]	@ (801cf6c <tcp_input_delayed_close+0x70>)
 801cf12:	4817      	ldr	r0, [pc, #92]	@ (801cf70 <tcp_input_delayed_close+0x74>)
 801cf14:	f008 fae6 	bl	80254e4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801cf18:	4b16      	ldr	r3, [pc, #88]	@ (801cf74 <tcp_input_delayed_close+0x78>)
 801cf1a:	781b      	ldrb	r3, [r3, #0]
 801cf1c:	f003 0310 	and.w	r3, r3, #16
 801cf20:	2b00      	cmp	r3, #0
 801cf22:	d01c      	beq.n	801cf5e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	8b5b      	ldrh	r3, [r3, #26]
 801cf28:	f003 0310 	and.w	r3, r3, #16
 801cf2c:	2b00      	cmp	r3, #0
 801cf2e:	d10d      	bne.n	801cf4c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d008      	beq.n	801cf4c <tcp_input_delayed_close+0x50>
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801cf40:	687a      	ldr	r2, [r7, #4]
 801cf42:	6912      	ldr	r2, [r2, #16]
 801cf44:	f06f 010e 	mvn.w	r1, #14
 801cf48:	4610      	mov	r0, r2
 801cf4a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801cf4c:	6879      	ldr	r1, [r7, #4]
 801cf4e:	480a      	ldr	r0, [pc, #40]	@ (801cf78 <tcp_input_delayed_close+0x7c>)
 801cf50:	f7ff fa50 	bl	801c3f4 <tcp_pcb_remove>
    tcp_free(pcb);
 801cf54:	6878      	ldr	r0, [r7, #4]
 801cf56:	f7fd fe33 	bl	801abc0 <tcp_free>
    return 1;
 801cf5a:	2301      	movs	r3, #1
 801cf5c:	e000      	b.n	801cf60 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801cf5e:	2300      	movs	r3, #0
}
 801cf60:	4618      	mov	r0, r3
 801cf62:	3708      	adds	r7, #8
 801cf64:	46bd      	mov	sp, r7
 801cf66:	bd80      	pop	{r7, pc}
 801cf68:	0802b788 	.word	0x0802b788
 801cf6c:	0802b958 	.word	0x0802b958
 801cf70:	0802b7d4 	.word	0x0802b7d4
 801cf74:	2400bea9 	.word	0x2400bea9
 801cf78:	2400be70 	.word	0x2400be70

0801cf7c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801cf7c:	b590      	push	{r4, r7, lr}
 801cf7e:	b08b      	sub	sp, #44	@ 0x2c
 801cf80:	af04      	add	r7, sp, #16
 801cf82:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801cf84:	4b6f      	ldr	r3, [pc, #444]	@ (801d144 <tcp_listen_input+0x1c8>)
 801cf86:	781b      	ldrb	r3, [r3, #0]
 801cf88:	f003 0304 	and.w	r3, r3, #4
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	f040 80d2 	bne.w	801d136 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801cf92:	687b      	ldr	r3, [r7, #4]
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d106      	bne.n	801cfa6 <tcp_listen_input+0x2a>
 801cf98:	4b6b      	ldr	r3, [pc, #428]	@ (801d148 <tcp_listen_input+0x1cc>)
 801cf9a:	f240 2281 	movw	r2, #641	@ 0x281
 801cf9e:	496b      	ldr	r1, [pc, #428]	@ (801d14c <tcp_listen_input+0x1d0>)
 801cfa0:	486b      	ldr	r0, [pc, #428]	@ (801d150 <tcp_listen_input+0x1d4>)
 801cfa2:	f008 fa9f 	bl	80254e4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801cfa6:	4b67      	ldr	r3, [pc, #412]	@ (801d144 <tcp_listen_input+0x1c8>)
 801cfa8:	781b      	ldrb	r3, [r3, #0]
 801cfaa:	f003 0310 	and.w	r3, r3, #16
 801cfae:	2b00      	cmp	r3, #0
 801cfb0:	d019      	beq.n	801cfe6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cfb2:	4b68      	ldr	r3, [pc, #416]	@ (801d154 <tcp_listen_input+0x1d8>)
 801cfb4:	6819      	ldr	r1, [r3, #0]
 801cfb6:	4b68      	ldr	r3, [pc, #416]	@ (801d158 <tcp_listen_input+0x1dc>)
 801cfb8:	881b      	ldrh	r3, [r3, #0]
 801cfba:	461a      	mov	r2, r3
 801cfbc:	4b67      	ldr	r3, [pc, #412]	@ (801d15c <tcp_listen_input+0x1e0>)
 801cfbe:	681b      	ldr	r3, [r3, #0]
 801cfc0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cfc2:	4b67      	ldr	r3, [pc, #412]	@ (801d160 <tcp_listen_input+0x1e4>)
 801cfc4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cfc6:	885b      	ldrh	r3, [r3, #2]
 801cfc8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cfca:	4a65      	ldr	r2, [pc, #404]	@ (801d160 <tcp_listen_input+0x1e4>)
 801cfcc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cfce:	8812      	ldrh	r2, [r2, #0]
 801cfd0:	b292      	uxth	r2, r2
 801cfd2:	9202      	str	r2, [sp, #8]
 801cfd4:	9301      	str	r3, [sp, #4]
 801cfd6:	4b63      	ldr	r3, [pc, #396]	@ (801d164 <tcp_listen_input+0x1e8>)
 801cfd8:	9300      	str	r3, [sp, #0]
 801cfda:	4b63      	ldr	r3, [pc, #396]	@ (801d168 <tcp_listen_input+0x1ec>)
 801cfdc:	4602      	mov	r2, r0
 801cfde:	6878      	ldr	r0, [r7, #4]
 801cfe0:	f003 fbd2 	bl	8020788 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801cfe4:	e0a9      	b.n	801d13a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801cfe6:	4b57      	ldr	r3, [pc, #348]	@ (801d144 <tcp_listen_input+0x1c8>)
 801cfe8:	781b      	ldrb	r3, [r3, #0]
 801cfea:	f003 0302 	and.w	r3, r3, #2
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	f000 80a3 	beq.w	801d13a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	7d5b      	ldrb	r3, [r3, #21]
 801cff8:	4618      	mov	r0, r3
 801cffa:	f7ff f859 	bl	801c0b0 <tcp_alloc>
 801cffe:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801d000:	697b      	ldr	r3, [r7, #20]
 801d002:	2b00      	cmp	r3, #0
 801d004:	d111      	bne.n	801d02a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	699b      	ldr	r3, [r3, #24]
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	d00a      	beq.n	801d024 <tcp_listen_input+0xa8>
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	699b      	ldr	r3, [r3, #24]
 801d012:	687a      	ldr	r2, [r7, #4]
 801d014:	6910      	ldr	r0, [r2, #16]
 801d016:	f04f 32ff 	mov.w	r2, #4294967295
 801d01a:	2100      	movs	r1, #0
 801d01c:	4798      	blx	r3
 801d01e:	4603      	mov	r3, r0
 801d020:	73bb      	strb	r3, [r7, #14]
      return;
 801d022:	e08b      	b.n	801d13c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801d024:	23f0      	movs	r3, #240	@ 0xf0
 801d026:	73bb      	strb	r3, [r7, #14]
      return;
 801d028:	e088      	b.n	801d13c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801d02a:	4b50      	ldr	r3, [pc, #320]	@ (801d16c <tcp_listen_input+0x1f0>)
 801d02c:	695a      	ldr	r2, [r3, #20]
 801d02e:	697b      	ldr	r3, [r7, #20]
 801d030:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801d032:	4b4e      	ldr	r3, [pc, #312]	@ (801d16c <tcp_listen_input+0x1f0>)
 801d034:	691a      	ldr	r2, [r3, #16]
 801d036:	697b      	ldr	r3, [r7, #20]
 801d038:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	8ada      	ldrh	r2, [r3, #22]
 801d03e:	697b      	ldr	r3, [r7, #20]
 801d040:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801d042:	4b47      	ldr	r3, [pc, #284]	@ (801d160 <tcp_listen_input+0x1e4>)
 801d044:	681b      	ldr	r3, [r3, #0]
 801d046:	881b      	ldrh	r3, [r3, #0]
 801d048:	b29a      	uxth	r2, r3
 801d04a:	697b      	ldr	r3, [r7, #20]
 801d04c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801d04e:	697b      	ldr	r3, [r7, #20]
 801d050:	2203      	movs	r2, #3
 801d052:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801d054:	4b41      	ldr	r3, [pc, #260]	@ (801d15c <tcp_listen_input+0x1e0>)
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	1c5a      	adds	r2, r3, #1
 801d05a:	697b      	ldr	r3, [r7, #20]
 801d05c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801d05e:	697b      	ldr	r3, [r7, #20]
 801d060:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d062:	697b      	ldr	r3, [r7, #20]
 801d064:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801d066:	6978      	ldr	r0, [r7, #20]
 801d068:	f7ff fa58 	bl	801c51c <tcp_next_iss>
 801d06c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801d06e:	697b      	ldr	r3, [r7, #20]
 801d070:	693a      	ldr	r2, [r7, #16]
 801d072:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 801d074:	697b      	ldr	r3, [r7, #20]
 801d076:	693a      	ldr	r2, [r7, #16]
 801d078:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801d07a:	697b      	ldr	r3, [r7, #20]
 801d07c:	693a      	ldr	r2, [r7, #16]
 801d07e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 801d080:	697b      	ldr	r3, [r7, #20]
 801d082:	693a      	ldr	r2, [r7, #16]
 801d084:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801d086:	4b35      	ldr	r3, [pc, #212]	@ (801d15c <tcp_listen_input+0x1e0>)
 801d088:	681b      	ldr	r3, [r3, #0]
 801d08a:	1e5a      	subs	r2, r3, #1
 801d08c:	697b      	ldr	r3, [r7, #20]
 801d08e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	691a      	ldr	r2, [r3, #16]
 801d094:	697b      	ldr	r3, [r7, #20]
 801d096:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801d098:	697b      	ldr	r3, [r7, #20]
 801d09a:	687a      	ldr	r2, [r7, #4]
 801d09c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	7a5b      	ldrb	r3, [r3, #9]
 801d0a2:	f003 030c 	and.w	r3, r3, #12
 801d0a6:	b2da      	uxtb	r2, r3
 801d0a8:	697b      	ldr	r3, [r7, #20]
 801d0aa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801d0ac:	687b      	ldr	r3, [r7, #4]
 801d0ae:	7a1a      	ldrb	r2, [r3, #8]
 801d0b0:	697b      	ldr	r3, [r7, #20]
 801d0b2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801d0b4:	4b2e      	ldr	r3, [pc, #184]	@ (801d170 <tcp_listen_input+0x1f4>)
 801d0b6:	681a      	ldr	r2, [r3, #0]
 801d0b8:	697b      	ldr	r3, [r7, #20]
 801d0ba:	60da      	str	r2, [r3, #12]
 801d0bc:	4a2c      	ldr	r2, [pc, #176]	@ (801d170 <tcp_listen_input+0x1f4>)
 801d0be:	697b      	ldr	r3, [r7, #20]
 801d0c0:	6013      	str	r3, [r2, #0]
 801d0c2:	f003 fd23 	bl	8020b0c <tcp_timer_needed>
 801d0c6:	4b2b      	ldr	r3, [pc, #172]	@ (801d174 <tcp_listen_input+0x1f8>)
 801d0c8:	2201      	movs	r2, #1
 801d0ca:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801d0cc:	6978      	ldr	r0, [r7, #20]
 801d0ce:	f001 fd8b 	bl	801ebe8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801d0d2:	4b23      	ldr	r3, [pc, #140]	@ (801d160 <tcp_listen_input+0x1e4>)
 801d0d4:	681b      	ldr	r3, [r3, #0]
 801d0d6:	89db      	ldrh	r3, [r3, #14]
 801d0d8:	b29a      	uxth	r2, r3
 801d0da:	697b      	ldr	r3, [r7, #20]
 801d0dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801d0e0:	697b      	ldr	r3, [r7, #20]
 801d0e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801d0e6:	697b      	ldr	r3, [r7, #20]
 801d0e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801d0ec:	697b      	ldr	r3, [r7, #20]
 801d0ee:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801d0f0:	697b      	ldr	r3, [r7, #20]
 801d0f2:	3304      	adds	r3, #4
 801d0f4:	4618      	mov	r0, r3
 801d0f6:	f005 fc6d 	bl	80229d4 <ip4_route>
 801d0fa:	4601      	mov	r1, r0
 801d0fc:	697b      	ldr	r3, [r7, #20]
 801d0fe:	3304      	adds	r3, #4
 801d100:	461a      	mov	r2, r3
 801d102:	4620      	mov	r0, r4
 801d104:	f7ff fa30 	bl	801c568 <tcp_eff_send_mss_netif>
 801d108:	4603      	mov	r3, r0
 801d10a:	461a      	mov	r2, r3
 801d10c:	697b      	ldr	r3, [r7, #20]
 801d10e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801d110:	2112      	movs	r1, #18
 801d112:	6978      	ldr	r0, [r7, #20]
 801d114:	f002 fc96 	bl	801fa44 <tcp_enqueue_flags>
 801d118:	4603      	mov	r3, r0
 801d11a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801d11c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d120:	2b00      	cmp	r3, #0
 801d122:	d004      	beq.n	801d12e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801d124:	2100      	movs	r1, #0
 801d126:	6978      	ldr	r0, [r7, #20]
 801d128:	f7fd ffd0 	bl	801b0cc <tcp_abandon>
      return;
 801d12c:	e006      	b.n	801d13c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801d12e:	6978      	ldr	r0, [r7, #20]
 801d130:	f002 fd76 	bl	801fc20 <tcp_output>
  return;
 801d134:	e001      	b.n	801d13a <tcp_listen_input+0x1be>
    return;
 801d136:	bf00      	nop
 801d138:	e000      	b.n	801d13c <tcp_listen_input+0x1c0>
  return;
 801d13a:	bf00      	nop
}
 801d13c:	371c      	adds	r7, #28
 801d13e:	46bd      	mov	sp, r7
 801d140:	bd90      	pop	{r4, r7, pc}
 801d142:	bf00      	nop
 801d144:	2400bea8 	.word	0x2400bea8
 801d148:	0802b788 	.word	0x0802b788
 801d14c:	0802b980 	.word	0x0802b980
 801d150:	0802b7d4 	.word	0x0802b7d4
 801d154:	2400bea0 	.word	0x2400bea0
 801d158:	2400bea6 	.word	0x2400bea6
 801d15c:	2400be9c 	.word	0x2400be9c
 801d160:	2400be8c 	.word	0x2400be8c
 801d164:	24008d74 	.word	0x24008d74
 801d168:	24008d78 	.word	0x24008d78
 801d16c:	24008d64 	.word	0x24008d64
 801d170:	2400be70 	.word	0x2400be70
 801d174:	2400be78 	.word	0x2400be78

0801d178 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801d178:	b580      	push	{r7, lr}
 801d17a:	b086      	sub	sp, #24
 801d17c:	af04      	add	r7, sp, #16
 801d17e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801d180:	4b2f      	ldr	r3, [pc, #188]	@ (801d240 <tcp_timewait_input+0xc8>)
 801d182:	781b      	ldrb	r3, [r3, #0]
 801d184:	f003 0304 	and.w	r3, r3, #4
 801d188:	2b00      	cmp	r3, #0
 801d18a:	d153      	bne.n	801d234 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801d18c:	687b      	ldr	r3, [r7, #4]
 801d18e:	2b00      	cmp	r3, #0
 801d190:	d106      	bne.n	801d1a0 <tcp_timewait_input+0x28>
 801d192:	4b2c      	ldr	r3, [pc, #176]	@ (801d244 <tcp_timewait_input+0xcc>)
 801d194:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801d198:	492b      	ldr	r1, [pc, #172]	@ (801d248 <tcp_timewait_input+0xd0>)
 801d19a:	482c      	ldr	r0, [pc, #176]	@ (801d24c <tcp_timewait_input+0xd4>)
 801d19c:	f008 f9a2 	bl	80254e4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801d1a0:	4b27      	ldr	r3, [pc, #156]	@ (801d240 <tcp_timewait_input+0xc8>)
 801d1a2:	781b      	ldrb	r3, [r3, #0]
 801d1a4:	f003 0302 	and.w	r3, r3, #2
 801d1a8:	2b00      	cmp	r3, #0
 801d1aa:	d02a      	beq.n	801d202 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801d1ac:	4b28      	ldr	r3, [pc, #160]	@ (801d250 <tcp_timewait_input+0xd8>)
 801d1ae:	681a      	ldr	r2, [r3, #0]
 801d1b0:	687b      	ldr	r3, [r7, #4]
 801d1b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d1b4:	1ad3      	subs	r3, r2, r3
 801d1b6:	2b00      	cmp	r3, #0
 801d1b8:	db2d      	blt.n	801d216 <tcp_timewait_input+0x9e>
 801d1ba:	4b25      	ldr	r3, [pc, #148]	@ (801d250 <tcp_timewait_input+0xd8>)
 801d1bc:	681a      	ldr	r2, [r3, #0]
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d1c2:	6879      	ldr	r1, [r7, #4]
 801d1c4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801d1c6:	440b      	add	r3, r1
 801d1c8:	1ad3      	subs	r3, r2, r3
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	dc23      	bgt.n	801d216 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d1ce:	4b21      	ldr	r3, [pc, #132]	@ (801d254 <tcp_timewait_input+0xdc>)
 801d1d0:	6819      	ldr	r1, [r3, #0]
 801d1d2:	4b21      	ldr	r3, [pc, #132]	@ (801d258 <tcp_timewait_input+0xe0>)
 801d1d4:	881b      	ldrh	r3, [r3, #0]
 801d1d6:	461a      	mov	r2, r3
 801d1d8:	4b1d      	ldr	r3, [pc, #116]	@ (801d250 <tcp_timewait_input+0xd8>)
 801d1da:	681b      	ldr	r3, [r3, #0]
 801d1dc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d1de:	4b1f      	ldr	r3, [pc, #124]	@ (801d25c <tcp_timewait_input+0xe4>)
 801d1e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d1e2:	885b      	ldrh	r3, [r3, #2]
 801d1e4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d1e6:	4a1d      	ldr	r2, [pc, #116]	@ (801d25c <tcp_timewait_input+0xe4>)
 801d1e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d1ea:	8812      	ldrh	r2, [r2, #0]
 801d1ec:	b292      	uxth	r2, r2
 801d1ee:	9202      	str	r2, [sp, #8]
 801d1f0:	9301      	str	r3, [sp, #4]
 801d1f2:	4b1b      	ldr	r3, [pc, #108]	@ (801d260 <tcp_timewait_input+0xe8>)
 801d1f4:	9300      	str	r3, [sp, #0]
 801d1f6:	4b1b      	ldr	r3, [pc, #108]	@ (801d264 <tcp_timewait_input+0xec>)
 801d1f8:	4602      	mov	r2, r0
 801d1fa:	6878      	ldr	r0, [r7, #4]
 801d1fc:	f003 fac4 	bl	8020788 <tcp_rst>
      return;
 801d200:	e01b      	b.n	801d23a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801d202:	4b0f      	ldr	r3, [pc, #60]	@ (801d240 <tcp_timewait_input+0xc8>)
 801d204:	781b      	ldrb	r3, [r3, #0]
 801d206:	f003 0301 	and.w	r3, r3, #1
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	d003      	beq.n	801d216 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801d20e:	4b16      	ldr	r3, [pc, #88]	@ (801d268 <tcp_timewait_input+0xf0>)
 801d210:	681a      	ldr	r2, [r3, #0]
 801d212:	687b      	ldr	r3, [r7, #4]
 801d214:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801d216:	4b10      	ldr	r3, [pc, #64]	@ (801d258 <tcp_timewait_input+0xe0>)
 801d218:	881b      	ldrh	r3, [r3, #0]
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	d00c      	beq.n	801d238 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801d21e:	687b      	ldr	r3, [r7, #4]
 801d220:	8b5b      	ldrh	r3, [r3, #26]
 801d222:	f043 0302 	orr.w	r3, r3, #2
 801d226:	b29a      	uxth	r2, r3
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801d22c:	6878      	ldr	r0, [r7, #4]
 801d22e:	f002 fcf7 	bl	801fc20 <tcp_output>
  }
  return;
 801d232:	e001      	b.n	801d238 <tcp_timewait_input+0xc0>
    return;
 801d234:	bf00      	nop
 801d236:	e000      	b.n	801d23a <tcp_timewait_input+0xc2>
  return;
 801d238:	bf00      	nop
}
 801d23a:	3708      	adds	r7, #8
 801d23c:	46bd      	mov	sp, r7
 801d23e:	bd80      	pop	{r7, pc}
 801d240:	2400bea8 	.word	0x2400bea8
 801d244:	0802b788 	.word	0x0802b788
 801d248:	0802b9a0 	.word	0x0802b9a0
 801d24c:	0802b7d4 	.word	0x0802b7d4
 801d250:	2400be9c 	.word	0x2400be9c
 801d254:	2400bea0 	.word	0x2400bea0
 801d258:	2400bea6 	.word	0x2400bea6
 801d25c:	2400be8c 	.word	0x2400be8c
 801d260:	24008d74 	.word	0x24008d74
 801d264:	24008d78 	.word	0x24008d78
 801d268:	2400be64 	.word	0x2400be64

0801d26c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801d26c:	b590      	push	{r4, r7, lr}
 801d26e:	b08d      	sub	sp, #52	@ 0x34
 801d270:	af04      	add	r7, sp, #16
 801d272:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801d274:	2300      	movs	r3, #0
 801d276:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801d278:	2300      	movs	r3, #0
 801d27a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801d27c:	687b      	ldr	r3, [r7, #4]
 801d27e:	2b00      	cmp	r3, #0
 801d280:	d106      	bne.n	801d290 <tcp_process+0x24>
 801d282:	4b9d      	ldr	r3, [pc, #628]	@ (801d4f8 <tcp_process+0x28c>)
 801d284:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801d288:	499c      	ldr	r1, [pc, #624]	@ (801d4fc <tcp_process+0x290>)
 801d28a:	489d      	ldr	r0, [pc, #628]	@ (801d500 <tcp_process+0x294>)
 801d28c:	f008 f92a 	bl	80254e4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801d290:	4b9c      	ldr	r3, [pc, #624]	@ (801d504 <tcp_process+0x298>)
 801d292:	781b      	ldrb	r3, [r3, #0]
 801d294:	f003 0304 	and.w	r3, r3, #4
 801d298:	2b00      	cmp	r3, #0
 801d29a:	d04e      	beq.n	801d33a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801d29c:	687b      	ldr	r3, [r7, #4]
 801d29e:	7d1b      	ldrb	r3, [r3, #20]
 801d2a0:	2b02      	cmp	r3, #2
 801d2a2:	d108      	bne.n	801d2b6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801d2a4:	687b      	ldr	r3, [r7, #4]
 801d2a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d2a8:	4b97      	ldr	r3, [pc, #604]	@ (801d508 <tcp_process+0x29c>)
 801d2aa:	681b      	ldr	r3, [r3, #0]
 801d2ac:	429a      	cmp	r2, r3
 801d2ae:	d123      	bne.n	801d2f8 <tcp_process+0x8c>
        acceptable = 1;
 801d2b0:	2301      	movs	r3, #1
 801d2b2:	76fb      	strb	r3, [r7, #27]
 801d2b4:	e020      	b.n	801d2f8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801d2b6:	687b      	ldr	r3, [r7, #4]
 801d2b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d2ba:	4b94      	ldr	r3, [pc, #592]	@ (801d50c <tcp_process+0x2a0>)
 801d2bc:	681b      	ldr	r3, [r3, #0]
 801d2be:	429a      	cmp	r2, r3
 801d2c0:	d102      	bne.n	801d2c8 <tcp_process+0x5c>
        acceptable = 1;
 801d2c2:	2301      	movs	r3, #1
 801d2c4:	76fb      	strb	r3, [r7, #27]
 801d2c6:	e017      	b.n	801d2f8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d2c8:	4b90      	ldr	r3, [pc, #576]	@ (801d50c <tcp_process+0x2a0>)
 801d2ca:	681a      	ldr	r2, [r3, #0]
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d2d0:	1ad3      	subs	r3, r2, r3
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	db10      	blt.n	801d2f8 <tcp_process+0x8c>
 801d2d6:	4b8d      	ldr	r3, [pc, #564]	@ (801d50c <tcp_process+0x2a0>)
 801d2d8:	681a      	ldr	r2, [r3, #0]
 801d2da:	687b      	ldr	r3, [r7, #4]
 801d2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d2de:	6879      	ldr	r1, [r7, #4]
 801d2e0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801d2e2:	440b      	add	r3, r1
 801d2e4:	1ad3      	subs	r3, r2, r3
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	dc06      	bgt.n	801d2f8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	8b5b      	ldrh	r3, [r3, #26]
 801d2ee:	f043 0302 	orr.w	r3, r3, #2
 801d2f2:	b29a      	uxth	r2, r3
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801d2f8:	7efb      	ldrb	r3, [r7, #27]
 801d2fa:	2b00      	cmp	r3, #0
 801d2fc:	d01b      	beq.n	801d336 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	7d1b      	ldrb	r3, [r3, #20]
 801d302:	2b00      	cmp	r3, #0
 801d304:	d106      	bne.n	801d314 <tcp_process+0xa8>
 801d306:	4b7c      	ldr	r3, [pc, #496]	@ (801d4f8 <tcp_process+0x28c>)
 801d308:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801d30c:	4980      	ldr	r1, [pc, #512]	@ (801d510 <tcp_process+0x2a4>)
 801d30e:	487c      	ldr	r0, [pc, #496]	@ (801d500 <tcp_process+0x294>)
 801d310:	f008 f8e8 	bl	80254e4 <iprintf>
      recv_flags |= TF_RESET;
 801d314:	4b7f      	ldr	r3, [pc, #508]	@ (801d514 <tcp_process+0x2a8>)
 801d316:	781b      	ldrb	r3, [r3, #0]
 801d318:	f043 0308 	orr.w	r3, r3, #8
 801d31c:	b2da      	uxtb	r2, r3
 801d31e:	4b7d      	ldr	r3, [pc, #500]	@ (801d514 <tcp_process+0x2a8>)
 801d320:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801d322:	687b      	ldr	r3, [r7, #4]
 801d324:	8b5b      	ldrh	r3, [r3, #26]
 801d326:	f023 0301 	bic.w	r3, r3, #1
 801d32a:	b29a      	uxth	r2, r3
 801d32c:	687b      	ldr	r3, [r7, #4]
 801d32e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801d330:	f06f 030d 	mvn.w	r3, #13
 801d334:	e37a      	b.n	801da2c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801d336:	2300      	movs	r3, #0
 801d338:	e378      	b.n	801da2c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801d33a:	4b72      	ldr	r3, [pc, #456]	@ (801d504 <tcp_process+0x298>)
 801d33c:	781b      	ldrb	r3, [r3, #0]
 801d33e:	f003 0302 	and.w	r3, r3, #2
 801d342:	2b00      	cmp	r3, #0
 801d344:	d010      	beq.n	801d368 <tcp_process+0xfc>
 801d346:	687b      	ldr	r3, [r7, #4]
 801d348:	7d1b      	ldrb	r3, [r3, #20]
 801d34a:	2b02      	cmp	r3, #2
 801d34c:	d00c      	beq.n	801d368 <tcp_process+0xfc>
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	7d1b      	ldrb	r3, [r3, #20]
 801d352:	2b03      	cmp	r3, #3
 801d354:	d008      	beq.n	801d368 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801d356:	687b      	ldr	r3, [r7, #4]
 801d358:	8b5b      	ldrh	r3, [r3, #26]
 801d35a:	f043 0302 	orr.w	r3, r3, #2
 801d35e:	b29a      	uxth	r2, r3
 801d360:	687b      	ldr	r3, [r7, #4]
 801d362:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801d364:	2300      	movs	r3, #0
 801d366:	e361      	b.n	801da2c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	8b5b      	ldrh	r3, [r3, #26]
 801d36c:	f003 0310 	and.w	r3, r3, #16
 801d370:	2b00      	cmp	r3, #0
 801d372:	d103      	bne.n	801d37c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801d374:	4b68      	ldr	r3, [pc, #416]	@ (801d518 <tcp_process+0x2ac>)
 801d376:	681a      	ldr	r2, [r3, #0]
 801d378:	687b      	ldr	r3, [r7, #4]
 801d37a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	2200      	movs	r2, #0
 801d380:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	2200      	movs	r2, #0
 801d388:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 801d38c:	6878      	ldr	r0, [r7, #4]
 801d38e:	f001 fc2b 	bl	801ebe8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	7d1b      	ldrb	r3, [r3, #20]
 801d396:	3b02      	subs	r3, #2
 801d398:	2b07      	cmp	r3, #7
 801d39a:	f200 8337 	bhi.w	801da0c <tcp_process+0x7a0>
 801d39e:	a201      	add	r2, pc, #4	@ (adr r2, 801d3a4 <tcp_process+0x138>)
 801d3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d3a4:	0801d3c5 	.word	0x0801d3c5
 801d3a8:	0801d5f5 	.word	0x0801d5f5
 801d3ac:	0801d76d 	.word	0x0801d76d
 801d3b0:	0801d797 	.word	0x0801d797
 801d3b4:	0801d8bb 	.word	0x0801d8bb
 801d3b8:	0801d76d 	.word	0x0801d76d
 801d3bc:	0801d947 	.word	0x0801d947
 801d3c0:	0801d9d7 	.word	0x0801d9d7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801d3c4:	4b4f      	ldr	r3, [pc, #316]	@ (801d504 <tcp_process+0x298>)
 801d3c6:	781b      	ldrb	r3, [r3, #0]
 801d3c8:	f003 0310 	and.w	r3, r3, #16
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	f000 80e4 	beq.w	801d59a <tcp_process+0x32e>
 801d3d2:	4b4c      	ldr	r3, [pc, #304]	@ (801d504 <tcp_process+0x298>)
 801d3d4:	781b      	ldrb	r3, [r3, #0]
 801d3d6:	f003 0302 	and.w	r3, r3, #2
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	f000 80dd 	beq.w	801d59a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801d3e0:	687b      	ldr	r3, [r7, #4]
 801d3e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d3e4:	1c5a      	adds	r2, r3, #1
 801d3e6:	4b48      	ldr	r3, [pc, #288]	@ (801d508 <tcp_process+0x29c>)
 801d3e8:	681b      	ldr	r3, [r3, #0]
 801d3ea:	429a      	cmp	r2, r3
 801d3ec:	f040 80d5 	bne.w	801d59a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801d3f0:	4b46      	ldr	r3, [pc, #280]	@ (801d50c <tcp_process+0x2a0>)
 801d3f2:	681b      	ldr	r3, [r3, #0]
 801d3f4:	1c5a      	adds	r2, r3, #1
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d3fe:	687b      	ldr	r3, [r7, #4]
 801d400:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801d402:	4b41      	ldr	r3, [pc, #260]	@ (801d508 <tcp_process+0x29c>)
 801d404:	681a      	ldr	r2, [r3, #0]
 801d406:	687b      	ldr	r3, [r7, #4]
 801d408:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801d40a:	4b44      	ldr	r3, [pc, #272]	@ (801d51c <tcp_process+0x2b0>)
 801d40c:	681b      	ldr	r3, [r3, #0]
 801d40e:	89db      	ldrh	r3, [r3, #14]
 801d410:	b29a      	uxth	r2, r3
 801d412:	687b      	ldr	r3, [r7, #4]
 801d414:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801d424:	4b39      	ldr	r3, [pc, #228]	@ (801d50c <tcp_process+0x2a0>)
 801d426:	681b      	ldr	r3, [r3, #0]
 801d428:	1e5a      	subs	r2, r3, #1
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	2204      	movs	r2, #4
 801d432:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801d434:	687b      	ldr	r3, [r7, #4]
 801d436:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801d438:	687b      	ldr	r3, [r7, #4]
 801d43a:	3304      	adds	r3, #4
 801d43c:	4618      	mov	r0, r3
 801d43e:	f005 fac9 	bl	80229d4 <ip4_route>
 801d442:	4601      	mov	r1, r0
 801d444:	687b      	ldr	r3, [r7, #4]
 801d446:	3304      	adds	r3, #4
 801d448:	461a      	mov	r2, r3
 801d44a:	4620      	mov	r0, r4
 801d44c:	f7ff f88c 	bl	801c568 <tcp_eff_send_mss_netif>
 801d450:	4603      	mov	r3, r0
 801d452:	461a      	mov	r2, r3
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d458:	687b      	ldr	r3, [r7, #4]
 801d45a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d45c:	009a      	lsls	r2, r3, #2
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d462:	005b      	lsls	r3, r3, #1
 801d464:	f241 111c 	movw	r1, #4380	@ 0x111c
 801d468:	428b      	cmp	r3, r1
 801d46a:	bf38      	it	cc
 801d46c:	460b      	movcc	r3, r1
 801d46e:	429a      	cmp	r2, r3
 801d470:	d204      	bcs.n	801d47c <tcp_process+0x210>
 801d472:	687b      	ldr	r3, [r7, #4]
 801d474:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d476:	009b      	lsls	r3, r3, #2
 801d478:	b29b      	uxth	r3, r3
 801d47a:	e00d      	b.n	801d498 <tcp_process+0x22c>
 801d47c:	687b      	ldr	r3, [r7, #4]
 801d47e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d480:	005b      	lsls	r3, r3, #1
 801d482:	f241 121c 	movw	r2, #4380	@ 0x111c
 801d486:	4293      	cmp	r3, r2
 801d488:	d904      	bls.n	801d494 <tcp_process+0x228>
 801d48a:	687b      	ldr	r3, [r7, #4]
 801d48c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d48e:	005b      	lsls	r3, r3, #1
 801d490:	b29b      	uxth	r3, r3
 801d492:	e001      	b.n	801d498 <tcp_process+0x22c>
 801d494:	f241 131c 	movw	r3, #4380	@ 0x111c
 801d498:	687a      	ldr	r2, [r7, #4]
 801d49a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	d106      	bne.n	801d4b6 <tcp_process+0x24a>
 801d4a8:	4b13      	ldr	r3, [pc, #76]	@ (801d4f8 <tcp_process+0x28c>)
 801d4aa:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801d4ae:	491c      	ldr	r1, [pc, #112]	@ (801d520 <tcp_process+0x2b4>)
 801d4b0:	4813      	ldr	r0, [pc, #76]	@ (801d500 <tcp_process+0x294>)
 801d4b2:	f008 f817 	bl	80254e4 <iprintf>
        --pcb->snd_queuelen;
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801d4bc:	3b01      	subs	r3, #1
 801d4be:	b29a      	uxth	r2, r3
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801d4c6:	687b      	ldr	r3, [r7, #4]
 801d4c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d4ca:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801d4cc:	69fb      	ldr	r3, [r7, #28]
 801d4ce:	2b00      	cmp	r3, #0
 801d4d0:	d12a      	bne.n	801d528 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801d4d2:	687b      	ldr	r3, [r7, #4]
 801d4d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d4d6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801d4d8:	69fb      	ldr	r3, [r7, #28]
 801d4da:	2b00      	cmp	r3, #0
 801d4dc:	d106      	bne.n	801d4ec <tcp_process+0x280>
 801d4de:	4b06      	ldr	r3, [pc, #24]	@ (801d4f8 <tcp_process+0x28c>)
 801d4e0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801d4e4:	490f      	ldr	r1, [pc, #60]	@ (801d524 <tcp_process+0x2b8>)
 801d4e6:	4806      	ldr	r0, [pc, #24]	@ (801d500 <tcp_process+0x294>)
 801d4e8:	f007 fffc 	bl	80254e4 <iprintf>
          pcb->unsent = rseg->next;
 801d4ec:	69fb      	ldr	r3, [r7, #28]
 801d4ee:	681a      	ldr	r2, [r3, #0]
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	66da      	str	r2, [r3, #108]	@ 0x6c
 801d4f4:	e01c      	b.n	801d530 <tcp_process+0x2c4>
 801d4f6:	bf00      	nop
 801d4f8:	0802b788 	.word	0x0802b788
 801d4fc:	0802b9c0 	.word	0x0802b9c0
 801d500:	0802b7d4 	.word	0x0802b7d4
 801d504:	2400bea8 	.word	0x2400bea8
 801d508:	2400bea0 	.word	0x2400bea0
 801d50c:	2400be9c 	.word	0x2400be9c
 801d510:	0802b9dc 	.word	0x0802b9dc
 801d514:	2400bea9 	.word	0x2400bea9
 801d518:	2400be64 	.word	0x2400be64
 801d51c:	2400be8c 	.word	0x2400be8c
 801d520:	0802b9fc 	.word	0x0802b9fc
 801d524:	0802ba14 	.word	0x0802ba14
        } else {
          pcb->unacked = rseg->next;
 801d528:	69fb      	ldr	r3, [r7, #28]
 801d52a:	681a      	ldr	r2, [r3, #0]
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 801d530:	69f8      	ldr	r0, [r7, #28]
 801d532:	f7fe fc54 	bl	801bdde <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801d536:	687b      	ldr	r3, [r7, #4]
 801d538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d53a:	2b00      	cmp	r3, #0
 801d53c:	d104      	bne.n	801d548 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801d53e:	687b      	ldr	r3, [r7, #4]
 801d540:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d544:	861a      	strh	r2, [r3, #48]	@ 0x30
 801d546:	e006      	b.n	801d556 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801d548:	687b      	ldr	r3, [r7, #4]
 801d54a:	2200      	movs	r2, #0
 801d54c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801d54e:	687b      	ldr	r3, [r7, #4]
 801d550:	2200      	movs	r2, #0
 801d552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	d00a      	beq.n	801d576 <tcp_process+0x30a>
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d566:	687a      	ldr	r2, [r7, #4]
 801d568:	6910      	ldr	r0, [r2, #16]
 801d56a:	2200      	movs	r2, #0
 801d56c:	6879      	ldr	r1, [r7, #4]
 801d56e:	4798      	blx	r3
 801d570:	4603      	mov	r3, r0
 801d572:	76bb      	strb	r3, [r7, #26]
 801d574:	e001      	b.n	801d57a <tcp_process+0x30e>
 801d576:	2300      	movs	r3, #0
 801d578:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801d57a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801d57e:	f113 0f0d 	cmn.w	r3, #13
 801d582:	d102      	bne.n	801d58a <tcp_process+0x31e>
          return ERR_ABRT;
 801d584:	f06f 030c 	mvn.w	r3, #12
 801d588:	e250      	b.n	801da2c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801d58a:	687b      	ldr	r3, [r7, #4]
 801d58c:	8b5b      	ldrh	r3, [r3, #26]
 801d58e:	f043 0302 	orr.w	r3, r3, #2
 801d592:	b29a      	uxth	r2, r3
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801d598:	e23a      	b.n	801da10 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801d59a:	4b98      	ldr	r3, [pc, #608]	@ (801d7fc <tcp_process+0x590>)
 801d59c:	781b      	ldrb	r3, [r3, #0]
 801d59e:	f003 0310 	and.w	r3, r3, #16
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	f000 8234 	beq.w	801da10 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d5a8:	4b95      	ldr	r3, [pc, #596]	@ (801d800 <tcp_process+0x594>)
 801d5aa:	6819      	ldr	r1, [r3, #0]
 801d5ac:	4b95      	ldr	r3, [pc, #596]	@ (801d804 <tcp_process+0x598>)
 801d5ae:	881b      	ldrh	r3, [r3, #0]
 801d5b0:	461a      	mov	r2, r3
 801d5b2:	4b95      	ldr	r3, [pc, #596]	@ (801d808 <tcp_process+0x59c>)
 801d5b4:	681b      	ldr	r3, [r3, #0]
 801d5b6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d5b8:	4b94      	ldr	r3, [pc, #592]	@ (801d80c <tcp_process+0x5a0>)
 801d5ba:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d5bc:	885b      	ldrh	r3, [r3, #2]
 801d5be:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d5c0:	4a92      	ldr	r2, [pc, #584]	@ (801d80c <tcp_process+0x5a0>)
 801d5c2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d5c4:	8812      	ldrh	r2, [r2, #0]
 801d5c6:	b292      	uxth	r2, r2
 801d5c8:	9202      	str	r2, [sp, #8]
 801d5ca:	9301      	str	r3, [sp, #4]
 801d5cc:	4b90      	ldr	r3, [pc, #576]	@ (801d810 <tcp_process+0x5a4>)
 801d5ce:	9300      	str	r3, [sp, #0]
 801d5d0:	4b90      	ldr	r3, [pc, #576]	@ (801d814 <tcp_process+0x5a8>)
 801d5d2:	4602      	mov	r2, r0
 801d5d4:	6878      	ldr	r0, [r7, #4]
 801d5d6:	f003 f8d7 	bl	8020788 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801d5e0:	2b05      	cmp	r3, #5
 801d5e2:	f200 8215 	bhi.w	801da10 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	2200      	movs	r2, #0
 801d5ea:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801d5ec:	6878      	ldr	r0, [r7, #4]
 801d5ee:	f002 fea3 	bl	8020338 <tcp_rexmit_rto>
      break;
 801d5f2:	e20d      	b.n	801da10 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801d5f4:	4b81      	ldr	r3, [pc, #516]	@ (801d7fc <tcp_process+0x590>)
 801d5f6:	781b      	ldrb	r3, [r3, #0]
 801d5f8:	f003 0310 	and.w	r3, r3, #16
 801d5fc:	2b00      	cmp	r3, #0
 801d5fe:	f000 80a1 	beq.w	801d744 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d602:	4b7f      	ldr	r3, [pc, #508]	@ (801d800 <tcp_process+0x594>)
 801d604:	681a      	ldr	r2, [r3, #0]
 801d606:	687b      	ldr	r3, [r7, #4]
 801d608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d60a:	1ad3      	subs	r3, r2, r3
 801d60c:	3b01      	subs	r3, #1
 801d60e:	2b00      	cmp	r3, #0
 801d610:	db7e      	blt.n	801d710 <tcp_process+0x4a4>
 801d612:	4b7b      	ldr	r3, [pc, #492]	@ (801d800 <tcp_process+0x594>)
 801d614:	681a      	ldr	r2, [r3, #0]
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d61a:	1ad3      	subs	r3, r2, r3
 801d61c:	2b00      	cmp	r3, #0
 801d61e:	dc77      	bgt.n	801d710 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	2204      	movs	r2, #4
 801d624:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801d626:	687b      	ldr	r3, [r7, #4]
 801d628:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d62a:	2b00      	cmp	r3, #0
 801d62c:	d102      	bne.n	801d634 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801d62e:	23fa      	movs	r3, #250	@ 0xfa
 801d630:	76bb      	strb	r3, [r7, #26]
 801d632:	e01d      	b.n	801d670 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d638:	699b      	ldr	r3, [r3, #24]
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	d106      	bne.n	801d64c <tcp_process+0x3e0>
 801d63e:	4b76      	ldr	r3, [pc, #472]	@ (801d818 <tcp_process+0x5ac>)
 801d640:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801d644:	4975      	ldr	r1, [pc, #468]	@ (801d81c <tcp_process+0x5b0>)
 801d646:	4876      	ldr	r0, [pc, #472]	@ (801d820 <tcp_process+0x5b4>)
 801d648:	f007 ff4c 	bl	80254e4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801d64c:	687b      	ldr	r3, [r7, #4]
 801d64e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d650:	699b      	ldr	r3, [r3, #24]
 801d652:	2b00      	cmp	r3, #0
 801d654:	d00a      	beq.n	801d66c <tcp_process+0x400>
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d65a:	699b      	ldr	r3, [r3, #24]
 801d65c:	687a      	ldr	r2, [r7, #4]
 801d65e:	6910      	ldr	r0, [r2, #16]
 801d660:	2200      	movs	r2, #0
 801d662:	6879      	ldr	r1, [r7, #4]
 801d664:	4798      	blx	r3
 801d666:	4603      	mov	r3, r0
 801d668:	76bb      	strb	r3, [r7, #26]
 801d66a:	e001      	b.n	801d670 <tcp_process+0x404>
 801d66c:	23f0      	movs	r3, #240	@ 0xf0
 801d66e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801d670:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801d674:	2b00      	cmp	r3, #0
 801d676:	d00a      	beq.n	801d68e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801d678:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801d67c:	f113 0f0d 	cmn.w	r3, #13
 801d680:	d002      	beq.n	801d688 <tcp_process+0x41c>
              tcp_abort(pcb);
 801d682:	6878      	ldr	r0, [r7, #4]
 801d684:	f7fd fde0 	bl	801b248 <tcp_abort>
            }
            return ERR_ABRT;
 801d688:	f06f 030c 	mvn.w	r3, #12
 801d68c:	e1ce      	b.n	801da2c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801d68e:	6878      	ldr	r0, [r7, #4]
 801d690:	f000 fae0 	bl	801dc54 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801d694:	4b63      	ldr	r3, [pc, #396]	@ (801d824 <tcp_process+0x5b8>)
 801d696:	881b      	ldrh	r3, [r3, #0]
 801d698:	2b00      	cmp	r3, #0
 801d69a:	d005      	beq.n	801d6a8 <tcp_process+0x43c>
            recv_acked--;
 801d69c:	4b61      	ldr	r3, [pc, #388]	@ (801d824 <tcp_process+0x5b8>)
 801d69e:	881b      	ldrh	r3, [r3, #0]
 801d6a0:	3b01      	subs	r3, #1
 801d6a2:	b29a      	uxth	r2, r3
 801d6a4:	4b5f      	ldr	r3, [pc, #380]	@ (801d824 <tcp_process+0x5b8>)
 801d6a6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d6a8:	687b      	ldr	r3, [r7, #4]
 801d6aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d6ac:	009a      	lsls	r2, r3, #2
 801d6ae:	687b      	ldr	r3, [r7, #4]
 801d6b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d6b2:	005b      	lsls	r3, r3, #1
 801d6b4:	f241 111c 	movw	r1, #4380	@ 0x111c
 801d6b8:	428b      	cmp	r3, r1
 801d6ba:	bf38      	it	cc
 801d6bc:	460b      	movcc	r3, r1
 801d6be:	429a      	cmp	r2, r3
 801d6c0:	d204      	bcs.n	801d6cc <tcp_process+0x460>
 801d6c2:	687b      	ldr	r3, [r7, #4]
 801d6c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d6c6:	009b      	lsls	r3, r3, #2
 801d6c8:	b29b      	uxth	r3, r3
 801d6ca:	e00d      	b.n	801d6e8 <tcp_process+0x47c>
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d6d0:	005b      	lsls	r3, r3, #1
 801d6d2:	f241 121c 	movw	r2, #4380	@ 0x111c
 801d6d6:	4293      	cmp	r3, r2
 801d6d8:	d904      	bls.n	801d6e4 <tcp_process+0x478>
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d6de:	005b      	lsls	r3, r3, #1
 801d6e0:	b29b      	uxth	r3, r3
 801d6e2:	e001      	b.n	801d6e8 <tcp_process+0x47c>
 801d6e4:	f241 131c 	movw	r3, #4380	@ 0x111c
 801d6e8:	687a      	ldr	r2, [r7, #4]
 801d6ea:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801d6ee:	4b4e      	ldr	r3, [pc, #312]	@ (801d828 <tcp_process+0x5bc>)
 801d6f0:	781b      	ldrb	r3, [r3, #0]
 801d6f2:	f003 0320 	and.w	r3, r3, #32
 801d6f6:	2b00      	cmp	r3, #0
 801d6f8:	d037      	beq.n	801d76a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801d6fa:	687b      	ldr	r3, [r7, #4]
 801d6fc:	8b5b      	ldrh	r3, [r3, #26]
 801d6fe:	f043 0302 	orr.w	r3, r3, #2
 801d702:	b29a      	uxth	r2, r3
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801d708:	687b      	ldr	r3, [r7, #4]
 801d70a:	2207      	movs	r2, #7
 801d70c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801d70e:	e02c      	b.n	801d76a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d710:	4b3b      	ldr	r3, [pc, #236]	@ (801d800 <tcp_process+0x594>)
 801d712:	6819      	ldr	r1, [r3, #0]
 801d714:	4b3b      	ldr	r3, [pc, #236]	@ (801d804 <tcp_process+0x598>)
 801d716:	881b      	ldrh	r3, [r3, #0]
 801d718:	461a      	mov	r2, r3
 801d71a:	4b3b      	ldr	r3, [pc, #236]	@ (801d808 <tcp_process+0x59c>)
 801d71c:	681b      	ldr	r3, [r3, #0]
 801d71e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d720:	4b3a      	ldr	r3, [pc, #232]	@ (801d80c <tcp_process+0x5a0>)
 801d722:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d724:	885b      	ldrh	r3, [r3, #2]
 801d726:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d728:	4a38      	ldr	r2, [pc, #224]	@ (801d80c <tcp_process+0x5a0>)
 801d72a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d72c:	8812      	ldrh	r2, [r2, #0]
 801d72e:	b292      	uxth	r2, r2
 801d730:	9202      	str	r2, [sp, #8]
 801d732:	9301      	str	r3, [sp, #4]
 801d734:	4b36      	ldr	r3, [pc, #216]	@ (801d810 <tcp_process+0x5a4>)
 801d736:	9300      	str	r3, [sp, #0]
 801d738:	4b36      	ldr	r3, [pc, #216]	@ (801d814 <tcp_process+0x5a8>)
 801d73a:	4602      	mov	r2, r0
 801d73c:	6878      	ldr	r0, [r7, #4]
 801d73e:	f003 f823 	bl	8020788 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801d742:	e167      	b.n	801da14 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801d744:	4b2d      	ldr	r3, [pc, #180]	@ (801d7fc <tcp_process+0x590>)
 801d746:	781b      	ldrb	r3, [r3, #0]
 801d748:	f003 0302 	and.w	r3, r3, #2
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	f000 8161 	beq.w	801da14 <tcp_process+0x7a8>
 801d752:	687b      	ldr	r3, [r7, #4]
 801d754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d756:	1e5a      	subs	r2, r3, #1
 801d758:	4b2b      	ldr	r3, [pc, #172]	@ (801d808 <tcp_process+0x59c>)
 801d75a:	681b      	ldr	r3, [r3, #0]
 801d75c:	429a      	cmp	r2, r3
 801d75e:	f040 8159 	bne.w	801da14 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801d762:	6878      	ldr	r0, [r7, #4]
 801d764:	f002 fe0a 	bl	802037c <tcp_rexmit>
      break;
 801d768:	e154      	b.n	801da14 <tcp_process+0x7a8>
 801d76a:	e153      	b.n	801da14 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801d76c:	6878      	ldr	r0, [r7, #4]
 801d76e:	f000 fa71 	bl	801dc54 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801d772:	4b2d      	ldr	r3, [pc, #180]	@ (801d828 <tcp_process+0x5bc>)
 801d774:	781b      	ldrb	r3, [r3, #0]
 801d776:	f003 0320 	and.w	r3, r3, #32
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	f000 814c 	beq.w	801da18 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801d780:	687b      	ldr	r3, [r7, #4]
 801d782:	8b5b      	ldrh	r3, [r3, #26]
 801d784:	f043 0302 	orr.w	r3, r3, #2
 801d788:	b29a      	uxth	r2, r3
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801d78e:	687b      	ldr	r3, [r7, #4]
 801d790:	2207      	movs	r2, #7
 801d792:	751a      	strb	r2, [r3, #20]
      }
      break;
 801d794:	e140      	b.n	801da18 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801d796:	6878      	ldr	r0, [r7, #4]
 801d798:	f000 fa5c 	bl	801dc54 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801d79c:	4b22      	ldr	r3, [pc, #136]	@ (801d828 <tcp_process+0x5bc>)
 801d79e:	781b      	ldrb	r3, [r3, #0]
 801d7a0:	f003 0320 	and.w	r3, r3, #32
 801d7a4:	2b00      	cmp	r3, #0
 801d7a6:	d071      	beq.n	801d88c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d7a8:	4b14      	ldr	r3, [pc, #80]	@ (801d7fc <tcp_process+0x590>)
 801d7aa:	781b      	ldrb	r3, [r3, #0]
 801d7ac:	f003 0310 	and.w	r3, r3, #16
 801d7b0:	2b00      	cmp	r3, #0
 801d7b2:	d060      	beq.n	801d876 <tcp_process+0x60a>
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d7b8:	4b11      	ldr	r3, [pc, #68]	@ (801d800 <tcp_process+0x594>)
 801d7ba:	681b      	ldr	r3, [r3, #0]
 801d7bc:	429a      	cmp	r2, r3
 801d7be:	d15a      	bne.n	801d876 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801d7c0:	687b      	ldr	r3, [r7, #4]
 801d7c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d7c4:	2b00      	cmp	r3, #0
 801d7c6:	d156      	bne.n	801d876 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	8b5b      	ldrh	r3, [r3, #26]
 801d7cc:	f043 0302 	orr.w	r3, r3, #2
 801d7d0:	b29a      	uxth	r2, r3
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801d7d6:	6878      	ldr	r0, [r7, #4]
 801d7d8:	f7fe fdbc 	bl	801c354 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801d7dc:	4b13      	ldr	r3, [pc, #76]	@ (801d82c <tcp_process+0x5c0>)
 801d7de:	681b      	ldr	r3, [r3, #0]
 801d7e0:	687a      	ldr	r2, [r7, #4]
 801d7e2:	429a      	cmp	r2, r3
 801d7e4:	d105      	bne.n	801d7f2 <tcp_process+0x586>
 801d7e6:	4b11      	ldr	r3, [pc, #68]	@ (801d82c <tcp_process+0x5c0>)
 801d7e8:	681b      	ldr	r3, [r3, #0]
 801d7ea:	68db      	ldr	r3, [r3, #12]
 801d7ec:	4a0f      	ldr	r2, [pc, #60]	@ (801d82c <tcp_process+0x5c0>)
 801d7ee:	6013      	str	r3, [r2, #0]
 801d7f0:	e02e      	b.n	801d850 <tcp_process+0x5e4>
 801d7f2:	4b0e      	ldr	r3, [pc, #56]	@ (801d82c <tcp_process+0x5c0>)
 801d7f4:	681b      	ldr	r3, [r3, #0]
 801d7f6:	617b      	str	r3, [r7, #20]
 801d7f8:	e027      	b.n	801d84a <tcp_process+0x5de>
 801d7fa:	bf00      	nop
 801d7fc:	2400bea8 	.word	0x2400bea8
 801d800:	2400bea0 	.word	0x2400bea0
 801d804:	2400bea6 	.word	0x2400bea6
 801d808:	2400be9c 	.word	0x2400be9c
 801d80c:	2400be8c 	.word	0x2400be8c
 801d810:	24008d74 	.word	0x24008d74
 801d814:	24008d78 	.word	0x24008d78
 801d818:	0802b788 	.word	0x0802b788
 801d81c:	0802ba28 	.word	0x0802ba28
 801d820:	0802b7d4 	.word	0x0802b7d4
 801d824:	2400bea4 	.word	0x2400bea4
 801d828:	2400bea9 	.word	0x2400bea9
 801d82c:	2400be70 	.word	0x2400be70
 801d830:	697b      	ldr	r3, [r7, #20]
 801d832:	68db      	ldr	r3, [r3, #12]
 801d834:	687a      	ldr	r2, [r7, #4]
 801d836:	429a      	cmp	r2, r3
 801d838:	d104      	bne.n	801d844 <tcp_process+0x5d8>
 801d83a:	687b      	ldr	r3, [r7, #4]
 801d83c:	68da      	ldr	r2, [r3, #12]
 801d83e:	697b      	ldr	r3, [r7, #20]
 801d840:	60da      	str	r2, [r3, #12]
 801d842:	e005      	b.n	801d850 <tcp_process+0x5e4>
 801d844:	697b      	ldr	r3, [r7, #20]
 801d846:	68db      	ldr	r3, [r3, #12]
 801d848:	617b      	str	r3, [r7, #20]
 801d84a:	697b      	ldr	r3, [r7, #20]
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	d1ef      	bne.n	801d830 <tcp_process+0x5c4>
 801d850:	687b      	ldr	r3, [r7, #4]
 801d852:	2200      	movs	r2, #0
 801d854:	60da      	str	r2, [r3, #12]
 801d856:	4b77      	ldr	r3, [pc, #476]	@ (801da34 <tcp_process+0x7c8>)
 801d858:	2201      	movs	r2, #1
 801d85a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	220a      	movs	r2, #10
 801d860:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801d862:	4b75      	ldr	r3, [pc, #468]	@ (801da38 <tcp_process+0x7cc>)
 801d864:	681a      	ldr	r2, [r3, #0]
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	60da      	str	r2, [r3, #12]
 801d86a:	4a73      	ldr	r2, [pc, #460]	@ (801da38 <tcp_process+0x7cc>)
 801d86c:	687b      	ldr	r3, [r7, #4]
 801d86e:	6013      	str	r3, [r2, #0]
 801d870:	f003 f94c 	bl	8020b0c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801d874:	e0d2      	b.n	801da1c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	8b5b      	ldrh	r3, [r3, #26]
 801d87a:	f043 0302 	orr.w	r3, r3, #2
 801d87e:	b29a      	uxth	r2, r3
 801d880:	687b      	ldr	r3, [r7, #4]
 801d882:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801d884:	687b      	ldr	r3, [r7, #4]
 801d886:	2208      	movs	r2, #8
 801d888:	751a      	strb	r2, [r3, #20]
      break;
 801d88a:	e0c7      	b.n	801da1c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d88c:	4b6b      	ldr	r3, [pc, #428]	@ (801da3c <tcp_process+0x7d0>)
 801d88e:	781b      	ldrb	r3, [r3, #0]
 801d890:	f003 0310 	and.w	r3, r3, #16
 801d894:	2b00      	cmp	r3, #0
 801d896:	f000 80c1 	beq.w	801da1c <tcp_process+0x7b0>
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d89e:	4b68      	ldr	r3, [pc, #416]	@ (801da40 <tcp_process+0x7d4>)
 801d8a0:	681b      	ldr	r3, [r3, #0]
 801d8a2:	429a      	cmp	r2, r3
 801d8a4:	f040 80ba 	bne.w	801da1c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	f040 80b5 	bne.w	801da1c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801d8b2:	687b      	ldr	r3, [r7, #4]
 801d8b4:	2206      	movs	r2, #6
 801d8b6:	751a      	strb	r2, [r3, #20]
      break;
 801d8b8:	e0b0      	b.n	801da1c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801d8ba:	6878      	ldr	r0, [r7, #4]
 801d8bc:	f000 f9ca 	bl	801dc54 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801d8c0:	4b60      	ldr	r3, [pc, #384]	@ (801da44 <tcp_process+0x7d8>)
 801d8c2:	781b      	ldrb	r3, [r3, #0]
 801d8c4:	f003 0320 	and.w	r3, r3, #32
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	f000 80a9 	beq.w	801da20 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801d8ce:	687b      	ldr	r3, [r7, #4]
 801d8d0:	8b5b      	ldrh	r3, [r3, #26]
 801d8d2:	f043 0302 	orr.w	r3, r3, #2
 801d8d6:	b29a      	uxth	r2, r3
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801d8dc:	6878      	ldr	r0, [r7, #4]
 801d8de:	f7fe fd39 	bl	801c354 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801d8e2:	4b59      	ldr	r3, [pc, #356]	@ (801da48 <tcp_process+0x7dc>)
 801d8e4:	681b      	ldr	r3, [r3, #0]
 801d8e6:	687a      	ldr	r2, [r7, #4]
 801d8e8:	429a      	cmp	r2, r3
 801d8ea:	d105      	bne.n	801d8f8 <tcp_process+0x68c>
 801d8ec:	4b56      	ldr	r3, [pc, #344]	@ (801da48 <tcp_process+0x7dc>)
 801d8ee:	681b      	ldr	r3, [r3, #0]
 801d8f0:	68db      	ldr	r3, [r3, #12]
 801d8f2:	4a55      	ldr	r2, [pc, #340]	@ (801da48 <tcp_process+0x7dc>)
 801d8f4:	6013      	str	r3, [r2, #0]
 801d8f6:	e013      	b.n	801d920 <tcp_process+0x6b4>
 801d8f8:	4b53      	ldr	r3, [pc, #332]	@ (801da48 <tcp_process+0x7dc>)
 801d8fa:	681b      	ldr	r3, [r3, #0]
 801d8fc:	613b      	str	r3, [r7, #16]
 801d8fe:	e00c      	b.n	801d91a <tcp_process+0x6ae>
 801d900:	693b      	ldr	r3, [r7, #16]
 801d902:	68db      	ldr	r3, [r3, #12]
 801d904:	687a      	ldr	r2, [r7, #4]
 801d906:	429a      	cmp	r2, r3
 801d908:	d104      	bne.n	801d914 <tcp_process+0x6a8>
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	68da      	ldr	r2, [r3, #12]
 801d90e:	693b      	ldr	r3, [r7, #16]
 801d910:	60da      	str	r2, [r3, #12]
 801d912:	e005      	b.n	801d920 <tcp_process+0x6b4>
 801d914:	693b      	ldr	r3, [r7, #16]
 801d916:	68db      	ldr	r3, [r3, #12]
 801d918:	613b      	str	r3, [r7, #16]
 801d91a:	693b      	ldr	r3, [r7, #16]
 801d91c:	2b00      	cmp	r3, #0
 801d91e:	d1ef      	bne.n	801d900 <tcp_process+0x694>
 801d920:	687b      	ldr	r3, [r7, #4]
 801d922:	2200      	movs	r2, #0
 801d924:	60da      	str	r2, [r3, #12]
 801d926:	4b43      	ldr	r3, [pc, #268]	@ (801da34 <tcp_process+0x7c8>)
 801d928:	2201      	movs	r2, #1
 801d92a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	220a      	movs	r2, #10
 801d930:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d932:	4b41      	ldr	r3, [pc, #260]	@ (801da38 <tcp_process+0x7cc>)
 801d934:	681a      	ldr	r2, [r3, #0]
 801d936:	687b      	ldr	r3, [r7, #4]
 801d938:	60da      	str	r2, [r3, #12]
 801d93a:	4a3f      	ldr	r2, [pc, #252]	@ (801da38 <tcp_process+0x7cc>)
 801d93c:	687b      	ldr	r3, [r7, #4]
 801d93e:	6013      	str	r3, [r2, #0]
 801d940:	f003 f8e4 	bl	8020b0c <tcp_timer_needed>
      }
      break;
 801d944:	e06c      	b.n	801da20 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801d946:	6878      	ldr	r0, [r7, #4]
 801d948:	f000 f984 	bl	801dc54 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801d94c:	4b3b      	ldr	r3, [pc, #236]	@ (801da3c <tcp_process+0x7d0>)
 801d94e:	781b      	ldrb	r3, [r3, #0]
 801d950:	f003 0310 	and.w	r3, r3, #16
 801d954:	2b00      	cmp	r3, #0
 801d956:	d065      	beq.n	801da24 <tcp_process+0x7b8>
 801d958:	687b      	ldr	r3, [r7, #4]
 801d95a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d95c:	4b38      	ldr	r3, [pc, #224]	@ (801da40 <tcp_process+0x7d4>)
 801d95e:	681b      	ldr	r3, [r3, #0]
 801d960:	429a      	cmp	r2, r3
 801d962:	d15f      	bne.n	801da24 <tcp_process+0x7b8>
 801d964:	687b      	ldr	r3, [r7, #4]
 801d966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d968:	2b00      	cmp	r3, #0
 801d96a:	d15b      	bne.n	801da24 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801d96c:	6878      	ldr	r0, [r7, #4]
 801d96e:	f7fe fcf1 	bl	801c354 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801d972:	4b35      	ldr	r3, [pc, #212]	@ (801da48 <tcp_process+0x7dc>)
 801d974:	681b      	ldr	r3, [r3, #0]
 801d976:	687a      	ldr	r2, [r7, #4]
 801d978:	429a      	cmp	r2, r3
 801d97a:	d105      	bne.n	801d988 <tcp_process+0x71c>
 801d97c:	4b32      	ldr	r3, [pc, #200]	@ (801da48 <tcp_process+0x7dc>)
 801d97e:	681b      	ldr	r3, [r3, #0]
 801d980:	68db      	ldr	r3, [r3, #12]
 801d982:	4a31      	ldr	r2, [pc, #196]	@ (801da48 <tcp_process+0x7dc>)
 801d984:	6013      	str	r3, [r2, #0]
 801d986:	e013      	b.n	801d9b0 <tcp_process+0x744>
 801d988:	4b2f      	ldr	r3, [pc, #188]	@ (801da48 <tcp_process+0x7dc>)
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	60fb      	str	r3, [r7, #12]
 801d98e:	e00c      	b.n	801d9aa <tcp_process+0x73e>
 801d990:	68fb      	ldr	r3, [r7, #12]
 801d992:	68db      	ldr	r3, [r3, #12]
 801d994:	687a      	ldr	r2, [r7, #4]
 801d996:	429a      	cmp	r2, r3
 801d998:	d104      	bne.n	801d9a4 <tcp_process+0x738>
 801d99a:	687b      	ldr	r3, [r7, #4]
 801d99c:	68da      	ldr	r2, [r3, #12]
 801d99e:	68fb      	ldr	r3, [r7, #12]
 801d9a0:	60da      	str	r2, [r3, #12]
 801d9a2:	e005      	b.n	801d9b0 <tcp_process+0x744>
 801d9a4:	68fb      	ldr	r3, [r7, #12]
 801d9a6:	68db      	ldr	r3, [r3, #12]
 801d9a8:	60fb      	str	r3, [r7, #12]
 801d9aa:	68fb      	ldr	r3, [r7, #12]
 801d9ac:	2b00      	cmp	r3, #0
 801d9ae:	d1ef      	bne.n	801d990 <tcp_process+0x724>
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	2200      	movs	r2, #0
 801d9b4:	60da      	str	r2, [r3, #12]
 801d9b6:	4b1f      	ldr	r3, [pc, #124]	@ (801da34 <tcp_process+0x7c8>)
 801d9b8:	2201      	movs	r2, #1
 801d9ba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801d9bc:	687b      	ldr	r3, [r7, #4]
 801d9be:	220a      	movs	r2, #10
 801d9c0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d9c2:	4b1d      	ldr	r3, [pc, #116]	@ (801da38 <tcp_process+0x7cc>)
 801d9c4:	681a      	ldr	r2, [r3, #0]
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	60da      	str	r2, [r3, #12]
 801d9ca:	4a1b      	ldr	r2, [pc, #108]	@ (801da38 <tcp_process+0x7cc>)
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	6013      	str	r3, [r2, #0]
 801d9d0:	f003 f89c 	bl	8020b0c <tcp_timer_needed>
      }
      break;
 801d9d4:	e026      	b.n	801da24 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801d9d6:	6878      	ldr	r0, [r7, #4]
 801d9d8:	f000 f93c 	bl	801dc54 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801d9dc:	4b17      	ldr	r3, [pc, #92]	@ (801da3c <tcp_process+0x7d0>)
 801d9de:	781b      	ldrb	r3, [r3, #0]
 801d9e0:	f003 0310 	and.w	r3, r3, #16
 801d9e4:	2b00      	cmp	r3, #0
 801d9e6:	d01f      	beq.n	801da28 <tcp_process+0x7bc>
 801d9e8:	687b      	ldr	r3, [r7, #4]
 801d9ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d9ec:	4b14      	ldr	r3, [pc, #80]	@ (801da40 <tcp_process+0x7d4>)
 801d9ee:	681b      	ldr	r3, [r3, #0]
 801d9f0:	429a      	cmp	r2, r3
 801d9f2:	d119      	bne.n	801da28 <tcp_process+0x7bc>
 801d9f4:	687b      	ldr	r3, [r7, #4]
 801d9f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d9f8:	2b00      	cmp	r3, #0
 801d9fa:	d115      	bne.n	801da28 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801d9fc:	4b11      	ldr	r3, [pc, #68]	@ (801da44 <tcp_process+0x7d8>)
 801d9fe:	781b      	ldrb	r3, [r3, #0]
 801da00:	f043 0310 	orr.w	r3, r3, #16
 801da04:	b2da      	uxtb	r2, r3
 801da06:	4b0f      	ldr	r3, [pc, #60]	@ (801da44 <tcp_process+0x7d8>)
 801da08:	701a      	strb	r2, [r3, #0]
      }
      break;
 801da0a:	e00d      	b.n	801da28 <tcp_process+0x7bc>
    default:
      break;
 801da0c:	bf00      	nop
 801da0e:	e00c      	b.n	801da2a <tcp_process+0x7be>
      break;
 801da10:	bf00      	nop
 801da12:	e00a      	b.n	801da2a <tcp_process+0x7be>
      break;
 801da14:	bf00      	nop
 801da16:	e008      	b.n	801da2a <tcp_process+0x7be>
      break;
 801da18:	bf00      	nop
 801da1a:	e006      	b.n	801da2a <tcp_process+0x7be>
      break;
 801da1c:	bf00      	nop
 801da1e:	e004      	b.n	801da2a <tcp_process+0x7be>
      break;
 801da20:	bf00      	nop
 801da22:	e002      	b.n	801da2a <tcp_process+0x7be>
      break;
 801da24:	bf00      	nop
 801da26:	e000      	b.n	801da2a <tcp_process+0x7be>
      break;
 801da28:	bf00      	nop
  }
  return ERR_OK;
 801da2a:	2300      	movs	r3, #0
}
 801da2c:	4618      	mov	r0, r3
 801da2e:	3724      	adds	r7, #36	@ 0x24
 801da30:	46bd      	mov	sp, r7
 801da32:	bd90      	pop	{r4, r7, pc}
 801da34:	2400be78 	.word	0x2400be78
 801da38:	2400be74 	.word	0x2400be74
 801da3c:	2400bea8 	.word	0x2400bea8
 801da40:	2400bea0 	.word	0x2400bea0
 801da44:	2400bea9 	.word	0x2400bea9
 801da48:	2400be70 	.word	0x2400be70

0801da4c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801da4c:	b590      	push	{r4, r7, lr}
 801da4e:	b085      	sub	sp, #20
 801da50:	af00      	add	r7, sp, #0
 801da52:	6078      	str	r0, [r7, #4]
 801da54:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	2b00      	cmp	r3, #0
 801da5a:	d106      	bne.n	801da6a <tcp_oos_insert_segment+0x1e>
 801da5c:	4b3b      	ldr	r3, [pc, #236]	@ (801db4c <tcp_oos_insert_segment+0x100>)
 801da5e:	f240 421f 	movw	r2, #1055	@ 0x41f
 801da62:	493b      	ldr	r1, [pc, #236]	@ (801db50 <tcp_oos_insert_segment+0x104>)
 801da64:	483b      	ldr	r0, [pc, #236]	@ (801db54 <tcp_oos_insert_segment+0x108>)
 801da66:	f007 fd3d 	bl	80254e4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	68db      	ldr	r3, [r3, #12]
 801da6e:	899b      	ldrh	r3, [r3, #12]
 801da70:	b29b      	uxth	r3, r3
 801da72:	4618      	mov	r0, r3
 801da74:	f7fb f90c 	bl	8018c90 <lwip_htons>
 801da78:	4603      	mov	r3, r0
 801da7a:	b2db      	uxtb	r3, r3
 801da7c:	f003 0301 	and.w	r3, r3, #1
 801da80:	2b00      	cmp	r3, #0
 801da82:	d028      	beq.n	801dad6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801da84:	6838      	ldr	r0, [r7, #0]
 801da86:	f7fe f995 	bl	801bdb4 <tcp_segs_free>
    next = NULL;
 801da8a:	2300      	movs	r3, #0
 801da8c:	603b      	str	r3, [r7, #0]
 801da8e:	e056      	b.n	801db3e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801da90:	683b      	ldr	r3, [r7, #0]
 801da92:	68db      	ldr	r3, [r3, #12]
 801da94:	899b      	ldrh	r3, [r3, #12]
 801da96:	b29b      	uxth	r3, r3
 801da98:	4618      	mov	r0, r3
 801da9a:	f7fb f8f9 	bl	8018c90 <lwip_htons>
 801da9e:	4603      	mov	r3, r0
 801daa0:	b2db      	uxtb	r3, r3
 801daa2:	f003 0301 	and.w	r3, r3, #1
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d00d      	beq.n	801dac6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801daaa:	687b      	ldr	r3, [r7, #4]
 801daac:	68db      	ldr	r3, [r3, #12]
 801daae:	899b      	ldrh	r3, [r3, #12]
 801dab0:	b29c      	uxth	r4, r3
 801dab2:	2001      	movs	r0, #1
 801dab4:	f7fb f8ec 	bl	8018c90 <lwip_htons>
 801dab8:	4603      	mov	r3, r0
 801daba:	461a      	mov	r2, r3
 801dabc:	687b      	ldr	r3, [r7, #4]
 801dabe:	68db      	ldr	r3, [r3, #12]
 801dac0:	4322      	orrs	r2, r4
 801dac2:	b292      	uxth	r2, r2
 801dac4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801dac6:	683b      	ldr	r3, [r7, #0]
 801dac8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801daca:	683b      	ldr	r3, [r7, #0]
 801dacc:	681b      	ldr	r3, [r3, #0]
 801dace:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801dad0:	68f8      	ldr	r0, [r7, #12]
 801dad2:	f7fe f984 	bl	801bdde <tcp_seg_free>
    while (next &&
 801dad6:	683b      	ldr	r3, [r7, #0]
 801dad8:	2b00      	cmp	r3, #0
 801dada:	d00e      	beq.n	801dafa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801dadc:	687b      	ldr	r3, [r7, #4]
 801dade:	891b      	ldrh	r3, [r3, #8]
 801dae0:	461a      	mov	r2, r3
 801dae2:	4b1d      	ldr	r3, [pc, #116]	@ (801db58 <tcp_oos_insert_segment+0x10c>)
 801dae4:	681b      	ldr	r3, [r3, #0]
 801dae6:	441a      	add	r2, r3
 801dae8:	683b      	ldr	r3, [r7, #0]
 801daea:	68db      	ldr	r3, [r3, #12]
 801daec:	685b      	ldr	r3, [r3, #4]
 801daee:	6839      	ldr	r1, [r7, #0]
 801daf0:	8909      	ldrh	r1, [r1, #8]
 801daf2:	440b      	add	r3, r1
 801daf4:	1ad3      	subs	r3, r2, r3
    while (next &&
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	daca      	bge.n	801da90 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801dafa:	683b      	ldr	r3, [r7, #0]
 801dafc:	2b00      	cmp	r3, #0
 801dafe:	d01e      	beq.n	801db3e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801db00:	687b      	ldr	r3, [r7, #4]
 801db02:	891b      	ldrh	r3, [r3, #8]
 801db04:	461a      	mov	r2, r3
 801db06:	4b14      	ldr	r3, [pc, #80]	@ (801db58 <tcp_oos_insert_segment+0x10c>)
 801db08:	681b      	ldr	r3, [r3, #0]
 801db0a:	441a      	add	r2, r3
 801db0c:	683b      	ldr	r3, [r7, #0]
 801db0e:	68db      	ldr	r3, [r3, #12]
 801db10:	685b      	ldr	r3, [r3, #4]
 801db12:	1ad3      	subs	r3, r2, r3
    if (next &&
 801db14:	2b00      	cmp	r3, #0
 801db16:	dd12      	ble.n	801db3e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801db18:	683b      	ldr	r3, [r7, #0]
 801db1a:	68db      	ldr	r3, [r3, #12]
 801db1c:	685b      	ldr	r3, [r3, #4]
 801db1e:	b29a      	uxth	r2, r3
 801db20:	4b0d      	ldr	r3, [pc, #52]	@ (801db58 <tcp_oos_insert_segment+0x10c>)
 801db22:	681b      	ldr	r3, [r3, #0]
 801db24:	b29b      	uxth	r3, r3
 801db26:	1ad3      	subs	r3, r2, r3
 801db28:	b29a      	uxth	r2, r3
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801db2e:	687b      	ldr	r3, [r7, #4]
 801db30:	685a      	ldr	r2, [r3, #4]
 801db32:	687b      	ldr	r3, [r7, #4]
 801db34:	891b      	ldrh	r3, [r3, #8]
 801db36:	4619      	mov	r1, r3
 801db38:	4610      	mov	r0, r2
 801db3a:	f7fc fbcd 	bl	801a2d8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801db3e:	687b      	ldr	r3, [r7, #4]
 801db40:	683a      	ldr	r2, [r7, #0]
 801db42:	601a      	str	r2, [r3, #0]
}
 801db44:	bf00      	nop
 801db46:	3714      	adds	r7, #20
 801db48:	46bd      	mov	sp, r7
 801db4a:	bd90      	pop	{r4, r7, pc}
 801db4c:	0802b788 	.word	0x0802b788
 801db50:	0802ba48 	.word	0x0802ba48
 801db54:	0802b7d4 	.word	0x0802b7d4
 801db58:	2400be9c 	.word	0x2400be9c

0801db5c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801db5c:	b5b0      	push	{r4, r5, r7, lr}
 801db5e:	b086      	sub	sp, #24
 801db60:	af00      	add	r7, sp, #0
 801db62:	60f8      	str	r0, [r7, #12]
 801db64:	60b9      	str	r1, [r7, #8]
 801db66:	607a      	str	r2, [r7, #4]
 801db68:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801db6a:	e03e      	b.n	801dbea <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801db6c:	68bb      	ldr	r3, [r7, #8]
 801db6e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801db70:	68bb      	ldr	r3, [r7, #8]
 801db72:	681b      	ldr	r3, [r3, #0]
 801db74:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801db76:	697b      	ldr	r3, [r7, #20]
 801db78:	685b      	ldr	r3, [r3, #4]
 801db7a:	4618      	mov	r0, r3
 801db7c:	f7fc fdf2 	bl	801a764 <pbuf_clen>
 801db80:	4603      	mov	r3, r0
 801db82:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801db84:	68fb      	ldr	r3, [r7, #12]
 801db86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801db8a:	8a7a      	ldrh	r2, [r7, #18]
 801db8c:	429a      	cmp	r2, r3
 801db8e:	d906      	bls.n	801db9e <tcp_free_acked_segments+0x42>
 801db90:	4b2a      	ldr	r3, [pc, #168]	@ (801dc3c <tcp_free_acked_segments+0xe0>)
 801db92:	f240 4257 	movw	r2, #1111	@ 0x457
 801db96:	492a      	ldr	r1, [pc, #168]	@ (801dc40 <tcp_free_acked_segments+0xe4>)
 801db98:	482a      	ldr	r0, [pc, #168]	@ (801dc44 <tcp_free_acked_segments+0xe8>)
 801db9a:	f007 fca3 	bl	80254e4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801db9e:	68fb      	ldr	r3, [r7, #12]
 801dba0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 801dba4:	8a7b      	ldrh	r3, [r7, #18]
 801dba6:	1ad3      	subs	r3, r2, r3
 801dba8:	b29a      	uxth	r2, r3
 801dbaa:	68fb      	ldr	r3, [r7, #12]
 801dbac:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801dbb0:	697b      	ldr	r3, [r7, #20]
 801dbb2:	891a      	ldrh	r2, [r3, #8]
 801dbb4:	4b24      	ldr	r3, [pc, #144]	@ (801dc48 <tcp_free_acked_segments+0xec>)
 801dbb6:	881b      	ldrh	r3, [r3, #0]
 801dbb8:	4413      	add	r3, r2
 801dbba:	b29a      	uxth	r2, r3
 801dbbc:	4b22      	ldr	r3, [pc, #136]	@ (801dc48 <tcp_free_acked_segments+0xec>)
 801dbbe:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801dbc0:	6978      	ldr	r0, [r7, #20]
 801dbc2:	f7fe f90c 	bl	801bdde <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801dbc6:	68fb      	ldr	r3, [r7, #12]
 801dbc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801dbcc:	2b00      	cmp	r3, #0
 801dbce:	d00c      	beq.n	801dbea <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801dbd0:	68bb      	ldr	r3, [r7, #8]
 801dbd2:	2b00      	cmp	r3, #0
 801dbd4:	d109      	bne.n	801dbea <tcp_free_acked_segments+0x8e>
 801dbd6:	683b      	ldr	r3, [r7, #0]
 801dbd8:	2b00      	cmp	r3, #0
 801dbda:	d106      	bne.n	801dbea <tcp_free_acked_segments+0x8e>
 801dbdc:	4b17      	ldr	r3, [pc, #92]	@ (801dc3c <tcp_free_acked_segments+0xe0>)
 801dbde:	f240 4261 	movw	r2, #1121	@ 0x461
 801dbe2:	491a      	ldr	r1, [pc, #104]	@ (801dc4c <tcp_free_acked_segments+0xf0>)
 801dbe4:	4817      	ldr	r0, [pc, #92]	@ (801dc44 <tcp_free_acked_segments+0xe8>)
 801dbe6:	f007 fc7d 	bl	80254e4 <iprintf>
  while (seg_list != NULL &&
 801dbea:	68bb      	ldr	r3, [r7, #8]
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	d020      	beq.n	801dc32 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801dbf0:	68bb      	ldr	r3, [r7, #8]
 801dbf2:	68db      	ldr	r3, [r3, #12]
 801dbf4:	685b      	ldr	r3, [r3, #4]
 801dbf6:	4618      	mov	r0, r3
 801dbf8:	f7fb f85f 	bl	8018cba <lwip_htonl>
 801dbfc:	4604      	mov	r4, r0
 801dbfe:	68bb      	ldr	r3, [r7, #8]
 801dc00:	891b      	ldrh	r3, [r3, #8]
 801dc02:	461d      	mov	r5, r3
 801dc04:	68bb      	ldr	r3, [r7, #8]
 801dc06:	68db      	ldr	r3, [r3, #12]
 801dc08:	899b      	ldrh	r3, [r3, #12]
 801dc0a:	b29b      	uxth	r3, r3
 801dc0c:	4618      	mov	r0, r3
 801dc0e:	f7fb f83f 	bl	8018c90 <lwip_htons>
 801dc12:	4603      	mov	r3, r0
 801dc14:	b2db      	uxtb	r3, r3
 801dc16:	f003 0303 	and.w	r3, r3, #3
 801dc1a:	2b00      	cmp	r3, #0
 801dc1c:	d001      	beq.n	801dc22 <tcp_free_acked_segments+0xc6>
 801dc1e:	2301      	movs	r3, #1
 801dc20:	e000      	b.n	801dc24 <tcp_free_acked_segments+0xc8>
 801dc22:	2300      	movs	r3, #0
 801dc24:	442b      	add	r3, r5
 801dc26:	18e2      	adds	r2, r4, r3
 801dc28:	4b09      	ldr	r3, [pc, #36]	@ (801dc50 <tcp_free_acked_segments+0xf4>)
 801dc2a:	681b      	ldr	r3, [r3, #0]
 801dc2c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801dc2e:	2b00      	cmp	r3, #0
 801dc30:	dd9c      	ble.n	801db6c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801dc32:	68bb      	ldr	r3, [r7, #8]
}
 801dc34:	4618      	mov	r0, r3
 801dc36:	3718      	adds	r7, #24
 801dc38:	46bd      	mov	sp, r7
 801dc3a:	bdb0      	pop	{r4, r5, r7, pc}
 801dc3c:	0802b788 	.word	0x0802b788
 801dc40:	0802ba70 	.word	0x0802ba70
 801dc44:	0802b7d4 	.word	0x0802b7d4
 801dc48:	2400bea4 	.word	0x2400bea4
 801dc4c:	0802ba98 	.word	0x0802ba98
 801dc50:	2400bea0 	.word	0x2400bea0

0801dc54 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801dc54:	b5b0      	push	{r4, r5, r7, lr}
 801dc56:	b094      	sub	sp, #80	@ 0x50
 801dc58:	af00      	add	r7, sp, #0
 801dc5a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801dc5c:	2300      	movs	r3, #0
 801dc5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	2b00      	cmp	r3, #0
 801dc64:	d106      	bne.n	801dc74 <tcp_receive+0x20>
 801dc66:	4b91      	ldr	r3, [pc, #580]	@ (801deac <tcp_receive+0x258>)
 801dc68:	f240 427b 	movw	r2, #1147	@ 0x47b
 801dc6c:	4990      	ldr	r1, [pc, #576]	@ (801deb0 <tcp_receive+0x25c>)
 801dc6e:	4891      	ldr	r0, [pc, #580]	@ (801deb4 <tcp_receive+0x260>)
 801dc70:	f007 fc38 	bl	80254e4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801dc74:	687b      	ldr	r3, [r7, #4]
 801dc76:	7d1b      	ldrb	r3, [r3, #20]
 801dc78:	2b03      	cmp	r3, #3
 801dc7a:	d806      	bhi.n	801dc8a <tcp_receive+0x36>
 801dc7c:	4b8b      	ldr	r3, [pc, #556]	@ (801deac <tcp_receive+0x258>)
 801dc7e:	f240 427c 	movw	r2, #1148	@ 0x47c
 801dc82:	498d      	ldr	r1, [pc, #564]	@ (801deb8 <tcp_receive+0x264>)
 801dc84:	488b      	ldr	r0, [pc, #556]	@ (801deb4 <tcp_receive+0x260>)
 801dc86:	f007 fc2d 	bl	80254e4 <iprintf>

  if (flags & TCP_ACK) {
 801dc8a:	4b8c      	ldr	r3, [pc, #560]	@ (801debc <tcp_receive+0x268>)
 801dc8c:	781b      	ldrb	r3, [r3, #0]
 801dc8e:	f003 0310 	and.w	r3, r3, #16
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	f000 8264 	beq.w	801e160 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801dc98:	687b      	ldr	r3, [r7, #4]
 801dc9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801dc9e:	461a      	mov	r2, r3
 801dca0:	687b      	ldr	r3, [r7, #4]
 801dca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dca4:	4413      	add	r3, r2
 801dca6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801dca8:	687b      	ldr	r3, [r7, #4]
 801dcaa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801dcac:	4b84      	ldr	r3, [pc, #528]	@ (801dec0 <tcp_receive+0x26c>)
 801dcae:	681b      	ldr	r3, [r3, #0]
 801dcb0:	1ad3      	subs	r3, r2, r3
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	db1b      	blt.n	801dcee <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801dcba:	4b81      	ldr	r3, [pc, #516]	@ (801dec0 <tcp_receive+0x26c>)
 801dcbc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801dcbe:	429a      	cmp	r2, r3
 801dcc0:	d106      	bne.n	801dcd0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801dcc6:	4b7f      	ldr	r3, [pc, #508]	@ (801dec4 <tcp_receive+0x270>)
 801dcc8:	681b      	ldr	r3, [r3, #0]
 801dcca:	1ad3      	subs	r3, r2, r3
 801dccc:	2b00      	cmp	r3, #0
 801dcce:	db0e      	blt.n	801dcee <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801dcd4:	4b7b      	ldr	r3, [pc, #492]	@ (801dec4 <tcp_receive+0x270>)
 801dcd6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801dcd8:	429a      	cmp	r2, r3
 801dcda:	d125      	bne.n	801dd28 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801dcdc:	4b7a      	ldr	r3, [pc, #488]	@ (801dec8 <tcp_receive+0x274>)
 801dcde:	681b      	ldr	r3, [r3, #0]
 801dce0:	89db      	ldrh	r3, [r3, #14]
 801dce2:	b29a      	uxth	r2, r3
 801dce4:	687b      	ldr	r3, [r7, #4]
 801dce6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801dcea:	429a      	cmp	r2, r3
 801dcec:	d91c      	bls.n	801dd28 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801dcee:	4b76      	ldr	r3, [pc, #472]	@ (801dec8 <tcp_receive+0x274>)
 801dcf0:	681b      	ldr	r3, [r3, #0]
 801dcf2:	89db      	ldrh	r3, [r3, #14]
 801dcf4:	b29a      	uxth	r2, r3
 801dcf6:	687b      	ldr	r3, [r7, #4]
 801dcf8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801dd02:	687b      	ldr	r3, [r7, #4]
 801dd04:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801dd08:	429a      	cmp	r2, r3
 801dd0a:	d205      	bcs.n	801dd18 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801dd12:	687b      	ldr	r3, [r7, #4]
 801dd14:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801dd18:	4b69      	ldr	r3, [pc, #420]	@ (801dec0 <tcp_receive+0x26c>)
 801dd1a:	681a      	ldr	r2, [r3, #0]
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801dd20:	4b68      	ldr	r3, [pc, #416]	@ (801dec4 <tcp_receive+0x270>)
 801dd22:	681a      	ldr	r2, [r3, #0]
 801dd24:	687b      	ldr	r3, [r7, #4]
 801dd26:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801dd28:	4b66      	ldr	r3, [pc, #408]	@ (801dec4 <tcp_receive+0x270>)
 801dd2a:	681a      	ldr	r2, [r3, #0]
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801dd30:	1ad3      	subs	r3, r2, r3
 801dd32:	2b00      	cmp	r3, #0
 801dd34:	dc58      	bgt.n	801dde8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801dd36:	4b65      	ldr	r3, [pc, #404]	@ (801decc <tcp_receive+0x278>)
 801dd38:	881b      	ldrh	r3, [r3, #0]
 801dd3a:	2b00      	cmp	r3, #0
 801dd3c:	d14b      	bne.n	801ddd6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dd42:	687a      	ldr	r2, [r7, #4]
 801dd44:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801dd48:	4413      	add	r3, r2
 801dd4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801dd4c:	429a      	cmp	r2, r3
 801dd4e:	d142      	bne.n	801ddd6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801dd50:	687b      	ldr	r3, [r7, #4]
 801dd52:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801dd56:	2b00      	cmp	r3, #0
 801dd58:	db3d      	blt.n	801ddd6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801dd5a:	687b      	ldr	r3, [r7, #4]
 801dd5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801dd5e:	4b59      	ldr	r3, [pc, #356]	@ (801dec4 <tcp_receive+0x270>)
 801dd60:	681b      	ldr	r3, [r3, #0]
 801dd62:	429a      	cmp	r2, r3
 801dd64:	d137      	bne.n	801ddd6 <tcp_receive+0x182>
              found_dupack = 1;
 801dd66:	2301      	movs	r3, #1
 801dd68:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801dd6a:	687b      	ldr	r3, [r7, #4]
 801dd6c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801dd70:	2bff      	cmp	r3, #255	@ 0xff
 801dd72:	d007      	beq.n	801dd84 <tcp_receive+0x130>
                ++pcb->dupacks;
 801dd74:	687b      	ldr	r3, [r7, #4]
 801dd76:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801dd7a:	3301      	adds	r3, #1
 801dd7c:	b2da      	uxtb	r2, r3
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 801dd84:	687b      	ldr	r3, [r7, #4]
 801dd86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801dd8a:	2b03      	cmp	r3, #3
 801dd8c:	d91b      	bls.n	801ddc6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801dd8e:	687b      	ldr	r3, [r7, #4]
 801dd90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dd98:	4413      	add	r3, r2
 801dd9a:	b29a      	uxth	r2, r3
 801dd9c:	687b      	ldr	r3, [r7, #4]
 801dd9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801dda2:	429a      	cmp	r2, r3
 801dda4:	d30a      	bcc.n	801ddbc <tcp_receive+0x168>
 801dda6:	687b      	ldr	r3, [r7, #4]
 801dda8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801ddac:	687b      	ldr	r3, [r7, #4]
 801ddae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ddb0:	4413      	add	r3, r2
 801ddb2:	b29a      	uxth	r2, r3
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801ddba:	e004      	b.n	801ddc6 <tcp_receive+0x172>
 801ddbc:	687b      	ldr	r3, [r7, #4]
 801ddbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ddc2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801ddcc:	2b02      	cmp	r3, #2
 801ddce:	d902      	bls.n	801ddd6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801ddd0:	6878      	ldr	r0, [r7, #4]
 801ddd2:	f002 fb3f 	bl	8020454 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801ddd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	f040 8161 	bne.w	801e0a0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801ddde:	687b      	ldr	r3, [r7, #4]
 801dde0:	2200      	movs	r2, #0
 801dde2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801dde6:	e15b      	b.n	801e0a0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801dde8:	4b36      	ldr	r3, [pc, #216]	@ (801dec4 <tcp_receive+0x270>)
 801ddea:	681a      	ldr	r2, [r3, #0]
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ddf0:	1ad3      	subs	r3, r2, r3
 801ddf2:	3b01      	subs	r3, #1
 801ddf4:	2b00      	cmp	r3, #0
 801ddf6:	f2c0 814e 	blt.w	801e096 <tcp_receive+0x442>
 801ddfa:	4b32      	ldr	r3, [pc, #200]	@ (801dec4 <tcp_receive+0x270>)
 801ddfc:	681a      	ldr	r2, [r3, #0]
 801ddfe:	687b      	ldr	r3, [r7, #4]
 801de00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801de02:	1ad3      	subs	r3, r2, r3
 801de04:	2b00      	cmp	r3, #0
 801de06:	f300 8146 	bgt.w	801e096 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801de0a:	687b      	ldr	r3, [r7, #4]
 801de0c:	8b5b      	ldrh	r3, [r3, #26]
 801de0e:	f003 0304 	and.w	r3, r3, #4
 801de12:	2b00      	cmp	r3, #0
 801de14:	d010      	beq.n	801de38 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801de16:	687b      	ldr	r3, [r7, #4]
 801de18:	8b5b      	ldrh	r3, [r3, #26]
 801de1a:	f023 0304 	bic.w	r3, r3, #4
 801de1e:	b29a      	uxth	r2, r3
 801de20:	687b      	ldr	r3, [r7, #4]
 801de22:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801de24:	687b      	ldr	r3, [r7, #4]
 801de26:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 801de30:	687b      	ldr	r3, [r7, #4]
 801de32:	2200      	movs	r2, #0
 801de34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801de38:	687b      	ldr	r3, [r7, #4]
 801de3a:	2200      	movs	r2, #0
 801de3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801de40:	687b      	ldr	r3, [r7, #4]
 801de42:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801de46:	10db      	asrs	r3, r3, #3
 801de48:	b21b      	sxth	r3, r3
 801de4a:	b29a      	uxth	r2, r3
 801de4c:	687b      	ldr	r3, [r7, #4]
 801de4e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801de52:	b29b      	uxth	r3, r3
 801de54:	4413      	add	r3, r2
 801de56:	b29b      	uxth	r3, r3
 801de58:	b21a      	sxth	r2, r3
 801de5a:	687b      	ldr	r3, [r7, #4]
 801de5c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801de60:	4b18      	ldr	r3, [pc, #96]	@ (801dec4 <tcp_receive+0x270>)
 801de62:	681b      	ldr	r3, [r3, #0]
 801de64:	b29a      	uxth	r2, r3
 801de66:	687b      	ldr	r3, [r7, #4]
 801de68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801de6a:	b29b      	uxth	r3, r3
 801de6c:	1ad3      	subs	r3, r2, r3
 801de6e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	2200      	movs	r2, #0
 801de74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801de78:	4b12      	ldr	r3, [pc, #72]	@ (801dec4 <tcp_receive+0x270>)
 801de7a:	681a      	ldr	r2, [r3, #0]
 801de7c:	687b      	ldr	r3, [r7, #4]
 801de7e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801de80:	687b      	ldr	r3, [r7, #4]
 801de82:	7d1b      	ldrb	r3, [r3, #20]
 801de84:	2b03      	cmp	r3, #3
 801de86:	f240 8097 	bls.w	801dfb8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801de8a:	687b      	ldr	r3, [r7, #4]
 801de8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801de90:	687b      	ldr	r3, [r7, #4]
 801de92:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801de96:	429a      	cmp	r2, r3
 801de98:	d245      	bcs.n	801df26 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801de9a:	687b      	ldr	r3, [r7, #4]
 801de9c:	8b5b      	ldrh	r3, [r3, #26]
 801de9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801dea2:	2b00      	cmp	r3, #0
 801dea4:	d014      	beq.n	801ded0 <tcp_receive+0x27c>
 801dea6:	2301      	movs	r3, #1
 801dea8:	e013      	b.n	801ded2 <tcp_receive+0x27e>
 801deaa:	bf00      	nop
 801deac:	0802b788 	.word	0x0802b788
 801deb0:	0802bab8 	.word	0x0802bab8
 801deb4:	0802b7d4 	.word	0x0802b7d4
 801deb8:	0802bad4 	.word	0x0802bad4
 801debc:	2400bea8 	.word	0x2400bea8
 801dec0:	2400be9c 	.word	0x2400be9c
 801dec4:	2400bea0 	.word	0x2400bea0
 801dec8:	2400be8c 	.word	0x2400be8c
 801decc:	2400bea6 	.word	0x2400bea6
 801ded0:	2302      	movs	r3, #2
 801ded2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801ded6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801deda:	b29a      	uxth	r2, r3
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dee0:	fb12 f303 	smulbb	r3, r2, r3
 801dee4:	b29b      	uxth	r3, r3
 801dee6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801dee8:	4293      	cmp	r3, r2
 801deea:	bf28      	it	cs
 801deec:	4613      	movcs	r3, r2
 801deee:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801def6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801def8:	4413      	add	r3, r2
 801defa:	b29a      	uxth	r2, r3
 801defc:	687b      	ldr	r3, [r7, #4]
 801defe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801df02:	429a      	cmp	r2, r3
 801df04:	d309      	bcc.n	801df1a <tcp_receive+0x2c6>
 801df06:	687b      	ldr	r3, [r7, #4]
 801df08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801df0c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801df0e:	4413      	add	r3, r2
 801df10:	b29a      	uxth	r2, r3
 801df12:	687b      	ldr	r3, [r7, #4]
 801df14:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801df18:	e04e      	b.n	801dfb8 <tcp_receive+0x364>
 801df1a:	687b      	ldr	r3, [r7, #4]
 801df1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801df20:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801df24:	e048      	b.n	801dfb8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801df2c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801df2e:	4413      	add	r3, r2
 801df30:	b29a      	uxth	r2, r3
 801df32:	687b      	ldr	r3, [r7, #4]
 801df34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801df38:	429a      	cmp	r2, r3
 801df3a:	d309      	bcc.n	801df50 <tcp_receive+0x2fc>
 801df3c:	687b      	ldr	r3, [r7, #4]
 801df3e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801df42:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801df44:	4413      	add	r3, r2
 801df46:	b29a      	uxth	r2, r3
 801df48:	687b      	ldr	r3, [r7, #4]
 801df4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801df4e:	e004      	b.n	801df5a <tcp_receive+0x306>
 801df50:	687b      	ldr	r3, [r7, #4]
 801df52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801df56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801df5a:	687b      	ldr	r3, [r7, #4]
 801df5c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801df60:	687b      	ldr	r3, [r7, #4]
 801df62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801df66:	429a      	cmp	r2, r3
 801df68:	d326      	bcc.n	801dfb8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801df70:	687b      	ldr	r3, [r7, #4]
 801df72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801df76:	1ad3      	subs	r3, r2, r3
 801df78:	b29a      	uxth	r2, r3
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801df80:	687b      	ldr	r3, [r7, #4]
 801df82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801df86:	687b      	ldr	r3, [r7, #4]
 801df88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801df8a:	4413      	add	r3, r2
 801df8c:	b29a      	uxth	r2, r3
 801df8e:	687b      	ldr	r3, [r7, #4]
 801df90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801df94:	429a      	cmp	r2, r3
 801df96:	d30a      	bcc.n	801dfae <tcp_receive+0x35a>
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dfa2:	4413      	add	r3, r2
 801dfa4:	b29a      	uxth	r2, r3
 801dfa6:	687b      	ldr	r3, [r7, #4]
 801dfa8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801dfac:	e004      	b.n	801dfb8 <tcp_receive+0x364>
 801dfae:	687b      	ldr	r3, [r7, #4]
 801dfb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801dfb4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801dfb8:	687b      	ldr	r3, [r7, #4]
 801dfba:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801dfbc:	687b      	ldr	r3, [r7, #4]
 801dfbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dfc0:	4a98      	ldr	r2, [pc, #608]	@ (801e224 <tcp_receive+0x5d0>)
 801dfc2:	6878      	ldr	r0, [r7, #4]
 801dfc4:	f7ff fdca 	bl	801db5c <tcp_free_acked_segments>
 801dfc8:	4602      	mov	r2, r0
 801dfca:	687b      	ldr	r3, [r7, #4]
 801dfcc:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801dfce:	687b      	ldr	r3, [r7, #4]
 801dfd0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dfd6:	4a94      	ldr	r2, [pc, #592]	@ (801e228 <tcp_receive+0x5d4>)
 801dfd8:	6878      	ldr	r0, [r7, #4]
 801dfda:	f7ff fdbf 	bl	801db5c <tcp_free_acked_segments>
 801dfde:	4602      	mov	r2, r0
 801dfe0:	687b      	ldr	r3, [r7, #4]
 801dfe2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dfe8:	2b00      	cmp	r3, #0
 801dfea:	d104      	bne.n	801dff6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801dff2:	861a      	strh	r2, [r3, #48]	@ 0x30
 801dff4:	e002      	b.n	801dffc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801dff6:	687b      	ldr	r3, [r7, #4]
 801dff8:	2200      	movs	r2, #0
 801dffa:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	2200      	movs	r2, #0
 801e000:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801e002:	687b      	ldr	r3, [r7, #4]
 801e004:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e006:	2b00      	cmp	r3, #0
 801e008:	d103      	bne.n	801e012 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	2200      	movs	r2, #0
 801e00e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801e012:	687b      	ldr	r3, [r7, #4]
 801e014:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801e018:	4b84      	ldr	r3, [pc, #528]	@ (801e22c <tcp_receive+0x5d8>)
 801e01a:	881b      	ldrh	r3, [r3, #0]
 801e01c:	4413      	add	r3, r2
 801e01e:	b29a      	uxth	r2, r3
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	8b5b      	ldrh	r3, [r3, #26]
 801e02a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801e02e:	2b00      	cmp	r3, #0
 801e030:	d035      	beq.n	801e09e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801e032:	687b      	ldr	r3, [r7, #4]
 801e034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e036:	2b00      	cmp	r3, #0
 801e038:	d118      	bne.n	801e06c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801e03a:	687b      	ldr	r3, [r7, #4]
 801e03c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d00c      	beq.n	801e05c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801e042:	687b      	ldr	r3, [r7, #4]
 801e044:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801e046:	687b      	ldr	r3, [r7, #4]
 801e048:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e04a:	68db      	ldr	r3, [r3, #12]
 801e04c:	685b      	ldr	r3, [r3, #4]
 801e04e:	4618      	mov	r0, r3
 801e050:	f7fa fe33 	bl	8018cba <lwip_htonl>
 801e054:	4603      	mov	r3, r0
 801e056:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801e058:	2b00      	cmp	r3, #0
 801e05a:	dc20      	bgt.n	801e09e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	8b5b      	ldrh	r3, [r3, #26]
 801e060:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801e064:	b29a      	uxth	r2, r3
 801e066:	687b      	ldr	r3, [r7, #4]
 801e068:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e06a:	e018      	b.n	801e09e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801e06c:	687b      	ldr	r3, [r7, #4]
 801e06e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801e070:	687b      	ldr	r3, [r7, #4]
 801e072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e074:	68db      	ldr	r3, [r3, #12]
 801e076:	685b      	ldr	r3, [r3, #4]
 801e078:	4618      	mov	r0, r3
 801e07a:	f7fa fe1e 	bl	8018cba <lwip_htonl>
 801e07e:	4603      	mov	r3, r0
 801e080:	1ae3      	subs	r3, r4, r3
 801e082:	2b00      	cmp	r3, #0
 801e084:	dc0b      	bgt.n	801e09e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801e086:	687b      	ldr	r3, [r7, #4]
 801e088:	8b5b      	ldrh	r3, [r3, #26]
 801e08a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801e08e:	b29a      	uxth	r2, r3
 801e090:	687b      	ldr	r3, [r7, #4]
 801e092:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e094:	e003      	b.n	801e09e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801e096:	6878      	ldr	r0, [r7, #4]
 801e098:	f002 fbc8 	bl	802082c <tcp_send_empty_ack>
 801e09c:	e000      	b.n	801e0a0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e09e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	d05b      	beq.n	801e160 <tcp_receive+0x50c>
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e0ac:	4b60      	ldr	r3, [pc, #384]	@ (801e230 <tcp_receive+0x5dc>)
 801e0ae:	681b      	ldr	r3, [r3, #0]
 801e0b0:	1ad3      	subs	r3, r2, r3
 801e0b2:	2b00      	cmp	r3, #0
 801e0b4:	da54      	bge.n	801e160 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801e0b6:	4b5f      	ldr	r3, [pc, #380]	@ (801e234 <tcp_receive+0x5e0>)
 801e0b8:	681b      	ldr	r3, [r3, #0]
 801e0ba:	b29a      	uxth	r2, r3
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e0c0:	b29b      	uxth	r3, r3
 801e0c2:	1ad3      	subs	r3, r2, r3
 801e0c4:	b29b      	uxth	r3, r3
 801e0c6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801e0ca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801e0d4:	10db      	asrs	r3, r3, #3
 801e0d6:	b21b      	sxth	r3, r3
 801e0d8:	b29b      	uxth	r3, r3
 801e0da:	1ad3      	subs	r3, r2, r3
 801e0dc:	b29b      	uxth	r3, r3
 801e0de:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801e0e2:	687b      	ldr	r3, [r7, #4]
 801e0e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801e0e8:	b29a      	uxth	r2, r3
 801e0ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801e0ee:	4413      	add	r3, r2
 801e0f0:	b29b      	uxth	r3, r3
 801e0f2:	b21a      	sxth	r2, r3
 801e0f4:	687b      	ldr	r3, [r7, #4]
 801e0f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801e0f8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801e0fc:	2b00      	cmp	r3, #0
 801e0fe:	da05      	bge.n	801e10c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801e100:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801e104:	425b      	negs	r3, r3
 801e106:	b29b      	uxth	r3, r3
 801e108:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801e10c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801e110:	687b      	ldr	r3, [r7, #4]
 801e112:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801e116:	109b      	asrs	r3, r3, #2
 801e118:	b21b      	sxth	r3, r3
 801e11a:	b29b      	uxth	r3, r3
 801e11c:	1ad3      	subs	r3, r2, r3
 801e11e:	b29b      	uxth	r3, r3
 801e120:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801e124:	687b      	ldr	r3, [r7, #4]
 801e126:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801e12a:	b29a      	uxth	r2, r3
 801e12c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801e130:	4413      	add	r3, r2
 801e132:	b29b      	uxth	r3, r3
 801e134:	b21a      	sxth	r2, r3
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e13a:	687b      	ldr	r3, [r7, #4]
 801e13c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801e140:	10db      	asrs	r3, r3, #3
 801e142:	b21b      	sxth	r3, r3
 801e144:	b29a      	uxth	r2, r3
 801e146:	687b      	ldr	r3, [r7, #4]
 801e148:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801e14c:	b29b      	uxth	r3, r3
 801e14e:	4413      	add	r3, r2
 801e150:	b29b      	uxth	r3, r3
 801e152:	b21a      	sxth	r2, r3
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801e15a:	687b      	ldr	r3, [r7, #4]
 801e15c:	2200      	movs	r2, #0
 801e15e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e160:	4b35      	ldr	r3, [pc, #212]	@ (801e238 <tcp_receive+0x5e4>)
 801e162:	881b      	ldrh	r3, [r3, #0]
 801e164:	2b00      	cmp	r3, #0
 801e166:	f000 84df 	beq.w	801eb28 <tcp_receive+0xed4>
 801e16a:	687b      	ldr	r3, [r7, #4]
 801e16c:	7d1b      	ldrb	r3, [r3, #20]
 801e16e:	2b06      	cmp	r3, #6
 801e170:	f200 84da 	bhi.w	801eb28 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e174:	687b      	ldr	r3, [r7, #4]
 801e176:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e178:	4b30      	ldr	r3, [pc, #192]	@ (801e23c <tcp_receive+0x5e8>)
 801e17a:	681b      	ldr	r3, [r3, #0]
 801e17c:	1ad3      	subs	r3, r2, r3
 801e17e:	3b01      	subs	r3, #1
 801e180:	2b00      	cmp	r3, #0
 801e182:	f2c0 808f 	blt.w	801e2a4 <tcp_receive+0x650>
 801e186:	687b      	ldr	r3, [r7, #4]
 801e188:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e18a:	4b2b      	ldr	r3, [pc, #172]	@ (801e238 <tcp_receive+0x5e4>)
 801e18c:	881b      	ldrh	r3, [r3, #0]
 801e18e:	4619      	mov	r1, r3
 801e190:	4b2a      	ldr	r3, [pc, #168]	@ (801e23c <tcp_receive+0x5e8>)
 801e192:	681b      	ldr	r3, [r3, #0]
 801e194:	440b      	add	r3, r1
 801e196:	1ad3      	subs	r3, r2, r3
 801e198:	3301      	adds	r3, #1
 801e19a:	2b00      	cmp	r3, #0
 801e19c:	f300 8082 	bgt.w	801e2a4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801e1a0:	4b27      	ldr	r3, [pc, #156]	@ (801e240 <tcp_receive+0x5ec>)
 801e1a2:	685b      	ldr	r3, [r3, #4]
 801e1a4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801e1a6:	687b      	ldr	r3, [r7, #4]
 801e1a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e1aa:	4b24      	ldr	r3, [pc, #144]	@ (801e23c <tcp_receive+0x5e8>)
 801e1ac:	681b      	ldr	r3, [r3, #0]
 801e1ae:	1ad3      	subs	r3, r2, r3
 801e1b0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801e1b2:	4b23      	ldr	r3, [pc, #140]	@ (801e240 <tcp_receive+0x5ec>)
 801e1b4:	685b      	ldr	r3, [r3, #4]
 801e1b6:	2b00      	cmp	r3, #0
 801e1b8:	d106      	bne.n	801e1c8 <tcp_receive+0x574>
 801e1ba:	4b22      	ldr	r3, [pc, #136]	@ (801e244 <tcp_receive+0x5f0>)
 801e1bc:	f240 5294 	movw	r2, #1428	@ 0x594
 801e1c0:	4921      	ldr	r1, [pc, #132]	@ (801e248 <tcp_receive+0x5f4>)
 801e1c2:	4822      	ldr	r0, [pc, #136]	@ (801e24c <tcp_receive+0x5f8>)
 801e1c4:	f007 f98e 	bl	80254e4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801e1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e1ca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e1ce:	4293      	cmp	r3, r2
 801e1d0:	d906      	bls.n	801e1e0 <tcp_receive+0x58c>
 801e1d2:	4b1c      	ldr	r3, [pc, #112]	@ (801e244 <tcp_receive+0x5f0>)
 801e1d4:	f240 5295 	movw	r2, #1429	@ 0x595
 801e1d8:	491d      	ldr	r1, [pc, #116]	@ (801e250 <tcp_receive+0x5fc>)
 801e1da:	481c      	ldr	r0, [pc, #112]	@ (801e24c <tcp_receive+0x5f8>)
 801e1dc:	f007 f982 	bl	80254e4 <iprintf>
      off = (u16_t)off32;
 801e1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e1e2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801e1e6:	4b16      	ldr	r3, [pc, #88]	@ (801e240 <tcp_receive+0x5ec>)
 801e1e8:	685b      	ldr	r3, [r3, #4]
 801e1ea:	891b      	ldrh	r3, [r3, #8]
 801e1ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e1f0:	429a      	cmp	r2, r3
 801e1f2:	d906      	bls.n	801e202 <tcp_receive+0x5ae>
 801e1f4:	4b13      	ldr	r3, [pc, #76]	@ (801e244 <tcp_receive+0x5f0>)
 801e1f6:	f240 5297 	movw	r2, #1431	@ 0x597
 801e1fa:	4916      	ldr	r1, [pc, #88]	@ (801e254 <tcp_receive+0x600>)
 801e1fc:	4813      	ldr	r0, [pc, #76]	@ (801e24c <tcp_receive+0x5f8>)
 801e1fe:	f007 f971 	bl	80254e4 <iprintf>
      inseg.len -= off;
 801e202:	4b0f      	ldr	r3, [pc, #60]	@ (801e240 <tcp_receive+0x5ec>)
 801e204:	891a      	ldrh	r2, [r3, #8]
 801e206:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e20a:	1ad3      	subs	r3, r2, r3
 801e20c:	b29a      	uxth	r2, r3
 801e20e:	4b0c      	ldr	r3, [pc, #48]	@ (801e240 <tcp_receive+0x5ec>)
 801e210:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801e212:	4b0b      	ldr	r3, [pc, #44]	@ (801e240 <tcp_receive+0x5ec>)
 801e214:	685b      	ldr	r3, [r3, #4]
 801e216:	891a      	ldrh	r2, [r3, #8]
 801e218:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e21c:	1ad3      	subs	r3, r2, r3
 801e21e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 801e220:	e02a      	b.n	801e278 <tcp_receive+0x624>
 801e222:	bf00      	nop
 801e224:	0802baf0 	.word	0x0802baf0
 801e228:	0802baf8 	.word	0x0802baf8
 801e22c:	2400bea4 	.word	0x2400bea4
 801e230:	2400bea0 	.word	0x2400bea0
 801e234:	2400be64 	.word	0x2400be64
 801e238:	2400bea6 	.word	0x2400bea6
 801e23c:	2400be9c 	.word	0x2400be9c
 801e240:	2400be7c 	.word	0x2400be7c
 801e244:	0802b788 	.word	0x0802b788
 801e248:	0802bb00 	.word	0x0802bb00
 801e24c:	0802b7d4 	.word	0x0802b7d4
 801e250:	0802bb10 	.word	0x0802bb10
 801e254:	0802bb20 	.word	0x0802bb20
        off -= p->len;
 801e258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e25a:	895b      	ldrh	r3, [r3, #10]
 801e25c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e260:	1ad3      	subs	r3, r2, r3
 801e262:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801e266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e268:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801e26a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801e26c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e26e:	2200      	movs	r2, #0
 801e270:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801e272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e274:	681b      	ldr	r3, [r3, #0]
 801e276:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 801e278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e27a:	895b      	ldrh	r3, [r3, #10]
 801e27c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e280:	429a      	cmp	r2, r3
 801e282:	d8e9      	bhi.n	801e258 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801e284:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e288:	4619      	mov	r1, r3
 801e28a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801e28c:	f7fc f924 	bl	801a4d8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801e290:	687b      	ldr	r3, [r7, #4]
 801e292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e294:	4a90      	ldr	r2, [pc, #576]	@ (801e4d8 <tcp_receive+0x884>)
 801e296:	6013      	str	r3, [r2, #0]
 801e298:	4b90      	ldr	r3, [pc, #576]	@ (801e4dc <tcp_receive+0x888>)
 801e29a:	68db      	ldr	r3, [r3, #12]
 801e29c:	4a8e      	ldr	r2, [pc, #568]	@ (801e4d8 <tcp_receive+0x884>)
 801e29e:	6812      	ldr	r2, [r2, #0]
 801e2a0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e2a2:	e00d      	b.n	801e2c0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801e2a4:	4b8c      	ldr	r3, [pc, #560]	@ (801e4d8 <tcp_receive+0x884>)
 801e2a6:	681a      	ldr	r2, [r3, #0]
 801e2a8:	687b      	ldr	r3, [r7, #4]
 801e2aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e2ac:	1ad3      	subs	r3, r2, r3
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	da06      	bge.n	801e2c0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801e2b2:	687b      	ldr	r3, [r7, #4]
 801e2b4:	8b5b      	ldrh	r3, [r3, #26]
 801e2b6:	f043 0302 	orr.w	r3, r3, #2
 801e2ba:	b29a      	uxth	r2, r3
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e2c0:	4b85      	ldr	r3, [pc, #532]	@ (801e4d8 <tcp_receive+0x884>)
 801e2c2:	681a      	ldr	r2, [r3, #0]
 801e2c4:	687b      	ldr	r3, [r7, #4]
 801e2c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e2c8:	1ad3      	subs	r3, r2, r3
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	f2c0 8427 	blt.w	801eb1e <tcp_receive+0xeca>
 801e2d0:	4b81      	ldr	r3, [pc, #516]	@ (801e4d8 <tcp_receive+0x884>)
 801e2d2:	681a      	ldr	r2, [r3, #0]
 801e2d4:	687b      	ldr	r3, [r7, #4]
 801e2d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e2d8:	6879      	ldr	r1, [r7, #4]
 801e2da:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801e2dc:	440b      	add	r3, r1
 801e2de:	1ad3      	subs	r3, r2, r3
 801e2e0:	3301      	adds	r3, #1
 801e2e2:	2b00      	cmp	r3, #0
 801e2e4:	f300 841b 	bgt.w	801eb1e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801e2e8:	687b      	ldr	r3, [r7, #4]
 801e2ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e2ec:	4b7a      	ldr	r3, [pc, #488]	@ (801e4d8 <tcp_receive+0x884>)
 801e2ee:	681b      	ldr	r3, [r3, #0]
 801e2f0:	429a      	cmp	r2, r3
 801e2f2:	f040 8298 	bne.w	801e826 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801e2f6:	4b79      	ldr	r3, [pc, #484]	@ (801e4dc <tcp_receive+0x888>)
 801e2f8:	891c      	ldrh	r4, [r3, #8]
 801e2fa:	4b78      	ldr	r3, [pc, #480]	@ (801e4dc <tcp_receive+0x888>)
 801e2fc:	68db      	ldr	r3, [r3, #12]
 801e2fe:	899b      	ldrh	r3, [r3, #12]
 801e300:	b29b      	uxth	r3, r3
 801e302:	4618      	mov	r0, r3
 801e304:	f7fa fcc4 	bl	8018c90 <lwip_htons>
 801e308:	4603      	mov	r3, r0
 801e30a:	b2db      	uxtb	r3, r3
 801e30c:	f003 0303 	and.w	r3, r3, #3
 801e310:	2b00      	cmp	r3, #0
 801e312:	d001      	beq.n	801e318 <tcp_receive+0x6c4>
 801e314:	2301      	movs	r3, #1
 801e316:	e000      	b.n	801e31a <tcp_receive+0x6c6>
 801e318:	2300      	movs	r3, #0
 801e31a:	4423      	add	r3, r4
 801e31c:	b29a      	uxth	r2, r3
 801e31e:	4b70      	ldr	r3, [pc, #448]	@ (801e4e0 <tcp_receive+0x88c>)
 801e320:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801e322:	687b      	ldr	r3, [r7, #4]
 801e324:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801e326:	4b6e      	ldr	r3, [pc, #440]	@ (801e4e0 <tcp_receive+0x88c>)
 801e328:	881b      	ldrh	r3, [r3, #0]
 801e32a:	429a      	cmp	r2, r3
 801e32c:	d274      	bcs.n	801e418 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e32e:	4b6b      	ldr	r3, [pc, #428]	@ (801e4dc <tcp_receive+0x888>)
 801e330:	68db      	ldr	r3, [r3, #12]
 801e332:	899b      	ldrh	r3, [r3, #12]
 801e334:	b29b      	uxth	r3, r3
 801e336:	4618      	mov	r0, r3
 801e338:	f7fa fcaa 	bl	8018c90 <lwip_htons>
 801e33c:	4603      	mov	r3, r0
 801e33e:	b2db      	uxtb	r3, r3
 801e340:	f003 0301 	and.w	r3, r3, #1
 801e344:	2b00      	cmp	r3, #0
 801e346:	d01e      	beq.n	801e386 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801e348:	4b64      	ldr	r3, [pc, #400]	@ (801e4dc <tcp_receive+0x888>)
 801e34a:	68db      	ldr	r3, [r3, #12]
 801e34c:	899b      	ldrh	r3, [r3, #12]
 801e34e:	b29b      	uxth	r3, r3
 801e350:	b21b      	sxth	r3, r3
 801e352:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801e356:	b21c      	sxth	r4, r3
 801e358:	4b60      	ldr	r3, [pc, #384]	@ (801e4dc <tcp_receive+0x888>)
 801e35a:	68db      	ldr	r3, [r3, #12]
 801e35c:	899b      	ldrh	r3, [r3, #12]
 801e35e:	b29b      	uxth	r3, r3
 801e360:	4618      	mov	r0, r3
 801e362:	f7fa fc95 	bl	8018c90 <lwip_htons>
 801e366:	4603      	mov	r3, r0
 801e368:	b2db      	uxtb	r3, r3
 801e36a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801e36e:	b29b      	uxth	r3, r3
 801e370:	4618      	mov	r0, r3
 801e372:	f7fa fc8d 	bl	8018c90 <lwip_htons>
 801e376:	4603      	mov	r3, r0
 801e378:	b21b      	sxth	r3, r3
 801e37a:	4323      	orrs	r3, r4
 801e37c:	b21a      	sxth	r2, r3
 801e37e:	4b57      	ldr	r3, [pc, #348]	@ (801e4dc <tcp_receive+0x888>)
 801e380:	68db      	ldr	r3, [r3, #12]
 801e382:	b292      	uxth	r2, r2
 801e384:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801e386:	687b      	ldr	r3, [r7, #4]
 801e388:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801e38a:	4b54      	ldr	r3, [pc, #336]	@ (801e4dc <tcp_receive+0x888>)
 801e38c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801e38e:	4b53      	ldr	r3, [pc, #332]	@ (801e4dc <tcp_receive+0x888>)
 801e390:	68db      	ldr	r3, [r3, #12]
 801e392:	899b      	ldrh	r3, [r3, #12]
 801e394:	b29b      	uxth	r3, r3
 801e396:	4618      	mov	r0, r3
 801e398:	f7fa fc7a 	bl	8018c90 <lwip_htons>
 801e39c:	4603      	mov	r3, r0
 801e39e:	b2db      	uxtb	r3, r3
 801e3a0:	f003 0302 	and.w	r3, r3, #2
 801e3a4:	2b00      	cmp	r3, #0
 801e3a6:	d005      	beq.n	801e3b4 <tcp_receive+0x760>
            inseg.len -= 1;
 801e3a8:	4b4c      	ldr	r3, [pc, #304]	@ (801e4dc <tcp_receive+0x888>)
 801e3aa:	891b      	ldrh	r3, [r3, #8]
 801e3ac:	3b01      	subs	r3, #1
 801e3ae:	b29a      	uxth	r2, r3
 801e3b0:	4b4a      	ldr	r3, [pc, #296]	@ (801e4dc <tcp_receive+0x888>)
 801e3b2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801e3b4:	4b49      	ldr	r3, [pc, #292]	@ (801e4dc <tcp_receive+0x888>)
 801e3b6:	685b      	ldr	r3, [r3, #4]
 801e3b8:	4a48      	ldr	r2, [pc, #288]	@ (801e4dc <tcp_receive+0x888>)
 801e3ba:	8912      	ldrh	r2, [r2, #8]
 801e3bc:	4611      	mov	r1, r2
 801e3be:	4618      	mov	r0, r3
 801e3c0:	f7fb ff8a 	bl	801a2d8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801e3c4:	4b45      	ldr	r3, [pc, #276]	@ (801e4dc <tcp_receive+0x888>)
 801e3c6:	891c      	ldrh	r4, [r3, #8]
 801e3c8:	4b44      	ldr	r3, [pc, #272]	@ (801e4dc <tcp_receive+0x888>)
 801e3ca:	68db      	ldr	r3, [r3, #12]
 801e3cc:	899b      	ldrh	r3, [r3, #12]
 801e3ce:	b29b      	uxth	r3, r3
 801e3d0:	4618      	mov	r0, r3
 801e3d2:	f7fa fc5d 	bl	8018c90 <lwip_htons>
 801e3d6:	4603      	mov	r3, r0
 801e3d8:	b2db      	uxtb	r3, r3
 801e3da:	f003 0303 	and.w	r3, r3, #3
 801e3de:	2b00      	cmp	r3, #0
 801e3e0:	d001      	beq.n	801e3e6 <tcp_receive+0x792>
 801e3e2:	2301      	movs	r3, #1
 801e3e4:	e000      	b.n	801e3e8 <tcp_receive+0x794>
 801e3e6:	2300      	movs	r3, #0
 801e3e8:	4423      	add	r3, r4
 801e3ea:	b29a      	uxth	r2, r3
 801e3ec:	4b3c      	ldr	r3, [pc, #240]	@ (801e4e0 <tcp_receive+0x88c>)
 801e3ee:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e3f0:	4b3b      	ldr	r3, [pc, #236]	@ (801e4e0 <tcp_receive+0x88c>)
 801e3f2:	881b      	ldrh	r3, [r3, #0]
 801e3f4:	461a      	mov	r2, r3
 801e3f6:	4b38      	ldr	r3, [pc, #224]	@ (801e4d8 <tcp_receive+0x884>)
 801e3f8:	681b      	ldr	r3, [r3, #0]
 801e3fa:	441a      	add	r2, r3
 801e3fc:	687b      	ldr	r3, [r7, #4]
 801e3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e400:	6879      	ldr	r1, [r7, #4]
 801e402:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801e404:	440b      	add	r3, r1
 801e406:	429a      	cmp	r2, r3
 801e408:	d006      	beq.n	801e418 <tcp_receive+0x7c4>
 801e40a:	4b36      	ldr	r3, [pc, #216]	@ (801e4e4 <tcp_receive+0x890>)
 801e40c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 801e410:	4935      	ldr	r1, [pc, #212]	@ (801e4e8 <tcp_receive+0x894>)
 801e412:	4836      	ldr	r0, [pc, #216]	@ (801e4ec <tcp_receive+0x898>)
 801e414:	f007 f866 	bl	80254e4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801e418:	687b      	ldr	r3, [r7, #4]
 801e41a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e41c:	2b00      	cmp	r3, #0
 801e41e:	f000 80e6 	beq.w	801e5ee <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e422:	4b2e      	ldr	r3, [pc, #184]	@ (801e4dc <tcp_receive+0x888>)
 801e424:	68db      	ldr	r3, [r3, #12]
 801e426:	899b      	ldrh	r3, [r3, #12]
 801e428:	b29b      	uxth	r3, r3
 801e42a:	4618      	mov	r0, r3
 801e42c:	f7fa fc30 	bl	8018c90 <lwip_htons>
 801e430:	4603      	mov	r3, r0
 801e432:	b2db      	uxtb	r3, r3
 801e434:	f003 0301 	and.w	r3, r3, #1
 801e438:	2b00      	cmp	r3, #0
 801e43a:	d010      	beq.n	801e45e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801e43c:	e00a      	b.n	801e454 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801e43e:	687b      	ldr	r3, [r7, #4]
 801e440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e442:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801e444:	687b      	ldr	r3, [r7, #4]
 801e446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e448:	681a      	ldr	r2, [r3, #0]
 801e44a:	687b      	ldr	r3, [r7, #4]
 801e44c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801e44e:	68f8      	ldr	r0, [r7, #12]
 801e450:	f7fd fcc5 	bl	801bdde <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801e454:	687b      	ldr	r3, [r7, #4]
 801e456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e458:	2b00      	cmp	r3, #0
 801e45a:	d1f0      	bne.n	801e43e <tcp_receive+0x7ea>
 801e45c:	e0c7      	b.n	801e5ee <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801e45e:	687b      	ldr	r3, [r7, #4]
 801e460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e462:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801e464:	e051      	b.n	801e50a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801e466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e468:	68db      	ldr	r3, [r3, #12]
 801e46a:	899b      	ldrh	r3, [r3, #12]
 801e46c:	b29b      	uxth	r3, r3
 801e46e:	4618      	mov	r0, r3
 801e470:	f7fa fc0e 	bl	8018c90 <lwip_htons>
 801e474:	4603      	mov	r3, r0
 801e476:	b2db      	uxtb	r3, r3
 801e478:	f003 0301 	and.w	r3, r3, #1
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	d03c      	beq.n	801e4fa <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801e480:	4b16      	ldr	r3, [pc, #88]	@ (801e4dc <tcp_receive+0x888>)
 801e482:	68db      	ldr	r3, [r3, #12]
 801e484:	899b      	ldrh	r3, [r3, #12]
 801e486:	b29b      	uxth	r3, r3
 801e488:	4618      	mov	r0, r3
 801e48a:	f7fa fc01 	bl	8018c90 <lwip_htons>
 801e48e:	4603      	mov	r3, r0
 801e490:	b2db      	uxtb	r3, r3
 801e492:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801e496:	2b00      	cmp	r3, #0
 801e498:	d12f      	bne.n	801e4fa <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801e49a:	4b10      	ldr	r3, [pc, #64]	@ (801e4dc <tcp_receive+0x888>)
 801e49c:	68db      	ldr	r3, [r3, #12]
 801e49e:	899b      	ldrh	r3, [r3, #12]
 801e4a0:	b29c      	uxth	r4, r3
 801e4a2:	2001      	movs	r0, #1
 801e4a4:	f7fa fbf4 	bl	8018c90 <lwip_htons>
 801e4a8:	4603      	mov	r3, r0
 801e4aa:	461a      	mov	r2, r3
 801e4ac:	4b0b      	ldr	r3, [pc, #44]	@ (801e4dc <tcp_receive+0x888>)
 801e4ae:	68db      	ldr	r3, [r3, #12]
 801e4b0:	4322      	orrs	r2, r4
 801e4b2:	b292      	uxth	r2, r2
 801e4b4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801e4b6:	4b09      	ldr	r3, [pc, #36]	@ (801e4dc <tcp_receive+0x888>)
 801e4b8:	891c      	ldrh	r4, [r3, #8]
 801e4ba:	4b08      	ldr	r3, [pc, #32]	@ (801e4dc <tcp_receive+0x888>)
 801e4bc:	68db      	ldr	r3, [r3, #12]
 801e4be:	899b      	ldrh	r3, [r3, #12]
 801e4c0:	b29b      	uxth	r3, r3
 801e4c2:	4618      	mov	r0, r3
 801e4c4:	f7fa fbe4 	bl	8018c90 <lwip_htons>
 801e4c8:	4603      	mov	r3, r0
 801e4ca:	b2db      	uxtb	r3, r3
 801e4cc:	f003 0303 	and.w	r3, r3, #3
 801e4d0:	2b00      	cmp	r3, #0
 801e4d2:	d00d      	beq.n	801e4f0 <tcp_receive+0x89c>
 801e4d4:	2301      	movs	r3, #1
 801e4d6:	e00c      	b.n	801e4f2 <tcp_receive+0x89e>
 801e4d8:	2400be9c 	.word	0x2400be9c
 801e4dc:	2400be7c 	.word	0x2400be7c
 801e4e0:	2400bea6 	.word	0x2400bea6
 801e4e4:	0802b788 	.word	0x0802b788
 801e4e8:	0802bb30 	.word	0x0802bb30
 801e4ec:	0802b7d4 	.word	0x0802b7d4
 801e4f0:	2300      	movs	r3, #0
 801e4f2:	4423      	add	r3, r4
 801e4f4:	b29a      	uxth	r2, r3
 801e4f6:	4b98      	ldr	r3, [pc, #608]	@ (801e758 <tcp_receive+0xb04>)
 801e4f8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801e4fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e4fc:	613b      	str	r3, [r7, #16]
              next = next->next;
 801e4fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e500:	681b      	ldr	r3, [r3, #0]
 801e502:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801e504:	6938      	ldr	r0, [r7, #16]
 801e506:	f7fd fc6a 	bl	801bdde <tcp_seg_free>
            while (next &&
 801e50a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e50c:	2b00      	cmp	r3, #0
 801e50e:	d00e      	beq.n	801e52e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801e510:	4b91      	ldr	r3, [pc, #580]	@ (801e758 <tcp_receive+0xb04>)
 801e512:	881b      	ldrh	r3, [r3, #0]
 801e514:	461a      	mov	r2, r3
 801e516:	4b91      	ldr	r3, [pc, #580]	@ (801e75c <tcp_receive+0xb08>)
 801e518:	681b      	ldr	r3, [r3, #0]
 801e51a:	441a      	add	r2, r3
 801e51c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e51e:	68db      	ldr	r3, [r3, #12]
 801e520:	685b      	ldr	r3, [r3, #4]
 801e522:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801e524:	8909      	ldrh	r1, [r1, #8]
 801e526:	440b      	add	r3, r1
 801e528:	1ad3      	subs	r3, r2, r3
            while (next &&
 801e52a:	2b00      	cmp	r3, #0
 801e52c:	da9b      	bge.n	801e466 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801e52e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e530:	2b00      	cmp	r3, #0
 801e532:	d059      	beq.n	801e5e8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801e534:	4b88      	ldr	r3, [pc, #544]	@ (801e758 <tcp_receive+0xb04>)
 801e536:	881b      	ldrh	r3, [r3, #0]
 801e538:	461a      	mov	r2, r3
 801e53a:	4b88      	ldr	r3, [pc, #544]	@ (801e75c <tcp_receive+0xb08>)
 801e53c:	681b      	ldr	r3, [r3, #0]
 801e53e:	441a      	add	r2, r3
 801e540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e542:	68db      	ldr	r3, [r3, #12]
 801e544:	685b      	ldr	r3, [r3, #4]
 801e546:	1ad3      	subs	r3, r2, r3
            if (next &&
 801e548:	2b00      	cmp	r3, #0
 801e54a:	dd4d      	ble.n	801e5e8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801e54c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e54e:	68db      	ldr	r3, [r3, #12]
 801e550:	685b      	ldr	r3, [r3, #4]
 801e552:	b29a      	uxth	r2, r3
 801e554:	4b81      	ldr	r3, [pc, #516]	@ (801e75c <tcp_receive+0xb08>)
 801e556:	681b      	ldr	r3, [r3, #0]
 801e558:	b29b      	uxth	r3, r3
 801e55a:	1ad3      	subs	r3, r2, r3
 801e55c:	b29a      	uxth	r2, r3
 801e55e:	4b80      	ldr	r3, [pc, #512]	@ (801e760 <tcp_receive+0xb0c>)
 801e560:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801e562:	4b7f      	ldr	r3, [pc, #508]	@ (801e760 <tcp_receive+0xb0c>)
 801e564:	68db      	ldr	r3, [r3, #12]
 801e566:	899b      	ldrh	r3, [r3, #12]
 801e568:	b29b      	uxth	r3, r3
 801e56a:	4618      	mov	r0, r3
 801e56c:	f7fa fb90 	bl	8018c90 <lwip_htons>
 801e570:	4603      	mov	r3, r0
 801e572:	b2db      	uxtb	r3, r3
 801e574:	f003 0302 	and.w	r3, r3, #2
 801e578:	2b00      	cmp	r3, #0
 801e57a:	d005      	beq.n	801e588 <tcp_receive+0x934>
                inseg.len -= 1;
 801e57c:	4b78      	ldr	r3, [pc, #480]	@ (801e760 <tcp_receive+0xb0c>)
 801e57e:	891b      	ldrh	r3, [r3, #8]
 801e580:	3b01      	subs	r3, #1
 801e582:	b29a      	uxth	r2, r3
 801e584:	4b76      	ldr	r3, [pc, #472]	@ (801e760 <tcp_receive+0xb0c>)
 801e586:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801e588:	4b75      	ldr	r3, [pc, #468]	@ (801e760 <tcp_receive+0xb0c>)
 801e58a:	685b      	ldr	r3, [r3, #4]
 801e58c:	4a74      	ldr	r2, [pc, #464]	@ (801e760 <tcp_receive+0xb0c>)
 801e58e:	8912      	ldrh	r2, [r2, #8]
 801e590:	4611      	mov	r1, r2
 801e592:	4618      	mov	r0, r3
 801e594:	f7fb fea0 	bl	801a2d8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801e598:	4b71      	ldr	r3, [pc, #452]	@ (801e760 <tcp_receive+0xb0c>)
 801e59a:	891c      	ldrh	r4, [r3, #8]
 801e59c:	4b70      	ldr	r3, [pc, #448]	@ (801e760 <tcp_receive+0xb0c>)
 801e59e:	68db      	ldr	r3, [r3, #12]
 801e5a0:	899b      	ldrh	r3, [r3, #12]
 801e5a2:	b29b      	uxth	r3, r3
 801e5a4:	4618      	mov	r0, r3
 801e5a6:	f7fa fb73 	bl	8018c90 <lwip_htons>
 801e5aa:	4603      	mov	r3, r0
 801e5ac:	b2db      	uxtb	r3, r3
 801e5ae:	f003 0303 	and.w	r3, r3, #3
 801e5b2:	2b00      	cmp	r3, #0
 801e5b4:	d001      	beq.n	801e5ba <tcp_receive+0x966>
 801e5b6:	2301      	movs	r3, #1
 801e5b8:	e000      	b.n	801e5bc <tcp_receive+0x968>
 801e5ba:	2300      	movs	r3, #0
 801e5bc:	4423      	add	r3, r4
 801e5be:	b29a      	uxth	r2, r3
 801e5c0:	4b65      	ldr	r3, [pc, #404]	@ (801e758 <tcp_receive+0xb04>)
 801e5c2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801e5c4:	4b64      	ldr	r3, [pc, #400]	@ (801e758 <tcp_receive+0xb04>)
 801e5c6:	881b      	ldrh	r3, [r3, #0]
 801e5c8:	461a      	mov	r2, r3
 801e5ca:	4b64      	ldr	r3, [pc, #400]	@ (801e75c <tcp_receive+0xb08>)
 801e5cc:	681b      	ldr	r3, [r3, #0]
 801e5ce:	441a      	add	r2, r3
 801e5d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e5d2:	68db      	ldr	r3, [r3, #12]
 801e5d4:	685b      	ldr	r3, [r3, #4]
 801e5d6:	429a      	cmp	r2, r3
 801e5d8:	d006      	beq.n	801e5e8 <tcp_receive+0x994>
 801e5da:	4b62      	ldr	r3, [pc, #392]	@ (801e764 <tcp_receive+0xb10>)
 801e5dc:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801e5e0:	4961      	ldr	r1, [pc, #388]	@ (801e768 <tcp_receive+0xb14>)
 801e5e2:	4862      	ldr	r0, [pc, #392]	@ (801e76c <tcp_receive+0xb18>)
 801e5e4:	f006 ff7e 	bl	80254e4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801e5e8:	687b      	ldr	r3, [r7, #4]
 801e5ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e5ec:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801e5ee:	4b5a      	ldr	r3, [pc, #360]	@ (801e758 <tcp_receive+0xb04>)
 801e5f0:	881b      	ldrh	r3, [r3, #0]
 801e5f2:	461a      	mov	r2, r3
 801e5f4:	4b59      	ldr	r3, [pc, #356]	@ (801e75c <tcp_receive+0xb08>)
 801e5f6:	681b      	ldr	r3, [r3, #0]
 801e5f8:	441a      	add	r2, r3
 801e5fa:	687b      	ldr	r3, [r7, #4]
 801e5fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801e5fe:	687b      	ldr	r3, [r7, #4]
 801e600:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801e602:	4b55      	ldr	r3, [pc, #340]	@ (801e758 <tcp_receive+0xb04>)
 801e604:	881b      	ldrh	r3, [r3, #0]
 801e606:	429a      	cmp	r2, r3
 801e608:	d206      	bcs.n	801e618 <tcp_receive+0x9c4>
 801e60a:	4b56      	ldr	r3, [pc, #344]	@ (801e764 <tcp_receive+0xb10>)
 801e60c:	f240 6207 	movw	r2, #1543	@ 0x607
 801e610:	4957      	ldr	r1, [pc, #348]	@ (801e770 <tcp_receive+0xb1c>)
 801e612:	4856      	ldr	r0, [pc, #344]	@ (801e76c <tcp_receive+0xb18>)
 801e614:	f006 ff66 	bl	80254e4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801e618:	687b      	ldr	r3, [r7, #4]
 801e61a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801e61c:	4b4e      	ldr	r3, [pc, #312]	@ (801e758 <tcp_receive+0xb04>)
 801e61e:	881b      	ldrh	r3, [r3, #0]
 801e620:	1ad3      	subs	r3, r2, r3
 801e622:	b29a      	uxth	r2, r3
 801e624:	687b      	ldr	r3, [r7, #4]
 801e626:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801e628:	6878      	ldr	r0, [r7, #4]
 801e62a:	f7fc feb1 	bl	801b390 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801e62e:	4b4c      	ldr	r3, [pc, #304]	@ (801e760 <tcp_receive+0xb0c>)
 801e630:	685b      	ldr	r3, [r3, #4]
 801e632:	891b      	ldrh	r3, [r3, #8]
 801e634:	2b00      	cmp	r3, #0
 801e636:	d006      	beq.n	801e646 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801e638:	4b49      	ldr	r3, [pc, #292]	@ (801e760 <tcp_receive+0xb0c>)
 801e63a:	685b      	ldr	r3, [r3, #4]
 801e63c:	4a4d      	ldr	r2, [pc, #308]	@ (801e774 <tcp_receive+0xb20>)
 801e63e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801e640:	4b47      	ldr	r3, [pc, #284]	@ (801e760 <tcp_receive+0xb0c>)
 801e642:	2200      	movs	r2, #0
 801e644:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e646:	4b46      	ldr	r3, [pc, #280]	@ (801e760 <tcp_receive+0xb0c>)
 801e648:	68db      	ldr	r3, [r3, #12]
 801e64a:	899b      	ldrh	r3, [r3, #12]
 801e64c:	b29b      	uxth	r3, r3
 801e64e:	4618      	mov	r0, r3
 801e650:	f7fa fb1e 	bl	8018c90 <lwip_htons>
 801e654:	4603      	mov	r3, r0
 801e656:	b2db      	uxtb	r3, r3
 801e658:	f003 0301 	and.w	r3, r3, #1
 801e65c:	2b00      	cmp	r3, #0
 801e65e:	f000 80b8 	beq.w	801e7d2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801e662:	4b45      	ldr	r3, [pc, #276]	@ (801e778 <tcp_receive+0xb24>)
 801e664:	781b      	ldrb	r3, [r3, #0]
 801e666:	f043 0320 	orr.w	r3, r3, #32
 801e66a:	b2da      	uxtb	r2, r3
 801e66c:	4b42      	ldr	r3, [pc, #264]	@ (801e778 <tcp_receive+0xb24>)
 801e66e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801e670:	e0af      	b.n	801e7d2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801e672:	687b      	ldr	r3, [r7, #4]
 801e674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e676:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801e678:	687b      	ldr	r3, [r7, #4]
 801e67a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e67c:	68db      	ldr	r3, [r3, #12]
 801e67e:	685b      	ldr	r3, [r3, #4]
 801e680:	4a36      	ldr	r2, [pc, #216]	@ (801e75c <tcp_receive+0xb08>)
 801e682:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801e684:	68bb      	ldr	r3, [r7, #8]
 801e686:	891b      	ldrh	r3, [r3, #8]
 801e688:	461c      	mov	r4, r3
 801e68a:	68bb      	ldr	r3, [r7, #8]
 801e68c:	68db      	ldr	r3, [r3, #12]
 801e68e:	899b      	ldrh	r3, [r3, #12]
 801e690:	b29b      	uxth	r3, r3
 801e692:	4618      	mov	r0, r3
 801e694:	f7fa fafc 	bl	8018c90 <lwip_htons>
 801e698:	4603      	mov	r3, r0
 801e69a:	b2db      	uxtb	r3, r3
 801e69c:	f003 0303 	and.w	r3, r3, #3
 801e6a0:	2b00      	cmp	r3, #0
 801e6a2:	d001      	beq.n	801e6a8 <tcp_receive+0xa54>
 801e6a4:	2301      	movs	r3, #1
 801e6a6:	e000      	b.n	801e6aa <tcp_receive+0xa56>
 801e6a8:	2300      	movs	r3, #0
 801e6aa:	191a      	adds	r2, r3, r4
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e6b0:	441a      	add	r2, r3
 801e6b2:	687b      	ldr	r3, [r7, #4]
 801e6b4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801e6b6:	687b      	ldr	r3, [r7, #4]
 801e6b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801e6ba:	461c      	mov	r4, r3
 801e6bc:	68bb      	ldr	r3, [r7, #8]
 801e6be:	891b      	ldrh	r3, [r3, #8]
 801e6c0:	461d      	mov	r5, r3
 801e6c2:	68bb      	ldr	r3, [r7, #8]
 801e6c4:	68db      	ldr	r3, [r3, #12]
 801e6c6:	899b      	ldrh	r3, [r3, #12]
 801e6c8:	b29b      	uxth	r3, r3
 801e6ca:	4618      	mov	r0, r3
 801e6cc:	f7fa fae0 	bl	8018c90 <lwip_htons>
 801e6d0:	4603      	mov	r3, r0
 801e6d2:	b2db      	uxtb	r3, r3
 801e6d4:	f003 0303 	and.w	r3, r3, #3
 801e6d8:	2b00      	cmp	r3, #0
 801e6da:	d001      	beq.n	801e6e0 <tcp_receive+0xa8c>
 801e6dc:	2301      	movs	r3, #1
 801e6de:	e000      	b.n	801e6e2 <tcp_receive+0xa8e>
 801e6e0:	2300      	movs	r3, #0
 801e6e2:	442b      	add	r3, r5
 801e6e4:	429c      	cmp	r4, r3
 801e6e6:	d206      	bcs.n	801e6f6 <tcp_receive+0xaa2>
 801e6e8:	4b1e      	ldr	r3, [pc, #120]	@ (801e764 <tcp_receive+0xb10>)
 801e6ea:	f240 622b 	movw	r2, #1579	@ 0x62b
 801e6ee:	4923      	ldr	r1, [pc, #140]	@ (801e77c <tcp_receive+0xb28>)
 801e6f0:	481e      	ldr	r0, [pc, #120]	@ (801e76c <tcp_receive+0xb18>)
 801e6f2:	f006 fef7 	bl	80254e4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801e6f6:	68bb      	ldr	r3, [r7, #8]
 801e6f8:	891b      	ldrh	r3, [r3, #8]
 801e6fa:	461c      	mov	r4, r3
 801e6fc:	68bb      	ldr	r3, [r7, #8]
 801e6fe:	68db      	ldr	r3, [r3, #12]
 801e700:	899b      	ldrh	r3, [r3, #12]
 801e702:	b29b      	uxth	r3, r3
 801e704:	4618      	mov	r0, r3
 801e706:	f7fa fac3 	bl	8018c90 <lwip_htons>
 801e70a:	4603      	mov	r3, r0
 801e70c:	b2db      	uxtb	r3, r3
 801e70e:	f003 0303 	and.w	r3, r3, #3
 801e712:	2b00      	cmp	r3, #0
 801e714:	d001      	beq.n	801e71a <tcp_receive+0xac6>
 801e716:	2301      	movs	r3, #1
 801e718:	e000      	b.n	801e71c <tcp_receive+0xac8>
 801e71a:	2300      	movs	r3, #0
 801e71c:	1919      	adds	r1, r3, r4
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801e722:	b28b      	uxth	r3, r1
 801e724:	1ad3      	subs	r3, r2, r3
 801e726:	b29a      	uxth	r2, r3
 801e728:	687b      	ldr	r3, [r7, #4]
 801e72a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801e72c:	6878      	ldr	r0, [r7, #4]
 801e72e:	f7fc fe2f 	bl	801b390 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801e732:	68bb      	ldr	r3, [r7, #8]
 801e734:	685b      	ldr	r3, [r3, #4]
 801e736:	891b      	ldrh	r3, [r3, #8]
 801e738:	2b00      	cmp	r3, #0
 801e73a:	d028      	beq.n	801e78e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801e73c:	4b0d      	ldr	r3, [pc, #52]	@ (801e774 <tcp_receive+0xb20>)
 801e73e:	681b      	ldr	r3, [r3, #0]
 801e740:	2b00      	cmp	r3, #0
 801e742:	d01d      	beq.n	801e780 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801e744:	4b0b      	ldr	r3, [pc, #44]	@ (801e774 <tcp_receive+0xb20>)
 801e746:	681a      	ldr	r2, [r3, #0]
 801e748:	68bb      	ldr	r3, [r7, #8]
 801e74a:	685b      	ldr	r3, [r3, #4]
 801e74c:	4619      	mov	r1, r3
 801e74e:	4610      	mov	r0, r2
 801e750:	f7fc f848 	bl	801a7e4 <pbuf_cat>
 801e754:	e018      	b.n	801e788 <tcp_receive+0xb34>
 801e756:	bf00      	nop
 801e758:	2400bea6 	.word	0x2400bea6
 801e75c:	2400be9c 	.word	0x2400be9c
 801e760:	2400be7c 	.word	0x2400be7c
 801e764:	0802b788 	.word	0x0802b788
 801e768:	0802bb68 	.word	0x0802bb68
 801e76c:	0802b7d4 	.word	0x0802b7d4
 801e770:	0802bba4 	.word	0x0802bba4
 801e774:	2400beac 	.word	0x2400beac
 801e778:	2400bea9 	.word	0x2400bea9
 801e77c:	0802bbc4 	.word	0x0802bbc4
            } else {
              recv_data = cseg->p;
 801e780:	68bb      	ldr	r3, [r7, #8]
 801e782:	685b      	ldr	r3, [r3, #4]
 801e784:	4a70      	ldr	r2, [pc, #448]	@ (801e948 <tcp_receive+0xcf4>)
 801e786:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801e788:	68bb      	ldr	r3, [r7, #8]
 801e78a:	2200      	movs	r2, #0
 801e78c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801e78e:	68bb      	ldr	r3, [r7, #8]
 801e790:	68db      	ldr	r3, [r3, #12]
 801e792:	899b      	ldrh	r3, [r3, #12]
 801e794:	b29b      	uxth	r3, r3
 801e796:	4618      	mov	r0, r3
 801e798:	f7fa fa7a 	bl	8018c90 <lwip_htons>
 801e79c:	4603      	mov	r3, r0
 801e79e:	b2db      	uxtb	r3, r3
 801e7a0:	f003 0301 	and.w	r3, r3, #1
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	d00d      	beq.n	801e7c4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801e7a8:	4b68      	ldr	r3, [pc, #416]	@ (801e94c <tcp_receive+0xcf8>)
 801e7aa:	781b      	ldrb	r3, [r3, #0]
 801e7ac:	f043 0320 	orr.w	r3, r3, #32
 801e7b0:	b2da      	uxtb	r2, r3
 801e7b2:	4b66      	ldr	r3, [pc, #408]	@ (801e94c <tcp_receive+0xcf8>)
 801e7b4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801e7b6:	687b      	ldr	r3, [r7, #4]
 801e7b8:	7d1b      	ldrb	r3, [r3, #20]
 801e7ba:	2b04      	cmp	r3, #4
 801e7bc:	d102      	bne.n	801e7c4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801e7be:	687b      	ldr	r3, [r7, #4]
 801e7c0:	2207      	movs	r2, #7
 801e7c2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801e7c4:	68bb      	ldr	r3, [r7, #8]
 801e7c6:	681a      	ldr	r2, [r3, #0]
 801e7c8:	687b      	ldr	r3, [r7, #4]
 801e7ca:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801e7cc:	68b8      	ldr	r0, [r7, #8]
 801e7ce:	f7fd fb06 	bl	801bdde <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801e7d2:	687b      	ldr	r3, [r7, #4]
 801e7d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e7d6:	2b00      	cmp	r3, #0
 801e7d8:	d008      	beq.n	801e7ec <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801e7da:	687b      	ldr	r3, [r7, #4]
 801e7dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e7de:	68db      	ldr	r3, [r3, #12]
 801e7e0:	685a      	ldr	r2, [r3, #4]
 801e7e2:	687b      	ldr	r3, [r7, #4]
 801e7e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801e7e6:	429a      	cmp	r2, r3
 801e7e8:	f43f af43 	beq.w	801e672 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	8b5b      	ldrh	r3, [r3, #26]
 801e7f0:	f003 0301 	and.w	r3, r3, #1
 801e7f4:	2b00      	cmp	r3, #0
 801e7f6:	d00e      	beq.n	801e816 <tcp_receive+0xbc2>
 801e7f8:	687b      	ldr	r3, [r7, #4]
 801e7fa:	8b5b      	ldrh	r3, [r3, #26]
 801e7fc:	f023 0301 	bic.w	r3, r3, #1
 801e800:	b29a      	uxth	r2, r3
 801e802:	687b      	ldr	r3, [r7, #4]
 801e804:	835a      	strh	r2, [r3, #26]
 801e806:	687b      	ldr	r3, [r7, #4]
 801e808:	8b5b      	ldrh	r3, [r3, #26]
 801e80a:	f043 0302 	orr.w	r3, r3, #2
 801e80e:	b29a      	uxth	r2, r3
 801e810:	687b      	ldr	r3, [r7, #4]
 801e812:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801e814:	e187      	b.n	801eb26 <tcp_receive+0xed2>
        tcp_ack(pcb);
 801e816:	687b      	ldr	r3, [r7, #4]
 801e818:	8b5b      	ldrh	r3, [r3, #26]
 801e81a:	f043 0301 	orr.w	r3, r3, #1
 801e81e:	b29a      	uxth	r2, r3
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801e824:	e17f      	b.n	801eb26 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801e826:	687b      	ldr	r3, [r7, #4]
 801e828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e82a:	2b00      	cmp	r3, #0
 801e82c:	d106      	bne.n	801e83c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801e82e:	4848      	ldr	r0, [pc, #288]	@ (801e950 <tcp_receive+0xcfc>)
 801e830:	f7fd faee 	bl	801be10 <tcp_seg_copy>
 801e834:	4602      	mov	r2, r0
 801e836:	687b      	ldr	r3, [r7, #4]
 801e838:	675a      	str	r2, [r3, #116]	@ 0x74
 801e83a:	e16c      	b.n	801eb16 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801e83c:	2300      	movs	r3, #0
 801e83e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801e840:	687b      	ldr	r3, [r7, #4]
 801e842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e844:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e846:	e156      	b.n	801eaf6 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801e848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e84a:	68db      	ldr	r3, [r3, #12]
 801e84c:	685a      	ldr	r2, [r3, #4]
 801e84e:	4b41      	ldr	r3, [pc, #260]	@ (801e954 <tcp_receive+0xd00>)
 801e850:	681b      	ldr	r3, [r3, #0]
 801e852:	429a      	cmp	r2, r3
 801e854:	d11d      	bne.n	801e892 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801e856:	4b3e      	ldr	r3, [pc, #248]	@ (801e950 <tcp_receive+0xcfc>)
 801e858:	891a      	ldrh	r2, [r3, #8]
 801e85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e85c:	891b      	ldrh	r3, [r3, #8]
 801e85e:	429a      	cmp	r2, r3
 801e860:	f240 814e 	bls.w	801eb00 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e864:	483a      	ldr	r0, [pc, #232]	@ (801e950 <tcp_receive+0xcfc>)
 801e866:	f7fd fad3 	bl	801be10 <tcp_seg_copy>
 801e86a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801e86c:	697b      	ldr	r3, [r7, #20]
 801e86e:	2b00      	cmp	r3, #0
 801e870:	f000 8148 	beq.w	801eb04 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 801e874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e876:	2b00      	cmp	r3, #0
 801e878:	d003      	beq.n	801e882 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801e87a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e87c:	697a      	ldr	r2, [r7, #20]
 801e87e:	601a      	str	r2, [r3, #0]
 801e880:	e002      	b.n	801e888 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801e882:	687b      	ldr	r3, [r7, #4]
 801e884:	697a      	ldr	r2, [r7, #20]
 801e886:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801e888:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801e88a:	6978      	ldr	r0, [r7, #20]
 801e88c:	f7ff f8de 	bl	801da4c <tcp_oos_insert_segment>
                }
                break;
 801e890:	e138      	b.n	801eb04 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801e892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e894:	2b00      	cmp	r3, #0
 801e896:	d117      	bne.n	801e8c8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801e898:	4b2e      	ldr	r3, [pc, #184]	@ (801e954 <tcp_receive+0xd00>)
 801e89a:	681a      	ldr	r2, [r3, #0]
 801e89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e89e:	68db      	ldr	r3, [r3, #12]
 801e8a0:	685b      	ldr	r3, [r3, #4]
 801e8a2:	1ad3      	subs	r3, r2, r3
 801e8a4:	2b00      	cmp	r3, #0
 801e8a6:	da57      	bge.n	801e958 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e8a8:	4829      	ldr	r0, [pc, #164]	@ (801e950 <tcp_receive+0xcfc>)
 801e8aa:	f7fd fab1 	bl	801be10 <tcp_seg_copy>
 801e8ae:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801e8b0:	69bb      	ldr	r3, [r7, #24]
 801e8b2:	2b00      	cmp	r3, #0
 801e8b4:	f000 8128 	beq.w	801eb08 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801e8b8:	687b      	ldr	r3, [r7, #4]
 801e8ba:	69ba      	ldr	r2, [r7, #24]
 801e8bc:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801e8be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801e8c0:	69b8      	ldr	r0, [r7, #24]
 801e8c2:	f7ff f8c3 	bl	801da4c <tcp_oos_insert_segment>
                  }
                  break;
 801e8c6:	e11f      	b.n	801eb08 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801e8c8:	4b22      	ldr	r3, [pc, #136]	@ (801e954 <tcp_receive+0xd00>)
 801e8ca:	681a      	ldr	r2, [r3, #0]
 801e8cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e8ce:	68db      	ldr	r3, [r3, #12]
 801e8d0:	685b      	ldr	r3, [r3, #4]
 801e8d2:	1ad3      	subs	r3, r2, r3
 801e8d4:	3b01      	subs	r3, #1
 801e8d6:	2b00      	cmp	r3, #0
 801e8d8:	db3e      	blt.n	801e958 <tcp_receive+0xd04>
 801e8da:	4b1e      	ldr	r3, [pc, #120]	@ (801e954 <tcp_receive+0xd00>)
 801e8dc:	681a      	ldr	r2, [r3, #0]
 801e8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e8e0:	68db      	ldr	r3, [r3, #12]
 801e8e2:	685b      	ldr	r3, [r3, #4]
 801e8e4:	1ad3      	subs	r3, r2, r3
 801e8e6:	3301      	adds	r3, #1
 801e8e8:	2b00      	cmp	r3, #0
 801e8ea:	dc35      	bgt.n	801e958 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e8ec:	4818      	ldr	r0, [pc, #96]	@ (801e950 <tcp_receive+0xcfc>)
 801e8ee:	f7fd fa8f 	bl	801be10 <tcp_seg_copy>
 801e8f2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801e8f4:	69fb      	ldr	r3, [r7, #28]
 801e8f6:	2b00      	cmp	r3, #0
 801e8f8:	f000 8108 	beq.w	801eb0c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801e8fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e8fe:	68db      	ldr	r3, [r3, #12]
 801e900:	685b      	ldr	r3, [r3, #4]
 801e902:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e904:	8912      	ldrh	r2, [r2, #8]
 801e906:	441a      	add	r2, r3
 801e908:	4b12      	ldr	r3, [pc, #72]	@ (801e954 <tcp_receive+0xd00>)
 801e90a:	681b      	ldr	r3, [r3, #0]
 801e90c:	1ad3      	subs	r3, r2, r3
 801e90e:	2b00      	cmp	r3, #0
 801e910:	dd12      	ble.n	801e938 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801e912:	4b10      	ldr	r3, [pc, #64]	@ (801e954 <tcp_receive+0xd00>)
 801e914:	681b      	ldr	r3, [r3, #0]
 801e916:	b29a      	uxth	r2, r3
 801e918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e91a:	68db      	ldr	r3, [r3, #12]
 801e91c:	685b      	ldr	r3, [r3, #4]
 801e91e:	b29b      	uxth	r3, r3
 801e920:	1ad3      	subs	r3, r2, r3
 801e922:	b29a      	uxth	r2, r3
 801e924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e926:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801e928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e92a:	685a      	ldr	r2, [r3, #4]
 801e92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e92e:	891b      	ldrh	r3, [r3, #8]
 801e930:	4619      	mov	r1, r3
 801e932:	4610      	mov	r0, r2
 801e934:	f7fb fcd0 	bl	801a2d8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801e938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e93a:	69fa      	ldr	r2, [r7, #28]
 801e93c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801e93e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801e940:	69f8      	ldr	r0, [r7, #28]
 801e942:	f7ff f883 	bl	801da4c <tcp_oos_insert_segment>
                  }
                  break;
 801e946:	e0e1      	b.n	801eb0c <tcp_receive+0xeb8>
 801e948:	2400beac 	.word	0x2400beac
 801e94c:	2400bea9 	.word	0x2400bea9
 801e950:	2400be7c 	.word	0x2400be7c
 801e954:	2400be9c 	.word	0x2400be9c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801e958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e95a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801e95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e95e:	681b      	ldr	r3, [r3, #0]
 801e960:	2b00      	cmp	r3, #0
 801e962:	f040 80c5 	bne.w	801eaf0 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801e966:	4b7f      	ldr	r3, [pc, #508]	@ (801eb64 <tcp_receive+0xf10>)
 801e968:	681a      	ldr	r2, [r3, #0]
 801e96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e96c:	68db      	ldr	r3, [r3, #12]
 801e96e:	685b      	ldr	r3, [r3, #4]
 801e970:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801e972:	2b00      	cmp	r3, #0
 801e974:	f340 80bc 	ble.w	801eaf0 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801e978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e97a:	68db      	ldr	r3, [r3, #12]
 801e97c:	899b      	ldrh	r3, [r3, #12]
 801e97e:	b29b      	uxth	r3, r3
 801e980:	4618      	mov	r0, r3
 801e982:	f7fa f985 	bl	8018c90 <lwip_htons>
 801e986:	4603      	mov	r3, r0
 801e988:	b2db      	uxtb	r3, r3
 801e98a:	f003 0301 	and.w	r3, r3, #1
 801e98e:	2b00      	cmp	r3, #0
 801e990:	f040 80be 	bne.w	801eb10 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801e994:	4874      	ldr	r0, [pc, #464]	@ (801eb68 <tcp_receive+0xf14>)
 801e996:	f7fd fa3b 	bl	801be10 <tcp_seg_copy>
 801e99a:	4602      	mov	r2, r0
 801e99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e99e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801e9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e9a2:	681b      	ldr	r3, [r3, #0]
 801e9a4:	2b00      	cmp	r3, #0
 801e9a6:	f000 80b5 	beq.w	801eb14 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801e9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e9ac:	68db      	ldr	r3, [r3, #12]
 801e9ae:	685b      	ldr	r3, [r3, #4]
 801e9b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e9b2:	8912      	ldrh	r2, [r2, #8]
 801e9b4:	441a      	add	r2, r3
 801e9b6:	4b6b      	ldr	r3, [pc, #428]	@ (801eb64 <tcp_receive+0xf10>)
 801e9b8:	681b      	ldr	r3, [r3, #0]
 801e9ba:	1ad3      	subs	r3, r2, r3
 801e9bc:	2b00      	cmp	r3, #0
 801e9be:	dd12      	ble.n	801e9e6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801e9c0:	4b68      	ldr	r3, [pc, #416]	@ (801eb64 <tcp_receive+0xf10>)
 801e9c2:	681b      	ldr	r3, [r3, #0]
 801e9c4:	b29a      	uxth	r2, r3
 801e9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e9c8:	68db      	ldr	r3, [r3, #12]
 801e9ca:	685b      	ldr	r3, [r3, #4]
 801e9cc:	b29b      	uxth	r3, r3
 801e9ce:	1ad3      	subs	r3, r2, r3
 801e9d0:	b29a      	uxth	r2, r3
 801e9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e9d4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801e9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e9d8:	685a      	ldr	r2, [r3, #4]
 801e9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e9dc:	891b      	ldrh	r3, [r3, #8]
 801e9de:	4619      	mov	r1, r3
 801e9e0:	4610      	mov	r0, r2
 801e9e2:	f7fb fc79 	bl	801a2d8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801e9e6:	4b61      	ldr	r3, [pc, #388]	@ (801eb6c <tcp_receive+0xf18>)
 801e9e8:	881b      	ldrh	r3, [r3, #0]
 801e9ea:	461a      	mov	r2, r3
 801e9ec:	4b5d      	ldr	r3, [pc, #372]	@ (801eb64 <tcp_receive+0xf10>)
 801e9ee:	681b      	ldr	r3, [r3, #0]
 801e9f0:	441a      	add	r2, r3
 801e9f2:	687b      	ldr	r3, [r7, #4]
 801e9f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e9f6:	6879      	ldr	r1, [r7, #4]
 801e9f8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801e9fa:	440b      	add	r3, r1
 801e9fc:	1ad3      	subs	r3, r2, r3
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	f340 8088 	ble.w	801eb14 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801ea04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea06:	681b      	ldr	r3, [r3, #0]
 801ea08:	68db      	ldr	r3, [r3, #12]
 801ea0a:	899b      	ldrh	r3, [r3, #12]
 801ea0c:	b29b      	uxth	r3, r3
 801ea0e:	4618      	mov	r0, r3
 801ea10:	f7fa f93e 	bl	8018c90 <lwip_htons>
 801ea14:	4603      	mov	r3, r0
 801ea16:	b2db      	uxtb	r3, r3
 801ea18:	f003 0301 	and.w	r3, r3, #1
 801ea1c:	2b00      	cmp	r3, #0
 801ea1e:	d021      	beq.n	801ea64 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801ea20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea22:	681b      	ldr	r3, [r3, #0]
 801ea24:	68db      	ldr	r3, [r3, #12]
 801ea26:	899b      	ldrh	r3, [r3, #12]
 801ea28:	b29b      	uxth	r3, r3
 801ea2a:	b21b      	sxth	r3, r3
 801ea2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801ea30:	b21c      	sxth	r4, r3
 801ea32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea34:	681b      	ldr	r3, [r3, #0]
 801ea36:	68db      	ldr	r3, [r3, #12]
 801ea38:	899b      	ldrh	r3, [r3, #12]
 801ea3a:	b29b      	uxth	r3, r3
 801ea3c:	4618      	mov	r0, r3
 801ea3e:	f7fa f927 	bl	8018c90 <lwip_htons>
 801ea42:	4603      	mov	r3, r0
 801ea44:	b2db      	uxtb	r3, r3
 801ea46:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801ea4a:	b29b      	uxth	r3, r3
 801ea4c:	4618      	mov	r0, r3
 801ea4e:	f7fa f91f 	bl	8018c90 <lwip_htons>
 801ea52:	4603      	mov	r3, r0
 801ea54:	b21b      	sxth	r3, r3
 801ea56:	4323      	orrs	r3, r4
 801ea58:	b21a      	sxth	r2, r3
 801ea5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea5c:	681b      	ldr	r3, [r3, #0]
 801ea5e:	68db      	ldr	r3, [r3, #12]
 801ea60:	b292      	uxth	r2, r2
 801ea62:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801ea64:	687b      	ldr	r3, [r7, #4]
 801ea66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ea68:	b29a      	uxth	r2, r3
 801ea6a:	687b      	ldr	r3, [r7, #4]
 801ea6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ea6e:	4413      	add	r3, r2
 801ea70:	b299      	uxth	r1, r3
 801ea72:	4b3c      	ldr	r3, [pc, #240]	@ (801eb64 <tcp_receive+0xf10>)
 801ea74:	681b      	ldr	r3, [r3, #0]
 801ea76:	b29a      	uxth	r2, r3
 801ea78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea7a:	681b      	ldr	r3, [r3, #0]
 801ea7c:	1a8a      	subs	r2, r1, r2
 801ea7e:	b292      	uxth	r2, r2
 801ea80:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801ea82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea84:	681b      	ldr	r3, [r3, #0]
 801ea86:	685a      	ldr	r2, [r3, #4]
 801ea88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea8a:	681b      	ldr	r3, [r3, #0]
 801ea8c:	891b      	ldrh	r3, [r3, #8]
 801ea8e:	4619      	mov	r1, r3
 801ea90:	4610      	mov	r0, r2
 801ea92:	f7fb fc21 	bl	801a2d8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801ea96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea98:	681b      	ldr	r3, [r3, #0]
 801ea9a:	891c      	ldrh	r4, [r3, #8]
 801ea9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea9e:	681b      	ldr	r3, [r3, #0]
 801eaa0:	68db      	ldr	r3, [r3, #12]
 801eaa2:	899b      	ldrh	r3, [r3, #12]
 801eaa4:	b29b      	uxth	r3, r3
 801eaa6:	4618      	mov	r0, r3
 801eaa8:	f7fa f8f2 	bl	8018c90 <lwip_htons>
 801eaac:	4603      	mov	r3, r0
 801eaae:	b2db      	uxtb	r3, r3
 801eab0:	f003 0303 	and.w	r3, r3, #3
 801eab4:	2b00      	cmp	r3, #0
 801eab6:	d001      	beq.n	801eabc <tcp_receive+0xe68>
 801eab8:	2301      	movs	r3, #1
 801eaba:	e000      	b.n	801eabe <tcp_receive+0xe6a>
 801eabc:	2300      	movs	r3, #0
 801eabe:	4423      	add	r3, r4
 801eac0:	b29a      	uxth	r2, r3
 801eac2:	4b2a      	ldr	r3, [pc, #168]	@ (801eb6c <tcp_receive+0xf18>)
 801eac4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801eac6:	4b29      	ldr	r3, [pc, #164]	@ (801eb6c <tcp_receive+0xf18>)
 801eac8:	881b      	ldrh	r3, [r3, #0]
 801eaca:	461a      	mov	r2, r3
 801eacc:	4b25      	ldr	r3, [pc, #148]	@ (801eb64 <tcp_receive+0xf10>)
 801eace:	681b      	ldr	r3, [r3, #0]
 801ead0:	441a      	add	r2, r3
 801ead2:	687b      	ldr	r3, [r7, #4]
 801ead4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ead6:	6879      	ldr	r1, [r7, #4]
 801ead8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801eada:	440b      	add	r3, r1
 801eadc:	429a      	cmp	r2, r3
 801eade:	d019      	beq.n	801eb14 <tcp_receive+0xec0>
 801eae0:	4b23      	ldr	r3, [pc, #140]	@ (801eb70 <tcp_receive+0xf1c>)
 801eae2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801eae6:	4923      	ldr	r1, [pc, #140]	@ (801eb74 <tcp_receive+0xf20>)
 801eae8:	4823      	ldr	r0, [pc, #140]	@ (801eb78 <tcp_receive+0xf24>)
 801eaea:	f006 fcfb 	bl	80254e4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801eaee:	e011      	b.n	801eb14 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801eaf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eaf2:	681b      	ldr	r3, [r3, #0]
 801eaf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801eaf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eaf8:	2b00      	cmp	r3, #0
 801eafa:	f47f aea5 	bne.w	801e848 <tcp_receive+0xbf4>
 801eafe:	e00a      	b.n	801eb16 <tcp_receive+0xec2>
                break;
 801eb00:	bf00      	nop
 801eb02:	e008      	b.n	801eb16 <tcp_receive+0xec2>
                break;
 801eb04:	bf00      	nop
 801eb06:	e006      	b.n	801eb16 <tcp_receive+0xec2>
                  break;
 801eb08:	bf00      	nop
 801eb0a:	e004      	b.n	801eb16 <tcp_receive+0xec2>
                  break;
 801eb0c:	bf00      	nop
 801eb0e:	e002      	b.n	801eb16 <tcp_receive+0xec2>
                  break;
 801eb10:	bf00      	nop
 801eb12:	e000      	b.n	801eb16 <tcp_receive+0xec2>
                break;
 801eb14:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801eb16:	6878      	ldr	r0, [r7, #4]
 801eb18:	f001 fe88 	bl	802082c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801eb1c:	e003      	b.n	801eb26 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801eb1e:	6878      	ldr	r0, [r7, #4]
 801eb20:	f001 fe84 	bl	802082c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801eb24:	e01a      	b.n	801eb5c <tcp_receive+0xf08>
 801eb26:	e019      	b.n	801eb5c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801eb28:	4b0e      	ldr	r3, [pc, #56]	@ (801eb64 <tcp_receive+0xf10>)
 801eb2a:	681a      	ldr	r2, [r3, #0]
 801eb2c:	687b      	ldr	r3, [r7, #4]
 801eb2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801eb30:	1ad3      	subs	r3, r2, r3
 801eb32:	2b00      	cmp	r3, #0
 801eb34:	db0a      	blt.n	801eb4c <tcp_receive+0xef8>
 801eb36:	4b0b      	ldr	r3, [pc, #44]	@ (801eb64 <tcp_receive+0xf10>)
 801eb38:	681a      	ldr	r2, [r3, #0]
 801eb3a:	687b      	ldr	r3, [r7, #4]
 801eb3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801eb3e:	6879      	ldr	r1, [r7, #4]
 801eb40:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801eb42:	440b      	add	r3, r1
 801eb44:	1ad3      	subs	r3, r2, r3
 801eb46:	3301      	adds	r3, #1
 801eb48:	2b00      	cmp	r3, #0
 801eb4a:	dd07      	ble.n	801eb5c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801eb4c:	687b      	ldr	r3, [r7, #4]
 801eb4e:	8b5b      	ldrh	r3, [r3, #26]
 801eb50:	f043 0302 	orr.w	r3, r3, #2
 801eb54:	b29a      	uxth	r2, r3
 801eb56:	687b      	ldr	r3, [r7, #4]
 801eb58:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801eb5a:	e7ff      	b.n	801eb5c <tcp_receive+0xf08>
 801eb5c:	bf00      	nop
 801eb5e:	3750      	adds	r7, #80	@ 0x50
 801eb60:	46bd      	mov	sp, r7
 801eb62:	bdb0      	pop	{r4, r5, r7, pc}
 801eb64:	2400be9c 	.word	0x2400be9c
 801eb68:	2400be7c 	.word	0x2400be7c
 801eb6c:	2400bea6 	.word	0x2400bea6
 801eb70:	0802b788 	.word	0x0802b788
 801eb74:	0802bb30 	.word	0x0802bb30
 801eb78:	0802b7d4 	.word	0x0802b7d4

0801eb7c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801eb7c:	b480      	push	{r7}
 801eb7e:	b083      	sub	sp, #12
 801eb80:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801eb82:	4b15      	ldr	r3, [pc, #84]	@ (801ebd8 <tcp_get_next_optbyte+0x5c>)
 801eb84:	881b      	ldrh	r3, [r3, #0]
 801eb86:	1c5a      	adds	r2, r3, #1
 801eb88:	b291      	uxth	r1, r2
 801eb8a:	4a13      	ldr	r2, [pc, #76]	@ (801ebd8 <tcp_get_next_optbyte+0x5c>)
 801eb8c:	8011      	strh	r1, [r2, #0]
 801eb8e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801eb90:	4b12      	ldr	r3, [pc, #72]	@ (801ebdc <tcp_get_next_optbyte+0x60>)
 801eb92:	681b      	ldr	r3, [r3, #0]
 801eb94:	2b00      	cmp	r3, #0
 801eb96:	d004      	beq.n	801eba2 <tcp_get_next_optbyte+0x26>
 801eb98:	4b11      	ldr	r3, [pc, #68]	@ (801ebe0 <tcp_get_next_optbyte+0x64>)
 801eb9a:	881b      	ldrh	r3, [r3, #0]
 801eb9c:	88fa      	ldrh	r2, [r7, #6]
 801eb9e:	429a      	cmp	r2, r3
 801eba0:	d208      	bcs.n	801ebb4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801eba2:	4b10      	ldr	r3, [pc, #64]	@ (801ebe4 <tcp_get_next_optbyte+0x68>)
 801eba4:	681b      	ldr	r3, [r3, #0]
 801eba6:	3314      	adds	r3, #20
 801eba8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801ebaa:	88fb      	ldrh	r3, [r7, #6]
 801ebac:	683a      	ldr	r2, [r7, #0]
 801ebae:	4413      	add	r3, r2
 801ebb0:	781b      	ldrb	r3, [r3, #0]
 801ebb2:	e00b      	b.n	801ebcc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ebb4:	88fb      	ldrh	r3, [r7, #6]
 801ebb6:	b2da      	uxtb	r2, r3
 801ebb8:	4b09      	ldr	r3, [pc, #36]	@ (801ebe0 <tcp_get_next_optbyte+0x64>)
 801ebba:	881b      	ldrh	r3, [r3, #0]
 801ebbc:	b2db      	uxtb	r3, r3
 801ebbe:	1ad3      	subs	r3, r2, r3
 801ebc0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801ebc2:	4b06      	ldr	r3, [pc, #24]	@ (801ebdc <tcp_get_next_optbyte+0x60>)
 801ebc4:	681a      	ldr	r2, [r3, #0]
 801ebc6:	797b      	ldrb	r3, [r7, #5]
 801ebc8:	4413      	add	r3, r2
 801ebca:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ebcc:	4618      	mov	r0, r3
 801ebce:	370c      	adds	r7, #12
 801ebd0:	46bd      	mov	sp, r7
 801ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebd6:	4770      	bx	lr
 801ebd8:	2400be98 	.word	0x2400be98
 801ebdc:	2400be94 	.word	0x2400be94
 801ebe0:	2400be92 	.word	0x2400be92
 801ebe4:	2400be8c 	.word	0x2400be8c

0801ebe8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801ebe8:	b580      	push	{r7, lr}
 801ebea:	b084      	sub	sp, #16
 801ebec:	af00      	add	r7, sp, #0
 801ebee:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801ebf0:	687b      	ldr	r3, [r7, #4]
 801ebf2:	2b00      	cmp	r3, #0
 801ebf4:	d106      	bne.n	801ec04 <tcp_parseopt+0x1c>
 801ebf6:	4b32      	ldr	r3, [pc, #200]	@ (801ecc0 <tcp_parseopt+0xd8>)
 801ebf8:	f240 727d 	movw	r2, #1917	@ 0x77d
 801ebfc:	4931      	ldr	r1, [pc, #196]	@ (801ecc4 <tcp_parseopt+0xdc>)
 801ebfe:	4832      	ldr	r0, [pc, #200]	@ (801ecc8 <tcp_parseopt+0xe0>)
 801ec00:	f006 fc70 	bl	80254e4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801ec04:	4b31      	ldr	r3, [pc, #196]	@ (801eccc <tcp_parseopt+0xe4>)
 801ec06:	881b      	ldrh	r3, [r3, #0]
 801ec08:	2b00      	cmp	r3, #0
 801ec0a:	d056      	beq.n	801ecba <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ec0c:	4b30      	ldr	r3, [pc, #192]	@ (801ecd0 <tcp_parseopt+0xe8>)
 801ec0e:	2200      	movs	r2, #0
 801ec10:	801a      	strh	r2, [r3, #0]
 801ec12:	e046      	b.n	801eca2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 801ec14:	f7ff ffb2 	bl	801eb7c <tcp_get_next_optbyte>
 801ec18:	4603      	mov	r3, r0
 801ec1a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801ec1c:	7bfb      	ldrb	r3, [r7, #15]
 801ec1e:	2b02      	cmp	r3, #2
 801ec20:	d006      	beq.n	801ec30 <tcp_parseopt+0x48>
 801ec22:	2b02      	cmp	r3, #2
 801ec24:	dc2a      	bgt.n	801ec7c <tcp_parseopt+0x94>
 801ec26:	2b00      	cmp	r3, #0
 801ec28:	d042      	beq.n	801ecb0 <tcp_parseopt+0xc8>
 801ec2a:	2b01      	cmp	r3, #1
 801ec2c:	d038      	beq.n	801eca0 <tcp_parseopt+0xb8>
 801ec2e:	e025      	b.n	801ec7c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801ec30:	f7ff ffa4 	bl	801eb7c <tcp_get_next_optbyte>
 801ec34:	4603      	mov	r3, r0
 801ec36:	2b04      	cmp	r3, #4
 801ec38:	d13c      	bne.n	801ecb4 <tcp_parseopt+0xcc>
 801ec3a:	4b25      	ldr	r3, [pc, #148]	@ (801ecd0 <tcp_parseopt+0xe8>)
 801ec3c:	881b      	ldrh	r3, [r3, #0]
 801ec3e:	3301      	adds	r3, #1
 801ec40:	4a22      	ldr	r2, [pc, #136]	@ (801eccc <tcp_parseopt+0xe4>)
 801ec42:	8812      	ldrh	r2, [r2, #0]
 801ec44:	4293      	cmp	r3, r2
 801ec46:	da35      	bge.n	801ecb4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ec48:	f7ff ff98 	bl	801eb7c <tcp_get_next_optbyte>
 801ec4c:	4603      	mov	r3, r0
 801ec4e:	021b      	lsls	r3, r3, #8
 801ec50:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801ec52:	f7ff ff93 	bl	801eb7c <tcp_get_next_optbyte>
 801ec56:	4603      	mov	r3, r0
 801ec58:	461a      	mov	r2, r3
 801ec5a:	89bb      	ldrh	r3, [r7, #12]
 801ec5c:	4313      	orrs	r3, r2
 801ec5e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801ec60:	89bb      	ldrh	r3, [r7, #12]
 801ec62:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801ec66:	d804      	bhi.n	801ec72 <tcp_parseopt+0x8a>
 801ec68:	89bb      	ldrh	r3, [r7, #12]
 801ec6a:	2b00      	cmp	r3, #0
 801ec6c:	d001      	beq.n	801ec72 <tcp_parseopt+0x8a>
 801ec6e:	89ba      	ldrh	r2, [r7, #12]
 801ec70:	e001      	b.n	801ec76 <tcp_parseopt+0x8e>
 801ec72:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801ec76:	687b      	ldr	r3, [r7, #4]
 801ec78:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801ec7a:	e012      	b.n	801eca2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801ec7c:	f7ff ff7e 	bl	801eb7c <tcp_get_next_optbyte>
 801ec80:	4603      	mov	r3, r0
 801ec82:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801ec84:	7afb      	ldrb	r3, [r7, #11]
 801ec86:	2b01      	cmp	r3, #1
 801ec88:	d916      	bls.n	801ecb8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801ec8a:	7afb      	ldrb	r3, [r7, #11]
 801ec8c:	b29a      	uxth	r2, r3
 801ec8e:	4b10      	ldr	r3, [pc, #64]	@ (801ecd0 <tcp_parseopt+0xe8>)
 801ec90:	881b      	ldrh	r3, [r3, #0]
 801ec92:	4413      	add	r3, r2
 801ec94:	b29b      	uxth	r3, r3
 801ec96:	3b02      	subs	r3, #2
 801ec98:	b29a      	uxth	r2, r3
 801ec9a:	4b0d      	ldr	r3, [pc, #52]	@ (801ecd0 <tcp_parseopt+0xe8>)
 801ec9c:	801a      	strh	r2, [r3, #0]
 801ec9e:	e000      	b.n	801eca2 <tcp_parseopt+0xba>
          break;
 801eca0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801eca2:	4b0b      	ldr	r3, [pc, #44]	@ (801ecd0 <tcp_parseopt+0xe8>)
 801eca4:	881a      	ldrh	r2, [r3, #0]
 801eca6:	4b09      	ldr	r3, [pc, #36]	@ (801eccc <tcp_parseopt+0xe4>)
 801eca8:	881b      	ldrh	r3, [r3, #0]
 801ecaa:	429a      	cmp	r2, r3
 801ecac:	d3b2      	bcc.n	801ec14 <tcp_parseopt+0x2c>
 801ecae:	e004      	b.n	801ecba <tcp_parseopt+0xd2>
          return;
 801ecb0:	bf00      	nop
 801ecb2:	e002      	b.n	801ecba <tcp_parseopt+0xd2>
            return;
 801ecb4:	bf00      	nop
 801ecb6:	e000      	b.n	801ecba <tcp_parseopt+0xd2>
            return;
 801ecb8:	bf00      	nop
      }
    }
  }
}
 801ecba:	3710      	adds	r7, #16
 801ecbc:	46bd      	mov	sp, r7
 801ecbe:	bd80      	pop	{r7, pc}
 801ecc0:	0802b788 	.word	0x0802b788
 801ecc4:	0802bbec 	.word	0x0802bbec
 801ecc8:	0802b7d4 	.word	0x0802b7d4
 801eccc:	2400be90 	.word	0x2400be90
 801ecd0:	2400be98 	.word	0x2400be98

0801ecd4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801ecd4:	b480      	push	{r7}
 801ecd6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801ecd8:	4b05      	ldr	r3, [pc, #20]	@ (801ecf0 <tcp_trigger_input_pcb_close+0x1c>)
 801ecda:	781b      	ldrb	r3, [r3, #0]
 801ecdc:	f043 0310 	orr.w	r3, r3, #16
 801ece0:	b2da      	uxtb	r2, r3
 801ece2:	4b03      	ldr	r3, [pc, #12]	@ (801ecf0 <tcp_trigger_input_pcb_close+0x1c>)
 801ece4:	701a      	strb	r2, [r3, #0]
}
 801ece6:	bf00      	nop
 801ece8:	46bd      	mov	sp, r7
 801ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecee:	4770      	bx	lr
 801ecf0:	2400bea9 	.word	0x2400bea9

0801ecf4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801ecf4:	b580      	push	{r7, lr}
 801ecf6:	b084      	sub	sp, #16
 801ecf8:	af00      	add	r7, sp, #0
 801ecfa:	60f8      	str	r0, [r7, #12]
 801ecfc:	60b9      	str	r1, [r7, #8]
 801ecfe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801ed00:	68fb      	ldr	r3, [r7, #12]
 801ed02:	2b00      	cmp	r3, #0
 801ed04:	d00a      	beq.n	801ed1c <tcp_route+0x28>
 801ed06:	68fb      	ldr	r3, [r7, #12]
 801ed08:	7a1b      	ldrb	r3, [r3, #8]
 801ed0a:	2b00      	cmp	r3, #0
 801ed0c:	d006      	beq.n	801ed1c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801ed0e:	68fb      	ldr	r3, [r7, #12]
 801ed10:	7a1b      	ldrb	r3, [r3, #8]
 801ed12:	4618      	mov	r0, r3
 801ed14:	f7fb f8d8 	bl	8019ec8 <netif_get_by_index>
 801ed18:	4603      	mov	r3, r0
 801ed1a:	e003      	b.n	801ed24 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801ed1c:	6878      	ldr	r0, [r7, #4]
 801ed1e:	f003 fe59 	bl	80229d4 <ip4_route>
 801ed22:	4603      	mov	r3, r0
  }
}
 801ed24:	4618      	mov	r0, r3
 801ed26:	3710      	adds	r7, #16
 801ed28:	46bd      	mov	sp, r7
 801ed2a:	bd80      	pop	{r7, pc}

0801ed2c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801ed2c:	b590      	push	{r4, r7, lr}
 801ed2e:	b087      	sub	sp, #28
 801ed30:	af00      	add	r7, sp, #0
 801ed32:	60f8      	str	r0, [r7, #12]
 801ed34:	60b9      	str	r1, [r7, #8]
 801ed36:	603b      	str	r3, [r7, #0]
 801ed38:	4613      	mov	r3, r2
 801ed3a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801ed3c:	68fb      	ldr	r3, [r7, #12]
 801ed3e:	2b00      	cmp	r3, #0
 801ed40:	d105      	bne.n	801ed4e <tcp_create_segment+0x22>
 801ed42:	4b43      	ldr	r3, [pc, #268]	@ (801ee50 <tcp_create_segment+0x124>)
 801ed44:	22a3      	movs	r2, #163	@ 0xa3
 801ed46:	4943      	ldr	r1, [pc, #268]	@ (801ee54 <tcp_create_segment+0x128>)
 801ed48:	4843      	ldr	r0, [pc, #268]	@ (801ee58 <tcp_create_segment+0x12c>)
 801ed4a:	f006 fbcb 	bl	80254e4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801ed4e:	68bb      	ldr	r3, [r7, #8]
 801ed50:	2b00      	cmp	r3, #0
 801ed52:	d105      	bne.n	801ed60 <tcp_create_segment+0x34>
 801ed54:	4b3e      	ldr	r3, [pc, #248]	@ (801ee50 <tcp_create_segment+0x124>)
 801ed56:	22a4      	movs	r2, #164	@ 0xa4
 801ed58:	4940      	ldr	r1, [pc, #256]	@ (801ee5c <tcp_create_segment+0x130>)
 801ed5a:	483f      	ldr	r0, [pc, #252]	@ (801ee58 <tcp_create_segment+0x12c>)
 801ed5c:	f006 fbc2 	bl	80254e4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ed60:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801ed64:	009b      	lsls	r3, r3, #2
 801ed66:	b2db      	uxtb	r3, r3
 801ed68:	f003 0304 	and.w	r3, r3, #4
 801ed6c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801ed6e:	2003      	movs	r0, #3
 801ed70:	f7fa fd1e 	bl	80197b0 <memp_malloc>
 801ed74:	6138      	str	r0, [r7, #16]
 801ed76:	693b      	ldr	r3, [r7, #16]
 801ed78:	2b00      	cmp	r3, #0
 801ed7a:	d104      	bne.n	801ed86 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801ed7c:	68b8      	ldr	r0, [r7, #8]
 801ed7e:	f7fb fc63 	bl	801a648 <pbuf_free>
    return NULL;
 801ed82:	2300      	movs	r3, #0
 801ed84:	e060      	b.n	801ee48 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801ed86:	693b      	ldr	r3, [r7, #16]
 801ed88:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801ed8c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801ed8e:	693b      	ldr	r3, [r7, #16]
 801ed90:	2200      	movs	r2, #0
 801ed92:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801ed94:	693b      	ldr	r3, [r7, #16]
 801ed96:	68ba      	ldr	r2, [r7, #8]
 801ed98:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801ed9a:	68bb      	ldr	r3, [r7, #8]
 801ed9c:	891a      	ldrh	r2, [r3, #8]
 801ed9e:	7dfb      	ldrb	r3, [r7, #23]
 801eda0:	b29b      	uxth	r3, r3
 801eda2:	429a      	cmp	r2, r3
 801eda4:	d205      	bcs.n	801edb2 <tcp_create_segment+0x86>
 801eda6:	4b2a      	ldr	r3, [pc, #168]	@ (801ee50 <tcp_create_segment+0x124>)
 801eda8:	22b0      	movs	r2, #176	@ 0xb0
 801edaa:	492d      	ldr	r1, [pc, #180]	@ (801ee60 <tcp_create_segment+0x134>)
 801edac:	482a      	ldr	r0, [pc, #168]	@ (801ee58 <tcp_create_segment+0x12c>)
 801edae:	f006 fb99 	bl	80254e4 <iprintf>
  seg->len = p->tot_len - optlen;
 801edb2:	68bb      	ldr	r3, [r7, #8]
 801edb4:	891a      	ldrh	r2, [r3, #8]
 801edb6:	7dfb      	ldrb	r3, [r7, #23]
 801edb8:	b29b      	uxth	r3, r3
 801edba:	1ad3      	subs	r3, r2, r3
 801edbc:	b29a      	uxth	r2, r3
 801edbe:	693b      	ldr	r3, [r7, #16]
 801edc0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801edc2:	2114      	movs	r1, #20
 801edc4:	68b8      	ldr	r0, [r7, #8]
 801edc6:	f7fb fb77 	bl	801a4b8 <pbuf_add_header>
 801edca:	4603      	mov	r3, r0
 801edcc:	2b00      	cmp	r3, #0
 801edce:	d004      	beq.n	801edda <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801edd0:	6938      	ldr	r0, [r7, #16]
 801edd2:	f7fd f804 	bl	801bdde <tcp_seg_free>
    return NULL;
 801edd6:	2300      	movs	r3, #0
 801edd8:	e036      	b.n	801ee48 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801edda:	693b      	ldr	r3, [r7, #16]
 801eddc:	685b      	ldr	r3, [r3, #4]
 801edde:	685a      	ldr	r2, [r3, #4]
 801ede0:	693b      	ldr	r3, [r7, #16]
 801ede2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801ede4:	68fb      	ldr	r3, [r7, #12]
 801ede6:	8ada      	ldrh	r2, [r3, #22]
 801ede8:	693b      	ldr	r3, [r7, #16]
 801edea:	68dc      	ldr	r4, [r3, #12]
 801edec:	4610      	mov	r0, r2
 801edee:	f7f9 ff4f 	bl	8018c90 <lwip_htons>
 801edf2:	4603      	mov	r3, r0
 801edf4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801edf6:	68fb      	ldr	r3, [r7, #12]
 801edf8:	8b1a      	ldrh	r2, [r3, #24]
 801edfa:	693b      	ldr	r3, [r7, #16]
 801edfc:	68dc      	ldr	r4, [r3, #12]
 801edfe:	4610      	mov	r0, r2
 801ee00:	f7f9 ff46 	bl	8018c90 <lwip_htons>
 801ee04:	4603      	mov	r3, r0
 801ee06:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801ee08:	693b      	ldr	r3, [r7, #16]
 801ee0a:	68dc      	ldr	r4, [r3, #12]
 801ee0c:	6838      	ldr	r0, [r7, #0]
 801ee0e:	f7f9 ff54 	bl	8018cba <lwip_htonl>
 801ee12:	4603      	mov	r3, r0
 801ee14:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801ee16:	7dfb      	ldrb	r3, [r7, #23]
 801ee18:	089b      	lsrs	r3, r3, #2
 801ee1a:	b2db      	uxtb	r3, r3
 801ee1c:	3305      	adds	r3, #5
 801ee1e:	b29b      	uxth	r3, r3
 801ee20:	031b      	lsls	r3, r3, #12
 801ee22:	b29a      	uxth	r2, r3
 801ee24:	79fb      	ldrb	r3, [r7, #7]
 801ee26:	b29b      	uxth	r3, r3
 801ee28:	4313      	orrs	r3, r2
 801ee2a:	b29a      	uxth	r2, r3
 801ee2c:	693b      	ldr	r3, [r7, #16]
 801ee2e:	68dc      	ldr	r4, [r3, #12]
 801ee30:	4610      	mov	r0, r2
 801ee32:	f7f9 ff2d 	bl	8018c90 <lwip_htons>
 801ee36:	4603      	mov	r3, r0
 801ee38:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801ee3a:	693b      	ldr	r3, [r7, #16]
 801ee3c:	68db      	ldr	r3, [r3, #12]
 801ee3e:	2200      	movs	r2, #0
 801ee40:	749a      	strb	r2, [r3, #18]
 801ee42:	2200      	movs	r2, #0
 801ee44:	74da      	strb	r2, [r3, #19]
  return seg;
 801ee46:	693b      	ldr	r3, [r7, #16]
}
 801ee48:	4618      	mov	r0, r3
 801ee4a:	371c      	adds	r7, #28
 801ee4c:	46bd      	mov	sp, r7
 801ee4e:	bd90      	pop	{r4, r7, pc}
 801ee50:	0802bc08 	.word	0x0802bc08
 801ee54:	0802bc3c 	.word	0x0802bc3c
 801ee58:	0802bc5c 	.word	0x0802bc5c
 801ee5c:	0802bc84 	.word	0x0802bc84
 801ee60:	0802bca8 	.word	0x0802bca8

0801ee64 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801ee64:	b580      	push	{r7, lr}
 801ee66:	b086      	sub	sp, #24
 801ee68:	af00      	add	r7, sp, #0
 801ee6a:	607b      	str	r3, [r7, #4]
 801ee6c:	4603      	mov	r3, r0
 801ee6e:	73fb      	strb	r3, [r7, #15]
 801ee70:	460b      	mov	r3, r1
 801ee72:	81bb      	strh	r3, [r7, #12]
 801ee74:	4613      	mov	r3, r2
 801ee76:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801ee78:	89bb      	ldrh	r3, [r7, #12]
 801ee7a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801ee7c:	687b      	ldr	r3, [r7, #4]
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	d105      	bne.n	801ee8e <tcp_pbuf_prealloc+0x2a>
 801ee82:	4b30      	ldr	r3, [pc, #192]	@ (801ef44 <tcp_pbuf_prealloc+0xe0>)
 801ee84:	22e8      	movs	r2, #232	@ 0xe8
 801ee86:	4930      	ldr	r1, [pc, #192]	@ (801ef48 <tcp_pbuf_prealloc+0xe4>)
 801ee88:	4830      	ldr	r0, [pc, #192]	@ (801ef4c <tcp_pbuf_prealloc+0xe8>)
 801ee8a:	f006 fb2b 	bl	80254e4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801ee8e:	6a3b      	ldr	r3, [r7, #32]
 801ee90:	2b00      	cmp	r3, #0
 801ee92:	d105      	bne.n	801eea0 <tcp_pbuf_prealloc+0x3c>
 801ee94:	4b2b      	ldr	r3, [pc, #172]	@ (801ef44 <tcp_pbuf_prealloc+0xe0>)
 801ee96:	22e9      	movs	r2, #233	@ 0xe9
 801ee98:	492d      	ldr	r1, [pc, #180]	@ (801ef50 <tcp_pbuf_prealloc+0xec>)
 801ee9a:	482c      	ldr	r0, [pc, #176]	@ (801ef4c <tcp_pbuf_prealloc+0xe8>)
 801ee9c:	f006 fb22 	bl	80254e4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801eea0:	89ba      	ldrh	r2, [r7, #12]
 801eea2:	897b      	ldrh	r3, [r7, #10]
 801eea4:	429a      	cmp	r2, r3
 801eea6:	d221      	bcs.n	801eeec <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801eea8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801eeac:	f003 0302 	and.w	r3, r3, #2
 801eeb0:	2b00      	cmp	r3, #0
 801eeb2:	d111      	bne.n	801eed8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801eeb4:	6a3b      	ldr	r3, [r7, #32]
 801eeb6:	8b5b      	ldrh	r3, [r3, #26]
 801eeb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801eebc:	2b00      	cmp	r3, #0
 801eebe:	d115      	bne.n	801eeec <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801eec0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801eec4:	2b00      	cmp	r3, #0
 801eec6:	d007      	beq.n	801eed8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801eec8:	6a3b      	ldr	r3, [r7, #32]
 801eeca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 801eecc:	2b00      	cmp	r3, #0
 801eece:	d103      	bne.n	801eed8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801eed0:	6a3b      	ldr	r3, [r7, #32]
 801eed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 801eed4:	2b00      	cmp	r3, #0
 801eed6:	d009      	beq.n	801eeec <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801eed8:	89bb      	ldrh	r3, [r7, #12]
 801eeda:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801eede:	f023 0203 	bic.w	r2, r3, #3
 801eee2:	897b      	ldrh	r3, [r7, #10]
 801eee4:	4293      	cmp	r3, r2
 801eee6:	bf28      	it	cs
 801eee8:	4613      	movcs	r3, r2
 801eeea:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801eeec:	8af9      	ldrh	r1, [r7, #22]
 801eeee:	7bfb      	ldrb	r3, [r7, #15]
 801eef0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801eef4:	4618      	mov	r0, r3
 801eef6:	f7fb f891 	bl	801a01c <pbuf_alloc>
 801eefa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801eefc:	693b      	ldr	r3, [r7, #16]
 801eefe:	2b00      	cmp	r3, #0
 801ef00:	d101      	bne.n	801ef06 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801ef02:	2300      	movs	r3, #0
 801ef04:	e019      	b.n	801ef3a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801ef06:	693b      	ldr	r3, [r7, #16]
 801ef08:	681b      	ldr	r3, [r3, #0]
 801ef0a:	2b00      	cmp	r3, #0
 801ef0c:	d006      	beq.n	801ef1c <tcp_pbuf_prealloc+0xb8>
 801ef0e:	4b0d      	ldr	r3, [pc, #52]	@ (801ef44 <tcp_pbuf_prealloc+0xe0>)
 801ef10:	f240 120b 	movw	r2, #267	@ 0x10b
 801ef14:	490f      	ldr	r1, [pc, #60]	@ (801ef54 <tcp_pbuf_prealloc+0xf0>)
 801ef16:	480d      	ldr	r0, [pc, #52]	@ (801ef4c <tcp_pbuf_prealloc+0xe8>)
 801ef18:	f006 fae4 	bl	80254e4 <iprintf>
  *oversize = p->len - length;
 801ef1c:	693b      	ldr	r3, [r7, #16]
 801ef1e:	895a      	ldrh	r2, [r3, #10]
 801ef20:	89bb      	ldrh	r3, [r7, #12]
 801ef22:	1ad3      	subs	r3, r2, r3
 801ef24:	b29a      	uxth	r2, r3
 801ef26:	687b      	ldr	r3, [r7, #4]
 801ef28:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801ef2a:	693b      	ldr	r3, [r7, #16]
 801ef2c:	89ba      	ldrh	r2, [r7, #12]
 801ef2e:	811a      	strh	r2, [r3, #8]
 801ef30:	693b      	ldr	r3, [r7, #16]
 801ef32:	891a      	ldrh	r2, [r3, #8]
 801ef34:	693b      	ldr	r3, [r7, #16]
 801ef36:	815a      	strh	r2, [r3, #10]
  return p;
 801ef38:	693b      	ldr	r3, [r7, #16]
}
 801ef3a:	4618      	mov	r0, r3
 801ef3c:	3718      	adds	r7, #24
 801ef3e:	46bd      	mov	sp, r7
 801ef40:	bd80      	pop	{r7, pc}
 801ef42:	bf00      	nop
 801ef44:	0802bc08 	.word	0x0802bc08
 801ef48:	0802bcc0 	.word	0x0802bcc0
 801ef4c:	0802bc5c 	.word	0x0802bc5c
 801ef50:	0802bce4 	.word	0x0802bce4
 801ef54:	0802bd04 	.word	0x0802bd04

0801ef58 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801ef58:	b580      	push	{r7, lr}
 801ef5a:	b082      	sub	sp, #8
 801ef5c:	af00      	add	r7, sp, #0
 801ef5e:	6078      	str	r0, [r7, #4]
 801ef60:	460b      	mov	r3, r1
 801ef62:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	2b00      	cmp	r3, #0
 801ef68:	d106      	bne.n	801ef78 <tcp_write_checks+0x20>
 801ef6a:	4b33      	ldr	r3, [pc, #204]	@ (801f038 <tcp_write_checks+0xe0>)
 801ef6c:	f240 1233 	movw	r2, #307	@ 0x133
 801ef70:	4932      	ldr	r1, [pc, #200]	@ (801f03c <tcp_write_checks+0xe4>)
 801ef72:	4833      	ldr	r0, [pc, #204]	@ (801f040 <tcp_write_checks+0xe8>)
 801ef74:	f006 fab6 	bl	80254e4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801ef78:	687b      	ldr	r3, [r7, #4]
 801ef7a:	7d1b      	ldrb	r3, [r3, #20]
 801ef7c:	2b04      	cmp	r3, #4
 801ef7e:	d00e      	beq.n	801ef9e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801ef80:	687b      	ldr	r3, [r7, #4]
 801ef82:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801ef84:	2b07      	cmp	r3, #7
 801ef86:	d00a      	beq.n	801ef9e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801ef88:	687b      	ldr	r3, [r7, #4]
 801ef8a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801ef8c:	2b02      	cmp	r3, #2
 801ef8e:	d006      	beq.n	801ef9e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801ef90:	687b      	ldr	r3, [r7, #4]
 801ef92:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801ef94:	2b03      	cmp	r3, #3
 801ef96:	d002      	beq.n	801ef9e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801ef98:	f06f 030a 	mvn.w	r3, #10
 801ef9c:	e048      	b.n	801f030 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801ef9e:	887b      	ldrh	r3, [r7, #2]
 801efa0:	2b00      	cmp	r3, #0
 801efa2:	d101      	bne.n	801efa8 <tcp_write_checks+0x50>
    return ERR_OK;
 801efa4:	2300      	movs	r3, #0
 801efa6:	e043      	b.n	801f030 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801efa8:	687b      	ldr	r3, [r7, #4]
 801efaa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801efae:	887a      	ldrh	r2, [r7, #2]
 801efb0:	429a      	cmp	r2, r3
 801efb2:	d909      	bls.n	801efc8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801efb4:	687b      	ldr	r3, [r7, #4]
 801efb6:	8b5b      	ldrh	r3, [r3, #26]
 801efb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801efbc:	b29a      	uxth	r2, r3
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801efc2:	f04f 33ff 	mov.w	r3, #4294967295
 801efc6:	e033      	b.n	801f030 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801efce:	2b08      	cmp	r3, #8
 801efd0:	d909      	bls.n	801efe6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801efd2:	687b      	ldr	r3, [r7, #4]
 801efd4:	8b5b      	ldrh	r3, [r3, #26]
 801efd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801efda:	b29a      	uxth	r2, r3
 801efdc:	687b      	ldr	r3, [r7, #4]
 801efde:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801efe0:	f04f 33ff 	mov.w	r3, #4294967295
 801efe4:	e024      	b.n	801f030 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801efe6:	687b      	ldr	r3, [r7, #4]
 801efe8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801efec:	2b00      	cmp	r3, #0
 801efee:	d00f      	beq.n	801f010 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801eff0:	687b      	ldr	r3, [r7, #4]
 801eff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801eff4:	2b00      	cmp	r3, #0
 801eff6:	d11a      	bne.n	801f02e <tcp_write_checks+0xd6>
 801eff8:	687b      	ldr	r3, [r7, #4]
 801effa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801effc:	2b00      	cmp	r3, #0
 801effe:	d116      	bne.n	801f02e <tcp_write_checks+0xd6>
 801f000:	4b0d      	ldr	r3, [pc, #52]	@ (801f038 <tcp_write_checks+0xe0>)
 801f002:	f240 1255 	movw	r2, #341	@ 0x155
 801f006:	490f      	ldr	r1, [pc, #60]	@ (801f044 <tcp_write_checks+0xec>)
 801f008:	480d      	ldr	r0, [pc, #52]	@ (801f040 <tcp_write_checks+0xe8>)
 801f00a:	f006 fa6b 	bl	80254e4 <iprintf>
 801f00e:	e00e      	b.n	801f02e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801f010:	687b      	ldr	r3, [r7, #4]
 801f012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f014:	2b00      	cmp	r3, #0
 801f016:	d103      	bne.n	801f020 <tcp_write_checks+0xc8>
 801f018:	687b      	ldr	r3, [r7, #4]
 801f01a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f01c:	2b00      	cmp	r3, #0
 801f01e:	d006      	beq.n	801f02e <tcp_write_checks+0xd6>
 801f020:	4b05      	ldr	r3, [pc, #20]	@ (801f038 <tcp_write_checks+0xe0>)
 801f022:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801f026:	4908      	ldr	r1, [pc, #32]	@ (801f048 <tcp_write_checks+0xf0>)
 801f028:	4805      	ldr	r0, [pc, #20]	@ (801f040 <tcp_write_checks+0xe8>)
 801f02a:	f006 fa5b 	bl	80254e4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801f02e:	2300      	movs	r3, #0
}
 801f030:	4618      	mov	r0, r3
 801f032:	3708      	adds	r7, #8
 801f034:	46bd      	mov	sp, r7
 801f036:	bd80      	pop	{r7, pc}
 801f038:	0802bc08 	.word	0x0802bc08
 801f03c:	0802bd18 	.word	0x0802bd18
 801f040:	0802bc5c 	.word	0x0802bc5c
 801f044:	0802bd38 	.word	0x0802bd38
 801f048:	0802bd74 	.word	0x0802bd74

0801f04c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801f04c:	b590      	push	{r4, r7, lr}
 801f04e:	b09b      	sub	sp, #108	@ 0x6c
 801f050:	af04      	add	r7, sp, #16
 801f052:	60f8      	str	r0, [r7, #12]
 801f054:	60b9      	str	r1, [r7, #8]
 801f056:	4611      	mov	r1, r2
 801f058:	461a      	mov	r2, r3
 801f05a:	460b      	mov	r3, r1
 801f05c:	80fb      	strh	r3, [r7, #6]
 801f05e:	4613      	mov	r3, r2
 801f060:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801f062:	2300      	movs	r3, #0
 801f064:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801f066:	2300      	movs	r3, #0
 801f068:	653b      	str	r3, [r7, #80]	@ 0x50
 801f06a:	2300      	movs	r3, #0
 801f06c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801f06e:	2300      	movs	r3, #0
 801f070:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f072:	2300      	movs	r3, #0
 801f074:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801f076:	2300      	movs	r3, #0
 801f078:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801f07c:	2300      	movs	r3, #0
 801f07e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801f082:	2300      	movs	r3, #0
 801f084:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801f086:	2300      	movs	r3, #0
 801f088:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801f08a:	2300      	movs	r3, #0
 801f08c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801f08e:	68fb      	ldr	r3, [r7, #12]
 801f090:	2b00      	cmp	r3, #0
 801f092:	d109      	bne.n	801f0a8 <tcp_write+0x5c>
 801f094:	4ba4      	ldr	r3, [pc, #656]	@ (801f328 <tcp_write+0x2dc>)
 801f096:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801f09a:	49a4      	ldr	r1, [pc, #656]	@ (801f32c <tcp_write+0x2e0>)
 801f09c:	48a4      	ldr	r0, [pc, #656]	@ (801f330 <tcp_write+0x2e4>)
 801f09e:	f006 fa21 	bl	80254e4 <iprintf>
 801f0a2:	f06f 030f 	mvn.w	r3, #15
 801f0a6:	e32a      	b.n	801f6fe <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801f0a8:	68fb      	ldr	r3, [r7, #12]
 801f0aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801f0ae:	085b      	lsrs	r3, r3, #1
 801f0b0:	b29a      	uxth	r2, r3
 801f0b2:	68fb      	ldr	r3, [r7, #12]
 801f0b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f0b6:	4293      	cmp	r3, r2
 801f0b8:	bf28      	it	cs
 801f0ba:	4613      	movcs	r3, r2
 801f0bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801f0be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f0c0:	2b00      	cmp	r3, #0
 801f0c2:	d102      	bne.n	801f0ca <tcp_write+0x7e>
 801f0c4:	68fb      	ldr	r3, [r7, #12]
 801f0c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f0c8:	e000      	b.n	801f0cc <tcp_write+0x80>
 801f0ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f0cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801f0ce:	68bb      	ldr	r3, [r7, #8]
 801f0d0:	2b00      	cmp	r3, #0
 801f0d2:	d109      	bne.n	801f0e8 <tcp_write+0x9c>
 801f0d4:	4b94      	ldr	r3, [pc, #592]	@ (801f328 <tcp_write+0x2dc>)
 801f0d6:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801f0da:	4996      	ldr	r1, [pc, #600]	@ (801f334 <tcp_write+0x2e8>)
 801f0dc:	4894      	ldr	r0, [pc, #592]	@ (801f330 <tcp_write+0x2e4>)
 801f0de:	f006 fa01 	bl	80254e4 <iprintf>
 801f0e2:	f06f 030f 	mvn.w	r3, #15
 801f0e6:	e30a      	b.n	801f6fe <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801f0e8:	88fb      	ldrh	r3, [r7, #6]
 801f0ea:	4619      	mov	r1, r3
 801f0ec:	68f8      	ldr	r0, [r7, #12]
 801f0ee:	f7ff ff33 	bl	801ef58 <tcp_write_checks>
 801f0f2:	4603      	mov	r3, r0
 801f0f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801f0f8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801f0fc:	2b00      	cmp	r3, #0
 801f0fe:	d002      	beq.n	801f106 <tcp_write+0xba>
    return err;
 801f100:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801f104:	e2fb      	b.n	801f6fe <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801f106:	68fb      	ldr	r3, [r7, #12]
 801f108:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f10c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f110:	2300      	movs	r3, #0
 801f112:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801f116:	68fb      	ldr	r3, [r7, #12]
 801f118:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f11a:	2b00      	cmp	r3, #0
 801f11c:	f000 80f6 	beq.w	801f30c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f120:	68fb      	ldr	r3, [r7, #12]
 801f122:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f124:	653b      	str	r3, [r7, #80]	@ 0x50
 801f126:	e002      	b.n	801f12e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801f128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f12a:	681b      	ldr	r3, [r3, #0]
 801f12c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f12e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f130:	681b      	ldr	r3, [r3, #0]
 801f132:	2b00      	cmp	r3, #0
 801f134:	d1f8      	bne.n	801f128 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801f136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f138:	7a9b      	ldrb	r3, [r3, #10]
 801f13a:	009b      	lsls	r3, r3, #2
 801f13c:	b29b      	uxth	r3, r3
 801f13e:	f003 0304 	and.w	r3, r3, #4
 801f142:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801f144:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f148:	891b      	ldrh	r3, [r3, #8]
 801f14a:	4619      	mov	r1, r3
 801f14c:	8c3b      	ldrh	r3, [r7, #32]
 801f14e:	440b      	add	r3, r1
 801f150:	429a      	cmp	r2, r3
 801f152:	da06      	bge.n	801f162 <tcp_write+0x116>
 801f154:	4b74      	ldr	r3, [pc, #464]	@ (801f328 <tcp_write+0x2dc>)
 801f156:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801f15a:	4977      	ldr	r1, [pc, #476]	@ (801f338 <tcp_write+0x2ec>)
 801f15c:	4874      	ldr	r0, [pc, #464]	@ (801f330 <tcp_write+0x2e4>)
 801f15e:	f006 f9c1 	bl	80254e4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801f162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f164:	891a      	ldrh	r2, [r3, #8]
 801f166:	8c3b      	ldrh	r3, [r7, #32]
 801f168:	4413      	add	r3, r2
 801f16a:	b29b      	uxth	r3, r3
 801f16c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f16e:	1ad3      	subs	r3, r2, r3
 801f170:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801f172:	68fb      	ldr	r3, [r7, #12]
 801f174:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801f178:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801f17a:	8a7b      	ldrh	r3, [r7, #18]
 801f17c:	2b00      	cmp	r3, #0
 801f17e:	d026      	beq.n	801f1ce <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801f180:	8a7b      	ldrh	r3, [r7, #18]
 801f182:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801f184:	429a      	cmp	r2, r3
 801f186:	d206      	bcs.n	801f196 <tcp_write+0x14a>
 801f188:	4b67      	ldr	r3, [pc, #412]	@ (801f328 <tcp_write+0x2dc>)
 801f18a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801f18e:	496b      	ldr	r1, [pc, #428]	@ (801f33c <tcp_write+0x2f0>)
 801f190:	4867      	ldr	r0, [pc, #412]	@ (801f330 <tcp_write+0x2e4>)
 801f192:	f006 f9a7 	bl	80254e4 <iprintf>
      seg = last_unsent;
 801f196:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f198:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801f19a:	8a7b      	ldrh	r3, [r7, #18]
 801f19c:	88fa      	ldrh	r2, [r7, #6]
 801f19e:	4293      	cmp	r3, r2
 801f1a0:	bf28      	it	cs
 801f1a2:	4613      	movcs	r3, r2
 801f1a4:	b29b      	uxth	r3, r3
 801f1a6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801f1a8:	4293      	cmp	r3, r2
 801f1aa:	bf28      	it	cs
 801f1ac:	4613      	movcs	r3, r2
 801f1ae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801f1b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f1b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f1b6:	4413      	add	r3, r2
 801f1b8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801f1bc:	8a7a      	ldrh	r2, [r7, #18]
 801f1be:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f1c0:	1ad3      	subs	r3, r2, r3
 801f1c2:	b29b      	uxth	r3, r3
 801f1c4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801f1c6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801f1c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f1ca:	1ad3      	subs	r3, r2, r3
 801f1cc:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801f1ce:	8a7b      	ldrh	r3, [r7, #18]
 801f1d0:	2b00      	cmp	r3, #0
 801f1d2:	d00b      	beq.n	801f1ec <tcp_write+0x1a0>
 801f1d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f1d8:	88fb      	ldrh	r3, [r7, #6]
 801f1da:	429a      	cmp	r2, r3
 801f1dc:	d006      	beq.n	801f1ec <tcp_write+0x1a0>
 801f1de:	4b52      	ldr	r3, [pc, #328]	@ (801f328 <tcp_write+0x2dc>)
 801f1e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801f1e4:	4956      	ldr	r1, [pc, #344]	@ (801f340 <tcp_write+0x2f4>)
 801f1e6:	4852      	ldr	r0, [pc, #328]	@ (801f330 <tcp_write+0x2e4>)
 801f1e8:	f006 f97c 	bl	80254e4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801f1ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f1f0:	88fb      	ldrh	r3, [r7, #6]
 801f1f2:	429a      	cmp	r2, r3
 801f1f4:	f080 8167 	bcs.w	801f4c6 <tcp_write+0x47a>
 801f1f8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801f1fa:	2b00      	cmp	r3, #0
 801f1fc:	f000 8163 	beq.w	801f4c6 <tcp_write+0x47a>
 801f200:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f202:	891b      	ldrh	r3, [r3, #8]
 801f204:	2b00      	cmp	r3, #0
 801f206:	f000 815e 	beq.w	801f4c6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801f20a:	88fa      	ldrh	r2, [r7, #6]
 801f20c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f210:	1ad2      	subs	r2, r2, r3
 801f212:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801f214:	4293      	cmp	r3, r2
 801f216:	bfa8      	it	ge
 801f218:	4613      	movge	r3, r2
 801f21a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801f21c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f21e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801f220:	797b      	ldrb	r3, [r7, #5]
 801f222:	f003 0301 	and.w	r3, r3, #1
 801f226:	2b00      	cmp	r3, #0
 801f228:	d027      	beq.n	801f27a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801f22a:	f107 0012 	add.w	r0, r7, #18
 801f22e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801f230:	8bf9      	ldrh	r1, [r7, #30]
 801f232:	2301      	movs	r3, #1
 801f234:	9302      	str	r3, [sp, #8]
 801f236:	797b      	ldrb	r3, [r7, #5]
 801f238:	9301      	str	r3, [sp, #4]
 801f23a:	68fb      	ldr	r3, [r7, #12]
 801f23c:	9300      	str	r3, [sp, #0]
 801f23e:	4603      	mov	r3, r0
 801f240:	2000      	movs	r0, #0
 801f242:	f7ff fe0f 	bl	801ee64 <tcp_pbuf_prealloc>
 801f246:	6578      	str	r0, [r7, #84]	@ 0x54
 801f248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f24a:	2b00      	cmp	r3, #0
 801f24c:	f000 8225 	beq.w	801f69a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801f250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f252:	6858      	ldr	r0, [r3, #4]
 801f254:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f258:	68ba      	ldr	r2, [r7, #8]
 801f25a:	4413      	add	r3, r2
 801f25c:	8bfa      	ldrh	r2, [r7, #30]
 801f25e:	4619      	mov	r1, r3
 801f260:	f006 facd 	bl	80257fe <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801f264:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801f266:	f7fb fa7d 	bl	801a764 <pbuf_clen>
 801f26a:	4603      	mov	r3, r0
 801f26c:	461a      	mov	r2, r3
 801f26e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801f272:	4413      	add	r3, r2
 801f274:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801f278:	e041      	b.n	801f2fe <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801f27a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f27c:	685b      	ldr	r3, [r3, #4]
 801f27e:	637b      	str	r3, [r7, #52]	@ 0x34
 801f280:	e002      	b.n	801f288 <tcp_write+0x23c>
 801f282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f284:	681b      	ldr	r3, [r3, #0]
 801f286:	637b      	str	r3, [r7, #52]	@ 0x34
 801f288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f28a:	681b      	ldr	r3, [r3, #0]
 801f28c:	2b00      	cmp	r3, #0
 801f28e:	d1f8      	bne.n	801f282 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801f290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f292:	7b1b      	ldrb	r3, [r3, #12]
 801f294:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801f298:	2b00      	cmp	r3, #0
 801f29a:	d115      	bne.n	801f2c8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801f29c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f29e:	685b      	ldr	r3, [r3, #4]
 801f2a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801f2a2:	8952      	ldrh	r2, [r2, #10]
 801f2a4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801f2a6:	68ba      	ldr	r2, [r7, #8]
 801f2a8:	429a      	cmp	r2, r3
 801f2aa:	d10d      	bne.n	801f2c8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801f2ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f2b0:	2b00      	cmp	r3, #0
 801f2b2:	d006      	beq.n	801f2c2 <tcp_write+0x276>
 801f2b4:	4b1c      	ldr	r3, [pc, #112]	@ (801f328 <tcp_write+0x2dc>)
 801f2b6:	f240 2231 	movw	r2, #561	@ 0x231
 801f2ba:	4922      	ldr	r1, [pc, #136]	@ (801f344 <tcp_write+0x2f8>)
 801f2bc:	481c      	ldr	r0, [pc, #112]	@ (801f330 <tcp_write+0x2e4>)
 801f2be:	f006 f911 	bl	80254e4 <iprintf>
          extendlen = seglen;
 801f2c2:	8bfb      	ldrh	r3, [r7, #30]
 801f2c4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801f2c6:	e01a      	b.n	801f2fe <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801f2c8:	8bfb      	ldrh	r3, [r7, #30]
 801f2ca:	2201      	movs	r2, #1
 801f2cc:	4619      	mov	r1, r3
 801f2ce:	2000      	movs	r0, #0
 801f2d0:	f7fa fea4 	bl	801a01c <pbuf_alloc>
 801f2d4:	6578      	str	r0, [r7, #84]	@ 0x54
 801f2d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	f000 81e0 	beq.w	801f69e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801f2de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f2e2:	68ba      	ldr	r2, [r7, #8]
 801f2e4:	441a      	add	r2, r3
 801f2e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f2e8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801f2ea:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801f2ec:	f7fb fa3a 	bl	801a764 <pbuf_clen>
 801f2f0:	4603      	mov	r3, r0
 801f2f2:	461a      	mov	r2, r3
 801f2f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801f2f8:	4413      	add	r3, r2
 801f2fa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801f2fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f302:	8bfb      	ldrh	r3, [r7, #30]
 801f304:	4413      	add	r3, r2
 801f306:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801f30a:	e0dc      	b.n	801f4c6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801f30c:	68fb      	ldr	r3, [r7, #12]
 801f30e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801f312:	2b00      	cmp	r3, #0
 801f314:	f000 80d7 	beq.w	801f4c6 <tcp_write+0x47a>
 801f318:	4b03      	ldr	r3, [pc, #12]	@ (801f328 <tcp_write+0x2dc>)
 801f31a:	f240 224a 	movw	r2, #586	@ 0x24a
 801f31e:	490a      	ldr	r1, [pc, #40]	@ (801f348 <tcp_write+0x2fc>)
 801f320:	4803      	ldr	r0, [pc, #12]	@ (801f330 <tcp_write+0x2e4>)
 801f322:	f006 f8df 	bl	80254e4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801f326:	e0ce      	b.n	801f4c6 <tcp_write+0x47a>
 801f328:	0802bc08 	.word	0x0802bc08
 801f32c:	0802bda8 	.word	0x0802bda8
 801f330:	0802bc5c 	.word	0x0802bc5c
 801f334:	0802bdc0 	.word	0x0802bdc0
 801f338:	0802bdf4 	.word	0x0802bdf4
 801f33c:	0802be0c 	.word	0x0802be0c
 801f340:	0802be2c 	.word	0x0802be2c
 801f344:	0802be4c 	.word	0x0802be4c
 801f348:	0802be78 	.word	0x0802be78
    struct pbuf *p;
    u16_t left = len - pos;
 801f34c:	88fa      	ldrh	r2, [r7, #6]
 801f34e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f352:	1ad3      	subs	r3, r2, r3
 801f354:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801f356:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f35a:	b29b      	uxth	r3, r3
 801f35c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f35e:	1ad3      	subs	r3, r2, r3
 801f360:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801f362:	8b7a      	ldrh	r2, [r7, #26]
 801f364:	8bbb      	ldrh	r3, [r7, #28]
 801f366:	4293      	cmp	r3, r2
 801f368:	bf28      	it	cs
 801f36a:	4613      	movcs	r3, r2
 801f36c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801f36e:	797b      	ldrb	r3, [r7, #5]
 801f370:	f003 0301 	and.w	r3, r3, #1
 801f374:	2b00      	cmp	r3, #0
 801f376:	d036      	beq.n	801f3e6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801f378:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f37c:	b29a      	uxth	r2, r3
 801f37e:	8b3b      	ldrh	r3, [r7, #24]
 801f380:	4413      	add	r3, r2
 801f382:	b299      	uxth	r1, r3
 801f384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f386:	2b00      	cmp	r3, #0
 801f388:	bf0c      	ite	eq
 801f38a:	2301      	moveq	r3, #1
 801f38c:	2300      	movne	r3, #0
 801f38e:	b2db      	uxtb	r3, r3
 801f390:	f107 0012 	add.w	r0, r7, #18
 801f394:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f396:	9302      	str	r3, [sp, #8]
 801f398:	797b      	ldrb	r3, [r7, #5]
 801f39a:	9301      	str	r3, [sp, #4]
 801f39c:	68fb      	ldr	r3, [r7, #12]
 801f39e:	9300      	str	r3, [sp, #0]
 801f3a0:	4603      	mov	r3, r0
 801f3a2:	2036      	movs	r0, #54	@ 0x36
 801f3a4:	f7ff fd5e 	bl	801ee64 <tcp_pbuf_prealloc>
 801f3a8:	6338      	str	r0, [r7, #48]	@ 0x30
 801f3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f3ac:	2b00      	cmp	r3, #0
 801f3ae:	f000 8178 	beq.w	801f6a2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801f3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f3b4:	895b      	ldrh	r3, [r3, #10]
 801f3b6:	8b3a      	ldrh	r2, [r7, #24]
 801f3b8:	429a      	cmp	r2, r3
 801f3ba:	d906      	bls.n	801f3ca <tcp_write+0x37e>
 801f3bc:	4b8c      	ldr	r3, [pc, #560]	@ (801f5f0 <tcp_write+0x5a4>)
 801f3be:	f240 2266 	movw	r2, #614	@ 0x266
 801f3c2:	498c      	ldr	r1, [pc, #560]	@ (801f5f4 <tcp_write+0x5a8>)
 801f3c4:	488c      	ldr	r0, [pc, #560]	@ (801f5f8 <tcp_write+0x5ac>)
 801f3c6:	f006 f88d 	bl	80254e4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801f3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f3cc:	685a      	ldr	r2, [r3, #4]
 801f3ce:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f3d2:	18d0      	adds	r0, r2, r3
 801f3d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f3d8:	68ba      	ldr	r2, [r7, #8]
 801f3da:	4413      	add	r3, r2
 801f3dc:	8b3a      	ldrh	r2, [r7, #24]
 801f3de:	4619      	mov	r1, r3
 801f3e0:	f006 fa0d 	bl	80257fe <memcpy>
 801f3e4:	e02f      	b.n	801f446 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801f3e6:	8a7b      	ldrh	r3, [r7, #18]
 801f3e8:	2b00      	cmp	r3, #0
 801f3ea:	d006      	beq.n	801f3fa <tcp_write+0x3ae>
 801f3ec:	4b80      	ldr	r3, [pc, #512]	@ (801f5f0 <tcp_write+0x5a4>)
 801f3ee:	f240 2271 	movw	r2, #625	@ 0x271
 801f3f2:	4982      	ldr	r1, [pc, #520]	@ (801f5fc <tcp_write+0x5b0>)
 801f3f4:	4880      	ldr	r0, [pc, #512]	@ (801f5f8 <tcp_write+0x5ac>)
 801f3f6:	f006 f875 	bl	80254e4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801f3fa:	8b3b      	ldrh	r3, [r7, #24]
 801f3fc:	2201      	movs	r2, #1
 801f3fe:	4619      	mov	r1, r3
 801f400:	2036      	movs	r0, #54	@ 0x36
 801f402:	f7fa fe0b 	bl	801a01c <pbuf_alloc>
 801f406:	6178      	str	r0, [r7, #20]
 801f408:	697b      	ldr	r3, [r7, #20]
 801f40a:	2b00      	cmp	r3, #0
 801f40c:	f000 814b 	beq.w	801f6a6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801f410:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f414:	68ba      	ldr	r2, [r7, #8]
 801f416:	441a      	add	r2, r3
 801f418:	697b      	ldr	r3, [r7, #20]
 801f41a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801f41c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f420:	b29b      	uxth	r3, r3
 801f422:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801f426:	4619      	mov	r1, r3
 801f428:	2036      	movs	r0, #54	@ 0x36
 801f42a:	f7fa fdf7 	bl	801a01c <pbuf_alloc>
 801f42e:	6338      	str	r0, [r7, #48]	@ 0x30
 801f430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f432:	2b00      	cmp	r3, #0
 801f434:	d103      	bne.n	801f43e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801f436:	6978      	ldr	r0, [r7, #20]
 801f438:	f7fb f906 	bl	801a648 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801f43c:	e136      	b.n	801f6ac <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801f43e:	6979      	ldr	r1, [r7, #20]
 801f440:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f442:	f7fb f9cf 	bl	801a7e4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801f446:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f448:	f7fb f98c 	bl	801a764 <pbuf_clen>
 801f44c:	4603      	mov	r3, r0
 801f44e:	461a      	mov	r2, r3
 801f450:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801f454:	4413      	add	r3, r2
 801f456:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801f45a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801f45e:	2b09      	cmp	r3, #9
 801f460:	d903      	bls.n	801f46a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801f462:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f464:	f7fb f8f0 	bl	801a648 <pbuf_free>
      goto memerr;
 801f468:	e120      	b.n	801f6ac <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801f46a:	68fb      	ldr	r3, [r7, #12]
 801f46c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801f46e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f472:	441a      	add	r2, r3
 801f474:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801f478:	9300      	str	r3, [sp, #0]
 801f47a:	4613      	mov	r3, r2
 801f47c:	2200      	movs	r2, #0
 801f47e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801f480:	68f8      	ldr	r0, [r7, #12]
 801f482:	f7ff fc53 	bl	801ed2c <tcp_create_segment>
 801f486:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801f488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f48a:	2b00      	cmp	r3, #0
 801f48c:	f000 810d 	beq.w	801f6aa <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801f490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f492:	2b00      	cmp	r3, #0
 801f494:	d102      	bne.n	801f49c <tcp_write+0x450>
      queue = seg;
 801f496:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f498:	647b      	str	r3, [r7, #68]	@ 0x44
 801f49a:	e00c      	b.n	801f4b6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801f49c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f49e:	2b00      	cmp	r3, #0
 801f4a0:	d106      	bne.n	801f4b0 <tcp_write+0x464>
 801f4a2:	4b53      	ldr	r3, [pc, #332]	@ (801f5f0 <tcp_write+0x5a4>)
 801f4a4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801f4a8:	4955      	ldr	r1, [pc, #340]	@ (801f600 <tcp_write+0x5b4>)
 801f4aa:	4853      	ldr	r0, [pc, #332]	@ (801f5f8 <tcp_write+0x5ac>)
 801f4ac:	f006 f81a 	bl	80254e4 <iprintf>
      prev_seg->next = seg;
 801f4b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f4b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801f4b4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801f4b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f4b8:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801f4ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f4be:	8b3b      	ldrh	r3, [r7, #24]
 801f4c0:	4413      	add	r3, r2
 801f4c2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801f4c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f4ca:	88fb      	ldrh	r3, [r7, #6]
 801f4cc:	429a      	cmp	r2, r3
 801f4ce:	f4ff af3d 	bcc.w	801f34c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801f4d2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	d02c      	beq.n	801f532 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801f4d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f4da:	685b      	ldr	r3, [r3, #4]
 801f4dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f4de:	e01e      	b.n	801f51e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801f4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f4e2:	891a      	ldrh	r2, [r3, #8]
 801f4e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f4e6:	4413      	add	r3, r2
 801f4e8:	b29a      	uxth	r2, r3
 801f4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f4ec:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801f4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f4f0:	681b      	ldr	r3, [r3, #0]
 801f4f2:	2b00      	cmp	r3, #0
 801f4f4:	d110      	bne.n	801f518 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801f4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f4f8:	685b      	ldr	r3, [r3, #4]
 801f4fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f4fc:	8952      	ldrh	r2, [r2, #10]
 801f4fe:	4413      	add	r3, r2
 801f500:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801f502:	68b9      	ldr	r1, [r7, #8]
 801f504:	4618      	mov	r0, r3
 801f506:	f006 f97a 	bl	80257fe <memcpy>
        p->len += oversize_used;
 801f50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f50c:	895a      	ldrh	r2, [r3, #10]
 801f50e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f510:	4413      	add	r3, r2
 801f512:	b29a      	uxth	r2, r3
 801f514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f516:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801f518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f51a:	681b      	ldr	r3, [r3, #0]
 801f51c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f520:	2b00      	cmp	r3, #0
 801f522:	d1dd      	bne.n	801f4e0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801f524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f526:	891a      	ldrh	r2, [r3, #8]
 801f528:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f52a:	4413      	add	r3, r2
 801f52c:	b29a      	uxth	r2, r3
 801f52e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f530:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801f532:	8a7a      	ldrh	r2, [r7, #18]
 801f534:	68fb      	ldr	r3, [r7, #12]
 801f536:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801f53a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f53c:	2b00      	cmp	r3, #0
 801f53e:	d018      	beq.n	801f572 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801f540:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f542:	2b00      	cmp	r3, #0
 801f544:	d106      	bne.n	801f554 <tcp_write+0x508>
 801f546:	4b2a      	ldr	r3, [pc, #168]	@ (801f5f0 <tcp_write+0x5a4>)
 801f548:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801f54c:	492d      	ldr	r1, [pc, #180]	@ (801f604 <tcp_write+0x5b8>)
 801f54e:	482a      	ldr	r0, [pc, #168]	@ (801f5f8 <tcp_write+0x5ac>)
 801f550:	f005 ffc8 	bl	80254e4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801f554:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f556:	685b      	ldr	r3, [r3, #4]
 801f558:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801f55a:	4618      	mov	r0, r3
 801f55c:	f7fb f942 	bl	801a7e4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801f560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f562:	891a      	ldrh	r2, [r3, #8]
 801f564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f566:	891b      	ldrh	r3, [r3, #8]
 801f568:	4413      	add	r3, r2
 801f56a:	b29a      	uxth	r2, r3
 801f56c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f56e:	811a      	strh	r2, [r3, #8]
 801f570:	e037      	b.n	801f5e2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801f572:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f574:	2b00      	cmp	r3, #0
 801f576:	d034      	beq.n	801f5e2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801f578:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f57a:	2b00      	cmp	r3, #0
 801f57c:	d003      	beq.n	801f586 <tcp_write+0x53a>
 801f57e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f580:	685b      	ldr	r3, [r3, #4]
 801f582:	2b00      	cmp	r3, #0
 801f584:	d106      	bne.n	801f594 <tcp_write+0x548>
 801f586:	4b1a      	ldr	r3, [pc, #104]	@ (801f5f0 <tcp_write+0x5a4>)
 801f588:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801f58c:	491e      	ldr	r1, [pc, #120]	@ (801f608 <tcp_write+0x5bc>)
 801f58e:	481a      	ldr	r0, [pc, #104]	@ (801f5f8 <tcp_write+0x5ac>)
 801f590:	f005 ffa8 	bl	80254e4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801f594:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f596:	685b      	ldr	r3, [r3, #4]
 801f598:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f59a:	e009      	b.n	801f5b0 <tcp_write+0x564>
      p->tot_len += extendlen;
 801f59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f59e:	891a      	ldrh	r2, [r3, #8]
 801f5a0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f5a2:	4413      	add	r3, r2
 801f5a4:	b29a      	uxth	r2, r3
 801f5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f5a8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801f5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f5ac:	681b      	ldr	r3, [r3, #0]
 801f5ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f5b2:	681b      	ldr	r3, [r3, #0]
 801f5b4:	2b00      	cmp	r3, #0
 801f5b6:	d1f1      	bne.n	801f59c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801f5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f5ba:	891a      	ldrh	r2, [r3, #8]
 801f5bc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f5be:	4413      	add	r3, r2
 801f5c0:	b29a      	uxth	r2, r3
 801f5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f5c4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801f5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f5c8:	895a      	ldrh	r2, [r3, #10]
 801f5ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f5cc:	4413      	add	r3, r2
 801f5ce:	b29a      	uxth	r2, r3
 801f5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f5d2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801f5d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f5d6:	891a      	ldrh	r2, [r3, #8]
 801f5d8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f5da:	4413      	add	r3, r2
 801f5dc:	b29a      	uxth	r2, r3
 801f5de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f5e0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801f5e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	d111      	bne.n	801f60c <tcp_write+0x5c0>
    pcb->unsent = queue;
 801f5e8:	68fb      	ldr	r3, [r7, #12]
 801f5ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801f5ec:	66da      	str	r2, [r3, #108]	@ 0x6c
 801f5ee:	e010      	b.n	801f612 <tcp_write+0x5c6>
 801f5f0:	0802bc08 	.word	0x0802bc08
 801f5f4:	0802bea8 	.word	0x0802bea8
 801f5f8:	0802bc5c 	.word	0x0802bc5c
 801f5fc:	0802bee8 	.word	0x0802bee8
 801f600:	0802bef8 	.word	0x0802bef8
 801f604:	0802bf0c 	.word	0x0802bf0c
 801f608:	0802bf44 	.word	0x0802bf44
  } else {
    last_unsent->next = queue;
 801f60c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f60e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801f610:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801f612:	68fb      	ldr	r3, [r7, #12]
 801f614:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801f616:	88fb      	ldrh	r3, [r7, #6]
 801f618:	441a      	add	r2, r3
 801f61a:	68fb      	ldr	r3, [r7, #12]
 801f61c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801f61e:	68fb      	ldr	r3, [r7, #12]
 801f620:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801f624:	88fb      	ldrh	r3, [r7, #6]
 801f626:	1ad3      	subs	r3, r2, r3
 801f628:	b29a      	uxth	r2, r3
 801f62a:	68fb      	ldr	r3, [r7, #12]
 801f62c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 801f630:	68fb      	ldr	r3, [r7, #12]
 801f632:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801f636:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801f63a:	68fb      	ldr	r3, [r7, #12]
 801f63c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f640:	2b00      	cmp	r3, #0
 801f642:	d00e      	beq.n	801f662 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801f644:	68fb      	ldr	r3, [r7, #12]
 801f646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f648:	2b00      	cmp	r3, #0
 801f64a:	d10a      	bne.n	801f662 <tcp_write+0x616>
 801f64c:	68fb      	ldr	r3, [r7, #12]
 801f64e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f650:	2b00      	cmp	r3, #0
 801f652:	d106      	bne.n	801f662 <tcp_write+0x616>
 801f654:	4b2c      	ldr	r3, [pc, #176]	@ (801f708 <tcp_write+0x6bc>)
 801f656:	f240 3212 	movw	r2, #786	@ 0x312
 801f65a:	492c      	ldr	r1, [pc, #176]	@ (801f70c <tcp_write+0x6c0>)
 801f65c:	482c      	ldr	r0, [pc, #176]	@ (801f710 <tcp_write+0x6c4>)
 801f65e:	f005 ff41 	bl	80254e4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801f662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f664:	2b00      	cmp	r3, #0
 801f666:	d016      	beq.n	801f696 <tcp_write+0x64a>
 801f668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f66a:	68db      	ldr	r3, [r3, #12]
 801f66c:	2b00      	cmp	r3, #0
 801f66e:	d012      	beq.n	801f696 <tcp_write+0x64a>
 801f670:	797b      	ldrb	r3, [r7, #5]
 801f672:	f003 0302 	and.w	r3, r3, #2
 801f676:	2b00      	cmp	r3, #0
 801f678:	d10d      	bne.n	801f696 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801f67a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f67c:	68db      	ldr	r3, [r3, #12]
 801f67e:	899b      	ldrh	r3, [r3, #12]
 801f680:	b29c      	uxth	r4, r3
 801f682:	2008      	movs	r0, #8
 801f684:	f7f9 fb04 	bl	8018c90 <lwip_htons>
 801f688:	4603      	mov	r3, r0
 801f68a:	461a      	mov	r2, r3
 801f68c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f68e:	68db      	ldr	r3, [r3, #12]
 801f690:	4322      	orrs	r2, r4
 801f692:	b292      	uxth	r2, r2
 801f694:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801f696:	2300      	movs	r3, #0
 801f698:	e031      	b.n	801f6fe <tcp_write+0x6b2>
          goto memerr;
 801f69a:	bf00      	nop
 801f69c:	e006      	b.n	801f6ac <tcp_write+0x660>
            goto memerr;
 801f69e:	bf00      	nop
 801f6a0:	e004      	b.n	801f6ac <tcp_write+0x660>
        goto memerr;
 801f6a2:	bf00      	nop
 801f6a4:	e002      	b.n	801f6ac <tcp_write+0x660>
        goto memerr;
 801f6a6:	bf00      	nop
 801f6a8:	e000      	b.n	801f6ac <tcp_write+0x660>
      goto memerr;
 801f6aa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f6ac:	68fb      	ldr	r3, [r7, #12]
 801f6ae:	8b5b      	ldrh	r3, [r3, #26]
 801f6b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f6b4:	b29a      	uxth	r2, r3
 801f6b6:	68fb      	ldr	r3, [r7, #12]
 801f6b8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801f6ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f6bc:	2b00      	cmp	r3, #0
 801f6be:	d002      	beq.n	801f6c6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801f6c0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801f6c2:	f7fa ffc1 	bl	801a648 <pbuf_free>
  }
  if (queue != NULL) {
 801f6c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f6c8:	2b00      	cmp	r3, #0
 801f6ca:	d002      	beq.n	801f6d2 <tcp_write+0x686>
    tcp_segs_free(queue);
 801f6cc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801f6ce:	f7fc fb71 	bl	801bdb4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801f6d2:	68fb      	ldr	r3, [r7, #12]
 801f6d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f6d8:	2b00      	cmp	r3, #0
 801f6da:	d00e      	beq.n	801f6fa <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801f6dc:	68fb      	ldr	r3, [r7, #12]
 801f6de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f6e0:	2b00      	cmp	r3, #0
 801f6e2:	d10a      	bne.n	801f6fa <tcp_write+0x6ae>
 801f6e4:	68fb      	ldr	r3, [r7, #12]
 801f6e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f6e8:	2b00      	cmp	r3, #0
 801f6ea:	d106      	bne.n	801f6fa <tcp_write+0x6ae>
 801f6ec:	4b06      	ldr	r3, [pc, #24]	@ (801f708 <tcp_write+0x6bc>)
 801f6ee:	f240 3227 	movw	r2, #807	@ 0x327
 801f6f2:	4906      	ldr	r1, [pc, #24]	@ (801f70c <tcp_write+0x6c0>)
 801f6f4:	4806      	ldr	r0, [pc, #24]	@ (801f710 <tcp_write+0x6c4>)
 801f6f6:	f005 fef5 	bl	80254e4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801f6fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f6fe:	4618      	mov	r0, r3
 801f700:	375c      	adds	r7, #92	@ 0x5c
 801f702:	46bd      	mov	sp, r7
 801f704:	bd90      	pop	{r4, r7, pc}
 801f706:	bf00      	nop
 801f708:	0802bc08 	.word	0x0802bc08
 801f70c:	0802bf7c 	.word	0x0802bf7c
 801f710:	0802bc5c 	.word	0x0802bc5c

0801f714 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801f714:	b590      	push	{r4, r7, lr}
 801f716:	b08b      	sub	sp, #44	@ 0x2c
 801f718:	af02      	add	r7, sp, #8
 801f71a:	6078      	str	r0, [r7, #4]
 801f71c:	460b      	mov	r3, r1
 801f71e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801f720:	2300      	movs	r3, #0
 801f722:	61fb      	str	r3, [r7, #28]
 801f724:	2300      	movs	r3, #0
 801f726:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801f728:	2300      	movs	r3, #0
 801f72a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801f72c:	687b      	ldr	r3, [r7, #4]
 801f72e:	2b00      	cmp	r3, #0
 801f730:	d106      	bne.n	801f740 <tcp_split_unsent_seg+0x2c>
 801f732:	4b95      	ldr	r3, [pc, #596]	@ (801f988 <tcp_split_unsent_seg+0x274>)
 801f734:	f240 324b 	movw	r2, #843	@ 0x34b
 801f738:	4994      	ldr	r1, [pc, #592]	@ (801f98c <tcp_split_unsent_seg+0x278>)
 801f73a:	4895      	ldr	r0, [pc, #596]	@ (801f990 <tcp_split_unsent_seg+0x27c>)
 801f73c:	f005 fed2 	bl	80254e4 <iprintf>

  useg = pcb->unsent;
 801f740:	687b      	ldr	r3, [r7, #4]
 801f742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f744:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801f746:	697b      	ldr	r3, [r7, #20]
 801f748:	2b00      	cmp	r3, #0
 801f74a:	d102      	bne.n	801f752 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801f74c:	f04f 33ff 	mov.w	r3, #4294967295
 801f750:	e116      	b.n	801f980 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801f752:	887b      	ldrh	r3, [r7, #2]
 801f754:	2b00      	cmp	r3, #0
 801f756:	d109      	bne.n	801f76c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801f758:	4b8b      	ldr	r3, [pc, #556]	@ (801f988 <tcp_split_unsent_seg+0x274>)
 801f75a:	f240 3253 	movw	r2, #851	@ 0x353
 801f75e:	498d      	ldr	r1, [pc, #564]	@ (801f994 <tcp_split_unsent_seg+0x280>)
 801f760:	488b      	ldr	r0, [pc, #556]	@ (801f990 <tcp_split_unsent_seg+0x27c>)
 801f762:	f005 febf 	bl	80254e4 <iprintf>
    return ERR_VAL;
 801f766:	f06f 0305 	mvn.w	r3, #5
 801f76a:	e109      	b.n	801f980 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801f76c:	697b      	ldr	r3, [r7, #20]
 801f76e:	891b      	ldrh	r3, [r3, #8]
 801f770:	887a      	ldrh	r2, [r7, #2]
 801f772:	429a      	cmp	r2, r3
 801f774:	d301      	bcc.n	801f77a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801f776:	2300      	movs	r3, #0
 801f778:	e102      	b.n	801f980 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801f77a:	687b      	ldr	r3, [r7, #4]
 801f77c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f77e:	887a      	ldrh	r2, [r7, #2]
 801f780:	429a      	cmp	r2, r3
 801f782:	d906      	bls.n	801f792 <tcp_split_unsent_seg+0x7e>
 801f784:	4b80      	ldr	r3, [pc, #512]	@ (801f988 <tcp_split_unsent_seg+0x274>)
 801f786:	f240 325b 	movw	r2, #859	@ 0x35b
 801f78a:	4983      	ldr	r1, [pc, #524]	@ (801f998 <tcp_split_unsent_seg+0x284>)
 801f78c:	4880      	ldr	r0, [pc, #512]	@ (801f990 <tcp_split_unsent_seg+0x27c>)
 801f78e:	f005 fea9 	bl	80254e4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801f792:	697b      	ldr	r3, [r7, #20]
 801f794:	891b      	ldrh	r3, [r3, #8]
 801f796:	2b00      	cmp	r3, #0
 801f798:	d106      	bne.n	801f7a8 <tcp_split_unsent_seg+0x94>
 801f79a:	4b7b      	ldr	r3, [pc, #492]	@ (801f988 <tcp_split_unsent_seg+0x274>)
 801f79c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801f7a0:	497e      	ldr	r1, [pc, #504]	@ (801f99c <tcp_split_unsent_seg+0x288>)
 801f7a2:	487b      	ldr	r0, [pc, #492]	@ (801f990 <tcp_split_unsent_seg+0x27c>)
 801f7a4:	f005 fe9e 	bl	80254e4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801f7a8:	697b      	ldr	r3, [r7, #20]
 801f7aa:	7a9b      	ldrb	r3, [r3, #10]
 801f7ac:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801f7ae:	7bfb      	ldrb	r3, [r7, #15]
 801f7b0:	009b      	lsls	r3, r3, #2
 801f7b2:	b2db      	uxtb	r3, r3
 801f7b4:	f003 0304 	and.w	r3, r3, #4
 801f7b8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801f7ba:	697b      	ldr	r3, [r7, #20]
 801f7bc:	891a      	ldrh	r2, [r3, #8]
 801f7be:	887b      	ldrh	r3, [r7, #2]
 801f7c0:	1ad3      	subs	r3, r2, r3
 801f7c2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801f7c4:	7bbb      	ldrb	r3, [r7, #14]
 801f7c6:	b29a      	uxth	r2, r3
 801f7c8:	89bb      	ldrh	r3, [r7, #12]
 801f7ca:	4413      	add	r3, r2
 801f7cc:	b29b      	uxth	r3, r3
 801f7ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801f7d2:	4619      	mov	r1, r3
 801f7d4:	2036      	movs	r0, #54	@ 0x36
 801f7d6:	f7fa fc21 	bl	801a01c <pbuf_alloc>
 801f7da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f7dc:	693b      	ldr	r3, [r7, #16]
 801f7de:	2b00      	cmp	r3, #0
 801f7e0:	f000 80b7 	beq.w	801f952 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801f7e4:	697b      	ldr	r3, [r7, #20]
 801f7e6:	685b      	ldr	r3, [r3, #4]
 801f7e8:	891a      	ldrh	r2, [r3, #8]
 801f7ea:	697b      	ldr	r3, [r7, #20]
 801f7ec:	891b      	ldrh	r3, [r3, #8]
 801f7ee:	1ad3      	subs	r3, r2, r3
 801f7f0:	b29a      	uxth	r2, r3
 801f7f2:	887b      	ldrh	r3, [r7, #2]
 801f7f4:	4413      	add	r3, r2
 801f7f6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801f7f8:	697b      	ldr	r3, [r7, #20]
 801f7fa:	6858      	ldr	r0, [r3, #4]
 801f7fc:	693b      	ldr	r3, [r7, #16]
 801f7fe:	685a      	ldr	r2, [r3, #4]
 801f800:	7bbb      	ldrb	r3, [r7, #14]
 801f802:	18d1      	adds	r1, r2, r3
 801f804:	897b      	ldrh	r3, [r7, #10]
 801f806:	89ba      	ldrh	r2, [r7, #12]
 801f808:	f7fb f924 	bl	801aa54 <pbuf_copy_partial>
 801f80c:	4603      	mov	r3, r0
 801f80e:	461a      	mov	r2, r3
 801f810:	89bb      	ldrh	r3, [r7, #12]
 801f812:	4293      	cmp	r3, r2
 801f814:	f040 809f 	bne.w	801f956 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801f818:	697b      	ldr	r3, [r7, #20]
 801f81a:	68db      	ldr	r3, [r3, #12]
 801f81c:	899b      	ldrh	r3, [r3, #12]
 801f81e:	b29b      	uxth	r3, r3
 801f820:	4618      	mov	r0, r3
 801f822:	f7f9 fa35 	bl	8018c90 <lwip_htons>
 801f826:	4603      	mov	r3, r0
 801f828:	b2db      	uxtb	r3, r3
 801f82a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f82e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801f830:	2300      	movs	r3, #0
 801f832:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801f834:	7efb      	ldrb	r3, [r7, #27]
 801f836:	f003 0308 	and.w	r3, r3, #8
 801f83a:	2b00      	cmp	r3, #0
 801f83c:	d007      	beq.n	801f84e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801f83e:	7efb      	ldrb	r3, [r7, #27]
 801f840:	f023 0308 	bic.w	r3, r3, #8
 801f844:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801f846:	7ebb      	ldrb	r3, [r7, #26]
 801f848:	f043 0308 	orr.w	r3, r3, #8
 801f84c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801f84e:	7efb      	ldrb	r3, [r7, #27]
 801f850:	f003 0301 	and.w	r3, r3, #1
 801f854:	2b00      	cmp	r3, #0
 801f856:	d007      	beq.n	801f868 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801f858:	7efb      	ldrb	r3, [r7, #27]
 801f85a:	f023 0301 	bic.w	r3, r3, #1
 801f85e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801f860:	7ebb      	ldrb	r3, [r7, #26]
 801f862:	f043 0301 	orr.w	r3, r3, #1
 801f866:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801f868:	697b      	ldr	r3, [r7, #20]
 801f86a:	68db      	ldr	r3, [r3, #12]
 801f86c:	685b      	ldr	r3, [r3, #4]
 801f86e:	4618      	mov	r0, r3
 801f870:	f7f9 fa23 	bl	8018cba <lwip_htonl>
 801f874:	4602      	mov	r2, r0
 801f876:	887b      	ldrh	r3, [r7, #2]
 801f878:	18d1      	adds	r1, r2, r3
 801f87a:	7eba      	ldrb	r2, [r7, #26]
 801f87c:	7bfb      	ldrb	r3, [r7, #15]
 801f87e:	9300      	str	r3, [sp, #0]
 801f880:	460b      	mov	r3, r1
 801f882:	6939      	ldr	r1, [r7, #16]
 801f884:	6878      	ldr	r0, [r7, #4]
 801f886:	f7ff fa51 	bl	801ed2c <tcp_create_segment>
 801f88a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801f88c:	69fb      	ldr	r3, [r7, #28]
 801f88e:	2b00      	cmp	r3, #0
 801f890:	d063      	beq.n	801f95a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801f892:	697b      	ldr	r3, [r7, #20]
 801f894:	685b      	ldr	r3, [r3, #4]
 801f896:	4618      	mov	r0, r3
 801f898:	f7fa ff64 	bl	801a764 <pbuf_clen>
 801f89c:	4603      	mov	r3, r0
 801f89e:	461a      	mov	r2, r3
 801f8a0:	687b      	ldr	r3, [r7, #4]
 801f8a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f8a6:	1a9b      	subs	r3, r3, r2
 801f8a8:	b29a      	uxth	r2, r3
 801f8aa:	687b      	ldr	r3, [r7, #4]
 801f8ac:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801f8b0:	697b      	ldr	r3, [r7, #20]
 801f8b2:	6858      	ldr	r0, [r3, #4]
 801f8b4:	697b      	ldr	r3, [r7, #20]
 801f8b6:	685b      	ldr	r3, [r3, #4]
 801f8b8:	891a      	ldrh	r2, [r3, #8]
 801f8ba:	89bb      	ldrh	r3, [r7, #12]
 801f8bc:	1ad3      	subs	r3, r2, r3
 801f8be:	b29b      	uxth	r3, r3
 801f8c0:	4619      	mov	r1, r3
 801f8c2:	f7fa fd09 	bl	801a2d8 <pbuf_realloc>
  useg->len -= remainder;
 801f8c6:	697b      	ldr	r3, [r7, #20]
 801f8c8:	891a      	ldrh	r2, [r3, #8]
 801f8ca:	89bb      	ldrh	r3, [r7, #12]
 801f8cc:	1ad3      	subs	r3, r2, r3
 801f8ce:	b29a      	uxth	r2, r3
 801f8d0:	697b      	ldr	r3, [r7, #20]
 801f8d2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801f8d4:	697b      	ldr	r3, [r7, #20]
 801f8d6:	68db      	ldr	r3, [r3, #12]
 801f8d8:	899b      	ldrh	r3, [r3, #12]
 801f8da:	b29c      	uxth	r4, r3
 801f8dc:	7efb      	ldrb	r3, [r7, #27]
 801f8de:	b29b      	uxth	r3, r3
 801f8e0:	4618      	mov	r0, r3
 801f8e2:	f7f9 f9d5 	bl	8018c90 <lwip_htons>
 801f8e6:	4603      	mov	r3, r0
 801f8e8:	461a      	mov	r2, r3
 801f8ea:	697b      	ldr	r3, [r7, #20]
 801f8ec:	68db      	ldr	r3, [r3, #12]
 801f8ee:	4322      	orrs	r2, r4
 801f8f0:	b292      	uxth	r2, r2
 801f8f2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801f8f4:	697b      	ldr	r3, [r7, #20]
 801f8f6:	685b      	ldr	r3, [r3, #4]
 801f8f8:	4618      	mov	r0, r3
 801f8fa:	f7fa ff33 	bl	801a764 <pbuf_clen>
 801f8fe:	4603      	mov	r3, r0
 801f900:	461a      	mov	r2, r3
 801f902:	687b      	ldr	r3, [r7, #4]
 801f904:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f908:	4413      	add	r3, r2
 801f90a:	b29a      	uxth	r2, r3
 801f90c:	687b      	ldr	r3, [r7, #4]
 801f90e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801f912:	69fb      	ldr	r3, [r7, #28]
 801f914:	685b      	ldr	r3, [r3, #4]
 801f916:	4618      	mov	r0, r3
 801f918:	f7fa ff24 	bl	801a764 <pbuf_clen>
 801f91c:	4603      	mov	r3, r0
 801f91e:	461a      	mov	r2, r3
 801f920:	687b      	ldr	r3, [r7, #4]
 801f922:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f926:	4413      	add	r3, r2
 801f928:	b29a      	uxth	r2, r3
 801f92a:	687b      	ldr	r3, [r7, #4]
 801f92c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801f930:	697b      	ldr	r3, [r7, #20]
 801f932:	681a      	ldr	r2, [r3, #0]
 801f934:	69fb      	ldr	r3, [r7, #28]
 801f936:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801f938:	697b      	ldr	r3, [r7, #20]
 801f93a:	69fa      	ldr	r2, [r7, #28]
 801f93c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801f93e:	69fb      	ldr	r3, [r7, #28]
 801f940:	681b      	ldr	r3, [r3, #0]
 801f942:	2b00      	cmp	r3, #0
 801f944:	d103      	bne.n	801f94e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801f946:	687b      	ldr	r3, [r7, #4]
 801f948:	2200      	movs	r2, #0
 801f94a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801f94e:	2300      	movs	r3, #0
 801f950:	e016      	b.n	801f980 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801f952:	bf00      	nop
 801f954:	e002      	b.n	801f95c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801f956:	bf00      	nop
 801f958:	e000      	b.n	801f95c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801f95a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801f95c:	69fb      	ldr	r3, [r7, #28]
 801f95e:	2b00      	cmp	r3, #0
 801f960:	d006      	beq.n	801f970 <tcp_split_unsent_seg+0x25c>
 801f962:	4b09      	ldr	r3, [pc, #36]	@ (801f988 <tcp_split_unsent_seg+0x274>)
 801f964:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801f968:	490d      	ldr	r1, [pc, #52]	@ (801f9a0 <tcp_split_unsent_seg+0x28c>)
 801f96a:	4809      	ldr	r0, [pc, #36]	@ (801f990 <tcp_split_unsent_seg+0x27c>)
 801f96c:	f005 fdba 	bl	80254e4 <iprintf>
  if (p != NULL) {
 801f970:	693b      	ldr	r3, [r7, #16]
 801f972:	2b00      	cmp	r3, #0
 801f974:	d002      	beq.n	801f97c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801f976:	6938      	ldr	r0, [r7, #16]
 801f978:	f7fa fe66 	bl	801a648 <pbuf_free>
  }

  return ERR_MEM;
 801f97c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f980:	4618      	mov	r0, r3
 801f982:	3724      	adds	r7, #36	@ 0x24
 801f984:	46bd      	mov	sp, r7
 801f986:	bd90      	pop	{r4, r7, pc}
 801f988:	0802bc08 	.word	0x0802bc08
 801f98c:	0802bf9c 	.word	0x0802bf9c
 801f990:	0802bc5c 	.word	0x0802bc5c
 801f994:	0802bfc0 	.word	0x0802bfc0
 801f998:	0802bfe4 	.word	0x0802bfe4
 801f99c:	0802bff4 	.word	0x0802bff4
 801f9a0:	0802c004 	.word	0x0802c004

0801f9a4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801f9a4:	b590      	push	{r4, r7, lr}
 801f9a6:	b085      	sub	sp, #20
 801f9a8:	af00      	add	r7, sp, #0
 801f9aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801f9ac:	687b      	ldr	r3, [r7, #4]
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	d106      	bne.n	801f9c0 <tcp_send_fin+0x1c>
 801f9b2:	4b21      	ldr	r3, [pc, #132]	@ (801fa38 <tcp_send_fin+0x94>)
 801f9b4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801f9b8:	4920      	ldr	r1, [pc, #128]	@ (801fa3c <tcp_send_fin+0x98>)
 801f9ba:	4821      	ldr	r0, [pc, #132]	@ (801fa40 <tcp_send_fin+0x9c>)
 801f9bc:	f005 fd92 	bl	80254e4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801f9c0:	687b      	ldr	r3, [r7, #4]
 801f9c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f9c4:	2b00      	cmp	r3, #0
 801f9c6:	d02e      	beq.n	801fa26 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f9c8:	687b      	ldr	r3, [r7, #4]
 801f9ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f9cc:	60fb      	str	r3, [r7, #12]
 801f9ce:	e002      	b.n	801f9d6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801f9d0:	68fb      	ldr	r3, [r7, #12]
 801f9d2:	681b      	ldr	r3, [r3, #0]
 801f9d4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f9d6:	68fb      	ldr	r3, [r7, #12]
 801f9d8:	681b      	ldr	r3, [r3, #0]
 801f9da:	2b00      	cmp	r3, #0
 801f9dc:	d1f8      	bne.n	801f9d0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801f9de:	68fb      	ldr	r3, [r7, #12]
 801f9e0:	68db      	ldr	r3, [r3, #12]
 801f9e2:	899b      	ldrh	r3, [r3, #12]
 801f9e4:	b29b      	uxth	r3, r3
 801f9e6:	4618      	mov	r0, r3
 801f9e8:	f7f9 f952 	bl	8018c90 <lwip_htons>
 801f9ec:	4603      	mov	r3, r0
 801f9ee:	b2db      	uxtb	r3, r3
 801f9f0:	f003 0307 	and.w	r3, r3, #7
 801f9f4:	2b00      	cmp	r3, #0
 801f9f6:	d116      	bne.n	801fa26 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801f9f8:	68fb      	ldr	r3, [r7, #12]
 801f9fa:	68db      	ldr	r3, [r3, #12]
 801f9fc:	899b      	ldrh	r3, [r3, #12]
 801f9fe:	b29c      	uxth	r4, r3
 801fa00:	2001      	movs	r0, #1
 801fa02:	f7f9 f945 	bl	8018c90 <lwip_htons>
 801fa06:	4603      	mov	r3, r0
 801fa08:	461a      	mov	r2, r3
 801fa0a:	68fb      	ldr	r3, [r7, #12]
 801fa0c:	68db      	ldr	r3, [r3, #12]
 801fa0e:	4322      	orrs	r2, r4
 801fa10:	b292      	uxth	r2, r2
 801fa12:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801fa14:	687b      	ldr	r3, [r7, #4]
 801fa16:	8b5b      	ldrh	r3, [r3, #26]
 801fa18:	f043 0320 	orr.w	r3, r3, #32
 801fa1c:	b29a      	uxth	r2, r3
 801fa1e:	687b      	ldr	r3, [r7, #4]
 801fa20:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801fa22:	2300      	movs	r3, #0
 801fa24:	e004      	b.n	801fa30 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801fa26:	2101      	movs	r1, #1
 801fa28:	6878      	ldr	r0, [r7, #4]
 801fa2a:	f000 f80b 	bl	801fa44 <tcp_enqueue_flags>
 801fa2e:	4603      	mov	r3, r0
}
 801fa30:	4618      	mov	r0, r3
 801fa32:	3714      	adds	r7, #20
 801fa34:	46bd      	mov	sp, r7
 801fa36:	bd90      	pop	{r4, r7, pc}
 801fa38:	0802bc08 	.word	0x0802bc08
 801fa3c:	0802c010 	.word	0x0802c010
 801fa40:	0802bc5c 	.word	0x0802bc5c

0801fa44 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801fa44:	b580      	push	{r7, lr}
 801fa46:	b08a      	sub	sp, #40	@ 0x28
 801fa48:	af02      	add	r7, sp, #8
 801fa4a:	6078      	str	r0, [r7, #4]
 801fa4c:	460b      	mov	r3, r1
 801fa4e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801fa50:	2300      	movs	r3, #0
 801fa52:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801fa54:	2300      	movs	r3, #0
 801fa56:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801fa58:	78fb      	ldrb	r3, [r7, #3]
 801fa5a:	f003 0303 	and.w	r3, r3, #3
 801fa5e:	2b00      	cmp	r3, #0
 801fa60:	d106      	bne.n	801fa70 <tcp_enqueue_flags+0x2c>
 801fa62:	4b67      	ldr	r3, [pc, #412]	@ (801fc00 <tcp_enqueue_flags+0x1bc>)
 801fa64:	f240 4211 	movw	r2, #1041	@ 0x411
 801fa68:	4966      	ldr	r1, [pc, #408]	@ (801fc04 <tcp_enqueue_flags+0x1c0>)
 801fa6a:	4867      	ldr	r0, [pc, #412]	@ (801fc08 <tcp_enqueue_flags+0x1c4>)
 801fa6c:	f005 fd3a 	bl	80254e4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801fa70:	687b      	ldr	r3, [r7, #4]
 801fa72:	2b00      	cmp	r3, #0
 801fa74:	d106      	bne.n	801fa84 <tcp_enqueue_flags+0x40>
 801fa76:	4b62      	ldr	r3, [pc, #392]	@ (801fc00 <tcp_enqueue_flags+0x1bc>)
 801fa78:	f240 4213 	movw	r2, #1043	@ 0x413
 801fa7c:	4963      	ldr	r1, [pc, #396]	@ (801fc0c <tcp_enqueue_flags+0x1c8>)
 801fa7e:	4862      	ldr	r0, [pc, #392]	@ (801fc08 <tcp_enqueue_flags+0x1c4>)
 801fa80:	f005 fd30 	bl	80254e4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801fa84:	78fb      	ldrb	r3, [r7, #3]
 801fa86:	f003 0302 	and.w	r3, r3, #2
 801fa8a:	2b00      	cmp	r3, #0
 801fa8c:	d001      	beq.n	801fa92 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801fa8e:	2301      	movs	r3, #1
 801fa90:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801fa92:	7ffb      	ldrb	r3, [r7, #31]
 801fa94:	009b      	lsls	r3, r3, #2
 801fa96:	b2db      	uxtb	r3, r3
 801fa98:	f003 0304 	and.w	r3, r3, #4
 801fa9c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801fa9e:	7dfb      	ldrb	r3, [r7, #23]
 801faa0:	b29b      	uxth	r3, r3
 801faa2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801faa6:	4619      	mov	r1, r3
 801faa8:	2036      	movs	r0, #54	@ 0x36
 801faaa:	f7fa fab7 	bl	801a01c <pbuf_alloc>
 801faae:	6138      	str	r0, [r7, #16]
 801fab0:	693b      	ldr	r3, [r7, #16]
 801fab2:	2b00      	cmp	r3, #0
 801fab4:	d109      	bne.n	801faca <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801fab6:	687b      	ldr	r3, [r7, #4]
 801fab8:	8b5b      	ldrh	r3, [r3, #26]
 801faba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fabe:	b29a      	uxth	r2, r3
 801fac0:	687b      	ldr	r3, [r7, #4]
 801fac2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801fac4:	f04f 33ff 	mov.w	r3, #4294967295
 801fac8:	e095      	b.n	801fbf6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801faca:	693b      	ldr	r3, [r7, #16]
 801facc:	895a      	ldrh	r2, [r3, #10]
 801face:	7dfb      	ldrb	r3, [r7, #23]
 801fad0:	b29b      	uxth	r3, r3
 801fad2:	429a      	cmp	r2, r3
 801fad4:	d206      	bcs.n	801fae4 <tcp_enqueue_flags+0xa0>
 801fad6:	4b4a      	ldr	r3, [pc, #296]	@ (801fc00 <tcp_enqueue_flags+0x1bc>)
 801fad8:	f240 4239 	movw	r2, #1081	@ 0x439
 801fadc:	494c      	ldr	r1, [pc, #304]	@ (801fc10 <tcp_enqueue_flags+0x1cc>)
 801fade:	484a      	ldr	r0, [pc, #296]	@ (801fc08 <tcp_enqueue_flags+0x1c4>)
 801fae0:	f005 fd00 	bl	80254e4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801fae4:	687b      	ldr	r3, [r7, #4]
 801fae6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801fae8:	78fa      	ldrb	r2, [r7, #3]
 801faea:	7ffb      	ldrb	r3, [r7, #31]
 801faec:	9300      	str	r3, [sp, #0]
 801faee:	460b      	mov	r3, r1
 801faf0:	6939      	ldr	r1, [r7, #16]
 801faf2:	6878      	ldr	r0, [r7, #4]
 801faf4:	f7ff f91a 	bl	801ed2c <tcp_create_segment>
 801faf8:	60f8      	str	r0, [r7, #12]
 801fafa:	68fb      	ldr	r3, [r7, #12]
 801fafc:	2b00      	cmp	r3, #0
 801fafe:	d109      	bne.n	801fb14 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801fb00:	687b      	ldr	r3, [r7, #4]
 801fb02:	8b5b      	ldrh	r3, [r3, #26]
 801fb04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fb08:	b29a      	uxth	r2, r3
 801fb0a:	687b      	ldr	r3, [r7, #4]
 801fb0c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801fb0e:	f04f 33ff 	mov.w	r3, #4294967295
 801fb12:	e070      	b.n	801fbf6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801fb14:	68fb      	ldr	r3, [r7, #12]
 801fb16:	68db      	ldr	r3, [r3, #12]
 801fb18:	f003 0303 	and.w	r3, r3, #3
 801fb1c:	2b00      	cmp	r3, #0
 801fb1e:	d006      	beq.n	801fb2e <tcp_enqueue_flags+0xea>
 801fb20:	4b37      	ldr	r3, [pc, #220]	@ (801fc00 <tcp_enqueue_flags+0x1bc>)
 801fb22:	f240 4242 	movw	r2, #1090	@ 0x442
 801fb26:	493b      	ldr	r1, [pc, #236]	@ (801fc14 <tcp_enqueue_flags+0x1d0>)
 801fb28:	4837      	ldr	r0, [pc, #220]	@ (801fc08 <tcp_enqueue_flags+0x1c4>)
 801fb2a:	f005 fcdb 	bl	80254e4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801fb2e:	68fb      	ldr	r3, [r7, #12]
 801fb30:	891b      	ldrh	r3, [r3, #8]
 801fb32:	2b00      	cmp	r3, #0
 801fb34:	d006      	beq.n	801fb44 <tcp_enqueue_flags+0x100>
 801fb36:	4b32      	ldr	r3, [pc, #200]	@ (801fc00 <tcp_enqueue_flags+0x1bc>)
 801fb38:	f240 4243 	movw	r2, #1091	@ 0x443
 801fb3c:	4936      	ldr	r1, [pc, #216]	@ (801fc18 <tcp_enqueue_flags+0x1d4>)
 801fb3e:	4832      	ldr	r0, [pc, #200]	@ (801fc08 <tcp_enqueue_flags+0x1c4>)
 801fb40:	f005 fcd0 	bl	80254e4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801fb44:	687b      	ldr	r3, [r7, #4]
 801fb46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fb48:	2b00      	cmp	r3, #0
 801fb4a:	d103      	bne.n	801fb54 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801fb4c:	687b      	ldr	r3, [r7, #4]
 801fb4e:	68fa      	ldr	r2, [r7, #12]
 801fb50:	66da      	str	r2, [r3, #108]	@ 0x6c
 801fb52:	e00d      	b.n	801fb70 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801fb54:	687b      	ldr	r3, [r7, #4]
 801fb56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fb58:	61bb      	str	r3, [r7, #24]
 801fb5a:	e002      	b.n	801fb62 <tcp_enqueue_flags+0x11e>
 801fb5c:	69bb      	ldr	r3, [r7, #24]
 801fb5e:	681b      	ldr	r3, [r3, #0]
 801fb60:	61bb      	str	r3, [r7, #24]
 801fb62:	69bb      	ldr	r3, [r7, #24]
 801fb64:	681b      	ldr	r3, [r3, #0]
 801fb66:	2b00      	cmp	r3, #0
 801fb68:	d1f8      	bne.n	801fb5c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801fb6a:	69bb      	ldr	r3, [r7, #24]
 801fb6c:	68fa      	ldr	r2, [r7, #12]
 801fb6e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801fb70:	687b      	ldr	r3, [r7, #4]
 801fb72:	2200      	movs	r2, #0
 801fb74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801fb78:	78fb      	ldrb	r3, [r7, #3]
 801fb7a:	f003 0302 	and.w	r3, r3, #2
 801fb7e:	2b00      	cmp	r3, #0
 801fb80:	d104      	bne.n	801fb8c <tcp_enqueue_flags+0x148>
 801fb82:	78fb      	ldrb	r3, [r7, #3]
 801fb84:	f003 0301 	and.w	r3, r3, #1
 801fb88:	2b00      	cmp	r3, #0
 801fb8a:	d004      	beq.n	801fb96 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801fb8c:	687b      	ldr	r3, [r7, #4]
 801fb8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801fb90:	1c5a      	adds	r2, r3, #1
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801fb96:	78fb      	ldrb	r3, [r7, #3]
 801fb98:	f003 0301 	and.w	r3, r3, #1
 801fb9c:	2b00      	cmp	r3, #0
 801fb9e:	d006      	beq.n	801fbae <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801fba0:	687b      	ldr	r3, [r7, #4]
 801fba2:	8b5b      	ldrh	r3, [r3, #26]
 801fba4:	f043 0320 	orr.w	r3, r3, #32
 801fba8:	b29a      	uxth	r2, r3
 801fbaa:	687b      	ldr	r3, [r7, #4]
 801fbac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801fbae:	68fb      	ldr	r3, [r7, #12]
 801fbb0:	685b      	ldr	r3, [r3, #4]
 801fbb2:	4618      	mov	r0, r3
 801fbb4:	f7fa fdd6 	bl	801a764 <pbuf_clen>
 801fbb8:	4603      	mov	r3, r0
 801fbba:	461a      	mov	r2, r3
 801fbbc:	687b      	ldr	r3, [r7, #4]
 801fbbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801fbc2:	4413      	add	r3, r2
 801fbc4:	b29a      	uxth	r2, r3
 801fbc6:	687b      	ldr	r3, [r7, #4]
 801fbc8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801fbcc:	687b      	ldr	r3, [r7, #4]
 801fbce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801fbd2:	2b00      	cmp	r3, #0
 801fbd4:	d00e      	beq.n	801fbf4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801fbd6:	687b      	ldr	r3, [r7, #4]
 801fbd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fbda:	2b00      	cmp	r3, #0
 801fbdc:	d10a      	bne.n	801fbf4 <tcp_enqueue_flags+0x1b0>
 801fbde:	687b      	ldr	r3, [r7, #4]
 801fbe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fbe2:	2b00      	cmp	r3, #0
 801fbe4:	d106      	bne.n	801fbf4 <tcp_enqueue_flags+0x1b0>
 801fbe6:	4b06      	ldr	r3, [pc, #24]	@ (801fc00 <tcp_enqueue_flags+0x1bc>)
 801fbe8:	f240 4265 	movw	r2, #1125	@ 0x465
 801fbec:	490b      	ldr	r1, [pc, #44]	@ (801fc1c <tcp_enqueue_flags+0x1d8>)
 801fbee:	4806      	ldr	r0, [pc, #24]	@ (801fc08 <tcp_enqueue_flags+0x1c4>)
 801fbf0:	f005 fc78 	bl	80254e4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801fbf4:	2300      	movs	r3, #0
}
 801fbf6:	4618      	mov	r0, r3
 801fbf8:	3720      	adds	r7, #32
 801fbfa:	46bd      	mov	sp, r7
 801fbfc:	bd80      	pop	{r7, pc}
 801fbfe:	bf00      	nop
 801fc00:	0802bc08 	.word	0x0802bc08
 801fc04:	0802c02c 	.word	0x0802c02c
 801fc08:	0802bc5c 	.word	0x0802bc5c
 801fc0c:	0802c084 	.word	0x0802c084
 801fc10:	0802c0a4 	.word	0x0802c0a4
 801fc14:	0802c0e0 	.word	0x0802c0e0
 801fc18:	0802c0f8 	.word	0x0802c0f8
 801fc1c:	0802c124 	.word	0x0802c124

0801fc20 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801fc20:	b5b0      	push	{r4, r5, r7, lr}
 801fc22:	b08a      	sub	sp, #40	@ 0x28
 801fc24:	af00      	add	r7, sp, #0
 801fc26:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801fc28:	687b      	ldr	r3, [r7, #4]
 801fc2a:	2b00      	cmp	r3, #0
 801fc2c:	d106      	bne.n	801fc3c <tcp_output+0x1c>
 801fc2e:	4b8a      	ldr	r3, [pc, #552]	@ (801fe58 <tcp_output+0x238>)
 801fc30:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801fc34:	4989      	ldr	r1, [pc, #548]	@ (801fe5c <tcp_output+0x23c>)
 801fc36:	488a      	ldr	r0, [pc, #552]	@ (801fe60 <tcp_output+0x240>)
 801fc38:	f005 fc54 	bl	80254e4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801fc3c:	687b      	ldr	r3, [r7, #4]
 801fc3e:	7d1b      	ldrb	r3, [r3, #20]
 801fc40:	2b01      	cmp	r3, #1
 801fc42:	d106      	bne.n	801fc52 <tcp_output+0x32>
 801fc44:	4b84      	ldr	r3, [pc, #528]	@ (801fe58 <tcp_output+0x238>)
 801fc46:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801fc4a:	4986      	ldr	r1, [pc, #536]	@ (801fe64 <tcp_output+0x244>)
 801fc4c:	4884      	ldr	r0, [pc, #528]	@ (801fe60 <tcp_output+0x240>)
 801fc4e:	f005 fc49 	bl	80254e4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801fc52:	4b85      	ldr	r3, [pc, #532]	@ (801fe68 <tcp_output+0x248>)
 801fc54:	681b      	ldr	r3, [r3, #0]
 801fc56:	687a      	ldr	r2, [r7, #4]
 801fc58:	429a      	cmp	r2, r3
 801fc5a:	d101      	bne.n	801fc60 <tcp_output+0x40>
    return ERR_OK;
 801fc5c:	2300      	movs	r3, #0
 801fc5e:	e1ce      	b.n	801fffe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801fc60:	687b      	ldr	r3, [r7, #4]
 801fc62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801fc66:	687b      	ldr	r3, [r7, #4]
 801fc68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801fc6c:	4293      	cmp	r3, r2
 801fc6e:	bf28      	it	cs
 801fc70:	4613      	movcs	r3, r2
 801fc72:	b29b      	uxth	r3, r3
 801fc74:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801fc76:	687b      	ldr	r3, [r7, #4]
 801fc78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fc7a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801fc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fc7e:	2b00      	cmp	r3, #0
 801fc80:	d10b      	bne.n	801fc9a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801fc82:	687b      	ldr	r3, [r7, #4]
 801fc84:	8b5b      	ldrh	r3, [r3, #26]
 801fc86:	f003 0302 	and.w	r3, r3, #2
 801fc8a:	2b00      	cmp	r3, #0
 801fc8c:	f000 81aa 	beq.w	801ffe4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801fc90:	6878      	ldr	r0, [r7, #4]
 801fc92:	f000 fdcb 	bl	802082c <tcp_send_empty_ack>
 801fc96:	4603      	mov	r3, r0
 801fc98:	e1b1      	b.n	801fffe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801fc9a:	6879      	ldr	r1, [r7, #4]
 801fc9c:	687b      	ldr	r3, [r7, #4]
 801fc9e:	3304      	adds	r3, #4
 801fca0:	461a      	mov	r2, r3
 801fca2:	6878      	ldr	r0, [r7, #4]
 801fca4:	f7ff f826 	bl	801ecf4 <tcp_route>
 801fca8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801fcaa:	697b      	ldr	r3, [r7, #20]
 801fcac:	2b00      	cmp	r3, #0
 801fcae:	d102      	bne.n	801fcb6 <tcp_output+0x96>
    return ERR_RTE;
 801fcb0:	f06f 0303 	mvn.w	r3, #3
 801fcb4:	e1a3      	b.n	801fffe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801fcb6:	687b      	ldr	r3, [r7, #4]
 801fcb8:	2b00      	cmp	r3, #0
 801fcba:	d003      	beq.n	801fcc4 <tcp_output+0xa4>
 801fcbc:	687b      	ldr	r3, [r7, #4]
 801fcbe:	681b      	ldr	r3, [r3, #0]
 801fcc0:	2b00      	cmp	r3, #0
 801fcc2:	d111      	bne.n	801fce8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801fcc4:	697b      	ldr	r3, [r7, #20]
 801fcc6:	2b00      	cmp	r3, #0
 801fcc8:	d002      	beq.n	801fcd0 <tcp_output+0xb0>
 801fcca:	697b      	ldr	r3, [r7, #20]
 801fccc:	3304      	adds	r3, #4
 801fcce:	e000      	b.n	801fcd2 <tcp_output+0xb2>
 801fcd0:	2300      	movs	r3, #0
 801fcd2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801fcd4:	693b      	ldr	r3, [r7, #16]
 801fcd6:	2b00      	cmp	r3, #0
 801fcd8:	d102      	bne.n	801fce0 <tcp_output+0xc0>
      return ERR_RTE;
 801fcda:	f06f 0303 	mvn.w	r3, #3
 801fcde:	e18e      	b.n	801fffe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801fce0:	693b      	ldr	r3, [r7, #16]
 801fce2:	681a      	ldr	r2, [r3, #0]
 801fce4:	687b      	ldr	r3, [r7, #4]
 801fce6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801fce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fcea:	68db      	ldr	r3, [r3, #12]
 801fcec:	685b      	ldr	r3, [r3, #4]
 801fcee:	4618      	mov	r0, r3
 801fcf0:	f7f8 ffe3 	bl	8018cba <lwip_htonl>
 801fcf4:	4602      	mov	r2, r0
 801fcf6:	687b      	ldr	r3, [r7, #4]
 801fcf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801fcfa:	1ad3      	subs	r3, r2, r3
 801fcfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fcfe:	8912      	ldrh	r2, [r2, #8]
 801fd00:	4413      	add	r3, r2
 801fd02:	69ba      	ldr	r2, [r7, #24]
 801fd04:	429a      	cmp	r2, r3
 801fd06:	d227      	bcs.n	801fd58 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801fd08:	687b      	ldr	r3, [r7, #4]
 801fd0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801fd0e:	461a      	mov	r2, r3
 801fd10:	69bb      	ldr	r3, [r7, #24]
 801fd12:	4293      	cmp	r3, r2
 801fd14:	d114      	bne.n	801fd40 <tcp_output+0x120>
 801fd16:	687b      	ldr	r3, [r7, #4]
 801fd18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fd1a:	2b00      	cmp	r3, #0
 801fd1c:	d110      	bne.n	801fd40 <tcp_output+0x120>
 801fd1e:	687b      	ldr	r3, [r7, #4]
 801fd20:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801fd24:	2b00      	cmp	r3, #0
 801fd26:	d10b      	bne.n	801fd40 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801fd28:	687b      	ldr	r3, [r7, #4]
 801fd2a:	2200      	movs	r2, #0
 801fd2c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801fd30:	687b      	ldr	r3, [r7, #4]
 801fd32:	2201      	movs	r2, #1
 801fd34:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801fd38:	687b      	ldr	r3, [r7, #4]
 801fd3a:	2200      	movs	r2, #0
 801fd3c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801fd40:	687b      	ldr	r3, [r7, #4]
 801fd42:	8b5b      	ldrh	r3, [r3, #26]
 801fd44:	f003 0302 	and.w	r3, r3, #2
 801fd48:	2b00      	cmp	r3, #0
 801fd4a:	f000 814d 	beq.w	801ffe8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801fd4e:	6878      	ldr	r0, [r7, #4]
 801fd50:	f000 fd6c 	bl	802082c <tcp_send_empty_ack>
 801fd54:	4603      	mov	r3, r0
 801fd56:	e152      	b.n	801fffe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801fd58:	687b      	ldr	r3, [r7, #4]
 801fd5a:	2200      	movs	r2, #0
 801fd5c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801fd60:	687b      	ldr	r3, [r7, #4]
 801fd62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fd64:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801fd66:	6a3b      	ldr	r3, [r7, #32]
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	f000 811c 	beq.w	801ffa6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801fd6e:	e002      	b.n	801fd76 <tcp_output+0x156>
 801fd70:	6a3b      	ldr	r3, [r7, #32]
 801fd72:	681b      	ldr	r3, [r3, #0]
 801fd74:	623b      	str	r3, [r7, #32]
 801fd76:	6a3b      	ldr	r3, [r7, #32]
 801fd78:	681b      	ldr	r3, [r3, #0]
 801fd7a:	2b00      	cmp	r3, #0
 801fd7c:	d1f8      	bne.n	801fd70 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801fd7e:	e112      	b.n	801ffa6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801fd80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd82:	68db      	ldr	r3, [r3, #12]
 801fd84:	899b      	ldrh	r3, [r3, #12]
 801fd86:	b29b      	uxth	r3, r3
 801fd88:	4618      	mov	r0, r3
 801fd8a:	f7f8 ff81 	bl	8018c90 <lwip_htons>
 801fd8e:	4603      	mov	r3, r0
 801fd90:	b2db      	uxtb	r3, r3
 801fd92:	f003 0304 	and.w	r3, r3, #4
 801fd96:	2b00      	cmp	r3, #0
 801fd98:	d006      	beq.n	801fda8 <tcp_output+0x188>
 801fd9a:	4b2f      	ldr	r3, [pc, #188]	@ (801fe58 <tcp_output+0x238>)
 801fd9c:	f240 5236 	movw	r2, #1334	@ 0x536
 801fda0:	4932      	ldr	r1, [pc, #200]	@ (801fe6c <tcp_output+0x24c>)
 801fda2:	482f      	ldr	r0, [pc, #188]	@ (801fe60 <tcp_output+0x240>)
 801fda4:	f005 fb9e 	bl	80254e4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801fda8:	687b      	ldr	r3, [r7, #4]
 801fdaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fdac:	2b00      	cmp	r3, #0
 801fdae:	d01f      	beq.n	801fdf0 <tcp_output+0x1d0>
 801fdb0:	687b      	ldr	r3, [r7, #4]
 801fdb2:	8b5b      	ldrh	r3, [r3, #26]
 801fdb4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	d119      	bne.n	801fdf0 <tcp_output+0x1d0>
 801fdbc:	687b      	ldr	r3, [r7, #4]
 801fdbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fdc0:	2b00      	cmp	r3, #0
 801fdc2:	d00b      	beq.n	801fddc <tcp_output+0x1bc>
 801fdc4:	687b      	ldr	r3, [r7, #4]
 801fdc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fdc8:	681b      	ldr	r3, [r3, #0]
 801fdca:	2b00      	cmp	r3, #0
 801fdcc:	d110      	bne.n	801fdf0 <tcp_output+0x1d0>
 801fdce:	687b      	ldr	r3, [r7, #4]
 801fdd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fdd2:	891a      	ldrh	r2, [r3, #8]
 801fdd4:	687b      	ldr	r3, [r7, #4]
 801fdd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801fdd8:	429a      	cmp	r2, r3
 801fdda:	d209      	bcs.n	801fdf0 <tcp_output+0x1d0>
 801fddc:	687b      	ldr	r3, [r7, #4]
 801fdde:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801fde2:	2b00      	cmp	r3, #0
 801fde4:	d004      	beq.n	801fdf0 <tcp_output+0x1d0>
 801fde6:	687b      	ldr	r3, [r7, #4]
 801fde8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801fdec:	2b08      	cmp	r3, #8
 801fdee:	d901      	bls.n	801fdf4 <tcp_output+0x1d4>
 801fdf0:	2301      	movs	r3, #1
 801fdf2:	e000      	b.n	801fdf6 <tcp_output+0x1d6>
 801fdf4:	2300      	movs	r3, #0
 801fdf6:	2b00      	cmp	r3, #0
 801fdf8:	d106      	bne.n	801fe08 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801fdfa:	687b      	ldr	r3, [r7, #4]
 801fdfc:	8b5b      	ldrh	r3, [r3, #26]
 801fdfe:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801fe02:	2b00      	cmp	r3, #0
 801fe04:	f000 80e4 	beq.w	801ffd0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801fe08:	687b      	ldr	r3, [r7, #4]
 801fe0a:	7d1b      	ldrb	r3, [r3, #20]
 801fe0c:	2b02      	cmp	r3, #2
 801fe0e:	d00d      	beq.n	801fe2c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801fe10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe12:	68db      	ldr	r3, [r3, #12]
 801fe14:	899b      	ldrh	r3, [r3, #12]
 801fe16:	b29c      	uxth	r4, r3
 801fe18:	2010      	movs	r0, #16
 801fe1a:	f7f8 ff39 	bl	8018c90 <lwip_htons>
 801fe1e:	4603      	mov	r3, r0
 801fe20:	461a      	mov	r2, r3
 801fe22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe24:	68db      	ldr	r3, [r3, #12]
 801fe26:	4322      	orrs	r2, r4
 801fe28:	b292      	uxth	r2, r2
 801fe2a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801fe2c:	697a      	ldr	r2, [r7, #20]
 801fe2e:	6879      	ldr	r1, [r7, #4]
 801fe30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801fe32:	f000 f909 	bl	8020048 <tcp_output_segment>
 801fe36:	4603      	mov	r3, r0
 801fe38:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801fe3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801fe3e:	2b00      	cmp	r3, #0
 801fe40:	d016      	beq.n	801fe70 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801fe42:	687b      	ldr	r3, [r7, #4]
 801fe44:	8b5b      	ldrh	r3, [r3, #26]
 801fe46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fe4a:	b29a      	uxth	r2, r3
 801fe4c:	687b      	ldr	r3, [r7, #4]
 801fe4e:	835a      	strh	r2, [r3, #26]
      return err;
 801fe50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801fe54:	e0d3      	b.n	801fffe <tcp_output+0x3de>
 801fe56:	bf00      	nop
 801fe58:	0802bc08 	.word	0x0802bc08
 801fe5c:	0802c14c 	.word	0x0802c14c
 801fe60:	0802bc5c 	.word	0x0802bc5c
 801fe64:	0802c164 	.word	0x0802c164
 801fe68:	2400beb0 	.word	0x2400beb0
 801fe6c:	0802c18c 	.word	0x0802c18c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801fe70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe72:	681a      	ldr	r2, [r3, #0]
 801fe74:	687b      	ldr	r3, [r7, #4]
 801fe76:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801fe78:	687b      	ldr	r3, [r7, #4]
 801fe7a:	7d1b      	ldrb	r3, [r3, #20]
 801fe7c:	2b02      	cmp	r3, #2
 801fe7e:	d006      	beq.n	801fe8e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801fe80:	687b      	ldr	r3, [r7, #4]
 801fe82:	8b5b      	ldrh	r3, [r3, #26]
 801fe84:	f023 0303 	bic.w	r3, r3, #3
 801fe88:	b29a      	uxth	r2, r3
 801fe8a:	687b      	ldr	r3, [r7, #4]
 801fe8c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801fe8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe90:	68db      	ldr	r3, [r3, #12]
 801fe92:	685b      	ldr	r3, [r3, #4]
 801fe94:	4618      	mov	r0, r3
 801fe96:	f7f8 ff10 	bl	8018cba <lwip_htonl>
 801fe9a:	4604      	mov	r4, r0
 801fe9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe9e:	891b      	ldrh	r3, [r3, #8]
 801fea0:	461d      	mov	r5, r3
 801fea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fea4:	68db      	ldr	r3, [r3, #12]
 801fea6:	899b      	ldrh	r3, [r3, #12]
 801fea8:	b29b      	uxth	r3, r3
 801feaa:	4618      	mov	r0, r3
 801feac:	f7f8 fef0 	bl	8018c90 <lwip_htons>
 801feb0:	4603      	mov	r3, r0
 801feb2:	b2db      	uxtb	r3, r3
 801feb4:	f003 0303 	and.w	r3, r3, #3
 801feb8:	2b00      	cmp	r3, #0
 801feba:	d001      	beq.n	801fec0 <tcp_output+0x2a0>
 801febc:	2301      	movs	r3, #1
 801febe:	e000      	b.n	801fec2 <tcp_output+0x2a2>
 801fec0:	2300      	movs	r3, #0
 801fec2:	442b      	add	r3, r5
 801fec4:	4423      	add	r3, r4
 801fec6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801fec8:	687b      	ldr	r3, [r7, #4]
 801feca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801fecc:	68bb      	ldr	r3, [r7, #8]
 801fece:	1ad3      	subs	r3, r2, r3
 801fed0:	2b00      	cmp	r3, #0
 801fed2:	da02      	bge.n	801feda <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801fed4:	687b      	ldr	r3, [r7, #4]
 801fed6:	68ba      	ldr	r2, [r7, #8]
 801fed8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801feda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fedc:	891b      	ldrh	r3, [r3, #8]
 801fede:	461c      	mov	r4, r3
 801fee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fee2:	68db      	ldr	r3, [r3, #12]
 801fee4:	899b      	ldrh	r3, [r3, #12]
 801fee6:	b29b      	uxth	r3, r3
 801fee8:	4618      	mov	r0, r3
 801feea:	f7f8 fed1 	bl	8018c90 <lwip_htons>
 801feee:	4603      	mov	r3, r0
 801fef0:	b2db      	uxtb	r3, r3
 801fef2:	f003 0303 	and.w	r3, r3, #3
 801fef6:	2b00      	cmp	r3, #0
 801fef8:	d001      	beq.n	801fefe <tcp_output+0x2de>
 801fefa:	2301      	movs	r3, #1
 801fefc:	e000      	b.n	801ff00 <tcp_output+0x2e0>
 801fefe:	2300      	movs	r3, #0
 801ff00:	4423      	add	r3, r4
 801ff02:	2b00      	cmp	r3, #0
 801ff04:	d049      	beq.n	801ff9a <tcp_output+0x37a>
      seg->next = NULL;
 801ff06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff08:	2200      	movs	r2, #0
 801ff0a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801ff0c:	687b      	ldr	r3, [r7, #4]
 801ff0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ff10:	2b00      	cmp	r3, #0
 801ff12:	d105      	bne.n	801ff20 <tcp_output+0x300>
        pcb->unacked = seg;
 801ff14:	687b      	ldr	r3, [r7, #4]
 801ff16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ff18:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801ff1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff1c:	623b      	str	r3, [r7, #32]
 801ff1e:	e03f      	b.n	801ffa0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801ff20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff22:	68db      	ldr	r3, [r3, #12]
 801ff24:	685b      	ldr	r3, [r3, #4]
 801ff26:	4618      	mov	r0, r3
 801ff28:	f7f8 fec7 	bl	8018cba <lwip_htonl>
 801ff2c:	4604      	mov	r4, r0
 801ff2e:	6a3b      	ldr	r3, [r7, #32]
 801ff30:	68db      	ldr	r3, [r3, #12]
 801ff32:	685b      	ldr	r3, [r3, #4]
 801ff34:	4618      	mov	r0, r3
 801ff36:	f7f8 fec0 	bl	8018cba <lwip_htonl>
 801ff3a:	4603      	mov	r3, r0
 801ff3c:	1ae3      	subs	r3, r4, r3
 801ff3e:	2b00      	cmp	r3, #0
 801ff40:	da24      	bge.n	801ff8c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801ff42:	687b      	ldr	r3, [r7, #4]
 801ff44:	3370      	adds	r3, #112	@ 0x70
 801ff46:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ff48:	e002      	b.n	801ff50 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801ff4a:	69fb      	ldr	r3, [r7, #28]
 801ff4c:	681b      	ldr	r3, [r3, #0]
 801ff4e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ff50:	69fb      	ldr	r3, [r7, #28]
 801ff52:	681b      	ldr	r3, [r3, #0]
 801ff54:	2b00      	cmp	r3, #0
 801ff56:	d011      	beq.n	801ff7c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ff58:	69fb      	ldr	r3, [r7, #28]
 801ff5a:	681b      	ldr	r3, [r3, #0]
 801ff5c:	68db      	ldr	r3, [r3, #12]
 801ff5e:	685b      	ldr	r3, [r3, #4]
 801ff60:	4618      	mov	r0, r3
 801ff62:	f7f8 feaa 	bl	8018cba <lwip_htonl>
 801ff66:	4604      	mov	r4, r0
 801ff68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff6a:	68db      	ldr	r3, [r3, #12]
 801ff6c:	685b      	ldr	r3, [r3, #4]
 801ff6e:	4618      	mov	r0, r3
 801ff70:	f7f8 fea3 	bl	8018cba <lwip_htonl>
 801ff74:	4603      	mov	r3, r0
 801ff76:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801ff78:	2b00      	cmp	r3, #0
 801ff7a:	dbe6      	blt.n	801ff4a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801ff7c:	69fb      	ldr	r3, [r7, #28]
 801ff7e:	681a      	ldr	r2, [r3, #0]
 801ff80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff82:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801ff84:	69fb      	ldr	r3, [r7, #28]
 801ff86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ff88:	601a      	str	r2, [r3, #0]
 801ff8a:	e009      	b.n	801ffa0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801ff8c:	6a3b      	ldr	r3, [r7, #32]
 801ff8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ff90:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801ff92:	6a3b      	ldr	r3, [r7, #32]
 801ff94:	681b      	ldr	r3, [r3, #0]
 801ff96:	623b      	str	r3, [r7, #32]
 801ff98:	e002      	b.n	801ffa0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801ff9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ff9c:	f7fb ff1f 	bl	801bdde <tcp_seg_free>
    }
    seg = pcb->unsent;
 801ffa0:	687b      	ldr	r3, [r7, #4]
 801ffa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ffa4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801ffa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ffa8:	2b00      	cmp	r3, #0
 801ffaa:	d012      	beq.n	801ffd2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801ffac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ffae:	68db      	ldr	r3, [r3, #12]
 801ffb0:	685b      	ldr	r3, [r3, #4]
 801ffb2:	4618      	mov	r0, r3
 801ffb4:	f7f8 fe81 	bl	8018cba <lwip_htonl>
 801ffb8:	4602      	mov	r2, r0
 801ffba:	687b      	ldr	r3, [r7, #4]
 801ffbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ffbe:	1ad3      	subs	r3, r2, r3
 801ffc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ffc2:	8912      	ldrh	r2, [r2, #8]
 801ffc4:	4413      	add	r3, r2
  while (seg != NULL &&
 801ffc6:	69ba      	ldr	r2, [r7, #24]
 801ffc8:	429a      	cmp	r2, r3
 801ffca:	f4bf aed9 	bcs.w	801fd80 <tcp_output+0x160>
 801ffce:	e000      	b.n	801ffd2 <tcp_output+0x3b2>
      break;
 801ffd0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801ffd2:	687b      	ldr	r3, [r7, #4]
 801ffd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ffd6:	2b00      	cmp	r3, #0
 801ffd8:	d108      	bne.n	801ffec <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	2200      	movs	r2, #0
 801ffde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801ffe2:	e004      	b.n	801ffee <tcp_output+0x3ce>
    goto output_done;
 801ffe4:	bf00      	nop
 801ffe6:	e002      	b.n	801ffee <tcp_output+0x3ce>
    goto output_done;
 801ffe8:	bf00      	nop
 801ffea:	e000      	b.n	801ffee <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801ffec:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801ffee:	687b      	ldr	r3, [r7, #4]
 801fff0:	8b5b      	ldrh	r3, [r3, #26]
 801fff2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801fff6:	b29a      	uxth	r2, r3
 801fff8:	687b      	ldr	r3, [r7, #4]
 801fffa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801fffc:	2300      	movs	r3, #0
}
 801fffe:	4618      	mov	r0, r3
 8020000:	3728      	adds	r7, #40	@ 0x28
 8020002:	46bd      	mov	sp, r7
 8020004:	bdb0      	pop	{r4, r5, r7, pc}
 8020006:	bf00      	nop

08020008 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8020008:	b580      	push	{r7, lr}
 802000a:	b082      	sub	sp, #8
 802000c:	af00      	add	r7, sp, #0
 802000e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8020010:	687b      	ldr	r3, [r7, #4]
 8020012:	2b00      	cmp	r3, #0
 8020014:	d106      	bne.n	8020024 <tcp_output_segment_busy+0x1c>
 8020016:	4b09      	ldr	r3, [pc, #36]	@ (802003c <tcp_output_segment_busy+0x34>)
 8020018:	f240 529a 	movw	r2, #1434	@ 0x59a
 802001c:	4908      	ldr	r1, [pc, #32]	@ (8020040 <tcp_output_segment_busy+0x38>)
 802001e:	4809      	ldr	r0, [pc, #36]	@ (8020044 <tcp_output_segment_busy+0x3c>)
 8020020:	f005 fa60 	bl	80254e4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8020024:	687b      	ldr	r3, [r7, #4]
 8020026:	685b      	ldr	r3, [r3, #4]
 8020028:	7b9b      	ldrb	r3, [r3, #14]
 802002a:	2b01      	cmp	r3, #1
 802002c:	d001      	beq.n	8020032 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 802002e:	2301      	movs	r3, #1
 8020030:	e000      	b.n	8020034 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8020032:	2300      	movs	r3, #0
}
 8020034:	4618      	mov	r0, r3
 8020036:	3708      	adds	r7, #8
 8020038:	46bd      	mov	sp, r7
 802003a:	bd80      	pop	{r7, pc}
 802003c:	0802bc08 	.word	0x0802bc08
 8020040:	0802c1a4 	.word	0x0802c1a4
 8020044:	0802bc5c 	.word	0x0802bc5c

08020048 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8020048:	b5b0      	push	{r4, r5, r7, lr}
 802004a:	b08c      	sub	sp, #48	@ 0x30
 802004c:	af04      	add	r7, sp, #16
 802004e:	60f8      	str	r0, [r7, #12]
 8020050:	60b9      	str	r1, [r7, #8]
 8020052:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8020054:	68fb      	ldr	r3, [r7, #12]
 8020056:	2b00      	cmp	r3, #0
 8020058:	d106      	bne.n	8020068 <tcp_output_segment+0x20>
 802005a:	4b64      	ldr	r3, [pc, #400]	@ (80201ec <tcp_output_segment+0x1a4>)
 802005c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8020060:	4963      	ldr	r1, [pc, #396]	@ (80201f0 <tcp_output_segment+0x1a8>)
 8020062:	4864      	ldr	r0, [pc, #400]	@ (80201f4 <tcp_output_segment+0x1ac>)
 8020064:	f005 fa3e 	bl	80254e4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8020068:	68bb      	ldr	r3, [r7, #8]
 802006a:	2b00      	cmp	r3, #0
 802006c:	d106      	bne.n	802007c <tcp_output_segment+0x34>
 802006e:	4b5f      	ldr	r3, [pc, #380]	@ (80201ec <tcp_output_segment+0x1a4>)
 8020070:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8020074:	4960      	ldr	r1, [pc, #384]	@ (80201f8 <tcp_output_segment+0x1b0>)
 8020076:	485f      	ldr	r0, [pc, #380]	@ (80201f4 <tcp_output_segment+0x1ac>)
 8020078:	f005 fa34 	bl	80254e4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 802007c:	687b      	ldr	r3, [r7, #4]
 802007e:	2b00      	cmp	r3, #0
 8020080:	d106      	bne.n	8020090 <tcp_output_segment+0x48>
 8020082:	4b5a      	ldr	r3, [pc, #360]	@ (80201ec <tcp_output_segment+0x1a4>)
 8020084:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8020088:	495c      	ldr	r1, [pc, #368]	@ (80201fc <tcp_output_segment+0x1b4>)
 802008a:	485a      	ldr	r0, [pc, #360]	@ (80201f4 <tcp_output_segment+0x1ac>)
 802008c:	f005 fa2a 	bl	80254e4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8020090:	68f8      	ldr	r0, [r7, #12]
 8020092:	f7ff ffb9 	bl	8020008 <tcp_output_segment_busy>
 8020096:	4603      	mov	r3, r0
 8020098:	2b00      	cmp	r3, #0
 802009a:	d001      	beq.n	80200a0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 802009c:	2300      	movs	r3, #0
 802009e:	e0a1      	b.n	80201e4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80200a0:	68bb      	ldr	r3, [r7, #8]
 80200a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80200a4:	68fb      	ldr	r3, [r7, #12]
 80200a6:	68dc      	ldr	r4, [r3, #12]
 80200a8:	4610      	mov	r0, r2
 80200aa:	f7f8 fe06 	bl	8018cba <lwip_htonl>
 80200ae:	4603      	mov	r3, r0
 80200b0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80200b2:	68bb      	ldr	r3, [r7, #8]
 80200b4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80200b6:	68fb      	ldr	r3, [r7, #12]
 80200b8:	68dc      	ldr	r4, [r3, #12]
 80200ba:	4610      	mov	r0, r2
 80200bc:	f7f8 fde8 	bl	8018c90 <lwip_htons>
 80200c0:	4603      	mov	r3, r0
 80200c2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80200c4:	68bb      	ldr	r3, [r7, #8]
 80200c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80200c8:	68ba      	ldr	r2, [r7, #8]
 80200ca:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80200cc:	441a      	add	r2, r3
 80200ce:	68bb      	ldr	r3, [r7, #8]
 80200d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80200d2:	68fb      	ldr	r3, [r7, #12]
 80200d4:	68db      	ldr	r3, [r3, #12]
 80200d6:	3314      	adds	r3, #20
 80200d8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80200da:	68fb      	ldr	r3, [r7, #12]
 80200dc:	7a9b      	ldrb	r3, [r3, #10]
 80200de:	f003 0301 	and.w	r3, r3, #1
 80200e2:	2b00      	cmp	r3, #0
 80200e4:	d015      	beq.n	8020112 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80200e6:	68bb      	ldr	r3, [r7, #8]
 80200e8:	3304      	adds	r3, #4
 80200ea:	461a      	mov	r2, r3
 80200ec:	6879      	ldr	r1, [r7, #4]
 80200ee:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80200f2:	f7fc fa39 	bl	801c568 <tcp_eff_send_mss_netif>
 80200f6:	4603      	mov	r3, r0
 80200f8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80200fa:	8b7b      	ldrh	r3, [r7, #26]
 80200fc:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8020100:	4618      	mov	r0, r3
 8020102:	f7f8 fdda 	bl	8018cba <lwip_htonl>
 8020106:	4602      	mov	r2, r0
 8020108:	69fb      	ldr	r3, [r7, #28]
 802010a:	601a      	str	r2, [r3, #0]
    opts += 1;
 802010c:	69fb      	ldr	r3, [r7, #28]
 802010e:	3304      	adds	r3, #4
 8020110:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8020112:	68bb      	ldr	r3, [r7, #8]
 8020114:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8020118:	2b00      	cmp	r3, #0
 802011a:	da02      	bge.n	8020122 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 802011c:	68bb      	ldr	r3, [r7, #8]
 802011e:	2200      	movs	r2, #0
 8020120:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8020122:	68bb      	ldr	r3, [r7, #8]
 8020124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020126:	2b00      	cmp	r3, #0
 8020128:	d10c      	bne.n	8020144 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 802012a:	4b35      	ldr	r3, [pc, #212]	@ (8020200 <tcp_output_segment+0x1b8>)
 802012c:	681a      	ldr	r2, [r3, #0]
 802012e:	68bb      	ldr	r3, [r7, #8]
 8020130:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8020132:	68fb      	ldr	r3, [r7, #12]
 8020134:	68db      	ldr	r3, [r3, #12]
 8020136:	685b      	ldr	r3, [r3, #4]
 8020138:	4618      	mov	r0, r3
 802013a:	f7f8 fdbe 	bl	8018cba <lwip_htonl>
 802013e:	4602      	mov	r2, r0
 8020140:	68bb      	ldr	r3, [r7, #8]
 8020142:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020144:	68fb      	ldr	r3, [r7, #12]
 8020146:	68da      	ldr	r2, [r3, #12]
 8020148:	68fb      	ldr	r3, [r7, #12]
 802014a:	685b      	ldr	r3, [r3, #4]
 802014c:	685b      	ldr	r3, [r3, #4]
 802014e:	1ad3      	subs	r3, r2, r3
 8020150:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8020152:	68fb      	ldr	r3, [r7, #12]
 8020154:	685b      	ldr	r3, [r3, #4]
 8020156:	8959      	ldrh	r1, [r3, #10]
 8020158:	68fb      	ldr	r3, [r7, #12]
 802015a:	685b      	ldr	r3, [r3, #4]
 802015c:	8b3a      	ldrh	r2, [r7, #24]
 802015e:	1a8a      	subs	r2, r1, r2
 8020160:	b292      	uxth	r2, r2
 8020162:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8020164:	68fb      	ldr	r3, [r7, #12]
 8020166:	685b      	ldr	r3, [r3, #4]
 8020168:	8919      	ldrh	r1, [r3, #8]
 802016a:	68fb      	ldr	r3, [r7, #12]
 802016c:	685b      	ldr	r3, [r3, #4]
 802016e:	8b3a      	ldrh	r2, [r7, #24]
 8020170:	1a8a      	subs	r2, r1, r2
 8020172:	b292      	uxth	r2, r2
 8020174:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8020176:	68fb      	ldr	r3, [r7, #12]
 8020178:	685b      	ldr	r3, [r3, #4]
 802017a:	68fa      	ldr	r2, [r7, #12]
 802017c:	68d2      	ldr	r2, [r2, #12]
 802017e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8020180:	68fb      	ldr	r3, [r7, #12]
 8020182:	68db      	ldr	r3, [r3, #12]
 8020184:	2200      	movs	r2, #0
 8020186:	741a      	strb	r2, [r3, #16]
 8020188:	2200      	movs	r2, #0
 802018a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 802018c:	68fb      	ldr	r3, [r7, #12]
 802018e:	68da      	ldr	r2, [r3, #12]
 8020190:	68fb      	ldr	r3, [r7, #12]
 8020192:	7a9b      	ldrb	r3, [r3, #10]
 8020194:	f003 0301 	and.w	r3, r3, #1
 8020198:	2b00      	cmp	r3, #0
 802019a:	d001      	beq.n	80201a0 <tcp_output_segment+0x158>
 802019c:	2318      	movs	r3, #24
 802019e:	e000      	b.n	80201a2 <tcp_output_segment+0x15a>
 80201a0:	2314      	movs	r3, #20
 80201a2:	4413      	add	r3, r2
 80201a4:	69fa      	ldr	r2, [r7, #28]
 80201a6:	429a      	cmp	r2, r3
 80201a8:	d006      	beq.n	80201b8 <tcp_output_segment+0x170>
 80201aa:	4b10      	ldr	r3, [pc, #64]	@ (80201ec <tcp_output_segment+0x1a4>)
 80201ac:	f240 621c 	movw	r2, #1564	@ 0x61c
 80201b0:	4914      	ldr	r1, [pc, #80]	@ (8020204 <tcp_output_segment+0x1bc>)
 80201b2:	4810      	ldr	r0, [pc, #64]	@ (80201f4 <tcp_output_segment+0x1ac>)
 80201b4:	f005 f996 	bl	80254e4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80201b8:	68fb      	ldr	r3, [r7, #12]
 80201ba:	6858      	ldr	r0, [r3, #4]
 80201bc:	68b9      	ldr	r1, [r7, #8]
 80201be:	68bb      	ldr	r3, [r7, #8]
 80201c0:	1d1c      	adds	r4, r3, #4
 80201c2:	68bb      	ldr	r3, [r7, #8]
 80201c4:	7add      	ldrb	r5, [r3, #11]
 80201c6:	68bb      	ldr	r3, [r7, #8]
 80201c8:	7a9b      	ldrb	r3, [r3, #10]
 80201ca:	687a      	ldr	r2, [r7, #4]
 80201cc:	9202      	str	r2, [sp, #8]
 80201ce:	2206      	movs	r2, #6
 80201d0:	9201      	str	r2, [sp, #4]
 80201d2:	9300      	str	r3, [sp, #0]
 80201d4:	462b      	mov	r3, r5
 80201d6:	4622      	mov	r2, r4
 80201d8:	f002 fdba 	bl	8022d50 <ip4_output_if>
 80201dc:	4603      	mov	r3, r0
 80201de:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80201e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80201e4:	4618      	mov	r0, r3
 80201e6:	3720      	adds	r7, #32
 80201e8:	46bd      	mov	sp, r7
 80201ea:	bdb0      	pop	{r4, r5, r7, pc}
 80201ec:	0802bc08 	.word	0x0802bc08
 80201f0:	0802c1cc 	.word	0x0802c1cc
 80201f4:	0802bc5c 	.word	0x0802bc5c
 80201f8:	0802c1ec 	.word	0x0802c1ec
 80201fc:	0802c20c 	.word	0x0802c20c
 8020200:	2400be64 	.word	0x2400be64
 8020204:	0802c230 	.word	0x0802c230

08020208 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8020208:	b5b0      	push	{r4, r5, r7, lr}
 802020a:	b084      	sub	sp, #16
 802020c:	af00      	add	r7, sp, #0
 802020e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8020210:	687b      	ldr	r3, [r7, #4]
 8020212:	2b00      	cmp	r3, #0
 8020214:	d106      	bne.n	8020224 <tcp_rexmit_rto_prepare+0x1c>
 8020216:	4b31      	ldr	r3, [pc, #196]	@ (80202dc <tcp_rexmit_rto_prepare+0xd4>)
 8020218:	f240 6263 	movw	r2, #1635	@ 0x663
 802021c:	4930      	ldr	r1, [pc, #192]	@ (80202e0 <tcp_rexmit_rto_prepare+0xd8>)
 802021e:	4831      	ldr	r0, [pc, #196]	@ (80202e4 <tcp_rexmit_rto_prepare+0xdc>)
 8020220:	f005 f960 	bl	80254e4 <iprintf>

  if (pcb->unacked == NULL) {
 8020224:	687b      	ldr	r3, [r7, #4]
 8020226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020228:	2b00      	cmp	r3, #0
 802022a:	d102      	bne.n	8020232 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 802022c:	f06f 0305 	mvn.w	r3, #5
 8020230:	e050      	b.n	80202d4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8020232:	687b      	ldr	r3, [r7, #4]
 8020234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020236:	60fb      	str	r3, [r7, #12]
 8020238:	e00b      	b.n	8020252 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 802023a:	68f8      	ldr	r0, [r7, #12]
 802023c:	f7ff fee4 	bl	8020008 <tcp_output_segment_busy>
 8020240:	4603      	mov	r3, r0
 8020242:	2b00      	cmp	r3, #0
 8020244:	d002      	beq.n	802024c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8020246:	f06f 0305 	mvn.w	r3, #5
 802024a:	e043      	b.n	80202d4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 802024c:	68fb      	ldr	r3, [r7, #12]
 802024e:	681b      	ldr	r3, [r3, #0]
 8020250:	60fb      	str	r3, [r7, #12]
 8020252:	68fb      	ldr	r3, [r7, #12]
 8020254:	681b      	ldr	r3, [r3, #0]
 8020256:	2b00      	cmp	r3, #0
 8020258:	d1ef      	bne.n	802023a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 802025a:	68f8      	ldr	r0, [r7, #12]
 802025c:	f7ff fed4 	bl	8020008 <tcp_output_segment_busy>
 8020260:	4603      	mov	r3, r0
 8020262:	2b00      	cmp	r3, #0
 8020264:	d002      	beq.n	802026c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8020266:	f06f 0305 	mvn.w	r3, #5
 802026a:	e033      	b.n	80202d4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 802026c:	687b      	ldr	r3, [r7, #4]
 802026e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8020270:	68fb      	ldr	r3, [r7, #12]
 8020272:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8020274:	687b      	ldr	r3, [r7, #4]
 8020276:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8020278:	687b      	ldr	r3, [r7, #4]
 802027a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 802027c:	687b      	ldr	r3, [r7, #4]
 802027e:	2200      	movs	r2, #0
 8020280:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8020282:	687b      	ldr	r3, [r7, #4]
 8020284:	8b5b      	ldrh	r3, [r3, #26]
 8020286:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 802028a:	b29a      	uxth	r2, r3
 802028c:	687b      	ldr	r3, [r7, #4]
 802028e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020290:	68fb      	ldr	r3, [r7, #12]
 8020292:	68db      	ldr	r3, [r3, #12]
 8020294:	685b      	ldr	r3, [r3, #4]
 8020296:	4618      	mov	r0, r3
 8020298:	f7f8 fd0f 	bl	8018cba <lwip_htonl>
 802029c:	4604      	mov	r4, r0
 802029e:	68fb      	ldr	r3, [r7, #12]
 80202a0:	891b      	ldrh	r3, [r3, #8]
 80202a2:	461d      	mov	r5, r3
 80202a4:	68fb      	ldr	r3, [r7, #12]
 80202a6:	68db      	ldr	r3, [r3, #12]
 80202a8:	899b      	ldrh	r3, [r3, #12]
 80202aa:	b29b      	uxth	r3, r3
 80202ac:	4618      	mov	r0, r3
 80202ae:	f7f8 fcef 	bl	8018c90 <lwip_htons>
 80202b2:	4603      	mov	r3, r0
 80202b4:	b2db      	uxtb	r3, r3
 80202b6:	f003 0303 	and.w	r3, r3, #3
 80202ba:	2b00      	cmp	r3, #0
 80202bc:	d001      	beq.n	80202c2 <tcp_rexmit_rto_prepare+0xba>
 80202be:	2301      	movs	r3, #1
 80202c0:	e000      	b.n	80202c4 <tcp_rexmit_rto_prepare+0xbc>
 80202c2:	2300      	movs	r3, #0
 80202c4:	442b      	add	r3, r5
 80202c6:	18e2      	adds	r2, r4, r3
 80202c8:	687b      	ldr	r3, [r7, #4]
 80202ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80202cc:	687b      	ldr	r3, [r7, #4]
 80202ce:	2200      	movs	r2, #0
 80202d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80202d2:	2300      	movs	r3, #0
}
 80202d4:	4618      	mov	r0, r3
 80202d6:	3710      	adds	r7, #16
 80202d8:	46bd      	mov	sp, r7
 80202da:	bdb0      	pop	{r4, r5, r7, pc}
 80202dc:	0802bc08 	.word	0x0802bc08
 80202e0:	0802c244 	.word	0x0802c244
 80202e4:	0802bc5c 	.word	0x0802bc5c

080202e8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80202e8:	b580      	push	{r7, lr}
 80202ea:	b082      	sub	sp, #8
 80202ec:	af00      	add	r7, sp, #0
 80202ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80202f0:	687b      	ldr	r3, [r7, #4]
 80202f2:	2b00      	cmp	r3, #0
 80202f4:	d106      	bne.n	8020304 <tcp_rexmit_rto_commit+0x1c>
 80202f6:	4b0d      	ldr	r3, [pc, #52]	@ (802032c <tcp_rexmit_rto_commit+0x44>)
 80202f8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80202fc:	490c      	ldr	r1, [pc, #48]	@ (8020330 <tcp_rexmit_rto_commit+0x48>)
 80202fe:	480d      	ldr	r0, [pc, #52]	@ (8020334 <tcp_rexmit_rto_commit+0x4c>)
 8020300:	f005 f8f0 	bl	80254e4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8020304:	687b      	ldr	r3, [r7, #4]
 8020306:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 802030a:	2bff      	cmp	r3, #255	@ 0xff
 802030c:	d007      	beq.n	802031e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 802030e:	687b      	ldr	r3, [r7, #4]
 8020310:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8020314:	3301      	adds	r3, #1
 8020316:	b2da      	uxtb	r2, r3
 8020318:	687b      	ldr	r3, [r7, #4]
 802031a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 802031e:	6878      	ldr	r0, [r7, #4]
 8020320:	f7ff fc7e 	bl	801fc20 <tcp_output>
}
 8020324:	bf00      	nop
 8020326:	3708      	adds	r7, #8
 8020328:	46bd      	mov	sp, r7
 802032a:	bd80      	pop	{r7, pc}
 802032c:	0802bc08 	.word	0x0802bc08
 8020330:	0802c268 	.word	0x0802c268
 8020334:	0802bc5c 	.word	0x0802bc5c

08020338 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8020338:	b580      	push	{r7, lr}
 802033a:	b082      	sub	sp, #8
 802033c:	af00      	add	r7, sp, #0
 802033e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8020340:	687b      	ldr	r3, [r7, #4]
 8020342:	2b00      	cmp	r3, #0
 8020344:	d106      	bne.n	8020354 <tcp_rexmit_rto+0x1c>
 8020346:	4b0a      	ldr	r3, [pc, #40]	@ (8020370 <tcp_rexmit_rto+0x38>)
 8020348:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 802034c:	4909      	ldr	r1, [pc, #36]	@ (8020374 <tcp_rexmit_rto+0x3c>)
 802034e:	480a      	ldr	r0, [pc, #40]	@ (8020378 <tcp_rexmit_rto+0x40>)
 8020350:	f005 f8c8 	bl	80254e4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8020354:	6878      	ldr	r0, [r7, #4]
 8020356:	f7ff ff57 	bl	8020208 <tcp_rexmit_rto_prepare>
 802035a:	4603      	mov	r3, r0
 802035c:	2b00      	cmp	r3, #0
 802035e:	d102      	bne.n	8020366 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8020360:	6878      	ldr	r0, [r7, #4]
 8020362:	f7ff ffc1 	bl	80202e8 <tcp_rexmit_rto_commit>
  }
}
 8020366:	bf00      	nop
 8020368:	3708      	adds	r7, #8
 802036a:	46bd      	mov	sp, r7
 802036c:	bd80      	pop	{r7, pc}
 802036e:	bf00      	nop
 8020370:	0802bc08 	.word	0x0802bc08
 8020374:	0802c28c 	.word	0x0802c28c
 8020378:	0802bc5c 	.word	0x0802bc5c

0802037c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 802037c:	b590      	push	{r4, r7, lr}
 802037e:	b085      	sub	sp, #20
 8020380:	af00      	add	r7, sp, #0
 8020382:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8020384:	687b      	ldr	r3, [r7, #4]
 8020386:	2b00      	cmp	r3, #0
 8020388:	d106      	bne.n	8020398 <tcp_rexmit+0x1c>
 802038a:	4b2f      	ldr	r3, [pc, #188]	@ (8020448 <tcp_rexmit+0xcc>)
 802038c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8020390:	492e      	ldr	r1, [pc, #184]	@ (802044c <tcp_rexmit+0xd0>)
 8020392:	482f      	ldr	r0, [pc, #188]	@ (8020450 <tcp_rexmit+0xd4>)
 8020394:	f005 f8a6 	bl	80254e4 <iprintf>

  if (pcb->unacked == NULL) {
 8020398:	687b      	ldr	r3, [r7, #4]
 802039a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802039c:	2b00      	cmp	r3, #0
 802039e:	d102      	bne.n	80203a6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80203a0:	f06f 0305 	mvn.w	r3, #5
 80203a4:	e04c      	b.n	8020440 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80203a6:	687b      	ldr	r3, [r7, #4]
 80203a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80203aa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80203ac:	68b8      	ldr	r0, [r7, #8]
 80203ae:	f7ff fe2b 	bl	8020008 <tcp_output_segment_busy>
 80203b2:	4603      	mov	r3, r0
 80203b4:	2b00      	cmp	r3, #0
 80203b6:	d002      	beq.n	80203be <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80203b8:	f06f 0305 	mvn.w	r3, #5
 80203bc:	e040      	b.n	8020440 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80203be:	68bb      	ldr	r3, [r7, #8]
 80203c0:	681a      	ldr	r2, [r3, #0]
 80203c2:	687b      	ldr	r3, [r7, #4]
 80203c4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80203c6:	687b      	ldr	r3, [r7, #4]
 80203c8:	336c      	adds	r3, #108	@ 0x6c
 80203ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80203cc:	e002      	b.n	80203d4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80203ce:	68fb      	ldr	r3, [r7, #12]
 80203d0:	681b      	ldr	r3, [r3, #0]
 80203d2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80203d4:	68fb      	ldr	r3, [r7, #12]
 80203d6:	681b      	ldr	r3, [r3, #0]
 80203d8:	2b00      	cmp	r3, #0
 80203da:	d011      	beq.n	8020400 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80203dc:	68fb      	ldr	r3, [r7, #12]
 80203de:	681b      	ldr	r3, [r3, #0]
 80203e0:	68db      	ldr	r3, [r3, #12]
 80203e2:	685b      	ldr	r3, [r3, #4]
 80203e4:	4618      	mov	r0, r3
 80203e6:	f7f8 fc68 	bl	8018cba <lwip_htonl>
 80203ea:	4604      	mov	r4, r0
 80203ec:	68bb      	ldr	r3, [r7, #8]
 80203ee:	68db      	ldr	r3, [r3, #12]
 80203f0:	685b      	ldr	r3, [r3, #4]
 80203f2:	4618      	mov	r0, r3
 80203f4:	f7f8 fc61 	bl	8018cba <lwip_htonl>
 80203f8:	4603      	mov	r3, r0
 80203fa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80203fc:	2b00      	cmp	r3, #0
 80203fe:	dbe6      	blt.n	80203ce <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8020400:	68fb      	ldr	r3, [r7, #12]
 8020402:	681a      	ldr	r2, [r3, #0]
 8020404:	68bb      	ldr	r3, [r7, #8]
 8020406:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8020408:	68fb      	ldr	r3, [r7, #12]
 802040a:	68ba      	ldr	r2, [r7, #8]
 802040c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 802040e:	68bb      	ldr	r3, [r7, #8]
 8020410:	681b      	ldr	r3, [r3, #0]
 8020412:	2b00      	cmp	r3, #0
 8020414:	d103      	bne.n	802041e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8020416:	687b      	ldr	r3, [r7, #4]
 8020418:	2200      	movs	r2, #0
 802041a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 802041e:	687b      	ldr	r3, [r7, #4]
 8020420:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8020424:	2bff      	cmp	r3, #255	@ 0xff
 8020426:	d007      	beq.n	8020438 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8020428:	687b      	ldr	r3, [r7, #4]
 802042a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 802042e:	3301      	adds	r3, #1
 8020430:	b2da      	uxtb	r2, r3
 8020432:	687b      	ldr	r3, [r7, #4]
 8020434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8020438:	687b      	ldr	r3, [r7, #4]
 802043a:	2200      	movs	r2, #0
 802043c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 802043e:	2300      	movs	r3, #0
}
 8020440:	4618      	mov	r0, r3
 8020442:	3714      	adds	r7, #20
 8020444:	46bd      	mov	sp, r7
 8020446:	bd90      	pop	{r4, r7, pc}
 8020448:	0802bc08 	.word	0x0802bc08
 802044c:	0802c2a8 	.word	0x0802c2a8
 8020450:	0802bc5c 	.word	0x0802bc5c

08020454 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8020454:	b580      	push	{r7, lr}
 8020456:	b082      	sub	sp, #8
 8020458:	af00      	add	r7, sp, #0
 802045a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 802045c:	687b      	ldr	r3, [r7, #4]
 802045e:	2b00      	cmp	r3, #0
 8020460:	d106      	bne.n	8020470 <tcp_rexmit_fast+0x1c>
 8020462:	4b2a      	ldr	r3, [pc, #168]	@ (802050c <tcp_rexmit_fast+0xb8>)
 8020464:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8020468:	4929      	ldr	r1, [pc, #164]	@ (8020510 <tcp_rexmit_fast+0xbc>)
 802046a:	482a      	ldr	r0, [pc, #168]	@ (8020514 <tcp_rexmit_fast+0xc0>)
 802046c:	f005 f83a 	bl	80254e4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8020470:	687b      	ldr	r3, [r7, #4]
 8020472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020474:	2b00      	cmp	r3, #0
 8020476:	d045      	beq.n	8020504 <tcp_rexmit_fast+0xb0>
 8020478:	687b      	ldr	r3, [r7, #4]
 802047a:	8b5b      	ldrh	r3, [r3, #26]
 802047c:	f003 0304 	and.w	r3, r3, #4
 8020480:	2b00      	cmp	r3, #0
 8020482:	d13f      	bne.n	8020504 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8020484:	6878      	ldr	r0, [r7, #4]
 8020486:	f7ff ff79 	bl	802037c <tcp_rexmit>
 802048a:	4603      	mov	r3, r0
 802048c:	2b00      	cmp	r3, #0
 802048e:	d139      	bne.n	8020504 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8020496:	687b      	ldr	r3, [r7, #4]
 8020498:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 802049c:	4293      	cmp	r3, r2
 802049e:	bf28      	it	cs
 80204a0:	4613      	movcs	r3, r2
 80204a2:	b29b      	uxth	r3, r3
 80204a4:	2b00      	cmp	r3, #0
 80204a6:	da00      	bge.n	80204aa <tcp_rexmit_fast+0x56>
 80204a8:	3301      	adds	r3, #1
 80204aa:	105b      	asrs	r3, r3, #1
 80204ac:	b29a      	uxth	r2, r3
 80204ae:	687b      	ldr	r3, [r7, #4]
 80204b0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80204b4:	687b      	ldr	r3, [r7, #4]
 80204b6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80204ba:	461a      	mov	r2, r3
 80204bc:	687b      	ldr	r3, [r7, #4]
 80204be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80204c0:	005b      	lsls	r3, r3, #1
 80204c2:	429a      	cmp	r2, r3
 80204c4:	d206      	bcs.n	80204d4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80204c6:	687b      	ldr	r3, [r7, #4]
 80204c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80204ca:	005b      	lsls	r3, r3, #1
 80204cc:	b29a      	uxth	r2, r3
 80204ce:	687b      	ldr	r3, [r7, #4]
 80204d0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80204d4:	687b      	ldr	r3, [r7, #4]
 80204d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80204da:	687b      	ldr	r3, [r7, #4]
 80204dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80204de:	4619      	mov	r1, r3
 80204e0:	0049      	lsls	r1, r1, #1
 80204e2:	440b      	add	r3, r1
 80204e4:	b29b      	uxth	r3, r3
 80204e6:	4413      	add	r3, r2
 80204e8:	b29a      	uxth	r2, r3
 80204ea:	687b      	ldr	r3, [r7, #4]
 80204ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80204f0:	687b      	ldr	r3, [r7, #4]
 80204f2:	8b5b      	ldrh	r3, [r3, #26]
 80204f4:	f043 0304 	orr.w	r3, r3, #4
 80204f8:	b29a      	uxth	r2, r3
 80204fa:	687b      	ldr	r3, [r7, #4]
 80204fc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80204fe:	687b      	ldr	r3, [r7, #4]
 8020500:	2200      	movs	r2, #0
 8020502:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8020504:	bf00      	nop
 8020506:	3708      	adds	r7, #8
 8020508:	46bd      	mov	sp, r7
 802050a:	bd80      	pop	{r7, pc}
 802050c:	0802bc08 	.word	0x0802bc08
 8020510:	0802c2c0 	.word	0x0802c2c0
 8020514:	0802bc5c 	.word	0x0802bc5c

08020518 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8020518:	b580      	push	{r7, lr}
 802051a:	b086      	sub	sp, #24
 802051c:	af00      	add	r7, sp, #0
 802051e:	60f8      	str	r0, [r7, #12]
 8020520:	607b      	str	r3, [r7, #4]
 8020522:	460b      	mov	r3, r1
 8020524:	817b      	strh	r3, [r7, #10]
 8020526:	4613      	mov	r3, r2
 8020528:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 802052a:	897a      	ldrh	r2, [r7, #10]
 802052c:	893b      	ldrh	r3, [r7, #8]
 802052e:	4413      	add	r3, r2
 8020530:	b29b      	uxth	r3, r3
 8020532:	3314      	adds	r3, #20
 8020534:	b29b      	uxth	r3, r3
 8020536:	f44f 7220 	mov.w	r2, #640	@ 0x280
 802053a:	4619      	mov	r1, r3
 802053c:	2022      	movs	r0, #34	@ 0x22
 802053e:	f7f9 fd6d 	bl	801a01c <pbuf_alloc>
 8020542:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8020544:	697b      	ldr	r3, [r7, #20]
 8020546:	2b00      	cmp	r3, #0
 8020548:	d04d      	beq.n	80205e6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 802054a:	897b      	ldrh	r3, [r7, #10]
 802054c:	3313      	adds	r3, #19
 802054e:	697a      	ldr	r2, [r7, #20]
 8020550:	8952      	ldrh	r2, [r2, #10]
 8020552:	4293      	cmp	r3, r2
 8020554:	db06      	blt.n	8020564 <tcp_output_alloc_header_common+0x4c>
 8020556:	4b26      	ldr	r3, [pc, #152]	@ (80205f0 <tcp_output_alloc_header_common+0xd8>)
 8020558:	f240 7223 	movw	r2, #1827	@ 0x723
 802055c:	4925      	ldr	r1, [pc, #148]	@ (80205f4 <tcp_output_alloc_header_common+0xdc>)
 802055e:	4826      	ldr	r0, [pc, #152]	@ (80205f8 <tcp_output_alloc_header_common+0xe0>)
 8020560:	f004 ffc0 	bl	80254e4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8020564:	697b      	ldr	r3, [r7, #20]
 8020566:	685b      	ldr	r3, [r3, #4]
 8020568:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 802056a:	8c3b      	ldrh	r3, [r7, #32]
 802056c:	4618      	mov	r0, r3
 802056e:	f7f8 fb8f 	bl	8018c90 <lwip_htons>
 8020572:	4603      	mov	r3, r0
 8020574:	461a      	mov	r2, r3
 8020576:	693b      	ldr	r3, [r7, #16]
 8020578:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 802057a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 802057c:	4618      	mov	r0, r3
 802057e:	f7f8 fb87 	bl	8018c90 <lwip_htons>
 8020582:	4603      	mov	r3, r0
 8020584:	461a      	mov	r2, r3
 8020586:	693b      	ldr	r3, [r7, #16]
 8020588:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 802058a:	693b      	ldr	r3, [r7, #16]
 802058c:	687a      	ldr	r2, [r7, #4]
 802058e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8020590:	68f8      	ldr	r0, [r7, #12]
 8020592:	f7f8 fb92 	bl	8018cba <lwip_htonl>
 8020596:	4602      	mov	r2, r0
 8020598:	693b      	ldr	r3, [r7, #16]
 802059a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 802059c:	897b      	ldrh	r3, [r7, #10]
 802059e:	089b      	lsrs	r3, r3, #2
 80205a0:	b29b      	uxth	r3, r3
 80205a2:	3305      	adds	r3, #5
 80205a4:	b29b      	uxth	r3, r3
 80205a6:	031b      	lsls	r3, r3, #12
 80205a8:	b29a      	uxth	r2, r3
 80205aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80205ae:	b29b      	uxth	r3, r3
 80205b0:	4313      	orrs	r3, r2
 80205b2:	b29b      	uxth	r3, r3
 80205b4:	4618      	mov	r0, r3
 80205b6:	f7f8 fb6b 	bl	8018c90 <lwip_htons>
 80205ba:	4603      	mov	r3, r0
 80205bc:	461a      	mov	r2, r3
 80205be:	693b      	ldr	r3, [r7, #16]
 80205c0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80205c2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80205c4:	4618      	mov	r0, r3
 80205c6:	f7f8 fb63 	bl	8018c90 <lwip_htons>
 80205ca:	4603      	mov	r3, r0
 80205cc:	461a      	mov	r2, r3
 80205ce:	693b      	ldr	r3, [r7, #16]
 80205d0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80205d2:	693b      	ldr	r3, [r7, #16]
 80205d4:	2200      	movs	r2, #0
 80205d6:	741a      	strb	r2, [r3, #16]
 80205d8:	2200      	movs	r2, #0
 80205da:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80205dc:	693b      	ldr	r3, [r7, #16]
 80205de:	2200      	movs	r2, #0
 80205e0:	749a      	strb	r2, [r3, #18]
 80205e2:	2200      	movs	r2, #0
 80205e4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80205e6:	697b      	ldr	r3, [r7, #20]
}
 80205e8:	4618      	mov	r0, r3
 80205ea:	3718      	adds	r7, #24
 80205ec:	46bd      	mov	sp, r7
 80205ee:	bd80      	pop	{r7, pc}
 80205f0:	0802bc08 	.word	0x0802bc08
 80205f4:	0802c2e0 	.word	0x0802c2e0
 80205f8:	0802bc5c 	.word	0x0802bc5c

080205fc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80205fc:	b5b0      	push	{r4, r5, r7, lr}
 80205fe:	b08a      	sub	sp, #40	@ 0x28
 8020600:	af04      	add	r7, sp, #16
 8020602:	60f8      	str	r0, [r7, #12]
 8020604:	607b      	str	r3, [r7, #4]
 8020606:	460b      	mov	r3, r1
 8020608:	817b      	strh	r3, [r7, #10]
 802060a:	4613      	mov	r3, r2
 802060c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 802060e:	68fb      	ldr	r3, [r7, #12]
 8020610:	2b00      	cmp	r3, #0
 8020612:	d106      	bne.n	8020622 <tcp_output_alloc_header+0x26>
 8020614:	4b15      	ldr	r3, [pc, #84]	@ (802066c <tcp_output_alloc_header+0x70>)
 8020616:	f240 7242 	movw	r2, #1858	@ 0x742
 802061a:	4915      	ldr	r1, [pc, #84]	@ (8020670 <tcp_output_alloc_header+0x74>)
 802061c:	4815      	ldr	r0, [pc, #84]	@ (8020674 <tcp_output_alloc_header+0x78>)
 802061e:	f004 ff61 	bl	80254e4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8020622:	68fb      	ldr	r3, [r7, #12]
 8020624:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8020626:	68fb      	ldr	r3, [r7, #12]
 8020628:	8adb      	ldrh	r3, [r3, #22]
 802062a:	68fa      	ldr	r2, [r7, #12]
 802062c:	8b12      	ldrh	r2, [r2, #24]
 802062e:	68f9      	ldr	r1, [r7, #12]
 8020630:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8020632:	893d      	ldrh	r5, [r7, #8]
 8020634:	897c      	ldrh	r4, [r7, #10]
 8020636:	9103      	str	r1, [sp, #12]
 8020638:	2110      	movs	r1, #16
 802063a:	9102      	str	r1, [sp, #8]
 802063c:	9201      	str	r2, [sp, #4]
 802063e:	9300      	str	r3, [sp, #0]
 8020640:	687b      	ldr	r3, [r7, #4]
 8020642:	462a      	mov	r2, r5
 8020644:	4621      	mov	r1, r4
 8020646:	f7ff ff67 	bl	8020518 <tcp_output_alloc_header_common>
 802064a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 802064c:	697b      	ldr	r3, [r7, #20]
 802064e:	2b00      	cmp	r3, #0
 8020650:	d006      	beq.n	8020660 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8020652:	68fb      	ldr	r3, [r7, #12]
 8020654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020656:	68fa      	ldr	r2, [r7, #12]
 8020658:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 802065a:	441a      	add	r2, r3
 802065c:	68fb      	ldr	r3, [r7, #12]
 802065e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8020660:	697b      	ldr	r3, [r7, #20]
}
 8020662:	4618      	mov	r0, r3
 8020664:	3718      	adds	r7, #24
 8020666:	46bd      	mov	sp, r7
 8020668:	bdb0      	pop	{r4, r5, r7, pc}
 802066a:	bf00      	nop
 802066c:	0802bc08 	.word	0x0802bc08
 8020670:	0802c310 	.word	0x0802c310
 8020674:	0802bc5c 	.word	0x0802bc5c

08020678 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8020678:	b580      	push	{r7, lr}
 802067a:	b088      	sub	sp, #32
 802067c:	af00      	add	r7, sp, #0
 802067e:	60f8      	str	r0, [r7, #12]
 8020680:	60b9      	str	r1, [r7, #8]
 8020682:	4611      	mov	r1, r2
 8020684:	461a      	mov	r2, r3
 8020686:	460b      	mov	r3, r1
 8020688:	71fb      	strb	r3, [r7, #7]
 802068a:	4613      	mov	r3, r2
 802068c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 802068e:	2300      	movs	r3, #0
 8020690:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8020692:	68bb      	ldr	r3, [r7, #8]
 8020694:	2b00      	cmp	r3, #0
 8020696:	d106      	bne.n	80206a6 <tcp_output_fill_options+0x2e>
 8020698:	4b12      	ldr	r3, [pc, #72]	@ (80206e4 <tcp_output_fill_options+0x6c>)
 802069a:	f240 7256 	movw	r2, #1878	@ 0x756
 802069e:	4912      	ldr	r1, [pc, #72]	@ (80206e8 <tcp_output_fill_options+0x70>)
 80206a0:	4812      	ldr	r0, [pc, #72]	@ (80206ec <tcp_output_fill_options+0x74>)
 80206a2:	f004 ff1f 	bl	80254e4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80206a6:	68bb      	ldr	r3, [r7, #8]
 80206a8:	685b      	ldr	r3, [r3, #4]
 80206aa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80206ac:	69bb      	ldr	r3, [r7, #24]
 80206ae:	3314      	adds	r3, #20
 80206b0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80206b2:	8bfb      	ldrh	r3, [r7, #30]
 80206b4:	009b      	lsls	r3, r3, #2
 80206b6:	461a      	mov	r2, r3
 80206b8:	79fb      	ldrb	r3, [r7, #7]
 80206ba:	009b      	lsls	r3, r3, #2
 80206bc:	f003 0304 	and.w	r3, r3, #4
 80206c0:	4413      	add	r3, r2
 80206c2:	3314      	adds	r3, #20
 80206c4:	69ba      	ldr	r2, [r7, #24]
 80206c6:	4413      	add	r3, r2
 80206c8:	697a      	ldr	r2, [r7, #20]
 80206ca:	429a      	cmp	r2, r3
 80206cc:	d006      	beq.n	80206dc <tcp_output_fill_options+0x64>
 80206ce:	4b05      	ldr	r3, [pc, #20]	@ (80206e4 <tcp_output_fill_options+0x6c>)
 80206d0:	f240 7275 	movw	r2, #1909	@ 0x775
 80206d4:	4906      	ldr	r1, [pc, #24]	@ (80206f0 <tcp_output_fill_options+0x78>)
 80206d6:	4805      	ldr	r0, [pc, #20]	@ (80206ec <tcp_output_fill_options+0x74>)
 80206d8:	f004 ff04 	bl	80254e4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80206dc:	bf00      	nop
 80206de:	3720      	adds	r7, #32
 80206e0:	46bd      	mov	sp, r7
 80206e2:	bd80      	pop	{r7, pc}
 80206e4:	0802bc08 	.word	0x0802bc08
 80206e8:	0802c338 	.word	0x0802c338
 80206ec:	0802bc5c 	.word	0x0802bc5c
 80206f0:	0802c230 	.word	0x0802c230

080206f4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80206f4:	b580      	push	{r7, lr}
 80206f6:	b08a      	sub	sp, #40	@ 0x28
 80206f8:	af04      	add	r7, sp, #16
 80206fa:	60f8      	str	r0, [r7, #12]
 80206fc:	60b9      	str	r1, [r7, #8]
 80206fe:	607a      	str	r2, [r7, #4]
 8020700:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8020702:	68bb      	ldr	r3, [r7, #8]
 8020704:	2b00      	cmp	r3, #0
 8020706:	d106      	bne.n	8020716 <tcp_output_control_segment+0x22>
 8020708:	4b1c      	ldr	r3, [pc, #112]	@ (802077c <tcp_output_control_segment+0x88>)
 802070a:	f240 7287 	movw	r2, #1927	@ 0x787
 802070e:	491c      	ldr	r1, [pc, #112]	@ (8020780 <tcp_output_control_segment+0x8c>)
 8020710:	481c      	ldr	r0, [pc, #112]	@ (8020784 <tcp_output_control_segment+0x90>)
 8020712:	f004 fee7 	bl	80254e4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8020716:	683a      	ldr	r2, [r7, #0]
 8020718:	6879      	ldr	r1, [r7, #4]
 802071a:	68f8      	ldr	r0, [r7, #12]
 802071c:	f7fe faea 	bl	801ecf4 <tcp_route>
 8020720:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8020722:	693b      	ldr	r3, [r7, #16]
 8020724:	2b00      	cmp	r3, #0
 8020726:	d102      	bne.n	802072e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8020728:	23fc      	movs	r3, #252	@ 0xfc
 802072a:	75fb      	strb	r3, [r7, #23]
 802072c:	e01c      	b.n	8020768 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 802072e:	68fb      	ldr	r3, [r7, #12]
 8020730:	2b00      	cmp	r3, #0
 8020732:	d006      	beq.n	8020742 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8020734:	68fb      	ldr	r3, [r7, #12]
 8020736:	7adb      	ldrb	r3, [r3, #11]
 8020738:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 802073a:	68fb      	ldr	r3, [r7, #12]
 802073c:	7a9b      	ldrb	r3, [r3, #10]
 802073e:	757b      	strb	r3, [r7, #21]
 8020740:	e003      	b.n	802074a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8020742:	23ff      	movs	r3, #255	@ 0xff
 8020744:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8020746:	2300      	movs	r3, #0
 8020748:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 802074a:	7dba      	ldrb	r2, [r7, #22]
 802074c:	693b      	ldr	r3, [r7, #16]
 802074e:	9302      	str	r3, [sp, #8]
 8020750:	2306      	movs	r3, #6
 8020752:	9301      	str	r3, [sp, #4]
 8020754:	7d7b      	ldrb	r3, [r7, #21]
 8020756:	9300      	str	r3, [sp, #0]
 8020758:	4613      	mov	r3, r2
 802075a:	683a      	ldr	r2, [r7, #0]
 802075c:	6879      	ldr	r1, [r7, #4]
 802075e:	68b8      	ldr	r0, [r7, #8]
 8020760:	f002 faf6 	bl	8022d50 <ip4_output_if>
 8020764:	4603      	mov	r3, r0
 8020766:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8020768:	68b8      	ldr	r0, [r7, #8]
 802076a:	f7f9 ff6d 	bl	801a648 <pbuf_free>
  return err;
 802076e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8020772:	4618      	mov	r0, r3
 8020774:	3718      	adds	r7, #24
 8020776:	46bd      	mov	sp, r7
 8020778:	bd80      	pop	{r7, pc}
 802077a:	bf00      	nop
 802077c:	0802bc08 	.word	0x0802bc08
 8020780:	0802c360 	.word	0x0802c360
 8020784:	0802bc5c 	.word	0x0802bc5c

08020788 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8020788:	b590      	push	{r4, r7, lr}
 802078a:	b08b      	sub	sp, #44	@ 0x2c
 802078c:	af04      	add	r7, sp, #16
 802078e:	60f8      	str	r0, [r7, #12]
 8020790:	60b9      	str	r1, [r7, #8]
 8020792:	607a      	str	r2, [r7, #4]
 8020794:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8020796:	683b      	ldr	r3, [r7, #0]
 8020798:	2b00      	cmp	r3, #0
 802079a:	d106      	bne.n	80207aa <tcp_rst+0x22>
 802079c:	4b1f      	ldr	r3, [pc, #124]	@ (802081c <tcp_rst+0x94>)
 802079e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80207a2:	491f      	ldr	r1, [pc, #124]	@ (8020820 <tcp_rst+0x98>)
 80207a4:	481f      	ldr	r0, [pc, #124]	@ (8020824 <tcp_rst+0x9c>)
 80207a6:	f004 fe9d 	bl	80254e4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80207aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80207ac:	2b00      	cmp	r3, #0
 80207ae:	d106      	bne.n	80207be <tcp_rst+0x36>
 80207b0:	4b1a      	ldr	r3, [pc, #104]	@ (802081c <tcp_rst+0x94>)
 80207b2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80207b6:	491c      	ldr	r1, [pc, #112]	@ (8020828 <tcp_rst+0xa0>)
 80207b8:	481a      	ldr	r0, [pc, #104]	@ (8020824 <tcp_rst+0x9c>)
 80207ba:	f004 fe93 	bl	80254e4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80207be:	2300      	movs	r3, #0
 80207c0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80207c2:	f246 0308 	movw	r3, #24584	@ 0x6008
 80207c6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80207c8:	7dfb      	ldrb	r3, [r7, #23]
 80207ca:	b29c      	uxth	r4, r3
 80207cc:	68b8      	ldr	r0, [r7, #8]
 80207ce:	f7f8 fa74 	bl	8018cba <lwip_htonl>
 80207d2:	4602      	mov	r2, r0
 80207d4:	8abb      	ldrh	r3, [r7, #20]
 80207d6:	9303      	str	r3, [sp, #12]
 80207d8:	2314      	movs	r3, #20
 80207da:	9302      	str	r3, [sp, #8]
 80207dc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80207de:	9301      	str	r3, [sp, #4]
 80207e0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80207e2:	9300      	str	r3, [sp, #0]
 80207e4:	4613      	mov	r3, r2
 80207e6:	2200      	movs	r2, #0
 80207e8:	4621      	mov	r1, r4
 80207ea:	6878      	ldr	r0, [r7, #4]
 80207ec:	f7ff fe94 	bl	8020518 <tcp_output_alloc_header_common>
 80207f0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80207f2:	693b      	ldr	r3, [r7, #16]
 80207f4:	2b00      	cmp	r3, #0
 80207f6:	d00c      	beq.n	8020812 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80207f8:	7dfb      	ldrb	r3, [r7, #23]
 80207fa:	2200      	movs	r2, #0
 80207fc:	6939      	ldr	r1, [r7, #16]
 80207fe:	68f8      	ldr	r0, [r7, #12]
 8020800:	f7ff ff3a 	bl	8020678 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8020804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020806:	683a      	ldr	r2, [r7, #0]
 8020808:	6939      	ldr	r1, [r7, #16]
 802080a:	68f8      	ldr	r0, [r7, #12]
 802080c:	f7ff ff72 	bl	80206f4 <tcp_output_control_segment>
 8020810:	e000      	b.n	8020814 <tcp_rst+0x8c>
    return;
 8020812:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8020814:	371c      	adds	r7, #28
 8020816:	46bd      	mov	sp, r7
 8020818:	bd90      	pop	{r4, r7, pc}
 802081a:	bf00      	nop
 802081c:	0802bc08 	.word	0x0802bc08
 8020820:	0802c38c 	.word	0x0802c38c
 8020824:	0802bc5c 	.word	0x0802bc5c
 8020828:	0802c3a8 	.word	0x0802c3a8

0802082c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 802082c:	b590      	push	{r4, r7, lr}
 802082e:	b087      	sub	sp, #28
 8020830:	af00      	add	r7, sp, #0
 8020832:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8020834:	2300      	movs	r3, #0
 8020836:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8020838:	2300      	movs	r3, #0
 802083a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 802083c:	687b      	ldr	r3, [r7, #4]
 802083e:	2b00      	cmp	r3, #0
 8020840:	d106      	bne.n	8020850 <tcp_send_empty_ack+0x24>
 8020842:	4b28      	ldr	r3, [pc, #160]	@ (80208e4 <tcp_send_empty_ack+0xb8>)
 8020844:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8020848:	4927      	ldr	r1, [pc, #156]	@ (80208e8 <tcp_send_empty_ack+0xbc>)
 802084a:	4828      	ldr	r0, [pc, #160]	@ (80208ec <tcp_send_empty_ack+0xc0>)
 802084c:	f004 fe4a 	bl	80254e4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8020850:	7dfb      	ldrb	r3, [r7, #23]
 8020852:	009b      	lsls	r3, r3, #2
 8020854:	b2db      	uxtb	r3, r3
 8020856:	f003 0304 	and.w	r3, r3, #4
 802085a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 802085c:	7d7b      	ldrb	r3, [r7, #21]
 802085e:	b29c      	uxth	r4, r3
 8020860:	687b      	ldr	r3, [r7, #4]
 8020862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020864:	4618      	mov	r0, r3
 8020866:	f7f8 fa28 	bl	8018cba <lwip_htonl>
 802086a:	4603      	mov	r3, r0
 802086c:	2200      	movs	r2, #0
 802086e:	4621      	mov	r1, r4
 8020870:	6878      	ldr	r0, [r7, #4]
 8020872:	f7ff fec3 	bl	80205fc <tcp_output_alloc_header>
 8020876:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8020878:	693b      	ldr	r3, [r7, #16]
 802087a:	2b00      	cmp	r3, #0
 802087c:	d109      	bne.n	8020892 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802087e:	687b      	ldr	r3, [r7, #4]
 8020880:	8b5b      	ldrh	r3, [r3, #26]
 8020882:	f043 0303 	orr.w	r3, r3, #3
 8020886:	b29a      	uxth	r2, r3
 8020888:	687b      	ldr	r3, [r7, #4]
 802088a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 802088c:	f06f 0301 	mvn.w	r3, #1
 8020890:	e023      	b.n	80208da <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8020892:	7dbb      	ldrb	r3, [r7, #22]
 8020894:	7dfa      	ldrb	r2, [r7, #23]
 8020896:	6939      	ldr	r1, [r7, #16]
 8020898:	6878      	ldr	r0, [r7, #4]
 802089a:	f7ff feed 	bl	8020678 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 802089e:	687a      	ldr	r2, [r7, #4]
 80208a0:	687b      	ldr	r3, [r7, #4]
 80208a2:	3304      	adds	r3, #4
 80208a4:	6939      	ldr	r1, [r7, #16]
 80208a6:	6878      	ldr	r0, [r7, #4]
 80208a8:	f7ff ff24 	bl	80206f4 <tcp_output_control_segment>
 80208ac:	4603      	mov	r3, r0
 80208ae:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80208b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80208b4:	2b00      	cmp	r3, #0
 80208b6:	d007      	beq.n	80208c8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80208b8:	687b      	ldr	r3, [r7, #4]
 80208ba:	8b5b      	ldrh	r3, [r3, #26]
 80208bc:	f043 0303 	orr.w	r3, r3, #3
 80208c0:	b29a      	uxth	r2, r3
 80208c2:	687b      	ldr	r3, [r7, #4]
 80208c4:	835a      	strh	r2, [r3, #26]
 80208c6:	e006      	b.n	80208d6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80208c8:	687b      	ldr	r3, [r7, #4]
 80208ca:	8b5b      	ldrh	r3, [r3, #26]
 80208cc:	f023 0303 	bic.w	r3, r3, #3
 80208d0:	b29a      	uxth	r2, r3
 80208d2:	687b      	ldr	r3, [r7, #4]
 80208d4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80208d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80208da:	4618      	mov	r0, r3
 80208dc:	371c      	adds	r7, #28
 80208de:	46bd      	mov	sp, r7
 80208e0:	bd90      	pop	{r4, r7, pc}
 80208e2:	bf00      	nop
 80208e4:	0802bc08 	.word	0x0802bc08
 80208e8:	0802c3c4 	.word	0x0802c3c4
 80208ec:	0802bc5c 	.word	0x0802bc5c

080208f0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80208f0:	b590      	push	{r4, r7, lr}
 80208f2:	b087      	sub	sp, #28
 80208f4:	af00      	add	r7, sp, #0
 80208f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80208f8:	2300      	movs	r3, #0
 80208fa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80208fc:	687b      	ldr	r3, [r7, #4]
 80208fe:	2b00      	cmp	r3, #0
 8020900:	d106      	bne.n	8020910 <tcp_keepalive+0x20>
 8020902:	4b18      	ldr	r3, [pc, #96]	@ (8020964 <tcp_keepalive+0x74>)
 8020904:	f640 0224 	movw	r2, #2084	@ 0x824
 8020908:	4917      	ldr	r1, [pc, #92]	@ (8020968 <tcp_keepalive+0x78>)
 802090a:	4818      	ldr	r0, [pc, #96]	@ (802096c <tcp_keepalive+0x7c>)
 802090c:	f004 fdea 	bl	80254e4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8020910:	7dfb      	ldrb	r3, [r7, #23]
 8020912:	b29c      	uxth	r4, r3
 8020914:	687b      	ldr	r3, [r7, #4]
 8020916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020918:	3b01      	subs	r3, #1
 802091a:	4618      	mov	r0, r3
 802091c:	f7f8 f9cd 	bl	8018cba <lwip_htonl>
 8020920:	4603      	mov	r3, r0
 8020922:	2200      	movs	r2, #0
 8020924:	4621      	mov	r1, r4
 8020926:	6878      	ldr	r0, [r7, #4]
 8020928:	f7ff fe68 	bl	80205fc <tcp_output_alloc_header>
 802092c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 802092e:	693b      	ldr	r3, [r7, #16]
 8020930:	2b00      	cmp	r3, #0
 8020932:	d102      	bne.n	802093a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8020934:	f04f 33ff 	mov.w	r3, #4294967295
 8020938:	e010      	b.n	802095c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 802093a:	7dfb      	ldrb	r3, [r7, #23]
 802093c:	2200      	movs	r2, #0
 802093e:	6939      	ldr	r1, [r7, #16]
 8020940:	6878      	ldr	r0, [r7, #4]
 8020942:	f7ff fe99 	bl	8020678 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020946:	687a      	ldr	r2, [r7, #4]
 8020948:	687b      	ldr	r3, [r7, #4]
 802094a:	3304      	adds	r3, #4
 802094c:	6939      	ldr	r1, [r7, #16]
 802094e:	6878      	ldr	r0, [r7, #4]
 8020950:	f7ff fed0 	bl	80206f4 <tcp_output_control_segment>
 8020954:	4603      	mov	r3, r0
 8020956:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8020958:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802095c:	4618      	mov	r0, r3
 802095e:	371c      	adds	r7, #28
 8020960:	46bd      	mov	sp, r7
 8020962:	bd90      	pop	{r4, r7, pc}
 8020964:	0802bc08 	.word	0x0802bc08
 8020968:	0802c3e4 	.word	0x0802c3e4
 802096c:	0802bc5c 	.word	0x0802bc5c

08020970 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8020970:	b590      	push	{r4, r7, lr}
 8020972:	b08b      	sub	sp, #44	@ 0x2c
 8020974:	af00      	add	r7, sp, #0
 8020976:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8020978:	2300      	movs	r3, #0
 802097a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 802097e:	687b      	ldr	r3, [r7, #4]
 8020980:	2b00      	cmp	r3, #0
 8020982:	d106      	bne.n	8020992 <tcp_zero_window_probe+0x22>
 8020984:	4b4c      	ldr	r3, [pc, #304]	@ (8020ab8 <tcp_zero_window_probe+0x148>)
 8020986:	f640 024f 	movw	r2, #2127	@ 0x84f
 802098a:	494c      	ldr	r1, [pc, #304]	@ (8020abc <tcp_zero_window_probe+0x14c>)
 802098c:	484c      	ldr	r0, [pc, #304]	@ (8020ac0 <tcp_zero_window_probe+0x150>)
 802098e:	f004 fda9 	bl	80254e4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8020992:	687b      	ldr	r3, [r7, #4]
 8020994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020996:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8020998:	6a3b      	ldr	r3, [r7, #32]
 802099a:	2b00      	cmp	r3, #0
 802099c:	d101      	bne.n	80209a2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 802099e:	2300      	movs	r3, #0
 80209a0:	e086      	b.n	8020ab0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80209a2:	687b      	ldr	r3, [r7, #4]
 80209a4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80209a8:	2bff      	cmp	r3, #255	@ 0xff
 80209aa:	d007      	beq.n	80209bc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80209ac:	687b      	ldr	r3, [r7, #4]
 80209ae:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80209b2:	3301      	adds	r3, #1
 80209b4:	b2da      	uxtb	r2, r3
 80209b6:	687b      	ldr	r3, [r7, #4]
 80209b8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80209bc:	6a3b      	ldr	r3, [r7, #32]
 80209be:	68db      	ldr	r3, [r3, #12]
 80209c0:	899b      	ldrh	r3, [r3, #12]
 80209c2:	b29b      	uxth	r3, r3
 80209c4:	4618      	mov	r0, r3
 80209c6:	f7f8 f963 	bl	8018c90 <lwip_htons>
 80209ca:	4603      	mov	r3, r0
 80209cc:	b2db      	uxtb	r3, r3
 80209ce:	f003 0301 	and.w	r3, r3, #1
 80209d2:	2b00      	cmp	r3, #0
 80209d4:	d005      	beq.n	80209e2 <tcp_zero_window_probe+0x72>
 80209d6:	6a3b      	ldr	r3, [r7, #32]
 80209d8:	891b      	ldrh	r3, [r3, #8]
 80209da:	2b00      	cmp	r3, #0
 80209dc:	d101      	bne.n	80209e2 <tcp_zero_window_probe+0x72>
 80209de:	2301      	movs	r3, #1
 80209e0:	e000      	b.n	80209e4 <tcp_zero_window_probe+0x74>
 80209e2:	2300      	movs	r3, #0
 80209e4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80209e6:	7ffb      	ldrb	r3, [r7, #31]
 80209e8:	2b00      	cmp	r3, #0
 80209ea:	bf0c      	ite	eq
 80209ec:	2301      	moveq	r3, #1
 80209ee:	2300      	movne	r3, #0
 80209f0:	b2db      	uxtb	r3, r3
 80209f2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80209f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80209f8:	b299      	uxth	r1, r3
 80209fa:	6a3b      	ldr	r3, [r7, #32]
 80209fc:	68db      	ldr	r3, [r3, #12]
 80209fe:	685b      	ldr	r3, [r3, #4]
 8020a00:	8bba      	ldrh	r2, [r7, #28]
 8020a02:	6878      	ldr	r0, [r7, #4]
 8020a04:	f7ff fdfa 	bl	80205fc <tcp_output_alloc_header>
 8020a08:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8020a0a:	69bb      	ldr	r3, [r7, #24]
 8020a0c:	2b00      	cmp	r3, #0
 8020a0e:	d102      	bne.n	8020a16 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8020a10:	f04f 33ff 	mov.w	r3, #4294967295
 8020a14:	e04c      	b.n	8020ab0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8020a16:	69bb      	ldr	r3, [r7, #24]
 8020a18:	685b      	ldr	r3, [r3, #4]
 8020a1a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8020a1c:	7ffb      	ldrb	r3, [r7, #31]
 8020a1e:	2b00      	cmp	r3, #0
 8020a20:	d011      	beq.n	8020a46 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8020a22:	697b      	ldr	r3, [r7, #20]
 8020a24:	899b      	ldrh	r3, [r3, #12]
 8020a26:	b29b      	uxth	r3, r3
 8020a28:	b21b      	sxth	r3, r3
 8020a2a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8020a2e:	b21c      	sxth	r4, r3
 8020a30:	2011      	movs	r0, #17
 8020a32:	f7f8 f92d 	bl	8018c90 <lwip_htons>
 8020a36:	4603      	mov	r3, r0
 8020a38:	b21b      	sxth	r3, r3
 8020a3a:	4323      	orrs	r3, r4
 8020a3c:	b21b      	sxth	r3, r3
 8020a3e:	b29a      	uxth	r2, r3
 8020a40:	697b      	ldr	r3, [r7, #20]
 8020a42:	819a      	strh	r2, [r3, #12]
 8020a44:	e010      	b.n	8020a68 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8020a46:	69bb      	ldr	r3, [r7, #24]
 8020a48:	685b      	ldr	r3, [r3, #4]
 8020a4a:	3314      	adds	r3, #20
 8020a4c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8020a4e:	6a3b      	ldr	r3, [r7, #32]
 8020a50:	6858      	ldr	r0, [r3, #4]
 8020a52:	6a3b      	ldr	r3, [r7, #32]
 8020a54:	685b      	ldr	r3, [r3, #4]
 8020a56:	891a      	ldrh	r2, [r3, #8]
 8020a58:	6a3b      	ldr	r3, [r7, #32]
 8020a5a:	891b      	ldrh	r3, [r3, #8]
 8020a5c:	1ad3      	subs	r3, r2, r3
 8020a5e:	b29b      	uxth	r3, r3
 8020a60:	2201      	movs	r2, #1
 8020a62:	6939      	ldr	r1, [r7, #16]
 8020a64:	f7f9 fff6 	bl	801aa54 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8020a68:	6a3b      	ldr	r3, [r7, #32]
 8020a6a:	68db      	ldr	r3, [r3, #12]
 8020a6c:	685b      	ldr	r3, [r3, #4]
 8020a6e:	4618      	mov	r0, r3
 8020a70:	f7f8 f923 	bl	8018cba <lwip_htonl>
 8020a74:	4603      	mov	r3, r0
 8020a76:	3301      	adds	r3, #1
 8020a78:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020a7a:	687b      	ldr	r3, [r7, #4]
 8020a7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8020a7e:	68fb      	ldr	r3, [r7, #12]
 8020a80:	1ad3      	subs	r3, r2, r3
 8020a82:	2b00      	cmp	r3, #0
 8020a84:	da02      	bge.n	8020a8c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8020a86:	687b      	ldr	r3, [r7, #4]
 8020a88:	68fa      	ldr	r2, [r7, #12]
 8020a8a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8020a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8020a90:	2200      	movs	r2, #0
 8020a92:	69b9      	ldr	r1, [r7, #24]
 8020a94:	6878      	ldr	r0, [r7, #4]
 8020a96:	f7ff fdef 	bl	8020678 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020a9a:	687a      	ldr	r2, [r7, #4]
 8020a9c:	687b      	ldr	r3, [r7, #4]
 8020a9e:	3304      	adds	r3, #4
 8020aa0:	69b9      	ldr	r1, [r7, #24]
 8020aa2:	6878      	ldr	r0, [r7, #4]
 8020aa4:	f7ff fe26 	bl	80206f4 <tcp_output_control_segment>
 8020aa8:	4603      	mov	r3, r0
 8020aaa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8020aac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8020ab0:	4618      	mov	r0, r3
 8020ab2:	372c      	adds	r7, #44	@ 0x2c
 8020ab4:	46bd      	mov	sp, r7
 8020ab6:	bd90      	pop	{r4, r7, pc}
 8020ab8:	0802bc08 	.word	0x0802bc08
 8020abc:	0802c400 	.word	0x0802c400
 8020ac0:	0802bc5c 	.word	0x0802bc5c

08020ac4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8020ac4:	b580      	push	{r7, lr}
 8020ac6:	b082      	sub	sp, #8
 8020ac8:	af00      	add	r7, sp, #0
 8020aca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8020acc:	f7fa f8b0 	bl	801ac30 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8020ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8020afc <tcpip_tcp_timer+0x38>)
 8020ad2:	681b      	ldr	r3, [r3, #0]
 8020ad4:	2b00      	cmp	r3, #0
 8020ad6:	d103      	bne.n	8020ae0 <tcpip_tcp_timer+0x1c>
 8020ad8:	4b09      	ldr	r3, [pc, #36]	@ (8020b00 <tcpip_tcp_timer+0x3c>)
 8020ada:	681b      	ldr	r3, [r3, #0]
 8020adc:	2b00      	cmp	r3, #0
 8020ade:	d005      	beq.n	8020aec <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8020ae0:	2200      	movs	r2, #0
 8020ae2:	4908      	ldr	r1, [pc, #32]	@ (8020b04 <tcpip_tcp_timer+0x40>)
 8020ae4:	20fa      	movs	r0, #250	@ 0xfa
 8020ae6:	f000 f8f3 	bl	8020cd0 <sys_timeout>
 8020aea:	e003      	b.n	8020af4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8020aec:	4b06      	ldr	r3, [pc, #24]	@ (8020b08 <tcpip_tcp_timer+0x44>)
 8020aee:	2200      	movs	r2, #0
 8020af0:	601a      	str	r2, [r3, #0]
  }
}
 8020af2:	bf00      	nop
 8020af4:	bf00      	nop
 8020af6:	3708      	adds	r7, #8
 8020af8:	46bd      	mov	sp, r7
 8020afa:	bd80      	pop	{r7, pc}
 8020afc:	2400be70 	.word	0x2400be70
 8020b00:	2400be74 	.word	0x2400be74
 8020b04:	08020ac5 	.word	0x08020ac5
 8020b08:	2400bebc 	.word	0x2400bebc

08020b0c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8020b0c:	b580      	push	{r7, lr}
 8020b0e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8020b10:	4b0a      	ldr	r3, [pc, #40]	@ (8020b3c <tcp_timer_needed+0x30>)
 8020b12:	681b      	ldr	r3, [r3, #0]
 8020b14:	2b00      	cmp	r3, #0
 8020b16:	d10f      	bne.n	8020b38 <tcp_timer_needed+0x2c>
 8020b18:	4b09      	ldr	r3, [pc, #36]	@ (8020b40 <tcp_timer_needed+0x34>)
 8020b1a:	681b      	ldr	r3, [r3, #0]
 8020b1c:	2b00      	cmp	r3, #0
 8020b1e:	d103      	bne.n	8020b28 <tcp_timer_needed+0x1c>
 8020b20:	4b08      	ldr	r3, [pc, #32]	@ (8020b44 <tcp_timer_needed+0x38>)
 8020b22:	681b      	ldr	r3, [r3, #0]
 8020b24:	2b00      	cmp	r3, #0
 8020b26:	d007      	beq.n	8020b38 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8020b28:	4b04      	ldr	r3, [pc, #16]	@ (8020b3c <tcp_timer_needed+0x30>)
 8020b2a:	2201      	movs	r2, #1
 8020b2c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8020b2e:	2200      	movs	r2, #0
 8020b30:	4905      	ldr	r1, [pc, #20]	@ (8020b48 <tcp_timer_needed+0x3c>)
 8020b32:	20fa      	movs	r0, #250	@ 0xfa
 8020b34:	f000 f8cc 	bl	8020cd0 <sys_timeout>
  }
}
 8020b38:	bf00      	nop
 8020b3a:	bd80      	pop	{r7, pc}
 8020b3c:	2400bebc 	.word	0x2400bebc
 8020b40:	2400be70 	.word	0x2400be70
 8020b44:	2400be74 	.word	0x2400be74
 8020b48:	08020ac5 	.word	0x08020ac5

08020b4c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8020b4c:	b580      	push	{r7, lr}
 8020b4e:	b086      	sub	sp, #24
 8020b50:	af00      	add	r7, sp, #0
 8020b52:	60f8      	str	r0, [r7, #12]
 8020b54:	60b9      	str	r1, [r7, #8]
 8020b56:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8020b58:	200a      	movs	r0, #10
 8020b5a:	f7f8 fe29 	bl	80197b0 <memp_malloc>
 8020b5e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8020b60:	693b      	ldr	r3, [r7, #16]
 8020b62:	2b00      	cmp	r3, #0
 8020b64:	d109      	bne.n	8020b7a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8020b66:	693b      	ldr	r3, [r7, #16]
 8020b68:	2b00      	cmp	r3, #0
 8020b6a:	d151      	bne.n	8020c10 <sys_timeout_abs+0xc4>
 8020b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8020c18 <sys_timeout_abs+0xcc>)
 8020b6e:	22be      	movs	r2, #190	@ 0xbe
 8020b70:	492a      	ldr	r1, [pc, #168]	@ (8020c1c <sys_timeout_abs+0xd0>)
 8020b72:	482b      	ldr	r0, [pc, #172]	@ (8020c20 <sys_timeout_abs+0xd4>)
 8020b74:	f004 fcb6 	bl	80254e4 <iprintf>
    return;
 8020b78:	e04a      	b.n	8020c10 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8020b7a:	693b      	ldr	r3, [r7, #16]
 8020b7c:	2200      	movs	r2, #0
 8020b7e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8020b80:	693b      	ldr	r3, [r7, #16]
 8020b82:	68ba      	ldr	r2, [r7, #8]
 8020b84:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8020b86:	693b      	ldr	r3, [r7, #16]
 8020b88:	687a      	ldr	r2, [r7, #4]
 8020b8a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8020b8c:	693b      	ldr	r3, [r7, #16]
 8020b8e:	68fa      	ldr	r2, [r7, #12]
 8020b90:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8020b92:	4b24      	ldr	r3, [pc, #144]	@ (8020c24 <sys_timeout_abs+0xd8>)
 8020b94:	681b      	ldr	r3, [r3, #0]
 8020b96:	2b00      	cmp	r3, #0
 8020b98:	d103      	bne.n	8020ba2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8020b9a:	4a22      	ldr	r2, [pc, #136]	@ (8020c24 <sys_timeout_abs+0xd8>)
 8020b9c:	693b      	ldr	r3, [r7, #16]
 8020b9e:	6013      	str	r3, [r2, #0]
    return;
 8020ba0:	e037      	b.n	8020c12 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8020ba2:	693b      	ldr	r3, [r7, #16]
 8020ba4:	685a      	ldr	r2, [r3, #4]
 8020ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8020c24 <sys_timeout_abs+0xd8>)
 8020ba8:	681b      	ldr	r3, [r3, #0]
 8020baa:	685b      	ldr	r3, [r3, #4]
 8020bac:	1ad3      	subs	r3, r2, r3
 8020bae:	0fdb      	lsrs	r3, r3, #31
 8020bb0:	f003 0301 	and.w	r3, r3, #1
 8020bb4:	b2db      	uxtb	r3, r3
 8020bb6:	2b00      	cmp	r3, #0
 8020bb8:	d007      	beq.n	8020bca <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8020bba:	4b1a      	ldr	r3, [pc, #104]	@ (8020c24 <sys_timeout_abs+0xd8>)
 8020bbc:	681a      	ldr	r2, [r3, #0]
 8020bbe:	693b      	ldr	r3, [r7, #16]
 8020bc0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8020bc2:	4a18      	ldr	r2, [pc, #96]	@ (8020c24 <sys_timeout_abs+0xd8>)
 8020bc4:	693b      	ldr	r3, [r7, #16]
 8020bc6:	6013      	str	r3, [r2, #0]
 8020bc8:	e023      	b.n	8020c12 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8020bca:	4b16      	ldr	r3, [pc, #88]	@ (8020c24 <sys_timeout_abs+0xd8>)
 8020bcc:	681b      	ldr	r3, [r3, #0]
 8020bce:	617b      	str	r3, [r7, #20]
 8020bd0:	e01a      	b.n	8020c08 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8020bd2:	697b      	ldr	r3, [r7, #20]
 8020bd4:	681b      	ldr	r3, [r3, #0]
 8020bd6:	2b00      	cmp	r3, #0
 8020bd8:	d00b      	beq.n	8020bf2 <sys_timeout_abs+0xa6>
 8020bda:	693b      	ldr	r3, [r7, #16]
 8020bdc:	685a      	ldr	r2, [r3, #4]
 8020bde:	697b      	ldr	r3, [r7, #20]
 8020be0:	681b      	ldr	r3, [r3, #0]
 8020be2:	685b      	ldr	r3, [r3, #4]
 8020be4:	1ad3      	subs	r3, r2, r3
 8020be6:	0fdb      	lsrs	r3, r3, #31
 8020be8:	f003 0301 	and.w	r3, r3, #1
 8020bec:	b2db      	uxtb	r3, r3
 8020bee:	2b00      	cmp	r3, #0
 8020bf0:	d007      	beq.n	8020c02 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8020bf2:	697b      	ldr	r3, [r7, #20]
 8020bf4:	681a      	ldr	r2, [r3, #0]
 8020bf6:	693b      	ldr	r3, [r7, #16]
 8020bf8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8020bfa:	697b      	ldr	r3, [r7, #20]
 8020bfc:	693a      	ldr	r2, [r7, #16]
 8020bfe:	601a      	str	r2, [r3, #0]
        break;
 8020c00:	e007      	b.n	8020c12 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8020c02:	697b      	ldr	r3, [r7, #20]
 8020c04:	681b      	ldr	r3, [r3, #0]
 8020c06:	617b      	str	r3, [r7, #20]
 8020c08:	697b      	ldr	r3, [r7, #20]
 8020c0a:	2b00      	cmp	r3, #0
 8020c0c:	d1e1      	bne.n	8020bd2 <sys_timeout_abs+0x86>
 8020c0e:	e000      	b.n	8020c12 <sys_timeout_abs+0xc6>
    return;
 8020c10:	bf00      	nop
      }
    }
  }
}
 8020c12:	3718      	adds	r7, #24
 8020c14:	46bd      	mov	sp, r7
 8020c16:	bd80      	pop	{r7, pc}
 8020c18:	0802c424 	.word	0x0802c424
 8020c1c:	0802c458 	.word	0x0802c458
 8020c20:	0802c498 	.word	0x0802c498
 8020c24:	2400beb4 	.word	0x2400beb4

08020c28 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8020c28:	b580      	push	{r7, lr}
 8020c2a:	b086      	sub	sp, #24
 8020c2c:	af00      	add	r7, sp, #0
 8020c2e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8020c30:	687b      	ldr	r3, [r7, #4]
 8020c32:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8020c34:	697b      	ldr	r3, [r7, #20]
 8020c36:	685b      	ldr	r3, [r3, #4]
 8020c38:	4798      	blx	r3

  now = sys_now();
 8020c3a:	f7f1 fac9 	bl	80121d0 <sys_now>
 8020c3e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8020c40:	697b      	ldr	r3, [r7, #20]
 8020c42:	681a      	ldr	r2, [r3, #0]
 8020c44:	4b0f      	ldr	r3, [pc, #60]	@ (8020c84 <lwip_cyclic_timer+0x5c>)
 8020c46:	681b      	ldr	r3, [r3, #0]
 8020c48:	4413      	add	r3, r2
 8020c4a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8020c4c:	68fa      	ldr	r2, [r7, #12]
 8020c4e:	693b      	ldr	r3, [r7, #16]
 8020c50:	1ad3      	subs	r3, r2, r3
 8020c52:	0fdb      	lsrs	r3, r3, #31
 8020c54:	f003 0301 	and.w	r3, r3, #1
 8020c58:	b2db      	uxtb	r3, r3
 8020c5a:	2b00      	cmp	r3, #0
 8020c5c:	d009      	beq.n	8020c72 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020c5e:	697b      	ldr	r3, [r7, #20]
 8020c60:	681a      	ldr	r2, [r3, #0]
 8020c62:	693b      	ldr	r3, [r7, #16]
 8020c64:	4413      	add	r3, r2
 8020c66:	687a      	ldr	r2, [r7, #4]
 8020c68:	4907      	ldr	r1, [pc, #28]	@ (8020c88 <lwip_cyclic_timer+0x60>)
 8020c6a:	4618      	mov	r0, r3
 8020c6c:	f7ff ff6e 	bl	8020b4c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8020c70:	e004      	b.n	8020c7c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8020c72:	687a      	ldr	r2, [r7, #4]
 8020c74:	4904      	ldr	r1, [pc, #16]	@ (8020c88 <lwip_cyclic_timer+0x60>)
 8020c76:	68f8      	ldr	r0, [r7, #12]
 8020c78:	f7ff ff68 	bl	8020b4c <sys_timeout_abs>
}
 8020c7c:	bf00      	nop
 8020c7e:	3718      	adds	r7, #24
 8020c80:	46bd      	mov	sp, r7
 8020c82:	bd80      	pop	{r7, pc}
 8020c84:	2400beb8 	.word	0x2400beb8
 8020c88:	08020c29 	.word	0x08020c29

08020c8c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8020c8c:	b580      	push	{r7, lr}
 8020c8e:	b082      	sub	sp, #8
 8020c90:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8020c92:	2301      	movs	r3, #1
 8020c94:	607b      	str	r3, [r7, #4]
 8020c96:	e00e      	b.n	8020cb6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8020c98:	4a0b      	ldr	r2, [pc, #44]	@ (8020cc8 <sys_timeouts_init+0x3c>)
 8020c9a:	687b      	ldr	r3, [r7, #4]
 8020c9c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8020ca0:	687b      	ldr	r3, [r7, #4]
 8020ca2:	00db      	lsls	r3, r3, #3
 8020ca4:	4a08      	ldr	r2, [pc, #32]	@ (8020cc8 <sys_timeouts_init+0x3c>)
 8020ca6:	4413      	add	r3, r2
 8020ca8:	461a      	mov	r2, r3
 8020caa:	4908      	ldr	r1, [pc, #32]	@ (8020ccc <sys_timeouts_init+0x40>)
 8020cac:	f000 f810 	bl	8020cd0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8020cb0:	687b      	ldr	r3, [r7, #4]
 8020cb2:	3301      	adds	r3, #1
 8020cb4:	607b      	str	r3, [r7, #4]
 8020cb6:	687b      	ldr	r3, [r7, #4]
 8020cb8:	2b02      	cmp	r3, #2
 8020cba:	d9ed      	bls.n	8020c98 <sys_timeouts_init+0xc>
  }
}
 8020cbc:	bf00      	nop
 8020cbe:	bf00      	nop
 8020cc0:	3708      	adds	r7, #8
 8020cc2:	46bd      	mov	sp, r7
 8020cc4:	bd80      	pop	{r7, pc}
 8020cc6:	bf00      	nop
 8020cc8:	0802d13c 	.word	0x0802d13c
 8020ccc:	08020c29 	.word	0x08020c29

08020cd0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8020cd0:	b580      	push	{r7, lr}
 8020cd2:	b086      	sub	sp, #24
 8020cd4:	af00      	add	r7, sp, #0
 8020cd6:	60f8      	str	r0, [r7, #12]
 8020cd8:	60b9      	str	r1, [r7, #8]
 8020cda:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020cdc:	68fb      	ldr	r3, [r7, #12]
 8020cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020ce2:	d306      	bcc.n	8020cf2 <sys_timeout+0x22>
 8020ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8020d10 <sys_timeout+0x40>)
 8020ce6:	f240 1229 	movw	r2, #297	@ 0x129
 8020cea:	490a      	ldr	r1, [pc, #40]	@ (8020d14 <sys_timeout+0x44>)
 8020cec:	480a      	ldr	r0, [pc, #40]	@ (8020d18 <sys_timeout+0x48>)
 8020cee:	f004 fbf9 	bl	80254e4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020cf2:	f7f1 fa6d 	bl	80121d0 <sys_now>
 8020cf6:	4602      	mov	r2, r0
 8020cf8:	68fb      	ldr	r3, [r7, #12]
 8020cfa:	4413      	add	r3, r2
 8020cfc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020cfe:	687a      	ldr	r2, [r7, #4]
 8020d00:	68b9      	ldr	r1, [r7, #8]
 8020d02:	6978      	ldr	r0, [r7, #20]
 8020d04:	f7ff ff22 	bl	8020b4c <sys_timeout_abs>
#endif
}
 8020d08:	bf00      	nop
 8020d0a:	3718      	adds	r7, #24
 8020d0c:	46bd      	mov	sp, r7
 8020d0e:	bd80      	pop	{r7, pc}
 8020d10:	0802c424 	.word	0x0802c424
 8020d14:	0802c4c0 	.word	0x0802c4c0
 8020d18:	0802c498 	.word	0x0802c498

08020d1c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8020d1c:	b580      	push	{r7, lr}
 8020d1e:	b084      	sub	sp, #16
 8020d20:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8020d22:	f7f1 fa55 	bl	80121d0 <sys_now>
 8020d26:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8020d28:	4b17      	ldr	r3, [pc, #92]	@ (8020d88 <sys_check_timeouts+0x6c>)
 8020d2a:	681b      	ldr	r3, [r3, #0]
 8020d2c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8020d2e:	68bb      	ldr	r3, [r7, #8]
 8020d30:	2b00      	cmp	r3, #0
 8020d32:	d022      	beq.n	8020d7a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8020d34:	68bb      	ldr	r3, [r7, #8]
 8020d36:	685b      	ldr	r3, [r3, #4]
 8020d38:	68fa      	ldr	r2, [r7, #12]
 8020d3a:	1ad3      	subs	r3, r2, r3
 8020d3c:	0fdb      	lsrs	r3, r3, #31
 8020d3e:	f003 0301 	and.w	r3, r3, #1
 8020d42:	b2db      	uxtb	r3, r3
 8020d44:	2b00      	cmp	r3, #0
 8020d46:	d11a      	bne.n	8020d7e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8020d48:	68bb      	ldr	r3, [r7, #8]
 8020d4a:	681b      	ldr	r3, [r3, #0]
 8020d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8020d88 <sys_check_timeouts+0x6c>)
 8020d4e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8020d50:	68bb      	ldr	r3, [r7, #8]
 8020d52:	689b      	ldr	r3, [r3, #8]
 8020d54:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8020d56:	68bb      	ldr	r3, [r7, #8]
 8020d58:	68db      	ldr	r3, [r3, #12]
 8020d5a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8020d5c:	68bb      	ldr	r3, [r7, #8]
 8020d5e:	685b      	ldr	r3, [r3, #4]
 8020d60:	4a0a      	ldr	r2, [pc, #40]	@ (8020d8c <sys_check_timeouts+0x70>)
 8020d62:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8020d64:	68b9      	ldr	r1, [r7, #8]
 8020d66:	200a      	movs	r0, #10
 8020d68:	f7f8 fd98 	bl	801989c <memp_free>
    if (handler != NULL) {
 8020d6c:	687b      	ldr	r3, [r7, #4]
 8020d6e:	2b00      	cmp	r3, #0
 8020d70:	d0da      	beq.n	8020d28 <sys_check_timeouts+0xc>
      handler(arg);
 8020d72:	687b      	ldr	r3, [r7, #4]
 8020d74:	6838      	ldr	r0, [r7, #0]
 8020d76:	4798      	blx	r3
  do {
 8020d78:	e7d6      	b.n	8020d28 <sys_check_timeouts+0xc>
      return;
 8020d7a:	bf00      	nop
 8020d7c:	e000      	b.n	8020d80 <sys_check_timeouts+0x64>
      return;
 8020d7e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8020d80:	3710      	adds	r7, #16
 8020d82:	46bd      	mov	sp, r7
 8020d84:	bd80      	pop	{r7, pc}
 8020d86:	bf00      	nop
 8020d88:	2400beb4 	.word	0x2400beb4
 8020d8c:	2400beb8 	.word	0x2400beb8

08020d90 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8020d90:	b580      	push	{r7, lr}
 8020d92:	b082      	sub	sp, #8
 8020d94:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8020d96:	4b16      	ldr	r3, [pc, #88]	@ (8020df0 <sys_timeouts_sleeptime+0x60>)
 8020d98:	681b      	ldr	r3, [r3, #0]
 8020d9a:	2b00      	cmp	r3, #0
 8020d9c:	d102      	bne.n	8020da4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8020d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8020da2:	e020      	b.n	8020de6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8020da4:	f7f1 fa14 	bl	80121d0 <sys_now>
 8020da8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8020daa:	4b11      	ldr	r3, [pc, #68]	@ (8020df0 <sys_timeouts_sleeptime+0x60>)
 8020dac:	681b      	ldr	r3, [r3, #0]
 8020dae:	685a      	ldr	r2, [r3, #4]
 8020db0:	687b      	ldr	r3, [r7, #4]
 8020db2:	1ad3      	subs	r3, r2, r3
 8020db4:	0fdb      	lsrs	r3, r3, #31
 8020db6:	f003 0301 	and.w	r3, r3, #1
 8020dba:	b2db      	uxtb	r3, r3
 8020dbc:	2b00      	cmp	r3, #0
 8020dbe:	d001      	beq.n	8020dc4 <sys_timeouts_sleeptime+0x34>
    return 0;
 8020dc0:	2300      	movs	r3, #0
 8020dc2:	e010      	b.n	8020de6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8020dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8020df0 <sys_timeouts_sleeptime+0x60>)
 8020dc6:	681b      	ldr	r3, [r3, #0]
 8020dc8:	685a      	ldr	r2, [r3, #4]
 8020dca:	687b      	ldr	r3, [r7, #4]
 8020dcc:	1ad3      	subs	r3, r2, r3
 8020dce:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8020dd0:	683b      	ldr	r3, [r7, #0]
 8020dd2:	2b00      	cmp	r3, #0
 8020dd4:	da06      	bge.n	8020de4 <sys_timeouts_sleeptime+0x54>
 8020dd6:	4b07      	ldr	r3, [pc, #28]	@ (8020df4 <sys_timeouts_sleeptime+0x64>)
 8020dd8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8020ddc:	4906      	ldr	r1, [pc, #24]	@ (8020df8 <sys_timeouts_sleeptime+0x68>)
 8020dde:	4807      	ldr	r0, [pc, #28]	@ (8020dfc <sys_timeouts_sleeptime+0x6c>)
 8020de0:	f004 fb80 	bl	80254e4 <iprintf>
    return ret;
 8020de4:	683b      	ldr	r3, [r7, #0]
  }
}
 8020de6:	4618      	mov	r0, r3
 8020de8:	3708      	adds	r7, #8
 8020dea:	46bd      	mov	sp, r7
 8020dec:	bd80      	pop	{r7, pc}
 8020dee:	bf00      	nop
 8020df0:	2400beb4 	.word	0x2400beb4
 8020df4:	0802c424 	.word	0x0802c424
 8020df8:	0802c4f8 	.word	0x0802c4f8
 8020dfc:	0802c498 	.word	0x0802c498

08020e00 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8020e00:	b580      	push	{r7, lr}
 8020e02:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8020e04:	f003 fbb0 	bl	8024568 <rand>
 8020e08:	4603      	mov	r3, r0
 8020e0a:	b29b      	uxth	r3, r3
 8020e0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8020e10:	b29b      	uxth	r3, r3
 8020e12:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8020e16:	b29a      	uxth	r2, r3
 8020e18:	4b01      	ldr	r3, [pc, #4]	@ (8020e20 <udp_init+0x20>)
 8020e1a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8020e1c:	bf00      	nop
 8020e1e:	bd80      	pop	{r7, pc}
 8020e20:	24000214 	.word	0x24000214

08020e24 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8020e24:	b480      	push	{r7}
 8020e26:	b083      	sub	sp, #12
 8020e28:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8020e2a:	2300      	movs	r3, #0
 8020e2c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8020e2e:	4b17      	ldr	r3, [pc, #92]	@ (8020e8c <udp_new_port+0x68>)
 8020e30:	881b      	ldrh	r3, [r3, #0]
 8020e32:	1c5a      	adds	r2, r3, #1
 8020e34:	b291      	uxth	r1, r2
 8020e36:	4a15      	ldr	r2, [pc, #84]	@ (8020e8c <udp_new_port+0x68>)
 8020e38:	8011      	strh	r1, [r2, #0]
 8020e3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020e3e:	4293      	cmp	r3, r2
 8020e40:	d103      	bne.n	8020e4a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8020e42:	4b12      	ldr	r3, [pc, #72]	@ (8020e8c <udp_new_port+0x68>)
 8020e44:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8020e48:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020e4a:	4b11      	ldr	r3, [pc, #68]	@ (8020e90 <udp_new_port+0x6c>)
 8020e4c:	681b      	ldr	r3, [r3, #0]
 8020e4e:	603b      	str	r3, [r7, #0]
 8020e50:	e011      	b.n	8020e76 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8020e52:	683b      	ldr	r3, [r7, #0]
 8020e54:	8a5a      	ldrh	r2, [r3, #18]
 8020e56:	4b0d      	ldr	r3, [pc, #52]	@ (8020e8c <udp_new_port+0x68>)
 8020e58:	881b      	ldrh	r3, [r3, #0]
 8020e5a:	429a      	cmp	r2, r3
 8020e5c:	d108      	bne.n	8020e70 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8020e5e:	88fb      	ldrh	r3, [r7, #6]
 8020e60:	3301      	adds	r3, #1
 8020e62:	80fb      	strh	r3, [r7, #6]
 8020e64:	88fb      	ldrh	r3, [r7, #6]
 8020e66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8020e6a:	d3e0      	bcc.n	8020e2e <udp_new_port+0xa>
        return 0;
 8020e6c:	2300      	movs	r3, #0
 8020e6e:	e007      	b.n	8020e80 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020e70:	683b      	ldr	r3, [r7, #0]
 8020e72:	68db      	ldr	r3, [r3, #12]
 8020e74:	603b      	str	r3, [r7, #0]
 8020e76:	683b      	ldr	r3, [r7, #0]
 8020e78:	2b00      	cmp	r3, #0
 8020e7a:	d1ea      	bne.n	8020e52 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8020e7c:	4b03      	ldr	r3, [pc, #12]	@ (8020e8c <udp_new_port+0x68>)
 8020e7e:	881b      	ldrh	r3, [r3, #0]
}
 8020e80:	4618      	mov	r0, r3
 8020e82:	370c      	adds	r7, #12
 8020e84:	46bd      	mov	sp, r7
 8020e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e8a:	4770      	bx	lr
 8020e8c:	24000214 	.word	0x24000214
 8020e90:	2400bec0 	.word	0x2400bec0

08020e94 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8020e94:	b580      	push	{r7, lr}
 8020e96:	b084      	sub	sp, #16
 8020e98:	af00      	add	r7, sp, #0
 8020e9a:	60f8      	str	r0, [r7, #12]
 8020e9c:	60b9      	str	r1, [r7, #8]
 8020e9e:	4613      	mov	r3, r2
 8020ea0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8020ea2:	68fb      	ldr	r3, [r7, #12]
 8020ea4:	2b00      	cmp	r3, #0
 8020ea6:	d105      	bne.n	8020eb4 <udp_input_local_match+0x20>
 8020ea8:	4b27      	ldr	r3, [pc, #156]	@ (8020f48 <udp_input_local_match+0xb4>)
 8020eaa:	2287      	movs	r2, #135	@ 0x87
 8020eac:	4927      	ldr	r1, [pc, #156]	@ (8020f4c <udp_input_local_match+0xb8>)
 8020eae:	4828      	ldr	r0, [pc, #160]	@ (8020f50 <udp_input_local_match+0xbc>)
 8020eb0:	f004 fb18 	bl	80254e4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8020eb4:	68bb      	ldr	r3, [r7, #8]
 8020eb6:	2b00      	cmp	r3, #0
 8020eb8:	d105      	bne.n	8020ec6 <udp_input_local_match+0x32>
 8020eba:	4b23      	ldr	r3, [pc, #140]	@ (8020f48 <udp_input_local_match+0xb4>)
 8020ebc:	2288      	movs	r2, #136	@ 0x88
 8020ebe:	4925      	ldr	r1, [pc, #148]	@ (8020f54 <udp_input_local_match+0xc0>)
 8020ec0:	4823      	ldr	r0, [pc, #140]	@ (8020f50 <udp_input_local_match+0xbc>)
 8020ec2:	f004 fb0f 	bl	80254e4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8020ec6:	68fb      	ldr	r3, [r7, #12]
 8020ec8:	7a1b      	ldrb	r3, [r3, #8]
 8020eca:	2b00      	cmp	r3, #0
 8020ecc:	d00b      	beq.n	8020ee6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8020ece:	68fb      	ldr	r3, [r7, #12]
 8020ed0:	7a1a      	ldrb	r2, [r3, #8]
 8020ed2:	4b21      	ldr	r3, [pc, #132]	@ (8020f58 <udp_input_local_match+0xc4>)
 8020ed4:	685b      	ldr	r3, [r3, #4]
 8020ed6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8020eda:	3301      	adds	r3, #1
 8020edc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8020ede:	429a      	cmp	r2, r3
 8020ee0:	d001      	beq.n	8020ee6 <udp_input_local_match+0x52>
    return 0;
 8020ee2:	2300      	movs	r3, #0
 8020ee4:	e02b      	b.n	8020f3e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8020ee6:	79fb      	ldrb	r3, [r7, #7]
 8020ee8:	2b00      	cmp	r3, #0
 8020eea:	d018      	beq.n	8020f1e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020eec:	68fb      	ldr	r3, [r7, #12]
 8020eee:	2b00      	cmp	r3, #0
 8020ef0:	d013      	beq.n	8020f1a <udp_input_local_match+0x86>
 8020ef2:	68fb      	ldr	r3, [r7, #12]
 8020ef4:	681b      	ldr	r3, [r3, #0]
 8020ef6:	2b00      	cmp	r3, #0
 8020ef8:	d00f      	beq.n	8020f1a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8020efa:	4b17      	ldr	r3, [pc, #92]	@ (8020f58 <udp_input_local_match+0xc4>)
 8020efc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f02:	d00a      	beq.n	8020f1a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8020f04:	68fb      	ldr	r3, [r7, #12]
 8020f06:	681a      	ldr	r2, [r3, #0]
 8020f08:	4b13      	ldr	r3, [pc, #76]	@ (8020f58 <udp_input_local_match+0xc4>)
 8020f0a:	695b      	ldr	r3, [r3, #20]
 8020f0c:	405a      	eors	r2, r3
 8020f0e:	68bb      	ldr	r3, [r7, #8]
 8020f10:	3308      	adds	r3, #8
 8020f12:	681b      	ldr	r3, [r3, #0]
 8020f14:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8020f16:	2b00      	cmp	r3, #0
 8020f18:	d110      	bne.n	8020f3c <udp_input_local_match+0xa8>
          return 1;
 8020f1a:	2301      	movs	r3, #1
 8020f1c:	e00f      	b.n	8020f3e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8020f1e:	68fb      	ldr	r3, [r7, #12]
 8020f20:	2b00      	cmp	r3, #0
 8020f22:	d009      	beq.n	8020f38 <udp_input_local_match+0xa4>
 8020f24:	68fb      	ldr	r3, [r7, #12]
 8020f26:	681b      	ldr	r3, [r3, #0]
 8020f28:	2b00      	cmp	r3, #0
 8020f2a:	d005      	beq.n	8020f38 <udp_input_local_match+0xa4>
 8020f2c:	68fb      	ldr	r3, [r7, #12]
 8020f2e:	681a      	ldr	r2, [r3, #0]
 8020f30:	4b09      	ldr	r3, [pc, #36]	@ (8020f58 <udp_input_local_match+0xc4>)
 8020f32:	695b      	ldr	r3, [r3, #20]
 8020f34:	429a      	cmp	r2, r3
 8020f36:	d101      	bne.n	8020f3c <udp_input_local_match+0xa8>
        return 1;
 8020f38:	2301      	movs	r3, #1
 8020f3a:	e000      	b.n	8020f3e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8020f3c:	2300      	movs	r3, #0
}
 8020f3e:	4618      	mov	r0, r3
 8020f40:	3710      	adds	r7, #16
 8020f42:	46bd      	mov	sp, r7
 8020f44:	bd80      	pop	{r7, pc}
 8020f46:	bf00      	nop
 8020f48:	0802c50c 	.word	0x0802c50c
 8020f4c:	0802c53c 	.word	0x0802c53c
 8020f50:	0802c560 	.word	0x0802c560
 8020f54:	0802c588 	.word	0x0802c588
 8020f58:	24008d64 	.word	0x24008d64

08020f5c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8020f5c:	b590      	push	{r4, r7, lr}
 8020f5e:	b08d      	sub	sp, #52	@ 0x34
 8020f60:	af02      	add	r7, sp, #8
 8020f62:	6078      	str	r0, [r7, #4]
 8020f64:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8020f66:	2300      	movs	r3, #0
 8020f68:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8020f6a:	687b      	ldr	r3, [r7, #4]
 8020f6c:	2b00      	cmp	r3, #0
 8020f6e:	d105      	bne.n	8020f7c <udp_input+0x20>
 8020f70:	4b7c      	ldr	r3, [pc, #496]	@ (8021164 <udp_input+0x208>)
 8020f72:	22cf      	movs	r2, #207	@ 0xcf
 8020f74:	497c      	ldr	r1, [pc, #496]	@ (8021168 <udp_input+0x20c>)
 8020f76:	487d      	ldr	r0, [pc, #500]	@ (802116c <udp_input+0x210>)
 8020f78:	f004 fab4 	bl	80254e4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8020f7c:	683b      	ldr	r3, [r7, #0]
 8020f7e:	2b00      	cmp	r3, #0
 8020f80:	d105      	bne.n	8020f8e <udp_input+0x32>
 8020f82:	4b78      	ldr	r3, [pc, #480]	@ (8021164 <udp_input+0x208>)
 8020f84:	22d0      	movs	r2, #208	@ 0xd0
 8020f86:	497a      	ldr	r1, [pc, #488]	@ (8021170 <udp_input+0x214>)
 8020f88:	4878      	ldr	r0, [pc, #480]	@ (802116c <udp_input+0x210>)
 8020f8a:	f004 faab 	bl	80254e4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8020f8e:	687b      	ldr	r3, [r7, #4]
 8020f90:	895b      	ldrh	r3, [r3, #10]
 8020f92:	2b07      	cmp	r3, #7
 8020f94:	d803      	bhi.n	8020f9e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8020f96:	6878      	ldr	r0, [r7, #4]
 8020f98:	f7f9 fb56 	bl	801a648 <pbuf_free>
    goto end;
 8020f9c:	e0de      	b.n	802115c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8020f9e:	687b      	ldr	r3, [r7, #4]
 8020fa0:	685b      	ldr	r3, [r3, #4]
 8020fa2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8020fa4:	4b73      	ldr	r3, [pc, #460]	@ (8021174 <udp_input+0x218>)
 8020fa6:	695b      	ldr	r3, [r3, #20]
 8020fa8:	4a72      	ldr	r2, [pc, #456]	@ (8021174 <udp_input+0x218>)
 8020faa:	6812      	ldr	r2, [r2, #0]
 8020fac:	4611      	mov	r1, r2
 8020fae:	4618      	mov	r0, r3
 8020fb0:	f001 ffa6 	bl	8022f00 <ip4_addr_isbroadcast_u32>
 8020fb4:	4603      	mov	r3, r0
 8020fb6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8020fb8:	697b      	ldr	r3, [r7, #20]
 8020fba:	881b      	ldrh	r3, [r3, #0]
 8020fbc:	b29b      	uxth	r3, r3
 8020fbe:	4618      	mov	r0, r3
 8020fc0:	f7f7 fe66 	bl	8018c90 <lwip_htons>
 8020fc4:	4603      	mov	r3, r0
 8020fc6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8020fc8:	697b      	ldr	r3, [r7, #20]
 8020fca:	885b      	ldrh	r3, [r3, #2]
 8020fcc:	b29b      	uxth	r3, r3
 8020fce:	4618      	mov	r0, r3
 8020fd0:	f7f7 fe5e 	bl	8018c90 <lwip_htons>
 8020fd4:	4603      	mov	r3, r0
 8020fd6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8020fd8:	2300      	movs	r3, #0
 8020fda:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8020fdc:	2300      	movs	r3, #0
 8020fde:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8020fe0:	2300      	movs	r3, #0
 8020fe2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020fe4:	4b64      	ldr	r3, [pc, #400]	@ (8021178 <udp_input+0x21c>)
 8020fe6:	681b      	ldr	r3, [r3, #0]
 8020fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8020fea:	e054      	b.n	8021096 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8020fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020fee:	8a5b      	ldrh	r3, [r3, #18]
 8020ff0:	89fa      	ldrh	r2, [r7, #14]
 8020ff2:	429a      	cmp	r2, r3
 8020ff4:	d14a      	bne.n	802108c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8020ff6:	7cfb      	ldrb	r3, [r7, #19]
 8020ff8:	461a      	mov	r2, r3
 8020ffa:	6839      	ldr	r1, [r7, #0]
 8020ffc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8020ffe:	f7ff ff49 	bl	8020e94 <udp_input_local_match>
 8021002:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8021004:	2b00      	cmp	r3, #0
 8021006:	d041      	beq.n	802108c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8021008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802100a:	7c1b      	ldrb	r3, [r3, #16]
 802100c:	f003 0304 	and.w	r3, r3, #4
 8021010:	2b00      	cmp	r3, #0
 8021012:	d11d      	bne.n	8021050 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8021014:	69fb      	ldr	r3, [r7, #28]
 8021016:	2b00      	cmp	r3, #0
 8021018:	d102      	bne.n	8021020 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 802101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802101c:	61fb      	str	r3, [r7, #28]
 802101e:	e017      	b.n	8021050 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8021020:	7cfb      	ldrb	r3, [r7, #19]
 8021022:	2b00      	cmp	r3, #0
 8021024:	d014      	beq.n	8021050 <udp_input+0xf4>
 8021026:	4b53      	ldr	r3, [pc, #332]	@ (8021174 <udp_input+0x218>)
 8021028:	695b      	ldr	r3, [r3, #20]
 802102a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802102e:	d10f      	bne.n	8021050 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8021030:	69fb      	ldr	r3, [r7, #28]
 8021032:	681a      	ldr	r2, [r3, #0]
 8021034:	683b      	ldr	r3, [r7, #0]
 8021036:	3304      	adds	r3, #4
 8021038:	681b      	ldr	r3, [r3, #0]
 802103a:	429a      	cmp	r2, r3
 802103c:	d008      	beq.n	8021050 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 802103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021040:	681a      	ldr	r2, [r3, #0]
 8021042:	683b      	ldr	r3, [r7, #0]
 8021044:	3304      	adds	r3, #4
 8021046:	681b      	ldr	r3, [r3, #0]
 8021048:	429a      	cmp	r2, r3
 802104a:	d101      	bne.n	8021050 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 802104c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802104e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8021050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021052:	8a9b      	ldrh	r3, [r3, #20]
 8021054:	8a3a      	ldrh	r2, [r7, #16]
 8021056:	429a      	cmp	r2, r3
 8021058:	d118      	bne.n	802108c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 802105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802105c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 802105e:	2b00      	cmp	r3, #0
 8021060:	d005      	beq.n	802106e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8021062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021064:	685a      	ldr	r2, [r3, #4]
 8021066:	4b43      	ldr	r3, [pc, #268]	@ (8021174 <udp_input+0x218>)
 8021068:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 802106a:	429a      	cmp	r2, r3
 802106c:	d10e      	bne.n	802108c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 802106e:	6a3b      	ldr	r3, [r7, #32]
 8021070:	2b00      	cmp	r3, #0
 8021072:	d014      	beq.n	802109e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8021074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021076:	68da      	ldr	r2, [r3, #12]
 8021078:	6a3b      	ldr	r3, [r7, #32]
 802107a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 802107c:	4b3e      	ldr	r3, [pc, #248]	@ (8021178 <udp_input+0x21c>)
 802107e:	681a      	ldr	r2, [r3, #0]
 8021080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021082:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8021084:	4a3c      	ldr	r2, [pc, #240]	@ (8021178 <udp_input+0x21c>)
 8021086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021088:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 802108a:	e008      	b.n	802109e <udp_input+0x142>
      }
    }

    prev = pcb;
 802108c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802108e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021092:	68db      	ldr	r3, [r3, #12]
 8021094:	627b      	str	r3, [r7, #36]	@ 0x24
 8021096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021098:	2b00      	cmp	r3, #0
 802109a:	d1a7      	bne.n	8020fec <udp_input+0x90>
 802109c:	e000      	b.n	80210a0 <udp_input+0x144>
        break;
 802109e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80210a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80210a2:	2b00      	cmp	r3, #0
 80210a4:	d101      	bne.n	80210aa <udp_input+0x14e>
    pcb = uncon_pcb;
 80210a6:	69fb      	ldr	r3, [r7, #28]
 80210a8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80210aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80210ac:	2b00      	cmp	r3, #0
 80210ae:	d002      	beq.n	80210b6 <udp_input+0x15a>
    for_us = 1;
 80210b0:	2301      	movs	r3, #1
 80210b2:	76fb      	strb	r3, [r7, #27]
 80210b4:	e00a      	b.n	80210cc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80210b6:	683b      	ldr	r3, [r7, #0]
 80210b8:	3304      	adds	r3, #4
 80210ba:	681a      	ldr	r2, [r3, #0]
 80210bc:	4b2d      	ldr	r3, [pc, #180]	@ (8021174 <udp_input+0x218>)
 80210be:	695b      	ldr	r3, [r3, #20]
 80210c0:	429a      	cmp	r2, r3
 80210c2:	bf0c      	ite	eq
 80210c4:	2301      	moveq	r3, #1
 80210c6:	2300      	movne	r3, #0
 80210c8:	b2db      	uxtb	r3, r3
 80210ca:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80210cc:	7efb      	ldrb	r3, [r7, #27]
 80210ce:	2b00      	cmp	r3, #0
 80210d0:	d041      	beq.n	8021156 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80210d2:	2108      	movs	r1, #8
 80210d4:	6878      	ldr	r0, [r7, #4]
 80210d6:	f7f9 f9ff 	bl	801a4d8 <pbuf_remove_header>
 80210da:	4603      	mov	r3, r0
 80210dc:	2b00      	cmp	r3, #0
 80210de:	d00a      	beq.n	80210f6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80210e0:	4b20      	ldr	r3, [pc, #128]	@ (8021164 <udp_input+0x208>)
 80210e2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80210e6:	4925      	ldr	r1, [pc, #148]	@ (802117c <udp_input+0x220>)
 80210e8:	4820      	ldr	r0, [pc, #128]	@ (802116c <udp_input+0x210>)
 80210ea:	f004 f9fb 	bl	80254e4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80210ee:	6878      	ldr	r0, [r7, #4]
 80210f0:	f7f9 faaa 	bl	801a648 <pbuf_free>
      goto end;
 80210f4:	e032      	b.n	802115c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80210f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80210f8:	2b00      	cmp	r3, #0
 80210fa:	d012      	beq.n	8021122 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80210fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80210fe:	699b      	ldr	r3, [r3, #24]
 8021100:	2b00      	cmp	r3, #0
 8021102:	d00a      	beq.n	802111a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8021104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021106:	699c      	ldr	r4, [r3, #24]
 8021108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802110a:	69d8      	ldr	r0, [r3, #28]
 802110c:	8a3b      	ldrh	r3, [r7, #16]
 802110e:	9300      	str	r3, [sp, #0]
 8021110:	4b1b      	ldr	r3, [pc, #108]	@ (8021180 <udp_input+0x224>)
 8021112:	687a      	ldr	r2, [r7, #4]
 8021114:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8021116:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8021118:	e021      	b.n	802115e <udp_input+0x202>
        pbuf_free(p);
 802111a:	6878      	ldr	r0, [r7, #4]
 802111c:	f7f9 fa94 	bl	801a648 <pbuf_free>
        goto end;
 8021120:	e01c      	b.n	802115c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8021122:	7cfb      	ldrb	r3, [r7, #19]
 8021124:	2b00      	cmp	r3, #0
 8021126:	d112      	bne.n	802114e <udp_input+0x1f2>
 8021128:	4b12      	ldr	r3, [pc, #72]	@ (8021174 <udp_input+0x218>)
 802112a:	695b      	ldr	r3, [r3, #20]
 802112c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021130:	2be0      	cmp	r3, #224	@ 0xe0
 8021132:	d00c      	beq.n	802114e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8021134:	4b0f      	ldr	r3, [pc, #60]	@ (8021174 <udp_input+0x218>)
 8021136:	899b      	ldrh	r3, [r3, #12]
 8021138:	3308      	adds	r3, #8
 802113a:	b29b      	uxth	r3, r3
 802113c:	b21b      	sxth	r3, r3
 802113e:	4619      	mov	r1, r3
 8021140:	6878      	ldr	r0, [r7, #4]
 8021142:	f7f9 fa3c 	bl	801a5be <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8021146:	2103      	movs	r1, #3
 8021148:	6878      	ldr	r0, [r7, #4]
 802114a:	f001 fbaf 	bl	80228ac <icmp_dest_unreach>
      pbuf_free(p);
 802114e:	6878      	ldr	r0, [r7, #4]
 8021150:	f7f9 fa7a 	bl	801a648 <pbuf_free>
  return;
 8021154:	e003      	b.n	802115e <udp_input+0x202>
    pbuf_free(p);
 8021156:	6878      	ldr	r0, [r7, #4]
 8021158:	f7f9 fa76 	bl	801a648 <pbuf_free>
  return;
 802115c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 802115e:	372c      	adds	r7, #44	@ 0x2c
 8021160:	46bd      	mov	sp, r7
 8021162:	bd90      	pop	{r4, r7, pc}
 8021164:	0802c50c 	.word	0x0802c50c
 8021168:	0802c5b0 	.word	0x0802c5b0
 802116c:	0802c560 	.word	0x0802c560
 8021170:	0802c5c8 	.word	0x0802c5c8
 8021174:	24008d64 	.word	0x24008d64
 8021178:	2400bec0 	.word	0x2400bec0
 802117c:	0802c5e4 	.word	0x0802c5e4
 8021180:	24008d74 	.word	0x24008d74

08021184 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8021184:	b580      	push	{r7, lr}
 8021186:	b082      	sub	sp, #8
 8021188:	af00      	add	r7, sp, #0
 802118a:	6078      	str	r0, [r7, #4]
 802118c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 802118e:	687b      	ldr	r3, [r7, #4]
 8021190:	2b00      	cmp	r3, #0
 8021192:	d109      	bne.n	80211a8 <udp_send+0x24>
 8021194:	4b11      	ldr	r3, [pc, #68]	@ (80211dc <udp_send+0x58>)
 8021196:	f240 12d5 	movw	r2, #469	@ 0x1d5
 802119a:	4911      	ldr	r1, [pc, #68]	@ (80211e0 <udp_send+0x5c>)
 802119c:	4811      	ldr	r0, [pc, #68]	@ (80211e4 <udp_send+0x60>)
 802119e:	f004 f9a1 	bl	80254e4 <iprintf>
 80211a2:	f06f 030f 	mvn.w	r3, #15
 80211a6:	e015      	b.n	80211d4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80211a8:	683b      	ldr	r3, [r7, #0]
 80211aa:	2b00      	cmp	r3, #0
 80211ac:	d109      	bne.n	80211c2 <udp_send+0x3e>
 80211ae:	4b0b      	ldr	r3, [pc, #44]	@ (80211dc <udp_send+0x58>)
 80211b0:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 80211b4:	490c      	ldr	r1, [pc, #48]	@ (80211e8 <udp_send+0x64>)
 80211b6:	480b      	ldr	r0, [pc, #44]	@ (80211e4 <udp_send+0x60>)
 80211b8:	f004 f994 	bl	80254e4 <iprintf>
 80211bc:	f06f 030f 	mvn.w	r3, #15
 80211c0:	e008      	b.n	80211d4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80211c2:	687b      	ldr	r3, [r7, #4]
 80211c4:	1d1a      	adds	r2, r3, #4
 80211c6:	687b      	ldr	r3, [r7, #4]
 80211c8:	8a9b      	ldrh	r3, [r3, #20]
 80211ca:	6839      	ldr	r1, [r7, #0]
 80211cc:	6878      	ldr	r0, [r7, #4]
 80211ce:	f000 f80d 	bl	80211ec <udp_sendto>
 80211d2:	4603      	mov	r3, r0
}
 80211d4:	4618      	mov	r0, r3
 80211d6:	3708      	adds	r7, #8
 80211d8:	46bd      	mov	sp, r7
 80211da:	bd80      	pop	{r7, pc}
 80211dc:	0802c50c 	.word	0x0802c50c
 80211e0:	0802c600 	.word	0x0802c600
 80211e4:	0802c560 	.word	0x0802c560
 80211e8:	0802c618 	.word	0x0802c618

080211ec <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80211ec:	b580      	push	{r7, lr}
 80211ee:	b088      	sub	sp, #32
 80211f0:	af02      	add	r7, sp, #8
 80211f2:	60f8      	str	r0, [r7, #12]
 80211f4:	60b9      	str	r1, [r7, #8]
 80211f6:	607a      	str	r2, [r7, #4]
 80211f8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80211fa:	68fb      	ldr	r3, [r7, #12]
 80211fc:	2b00      	cmp	r3, #0
 80211fe:	d109      	bne.n	8021214 <udp_sendto+0x28>
 8021200:	4b23      	ldr	r3, [pc, #140]	@ (8021290 <udp_sendto+0xa4>)
 8021202:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8021206:	4923      	ldr	r1, [pc, #140]	@ (8021294 <udp_sendto+0xa8>)
 8021208:	4823      	ldr	r0, [pc, #140]	@ (8021298 <udp_sendto+0xac>)
 802120a:	f004 f96b 	bl	80254e4 <iprintf>
 802120e:	f06f 030f 	mvn.w	r3, #15
 8021212:	e038      	b.n	8021286 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8021214:	68bb      	ldr	r3, [r7, #8]
 8021216:	2b00      	cmp	r3, #0
 8021218:	d109      	bne.n	802122e <udp_sendto+0x42>
 802121a:	4b1d      	ldr	r3, [pc, #116]	@ (8021290 <udp_sendto+0xa4>)
 802121c:	f240 2219 	movw	r2, #537	@ 0x219
 8021220:	491e      	ldr	r1, [pc, #120]	@ (802129c <udp_sendto+0xb0>)
 8021222:	481d      	ldr	r0, [pc, #116]	@ (8021298 <udp_sendto+0xac>)
 8021224:	f004 f95e 	bl	80254e4 <iprintf>
 8021228:	f06f 030f 	mvn.w	r3, #15
 802122c:	e02b      	b.n	8021286 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 802122e:	687b      	ldr	r3, [r7, #4]
 8021230:	2b00      	cmp	r3, #0
 8021232:	d109      	bne.n	8021248 <udp_sendto+0x5c>
 8021234:	4b16      	ldr	r3, [pc, #88]	@ (8021290 <udp_sendto+0xa4>)
 8021236:	f240 221a 	movw	r2, #538	@ 0x21a
 802123a:	4919      	ldr	r1, [pc, #100]	@ (80212a0 <udp_sendto+0xb4>)
 802123c:	4816      	ldr	r0, [pc, #88]	@ (8021298 <udp_sendto+0xac>)
 802123e:	f004 f951 	bl	80254e4 <iprintf>
 8021242:	f06f 030f 	mvn.w	r3, #15
 8021246:	e01e      	b.n	8021286 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8021248:	68fb      	ldr	r3, [r7, #12]
 802124a:	7a1b      	ldrb	r3, [r3, #8]
 802124c:	2b00      	cmp	r3, #0
 802124e:	d006      	beq.n	802125e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8021250:	68fb      	ldr	r3, [r7, #12]
 8021252:	7a1b      	ldrb	r3, [r3, #8]
 8021254:	4618      	mov	r0, r3
 8021256:	f7f8 fe37 	bl	8019ec8 <netif_get_by_index>
 802125a:	6178      	str	r0, [r7, #20]
 802125c:	e003      	b.n	8021266 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 802125e:	6878      	ldr	r0, [r7, #4]
 8021260:	f001 fbb8 	bl	80229d4 <ip4_route>
 8021264:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8021266:	697b      	ldr	r3, [r7, #20]
 8021268:	2b00      	cmp	r3, #0
 802126a:	d102      	bne.n	8021272 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 802126c:	f06f 0303 	mvn.w	r3, #3
 8021270:	e009      	b.n	8021286 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8021272:	887a      	ldrh	r2, [r7, #2]
 8021274:	697b      	ldr	r3, [r7, #20]
 8021276:	9300      	str	r3, [sp, #0]
 8021278:	4613      	mov	r3, r2
 802127a:	687a      	ldr	r2, [r7, #4]
 802127c:	68b9      	ldr	r1, [r7, #8]
 802127e:	68f8      	ldr	r0, [r7, #12]
 8021280:	f000 f810 	bl	80212a4 <udp_sendto_if>
 8021284:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8021286:	4618      	mov	r0, r3
 8021288:	3718      	adds	r7, #24
 802128a:	46bd      	mov	sp, r7
 802128c:	bd80      	pop	{r7, pc}
 802128e:	bf00      	nop
 8021290:	0802c50c 	.word	0x0802c50c
 8021294:	0802c630 	.word	0x0802c630
 8021298:	0802c560 	.word	0x0802c560
 802129c:	0802c648 	.word	0x0802c648
 80212a0:	0802c664 	.word	0x0802c664

080212a4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80212a4:	b580      	push	{r7, lr}
 80212a6:	b088      	sub	sp, #32
 80212a8:	af02      	add	r7, sp, #8
 80212aa:	60f8      	str	r0, [r7, #12]
 80212ac:	60b9      	str	r1, [r7, #8]
 80212ae:	607a      	str	r2, [r7, #4]
 80212b0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80212b2:	68fb      	ldr	r3, [r7, #12]
 80212b4:	2b00      	cmp	r3, #0
 80212b6:	d109      	bne.n	80212cc <udp_sendto_if+0x28>
 80212b8:	4b2e      	ldr	r3, [pc, #184]	@ (8021374 <udp_sendto_if+0xd0>)
 80212ba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80212be:	492e      	ldr	r1, [pc, #184]	@ (8021378 <udp_sendto_if+0xd4>)
 80212c0:	482e      	ldr	r0, [pc, #184]	@ (802137c <udp_sendto_if+0xd8>)
 80212c2:	f004 f90f 	bl	80254e4 <iprintf>
 80212c6:	f06f 030f 	mvn.w	r3, #15
 80212ca:	e04f      	b.n	802136c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80212cc:	68bb      	ldr	r3, [r7, #8]
 80212ce:	2b00      	cmp	r3, #0
 80212d0:	d109      	bne.n	80212e6 <udp_sendto_if+0x42>
 80212d2:	4b28      	ldr	r3, [pc, #160]	@ (8021374 <udp_sendto_if+0xd0>)
 80212d4:	f240 2281 	movw	r2, #641	@ 0x281
 80212d8:	4929      	ldr	r1, [pc, #164]	@ (8021380 <udp_sendto_if+0xdc>)
 80212da:	4828      	ldr	r0, [pc, #160]	@ (802137c <udp_sendto_if+0xd8>)
 80212dc:	f004 f902 	bl	80254e4 <iprintf>
 80212e0:	f06f 030f 	mvn.w	r3, #15
 80212e4:	e042      	b.n	802136c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80212e6:	687b      	ldr	r3, [r7, #4]
 80212e8:	2b00      	cmp	r3, #0
 80212ea:	d109      	bne.n	8021300 <udp_sendto_if+0x5c>
 80212ec:	4b21      	ldr	r3, [pc, #132]	@ (8021374 <udp_sendto_if+0xd0>)
 80212ee:	f240 2282 	movw	r2, #642	@ 0x282
 80212f2:	4924      	ldr	r1, [pc, #144]	@ (8021384 <udp_sendto_if+0xe0>)
 80212f4:	4821      	ldr	r0, [pc, #132]	@ (802137c <udp_sendto_if+0xd8>)
 80212f6:	f004 f8f5 	bl	80254e4 <iprintf>
 80212fa:	f06f 030f 	mvn.w	r3, #15
 80212fe:	e035      	b.n	802136c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8021300:	6a3b      	ldr	r3, [r7, #32]
 8021302:	2b00      	cmp	r3, #0
 8021304:	d109      	bne.n	802131a <udp_sendto_if+0x76>
 8021306:	4b1b      	ldr	r3, [pc, #108]	@ (8021374 <udp_sendto_if+0xd0>)
 8021308:	f240 2283 	movw	r2, #643	@ 0x283
 802130c:	491e      	ldr	r1, [pc, #120]	@ (8021388 <udp_sendto_if+0xe4>)
 802130e:	481b      	ldr	r0, [pc, #108]	@ (802137c <udp_sendto_if+0xd8>)
 8021310:	f004 f8e8 	bl	80254e4 <iprintf>
 8021314:	f06f 030f 	mvn.w	r3, #15
 8021318:	e028      	b.n	802136c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 802131a:	68fb      	ldr	r3, [r7, #12]
 802131c:	2b00      	cmp	r3, #0
 802131e:	d009      	beq.n	8021334 <udp_sendto_if+0x90>
 8021320:	68fb      	ldr	r3, [r7, #12]
 8021322:	681b      	ldr	r3, [r3, #0]
 8021324:	2b00      	cmp	r3, #0
 8021326:	d005      	beq.n	8021334 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8021328:	68fb      	ldr	r3, [r7, #12]
 802132a:	681b      	ldr	r3, [r3, #0]
 802132c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8021330:	2be0      	cmp	r3, #224	@ 0xe0
 8021332:	d103      	bne.n	802133c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8021334:	6a3b      	ldr	r3, [r7, #32]
 8021336:	3304      	adds	r3, #4
 8021338:	617b      	str	r3, [r7, #20]
 802133a:	e00b      	b.n	8021354 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 802133c:	68fb      	ldr	r3, [r7, #12]
 802133e:	681a      	ldr	r2, [r3, #0]
 8021340:	6a3b      	ldr	r3, [r7, #32]
 8021342:	3304      	adds	r3, #4
 8021344:	681b      	ldr	r3, [r3, #0]
 8021346:	429a      	cmp	r2, r3
 8021348:	d002      	beq.n	8021350 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 802134a:	f06f 0303 	mvn.w	r3, #3
 802134e:	e00d      	b.n	802136c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8021350:	68fb      	ldr	r3, [r7, #12]
 8021352:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8021354:	887a      	ldrh	r2, [r7, #2]
 8021356:	697b      	ldr	r3, [r7, #20]
 8021358:	9301      	str	r3, [sp, #4]
 802135a:	6a3b      	ldr	r3, [r7, #32]
 802135c:	9300      	str	r3, [sp, #0]
 802135e:	4613      	mov	r3, r2
 8021360:	687a      	ldr	r2, [r7, #4]
 8021362:	68b9      	ldr	r1, [r7, #8]
 8021364:	68f8      	ldr	r0, [r7, #12]
 8021366:	f000 f811 	bl	802138c <udp_sendto_if_src>
 802136a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 802136c:	4618      	mov	r0, r3
 802136e:	3718      	adds	r7, #24
 8021370:	46bd      	mov	sp, r7
 8021372:	bd80      	pop	{r7, pc}
 8021374:	0802c50c 	.word	0x0802c50c
 8021378:	0802c680 	.word	0x0802c680
 802137c:	0802c560 	.word	0x0802c560
 8021380:	0802c69c 	.word	0x0802c69c
 8021384:	0802c6b8 	.word	0x0802c6b8
 8021388:	0802c6d8 	.word	0x0802c6d8

0802138c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 802138c:	b580      	push	{r7, lr}
 802138e:	b08c      	sub	sp, #48	@ 0x30
 8021390:	af04      	add	r7, sp, #16
 8021392:	60f8      	str	r0, [r7, #12]
 8021394:	60b9      	str	r1, [r7, #8]
 8021396:	607a      	str	r2, [r7, #4]
 8021398:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 802139a:	68fb      	ldr	r3, [r7, #12]
 802139c:	2b00      	cmp	r3, #0
 802139e:	d109      	bne.n	80213b4 <udp_sendto_if_src+0x28>
 80213a0:	4b65      	ldr	r3, [pc, #404]	@ (8021538 <udp_sendto_if_src+0x1ac>)
 80213a2:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80213a6:	4965      	ldr	r1, [pc, #404]	@ (802153c <udp_sendto_if_src+0x1b0>)
 80213a8:	4865      	ldr	r0, [pc, #404]	@ (8021540 <udp_sendto_if_src+0x1b4>)
 80213aa:	f004 f89b 	bl	80254e4 <iprintf>
 80213ae:	f06f 030f 	mvn.w	r3, #15
 80213b2:	e0bc      	b.n	802152e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80213b4:	68bb      	ldr	r3, [r7, #8]
 80213b6:	2b00      	cmp	r3, #0
 80213b8:	d109      	bne.n	80213ce <udp_sendto_if_src+0x42>
 80213ba:	4b5f      	ldr	r3, [pc, #380]	@ (8021538 <udp_sendto_if_src+0x1ac>)
 80213bc:	f240 22d2 	movw	r2, #722	@ 0x2d2
 80213c0:	4960      	ldr	r1, [pc, #384]	@ (8021544 <udp_sendto_if_src+0x1b8>)
 80213c2:	485f      	ldr	r0, [pc, #380]	@ (8021540 <udp_sendto_if_src+0x1b4>)
 80213c4:	f004 f88e 	bl	80254e4 <iprintf>
 80213c8:	f06f 030f 	mvn.w	r3, #15
 80213cc:	e0af      	b.n	802152e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80213ce:	687b      	ldr	r3, [r7, #4]
 80213d0:	2b00      	cmp	r3, #0
 80213d2:	d109      	bne.n	80213e8 <udp_sendto_if_src+0x5c>
 80213d4:	4b58      	ldr	r3, [pc, #352]	@ (8021538 <udp_sendto_if_src+0x1ac>)
 80213d6:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80213da:	495b      	ldr	r1, [pc, #364]	@ (8021548 <udp_sendto_if_src+0x1bc>)
 80213dc:	4858      	ldr	r0, [pc, #352]	@ (8021540 <udp_sendto_if_src+0x1b4>)
 80213de:	f004 f881 	bl	80254e4 <iprintf>
 80213e2:	f06f 030f 	mvn.w	r3, #15
 80213e6:	e0a2      	b.n	802152e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80213e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80213ea:	2b00      	cmp	r3, #0
 80213ec:	d109      	bne.n	8021402 <udp_sendto_if_src+0x76>
 80213ee:	4b52      	ldr	r3, [pc, #328]	@ (8021538 <udp_sendto_if_src+0x1ac>)
 80213f0:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80213f4:	4955      	ldr	r1, [pc, #340]	@ (802154c <udp_sendto_if_src+0x1c0>)
 80213f6:	4852      	ldr	r0, [pc, #328]	@ (8021540 <udp_sendto_if_src+0x1b4>)
 80213f8:	f004 f874 	bl	80254e4 <iprintf>
 80213fc:	f06f 030f 	mvn.w	r3, #15
 8021400:	e095      	b.n	802152e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8021402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021404:	2b00      	cmp	r3, #0
 8021406:	d109      	bne.n	802141c <udp_sendto_if_src+0x90>
 8021408:	4b4b      	ldr	r3, [pc, #300]	@ (8021538 <udp_sendto_if_src+0x1ac>)
 802140a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 802140e:	4950      	ldr	r1, [pc, #320]	@ (8021550 <udp_sendto_if_src+0x1c4>)
 8021410:	484b      	ldr	r0, [pc, #300]	@ (8021540 <udp_sendto_if_src+0x1b4>)
 8021412:	f004 f867 	bl	80254e4 <iprintf>
 8021416:	f06f 030f 	mvn.w	r3, #15
 802141a:	e088      	b.n	802152e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 802141c:	68fb      	ldr	r3, [r7, #12]
 802141e:	8a5b      	ldrh	r3, [r3, #18]
 8021420:	2b00      	cmp	r3, #0
 8021422:	d10f      	bne.n	8021444 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8021424:	68f9      	ldr	r1, [r7, #12]
 8021426:	68fb      	ldr	r3, [r7, #12]
 8021428:	8a5b      	ldrh	r3, [r3, #18]
 802142a:	461a      	mov	r2, r3
 802142c:	68f8      	ldr	r0, [r7, #12]
 802142e:	f000 f893 	bl	8021558 <udp_bind>
 8021432:	4603      	mov	r3, r0
 8021434:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8021436:	f997 301b 	ldrsb.w	r3, [r7, #27]
 802143a:	2b00      	cmp	r3, #0
 802143c:	d002      	beq.n	8021444 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 802143e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8021442:	e074      	b.n	802152e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8021444:	68bb      	ldr	r3, [r7, #8]
 8021446:	891b      	ldrh	r3, [r3, #8]
 8021448:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 802144c:	4293      	cmp	r3, r2
 802144e:	d902      	bls.n	8021456 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8021450:	f04f 33ff 	mov.w	r3, #4294967295
 8021454:	e06b      	b.n	802152e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8021456:	2108      	movs	r1, #8
 8021458:	68b8      	ldr	r0, [r7, #8]
 802145a:	f7f9 f82d 	bl	801a4b8 <pbuf_add_header>
 802145e:	4603      	mov	r3, r0
 8021460:	2b00      	cmp	r3, #0
 8021462:	d015      	beq.n	8021490 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8021464:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8021468:	2108      	movs	r1, #8
 802146a:	2022      	movs	r0, #34	@ 0x22
 802146c:	f7f8 fdd6 	bl	801a01c <pbuf_alloc>
 8021470:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8021472:	69fb      	ldr	r3, [r7, #28]
 8021474:	2b00      	cmp	r3, #0
 8021476:	d102      	bne.n	802147e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8021478:	f04f 33ff 	mov.w	r3, #4294967295
 802147c:	e057      	b.n	802152e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 802147e:	68bb      	ldr	r3, [r7, #8]
 8021480:	891b      	ldrh	r3, [r3, #8]
 8021482:	2b00      	cmp	r3, #0
 8021484:	d006      	beq.n	8021494 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8021486:	68b9      	ldr	r1, [r7, #8]
 8021488:	69f8      	ldr	r0, [r7, #28]
 802148a:	f7f9 fa01 	bl	801a890 <pbuf_chain>
 802148e:	e001      	b.n	8021494 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8021490:	68bb      	ldr	r3, [r7, #8]
 8021492:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8021494:	69fb      	ldr	r3, [r7, #28]
 8021496:	895b      	ldrh	r3, [r3, #10]
 8021498:	2b07      	cmp	r3, #7
 802149a:	d806      	bhi.n	80214aa <udp_sendto_if_src+0x11e>
 802149c:	4b26      	ldr	r3, [pc, #152]	@ (8021538 <udp_sendto_if_src+0x1ac>)
 802149e:	f240 320d 	movw	r2, #781	@ 0x30d
 80214a2:	492c      	ldr	r1, [pc, #176]	@ (8021554 <udp_sendto_if_src+0x1c8>)
 80214a4:	4826      	ldr	r0, [pc, #152]	@ (8021540 <udp_sendto_if_src+0x1b4>)
 80214a6:	f004 f81d 	bl	80254e4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80214aa:	69fb      	ldr	r3, [r7, #28]
 80214ac:	685b      	ldr	r3, [r3, #4]
 80214ae:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80214b0:	68fb      	ldr	r3, [r7, #12]
 80214b2:	8a5b      	ldrh	r3, [r3, #18]
 80214b4:	4618      	mov	r0, r3
 80214b6:	f7f7 fbeb 	bl	8018c90 <lwip_htons>
 80214ba:	4603      	mov	r3, r0
 80214bc:	461a      	mov	r2, r3
 80214be:	697b      	ldr	r3, [r7, #20]
 80214c0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80214c2:	887b      	ldrh	r3, [r7, #2]
 80214c4:	4618      	mov	r0, r3
 80214c6:	f7f7 fbe3 	bl	8018c90 <lwip_htons>
 80214ca:	4603      	mov	r3, r0
 80214cc:	461a      	mov	r2, r3
 80214ce:	697b      	ldr	r3, [r7, #20]
 80214d0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80214d2:	697b      	ldr	r3, [r7, #20]
 80214d4:	2200      	movs	r2, #0
 80214d6:	719a      	strb	r2, [r3, #6]
 80214d8:	2200      	movs	r2, #0
 80214da:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80214dc:	69fb      	ldr	r3, [r7, #28]
 80214de:	891b      	ldrh	r3, [r3, #8]
 80214e0:	4618      	mov	r0, r3
 80214e2:	f7f7 fbd5 	bl	8018c90 <lwip_htons>
 80214e6:	4603      	mov	r3, r0
 80214e8:	461a      	mov	r2, r3
 80214ea:	697b      	ldr	r3, [r7, #20]
 80214ec:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80214ee:	2311      	movs	r3, #17
 80214f0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80214f2:	68fb      	ldr	r3, [r7, #12]
 80214f4:	7adb      	ldrb	r3, [r3, #11]
 80214f6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80214f8:	68fb      	ldr	r3, [r7, #12]
 80214fa:	7a9b      	ldrb	r3, [r3, #10]
 80214fc:	7cb9      	ldrb	r1, [r7, #18]
 80214fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021500:	9202      	str	r2, [sp, #8]
 8021502:	7cfa      	ldrb	r2, [r7, #19]
 8021504:	9201      	str	r2, [sp, #4]
 8021506:	9300      	str	r3, [sp, #0]
 8021508:	460b      	mov	r3, r1
 802150a:	687a      	ldr	r2, [r7, #4]
 802150c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802150e:	69f8      	ldr	r0, [r7, #28]
 8021510:	f001 fc48 	bl	8022da4 <ip4_output_if_src>
 8021514:	4603      	mov	r3, r0
 8021516:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8021518:	69fa      	ldr	r2, [r7, #28]
 802151a:	68bb      	ldr	r3, [r7, #8]
 802151c:	429a      	cmp	r2, r3
 802151e:	d004      	beq.n	802152a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8021520:	69f8      	ldr	r0, [r7, #28]
 8021522:	f7f9 f891 	bl	801a648 <pbuf_free>
    q = NULL;
 8021526:	2300      	movs	r3, #0
 8021528:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 802152a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 802152e:	4618      	mov	r0, r3
 8021530:	3720      	adds	r7, #32
 8021532:	46bd      	mov	sp, r7
 8021534:	bd80      	pop	{r7, pc}
 8021536:	bf00      	nop
 8021538:	0802c50c 	.word	0x0802c50c
 802153c:	0802c6f8 	.word	0x0802c6f8
 8021540:	0802c560 	.word	0x0802c560
 8021544:	0802c718 	.word	0x0802c718
 8021548:	0802c738 	.word	0x0802c738
 802154c:	0802c75c 	.word	0x0802c75c
 8021550:	0802c780 	.word	0x0802c780
 8021554:	0802c7a4 	.word	0x0802c7a4

08021558 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8021558:	b580      	push	{r7, lr}
 802155a:	b086      	sub	sp, #24
 802155c:	af00      	add	r7, sp, #0
 802155e:	60f8      	str	r0, [r7, #12]
 8021560:	60b9      	str	r1, [r7, #8]
 8021562:	4613      	mov	r3, r2
 8021564:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8021566:	68bb      	ldr	r3, [r7, #8]
 8021568:	2b00      	cmp	r3, #0
 802156a:	d101      	bne.n	8021570 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 802156c:	4b39      	ldr	r3, [pc, #228]	@ (8021654 <udp_bind+0xfc>)
 802156e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8021570:	68fb      	ldr	r3, [r7, #12]
 8021572:	2b00      	cmp	r3, #0
 8021574:	d109      	bne.n	802158a <udp_bind+0x32>
 8021576:	4b38      	ldr	r3, [pc, #224]	@ (8021658 <udp_bind+0x100>)
 8021578:	f240 32b7 	movw	r2, #951	@ 0x3b7
 802157c:	4937      	ldr	r1, [pc, #220]	@ (802165c <udp_bind+0x104>)
 802157e:	4838      	ldr	r0, [pc, #224]	@ (8021660 <udp_bind+0x108>)
 8021580:	f003 ffb0 	bl	80254e4 <iprintf>
 8021584:	f06f 030f 	mvn.w	r3, #15
 8021588:	e060      	b.n	802164c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 802158a:	2300      	movs	r3, #0
 802158c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802158e:	4b35      	ldr	r3, [pc, #212]	@ (8021664 <udp_bind+0x10c>)
 8021590:	681b      	ldr	r3, [r3, #0]
 8021592:	617b      	str	r3, [r7, #20]
 8021594:	e009      	b.n	80215aa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8021596:	68fa      	ldr	r2, [r7, #12]
 8021598:	697b      	ldr	r3, [r7, #20]
 802159a:	429a      	cmp	r2, r3
 802159c:	d102      	bne.n	80215a4 <udp_bind+0x4c>
      rebind = 1;
 802159e:	2301      	movs	r3, #1
 80215a0:	74fb      	strb	r3, [r7, #19]
      break;
 80215a2:	e005      	b.n	80215b0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80215a4:	697b      	ldr	r3, [r7, #20]
 80215a6:	68db      	ldr	r3, [r3, #12]
 80215a8:	617b      	str	r3, [r7, #20]
 80215aa:	697b      	ldr	r3, [r7, #20]
 80215ac:	2b00      	cmp	r3, #0
 80215ae:	d1f2      	bne.n	8021596 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80215b0:	88fb      	ldrh	r3, [r7, #6]
 80215b2:	2b00      	cmp	r3, #0
 80215b4:	d109      	bne.n	80215ca <udp_bind+0x72>
    port = udp_new_port();
 80215b6:	f7ff fc35 	bl	8020e24 <udp_new_port>
 80215ba:	4603      	mov	r3, r0
 80215bc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80215be:	88fb      	ldrh	r3, [r7, #6]
 80215c0:	2b00      	cmp	r3, #0
 80215c2:	d12c      	bne.n	802161e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80215c4:	f06f 0307 	mvn.w	r3, #7
 80215c8:	e040      	b.n	802164c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80215ca:	4b26      	ldr	r3, [pc, #152]	@ (8021664 <udp_bind+0x10c>)
 80215cc:	681b      	ldr	r3, [r3, #0]
 80215ce:	617b      	str	r3, [r7, #20]
 80215d0:	e022      	b.n	8021618 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80215d2:	68fa      	ldr	r2, [r7, #12]
 80215d4:	697b      	ldr	r3, [r7, #20]
 80215d6:	429a      	cmp	r2, r3
 80215d8:	d01b      	beq.n	8021612 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80215da:	697b      	ldr	r3, [r7, #20]
 80215dc:	8a5b      	ldrh	r3, [r3, #18]
 80215de:	88fa      	ldrh	r2, [r7, #6]
 80215e0:	429a      	cmp	r2, r3
 80215e2:	d116      	bne.n	8021612 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80215e4:	697b      	ldr	r3, [r7, #20]
 80215e6:	681a      	ldr	r2, [r3, #0]
 80215e8:	68bb      	ldr	r3, [r7, #8]
 80215ea:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80215ec:	429a      	cmp	r2, r3
 80215ee:	d00d      	beq.n	802160c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80215f0:	68bb      	ldr	r3, [r7, #8]
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	d00a      	beq.n	802160c <udp_bind+0xb4>
 80215f6:	68bb      	ldr	r3, [r7, #8]
 80215f8:	681b      	ldr	r3, [r3, #0]
 80215fa:	2b00      	cmp	r3, #0
 80215fc:	d006      	beq.n	802160c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80215fe:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021600:	2b00      	cmp	r3, #0
 8021602:	d003      	beq.n	802160c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8021604:	697b      	ldr	r3, [r7, #20]
 8021606:	681b      	ldr	r3, [r3, #0]
 8021608:	2b00      	cmp	r3, #0
 802160a:	d102      	bne.n	8021612 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 802160c:	f06f 0307 	mvn.w	r3, #7
 8021610:	e01c      	b.n	802164c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021612:	697b      	ldr	r3, [r7, #20]
 8021614:	68db      	ldr	r3, [r3, #12]
 8021616:	617b      	str	r3, [r7, #20]
 8021618:	697b      	ldr	r3, [r7, #20]
 802161a:	2b00      	cmp	r3, #0
 802161c:	d1d9      	bne.n	80215d2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 802161e:	68bb      	ldr	r3, [r7, #8]
 8021620:	2b00      	cmp	r3, #0
 8021622:	d002      	beq.n	802162a <udp_bind+0xd2>
 8021624:	68bb      	ldr	r3, [r7, #8]
 8021626:	681b      	ldr	r3, [r3, #0]
 8021628:	e000      	b.n	802162c <udp_bind+0xd4>
 802162a:	2300      	movs	r3, #0
 802162c:	68fa      	ldr	r2, [r7, #12]
 802162e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8021630:	68fb      	ldr	r3, [r7, #12]
 8021632:	88fa      	ldrh	r2, [r7, #6]
 8021634:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8021636:	7cfb      	ldrb	r3, [r7, #19]
 8021638:	2b00      	cmp	r3, #0
 802163a:	d106      	bne.n	802164a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 802163c:	4b09      	ldr	r3, [pc, #36]	@ (8021664 <udp_bind+0x10c>)
 802163e:	681a      	ldr	r2, [r3, #0]
 8021640:	68fb      	ldr	r3, [r7, #12]
 8021642:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8021644:	4a07      	ldr	r2, [pc, #28]	@ (8021664 <udp_bind+0x10c>)
 8021646:	68fb      	ldr	r3, [r7, #12]
 8021648:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 802164a:	2300      	movs	r3, #0
}
 802164c:	4618      	mov	r0, r3
 802164e:	3718      	adds	r7, #24
 8021650:	46bd      	mov	sp, r7
 8021652:	bd80      	pop	{r7, pc}
 8021654:	0802d154 	.word	0x0802d154
 8021658:	0802c50c 	.word	0x0802c50c
 802165c:	0802c7d4 	.word	0x0802c7d4
 8021660:	0802c560 	.word	0x0802c560
 8021664:	2400bec0 	.word	0x2400bec0

08021668 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8021668:	b580      	push	{r7, lr}
 802166a:	b084      	sub	sp, #16
 802166c:	af00      	add	r7, sp, #0
 802166e:	60f8      	str	r0, [r7, #12]
 8021670:	60b9      	str	r1, [r7, #8]
 8021672:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8021674:	68fb      	ldr	r3, [r7, #12]
 8021676:	2b00      	cmp	r3, #0
 8021678:	d107      	bne.n	802168a <udp_recv+0x22>
 802167a:	4b08      	ldr	r3, [pc, #32]	@ (802169c <udp_recv+0x34>)
 802167c:	f240 428a 	movw	r2, #1162	@ 0x48a
 8021680:	4907      	ldr	r1, [pc, #28]	@ (80216a0 <udp_recv+0x38>)
 8021682:	4808      	ldr	r0, [pc, #32]	@ (80216a4 <udp_recv+0x3c>)
 8021684:	f003 ff2e 	bl	80254e4 <iprintf>
 8021688:	e005      	b.n	8021696 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 802168a:	68fb      	ldr	r3, [r7, #12]
 802168c:	68ba      	ldr	r2, [r7, #8]
 802168e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8021690:	68fb      	ldr	r3, [r7, #12]
 8021692:	687a      	ldr	r2, [r7, #4]
 8021694:	61da      	str	r2, [r3, #28]
}
 8021696:	3710      	adds	r7, #16
 8021698:	46bd      	mov	sp, r7
 802169a:	bd80      	pop	{r7, pc}
 802169c:	0802c50c 	.word	0x0802c50c
 80216a0:	0802c840 	.word	0x0802c840
 80216a4:	0802c560 	.word	0x0802c560

080216a8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80216a8:	b580      	push	{r7, lr}
 80216aa:	b084      	sub	sp, #16
 80216ac:	af00      	add	r7, sp, #0
 80216ae:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80216b0:	687b      	ldr	r3, [r7, #4]
 80216b2:	2b00      	cmp	r3, #0
 80216b4:	d107      	bne.n	80216c6 <udp_remove+0x1e>
 80216b6:	4b19      	ldr	r3, [pc, #100]	@ (802171c <udp_remove+0x74>)
 80216b8:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 80216bc:	4918      	ldr	r1, [pc, #96]	@ (8021720 <udp_remove+0x78>)
 80216be:	4819      	ldr	r0, [pc, #100]	@ (8021724 <udp_remove+0x7c>)
 80216c0:	f003 ff10 	bl	80254e4 <iprintf>
 80216c4:	e026      	b.n	8021714 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80216c6:	4b18      	ldr	r3, [pc, #96]	@ (8021728 <udp_remove+0x80>)
 80216c8:	681b      	ldr	r3, [r3, #0]
 80216ca:	687a      	ldr	r2, [r7, #4]
 80216cc:	429a      	cmp	r2, r3
 80216ce:	d105      	bne.n	80216dc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80216d0:	4b15      	ldr	r3, [pc, #84]	@ (8021728 <udp_remove+0x80>)
 80216d2:	681b      	ldr	r3, [r3, #0]
 80216d4:	68db      	ldr	r3, [r3, #12]
 80216d6:	4a14      	ldr	r2, [pc, #80]	@ (8021728 <udp_remove+0x80>)
 80216d8:	6013      	str	r3, [r2, #0]
 80216da:	e017      	b.n	802170c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80216dc:	4b12      	ldr	r3, [pc, #72]	@ (8021728 <udp_remove+0x80>)
 80216de:	681b      	ldr	r3, [r3, #0]
 80216e0:	60fb      	str	r3, [r7, #12]
 80216e2:	e010      	b.n	8021706 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80216e4:	68fb      	ldr	r3, [r7, #12]
 80216e6:	68db      	ldr	r3, [r3, #12]
 80216e8:	2b00      	cmp	r3, #0
 80216ea:	d009      	beq.n	8021700 <udp_remove+0x58>
 80216ec:	68fb      	ldr	r3, [r7, #12]
 80216ee:	68db      	ldr	r3, [r3, #12]
 80216f0:	687a      	ldr	r2, [r7, #4]
 80216f2:	429a      	cmp	r2, r3
 80216f4:	d104      	bne.n	8021700 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80216f6:	687b      	ldr	r3, [r7, #4]
 80216f8:	68da      	ldr	r2, [r3, #12]
 80216fa:	68fb      	ldr	r3, [r7, #12]
 80216fc:	60da      	str	r2, [r3, #12]
        break;
 80216fe:	e005      	b.n	802170c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8021700:	68fb      	ldr	r3, [r7, #12]
 8021702:	68db      	ldr	r3, [r3, #12]
 8021704:	60fb      	str	r3, [r7, #12]
 8021706:	68fb      	ldr	r3, [r7, #12]
 8021708:	2b00      	cmp	r3, #0
 802170a:	d1eb      	bne.n	80216e4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 802170c:	6879      	ldr	r1, [r7, #4]
 802170e:	2000      	movs	r0, #0
 8021710:	f7f8 f8c4 	bl	801989c <memp_free>
}
 8021714:	3710      	adds	r7, #16
 8021716:	46bd      	mov	sp, r7
 8021718:	bd80      	pop	{r7, pc}
 802171a:	bf00      	nop
 802171c:	0802c50c 	.word	0x0802c50c
 8021720:	0802c858 	.word	0x0802c858
 8021724:	0802c560 	.word	0x0802c560
 8021728:	2400bec0 	.word	0x2400bec0

0802172c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 802172c:	b580      	push	{r7, lr}
 802172e:	b082      	sub	sp, #8
 8021730:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8021732:	2000      	movs	r0, #0
 8021734:	f7f8 f83c 	bl	80197b0 <memp_malloc>
 8021738:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 802173a:	687b      	ldr	r3, [r7, #4]
 802173c:	2b00      	cmp	r3, #0
 802173e:	d007      	beq.n	8021750 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8021740:	2220      	movs	r2, #32
 8021742:	2100      	movs	r1, #0
 8021744:	6878      	ldr	r0, [r7, #4]
 8021746:	f003 ffb9 	bl	80256bc <memset>
    pcb->ttl = UDP_TTL;
 802174a:	687b      	ldr	r3, [r7, #4]
 802174c:	22ff      	movs	r2, #255	@ 0xff
 802174e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8021750:	687b      	ldr	r3, [r7, #4]
}
 8021752:	4618      	mov	r0, r3
 8021754:	3708      	adds	r7, #8
 8021756:	46bd      	mov	sp, r7
 8021758:	bd80      	pop	{r7, pc}

0802175a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 802175a:	b580      	push	{r7, lr}
 802175c:	b084      	sub	sp, #16
 802175e:	af00      	add	r7, sp, #0
 8021760:	4603      	mov	r3, r0
 8021762:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8021764:	f7ff ffe2 	bl	802172c <udp_new>
 8021768:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 802176a:	68fb      	ldr	r3, [r7, #12]
}
 802176c:	4618      	mov	r0, r3
 802176e:	3710      	adds	r7, #16
 8021770:	46bd      	mov	sp, r7
 8021772:	bd80      	pop	{r7, pc}

08021774 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8021774:	b480      	push	{r7}
 8021776:	b085      	sub	sp, #20
 8021778:	af00      	add	r7, sp, #0
 802177a:	6078      	str	r0, [r7, #4]
 802177c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 802177e:	687b      	ldr	r3, [r7, #4]
 8021780:	2b00      	cmp	r3, #0
 8021782:	d01e      	beq.n	80217c2 <udp_netif_ip_addr_changed+0x4e>
 8021784:	687b      	ldr	r3, [r7, #4]
 8021786:	681b      	ldr	r3, [r3, #0]
 8021788:	2b00      	cmp	r3, #0
 802178a:	d01a      	beq.n	80217c2 <udp_netif_ip_addr_changed+0x4e>
 802178c:	683b      	ldr	r3, [r7, #0]
 802178e:	2b00      	cmp	r3, #0
 8021790:	d017      	beq.n	80217c2 <udp_netif_ip_addr_changed+0x4e>
 8021792:	683b      	ldr	r3, [r7, #0]
 8021794:	681b      	ldr	r3, [r3, #0]
 8021796:	2b00      	cmp	r3, #0
 8021798:	d013      	beq.n	80217c2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 802179a:	4b0d      	ldr	r3, [pc, #52]	@ (80217d0 <udp_netif_ip_addr_changed+0x5c>)
 802179c:	681b      	ldr	r3, [r3, #0]
 802179e:	60fb      	str	r3, [r7, #12]
 80217a0:	e00c      	b.n	80217bc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80217a2:	68fb      	ldr	r3, [r7, #12]
 80217a4:	681a      	ldr	r2, [r3, #0]
 80217a6:	687b      	ldr	r3, [r7, #4]
 80217a8:	681b      	ldr	r3, [r3, #0]
 80217aa:	429a      	cmp	r2, r3
 80217ac:	d103      	bne.n	80217b6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80217ae:	683b      	ldr	r3, [r7, #0]
 80217b0:	681a      	ldr	r2, [r3, #0]
 80217b2:	68fb      	ldr	r3, [r7, #12]
 80217b4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80217b6:	68fb      	ldr	r3, [r7, #12]
 80217b8:	68db      	ldr	r3, [r3, #12]
 80217ba:	60fb      	str	r3, [r7, #12]
 80217bc:	68fb      	ldr	r3, [r7, #12]
 80217be:	2b00      	cmp	r3, #0
 80217c0:	d1ef      	bne.n	80217a2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80217c2:	bf00      	nop
 80217c4:	3714      	adds	r7, #20
 80217c6:	46bd      	mov	sp, r7
 80217c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217cc:	4770      	bx	lr
 80217ce:	bf00      	nop
 80217d0:	2400bec0 	.word	0x2400bec0

080217d4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80217d4:	b580      	push	{r7, lr}
 80217d6:	b082      	sub	sp, #8
 80217d8:	af00      	add	r7, sp, #0
 80217da:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80217dc:	4915      	ldr	r1, [pc, #84]	@ (8021834 <etharp_free_entry+0x60>)
 80217de:	687a      	ldr	r2, [r7, #4]
 80217e0:	4613      	mov	r3, r2
 80217e2:	005b      	lsls	r3, r3, #1
 80217e4:	4413      	add	r3, r2
 80217e6:	00db      	lsls	r3, r3, #3
 80217e8:	440b      	add	r3, r1
 80217ea:	681b      	ldr	r3, [r3, #0]
 80217ec:	2b00      	cmp	r3, #0
 80217ee:	d013      	beq.n	8021818 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80217f0:	4910      	ldr	r1, [pc, #64]	@ (8021834 <etharp_free_entry+0x60>)
 80217f2:	687a      	ldr	r2, [r7, #4]
 80217f4:	4613      	mov	r3, r2
 80217f6:	005b      	lsls	r3, r3, #1
 80217f8:	4413      	add	r3, r2
 80217fa:	00db      	lsls	r3, r3, #3
 80217fc:	440b      	add	r3, r1
 80217fe:	681b      	ldr	r3, [r3, #0]
 8021800:	4618      	mov	r0, r3
 8021802:	f7f8 ff21 	bl	801a648 <pbuf_free>
    arp_table[i].q = NULL;
 8021806:	490b      	ldr	r1, [pc, #44]	@ (8021834 <etharp_free_entry+0x60>)
 8021808:	687a      	ldr	r2, [r7, #4]
 802180a:	4613      	mov	r3, r2
 802180c:	005b      	lsls	r3, r3, #1
 802180e:	4413      	add	r3, r2
 8021810:	00db      	lsls	r3, r3, #3
 8021812:	440b      	add	r3, r1
 8021814:	2200      	movs	r2, #0
 8021816:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8021818:	4906      	ldr	r1, [pc, #24]	@ (8021834 <etharp_free_entry+0x60>)
 802181a:	687a      	ldr	r2, [r7, #4]
 802181c:	4613      	mov	r3, r2
 802181e:	005b      	lsls	r3, r3, #1
 8021820:	4413      	add	r3, r2
 8021822:	00db      	lsls	r3, r3, #3
 8021824:	440b      	add	r3, r1
 8021826:	3314      	adds	r3, #20
 8021828:	2200      	movs	r2, #0
 802182a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 802182c:	bf00      	nop
 802182e:	3708      	adds	r7, #8
 8021830:	46bd      	mov	sp, r7
 8021832:	bd80      	pop	{r7, pc}
 8021834:	2400bec4 	.word	0x2400bec4

08021838 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8021838:	b580      	push	{r7, lr}
 802183a:	b082      	sub	sp, #8
 802183c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802183e:	2300      	movs	r3, #0
 8021840:	607b      	str	r3, [r7, #4]
 8021842:	e096      	b.n	8021972 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8021844:	494f      	ldr	r1, [pc, #316]	@ (8021984 <etharp_tmr+0x14c>)
 8021846:	687a      	ldr	r2, [r7, #4]
 8021848:	4613      	mov	r3, r2
 802184a:	005b      	lsls	r3, r3, #1
 802184c:	4413      	add	r3, r2
 802184e:	00db      	lsls	r3, r3, #3
 8021850:	440b      	add	r3, r1
 8021852:	3314      	adds	r3, #20
 8021854:	781b      	ldrb	r3, [r3, #0]
 8021856:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8021858:	78fb      	ldrb	r3, [r7, #3]
 802185a:	2b00      	cmp	r3, #0
 802185c:	f000 8086 	beq.w	802196c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8021860:	4948      	ldr	r1, [pc, #288]	@ (8021984 <etharp_tmr+0x14c>)
 8021862:	687a      	ldr	r2, [r7, #4]
 8021864:	4613      	mov	r3, r2
 8021866:	005b      	lsls	r3, r3, #1
 8021868:	4413      	add	r3, r2
 802186a:	00db      	lsls	r3, r3, #3
 802186c:	440b      	add	r3, r1
 802186e:	3312      	adds	r3, #18
 8021870:	881b      	ldrh	r3, [r3, #0]
 8021872:	3301      	adds	r3, #1
 8021874:	b298      	uxth	r0, r3
 8021876:	4943      	ldr	r1, [pc, #268]	@ (8021984 <etharp_tmr+0x14c>)
 8021878:	687a      	ldr	r2, [r7, #4]
 802187a:	4613      	mov	r3, r2
 802187c:	005b      	lsls	r3, r3, #1
 802187e:	4413      	add	r3, r2
 8021880:	00db      	lsls	r3, r3, #3
 8021882:	440b      	add	r3, r1
 8021884:	3312      	adds	r3, #18
 8021886:	4602      	mov	r2, r0
 8021888:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802188a:	493e      	ldr	r1, [pc, #248]	@ (8021984 <etharp_tmr+0x14c>)
 802188c:	687a      	ldr	r2, [r7, #4]
 802188e:	4613      	mov	r3, r2
 8021890:	005b      	lsls	r3, r3, #1
 8021892:	4413      	add	r3, r2
 8021894:	00db      	lsls	r3, r3, #3
 8021896:	440b      	add	r3, r1
 8021898:	3312      	adds	r3, #18
 802189a:	881b      	ldrh	r3, [r3, #0]
 802189c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80218a0:	d215      	bcs.n	80218ce <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80218a2:	4938      	ldr	r1, [pc, #224]	@ (8021984 <etharp_tmr+0x14c>)
 80218a4:	687a      	ldr	r2, [r7, #4]
 80218a6:	4613      	mov	r3, r2
 80218a8:	005b      	lsls	r3, r3, #1
 80218aa:	4413      	add	r3, r2
 80218ac:	00db      	lsls	r3, r3, #3
 80218ae:	440b      	add	r3, r1
 80218b0:	3314      	adds	r3, #20
 80218b2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80218b4:	2b01      	cmp	r3, #1
 80218b6:	d10e      	bne.n	80218d6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80218b8:	4932      	ldr	r1, [pc, #200]	@ (8021984 <etharp_tmr+0x14c>)
 80218ba:	687a      	ldr	r2, [r7, #4]
 80218bc:	4613      	mov	r3, r2
 80218be:	005b      	lsls	r3, r3, #1
 80218c0:	4413      	add	r3, r2
 80218c2:	00db      	lsls	r3, r3, #3
 80218c4:	440b      	add	r3, r1
 80218c6:	3312      	adds	r3, #18
 80218c8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80218ca:	2b04      	cmp	r3, #4
 80218cc:	d903      	bls.n	80218d6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80218ce:	6878      	ldr	r0, [r7, #4]
 80218d0:	f7ff ff80 	bl	80217d4 <etharp_free_entry>
 80218d4:	e04a      	b.n	802196c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80218d6:	492b      	ldr	r1, [pc, #172]	@ (8021984 <etharp_tmr+0x14c>)
 80218d8:	687a      	ldr	r2, [r7, #4]
 80218da:	4613      	mov	r3, r2
 80218dc:	005b      	lsls	r3, r3, #1
 80218de:	4413      	add	r3, r2
 80218e0:	00db      	lsls	r3, r3, #3
 80218e2:	440b      	add	r3, r1
 80218e4:	3314      	adds	r3, #20
 80218e6:	781b      	ldrb	r3, [r3, #0]
 80218e8:	2b03      	cmp	r3, #3
 80218ea:	d10a      	bne.n	8021902 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80218ec:	4925      	ldr	r1, [pc, #148]	@ (8021984 <etharp_tmr+0x14c>)
 80218ee:	687a      	ldr	r2, [r7, #4]
 80218f0:	4613      	mov	r3, r2
 80218f2:	005b      	lsls	r3, r3, #1
 80218f4:	4413      	add	r3, r2
 80218f6:	00db      	lsls	r3, r3, #3
 80218f8:	440b      	add	r3, r1
 80218fa:	3314      	adds	r3, #20
 80218fc:	2204      	movs	r2, #4
 80218fe:	701a      	strb	r2, [r3, #0]
 8021900:	e034      	b.n	802196c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8021902:	4920      	ldr	r1, [pc, #128]	@ (8021984 <etharp_tmr+0x14c>)
 8021904:	687a      	ldr	r2, [r7, #4]
 8021906:	4613      	mov	r3, r2
 8021908:	005b      	lsls	r3, r3, #1
 802190a:	4413      	add	r3, r2
 802190c:	00db      	lsls	r3, r3, #3
 802190e:	440b      	add	r3, r1
 8021910:	3314      	adds	r3, #20
 8021912:	781b      	ldrb	r3, [r3, #0]
 8021914:	2b04      	cmp	r3, #4
 8021916:	d10a      	bne.n	802192e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8021918:	491a      	ldr	r1, [pc, #104]	@ (8021984 <etharp_tmr+0x14c>)
 802191a:	687a      	ldr	r2, [r7, #4]
 802191c:	4613      	mov	r3, r2
 802191e:	005b      	lsls	r3, r3, #1
 8021920:	4413      	add	r3, r2
 8021922:	00db      	lsls	r3, r3, #3
 8021924:	440b      	add	r3, r1
 8021926:	3314      	adds	r3, #20
 8021928:	2202      	movs	r2, #2
 802192a:	701a      	strb	r2, [r3, #0]
 802192c:	e01e      	b.n	802196c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802192e:	4915      	ldr	r1, [pc, #84]	@ (8021984 <etharp_tmr+0x14c>)
 8021930:	687a      	ldr	r2, [r7, #4]
 8021932:	4613      	mov	r3, r2
 8021934:	005b      	lsls	r3, r3, #1
 8021936:	4413      	add	r3, r2
 8021938:	00db      	lsls	r3, r3, #3
 802193a:	440b      	add	r3, r1
 802193c:	3314      	adds	r3, #20
 802193e:	781b      	ldrb	r3, [r3, #0]
 8021940:	2b01      	cmp	r3, #1
 8021942:	d113      	bne.n	802196c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8021944:	490f      	ldr	r1, [pc, #60]	@ (8021984 <etharp_tmr+0x14c>)
 8021946:	687a      	ldr	r2, [r7, #4]
 8021948:	4613      	mov	r3, r2
 802194a:	005b      	lsls	r3, r3, #1
 802194c:	4413      	add	r3, r2
 802194e:	00db      	lsls	r3, r3, #3
 8021950:	440b      	add	r3, r1
 8021952:	3308      	adds	r3, #8
 8021954:	6818      	ldr	r0, [r3, #0]
 8021956:	687a      	ldr	r2, [r7, #4]
 8021958:	4613      	mov	r3, r2
 802195a:	005b      	lsls	r3, r3, #1
 802195c:	4413      	add	r3, r2
 802195e:	00db      	lsls	r3, r3, #3
 8021960:	4a08      	ldr	r2, [pc, #32]	@ (8021984 <etharp_tmr+0x14c>)
 8021962:	4413      	add	r3, r2
 8021964:	3304      	adds	r3, #4
 8021966:	4619      	mov	r1, r3
 8021968:	f000 fe6e 	bl	8022648 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802196c:	687b      	ldr	r3, [r7, #4]
 802196e:	3301      	adds	r3, #1
 8021970:	607b      	str	r3, [r7, #4]
 8021972:	687b      	ldr	r3, [r7, #4]
 8021974:	2b09      	cmp	r3, #9
 8021976:	f77f af65 	ble.w	8021844 <etharp_tmr+0xc>
      }
    }
  }
}
 802197a:	bf00      	nop
 802197c:	bf00      	nop
 802197e:	3708      	adds	r7, #8
 8021980:	46bd      	mov	sp, r7
 8021982:	bd80      	pop	{r7, pc}
 8021984:	2400bec4 	.word	0x2400bec4

08021988 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8021988:	b580      	push	{r7, lr}
 802198a:	b08a      	sub	sp, #40	@ 0x28
 802198c:	af00      	add	r7, sp, #0
 802198e:	60f8      	str	r0, [r7, #12]
 8021990:	460b      	mov	r3, r1
 8021992:	607a      	str	r2, [r7, #4]
 8021994:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8021996:	230a      	movs	r3, #10
 8021998:	84fb      	strh	r3, [r7, #38]	@ 0x26
 802199a:	230a      	movs	r3, #10
 802199c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 802199e:	230a      	movs	r3, #10
 80219a0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80219a2:	2300      	movs	r3, #0
 80219a4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80219a6:	230a      	movs	r3, #10
 80219a8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80219aa:	2300      	movs	r3, #0
 80219ac:	83bb      	strh	r3, [r7, #28]
 80219ae:	2300      	movs	r3, #0
 80219b0:	837b      	strh	r3, [r7, #26]
 80219b2:	2300      	movs	r3, #0
 80219b4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80219b6:	2300      	movs	r3, #0
 80219b8:	843b      	strh	r3, [r7, #32]
 80219ba:	e0ae      	b.n	8021b1a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80219bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80219c0:	49a6      	ldr	r1, [pc, #664]	@ (8021c5c <etharp_find_entry+0x2d4>)
 80219c2:	4613      	mov	r3, r2
 80219c4:	005b      	lsls	r3, r3, #1
 80219c6:	4413      	add	r3, r2
 80219c8:	00db      	lsls	r3, r3, #3
 80219ca:	440b      	add	r3, r1
 80219cc:	3314      	adds	r3, #20
 80219ce:	781b      	ldrb	r3, [r3, #0]
 80219d0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80219d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80219d6:	2b0a      	cmp	r3, #10
 80219d8:	d105      	bne.n	80219e6 <etharp_find_entry+0x5e>
 80219da:	7dfb      	ldrb	r3, [r7, #23]
 80219dc:	2b00      	cmp	r3, #0
 80219de:	d102      	bne.n	80219e6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80219e0:	8c3b      	ldrh	r3, [r7, #32]
 80219e2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80219e4:	e095      	b.n	8021b12 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80219e6:	7dfb      	ldrb	r3, [r7, #23]
 80219e8:	2b00      	cmp	r3, #0
 80219ea:	f000 8092 	beq.w	8021b12 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80219ee:	7dfb      	ldrb	r3, [r7, #23]
 80219f0:	2b01      	cmp	r3, #1
 80219f2:	d009      	beq.n	8021a08 <etharp_find_entry+0x80>
 80219f4:	7dfb      	ldrb	r3, [r7, #23]
 80219f6:	2b01      	cmp	r3, #1
 80219f8:	d806      	bhi.n	8021a08 <etharp_find_entry+0x80>
 80219fa:	4b99      	ldr	r3, [pc, #612]	@ (8021c60 <etharp_find_entry+0x2d8>)
 80219fc:	f240 1223 	movw	r2, #291	@ 0x123
 8021a00:	4998      	ldr	r1, [pc, #608]	@ (8021c64 <etharp_find_entry+0x2dc>)
 8021a02:	4899      	ldr	r0, [pc, #612]	@ (8021c68 <etharp_find_entry+0x2e0>)
 8021a04:	f003 fd6e 	bl	80254e4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8021a08:	68fb      	ldr	r3, [r7, #12]
 8021a0a:	2b00      	cmp	r3, #0
 8021a0c:	d020      	beq.n	8021a50 <etharp_find_entry+0xc8>
 8021a0e:	68fb      	ldr	r3, [r7, #12]
 8021a10:	6819      	ldr	r1, [r3, #0]
 8021a12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021a16:	4891      	ldr	r0, [pc, #580]	@ (8021c5c <etharp_find_entry+0x2d4>)
 8021a18:	4613      	mov	r3, r2
 8021a1a:	005b      	lsls	r3, r3, #1
 8021a1c:	4413      	add	r3, r2
 8021a1e:	00db      	lsls	r3, r3, #3
 8021a20:	4403      	add	r3, r0
 8021a22:	3304      	adds	r3, #4
 8021a24:	681b      	ldr	r3, [r3, #0]
 8021a26:	4299      	cmp	r1, r3
 8021a28:	d112      	bne.n	8021a50 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8021a2a:	687b      	ldr	r3, [r7, #4]
 8021a2c:	2b00      	cmp	r3, #0
 8021a2e:	d00c      	beq.n	8021a4a <etharp_find_entry+0xc2>
 8021a30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021a34:	4989      	ldr	r1, [pc, #548]	@ (8021c5c <etharp_find_entry+0x2d4>)
 8021a36:	4613      	mov	r3, r2
 8021a38:	005b      	lsls	r3, r3, #1
 8021a3a:	4413      	add	r3, r2
 8021a3c:	00db      	lsls	r3, r3, #3
 8021a3e:	440b      	add	r3, r1
 8021a40:	3308      	adds	r3, #8
 8021a42:	681b      	ldr	r3, [r3, #0]
 8021a44:	687a      	ldr	r2, [r7, #4]
 8021a46:	429a      	cmp	r2, r3
 8021a48:	d102      	bne.n	8021a50 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8021a4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021a4e:	e100      	b.n	8021c52 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8021a50:	7dfb      	ldrb	r3, [r7, #23]
 8021a52:	2b01      	cmp	r3, #1
 8021a54:	d140      	bne.n	8021ad8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8021a56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021a5a:	4980      	ldr	r1, [pc, #512]	@ (8021c5c <etharp_find_entry+0x2d4>)
 8021a5c:	4613      	mov	r3, r2
 8021a5e:	005b      	lsls	r3, r3, #1
 8021a60:	4413      	add	r3, r2
 8021a62:	00db      	lsls	r3, r3, #3
 8021a64:	440b      	add	r3, r1
 8021a66:	681b      	ldr	r3, [r3, #0]
 8021a68:	2b00      	cmp	r3, #0
 8021a6a:	d01a      	beq.n	8021aa2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8021a6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021a70:	497a      	ldr	r1, [pc, #488]	@ (8021c5c <etharp_find_entry+0x2d4>)
 8021a72:	4613      	mov	r3, r2
 8021a74:	005b      	lsls	r3, r3, #1
 8021a76:	4413      	add	r3, r2
 8021a78:	00db      	lsls	r3, r3, #3
 8021a7a:	440b      	add	r3, r1
 8021a7c:	3312      	adds	r3, #18
 8021a7e:	881b      	ldrh	r3, [r3, #0]
 8021a80:	8bba      	ldrh	r2, [r7, #28]
 8021a82:	429a      	cmp	r2, r3
 8021a84:	d845      	bhi.n	8021b12 <etharp_find_entry+0x18a>
            old_queue = i;
 8021a86:	8c3b      	ldrh	r3, [r7, #32]
 8021a88:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8021a8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021a8e:	4973      	ldr	r1, [pc, #460]	@ (8021c5c <etharp_find_entry+0x2d4>)
 8021a90:	4613      	mov	r3, r2
 8021a92:	005b      	lsls	r3, r3, #1
 8021a94:	4413      	add	r3, r2
 8021a96:	00db      	lsls	r3, r3, #3
 8021a98:	440b      	add	r3, r1
 8021a9a:	3312      	adds	r3, #18
 8021a9c:	881b      	ldrh	r3, [r3, #0]
 8021a9e:	83bb      	strh	r3, [r7, #28]
 8021aa0:	e037      	b.n	8021b12 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8021aa2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021aa6:	496d      	ldr	r1, [pc, #436]	@ (8021c5c <etharp_find_entry+0x2d4>)
 8021aa8:	4613      	mov	r3, r2
 8021aaa:	005b      	lsls	r3, r3, #1
 8021aac:	4413      	add	r3, r2
 8021aae:	00db      	lsls	r3, r3, #3
 8021ab0:	440b      	add	r3, r1
 8021ab2:	3312      	adds	r3, #18
 8021ab4:	881b      	ldrh	r3, [r3, #0]
 8021ab6:	8b7a      	ldrh	r2, [r7, #26]
 8021ab8:	429a      	cmp	r2, r3
 8021aba:	d82a      	bhi.n	8021b12 <etharp_find_entry+0x18a>
            old_pending = i;
 8021abc:	8c3b      	ldrh	r3, [r7, #32]
 8021abe:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8021ac0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021ac4:	4965      	ldr	r1, [pc, #404]	@ (8021c5c <etharp_find_entry+0x2d4>)
 8021ac6:	4613      	mov	r3, r2
 8021ac8:	005b      	lsls	r3, r3, #1
 8021aca:	4413      	add	r3, r2
 8021acc:	00db      	lsls	r3, r3, #3
 8021ace:	440b      	add	r3, r1
 8021ad0:	3312      	adds	r3, #18
 8021ad2:	881b      	ldrh	r3, [r3, #0]
 8021ad4:	837b      	strh	r3, [r7, #26]
 8021ad6:	e01c      	b.n	8021b12 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8021ad8:	7dfb      	ldrb	r3, [r7, #23]
 8021ada:	2b01      	cmp	r3, #1
 8021adc:	d919      	bls.n	8021b12 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8021ade:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021ae2:	495e      	ldr	r1, [pc, #376]	@ (8021c5c <etharp_find_entry+0x2d4>)
 8021ae4:	4613      	mov	r3, r2
 8021ae6:	005b      	lsls	r3, r3, #1
 8021ae8:	4413      	add	r3, r2
 8021aea:	00db      	lsls	r3, r3, #3
 8021aec:	440b      	add	r3, r1
 8021aee:	3312      	adds	r3, #18
 8021af0:	881b      	ldrh	r3, [r3, #0]
 8021af2:	8b3a      	ldrh	r2, [r7, #24]
 8021af4:	429a      	cmp	r2, r3
 8021af6:	d80c      	bhi.n	8021b12 <etharp_find_entry+0x18a>
            old_stable = i;
 8021af8:	8c3b      	ldrh	r3, [r7, #32]
 8021afa:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8021afc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021b00:	4956      	ldr	r1, [pc, #344]	@ (8021c5c <etharp_find_entry+0x2d4>)
 8021b02:	4613      	mov	r3, r2
 8021b04:	005b      	lsls	r3, r3, #1
 8021b06:	4413      	add	r3, r2
 8021b08:	00db      	lsls	r3, r3, #3
 8021b0a:	440b      	add	r3, r1
 8021b0c:	3312      	adds	r3, #18
 8021b0e:	881b      	ldrh	r3, [r3, #0]
 8021b10:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021b12:	8c3b      	ldrh	r3, [r7, #32]
 8021b14:	3301      	adds	r3, #1
 8021b16:	b29b      	uxth	r3, r3
 8021b18:	843b      	strh	r3, [r7, #32]
 8021b1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021b1e:	2b09      	cmp	r3, #9
 8021b20:	f77f af4c 	ble.w	80219bc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8021b24:	7afb      	ldrb	r3, [r7, #11]
 8021b26:	f003 0302 	and.w	r3, r3, #2
 8021b2a:	2b00      	cmp	r3, #0
 8021b2c:	d108      	bne.n	8021b40 <etharp_find_entry+0x1b8>
 8021b2e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8021b32:	2b0a      	cmp	r3, #10
 8021b34:	d107      	bne.n	8021b46 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8021b36:	7afb      	ldrb	r3, [r7, #11]
 8021b38:	f003 0301 	and.w	r3, r3, #1
 8021b3c:	2b00      	cmp	r3, #0
 8021b3e:	d102      	bne.n	8021b46 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8021b40:	f04f 33ff 	mov.w	r3, #4294967295
 8021b44:	e085      	b.n	8021c52 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8021b46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8021b4a:	2b09      	cmp	r3, #9
 8021b4c:	dc02      	bgt.n	8021b54 <etharp_find_entry+0x1cc>
    i = empty;
 8021b4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8021b50:	843b      	strh	r3, [r7, #32]
 8021b52:	e039      	b.n	8021bc8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8021b54:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8021b58:	2b09      	cmp	r3, #9
 8021b5a:	dc14      	bgt.n	8021b86 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8021b5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8021b5e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8021b60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021b64:	493d      	ldr	r1, [pc, #244]	@ (8021c5c <etharp_find_entry+0x2d4>)
 8021b66:	4613      	mov	r3, r2
 8021b68:	005b      	lsls	r3, r3, #1
 8021b6a:	4413      	add	r3, r2
 8021b6c:	00db      	lsls	r3, r3, #3
 8021b6e:	440b      	add	r3, r1
 8021b70:	681b      	ldr	r3, [r3, #0]
 8021b72:	2b00      	cmp	r3, #0
 8021b74:	d018      	beq.n	8021ba8 <etharp_find_entry+0x220>
 8021b76:	4b3a      	ldr	r3, [pc, #232]	@ (8021c60 <etharp_find_entry+0x2d8>)
 8021b78:	f240 126d 	movw	r2, #365	@ 0x16d
 8021b7c:	493b      	ldr	r1, [pc, #236]	@ (8021c6c <etharp_find_entry+0x2e4>)
 8021b7e:	483a      	ldr	r0, [pc, #232]	@ (8021c68 <etharp_find_entry+0x2e0>)
 8021b80:	f003 fcb0 	bl	80254e4 <iprintf>
 8021b84:	e010      	b.n	8021ba8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8021b86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8021b8a:	2b09      	cmp	r3, #9
 8021b8c:	dc02      	bgt.n	8021b94 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8021b8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8021b90:	843b      	strh	r3, [r7, #32]
 8021b92:	e009      	b.n	8021ba8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8021b94:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8021b98:	2b09      	cmp	r3, #9
 8021b9a:	dc02      	bgt.n	8021ba2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8021b9c:	8bfb      	ldrh	r3, [r7, #30]
 8021b9e:	843b      	strh	r3, [r7, #32]
 8021ba0:	e002      	b.n	8021ba8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8021ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8021ba6:	e054      	b.n	8021c52 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8021ba8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021bac:	2b09      	cmp	r3, #9
 8021bae:	dd06      	ble.n	8021bbe <etharp_find_entry+0x236>
 8021bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8021c60 <etharp_find_entry+0x2d8>)
 8021bb2:	f240 127f 	movw	r2, #383	@ 0x17f
 8021bb6:	492e      	ldr	r1, [pc, #184]	@ (8021c70 <etharp_find_entry+0x2e8>)
 8021bb8:	482b      	ldr	r0, [pc, #172]	@ (8021c68 <etharp_find_entry+0x2e0>)
 8021bba:	f003 fc93 	bl	80254e4 <iprintf>
    etharp_free_entry(i);
 8021bbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021bc2:	4618      	mov	r0, r3
 8021bc4:	f7ff fe06 	bl	80217d4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8021bc8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021bcc:	2b09      	cmp	r3, #9
 8021bce:	dd06      	ble.n	8021bde <etharp_find_entry+0x256>
 8021bd0:	4b23      	ldr	r3, [pc, #140]	@ (8021c60 <etharp_find_entry+0x2d8>)
 8021bd2:	f240 1283 	movw	r2, #387	@ 0x183
 8021bd6:	4926      	ldr	r1, [pc, #152]	@ (8021c70 <etharp_find_entry+0x2e8>)
 8021bd8:	4823      	ldr	r0, [pc, #140]	@ (8021c68 <etharp_find_entry+0x2e0>)
 8021bda:	f003 fc83 	bl	80254e4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8021bde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021be2:	491e      	ldr	r1, [pc, #120]	@ (8021c5c <etharp_find_entry+0x2d4>)
 8021be4:	4613      	mov	r3, r2
 8021be6:	005b      	lsls	r3, r3, #1
 8021be8:	4413      	add	r3, r2
 8021bea:	00db      	lsls	r3, r3, #3
 8021bec:	440b      	add	r3, r1
 8021bee:	3314      	adds	r3, #20
 8021bf0:	781b      	ldrb	r3, [r3, #0]
 8021bf2:	2b00      	cmp	r3, #0
 8021bf4:	d006      	beq.n	8021c04 <etharp_find_entry+0x27c>
 8021bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8021c60 <etharp_find_entry+0x2d8>)
 8021bf8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8021bfc:	491d      	ldr	r1, [pc, #116]	@ (8021c74 <etharp_find_entry+0x2ec>)
 8021bfe:	481a      	ldr	r0, [pc, #104]	@ (8021c68 <etharp_find_entry+0x2e0>)
 8021c00:	f003 fc70 	bl	80254e4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8021c04:	68fb      	ldr	r3, [r7, #12]
 8021c06:	2b00      	cmp	r3, #0
 8021c08:	d00b      	beq.n	8021c22 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8021c0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021c0e:	68fb      	ldr	r3, [r7, #12]
 8021c10:	6819      	ldr	r1, [r3, #0]
 8021c12:	4812      	ldr	r0, [pc, #72]	@ (8021c5c <etharp_find_entry+0x2d4>)
 8021c14:	4613      	mov	r3, r2
 8021c16:	005b      	lsls	r3, r3, #1
 8021c18:	4413      	add	r3, r2
 8021c1a:	00db      	lsls	r3, r3, #3
 8021c1c:	4403      	add	r3, r0
 8021c1e:	3304      	adds	r3, #4
 8021c20:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8021c22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021c26:	490d      	ldr	r1, [pc, #52]	@ (8021c5c <etharp_find_entry+0x2d4>)
 8021c28:	4613      	mov	r3, r2
 8021c2a:	005b      	lsls	r3, r3, #1
 8021c2c:	4413      	add	r3, r2
 8021c2e:	00db      	lsls	r3, r3, #3
 8021c30:	440b      	add	r3, r1
 8021c32:	3312      	adds	r3, #18
 8021c34:	2200      	movs	r2, #0
 8021c36:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8021c38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021c3c:	4907      	ldr	r1, [pc, #28]	@ (8021c5c <etharp_find_entry+0x2d4>)
 8021c3e:	4613      	mov	r3, r2
 8021c40:	005b      	lsls	r3, r3, #1
 8021c42:	4413      	add	r3, r2
 8021c44:	00db      	lsls	r3, r3, #3
 8021c46:	440b      	add	r3, r1
 8021c48:	3308      	adds	r3, #8
 8021c4a:	687a      	ldr	r2, [r7, #4]
 8021c4c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8021c4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8021c52:	4618      	mov	r0, r3
 8021c54:	3728      	adds	r7, #40	@ 0x28
 8021c56:	46bd      	mov	sp, r7
 8021c58:	bd80      	pop	{r7, pc}
 8021c5a:	bf00      	nop
 8021c5c:	2400bec4 	.word	0x2400bec4
 8021c60:	0802c870 	.word	0x0802c870
 8021c64:	0802c8a8 	.word	0x0802c8a8
 8021c68:	0802c8e8 	.word	0x0802c8e8
 8021c6c:	0802c910 	.word	0x0802c910
 8021c70:	0802c928 	.word	0x0802c928
 8021c74:	0802c93c 	.word	0x0802c93c

08021c78 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8021c78:	b580      	push	{r7, lr}
 8021c7a:	b088      	sub	sp, #32
 8021c7c:	af02      	add	r7, sp, #8
 8021c7e:	60f8      	str	r0, [r7, #12]
 8021c80:	60b9      	str	r1, [r7, #8]
 8021c82:	607a      	str	r2, [r7, #4]
 8021c84:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8021c86:	68fb      	ldr	r3, [r7, #12]
 8021c88:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021c8c:	2b06      	cmp	r3, #6
 8021c8e:	d006      	beq.n	8021c9e <etharp_update_arp_entry+0x26>
 8021c90:	4b48      	ldr	r3, [pc, #288]	@ (8021db4 <etharp_update_arp_entry+0x13c>)
 8021c92:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8021c96:	4948      	ldr	r1, [pc, #288]	@ (8021db8 <etharp_update_arp_entry+0x140>)
 8021c98:	4848      	ldr	r0, [pc, #288]	@ (8021dbc <etharp_update_arp_entry+0x144>)
 8021c9a:	f003 fc23 	bl	80254e4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8021c9e:	68bb      	ldr	r3, [r7, #8]
 8021ca0:	2b00      	cmp	r3, #0
 8021ca2:	d012      	beq.n	8021cca <etharp_update_arp_entry+0x52>
 8021ca4:	68bb      	ldr	r3, [r7, #8]
 8021ca6:	681b      	ldr	r3, [r3, #0]
 8021ca8:	2b00      	cmp	r3, #0
 8021caa:	d00e      	beq.n	8021cca <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8021cac:	68bb      	ldr	r3, [r7, #8]
 8021cae:	681b      	ldr	r3, [r3, #0]
 8021cb0:	68f9      	ldr	r1, [r7, #12]
 8021cb2:	4618      	mov	r0, r3
 8021cb4:	f001 f924 	bl	8022f00 <ip4_addr_isbroadcast_u32>
 8021cb8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8021cba:	2b00      	cmp	r3, #0
 8021cbc:	d105      	bne.n	8021cca <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8021cbe:	68bb      	ldr	r3, [r7, #8]
 8021cc0:	681b      	ldr	r3, [r3, #0]
 8021cc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8021cc6:	2be0      	cmp	r3, #224	@ 0xe0
 8021cc8:	d102      	bne.n	8021cd0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8021cca:	f06f 030f 	mvn.w	r3, #15
 8021cce:	e06c      	b.n	8021daa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8021cd0:	78fb      	ldrb	r3, [r7, #3]
 8021cd2:	68fa      	ldr	r2, [r7, #12]
 8021cd4:	4619      	mov	r1, r3
 8021cd6:	68b8      	ldr	r0, [r7, #8]
 8021cd8:	f7ff fe56 	bl	8021988 <etharp_find_entry>
 8021cdc:	4603      	mov	r3, r0
 8021cde:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8021ce0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8021ce4:	2b00      	cmp	r3, #0
 8021ce6:	da02      	bge.n	8021cee <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8021ce8:	8afb      	ldrh	r3, [r7, #22]
 8021cea:	b25b      	sxtb	r3, r3
 8021cec:	e05d      	b.n	8021daa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8021cee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021cf2:	4933      	ldr	r1, [pc, #204]	@ (8021dc0 <etharp_update_arp_entry+0x148>)
 8021cf4:	4613      	mov	r3, r2
 8021cf6:	005b      	lsls	r3, r3, #1
 8021cf8:	4413      	add	r3, r2
 8021cfa:	00db      	lsls	r3, r3, #3
 8021cfc:	440b      	add	r3, r1
 8021cfe:	3314      	adds	r3, #20
 8021d00:	2202      	movs	r2, #2
 8021d02:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8021d04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021d08:	492d      	ldr	r1, [pc, #180]	@ (8021dc0 <etharp_update_arp_entry+0x148>)
 8021d0a:	4613      	mov	r3, r2
 8021d0c:	005b      	lsls	r3, r3, #1
 8021d0e:	4413      	add	r3, r2
 8021d10:	00db      	lsls	r3, r3, #3
 8021d12:	440b      	add	r3, r1
 8021d14:	3308      	adds	r3, #8
 8021d16:	68fa      	ldr	r2, [r7, #12]
 8021d18:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8021d1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021d1e:	4613      	mov	r3, r2
 8021d20:	005b      	lsls	r3, r3, #1
 8021d22:	4413      	add	r3, r2
 8021d24:	00db      	lsls	r3, r3, #3
 8021d26:	3308      	adds	r3, #8
 8021d28:	4a25      	ldr	r2, [pc, #148]	@ (8021dc0 <etharp_update_arp_entry+0x148>)
 8021d2a:	4413      	add	r3, r2
 8021d2c:	3304      	adds	r3, #4
 8021d2e:	2206      	movs	r2, #6
 8021d30:	6879      	ldr	r1, [r7, #4]
 8021d32:	4618      	mov	r0, r3
 8021d34:	f003 fd63 	bl	80257fe <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8021d38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021d3c:	4920      	ldr	r1, [pc, #128]	@ (8021dc0 <etharp_update_arp_entry+0x148>)
 8021d3e:	4613      	mov	r3, r2
 8021d40:	005b      	lsls	r3, r3, #1
 8021d42:	4413      	add	r3, r2
 8021d44:	00db      	lsls	r3, r3, #3
 8021d46:	440b      	add	r3, r1
 8021d48:	3312      	adds	r3, #18
 8021d4a:	2200      	movs	r2, #0
 8021d4c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8021d4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021d52:	491b      	ldr	r1, [pc, #108]	@ (8021dc0 <etharp_update_arp_entry+0x148>)
 8021d54:	4613      	mov	r3, r2
 8021d56:	005b      	lsls	r3, r3, #1
 8021d58:	4413      	add	r3, r2
 8021d5a:	00db      	lsls	r3, r3, #3
 8021d5c:	440b      	add	r3, r1
 8021d5e:	681b      	ldr	r3, [r3, #0]
 8021d60:	2b00      	cmp	r3, #0
 8021d62:	d021      	beq.n	8021da8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8021d64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021d68:	4915      	ldr	r1, [pc, #84]	@ (8021dc0 <etharp_update_arp_entry+0x148>)
 8021d6a:	4613      	mov	r3, r2
 8021d6c:	005b      	lsls	r3, r3, #1
 8021d6e:	4413      	add	r3, r2
 8021d70:	00db      	lsls	r3, r3, #3
 8021d72:	440b      	add	r3, r1
 8021d74:	681b      	ldr	r3, [r3, #0]
 8021d76:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8021d78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021d7c:	4910      	ldr	r1, [pc, #64]	@ (8021dc0 <etharp_update_arp_entry+0x148>)
 8021d7e:	4613      	mov	r3, r2
 8021d80:	005b      	lsls	r3, r3, #1
 8021d82:	4413      	add	r3, r2
 8021d84:	00db      	lsls	r3, r3, #3
 8021d86:	440b      	add	r3, r1
 8021d88:	2200      	movs	r2, #0
 8021d8a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8021d8c:	68fb      	ldr	r3, [r7, #12]
 8021d8e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8021d92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021d96:	9300      	str	r3, [sp, #0]
 8021d98:	687b      	ldr	r3, [r7, #4]
 8021d9a:	6939      	ldr	r1, [r7, #16]
 8021d9c:	68f8      	ldr	r0, [r7, #12]
 8021d9e:	f002 f8fb 	bl	8023f98 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8021da2:	6938      	ldr	r0, [r7, #16]
 8021da4:	f7f8 fc50 	bl	801a648 <pbuf_free>
  }
  return ERR_OK;
 8021da8:	2300      	movs	r3, #0
}
 8021daa:	4618      	mov	r0, r3
 8021dac:	3718      	adds	r7, #24
 8021dae:	46bd      	mov	sp, r7
 8021db0:	bd80      	pop	{r7, pc}
 8021db2:	bf00      	nop
 8021db4:	0802c870 	.word	0x0802c870
 8021db8:	0802c968 	.word	0x0802c968
 8021dbc:	0802c8e8 	.word	0x0802c8e8
 8021dc0:	2400bec4 	.word	0x2400bec4

08021dc4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8021dc4:	b580      	push	{r7, lr}
 8021dc6:	b084      	sub	sp, #16
 8021dc8:	af00      	add	r7, sp, #0
 8021dca:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021dcc:	2300      	movs	r3, #0
 8021dce:	60fb      	str	r3, [r7, #12]
 8021dd0:	e01e      	b.n	8021e10 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8021dd2:	4913      	ldr	r1, [pc, #76]	@ (8021e20 <etharp_cleanup_netif+0x5c>)
 8021dd4:	68fa      	ldr	r2, [r7, #12]
 8021dd6:	4613      	mov	r3, r2
 8021dd8:	005b      	lsls	r3, r3, #1
 8021dda:	4413      	add	r3, r2
 8021ddc:	00db      	lsls	r3, r3, #3
 8021dde:	440b      	add	r3, r1
 8021de0:	3314      	adds	r3, #20
 8021de2:	781b      	ldrb	r3, [r3, #0]
 8021de4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8021de6:	7afb      	ldrb	r3, [r7, #11]
 8021de8:	2b00      	cmp	r3, #0
 8021dea:	d00e      	beq.n	8021e0a <etharp_cleanup_netif+0x46>
 8021dec:	490c      	ldr	r1, [pc, #48]	@ (8021e20 <etharp_cleanup_netif+0x5c>)
 8021dee:	68fa      	ldr	r2, [r7, #12]
 8021df0:	4613      	mov	r3, r2
 8021df2:	005b      	lsls	r3, r3, #1
 8021df4:	4413      	add	r3, r2
 8021df6:	00db      	lsls	r3, r3, #3
 8021df8:	440b      	add	r3, r1
 8021dfa:	3308      	adds	r3, #8
 8021dfc:	681b      	ldr	r3, [r3, #0]
 8021dfe:	687a      	ldr	r2, [r7, #4]
 8021e00:	429a      	cmp	r2, r3
 8021e02:	d102      	bne.n	8021e0a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8021e04:	68f8      	ldr	r0, [r7, #12]
 8021e06:	f7ff fce5 	bl	80217d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021e0a:	68fb      	ldr	r3, [r7, #12]
 8021e0c:	3301      	adds	r3, #1
 8021e0e:	60fb      	str	r3, [r7, #12]
 8021e10:	68fb      	ldr	r3, [r7, #12]
 8021e12:	2b09      	cmp	r3, #9
 8021e14:	dddd      	ble.n	8021dd2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8021e16:	bf00      	nop
 8021e18:	bf00      	nop
 8021e1a:	3710      	adds	r7, #16
 8021e1c:	46bd      	mov	sp, r7
 8021e1e:	bd80      	pop	{r7, pc}
 8021e20:	2400bec4 	.word	0x2400bec4

08021e24 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8021e24:	b5b0      	push	{r4, r5, r7, lr}
 8021e26:	b08a      	sub	sp, #40	@ 0x28
 8021e28:	af04      	add	r7, sp, #16
 8021e2a:	6078      	str	r0, [r7, #4]
 8021e2c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8021e2e:	683b      	ldr	r3, [r7, #0]
 8021e30:	2b00      	cmp	r3, #0
 8021e32:	d107      	bne.n	8021e44 <etharp_input+0x20>
 8021e34:	4b3d      	ldr	r3, [pc, #244]	@ (8021f2c <etharp_input+0x108>)
 8021e36:	f240 228a 	movw	r2, #650	@ 0x28a
 8021e3a:	493d      	ldr	r1, [pc, #244]	@ (8021f30 <etharp_input+0x10c>)
 8021e3c:	483d      	ldr	r0, [pc, #244]	@ (8021f34 <etharp_input+0x110>)
 8021e3e:	f003 fb51 	bl	80254e4 <iprintf>
 8021e42:	e06f      	b.n	8021f24 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8021e44:	687b      	ldr	r3, [r7, #4]
 8021e46:	685b      	ldr	r3, [r3, #4]
 8021e48:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8021e4a:	693b      	ldr	r3, [r7, #16]
 8021e4c:	881b      	ldrh	r3, [r3, #0]
 8021e4e:	b29b      	uxth	r3, r3
 8021e50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021e54:	d10c      	bne.n	8021e70 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8021e56:	693b      	ldr	r3, [r7, #16]
 8021e58:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8021e5a:	2b06      	cmp	r3, #6
 8021e5c:	d108      	bne.n	8021e70 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8021e5e:	693b      	ldr	r3, [r7, #16]
 8021e60:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8021e62:	2b04      	cmp	r3, #4
 8021e64:	d104      	bne.n	8021e70 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8021e66:	693b      	ldr	r3, [r7, #16]
 8021e68:	885b      	ldrh	r3, [r3, #2]
 8021e6a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8021e6c:	2b08      	cmp	r3, #8
 8021e6e:	d003      	beq.n	8021e78 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8021e70:	6878      	ldr	r0, [r7, #4]
 8021e72:	f7f8 fbe9 	bl	801a648 <pbuf_free>
    return;
 8021e76:	e055      	b.n	8021f24 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8021e78:	693b      	ldr	r3, [r7, #16]
 8021e7a:	330e      	adds	r3, #14
 8021e7c:	681b      	ldr	r3, [r3, #0]
 8021e7e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8021e80:	693b      	ldr	r3, [r7, #16]
 8021e82:	3318      	adds	r3, #24
 8021e84:	681b      	ldr	r3, [r3, #0]
 8021e86:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021e88:	683b      	ldr	r3, [r7, #0]
 8021e8a:	3304      	adds	r3, #4
 8021e8c:	681b      	ldr	r3, [r3, #0]
 8021e8e:	2b00      	cmp	r3, #0
 8021e90:	d102      	bne.n	8021e98 <etharp_input+0x74>
    for_us = 0;
 8021e92:	2300      	movs	r3, #0
 8021e94:	75fb      	strb	r3, [r7, #23]
 8021e96:	e009      	b.n	8021eac <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8021e98:	68ba      	ldr	r2, [r7, #8]
 8021e9a:	683b      	ldr	r3, [r7, #0]
 8021e9c:	3304      	adds	r3, #4
 8021e9e:	681b      	ldr	r3, [r3, #0]
 8021ea0:	429a      	cmp	r2, r3
 8021ea2:	bf0c      	ite	eq
 8021ea4:	2301      	moveq	r3, #1
 8021ea6:	2300      	movne	r3, #0
 8021ea8:	b2db      	uxtb	r3, r3
 8021eaa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8021eac:	693b      	ldr	r3, [r7, #16]
 8021eae:	f103 0208 	add.w	r2, r3, #8
 8021eb2:	7dfb      	ldrb	r3, [r7, #23]
 8021eb4:	2b00      	cmp	r3, #0
 8021eb6:	d001      	beq.n	8021ebc <etharp_input+0x98>
 8021eb8:	2301      	movs	r3, #1
 8021eba:	e000      	b.n	8021ebe <etharp_input+0x9a>
 8021ebc:	2302      	movs	r3, #2
 8021ebe:	f107 010c 	add.w	r1, r7, #12
 8021ec2:	6838      	ldr	r0, [r7, #0]
 8021ec4:	f7ff fed8 	bl	8021c78 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8021ec8:	693b      	ldr	r3, [r7, #16]
 8021eca:	88db      	ldrh	r3, [r3, #6]
 8021ecc:	b29b      	uxth	r3, r3
 8021ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021ed2:	d003      	beq.n	8021edc <etharp_input+0xb8>
 8021ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021ed8:	d01e      	beq.n	8021f18 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8021eda:	e020      	b.n	8021f1e <etharp_input+0xfa>
      if (for_us) {
 8021edc:	7dfb      	ldrb	r3, [r7, #23]
 8021ede:	2b00      	cmp	r3, #0
 8021ee0:	d01c      	beq.n	8021f1c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8021ee2:	683b      	ldr	r3, [r7, #0]
 8021ee4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8021ee8:	693b      	ldr	r3, [r7, #16]
 8021eea:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8021eee:	683b      	ldr	r3, [r7, #0]
 8021ef0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8021ef4:	683b      	ldr	r3, [r7, #0]
 8021ef6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8021ef8:	693a      	ldr	r2, [r7, #16]
 8021efa:	3208      	adds	r2, #8
        etharp_raw(netif,
 8021efc:	2102      	movs	r1, #2
 8021efe:	9103      	str	r1, [sp, #12]
 8021f00:	f107 010c 	add.w	r1, r7, #12
 8021f04:	9102      	str	r1, [sp, #8]
 8021f06:	9201      	str	r2, [sp, #4]
 8021f08:	9300      	str	r3, [sp, #0]
 8021f0a:	462b      	mov	r3, r5
 8021f0c:	4622      	mov	r2, r4
 8021f0e:	4601      	mov	r1, r0
 8021f10:	6838      	ldr	r0, [r7, #0]
 8021f12:	f000 faeb 	bl	80224ec <etharp_raw>
      break;
 8021f16:	e001      	b.n	8021f1c <etharp_input+0xf8>
      break;
 8021f18:	bf00      	nop
 8021f1a:	e000      	b.n	8021f1e <etharp_input+0xfa>
      break;
 8021f1c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8021f1e:	6878      	ldr	r0, [r7, #4]
 8021f20:	f7f8 fb92 	bl	801a648 <pbuf_free>
}
 8021f24:	3718      	adds	r7, #24
 8021f26:	46bd      	mov	sp, r7
 8021f28:	bdb0      	pop	{r4, r5, r7, pc}
 8021f2a:	bf00      	nop
 8021f2c:	0802c870 	.word	0x0802c870
 8021f30:	0802c9c0 	.word	0x0802c9c0
 8021f34:	0802c8e8 	.word	0x0802c8e8

08021f38 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8021f38:	b580      	push	{r7, lr}
 8021f3a:	b086      	sub	sp, #24
 8021f3c:	af02      	add	r7, sp, #8
 8021f3e:	60f8      	str	r0, [r7, #12]
 8021f40:	60b9      	str	r1, [r7, #8]
 8021f42:	4613      	mov	r3, r2
 8021f44:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021f46:	79fa      	ldrb	r2, [r7, #7]
 8021f48:	4944      	ldr	r1, [pc, #272]	@ (802205c <etharp_output_to_arp_index+0x124>)
 8021f4a:	4613      	mov	r3, r2
 8021f4c:	005b      	lsls	r3, r3, #1
 8021f4e:	4413      	add	r3, r2
 8021f50:	00db      	lsls	r3, r3, #3
 8021f52:	440b      	add	r3, r1
 8021f54:	3314      	adds	r3, #20
 8021f56:	781b      	ldrb	r3, [r3, #0]
 8021f58:	2b01      	cmp	r3, #1
 8021f5a:	d806      	bhi.n	8021f6a <etharp_output_to_arp_index+0x32>
 8021f5c:	4b40      	ldr	r3, [pc, #256]	@ (8022060 <etharp_output_to_arp_index+0x128>)
 8021f5e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8021f62:	4940      	ldr	r1, [pc, #256]	@ (8022064 <etharp_output_to_arp_index+0x12c>)
 8021f64:	4840      	ldr	r0, [pc, #256]	@ (8022068 <etharp_output_to_arp_index+0x130>)
 8021f66:	f003 fabd 	bl	80254e4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8021f6a:	79fa      	ldrb	r2, [r7, #7]
 8021f6c:	493b      	ldr	r1, [pc, #236]	@ (802205c <etharp_output_to_arp_index+0x124>)
 8021f6e:	4613      	mov	r3, r2
 8021f70:	005b      	lsls	r3, r3, #1
 8021f72:	4413      	add	r3, r2
 8021f74:	00db      	lsls	r3, r3, #3
 8021f76:	440b      	add	r3, r1
 8021f78:	3314      	adds	r3, #20
 8021f7a:	781b      	ldrb	r3, [r3, #0]
 8021f7c:	2b02      	cmp	r3, #2
 8021f7e:	d153      	bne.n	8022028 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8021f80:	79fa      	ldrb	r2, [r7, #7]
 8021f82:	4936      	ldr	r1, [pc, #216]	@ (802205c <etharp_output_to_arp_index+0x124>)
 8021f84:	4613      	mov	r3, r2
 8021f86:	005b      	lsls	r3, r3, #1
 8021f88:	4413      	add	r3, r2
 8021f8a:	00db      	lsls	r3, r3, #3
 8021f8c:	440b      	add	r3, r1
 8021f8e:	3312      	adds	r3, #18
 8021f90:	881b      	ldrh	r3, [r3, #0]
 8021f92:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8021f96:	d919      	bls.n	8021fcc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8021f98:	79fa      	ldrb	r2, [r7, #7]
 8021f9a:	4613      	mov	r3, r2
 8021f9c:	005b      	lsls	r3, r3, #1
 8021f9e:	4413      	add	r3, r2
 8021fa0:	00db      	lsls	r3, r3, #3
 8021fa2:	4a2e      	ldr	r2, [pc, #184]	@ (802205c <etharp_output_to_arp_index+0x124>)
 8021fa4:	4413      	add	r3, r2
 8021fa6:	3304      	adds	r3, #4
 8021fa8:	4619      	mov	r1, r3
 8021faa:	68f8      	ldr	r0, [r7, #12]
 8021fac:	f000 fb4c 	bl	8022648 <etharp_request>
 8021fb0:	4603      	mov	r3, r0
 8021fb2:	2b00      	cmp	r3, #0
 8021fb4:	d138      	bne.n	8022028 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8021fb6:	79fa      	ldrb	r2, [r7, #7]
 8021fb8:	4928      	ldr	r1, [pc, #160]	@ (802205c <etharp_output_to_arp_index+0x124>)
 8021fba:	4613      	mov	r3, r2
 8021fbc:	005b      	lsls	r3, r3, #1
 8021fbe:	4413      	add	r3, r2
 8021fc0:	00db      	lsls	r3, r3, #3
 8021fc2:	440b      	add	r3, r1
 8021fc4:	3314      	adds	r3, #20
 8021fc6:	2203      	movs	r2, #3
 8021fc8:	701a      	strb	r2, [r3, #0]
 8021fca:	e02d      	b.n	8022028 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8021fcc:	79fa      	ldrb	r2, [r7, #7]
 8021fce:	4923      	ldr	r1, [pc, #140]	@ (802205c <etharp_output_to_arp_index+0x124>)
 8021fd0:	4613      	mov	r3, r2
 8021fd2:	005b      	lsls	r3, r3, #1
 8021fd4:	4413      	add	r3, r2
 8021fd6:	00db      	lsls	r3, r3, #3
 8021fd8:	440b      	add	r3, r1
 8021fda:	3312      	adds	r3, #18
 8021fdc:	881b      	ldrh	r3, [r3, #0]
 8021fde:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8021fe2:	d321      	bcc.n	8022028 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021fe4:	79fa      	ldrb	r2, [r7, #7]
 8021fe6:	4613      	mov	r3, r2
 8021fe8:	005b      	lsls	r3, r3, #1
 8021fea:	4413      	add	r3, r2
 8021fec:	00db      	lsls	r3, r3, #3
 8021fee:	4a1b      	ldr	r2, [pc, #108]	@ (802205c <etharp_output_to_arp_index+0x124>)
 8021ff0:	4413      	add	r3, r2
 8021ff2:	1d19      	adds	r1, r3, #4
 8021ff4:	79fa      	ldrb	r2, [r7, #7]
 8021ff6:	4613      	mov	r3, r2
 8021ff8:	005b      	lsls	r3, r3, #1
 8021ffa:	4413      	add	r3, r2
 8021ffc:	00db      	lsls	r3, r3, #3
 8021ffe:	3308      	adds	r3, #8
 8022000:	4a16      	ldr	r2, [pc, #88]	@ (802205c <etharp_output_to_arp_index+0x124>)
 8022002:	4413      	add	r3, r2
 8022004:	3304      	adds	r3, #4
 8022006:	461a      	mov	r2, r3
 8022008:	68f8      	ldr	r0, [r7, #12]
 802200a:	f000 fafb 	bl	8022604 <etharp_request_dst>
 802200e:	4603      	mov	r3, r0
 8022010:	2b00      	cmp	r3, #0
 8022012:	d109      	bne.n	8022028 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8022014:	79fa      	ldrb	r2, [r7, #7]
 8022016:	4911      	ldr	r1, [pc, #68]	@ (802205c <etharp_output_to_arp_index+0x124>)
 8022018:	4613      	mov	r3, r2
 802201a:	005b      	lsls	r3, r3, #1
 802201c:	4413      	add	r3, r2
 802201e:	00db      	lsls	r3, r3, #3
 8022020:	440b      	add	r3, r1
 8022022:	3314      	adds	r3, #20
 8022024:	2203      	movs	r2, #3
 8022026:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8022028:	68fb      	ldr	r3, [r7, #12]
 802202a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 802202e:	79fa      	ldrb	r2, [r7, #7]
 8022030:	4613      	mov	r3, r2
 8022032:	005b      	lsls	r3, r3, #1
 8022034:	4413      	add	r3, r2
 8022036:	00db      	lsls	r3, r3, #3
 8022038:	3308      	adds	r3, #8
 802203a:	4a08      	ldr	r2, [pc, #32]	@ (802205c <etharp_output_to_arp_index+0x124>)
 802203c:	4413      	add	r3, r2
 802203e:	3304      	adds	r3, #4
 8022040:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8022044:	9200      	str	r2, [sp, #0]
 8022046:	460a      	mov	r2, r1
 8022048:	68b9      	ldr	r1, [r7, #8]
 802204a:	68f8      	ldr	r0, [r7, #12]
 802204c:	f001 ffa4 	bl	8023f98 <ethernet_output>
 8022050:	4603      	mov	r3, r0
}
 8022052:	4618      	mov	r0, r3
 8022054:	3710      	adds	r7, #16
 8022056:	46bd      	mov	sp, r7
 8022058:	bd80      	pop	{r7, pc}
 802205a:	bf00      	nop
 802205c:	2400bec4 	.word	0x2400bec4
 8022060:	0802c870 	.word	0x0802c870
 8022064:	0802c9e0 	.word	0x0802c9e0
 8022068:	0802c8e8 	.word	0x0802c8e8

0802206c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 802206c:	b580      	push	{r7, lr}
 802206e:	b08a      	sub	sp, #40	@ 0x28
 8022070:	af02      	add	r7, sp, #8
 8022072:	60f8      	str	r0, [r7, #12]
 8022074:	60b9      	str	r1, [r7, #8]
 8022076:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8022078:	687b      	ldr	r3, [r7, #4]
 802207a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802207c:	68fb      	ldr	r3, [r7, #12]
 802207e:	2b00      	cmp	r3, #0
 8022080:	d106      	bne.n	8022090 <etharp_output+0x24>
 8022082:	4b73      	ldr	r3, [pc, #460]	@ (8022250 <etharp_output+0x1e4>)
 8022084:	f240 321e 	movw	r2, #798	@ 0x31e
 8022088:	4972      	ldr	r1, [pc, #456]	@ (8022254 <etharp_output+0x1e8>)
 802208a:	4873      	ldr	r0, [pc, #460]	@ (8022258 <etharp_output+0x1ec>)
 802208c:	f003 fa2a 	bl	80254e4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8022090:	68bb      	ldr	r3, [r7, #8]
 8022092:	2b00      	cmp	r3, #0
 8022094:	d106      	bne.n	80220a4 <etharp_output+0x38>
 8022096:	4b6e      	ldr	r3, [pc, #440]	@ (8022250 <etharp_output+0x1e4>)
 8022098:	f240 321f 	movw	r2, #799	@ 0x31f
 802209c:	496f      	ldr	r1, [pc, #444]	@ (802225c <etharp_output+0x1f0>)
 802209e:	486e      	ldr	r0, [pc, #440]	@ (8022258 <etharp_output+0x1ec>)
 80220a0:	f003 fa20 	bl	80254e4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80220a4:	687b      	ldr	r3, [r7, #4]
 80220a6:	2b00      	cmp	r3, #0
 80220a8:	d106      	bne.n	80220b8 <etharp_output+0x4c>
 80220aa:	4b69      	ldr	r3, [pc, #420]	@ (8022250 <etharp_output+0x1e4>)
 80220ac:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80220b0:	496b      	ldr	r1, [pc, #428]	@ (8022260 <etharp_output+0x1f4>)
 80220b2:	4869      	ldr	r0, [pc, #420]	@ (8022258 <etharp_output+0x1ec>)
 80220b4:	f003 fa16 	bl	80254e4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80220b8:	687b      	ldr	r3, [r7, #4]
 80220ba:	681b      	ldr	r3, [r3, #0]
 80220bc:	68f9      	ldr	r1, [r7, #12]
 80220be:	4618      	mov	r0, r3
 80220c0:	f000 ff1e 	bl	8022f00 <ip4_addr_isbroadcast_u32>
 80220c4:	4603      	mov	r3, r0
 80220c6:	2b00      	cmp	r3, #0
 80220c8:	d002      	beq.n	80220d0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80220ca:	4b66      	ldr	r3, [pc, #408]	@ (8022264 <etharp_output+0x1f8>)
 80220cc:	61fb      	str	r3, [r7, #28]
 80220ce:	e0af      	b.n	8022230 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80220d0:	687b      	ldr	r3, [r7, #4]
 80220d2:	681b      	ldr	r3, [r3, #0]
 80220d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80220d8:	2be0      	cmp	r3, #224	@ 0xe0
 80220da:	d118      	bne.n	802210e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80220dc:	2301      	movs	r3, #1
 80220de:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80220e0:	2300      	movs	r3, #0
 80220e2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80220e4:	235e      	movs	r3, #94	@ 0x5e
 80220e6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80220e8:	687b      	ldr	r3, [r7, #4]
 80220ea:	3301      	adds	r3, #1
 80220ec:	781b      	ldrb	r3, [r3, #0]
 80220ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80220f2:	b2db      	uxtb	r3, r3
 80220f4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80220f6:	687b      	ldr	r3, [r7, #4]
 80220f8:	3302      	adds	r3, #2
 80220fa:	781b      	ldrb	r3, [r3, #0]
 80220fc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80220fe:	687b      	ldr	r3, [r7, #4]
 8022100:	3303      	adds	r3, #3
 8022102:	781b      	ldrb	r3, [r3, #0]
 8022104:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8022106:	f107 0310 	add.w	r3, r7, #16
 802210a:	61fb      	str	r3, [r7, #28]
 802210c:	e090      	b.n	8022230 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802210e:	687b      	ldr	r3, [r7, #4]
 8022110:	681a      	ldr	r2, [r3, #0]
 8022112:	68fb      	ldr	r3, [r7, #12]
 8022114:	3304      	adds	r3, #4
 8022116:	681b      	ldr	r3, [r3, #0]
 8022118:	405a      	eors	r2, r3
 802211a:	68fb      	ldr	r3, [r7, #12]
 802211c:	3308      	adds	r3, #8
 802211e:	681b      	ldr	r3, [r3, #0]
 8022120:	4013      	ands	r3, r2
 8022122:	2b00      	cmp	r3, #0
 8022124:	d012      	beq.n	802214c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8022126:	687b      	ldr	r3, [r7, #4]
 8022128:	681b      	ldr	r3, [r3, #0]
 802212a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802212c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8022130:	4293      	cmp	r3, r2
 8022132:	d00b      	beq.n	802214c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8022134:	68fb      	ldr	r3, [r7, #12]
 8022136:	330c      	adds	r3, #12
 8022138:	681b      	ldr	r3, [r3, #0]
 802213a:	2b00      	cmp	r3, #0
 802213c:	d003      	beq.n	8022146 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 802213e:	68fb      	ldr	r3, [r7, #12]
 8022140:	330c      	adds	r3, #12
 8022142:	61bb      	str	r3, [r7, #24]
 8022144:	e002      	b.n	802214c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8022146:	f06f 0303 	mvn.w	r3, #3
 802214a:	e07d      	b.n	8022248 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 802214c:	4b46      	ldr	r3, [pc, #280]	@ (8022268 <etharp_output+0x1fc>)
 802214e:	781b      	ldrb	r3, [r3, #0]
 8022150:	4619      	mov	r1, r3
 8022152:	4a46      	ldr	r2, [pc, #280]	@ (802226c <etharp_output+0x200>)
 8022154:	460b      	mov	r3, r1
 8022156:	005b      	lsls	r3, r3, #1
 8022158:	440b      	add	r3, r1
 802215a:	00db      	lsls	r3, r3, #3
 802215c:	4413      	add	r3, r2
 802215e:	3314      	adds	r3, #20
 8022160:	781b      	ldrb	r3, [r3, #0]
 8022162:	2b01      	cmp	r3, #1
 8022164:	d925      	bls.n	80221b2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8022166:	4b40      	ldr	r3, [pc, #256]	@ (8022268 <etharp_output+0x1fc>)
 8022168:	781b      	ldrb	r3, [r3, #0]
 802216a:	4619      	mov	r1, r3
 802216c:	4a3f      	ldr	r2, [pc, #252]	@ (802226c <etharp_output+0x200>)
 802216e:	460b      	mov	r3, r1
 8022170:	005b      	lsls	r3, r3, #1
 8022172:	440b      	add	r3, r1
 8022174:	00db      	lsls	r3, r3, #3
 8022176:	4413      	add	r3, r2
 8022178:	3308      	adds	r3, #8
 802217a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 802217c:	68fa      	ldr	r2, [r7, #12]
 802217e:	429a      	cmp	r2, r3
 8022180:	d117      	bne.n	80221b2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8022182:	69bb      	ldr	r3, [r7, #24]
 8022184:	681a      	ldr	r2, [r3, #0]
 8022186:	4b38      	ldr	r3, [pc, #224]	@ (8022268 <etharp_output+0x1fc>)
 8022188:	781b      	ldrb	r3, [r3, #0]
 802218a:	4618      	mov	r0, r3
 802218c:	4937      	ldr	r1, [pc, #220]	@ (802226c <etharp_output+0x200>)
 802218e:	4603      	mov	r3, r0
 8022190:	005b      	lsls	r3, r3, #1
 8022192:	4403      	add	r3, r0
 8022194:	00db      	lsls	r3, r3, #3
 8022196:	440b      	add	r3, r1
 8022198:	3304      	adds	r3, #4
 802219a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 802219c:	429a      	cmp	r2, r3
 802219e:	d108      	bne.n	80221b2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80221a0:	4b31      	ldr	r3, [pc, #196]	@ (8022268 <etharp_output+0x1fc>)
 80221a2:	781b      	ldrb	r3, [r3, #0]
 80221a4:	461a      	mov	r2, r3
 80221a6:	68b9      	ldr	r1, [r7, #8]
 80221a8:	68f8      	ldr	r0, [r7, #12]
 80221aa:	f7ff fec5 	bl	8021f38 <etharp_output_to_arp_index>
 80221ae:	4603      	mov	r3, r0
 80221b0:	e04a      	b.n	8022248 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80221b2:	2300      	movs	r3, #0
 80221b4:	75fb      	strb	r3, [r7, #23]
 80221b6:	e031      	b.n	802221c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80221b8:	7dfa      	ldrb	r2, [r7, #23]
 80221ba:	492c      	ldr	r1, [pc, #176]	@ (802226c <etharp_output+0x200>)
 80221bc:	4613      	mov	r3, r2
 80221be:	005b      	lsls	r3, r3, #1
 80221c0:	4413      	add	r3, r2
 80221c2:	00db      	lsls	r3, r3, #3
 80221c4:	440b      	add	r3, r1
 80221c6:	3314      	adds	r3, #20
 80221c8:	781b      	ldrb	r3, [r3, #0]
 80221ca:	2b01      	cmp	r3, #1
 80221cc:	d923      	bls.n	8022216 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80221ce:	7dfa      	ldrb	r2, [r7, #23]
 80221d0:	4926      	ldr	r1, [pc, #152]	@ (802226c <etharp_output+0x200>)
 80221d2:	4613      	mov	r3, r2
 80221d4:	005b      	lsls	r3, r3, #1
 80221d6:	4413      	add	r3, r2
 80221d8:	00db      	lsls	r3, r3, #3
 80221da:	440b      	add	r3, r1
 80221dc:	3308      	adds	r3, #8
 80221de:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80221e0:	68fa      	ldr	r2, [r7, #12]
 80221e2:	429a      	cmp	r2, r3
 80221e4:	d117      	bne.n	8022216 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80221e6:	69bb      	ldr	r3, [r7, #24]
 80221e8:	6819      	ldr	r1, [r3, #0]
 80221ea:	7dfa      	ldrb	r2, [r7, #23]
 80221ec:	481f      	ldr	r0, [pc, #124]	@ (802226c <etharp_output+0x200>)
 80221ee:	4613      	mov	r3, r2
 80221f0:	005b      	lsls	r3, r3, #1
 80221f2:	4413      	add	r3, r2
 80221f4:	00db      	lsls	r3, r3, #3
 80221f6:	4403      	add	r3, r0
 80221f8:	3304      	adds	r3, #4
 80221fa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80221fc:	4299      	cmp	r1, r3
 80221fe:	d10a      	bne.n	8022216 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8022200:	4a19      	ldr	r2, [pc, #100]	@ (8022268 <etharp_output+0x1fc>)
 8022202:	7dfb      	ldrb	r3, [r7, #23]
 8022204:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8022206:	7dfb      	ldrb	r3, [r7, #23]
 8022208:	461a      	mov	r2, r3
 802220a:	68b9      	ldr	r1, [r7, #8]
 802220c:	68f8      	ldr	r0, [r7, #12]
 802220e:	f7ff fe93 	bl	8021f38 <etharp_output_to_arp_index>
 8022212:	4603      	mov	r3, r0
 8022214:	e018      	b.n	8022248 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8022216:	7dfb      	ldrb	r3, [r7, #23]
 8022218:	3301      	adds	r3, #1
 802221a:	75fb      	strb	r3, [r7, #23]
 802221c:	7dfb      	ldrb	r3, [r7, #23]
 802221e:	2b09      	cmp	r3, #9
 8022220:	d9ca      	bls.n	80221b8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8022222:	68ba      	ldr	r2, [r7, #8]
 8022224:	69b9      	ldr	r1, [r7, #24]
 8022226:	68f8      	ldr	r0, [r7, #12]
 8022228:	f000 f822 	bl	8022270 <etharp_query>
 802222c:	4603      	mov	r3, r0
 802222e:	e00b      	b.n	8022248 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8022230:	68fb      	ldr	r3, [r7, #12]
 8022232:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8022236:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802223a:	9300      	str	r3, [sp, #0]
 802223c:	69fb      	ldr	r3, [r7, #28]
 802223e:	68b9      	ldr	r1, [r7, #8]
 8022240:	68f8      	ldr	r0, [r7, #12]
 8022242:	f001 fea9 	bl	8023f98 <ethernet_output>
 8022246:	4603      	mov	r3, r0
}
 8022248:	4618      	mov	r0, r3
 802224a:	3720      	adds	r7, #32
 802224c:	46bd      	mov	sp, r7
 802224e:	bd80      	pop	{r7, pc}
 8022250:	0802c870 	.word	0x0802c870
 8022254:	0802c9c0 	.word	0x0802c9c0
 8022258:	0802c8e8 	.word	0x0802c8e8
 802225c:	0802ca10 	.word	0x0802ca10
 8022260:	0802c9b0 	.word	0x0802c9b0
 8022264:	0802d158 	.word	0x0802d158
 8022268:	2400bfb4 	.word	0x2400bfb4
 802226c:	2400bec4 	.word	0x2400bec4

08022270 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8022270:	b580      	push	{r7, lr}
 8022272:	b08c      	sub	sp, #48	@ 0x30
 8022274:	af02      	add	r7, sp, #8
 8022276:	60f8      	str	r0, [r7, #12]
 8022278:	60b9      	str	r1, [r7, #8]
 802227a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 802227c:	68fb      	ldr	r3, [r7, #12]
 802227e:	3326      	adds	r3, #38	@ 0x26
 8022280:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8022282:	23ff      	movs	r3, #255	@ 0xff
 8022284:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8022288:	2300      	movs	r3, #0
 802228a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802228c:	68bb      	ldr	r3, [r7, #8]
 802228e:	681b      	ldr	r3, [r3, #0]
 8022290:	68f9      	ldr	r1, [r7, #12]
 8022292:	4618      	mov	r0, r3
 8022294:	f000 fe34 	bl	8022f00 <ip4_addr_isbroadcast_u32>
 8022298:	4603      	mov	r3, r0
 802229a:	2b00      	cmp	r3, #0
 802229c:	d10c      	bne.n	80222b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802229e:	68bb      	ldr	r3, [r7, #8]
 80222a0:	681b      	ldr	r3, [r3, #0]
 80222a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80222a6:	2be0      	cmp	r3, #224	@ 0xe0
 80222a8:	d006      	beq.n	80222b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80222aa:	68bb      	ldr	r3, [r7, #8]
 80222ac:	2b00      	cmp	r3, #0
 80222ae:	d003      	beq.n	80222b8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80222b0:	68bb      	ldr	r3, [r7, #8]
 80222b2:	681b      	ldr	r3, [r3, #0]
 80222b4:	2b00      	cmp	r3, #0
 80222b6:	d102      	bne.n	80222be <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80222b8:	f06f 030f 	mvn.w	r3, #15
 80222bc:	e101      	b.n	80224c2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80222be:	68fa      	ldr	r2, [r7, #12]
 80222c0:	2101      	movs	r1, #1
 80222c2:	68b8      	ldr	r0, [r7, #8]
 80222c4:	f7ff fb60 	bl	8021988 <etharp_find_entry>
 80222c8:	4603      	mov	r3, r0
 80222ca:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80222cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80222d0:	2b00      	cmp	r3, #0
 80222d2:	da02      	bge.n	80222da <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80222d4:	8a7b      	ldrh	r3, [r7, #18]
 80222d6:	b25b      	sxtb	r3, r3
 80222d8:	e0f3      	b.n	80224c2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80222da:	8a7b      	ldrh	r3, [r7, #18]
 80222dc:	2b7e      	cmp	r3, #126	@ 0x7e
 80222de:	d906      	bls.n	80222ee <etharp_query+0x7e>
 80222e0:	4b7a      	ldr	r3, [pc, #488]	@ (80224cc <etharp_query+0x25c>)
 80222e2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80222e6:	497a      	ldr	r1, [pc, #488]	@ (80224d0 <etharp_query+0x260>)
 80222e8:	487a      	ldr	r0, [pc, #488]	@ (80224d4 <etharp_query+0x264>)
 80222ea:	f003 f8fb 	bl	80254e4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80222ee:	8a7b      	ldrh	r3, [r7, #18]
 80222f0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80222f2:	7c7a      	ldrb	r2, [r7, #17]
 80222f4:	4978      	ldr	r1, [pc, #480]	@ (80224d8 <etharp_query+0x268>)
 80222f6:	4613      	mov	r3, r2
 80222f8:	005b      	lsls	r3, r3, #1
 80222fa:	4413      	add	r3, r2
 80222fc:	00db      	lsls	r3, r3, #3
 80222fe:	440b      	add	r3, r1
 8022300:	3314      	adds	r3, #20
 8022302:	781b      	ldrb	r3, [r3, #0]
 8022304:	2b00      	cmp	r3, #0
 8022306:	d115      	bne.n	8022334 <etharp_query+0xc4>
    is_new_entry = 1;
 8022308:	2301      	movs	r3, #1
 802230a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 802230c:	7c7a      	ldrb	r2, [r7, #17]
 802230e:	4972      	ldr	r1, [pc, #456]	@ (80224d8 <etharp_query+0x268>)
 8022310:	4613      	mov	r3, r2
 8022312:	005b      	lsls	r3, r3, #1
 8022314:	4413      	add	r3, r2
 8022316:	00db      	lsls	r3, r3, #3
 8022318:	440b      	add	r3, r1
 802231a:	3314      	adds	r3, #20
 802231c:	2201      	movs	r2, #1
 802231e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8022320:	7c7a      	ldrb	r2, [r7, #17]
 8022322:	496d      	ldr	r1, [pc, #436]	@ (80224d8 <etharp_query+0x268>)
 8022324:	4613      	mov	r3, r2
 8022326:	005b      	lsls	r3, r3, #1
 8022328:	4413      	add	r3, r2
 802232a:	00db      	lsls	r3, r3, #3
 802232c:	440b      	add	r3, r1
 802232e:	3308      	adds	r3, #8
 8022330:	68fa      	ldr	r2, [r7, #12]
 8022332:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8022334:	7c7a      	ldrb	r2, [r7, #17]
 8022336:	4968      	ldr	r1, [pc, #416]	@ (80224d8 <etharp_query+0x268>)
 8022338:	4613      	mov	r3, r2
 802233a:	005b      	lsls	r3, r3, #1
 802233c:	4413      	add	r3, r2
 802233e:	00db      	lsls	r3, r3, #3
 8022340:	440b      	add	r3, r1
 8022342:	3314      	adds	r3, #20
 8022344:	781b      	ldrb	r3, [r3, #0]
 8022346:	2b01      	cmp	r3, #1
 8022348:	d011      	beq.n	802236e <etharp_query+0xfe>
 802234a:	7c7a      	ldrb	r2, [r7, #17]
 802234c:	4962      	ldr	r1, [pc, #392]	@ (80224d8 <etharp_query+0x268>)
 802234e:	4613      	mov	r3, r2
 8022350:	005b      	lsls	r3, r3, #1
 8022352:	4413      	add	r3, r2
 8022354:	00db      	lsls	r3, r3, #3
 8022356:	440b      	add	r3, r1
 8022358:	3314      	adds	r3, #20
 802235a:	781b      	ldrb	r3, [r3, #0]
 802235c:	2b01      	cmp	r3, #1
 802235e:	d806      	bhi.n	802236e <etharp_query+0xfe>
 8022360:	4b5a      	ldr	r3, [pc, #360]	@ (80224cc <etharp_query+0x25c>)
 8022362:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8022366:	495d      	ldr	r1, [pc, #372]	@ (80224dc <etharp_query+0x26c>)
 8022368:	485a      	ldr	r0, [pc, #360]	@ (80224d4 <etharp_query+0x264>)
 802236a:	f003 f8bb 	bl	80254e4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 802236e:	6a3b      	ldr	r3, [r7, #32]
 8022370:	2b00      	cmp	r3, #0
 8022372:	d102      	bne.n	802237a <etharp_query+0x10a>
 8022374:	687b      	ldr	r3, [r7, #4]
 8022376:	2b00      	cmp	r3, #0
 8022378:	d10c      	bne.n	8022394 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 802237a:	68b9      	ldr	r1, [r7, #8]
 802237c:	68f8      	ldr	r0, [r7, #12]
 802237e:	f000 f963 	bl	8022648 <etharp_request>
 8022382:	4603      	mov	r3, r0
 8022384:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8022388:	687b      	ldr	r3, [r7, #4]
 802238a:	2b00      	cmp	r3, #0
 802238c:	d102      	bne.n	8022394 <etharp_query+0x124>
      return result;
 802238e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8022392:	e096      	b.n	80224c2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8022394:	687b      	ldr	r3, [r7, #4]
 8022396:	2b00      	cmp	r3, #0
 8022398:	d106      	bne.n	80223a8 <etharp_query+0x138>
 802239a:	4b4c      	ldr	r3, [pc, #304]	@ (80224cc <etharp_query+0x25c>)
 802239c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80223a0:	494f      	ldr	r1, [pc, #316]	@ (80224e0 <etharp_query+0x270>)
 80223a2:	484c      	ldr	r0, [pc, #304]	@ (80224d4 <etharp_query+0x264>)
 80223a4:	f003 f89e 	bl	80254e4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80223a8:	7c7a      	ldrb	r2, [r7, #17]
 80223aa:	494b      	ldr	r1, [pc, #300]	@ (80224d8 <etharp_query+0x268>)
 80223ac:	4613      	mov	r3, r2
 80223ae:	005b      	lsls	r3, r3, #1
 80223b0:	4413      	add	r3, r2
 80223b2:	00db      	lsls	r3, r3, #3
 80223b4:	440b      	add	r3, r1
 80223b6:	3314      	adds	r3, #20
 80223b8:	781b      	ldrb	r3, [r3, #0]
 80223ba:	2b01      	cmp	r3, #1
 80223bc:	d917      	bls.n	80223ee <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80223be:	4a49      	ldr	r2, [pc, #292]	@ (80224e4 <etharp_query+0x274>)
 80223c0:	7c7b      	ldrb	r3, [r7, #17]
 80223c2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80223c4:	7c7a      	ldrb	r2, [r7, #17]
 80223c6:	4613      	mov	r3, r2
 80223c8:	005b      	lsls	r3, r3, #1
 80223ca:	4413      	add	r3, r2
 80223cc:	00db      	lsls	r3, r3, #3
 80223ce:	3308      	adds	r3, #8
 80223d0:	4a41      	ldr	r2, [pc, #260]	@ (80224d8 <etharp_query+0x268>)
 80223d2:	4413      	add	r3, r2
 80223d4:	3304      	adds	r3, #4
 80223d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80223da:	9200      	str	r2, [sp, #0]
 80223dc:	697a      	ldr	r2, [r7, #20]
 80223de:	6879      	ldr	r1, [r7, #4]
 80223e0:	68f8      	ldr	r0, [r7, #12]
 80223e2:	f001 fdd9 	bl	8023f98 <ethernet_output>
 80223e6:	4603      	mov	r3, r0
 80223e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80223ec:	e067      	b.n	80224be <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80223ee:	7c7a      	ldrb	r2, [r7, #17]
 80223f0:	4939      	ldr	r1, [pc, #228]	@ (80224d8 <etharp_query+0x268>)
 80223f2:	4613      	mov	r3, r2
 80223f4:	005b      	lsls	r3, r3, #1
 80223f6:	4413      	add	r3, r2
 80223f8:	00db      	lsls	r3, r3, #3
 80223fa:	440b      	add	r3, r1
 80223fc:	3314      	adds	r3, #20
 80223fe:	781b      	ldrb	r3, [r3, #0]
 8022400:	2b01      	cmp	r3, #1
 8022402:	d15c      	bne.n	80224be <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8022404:	2300      	movs	r3, #0
 8022406:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8022408:	687b      	ldr	r3, [r7, #4]
 802240a:	61fb      	str	r3, [r7, #28]
    while (p) {
 802240c:	e01c      	b.n	8022448 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802240e:	69fb      	ldr	r3, [r7, #28]
 8022410:	895a      	ldrh	r2, [r3, #10]
 8022412:	69fb      	ldr	r3, [r7, #28]
 8022414:	891b      	ldrh	r3, [r3, #8]
 8022416:	429a      	cmp	r2, r3
 8022418:	d10a      	bne.n	8022430 <etharp_query+0x1c0>
 802241a:	69fb      	ldr	r3, [r7, #28]
 802241c:	681b      	ldr	r3, [r3, #0]
 802241e:	2b00      	cmp	r3, #0
 8022420:	d006      	beq.n	8022430 <etharp_query+0x1c0>
 8022422:	4b2a      	ldr	r3, [pc, #168]	@ (80224cc <etharp_query+0x25c>)
 8022424:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8022428:	492f      	ldr	r1, [pc, #188]	@ (80224e8 <etharp_query+0x278>)
 802242a:	482a      	ldr	r0, [pc, #168]	@ (80224d4 <etharp_query+0x264>)
 802242c:	f003 f85a 	bl	80254e4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8022430:	69fb      	ldr	r3, [r7, #28]
 8022432:	7b1b      	ldrb	r3, [r3, #12]
 8022434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8022438:	2b00      	cmp	r3, #0
 802243a:	d002      	beq.n	8022442 <etharp_query+0x1d2>
        copy_needed = 1;
 802243c:	2301      	movs	r3, #1
 802243e:	61bb      	str	r3, [r7, #24]
        break;
 8022440:	e005      	b.n	802244e <etharp_query+0x1de>
      }
      p = p->next;
 8022442:	69fb      	ldr	r3, [r7, #28]
 8022444:	681b      	ldr	r3, [r3, #0]
 8022446:	61fb      	str	r3, [r7, #28]
    while (p) {
 8022448:	69fb      	ldr	r3, [r7, #28]
 802244a:	2b00      	cmp	r3, #0
 802244c:	d1df      	bne.n	802240e <etharp_query+0x19e>
    }
    if (copy_needed) {
 802244e:	69bb      	ldr	r3, [r7, #24]
 8022450:	2b00      	cmp	r3, #0
 8022452:	d007      	beq.n	8022464 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8022454:	687a      	ldr	r2, [r7, #4]
 8022456:	f44f 7120 	mov.w	r1, #640	@ 0x280
 802245a:	200e      	movs	r0, #14
 802245c:	f7f8 fb6c 	bl	801ab38 <pbuf_clone>
 8022460:	61f8      	str	r0, [r7, #28]
 8022462:	e004      	b.n	802246e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8022464:	687b      	ldr	r3, [r7, #4]
 8022466:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8022468:	69f8      	ldr	r0, [r7, #28]
 802246a:	f7f8 f993 	bl	801a794 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 802246e:	69fb      	ldr	r3, [r7, #28]
 8022470:	2b00      	cmp	r3, #0
 8022472:	d021      	beq.n	80224b8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8022474:	7c7a      	ldrb	r2, [r7, #17]
 8022476:	4918      	ldr	r1, [pc, #96]	@ (80224d8 <etharp_query+0x268>)
 8022478:	4613      	mov	r3, r2
 802247a:	005b      	lsls	r3, r3, #1
 802247c:	4413      	add	r3, r2
 802247e:	00db      	lsls	r3, r3, #3
 8022480:	440b      	add	r3, r1
 8022482:	681b      	ldr	r3, [r3, #0]
 8022484:	2b00      	cmp	r3, #0
 8022486:	d00a      	beq.n	802249e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8022488:	7c7a      	ldrb	r2, [r7, #17]
 802248a:	4913      	ldr	r1, [pc, #76]	@ (80224d8 <etharp_query+0x268>)
 802248c:	4613      	mov	r3, r2
 802248e:	005b      	lsls	r3, r3, #1
 8022490:	4413      	add	r3, r2
 8022492:	00db      	lsls	r3, r3, #3
 8022494:	440b      	add	r3, r1
 8022496:	681b      	ldr	r3, [r3, #0]
 8022498:	4618      	mov	r0, r3
 802249a:	f7f8 f8d5 	bl	801a648 <pbuf_free>
      }
      arp_table[i].q = p;
 802249e:	7c7a      	ldrb	r2, [r7, #17]
 80224a0:	490d      	ldr	r1, [pc, #52]	@ (80224d8 <etharp_query+0x268>)
 80224a2:	4613      	mov	r3, r2
 80224a4:	005b      	lsls	r3, r3, #1
 80224a6:	4413      	add	r3, r2
 80224a8:	00db      	lsls	r3, r3, #3
 80224aa:	440b      	add	r3, r1
 80224ac:	69fa      	ldr	r2, [r7, #28]
 80224ae:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80224b0:	2300      	movs	r3, #0
 80224b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80224b6:	e002      	b.n	80224be <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80224b8:	23ff      	movs	r3, #255	@ 0xff
 80224ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80224be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80224c2:	4618      	mov	r0, r3
 80224c4:	3728      	adds	r7, #40	@ 0x28
 80224c6:	46bd      	mov	sp, r7
 80224c8:	bd80      	pop	{r7, pc}
 80224ca:	bf00      	nop
 80224cc:	0802c870 	.word	0x0802c870
 80224d0:	0802ca1c 	.word	0x0802ca1c
 80224d4:	0802c8e8 	.word	0x0802c8e8
 80224d8:	2400bec4 	.word	0x2400bec4
 80224dc:	0802ca2c 	.word	0x0802ca2c
 80224e0:	0802ca10 	.word	0x0802ca10
 80224e4:	2400bfb4 	.word	0x2400bfb4
 80224e8:	0802ca54 	.word	0x0802ca54

080224ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80224ec:	b580      	push	{r7, lr}
 80224ee:	b08a      	sub	sp, #40	@ 0x28
 80224f0:	af02      	add	r7, sp, #8
 80224f2:	60f8      	str	r0, [r7, #12]
 80224f4:	60b9      	str	r1, [r7, #8]
 80224f6:	607a      	str	r2, [r7, #4]
 80224f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80224fa:	2300      	movs	r3, #0
 80224fc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80224fe:	68fb      	ldr	r3, [r7, #12]
 8022500:	2b00      	cmp	r3, #0
 8022502:	d106      	bne.n	8022512 <etharp_raw+0x26>
 8022504:	4b3a      	ldr	r3, [pc, #232]	@ (80225f0 <etharp_raw+0x104>)
 8022506:	f240 4257 	movw	r2, #1111	@ 0x457
 802250a:	493a      	ldr	r1, [pc, #232]	@ (80225f4 <etharp_raw+0x108>)
 802250c:	483a      	ldr	r0, [pc, #232]	@ (80225f8 <etharp_raw+0x10c>)
 802250e:	f002 ffe9 	bl	80254e4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8022512:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8022516:	211c      	movs	r1, #28
 8022518:	200e      	movs	r0, #14
 802251a:	f7f7 fd7f 	bl	801a01c <pbuf_alloc>
 802251e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8022520:	69bb      	ldr	r3, [r7, #24]
 8022522:	2b00      	cmp	r3, #0
 8022524:	d102      	bne.n	802252c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8022526:	f04f 33ff 	mov.w	r3, #4294967295
 802252a:	e05d      	b.n	80225e8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 802252c:	69bb      	ldr	r3, [r7, #24]
 802252e:	895b      	ldrh	r3, [r3, #10]
 8022530:	2b1b      	cmp	r3, #27
 8022532:	d806      	bhi.n	8022542 <etharp_raw+0x56>
 8022534:	4b2e      	ldr	r3, [pc, #184]	@ (80225f0 <etharp_raw+0x104>)
 8022536:	f240 4262 	movw	r2, #1122	@ 0x462
 802253a:	4930      	ldr	r1, [pc, #192]	@ (80225fc <etharp_raw+0x110>)
 802253c:	482e      	ldr	r0, [pc, #184]	@ (80225f8 <etharp_raw+0x10c>)
 802253e:	f002 ffd1 	bl	80254e4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8022542:	69bb      	ldr	r3, [r7, #24]
 8022544:	685b      	ldr	r3, [r3, #4]
 8022546:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8022548:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 802254a:	4618      	mov	r0, r3
 802254c:	f7f6 fba0 	bl	8018c90 <lwip_htons>
 8022550:	4603      	mov	r3, r0
 8022552:	461a      	mov	r2, r3
 8022554:	697b      	ldr	r3, [r7, #20]
 8022556:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8022558:	68fb      	ldr	r3, [r7, #12]
 802255a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 802255e:	2b06      	cmp	r3, #6
 8022560:	d006      	beq.n	8022570 <etharp_raw+0x84>
 8022562:	4b23      	ldr	r3, [pc, #140]	@ (80225f0 <etharp_raw+0x104>)
 8022564:	f240 4269 	movw	r2, #1129	@ 0x469
 8022568:	4925      	ldr	r1, [pc, #148]	@ (8022600 <etharp_raw+0x114>)
 802256a:	4823      	ldr	r0, [pc, #140]	@ (80225f8 <etharp_raw+0x10c>)
 802256c:	f002 ffba 	bl	80254e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8022570:	697b      	ldr	r3, [r7, #20]
 8022572:	3308      	adds	r3, #8
 8022574:	2206      	movs	r2, #6
 8022576:	6839      	ldr	r1, [r7, #0]
 8022578:	4618      	mov	r0, r3
 802257a:	f003 f940 	bl	80257fe <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 802257e:	697b      	ldr	r3, [r7, #20]
 8022580:	3312      	adds	r3, #18
 8022582:	2206      	movs	r2, #6
 8022584:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8022586:	4618      	mov	r0, r3
 8022588:	f003 f939 	bl	80257fe <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 802258c:	697b      	ldr	r3, [r7, #20]
 802258e:	330e      	adds	r3, #14
 8022590:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022592:	6812      	ldr	r2, [r2, #0]
 8022594:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8022596:	697b      	ldr	r3, [r7, #20]
 8022598:	3318      	adds	r3, #24
 802259a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802259c:	6812      	ldr	r2, [r2, #0]
 802259e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80225a0:	697b      	ldr	r3, [r7, #20]
 80225a2:	2200      	movs	r2, #0
 80225a4:	701a      	strb	r2, [r3, #0]
 80225a6:	2200      	movs	r2, #0
 80225a8:	f042 0201 	orr.w	r2, r2, #1
 80225ac:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80225ae:	697b      	ldr	r3, [r7, #20]
 80225b0:	2200      	movs	r2, #0
 80225b2:	f042 0208 	orr.w	r2, r2, #8
 80225b6:	709a      	strb	r2, [r3, #2]
 80225b8:	2200      	movs	r2, #0
 80225ba:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80225bc:	697b      	ldr	r3, [r7, #20]
 80225be:	2206      	movs	r2, #6
 80225c0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80225c2:	697b      	ldr	r3, [r7, #20]
 80225c4:	2204      	movs	r2, #4
 80225c6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80225c8:	f640 0306 	movw	r3, #2054	@ 0x806
 80225cc:	9300      	str	r3, [sp, #0]
 80225ce:	687b      	ldr	r3, [r7, #4]
 80225d0:	68ba      	ldr	r2, [r7, #8]
 80225d2:	69b9      	ldr	r1, [r7, #24]
 80225d4:	68f8      	ldr	r0, [r7, #12]
 80225d6:	f001 fcdf 	bl	8023f98 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80225da:	69b8      	ldr	r0, [r7, #24]
 80225dc:	f7f8 f834 	bl	801a648 <pbuf_free>
  p = NULL;
 80225e0:	2300      	movs	r3, #0
 80225e2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80225e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80225e8:	4618      	mov	r0, r3
 80225ea:	3720      	adds	r7, #32
 80225ec:	46bd      	mov	sp, r7
 80225ee:	bd80      	pop	{r7, pc}
 80225f0:	0802c870 	.word	0x0802c870
 80225f4:	0802c9c0 	.word	0x0802c9c0
 80225f8:	0802c8e8 	.word	0x0802c8e8
 80225fc:	0802ca70 	.word	0x0802ca70
 8022600:	0802caa4 	.word	0x0802caa4

08022604 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8022604:	b580      	push	{r7, lr}
 8022606:	b088      	sub	sp, #32
 8022608:	af04      	add	r7, sp, #16
 802260a:	60f8      	str	r0, [r7, #12]
 802260c:	60b9      	str	r1, [r7, #8]
 802260e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022610:	68fb      	ldr	r3, [r7, #12]
 8022612:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8022616:	68fb      	ldr	r3, [r7, #12]
 8022618:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 802261c:	68fb      	ldr	r3, [r7, #12]
 802261e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022620:	2201      	movs	r2, #1
 8022622:	9203      	str	r2, [sp, #12]
 8022624:	68ba      	ldr	r2, [r7, #8]
 8022626:	9202      	str	r2, [sp, #8]
 8022628:	4a06      	ldr	r2, [pc, #24]	@ (8022644 <etharp_request_dst+0x40>)
 802262a:	9201      	str	r2, [sp, #4]
 802262c:	9300      	str	r3, [sp, #0]
 802262e:	4603      	mov	r3, r0
 8022630:	687a      	ldr	r2, [r7, #4]
 8022632:	68f8      	ldr	r0, [r7, #12]
 8022634:	f7ff ff5a 	bl	80224ec <etharp_raw>
 8022638:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 802263a:	4618      	mov	r0, r3
 802263c:	3710      	adds	r7, #16
 802263e:	46bd      	mov	sp, r7
 8022640:	bd80      	pop	{r7, pc}
 8022642:	bf00      	nop
 8022644:	0802d160 	.word	0x0802d160

08022648 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8022648:	b580      	push	{r7, lr}
 802264a:	b082      	sub	sp, #8
 802264c:	af00      	add	r7, sp, #0
 802264e:	6078      	str	r0, [r7, #4]
 8022650:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8022652:	4a05      	ldr	r2, [pc, #20]	@ (8022668 <etharp_request+0x20>)
 8022654:	6839      	ldr	r1, [r7, #0]
 8022656:	6878      	ldr	r0, [r7, #4]
 8022658:	f7ff ffd4 	bl	8022604 <etharp_request_dst>
 802265c:	4603      	mov	r3, r0
}
 802265e:	4618      	mov	r0, r3
 8022660:	3708      	adds	r7, #8
 8022662:	46bd      	mov	sp, r7
 8022664:	bd80      	pop	{r7, pc}
 8022666:	bf00      	nop
 8022668:	0802d158 	.word	0x0802d158

0802266c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 802266c:	b580      	push	{r7, lr}
 802266e:	b08e      	sub	sp, #56	@ 0x38
 8022670:	af04      	add	r7, sp, #16
 8022672:	6078      	str	r0, [r7, #4]
 8022674:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8022676:	4b87      	ldr	r3, [pc, #540]	@ (8022894 <icmp_input+0x228>)
 8022678:	689b      	ldr	r3, [r3, #8]
 802267a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 802267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802267e:	781b      	ldrb	r3, [r3, #0]
 8022680:	f003 030f 	and.w	r3, r3, #15
 8022684:	b2db      	uxtb	r3, r3
 8022686:	009b      	lsls	r3, r3, #2
 8022688:	b2db      	uxtb	r3, r3
 802268a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 802268c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 802268e:	2b13      	cmp	r3, #19
 8022690:	f240 80e8 	bls.w	8022864 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8022694:	687b      	ldr	r3, [r7, #4]
 8022696:	895b      	ldrh	r3, [r3, #10]
 8022698:	2b03      	cmp	r3, #3
 802269a:	f240 80e5 	bls.w	8022868 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 802269e:	687b      	ldr	r3, [r7, #4]
 80226a0:	685b      	ldr	r3, [r3, #4]
 80226a2:	781b      	ldrb	r3, [r3, #0]
 80226a4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80226a8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80226ac:	2b00      	cmp	r3, #0
 80226ae:	f000 80d2 	beq.w	8022856 <icmp_input+0x1ea>
 80226b2:	2b08      	cmp	r3, #8
 80226b4:	f040 80d2 	bne.w	802285c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80226b8:	4b77      	ldr	r3, [pc, #476]	@ (8022898 <icmp_input+0x22c>)
 80226ba:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80226bc:	4b75      	ldr	r3, [pc, #468]	@ (8022894 <icmp_input+0x228>)
 80226be:	695b      	ldr	r3, [r3, #20]
 80226c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80226c4:	2be0      	cmp	r3, #224	@ 0xe0
 80226c6:	f000 80d6 	beq.w	8022876 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80226ca:	4b72      	ldr	r3, [pc, #456]	@ (8022894 <icmp_input+0x228>)
 80226cc:	695b      	ldr	r3, [r3, #20]
 80226ce:	4a71      	ldr	r2, [pc, #452]	@ (8022894 <icmp_input+0x228>)
 80226d0:	6812      	ldr	r2, [r2, #0]
 80226d2:	4611      	mov	r1, r2
 80226d4:	4618      	mov	r0, r3
 80226d6:	f000 fc13 	bl	8022f00 <ip4_addr_isbroadcast_u32>
 80226da:	4603      	mov	r3, r0
 80226dc:	2b00      	cmp	r3, #0
 80226de:	f040 80cc 	bne.w	802287a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80226e2:	687b      	ldr	r3, [r7, #4]
 80226e4:	891b      	ldrh	r3, [r3, #8]
 80226e6:	2b07      	cmp	r3, #7
 80226e8:	f240 80c0 	bls.w	802286c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80226ec:	6878      	ldr	r0, [r7, #4]
 80226ee:	f7f6 fb6c 	bl	8018dca <inet_chksum_pbuf>
 80226f2:	4603      	mov	r3, r0
 80226f4:	2b00      	cmp	r3, #0
 80226f6:	d003      	beq.n	8022700 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80226f8:	6878      	ldr	r0, [r7, #4]
 80226fa:	f7f7 ffa5 	bl	801a648 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80226fe:	e0c5      	b.n	802288c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8022700:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022702:	330e      	adds	r3, #14
 8022704:	4619      	mov	r1, r3
 8022706:	6878      	ldr	r0, [r7, #4]
 8022708:	f7f7 fed6 	bl	801a4b8 <pbuf_add_header>
 802270c:	4603      	mov	r3, r0
 802270e:	2b00      	cmp	r3, #0
 8022710:	d04b      	beq.n	80227aa <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8022712:	687b      	ldr	r3, [r7, #4]
 8022714:	891a      	ldrh	r2, [r3, #8]
 8022716:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022718:	4413      	add	r3, r2
 802271a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 802271c:	687b      	ldr	r3, [r7, #4]
 802271e:	891b      	ldrh	r3, [r3, #8]
 8022720:	8b7a      	ldrh	r2, [r7, #26]
 8022722:	429a      	cmp	r2, r3
 8022724:	f0c0 80ab 	bcc.w	802287e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8022728:	8b7b      	ldrh	r3, [r7, #26]
 802272a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 802272e:	4619      	mov	r1, r3
 8022730:	200e      	movs	r0, #14
 8022732:	f7f7 fc73 	bl	801a01c <pbuf_alloc>
 8022736:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8022738:	697b      	ldr	r3, [r7, #20]
 802273a:	2b00      	cmp	r3, #0
 802273c:	f000 80a1 	beq.w	8022882 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8022740:	697b      	ldr	r3, [r7, #20]
 8022742:	895b      	ldrh	r3, [r3, #10]
 8022744:	461a      	mov	r2, r3
 8022746:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022748:	3308      	adds	r3, #8
 802274a:	429a      	cmp	r2, r3
 802274c:	d203      	bcs.n	8022756 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 802274e:	6978      	ldr	r0, [r7, #20]
 8022750:	f7f7 ff7a 	bl	801a648 <pbuf_free>
          goto icmperr;
 8022754:	e096      	b.n	8022884 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8022756:	697b      	ldr	r3, [r7, #20]
 8022758:	685b      	ldr	r3, [r3, #4]
 802275a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 802275c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 802275e:	4618      	mov	r0, r3
 8022760:	f003 f84d 	bl	80257fe <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8022764:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022766:	4619      	mov	r1, r3
 8022768:	6978      	ldr	r0, [r7, #20]
 802276a:	f7f7 feb5 	bl	801a4d8 <pbuf_remove_header>
 802276e:	4603      	mov	r3, r0
 8022770:	2b00      	cmp	r3, #0
 8022772:	d009      	beq.n	8022788 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8022774:	4b49      	ldr	r3, [pc, #292]	@ (802289c <icmp_input+0x230>)
 8022776:	22b6      	movs	r2, #182	@ 0xb6
 8022778:	4949      	ldr	r1, [pc, #292]	@ (80228a0 <icmp_input+0x234>)
 802277a:	484a      	ldr	r0, [pc, #296]	@ (80228a4 <icmp_input+0x238>)
 802277c:	f002 feb2 	bl	80254e4 <iprintf>
          pbuf_free(r);
 8022780:	6978      	ldr	r0, [r7, #20]
 8022782:	f7f7 ff61 	bl	801a648 <pbuf_free>
          goto icmperr;
 8022786:	e07d      	b.n	8022884 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8022788:	6879      	ldr	r1, [r7, #4]
 802278a:	6978      	ldr	r0, [r7, #20]
 802278c:	f7f8 f890 	bl	801a8b0 <pbuf_copy>
 8022790:	4603      	mov	r3, r0
 8022792:	2b00      	cmp	r3, #0
 8022794:	d003      	beq.n	802279e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8022796:	6978      	ldr	r0, [r7, #20]
 8022798:	f7f7 ff56 	bl	801a648 <pbuf_free>
          goto icmperr;
 802279c:	e072      	b.n	8022884 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 802279e:	6878      	ldr	r0, [r7, #4]
 80227a0:	f7f7 ff52 	bl	801a648 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80227a4:	697b      	ldr	r3, [r7, #20]
 80227a6:	607b      	str	r3, [r7, #4]
 80227a8:	e00f      	b.n	80227ca <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80227aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80227ac:	330e      	adds	r3, #14
 80227ae:	4619      	mov	r1, r3
 80227b0:	6878      	ldr	r0, [r7, #4]
 80227b2:	f7f7 fe91 	bl	801a4d8 <pbuf_remove_header>
 80227b6:	4603      	mov	r3, r0
 80227b8:	2b00      	cmp	r3, #0
 80227ba:	d006      	beq.n	80227ca <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80227bc:	4b37      	ldr	r3, [pc, #220]	@ (802289c <icmp_input+0x230>)
 80227be:	22c7      	movs	r2, #199	@ 0xc7
 80227c0:	4939      	ldr	r1, [pc, #228]	@ (80228a8 <icmp_input+0x23c>)
 80227c2:	4838      	ldr	r0, [pc, #224]	@ (80228a4 <icmp_input+0x238>)
 80227c4:	f002 fe8e 	bl	80254e4 <iprintf>
          goto icmperr;
 80227c8:	e05c      	b.n	8022884 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80227ca:	687b      	ldr	r3, [r7, #4]
 80227cc:	685b      	ldr	r3, [r3, #4]
 80227ce:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80227d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80227d2:	4619      	mov	r1, r3
 80227d4:	6878      	ldr	r0, [r7, #4]
 80227d6:	f7f7 fe6f 	bl	801a4b8 <pbuf_add_header>
 80227da:	4603      	mov	r3, r0
 80227dc:	2b00      	cmp	r3, #0
 80227de:	d13c      	bne.n	802285a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80227e0:	687b      	ldr	r3, [r7, #4]
 80227e2:	685b      	ldr	r3, [r3, #4]
 80227e4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80227e6:	69fb      	ldr	r3, [r7, #28]
 80227e8:	681a      	ldr	r2, [r3, #0]
 80227ea:	68fb      	ldr	r3, [r7, #12]
 80227ec:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80227ee:	4b29      	ldr	r3, [pc, #164]	@ (8022894 <icmp_input+0x228>)
 80227f0:	691a      	ldr	r2, [r3, #16]
 80227f2:	68fb      	ldr	r3, [r7, #12]
 80227f4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80227f6:	693b      	ldr	r3, [r7, #16]
 80227f8:	2200      	movs	r2, #0
 80227fa:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80227fc:	693b      	ldr	r3, [r7, #16]
 80227fe:	885b      	ldrh	r3, [r3, #2]
 8022800:	b29b      	uxth	r3, r3
 8022802:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8022806:	4293      	cmp	r3, r2
 8022808:	d907      	bls.n	802281a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 802280a:	693b      	ldr	r3, [r7, #16]
 802280c:	885b      	ldrh	r3, [r3, #2]
 802280e:	b29b      	uxth	r3, r3
 8022810:	3309      	adds	r3, #9
 8022812:	b29a      	uxth	r2, r3
 8022814:	693b      	ldr	r3, [r7, #16]
 8022816:	805a      	strh	r2, [r3, #2]
 8022818:	e006      	b.n	8022828 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 802281a:	693b      	ldr	r3, [r7, #16]
 802281c:	885b      	ldrh	r3, [r3, #2]
 802281e:	b29b      	uxth	r3, r3
 8022820:	3308      	adds	r3, #8
 8022822:	b29a      	uxth	r2, r3
 8022824:	693b      	ldr	r3, [r7, #16]
 8022826:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8022828:	68fb      	ldr	r3, [r7, #12]
 802282a:	22ff      	movs	r2, #255	@ 0xff
 802282c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 802282e:	68fb      	ldr	r3, [r7, #12]
 8022830:	2200      	movs	r2, #0
 8022832:	729a      	strb	r2, [r3, #10]
 8022834:	2200      	movs	r2, #0
 8022836:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8022838:	683b      	ldr	r3, [r7, #0]
 802283a:	9302      	str	r3, [sp, #8]
 802283c:	2301      	movs	r3, #1
 802283e:	9301      	str	r3, [sp, #4]
 8022840:	2300      	movs	r3, #0
 8022842:	9300      	str	r3, [sp, #0]
 8022844:	23ff      	movs	r3, #255	@ 0xff
 8022846:	2200      	movs	r2, #0
 8022848:	69f9      	ldr	r1, [r7, #28]
 802284a:	6878      	ldr	r0, [r7, #4]
 802284c:	f000 fa80 	bl	8022d50 <ip4_output_if>
 8022850:	4603      	mov	r3, r0
 8022852:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8022854:	e001      	b.n	802285a <icmp_input+0x1ee>
      break;
 8022856:	bf00      	nop
 8022858:	e000      	b.n	802285c <icmp_input+0x1f0>
      break;
 802285a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 802285c:	6878      	ldr	r0, [r7, #4]
 802285e:	f7f7 fef3 	bl	801a648 <pbuf_free>
  return;
 8022862:	e013      	b.n	802288c <icmp_input+0x220>
    goto lenerr;
 8022864:	bf00      	nop
 8022866:	e002      	b.n	802286e <icmp_input+0x202>
    goto lenerr;
 8022868:	bf00      	nop
 802286a:	e000      	b.n	802286e <icmp_input+0x202>
        goto lenerr;
 802286c:	bf00      	nop
lenerr:
  pbuf_free(p);
 802286e:	6878      	ldr	r0, [r7, #4]
 8022870:	f7f7 feea 	bl	801a648 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8022874:	e00a      	b.n	802288c <icmp_input+0x220>
        goto icmperr;
 8022876:	bf00      	nop
 8022878:	e004      	b.n	8022884 <icmp_input+0x218>
        goto icmperr;
 802287a:	bf00      	nop
 802287c:	e002      	b.n	8022884 <icmp_input+0x218>
          goto icmperr;
 802287e:	bf00      	nop
 8022880:	e000      	b.n	8022884 <icmp_input+0x218>
          goto icmperr;
 8022882:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8022884:	6878      	ldr	r0, [r7, #4]
 8022886:	f7f7 fedf 	bl	801a648 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 802288a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 802288c:	3728      	adds	r7, #40	@ 0x28
 802288e:	46bd      	mov	sp, r7
 8022890:	bd80      	pop	{r7, pc}
 8022892:	bf00      	nop
 8022894:	24008d64 	.word	0x24008d64
 8022898:	24008d78 	.word	0x24008d78
 802289c:	0802cae8 	.word	0x0802cae8
 80228a0:	0802cb20 	.word	0x0802cb20
 80228a4:	0802cb58 	.word	0x0802cb58
 80228a8:	0802cb80 	.word	0x0802cb80

080228ac <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80228ac:	b580      	push	{r7, lr}
 80228ae:	b082      	sub	sp, #8
 80228b0:	af00      	add	r7, sp, #0
 80228b2:	6078      	str	r0, [r7, #4]
 80228b4:	460b      	mov	r3, r1
 80228b6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80228b8:	78fb      	ldrb	r3, [r7, #3]
 80228ba:	461a      	mov	r2, r3
 80228bc:	2103      	movs	r1, #3
 80228be:	6878      	ldr	r0, [r7, #4]
 80228c0:	f000 f814 	bl	80228ec <icmp_send_response>
}
 80228c4:	bf00      	nop
 80228c6:	3708      	adds	r7, #8
 80228c8:	46bd      	mov	sp, r7
 80228ca:	bd80      	pop	{r7, pc}

080228cc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80228cc:	b580      	push	{r7, lr}
 80228ce:	b082      	sub	sp, #8
 80228d0:	af00      	add	r7, sp, #0
 80228d2:	6078      	str	r0, [r7, #4]
 80228d4:	460b      	mov	r3, r1
 80228d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80228d8:	78fb      	ldrb	r3, [r7, #3]
 80228da:	461a      	mov	r2, r3
 80228dc:	210b      	movs	r1, #11
 80228de:	6878      	ldr	r0, [r7, #4]
 80228e0:	f000 f804 	bl	80228ec <icmp_send_response>
}
 80228e4:	bf00      	nop
 80228e6:	3708      	adds	r7, #8
 80228e8:	46bd      	mov	sp, r7
 80228ea:	bd80      	pop	{r7, pc}

080228ec <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80228ec:	b580      	push	{r7, lr}
 80228ee:	b08c      	sub	sp, #48	@ 0x30
 80228f0:	af04      	add	r7, sp, #16
 80228f2:	6078      	str	r0, [r7, #4]
 80228f4:	460b      	mov	r3, r1
 80228f6:	70fb      	strb	r3, [r7, #3]
 80228f8:	4613      	mov	r3, r2
 80228fa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80228fc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8022900:	2124      	movs	r1, #36	@ 0x24
 8022902:	2022      	movs	r0, #34	@ 0x22
 8022904:	f7f7 fb8a 	bl	801a01c <pbuf_alloc>
 8022908:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 802290a:	69fb      	ldr	r3, [r7, #28]
 802290c:	2b00      	cmp	r3, #0
 802290e:	d056      	beq.n	80229be <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8022910:	69fb      	ldr	r3, [r7, #28]
 8022912:	895b      	ldrh	r3, [r3, #10]
 8022914:	2b23      	cmp	r3, #35	@ 0x23
 8022916:	d806      	bhi.n	8022926 <icmp_send_response+0x3a>
 8022918:	4b2b      	ldr	r3, [pc, #172]	@ (80229c8 <icmp_send_response+0xdc>)
 802291a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 802291e:	492b      	ldr	r1, [pc, #172]	@ (80229cc <icmp_send_response+0xe0>)
 8022920:	482b      	ldr	r0, [pc, #172]	@ (80229d0 <icmp_send_response+0xe4>)
 8022922:	f002 fddf 	bl	80254e4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8022926:	687b      	ldr	r3, [r7, #4]
 8022928:	685b      	ldr	r3, [r3, #4]
 802292a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 802292c:	69fb      	ldr	r3, [r7, #28]
 802292e:	685b      	ldr	r3, [r3, #4]
 8022930:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8022932:	697b      	ldr	r3, [r7, #20]
 8022934:	78fa      	ldrb	r2, [r7, #3]
 8022936:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8022938:	697b      	ldr	r3, [r7, #20]
 802293a:	78ba      	ldrb	r2, [r7, #2]
 802293c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 802293e:	697b      	ldr	r3, [r7, #20]
 8022940:	2200      	movs	r2, #0
 8022942:	711a      	strb	r2, [r3, #4]
 8022944:	2200      	movs	r2, #0
 8022946:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8022948:	697b      	ldr	r3, [r7, #20]
 802294a:	2200      	movs	r2, #0
 802294c:	719a      	strb	r2, [r3, #6]
 802294e:	2200      	movs	r2, #0
 8022950:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8022952:	69fb      	ldr	r3, [r7, #28]
 8022954:	685b      	ldr	r3, [r3, #4]
 8022956:	f103 0008 	add.w	r0, r3, #8
 802295a:	687b      	ldr	r3, [r7, #4]
 802295c:	685b      	ldr	r3, [r3, #4]
 802295e:	221c      	movs	r2, #28
 8022960:	4619      	mov	r1, r3
 8022962:	f002 ff4c 	bl	80257fe <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8022966:	69bb      	ldr	r3, [r7, #24]
 8022968:	68db      	ldr	r3, [r3, #12]
 802296a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 802296c:	f107 030c 	add.w	r3, r7, #12
 8022970:	4618      	mov	r0, r3
 8022972:	f000 f82f 	bl	80229d4 <ip4_route>
 8022976:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8022978:	693b      	ldr	r3, [r7, #16]
 802297a:	2b00      	cmp	r3, #0
 802297c:	d01b      	beq.n	80229b6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 802297e:	697b      	ldr	r3, [r7, #20]
 8022980:	2200      	movs	r2, #0
 8022982:	709a      	strb	r2, [r3, #2]
 8022984:	2200      	movs	r2, #0
 8022986:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8022988:	69fb      	ldr	r3, [r7, #28]
 802298a:	895b      	ldrh	r3, [r3, #10]
 802298c:	4619      	mov	r1, r3
 802298e:	6978      	ldr	r0, [r7, #20]
 8022990:	f7f6 fa09 	bl	8018da6 <inet_chksum>
 8022994:	4603      	mov	r3, r0
 8022996:	461a      	mov	r2, r3
 8022998:	697b      	ldr	r3, [r7, #20]
 802299a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 802299c:	f107 020c 	add.w	r2, r7, #12
 80229a0:	693b      	ldr	r3, [r7, #16]
 80229a2:	9302      	str	r3, [sp, #8]
 80229a4:	2301      	movs	r3, #1
 80229a6:	9301      	str	r3, [sp, #4]
 80229a8:	2300      	movs	r3, #0
 80229aa:	9300      	str	r3, [sp, #0]
 80229ac:	23ff      	movs	r3, #255	@ 0xff
 80229ae:	2100      	movs	r1, #0
 80229b0:	69f8      	ldr	r0, [r7, #28]
 80229b2:	f000 f9cd 	bl	8022d50 <ip4_output_if>
  }
  pbuf_free(q);
 80229b6:	69f8      	ldr	r0, [r7, #28]
 80229b8:	f7f7 fe46 	bl	801a648 <pbuf_free>
 80229bc:	e000      	b.n	80229c0 <icmp_send_response+0xd4>
    return;
 80229be:	bf00      	nop
}
 80229c0:	3720      	adds	r7, #32
 80229c2:	46bd      	mov	sp, r7
 80229c4:	bd80      	pop	{r7, pc}
 80229c6:	bf00      	nop
 80229c8:	0802cae8 	.word	0x0802cae8
 80229cc:	0802cbb4 	.word	0x0802cbb4
 80229d0:	0802cb58 	.word	0x0802cb58

080229d4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80229d4:	b480      	push	{r7}
 80229d6:	b085      	sub	sp, #20
 80229d8:	af00      	add	r7, sp, #0
 80229da:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80229dc:	4b33      	ldr	r3, [pc, #204]	@ (8022aac <ip4_route+0xd8>)
 80229de:	681b      	ldr	r3, [r3, #0]
 80229e0:	60fb      	str	r3, [r7, #12]
 80229e2:	e036      	b.n	8022a52 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80229e4:	68fb      	ldr	r3, [r7, #12]
 80229e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80229ea:	f003 0301 	and.w	r3, r3, #1
 80229ee:	b2db      	uxtb	r3, r3
 80229f0:	2b00      	cmp	r3, #0
 80229f2:	d02b      	beq.n	8022a4c <ip4_route+0x78>
 80229f4:	68fb      	ldr	r3, [r7, #12]
 80229f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80229fa:	089b      	lsrs	r3, r3, #2
 80229fc:	f003 0301 	and.w	r3, r3, #1
 8022a00:	b2db      	uxtb	r3, r3
 8022a02:	2b00      	cmp	r3, #0
 8022a04:	d022      	beq.n	8022a4c <ip4_route+0x78>
 8022a06:	68fb      	ldr	r3, [r7, #12]
 8022a08:	3304      	adds	r3, #4
 8022a0a:	681b      	ldr	r3, [r3, #0]
 8022a0c:	2b00      	cmp	r3, #0
 8022a0e:	d01d      	beq.n	8022a4c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8022a10:	687b      	ldr	r3, [r7, #4]
 8022a12:	681a      	ldr	r2, [r3, #0]
 8022a14:	68fb      	ldr	r3, [r7, #12]
 8022a16:	3304      	adds	r3, #4
 8022a18:	681b      	ldr	r3, [r3, #0]
 8022a1a:	405a      	eors	r2, r3
 8022a1c:	68fb      	ldr	r3, [r7, #12]
 8022a1e:	3308      	adds	r3, #8
 8022a20:	681b      	ldr	r3, [r3, #0]
 8022a22:	4013      	ands	r3, r2
 8022a24:	2b00      	cmp	r3, #0
 8022a26:	d101      	bne.n	8022a2c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8022a28:	68fb      	ldr	r3, [r7, #12]
 8022a2a:	e038      	b.n	8022a9e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8022a2c:	68fb      	ldr	r3, [r7, #12]
 8022a2e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8022a32:	f003 0302 	and.w	r3, r3, #2
 8022a36:	2b00      	cmp	r3, #0
 8022a38:	d108      	bne.n	8022a4c <ip4_route+0x78>
 8022a3a:	687b      	ldr	r3, [r7, #4]
 8022a3c:	681a      	ldr	r2, [r3, #0]
 8022a3e:	68fb      	ldr	r3, [r7, #12]
 8022a40:	330c      	adds	r3, #12
 8022a42:	681b      	ldr	r3, [r3, #0]
 8022a44:	429a      	cmp	r2, r3
 8022a46:	d101      	bne.n	8022a4c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8022a48:	68fb      	ldr	r3, [r7, #12]
 8022a4a:	e028      	b.n	8022a9e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8022a4c:	68fb      	ldr	r3, [r7, #12]
 8022a4e:	681b      	ldr	r3, [r3, #0]
 8022a50:	60fb      	str	r3, [r7, #12]
 8022a52:	68fb      	ldr	r3, [r7, #12]
 8022a54:	2b00      	cmp	r3, #0
 8022a56:	d1c5      	bne.n	80229e4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8022a58:	4b15      	ldr	r3, [pc, #84]	@ (8022ab0 <ip4_route+0xdc>)
 8022a5a:	681b      	ldr	r3, [r3, #0]
 8022a5c:	2b00      	cmp	r3, #0
 8022a5e:	d01a      	beq.n	8022a96 <ip4_route+0xc2>
 8022a60:	4b13      	ldr	r3, [pc, #76]	@ (8022ab0 <ip4_route+0xdc>)
 8022a62:	681b      	ldr	r3, [r3, #0]
 8022a64:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8022a68:	f003 0301 	and.w	r3, r3, #1
 8022a6c:	2b00      	cmp	r3, #0
 8022a6e:	d012      	beq.n	8022a96 <ip4_route+0xc2>
 8022a70:	4b0f      	ldr	r3, [pc, #60]	@ (8022ab0 <ip4_route+0xdc>)
 8022a72:	681b      	ldr	r3, [r3, #0]
 8022a74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8022a78:	f003 0304 	and.w	r3, r3, #4
 8022a7c:	2b00      	cmp	r3, #0
 8022a7e:	d00a      	beq.n	8022a96 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8022a80:	4b0b      	ldr	r3, [pc, #44]	@ (8022ab0 <ip4_route+0xdc>)
 8022a82:	681b      	ldr	r3, [r3, #0]
 8022a84:	3304      	adds	r3, #4
 8022a86:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8022a88:	2b00      	cmp	r3, #0
 8022a8a:	d004      	beq.n	8022a96 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8022a8c:	687b      	ldr	r3, [r7, #4]
 8022a8e:	681b      	ldr	r3, [r3, #0]
 8022a90:	b2db      	uxtb	r3, r3
 8022a92:	2b7f      	cmp	r3, #127	@ 0x7f
 8022a94:	d101      	bne.n	8022a9a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8022a96:	2300      	movs	r3, #0
 8022a98:	e001      	b.n	8022a9e <ip4_route+0xca>
  }

  return netif_default;
 8022a9a:	4b05      	ldr	r3, [pc, #20]	@ (8022ab0 <ip4_route+0xdc>)
 8022a9c:	681b      	ldr	r3, [r3, #0]
}
 8022a9e:	4618      	mov	r0, r3
 8022aa0:	3714      	adds	r7, #20
 8022aa2:	46bd      	mov	sp, r7
 8022aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022aa8:	4770      	bx	lr
 8022aaa:	bf00      	nop
 8022aac:	2400be58 	.word	0x2400be58
 8022ab0:	2400be5c 	.word	0x2400be5c

08022ab4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8022ab4:	b580      	push	{r7, lr}
 8022ab6:	b082      	sub	sp, #8
 8022ab8:	af00      	add	r7, sp, #0
 8022aba:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8022abc:	687b      	ldr	r3, [r7, #4]
 8022abe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8022ac2:	f003 0301 	and.w	r3, r3, #1
 8022ac6:	b2db      	uxtb	r3, r3
 8022ac8:	2b00      	cmp	r3, #0
 8022aca:	d016      	beq.n	8022afa <ip4_input_accept+0x46>
 8022acc:	687b      	ldr	r3, [r7, #4]
 8022ace:	3304      	adds	r3, #4
 8022ad0:	681b      	ldr	r3, [r3, #0]
 8022ad2:	2b00      	cmp	r3, #0
 8022ad4:	d011      	beq.n	8022afa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8022b04 <ip4_input_accept+0x50>)
 8022ad8:	695a      	ldr	r2, [r3, #20]
 8022ada:	687b      	ldr	r3, [r7, #4]
 8022adc:	3304      	adds	r3, #4
 8022ade:	681b      	ldr	r3, [r3, #0]
 8022ae0:	429a      	cmp	r2, r3
 8022ae2:	d008      	beq.n	8022af6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8022ae4:	4b07      	ldr	r3, [pc, #28]	@ (8022b04 <ip4_input_accept+0x50>)
 8022ae6:	695b      	ldr	r3, [r3, #20]
 8022ae8:	6879      	ldr	r1, [r7, #4]
 8022aea:	4618      	mov	r0, r3
 8022aec:	f000 fa08 	bl	8022f00 <ip4_addr_isbroadcast_u32>
 8022af0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022af2:	2b00      	cmp	r3, #0
 8022af4:	d001      	beq.n	8022afa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8022af6:	2301      	movs	r3, #1
 8022af8:	e000      	b.n	8022afc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8022afa:	2300      	movs	r3, #0
}
 8022afc:	4618      	mov	r0, r3
 8022afe:	3708      	adds	r7, #8
 8022b00:	46bd      	mov	sp, r7
 8022b02:	bd80      	pop	{r7, pc}
 8022b04:	24008d64 	.word	0x24008d64

08022b08 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8022b08:	b580      	push	{r7, lr}
 8022b0a:	b086      	sub	sp, #24
 8022b0c:	af00      	add	r7, sp, #0
 8022b0e:	6078      	str	r0, [r7, #4]
 8022b10:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8022b12:	687b      	ldr	r3, [r7, #4]
 8022b14:	685b      	ldr	r3, [r3, #4]
 8022b16:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8022b18:	697b      	ldr	r3, [r7, #20]
 8022b1a:	781b      	ldrb	r3, [r3, #0]
 8022b1c:	091b      	lsrs	r3, r3, #4
 8022b1e:	b2db      	uxtb	r3, r3
 8022b20:	2b04      	cmp	r3, #4
 8022b22:	d004      	beq.n	8022b2e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8022b24:	6878      	ldr	r0, [r7, #4]
 8022b26:	f7f7 fd8f 	bl	801a648 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8022b2a:	2300      	movs	r3, #0
 8022b2c:	e107      	b.n	8022d3e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8022b2e:	697b      	ldr	r3, [r7, #20]
 8022b30:	781b      	ldrb	r3, [r3, #0]
 8022b32:	f003 030f 	and.w	r3, r3, #15
 8022b36:	b2db      	uxtb	r3, r3
 8022b38:	009b      	lsls	r3, r3, #2
 8022b3a:	b2db      	uxtb	r3, r3
 8022b3c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8022b3e:	697b      	ldr	r3, [r7, #20]
 8022b40:	885b      	ldrh	r3, [r3, #2]
 8022b42:	b29b      	uxth	r3, r3
 8022b44:	4618      	mov	r0, r3
 8022b46:	f7f6 f8a3 	bl	8018c90 <lwip_htons>
 8022b4a:	4603      	mov	r3, r0
 8022b4c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8022b4e:	687b      	ldr	r3, [r7, #4]
 8022b50:	891b      	ldrh	r3, [r3, #8]
 8022b52:	89ba      	ldrh	r2, [r7, #12]
 8022b54:	429a      	cmp	r2, r3
 8022b56:	d204      	bcs.n	8022b62 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8022b58:	89bb      	ldrh	r3, [r7, #12]
 8022b5a:	4619      	mov	r1, r3
 8022b5c:	6878      	ldr	r0, [r7, #4]
 8022b5e:	f7f7 fbbb 	bl	801a2d8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8022b62:	687b      	ldr	r3, [r7, #4]
 8022b64:	895b      	ldrh	r3, [r3, #10]
 8022b66:	89fa      	ldrh	r2, [r7, #14]
 8022b68:	429a      	cmp	r2, r3
 8022b6a:	d807      	bhi.n	8022b7c <ip4_input+0x74>
 8022b6c:	687b      	ldr	r3, [r7, #4]
 8022b6e:	891b      	ldrh	r3, [r3, #8]
 8022b70:	89ba      	ldrh	r2, [r7, #12]
 8022b72:	429a      	cmp	r2, r3
 8022b74:	d802      	bhi.n	8022b7c <ip4_input+0x74>
 8022b76:	89fb      	ldrh	r3, [r7, #14]
 8022b78:	2b13      	cmp	r3, #19
 8022b7a:	d804      	bhi.n	8022b86 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8022b7c:	6878      	ldr	r0, [r7, #4]
 8022b7e:	f7f7 fd63 	bl	801a648 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8022b82:	2300      	movs	r3, #0
 8022b84:	e0db      	b.n	8022d3e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8022b86:	697b      	ldr	r3, [r7, #20]
 8022b88:	691b      	ldr	r3, [r3, #16]
 8022b8a:	4a6f      	ldr	r2, [pc, #444]	@ (8022d48 <ip4_input+0x240>)
 8022b8c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8022b8e:	697b      	ldr	r3, [r7, #20]
 8022b90:	68db      	ldr	r3, [r3, #12]
 8022b92:	4a6d      	ldr	r2, [pc, #436]	@ (8022d48 <ip4_input+0x240>)
 8022b94:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022b96:	4b6c      	ldr	r3, [pc, #432]	@ (8022d48 <ip4_input+0x240>)
 8022b98:	695b      	ldr	r3, [r3, #20]
 8022b9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8022b9e:	2be0      	cmp	r3, #224	@ 0xe0
 8022ba0:	d112      	bne.n	8022bc8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8022ba2:	683b      	ldr	r3, [r7, #0]
 8022ba4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8022ba8:	f003 0301 	and.w	r3, r3, #1
 8022bac:	b2db      	uxtb	r3, r3
 8022bae:	2b00      	cmp	r3, #0
 8022bb0:	d007      	beq.n	8022bc2 <ip4_input+0xba>
 8022bb2:	683b      	ldr	r3, [r7, #0]
 8022bb4:	3304      	adds	r3, #4
 8022bb6:	681b      	ldr	r3, [r3, #0]
 8022bb8:	2b00      	cmp	r3, #0
 8022bba:	d002      	beq.n	8022bc2 <ip4_input+0xba>
      netif = inp;
 8022bbc:	683b      	ldr	r3, [r7, #0]
 8022bbe:	613b      	str	r3, [r7, #16]
 8022bc0:	e02a      	b.n	8022c18 <ip4_input+0x110>
    } else {
      netif = NULL;
 8022bc2:	2300      	movs	r3, #0
 8022bc4:	613b      	str	r3, [r7, #16]
 8022bc6:	e027      	b.n	8022c18 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8022bc8:	6838      	ldr	r0, [r7, #0]
 8022bca:	f7ff ff73 	bl	8022ab4 <ip4_input_accept>
 8022bce:	4603      	mov	r3, r0
 8022bd0:	2b00      	cmp	r3, #0
 8022bd2:	d002      	beq.n	8022bda <ip4_input+0xd2>
      netif = inp;
 8022bd4:	683b      	ldr	r3, [r7, #0]
 8022bd6:	613b      	str	r3, [r7, #16]
 8022bd8:	e01e      	b.n	8022c18 <ip4_input+0x110>
    } else {
      netif = NULL;
 8022bda:	2300      	movs	r3, #0
 8022bdc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8022bde:	4b5a      	ldr	r3, [pc, #360]	@ (8022d48 <ip4_input+0x240>)
 8022be0:	695b      	ldr	r3, [r3, #20]
 8022be2:	b2db      	uxtb	r3, r3
 8022be4:	2b7f      	cmp	r3, #127	@ 0x7f
 8022be6:	d017      	beq.n	8022c18 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8022be8:	4b58      	ldr	r3, [pc, #352]	@ (8022d4c <ip4_input+0x244>)
 8022bea:	681b      	ldr	r3, [r3, #0]
 8022bec:	613b      	str	r3, [r7, #16]
 8022bee:	e00e      	b.n	8022c0e <ip4_input+0x106>
          if (netif == inp) {
 8022bf0:	693a      	ldr	r2, [r7, #16]
 8022bf2:	683b      	ldr	r3, [r7, #0]
 8022bf4:	429a      	cmp	r2, r3
 8022bf6:	d006      	beq.n	8022c06 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8022bf8:	6938      	ldr	r0, [r7, #16]
 8022bfa:	f7ff ff5b 	bl	8022ab4 <ip4_input_accept>
 8022bfe:	4603      	mov	r3, r0
 8022c00:	2b00      	cmp	r3, #0
 8022c02:	d108      	bne.n	8022c16 <ip4_input+0x10e>
 8022c04:	e000      	b.n	8022c08 <ip4_input+0x100>
            continue;
 8022c06:	bf00      	nop
        NETIF_FOREACH(netif) {
 8022c08:	693b      	ldr	r3, [r7, #16]
 8022c0a:	681b      	ldr	r3, [r3, #0]
 8022c0c:	613b      	str	r3, [r7, #16]
 8022c0e:	693b      	ldr	r3, [r7, #16]
 8022c10:	2b00      	cmp	r3, #0
 8022c12:	d1ed      	bne.n	8022bf0 <ip4_input+0xe8>
 8022c14:	e000      	b.n	8022c18 <ip4_input+0x110>
            break;
 8022c16:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8022c18:	4b4b      	ldr	r3, [pc, #300]	@ (8022d48 <ip4_input+0x240>)
 8022c1a:	691b      	ldr	r3, [r3, #16]
 8022c1c:	6839      	ldr	r1, [r7, #0]
 8022c1e:	4618      	mov	r0, r3
 8022c20:	f000 f96e 	bl	8022f00 <ip4_addr_isbroadcast_u32>
 8022c24:	4603      	mov	r3, r0
 8022c26:	2b00      	cmp	r3, #0
 8022c28:	d105      	bne.n	8022c36 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8022c2a:	4b47      	ldr	r3, [pc, #284]	@ (8022d48 <ip4_input+0x240>)
 8022c2c:	691b      	ldr	r3, [r3, #16]
 8022c2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8022c32:	2be0      	cmp	r3, #224	@ 0xe0
 8022c34:	d104      	bne.n	8022c40 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8022c36:	6878      	ldr	r0, [r7, #4]
 8022c38:	f7f7 fd06 	bl	801a648 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8022c3c:	2300      	movs	r3, #0
 8022c3e:	e07e      	b.n	8022d3e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8022c40:	693b      	ldr	r3, [r7, #16]
 8022c42:	2b00      	cmp	r3, #0
 8022c44:	d104      	bne.n	8022c50 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8022c46:	6878      	ldr	r0, [r7, #4]
 8022c48:	f7f7 fcfe 	bl	801a648 <pbuf_free>
    return ERR_OK;
 8022c4c:	2300      	movs	r3, #0
 8022c4e:	e076      	b.n	8022d3e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8022c50:	697b      	ldr	r3, [r7, #20]
 8022c52:	88db      	ldrh	r3, [r3, #6]
 8022c54:	b29b      	uxth	r3, r3
 8022c56:	461a      	mov	r2, r3
 8022c58:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8022c5c:	4013      	ands	r3, r2
 8022c5e:	2b00      	cmp	r3, #0
 8022c60:	d00b      	beq.n	8022c7a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8022c62:	6878      	ldr	r0, [r7, #4]
 8022c64:	f000 fdd0 	bl	8023808 <ip4_reass>
 8022c68:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8022c6a:	687b      	ldr	r3, [r7, #4]
 8022c6c:	2b00      	cmp	r3, #0
 8022c6e:	d101      	bne.n	8022c74 <ip4_input+0x16c>
      return ERR_OK;
 8022c70:	2300      	movs	r3, #0
 8022c72:	e064      	b.n	8022d3e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8022c74:	687b      	ldr	r3, [r7, #4]
 8022c76:	685b      	ldr	r3, [r3, #4]
 8022c78:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8022c7a:	4a33      	ldr	r2, [pc, #204]	@ (8022d48 <ip4_input+0x240>)
 8022c7c:	693b      	ldr	r3, [r7, #16]
 8022c7e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8022c80:	4a31      	ldr	r2, [pc, #196]	@ (8022d48 <ip4_input+0x240>)
 8022c82:	683b      	ldr	r3, [r7, #0]
 8022c84:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8022c86:	4a30      	ldr	r2, [pc, #192]	@ (8022d48 <ip4_input+0x240>)
 8022c88:	697b      	ldr	r3, [r7, #20]
 8022c8a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8022c8c:	697b      	ldr	r3, [r7, #20]
 8022c8e:	781b      	ldrb	r3, [r3, #0]
 8022c90:	f003 030f 	and.w	r3, r3, #15
 8022c94:	b2db      	uxtb	r3, r3
 8022c96:	009b      	lsls	r3, r3, #2
 8022c98:	b2db      	uxtb	r3, r3
 8022c9a:	461a      	mov	r2, r3
 8022c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8022d48 <ip4_input+0x240>)
 8022c9e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8022ca0:	89fb      	ldrh	r3, [r7, #14]
 8022ca2:	4619      	mov	r1, r3
 8022ca4:	6878      	ldr	r0, [r7, #4]
 8022ca6:	f7f7 fc17 	bl	801a4d8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8022caa:	697b      	ldr	r3, [r7, #20]
 8022cac:	7a5b      	ldrb	r3, [r3, #9]
 8022cae:	2b11      	cmp	r3, #17
 8022cb0:	d006      	beq.n	8022cc0 <ip4_input+0x1b8>
 8022cb2:	2b11      	cmp	r3, #17
 8022cb4:	dc13      	bgt.n	8022cde <ip4_input+0x1d6>
 8022cb6:	2b01      	cmp	r3, #1
 8022cb8:	d00c      	beq.n	8022cd4 <ip4_input+0x1cc>
 8022cba:	2b06      	cmp	r3, #6
 8022cbc:	d005      	beq.n	8022cca <ip4_input+0x1c2>
 8022cbe:	e00e      	b.n	8022cde <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8022cc0:	6839      	ldr	r1, [r7, #0]
 8022cc2:	6878      	ldr	r0, [r7, #4]
 8022cc4:	f7fe f94a 	bl	8020f5c <udp_input>
        break;
 8022cc8:	e026      	b.n	8022d18 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8022cca:	6839      	ldr	r1, [r7, #0]
 8022ccc:	6878      	ldr	r0, [r7, #4]
 8022cce:	f7f9 fd09 	bl	801c6e4 <tcp_input>
        break;
 8022cd2:	e021      	b.n	8022d18 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8022cd4:	6839      	ldr	r1, [r7, #0]
 8022cd6:	6878      	ldr	r0, [r7, #4]
 8022cd8:	f7ff fcc8 	bl	802266c <icmp_input>
        break;
 8022cdc:	e01c      	b.n	8022d18 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8022cde:	4b1a      	ldr	r3, [pc, #104]	@ (8022d48 <ip4_input+0x240>)
 8022ce0:	695b      	ldr	r3, [r3, #20]
 8022ce2:	6939      	ldr	r1, [r7, #16]
 8022ce4:	4618      	mov	r0, r3
 8022ce6:	f000 f90b 	bl	8022f00 <ip4_addr_isbroadcast_u32>
 8022cea:	4603      	mov	r3, r0
 8022cec:	2b00      	cmp	r3, #0
 8022cee:	d10f      	bne.n	8022d10 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022cf0:	4b15      	ldr	r3, [pc, #84]	@ (8022d48 <ip4_input+0x240>)
 8022cf2:	695b      	ldr	r3, [r3, #20]
 8022cf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8022cf8:	2be0      	cmp	r3, #224	@ 0xe0
 8022cfa:	d009      	beq.n	8022d10 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8022cfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8022d00:	4619      	mov	r1, r3
 8022d02:	6878      	ldr	r0, [r7, #4]
 8022d04:	f7f7 fc5b 	bl	801a5be <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8022d08:	2102      	movs	r1, #2
 8022d0a:	6878      	ldr	r0, [r7, #4]
 8022d0c:	f7ff fdce 	bl	80228ac <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8022d10:	6878      	ldr	r0, [r7, #4]
 8022d12:	f7f7 fc99 	bl	801a648 <pbuf_free>
        break;
 8022d16:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8022d18:	4b0b      	ldr	r3, [pc, #44]	@ (8022d48 <ip4_input+0x240>)
 8022d1a:	2200      	movs	r2, #0
 8022d1c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8022d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8022d48 <ip4_input+0x240>)
 8022d20:	2200      	movs	r2, #0
 8022d22:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8022d24:	4b08      	ldr	r3, [pc, #32]	@ (8022d48 <ip4_input+0x240>)
 8022d26:	2200      	movs	r2, #0
 8022d28:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8022d2a:	4b07      	ldr	r3, [pc, #28]	@ (8022d48 <ip4_input+0x240>)
 8022d2c:	2200      	movs	r2, #0
 8022d2e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8022d30:	4b05      	ldr	r3, [pc, #20]	@ (8022d48 <ip4_input+0x240>)
 8022d32:	2200      	movs	r2, #0
 8022d34:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8022d36:	4b04      	ldr	r3, [pc, #16]	@ (8022d48 <ip4_input+0x240>)
 8022d38:	2200      	movs	r2, #0
 8022d3a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8022d3c:	2300      	movs	r3, #0
}
 8022d3e:	4618      	mov	r0, r3
 8022d40:	3718      	adds	r7, #24
 8022d42:	46bd      	mov	sp, r7
 8022d44:	bd80      	pop	{r7, pc}
 8022d46:	bf00      	nop
 8022d48:	24008d64 	.word	0x24008d64
 8022d4c:	2400be58 	.word	0x2400be58

08022d50 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8022d50:	b580      	push	{r7, lr}
 8022d52:	b08a      	sub	sp, #40	@ 0x28
 8022d54:	af04      	add	r7, sp, #16
 8022d56:	60f8      	str	r0, [r7, #12]
 8022d58:	60b9      	str	r1, [r7, #8]
 8022d5a:	607a      	str	r2, [r7, #4]
 8022d5c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8022d5e:	68bb      	ldr	r3, [r7, #8]
 8022d60:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8022d62:	687b      	ldr	r3, [r7, #4]
 8022d64:	2b00      	cmp	r3, #0
 8022d66:	d009      	beq.n	8022d7c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8022d68:	68bb      	ldr	r3, [r7, #8]
 8022d6a:	2b00      	cmp	r3, #0
 8022d6c:	d003      	beq.n	8022d76 <ip4_output_if+0x26>
 8022d6e:	68bb      	ldr	r3, [r7, #8]
 8022d70:	681b      	ldr	r3, [r3, #0]
 8022d72:	2b00      	cmp	r3, #0
 8022d74:	d102      	bne.n	8022d7c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8022d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022d78:	3304      	adds	r3, #4
 8022d7a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8022d7c:	78fa      	ldrb	r2, [r7, #3]
 8022d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022d80:	9302      	str	r3, [sp, #8]
 8022d82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8022d86:	9301      	str	r3, [sp, #4]
 8022d88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8022d8c:	9300      	str	r3, [sp, #0]
 8022d8e:	4613      	mov	r3, r2
 8022d90:	687a      	ldr	r2, [r7, #4]
 8022d92:	6979      	ldr	r1, [r7, #20]
 8022d94:	68f8      	ldr	r0, [r7, #12]
 8022d96:	f000 f805 	bl	8022da4 <ip4_output_if_src>
 8022d9a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8022d9c:	4618      	mov	r0, r3
 8022d9e:	3718      	adds	r7, #24
 8022da0:	46bd      	mov	sp, r7
 8022da2:	bd80      	pop	{r7, pc}

08022da4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8022da4:	b580      	push	{r7, lr}
 8022da6:	b088      	sub	sp, #32
 8022da8:	af00      	add	r7, sp, #0
 8022daa:	60f8      	str	r0, [r7, #12]
 8022dac:	60b9      	str	r1, [r7, #8]
 8022dae:	607a      	str	r2, [r7, #4]
 8022db0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8022db2:	68fb      	ldr	r3, [r7, #12]
 8022db4:	7b9b      	ldrb	r3, [r3, #14]
 8022db6:	2b01      	cmp	r3, #1
 8022db8:	d006      	beq.n	8022dc8 <ip4_output_if_src+0x24>
 8022dba:	4b4b      	ldr	r3, [pc, #300]	@ (8022ee8 <ip4_output_if_src+0x144>)
 8022dbc:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8022dc0:	494a      	ldr	r1, [pc, #296]	@ (8022eec <ip4_output_if_src+0x148>)
 8022dc2:	484b      	ldr	r0, [pc, #300]	@ (8022ef0 <ip4_output_if_src+0x14c>)
 8022dc4:	f002 fb8e 	bl	80254e4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8022dc8:	687b      	ldr	r3, [r7, #4]
 8022dca:	2b00      	cmp	r3, #0
 8022dcc:	d060      	beq.n	8022e90 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8022dce:	2314      	movs	r3, #20
 8022dd0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8022dd2:	2114      	movs	r1, #20
 8022dd4:	68f8      	ldr	r0, [r7, #12]
 8022dd6:	f7f7 fb6f 	bl	801a4b8 <pbuf_add_header>
 8022dda:	4603      	mov	r3, r0
 8022ddc:	2b00      	cmp	r3, #0
 8022dde:	d002      	beq.n	8022de6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8022de0:	f06f 0301 	mvn.w	r3, #1
 8022de4:	e07c      	b.n	8022ee0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8022de6:	68fb      	ldr	r3, [r7, #12]
 8022de8:	685b      	ldr	r3, [r3, #4]
 8022dea:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8022dec:	68fb      	ldr	r3, [r7, #12]
 8022dee:	895b      	ldrh	r3, [r3, #10]
 8022df0:	2b13      	cmp	r3, #19
 8022df2:	d806      	bhi.n	8022e02 <ip4_output_if_src+0x5e>
 8022df4:	4b3c      	ldr	r3, [pc, #240]	@ (8022ee8 <ip4_output_if_src+0x144>)
 8022df6:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8022dfa:	493e      	ldr	r1, [pc, #248]	@ (8022ef4 <ip4_output_if_src+0x150>)
 8022dfc:	483c      	ldr	r0, [pc, #240]	@ (8022ef0 <ip4_output_if_src+0x14c>)
 8022dfe:	f002 fb71 	bl	80254e4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8022e02:	69fb      	ldr	r3, [r7, #28]
 8022e04:	78fa      	ldrb	r2, [r7, #3]
 8022e06:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8022e08:	69fb      	ldr	r3, [r7, #28]
 8022e0a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8022e0e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8022e10:	687b      	ldr	r3, [r7, #4]
 8022e12:	681a      	ldr	r2, [r3, #0]
 8022e14:	69fb      	ldr	r3, [r7, #28]
 8022e16:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8022e18:	8b7b      	ldrh	r3, [r7, #26]
 8022e1a:	089b      	lsrs	r3, r3, #2
 8022e1c:	b29b      	uxth	r3, r3
 8022e1e:	b2db      	uxtb	r3, r3
 8022e20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022e24:	b2da      	uxtb	r2, r3
 8022e26:	69fb      	ldr	r3, [r7, #28]
 8022e28:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8022e2a:	69fb      	ldr	r3, [r7, #28]
 8022e2c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8022e30:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8022e32:	68fb      	ldr	r3, [r7, #12]
 8022e34:	891b      	ldrh	r3, [r3, #8]
 8022e36:	4618      	mov	r0, r3
 8022e38:	f7f5 ff2a 	bl	8018c90 <lwip_htons>
 8022e3c:	4603      	mov	r3, r0
 8022e3e:	461a      	mov	r2, r3
 8022e40:	69fb      	ldr	r3, [r7, #28]
 8022e42:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8022e44:	69fb      	ldr	r3, [r7, #28]
 8022e46:	2200      	movs	r2, #0
 8022e48:	719a      	strb	r2, [r3, #6]
 8022e4a:	2200      	movs	r2, #0
 8022e4c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8022e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8022ef8 <ip4_output_if_src+0x154>)
 8022e50:	881b      	ldrh	r3, [r3, #0]
 8022e52:	4618      	mov	r0, r3
 8022e54:	f7f5 ff1c 	bl	8018c90 <lwip_htons>
 8022e58:	4603      	mov	r3, r0
 8022e5a:	461a      	mov	r2, r3
 8022e5c:	69fb      	ldr	r3, [r7, #28]
 8022e5e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8022e60:	4b25      	ldr	r3, [pc, #148]	@ (8022ef8 <ip4_output_if_src+0x154>)
 8022e62:	881b      	ldrh	r3, [r3, #0]
 8022e64:	3301      	adds	r3, #1
 8022e66:	b29a      	uxth	r2, r3
 8022e68:	4b23      	ldr	r3, [pc, #140]	@ (8022ef8 <ip4_output_if_src+0x154>)
 8022e6a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8022e6c:	68bb      	ldr	r3, [r7, #8]
 8022e6e:	2b00      	cmp	r3, #0
 8022e70:	d104      	bne.n	8022e7c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8022e72:	4b22      	ldr	r3, [pc, #136]	@ (8022efc <ip4_output_if_src+0x158>)
 8022e74:	681a      	ldr	r2, [r3, #0]
 8022e76:	69fb      	ldr	r3, [r7, #28]
 8022e78:	60da      	str	r2, [r3, #12]
 8022e7a:	e003      	b.n	8022e84 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8022e7c:	68bb      	ldr	r3, [r7, #8]
 8022e7e:	681a      	ldr	r2, [r3, #0]
 8022e80:	69fb      	ldr	r3, [r7, #28]
 8022e82:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8022e84:	69fb      	ldr	r3, [r7, #28]
 8022e86:	2200      	movs	r2, #0
 8022e88:	729a      	strb	r2, [r3, #10]
 8022e8a:	2200      	movs	r2, #0
 8022e8c:	72da      	strb	r2, [r3, #11]
 8022e8e:	e00f      	b.n	8022eb0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8022e90:	68fb      	ldr	r3, [r7, #12]
 8022e92:	895b      	ldrh	r3, [r3, #10]
 8022e94:	2b13      	cmp	r3, #19
 8022e96:	d802      	bhi.n	8022e9e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8022e98:	f06f 0301 	mvn.w	r3, #1
 8022e9c:	e020      	b.n	8022ee0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8022e9e:	68fb      	ldr	r3, [r7, #12]
 8022ea0:	685b      	ldr	r3, [r3, #4]
 8022ea2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8022ea4:	69fb      	ldr	r3, [r7, #28]
 8022ea6:	691b      	ldr	r3, [r3, #16]
 8022ea8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8022eaa:	f107 0314 	add.w	r3, r7, #20
 8022eae:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8022eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022eb2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8022eb4:	2b00      	cmp	r3, #0
 8022eb6:	d00c      	beq.n	8022ed2 <ip4_output_if_src+0x12e>
 8022eb8:	68fb      	ldr	r3, [r7, #12]
 8022eba:	891a      	ldrh	r2, [r3, #8]
 8022ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022ebe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8022ec0:	429a      	cmp	r2, r3
 8022ec2:	d906      	bls.n	8022ed2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8022ec4:	687a      	ldr	r2, [r7, #4]
 8022ec6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8022ec8:	68f8      	ldr	r0, [r7, #12]
 8022eca:	f000 fe91 	bl	8023bf0 <ip4_frag>
 8022ece:	4603      	mov	r3, r0
 8022ed0:	e006      	b.n	8022ee0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8022ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022ed4:	695b      	ldr	r3, [r3, #20]
 8022ed6:	687a      	ldr	r2, [r7, #4]
 8022ed8:	68f9      	ldr	r1, [r7, #12]
 8022eda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8022edc:	4798      	blx	r3
 8022ede:	4603      	mov	r3, r0
}
 8022ee0:	4618      	mov	r0, r3
 8022ee2:	3720      	adds	r7, #32
 8022ee4:	46bd      	mov	sp, r7
 8022ee6:	bd80      	pop	{r7, pc}
 8022ee8:	0802cbe0 	.word	0x0802cbe0
 8022eec:	0802cc14 	.word	0x0802cc14
 8022ef0:	0802cc20 	.word	0x0802cc20
 8022ef4:	0802cc48 	.word	0x0802cc48
 8022ef8:	2400bfb6 	.word	0x2400bfb6
 8022efc:	0802d154 	.word	0x0802d154

08022f00 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8022f00:	b480      	push	{r7}
 8022f02:	b085      	sub	sp, #20
 8022f04:	af00      	add	r7, sp, #0
 8022f06:	6078      	str	r0, [r7, #4]
 8022f08:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8022f0a:	687b      	ldr	r3, [r7, #4]
 8022f0c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8022f0e:	687b      	ldr	r3, [r7, #4]
 8022f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022f14:	d002      	beq.n	8022f1c <ip4_addr_isbroadcast_u32+0x1c>
 8022f16:	687b      	ldr	r3, [r7, #4]
 8022f18:	2b00      	cmp	r3, #0
 8022f1a:	d101      	bne.n	8022f20 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8022f1c:	2301      	movs	r3, #1
 8022f1e:	e02a      	b.n	8022f76 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8022f20:	683b      	ldr	r3, [r7, #0]
 8022f22:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8022f26:	f003 0302 	and.w	r3, r3, #2
 8022f2a:	2b00      	cmp	r3, #0
 8022f2c:	d101      	bne.n	8022f32 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8022f2e:	2300      	movs	r3, #0
 8022f30:	e021      	b.n	8022f76 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8022f32:	683b      	ldr	r3, [r7, #0]
 8022f34:	3304      	adds	r3, #4
 8022f36:	681b      	ldr	r3, [r3, #0]
 8022f38:	687a      	ldr	r2, [r7, #4]
 8022f3a:	429a      	cmp	r2, r3
 8022f3c:	d101      	bne.n	8022f42 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8022f3e:	2300      	movs	r3, #0
 8022f40:	e019      	b.n	8022f76 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8022f42:	68fa      	ldr	r2, [r7, #12]
 8022f44:	683b      	ldr	r3, [r7, #0]
 8022f46:	3304      	adds	r3, #4
 8022f48:	681b      	ldr	r3, [r3, #0]
 8022f4a:	405a      	eors	r2, r3
 8022f4c:	683b      	ldr	r3, [r7, #0]
 8022f4e:	3308      	adds	r3, #8
 8022f50:	681b      	ldr	r3, [r3, #0]
 8022f52:	4013      	ands	r3, r2
 8022f54:	2b00      	cmp	r3, #0
 8022f56:	d10d      	bne.n	8022f74 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8022f58:	683b      	ldr	r3, [r7, #0]
 8022f5a:	3308      	adds	r3, #8
 8022f5c:	681b      	ldr	r3, [r3, #0]
 8022f5e:	43da      	mvns	r2, r3
 8022f60:	687b      	ldr	r3, [r7, #4]
 8022f62:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8022f64:	683b      	ldr	r3, [r7, #0]
 8022f66:	3308      	adds	r3, #8
 8022f68:	681b      	ldr	r3, [r3, #0]
 8022f6a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8022f6c:	429a      	cmp	r2, r3
 8022f6e:	d101      	bne.n	8022f74 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8022f70:	2301      	movs	r3, #1
 8022f72:	e000      	b.n	8022f76 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8022f74:	2300      	movs	r3, #0
  }
}
 8022f76:	4618      	mov	r0, r3
 8022f78:	3714      	adds	r7, #20
 8022f7a:	46bd      	mov	sp, r7
 8022f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f80:	4770      	bx	lr

08022f82 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 8022f82:	b580      	push	{r7, lr}
 8022f84:	b084      	sub	sp, #16
 8022f86:	af00      	add	r7, sp, #0
 8022f88:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 8022f8a:	f107 030c 	add.w	r3, r7, #12
 8022f8e:	4619      	mov	r1, r3
 8022f90:	6878      	ldr	r0, [r7, #4]
 8022f92:	f000 f80b 	bl	8022fac <ip4addr_aton>
 8022f96:	4603      	mov	r3, r0
 8022f98:	2b00      	cmp	r3, #0
 8022f9a:	d001      	beq.n	8022fa0 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 8022f9c:	68fb      	ldr	r3, [r7, #12]
 8022f9e:	e001      	b.n	8022fa4 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 8022fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8022fa4:	4618      	mov	r0, r3
 8022fa6:	3710      	adds	r7, #16
 8022fa8:	46bd      	mov	sp, r7
 8022faa:	bd80      	pop	{r7, pc}

08022fac <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8022fac:	b580      	push	{r7, lr}
 8022fae:	b08a      	sub	sp, #40	@ 0x28
 8022fb0:	af00      	add	r7, sp, #0
 8022fb2:	6078      	str	r0, [r7, #4]
 8022fb4:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8022fb6:	f107 030c 	add.w	r3, r7, #12
 8022fba:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8022fbc:	687b      	ldr	r3, [r7, #4]
 8022fbe:	781b      	ldrb	r3, [r3, #0]
 8022fc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8022fc4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022fc8:	3301      	adds	r3, #1
 8022fca:	4a89      	ldr	r2, [pc, #548]	@ (80231f0 <ip4addr_aton+0x244>)
 8022fcc:	4413      	add	r3, r2
 8022fce:	781b      	ldrb	r3, [r3, #0]
 8022fd0:	f003 0304 	and.w	r3, r3, #4
 8022fd4:	2b00      	cmp	r3, #0
 8022fd6:	d101      	bne.n	8022fdc <ip4addr_aton+0x30>
      return 0;
 8022fd8:	2300      	movs	r3, #0
 8022fda:	e105      	b.n	80231e8 <ip4addr_aton+0x23c>
    }
    val = 0;
 8022fdc:	2300      	movs	r3, #0
 8022fde:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 8022fe0:	230a      	movs	r3, #10
 8022fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 8022fe6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022fea:	2b30      	cmp	r3, #48	@ 0x30
 8022fec:	d11c      	bne.n	8023028 <ip4addr_aton+0x7c>
      c = *++cp;
 8022fee:	687b      	ldr	r3, [r7, #4]
 8022ff0:	3301      	adds	r3, #1
 8022ff2:	607b      	str	r3, [r7, #4]
 8022ff4:	687b      	ldr	r3, [r7, #4]
 8022ff6:	781b      	ldrb	r3, [r3, #0]
 8022ff8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 8022ffc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8023000:	2b78      	cmp	r3, #120	@ 0x78
 8023002:	d003      	beq.n	802300c <ip4addr_aton+0x60>
 8023004:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8023008:	2b58      	cmp	r3, #88	@ 0x58
 802300a:	d10a      	bne.n	8023022 <ip4addr_aton+0x76>
        base = 16;
 802300c:	2310      	movs	r3, #16
 802300e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 8023012:	687b      	ldr	r3, [r7, #4]
 8023014:	3301      	adds	r3, #1
 8023016:	607b      	str	r3, [r7, #4]
 8023018:	687b      	ldr	r3, [r7, #4]
 802301a:	781b      	ldrb	r3, [r3, #0]
 802301c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8023020:	e002      	b.n	8023028 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8023022:	2308      	movs	r3, #8
 8023024:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8023028:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 802302c:	3301      	adds	r3, #1
 802302e:	4a70      	ldr	r2, [pc, #448]	@ (80231f0 <ip4addr_aton+0x244>)
 8023030:	4413      	add	r3, r2
 8023032:	781b      	ldrb	r3, [r3, #0]
 8023034:	f003 0304 	and.w	r3, r3, #4
 8023038:	2b00      	cmp	r3, #0
 802303a:	d011      	beq.n	8023060 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 802303c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8023040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023042:	fb03 f202 	mul.w	r2, r3, r2
 8023046:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 802304a:	4413      	add	r3, r2
 802304c:	3b30      	subs	r3, #48	@ 0x30
 802304e:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8023050:	687b      	ldr	r3, [r7, #4]
 8023052:	3301      	adds	r3, #1
 8023054:	607b      	str	r3, [r7, #4]
 8023056:	687b      	ldr	r3, [r7, #4]
 8023058:	781b      	ldrb	r3, [r3, #0]
 802305a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 802305e:	e7e3      	b.n	8023028 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8023060:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8023064:	2b10      	cmp	r3, #16
 8023066:	d127      	bne.n	80230b8 <ip4addr_aton+0x10c>
 8023068:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 802306c:	3301      	adds	r3, #1
 802306e:	4a60      	ldr	r2, [pc, #384]	@ (80231f0 <ip4addr_aton+0x244>)
 8023070:	4413      	add	r3, r2
 8023072:	781b      	ldrb	r3, [r3, #0]
 8023074:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8023078:	2b00      	cmp	r3, #0
 802307a:	d01d      	beq.n	80230b8 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 802307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802307e:	011b      	lsls	r3, r3, #4
 8023080:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8023084:	f102 010a 	add.w	r1, r2, #10
 8023088:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 802308c:	3201      	adds	r2, #1
 802308e:	4858      	ldr	r0, [pc, #352]	@ (80231f0 <ip4addr_aton+0x244>)
 8023090:	4402      	add	r2, r0
 8023092:	7812      	ldrb	r2, [r2, #0]
 8023094:	f002 0203 	and.w	r2, r2, #3
 8023098:	2a02      	cmp	r2, #2
 802309a:	d101      	bne.n	80230a0 <ip4addr_aton+0xf4>
 802309c:	2261      	movs	r2, #97	@ 0x61
 802309e:	e000      	b.n	80230a2 <ip4addr_aton+0xf6>
 80230a0:	2241      	movs	r2, #65	@ 0x41
 80230a2:	1a8a      	subs	r2, r1, r2
 80230a4:	4313      	orrs	r3, r2
 80230a6:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 80230a8:	687b      	ldr	r3, [r7, #4]
 80230aa:	3301      	adds	r3, #1
 80230ac:	607b      	str	r3, [r7, #4]
 80230ae:	687b      	ldr	r3, [r7, #4]
 80230b0:	781b      	ldrb	r3, [r3, #0]
 80230b2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 80230b6:	e7b7      	b.n	8023028 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 80230b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80230bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80230be:	d114      	bne.n	80230ea <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 80230c0:	f107 030c 	add.w	r3, r7, #12
 80230c4:	330c      	adds	r3, #12
 80230c6:	69fa      	ldr	r2, [r7, #28]
 80230c8:	429a      	cmp	r2, r3
 80230ca:	d301      	bcc.n	80230d0 <ip4addr_aton+0x124>
        return 0;
 80230cc:	2300      	movs	r3, #0
 80230ce:	e08b      	b.n	80231e8 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 80230d0:	69fb      	ldr	r3, [r7, #28]
 80230d2:	1d1a      	adds	r2, r3, #4
 80230d4:	61fa      	str	r2, [r7, #28]
 80230d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80230d8:	601a      	str	r2, [r3, #0]
      c = *++cp;
 80230da:	687b      	ldr	r3, [r7, #4]
 80230dc:	3301      	adds	r3, #1
 80230de:	607b      	str	r3, [r7, #4]
 80230e0:	687b      	ldr	r3, [r7, #4]
 80230e2:	781b      	ldrb	r3, [r3, #0]
 80230e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 80230e8:	e76c      	b.n	8022fc4 <ip4addr_aton+0x18>
    } else {
      break;
 80230ea:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 80230ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80230f0:	2b00      	cmp	r3, #0
 80230f2:	d00b      	beq.n	802310c <ip4addr_aton+0x160>
 80230f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80230f8:	3301      	adds	r3, #1
 80230fa:	4a3d      	ldr	r2, [pc, #244]	@ (80231f0 <ip4addr_aton+0x244>)
 80230fc:	4413      	add	r3, r2
 80230fe:	781b      	ldrb	r3, [r3, #0]
 8023100:	f003 0308 	and.w	r3, r3, #8
 8023104:	2b00      	cmp	r3, #0
 8023106:	d101      	bne.n	802310c <ip4addr_aton+0x160>
    return 0;
 8023108:	2300      	movs	r3, #0
 802310a:	e06d      	b.n	80231e8 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 802310c:	f107 030c 	add.w	r3, r7, #12
 8023110:	69fa      	ldr	r2, [r7, #28]
 8023112:	1ad3      	subs	r3, r2, r3
 8023114:	109b      	asrs	r3, r3, #2
 8023116:	3301      	adds	r3, #1
 8023118:	2b04      	cmp	r3, #4
 802311a:	d853      	bhi.n	80231c4 <ip4addr_aton+0x218>
 802311c:	a201      	add	r2, pc, #4	@ (adr r2, 8023124 <ip4addr_aton+0x178>)
 802311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023122:	bf00      	nop
 8023124:	08023139 	.word	0x08023139
 8023128:	080231d3 	.word	0x080231d3
 802312c:	0802313d 	.word	0x0802313d
 8023130:	0802315f 	.word	0x0802315f
 8023134:	0802318d 	.word	0x0802318d

    case 0:
      return 0;       /* initial nondigit */
 8023138:	2300      	movs	r3, #0
 802313a:	e055      	b.n	80231e8 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 802313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802313e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8023142:	d301      	bcc.n	8023148 <ip4addr_aton+0x19c>
        return 0;
 8023144:	2300      	movs	r3, #0
 8023146:	e04f      	b.n	80231e8 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8023148:	68fb      	ldr	r3, [r7, #12]
 802314a:	2bff      	cmp	r3, #255	@ 0xff
 802314c:	d901      	bls.n	8023152 <ip4addr_aton+0x1a6>
        return 0;
 802314e:	2300      	movs	r3, #0
 8023150:	e04a      	b.n	80231e8 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8023152:	68fb      	ldr	r3, [r7, #12]
 8023154:	061b      	lsls	r3, r3, #24
 8023156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023158:	4313      	orrs	r3, r2
 802315a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 802315c:	e03a      	b.n	80231d4 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 802315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8023164:	d301      	bcc.n	802316a <ip4addr_aton+0x1be>
        return 0;
 8023166:	2300      	movs	r3, #0
 8023168:	e03e      	b.n	80231e8 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 802316a:	68fb      	ldr	r3, [r7, #12]
 802316c:	2bff      	cmp	r3, #255	@ 0xff
 802316e:	d802      	bhi.n	8023176 <ip4addr_aton+0x1ca>
 8023170:	693b      	ldr	r3, [r7, #16]
 8023172:	2bff      	cmp	r3, #255	@ 0xff
 8023174:	d901      	bls.n	802317a <ip4addr_aton+0x1ce>
        return 0;
 8023176:	2300      	movs	r3, #0
 8023178:	e036      	b.n	80231e8 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 802317a:	68fb      	ldr	r3, [r7, #12]
 802317c:	061a      	lsls	r2, r3, #24
 802317e:	693b      	ldr	r3, [r7, #16]
 8023180:	041b      	lsls	r3, r3, #16
 8023182:	4313      	orrs	r3, r2
 8023184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023186:	4313      	orrs	r3, r2
 8023188:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 802318a:	e023      	b.n	80231d4 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 802318c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802318e:	2bff      	cmp	r3, #255	@ 0xff
 8023190:	d901      	bls.n	8023196 <ip4addr_aton+0x1ea>
        return 0;
 8023192:	2300      	movs	r3, #0
 8023194:	e028      	b.n	80231e8 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8023196:	68fb      	ldr	r3, [r7, #12]
 8023198:	2bff      	cmp	r3, #255	@ 0xff
 802319a:	d805      	bhi.n	80231a8 <ip4addr_aton+0x1fc>
 802319c:	693b      	ldr	r3, [r7, #16]
 802319e:	2bff      	cmp	r3, #255	@ 0xff
 80231a0:	d802      	bhi.n	80231a8 <ip4addr_aton+0x1fc>
 80231a2:	697b      	ldr	r3, [r7, #20]
 80231a4:	2bff      	cmp	r3, #255	@ 0xff
 80231a6:	d901      	bls.n	80231ac <ip4addr_aton+0x200>
        return 0;
 80231a8:	2300      	movs	r3, #0
 80231aa:	e01d      	b.n	80231e8 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80231ac:	68fb      	ldr	r3, [r7, #12]
 80231ae:	061a      	lsls	r2, r3, #24
 80231b0:	693b      	ldr	r3, [r7, #16]
 80231b2:	041b      	lsls	r3, r3, #16
 80231b4:	431a      	orrs	r2, r3
 80231b6:	697b      	ldr	r3, [r7, #20]
 80231b8:	021b      	lsls	r3, r3, #8
 80231ba:	4313      	orrs	r3, r2
 80231bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80231be:	4313      	orrs	r3, r2
 80231c0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80231c2:	e007      	b.n	80231d4 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 80231c4:	4b0b      	ldr	r3, [pc, #44]	@ (80231f4 <ip4addr_aton+0x248>)
 80231c6:	22f9      	movs	r2, #249	@ 0xf9
 80231c8:	490b      	ldr	r1, [pc, #44]	@ (80231f8 <ip4addr_aton+0x24c>)
 80231ca:	480c      	ldr	r0, [pc, #48]	@ (80231fc <ip4addr_aton+0x250>)
 80231cc:	f002 f98a 	bl	80254e4 <iprintf>
      break;
 80231d0:	e000      	b.n	80231d4 <ip4addr_aton+0x228>
      break;
 80231d2:	bf00      	nop
  }
  if (addr) {
 80231d4:	683b      	ldr	r3, [r7, #0]
 80231d6:	2b00      	cmp	r3, #0
 80231d8:	d005      	beq.n	80231e6 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80231da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80231dc:	f7f5 fd6d 	bl	8018cba <lwip_htonl>
 80231e0:	4602      	mov	r2, r0
 80231e2:	683b      	ldr	r3, [r7, #0]
 80231e4:	601a      	str	r2, [r3, #0]
  }
  return 1;
 80231e6:	2301      	movs	r3, #1
}
 80231e8:	4618      	mov	r0, r3
 80231ea:	3728      	adds	r7, #40	@ 0x28
 80231ec:	46bd      	mov	sp, r7
 80231ee:	bd80      	pop	{r7, pc}
 80231f0:	0802d1df 	.word	0x0802d1df
 80231f4:	0802cc78 	.word	0x0802cc78
 80231f8:	0802ccb4 	.word	0x0802ccb4
 80231fc:	0802ccc0 	.word	0x0802ccc0

08023200 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8023200:	b580      	push	{r7, lr}
 8023202:	b084      	sub	sp, #16
 8023204:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8023206:	2300      	movs	r3, #0
 8023208:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 802320a:	4b12      	ldr	r3, [pc, #72]	@ (8023254 <ip_reass_tmr+0x54>)
 802320c:	681b      	ldr	r3, [r3, #0]
 802320e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8023210:	e018      	b.n	8023244 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8023212:	68fb      	ldr	r3, [r7, #12]
 8023214:	7fdb      	ldrb	r3, [r3, #31]
 8023216:	2b00      	cmp	r3, #0
 8023218:	d00b      	beq.n	8023232 <ip_reass_tmr+0x32>
      r->timer--;
 802321a:	68fb      	ldr	r3, [r7, #12]
 802321c:	7fdb      	ldrb	r3, [r3, #31]
 802321e:	3b01      	subs	r3, #1
 8023220:	b2da      	uxtb	r2, r3
 8023222:	68fb      	ldr	r3, [r7, #12]
 8023224:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8023226:	68fb      	ldr	r3, [r7, #12]
 8023228:	60bb      	str	r3, [r7, #8]
      r = r->next;
 802322a:	68fb      	ldr	r3, [r7, #12]
 802322c:	681b      	ldr	r3, [r3, #0]
 802322e:	60fb      	str	r3, [r7, #12]
 8023230:	e008      	b.n	8023244 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8023232:	68fb      	ldr	r3, [r7, #12]
 8023234:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8023236:	68fb      	ldr	r3, [r7, #12]
 8023238:	681b      	ldr	r3, [r3, #0]
 802323a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 802323c:	68b9      	ldr	r1, [r7, #8]
 802323e:	6878      	ldr	r0, [r7, #4]
 8023240:	f000 f80a 	bl	8023258 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8023244:	68fb      	ldr	r3, [r7, #12]
 8023246:	2b00      	cmp	r3, #0
 8023248:	d1e3      	bne.n	8023212 <ip_reass_tmr+0x12>
    }
  }
}
 802324a:	bf00      	nop
 802324c:	bf00      	nop
 802324e:	3710      	adds	r7, #16
 8023250:	46bd      	mov	sp, r7
 8023252:	bd80      	pop	{r7, pc}
 8023254:	2400bfb8 	.word	0x2400bfb8

08023258 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8023258:	b580      	push	{r7, lr}
 802325a:	b088      	sub	sp, #32
 802325c:	af00      	add	r7, sp, #0
 802325e:	6078      	str	r0, [r7, #4]
 8023260:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8023262:	2300      	movs	r3, #0
 8023264:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8023266:	683a      	ldr	r2, [r7, #0]
 8023268:	687b      	ldr	r3, [r7, #4]
 802326a:	429a      	cmp	r2, r3
 802326c:	d105      	bne.n	802327a <ip_reass_free_complete_datagram+0x22>
 802326e:	4b45      	ldr	r3, [pc, #276]	@ (8023384 <ip_reass_free_complete_datagram+0x12c>)
 8023270:	22ab      	movs	r2, #171	@ 0xab
 8023272:	4945      	ldr	r1, [pc, #276]	@ (8023388 <ip_reass_free_complete_datagram+0x130>)
 8023274:	4845      	ldr	r0, [pc, #276]	@ (802338c <ip_reass_free_complete_datagram+0x134>)
 8023276:	f002 f935 	bl	80254e4 <iprintf>
  if (prev != NULL) {
 802327a:	683b      	ldr	r3, [r7, #0]
 802327c:	2b00      	cmp	r3, #0
 802327e:	d00a      	beq.n	8023296 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8023280:	683b      	ldr	r3, [r7, #0]
 8023282:	681b      	ldr	r3, [r3, #0]
 8023284:	687a      	ldr	r2, [r7, #4]
 8023286:	429a      	cmp	r2, r3
 8023288:	d005      	beq.n	8023296 <ip_reass_free_complete_datagram+0x3e>
 802328a:	4b3e      	ldr	r3, [pc, #248]	@ (8023384 <ip_reass_free_complete_datagram+0x12c>)
 802328c:	22ad      	movs	r2, #173	@ 0xad
 802328e:	4940      	ldr	r1, [pc, #256]	@ (8023390 <ip_reass_free_complete_datagram+0x138>)
 8023290:	483e      	ldr	r0, [pc, #248]	@ (802338c <ip_reass_free_complete_datagram+0x134>)
 8023292:	f002 f927 	bl	80254e4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8023296:	687b      	ldr	r3, [r7, #4]
 8023298:	685b      	ldr	r3, [r3, #4]
 802329a:	685b      	ldr	r3, [r3, #4]
 802329c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 802329e:	697b      	ldr	r3, [r7, #20]
 80232a0:	889b      	ldrh	r3, [r3, #4]
 80232a2:	b29b      	uxth	r3, r3
 80232a4:	2b00      	cmp	r3, #0
 80232a6:	d12a      	bne.n	80232fe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80232a8:	687b      	ldr	r3, [r7, #4]
 80232aa:	685b      	ldr	r3, [r3, #4]
 80232ac:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80232ae:	697b      	ldr	r3, [r7, #20]
 80232b0:	681a      	ldr	r2, [r3, #0]
 80232b2:	687b      	ldr	r3, [r7, #4]
 80232b4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80232b6:	69bb      	ldr	r3, [r7, #24]
 80232b8:	6858      	ldr	r0, [r3, #4]
 80232ba:	687b      	ldr	r3, [r7, #4]
 80232bc:	3308      	adds	r3, #8
 80232be:	2214      	movs	r2, #20
 80232c0:	4619      	mov	r1, r3
 80232c2:	f002 fa9c 	bl	80257fe <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80232c6:	2101      	movs	r1, #1
 80232c8:	69b8      	ldr	r0, [r7, #24]
 80232ca:	f7ff faff 	bl	80228cc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80232ce:	69b8      	ldr	r0, [r7, #24]
 80232d0:	f7f7 fa48 	bl	801a764 <pbuf_clen>
 80232d4:	4603      	mov	r3, r0
 80232d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80232d8:	8bfa      	ldrh	r2, [r7, #30]
 80232da:	8a7b      	ldrh	r3, [r7, #18]
 80232dc:	4413      	add	r3, r2
 80232de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80232e2:	db05      	blt.n	80232f0 <ip_reass_free_complete_datagram+0x98>
 80232e4:	4b27      	ldr	r3, [pc, #156]	@ (8023384 <ip_reass_free_complete_datagram+0x12c>)
 80232e6:	22bc      	movs	r2, #188	@ 0xbc
 80232e8:	492a      	ldr	r1, [pc, #168]	@ (8023394 <ip_reass_free_complete_datagram+0x13c>)
 80232ea:	4828      	ldr	r0, [pc, #160]	@ (802338c <ip_reass_free_complete_datagram+0x134>)
 80232ec:	f002 f8fa 	bl	80254e4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80232f0:	8bfa      	ldrh	r2, [r7, #30]
 80232f2:	8a7b      	ldrh	r3, [r7, #18]
 80232f4:	4413      	add	r3, r2
 80232f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80232f8:	69b8      	ldr	r0, [r7, #24]
 80232fa:	f7f7 f9a5 	bl	801a648 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80232fe:	687b      	ldr	r3, [r7, #4]
 8023300:	685b      	ldr	r3, [r3, #4]
 8023302:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8023304:	e01f      	b.n	8023346 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8023306:	69bb      	ldr	r3, [r7, #24]
 8023308:	685b      	ldr	r3, [r3, #4]
 802330a:	617b      	str	r3, [r7, #20]
    pcur = p;
 802330c:	69bb      	ldr	r3, [r7, #24]
 802330e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8023310:	697b      	ldr	r3, [r7, #20]
 8023312:	681b      	ldr	r3, [r3, #0]
 8023314:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8023316:	68f8      	ldr	r0, [r7, #12]
 8023318:	f7f7 fa24 	bl	801a764 <pbuf_clen>
 802331c:	4603      	mov	r3, r0
 802331e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8023320:	8bfa      	ldrh	r2, [r7, #30]
 8023322:	8a7b      	ldrh	r3, [r7, #18]
 8023324:	4413      	add	r3, r2
 8023326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802332a:	db05      	blt.n	8023338 <ip_reass_free_complete_datagram+0xe0>
 802332c:	4b15      	ldr	r3, [pc, #84]	@ (8023384 <ip_reass_free_complete_datagram+0x12c>)
 802332e:	22cc      	movs	r2, #204	@ 0xcc
 8023330:	4918      	ldr	r1, [pc, #96]	@ (8023394 <ip_reass_free_complete_datagram+0x13c>)
 8023332:	4816      	ldr	r0, [pc, #88]	@ (802338c <ip_reass_free_complete_datagram+0x134>)
 8023334:	f002 f8d6 	bl	80254e4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8023338:	8bfa      	ldrh	r2, [r7, #30]
 802333a:	8a7b      	ldrh	r3, [r7, #18]
 802333c:	4413      	add	r3, r2
 802333e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8023340:	68f8      	ldr	r0, [r7, #12]
 8023342:	f7f7 f981 	bl	801a648 <pbuf_free>
  while (p != NULL) {
 8023346:	69bb      	ldr	r3, [r7, #24]
 8023348:	2b00      	cmp	r3, #0
 802334a:	d1dc      	bne.n	8023306 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 802334c:	6839      	ldr	r1, [r7, #0]
 802334e:	6878      	ldr	r0, [r7, #4]
 8023350:	f000 f8c2 	bl	80234d8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8023354:	4b10      	ldr	r3, [pc, #64]	@ (8023398 <ip_reass_free_complete_datagram+0x140>)
 8023356:	881b      	ldrh	r3, [r3, #0]
 8023358:	8bfa      	ldrh	r2, [r7, #30]
 802335a:	429a      	cmp	r2, r3
 802335c:	d905      	bls.n	802336a <ip_reass_free_complete_datagram+0x112>
 802335e:	4b09      	ldr	r3, [pc, #36]	@ (8023384 <ip_reass_free_complete_datagram+0x12c>)
 8023360:	22d2      	movs	r2, #210	@ 0xd2
 8023362:	490e      	ldr	r1, [pc, #56]	@ (802339c <ip_reass_free_complete_datagram+0x144>)
 8023364:	4809      	ldr	r0, [pc, #36]	@ (802338c <ip_reass_free_complete_datagram+0x134>)
 8023366:	f002 f8bd 	bl	80254e4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 802336a:	4b0b      	ldr	r3, [pc, #44]	@ (8023398 <ip_reass_free_complete_datagram+0x140>)
 802336c:	881a      	ldrh	r2, [r3, #0]
 802336e:	8bfb      	ldrh	r3, [r7, #30]
 8023370:	1ad3      	subs	r3, r2, r3
 8023372:	b29a      	uxth	r2, r3
 8023374:	4b08      	ldr	r3, [pc, #32]	@ (8023398 <ip_reass_free_complete_datagram+0x140>)
 8023376:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8023378:	8bfb      	ldrh	r3, [r7, #30]
}
 802337a:	4618      	mov	r0, r3
 802337c:	3720      	adds	r7, #32
 802337e:	46bd      	mov	sp, r7
 8023380:	bd80      	pop	{r7, pc}
 8023382:	bf00      	nop
 8023384:	0802cce8 	.word	0x0802cce8
 8023388:	0802cd24 	.word	0x0802cd24
 802338c:	0802cd30 	.word	0x0802cd30
 8023390:	0802cd58 	.word	0x0802cd58
 8023394:	0802cd6c 	.word	0x0802cd6c
 8023398:	2400bfbc 	.word	0x2400bfbc
 802339c:	0802cd8c 	.word	0x0802cd8c

080233a0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80233a0:	b580      	push	{r7, lr}
 80233a2:	b08a      	sub	sp, #40	@ 0x28
 80233a4:	af00      	add	r7, sp, #0
 80233a6:	6078      	str	r0, [r7, #4]
 80233a8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80233aa:	2300      	movs	r3, #0
 80233ac:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80233ae:	2300      	movs	r3, #0
 80233b0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80233b2:	2300      	movs	r3, #0
 80233b4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80233b6:	2300      	movs	r3, #0
 80233b8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80233ba:	2300      	movs	r3, #0
 80233bc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80233be:	4b28      	ldr	r3, [pc, #160]	@ (8023460 <ip_reass_remove_oldest_datagram+0xc0>)
 80233c0:	681b      	ldr	r3, [r3, #0]
 80233c2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80233c4:	e030      	b.n	8023428 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80233c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80233c8:	695a      	ldr	r2, [r3, #20]
 80233ca:	687b      	ldr	r3, [r7, #4]
 80233cc:	68db      	ldr	r3, [r3, #12]
 80233ce:	429a      	cmp	r2, r3
 80233d0:	d10c      	bne.n	80233ec <ip_reass_remove_oldest_datagram+0x4c>
 80233d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80233d4:	699a      	ldr	r2, [r3, #24]
 80233d6:	687b      	ldr	r3, [r7, #4]
 80233d8:	691b      	ldr	r3, [r3, #16]
 80233da:	429a      	cmp	r2, r3
 80233dc:	d106      	bne.n	80233ec <ip_reass_remove_oldest_datagram+0x4c>
 80233de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80233e0:	899a      	ldrh	r2, [r3, #12]
 80233e2:	687b      	ldr	r3, [r7, #4]
 80233e4:	889b      	ldrh	r3, [r3, #4]
 80233e6:	b29b      	uxth	r3, r3
 80233e8:	429a      	cmp	r2, r3
 80233ea:	d014      	beq.n	8023416 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80233ec:	693b      	ldr	r3, [r7, #16]
 80233ee:	3301      	adds	r3, #1
 80233f0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80233f2:	6a3b      	ldr	r3, [r7, #32]
 80233f4:	2b00      	cmp	r3, #0
 80233f6:	d104      	bne.n	8023402 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80233f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80233fa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80233fc:	69fb      	ldr	r3, [r7, #28]
 80233fe:	61bb      	str	r3, [r7, #24]
 8023400:	e009      	b.n	8023416 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8023402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023404:	7fda      	ldrb	r2, [r3, #31]
 8023406:	6a3b      	ldr	r3, [r7, #32]
 8023408:	7fdb      	ldrb	r3, [r3, #31]
 802340a:	429a      	cmp	r2, r3
 802340c:	d803      	bhi.n	8023416 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 802340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023410:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8023412:	69fb      	ldr	r3, [r7, #28]
 8023414:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8023416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023418:	681b      	ldr	r3, [r3, #0]
 802341a:	2b00      	cmp	r3, #0
 802341c:	d001      	beq.n	8023422 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 802341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023420:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8023422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023424:	681b      	ldr	r3, [r3, #0]
 8023426:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8023428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802342a:	2b00      	cmp	r3, #0
 802342c:	d1cb      	bne.n	80233c6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 802342e:	6a3b      	ldr	r3, [r7, #32]
 8023430:	2b00      	cmp	r3, #0
 8023432:	d008      	beq.n	8023446 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8023434:	69b9      	ldr	r1, [r7, #24]
 8023436:	6a38      	ldr	r0, [r7, #32]
 8023438:	f7ff ff0e 	bl	8023258 <ip_reass_free_complete_datagram>
 802343c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 802343e:	697a      	ldr	r2, [r7, #20]
 8023440:	68fb      	ldr	r3, [r7, #12]
 8023442:	4413      	add	r3, r2
 8023444:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8023446:	697a      	ldr	r2, [r7, #20]
 8023448:	683b      	ldr	r3, [r7, #0]
 802344a:	429a      	cmp	r2, r3
 802344c:	da02      	bge.n	8023454 <ip_reass_remove_oldest_datagram+0xb4>
 802344e:	693b      	ldr	r3, [r7, #16]
 8023450:	2b01      	cmp	r3, #1
 8023452:	dcac      	bgt.n	80233ae <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8023454:	697b      	ldr	r3, [r7, #20]
}
 8023456:	4618      	mov	r0, r3
 8023458:	3728      	adds	r7, #40	@ 0x28
 802345a:	46bd      	mov	sp, r7
 802345c:	bd80      	pop	{r7, pc}
 802345e:	bf00      	nop
 8023460:	2400bfb8 	.word	0x2400bfb8

08023464 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8023464:	b580      	push	{r7, lr}
 8023466:	b084      	sub	sp, #16
 8023468:	af00      	add	r7, sp, #0
 802346a:	6078      	str	r0, [r7, #4]
 802346c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802346e:	2004      	movs	r0, #4
 8023470:	f7f6 f99e 	bl	80197b0 <memp_malloc>
 8023474:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8023476:	68fb      	ldr	r3, [r7, #12]
 8023478:	2b00      	cmp	r3, #0
 802347a:	d110      	bne.n	802349e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 802347c:	6839      	ldr	r1, [r7, #0]
 802347e:	6878      	ldr	r0, [r7, #4]
 8023480:	f7ff ff8e 	bl	80233a0 <ip_reass_remove_oldest_datagram>
 8023484:	4602      	mov	r2, r0
 8023486:	683b      	ldr	r3, [r7, #0]
 8023488:	4293      	cmp	r3, r2
 802348a:	dc03      	bgt.n	8023494 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802348c:	2004      	movs	r0, #4
 802348e:	f7f6 f98f 	bl	80197b0 <memp_malloc>
 8023492:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8023494:	68fb      	ldr	r3, [r7, #12]
 8023496:	2b00      	cmp	r3, #0
 8023498:	d101      	bne.n	802349e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 802349a:	2300      	movs	r3, #0
 802349c:	e016      	b.n	80234cc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 802349e:	2220      	movs	r2, #32
 80234a0:	2100      	movs	r1, #0
 80234a2:	68f8      	ldr	r0, [r7, #12]
 80234a4:	f002 f90a 	bl	80256bc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80234a8:	68fb      	ldr	r3, [r7, #12]
 80234aa:	220f      	movs	r2, #15
 80234ac:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80234ae:	4b09      	ldr	r3, [pc, #36]	@ (80234d4 <ip_reass_enqueue_new_datagram+0x70>)
 80234b0:	681a      	ldr	r2, [r3, #0]
 80234b2:	68fb      	ldr	r3, [r7, #12]
 80234b4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80234b6:	4a07      	ldr	r2, [pc, #28]	@ (80234d4 <ip_reass_enqueue_new_datagram+0x70>)
 80234b8:	68fb      	ldr	r3, [r7, #12]
 80234ba:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80234bc:	68fb      	ldr	r3, [r7, #12]
 80234be:	3308      	adds	r3, #8
 80234c0:	2214      	movs	r2, #20
 80234c2:	6879      	ldr	r1, [r7, #4]
 80234c4:	4618      	mov	r0, r3
 80234c6:	f002 f99a 	bl	80257fe <memcpy>
  return ipr;
 80234ca:	68fb      	ldr	r3, [r7, #12]
}
 80234cc:	4618      	mov	r0, r3
 80234ce:	3710      	adds	r7, #16
 80234d0:	46bd      	mov	sp, r7
 80234d2:	bd80      	pop	{r7, pc}
 80234d4:	2400bfb8 	.word	0x2400bfb8

080234d8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80234d8:	b580      	push	{r7, lr}
 80234da:	b082      	sub	sp, #8
 80234dc:	af00      	add	r7, sp, #0
 80234de:	6078      	str	r0, [r7, #4]
 80234e0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80234e2:	4b10      	ldr	r3, [pc, #64]	@ (8023524 <ip_reass_dequeue_datagram+0x4c>)
 80234e4:	681b      	ldr	r3, [r3, #0]
 80234e6:	687a      	ldr	r2, [r7, #4]
 80234e8:	429a      	cmp	r2, r3
 80234ea:	d104      	bne.n	80234f6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80234ec:	687b      	ldr	r3, [r7, #4]
 80234ee:	681b      	ldr	r3, [r3, #0]
 80234f0:	4a0c      	ldr	r2, [pc, #48]	@ (8023524 <ip_reass_dequeue_datagram+0x4c>)
 80234f2:	6013      	str	r3, [r2, #0]
 80234f4:	e00d      	b.n	8023512 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80234f6:	683b      	ldr	r3, [r7, #0]
 80234f8:	2b00      	cmp	r3, #0
 80234fa:	d106      	bne.n	802350a <ip_reass_dequeue_datagram+0x32>
 80234fc:	4b0a      	ldr	r3, [pc, #40]	@ (8023528 <ip_reass_dequeue_datagram+0x50>)
 80234fe:	f240 1245 	movw	r2, #325	@ 0x145
 8023502:	490a      	ldr	r1, [pc, #40]	@ (802352c <ip_reass_dequeue_datagram+0x54>)
 8023504:	480a      	ldr	r0, [pc, #40]	@ (8023530 <ip_reass_dequeue_datagram+0x58>)
 8023506:	f001 ffed 	bl	80254e4 <iprintf>
    prev->next = ipr->next;
 802350a:	687b      	ldr	r3, [r7, #4]
 802350c:	681a      	ldr	r2, [r3, #0]
 802350e:	683b      	ldr	r3, [r7, #0]
 8023510:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8023512:	6879      	ldr	r1, [r7, #4]
 8023514:	2004      	movs	r0, #4
 8023516:	f7f6 f9c1 	bl	801989c <memp_free>
}
 802351a:	bf00      	nop
 802351c:	3708      	adds	r7, #8
 802351e:	46bd      	mov	sp, r7
 8023520:	bd80      	pop	{r7, pc}
 8023522:	bf00      	nop
 8023524:	2400bfb8 	.word	0x2400bfb8
 8023528:	0802cce8 	.word	0x0802cce8
 802352c:	0802cdb0 	.word	0x0802cdb0
 8023530:	0802cd30 	.word	0x0802cd30

08023534 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8023534:	b580      	push	{r7, lr}
 8023536:	b08c      	sub	sp, #48	@ 0x30
 8023538:	af00      	add	r7, sp, #0
 802353a:	60f8      	str	r0, [r7, #12]
 802353c:	60b9      	str	r1, [r7, #8]
 802353e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8023540:	2300      	movs	r3, #0
 8023542:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8023544:	2301      	movs	r3, #1
 8023546:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8023548:	68bb      	ldr	r3, [r7, #8]
 802354a:	685b      	ldr	r3, [r3, #4]
 802354c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802354e:	69fb      	ldr	r3, [r7, #28]
 8023550:	885b      	ldrh	r3, [r3, #2]
 8023552:	b29b      	uxth	r3, r3
 8023554:	4618      	mov	r0, r3
 8023556:	f7f5 fb9b 	bl	8018c90 <lwip_htons>
 802355a:	4603      	mov	r3, r0
 802355c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 802355e:	69fb      	ldr	r3, [r7, #28]
 8023560:	781b      	ldrb	r3, [r3, #0]
 8023562:	f003 030f 	and.w	r3, r3, #15
 8023566:	b2db      	uxtb	r3, r3
 8023568:	009b      	lsls	r3, r3, #2
 802356a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 802356c:	7e7b      	ldrb	r3, [r7, #25]
 802356e:	b29b      	uxth	r3, r3
 8023570:	8b7a      	ldrh	r2, [r7, #26]
 8023572:	429a      	cmp	r2, r3
 8023574:	d202      	bcs.n	802357c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023576:	f04f 33ff 	mov.w	r3, #4294967295
 802357a:	e135      	b.n	80237e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 802357c:	7e7b      	ldrb	r3, [r7, #25]
 802357e:	b29b      	uxth	r3, r3
 8023580:	8b7a      	ldrh	r2, [r7, #26]
 8023582:	1ad3      	subs	r3, r2, r3
 8023584:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8023586:	69fb      	ldr	r3, [r7, #28]
 8023588:	88db      	ldrh	r3, [r3, #6]
 802358a:	b29b      	uxth	r3, r3
 802358c:	4618      	mov	r0, r3
 802358e:	f7f5 fb7f 	bl	8018c90 <lwip_htons>
 8023592:	4603      	mov	r3, r0
 8023594:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023598:	b29b      	uxth	r3, r3
 802359a:	00db      	lsls	r3, r3, #3
 802359c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 802359e:	68bb      	ldr	r3, [r7, #8]
 80235a0:	685b      	ldr	r3, [r3, #4]
 80235a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80235a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80235a6:	2200      	movs	r2, #0
 80235a8:	701a      	strb	r2, [r3, #0]
 80235aa:	2200      	movs	r2, #0
 80235ac:	705a      	strb	r2, [r3, #1]
 80235ae:	2200      	movs	r2, #0
 80235b0:	709a      	strb	r2, [r3, #2]
 80235b2:	2200      	movs	r2, #0
 80235b4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80235b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80235b8:	8afa      	ldrh	r2, [r7, #22]
 80235ba:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80235bc:	8afa      	ldrh	r2, [r7, #22]
 80235be:	8b7b      	ldrh	r3, [r7, #26]
 80235c0:	4413      	add	r3, r2
 80235c2:	b29a      	uxth	r2, r3
 80235c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80235c6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80235c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80235ca:	88db      	ldrh	r3, [r3, #6]
 80235cc:	b29b      	uxth	r3, r3
 80235ce:	8afa      	ldrh	r2, [r7, #22]
 80235d0:	429a      	cmp	r2, r3
 80235d2:	d902      	bls.n	80235da <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80235d4:	f04f 33ff 	mov.w	r3, #4294967295
 80235d8:	e106      	b.n	80237e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80235da:	68fb      	ldr	r3, [r7, #12]
 80235dc:	685b      	ldr	r3, [r3, #4]
 80235de:	627b      	str	r3, [r7, #36]	@ 0x24
 80235e0:	e068      	b.n	80236b4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80235e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80235e4:	685b      	ldr	r3, [r3, #4]
 80235e6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80235e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80235ea:	889b      	ldrh	r3, [r3, #4]
 80235ec:	b29a      	uxth	r2, r3
 80235ee:	693b      	ldr	r3, [r7, #16]
 80235f0:	889b      	ldrh	r3, [r3, #4]
 80235f2:	b29b      	uxth	r3, r3
 80235f4:	429a      	cmp	r2, r3
 80235f6:	d235      	bcs.n	8023664 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80235f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80235fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80235fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80235fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023600:	2b00      	cmp	r3, #0
 8023602:	d020      	beq.n	8023646 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8023604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023606:	889b      	ldrh	r3, [r3, #4]
 8023608:	b29a      	uxth	r2, r3
 802360a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802360c:	88db      	ldrh	r3, [r3, #6]
 802360e:	b29b      	uxth	r3, r3
 8023610:	429a      	cmp	r2, r3
 8023612:	d307      	bcc.n	8023624 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8023614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023616:	88db      	ldrh	r3, [r3, #6]
 8023618:	b29a      	uxth	r2, r3
 802361a:	693b      	ldr	r3, [r7, #16]
 802361c:	889b      	ldrh	r3, [r3, #4]
 802361e:	b29b      	uxth	r3, r3
 8023620:	429a      	cmp	r2, r3
 8023622:	d902      	bls.n	802362a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023624:	f04f 33ff 	mov.w	r3, #4294967295
 8023628:	e0de      	b.n	80237e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 802362a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802362c:	68ba      	ldr	r2, [r7, #8]
 802362e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8023630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023632:	88db      	ldrh	r3, [r3, #6]
 8023634:	b29a      	uxth	r2, r3
 8023636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023638:	889b      	ldrh	r3, [r3, #4]
 802363a:	b29b      	uxth	r3, r3
 802363c:	429a      	cmp	r2, r3
 802363e:	d03d      	beq.n	80236bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8023640:	2300      	movs	r3, #0
 8023642:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8023644:	e03a      	b.n	80236bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8023646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023648:	88db      	ldrh	r3, [r3, #6]
 802364a:	b29a      	uxth	r2, r3
 802364c:	693b      	ldr	r3, [r7, #16]
 802364e:	889b      	ldrh	r3, [r3, #4]
 8023650:	b29b      	uxth	r3, r3
 8023652:	429a      	cmp	r2, r3
 8023654:	d902      	bls.n	802365c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023656:	f04f 33ff 	mov.w	r3, #4294967295
 802365a:	e0c5      	b.n	80237e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 802365c:	68fb      	ldr	r3, [r7, #12]
 802365e:	68ba      	ldr	r2, [r7, #8]
 8023660:	605a      	str	r2, [r3, #4]
      break;
 8023662:	e02b      	b.n	80236bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8023664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023666:	889b      	ldrh	r3, [r3, #4]
 8023668:	b29a      	uxth	r2, r3
 802366a:	693b      	ldr	r3, [r7, #16]
 802366c:	889b      	ldrh	r3, [r3, #4]
 802366e:	b29b      	uxth	r3, r3
 8023670:	429a      	cmp	r2, r3
 8023672:	d102      	bne.n	802367a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023674:	f04f 33ff 	mov.w	r3, #4294967295
 8023678:	e0b6      	b.n	80237e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 802367a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802367c:	889b      	ldrh	r3, [r3, #4]
 802367e:	b29a      	uxth	r2, r3
 8023680:	693b      	ldr	r3, [r7, #16]
 8023682:	88db      	ldrh	r3, [r3, #6]
 8023684:	b29b      	uxth	r3, r3
 8023686:	429a      	cmp	r2, r3
 8023688:	d202      	bcs.n	8023690 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 802368a:	f04f 33ff 	mov.w	r3, #4294967295
 802368e:	e0ab      	b.n	80237e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8023690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023692:	2b00      	cmp	r3, #0
 8023694:	d009      	beq.n	80236aa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8023696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023698:	88db      	ldrh	r3, [r3, #6]
 802369a:	b29a      	uxth	r2, r3
 802369c:	693b      	ldr	r3, [r7, #16]
 802369e:	889b      	ldrh	r3, [r3, #4]
 80236a0:	b29b      	uxth	r3, r3
 80236a2:	429a      	cmp	r2, r3
 80236a4:	d001      	beq.n	80236aa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80236a6:	2300      	movs	r3, #0
 80236a8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80236aa:	693b      	ldr	r3, [r7, #16]
 80236ac:	681b      	ldr	r3, [r3, #0]
 80236ae:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80236b0:	693b      	ldr	r3, [r7, #16]
 80236b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80236b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80236b6:	2b00      	cmp	r3, #0
 80236b8:	d193      	bne.n	80235e2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80236ba:	e000      	b.n	80236be <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80236bc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80236be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80236c0:	2b00      	cmp	r3, #0
 80236c2:	d12d      	bne.n	8023720 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80236c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80236c6:	2b00      	cmp	r3, #0
 80236c8:	d01c      	beq.n	8023704 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80236ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80236cc:	88db      	ldrh	r3, [r3, #6]
 80236ce:	b29a      	uxth	r2, r3
 80236d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80236d2:	889b      	ldrh	r3, [r3, #4]
 80236d4:	b29b      	uxth	r3, r3
 80236d6:	429a      	cmp	r2, r3
 80236d8:	d906      	bls.n	80236e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80236da:	4b45      	ldr	r3, [pc, #276]	@ (80237f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80236dc:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80236e0:	4944      	ldr	r1, [pc, #272]	@ (80237f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80236e2:	4845      	ldr	r0, [pc, #276]	@ (80237f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80236e4:	f001 fefe 	bl	80254e4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80236e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80236ea:	68ba      	ldr	r2, [r7, #8]
 80236ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80236ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80236f0:	88db      	ldrh	r3, [r3, #6]
 80236f2:	b29a      	uxth	r2, r3
 80236f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80236f6:	889b      	ldrh	r3, [r3, #4]
 80236f8:	b29b      	uxth	r3, r3
 80236fa:	429a      	cmp	r2, r3
 80236fc:	d010      	beq.n	8023720 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80236fe:	2300      	movs	r3, #0
 8023700:	623b      	str	r3, [r7, #32]
 8023702:	e00d      	b.n	8023720 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8023704:	68fb      	ldr	r3, [r7, #12]
 8023706:	685b      	ldr	r3, [r3, #4]
 8023708:	2b00      	cmp	r3, #0
 802370a:	d006      	beq.n	802371a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 802370c:	4b38      	ldr	r3, [pc, #224]	@ (80237f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802370e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8023712:	493a      	ldr	r1, [pc, #232]	@ (80237fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8023714:	4838      	ldr	r0, [pc, #224]	@ (80237f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023716:	f001 fee5 	bl	80254e4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 802371a:	68fb      	ldr	r3, [r7, #12]
 802371c:	68ba      	ldr	r2, [r7, #8]
 802371e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8023720:	687b      	ldr	r3, [r7, #4]
 8023722:	2b00      	cmp	r3, #0
 8023724:	d105      	bne.n	8023732 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8023726:	68fb      	ldr	r3, [r7, #12]
 8023728:	7f9b      	ldrb	r3, [r3, #30]
 802372a:	f003 0301 	and.w	r3, r3, #1
 802372e:	2b00      	cmp	r3, #0
 8023730:	d059      	beq.n	80237e6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8023732:	6a3b      	ldr	r3, [r7, #32]
 8023734:	2b00      	cmp	r3, #0
 8023736:	d04f      	beq.n	80237d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8023738:	68fb      	ldr	r3, [r7, #12]
 802373a:	685b      	ldr	r3, [r3, #4]
 802373c:	2b00      	cmp	r3, #0
 802373e:	d006      	beq.n	802374e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8023740:	68fb      	ldr	r3, [r7, #12]
 8023742:	685b      	ldr	r3, [r3, #4]
 8023744:	685b      	ldr	r3, [r3, #4]
 8023746:	889b      	ldrh	r3, [r3, #4]
 8023748:	b29b      	uxth	r3, r3
 802374a:	2b00      	cmp	r3, #0
 802374c:	d002      	beq.n	8023754 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 802374e:	2300      	movs	r3, #0
 8023750:	623b      	str	r3, [r7, #32]
 8023752:	e041      	b.n	80237d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8023754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023756:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8023758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802375a:	681b      	ldr	r3, [r3, #0]
 802375c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 802375e:	e012      	b.n	8023786 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8023760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023762:	685b      	ldr	r3, [r3, #4]
 8023764:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8023766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023768:	88db      	ldrh	r3, [r3, #6]
 802376a:	b29a      	uxth	r2, r3
 802376c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802376e:	889b      	ldrh	r3, [r3, #4]
 8023770:	b29b      	uxth	r3, r3
 8023772:	429a      	cmp	r2, r3
 8023774:	d002      	beq.n	802377c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8023776:	2300      	movs	r3, #0
 8023778:	623b      	str	r3, [r7, #32]
            break;
 802377a:	e007      	b.n	802378c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 802377c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802377e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8023780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023782:	681b      	ldr	r3, [r3, #0]
 8023784:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8023786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023788:	2b00      	cmp	r3, #0
 802378a:	d1e9      	bne.n	8023760 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 802378c:	6a3b      	ldr	r3, [r7, #32]
 802378e:	2b00      	cmp	r3, #0
 8023790:	d022      	beq.n	80237d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8023792:	68fb      	ldr	r3, [r7, #12]
 8023794:	685b      	ldr	r3, [r3, #4]
 8023796:	2b00      	cmp	r3, #0
 8023798:	d106      	bne.n	80237a8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 802379a:	4b15      	ldr	r3, [pc, #84]	@ (80237f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802379c:	f240 12df 	movw	r2, #479	@ 0x1df
 80237a0:	4917      	ldr	r1, [pc, #92]	@ (8023800 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80237a2:	4815      	ldr	r0, [pc, #84]	@ (80237f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80237a4:	f001 fe9e 	bl	80254e4 <iprintf>
          LWIP_ASSERT("sanity check",
 80237a8:	68fb      	ldr	r3, [r7, #12]
 80237aa:	685b      	ldr	r3, [r3, #4]
 80237ac:	685b      	ldr	r3, [r3, #4]
 80237ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80237b0:	429a      	cmp	r2, r3
 80237b2:	d106      	bne.n	80237c2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80237b4:	4b0e      	ldr	r3, [pc, #56]	@ (80237f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80237b6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80237ba:	4911      	ldr	r1, [pc, #68]	@ (8023800 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80237bc:	480e      	ldr	r0, [pc, #56]	@ (80237f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80237be:	f001 fe91 	bl	80254e4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80237c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80237c4:	681b      	ldr	r3, [r3, #0]
 80237c6:	2b00      	cmp	r3, #0
 80237c8:	d006      	beq.n	80237d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80237ca:	4b09      	ldr	r3, [pc, #36]	@ (80237f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80237cc:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80237d0:	490c      	ldr	r1, [pc, #48]	@ (8023804 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80237d2:	4809      	ldr	r0, [pc, #36]	@ (80237f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80237d4:	f001 fe86 	bl	80254e4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80237d8:	6a3b      	ldr	r3, [r7, #32]
 80237da:	2b00      	cmp	r3, #0
 80237dc:	bf14      	ite	ne
 80237de:	2301      	movne	r3, #1
 80237e0:	2300      	moveq	r3, #0
 80237e2:	b2db      	uxtb	r3, r3
 80237e4:	e000      	b.n	80237e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80237e6:	2300      	movs	r3, #0
}
 80237e8:	4618      	mov	r0, r3
 80237ea:	3730      	adds	r7, #48	@ 0x30
 80237ec:	46bd      	mov	sp, r7
 80237ee:	bd80      	pop	{r7, pc}
 80237f0:	0802cce8 	.word	0x0802cce8
 80237f4:	0802cdcc 	.word	0x0802cdcc
 80237f8:	0802cd30 	.word	0x0802cd30
 80237fc:	0802cdec 	.word	0x0802cdec
 8023800:	0802ce24 	.word	0x0802ce24
 8023804:	0802ce34 	.word	0x0802ce34

08023808 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8023808:	b580      	push	{r7, lr}
 802380a:	b08e      	sub	sp, #56	@ 0x38
 802380c:	af00      	add	r7, sp, #0
 802380e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8023810:	687b      	ldr	r3, [r7, #4]
 8023812:	685b      	ldr	r3, [r3, #4]
 8023814:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8023816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023818:	781b      	ldrb	r3, [r3, #0]
 802381a:	f003 030f 	and.w	r3, r3, #15
 802381e:	b2db      	uxtb	r3, r3
 8023820:	009b      	lsls	r3, r3, #2
 8023822:	b2db      	uxtb	r3, r3
 8023824:	2b14      	cmp	r3, #20
 8023826:	f040 8171 	bne.w	8023b0c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 802382a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802382c:	88db      	ldrh	r3, [r3, #6]
 802382e:	b29b      	uxth	r3, r3
 8023830:	4618      	mov	r0, r3
 8023832:	f7f5 fa2d 	bl	8018c90 <lwip_htons>
 8023836:	4603      	mov	r3, r0
 8023838:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802383c:	b29b      	uxth	r3, r3
 802383e:	00db      	lsls	r3, r3, #3
 8023840:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8023842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023844:	885b      	ldrh	r3, [r3, #2]
 8023846:	b29b      	uxth	r3, r3
 8023848:	4618      	mov	r0, r3
 802384a:	f7f5 fa21 	bl	8018c90 <lwip_htons>
 802384e:	4603      	mov	r3, r0
 8023850:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8023852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023854:	781b      	ldrb	r3, [r3, #0]
 8023856:	f003 030f 	and.w	r3, r3, #15
 802385a:	b2db      	uxtb	r3, r3
 802385c:	009b      	lsls	r3, r3, #2
 802385e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8023862:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8023866:	b29b      	uxth	r3, r3
 8023868:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 802386a:	429a      	cmp	r2, r3
 802386c:	f0c0 8150 	bcc.w	8023b10 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8023870:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8023874:	b29b      	uxth	r3, r3
 8023876:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8023878:	1ad3      	subs	r3, r2, r3
 802387a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 802387c:	6878      	ldr	r0, [r7, #4]
 802387e:	f7f6 ff71 	bl	801a764 <pbuf_clen>
 8023882:	4603      	mov	r3, r0
 8023884:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8023886:	4b8c      	ldr	r3, [pc, #560]	@ (8023ab8 <ip4_reass+0x2b0>)
 8023888:	881b      	ldrh	r3, [r3, #0]
 802388a:	461a      	mov	r2, r3
 802388c:	8c3b      	ldrh	r3, [r7, #32]
 802388e:	4413      	add	r3, r2
 8023890:	2b0a      	cmp	r3, #10
 8023892:	dd10      	ble.n	80238b6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8023894:	8c3b      	ldrh	r3, [r7, #32]
 8023896:	4619      	mov	r1, r3
 8023898:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802389a:	f7ff fd81 	bl	80233a0 <ip_reass_remove_oldest_datagram>
 802389e:	4603      	mov	r3, r0
 80238a0:	2b00      	cmp	r3, #0
 80238a2:	f000 8137 	beq.w	8023b14 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80238a6:	4b84      	ldr	r3, [pc, #528]	@ (8023ab8 <ip4_reass+0x2b0>)
 80238a8:	881b      	ldrh	r3, [r3, #0]
 80238aa:	461a      	mov	r2, r3
 80238ac:	8c3b      	ldrh	r3, [r7, #32]
 80238ae:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80238b0:	2b0a      	cmp	r3, #10
 80238b2:	f300 812f 	bgt.w	8023b14 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80238b6:	4b81      	ldr	r3, [pc, #516]	@ (8023abc <ip4_reass+0x2b4>)
 80238b8:	681b      	ldr	r3, [r3, #0]
 80238ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80238bc:	e015      	b.n	80238ea <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80238be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80238c0:	695a      	ldr	r2, [r3, #20]
 80238c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80238c4:	68db      	ldr	r3, [r3, #12]
 80238c6:	429a      	cmp	r2, r3
 80238c8:	d10c      	bne.n	80238e4 <ip4_reass+0xdc>
 80238ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80238cc:	699a      	ldr	r2, [r3, #24]
 80238ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80238d0:	691b      	ldr	r3, [r3, #16]
 80238d2:	429a      	cmp	r2, r3
 80238d4:	d106      	bne.n	80238e4 <ip4_reass+0xdc>
 80238d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80238d8:	899a      	ldrh	r2, [r3, #12]
 80238da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80238dc:	889b      	ldrh	r3, [r3, #4]
 80238de:	b29b      	uxth	r3, r3
 80238e0:	429a      	cmp	r2, r3
 80238e2:	d006      	beq.n	80238f2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80238e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80238e6:	681b      	ldr	r3, [r3, #0]
 80238e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80238ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80238ec:	2b00      	cmp	r3, #0
 80238ee:	d1e6      	bne.n	80238be <ip4_reass+0xb6>
 80238f0:	e000      	b.n	80238f4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80238f2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80238f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80238f6:	2b00      	cmp	r3, #0
 80238f8:	d109      	bne.n	802390e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80238fa:	8c3b      	ldrh	r3, [r7, #32]
 80238fc:	4619      	mov	r1, r3
 80238fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8023900:	f7ff fdb0 	bl	8023464 <ip_reass_enqueue_new_datagram>
 8023904:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8023906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023908:	2b00      	cmp	r3, #0
 802390a:	d11c      	bne.n	8023946 <ip4_reass+0x13e>
      goto nullreturn;
 802390c:	e105      	b.n	8023b1a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802390e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023910:	88db      	ldrh	r3, [r3, #6]
 8023912:	b29b      	uxth	r3, r3
 8023914:	4618      	mov	r0, r3
 8023916:	f7f5 f9bb 	bl	8018c90 <lwip_htons>
 802391a:	4603      	mov	r3, r0
 802391c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023920:	2b00      	cmp	r3, #0
 8023922:	d110      	bne.n	8023946 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8023924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023926:	89db      	ldrh	r3, [r3, #14]
 8023928:	4618      	mov	r0, r3
 802392a:	f7f5 f9b1 	bl	8018c90 <lwip_htons>
 802392e:	4603      	mov	r3, r0
 8023930:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8023934:	2b00      	cmp	r3, #0
 8023936:	d006      	beq.n	8023946 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8023938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802393a:	3308      	adds	r3, #8
 802393c:	2214      	movs	r2, #20
 802393e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8023940:	4618      	mov	r0, r3
 8023942:	f001 ff5c 	bl	80257fe <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8023946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023948:	88db      	ldrh	r3, [r3, #6]
 802394a:	b29b      	uxth	r3, r3
 802394c:	f003 0320 	and.w	r3, r3, #32
 8023950:	2b00      	cmp	r3, #0
 8023952:	bf0c      	ite	eq
 8023954:	2301      	moveq	r3, #1
 8023956:	2300      	movne	r3, #0
 8023958:	b2db      	uxtb	r3, r3
 802395a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 802395c:	69fb      	ldr	r3, [r7, #28]
 802395e:	2b00      	cmp	r3, #0
 8023960:	d00e      	beq.n	8023980 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8023962:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8023964:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8023966:	4413      	add	r3, r2
 8023968:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 802396a:	8b7a      	ldrh	r2, [r7, #26]
 802396c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802396e:	429a      	cmp	r2, r3
 8023970:	f0c0 80a0 	bcc.w	8023ab4 <ip4_reass+0x2ac>
 8023974:	8b7b      	ldrh	r3, [r7, #26]
 8023976:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 802397a:	4293      	cmp	r3, r2
 802397c:	f200 809a 	bhi.w	8023ab4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8023980:	69fa      	ldr	r2, [r7, #28]
 8023982:	6879      	ldr	r1, [r7, #4]
 8023984:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8023986:	f7ff fdd5 	bl	8023534 <ip_reass_chain_frag_into_datagram_and_validate>
 802398a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 802398c:	697b      	ldr	r3, [r7, #20]
 802398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023992:	f000 809b 	beq.w	8023acc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8023996:	4b48      	ldr	r3, [pc, #288]	@ (8023ab8 <ip4_reass+0x2b0>)
 8023998:	881a      	ldrh	r2, [r3, #0]
 802399a:	8c3b      	ldrh	r3, [r7, #32]
 802399c:	4413      	add	r3, r2
 802399e:	b29a      	uxth	r2, r3
 80239a0:	4b45      	ldr	r3, [pc, #276]	@ (8023ab8 <ip4_reass+0x2b0>)
 80239a2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80239a4:	69fb      	ldr	r3, [r7, #28]
 80239a6:	2b00      	cmp	r3, #0
 80239a8:	d00d      	beq.n	80239c6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80239aa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80239ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80239ae:	4413      	add	r3, r2
 80239b0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80239b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80239b4:	8a7a      	ldrh	r2, [r7, #18]
 80239b6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80239b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80239ba:	7f9b      	ldrb	r3, [r3, #30]
 80239bc:	f043 0301 	orr.w	r3, r3, #1
 80239c0:	b2da      	uxtb	r2, r3
 80239c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80239c4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80239c6:	697b      	ldr	r3, [r7, #20]
 80239c8:	2b01      	cmp	r3, #1
 80239ca:	d171      	bne.n	8023ab0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80239cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80239ce:	8b9b      	ldrh	r3, [r3, #28]
 80239d0:	3314      	adds	r3, #20
 80239d2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80239d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80239d6:	685b      	ldr	r3, [r3, #4]
 80239d8:	685b      	ldr	r3, [r3, #4]
 80239da:	681b      	ldr	r3, [r3, #0]
 80239dc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80239de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80239e0:	685b      	ldr	r3, [r3, #4]
 80239e2:	685b      	ldr	r3, [r3, #4]
 80239e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80239e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80239e8:	3308      	adds	r3, #8
 80239ea:	2214      	movs	r2, #20
 80239ec:	4619      	mov	r1, r3
 80239ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80239f0:	f001 ff05 	bl	80257fe <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80239f4:	8a3b      	ldrh	r3, [r7, #16]
 80239f6:	4618      	mov	r0, r3
 80239f8:	f7f5 f94a 	bl	8018c90 <lwip_htons>
 80239fc:	4603      	mov	r3, r0
 80239fe:	461a      	mov	r2, r3
 8023a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023a02:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8023a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023a06:	2200      	movs	r2, #0
 8023a08:	719a      	strb	r2, [r3, #6]
 8023a0a:	2200      	movs	r2, #0
 8023a0c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8023a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023a10:	2200      	movs	r2, #0
 8023a12:	729a      	strb	r2, [r3, #10]
 8023a14:	2200      	movs	r2, #0
 8023a16:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8023a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023a1a:	685b      	ldr	r3, [r3, #4]
 8023a1c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8023a1e:	e00d      	b.n	8023a3c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8023a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023a22:	685b      	ldr	r3, [r3, #4]
 8023a24:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8023a26:	2114      	movs	r1, #20
 8023a28:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8023a2a:	f7f6 fd55 	bl	801a4d8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8023a2e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8023a30:	6878      	ldr	r0, [r7, #4]
 8023a32:	f7f6 fed7 	bl	801a7e4 <pbuf_cat>
      r = iprh->next_pbuf;
 8023a36:	68fb      	ldr	r3, [r7, #12]
 8023a38:	681b      	ldr	r3, [r3, #0]
 8023a3a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8023a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023a3e:	2b00      	cmp	r3, #0
 8023a40:	d1ee      	bne.n	8023a20 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8023a42:	4b1e      	ldr	r3, [pc, #120]	@ (8023abc <ip4_reass+0x2b4>)
 8023a44:	681b      	ldr	r3, [r3, #0]
 8023a46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023a48:	429a      	cmp	r2, r3
 8023a4a:	d102      	bne.n	8023a52 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8023a4c:	2300      	movs	r3, #0
 8023a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8023a50:	e010      	b.n	8023a74 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8023a52:	4b1a      	ldr	r3, [pc, #104]	@ (8023abc <ip4_reass+0x2b4>)
 8023a54:	681b      	ldr	r3, [r3, #0]
 8023a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8023a58:	e007      	b.n	8023a6a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8023a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023a5c:	681b      	ldr	r3, [r3, #0]
 8023a5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023a60:	429a      	cmp	r2, r3
 8023a62:	d006      	beq.n	8023a72 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8023a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023a66:	681b      	ldr	r3, [r3, #0]
 8023a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8023a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023a6c:	2b00      	cmp	r3, #0
 8023a6e:	d1f4      	bne.n	8023a5a <ip4_reass+0x252>
 8023a70:	e000      	b.n	8023a74 <ip4_reass+0x26c>
          break;
 8023a72:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8023a74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8023a76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8023a78:	f7ff fd2e 	bl	80234d8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8023a7c:	6878      	ldr	r0, [r7, #4]
 8023a7e:	f7f6 fe71 	bl	801a764 <pbuf_clen>
 8023a82:	4603      	mov	r3, r0
 8023a84:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8023a86:	4b0c      	ldr	r3, [pc, #48]	@ (8023ab8 <ip4_reass+0x2b0>)
 8023a88:	881b      	ldrh	r3, [r3, #0]
 8023a8a:	8c3a      	ldrh	r2, [r7, #32]
 8023a8c:	429a      	cmp	r2, r3
 8023a8e:	d906      	bls.n	8023a9e <ip4_reass+0x296>
 8023a90:	4b0b      	ldr	r3, [pc, #44]	@ (8023ac0 <ip4_reass+0x2b8>)
 8023a92:	f240 229b 	movw	r2, #667	@ 0x29b
 8023a96:	490b      	ldr	r1, [pc, #44]	@ (8023ac4 <ip4_reass+0x2bc>)
 8023a98:	480b      	ldr	r0, [pc, #44]	@ (8023ac8 <ip4_reass+0x2c0>)
 8023a9a:	f001 fd23 	bl	80254e4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8023a9e:	4b06      	ldr	r3, [pc, #24]	@ (8023ab8 <ip4_reass+0x2b0>)
 8023aa0:	881a      	ldrh	r2, [r3, #0]
 8023aa2:	8c3b      	ldrh	r3, [r7, #32]
 8023aa4:	1ad3      	subs	r3, r2, r3
 8023aa6:	b29a      	uxth	r2, r3
 8023aa8:	4b03      	ldr	r3, [pc, #12]	@ (8023ab8 <ip4_reass+0x2b0>)
 8023aaa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8023aac:	687b      	ldr	r3, [r7, #4]
 8023aae:	e038      	b.n	8023b22 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8023ab0:	2300      	movs	r3, #0
 8023ab2:	e036      	b.n	8023b22 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8023ab4:	bf00      	nop
 8023ab6:	e00a      	b.n	8023ace <ip4_reass+0x2c6>
 8023ab8:	2400bfbc 	.word	0x2400bfbc
 8023abc:	2400bfb8 	.word	0x2400bfb8
 8023ac0:	0802cce8 	.word	0x0802cce8
 8023ac4:	0802ce58 	.word	0x0802ce58
 8023ac8:	0802cd30 	.word	0x0802cd30
    goto nullreturn_ipr;
 8023acc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8023ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023ad0:	2b00      	cmp	r3, #0
 8023ad2:	d106      	bne.n	8023ae2 <ip4_reass+0x2da>
 8023ad4:	4b15      	ldr	r3, [pc, #84]	@ (8023b2c <ip4_reass+0x324>)
 8023ad6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8023ada:	4915      	ldr	r1, [pc, #84]	@ (8023b30 <ip4_reass+0x328>)
 8023adc:	4815      	ldr	r0, [pc, #84]	@ (8023b34 <ip4_reass+0x32c>)
 8023ade:	f001 fd01 	bl	80254e4 <iprintf>
  if (ipr->p == NULL) {
 8023ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023ae4:	685b      	ldr	r3, [r3, #4]
 8023ae6:	2b00      	cmp	r3, #0
 8023ae8:	d116      	bne.n	8023b18 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8023aea:	4b13      	ldr	r3, [pc, #76]	@ (8023b38 <ip4_reass+0x330>)
 8023aec:	681b      	ldr	r3, [r3, #0]
 8023aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023af0:	429a      	cmp	r2, r3
 8023af2:	d006      	beq.n	8023b02 <ip4_reass+0x2fa>
 8023af4:	4b0d      	ldr	r3, [pc, #52]	@ (8023b2c <ip4_reass+0x324>)
 8023af6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8023afa:	4910      	ldr	r1, [pc, #64]	@ (8023b3c <ip4_reass+0x334>)
 8023afc:	480d      	ldr	r0, [pc, #52]	@ (8023b34 <ip4_reass+0x32c>)
 8023afe:	f001 fcf1 	bl	80254e4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8023b02:	2100      	movs	r1, #0
 8023b04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8023b06:	f7ff fce7 	bl	80234d8 <ip_reass_dequeue_datagram>
 8023b0a:	e006      	b.n	8023b1a <ip4_reass+0x312>
    goto nullreturn;
 8023b0c:	bf00      	nop
 8023b0e:	e004      	b.n	8023b1a <ip4_reass+0x312>
    goto nullreturn;
 8023b10:	bf00      	nop
 8023b12:	e002      	b.n	8023b1a <ip4_reass+0x312>
      goto nullreturn;
 8023b14:	bf00      	nop
 8023b16:	e000      	b.n	8023b1a <ip4_reass+0x312>
  }

nullreturn:
 8023b18:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8023b1a:	6878      	ldr	r0, [r7, #4]
 8023b1c:	f7f6 fd94 	bl	801a648 <pbuf_free>
  return NULL;
 8023b20:	2300      	movs	r3, #0
}
 8023b22:	4618      	mov	r0, r3
 8023b24:	3738      	adds	r7, #56	@ 0x38
 8023b26:	46bd      	mov	sp, r7
 8023b28:	bd80      	pop	{r7, pc}
 8023b2a:	bf00      	nop
 8023b2c:	0802cce8 	.word	0x0802cce8
 8023b30:	0802ce74 	.word	0x0802ce74
 8023b34:	0802cd30 	.word	0x0802cd30
 8023b38:	2400bfb8 	.word	0x2400bfb8
 8023b3c:	0802ce80 	.word	0x0802ce80

08023b40 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8023b40:	b580      	push	{r7, lr}
 8023b42:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8023b44:	2005      	movs	r0, #5
 8023b46:	f7f5 fe33 	bl	80197b0 <memp_malloc>
 8023b4a:	4603      	mov	r3, r0
}
 8023b4c:	4618      	mov	r0, r3
 8023b4e:	bd80      	pop	{r7, pc}

08023b50 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8023b50:	b580      	push	{r7, lr}
 8023b52:	b082      	sub	sp, #8
 8023b54:	af00      	add	r7, sp, #0
 8023b56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8023b58:	687b      	ldr	r3, [r7, #4]
 8023b5a:	2b00      	cmp	r3, #0
 8023b5c:	d106      	bne.n	8023b6c <ip_frag_free_pbuf_custom_ref+0x1c>
 8023b5e:	4b07      	ldr	r3, [pc, #28]	@ (8023b7c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8023b60:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8023b64:	4906      	ldr	r1, [pc, #24]	@ (8023b80 <ip_frag_free_pbuf_custom_ref+0x30>)
 8023b66:	4807      	ldr	r0, [pc, #28]	@ (8023b84 <ip_frag_free_pbuf_custom_ref+0x34>)
 8023b68:	f001 fcbc 	bl	80254e4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8023b6c:	6879      	ldr	r1, [r7, #4]
 8023b6e:	2005      	movs	r0, #5
 8023b70:	f7f5 fe94 	bl	801989c <memp_free>
}
 8023b74:	bf00      	nop
 8023b76:	3708      	adds	r7, #8
 8023b78:	46bd      	mov	sp, r7
 8023b7a:	bd80      	pop	{r7, pc}
 8023b7c:	0802cce8 	.word	0x0802cce8
 8023b80:	0802cea0 	.word	0x0802cea0
 8023b84:	0802cd30 	.word	0x0802cd30

08023b88 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8023b88:	b580      	push	{r7, lr}
 8023b8a:	b084      	sub	sp, #16
 8023b8c:	af00      	add	r7, sp, #0
 8023b8e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8023b90:	687b      	ldr	r3, [r7, #4]
 8023b92:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8023b94:	68fb      	ldr	r3, [r7, #12]
 8023b96:	2b00      	cmp	r3, #0
 8023b98:	d106      	bne.n	8023ba8 <ipfrag_free_pbuf_custom+0x20>
 8023b9a:	4b11      	ldr	r3, [pc, #68]	@ (8023be0 <ipfrag_free_pbuf_custom+0x58>)
 8023b9c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8023ba0:	4910      	ldr	r1, [pc, #64]	@ (8023be4 <ipfrag_free_pbuf_custom+0x5c>)
 8023ba2:	4811      	ldr	r0, [pc, #68]	@ (8023be8 <ipfrag_free_pbuf_custom+0x60>)
 8023ba4:	f001 fc9e 	bl	80254e4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8023ba8:	68fa      	ldr	r2, [r7, #12]
 8023baa:	687b      	ldr	r3, [r7, #4]
 8023bac:	429a      	cmp	r2, r3
 8023bae:	d006      	beq.n	8023bbe <ipfrag_free_pbuf_custom+0x36>
 8023bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8023be0 <ipfrag_free_pbuf_custom+0x58>)
 8023bb2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8023bb6:	490d      	ldr	r1, [pc, #52]	@ (8023bec <ipfrag_free_pbuf_custom+0x64>)
 8023bb8:	480b      	ldr	r0, [pc, #44]	@ (8023be8 <ipfrag_free_pbuf_custom+0x60>)
 8023bba:	f001 fc93 	bl	80254e4 <iprintf>
  if (pcr->original != NULL) {
 8023bbe:	68fb      	ldr	r3, [r7, #12]
 8023bc0:	695b      	ldr	r3, [r3, #20]
 8023bc2:	2b00      	cmp	r3, #0
 8023bc4:	d004      	beq.n	8023bd0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8023bc6:	68fb      	ldr	r3, [r7, #12]
 8023bc8:	695b      	ldr	r3, [r3, #20]
 8023bca:	4618      	mov	r0, r3
 8023bcc:	f7f6 fd3c 	bl	801a648 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8023bd0:	68f8      	ldr	r0, [r7, #12]
 8023bd2:	f7ff ffbd 	bl	8023b50 <ip_frag_free_pbuf_custom_ref>
}
 8023bd6:	bf00      	nop
 8023bd8:	3710      	adds	r7, #16
 8023bda:	46bd      	mov	sp, r7
 8023bdc:	bd80      	pop	{r7, pc}
 8023bde:	bf00      	nop
 8023be0:	0802cce8 	.word	0x0802cce8
 8023be4:	0802ceac 	.word	0x0802ceac
 8023be8:	0802cd30 	.word	0x0802cd30
 8023bec:	0802ceb8 	.word	0x0802ceb8

08023bf0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8023bf0:	b580      	push	{r7, lr}
 8023bf2:	b094      	sub	sp, #80	@ 0x50
 8023bf4:	af02      	add	r7, sp, #8
 8023bf6:	60f8      	str	r0, [r7, #12]
 8023bf8:	60b9      	str	r1, [r7, #8]
 8023bfa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8023bfc:	2300      	movs	r3, #0
 8023bfe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8023c02:	68bb      	ldr	r3, [r7, #8]
 8023c04:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8023c06:	3b14      	subs	r3, #20
 8023c08:	2b00      	cmp	r3, #0
 8023c0a:	da00      	bge.n	8023c0e <ip4_frag+0x1e>
 8023c0c:	3307      	adds	r3, #7
 8023c0e:	10db      	asrs	r3, r3, #3
 8023c10:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8023c12:	2314      	movs	r3, #20
 8023c14:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8023c16:	68fb      	ldr	r3, [r7, #12]
 8023c18:	685b      	ldr	r3, [r3, #4]
 8023c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8023c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023c1e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8023c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023c22:	781b      	ldrb	r3, [r3, #0]
 8023c24:	f003 030f 	and.w	r3, r3, #15
 8023c28:	b2db      	uxtb	r3, r3
 8023c2a:	009b      	lsls	r3, r3, #2
 8023c2c:	b2db      	uxtb	r3, r3
 8023c2e:	2b14      	cmp	r3, #20
 8023c30:	d002      	beq.n	8023c38 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8023c32:	f06f 0305 	mvn.w	r3, #5
 8023c36:	e110      	b.n	8023e5a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8023c38:	68fb      	ldr	r3, [r7, #12]
 8023c3a:	895b      	ldrh	r3, [r3, #10]
 8023c3c:	2b13      	cmp	r3, #19
 8023c3e:	d809      	bhi.n	8023c54 <ip4_frag+0x64>
 8023c40:	4b88      	ldr	r3, [pc, #544]	@ (8023e64 <ip4_frag+0x274>)
 8023c42:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8023c46:	4988      	ldr	r1, [pc, #544]	@ (8023e68 <ip4_frag+0x278>)
 8023c48:	4888      	ldr	r0, [pc, #544]	@ (8023e6c <ip4_frag+0x27c>)
 8023c4a:	f001 fc4b 	bl	80254e4 <iprintf>
 8023c4e:	f06f 0305 	mvn.w	r3, #5
 8023c52:	e102      	b.n	8023e5a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8023c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023c56:	88db      	ldrh	r3, [r3, #6]
 8023c58:	b29b      	uxth	r3, r3
 8023c5a:	4618      	mov	r0, r3
 8023c5c:	f7f5 f818 	bl	8018c90 <lwip_htons>
 8023c60:	4603      	mov	r3, r0
 8023c62:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8023c64:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8023c66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023c6a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8023c6e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8023c70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8023c74:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8023c76:	68fb      	ldr	r3, [r7, #12]
 8023c78:	891b      	ldrh	r3, [r3, #8]
 8023c7a:	3b14      	subs	r3, #20
 8023c7c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8023c80:	e0e1      	b.n	8023e46 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8023c82:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8023c84:	00db      	lsls	r3, r3, #3
 8023c86:	b29b      	uxth	r3, r3
 8023c88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8023c8c:	4293      	cmp	r3, r2
 8023c8e:	bf28      	it	cs
 8023c90:	4613      	movcs	r3, r2
 8023c92:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8023c94:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8023c98:	2114      	movs	r1, #20
 8023c9a:	200e      	movs	r0, #14
 8023c9c:	f7f6 f9be 	bl	801a01c <pbuf_alloc>
 8023ca0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8023ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023ca4:	2b00      	cmp	r3, #0
 8023ca6:	f000 80d5 	beq.w	8023e54 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8023caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023cac:	895b      	ldrh	r3, [r3, #10]
 8023cae:	2b13      	cmp	r3, #19
 8023cb0:	d806      	bhi.n	8023cc0 <ip4_frag+0xd0>
 8023cb2:	4b6c      	ldr	r3, [pc, #432]	@ (8023e64 <ip4_frag+0x274>)
 8023cb4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8023cb8:	496d      	ldr	r1, [pc, #436]	@ (8023e70 <ip4_frag+0x280>)
 8023cba:	486c      	ldr	r0, [pc, #432]	@ (8023e6c <ip4_frag+0x27c>)
 8023cbc:	f001 fc12 	bl	80254e4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8023cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023cc2:	685b      	ldr	r3, [r3, #4]
 8023cc4:	2214      	movs	r2, #20
 8023cc6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8023cc8:	4618      	mov	r0, r3
 8023cca:	f001 fd98 	bl	80257fe <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8023cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023cd0:	685b      	ldr	r3, [r3, #4]
 8023cd2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8023cd4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8023cd6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8023cda:	e064      	b.n	8023da6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8023cdc:	68fb      	ldr	r3, [r7, #12]
 8023cde:	895a      	ldrh	r2, [r3, #10]
 8023ce0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8023ce2:	1ad3      	subs	r3, r2, r3
 8023ce4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8023ce6:	68fb      	ldr	r3, [r7, #12]
 8023ce8:	895b      	ldrh	r3, [r3, #10]
 8023cea:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8023cec:	429a      	cmp	r2, r3
 8023cee:	d906      	bls.n	8023cfe <ip4_frag+0x10e>
 8023cf0:	4b5c      	ldr	r3, [pc, #368]	@ (8023e64 <ip4_frag+0x274>)
 8023cf2:	f240 322d 	movw	r2, #813	@ 0x32d
 8023cf6:	495f      	ldr	r1, [pc, #380]	@ (8023e74 <ip4_frag+0x284>)
 8023cf8:	485c      	ldr	r0, [pc, #368]	@ (8023e6c <ip4_frag+0x27c>)
 8023cfa:	f001 fbf3 	bl	80254e4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8023cfe:	8bfa      	ldrh	r2, [r7, #30]
 8023d00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8023d04:	4293      	cmp	r3, r2
 8023d06:	bf28      	it	cs
 8023d08:	4613      	movcs	r3, r2
 8023d0a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8023d0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8023d12:	2b00      	cmp	r3, #0
 8023d14:	d105      	bne.n	8023d22 <ip4_frag+0x132>
        poff = 0;
 8023d16:	2300      	movs	r3, #0
 8023d18:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8023d1a:	68fb      	ldr	r3, [r7, #12]
 8023d1c:	681b      	ldr	r3, [r3, #0]
 8023d1e:	60fb      	str	r3, [r7, #12]
        continue;
 8023d20:	e041      	b.n	8023da6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8023d22:	f7ff ff0d 	bl	8023b40 <ip_frag_alloc_pbuf_custom_ref>
 8023d26:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8023d28:	69bb      	ldr	r3, [r7, #24]
 8023d2a:	2b00      	cmp	r3, #0
 8023d2c:	d103      	bne.n	8023d36 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8023d2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023d30:	f7f6 fc8a 	bl	801a648 <pbuf_free>
        goto memerr;
 8023d34:	e08f      	b.n	8023e56 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8023d36:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8023d38:	68fb      	ldr	r3, [r7, #12]
 8023d3a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8023d3c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8023d3e:	4413      	add	r3, r2
 8023d40:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8023d44:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8023d48:	9201      	str	r2, [sp, #4]
 8023d4a:	9300      	str	r3, [sp, #0]
 8023d4c:	4603      	mov	r3, r0
 8023d4e:	2241      	movs	r2, #65	@ 0x41
 8023d50:	2000      	movs	r0, #0
 8023d52:	f7f6 fa8d 	bl	801a270 <pbuf_alloced_custom>
 8023d56:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8023d58:	697b      	ldr	r3, [r7, #20]
 8023d5a:	2b00      	cmp	r3, #0
 8023d5c:	d106      	bne.n	8023d6c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8023d5e:	69b8      	ldr	r0, [r7, #24]
 8023d60:	f7ff fef6 	bl	8023b50 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8023d64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023d66:	f7f6 fc6f 	bl	801a648 <pbuf_free>
        goto memerr;
 8023d6a:	e074      	b.n	8023e56 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8023d6c:	68f8      	ldr	r0, [r7, #12]
 8023d6e:	f7f6 fd11 	bl	801a794 <pbuf_ref>
      pcr->original = p;
 8023d72:	69bb      	ldr	r3, [r7, #24]
 8023d74:	68fa      	ldr	r2, [r7, #12]
 8023d76:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8023d78:	69bb      	ldr	r3, [r7, #24]
 8023d7a:	4a3f      	ldr	r2, [pc, #252]	@ (8023e78 <ip4_frag+0x288>)
 8023d7c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8023d7e:	6979      	ldr	r1, [r7, #20]
 8023d80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023d82:	f7f6 fd2f 	bl	801a7e4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8023d86:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8023d8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8023d8e:	1ad3      	subs	r3, r2, r3
 8023d90:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8023d94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8023d98:	2b00      	cmp	r3, #0
 8023d9a:	d004      	beq.n	8023da6 <ip4_frag+0x1b6>
        poff = 0;
 8023d9c:	2300      	movs	r3, #0
 8023d9e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8023da0:	68fb      	ldr	r3, [r7, #12]
 8023da2:	681b      	ldr	r3, [r3, #0]
 8023da4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8023da6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8023daa:	2b00      	cmp	r3, #0
 8023dac:	d196      	bne.n	8023cdc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8023dae:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8023db0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8023db4:	4413      	add	r3, r2
 8023db6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8023db8:	68bb      	ldr	r3, [r7, #8]
 8023dba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8023dbc:	f1a3 0213 	sub.w	r2, r3, #19
 8023dc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8023dc4:	429a      	cmp	r2, r3
 8023dc6:	bfcc      	ite	gt
 8023dc8:	2301      	movgt	r3, #1
 8023dca:	2300      	movle	r3, #0
 8023dcc:	b2db      	uxtb	r3, r3
 8023dce:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8023dd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8023dd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023dd8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8023dda:	6a3b      	ldr	r3, [r7, #32]
 8023ddc:	2b00      	cmp	r3, #0
 8023dde:	d002      	beq.n	8023de6 <ip4_frag+0x1f6>
 8023de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023de2:	2b00      	cmp	r3, #0
 8023de4:	d003      	beq.n	8023dee <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8023de6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8023de8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8023dec:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8023dee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8023df0:	4618      	mov	r0, r3
 8023df2:	f7f4 ff4d 	bl	8018c90 <lwip_htons>
 8023df6:	4603      	mov	r3, r0
 8023df8:	461a      	mov	r2, r3
 8023dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023dfc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8023dfe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8023e00:	3314      	adds	r3, #20
 8023e02:	b29b      	uxth	r3, r3
 8023e04:	4618      	mov	r0, r3
 8023e06:	f7f4 ff43 	bl	8018c90 <lwip_htons>
 8023e0a:	4603      	mov	r3, r0
 8023e0c:	461a      	mov	r2, r3
 8023e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023e10:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8023e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023e14:	2200      	movs	r2, #0
 8023e16:	729a      	strb	r2, [r3, #10]
 8023e18:	2200      	movs	r2, #0
 8023e1a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8023e1c:	68bb      	ldr	r3, [r7, #8]
 8023e1e:	695b      	ldr	r3, [r3, #20]
 8023e20:	687a      	ldr	r2, [r7, #4]
 8023e22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8023e24:	68b8      	ldr	r0, [r7, #8]
 8023e26:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8023e28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023e2a:	f7f6 fc0d 	bl	801a648 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8023e2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8023e32:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8023e34:	1ad3      	subs	r3, r2, r3
 8023e36:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8023e3a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8023e3e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8023e40:	4413      	add	r3, r2
 8023e42:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8023e46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8023e4a:	2b00      	cmp	r3, #0
 8023e4c:	f47f af19 	bne.w	8023c82 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8023e50:	2300      	movs	r3, #0
 8023e52:	e002      	b.n	8023e5a <ip4_frag+0x26a>
      goto memerr;
 8023e54:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8023e56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8023e5a:	4618      	mov	r0, r3
 8023e5c:	3748      	adds	r7, #72	@ 0x48
 8023e5e:	46bd      	mov	sp, r7
 8023e60:	bd80      	pop	{r7, pc}
 8023e62:	bf00      	nop
 8023e64:	0802cce8 	.word	0x0802cce8
 8023e68:	0802cec4 	.word	0x0802cec4
 8023e6c:	0802cd30 	.word	0x0802cd30
 8023e70:	0802cee0 	.word	0x0802cee0
 8023e74:	0802cf00 	.word	0x0802cf00
 8023e78:	08023b89 	.word	0x08023b89

08023e7c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8023e7c:	b580      	push	{r7, lr}
 8023e7e:	b086      	sub	sp, #24
 8023e80:	af00      	add	r7, sp, #0
 8023e82:	6078      	str	r0, [r7, #4]
 8023e84:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8023e86:	230e      	movs	r3, #14
 8023e88:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8023e8a:	687b      	ldr	r3, [r7, #4]
 8023e8c:	895b      	ldrh	r3, [r3, #10]
 8023e8e:	2b0e      	cmp	r3, #14
 8023e90:	d96e      	bls.n	8023f70 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8023e92:	687b      	ldr	r3, [r7, #4]
 8023e94:	7bdb      	ldrb	r3, [r3, #15]
 8023e96:	2b00      	cmp	r3, #0
 8023e98:	d106      	bne.n	8023ea8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8023e9a:	683b      	ldr	r3, [r7, #0]
 8023e9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8023ea0:	3301      	adds	r3, #1
 8023ea2:	b2da      	uxtb	r2, r3
 8023ea4:	687b      	ldr	r3, [r7, #4]
 8023ea6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8023ea8:	687b      	ldr	r3, [r7, #4]
 8023eaa:	685b      	ldr	r3, [r3, #4]
 8023eac:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8023eae:	693b      	ldr	r3, [r7, #16]
 8023eb0:	7b1a      	ldrb	r2, [r3, #12]
 8023eb2:	7b5b      	ldrb	r3, [r3, #13]
 8023eb4:	021b      	lsls	r3, r3, #8
 8023eb6:	4313      	orrs	r3, r2
 8023eb8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8023eba:	693b      	ldr	r3, [r7, #16]
 8023ebc:	781b      	ldrb	r3, [r3, #0]
 8023ebe:	f003 0301 	and.w	r3, r3, #1
 8023ec2:	2b00      	cmp	r3, #0
 8023ec4:	d023      	beq.n	8023f0e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8023ec6:	693b      	ldr	r3, [r7, #16]
 8023ec8:	781b      	ldrb	r3, [r3, #0]
 8023eca:	2b01      	cmp	r3, #1
 8023ecc:	d10f      	bne.n	8023eee <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8023ece:	693b      	ldr	r3, [r7, #16]
 8023ed0:	785b      	ldrb	r3, [r3, #1]
 8023ed2:	2b00      	cmp	r3, #0
 8023ed4:	d11b      	bne.n	8023f0e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8023ed6:	693b      	ldr	r3, [r7, #16]
 8023ed8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8023eda:	2b5e      	cmp	r3, #94	@ 0x5e
 8023edc:	d117      	bne.n	8023f0e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8023ede:	687b      	ldr	r3, [r7, #4]
 8023ee0:	7b5b      	ldrb	r3, [r3, #13]
 8023ee2:	f043 0310 	orr.w	r3, r3, #16
 8023ee6:	b2da      	uxtb	r2, r3
 8023ee8:	687b      	ldr	r3, [r7, #4]
 8023eea:	735a      	strb	r2, [r3, #13]
 8023eec:	e00f      	b.n	8023f0e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8023eee:	693b      	ldr	r3, [r7, #16]
 8023ef0:	2206      	movs	r2, #6
 8023ef2:	4928      	ldr	r1, [pc, #160]	@ (8023f94 <ethernet_input+0x118>)
 8023ef4:	4618      	mov	r0, r3
 8023ef6:	f001 fbb7 	bl	8025668 <memcmp>
 8023efa:	4603      	mov	r3, r0
 8023efc:	2b00      	cmp	r3, #0
 8023efe:	d106      	bne.n	8023f0e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8023f00:	687b      	ldr	r3, [r7, #4]
 8023f02:	7b5b      	ldrb	r3, [r3, #13]
 8023f04:	f043 0308 	orr.w	r3, r3, #8
 8023f08:	b2da      	uxtb	r2, r3
 8023f0a:	687b      	ldr	r3, [r7, #4]
 8023f0c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8023f0e:	89fb      	ldrh	r3, [r7, #14]
 8023f10:	2b08      	cmp	r3, #8
 8023f12:	d003      	beq.n	8023f1c <ethernet_input+0xa0>
 8023f14:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8023f18:	d014      	beq.n	8023f44 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8023f1a:	e032      	b.n	8023f82 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8023f1c:	683b      	ldr	r3, [r7, #0]
 8023f1e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8023f22:	f003 0308 	and.w	r3, r3, #8
 8023f26:	2b00      	cmp	r3, #0
 8023f28:	d024      	beq.n	8023f74 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8023f2a:	8afb      	ldrh	r3, [r7, #22]
 8023f2c:	4619      	mov	r1, r3
 8023f2e:	6878      	ldr	r0, [r7, #4]
 8023f30:	f7f6 fad2 	bl	801a4d8 <pbuf_remove_header>
 8023f34:	4603      	mov	r3, r0
 8023f36:	2b00      	cmp	r3, #0
 8023f38:	d11e      	bne.n	8023f78 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8023f3a:	6839      	ldr	r1, [r7, #0]
 8023f3c:	6878      	ldr	r0, [r7, #4]
 8023f3e:	f7fe fde3 	bl	8022b08 <ip4_input>
      break;
 8023f42:	e013      	b.n	8023f6c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8023f44:	683b      	ldr	r3, [r7, #0]
 8023f46:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8023f4a:	f003 0308 	and.w	r3, r3, #8
 8023f4e:	2b00      	cmp	r3, #0
 8023f50:	d014      	beq.n	8023f7c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8023f52:	8afb      	ldrh	r3, [r7, #22]
 8023f54:	4619      	mov	r1, r3
 8023f56:	6878      	ldr	r0, [r7, #4]
 8023f58:	f7f6 fabe 	bl	801a4d8 <pbuf_remove_header>
 8023f5c:	4603      	mov	r3, r0
 8023f5e:	2b00      	cmp	r3, #0
 8023f60:	d10e      	bne.n	8023f80 <ethernet_input+0x104>
        etharp_input(p, netif);
 8023f62:	6839      	ldr	r1, [r7, #0]
 8023f64:	6878      	ldr	r0, [r7, #4]
 8023f66:	f7fd ff5d 	bl	8021e24 <etharp_input>
      break;
 8023f6a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8023f6c:	2300      	movs	r3, #0
 8023f6e:	e00c      	b.n	8023f8a <ethernet_input+0x10e>
    goto free_and_return;
 8023f70:	bf00      	nop
 8023f72:	e006      	b.n	8023f82 <ethernet_input+0x106>
        goto free_and_return;
 8023f74:	bf00      	nop
 8023f76:	e004      	b.n	8023f82 <ethernet_input+0x106>
        goto free_and_return;
 8023f78:	bf00      	nop
 8023f7a:	e002      	b.n	8023f82 <ethernet_input+0x106>
        goto free_and_return;
 8023f7c:	bf00      	nop
 8023f7e:	e000      	b.n	8023f82 <ethernet_input+0x106>
        goto free_and_return;
 8023f80:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8023f82:	6878      	ldr	r0, [r7, #4]
 8023f84:	f7f6 fb60 	bl	801a648 <pbuf_free>
  return ERR_OK;
 8023f88:	2300      	movs	r3, #0
}
 8023f8a:	4618      	mov	r0, r3
 8023f8c:	3718      	adds	r7, #24
 8023f8e:	46bd      	mov	sp, r7
 8023f90:	bd80      	pop	{r7, pc}
 8023f92:	bf00      	nop
 8023f94:	0802d158 	.word	0x0802d158

08023f98 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8023f98:	b580      	push	{r7, lr}
 8023f9a:	b086      	sub	sp, #24
 8023f9c:	af00      	add	r7, sp, #0
 8023f9e:	60f8      	str	r0, [r7, #12]
 8023fa0:	60b9      	str	r1, [r7, #8]
 8023fa2:	607a      	str	r2, [r7, #4]
 8023fa4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8023fa6:	8c3b      	ldrh	r3, [r7, #32]
 8023fa8:	4618      	mov	r0, r3
 8023faa:	f7f4 fe71 	bl	8018c90 <lwip_htons>
 8023fae:	4603      	mov	r3, r0
 8023fb0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8023fb2:	210e      	movs	r1, #14
 8023fb4:	68b8      	ldr	r0, [r7, #8]
 8023fb6:	f7f6 fa7f 	bl	801a4b8 <pbuf_add_header>
 8023fba:	4603      	mov	r3, r0
 8023fbc:	2b00      	cmp	r3, #0
 8023fbe:	d125      	bne.n	802400c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8023fc0:	68bb      	ldr	r3, [r7, #8]
 8023fc2:	685b      	ldr	r3, [r3, #4]
 8023fc4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8023fc6:	693b      	ldr	r3, [r7, #16]
 8023fc8:	8afa      	ldrh	r2, [r7, #22]
 8023fca:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8023fcc:	693b      	ldr	r3, [r7, #16]
 8023fce:	2206      	movs	r2, #6
 8023fd0:	6839      	ldr	r1, [r7, #0]
 8023fd2:	4618      	mov	r0, r3
 8023fd4:	f001 fc13 	bl	80257fe <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8023fd8:	693b      	ldr	r3, [r7, #16]
 8023fda:	3306      	adds	r3, #6
 8023fdc:	2206      	movs	r2, #6
 8023fde:	6879      	ldr	r1, [r7, #4]
 8023fe0:	4618      	mov	r0, r3
 8023fe2:	f001 fc0c 	bl	80257fe <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8023fe6:	68fb      	ldr	r3, [r7, #12]
 8023fe8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8023fec:	2b06      	cmp	r3, #6
 8023fee:	d006      	beq.n	8023ffe <ethernet_output+0x66>
 8023ff0:	4b0a      	ldr	r3, [pc, #40]	@ (802401c <ethernet_output+0x84>)
 8023ff2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8023ff6:	490a      	ldr	r1, [pc, #40]	@ (8024020 <ethernet_output+0x88>)
 8023ff8:	480a      	ldr	r0, [pc, #40]	@ (8024024 <ethernet_output+0x8c>)
 8023ffa:	f001 fa73 	bl	80254e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8023ffe:	68fb      	ldr	r3, [r7, #12]
 8024000:	699b      	ldr	r3, [r3, #24]
 8024002:	68b9      	ldr	r1, [r7, #8]
 8024004:	68f8      	ldr	r0, [r7, #12]
 8024006:	4798      	blx	r3
 8024008:	4603      	mov	r3, r0
 802400a:	e002      	b.n	8024012 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 802400c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 802400e:	f06f 0301 	mvn.w	r3, #1
}
 8024012:	4618      	mov	r0, r3
 8024014:	3718      	adds	r7, #24
 8024016:	46bd      	mov	sp, r7
 8024018:	bd80      	pop	{r7, pc}
 802401a:	bf00      	nop
 802401c:	0802cf10 	.word	0x0802cf10
 8024020:	0802cf48 	.word	0x0802cf48
 8024024:	0802cf7c 	.word	0x0802cf7c

08024028 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8024028:	b580      	push	{r7, lr}
 802402a:	b086      	sub	sp, #24
 802402c:	af00      	add	r7, sp, #0
 802402e:	6078      	str	r0, [r7, #4]
 8024030:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8024032:	683b      	ldr	r3, [r7, #0]
 8024034:	60bb      	str	r3, [r7, #8]
 8024036:	2304      	movs	r3, #4
 8024038:	60fb      	str	r3, [r7, #12]
 802403a:	2300      	movs	r3, #0
 802403c:	613b      	str	r3, [r7, #16]
 802403e:	2300      	movs	r3, #0
 8024040:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8024042:	f107 0308 	add.w	r3, r7, #8
 8024046:	2100      	movs	r1, #0
 8024048:	4618      	mov	r0, r3
 802404a:	f7ee fd24 	bl	8012a96 <osMessageCreate>
 802404e:	4602      	mov	r2, r0
 8024050:	687b      	ldr	r3, [r7, #4]
 8024052:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8024054:	687b      	ldr	r3, [r7, #4]
 8024056:	681b      	ldr	r3, [r3, #0]
 8024058:	2b00      	cmp	r3, #0
 802405a:	d102      	bne.n	8024062 <sys_mbox_new+0x3a>
    return ERR_MEM;
 802405c:	f04f 33ff 	mov.w	r3, #4294967295
 8024060:	e000      	b.n	8024064 <sys_mbox_new+0x3c>

  return ERR_OK;
 8024062:	2300      	movs	r3, #0
}
 8024064:	4618      	mov	r0, r3
 8024066:	3718      	adds	r7, #24
 8024068:	46bd      	mov	sp, r7
 802406a:	bd80      	pop	{r7, pc}

0802406c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 802406c:	b580      	push	{r7, lr}
 802406e:	b082      	sub	sp, #8
 8024070:	af00      	add	r7, sp, #0
 8024072:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8024074:	687b      	ldr	r3, [r7, #4]
 8024076:	681b      	ldr	r3, [r3, #0]
 8024078:	4618      	mov	r0, r3
 802407a:	f7ee fde9 	bl	8012c50 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 802407e:	687b      	ldr	r3, [r7, #4]
 8024080:	681b      	ldr	r3, [r3, #0]
 8024082:	4618      	mov	r0, r3
 8024084:	f7ee fdfa 	bl	8012c7c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8024088:	bf00      	nop
 802408a:	3708      	adds	r7, #8
 802408c:	46bd      	mov	sp, r7
 802408e:	bd80      	pop	{r7, pc}

08024090 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8024090:	b580      	push	{r7, lr}
 8024092:	b084      	sub	sp, #16
 8024094:	af00      	add	r7, sp, #0
 8024096:	6078      	str	r0, [r7, #4]
 8024098:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 802409a:	687b      	ldr	r3, [r7, #4]
 802409c:	681b      	ldr	r3, [r3, #0]
 802409e:	6839      	ldr	r1, [r7, #0]
 80240a0:	2200      	movs	r2, #0
 80240a2:	4618      	mov	r0, r3
 80240a4:	f7ee fd20 	bl	8012ae8 <osMessagePut>
 80240a8:	4603      	mov	r3, r0
 80240aa:	2b00      	cmp	r3, #0
 80240ac:	d102      	bne.n	80240b4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80240ae:	2300      	movs	r3, #0
 80240b0:	73fb      	strb	r3, [r7, #15]
 80240b2:	e001      	b.n	80240b8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80240b4:	23ff      	movs	r3, #255	@ 0xff
 80240b6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80240b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80240bc:	4618      	mov	r0, r3
 80240be:	3710      	adds	r7, #16
 80240c0:	46bd      	mov	sp, r7
 80240c2:	bd80      	pop	{r7, pc}

080240c4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80240c4:	b580      	push	{r7, lr}
 80240c6:	b08c      	sub	sp, #48	@ 0x30
 80240c8:	af00      	add	r7, sp, #0
 80240ca:	61f8      	str	r0, [r7, #28]
 80240cc:	61b9      	str	r1, [r7, #24]
 80240ce:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80240d0:	f7ee fb0c 	bl	80126ec <osKernelSysTick>
 80240d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80240d6:	697b      	ldr	r3, [r7, #20]
 80240d8:	2b00      	cmp	r3, #0
 80240da:	d017      	beq.n	802410c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80240dc:	69fb      	ldr	r3, [r7, #28]
 80240de:	6819      	ldr	r1, [r3, #0]
 80240e0:	f107 0320 	add.w	r3, r7, #32
 80240e4:	697a      	ldr	r2, [r7, #20]
 80240e6:	4618      	mov	r0, r3
 80240e8:	f7ee fd3e 	bl	8012b68 <osMessageGet>

    if(event.status == osEventMessage)
 80240ec:	6a3b      	ldr	r3, [r7, #32]
 80240ee:	2b10      	cmp	r3, #16
 80240f0:	d109      	bne.n	8024106 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80240f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80240f4:	461a      	mov	r2, r3
 80240f6:	69bb      	ldr	r3, [r7, #24]
 80240f8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80240fa:	f7ee faf7 	bl	80126ec <osKernelSysTick>
 80240fe:	4602      	mov	r2, r0
 8024100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024102:	1ad3      	subs	r3, r2, r3
 8024104:	e019      	b.n	802413a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8024106:	f04f 33ff 	mov.w	r3, #4294967295
 802410a:	e016      	b.n	802413a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 802410c:	69fb      	ldr	r3, [r7, #28]
 802410e:	6819      	ldr	r1, [r3, #0]
 8024110:	463b      	mov	r3, r7
 8024112:	f04f 32ff 	mov.w	r2, #4294967295
 8024116:	4618      	mov	r0, r3
 8024118:	f7ee fd26 	bl	8012b68 <osMessageGet>
 802411c:	f107 0320 	add.w	r3, r7, #32
 8024120:	463a      	mov	r2, r7
 8024122:	ca07      	ldmia	r2, {r0, r1, r2}
 8024124:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8024128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802412a:	461a      	mov	r2, r3
 802412c:	69bb      	ldr	r3, [r7, #24]
 802412e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8024130:	f7ee fadc 	bl	80126ec <osKernelSysTick>
 8024134:	4602      	mov	r2, r0
 8024136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024138:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 802413a:	4618      	mov	r0, r3
 802413c:	3730      	adds	r7, #48	@ 0x30
 802413e:	46bd      	mov	sp, r7
 8024140:	bd80      	pop	{r7, pc}

08024142 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8024142:	b580      	push	{r7, lr}
 8024144:	b086      	sub	sp, #24
 8024146:	af00      	add	r7, sp, #0
 8024148:	6078      	str	r0, [r7, #4]
 802414a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 802414c:	687b      	ldr	r3, [r7, #4]
 802414e:	6819      	ldr	r1, [r3, #0]
 8024150:	f107 030c 	add.w	r3, r7, #12
 8024154:	2200      	movs	r2, #0
 8024156:	4618      	mov	r0, r3
 8024158:	f7ee fd06 	bl	8012b68 <osMessageGet>

  if(event.status == osEventMessage)
 802415c:	68fb      	ldr	r3, [r7, #12]
 802415e:	2b10      	cmp	r3, #16
 8024160:	d105      	bne.n	802416e <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8024162:	693b      	ldr	r3, [r7, #16]
 8024164:	461a      	mov	r2, r3
 8024166:	683b      	ldr	r3, [r7, #0]
 8024168:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 802416a:	2300      	movs	r3, #0
 802416c:	e001      	b.n	8024172 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 802416e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8024172:	4618      	mov	r0, r3
 8024174:	3718      	adds	r7, #24
 8024176:	46bd      	mov	sp, r7
 8024178:	bd80      	pop	{r7, pc}

0802417a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 802417a:	b480      	push	{r7}
 802417c:	b083      	sub	sp, #12
 802417e:	af00      	add	r7, sp, #0
 8024180:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8024182:	687b      	ldr	r3, [r7, #4]
 8024184:	681b      	ldr	r3, [r3, #0]
 8024186:	2b00      	cmp	r3, #0
 8024188:	d101      	bne.n	802418e <sys_mbox_valid+0x14>
    return 0;
 802418a:	2300      	movs	r3, #0
 802418c:	e000      	b.n	8024190 <sys_mbox_valid+0x16>
  else
    return 1;
 802418e:	2301      	movs	r3, #1
}
 8024190:	4618      	mov	r0, r3
 8024192:	370c      	adds	r7, #12
 8024194:	46bd      	mov	sp, r7
 8024196:	f85d 7b04 	ldr.w	r7, [sp], #4
 802419a:	4770      	bx	lr

0802419c <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 802419c:	b480      	push	{r7}
 802419e:	b083      	sub	sp, #12
 80241a0:	af00      	add	r7, sp, #0
 80241a2:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80241a4:	687b      	ldr	r3, [r7, #4]
 80241a6:	2200      	movs	r2, #0
 80241a8:	601a      	str	r2, [r3, #0]
}
 80241aa:	bf00      	nop
 80241ac:	370c      	adds	r7, #12
 80241ae:	46bd      	mov	sp, r7
 80241b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241b4:	4770      	bx	lr

080241b6 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80241b6:	b580      	push	{r7, lr}
 80241b8:	b084      	sub	sp, #16
 80241ba:	af00      	add	r7, sp, #0
 80241bc:	6078      	str	r0, [r7, #4]
 80241be:	460b      	mov	r3, r1
 80241c0:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80241c2:	2300      	movs	r3, #0
 80241c4:	60bb      	str	r3, [r7, #8]
 80241c6:	2300      	movs	r3, #0
 80241c8:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80241ca:	f107 0308 	add.w	r3, r7, #8
 80241ce:	2101      	movs	r1, #1
 80241d0:	4618      	mov	r0, r3
 80241d2:	f7ee fb97 	bl	8012904 <osSemaphoreCreate>
 80241d6:	4602      	mov	r2, r0
 80241d8:	687b      	ldr	r3, [r7, #4]
 80241da:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80241dc:	687b      	ldr	r3, [r7, #4]
 80241de:	681b      	ldr	r3, [r3, #0]
 80241e0:	2b00      	cmp	r3, #0
 80241e2:	d102      	bne.n	80241ea <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80241e4:	f04f 33ff 	mov.w	r3, #4294967295
 80241e8:	e009      	b.n	80241fe <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80241ea:	78fb      	ldrb	r3, [r7, #3]
 80241ec:	2b00      	cmp	r3, #0
 80241ee:	d105      	bne.n	80241fc <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80241f0:	687b      	ldr	r3, [r7, #4]
 80241f2:	681b      	ldr	r3, [r3, #0]
 80241f4:	2100      	movs	r1, #0
 80241f6:	4618      	mov	r0, r3
 80241f8:	f7ee fbb6 	bl	8012968 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80241fc:	2300      	movs	r3, #0
}
 80241fe:	4618      	mov	r0, r3
 8024200:	3710      	adds	r7, #16
 8024202:	46bd      	mov	sp, r7
 8024204:	bd80      	pop	{r7, pc}

08024206 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8024206:	b580      	push	{r7, lr}
 8024208:	b084      	sub	sp, #16
 802420a:	af00      	add	r7, sp, #0
 802420c:	6078      	str	r0, [r7, #4]
 802420e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8024210:	f7ee fa6c 	bl	80126ec <osKernelSysTick>
 8024214:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8024216:	683b      	ldr	r3, [r7, #0]
 8024218:	2b00      	cmp	r3, #0
 802421a:	d011      	beq.n	8024240 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 802421c:	687b      	ldr	r3, [r7, #4]
 802421e:	681b      	ldr	r3, [r3, #0]
 8024220:	6839      	ldr	r1, [r7, #0]
 8024222:	4618      	mov	r0, r3
 8024224:	f7ee fba0 	bl	8012968 <osSemaphoreWait>
 8024228:	4603      	mov	r3, r0
 802422a:	2b00      	cmp	r3, #0
 802422c:	d105      	bne.n	802423a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 802422e:	f7ee fa5d 	bl	80126ec <osKernelSysTick>
 8024232:	4602      	mov	r2, r0
 8024234:	68fb      	ldr	r3, [r7, #12]
 8024236:	1ad3      	subs	r3, r2, r3
 8024238:	e012      	b.n	8024260 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 802423a:	f04f 33ff 	mov.w	r3, #4294967295
 802423e:	e00f      	b.n	8024260 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8024240:	bf00      	nop
 8024242:	687b      	ldr	r3, [r7, #4]
 8024244:	681b      	ldr	r3, [r3, #0]
 8024246:	f04f 31ff 	mov.w	r1, #4294967295
 802424a:	4618      	mov	r0, r3
 802424c:	f7ee fb8c 	bl	8012968 <osSemaphoreWait>
 8024250:	4603      	mov	r3, r0
 8024252:	2b00      	cmp	r3, #0
 8024254:	d1f5      	bne.n	8024242 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8024256:	f7ee fa49 	bl	80126ec <osKernelSysTick>
 802425a:	4602      	mov	r2, r0
 802425c:	68fb      	ldr	r3, [r7, #12]
 802425e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8024260:	4618      	mov	r0, r3
 8024262:	3710      	adds	r7, #16
 8024264:	46bd      	mov	sp, r7
 8024266:	bd80      	pop	{r7, pc}

08024268 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8024268:	b580      	push	{r7, lr}
 802426a:	b082      	sub	sp, #8
 802426c:	af00      	add	r7, sp, #0
 802426e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8024270:	687b      	ldr	r3, [r7, #4]
 8024272:	681b      	ldr	r3, [r3, #0]
 8024274:	4618      	mov	r0, r3
 8024276:	f7ee fbc5 	bl	8012a04 <osSemaphoreRelease>
}
 802427a:	bf00      	nop
 802427c:	3708      	adds	r7, #8
 802427e:	46bd      	mov	sp, r7
 8024280:	bd80      	pop	{r7, pc}

08024282 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8024282:	b580      	push	{r7, lr}
 8024284:	b082      	sub	sp, #8
 8024286:	af00      	add	r7, sp, #0
 8024288:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 802428a:	687b      	ldr	r3, [r7, #4]
 802428c:	681b      	ldr	r3, [r3, #0]
 802428e:	4618      	mov	r0, r3
 8024290:	f7ee fbee 	bl	8012a70 <osSemaphoreDelete>
}
 8024294:	bf00      	nop
 8024296:	3708      	adds	r7, #8
 8024298:	46bd      	mov	sp, r7
 802429a:	bd80      	pop	{r7, pc}

0802429c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 802429c:	b480      	push	{r7}
 802429e:	b083      	sub	sp, #12
 80242a0:	af00      	add	r7, sp, #0
 80242a2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80242a4:	687b      	ldr	r3, [r7, #4]
 80242a6:	681b      	ldr	r3, [r3, #0]
 80242a8:	2b00      	cmp	r3, #0
 80242aa:	d101      	bne.n	80242b0 <sys_sem_valid+0x14>
    return 0;
 80242ac:	2300      	movs	r3, #0
 80242ae:	e000      	b.n	80242b2 <sys_sem_valid+0x16>
  else
    return 1;
 80242b0:	2301      	movs	r3, #1
}
 80242b2:	4618      	mov	r0, r3
 80242b4:	370c      	adds	r7, #12
 80242b6:	46bd      	mov	sp, r7
 80242b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242bc:	4770      	bx	lr

080242be <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80242be:	b480      	push	{r7}
 80242c0:	b083      	sub	sp, #12
 80242c2:	af00      	add	r7, sp, #0
 80242c4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80242c6:	687b      	ldr	r3, [r7, #4]
 80242c8:	2200      	movs	r2, #0
 80242ca:	601a      	str	r2, [r3, #0]
}
 80242cc:	bf00      	nop
 80242ce:	370c      	adds	r7, #12
 80242d0:	46bd      	mov	sp, r7
 80242d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242d6:	4770      	bx	lr

080242d8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80242d8:	b580      	push	{r7, lr}
 80242da:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80242dc:	4803      	ldr	r0, [pc, #12]	@ (80242ec <sys_init+0x14>)
 80242de:	f7ee fa75 	bl	80127cc <osMutexCreate>
 80242e2:	4603      	mov	r3, r0
 80242e4:	4a02      	ldr	r2, [pc, #8]	@ (80242f0 <sys_init+0x18>)
 80242e6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80242e8:	bf00      	nop
 80242ea:	bd80      	pop	{r7, pc}
 80242ec:	0802d168 	.word	0x0802d168
 80242f0:	2400bfc4 	.word	0x2400bfc4

080242f4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80242f4:	b580      	push	{r7, lr}
 80242f6:	b084      	sub	sp, #16
 80242f8:	af00      	add	r7, sp, #0
 80242fa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80242fc:	2300      	movs	r3, #0
 80242fe:	60bb      	str	r3, [r7, #8]
 8024300:	2300      	movs	r3, #0
 8024302:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8024304:	f107 0308 	add.w	r3, r7, #8
 8024308:	4618      	mov	r0, r3
 802430a:	f7ee fa5f 	bl	80127cc <osMutexCreate>
 802430e:	4602      	mov	r2, r0
 8024310:	687b      	ldr	r3, [r7, #4]
 8024312:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8024314:	687b      	ldr	r3, [r7, #4]
 8024316:	681b      	ldr	r3, [r3, #0]
 8024318:	2b00      	cmp	r3, #0
 802431a:	d102      	bne.n	8024322 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 802431c:	f04f 33ff 	mov.w	r3, #4294967295
 8024320:	e000      	b.n	8024324 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8024322:	2300      	movs	r3, #0
}
 8024324:	4618      	mov	r0, r3
 8024326:	3710      	adds	r7, #16
 8024328:	46bd      	mov	sp, r7
 802432a:	bd80      	pop	{r7, pc}

0802432c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 802432c:	b580      	push	{r7, lr}
 802432e:	b082      	sub	sp, #8
 8024330:	af00      	add	r7, sp, #0
 8024332:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8024334:	687b      	ldr	r3, [r7, #4]
 8024336:	681b      	ldr	r3, [r3, #0]
 8024338:	f04f 31ff 	mov.w	r1, #4294967295
 802433c:	4618      	mov	r0, r3
 802433e:	f7ee fa5d 	bl	80127fc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8024342:	bf00      	nop
 8024344:	3708      	adds	r7, #8
 8024346:	46bd      	mov	sp, r7
 8024348:	bd80      	pop	{r7, pc}

0802434a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 802434a:	b580      	push	{r7, lr}
 802434c:	b082      	sub	sp, #8
 802434e:	af00      	add	r7, sp, #0
 8024350:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8024352:	687b      	ldr	r3, [r7, #4]
 8024354:	681b      	ldr	r3, [r3, #0]
 8024356:	4618      	mov	r0, r3
 8024358:	f7ee fa9e 	bl	8012898 <osMutexRelease>
}
 802435c:	bf00      	nop
 802435e:	3708      	adds	r7, #8
 8024360:	46bd      	mov	sp, r7
 8024362:	bd80      	pop	{r7, pc}

08024364 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8024364:	b580      	push	{r7, lr}
 8024366:	b08c      	sub	sp, #48	@ 0x30
 8024368:	af00      	add	r7, sp, #0
 802436a:	60f8      	str	r0, [r7, #12]
 802436c:	60b9      	str	r1, [r7, #8]
 802436e:	607a      	str	r2, [r7, #4]
 8024370:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8024372:	f107 0314 	add.w	r3, r7, #20
 8024376:	2200      	movs	r2, #0
 8024378:	601a      	str	r2, [r3, #0]
 802437a:	605a      	str	r2, [r3, #4]
 802437c:	609a      	str	r2, [r3, #8]
 802437e:	60da      	str	r2, [r3, #12]
 8024380:	611a      	str	r2, [r3, #16]
 8024382:	615a      	str	r2, [r3, #20]
 8024384:	619a      	str	r2, [r3, #24]
 8024386:	68fb      	ldr	r3, [r7, #12]
 8024388:	617b      	str	r3, [r7, #20]
 802438a:	68bb      	ldr	r3, [r7, #8]
 802438c:	61bb      	str	r3, [r7, #24]
 802438e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024390:	b21b      	sxth	r3, r3
 8024392:	83bb      	strh	r3, [r7, #28]
 8024394:	683b      	ldr	r3, [r7, #0]
 8024396:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8024398:	f107 0314 	add.w	r3, r7, #20
 802439c:	6879      	ldr	r1, [r7, #4]
 802439e:	4618      	mov	r0, r3
 80243a0:	f7ee f9b4 	bl	801270c <osThreadCreate>
 80243a4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80243a6:	4618      	mov	r0, r3
 80243a8:	3730      	adds	r7, #48	@ 0x30
 80243aa:	46bd      	mov	sp, r7
 80243ac:	bd80      	pop	{r7, pc}
	...

080243b0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80243b0:	b580      	push	{r7, lr}
 80243b2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80243b4:	4b04      	ldr	r3, [pc, #16]	@ (80243c8 <sys_arch_protect+0x18>)
 80243b6:	681b      	ldr	r3, [r3, #0]
 80243b8:	f04f 31ff 	mov.w	r1, #4294967295
 80243bc:	4618      	mov	r0, r3
 80243be:	f7ee fa1d 	bl	80127fc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80243c2:	2301      	movs	r3, #1
}
 80243c4:	4618      	mov	r0, r3
 80243c6:	bd80      	pop	{r7, pc}
 80243c8:	2400bfc4 	.word	0x2400bfc4

080243cc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80243cc:	b580      	push	{r7, lr}
 80243ce:	b082      	sub	sp, #8
 80243d0:	af00      	add	r7, sp, #0
 80243d2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80243d4:	4b04      	ldr	r3, [pc, #16]	@ (80243e8 <sys_arch_unprotect+0x1c>)
 80243d6:	681b      	ldr	r3, [r3, #0]
 80243d8:	4618      	mov	r0, r3
 80243da:	f7ee fa5d 	bl	8012898 <osMutexRelease>
}
 80243de:	bf00      	nop
 80243e0:	3708      	adds	r7, #8
 80243e2:	46bd      	mov	sp, r7
 80243e4:	bd80      	pop	{r7, pc}
 80243e6:	bf00      	nop
 80243e8:	2400bfc4 	.word	0x2400bfc4

080243ec <malloc>:
 80243ec:	4b02      	ldr	r3, [pc, #8]	@ (80243f8 <malloc+0xc>)
 80243ee:	4601      	mov	r1, r0
 80243f0:	6818      	ldr	r0, [r3, #0]
 80243f2:	f000 b82d 	b.w	8024450 <_malloc_r>
 80243f6:	bf00      	nop
 80243f8:	24000224 	.word	0x24000224

080243fc <free>:
 80243fc:	4b02      	ldr	r3, [pc, #8]	@ (8024408 <free+0xc>)
 80243fe:	4601      	mov	r1, r0
 8024400:	6818      	ldr	r0, [r3, #0]
 8024402:	f002 b80f 	b.w	8026424 <_free_r>
 8024406:	bf00      	nop
 8024408:	24000224 	.word	0x24000224

0802440c <sbrk_aligned>:
 802440c:	b570      	push	{r4, r5, r6, lr}
 802440e:	4e0f      	ldr	r6, [pc, #60]	@ (802444c <sbrk_aligned+0x40>)
 8024410:	460c      	mov	r4, r1
 8024412:	6831      	ldr	r1, [r6, #0]
 8024414:	4605      	mov	r5, r0
 8024416:	b911      	cbnz	r1, 802441e <sbrk_aligned+0x12>
 8024418:	f001 f9a2 	bl	8025760 <_sbrk_r>
 802441c:	6030      	str	r0, [r6, #0]
 802441e:	4621      	mov	r1, r4
 8024420:	4628      	mov	r0, r5
 8024422:	f001 f99d 	bl	8025760 <_sbrk_r>
 8024426:	1c43      	adds	r3, r0, #1
 8024428:	d103      	bne.n	8024432 <sbrk_aligned+0x26>
 802442a:	f04f 34ff 	mov.w	r4, #4294967295
 802442e:	4620      	mov	r0, r4
 8024430:	bd70      	pop	{r4, r5, r6, pc}
 8024432:	1cc4      	adds	r4, r0, #3
 8024434:	f024 0403 	bic.w	r4, r4, #3
 8024438:	42a0      	cmp	r0, r4
 802443a:	d0f8      	beq.n	802442e <sbrk_aligned+0x22>
 802443c:	1a21      	subs	r1, r4, r0
 802443e:	4628      	mov	r0, r5
 8024440:	f001 f98e 	bl	8025760 <_sbrk_r>
 8024444:	3001      	adds	r0, #1
 8024446:	d1f2      	bne.n	802442e <sbrk_aligned+0x22>
 8024448:	e7ef      	b.n	802442a <sbrk_aligned+0x1e>
 802444a:	bf00      	nop
 802444c:	2400bfc8 	.word	0x2400bfc8

08024450 <_malloc_r>:
 8024450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024454:	1ccd      	adds	r5, r1, #3
 8024456:	f025 0503 	bic.w	r5, r5, #3
 802445a:	3508      	adds	r5, #8
 802445c:	2d0c      	cmp	r5, #12
 802445e:	bf38      	it	cc
 8024460:	250c      	movcc	r5, #12
 8024462:	2d00      	cmp	r5, #0
 8024464:	4606      	mov	r6, r0
 8024466:	db01      	blt.n	802446c <_malloc_r+0x1c>
 8024468:	42a9      	cmp	r1, r5
 802446a:	d904      	bls.n	8024476 <_malloc_r+0x26>
 802446c:	230c      	movs	r3, #12
 802446e:	6033      	str	r3, [r6, #0]
 8024470:	2000      	movs	r0, #0
 8024472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024476:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802454c <_malloc_r+0xfc>
 802447a:	f000 f869 	bl	8024550 <__malloc_lock>
 802447e:	f8d8 3000 	ldr.w	r3, [r8]
 8024482:	461c      	mov	r4, r3
 8024484:	bb44      	cbnz	r4, 80244d8 <_malloc_r+0x88>
 8024486:	4629      	mov	r1, r5
 8024488:	4630      	mov	r0, r6
 802448a:	f7ff ffbf 	bl	802440c <sbrk_aligned>
 802448e:	1c43      	adds	r3, r0, #1
 8024490:	4604      	mov	r4, r0
 8024492:	d158      	bne.n	8024546 <_malloc_r+0xf6>
 8024494:	f8d8 4000 	ldr.w	r4, [r8]
 8024498:	4627      	mov	r7, r4
 802449a:	2f00      	cmp	r7, #0
 802449c:	d143      	bne.n	8024526 <_malloc_r+0xd6>
 802449e:	2c00      	cmp	r4, #0
 80244a0:	d04b      	beq.n	802453a <_malloc_r+0xea>
 80244a2:	6823      	ldr	r3, [r4, #0]
 80244a4:	4639      	mov	r1, r7
 80244a6:	4630      	mov	r0, r6
 80244a8:	eb04 0903 	add.w	r9, r4, r3
 80244ac:	f001 f958 	bl	8025760 <_sbrk_r>
 80244b0:	4581      	cmp	r9, r0
 80244b2:	d142      	bne.n	802453a <_malloc_r+0xea>
 80244b4:	6821      	ldr	r1, [r4, #0]
 80244b6:	1a6d      	subs	r5, r5, r1
 80244b8:	4629      	mov	r1, r5
 80244ba:	4630      	mov	r0, r6
 80244bc:	f7ff ffa6 	bl	802440c <sbrk_aligned>
 80244c0:	3001      	adds	r0, #1
 80244c2:	d03a      	beq.n	802453a <_malloc_r+0xea>
 80244c4:	6823      	ldr	r3, [r4, #0]
 80244c6:	442b      	add	r3, r5
 80244c8:	6023      	str	r3, [r4, #0]
 80244ca:	f8d8 3000 	ldr.w	r3, [r8]
 80244ce:	685a      	ldr	r2, [r3, #4]
 80244d0:	bb62      	cbnz	r2, 802452c <_malloc_r+0xdc>
 80244d2:	f8c8 7000 	str.w	r7, [r8]
 80244d6:	e00f      	b.n	80244f8 <_malloc_r+0xa8>
 80244d8:	6822      	ldr	r2, [r4, #0]
 80244da:	1b52      	subs	r2, r2, r5
 80244dc:	d420      	bmi.n	8024520 <_malloc_r+0xd0>
 80244de:	2a0b      	cmp	r2, #11
 80244e0:	d917      	bls.n	8024512 <_malloc_r+0xc2>
 80244e2:	1961      	adds	r1, r4, r5
 80244e4:	42a3      	cmp	r3, r4
 80244e6:	6025      	str	r5, [r4, #0]
 80244e8:	bf18      	it	ne
 80244ea:	6059      	strne	r1, [r3, #4]
 80244ec:	6863      	ldr	r3, [r4, #4]
 80244ee:	bf08      	it	eq
 80244f0:	f8c8 1000 	streq.w	r1, [r8]
 80244f4:	5162      	str	r2, [r4, r5]
 80244f6:	604b      	str	r3, [r1, #4]
 80244f8:	4630      	mov	r0, r6
 80244fa:	f000 f82f 	bl	802455c <__malloc_unlock>
 80244fe:	f104 000b 	add.w	r0, r4, #11
 8024502:	1d23      	adds	r3, r4, #4
 8024504:	f020 0007 	bic.w	r0, r0, #7
 8024508:	1ac2      	subs	r2, r0, r3
 802450a:	bf1c      	itt	ne
 802450c:	1a1b      	subne	r3, r3, r0
 802450e:	50a3      	strne	r3, [r4, r2]
 8024510:	e7af      	b.n	8024472 <_malloc_r+0x22>
 8024512:	6862      	ldr	r2, [r4, #4]
 8024514:	42a3      	cmp	r3, r4
 8024516:	bf0c      	ite	eq
 8024518:	f8c8 2000 	streq.w	r2, [r8]
 802451c:	605a      	strne	r2, [r3, #4]
 802451e:	e7eb      	b.n	80244f8 <_malloc_r+0xa8>
 8024520:	4623      	mov	r3, r4
 8024522:	6864      	ldr	r4, [r4, #4]
 8024524:	e7ae      	b.n	8024484 <_malloc_r+0x34>
 8024526:	463c      	mov	r4, r7
 8024528:	687f      	ldr	r7, [r7, #4]
 802452a:	e7b6      	b.n	802449a <_malloc_r+0x4a>
 802452c:	461a      	mov	r2, r3
 802452e:	685b      	ldr	r3, [r3, #4]
 8024530:	42a3      	cmp	r3, r4
 8024532:	d1fb      	bne.n	802452c <_malloc_r+0xdc>
 8024534:	2300      	movs	r3, #0
 8024536:	6053      	str	r3, [r2, #4]
 8024538:	e7de      	b.n	80244f8 <_malloc_r+0xa8>
 802453a:	230c      	movs	r3, #12
 802453c:	6033      	str	r3, [r6, #0]
 802453e:	4630      	mov	r0, r6
 8024540:	f000 f80c 	bl	802455c <__malloc_unlock>
 8024544:	e794      	b.n	8024470 <_malloc_r+0x20>
 8024546:	6005      	str	r5, [r0, #0]
 8024548:	e7d6      	b.n	80244f8 <_malloc_r+0xa8>
 802454a:	bf00      	nop
 802454c:	2400bfcc 	.word	0x2400bfcc

08024550 <__malloc_lock>:
 8024550:	4801      	ldr	r0, [pc, #4]	@ (8024558 <__malloc_lock+0x8>)
 8024552:	f001 b952 	b.w	80257fa <__retarget_lock_acquire_recursive>
 8024556:	bf00      	nop
 8024558:	2400c10c 	.word	0x2400c10c

0802455c <__malloc_unlock>:
 802455c:	4801      	ldr	r0, [pc, #4]	@ (8024564 <__malloc_unlock+0x8>)
 802455e:	f001 b94d 	b.w	80257fc <__retarget_lock_release_recursive>
 8024562:	bf00      	nop
 8024564:	2400c10c 	.word	0x2400c10c

08024568 <rand>:
 8024568:	4b16      	ldr	r3, [pc, #88]	@ (80245c4 <rand+0x5c>)
 802456a:	b510      	push	{r4, lr}
 802456c:	681c      	ldr	r4, [r3, #0]
 802456e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8024570:	b9b3      	cbnz	r3, 80245a0 <rand+0x38>
 8024572:	2018      	movs	r0, #24
 8024574:	f7ff ff3a 	bl	80243ec <malloc>
 8024578:	4602      	mov	r2, r0
 802457a:	6320      	str	r0, [r4, #48]	@ 0x30
 802457c:	b920      	cbnz	r0, 8024588 <rand+0x20>
 802457e:	4b12      	ldr	r3, [pc, #72]	@ (80245c8 <rand+0x60>)
 8024580:	4812      	ldr	r0, [pc, #72]	@ (80245cc <rand+0x64>)
 8024582:	2152      	movs	r1, #82	@ 0x52
 8024584:	f001 f950 	bl	8025828 <__assert_func>
 8024588:	4911      	ldr	r1, [pc, #68]	@ (80245d0 <rand+0x68>)
 802458a:	4b12      	ldr	r3, [pc, #72]	@ (80245d4 <rand+0x6c>)
 802458c:	e9c0 1300 	strd	r1, r3, [r0]
 8024590:	4b11      	ldr	r3, [pc, #68]	@ (80245d8 <rand+0x70>)
 8024592:	6083      	str	r3, [r0, #8]
 8024594:	230b      	movs	r3, #11
 8024596:	8183      	strh	r3, [r0, #12]
 8024598:	2100      	movs	r1, #0
 802459a:	2001      	movs	r0, #1
 802459c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80245a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80245a2:	480e      	ldr	r0, [pc, #56]	@ (80245dc <rand+0x74>)
 80245a4:	690b      	ldr	r3, [r1, #16]
 80245a6:	694c      	ldr	r4, [r1, #20]
 80245a8:	4a0d      	ldr	r2, [pc, #52]	@ (80245e0 <rand+0x78>)
 80245aa:	4358      	muls	r0, r3
 80245ac:	fb02 0004 	mla	r0, r2, r4, r0
 80245b0:	fba3 3202 	umull	r3, r2, r3, r2
 80245b4:	3301      	adds	r3, #1
 80245b6:	eb40 0002 	adc.w	r0, r0, r2
 80245ba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80245be:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80245c2:	bd10      	pop	{r4, pc}
 80245c4:	24000224 	.word	0x24000224
 80245c8:	0802d170 	.word	0x0802d170
 80245cc:	0802d187 	.word	0x0802d187
 80245d0:	abcd330e 	.word	0xabcd330e
 80245d4:	e66d1234 	.word	0xe66d1234
 80245d8:	0005deec 	.word	0x0005deec
 80245dc:	5851f42d 	.word	0x5851f42d
 80245e0:	4c957f2d 	.word	0x4c957f2d

080245e4 <_strtol_l.constprop.0>:
 80245e4:	2b24      	cmp	r3, #36	@ 0x24
 80245e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80245ea:	4686      	mov	lr, r0
 80245ec:	4690      	mov	r8, r2
 80245ee:	d801      	bhi.n	80245f4 <_strtol_l.constprop.0+0x10>
 80245f0:	2b01      	cmp	r3, #1
 80245f2:	d106      	bne.n	8024602 <_strtol_l.constprop.0+0x1e>
 80245f4:	f001 f8d6 	bl	80257a4 <__errno>
 80245f8:	2316      	movs	r3, #22
 80245fa:	6003      	str	r3, [r0, #0]
 80245fc:	2000      	movs	r0, #0
 80245fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024602:	4834      	ldr	r0, [pc, #208]	@ (80246d4 <_strtol_l.constprop.0+0xf0>)
 8024604:	460d      	mov	r5, r1
 8024606:	462a      	mov	r2, r5
 8024608:	f815 4b01 	ldrb.w	r4, [r5], #1
 802460c:	5d06      	ldrb	r6, [r0, r4]
 802460e:	f016 0608 	ands.w	r6, r6, #8
 8024612:	d1f8      	bne.n	8024606 <_strtol_l.constprop.0+0x22>
 8024614:	2c2d      	cmp	r4, #45	@ 0x2d
 8024616:	d12d      	bne.n	8024674 <_strtol_l.constprop.0+0x90>
 8024618:	782c      	ldrb	r4, [r5, #0]
 802461a:	2601      	movs	r6, #1
 802461c:	1c95      	adds	r5, r2, #2
 802461e:	f033 0210 	bics.w	r2, r3, #16
 8024622:	d109      	bne.n	8024638 <_strtol_l.constprop.0+0x54>
 8024624:	2c30      	cmp	r4, #48	@ 0x30
 8024626:	d12a      	bne.n	802467e <_strtol_l.constprop.0+0x9a>
 8024628:	782a      	ldrb	r2, [r5, #0]
 802462a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802462e:	2a58      	cmp	r2, #88	@ 0x58
 8024630:	d125      	bne.n	802467e <_strtol_l.constprop.0+0x9a>
 8024632:	786c      	ldrb	r4, [r5, #1]
 8024634:	2310      	movs	r3, #16
 8024636:	3502      	adds	r5, #2
 8024638:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802463c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8024640:	2200      	movs	r2, #0
 8024642:	fbbc f9f3 	udiv	r9, ip, r3
 8024646:	4610      	mov	r0, r2
 8024648:	fb03 ca19 	mls	sl, r3, r9, ip
 802464c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8024650:	2f09      	cmp	r7, #9
 8024652:	d81b      	bhi.n	802468c <_strtol_l.constprop.0+0xa8>
 8024654:	463c      	mov	r4, r7
 8024656:	42a3      	cmp	r3, r4
 8024658:	dd27      	ble.n	80246aa <_strtol_l.constprop.0+0xc6>
 802465a:	1c57      	adds	r7, r2, #1
 802465c:	d007      	beq.n	802466e <_strtol_l.constprop.0+0x8a>
 802465e:	4581      	cmp	r9, r0
 8024660:	d320      	bcc.n	80246a4 <_strtol_l.constprop.0+0xc0>
 8024662:	d101      	bne.n	8024668 <_strtol_l.constprop.0+0x84>
 8024664:	45a2      	cmp	sl, r4
 8024666:	db1d      	blt.n	80246a4 <_strtol_l.constprop.0+0xc0>
 8024668:	fb00 4003 	mla	r0, r0, r3, r4
 802466c:	2201      	movs	r2, #1
 802466e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024672:	e7eb      	b.n	802464c <_strtol_l.constprop.0+0x68>
 8024674:	2c2b      	cmp	r4, #43	@ 0x2b
 8024676:	bf04      	itt	eq
 8024678:	782c      	ldrbeq	r4, [r5, #0]
 802467a:	1c95      	addeq	r5, r2, #2
 802467c:	e7cf      	b.n	802461e <_strtol_l.constprop.0+0x3a>
 802467e:	2b00      	cmp	r3, #0
 8024680:	d1da      	bne.n	8024638 <_strtol_l.constprop.0+0x54>
 8024682:	2c30      	cmp	r4, #48	@ 0x30
 8024684:	bf0c      	ite	eq
 8024686:	2308      	moveq	r3, #8
 8024688:	230a      	movne	r3, #10
 802468a:	e7d5      	b.n	8024638 <_strtol_l.constprop.0+0x54>
 802468c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8024690:	2f19      	cmp	r7, #25
 8024692:	d801      	bhi.n	8024698 <_strtol_l.constprop.0+0xb4>
 8024694:	3c37      	subs	r4, #55	@ 0x37
 8024696:	e7de      	b.n	8024656 <_strtol_l.constprop.0+0x72>
 8024698:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802469c:	2f19      	cmp	r7, #25
 802469e:	d804      	bhi.n	80246aa <_strtol_l.constprop.0+0xc6>
 80246a0:	3c57      	subs	r4, #87	@ 0x57
 80246a2:	e7d8      	b.n	8024656 <_strtol_l.constprop.0+0x72>
 80246a4:	f04f 32ff 	mov.w	r2, #4294967295
 80246a8:	e7e1      	b.n	802466e <_strtol_l.constprop.0+0x8a>
 80246aa:	1c53      	adds	r3, r2, #1
 80246ac:	d108      	bne.n	80246c0 <_strtol_l.constprop.0+0xdc>
 80246ae:	2322      	movs	r3, #34	@ 0x22
 80246b0:	f8ce 3000 	str.w	r3, [lr]
 80246b4:	4660      	mov	r0, ip
 80246b6:	f1b8 0f00 	cmp.w	r8, #0
 80246ba:	d0a0      	beq.n	80245fe <_strtol_l.constprop.0+0x1a>
 80246bc:	1e69      	subs	r1, r5, #1
 80246be:	e006      	b.n	80246ce <_strtol_l.constprop.0+0xea>
 80246c0:	b106      	cbz	r6, 80246c4 <_strtol_l.constprop.0+0xe0>
 80246c2:	4240      	negs	r0, r0
 80246c4:	f1b8 0f00 	cmp.w	r8, #0
 80246c8:	d099      	beq.n	80245fe <_strtol_l.constprop.0+0x1a>
 80246ca:	2a00      	cmp	r2, #0
 80246cc:	d1f6      	bne.n	80246bc <_strtol_l.constprop.0+0xd8>
 80246ce:	f8c8 1000 	str.w	r1, [r8]
 80246d2:	e794      	b.n	80245fe <_strtol_l.constprop.0+0x1a>
 80246d4:	0802d1e0 	.word	0x0802d1e0

080246d8 <_strtol_r>:
 80246d8:	f7ff bf84 	b.w	80245e4 <_strtol_l.constprop.0>

080246dc <__cvt>:
 80246dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80246de:	ed2d 8b02 	vpush	{d8}
 80246e2:	eeb0 8b40 	vmov.f64	d8, d0
 80246e6:	b085      	sub	sp, #20
 80246e8:	4617      	mov	r7, r2
 80246ea:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80246ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80246ee:	ee18 2a90 	vmov	r2, s17
 80246f2:	f025 0520 	bic.w	r5, r5, #32
 80246f6:	2a00      	cmp	r2, #0
 80246f8:	bfb6      	itet	lt
 80246fa:	222d      	movlt	r2, #45	@ 0x2d
 80246fc:	2200      	movge	r2, #0
 80246fe:	eeb1 8b40 	vneglt.f64	d8, d0
 8024702:	2d46      	cmp	r5, #70	@ 0x46
 8024704:	460c      	mov	r4, r1
 8024706:	701a      	strb	r2, [r3, #0]
 8024708:	d004      	beq.n	8024714 <__cvt+0x38>
 802470a:	2d45      	cmp	r5, #69	@ 0x45
 802470c:	d100      	bne.n	8024710 <__cvt+0x34>
 802470e:	3401      	adds	r4, #1
 8024710:	2102      	movs	r1, #2
 8024712:	e000      	b.n	8024716 <__cvt+0x3a>
 8024714:	2103      	movs	r1, #3
 8024716:	ab03      	add	r3, sp, #12
 8024718:	9301      	str	r3, [sp, #4]
 802471a:	ab02      	add	r3, sp, #8
 802471c:	9300      	str	r3, [sp, #0]
 802471e:	4622      	mov	r2, r4
 8024720:	4633      	mov	r3, r6
 8024722:	eeb0 0b48 	vmov.f64	d0, d8
 8024726:	f001 f927 	bl	8025978 <_dtoa_r>
 802472a:	2d47      	cmp	r5, #71	@ 0x47
 802472c:	d114      	bne.n	8024758 <__cvt+0x7c>
 802472e:	07fb      	lsls	r3, r7, #31
 8024730:	d50a      	bpl.n	8024748 <__cvt+0x6c>
 8024732:	1902      	adds	r2, r0, r4
 8024734:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8024738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802473c:	bf08      	it	eq
 802473e:	9203      	streq	r2, [sp, #12]
 8024740:	2130      	movs	r1, #48	@ 0x30
 8024742:	9b03      	ldr	r3, [sp, #12]
 8024744:	4293      	cmp	r3, r2
 8024746:	d319      	bcc.n	802477c <__cvt+0xa0>
 8024748:	9b03      	ldr	r3, [sp, #12]
 802474a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802474c:	1a1b      	subs	r3, r3, r0
 802474e:	6013      	str	r3, [r2, #0]
 8024750:	b005      	add	sp, #20
 8024752:	ecbd 8b02 	vpop	{d8}
 8024756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024758:	2d46      	cmp	r5, #70	@ 0x46
 802475a:	eb00 0204 	add.w	r2, r0, r4
 802475e:	d1e9      	bne.n	8024734 <__cvt+0x58>
 8024760:	7803      	ldrb	r3, [r0, #0]
 8024762:	2b30      	cmp	r3, #48	@ 0x30
 8024764:	d107      	bne.n	8024776 <__cvt+0x9a>
 8024766:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802476a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802476e:	bf1c      	itt	ne
 8024770:	f1c4 0401 	rsbne	r4, r4, #1
 8024774:	6034      	strne	r4, [r6, #0]
 8024776:	6833      	ldr	r3, [r6, #0]
 8024778:	441a      	add	r2, r3
 802477a:	e7db      	b.n	8024734 <__cvt+0x58>
 802477c:	1c5c      	adds	r4, r3, #1
 802477e:	9403      	str	r4, [sp, #12]
 8024780:	7019      	strb	r1, [r3, #0]
 8024782:	e7de      	b.n	8024742 <__cvt+0x66>

08024784 <__exponent>:
 8024784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024786:	2900      	cmp	r1, #0
 8024788:	bfba      	itte	lt
 802478a:	4249      	neglt	r1, r1
 802478c:	232d      	movlt	r3, #45	@ 0x2d
 802478e:	232b      	movge	r3, #43	@ 0x2b
 8024790:	2909      	cmp	r1, #9
 8024792:	7002      	strb	r2, [r0, #0]
 8024794:	7043      	strb	r3, [r0, #1]
 8024796:	dd29      	ble.n	80247ec <__exponent+0x68>
 8024798:	f10d 0307 	add.w	r3, sp, #7
 802479c:	461d      	mov	r5, r3
 802479e:	270a      	movs	r7, #10
 80247a0:	461a      	mov	r2, r3
 80247a2:	fbb1 f6f7 	udiv	r6, r1, r7
 80247a6:	fb07 1416 	mls	r4, r7, r6, r1
 80247aa:	3430      	adds	r4, #48	@ 0x30
 80247ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80247b0:	460c      	mov	r4, r1
 80247b2:	2c63      	cmp	r4, #99	@ 0x63
 80247b4:	f103 33ff 	add.w	r3, r3, #4294967295
 80247b8:	4631      	mov	r1, r6
 80247ba:	dcf1      	bgt.n	80247a0 <__exponent+0x1c>
 80247bc:	3130      	adds	r1, #48	@ 0x30
 80247be:	1e94      	subs	r4, r2, #2
 80247c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80247c4:	1c41      	adds	r1, r0, #1
 80247c6:	4623      	mov	r3, r4
 80247c8:	42ab      	cmp	r3, r5
 80247ca:	d30a      	bcc.n	80247e2 <__exponent+0x5e>
 80247cc:	f10d 0309 	add.w	r3, sp, #9
 80247d0:	1a9b      	subs	r3, r3, r2
 80247d2:	42ac      	cmp	r4, r5
 80247d4:	bf88      	it	hi
 80247d6:	2300      	movhi	r3, #0
 80247d8:	3302      	adds	r3, #2
 80247da:	4403      	add	r3, r0
 80247dc:	1a18      	subs	r0, r3, r0
 80247de:	b003      	add	sp, #12
 80247e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80247e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80247e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80247ea:	e7ed      	b.n	80247c8 <__exponent+0x44>
 80247ec:	2330      	movs	r3, #48	@ 0x30
 80247ee:	3130      	adds	r1, #48	@ 0x30
 80247f0:	7083      	strb	r3, [r0, #2]
 80247f2:	70c1      	strb	r1, [r0, #3]
 80247f4:	1d03      	adds	r3, r0, #4
 80247f6:	e7f1      	b.n	80247dc <__exponent+0x58>

080247f8 <_printf_float>:
 80247f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247fc:	b08d      	sub	sp, #52	@ 0x34
 80247fe:	460c      	mov	r4, r1
 8024800:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8024804:	4616      	mov	r6, r2
 8024806:	461f      	mov	r7, r3
 8024808:	4605      	mov	r5, r0
 802480a:	f000 ff71 	bl	80256f0 <_localeconv_r>
 802480e:	f8d0 b000 	ldr.w	fp, [r0]
 8024812:	4658      	mov	r0, fp
 8024814:	f7db fdb4 	bl	8000380 <strlen>
 8024818:	2300      	movs	r3, #0
 802481a:	930a      	str	r3, [sp, #40]	@ 0x28
 802481c:	f8d8 3000 	ldr.w	r3, [r8]
 8024820:	f894 9018 	ldrb.w	r9, [r4, #24]
 8024824:	6822      	ldr	r2, [r4, #0]
 8024826:	9005      	str	r0, [sp, #20]
 8024828:	3307      	adds	r3, #7
 802482a:	f023 0307 	bic.w	r3, r3, #7
 802482e:	f103 0108 	add.w	r1, r3, #8
 8024832:	f8c8 1000 	str.w	r1, [r8]
 8024836:	ed93 0b00 	vldr	d0, [r3]
 802483a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8024a98 <_printf_float+0x2a0>
 802483e:	eeb0 7bc0 	vabs.f64	d7, d0
 8024842:	eeb4 7b46 	vcmp.f64	d7, d6
 8024846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802484a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 802484e:	dd24      	ble.n	802489a <_printf_float+0xa2>
 8024850:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8024854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024858:	d502      	bpl.n	8024860 <_printf_float+0x68>
 802485a:	232d      	movs	r3, #45	@ 0x2d
 802485c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024860:	498f      	ldr	r1, [pc, #572]	@ (8024aa0 <_printf_float+0x2a8>)
 8024862:	4b90      	ldr	r3, [pc, #576]	@ (8024aa4 <_printf_float+0x2ac>)
 8024864:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8024868:	bf94      	ite	ls
 802486a:	4688      	movls	r8, r1
 802486c:	4698      	movhi	r8, r3
 802486e:	f022 0204 	bic.w	r2, r2, #4
 8024872:	2303      	movs	r3, #3
 8024874:	6123      	str	r3, [r4, #16]
 8024876:	6022      	str	r2, [r4, #0]
 8024878:	f04f 0a00 	mov.w	sl, #0
 802487c:	9700      	str	r7, [sp, #0]
 802487e:	4633      	mov	r3, r6
 8024880:	aa0b      	add	r2, sp, #44	@ 0x2c
 8024882:	4621      	mov	r1, r4
 8024884:	4628      	mov	r0, r5
 8024886:	f000 f9d1 	bl	8024c2c <_printf_common>
 802488a:	3001      	adds	r0, #1
 802488c:	f040 8089 	bne.w	80249a2 <_printf_float+0x1aa>
 8024890:	f04f 30ff 	mov.w	r0, #4294967295
 8024894:	b00d      	add	sp, #52	@ 0x34
 8024896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802489a:	eeb4 0b40 	vcmp.f64	d0, d0
 802489e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80248a2:	d709      	bvc.n	80248b8 <_printf_float+0xc0>
 80248a4:	ee10 3a90 	vmov	r3, s1
 80248a8:	2b00      	cmp	r3, #0
 80248aa:	bfbc      	itt	lt
 80248ac:	232d      	movlt	r3, #45	@ 0x2d
 80248ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80248b2:	497d      	ldr	r1, [pc, #500]	@ (8024aa8 <_printf_float+0x2b0>)
 80248b4:	4b7d      	ldr	r3, [pc, #500]	@ (8024aac <_printf_float+0x2b4>)
 80248b6:	e7d5      	b.n	8024864 <_printf_float+0x6c>
 80248b8:	6863      	ldr	r3, [r4, #4]
 80248ba:	1c59      	adds	r1, r3, #1
 80248bc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80248c0:	d139      	bne.n	8024936 <_printf_float+0x13e>
 80248c2:	2306      	movs	r3, #6
 80248c4:	6063      	str	r3, [r4, #4]
 80248c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80248ca:	2300      	movs	r3, #0
 80248cc:	6022      	str	r2, [r4, #0]
 80248ce:	9303      	str	r3, [sp, #12]
 80248d0:	ab0a      	add	r3, sp, #40	@ 0x28
 80248d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80248d6:	ab09      	add	r3, sp, #36	@ 0x24
 80248d8:	9300      	str	r3, [sp, #0]
 80248da:	6861      	ldr	r1, [r4, #4]
 80248dc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80248e0:	4628      	mov	r0, r5
 80248e2:	f7ff fefb 	bl	80246dc <__cvt>
 80248e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80248ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80248ec:	4680      	mov	r8, r0
 80248ee:	d129      	bne.n	8024944 <_printf_float+0x14c>
 80248f0:	1cc8      	adds	r0, r1, #3
 80248f2:	db02      	blt.n	80248fa <_printf_float+0x102>
 80248f4:	6863      	ldr	r3, [r4, #4]
 80248f6:	4299      	cmp	r1, r3
 80248f8:	dd41      	ble.n	802497e <_printf_float+0x186>
 80248fa:	f1a9 0902 	sub.w	r9, r9, #2
 80248fe:	fa5f f989 	uxtb.w	r9, r9
 8024902:	3901      	subs	r1, #1
 8024904:	464a      	mov	r2, r9
 8024906:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 802490a:	9109      	str	r1, [sp, #36]	@ 0x24
 802490c:	f7ff ff3a 	bl	8024784 <__exponent>
 8024910:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024912:	1813      	adds	r3, r2, r0
 8024914:	2a01      	cmp	r2, #1
 8024916:	4682      	mov	sl, r0
 8024918:	6123      	str	r3, [r4, #16]
 802491a:	dc02      	bgt.n	8024922 <_printf_float+0x12a>
 802491c:	6822      	ldr	r2, [r4, #0]
 802491e:	07d2      	lsls	r2, r2, #31
 8024920:	d501      	bpl.n	8024926 <_printf_float+0x12e>
 8024922:	3301      	adds	r3, #1
 8024924:	6123      	str	r3, [r4, #16]
 8024926:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 802492a:	2b00      	cmp	r3, #0
 802492c:	d0a6      	beq.n	802487c <_printf_float+0x84>
 802492e:	232d      	movs	r3, #45	@ 0x2d
 8024930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024934:	e7a2      	b.n	802487c <_printf_float+0x84>
 8024936:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802493a:	d1c4      	bne.n	80248c6 <_printf_float+0xce>
 802493c:	2b00      	cmp	r3, #0
 802493e:	d1c2      	bne.n	80248c6 <_printf_float+0xce>
 8024940:	2301      	movs	r3, #1
 8024942:	e7bf      	b.n	80248c4 <_printf_float+0xcc>
 8024944:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8024948:	d9db      	bls.n	8024902 <_printf_float+0x10a>
 802494a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 802494e:	d118      	bne.n	8024982 <_printf_float+0x18a>
 8024950:	2900      	cmp	r1, #0
 8024952:	6863      	ldr	r3, [r4, #4]
 8024954:	dd0b      	ble.n	802496e <_printf_float+0x176>
 8024956:	6121      	str	r1, [r4, #16]
 8024958:	b913      	cbnz	r3, 8024960 <_printf_float+0x168>
 802495a:	6822      	ldr	r2, [r4, #0]
 802495c:	07d0      	lsls	r0, r2, #31
 802495e:	d502      	bpl.n	8024966 <_printf_float+0x16e>
 8024960:	3301      	adds	r3, #1
 8024962:	440b      	add	r3, r1
 8024964:	6123      	str	r3, [r4, #16]
 8024966:	65a1      	str	r1, [r4, #88]	@ 0x58
 8024968:	f04f 0a00 	mov.w	sl, #0
 802496c:	e7db      	b.n	8024926 <_printf_float+0x12e>
 802496e:	b913      	cbnz	r3, 8024976 <_printf_float+0x17e>
 8024970:	6822      	ldr	r2, [r4, #0]
 8024972:	07d2      	lsls	r2, r2, #31
 8024974:	d501      	bpl.n	802497a <_printf_float+0x182>
 8024976:	3302      	adds	r3, #2
 8024978:	e7f4      	b.n	8024964 <_printf_float+0x16c>
 802497a:	2301      	movs	r3, #1
 802497c:	e7f2      	b.n	8024964 <_printf_float+0x16c>
 802497e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8024982:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024984:	4299      	cmp	r1, r3
 8024986:	db05      	blt.n	8024994 <_printf_float+0x19c>
 8024988:	6823      	ldr	r3, [r4, #0]
 802498a:	6121      	str	r1, [r4, #16]
 802498c:	07d8      	lsls	r0, r3, #31
 802498e:	d5ea      	bpl.n	8024966 <_printf_float+0x16e>
 8024990:	1c4b      	adds	r3, r1, #1
 8024992:	e7e7      	b.n	8024964 <_printf_float+0x16c>
 8024994:	2900      	cmp	r1, #0
 8024996:	bfd4      	ite	le
 8024998:	f1c1 0202 	rsble	r2, r1, #2
 802499c:	2201      	movgt	r2, #1
 802499e:	4413      	add	r3, r2
 80249a0:	e7e0      	b.n	8024964 <_printf_float+0x16c>
 80249a2:	6823      	ldr	r3, [r4, #0]
 80249a4:	055a      	lsls	r2, r3, #21
 80249a6:	d407      	bmi.n	80249b8 <_printf_float+0x1c0>
 80249a8:	6923      	ldr	r3, [r4, #16]
 80249aa:	4642      	mov	r2, r8
 80249ac:	4631      	mov	r1, r6
 80249ae:	4628      	mov	r0, r5
 80249b0:	47b8      	blx	r7
 80249b2:	3001      	adds	r0, #1
 80249b4:	d12a      	bne.n	8024a0c <_printf_float+0x214>
 80249b6:	e76b      	b.n	8024890 <_printf_float+0x98>
 80249b8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80249bc:	f240 80e0 	bls.w	8024b80 <_printf_float+0x388>
 80249c0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80249c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80249c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80249cc:	d133      	bne.n	8024a36 <_printf_float+0x23e>
 80249ce:	4a38      	ldr	r2, [pc, #224]	@ (8024ab0 <_printf_float+0x2b8>)
 80249d0:	2301      	movs	r3, #1
 80249d2:	4631      	mov	r1, r6
 80249d4:	4628      	mov	r0, r5
 80249d6:	47b8      	blx	r7
 80249d8:	3001      	adds	r0, #1
 80249da:	f43f af59 	beq.w	8024890 <_printf_float+0x98>
 80249de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80249e2:	4543      	cmp	r3, r8
 80249e4:	db02      	blt.n	80249ec <_printf_float+0x1f4>
 80249e6:	6823      	ldr	r3, [r4, #0]
 80249e8:	07d8      	lsls	r0, r3, #31
 80249ea:	d50f      	bpl.n	8024a0c <_printf_float+0x214>
 80249ec:	9b05      	ldr	r3, [sp, #20]
 80249ee:	465a      	mov	r2, fp
 80249f0:	4631      	mov	r1, r6
 80249f2:	4628      	mov	r0, r5
 80249f4:	47b8      	blx	r7
 80249f6:	3001      	adds	r0, #1
 80249f8:	f43f af4a 	beq.w	8024890 <_printf_float+0x98>
 80249fc:	f04f 0900 	mov.w	r9, #0
 8024a00:	f108 38ff 	add.w	r8, r8, #4294967295
 8024a04:	f104 0a1a 	add.w	sl, r4, #26
 8024a08:	45c8      	cmp	r8, r9
 8024a0a:	dc09      	bgt.n	8024a20 <_printf_float+0x228>
 8024a0c:	6823      	ldr	r3, [r4, #0]
 8024a0e:	079b      	lsls	r3, r3, #30
 8024a10:	f100 8107 	bmi.w	8024c22 <_printf_float+0x42a>
 8024a14:	68e0      	ldr	r0, [r4, #12]
 8024a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024a18:	4298      	cmp	r0, r3
 8024a1a:	bfb8      	it	lt
 8024a1c:	4618      	movlt	r0, r3
 8024a1e:	e739      	b.n	8024894 <_printf_float+0x9c>
 8024a20:	2301      	movs	r3, #1
 8024a22:	4652      	mov	r2, sl
 8024a24:	4631      	mov	r1, r6
 8024a26:	4628      	mov	r0, r5
 8024a28:	47b8      	blx	r7
 8024a2a:	3001      	adds	r0, #1
 8024a2c:	f43f af30 	beq.w	8024890 <_printf_float+0x98>
 8024a30:	f109 0901 	add.w	r9, r9, #1
 8024a34:	e7e8      	b.n	8024a08 <_printf_float+0x210>
 8024a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a38:	2b00      	cmp	r3, #0
 8024a3a:	dc3b      	bgt.n	8024ab4 <_printf_float+0x2bc>
 8024a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8024ab0 <_printf_float+0x2b8>)
 8024a3e:	2301      	movs	r3, #1
 8024a40:	4631      	mov	r1, r6
 8024a42:	4628      	mov	r0, r5
 8024a44:	47b8      	blx	r7
 8024a46:	3001      	adds	r0, #1
 8024a48:	f43f af22 	beq.w	8024890 <_printf_float+0x98>
 8024a4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8024a50:	ea59 0303 	orrs.w	r3, r9, r3
 8024a54:	d102      	bne.n	8024a5c <_printf_float+0x264>
 8024a56:	6823      	ldr	r3, [r4, #0]
 8024a58:	07d9      	lsls	r1, r3, #31
 8024a5a:	d5d7      	bpl.n	8024a0c <_printf_float+0x214>
 8024a5c:	9b05      	ldr	r3, [sp, #20]
 8024a5e:	465a      	mov	r2, fp
 8024a60:	4631      	mov	r1, r6
 8024a62:	4628      	mov	r0, r5
 8024a64:	47b8      	blx	r7
 8024a66:	3001      	adds	r0, #1
 8024a68:	f43f af12 	beq.w	8024890 <_printf_float+0x98>
 8024a6c:	f04f 0a00 	mov.w	sl, #0
 8024a70:	f104 0b1a 	add.w	fp, r4, #26
 8024a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a76:	425b      	negs	r3, r3
 8024a78:	4553      	cmp	r3, sl
 8024a7a:	dc01      	bgt.n	8024a80 <_printf_float+0x288>
 8024a7c:	464b      	mov	r3, r9
 8024a7e:	e794      	b.n	80249aa <_printf_float+0x1b2>
 8024a80:	2301      	movs	r3, #1
 8024a82:	465a      	mov	r2, fp
 8024a84:	4631      	mov	r1, r6
 8024a86:	4628      	mov	r0, r5
 8024a88:	47b8      	blx	r7
 8024a8a:	3001      	adds	r0, #1
 8024a8c:	f43f af00 	beq.w	8024890 <_printf_float+0x98>
 8024a90:	f10a 0a01 	add.w	sl, sl, #1
 8024a94:	e7ee      	b.n	8024a74 <_printf_float+0x27c>
 8024a96:	bf00      	nop
 8024a98:	ffffffff 	.word	0xffffffff
 8024a9c:	7fefffff 	.word	0x7fefffff
 8024aa0:	0802d2e0 	.word	0x0802d2e0
 8024aa4:	0802d2e4 	.word	0x0802d2e4
 8024aa8:	0802d2e8 	.word	0x0802d2e8
 8024aac:	0802d2ec 	.word	0x0802d2ec
 8024ab0:	0802d59f 	.word	0x0802d59f
 8024ab4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8024ab6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8024aba:	4553      	cmp	r3, sl
 8024abc:	bfa8      	it	ge
 8024abe:	4653      	movge	r3, sl
 8024ac0:	2b00      	cmp	r3, #0
 8024ac2:	4699      	mov	r9, r3
 8024ac4:	dc37      	bgt.n	8024b36 <_printf_float+0x33e>
 8024ac6:	2300      	movs	r3, #0
 8024ac8:	9307      	str	r3, [sp, #28]
 8024aca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024ace:	f104 021a 	add.w	r2, r4, #26
 8024ad2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8024ad4:	9907      	ldr	r1, [sp, #28]
 8024ad6:	9306      	str	r3, [sp, #24]
 8024ad8:	eba3 0309 	sub.w	r3, r3, r9
 8024adc:	428b      	cmp	r3, r1
 8024ade:	dc31      	bgt.n	8024b44 <_printf_float+0x34c>
 8024ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024ae2:	459a      	cmp	sl, r3
 8024ae4:	dc3b      	bgt.n	8024b5e <_printf_float+0x366>
 8024ae6:	6823      	ldr	r3, [r4, #0]
 8024ae8:	07da      	lsls	r2, r3, #31
 8024aea:	d438      	bmi.n	8024b5e <_printf_float+0x366>
 8024aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024aee:	ebaa 0903 	sub.w	r9, sl, r3
 8024af2:	9b06      	ldr	r3, [sp, #24]
 8024af4:	ebaa 0303 	sub.w	r3, sl, r3
 8024af8:	4599      	cmp	r9, r3
 8024afa:	bfa8      	it	ge
 8024afc:	4699      	movge	r9, r3
 8024afe:	f1b9 0f00 	cmp.w	r9, #0
 8024b02:	dc34      	bgt.n	8024b6e <_printf_float+0x376>
 8024b04:	f04f 0800 	mov.w	r8, #0
 8024b08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024b0c:	f104 0b1a 	add.w	fp, r4, #26
 8024b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b12:	ebaa 0303 	sub.w	r3, sl, r3
 8024b16:	eba3 0309 	sub.w	r3, r3, r9
 8024b1a:	4543      	cmp	r3, r8
 8024b1c:	f77f af76 	ble.w	8024a0c <_printf_float+0x214>
 8024b20:	2301      	movs	r3, #1
 8024b22:	465a      	mov	r2, fp
 8024b24:	4631      	mov	r1, r6
 8024b26:	4628      	mov	r0, r5
 8024b28:	47b8      	blx	r7
 8024b2a:	3001      	adds	r0, #1
 8024b2c:	f43f aeb0 	beq.w	8024890 <_printf_float+0x98>
 8024b30:	f108 0801 	add.w	r8, r8, #1
 8024b34:	e7ec      	b.n	8024b10 <_printf_float+0x318>
 8024b36:	4642      	mov	r2, r8
 8024b38:	4631      	mov	r1, r6
 8024b3a:	4628      	mov	r0, r5
 8024b3c:	47b8      	blx	r7
 8024b3e:	3001      	adds	r0, #1
 8024b40:	d1c1      	bne.n	8024ac6 <_printf_float+0x2ce>
 8024b42:	e6a5      	b.n	8024890 <_printf_float+0x98>
 8024b44:	2301      	movs	r3, #1
 8024b46:	4631      	mov	r1, r6
 8024b48:	4628      	mov	r0, r5
 8024b4a:	9206      	str	r2, [sp, #24]
 8024b4c:	47b8      	blx	r7
 8024b4e:	3001      	adds	r0, #1
 8024b50:	f43f ae9e 	beq.w	8024890 <_printf_float+0x98>
 8024b54:	9b07      	ldr	r3, [sp, #28]
 8024b56:	9a06      	ldr	r2, [sp, #24]
 8024b58:	3301      	adds	r3, #1
 8024b5a:	9307      	str	r3, [sp, #28]
 8024b5c:	e7b9      	b.n	8024ad2 <_printf_float+0x2da>
 8024b5e:	9b05      	ldr	r3, [sp, #20]
 8024b60:	465a      	mov	r2, fp
 8024b62:	4631      	mov	r1, r6
 8024b64:	4628      	mov	r0, r5
 8024b66:	47b8      	blx	r7
 8024b68:	3001      	adds	r0, #1
 8024b6a:	d1bf      	bne.n	8024aec <_printf_float+0x2f4>
 8024b6c:	e690      	b.n	8024890 <_printf_float+0x98>
 8024b6e:	9a06      	ldr	r2, [sp, #24]
 8024b70:	464b      	mov	r3, r9
 8024b72:	4442      	add	r2, r8
 8024b74:	4631      	mov	r1, r6
 8024b76:	4628      	mov	r0, r5
 8024b78:	47b8      	blx	r7
 8024b7a:	3001      	adds	r0, #1
 8024b7c:	d1c2      	bne.n	8024b04 <_printf_float+0x30c>
 8024b7e:	e687      	b.n	8024890 <_printf_float+0x98>
 8024b80:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8024b84:	f1b9 0f01 	cmp.w	r9, #1
 8024b88:	dc01      	bgt.n	8024b8e <_printf_float+0x396>
 8024b8a:	07db      	lsls	r3, r3, #31
 8024b8c:	d536      	bpl.n	8024bfc <_printf_float+0x404>
 8024b8e:	2301      	movs	r3, #1
 8024b90:	4642      	mov	r2, r8
 8024b92:	4631      	mov	r1, r6
 8024b94:	4628      	mov	r0, r5
 8024b96:	47b8      	blx	r7
 8024b98:	3001      	adds	r0, #1
 8024b9a:	f43f ae79 	beq.w	8024890 <_printf_float+0x98>
 8024b9e:	9b05      	ldr	r3, [sp, #20]
 8024ba0:	465a      	mov	r2, fp
 8024ba2:	4631      	mov	r1, r6
 8024ba4:	4628      	mov	r0, r5
 8024ba6:	47b8      	blx	r7
 8024ba8:	3001      	adds	r0, #1
 8024baa:	f43f ae71 	beq.w	8024890 <_printf_float+0x98>
 8024bae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8024bb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8024bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024bba:	f109 39ff 	add.w	r9, r9, #4294967295
 8024bbe:	d018      	beq.n	8024bf2 <_printf_float+0x3fa>
 8024bc0:	464b      	mov	r3, r9
 8024bc2:	f108 0201 	add.w	r2, r8, #1
 8024bc6:	4631      	mov	r1, r6
 8024bc8:	4628      	mov	r0, r5
 8024bca:	47b8      	blx	r7
 8024bcc:	3001      	adds	r0, #1
 8024bce:	d10c      	bne.n	8024bea <_printf_float+0x3f2>
 8024bd0:	e65e      	b.n	8024890 <_printf_float+0x98>
 8024bd2:	2301      	movs	r3, #1
 8024bd4:	465a      	mov	r2, fp
 8024bd6:	4631      	mov	r1, r6
 8024bd8:	4628      	mov	r0, r5
 8024bda:	47b8      	blx	r7
 8024bdc:	3001      	adds	r0, #1
 8024bde:	f43f ae57 	beq.w	8024890 <_printf_float+0x98>
 8024be2:	f108 0801 	add.w	r8, r8, #1
 8024be6:	45c8      	cmp	r8, r9
 8024be8:	dbf3      	blt.n	8024bd2 <_printf_float+0x3da>
 8024bea:	4653      	mov	r3, sl
 8024bec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8024bf0:	e6dc      	b.n	80249ac <_printf_float+0x1b4>
 8024bf2:	f04f 0800 	mov.w	r8, #0
 8024bf6:	f104 0b1a 	add.w	fp, r4, #26
 8024bfa:	e7f4      	b.n	8024be6 <_printf_float+0x3ee>
 8024bfc:	2301      	movs	r3, #1
 8024bfe:	4642      	mov	r2, r8
 8024c00:	e7e1      	b.n	8024bc6 <_printf_float+0x3ce>
 8024c02:	2301      	movs	r3, #1
 8024c04:	464a      	mov	r2, r9
 8024c06:	4631      	mov	r1, r6
 8024c08:	4628      	mov	r0, r5
 8024c0a:	47b8      	blx	r7
 8024c0c:	3001      	adds	r0, #1
 8024c0e:	f43f ae3f 	beq.w	8024890 <_printf_float+0x98>
 8024c12:	f108 0801 	add.w	r8, r8, #1
 8024c16:	68e3      	ldr	r3, [r4, #12]
 8024c18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024c1a:	1a5b      	subs	r3, r3, r1
 8024c1c:	4543      	cmp	r3, r8
 8024c1e:	dcf0      	bgt.n	8024c02 <_printf_float+0x40a>
 8024c20:	e6f8      	b.n	8024a14 <_printf_float+0x21c>
 8024c22:	f04f 0800 	mov.w	r8, #0
 8024c26:	f104 0919 	add.w	r9, r4, #25
 8024c2a:	e7f4      	b.n	8024c16 <_printf_float+0x41e>

08024c2c <_printf_common>:
 8024c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024c30:	4616      	mov	r6, r2
 8024c32:	4698      	mov	r8, r3
 8024c34:	688a      	ldr	r2, [r1, #8]
 8024c36:	690b      	ldr	r3, [r1, #16]
 8024c38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8024c3c:	4293      	cmp	r3, r2
 8024c3e:	bfb8      	it	lt
 8024c40:	4613      	movlt	r3, r2
 8024c42:	6033      	str	r3, [r6, #0]
 8024c44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8024c48:	4607      	mov	r7, r0
 8024c4a:	460c      	mov	r4, r1
 8024c4c:	b10a      	cbz	r2, 8024c52 <_printf_common+0x26>
 8024c4e:	3301      	adds	r3, #1
 8024c50:	6033      	str	r3, [r6, #0]
 8024c52:	6823      	ldr	r3, [r4, #0]
 8024c54:	0699      	lsls	r1, r3, #26
 8024c56:	bf42      	ittt	mi
 8024c58:	6833      	ldrmi	r3, [r6, #0]
 8024c5a:	3302      	addmi	r3, #2
 8024c5c:	6033      	strmi	r3, [r6, #0]
 8024c5e:	6825      	ldr	r5, [r4, #0]
 8024c60:	f015 0506 	ands.w	r5, r5, #6
 8024c64:	d106      	bne.n	8024c74 <_printf_common+0x48>
 8024c66:	f104 0a19 	add.w	sl, r4, #25
 8024c6a:	68e3      	ldr	r3, [r4, #12]
 8024c6c:	6832      	ldr	r2, [r6, #0]
 8024c6e:	1a9b      	subs	r3, r3, r2
 8024c70:	42ab      	cmp	r3, r5
 8024c72:	dc26      	bgt.n	8024cc2 <_printf_common+0x96>
 8024c74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8024c78:	6822      	ldr	r2, [r4, #0]
 8024c7a:	3b00      	subs	r3, #0
 8024c7c:	bf18      	it	ne
 8024c7e:	2301      	movne	r3, #1
 8024c80:	0692      	lsls	r2, r2, #26
 8024c82:	d42b      	bmi.n	8024cdc <_printf_common+0xb0>
 8024c84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8024c88:	4641      	mov	r1, r8
 8024c8a:	4638      	mov	r0, r7
 8024c8c:	47c8      	blx	r9
 8024c8e:	3001      	adds	r0, #1
 8024c90:	d01e      	beq.n	8024cd0 <_printf_common+0xa4>
 8024c92:	6823      	ldr	r3, [r4, #0]
 8024c94:	6922      	ldr	r2, [r4, #16]
 8024c96:	f003 0306 	and.w	r3, r3, #6
 8024c9a:	2b04      	cmp	r3, #4
 8024c9c:	bf02      	ittt	eq
 8024c9e:	68e5      	ldreq	r5, [r4, #12]
 8024ca0:	6833      	ldreq	r3, [r6, #0]
 8024ca2:	1aed      	subeq	r5, r5, r3
 8024ca4:	68a3      	ldr	r3, [r4, #8]
 8024ca6:	bf0c      	ite	eq
 8024ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024cac:	2500      	movne	r5, #0
 8024cae:	4293      	cmp	r3, r2
 8024cb0:	bfc4      	itt	gt
 8024cb2:	1a9b      	subgt	r3, r3, r2
 8024cb4:	18ed      	addgt	r5, r5, r3
 8024cb6:	2600      	movs	r6, #0
 8024cb8:	341a      	adds	r4, #26
 8024cba:	42b5      	cmp	r5, r6
 8024cbc:	d11a      	bne.n	8024cf4 <_printf_common+0xc8>
 8024cbe:	2000      	movs	r0, #0
 8024cc0:	e008      	b.n	8024cd4 <_printf_common+0xa8>
 8024cc2:	2301      	movs	r3, #1
 8024cc4:	4652      	mov	r2, sl
 8024cc6:	4641      	mov	r1, r8
 8024cc8:	4638      	mov	r0, r7
 8024cca:	47c8      	blx	r9
 8024ccc:	3001      	adds	r0, #1
 8024cce:	d103      	bne.n	8024cd8 <_printf_common+0xac>
 8024cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8024cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024cd8:	3501      	adds	r5, #1
 8024cda:	e7c6      	b.n	8024c6a <_printf_common+0x3e>
 8024cdc:	18e1      	adds	r1, r4, r3
 8024cde:	1c5a      	adds	r2, r3, #1
 8024ce0:	2030      	movs	r0, #48	@ 0x30
 8024ce2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8024ce6:	4422      	add	r2, r4
 8024ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8024cec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8024cf0:	3302      	adds	r3, #2
 8024cf2:	e7c7      	b.n	8024c84 <_printf_common+0x58>
 8024cf4:	2301      	movs	r3, #1
 8024cf6:	4622      	mov	r2, r4
 8024cf8:	4641      	mov	r1, r8
 8024cfa:	4638      	mov	r0, r7
 8024cfc:	47c8      	blx	r9
 8024cfe:	3001      	adds	r0, #1
 8024d00:	d0e6      	beq.n	8024cd0 <_printf_common+0xa4>
 8024d02:	3601      	adds	r6, #1
 8024d04:	e7d9      	b.n	8024cba <_printf_common+0x8e>
	...

08024d08 <_printf_i>:
 8024d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024d0c:	7e0f      	ldrb	r7, [r1, #24]
 8024d0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024d10:	2f78      	cmp	r7, #120	@ 0x78
 8024d12:	4691      	mov	r9, r2
 8024d14:	4680      	mov	r8, r0
 8024d16:	460c      	mov	r4, r1
 8024d18:	469a      	mov	sl, r3
 8024d1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8024d1e:	d807      	bhi.n	8024d30 <_printf_i+0x28>
 8024d20:	2f62      	cmp	r7, #98	@ 0x62
 8024d22:	d80a      	bhi.n	8024d3a <_printf_i+0x32>
 8024d24:	2f00      	cmp	r7, #0
 8024d26:	f000 80d2 	beq.w	8024ece <_printf_i+0x1c6>
 8024d2a:	2f58      	cmp	r7, #88	@ 0x58
 8024d2c:	f000 80b9 	beq.w	8024ea2 <_printf_i+0x19a>
 8024d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024d34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8024d38:	e03a      	b.n	8024db0 <_printf_i+0xa8>
 8024d3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8024d3e:	2b15      	cmp	r3, #21
 8024d40:	d8f6      	bhi.n	8024d30 <_printf_i+0x28>
 8024d42:	a101      	add	r1, pc, #4	@ (adr r1, 8024d48 <_printf_i+0x40>)
 8024d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024d48:	08024da1 	.word	0x08024da1
 8024d4c:	08024db5 	.word	0x08024db5
 8024d50:	08024d31 	.word	0x08024d31
 8024d54:	08024d31 	.word	0x08024d31
 8024d58:	08024d31 	.word	0x08024d31
 8024d5c:	08024d31 	.word	0x08024d31
 8024d60:	08024db5 	.word	0x08024db5
 8024d64:	08024d31 	.word	0x08024d31
 8024d68:	08024d31 	.word	0x08024d31
 8024d6c:	08024d31 	.word	0x08024d31
 8024d70:	08024d31 	.word	0x08024d31
 8024d74:	08024eb5 	.word	0x08024eb5
 8024d78:	08024ddf 	.word	0x08024ddf
 8024d7c:	08024e6f 	.word	0x08024e6f
 8024d80:	08024d31 	.word	0x08024d31
 8024d84:	08024d31 	.word	0x08024d31
 8024d88:	08024ed7 	.word	0x08024ed7
 8024d8c:	08024d31 	.word	0x08024d31
 8024d90:	08024ddf 	.word	0x08024ddf
 8024d94:	08024d31 	.word	0x08024d31
 8024d98:	08024d31 	.word	0x08024d31
 8024d9c:	08024e77 	.word	0x08024e77
 8024da0:	6833      	ldr	r3, [r6, #0]
 8024da2:	1d1a      	adds	r2, r3, #4
 8024da4:	681b      	ldr	r3, [r3, #0]
 8024da6:	6032      	str	r2, [r6, #0]
 8024da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024dac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8024db0:	2301      	movs	r3, #1
 8024db2:	e09d      	b.n	8024ef0 <_printf_i+0x1e8>
 8024db4:	6833      	ldr	r3, [r6, #0]
 8024db6:	6820      	ldr	r0, [r4, #0]
 8024db8:	1d19      	adds	r1, r3, #4
 8024dba:	6031      	str	r1, [r6, #0]
 8024dbc:	0606      	lsls	r6, r0, #24
 8024dbe:	d501      	bpl.n	8024dc4 <_printf_i+0xbc>
 8024dc0:	681d      	ldr	r5, [r3, #0]
 8024dc2:	e003      	b.n	8024dcc <_printf_i+0xc4>
 8024dc4:	0645      	lsls	r5, r0, #25
 8024dc6:	d5fb      	bpl.n	8024dc0 <_printf_i+0xb8>
 8024dc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8024dcc:	2d00      	cmp	r5, #0
 8024dce:	da03      	bge.n	8024dd8 <_printf_i+0xd0>
 8024dd0:	232d      	movs	r3, #45	@ 0x2d
 8024dd2:	426d      	negs	r5, r5
 8024dd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024dd8:	4859      	ldr	r0, [pc, #356]	@ (8024f40 <_printf_i+0x238>)
 8024dda:	230a      	movs	r3, #10
 8024ddc:	e011      	b.n	8024e02 <_printf_i+0xfa>
 8024dde:	6821      	ldr	r1, [r4, #0]
 8024de0:	6833      	ldr	r3, [r6, #0]
 8024de2:	0608      	lsls	r0, r1, #24
 8024de4:	f853 5b04 	ldr.w	r5, [r3], #4
 8024de8:	d402      	bmi.n	8024df0 <_printf_i+0xe8>
 8024dea:	0649      	lsls	r1, r1, #25
 8024dec:	bf48      	it	mi
 8024dee:	b2ad      	uxthmi	r5, r5
 8024df0:	2f6f      	cmp	r7, #111	@ 0x6f
 8024df2:	4853      	ldr	r0, [pc, #332]	@ (8024f40 <_printf_i+0x238>)
 8024df4:	6033      	str	r3, [r6, #0]
 8024df6:	bf14      	ite	ne
 8024df8:	230a      	movne	r3, #10
 8024dfa:	2308      	moveq	r3, #8
 8024dfc:	2100      	movs	r1, #0
 8024dfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8024e02:	6866      	ldr	r6, [r4, #4]
 8024e04:	60a6      	str	r6, [r4, #8]
 8024e06:	2e00      	cmp	r6, #0
 8024e08:	bfa2      	ittt	ge
 8024e0a:	6821      	ldrge	r1, [r4, #0]
 8024e0c:	f021 0104 	bicge.w	r1, r1, #4
 8024e10:	6021      	strge	r1, [r4, #0]
 8024e12:	b90d      	cbnz	r5, 8024e18 <_printf_i+0x110>
 8024e14:	2e00      	cmp	r6, #0
 8024e16:	d04b      	beq.n	8024eb0 <_printf_i+0x1a8>
 8024e18:	4616      	mov	r6, r2
 8024e1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8024e1e:	fb03 5711 	mls	r7, r3, r1, r5
 8024e22:	5dc7      	ldrb	r7, [r0, r7]
 8024e24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8024e28:	462f      	mov	r7, r5
 8024e2a:	42bb      	cmp	r3, r7
 8024e2c:	460d      	mov	r5, r1
 8024e2e:	d9f4      	bls.n	8024e1a <_printf_i+0x112>
 8024e30:	2b08      	cmp	r3, #8
 8024e32:	d10b      	bne.n	8024e4c <_printf_i+0x144>
 8024e34:	6823      	ldr	r3, [r4, #0]
 8024e36:	07df      	lsls	r7, r3, #31
 8024e38:	d508      	bpl.n	8024e4c <_printf_i+0x144>
 8024e3a:	6923      	ldr	r3, [r4, #16]
 8024e3c:	6861      	ldr	r1, [r4, #4]
 8024e3e:	4299      	cmp	r1, r3
 8024e40:	bfde      	ittt	le
 8024e42:	2330      	movle	r3, #48	@ 0x30
 8024e44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8024e48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8024e4c:	1b92      	subs	r2, r2, r6
 8024e4e:	6122      	str	r2, [r4, #16]
 8024e50:	f8cd a000 	str.w	sl, [sp]
 8024e54:	464b      	mov	r3, r9
 8024e56:	aa03      	add	r2, sp, #12
 8024e58:	4621      	mov	r1, r4
 8024e5a:	4640      	mov	r0, r8
 8024e5c:	f7ff fee6 	bl	8024c2c <_printf_common>
 8024e60:	3001      	adds	r0, #1
 8024e62:	d14a      	bne.n	8024efa <_printf_i+0x1f2>
 8024e64:	f04f 30ff 	mov.w	r0, #4294967295
 8024e68:	b004      	add	sp, #16
 8024e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024e6e:	6823      	ldr	r3, [r4, #0]
 8024e70:	f043 0320 	orr.w	r3, r3, #32
 8024e74:	6023      	str	r3, [r4, #0]
 8024e76:	4833      	ldr	r0, [pc, #204]	@ (8024f44 <_printf_i+0x23c>)
 8024e78:	2778      	movs	r7, #120	@ 0x78
 8024e7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8024e7e:	6823      	ldr	r3, [r4, #0]
 8024e80:	6831      	ldr	r1, [r6, #0]
 8024e82:	061f      	lsls	r7, r3, #24
 8024e84:	f851 5b04 	ldr.w	r5, [r1], #4
 8024e88:	d402      	bmi.n	8024e90 <_printf_i+0x188>
 8024e8a:	065f      	lsls	r7, r3, #25
 8024e8c:	bf48      	it	mi
 8024e8e:	b2ad      	uxthmi	r5, r5
 8024e90:	6031      	str	r1, [r6, #0]
 8024e92:	07d9      	lsls	r1, r3, #31
 8024e94:	bf44      	itt	mi
 8024e96:	f043 0320 	orrmi.w	r3, r3, #32
 8024e9a:	6023      	strmi	r3, [r4, #0]
 8024e9c:	b11d      	cbz	r5, 8024ea6 <_printf_i+0x19e>
 8024e9e:	2310      	movs	r3, #16
 8024ea0:	e7ac      	b.n	8024dfc <_printf_i+0xf4>
 8024ea2:	4827      	ldr	r0, [pc, #156]	@ (8024f40 <_printf_i+0x238>)
 8024ea4:	e7e9      	b.n	8024e7a <_printf_i+0x172>
 8024ea6:	6823      	ldr	r3, [r4, #0]
 8024ea8:	f023 0320 	bic.w	r3, r3, #32
 8024eac:	6023      	str	r3, [r4, #0]
 8024eae:	e7f6      	b.n	8024e9e <_printf_i+0x196>
 8024eb0:	4616      	mov	r6, r2
 8024eb2:	e7bd      	b.n	8024e30 <_printf_i+0x128>
 8024eb4:	6833      	ldr	r3, [r6, #0]
 8024eb6:	6825      	ldr	r5, [r4, #0]
 8024eb8:	6961      	ldr	r1, [r4, #20]
 8024eba:	1d18      	adds	r0, r3, #4
 8024ebc:	6030      	str	r0, [r6, #0]
 8024ebe:	062e      	lsls	r6, r5, #24
 8024ec0:	681b      	ldr	r3, [r3, #0]
 8024ec2:	d501      	bpl.n	8024ec8 <_printf_i+0x1c0>
 8024ec4:	6019      	str	r1, [r3, #0]
 8024ec6:	e002      	b.n	8024ece <_printf_i+0x1c6>
 8024ec8:	0668      	lsls	r0, r5, #25
 8024eca:	d5fb      	bpl.n	8024ec4 <_printf_i+0x1bc>
 8024ecc:	8019      	strh	r1, [r3, #0]
 8024ece:	2300      	movs	r3, #0
 8024ed0:	6123      	str	r3, [r4, #16]
 8024ed2:	4616      	mov	r6, r2
 8024ed4:	e7bc      	b.n	8024e50 <_printf_i+0x148>
 8024ed6:	6833      	ldr	r3, [r6, #0]
 8024ed8:	1d1a      	adds	r2, r3, #4
 8024eda:	6032      	str	r2, [r6, #0]
 8024edc:	681e      	ldr	r6, [r3, #0]
 8024ede:	6862      	ldr	r2, [r4, #4]
 8024ee0:	2100      	movs	r1, #0
 8024ee2:	4630      	mov	r0, r6
 8024ee4:	f7db f9fc 	bl	80002e0 <memchr>
 8024ee8:	b108      	cbz	r0, 8024eee <_printf_i+0x1e6>
 8024eea:	1b80      	subs	r0, r0, r6
 8024eec:	6060      	str	r0, [r4, #4]
 8024eee:	6863      	ldr	r3, [r4, #4]
 8024ef0:	6123      	str	r3, [r4, #16]
 8024ef2:	2300      	movs	r3, #0
 8024ef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024ef8:	e7aa      	b.n	8024e50 <_printf_i+0x148>
 8024efa:	6923      	ldr	r3, [r4, #16]
 8024efc:	4632      	mov	r2, r6
 8024efe:	4649      	mov	r1, r9
 8024f00:	4640      	mov	r0, r8
 8024f02:	47d0      	blx	sl
 8024f04:	3001      	adds	r0, #1
 8024f06:	d0ad      	beq.n	8024e64 <_printf_i+0x15c>
 8024f08:	6823      	ldr	r3, [r4, #0]
 8024f0a:	079b      	lsls	r3, r3, #30
 8024f0c:	d413      	bmi.n	8024f36 <_printf_i+0x22e>
 8024f0e:	68e0      	ldr	r0, [r4, #12]
 8024f10:	9b03      	ldr	r3, [sp, #12]
 8024f12:	4298      	cmp	r0, r3
 8024f14:	bfb8      	it	lt
 8024f16:	4618      	movlt	r0, r3
 8024f18:	e7a6      	b.n	8024e68 <_printf_i+0x160>
 8024f1a:	2301      	movs	r3, #1
 8024f1c:	4632      	mov	r2, r6
 8024f1e:	4649      	mov	r1, r9
 8024f20:	4640      	mov	r0, r8
 8024f22:	47d0      	blx	sl
 8024f24:	3001      	adds	r0, #1
 8024f26:	d09d      	beq.n	8024e64 <_printf_i+0x15c>
 8024f28:	3501      	adds	r5, #1
 8024f2a:	68e3      	ldr	r3, [r4, #12]
 8024f2c:	9903      	ldr	r1, [sp, #12]
 8024f2e:	1a5b      	subs	r3, r3, r1
 8024f30:	42ab      	cmp	r3, r5
 8024f32:	dcf2      	bgt.n	8024f1a <_printf_i+0x212>
 8024f34:	e7eb      	b.n	8024f0e <_printf_i+0x206>
 8024f36:	2500      	movs	r5, #0
 8024f38:	f104 0619 	add.w	r6, r4, #25
 8024f3c:	e7f5      	b.n	8024f2a <_printf_i+0x222>
 8024f3e:	bf00      	nop
 8024f40:	0802d2f0 	.word	0x0802d2f0
 8024f44:	0802d301 	.word	0x0802d301

08024f48 <_scanf_float>:
 8024f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f4c:	b087      	sub	sp, #28
 8024f4e:	4617      	mov	r7, r2
 8024f50:	9303      	str	r3, [sp, #12]
 8024f52:	688b      	ldr	r3, [r1, #8]
 8024f54:	1e5a      	subs	r2, r3, #1
 8024f56:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8024f5a:	bf81      	itttt	hi
 8024f5c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8024f60:	eb03 0b05 	addhi.w	fp, r3, r5
 8024f64:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8024f68:	608b      	strhi	r3, [r1, #8]
 8024f6a:	680b      	ldr	r3, [r1, #0]
 8024f6c:	460a      	mov	r2, r1
 8024f6e:	f04f 0500 	mov.w	r5, #0
 8024f72:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8024f76:	f842 3b1c 	str.w	r3, [r2], #28
 8024f7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8024f7e:	4680      	mov	r8, r0
 8024f80:	460c      	mov	r4, r1
 8024f82:	bf98      	it	ls
 8024f84:	f04f 0b00 	movls.w	fp, #0
 8024f88:	9201      	str	r2, [sp, #4]
 8024f8a:	4616      	mov	r6, r2
 8024f8c:	46aa      	mov	sl, r5
 8024f8e:	46a9      	mov	r9, r5
 8024f90:	9502      	str	r5, [sp, #8]
 8024f92:	68a2      	ldr	r2, [r4, #8]
 8024f94:	b152      	cbz	r2, 8024fac <_scanf_float+0x64>
 8024f96:	683b      	ldr	r3, [r7, #0]
 8024f98:	781b      	ldrb	r3, [r3, #0]
 8024f9a:	2b4e      	cmp	r3, #78	@ 0x4e
 8024f9c:	d864      	bhi.n	8025068 <_scanf_float+0x120>
 8024f9e:	2b40      	cmp	r3, #64	@ 0x40
 8024fa0:	d83c      	bhi.n	802501c <_scanf_float+0xd4>
 8024fa2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8024fa6:	b2c8      	uxtb	r0, r1
 8024fa8:	280e      	cmp	r0, #14
 8024faa:	d93a      	bls.n	8025022 <_scanf_float+0xda>
 8024fac:	f1b9 0f00 	cmp.w	r9, #0
 8024fb0:	d003      	beq.n	8024fba <_scanf_float+0x72>
 8024fb2:	6823      	ldr	r3, [r4, #0]
 8024fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8024fb8:	6023      	str	r3, [r4, #0]
 8024fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024fbe:	f1ba 0f01 	cmp.w	sl, #1
 8024fc2:	f200 8117 	bhi.w	80251f4 <_scanf_float+0x2ac>
 8024fc6:	9b01      	ldr	r3, [sp, #4]
 8024fc8:	429e      	cmp	r6, r3
 8024fca:	f200 8108 	bhi.w	80251de <_scanf_float+0x296>
 8024fce:	2001      	movs	r0, #1
 8024fd0:	b007      	add	sp, #28
 8024fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fd6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8024fda:	2a0d      	cmp	r2, #13
 8024fdc:	d8e6      	bhi.n	8024fac <_scanf_float+0x64>
 8024fde:	a101      	add	r1, pc, #4	@ (adr r1, 8024fe4 <_scanf_float+0x9c>)
 8024fe0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8024fe4:	0802512b 	.word	0x0802512b
 8024fe8:	08024fad 	.word	0x08024fad
 8024fec:	08024fad 	.word	0x08024fad
 8024ff0:	08024fad 	.word	0x08024fad
 8024ff4:	0802518b 	.word	0x0802518b
 8024ff8:	08025163 	.word	0x08025163
 8024ffc:	08024fad 	.word	0x08024fad
 8025000:	08024fad 	.word	0x08024fad
 8025004:	08025139 	.word	0x08025139
 8025008:	08024fad 	.word	0x08024fad
 802500c:	08024fad 	.word	0x08024fad
 8025010:	08024fad 	.word	0x08024fad
 8025014:	08024fad 	.word	0x08024fad
 8025018:	080250f1 	.word	0x080250f1
 802501c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8025020:	e7db      	b.n	8024fda <_scanf_float+0x92>
 8025022:	290e      	cmp	r1, #14
 8025024:	d8c2      	bhi.n	8024fac <_scanf_float+0x64>
 8025026:	a001      	add	r0, pc, #4	@ (adr r0, 802502c <_scanf_float+0xe4>)
 8025028:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 802502c:	080250e1 	.word	0x080250e1
 8025030:	08024fad 	.word	0x08024fad
 8025034:	080250e1 	.word	0x080250e1
 8025038:	08025177 	.word	0x08025177
 802503c:	08024fad 	.word	0x08024fad
 8025040:	08025089 	.word	0x08025089
 8025044:	080250c7 	.word	0x080250c7
 8025048:	080250c7 	.word	0x080250c7
 802504c:	080250c7 	.word	0x080250c7
 8025050:	080250c7 	.word	0x080250c7
 8025054:	080250c7 	.word	0x080250c7
 8025058:	080250c7 	.word	0x080250c7
 802505c:	080250c7 	.word	0x080250c7
 8025060:	080250c7 	.word	0x080250c7
 8025064:	080250c7 	.word	0x080250c7
 8025068:	2b6e      	cmp	r3, #110	@ 0x6e
 802506a:	d809      	bhi.n	8025080 <_scanf_float+0x138>
 802506c:	2b60      	cmp	r3, #96	@ 0x60
 802506e:	d8b2      	bhi.n	8024fd6 <_scanf_float+0x8e>
 8025070:	2b54      	cmp	r3, #84	@ 0x54
 8025072:	d07b      	beq.n	802516c <_scanf_float+0x224>
 8025074:	2b59      	cmp	r3, #89	@ 0x59
 8025076:	d199      	bne.n	8024fac <_scanf_float+0x64>
 8025078:	2d07      	cmp	r5, #7
 802507a:	d197      	bne.n	8024fac <_scanf_float+0x64>
 802507c:	2508      	movs	r5, #8
 802507e:	e02c      	b.n	80250da <_scanf_float+0x192>
 8025080:	2b74      	cmp	r3, #116	@ 0x74
 8025082:	d073      	beq.n	802516c <_scanf_float+0x224>
 8025084:	2b79      	cmp	r3, #121	@ 0x79
 8025086:	e7f6      	b.n	8025076 <_scanf_float+0x12e>
 8025088:	6821      	ldr	r1, [r4, #0]
 802508a:	05c8      	lsls	r0, r1, #23
 802508c:	d51b      	bpl.n	80250c6 <_scanf_float+0x17e>
 802508e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8025092:	6021      	str	r1, [r4, #0]
 8025094:	f109 0901 	add.w	r9, r9, #1
 8025098:	f1bb 0f00 	cmp.w	fp, #0
 802509c:	d003      	beq.n	80250a6 <_scanf_float+0x15e>
 802509e:	3201      	adds	r2, #1
 80250a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80250a4:	60a2      	str	r2, [r4, #8]
 80250a6:	68a3      	ldr	r3, [r4, #8]
 80250a8:	3b01      	subs	r3, #1
 80250aa:	60a3      	str	r3, [r4, #8]
 80250ac:	6923      	ldr	r3, [r4, #16]
 80250ae:	3301      	adds	r3, #1
 80250b0:	6123      	str	r3, [r4, #16]
 80250b2:	687b      	ldr	r3, [r7, #4]
 80250b4:	3b01      	subs	r3, #1
 80250b6:	2b00      	cmp	r3, #0
 80250b8:	607b      	str	r3, [r7, #4]
 80250ba:	f340 8087 	ble.w	80251cc <_scanf_float+0x284>
 80250be:	683b      	ldr	r3, [r7, #0]
 80250c0:	3301      	adds	r3, #1
 80250c2:	603b      	str	r3, [r7, #0]
 80250c4:	e765      	b.n	8024f92 <_scanf_float+0x4a>
 80250c6:	eb1a 0105 	adds.w	r1, sl, r5
 80250ca:	f47f af6f 	bne.w	8024fac <_scanf_float+0x64>
 80250ce:	6822      	ldr	r2, [r4, #0]
 80250d0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80250d4:	6022      	str	r2, [r4, #0]
 80250d6:	460d      	mov	r5, r1
 80250d8:	468a      	mov	sl, r1
 80250da:	f806 3b01 	strb.w	r3, [r6], #1
 80250de:	e7e2      	b.n	80250a6 <_scanf_float+0x15e>
 80250e0:	6822      	ldr	r2, [r4, #0]
 80250e2:	0610      	lsls	r0, r2, #24
 80250e4:	f57f af62 	bpl.w	8024fac <_scanf_float+0x64>
 80250e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80250ec:	6022      	str	r2, [r4, #0]
 80250ee:	e7f4      	b.n	80250da <_scanf_float+0x192>
 80250f0:	f1ba 0f00 	cmp.w	sl, #0
 80250f4:	d10e      	bne.n	8025114 <_scanf_float+0x1cc>
 80250f6:	f1b9 0f00 	cmp.w	r9, #0
 80250fa:	d10e      	bne.n	802511a <_scanf_float+0x1d2>
 80250fc:	6822      	ldr	r2, [r4, #0]
 80250fe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8025102:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8025106:	d108      	bne.n	802511a <_scanf_float+0x1d2>
 8025108:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 802510c:	6022      	str	r2, [r4, #0]
 802510e:	f04f 0a01 	mov.w	sl, #1
 8025112:	e7e2      	b.n	80250da <_scanf_float+0x192>
 8025114:	f1ba 0f02 	cmp.w	sl, #2
 8025118:	d055      	beq.n	80251c6 <_scanf_float+0x27e>
 802511a:	2d01      	cmp	r5, #1
 802511c:	d002      	beq.n	8025124 <_scanf_float+0x1dc>
 802511e:	2d04      	cmp	r5, #4
 8025120:	f47f af44 	bne.w	8024fac <_scanf_float+0x64>
 8025124:	3501      	adds	r5, #1
 8025126:	b2ed      	uxtb	r5, r5
 8025128:	e7d7      	b.n	80250da <_scanf_float+0x192>
 802512a:	f1ba 0f01 	cmp.w	sl, #1
 802512e:	f47f af3d 	bne.w	8024fac <_scanf_float+0x64>
 8025132:	f04f 0a02 	mov.w	sl, #2
 8025136:	e7d0      	b.n	80250da <_scanf_float+0x192>
 8025138:	b97d      	cbnz	r5, 802515a <_scanf_float+0x212>
 802513a:	f1b9 0f00 	cmp.w	r9, #0
 802513e:	f47f af38 	bne.w	8024fb2 <_scanf_float+0x6a>
 8025142:	6822      	ldr	r2, [r4, #0]
 8025144:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8025148:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 802514c:	f040 8101 	bne.w	8025352 <_scanf_float+0x40a>
 8025150:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8025154:	6022      	str	r2, [r4, #0]
 8025156:	2501      	movs	r5, #1
 8025158:	e7bf      	b.n	80250da <_scanf_float+0x192>
 802515a:	2d03      	cmp	r5, #3
 802515c:	d0e2      	beq.n	8025124 <_scanf_float+0x1dc>
 802515e:	2d05      	cmp	r5, #5
 8025160:	e7de      	b.n	8025120 <_scanf_float+0x1d8>
 8025162:	2d02      	cmp	r5, #2
 8025164:	f47f af22 	bne.w	8024fac <_scanf_float+0x64>
 8025168:	2503      	movs	r5, #3
 802516a:	e7b6      	b.n	80250da <_scanf_float+0x192>
 802516c:	2d06      	cmp	r5, #6
 802516e:	f47f af1d 	bne.w	8024fac <_scanf_float+0x64>
 8025172:	2507      	movs	r5, #7
 8025174:	e7b1      	b.n	80250da <_scanf_float+0x192>
 8025176:	6822      	ldr	r2, [r4, #0]
 8025178:	0591      	lsls	r1, r2, #22
 802517a:	f57f af17 	bpl.w	8024fac <_scanf_float+0x64>
 802517e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8025182:	6022      	str	r2, [r4, #0]
 8025184:	f8cd 9008 	str.w	r9, [sp, #8]
 8025188:	e7a7      	b.n	80250da <_scanf_float+0x192>
 802518a:	6822      	ldr	r2, [r4, #0]
 802518c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8025190:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8025194:	d006      	beq.n	80251a4 <_scanf_float+0x25c>
 8025196:	0550      	lsls	r0, r2, #21
 8025198:	f57f af08 	bpl.w	8024fac <_scanf_float+0x64>
 802519c:	f1b9 0f00 	cmp.w	r9, #0
 80251a0:	f000 80d7 	beq.w	8025352 <_scanf_float+0x40a>
 80251a4:	0591      	lsls	r1, r2, #22
 80251a6:	bf58      	it	pl
 80251a8:	9902      	ldrpl	r1, [sp, #8]
 80251aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80251ae:	bf58      	it	pl
 80251b0:	eba9 0101 	subpl.w	r1, r9, r1
 80251b4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80251b8:	bf58      	it	pl
 80251ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80251be:	6022      	str	r2, [r4, #0]
 80251c0:	f04f 0900 	mov.w	r9, #0
 80251c4:	e789      	b.n	80250da <_scanf_float+0x192>
 80251c6:	f04f 0a03 	mov.w	sl, #3
 80251ca:	e786      	b.n	80250da <_scanf_float+0x192>
 80251cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80251d0:	4639      	mov	r1, r7
 80251d2:	4640      	mov	r0, r8
 80251d4:	4798      	blx	r3
 80251d6:	2800      	cmp	r0, #0
 80251d8:	f43f aedb 	beq.w	8024f92 <_scanf_float+0x4a>
 80251dc:	e6e6      	b.n	8024fac <_scanf_float+0x64>
 80251de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80251e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80251e6:	463a      	mov	r2, r7
 80251e8:	4640      	mov	r0, r8
 80251ea:	4798      	blx	r3
 80251ec:	6923      	ldr	r3, [r4, #16]
 80251ee:	3b01      	subs	r3, #1
 80251f0:	6123      	str	r3, [r4, #16]
 80251f2:	e6e8      	b.n	8024fc6 <_scanf_float+0x7e>
 80251f4:	1e6b      	subs	r3, r5, #1
 80251f6:	2b06      	cmp	r3, #6
 80251f8:	d824      	bhi.n	8025244 <_scanf_float+0x2fc>
 80251fa:	2d02      	cmp	r5, #2
 80251fc:	d836      	bhi.n	802526c <_scanf_float+0x324>
 80251fe:	9b01      	ldr	r3, [sp, #4]
 8025200:	429e      	cmp	r6, r3
 8025202:	f67f aee4 	bls.w	8024fce <_scanf_float+0x86>
 8025206:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802520a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802520e:	463a      	mov	r2, r7
 8025210:	4640      	mov	r0, r8
 8025212:	4798      	blx	r3
 8025214:	6923      	ldr	r3, [r4, #16]
 8025216:	3b01      	subs	r3, #1
 8025218:	6123      	str	r3, [r4, #16]
 802521a:	e7f0      	b.n	80251fe <_scanf_float+0x2b6>
 802521c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8025220:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8025224:	463a      	mov	r2, r7
 8025226:	4640      	mov	r0, r8
 8025228:	4798      	blx	r3
 802522a:	6923      	ldr	r3, [r4, #16]
 802522c:	3b01      	subs	r3, #1
 802522e:	6123      	str	r3, [r4, #16]
 8025230:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025234:	fa5f fa8a 	uxtb.w	sl, sl
 8025238:	f1ba 0f02 	cmp.w	sl, #2
 802523c:	d1ee      	bne.n	802521c <_scanf_float+0x2d4>
 802523e:	3d03      	subs	r5, #3
 8025240:	b2ed      	uxtb	r5, r5
 8025242:	1b76      	subs	r6, r6, r5
 8025244:	6823      	ldr	r3, [r4, #0]
 8025246:	05da      	lsls	r2, r3, #23
 8025248:	d530      	bpl.n	80252ac <_scanf_float+0x364>
 802524a:	055b      	lsls	r3, r3, #21
 802524c:	d511      	bpl.n	8025272 <_scanf_float+0x32a>
 802524e:	9b01      	ldr	r3, [sp, #4]
 8025250:	429e      	cmp	r6, r3
 8025252:	f67f aebc 	bls.w	8024fce <_scanf_float+0x86>
 8025256:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802525a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802525e:	463a      	mov	r2, r7
 8025260:	4640      	mov	r0, r8
 8025262:	4798      	blx	r3
 8025264:	6923      	ldr	r3, [r4, #16]
 8025266:	3b01      	subs	r3, #1
 8025268:	6123      	str	r3, [r4, #16]
 802526a:	e7f0      	b.n	802524e <_scanf_float+0x306>
 802526c:	46aa      	mov	sl, r5
 802526e:	46b3      	mov	fp, r6
 8025270:	e7de      	b.n	8025230 <_scanf_float+0x2e8>
 8025272:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8025276:	6923      	ldr	r3, [r4, #16]
 8025278:	2965      	cmp	r1, #101	@ 0x65
 802527a:	f103 33ff 	add.w	r3, r3, #4294967295
 802527e:	f106 35ff 	add.w	r5, r6, #4294967295
 8025282:	6123      	str	r3, [r4, #16]
 8025284:	d00c      	beq.n	80252a0 <_scanf_float+0x358>
 8025286:	2945      	cmp	r1, #69	@ 0x45
 8025288:	d00a      	beq.n	80252a0 <_scanf_float+0x358>
 802528a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802528e:	463a      	mov	r2, r7
 8025290:	4640      	mov	r0, r8
 8025292:	4798      	blx	r3
 8025294:	6923      	ldr	r3, [r4, #16]
 8025296:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 802529a:	3b01      	subs	r3, #1
 802529c:	1eb5      	subs	r5, r6, #2
 802529e:	6123      	str	r3, [r4, #16]
 80252a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80252a4:	463a      	mov	r2, r7
 80252a6:	4640      	mov	r0, r8
 80252a8:	4798      	blx	r3
 80252aa:	462e      	mov	r6, r5
 80252ac:	6822      	ldr	r2, [r4, #0]
 80252ae:	f012 0210 	ands.w	r2, r2, #16
 80252b2:	d001      	beq.n	80252b8 <_scanf_float+0x370>
 80252b4:	2000      	movs	r0, #0
 80252b6:	e68b      	b.n	8024fd0 <_scanf_float+0x88>
 80252b8:	7032      	strb	r2, [r6, #0]
 80252ba:	6823      	ldr	r3, [r4, #0]
 80252bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80252c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80252c4:	d11a      	bne.n	80252fc <_scanf_float+0x3b4>
 80252c6:	9b02      	ldr	r3, [sp, #8]
 80252c8:	454b      	cmp	r3, r9
 80252ca:	eba3 0209 	sub.w	r2, r3, r9
 80252ce:	d121      	bne.n	8025314 <_scanf_float+0x3cc>
 80252d0:	9901      	ldr	r1, [sp, #4]
 80252d2:	2200      	movs	r2, #0
 80252d4:	4640      	mov	r0, r8
 80252d6:	f002 fb51 	bl	802797c <_strtod_r>
 80252da:	9b03      	ldr	r3, [sp, #12]
 80252dc:	6821      	ldr	r1, [r4, #0]
 80252de:	681b      	ldr	r3, [r3, #0]
 80252e0:	f011 0f02 	tst.w	r1, #2
 80252e4:	f103 0204 	add.w	r2, r3, #4
 80252e8:	d01f      	beq.n	802532a <_scanf_float+0x3e2>
 80252ea:	9903      	ldr	r1, [sp, #12]
 80252ec:	600a      	str	r2, [r1, #0]
 80252ee:	681b      	ldr	r3, [r3, #0]
 80252f0:	ed83 0b00 	vstr	d0, [r3]
 80252f4:	68e3      	ldr	r3, [r4, #12]
 80252f6:	3301      	adds	r3, #1
 80252f8:	60e3      	str	r3, [r4, #12]
 80252fa:	e7db      	b.n	80252b4 <_scanf_float+0x36c>
 80252fc:	9b04      	ldr	r3, [sp, #16]
 80252fe:	2b00      	cmp	r3, #0
 8025300:	d0e6      	beq.n	80252d0 <_scanf_float+0x388>
 8025302:	9905      	ldr	r1, [sp, #20]
 8025304:	230a      	movs	r3, #10
 8025306:	3101      	adds	r1, #1
 8025308:	4640      	mov	r0, r8
 802530a:	f7ff f9e5 	bl	80246d8 <_strtol_r>
 802530e:	9b04      	ldr	r3, [sp, #16]
 8025310:	9e05      	ldr	r6, [sp, #20]
 8025312:	1ac2      	subs	r2, r0, r3
 8025314:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8025318:	429e      	cmp	r6, r3
 802531a:	bf28      	it	cs
 802531c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8025320:	490d      	ldr	r1, [pc, #52]	@ (8025358 <_scanf_float+0x410>)
 8025322:	4630      	mov	r0, r6
 8025324:	f000 f8f0 	bl	8025508 <siprintf>
 8025328:	e7d2      	b.n	80252d0 <_scanf_float+0x388>
 802532a:	f011 0f04 	tst.w	r1, #4
 802532e:	9903      	ldr	r1, [sp, #12]
 8025330:	600a      	str	r2, [r1, #0]
 8025332:	d1dc      	bne.n	80252ee <_scanf_float+0x3a6>
 8025334:	eeb4 0b40 	vcmp.f64	d0, d0
 8025338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802533c:	681d      	ldr	r5, [r3, #0]
 802533e:	d705      	bvc.n	802534c <_scanf_float+0x404>
 8025340:	4806      	ldr	r0, [pc, #24]	@ (802535c <_scanf_float+0x414>)
 8025342:	f000 fa6b 	bl	802581c <nanf>
 8025346:	ed85 0a00 	vstr	s0, [r5]
 802534a:	e7d3      	b.n	80252f4 <_scanf_float+0x3ac>
 802534c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8025350:	e7f9      	b.n	8025346 <_scanf_float+0x3fe>
 8025352:	f04f 0900 	mov.w	r9, #0
 8025356:	e630      	b.n	8024fba <_scanf_float+0x72>
 8025358:	0802d312 	.word	0x0802d312
 802535c:	0802d352 	.word	0x0802d352

08025360 <std>:
 8025360:	2300      	movs	r3, #0
 8025362:	b510      	push	{r4, lr}
 8025364:	4604      	mov	r4, r0
 8025366:	e9c0 3300 	strd	r3, r3, [r0]
 802536a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802536e:	6083      	str	r3, [r0, #8]
 8025370:	8181      	strh	r1, [r0, #12]
 8025372:	6643      	str	r3, [r0, #100]	@ 0x64
 8025374:	81c2      	strh	r2, [r0, #14]
 8025376:	6183      	str	r3, [r0, #24]
 8025378:	4619      	mov	r1, r3
 802537a:	2208      	movs	r2, #8
 802537c:	305c      	adds	r0, #92	@ 0x5c
 802537e:	f000 f99d 	bl	80256bc <memset>
 8025382:	4b0d      	ldr	r3, [pc, #52]	@ (80253b8 <std+0x58>)
 8025384:	6263      	str	r3, [r4, #36]	@ 0x24
 8025386:	4b0d      	ldr	r3, [pc, #52]	@ (80253bc <std+0x5c>)
 8025388:	62a3      	str	r3, [r4, #40]	@ 0x28
 802538a:	4b0d      	ldr	r3, [pc, #52]	@ (80253c0 <std+0x60>)
 802538c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802538e:	4b0d      	ldr	r3, [pc, #52]	@ (80253c4 <std+0x64>)
 8025390:	6323      	str	r3, [r4, #48]	@ 0x30
 8025392:	4b0d      	ldr	r3, [pc, #52]	@ (80253c8 <std+0x68>)
 8025394:	6224      	str	r4, [r4, #32]
 8025396:	429c      	cmp	r4, r3
 8025398:	d006      	beq.n	80253a8 <std+0x48>
 802539a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802539e:	4294      	cmp	r4, r2
 80253a0:	d002      	beq.n	80253a8 <std+0x48>
 80253a2:	33d0      	adds	r3, #208	@ 0xd0
 80253a4:	429c      	cmp	r4, r3
 80253a6:	d105      	bne.n	80253b4 <std+0x54>
 80253a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80253ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80253b0:	f000 ba22 	b.w	80257f8 <__retarget_lock_init_recursive>
 80253b4:	bd10      	pop	{r4, pc}
 80253b6:	bf00      	nop
 80253b8:	0802559d 	.word	0x0802559d
 80253bc:	080255c3 	.word	0x080255c3
 80253c0:	080255fb 	.word	0x080255fb
 80253c4:	0802561f 	.word	0x0802561f
 80253c8:	2400bfd0 	.word	0x2400bfd0

080253cc <stdio_exit_handler>:
 80253cc:	4a02      	ldr	r2, [pc, #8]	@ (80253d8 <stdio_exit_handler+0xc>)
 80253ce:	4903      	ldr	r1, [pc, #12]	@ (80253dc <stdio_exit_handler+0x10>)
 80253d0:	4803      	ldr	r0, [pc, #12]	@ (80253e0 <stdio_exit_handler+0x14>)
 80253d2:	f000 b869 	b.w	80254a8 <_fwalk_sglue>
 80253d6:	bf00      	nop
 80253d8:	24000218 	.word	0x24000218
 80253dc:	080285f9 	.word	0x080285f9
 80253e0:	24000228 	.word	0x24000228

080253e4 <cleanup_stdio>:
 80253e4:	6841      	ldr	r1, [r0, #4]
 80253e6:	4b0c      	ldr	r3, [pc, #48]	@ (8025418 <cleanup_stdio+0x34>)
 80253e8:	4299      	cmp	r1, r3
 80253ea:	b510      	push	{r4, lr}
 80253ec:	4604      	mov	r4, r0
 80253ee:	d001      	beq.n	80253f4 <cleanup_stdio+0x10>
 80253f0:	f003 f902 	bl	80285f8 <_fflush_r>
 80253f4:	68a1      	ldr	r1, [r4, #8]
 80253f6:	4b09      	ldr	r3, [pc, #36]	@ (802541c <cleanup_stdio+0x38>)
 80253f8:	4299      	cmp	r1, r3
 80253fa:	d002      	beq.n	8025402 <cleanup_stdio+0x1e>
 80253fc:	4620      	mov	r0, r4
 80253fe:	f003 f8fb 	bl	80285f8 <_fflush_r>
 8025402:	68e1      	ldr	r1, [r4, #12]
 8025404:	4b06      	ldr	r3, [pc, #24]	@ (8025420 <cleanup_stdio+0x3c>)
 8025406:	4299      	cmp	r1, r3
 8025408:	d004      	beq.n	8025414 <cleanup_stdio+0x30>
 802540a:	4620      	mov	r0, r4
 802540c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025410:	f003 b8f2 	b.w	80285f8 <_fflush_r>
 8025414:	bd10      	pop	{r4, pc}
 8025416:	bf00      	nop
 8025418:	2400bfd0 	.word	0x2400bfd0
 802541c:	2400c038 	.word	0x2400c038
 8025420:	2400c0a0 	.word	0x2400c0a0

08025424 <global_stdio_init.part.0>:
 8025424:	b510      	push	{r4, lr}
 8025426:	4b0b      	ldr	r3, [pc, #44]	@ (8025454 <global_stdio_init.part.0+0x30>)
 8025428:	4c0b      	ldr	r4, [pc, #44]	@ (8025458 <global_stdio_init.part.0+0x34>)
 802542a:	4a0c      	ldr	r2, [pc, #48]	@ (802545c <global_stdio_init.part.0+0x38>)
 802542c:	601a      	str	r2, [r3, #0]
 802542e:	4620      	mov	r0, r4
 8025430:	2200      	movs	r2, #0
 8025432:	2104      	movs	r1, #4
 8025434:	f7ff ff94 	bl	8025360 <std>
 8025438:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802543c:	2201      	movs	r2, #1
 802543e:	2109      	movs	r1, #9
 8025440:	f7ff ff8e 	bl	8025360 <std>
 8025444:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8025448:	2202      	movs	r2, #2
 802544a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802544e:	2112      	movs	r1, #18
 8025450:	f7ff bf86 	b.w	8025360 <std>
 8025454:	2400c108 	.word	0x2400c108
 8025458:	2400bfd0 	.word	0x2400bfd0
 802545c:	080253cd 	.word	0x080253cd

08025460 <__sfp_lock_acquire>:
 8025460:	4801      	ldr	r0, [pc, #4]	@ (8025468 <__sfp_lock_acquire+0x8>)
 8025462:	f000 b9ca 	b.w	80257fa <__retarget_lock_acquire_recursive>
 8025466:	bf00      	nop
 8025468:	2400c10d 	.word	0x2400c10d

0802546c <__sfp_lock_release>:
 802546c:	4801      	ldr	r0, [pc, #4]	@ (8025474 <__sfp_lock_release+0x8>)
 802546e:	f000 b9c5 	b.w	80257fc <__retarget_lock_release_recursive>
 8025472:	bf00      	nop
 8025474:	2400c10d 	.word	0x2400c10d

08025478 <__sinit>:
 8025478:	b510      	push	{r4, lr}
 802547a:	4604      	mov	r4, r0
 802547c:	f7ff fff0 	bl	8025460 <__sfp_lock_acquire>
 8025480:	6a23      	ldr	r3, [r4, #32]
 8025482:	b11b      	cbz	r3, 802548c <__sinit+0x14>
 8025484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025488:	f7ff bff0 	b.w	802546c <__sfp_lock_release>
 802548c:	4b04      	ldr	r3, [pc, #16]	@ (80254a0 <__sinit+0x28>)
 802548e:	6223      	str	r3, [r4, #32]
 8025490:	4b04      	ldr	r3, [pc, #16]	@ (80254a4 <__sinit+0x2c>)
 8025492:	681b      	ldr	r3, [r3, #0]
 8025494:	2b00      	cmp	r3, #0
 8025496:	d1f5      	bne.n	8025484 <__sinit+0xc>
 8025498:	f7ff ffc4 	bl	8025424 <global_stdio_init.part.0>
 802549c:	e7f2      	b.n	8025484 <__sinit+0xc>
 802549e:	bf00      	nop
 80254a0:	080253e5 	.word	0x080253e5
 80254a4:	2400c108 	.word	0x2400c108

080254a8 <_fwalk_sglue>:
 80254a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80254ac:	4607      	mov	r7, r0
 80254ae:	4688      	mov	r8, r1
 80254b0:	4614      	mov	r4, r2
 80254b2:	2600      	movs	r6, #0
 80254b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80254b8:	f1b9 0901 	subs.w	r9, r9, #1
 80254bc:	d505      	bpl.n	80254ca <_fwalk_sglue+0x22>
 80254be:	6824      	ldr	r4, [r4, #0]
 80254c0:	2c00      	cmp	r4, #0
 80254c2:	d1f7      	bne.n	80254b4 <_fwalk_sglue+0xc>
 80254c4:	4630      	mov	r0, r6
 80254c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80254ca:	89ab      	ldrh	r3, [r5, #12]
 80254cc:	2b01      	cmp	r3, #1
 80254ce:	d907      	bls.n	80254e0 <_fwalk_sglue+0x38>
 80254d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80254d4:	3301      	adds	r3, #1
 80254d6:	d003      	beq.n	80254e0 <_fwalk_sglue+0x38>
 80254d8:	4629      	mov	r1, r5
 80254da:	4638      	mov	r0, r7
 80254dc:	47c0      	blx	r8
 80254de:	4306      	orrs	r6, r0
 80254e0:	3568      	adds	r5, #104	@ 0x68
 80254e2:	e7e9      	b.n	80254b8 <_fwalk_sglue+0x10>

080254e4 <iprintf>:
 80254e4:	b40f      	push	{r0, r1, r2, r3}
 80254e6:	b507      	push	{r0, r1, r2, lr}
 80254e8:	4906      	ldr	r1, [pc, #24]	@ (8025504 <iprintf+0x20>)
 80254ea:	ab04      	add	r3, sp, #16
 80254ec:	6808      	ldr	r0, [r1, #0]
 80254ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80254f2:	6881      	ldr	r1, [r0, #8]
 80254f4:	9301      	str	r3, [sp, #4]
 80254f6:	f002 fd95 	bl	8028024 <_vfiprintf_r>
 80254fa:	b003      	add	sp, #12
 80254fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8025500:	b004      	add	sp, #16
 8025502:	4770      	bx	lr
 8025504:	24000224 	.word	0x24000224

08025508 <siprintf>:
 8025508:	b40e      	push	{r1, r2, r3}
 802550a:	b500      	push	{lr}
 802550c:	b09c      	sub	sp, #112	@ 0x70
 802550e:	ab1d      	add	r3, sp, #116	@ 0x74
 8025510:	9002      	str	r0, [sp, #8]
 8025512:	9006      	str	r0, [sp, #24]
 8025514:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8025518:	4809      	ldr	r0, [pc, #36]	@ (8025540 <siprintf+0x38>)
 802551a:	9107      	str	r1, [sp, #28]
 802551c:	9104      	str	r1, [sp, #16]
 802551e:	4909      	ldr	r1, [pc, #36]	@ (8025544 <siprintf+0x3c>)
 8025520:	f853 2b04 	ldr.w	r2, [r3], #4
 8025524:	9105      	str	r1, [sp, #20]
 8025526:	6800      	ldr	r0, [r0, #0]
 8025528:	9301      	str	r3, [sp, #4]
 802552a:	a902      	add	r1, sp, #8
 802552c:	f002 fa88 	bl	8027a40 <_svfiprintf_r>
 8025530:	9b02      	ldr	r3, [sp, #8]
 8025532:	2200      	movs	r2, #0
 8025534:	701a      	strb	r2, [r3, #0]
 8025536:	b01c      	add	sp, #112	@ 0x70
 8025538:	f85d eb04 	ldr.w	lr, [sp], #4
 802553c:	b003      	add	sp, #12
 802553e:	4770      	bx	lr
 8025540:	24000224 	.word	0x24000224
 8025544:	ffff0208 	.word	0xffff0208

08025548 <siscanf>:
 8025548:	b40e      	push	{r1, r2, r3}
 802554a:	b530      	push	{r4, r5, lr}
 802554c:	b09c      	sub	sp, #112	@ 0x70
 802554e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8025550:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8025554:	f854 5b04 	ldr.w	r5, [r4], #4
 8025558:	f8ad 2014 	strh.w	r2, [sp, #20]
 802555c:	9002      	str	r0, [sp, #8]
 802555e:	9006      	str	r0, [sp, #24]
 8025560:	f7da ff0e 	bl	8000380 <strlen>
 8025564:	4b0b      	ldr	r3, [pc, #44]	@ (8025594 <siscanf+0x4c>)
 8025566:	9003      	str	r0, [sp, #12]
 8025568:	9007      	str	r0, [sp, #28]
 802556a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802556c:	480a      	ldr	r0, [pc, #40]	@ (8025598 <siscanf+0x50>)
 802556e:	9401      	str	r4, [sp, #4]
 8025570:	2300      	movs	r3, #0
 8025572:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025574:	9314      	str	r3, [sp, #80]	@ 0x50
 8025576:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802557a:	f8ad 3016 	strh.w	r3, [sp, #22]
 802557e:	462a      	mov	r2, r5
 8025580:	4623      	mov	r3, r4
 8025582:	a902      	add	r1, sp, #8
 8025584:	6800      	ldr	r0, [r0, #0]
 8025586:	f002 fbaf 	bl	8027ce8 <__ssvfiscanf_r>
 802558a:	b01c      	add	sp, #112	@ 0x70
 802558c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025590:	b003      	add	sp, #12
 8025592:	4770      	bx	lr
 8025594:	080255bf 	.word	0x080255bf
 8025598:	24000224 	.word	0x24000224

0802559c <__sread>:
 802559c:	b510      	push	{r4, lr}
 802559e:	460c      	mov	r4, r1
 80255a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80255a4:	f000 f8ca 	bl	802573c <_read_r>
 80255a8:	2800      	cmp	r0, #0
 80255aa:	bfab      	itete	ge
 80255ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80255ae:	89a3      	ldrhlt	r3, [r4, #12]
 80255b0:	181b      	addge	r3, r3, r0
 80255b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80255b6:	bfac      	ite	ge
 80255b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80255ba:	81a3      	strhlt	r3, [r4, #12]
 80255bc:	bd10      	pop	{r4, pc}

080255be <__seofread>:
 80255be:	2000      	movs	r0, #0
 80255c0:	4770      	bx	lr

080255c2 <__swrite>:
 80255c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80255c6:	461f      	mov	r7, r3
 80255c8:	898b      	ldrh	r3, [r1, #12]
 80255ca:	05db      	lsls	r3, r3, #23
 80255cc:	4605      	mov	r5, r0
 80255ce:	460c      	mov	r4, r1
 80255d0:	4616      	mov	r6, r2
 80255d2:	d505      	bpl.n	80255e0 <__swrite+0x1e>
 80255d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80255d8:	2302      	movs	r3, #2
 80255da:	2200      	movs	r2, #0
 80255dc:	f000 f89c 	bl	8025718 <_lseek_r>
 80255e0:	89a3      	ldrh	r3, [r4, #12]
 80255e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80255e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80255ea:	81a3      	strh	r3, [r4, #12]
 80255ec:	4632      	mov	r2, r6
 80255ee:	463b      	mov	r3, r7
 80255f0:	4628      	mov	r0, r5
 80255f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80255f6:	f000 b8c3 	b.w	8025780 <_write_r>

080255fa <__sseek>:
 80255fa:	b510      	push	{r4, lr}
 80255fc:	460c      	mov	r4, r1
 80255fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025602:	f000 f889 	bl	8025718 <_lseek_r>
 8025606:	1c43      	adds	r3, r0, #1
 8025608:	89a3      	ldrh	r3, [r4, #12]
 802560a:	bf15      	itete	ne
 802560c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802560e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8025612:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8025616:	81a3      	strheq	r3, [r4, #12]
 8025618:	bf18      	it	ne
 802561a:	81a3      	strhne	r3, [r4, #12]
 802561c:	bd10      	pop	{r4, pc}

0802561e <__sclose>:
 802561e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025622:	f000 b869 	b.w	80256f8 <_close_r>
	...

08025628 <_vsiprintf_r>:
 8025628:	b500      	push	{lr}
 802562a:	b09b      	sub	sp, #108	@ 0x6c
 802562c:	9100      	str	r1, [sp, #0]
 802562e:	9104      	str	r1, [sp, #16]
 8025630:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8025634:	9105      	str	r1, [sp, #20]
 8025636:	9102      	str	r1, [sp, #8]
 8025638:	4905      	ldr	r1, [pc, #20]	@ (8025650 <_vsiprintf_r+0x28>)
 802563a:	9103      	str	r1, [sp, #12]
 802563c:	4669      	mov	r1, sp
 802563e:	f002 f9ff 	bl	8027a40 <_svfiprintf_r>
 8025642:	9b00      	ldr	r3, [sp, #0]
 8025644:	2200      	movs	r2, #0
 8025646:	701a      	strb	r2, [r3, #0]
 8025648:	b01b      	add	sp, #108	@ 0x6c
 802564a:	f85d fb04 	ldr.w	pc, [sp], #4
 802564e:	bf00      	nop
 8025650:	ffff0208 	.word	0xffff0208

08025654 <vsiprintf>:
 8025654:	4613      	mov	r3, r2
 8025656:	460a      	mov	r2, r1
 8025658:	4601      	mov	r1, r0
 802565a:	4802      	ldr	r0, [pc, #8]	@ (8025664 <vsiprintf+0x10>)
 802565c:	6800      	ldr	r0, [r0, #0]
 802565e:	f7ff bfe3 	b.w	8025628 <_vsiprintf_r>
 8025662:	bf00      	nop
 8025664:	24000224 	.word	0x24000224

08025668 <memcmp>:
 8025668:	b510      	push	{r4, lr}
 802566a:	3901      	subs	r1, #1
 802566c:	4402      	add	r2, r0
 802566e:	4290      	cmp	r0, r2
 8025670:	d101      	bne.n	8025676 <memcmp+0xe>
 8025672:	2000      	movs	r0, #0
 8025674:	e005      	b.n	8025682 <memcmp+0x1a>
 8025676:	7803      	ldrb	r3, [r0, #0]
 8025678:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802567c:	42a3      	cmp	r3, r4
 802567e:	d001      	beq.n	8025684 <memcmp+0x1c>
 8025680:	1b18      	subs	r0, r3, r4
 8025682:	bd10      	pop	{r4, pc}
 8025684:	3001      	adds	r0, #1
 8025686:	e7f2      	b.n	802566e <memcmp+0x6>

08025688 <memmove>:
 8025688:	4288      	cmp	r0, r1
 802568a:	b510      	push	{r4, lr}
 802568c:	eb01 0402 	add.w	r4, r1, r2
 8025690:	d902      	bls.n	8025698 <memmove+0x10>
 8025692:	4284      	cmp	r4, r0
 8025694:	4623      	mov	r3, r4
 8025696:	d807      	bhi.n	80256a8 <memmove+0x20>
 8025698:	1e43      	subs	r3, r0, #1
 802569a:	42a1      	cmp	r1, r4
 802569c:	d008      	beq.n	80256b0 <memmove+0x28>
 802569e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80256a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80256a6:	e7f8      	b.n	802569a <memmove+0x12>
 80256a8:	4402      	add	r2, r0
 80256aa:	4601      	mov	r1, r0
 80256ac:	428a      	cmp	r2, r1
 80256ae:	d100      	bne.n	80256b2 <memmove+0x2a>
 80256b0:	bd10      	pop	{r4, pc}
 80256b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80256b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80256ba:	e7f7      	b.n	80256ac <memmove+0x24>

080256bc <memset>:
 80256bc:	4402      	add	r2, r0
 80256be:	4603      	mov	r3, r0
 80256c0:	4293      	cmp	r3, r2
 80256c2:	d100      	bne.n	80256c6 <memset+0xa>
 80256c4:	4770      	bx	lr
 80256c6:	f803 1b01 	strb.w	r1, [r3], #1
 80256ca:	e7f9      	b.n	80256c0 <memset+0x4>

080256cc <strncmp>:
 80256cc:	b510      	push	{r4, lr}
 80256ce:	b16a      	cbz	r2, 80256ec <strncmp+0x20>
 80256d0:	3901      	subs	r1, #1
 80256d2:	1884      	adds	r4, r0, r2
 80256d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80256d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80256dc:	429a      	cmp	r2, r3
 80256de:	d103      	bne.n	80256e8 <strncmp+0x1c>
 80256e0:	42a0      	cmp	r0, r4
 80256e2:	d001      	beq.n	80256e8 <strncmp+0x1c>
 80256e4:	2a00      	cmp	r2, #0
 80256e6:	d1f5      	bne.n	80256d4 <strncmp+0x8>
 80256e8:	1ad0      	subs	r0, r2, r3
 80256ea:	bd10      	pop	{r4, pc}
 80256ec:	4610      	mov	r0, r2
 80256ee:	e7fc      	b.n	80256ea <strncmp+0x1e>

080256f0 <_localeconv_r>:
 80256f0:	4800      	ldr	r0, [pc, #0]	@ (80256f4 <_localeconv_r+0x4>)
 80256f2:	4770      	bx	lr
 80256f4:	24000364 	.word	0x24000364

080256f8 <_close_r>:
 80256f8:	b538      	push	{r3, r4, r5, lr}
 80256fa:	4d06      	ldr	r5, [pc, #24]	@ (8025714 <_close_r+0x1c>)
 80256fc:	2300      	movs	r3, #0
 80256fe:	4604      	mov	r4, r0
 8025700:	4608      	mov	r0, r1
 8025702:	602b      	str	r3, [r5, #0]
 8025704:	f7df ffd0 	bl	80056a8 <_close>
 8025708:	1c43      	adds	r3, r0, #1
 802570a:	d102      	bne.n	8025712 <_close_r+0x1a>
 802570c:	682b      	ldr	r3, [r5, #0]
 802570e:	b103      	cbz	r3, 8025712 <_close_r+0x1a>
 8025710:	6023      	str	r3, [r4, #0]
 8025712:	bd38      	pop	{r3, r4, r5, pc}
 8025714:	2400bfc0 	.word	0x2400bfc0

08025718 <_lseek_r>:
 8025718:	b538      	push	{r3, r4, r5, lr}
 802571a:	4d07      	ldr	r5, [pc, #28]	@ (8025738 <_lseek_r+0x20>)
 802571c:	4604      	mov	r4, r0
 802571e:	4608      	mov	r0, r1
 8025720:	4611      	mov	r1, r2
 8025722:	2200      	movs	r2, #0
 8025724:	602a      	str	r2, [r5, #0]
 8025726:	461a      	mov	r2, r3
 8025728:	f7df ffe5 	bl	80056f6 <_lseek>
 802572c:	1c43      	adds	r3, r0, #1
 802572e:	d102      	bne.n	8025736 <_lseek_r+0x1e>
 8025730:	682b      	ldr	r3, [r5, #0]
 8025732:	b103      	cbz	r3, 8025736 <_lseek_r+0x1e>
 8025734:	6023      	str	r3, [r4, #0]
 8025736:	bd38      	pop	{r3, r4, r5, pc}
 8025738:	2400bfc0 	.word	0x2400bfc0

0802573c <_read_r>:
 802573c:	b538      	push	{r3, r4, r5, lr}
 802573e:	4d07      	ldr	r5, [pc, #28]	@ (802575c <_read_r+0x20>)
 8025740:	4604      	mov	r4, r0
 8025742:	4608      	mov	r0, r1
 8025744:	4611      	mov	r1, r2
 8025746:	2200      	movs	r2, #0
 8025748:	602a      	str	r2, [r5, #0]
 802574a:	461a      	mov	r2, r3
 802574c:	f7df ff73 	bl	8005636 <_read>
 8025750:	1c43      	adds	r3, r0, #1
 8025752:	d102      	bne.n	802575a <_read_r+0x1e>
 8025754:	682b      	ldr	r3, [r5, #0]
 8025756:	b103      	cbz	r3, 802575a <_read_r+0x1e>
 8025758:	6023      	str	r3, [r4, #0]
 802575a:	bd38      	pop	{r3, r4, r5, pc}
 802575c:	2400bfc0 	.word	0x2400bfc0

08025760 <_sbrk_r>:
 8025760:	b538      	push	{r3, r4, r5, lr}
 8025762:	4d06      	ldr	r5, [pc, #24]	@ (802577c <_sbrk_r+0x1c>)
 8025764:	2300      	movs	r3, #0
 8025766:	4604      	mov	r4, r0
 8025768:	4608      	mov	r0, r1
 802576a:	602b      	str	r3, [r5, #0]
 802576c:	f7df ffd0 	bl	8005710 <_sbrk>
 8025770:	1c43      	adds	r3, r0, #1
 8025772:	d102      	bne.n	802577a <_sbrk_r+0x1a>
 8025774:	682b      	ldr	r3, [r5, #0]
 8025776:	b103      	cbz	r3, 802577a <_sbrk_r+0x1a>
 8025778:	6023      	str	r3, [r4, #0]
 802577a:	bd38      	pop	{r3, r4, r5, pc}
 802577c:	2400bfc0 	.word	0x2400bfc0

08025780 <_write_r>:
 8025780:	b538      	push	{r3, r4, r5, lr}
 8025782:	4d07      	ldr	r5, [pc, #28]	@ (80257a0 <_write_r+0x20>)
 8025784:	4604      	mov	r4, r0
 8025786:	4608      	mov	r0, r1
 8025788:	4611      	mov	r1, r2
 802578a:	2200      	movs	r2, #0
 802578c:	602a      	str	r2, [r5, #0]
 802578e:	461a      	mov	r2, r3
 8025790:	f7df ff6e 	bl	8005670 <_write>
 8025794:	1c43      	adds	r3, r0, #1
 8025796:	d102      	bne.n	802579e <_write_r+0x1e>
 8025798:	682b      	ldr	r3, [r5, #0]
 802579a:	b103      	cbz	r3, 802579e <_write_r+0x1e>
 802579c:	6023      	str	r3, [r4, #0]
 802579e:	bd38      	pop	{r3, r4, r5, pc}
 80257a0:	2400bfc0 	.word	0x2400bfc0

080257a4 <__errno>:
 80257a4:	4b01      	ldr	r3, [pc, #4]	@ (80257ac <__errno+0x8>)
 80257a6:	6818      	ldr	r0, [r3, #0]
 80257a8:	4770      	bx	lr
 80257aa:	bf00      	nop
 80257ac:	24000224 	.word	0x24000224

080257b0 <__libc_init_array>:
 80257b0:	b570      	push	{r4, r5, r6, lr}
 80257b2:	4d0d      	ldr	r5, [pc, #52]	@ (80257e8 <__libc_init_array+0x38>)
 80257b4:	4c0d      	ldr	r4, [pc, #52]	@ (80257ec <__libc_init_array+0x3c>)
 80257b6:	1b64      	subs	r4, r4, r5
 80257b8:	10a4      	asrs	r4, r4, #2
 80257ba:	2600      	movs	r6, #0
 80257bc:	42a6      	cmp	r6, r4
 80257be:	d109      	bne.n	80257d4 <__libc_init_array+0x24>
 80257c0:	4d0b      	ldr	r5, [pc, #44]	@ (80257f0 <__libc_init_array+0x40>)
 80257c2:	4c0c      	ldr	r4, [pc, #48]	@ (80257f4 <__libc_init_array+0x44>)
 80257c4:	f003 fd46 	bl	8029254 <_init>
 80257c8:	1b64      	subs	r4, r4, r5
 80257ca:	10a4      	asrs	r4, r4, #2
 80257cc:	2600      	movs	r6, #0
 80257ce:	42a6      	cmp	r6, r4
 80257d0:	d105      	bne.n	80257de <__libc_init_array+0x2e>
 80257d2:	bd70      	pop	{r4, r5, r6, pc}
 80257d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80257d8:	4798      	blx	r3
 80257da:	3601      	adds	r6, #1
 80257dc:	e7ee      	b.n	80257bc <__libc_init_array+0xc>
 80257de:	f855 3b04 	ldr.w	r3, [r5], #4
 80257e2:	4798      	blx	r3
 80257e4:	3601      	adds	r6, #1
 80257e6:	e7f2      	b.n	80257ce <__libc_init_array+0x1e>
 80257e8:	0802d614 	.word	0x0802d614
 80257ec:	0802d614 	.word	0x0802d614
 80257f0:	0802d614 	.word	0x0802d614
 80257f4:	0802d618 	.word	0x0802d618

080257f8 <__retarget_lock_init_recursive>:
 80257f8:	4770      	bx	lr

080257fa <__retarget_lock_acquire_recursive>:
 80257fa:	4770      	bx	lr

080257fc <__retarget_lock_release_recursive>:
 80257fc:	4770      	bx	lr

080257fe <memcpy>:
 80257fe:	440a      	add	r2, r1
 8025800:	4291      	cmp	r1, r2
 8025802:	f100 33ff 	add.w	r3, r0, #4294967295
 8025806:	d100      	bne.n	802580a <memcpy+0xc>
 8025808:	4770      	bx	lr
 802580a:	b510      	push	{r4, lr}
 802580c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025810:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025814:	4291      	cmp	r1, r2
 8025816:	d1f9      	bne.n	802580c <memcpy+0xe>
 8025818:	bd10      	pop	{r4, pc}
	...

0802581c <nanf>:
 802581c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8025824 <nanf+0x8>
 8025820:	4770      	bx	lr
 8025822:	bf00      	nop
 8025824:	7fc00000 	.word	0x7fc00000

08025828 <__assert_func>:
 8025828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802582a:	4614      	mov	r4, r2
 802582c:	461a      	mov	r2, r3
 802582e:	4b09      	ldr	r3, [pc, #36]	@ (8025854 <__assert_func+0x2c>)
 8025830:	681b      	ldr	r3, [r3, #0]
 8025832:	4605      	mov	r5, r0
 8025834:	68d8      	ldr	r0, [r3, #12]
 8025836:	b954      	cbnz	r4, 802584e <__assert_func+0x26>
 8025838:	4b07      	ldr	r3, [pc, #28]	@ (8025858 <__assert_func+0x30>)
 802583a:	461c      	mov	r4, r3
 802583c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025840:	9100      	str	r1, [sp, #0]
 8025842:	462b      	mov	r3, r5
 8025844:	4905      	ldr	r1, [pc, #20]	@ (802585c <__assert_func+0x34>)
 8025846:	f002 feff 	bl	8028648 <fiprintf>
 802584a:	f003 f821 	bl	8028890 <abort>
 802584e:	4b04      	ldr	r3, [pc, #16]	@ (8025860 <__assert_func+0x38>)
 8025850:	e7f4      	b.n	802583c <__assert_func+0x14>
 8025852:	bf00      	nop
 8025854:	24000224 	.word	0x24000224
 8025858:	0802d352 	.word	0x0802d352
 802585c:	0802d324 	.word	0x0802d324
 8025860:	0802d317 	.word	0x0802d317

08025864 <quorem>:
 8025864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025868:	6903      	ldr	r3, [r0, #16]
 802586a:	690c      	ldr	r4, [r1, #16]
 802586c:	42a3      	cmp	r3, r4
 802586e:	4607      	mov	r7, r0
 8025870:	db7e      	blt.n	8025970 <quorem+0x10c>
 8025872:	3c01      	subs	r4, #1
 8025874:	f101 0814 	add.w	r8, r1, #20
 8025878:	00a3      	lsls	r3, r4, #2
 802587a:	f100 0514 	add.w	r5, r0, #20
 802587e:	9300      	str	r3, [sp, #0]
 8025880:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025884:	9301      	str	r3, [sp, #4]
 8025886:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802588a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802588e:	3301      	adds	r3, #1
 8025890:	429a      	cmp	r2, r3
 8025892:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8025896:	fbb2 f6f3 	udiv	r6, r2, r3
 802589a:	d32e      	bcc.n	80258fa <quorem+0x96>
 802589c:	f04f 0a00 	mov.w	sl, #0
 80258a0:	46c4      	mov	ip, r8
 80258a2:	46ae      	mov	lr, r5
 80258a4:	46d3      	mov	fp, sl
 80258a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80258aa:	b298      	uxth	r0, r3
 80258ac:	fb06 a000 	mla	r0, r6, r0, sl
 80258b0:	0c02      	lsrs	r2, r0, #16
 80258b2:	0c1b      	lsrs	r3, r3, #16
 80258b4:	fb06 2303 	mla	r3, r6, r3, r2
 80258b8:	f8de 2000 	ldr.w	r2, [lr]
 80258bc:	b280      	uxth	r0, r0
 80258be:	b292      	uxth	r2, r2
 80258c0:	1a12      	subs	r2, r2, r0
 80258c2:	445a      	add	r2, fp
 80258c4:	f8de 0000 	ldr.w	r0, [lr]
 80258c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80258cc:	b29b      	uxth	r3, r3
 80258ce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80258d2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80258d6:	b292      	uxth	r2, r2
 80258d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80258dc:	45e1      	cmp	r9, ip
 80258de:	f84e 2b04 	str.w	r2, [lr], #4
 80258e2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80258e6:	d2de      	bcs.n	80258a6 <quorem+0x42>
 80258e8:	9b00      	ldr	r3, [sp, #0]
 80258ea:	58eb      	ldr	r3, [r5, r3]
 80258ec:	b92b      	cbnz	r3, 80258fa <quorem+0x96>
 80258ee:	9b01      	ldr	r3, [sp, #4]
 80258f0:	3b04      	subs	r3, #4
 80258f2:	429d      	cmp	r5, r3
 80258f4:	461a      	mov	r2, r3
 80258f6:	d32f      	bcc.n	8025958 <quorem+0xf4>
 80258f8:	613c      	str	r4, [r7, #16]
 80258fa:	4638      	mov	r0, r7
 80258fc:	f001 f8a0 	bl	8026a40 <__mcmp>
 8025900:	2800      	cmp	r0, #0
 8025902:	db25      	blt.n	8025950 <quorem+0xec>
 8025904:	4629      	mov	r1, r5
 8025906:	2000      	movs	r0, #0
 8025908:	f858 2b04 	ldr.w	r2, [r8], #4
 802590c:	f8d1 c000 	ldr.w	ip, [r1]
 8025910:	fa1f fe82 	uxth.w	lr, r2
 8025914:	fa1f f38c 	uxth.w	r3, ip
 8025918:	eba3 030e 	sub.w	r3, r3, lr
 802591c:	4403      	add	r3, r0
 802591e:	0c12      	lsrs	r2, r2, #16
 8025920:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8025924:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8025928:	b29b      	uxth	r3, r3
 802592a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802592e:	45c1      	cmp	r9, r8
 8025930:	f841 3b04 	str.w	r3, [r1], #4
 8025934:	ea4f 4022 	mov.w	r0, r2, asr #16
 8025938:	d2e6      	bcs.n	8025908 <quorem+0xa4>
 802593a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802593e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025942:	b922      	cbnz	r2, 802594e <quorem+0xea>
 8025944:	3b04      	subs	r3, #4
 8025946:	429d      	cmp	r5, r3
 8025948:	461a      	mov	r2, r3
 802594a:	d30b      	bcc.n	8025964 <quorem+0x100>
 802594c:	613c      	str	r4, [r7, #16]
 802594e:	3601      	adds	r6, #1
 8025950:	4630      	mov	r0, r6
 8025952:	b003      	add	sp, #12
 8025954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025958:	6812      	ldr	r2, [r2, #0]
 802595a:	3b04      	subs	r3, #4
 802595c:	2a00      	cmp	r2, #0
 802595e:	d1cb      	bne.n	80258f8 <quorem+0x94>
 8025960:	3c01      	subs	r4, #1
 8025962:	e7c6      	b.n	80258f2 <quorem+0x8e>
 8025964:	6812      	ldr	r2, [r2, #0]
 8025966:	3b04      	subs	r3, #4
 8025968:	2a00      	cmp	r2, #0
 802596a:	d1ef      	bne.n	802594c <quorem+0xe8>
 802596c:	3c01      	subs	r4, #1
 802596e:	e7ea      	b.n	8025946 <quorem+0xe2>
 8025970:	2000      	movs	r0, #0
 8025972:	e7ee      	b.n	8025952 <quorem+0xee>
 8025974:	0000      	movs	r0, r0
	...

08025978 <_dtoa_r>:
 8025978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802597c:	ed2d 8b02 	vpush	{d8}
 8025980:	69c7      	ldr	r7, [r0, #28]
 8025982:	b091      	sub	sp, #68	@ 0x44
 8025984:	ed8d 0b02 	vstr	d0, [sp, #8]
 8025988:	ec55 4b10 	vmov	r4, r5, d0
 802598c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 802598e:	9107      	str	r1, [sp, #28]
 8025990:	4681      	mov	r9, r0
 8025992:	9209      	str	r2, [sp, #36]	@ 0x24
 8025994:	930d      	str	r3, [sp, #52]	@ 0x34
 8025996:	b97f      	cbnz	r7, 80259b8 <_dtoa_r+0x40>
 8025998:	2010      	movs	r0, #16
 802599a:	f7fe fd27 	bl	80243ec <malloc>
 802599e:	4602      	mov	r2, r0
 80259a0:	f8c9 001c 	str.w	r0, [r9, #28]
 80259a4:	b920      	cbnz	r0, 80259b0 <_dtoa_r+0x38>
 80259a6:	4ba0      	ldr	r3, [pc, #640]	@ (8025c28 <_dtoa_r+0x2b0>)
 80259a8:	21ef      	movs	r1, #239	@ 0xef
 80259aa:	48a0      	ldr	r0, [pc, #640]	@ (8025c2c <_dtoa_r+0x2b4>)
 80259ac:	f7ff ff3c 	bl	8025828 <__assert_func>
 80259b0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80259b4:	6007      	str	r7, [r0, #0]
 80259b6:	60c7      	str	r7, [r0, #12]
 80259b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80259bc:	6819      	ldr	r1, [r3, #0]
 80259be:	b159      	cbz	r1, 80259d8 <_dtoa_r+0x60>
 80259c0:	685a      	ldr	r2, [r3, #4]
 80259c2:	604a      	str	r2, [r1, #4]
 80259c4:	2301      	movs	r3, #1
 80259c6:	4093      	lsls	r3, r2
 80259c8:	608b      	str	r3, [r1, #8]
 80259ca:	4648      	mov	r0, r9
 80259cc:	f000 fdb4 	bl	8026538 <_Bfree>
 80259d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80259d4:	2200      	movs	r2, #0
 80259d6:	601a      	str	r2, [r3, #0]
 80259d8:	1e2b      	subs	r3, r5, #0
 80259da:	bfbb      	ittet	lt
 80259dc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80259e0:	9303      	strlt	r3, [sp, #12]
 80259e2:	2300      	movge	r3, #0
 80259e4:	2201      	movlt	r2, #1
 80259e6:	bfac      	ite	ge
 80259e8:	6033      	strge	r3, [r6, #0]
 80259ea:	6032      	strlt	r2, [r6, #0]
 80259ec:	4b90      	ldr	r3, [pc, #576]	@ (8025c30 <_dtoa_r+0x2b8>)
 80259ee:	9e03      	ldr	r6, [sp, #12]
 80259f0:	43b3      	bics	r3, r6
 80259f2:	d110      	bne.n	8025a16 <_dtoa_r+0x9e>
 80259f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80259f6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80259fa:	6013      	str	r3, [r2, #0]
 80259fc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8025a00:	4323      	orrs	r3, r4
 8025a02:	f000 84de 	beq.w	80263c2 <_dtoa_r+0xa4a>
 8025a06:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025a08:	4f8a      	ldr	r7, [pc, #552]	@ (8025c34 <_dtoa_r+0x2bc>)
 8025a0a:	2b00      	cmp	r3, #0
 8025a0c:	f000 84e0 	beq.w	80263d0 <_dtoa_r+0xa58>
 8025a10:	1cfb      	adds	r3, r7, #3
 8025a12:	f000 bcdb 	b.w	80263cc <_dtoa_r+0xa54>
 8025a16:	ed9d 8b02 	vldr	d8, [sp, #8]
 8025a1a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8025a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a22:	d10a      	bne.n	8025a3a <_dtoa_r+0xc2>
 8025a24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025a26:	2301      	movs	r3, #1
 8025a28:	6013      	str	r3, [r2, #0]
 8025a2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025a2c:	b113      	cbz	r3, 8025a34 <_dtoa_r+0xbc>
 8025a2e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8025a30:	4b81      	ldr	r3, [pc, #516]	@ (8025c38 <_dtoa_r+0x2c0>)
 8025a32:	6013      	str	r3, [r2, #0]
 8025a34:	4f81      	ldr	r7, [pc, #516]	@ (8025c3c <_dtoa_r+0x2c4>)
 8025a36:	f000 bccb 	b.w	80263d0 <_dtoa_r+0xa58>
 8025a3a:	aa0e      	add	r2, sp, #56	@ 0x38
 8025a3c:	a90f      	add	r1, sp, #60	@ 0x3c
 8025a3e:	4648      	mov	r0, r9
 8025a40:	eeb0 0b48 	vmov.f64	d0, d8
 8025a44:	f001 f91c 	bl	8026c80 <__d2b>
 8025a48:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8025a4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025a4e:	9001      	str	r0, [sp, #4]
 8025a50:	2b00      	cmp	r3, #0
 8025a52:	d045      	beq.n	8025ae0 <_dtoa_r+0x168>
 8025a54:	eeb0 7b48 	vmov.f64	d7, d8
 8025a58:	ee18 1a90 	vmov	r1, s17
 8025a5c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8025a60:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8025a64:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8025a68:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8025a6c:	2500      	movs	r5, #0
 8025a6e:	ee07 1a90 	vmov	s15, r1
 8025a72:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8025a76:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8025c10 <_dtoa_r+0x298>
 8025a7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8025a7e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8025c18 <_dtoa_r+0x2a0>
 8025a82:	eea7 6b05 	vfma.f64	d6, d7, d5
 8025a86:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8025c20 <_dtoa_r+0x2a8>
 8025a8a:	ee07 3a90 	vmov	s15, r3
 8025a8e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8025a92:	eeb0 7b46 	vmov.f64	d7, d6
 8025a96:	eea4 7b05 	vfma.f64	d7, d4, d5
 8025a9a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8025a9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8025aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025aa6:	ee16 8a90 	vmov	r8, s13
 8025aaa:	d508      	bpl.n	8025abe <_dtoa_r+0x146>
 8025aac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8025ab0:	eeb4 6b47 	vcmp.f64	d6, d7
 8025ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ab8:	bf18      	it	ne
 8025aba:	f108 38ff 	addne.w	r8, r8, #4294967295
 8025abe:	f1b8 0f16 	cmp.w	r8, #22
 8025ac2:	d82b      	bhi.n	8025b1c <_dtoa_r+0x1a4>
 8025ac4:	495e      	ldr	r1, [pc, #376]	@ (8025c40 <_dtoa_r+0x2c8>)
 8025ac6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8025aca:	ed91 7b00 	vldr	d7, [r1]
 8025ace:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8025ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ad6:	d501      	bpl.n	8025adc <_dtoa_r+0x164>
 8025ad8:	f108 38ff 	add.w	r8, r8, #4294967295
 8025adc:	2100      	movs	r1, #0
 8025ade:	e01e      	b.n	8025b1e <_dtoa_r+0x1a6>
 8025ae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025ae2:	4413      	add	r3, r2
 8025ae4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8025ae8:	2920      	cmp	r1, #32
 8025aea:	bfc1      	itttt	gt
 8025aec:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8025af0:	408e      	lslgt	r6, r1
 8025af2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8025af6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8025afa:	bfd6      	itet	le
 8025afc:	f1c1 0120 	rsble	r1, r1, #32
 8025b00:	4331      	orrgt	r1, r6
 8025b02:	fa04 f101 	lslle.w	r1, r4, r1
 8025b06:	ee07 1a90 	vmov	s15, r1
 8025b0a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8025b0e:	3b01      	subs	r3, #1
 8025b10:	ee17 1a90 	vmov	r1, s15
 8025b14:	2501      	movs	r5, #1
 8025b16:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8025b1a:	e7a8      	b.n	8025a6e <_dtoa_r+0xf6>
 8025b1c:	2101      	movs	r1, #1
 8025b1e:	1ad2      	subs	r2, r2, r3
 8025b20:	1e53      	subs	r3, r2, #1
 8025b22:	9306      	str	r3, [sp, #24]
 8025b24:	bf45      	ittet	mi
 8025b26:	f1c2 0301 	rsbmi	r3, r2, #1
 8025b2a:	9305      	strmi	r3, [sp, #20]
 8025b2c:	2300      	movpl	r3, #0
 8025b2e:	2300      	movmi	r3, #0
 8025b30:	bf4c      	ite	mi
 8025b32:	9306      	strmi	r3, [sp, #24]
 8025b34:	9305      	strpl	r3, [sp, #20]
 8025b36:	f1b8 0f00 	cmp.w	r8, #0
 8025b3a:	910c      	str	r1, [sp, #48]	@ 0x30
 8025b3c:	db18      	blt.n	8025b70 <_dtoa_r+0x1f8>
 8025b3e:	9b06      	ldr	r3, [sp, #24]
 8025b40:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8025b44:	4443      	add	r3, r8
 8025b46:	9306      	str	r3, [sp, #24]
 8025b48:	2300      	movs	r3, #0
 8025b4a:	9a07      	ldr	r2, [sp, #28]
 8025b4c:	2a09      	cmp	r2, #9
 8025b4e:	d849      	bhi.n	8025be4 <_dtoa_r+0x26c>
 8025b50:	2a05      	cmp	r2, #5
 8025b52:	bfc4      	itt	gt
 8025b54:	3a04      	subgt	r2, #4
 8025b56:	9207      	strgt	r2, [sp, #28]
 8025b58:	9a07      	ldr	r2, [sp, #28]
 8025b5a:	f1a2 0202 	sub.w	r2, r2, #2
 8025b5e:	bfcc      	ite	gt
 8025b60:	2400      	movgt	r4, #0
 8025b62:	2401      	movle	r4, #1
 8025b64:	2a03      	cmp	r2, #3
 8025b66:	d848      	bhi.n	8025bfa <_dtoa_r+0x282>
 8025b68:	e8df f002 	tbb	[pc, r2]
 8025b6c:	3a2c2e0b 	.word	0x3a2c2e0b
 8025b70:	9b05      	ldr	r3, [sp, #20]
 8025b72:	2200      	movs	r2, #0
 8025b74:	eba3 0308 	sub.w	r3, r3, r8
 8025b78:	9305      	str	r3, [sp, #20]
 8025b7a:	920a      	str	r2, [sp, #40]	@ 0x28
 8025b7c:	f1c8 0300 	rsb	r3, r8, #0
 8025b80:	e7e3      	b.n	8025b4a <_dtoa_r+0x1d2>
 8025b82:	2200      	movs	r2, #0
 8025b84:	9208      	str	r2, [sp, #32]
 8025b86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025b88:	2a00      	cmp	r2, #0
 8025b8a:	dc39      	bgt.n	8025c00 <_dtoa_r+0x288>
 8025b8c:	f04f 0b01 	mov.w	fp, #1
 8025b90:	46da      	mov	sl, fp
 8025b92:	465a      	mov	r2, fp
 8025b94:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8025b98:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8025b9c:	2100      	movs	r1, #0
 8025b9e:	2004      	movs	r0, #4
 8025ba0:	f100 0614 	add.w	r6, r0, #20
 8025ba4:	4296      	cmp	r6, r2
 8025ba6:	d930      	bls.n	8025c0a <_dtoa_r+0x292>
 8025ba8:	6079      	str	r1, [r7, #4]
 8025baa:	4648      	mov	r0, r9
 8025bac:	9304      	str	r3, [sp, #16]
 8025bae:	f000 fc83 	bl	80264b8 <_Balloc>
 8025bb2:	9b04      	ldr	r3, [sp, #16]
 8025bb4:	4607      	mov	r7, r0
 8025bb6:	2800      	cmp	r0, #0
 8025bb8:	d146      	bne.n	8025c48 <_dtoa_r+0x2d0>
 8025bba:	4b22      	ldr	r3, [pc, #136]	@ (8025c44 <_dtoa_r+0x2cc>)
 8025bbc:	4602      	mov	r2, r0
 8025bbe:	f240 11af 	movw	r1, #431	@ 0x1af
 8025bc2:	e6f2      	b.n	80259aa <_dtoa_r+0x32>
 8025bc4:	2201      	movs	r2, #1
 8025bc6:	e7dd      	b.n	8025b84 <_dtoa_r+0x20c>
 8025bc8:	2200      	movs	r2, #0
 8025bca:	9208      	str	r2, [sp, #32]
 8025bcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025bce:	eb08 0b02 	add.w	fp, r8, r2
 8025bd2:	f10b 0a01 	add.w	sl, fp, #1
 8025bd6:	4652      	mov	r2, sl
 8025bd8:	2a01      	cmp	r2, #1
 8025bda:	bfb8      	it	lt
 8025bdc:	2201      	movlt	r2, #1
 8025bde:	e7db      	b.n	8025b98 <_dtoa_r+0x220>
 8025be0:	2201      	movs	r2, #1
 8025be2:	e7f2      	b.n	8025bca <_dtoa_r+0x252>
 8025be4:	2401      	movs	r4, #1
 8025be6:	2200      	movs	r2, #0
 8025be8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8025bec:	f04f 3bff 	mov.w	fp, #4294967295
 8025bf0:	2100      	movs	r1, #0
 8025bf2:	46da      	mov	sl, fp
 8025bf4:	2212      	movs	r2, #18
 8025bf6:	9109      	str	r1, [sp, #36]	@ 0x24
 8025bf8:	e7ce      	b.n	8025b98 <_dtoa_r+0x220>
 8025bfa:	2201      	movs	r2, #1
 8025bfc:	9208      	str	r2, [sp, #32]
 8025bfe:	e7f5      	b.n	8025bec <_dtoa_r+0x274>
 8025c00:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8025c04:	46da      	mov	sl, fp
 8025c06:	465a      	mov	r2, fp
 8025c08:	e7c6      	b.n	8025b98 <_dtoa_r+0x220>
 8025c0a:	3101      	adds	r1, #1
 8025c0c:	0040      	lsls	r0, r0, #1
 8025c0e:	e7c7      	b.n	8025ba0 <_dtoa_r+0x228>
 8025c10:	636f4361 	.word	0x636f4361
 8025c14:	3fd287a7 	.word	0x3fd287a7
 8025c18:	8b60c8b3 	.word	0x8b60c8b3
 8025c1c:	3fc68a28 	.word	0x3fc68a28
 8025c20:	509f79fb 	.word	0x509f79fb
 8025c24:	3fd34413 	.word	0x3fd34413
 8025c28:	0802d170 	.word	0x0802d170
 8025c2c:	0802d360 	.word	0x0802d360
 8025c30:	7ff00000 	.word	0x7ff00000
 8025c34:	0802d35c 	.word	0x0802d35c
 8025c38:	0802d5a0 	.word	0x0802d5a0
 8025c3c:	0802d59f 	.word	0x0802d59f
 8025c40:	0802d458 	.word	0x0802d458
 8025c44:	0802d3b8 	.word	0x0802d3b8
 8025c48:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8025c4c:	f1ba 0f0e 	cmp.w	sl, #14
 8025c50:	6010      	str	r0, [r2, #0]
 8025c52:	d86f      	bhi.n	8025d34 <_dtoa_r+0x3bc>
 8025c54:	2c00      	cmp	r4, #0
 8025c56:	d06d      	beq.n	8025d34 <_dtoa_r+0x3bc>
 8025c58:	f1b8 0f00 	cmp.w	r8, #0
 8025c5c:	f340 80c2 	ble.w	8025de4 <_dtoa_r+0x46c>
 8025c60:	4aca      	ldr	r2, [pc, #808]	@ (8025f8c <_dtoa_r+0x614>)
 8025c62:	f008 010f 	and.w	r1, r8, #15
 8025c66:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8025c6a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8025c6e:	ed92 7b00 	vldr	d7, [r2]
 8025c72:	ea4f 1128 	mov.w	r1, r8, asr #4
 8025c76:	f000 80a9 	beq.w	8025dcc <_dtoa_r+0x454>
 8025c7a:	4ac5      	ldr	r2, [pc, #788]	@ (8025f90 <_dtoa_r+0x618>)
 8025c7c:	ed92 6b08 	vldr	d6, [r2, #32]
 8025c80:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8025c84:	ed8d 6b02 	vstr	d6, [sp, #8]
 8025c88:	f001 010f 	and.w	r1, r1, #15
 8025c8c:	2203      	movs	r2, #3
 8025c8e:	48c0      	ldr	r0, [pc, #768]	@ (8025f90 <_dtoa_r+0x618>)
 8025c90:	2900      	cmp	r1, #0
 8025c92:	f040 809d 	bne.w	8025dd0 <_dtoa_r+0x458>
 8025c96:	ed9d 6b02 	vldr	d6, [sp, #8]
 8025c9a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8025c9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025ca2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8025ca4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025ca8:	2900      	cmp	r1, #0
 8025caa:	f000 80c1 	beq.w	8025e30 <_dtoa_r+0x4b8>
 8025cae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8025cb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8025cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025cba:	f140 80b9 	bpl.w	8025e30 <_dtoa_r+0x4b8>
 8025cbe:	f1ba 0f00 	cmp.w	sl, #0
 8025cc2:	f000 80b5 	beq.w	8025e30 <_dtoa_r+0x4b8>
 8025cc6:	f1bb 0f00 	cmp.w	fp, #0
 8025cca:	dd31      	ble.n	8025d30 <_dtoa_r+0x3b8>
 8025ccc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8025cd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025cd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025cd8:	f108 31ff 	add.w	r1, r8, #4294967295
 8025cdc:	9104      	str	r1, [sp, #16]
 8025cde:	3201      	adds	r2, #1
 8025ce0:	465c      	mov	r4, fp
 8025ce2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8025ce6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8025cea:	ee07 2a90 	vmov	s15, r2
 8025cee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8025cf2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8025cf6:	ee15 2a90 	vmov	r2, s11
 8025cfa:	ec51 0b15 	vmov	r0, r1, d5
 8025cfe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8025d02:	2c00      	cmp	r4, #0
 8025d04:	f040 8098 	bne.w	8025e38 <_dtoa_r+0x4c0>
 8025d08:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8025d0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8025d10:	ec41 0b17 	vmov	d7, r0, r1
 8025d14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d1c:	f300 8261 	bgt.w	80261e2 <_dtoa_r+0x86a>
 8025d20:	eeb1 7b47 	vneg.f64	d7, d7
 8025d24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d2c:	f100 80f5 	bmi.w	8025f1a <_dtoa_r+0x5a2>
 8025d30:	ed8d 8b02 	vstr	d8, [sp, #8]
 8025d34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025d36:	2a00      	cmp	r2, #0
 8025d38:	f2c0 812c 	blt.w	8025f94 <_dtoa_r+0x61c>
 8025d3c:	f1b8 0f0e 	cmp.w	r8, #14
 8025d40:	f300 8128 	bgt.w	8025f94 <_dtoa_r+0x61c>
 8025d44:	4b91      	ldr	r3, [pc, #580]	@ (8025f8c <_dtoa_r+0x614>)
 8025d46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8025d4a:	ed93 6b00 	vldr	d6, [r3]
 8025d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025d50:	2b00      	cmp	r3, #0
 8025d52:	da03      	bge.n	8025d5c <_dtoa_r+0x3e4>
 8025d54:	f1ba 0f00 	cmp.w	sl, #0
 8025d58:	f340 80d2 	ble.w	8025f00 <_dtoa_r+0x588>
 8025d5c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8025d60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025d64:	463e      	mov	r6, r7
 8025d66:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8025d6a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8025d6e:	ee15 3a10 	vmov	r3, s10
 8025d72:	3330      	adds	r3, #48	@ 0x30
 8025d74:	f806 3b01 	strb.w	r3, [r6], #1
 8025d78:	1bf3      	subs	r3, r6, r7
 8025d7a:	459a      	cmp	sl, r3
 8025d7c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8025d80:	eea3 7b46 	vfms.f64	d7, d3, d6
 8025d84:	f040 80f8 	bne.w	8025f78 <_dtoa_r+0x600>
 8025d88:	ee37 7b07 	vadd.f64	d7, d7, d7
 8025d8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8025d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d94:	f300 80dd 	bgt.w	8025f52 <_dtoa_r+0x5da>
 8025d98:	eeb4 7b46 	vcmp.f64	d7, d6
 8025d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025da0:	d104      	bne.n	8025dac <_dtoa_r+0x434>
 8025da2:	ee15 3a10 	vmov	r3, s10
 8025da6:	07db      	lsls	r3, r3, #31
 8025da8:	f100 80d3 	bmi.w	8025f52 <_dtoa_r+0x5da>
 8025dac:	9901      	ldr	r1, [sp, #4]
 8025dae:	4648      	mov	r0, r9
 8025db0:	f000 fbc2 	bl	8026538 <_Bfree>
 8025db4:	2300      	movs	r3, #0
 8025db6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025db8:	7033      	strb	r3, [r6, #0]
 8025dba:	f108 0301 	add.w	r3, r8, #1
 8025dbe:	6013      	str	r3, [r2, #0]
 8025dc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025dc2:	2b00      	cmp	r3, #0
 8025dc4:	f000 8304 	beq.w	80263d0 <_dtoa_r+0xa58>
 8025dc8:	601e      	str	r6, [r3, #0]
 8025dca:	e301      	b.n	80263d0 <_dtoa_r+0xa58>
 8025dcc:	2202      	movs	r2, #2
 8025dce:	e75e      	b.n	8025c8e <_dtoa_r+0x316>
 8025dd0:	07cc      	lsls	r4, r1, #31
 8025dd2:	d504      	bpl.n	8025dde <_dtoa_r+0x466>
 8025dd4:	ed90 6b00 	vldr	d6, [r0]
 8025dd8:	3201      	adds	r2, #1
 8025dda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025dde:	1049      	asrs	r1, r1, #1
 8025de0:	3008      	adds	r0, #8
 8025de2:	e755      	b.n	8025c90 <_dtoa_r+0x318>
 8025de4:	d022      	beq.n	8025e2c <_dtoa_r+0x4b4>
 8025de6:	f1c8 0100 	rsb	r1, r8, #0
 8025dea:	4a68      	ldr	r2, [pc, #416]	@ (8025f8c <_dtoa_r+0x614>)
 8025dec:	f001 000f 	and.w	r0, r1, #15
 8025df0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8025df4:	ed92 7b00 	vldr	d7, [r2]
 8025df8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8025dfc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025e00:	4863      	ldr	r0, [pc, #396]	@ (8025f90 <_dtoa_r+0x618>)
 8025e02:	1109      	asrs	r1, r1, #4
 8025e04:	2400      	movs	r4, #0
 8025e06:	2202      	movs	r2, #2
 8025e08:	b929      	cbnz	r1, 8025e16 <_dtoa_r+0x49e>
 8025e0a:	2c00      	cmp	r4, #0
 8025e0c:	f43f af49 	beq.w	8025ca2 <_dtoa_r+0x32a>
 8025e10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025e14:	e745      	b.n	8025ca2 <_dtoa_r+0x32a>
 8025e16:	07ce      	lsls	r6, r1, #31
 8025e18:	d505      	bpl.n	8025e26 <_dtoa_r+0x4ae>
 8025e1a:	ed90 6b00 	vldr	d6, [r0]
 8025e1e:	3201      	adds	r2, #1
 8025e20:	2401      	movs	r4, #1
 8025e22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025e26:	1049      	asrs	r1, r1, #1
 8025e28:	3008      	adds	r0, #8
 8025e2a:	e7ed      	b.n	8025e08 <_dtoa_r+0x490>
 8025e2c:	2202      	movs	r2, #2
 8025e2e:	e738      	b.n	8025ca2 <_dtoa_r+0x32a>
 8025e30:	f8cd 8010 	str.w	r8, [sp, #16]
 8025e34:	4654      	mov	r4, sl
 8025e36:	e754      	b.n	8025ce2 <_dtoa_r+0x36a>
 8025e38:	4a54      	ldr	r2, [pc, #336]	@ (8025f8c <_dtoa_r+0x614>)
 8025e3a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8025e3e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8025e42:	9a08      	ldr	r2, [sp, #32]
 8025e44:	ec41 0b17 	vmov	d7, r0, r1
 8025e48:	443c      	add	r4, r7
 8025e4a:	b34a      	cbz	r2, 8025ea0 <_dtoa_r+0x528>
 8025e4c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8025e50:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8025e54:	463e      	mov	r6, r7
 8025e56:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8025e5a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8025e5e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8025e62:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8025e66:	ee14 2a90 	vmov	r2, s9
 8025e6a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8025e6e:	3230      	adds	r2, #48	@ 0x30
 8025e70:	ee36 6b45 	vsub.f64	d6, d6, d5
 8025e74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e7c:	f806 2b01 	strb.w	r2, [r6], #1
 8025e80:	d438      	bmi.n	8025ef4 <_dtoa_r+0x57c>
 8025e82:	ee32 5b46 	vsub.f64	d5, d2, d6
 8025e86:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8025e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e8e:	d462      	bmi.n	8025f56 <_dtoa_r+0x5de>
 8025e90:	42a6      	cmp	r6, r4
 8025e92:	f43f af4d 	beq.w	8025d30 <_dtoa_r+0x3b8>
 8025e96:	ee27 7b03 	vmul.f64	d7, d7, d3
 8025e9a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8025e9e:	e7e0      	b.n	8025e62 <_dtoa_r+0x4ea>
 8025ea0:	4621      	mov	r1, r4
 8025ea2:	463e      	mov	r6, r7
 8025ea4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8025ea8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8025eac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8025eb0:	ee14 2a90 	vmov	r2, s9
 8025eb4:	3230      	adds	r2, #48	@ 0x30
 8025eb6:	f806 2b01 	strb.w	r2, [r6], #1
 8025eba:	42a6      	cmp	r6, r4
 8025ebc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8025ec0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8025ec4:	d119      	bne.n	8025efa <_dtoa_r+0x582>
 8025ec6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8025eca:	ee37 4b05 	vadd.f64	d4, d7, d5
 8025ece:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8025ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ed6:	dc3e      	bgt.n	8025f56 <_dtoa_r+0x5de>
 8025ed8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8025edc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8025ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ee4:	f57f af24 	bpl.w	8025d30 <_dtoa_r+0x3b8>
 8025ee8:	460e      	mov	r6, r1
 8025eea:	3901      	subs	r1, #1
 8025eec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8025ef0:	2b30      	cmp	r3, #48	@ 0x30
 8025ef2:	d0f9      	beq.n	8025ee8 <_dtoa_r+0x570>
 8025ef4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8025ef8:	e758      	b.n	8025dac <_dtoa_r+0x434>
 8025efa:	ee26 6b03 	vmul.f64	d6, d6, d3
 8025efe:	e7d5      	b.n	8025eac <_dtoa_r+0x534>
 8025f00:	d10b      	bne.n	8025f1a <_dtoa_r+0x5a2>
 8025f02:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8025f06:	ee26 6b07 	vmul.f64	d6, d6, d7
 8025f0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025f0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f16:	f2c0 8161 	blt.w	80261dc <_dtoa_r+0x864>
 8025f1a:	2400      	movs	r4, #0
 8025f1c:	4625      	mov	r5, r4
 8025f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025f20:	43db      	mvns	r3, r3
 8025f22:	9304      	str	r3, [sp, #16]
 8025f24:	463e      	mov	r6, r7
 8025f26:	f04f 0800 	mov.w	r8, #0
 8025f2a:	4621      	mov	r1, r4
 8025f2c:	4648      	mov	r0, r9
 8025f2e:	f000 fb03 	bl	8026538 <_Bfree>
 8025f32:	2d00      	cmp	r5, #0
 8025f34:	d0de      	beq.n	8025ef4 <_dtoa_r+0x57c>
 8025f36:	f1b8 0f00 	cmp.w	r8, #0
 8025f3a:	d005      	beq.n	8025f48 <_dtoa_r+0x5d0>
 8025f3c:	45a8      	cmp	r8, r5
 8025f3e:	d003      	beq.n	8025f48 <_dtoa_r+0x5d0>
 8025f40:	4641      	mov	r1, r8
 8025f42:	4648      	mov	r0, r9
 8025f44:	f000 faf8 	bl	8026538 <_Bfree>
 8025f48:	4629      	mov	r1, r5
 8025f4a:	4648      	mov	r0, r9
 8025f4c:	f000 faf4 	bl	8026538 <_Bfree>
 8025f50:	e7d0      	b.n	8025ef4 <_dtoa_r+0x57c>
 8025f52:	f8cd 8010 	str.w	r8, [sp, #16]
 8025f56:	4633      	mov	r3, r6
 8025f58:	461e      	mov	r6, r3
 8025f5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025f5e:	2a39      	cmp	r2, #57	@ 0x39
 8025f60:	d106      	bne.n	8025f70 <_dtoa_r+0x5f8>
 8025f62:	429f      	cmp	r7, r3
 8025f64:	d1f8      	bne.n	8025f58 <_dtoa_r+0x5e0>
 8025f66:	9a04      	ldr	r2, [sp, #16]
 8025f68:	3201      	adds	r2, #1
 8025f6a:	9204      	str	r2, [sp, #16]
 8025f6c:	2230      	movs	r2, #48	@ 0x30
 8025f6e:	703a      	strb	r2, [r7, #0]
 8025f70:	781a      	ldrb	r2, [r3, #0]
 8025f72:	3201      	adds	r2, #1
 8025f74:	701a      	strb	r2, [r3, #0]
 8025f76:	e7bd      	b.n	8025ef4 <_dtoa_r+0x57c>
 8025f78:	ee27 7b04 	vmul.f64	d7, d7, d4
 8025f7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f84:	f47f aeef 	bne.w	8025d66 <_dtoa_r+0x3ee>
 8025f88:	e710      	b.n	8025dac <_dtoa_r+0x434>
 8025f8a:	bf00      	nop
 8025f8c:	0802d458 	.word	0x0802d458
 8025f90:	0802d430 	.word	0x0802d430
 8025f94:	9908      	ldr	r1, [sp, #32]
 8025f96:	2900      	cmp	r1, #0
 8025f98:	f000 80e3 	beq.w	8026162 <_dtoa_r+0x7ea>
 8025f9c:	9907      	ldr	r1, [sp, #28]
 8025f9e:	2901      	cmp	r1, #1
 8025fa0:	f300 80c8 	bgt.w	8026134 <_dtoa_r+0x7bc>
 8025fa4:	2d00      	cmp	r5, #0
 8025fa6:	f000 80c1 	beq.w	802612c <_dtoa_r+0x7b4>
 8025faa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8025fae:	9e05      	ldr	r6, [sp, #20]
 8025fb0:	461c      	mov	r4, r3
 8025fb2:	9304      	str	r3, [sp, #16]
 8025fb4:	9b05      	ldr	r3, [sp, #20]
 8025fb6:	4413      	add	r3, r2
 8025fb8:	9305      	str	r3, [sp, #20]
 8025fba:	9b06      	ldr	r3, [sp, #24]
 8025fbc:	2101      	movs	r1, #1
 8025fbe:	4413      	add	r3, r2
 8025fc0:	4648      	mov	r0, r9
 8025fc2:	9306      	str	r3, [sp, #24]
 8025fc4:	f000 fbb6 	bl	8026734 <__i2b>
 8025fc8:	9b04      	ldr	r3, [sp, #16]
 8025fca:	4605      	mov	r5, r0
 8025fcc:	b166      	cbz	r6, 8025fe8 <_dtoa_r+0x670>
 8025fce:	9a06      	ldr	r2, [sp, #24]
 8025fd0:	2a00      	cmp	r2, #0
 8025fd2:	dd09      	ble.n	8025fe8 <_dtoa_r+0x670>
 8025fd4:	42b2      	cmp	r2, r6
 8025fd6:	9905      	ldr	r1, [sp, #20]
 8025fd8:	bfa8      	it	ge
 8025fda:	4632      	movge	r2, r6
 8025fdc:	1a89      	subs	r1, r1, r2
 8025fde:	9105      	str	r1, [sp, #20]
 8025fe0:	9906      	ldr	r1, [sp, #24]
 8025fe2:	1ab6      	subs	r6, r6, r2
 8025fe4:	1a8a      	subs	r2, r1, r2
 8025fe6:	9206      	str	r2, [sp, #24]
 8025fe8:	b1fb      	cbz	r3, 802602a <_dtoa_r+0x6b2>
 8025fea:	9a08      	ldr	r2, [sp, #32]
 8025fec:	2a00      	cmp	r2, #0
 8025fee:	f000 80bc 	beq.w	802616a <_dtoa_r+0x7f2>
 8025ff2:	b19c      	cbz	r4, 802601c <_dtoa_r+0x6a4>
 8025ff4:	4629      	mov	r1, r5
 8025ff6:	4622      	mov	r2, r4
 8025ff8:	4648      	mov	r0, r9
 8025ffa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025ffc:	f000 fc5a 	bl	80268b4 <__pow5mult>
 8026000:	9a01      	ldr	r2, [sp, #4]
 8026002:	4601      	mov	r1, r0
 8026004:	4605      	mov	r5, r0
 8026006:	4648      	mov	r0, r9
 8026008:	f000 fbaa 	bl	8026760 <__multiply>
 802600c:	9901      	ldr	r1, [sp, #4]
 802600e:	9004      	str	r0, [sp, #16]
 8026010:	4648      	mov	r0, r9
 8026012:	f000 fa91 	bl	8026538 <_Bfree>
 8026016:	9a04      	ldr	r2, [sp, #16]
 8026018:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802601a:	9201      	str	r2, [sp, #4]
 802601c:	1b1a      	subs	r2, r3, r4
 802601e:	d004      	beq.n	802602a <_dtoa_r+0x6b2>
 8026020:	9901      	ldr	r1, [sp, #4]
 8026022:	4648      	mov	r0, r9
 8026024:	f000 fc46 	bl	80268b4 <__pow5mult>
 8026028:	9001      	str	r0, [sp, #4]
 802602a:	2101      	movs	r1, #1
 802602c:	4648      	mov	r0, r9
 802602e:	f000 fb81 	bl	8026734 <__i2b>
 8026032:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026034:	4604      	mov	r4, r0
 8026036:	2b00      	cmp	r3, #0
 8026038:	f000 81d0 	beq.w	80263dc <_dtoa_r+0xa64>
 802603c:	461a      	mov	r2, r3
 802603e:	4601      	mov	r1, r0
 8026040:	4648      	mov	r0, r9
 8026042:	f000 fc37 	bl	80268b4 <__pow5mult>
 8026046:	9b07      	ldr	r3, [sp, #28]
 8026048:	2b01      	cmp	r3, #1
 802604a:	4604      	mov	r4, r0
 802604c:	f300 8095 	bgt.w	802617a <_dtoa_r+0x802>
 8026050:	9b02      	ldr	r3, [sp, #8]
 8026052:	2b00      	cmp	r3, #0
 8026054:	f040 808b 	bne.w	802616e <_dtoa_r+0x7f6>
 8026058:	9b03      	ldr	r3, [sp, #12]
 802605a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802605e:	2a00      	cmp	r2, #0
 8026060:	f040 8087 	bne.w	8026172 <_dtoa_r+0x7fa>
 8026064:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8026068:	0d12      	lsrs	r2, r2, #20
 802606a:	0512      	lsls	r2, r2, #20
 802606c:	2a00      	cmp	r2, #0
 802606e:	f000 8082 	beq.w	8026176 <_dtoa_r+0x7fe>
 8026072:	9b05      	ldr	r3, [sp, #20]
 8026074:	3301      	adds	r3, #1
 8026076:	9305      	str	r3, [sp, #20]
 8026078:	9b06      	ldr	r3, [sp, #24]
 802607a:	3301      	adds	r3, #1
 802607c:	9306      	str	r3, [sp, #24]
 802607e:	2301      	movs	r3, #1
 8026080:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026084:	2b00      	cmp	r3, #0
 8026086:	f000 81af 	beq.w	80263e8 <_dtoa_r+0xa70>
 802608a:	6922      	ldr	r2, [r4, #16]
 802608c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8026090:	6910      	ldr	r0, [r2, #16]
 8026092:	f000 fb03 	bl	802669c <__hi0bits>
 8026096:	f1c0 0020 	rsb	r0, r0, #32
 802609a:	9b06      	ldr	r3, [sp, #24]
 802609c:	4418      	add	r0, r3
 802609e:	f010 001f 	ands.w	r0, r0, #31
 80260a2:	d076      	beq.n	8026192 <_dtoa_r+0x81a>
 80260a4:	f1c0 0220 	rsb	r2, r0, #32
 80260a8:	2a04      	cmp	r2, #4
 80260aa:	dd69      	ble.n	8026180 <_dtoa_r+0x808>
 80260ac:	9b05      	ldr	r3, [sp, #20]
 80260ae:	f1c0 001c 	rsb	r0, r0, #28
 80260b2:	4403      	add	r3, r0
 80260b4:	9305      	str	r3, [sp, #20]
 80260b6:	9b06      	ldr	r3, [sp, #24]
 80260b8:	4406      	add	r6, r0
 80260ba:	4403      	add	r3, r0
 80260bc:	9306      	str	r3, [sp, #24]
 80260be:	9b05      	ldr	r3, [sp, #20]
 80260c0:	2b00      	cmp	r3, #0
 80260c2:	dd05      	ble.n	80260d0 <_dtoa_r+0x758>
 80260c4:	9901      	ldr	r1, [sp, #4]
 80260c6:	461a      	mov	r2, r3
 80260c8:	4648      	mov	r0, r9
 80260ca:	f000 fc4d 	bl	8026968 <__lshift>
 80260ce:	9001      	str	r0, [sp, #4]
 80260d0:	9b06      	ldr	r3, [sp, #24]
 80260d2:	2b00      	cmp	r3, #0
 80260d4:	dd05      	ble.n	80260e2 <_dtoa_r+0x76a>
 80260d6:	4621      	mov	r1, r4
 80260d8:	461a      	mov	r2, r3
 80260da:	4648      	mov	r0, r9
 80260dc:	f000 fc44 	bl	8026968 <__lshift>
 80260e0:	4604      	mov	r4, r0
 80260e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80260e4:	2b00      	cmp	r3, #0
 80260e6:	d056      	beq.n	8026196 <_dtoa_r+0x81e>
 80260e8:	9801      	ldr	r0, [sp, #4]
 80260ea:	4621      	mov	r1, r4
 80260ec:	f000 fca8 	bl	8026a40 <__mcmp>
 80260f0:	2800      	cmp	r0, #0
 80260f2:	da50      	bge.n	8026196 <_dtoa_r+0x81e>
 80260f4:	f108 33ff 	add.w	r3, r8, #4294967295
 80260f8:	9304      	str	r3, [sp, #16]
 80260fa:	9901      	ldr	r1, [sp, #4]
 80260fc:	2300      	movs	r3, #0
 80260fe:	220a      	movs	r2, #10
 8026100:	4648      	mov	r0, r9
 8026102:	f000 fa3b 	bl	802657c <__multadd>
 8026106:	9b08      	ldr	r3, [sp, #32]
 8026108:	9001      	str	r0, [sp, #4]
 802610a:	2b00      	cmp	r3, #0
 802610c:	f000 816e 	beq.w	80263ec <_dtoa_r+0xa74>
 8026110:	4629      	mov	r1, r5
 8026112:	2300      	movs	r3, #0
 8026114:	220a      	movs	r2, #10
 8026116:	4648      	mov	r0, r9
 8026118:	f000 fa30 	bl	802657c <__multadd>
 802611c:	f1bb 0f00 	cmp.w	fp, #0
 8026120:	4605      	mov	r5, r0
 8026122:	dc64      	bgt.n	80261ee <_dtoa_r+0x876>
 8026124:	9b07      	ldr	r3, [sp, #28]
 8026126:	2b02      	cmp	r3, #2
 8026128:	dc3e      	bgt.n	80261a8 <_dtoa_r+0x830>
 802612a:	e060      	b.n	80261ee <_dtoa_r+0x876>
 802612c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802612e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8026132:	e73c      	b.n	8025fae <_dtoa_r+0x636>
 8026134:	f10a 34ff 	add.w	r4, sl, #4294967295
 8026138:	42a3      	cmp	r3, r4
 802613a:	bfbf      	itttt	lt
 802613c:	1ae2      	sublt	r2, r4, r3
 802613e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8026140:	189b      	addlt	r3, r3, r2
 8026142:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8026144:	bfae      	itee	ge
 8026146:	1b1c      	subge	r4, r3, r4
 8026148:	4623      	movlt	r3, r4
 802614a:	2400      	movlt	r4, #0
 802614c:	f1ba 0f00 	cmp.w	sl, #0
 8026150:	bfb5      	itete	lt
 8026152:	9a05      	ldrlt	r2, [sp, #20]
 8026154:	9e05      	ldrge	r6, [sp, #20]
 8026156:	eba2 060a 	sublt.w	r6, r2, sl
 802615a:	4652      	movge	r2, sl
 802615c:	bfb8      	it	lt
 802615e:	2200      	movlt	r2, #0
 8026160:	e727      	b.n	8025fb2 <_dtoa_r+0x63a>
 8026162:	9e05      	ldr	r6, [sp, #20]
 8026164:	9d08      	ldr	r5, [sp, #32]
 8026166:	461c      	mov	r4, r3
 8026168:	e730      	b.n	8025fcc <_dtoa_r+0x654>
 802616a:	461a      	mov	r2, r3
 802616c:	e758      	b.n	8026020 <_dtoa_r+0x6a8>
 802616e:	2300      	movs	r3, #0
 8026170:	e786      	b.n	8026080 <_dtoa_r+0x708>
 8026172:	9b02      	ldr	r3, [sp, #8]
 8026174:	e784      	b.n	8026080 <_dtoa_r+0x708>
 8026176:	920b      	str	r2, [sp, #44]	@ 0x2c
 8026178:	e783      	b.n	8026082 <_dtoa_r+0x70a>
 802617a:	2300      	movs	r3, #0
 802617c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802617e:	e784      	b.n	802608a <_dtoa_r+0x712>
 8026180:	d09d      	beq.n	80260be <_dtoa_r+0x746>
 8026182:	9b05      	ldr	r3, [sp, #20]
 8026184:	321c      	adds	r2, #28
 8026186:	4413      	add	r3, r2
 8026188:	9305      	str	r3, [sp, #20]
 802618a:	9b06      	ldr	r3, [sp, #24]
 802618c:	4416      	add	r6, r2
 802618e:	4413      	add	r3, r2
 8026190:	e794      	b.n	80260bc <_dtoa_r+0x744>
 8026192:	4602      	mov	r2, r0
 8026194:	e7f5      	b.n	8026182 <_dtoa_r+0x80a>
 8026196:	f1ba 0f00 	cmp.w	sl, #0
 802619a:	f8cd 8010 	str.w	r8, [sp, #16]
 802619e:	46d3      	mov	fp, sl
 80261a0:	dc21      	bgt.n	80261e6 <_dtoa_r+0x86e>
 80261a2:	9b07      	ldr	r3, [sp, #28]
 80261a4:	2b02      	cmp	r3, #2
 80261a6:	dd1e      	ble.n	80261e6 <_dtoa_r+0x86e>
 80261a8:	f1bb 0f00 	cmp.w	fp, #0
 80261ac:	f47f aeb7 	bne.w	8025f1e <_dtoa_r+0x5a6>
 80261b0:	4621      	mov	r1, r4
 80261b2:	465b      	mov	r3, fp
 80261b4:	2205      	movs	r2, #5
 80261b6:	4648      	mov	r0, r9
 80261b8:	f000 f9e0 	bl	802657c <__multadd>
 80261bc:	4601      	mov	r1, r0
 80261be:	4604      	mov	r4, r0
 80261c0:	9801      	ldr	r0, [sp, #4]
 80261c2:	f000 fc3d 	bl	8026a40 <__mcmp>
 80261c6:	2800      	cmp	r0, #0
 80261c8:	f77f aea9 	ble.w	8025f1e <_dtoa_r+0x5a6>
 80261cc:	463e      	mov	r6, r7
 80261ce:	2331      	movs	r3, #49	@ 0x31
 80261d0:	f806 3b01 	strb.w	r3, [r6], #1
 80261d4:	9b04      	ldr	r3, [sp, #16]
 80261d6:	3301      	adds	r3, #1
 80261d8:	9304      	str	r3, [sp, #16]
 80261da:	e6a4      	b.n	8025f26 <_dtoa_r+0x5ae>
 80261dc:	f8cd 8010 	str.w	r8, [sp, #16]
 80261e0:	4654      	mov	r4, sl
 80261e2:	4625      	mov	r5, r4
 80261e4:	e7f2      	b.n	80261cc <_dtoa_r+0x854>
 80261e6:	9b08      	ldr	r3, [sp, #32]
 80261e8:	2b00      	cmp	r3, #0
 80261ea:	f000 8103 	beq.w	80263f4 <_dtoa_r+0xa7c>
 80261ee:	2e00      	cmp	r6, #0
 80261f0:	dd05      	ble.n	80261fe <_dtoa_r+0x886>
 80261f2:	4629      	mov	r1, r5
 80261f4:	4632      	mov	r2, r6
 80261f6:	4648      	mov	r0, r9
 80261f8:	f000 fbb6 	bl	8026968 <__lshift>
 80261fc:	4605      	mov	r5, r0
 80261fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026200:	2b00      	cmp	r3, #0
 8026202:	d058      	beq.n	80262b6 <_dtoa_r+0x93e>
 8026204:	6869      	ldr	r1, [r5, #4]
 8026206:	4648      	mov	r0, r9
 8026208:	f000 f956 	bl	80264b8 <_Balloc>
 802620c:	4606      	mov	r6, r0
 802620e:	b928      	cbnz	r0, 802621c <_dtoa_r+0x8a4>
 8026210:	4b82      	ldr	r3, [pc, #520]	@ (802641c <_dtoa_r+0xaa4>)
 8026212:	4602      	mov	r2, r0
 8026214:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8026218:	f7ff bbc7 	b.w	80259aa <_dtoa_r+0x32>
 802621c:	692a      	ldr	r2, [r5, #16]
 802621e:	3202      	adds	r2, #2
 8026220:	0092      	lsls	r2, r2, #2
 8026222:	f105 010c 	add.w	r1, r5, #12
 8026226:	300c      	adds	r0, #12
 8026228:	f7ff fae9 	bl	80257fe <memcpy>
 802622c:	2201      	movs	r2, #1
 802622e:	4631      	mov	r1, r6
 8026230:	4648      	mov	r0, r9
 8026232:	f000 fb99 	bl	8026968 <__lshift>
 8026236:	1c7b      	adds	r3, r7, #1
 8026238:	9305      	str	r3, [sp, #20]
 802623a:	eb07 030b 	add.w	r3, r7, fp
 802623e:	9309      	str	r3, [sp, #36]	@ 0x24
 8026240:	9b02      	ldr	r3, [sp, #8]
 8026242:	f003 0301 	and.w	r3, r3, #1
 8026246:	46a8      	mov	r8, r5
 8026248:	9308      	str	r3, [sp, #32]
 802624a:	4605      	mov	r5, r0
 802624c:	9b05      	ldr	r3, [sp, #20]
 802624e:	9801      	ldr	r0, [sp, #4]
 8026250:	4621      	mov	r1, r4
 8026252:	f103 3bff 	add.w	fp, r3, #4294967295
 8026256:	f7ff fb05 	bl	8025864 <quorem>
 802625a:	4641      	mov	r1, r8
 802625c:	9002      	str	r0, [sp, #8]
 802625e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8026262:	9801      	ldr	r0, [sp, #4]
 8026264:	f000 fbec 	bl	8026a40 <__mcmp>
 8026268:	462a      	mov	r2, r5
 802626a:	9006      	str	r0, [sp, #24]
 802626c:	4621      	mov	r1, r4
 802626e:	4648      	mov	r0, r9
 8026270:	f000 fc02 	bl	8026a78 <__mdiff>
 8026274:	68c2      	ldr	r2, [r0, #12]
 8026276:	4606      	mov	r6, r0
 8026278:	b9fa      	cbnz	r2, 80262ba <_dtoa_r+0x942>
 802627a:	4601      	mov	r1, r0
 802627c:	9801      	ldr	r0, [sp, #4]
 802627e:	f000 fbdf 	bl	8026a40 <__mcmp>
 8026282:	4602      	mov	r2, r0
 8026284:	4631      	mov	r1, r6
 8026286:	4648      	mov	r0, r9
 8026288:	920a      	str	r2, [sp, #40]	@ 0x28
 802628a:	f000 f955 	bl	8026538 <_Bfree>
 802628e:	9b07      	ldr	r3, [sp, #28]
 8026290:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026292:	9e05      	ldr	r6, [sp, #20]
 8026294:	ea43 0102 	orr.w	r1, r3, r2
 8026298:	9b08      	ldr	r3, [sp, #32]
 802629a:	4319      	orrs	r1, r3
 802629c:	d10f      	bne.n	80262be <_dtoa_r+0x946>
 802629e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80262a2:	d028      	beq.n	80262f6 <_dtoa_r+0x97e>
 80262a4:	9b06      	ldr	r3, [sp, #24]
 80262a6:	2b00      	cmp	r3, #0
 80262a8:	dd02      	ble.n	80262b0 <_dtoa_r+0x938>
 80262aa:	9b02      	ldr	r3, [sp, #8]
 80262ac:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80262b0:	f88b a000 	strb.w	sl, [fp]
 80262b4:	e639      	b.n	8025f2a <_dtoa_r+0x5b2>
 80262b6:	4628      	mov	r0, r5
 80262b8:	e7bd      	b.n	8026236 <_dtoa_r+0x8be>
 80262ba:	2201      	movs	r2, #1
 80262bc:	e7e2      	b.n	8026284 <_dtoa_r+0x90c>
 80262be:	9b06      	ldr	r3, [sp, #24]
 80262c0:	2b00      	cmp	r3, #0
 80262c2:	db04      	blt.n	80262ce <_dtoa_r+0x956>
 80262c4:	9907      	ldr	r1, [sp, #28]
 80262c6:	430b      	orrs	r3, r1
 80262c8:	9908      	ldr	r1, [sp, #32]
 80262ca:	430b      	orrs	r3, r1
 80262cc:	d120      	bne.n	8026310 <_dtoa_r+0x998>
 80262ce:	2a00      	cmp	r2, #0
 80262d0:	ddee      	ble.n	80262b0 <_dtoa_r+0x938>
 80262d2:	9901      	ldr	r1, [sp, #4]
 80262d4:	2201      	movs	r2, #1
 80262d6:	4648      	mov	r0, r9
 80262d8:	f000 fb46 	bl	8026968 <__lshift>
 80262dc:	4621      	mov	r1, r4
 80262de:	9001      	str	r0, [sp, #4]
 80262e0:	f000 fbae 	bl	8026a40 <__mcmp>
 80262e4:	2800      	cmp	r0, #0
 80262e6:	dc03      	bgt.n	80262f0 <_dtoa_r+0x978>
 80262e8:	d1e2      	bne.n	80262b0 <_dtoa_r+0x938>
 80262ea:	f01a 0f01 	tst.w	sl, #1
 80262ee:	d0df      	beq.n	80262b0 <_dtoa_r+0x938>
 80262f0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80262f4:	d1d9      	bne.n	80262aa <_dtoa_r+0x932>
 80262f6:	2339      	movs	r3, #57	@ 0x39
 80262f8:	f88b 3000 	strb.w	r3, [fp]
 80262fc:	4633      	mov	r3, r6
 80262fe:	461e      	mov	r6, r3
 8026300:	3b01      	subs	r3, #1
 8026302:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8026306:	2a39      	cmp	r2, #57	@ 0x39
 8026308:	d053      	beq.n	80263b2 <_dtoa_r+0xa3a>
 802630a:	3201      	adds	r2, #1
 802630c:	701a      	strb	r2, [r3, #0]
 802630e:	e60c      	b.n	8025f2a <_dtoa_r+0x5b2>
 8026310:	2a00      	cmp	r2, #0
 8026312:	dd07      	ble.n	8026324 <_dtoa_r+0x9ac>
 8026314:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8026318:	d0ed      	beq.n	80262f6 <_dtoa_r+0x97e>
 802631a:	f10a 0301 	add.w	r3, sl, #1
 802631e:	f88b 3000 	strb.w	r3, [fp]
 8026322:	e602      	b.n	8025f2a <_dtoa_r+0x5b2>
 8026324:	9b05      	ldr	r3, [sp, #20]
 8026326:	9a05      	ldr	r2, [sp, #20]
 8026328:	f803 ac01 	strb.w	sl, [r3, #-1]
 802632c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802632e:	4293      	cmp	r3, r2
 8026330:	d029      	beq.n	8026386 <_dtoa_r+0xa0e>
 8026332:	9901      	ldr	r1, [sp, #4]
 8026334:	2300      	movs	r3, #0
 8026336:	220a      	movs	r2, #10
 8026338:	4648      	mov	r0, r9
 802633a:	f000 f91f 	bl	802657c <__multadd>
 802633e:	45a8      	cmp	r8, r5
 8026340:	9001      	str	r0, [sp, #4]
 8026342:	f04f 0300 	mov.w	r3, #0
 8026346:	f04f 020a 	mov.w	r2, #10
 802634a:	4641      	mov	r1, r8
 802634c:	4648      	mov	r0, r9
 802634e:	d107      	bne.n	8026360 <_dtoa_r+0x9e8>
 8026350:	f000 f914 	bl	802657c <__multadd>
 8026354:	4680      	mov	r8, r0
 8026356:	4605      	mov	r5, r0
 8026358:	9b05      	ldr	r3, [sp, #20]
 802635a:	3301      	adds	r3, #1
 802635c:	9305      	str	r3, [sp, #20]
 802635e:	e775      	b.n	802624c <_dtoa_r+0x8d4>
 8026360:	f000 f90c 	bl	802657c <__multadd>
 8026364:	4629      	mov	r1, r5
 8026366:	4680      	mov	r8, r0
 8026368:	2300      	movs	r3, #0
 802636a:	220a      	movs	r2, #10
 802636c:	4648      	mov	r0, r9
 802636e:	f000 f905 	bl	802657c <__multadd>
 8026372:	4605      	mov	r5, r0
 8026374:	e7f0      	b.n	8026358 <_dtoa_r+0x9e0>
 8026376:	f1bb 0f00 	cmp.w	fp, #0
 802637a:	bfcc      	ite	gt
 802637c:	465e      	movgt	r6, fp
 802637e:	2601      	movle	r6, #1
 8026380:	443e      	add	r6, r7
 8026382:	f04f 0800 	mov.w	r8, #0
 8026386:	9901      	ldr	r1, [sp, #4]
 8026388:	2201      	movs	r2, #1
 802638a:	4648      	mov	r0, r9
 802638c:	f000 faec 	bl	8026968 <__lshift>
 8026390:	4621      	mov	r1, r4
 8026392:	9001      	str	r0, [sp, #4]
 8026394:	f000 fb54 	bl	8026a40 <__mcmp>
 8026398:	2800      	cmp	r0, #0
 802639a:	dcaf      	bgt.n	80262fc <_dtoa_r+0x984>
 802639c:	d102      	bne.n	80263a4 <_dtoa_r+0xa2c>
 802639e:	f01a 0f01 	tst.w	sl, #1
 80263a2:	d1ab      	bne.n	80262fc <_dtoa_r+0x984>
 80263a4:	4633      	mov	r3, r6
 80263a6:	461e      	mov	r6, r3
 80263a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80263ac:	2a30      	cmp	r2, #48	@ 0x30
 80263ae:	d0fa      	beq.n	80263a6 <_dtoa_r+0xa2e>
 80263b0:	e5bb      	b.n	8025f2a <_dtoa_r+0x5b2>
 80263b2:	429f      	cmp	r7, r3
 80263b4:	d1a3      	bne.n	80262fe <_dtoa_r+0x986>
 80263b6:	9b04      	ldr	r3, [sp, #16]
 80263b8:	3301      	adds	r3, #1
 80263ba:	9304      	str	r3, [sp, #16]
 80263bc:	2331      	movs	r3, #49	@ 0x31
 80263be:	703b      	strb	r3, [r7, #0]
 80263c0:	e5b3      	b.n	8025f2a <_dtoa_r+0x5b2>
 80263c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80263c4:	4f16      	ldr	r7, [pc, #88]	@ (8026420 <_dtoa_r+0xaa8>)
 80263c6:	b11b      	cbz	r3, 80263d0 <_dtoa_r+0xa58>
 80263c8:	f107 0308 	add.w	r3, r7, #8
 80263cc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80263ce:	6013      	str	r3, [r2, #0]
 80263d0:	4638      	mov	r0, r7
 80263d2:	b011      	add	sp, #68	@ 0x44
 80263d4:	ecbd 8b02 	vpop	{d8}
 80263d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80263dc:	9b07      	ldr	r3, [sp, #28]
 80263de:	2b01      	cmp	r3, #1
 80263e0:	f77f ae36 	ble.w	8026050 <_dtoa_r+0x6d8>
 80263e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80263e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80263e8:	2001      	movs	r0, #1
 80263ea:	e656      	b.n	802609a <_dtoa_r+0x722>
 80263ec:	f1bb 0f00 	cmp.w	fp, #0
 80263f0:	f77f aed7 	ble.w	80261a2 <_dtoa_r+0x82a>
 80263f4:	463e      	mov	r6, r7
 80263f6:	9801      	ldr	r0, [sp, #4]
 80263f8:	4621      	mov	r1, r4
 80263fa:	f7ff fa33 	bl	8025864 <quorem>
 80263fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8026402:	f806 ab01 	strb.w	sl, [r6], #1
 8026406:	1bf2      	subs	r2, r6, r7
 8026408:	4593      	cmp	fp, r2
 802640a:	ddb4      	ble.n	8026376 <_dtoa_r+0x9fe>
 802640c:	9901      	ldr	r1, [sp, #4]
 802640e:	2300      	movs	r3, #0
 8026410:	220a      	movs	r2, #10
 8026412:	4648      	mov	r0, r9
 8026414:	f000 f8b2 	bl	802657c <__multadd>
 8026418:	9001      	str	r0, [sp, #4]
 802641a:	e7ec      	b.n	80263f6 <_dtoa_r+0xa7e>
 802641c:	0802d3b8 	.word	0x0802d3b8
 8026420:	0802d353 	.word	0x0802d353

08026424 <_free_r>:
 8026424:	b538      	push	{r3, r4, r5, lr}
 8026426:	4605      	mov	r5, r0
 8026428:	2900      	cmp	r1, #0
 802642a:	d041      	beq.n	80264b0 <_free_r+0x8c>
 802642c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026430:	1f0c      	subs	r4, r1, #4
 8026432:	2b00      	cmp	r3, #0
 8026434:	bfb8      	it	lt
 8026436:	18e4      	addlt	r4, r4, r3
 8026438:	f7fe f88a 	bl	8024550 <__malloc_lock>
 802643c:	4a1d      	ldr	r2, [pc, #116]	@ (80264b4 <_free_r+0x90>)
 802643e:	6813      	ldr	r3, [r2, #0]
 8026440:	b933      	cbnz	r3, 8026450 <_free_r+0x2c>
 8026442:	6063      	str	r3, [r4, #4]
 8026444:	6014      	str	r4, [r2, #0]
 8026446:	4628      	mov	r0, r5
 8026448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802644c:	f7fe b886 	b.w	802455c <__malloc_unlock>
 8026450:	42a3      	cmp	r3, r4
 8026452:	d908      	bls.n	8026466 <_free_r+0x42>
 8026454:	6820      	ldr	r0, [r4, #0]
 8026456:	1821      	adds	r1, r4, r0
 8026458:	428b      	cmp	r3, r1
 802645a:	bf01      	itttt	eq
 802645c:	6819      	ldreq	r1, [r3, #0]
 802645e:	685b      	ldreq	r3, [r3, #4]
 8026460:	1809      	addeq	r1, r1, r0
 8026462:	6021      	streq	r1, [r4, #0]
 8026464:	e7ed      	b.n	8026442 <_free_r+0x1e>
 8026466:	461a      	mov	r2, r3
 8026468:	685b      	ldr	r3, [r3, #4]
 802646a:	b10b      	cbz	r3, 8026470 <_free_r+0x4c>
 802646c:	42a3      	cmp	r3, r4
 802646e:	d9fa      	bls.n	8026466 <_free_r+0x42>
 8026470:	6811      	ldr	r1, [r2, #0]
 8026472:	1850      	adds	r0, r2, r1
 8026474:	42a0      	cmp	r0, r4
 8026476:	d10b      	bne.n	8026490 <_free_r+0x6c>
 8026478:	6820      	ldr	r0, [r4, #0]
 802647a:	4401      	add	r1, r0
 802647c:	1850      	adds	r0, r2, r1
 802647e:	4283      	cmp	r3, r0
 8026480:	6011      	str	r1, [r2, #0]
 8026482:	d1e0      	bne.n	8026446 <_free_r+0x22>
 8026484:	6818      	ldr	r0, [r3, #0]
 8026486:	685b      	ldr	r3, [r3, #4]
 8026488:	6053      	str	r3, [r2, #4]
 802648a:	4408      	add	r0, r1
 802648c:	6010      	str	r0, [r2, #0]
 802648e:	e7da      	b.n	8026446 <_free_r+0x22>
 8026490:	d902      	bls.n	8026498 <_free_r+0x74>
 8026492:	230c      	movs	r3, #12
 8026494:	602b      	str	r3, [r5, #0]
 8026496:	e7d6      	b.n	8026446 <_free_r+0x22>
 8026498:	6820      	ldr	r0, [r4, #0]
 802649a:	1821      	adds	r1, r4, r0
 802649c:	428b      	cmp	r3, r1
 802649e:	bf04      	itt	eq
 80264a0:	6819      	ldreq	r1, [r3, #0]
 80264a2:	685b      	ldreq	r3, [r3, #4]
 80264a4:	6063      	str	r3, [r4, #4]
 80264a6:	bf04      	itt	eq
 80264a8:	1809      	addeq	r1, r1, r0
 80264aa:	6021      	streq	r1, [r4, #0]
 80264ac:	6054      	str	r4, [r2, #4]
 80264ae:	e7ca      	b.n	8026446 <_free_r+0x22>
 80264b0:	bd38      	pop	{r3, r4, r5, pc}
 80264b2:	bf00      	nop
 80264b4:	2400bfcc 	.word	0x2400bfcc

080264b8 <_Balloc>:
 80264b8:	b570      	push	{r4, r5, r6, lr}
 80264ba:	69c6      	ldr	r6, [r0, #28]
 80264bc:	4604      	mov	r4, r0
 80264be:	460d      	mov	r5, r1
 80264c0:	b976      	cbnz	r6, 80264e0 <_Balloc+0x28>
 80264c2:	2010      	movs	r0, #16
 80264c4:	f7fd ff92 	bl	80243ec <malloc>
 80264c8:	4602      	mov	r2, r0
 80264ca:	61e0      	str	r0, [r4, #28]
 80264cc:	b920      	cbnz	r0, 80264d8 <_Balloc+0x20>
 80264ce:	4b18      	ldr	r3, [pc, #96]	@ (8026530 <_Balloc+0x78>)
 80264d0:	4818      	ldr	r0, [pc, #96]	@ (8026534 <_Balloc+0x7c>)
 80264d2:	216b      	movs	r1, #107	@ 0x6b
 80264d4:	f7ff f9a8 	bl	8025828 <__assert_func>
 80264d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80264dc:	6006      	str	r6, [r0, #0]
 80264de:	60c6      	str	r6, [r0, #12]
 80264e0:	69e6      	ldr	r6, [r4, #28]
 80264e2:	68f3      	ldr	r3, [r6, #12]
 80264e4:	b183      	cbz	r3, 8026508 <_Balloc+0x50>
 80264e6:	69e3      	ldr	r3, [r4, #28]
 80264e8:	68db      	ldr	r3, [r3, #12]
 80264ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80264ee:	b9b8      	cbnz	r0, 8026520 <_Balloc+0x68>
 80264f0:	2101      	movs	r1, #1
 80264f2:	fa01 f605 	lsl.w	r6, r1, r5
 80264f6:	1d72      	adds	r2, r6, #5
 80264f8:	0092      	lsls	r2, r2, #2
 80264fa:	4620      	mov	r0, r4
 80264fc:	f002 f9cf 	bl	802889e <_calloc_r>
 8026500:	b160      	cbz	r0, 802651c <_Balloc+0x64>
 8026502:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8026506:	e00e      	b.n	8026526 <_Balloc+0x6e>
 8026508:	2221      	movs	r2, #33	@ 0x21
 802650a:	2104      	movs	r1, #4
 802650c:	4620      	mov	r0, r4
 802650e:	f002 f9c6 	bl	802889e <_calloc_r>
 8026512:	69e3      	ldr	r3, [r4, #28]
 8026514:	60f0      	str	r0, [r6, #12]
 8026516:	68db      	ldr	r3, [r3, #12]
 8026518:	2b00      	cmp	r3, #0
 802651a:	d1e4      	bne.n	80264e6 <_Balloc+0x2e>
 802651c:	2000      	movs	r0, #0
 802651e:	bd70      	pop	{r4, r5, r6, pc}
 8026520:	6802      	ldr	r2, [r0, #0]
 8026522:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8026526:	2300      	movs	r3, #0
 8026528:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802652c:	e7f7      	b.n	802651e <_Balloc+0x66>
 802652e:	bf00      	nop
 8026530:	0802d170 	.word	0x0802d170
 8026534:	0802d3c9 	.word	0x0802d3c9

08026538 <_Bfree>:
 8026538:	b570      	push	{r4, r5, r6, lr}
 802653a:	69c6      	ldr	r6, [r0, #28]
 802653c:	4605      	mov	r5, r0
 802653e:	460c      	mov	r4, r1
 8026540:	b976      	cbnz	r6, 8026560 <_Bfree+0x28>
 8026542:	2010      	movs	r0, #16
 8026544:	f7fd ff52 	bl	80243ec <malloc>
 8026548:	4602      	mov	r2, r0
 802654a:	61e8      	str	r0, [r5, #28]
 802654c:	b920      	cbnz	r0, 8026558 <_Bfree+0x20>
 802654e:	4b09      	ldr	r3, [pc, #36]	@ (8026574 <_Bfree+0x3c>)
 8026550:	4809      	ldr	r0, [pc, #36]	@ (8026578 <_Bfree+0x40>)
 8026552:	218f      	movs	r1, #143	@ 0x8f
 8026554:	f7ff f968 	bl	8025828 <__assert_func>
 8026558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802655c:	6006      	str	r6, [r0, #0]
 802655e:	60c6      	str	r6, [r0, #12]
 8026560:	b13c      	cbz	r4, 8026572 <_Bfree+0x3a>
 8026562:	69eb      	ldr	r3, [r5, #28]
 8026564:	6862      	ldr	r2, [r4, #4]
 8026566:	68db      	ldr	r3, [r3, #12]
 8026568:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802656c:	6021      	str	r1, [r4, #0]
 802656e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8026572:	bd70      	pop	{r4, r5, r6, pc}
 8026574:	0802d170 	.word	0x0802d170
 8026578:	0802d3c9 	.word	0x0802d3c9

0802657c <__multadd>:
 802657c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026580:	690d      	ldr	r5, [r1, #16]
 8026582:	4607      	mov	r7, r0
 8026584:	460c      	mov	r4, r1
 8026586:	461e      	mov	r6, r3
 8026588:	f101 0c14 	add.w	ip, r1, #20
 802658c:	2000      	movs	r0, #0
 802658e:	f8dc 3000 	ldr.w	r3, [ip]
 8026592:	b299      	uxth	r1, r3
 8026594:	fb02 6101 	mla	r1, r2, r1, r6
 8026598:	0c1e      	lsrs	r6, r3, #16
 802659a:	0c0b      	lsrs	r3, r1, #16
 802659c:	fb02 3306 	mla	r3, r2, r6, r3
 80265a0:	b289      	uxth	r1, r1
 80265a2:	3001      	adds	r0, #1
 80265a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80265a8:	4285      	cmp	r5, r0
 80265aa:	f84c 1b04 	str.w	r1, [ip], #4
 80265ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80265b2:	dcec      	bgt.n	802658e <__multadd+0x12>
 80265b4:	b30e      	cbz	r6, 80265fa <__multadd+0x7e>
 80265b6:	68a3      	ldr	r3, [r4, #8]
 80265b8:	42ab      	cmp	r3, r5
 80265ba:	dc19      	bgt.n	80265f0 <__multadd+0x74>
 80265bc:	6861      	ldr	r1, [r4, #4]
 80265be:	4638      	mov	r0, r7
 80265c0:	3101      	adds	r1, #1
 80265c2:	f7ff ff79 	bl	80264b8 <_Balloc>
 80265c6:	4680      	mov	r8, r0
 80265c8:	b928      	cbnz	r0, 80265d6 <__multadd+0x5a>
 80265ca:	4602      	mov	r2, r0
 80265cc:	4b0c      	ldr	r3, [pc, #48]	@ (8026600 <__multadd+0x84>)
 80265ce:	480d      	ldr	r0, [pc, #52]	@ (8026604 <__multadd+0x88>)
 80265d0:	21ba      	movs	r1, #186	@ 0xba
 80265d2:	f7ff f929 	bl	8025828 <__assert_func>
 80265d6:	6922      	ldr	r2, [r4, #16]
 80265d8:	3202      	adds	r2, #2
 80265da:	f104 010c 	add.w	r1, r4, #12
 80265de:	0092      	lsls	r2, r2, #2
 80265e0:	300c      	adds	r0, #12
 80265e2:	f7ff f90c 	bl	80257fe <memcpy>
 80265e6:	4621      	mov	r1, r4
 80265e8:	4638      	mov	r0, r7
 80265ea:	f7ff ffa5 	bl	8026538 <_Bfree>
 80265ee:	4644      	mov	r4, r8
 80265f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80265f4:	3501      	adds	r5, #1
 80265f6:	615e      	str	r6, [r3, #20]
 80265f8:	6125      	str	r5, [r4, #16]
 80265fa:	4620      	mov	r0, r4
 80265fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026600:	0802d3b8 	.word	0x0802d3b8
 8026604:	0802d3c9 	.word	0x0802d3c9

08026608 <__s2b>:
 8026608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802660c:	460c      	mov	r4, r1
 802660e:	4615      	mov	r5, r2
 8026610:	461f      	mov	r7, r3
 8026612:	2209      	movs	r2, #9
 8026614:	3308      	adds	r3, #8
 8026616:	4606      	mov	r6, r0
 8026618:	fb93 f3f2 	sdiv	r3, r3, r2
 802661c:	2100      	movs	r1, #0
 802661e:	2201      	movs	r2, #1
 8026620:	429a      	cmp	r2, r3
 8026622:	db09      	blt.n	8026638 <__s2b+0x30>
 8026624:	4630      	mov	r0, r6
 8026626:	f7ff ff47 	bl	80264b8 <_Balloc>
 802662a:	b940      	cbnz	r0, 802663e <__s2b+0x36>
 802662c:	4602      	mov	r2, r0
 802662e:	4b19      	ldr	r3, [pc, #100]	@ (8026694 <__s2b+0x8c>)
 8026630:	4819      	ldr	r0, [pc, #100]	@ (8026698 <__s2b+0x90>)
 8026632:	21d3      	movs	r1, #211	@ 0xd3
 8026634:	f7ff f8f8 	bl	8025828 <__assert_func>
 8026638:	0052      	lsls	r2, r2, #1
 802663a:	3101      	adds	r1, #1
 802663c:	e7f0      	b.n	8026620 <__s2b+0x18>
 802663e:	9b08      	ldr	r3, [sp, #32]
 8026640:	6143      	str	r3, [r0, #20]
 8026642:	2d09      	cmp	r5, #9
 8026644:	f04f 0301 	mov.w	r3, #1
 8026648:	6103      	str	r3, [r0, #16]
 802664a:	dd16      	ble.n	802667a <__s2b+0x72>
 802664c:	f104 0909 	add.w	r9, r4, #9
 8026650:	46c8      	mov	r8, r9
 8026652:	442c      	add	r4, r5
 8026654:	f818 3b01 	ldrb.w	r3, [r8], #1
 8026658:	4601      	mov	r1, r0
 802665a:	3b30      	subs	r3, #48	@ 0x30
 802665c:	220a      	movs	r2, #10
 802665e:	4630      	mov	r0, r6
 8026660:	f7ff ff8c 	bl	802657c <__multadd>
 8026664:	45a0      	cmp	r8, r4
 8026666:	d1f5      	bne.n	8026654 <__s2b+0x4c>
 8026668:	f1a5 0408 	sub.w	r4, r5, #8
 802666c:	444c      	add	r4, r9
 802666e:	1b2d      	subs	r5, r5, r4
 8026670:	1963      	adds	r3, r4, r5
 8026672:	42bb      	cmp	r3, r7
 8026674:	db04      	blt.n	8026680 <__s2b+0x78>
 8026676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802667a:	340a      	adds	r4, #10
 802667c:	2509      	movs	r5, #9
 802667e:	e7f6      	b.n	802666e <__s2b+0x66>
 8026680:	f814 3b01 	ldrb.w	r3, [r4], #1
 8026684:	4601      	mov	r1, r0
 8026686:	3b30      	subs	r3, #48	@ 0x30
 8026688:	220a      	movs	r2, #10
 802668a:	4630      	mov	r0, r6
 802668c:	f7ff ff76 	bl	802657c <__multadd>
 8026690:	e7ee      	b.n	8026670 <__s2b+0x68>
 8026692:	bf00      	nop
 8026694:	0802d3b8 	.word	0x0802d3b8
 8026698:	0802d3c9 	.word	0x0802d3c9

0802669c <__hi0bits>:
 802669c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80266a0:	4603      	mov	r3, r0
 80266a2:	bf36      	itet	cc
 80266a4:	0403      	lslcc	r3, r0, #16
 80266a6:	2000      	movcs	r0, #0
 80266a8:	2010      	movcc	r0, #16
 80266aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80266ae:	bf3c      	itt	cc
 80266b0:	021b      	lslcc	r3, r3, #8
 80266b2:	3008      	addcc	r0, #8
 80266b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80266b8:	bf3c      	itt	cc
 80266ba:	011b      	lslcc	r3, r3, #4
 80266bc:	3004      	addcc	r0, #4
 80266be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80266c2:	bf3c      	itt	cc
 80266c4:	009b      	lslcc	r3, r3, #2
 80266c6:	3002      	addcc	r0, #2
 80266c8:	2b00      	cmp	r3, #0
 80266ca:	db05      	blt.n	80266d8 <__hi0bits+0x3c>
 80266cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80266d0:	f100 0001 	add.w	r0, r0, #1
 80266d4:	bf08      	it	eq
 80266d6:	2020      	moveq	r0, #32
 80266d8:	4770      	bx	lr

080266da <__lo0bits>:
 80266da:	6803      	ldr	r3, [r0, #0]
 80266dc:	4602      	mov	r2, r0
 80266de:	f013 0007 	ands.w	r0, r3, #7
 80266e2:	d00b      	beq.n	80266fc <__lo0bits+0x22>
 80266e4:	07d9      	lsls	r1, r3, #31
 80266e6:	d421      	bmi.n	802672c <__lo0bits+0x52>
 80266e8:	0798      	lsls	r0, r3, #30
 80266ea:	bf49      	itett	mi
 80266ec:	085b      	lsrmi	r3, r3, #1
 80266ee:	089b      	lsrpl	r3, r3, #2
 80266f0:	2001      	movmi	r0, #1
 80266f2:	6013      	strmi	r3, [r2, #0]
 80266f4:	bf5c      	itt	pl
 80266f6:	6013      	strpl	r3, [r2, #0]
 80266f8:	2002      	movpl	r0, #2
 80266fa:	4770      	bx	lr
 80266fc:	b299      	uxth	r1, r3
 80266fe:	b909      	cbnz	r1, 8026704 <__lo0bits+0x2a>
 8026700:	0c1b      	lsrs	r3, r3, #16
 8026702:	2010      	movs	r0, #16
 8026704:	b2d9      	uxtb	r1, r3
 8026706:	b909      	cbnz	r1, 802670c <__lo0bits+0x32>
 8026708:	3008      	adds	r0, #8
 802670a:	0a1b      	lsrs	r3, r3, #8
 802670c:	0719      	lsls	r1, r3, #28
 802670e:	bf04      	itt	eq
 8026710:	091b      	lsreq	r3, r3, #4
 8026712:	3004      	addeq	r0, #4
 8026714:	0799      	lsls	r1, r3, #30
 8026716:	bf04      	itt	eq
 8026718:	089b      	lsreq	r3, r3, #2
 802671a:	3002      	addeq	r0, #2
 802671c:	07d9      	lsls	r1, r3, #31
 802671e:	d403      	bmi.n	8026728 <__lo0bits+0x4e>
 8026720:	085b      	lsrs	r3, r3, #1
 8026722:	f100 0001 	add.w	r0, r0, #1
 8026726:	d003      	beq.n	8026730 <__lo0bits+0x56>
 8026728:	6013      	str	r3, [r2, #0]
 802672a:	4770      	bx	lr
 802672c:	2000      	movs	r0, #0
 802672e:	4770      	bx	lr
 8026730:	2020      	movs	r0, #32
 8026732:	4770      	bx	lr

08026734 <__i2b>:
 8026734:	b510      	push	{r4, lr}
 8026736:	460c      	mov	r4, r1
 8026738:	2101      	movs	r1, #1
 802673a:	f7ff febd 	bl	80264b8 <_Balloc>
 802673e:	4602      	mov	r2, r0
 8026740:	b928      	cbnz	r0, 802674e <__i2b+0x1a>
 8026742:	4b05      	ldr	r3, [pc, #20]	@ (8026758 <__i2b+0x24>)
 8026744:	4805      	ldr	r0, [pc, #20]	@ (802675c <__i2b+0x28>)
 8026746:	f240 1145 	movw	r1, #325	@ 0x145
 802674a:	f7ff f86d 	bl	8025828 <__assert_func>
 802674e:	2301      	movs	r3, #1
 8026750:	6144      	str	r4, [r0, #20]
 8026752:	6103      	str	r3, [r0, #16]
 8026754:	bd10      	pop	{r4, pc}
 8026756:	bf00      	nop
 8026758:	0802d3b8 	.word	0x0802d3b8
 802675c:	0802d3c9 	.word	0x0802d3c9

08026760 <__multiply>:
 8026760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026764:	4614      	mov	r4, r2
 8026766:	690a      	ldr	r2, [r1, #16]
 8026768:	6923      	ldr	r3, [r4, #16]
 802676a:	429a      	cmp	r2, r3
 802676c:	bfa8      	it	ge
 802676e:	4623      	movge	r3, r4
 8026770:	460f      	mov	r7, r1
 8026772:	bfa4      	itt	ge
 8026774:	460c      	movge	r4, r1
 8026776:	461f      	movge	r7, r3
 8026778:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802677c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8026780:	68a3      	ldr	r3, [r4, #8]
 8026782:	6861      	ldr	r1, [r4, #4]
 8026784:	eb0a 0609 	add.w	r6, sl, r9
 8026788:	42b3      	cmp	r3, r6
 802678a:	b085      	sub	sp, #20
 802678c:	bfb8      	it	lt
 802678e:	3101      	addlt	r1, #1
 8026790:	f7ff fe92 	bl	80264b8 <_Balloc>
 8026794:	b930      	cbnz	r0, 80267a4 <__multiply+0x44>
 8026796:	4602      	mov	r2, r0
 8026798:	4b44      	ldr	r3, [pc, #272]	@ (80268ac <__multiply+0x14c>)
 802679a:	4845      	ldr	r0, [pc, #276]	@ (80268b0 <__multiply+0x150>)
 802679c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80267a0:	f7ff f842 	bl	8025828 <__assert_func>
 80267a4:	f100 0514 	add.w	r5, r0, #20
 80267a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80267ac:	462b      	mov	r3, r5
 80267ae:	2200      	movs	r2, #0
 80267b0:	4543      	cmp	r3, r8
 80267b2:	d321      	bcc.n	80267f8 <__multiply+0x98>
 80267b4:	f107 0114 	add.w	r1, r7, #20
 80267b8:	f104 0214 	add.w	r2, r4, #20
 80267bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80267c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80267c4:	9302      	str	r3, [sp, #8]
 80267c6:	1b13      	subs	r3, r2, r4
 80267c8:	3b15      	subs	r3, #21
 80267ca:	f023 0303 	bic.w	r3, r3, #3
 80267ce:	3304      	adds	r3, #4
 80267d0:	f104 0715 	add.w	r7, r4, #21
 80267d4:	42ba      	cmp	r2, r7
 80267d6:	bf38      	it	cc
 80267d8:	2304      	movcc	r3, #4
 80267da:	9301      	str	r3, [sp, #4]
 80267dc:	9b02      	ldr	r3, [sp, #8]
 80267de:	9103      	str	r1, [sp, #12]
 80267e0:	428b      	cmp	r3, r1
 80267e2:	d80c      	bhi.n	80267fe <__multiply+0x9e>
 80267e4:	2e00      	cmp	r6, #0
 80267e6:	dd03      	ble.n	80267f0 <__multiply+0x90>
 80267e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80267ec:	2b00      	cmp	r3, #0
 80267ee:	d05b      	beq.n	80268a8 <__multiply+0x148>
 80267f0:	6106      	str	r6, [r0, #16]
 80267f2:	b005      	add	sp, #20
 80267f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80267f8:	f843 2b04 	str.w	r2, [r3], #4
 80267fc:	e7d8      	b.n	80267b0 <__multiply+0x50>
 80267fe:	f8b1 a000 	ldrh.w	sl, [r1]
 8026802:	f1ba 0f00 	cmp.w	sl, #0
 8026806:	d024      	beq.n	8026852 <__multiply+0xf2>
 8026808:	f104 0e14 	add.w	lr, r4, #20
 802680c:	46a9      	mov	r9, r5
 802680e:	f04f 0c00 	mov.w	ip, #0
 8026812:	f85e 7b04 	ldr.w	r7, [lr], #4
 8026816:	f8d9 3000 	ldr.w	r3, [r9]
 802681a:	fa1f fb87 	uxth.w	fp, r7
 802681e:	b29b      	uxth	r3, r3
 8026820:	fb0a 330b 	mla	r3, sl, fp, r3
 8026824:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8026828:	f8d9 7000 	ldr.w	r7, [r9]
 802682c:	4463      	add	r3, ip
 802682e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8026832:	fb0a c70b 	mla	r7, sl, fp, ip
 8026836:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802683a:	b29b      	uxth	r3, r3
 802683c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8026840:	4572      	cmp	r2, lr
 8026842:	f849 3b04 	str.w	r3, [r9], #4
 8026846:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802684a:	d8e2      	bhi.n	8026812 <__multiply+0xb2>
 802684c:	9b01      	ldr	r3, [sp, #4]
 802684e:	f845 c003 	str.w	ip, [r5, r3]
 8026852:	9b03      	ldr	r3, [sp, #12]
 8026854:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8026858:	3104      	adds	r1, #4
 802685a:	f1b9 0f00 	cmp.w	r9, #0
 802685e:	d021      	beq.n	80268a4 <__multiply+0x144>
 8026860:	682b      	ldr	r3, [r5, #0]
 8026862:	f104 0c14 	add.w	ip, r4, #20
 8026866:	46ae      	mov	lr, r5
 8026868:	f04f 0a00 	mov.w	sl, #0
 802686c:	f8bc b000 	ldrh.w	fp, [ip]
 8026870:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8026874:	fb09 770b 	mla	r7, r9, fp, r7
 8026878:	4457      	add	r7, sl
 802687a:	b29b      	uxth	r3, r3
 802687c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8026880:	f84e 3b04 	str.w	r3, [lr], #4
 8026884:	f85c 3b04 	ldr.w	r3, [ip], #4
 8026888:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802688c:	f8be 3000 	ldrh.w	r3, [lr]
 8026890:	fb09 330a 	mla	r3, r9, sl, r3
 8026894:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8026898:	4562      	cmp	r2, ip
 802689a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802689e:	d8e5      	bhi.n	802686c <__multiply+0x10c>
 80268a0:	9f01      	ldr	r7, [sp, #4]
 80268a2:	51eb      	str	r3, [r5, r7]
 80268a4:	3504      	adds	r5, #4
 80268a6:	e799      	b.n	80267dc <__multiply+0x7c>
 80268a8:	3e01      	subs	r6, #1
 80268aa:	e79b      	b.n	80267e4 <__multiply+0x84>
 80268ac:	0802d3b8 	.word	0x0802d3b8
 80268b0:	0802d3c9 	.word	0x0802d3c9

080268b4 <__pow5mult>:
 80268b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80268b8:	4615      	mov	r5, r2
 80268ba:	f012 0203 	ands.w	r2, r2, #3
 80268be:	4607      	mov	r7, r0
 80268c0:	460e      	mov	r6, r1
 80268c2:	d007      	beq.n	80268d4 <__pow5mult+0x20>
 80268c4:	4c25      	ldr	r4, [pc, #148]	@ (802695c <__pow5mult+0xa8>)
 80268c6:	3a01      	subs	r2, #1
 80268c8:	2300      	movs	r3, #0
 80268ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80268ce:	f7ff fe55 	bl	802657c <__multadd>
 80268d2:	4606      	mov	r6, r0
 80268d4:	10ad      	asrs	r5, r5, #2
 80268d6:	d03d      	beq.n	8026954 <__pow5mult+0xa0>
 80268d8:	69fc      	ldr	r4, [r7, #28]
 80268da:	b97c      	cbnz	r4, 80268fc <__pow5mult+0x48>
 80268dc:	2010      	movs	r0, #16
 80268de:	f7fd fd85 	bl	80243ec <malloc>
 80268e2:	4602      	mov	r2, r0
 80268e4:	61f8      	str	r0, [r7, #28]
 80268e6:	b928      	cbnz	r0, 80268f4 <__pow5mult+0x40>
 80268e8:	4b1d      	ldr	r3, [pc, #116]	@ (8026960 <__pow5mult+0xac>)
 80268ea:	481e      	ldr	r0, [pc, #120]	@ (8026964 <__pow5mult+0xb0>)
 80268ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80268f0:	f7fe ff9a 	bl	8025828 <__assert_func>
 80268f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80268f8:	6004      	str	r4, [r0, #0]
 80268fa:	60c4      	str	r4, [r0, #12]
 80268fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8026900:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026904:	b94c      	cbnz	r4, 802691a <__pow5mult+0x66>
 8026906:	f240 2171 	movw	r1, #625	@ 0x271
 802690a:	4638      	mov	r0, r7
 802690c:	f7ff ff12 	bl	8026734 <__i2b>
 8026910:	2300      	movs	r3, #0
 8026912:	f8c8 0008 	str.w	r0, [r8, #8]
 8026916:	4604      	mov	r4, r0
 8026918:	6003      	str	r3, [r0, #0]
 802691a:	f04f 0900 	mov.w	r9, #0
 802691e:	07eb      	lsls	r3, r5, #31
 8026920:	d50a      	bpl.n	8026938 <__pow5mult+0x84>
 8026922:	4631      	mov	r1, r6
 8026924:	4622      	mov	r2, r4
 8026926:	4638      	mov	r0, r7
 8026928:	f7ff ff1a 	bl	8026760 <__multiply>
 802692c:	4631      	mov	r1, r6
 802692e:	4680      	mov	r8, r0
 8026930:	4638      	mov	r0, r7
 8026932:	f7ff fe01 	bl	8026538 <_Bfree>
 8026936:	4646      	mov	r6, r8
 8026938:	106d      	asrs	r5, r5, #1
 802693a:	d00b      	beq.n	8026954 <__pow5mult+0xa0>
 802693c:	6820      	ldr	r0, [r4, #0]
 802693e:	b938      	cbnz	r0, 8026950 <__pow5mult+0x9c>
 8026940:	4622      	mov	r2, r4
 8026942:	4621      	mov	r1, r4
 8026944:	4638      	mov	r0, r7
 8026946:	f7ff ff0b 	bl	8026760 <__multiply>
 802694a:	6020      	str	r0, [r4, #0]
 802694c:	f8c0 9000 	str.w	r9, [r0]
 8026950:	4604      	mov	r4, r0
 8026952:	e7e4      	b.n	802691e <__pow5mult+0x6a>
 8026954:	4630      	mov	r0, r6
 8026956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802695a:	bf00      	nop
 802695c:	0802d424 	.word	0x0802d424
 8026960:	0802d170 	.word	0x0802d170
 8026964:	0802d3c9 	.word	0x0802d3c9

08026968 <__lshift>:
 8026968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802696c:	460c      	mov	r4, r1
 802696e:	6849      	ldr	r1, [r1, #4]
 8026970:	6923      	ldr	r3, [r4, #16]
 8026972:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8026976:	68a3      	ldr	r3, [r4, #8]
 8026978:	4607      	mov	r7, r0
 802697a:	4691      	mov	r9, r2
 802697c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026980:	f108 0601 	add.w	r6, r8, #1
 8026984:	42b3      	cmp	r3, r6
 8026986:	db0b      	blt.n	80269a0 <__lshift+0x38>
 8026988:	4638      	mov	r0, r7
 802698a:	f7ff fd95 	bl	80264b8 <_Balloc>
 802698e:	4605      	mov	r5, r0
 8026990:	b948      	cbnz	r0, 80269a6 <__lshift+0x3e>
 8026992:	4602      	mov	r2, r0
 8026994:	4b28      	ldr	r3, [pc, #160]	@ (8026a38 <__lshift+0xd0>)
 8026996:	4829      	ldr	r0, [pc, #164]	@ (8026a3c <__lshift+0xd4>)
 8026998:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802699c:	f7fe ff44 	bl	8025828 <__assert_func>
 80269a0:	3101      	adds	r1, #1
 80269a2:	005b      	lsls	r3, r3, #1
 80269a4:	e7ee      	b.n	8026984 <__lshift+0x1c>
 80269a6:	2300      	movs	r3, #0
 80269a8:	f100 0114 	add.w	r1, r0, #20
 80269ac:	f100 0210 	add.w	r2, r0, #16
 80269b0:	4618      	mov	r0, r3
 80269b2:	4553      	cmp	r3, sl
 80269b4:	db33      	blt.n	8026a1e <__lshift+0xb6>
 80269b6:	6920      	ldr	r0, [r4, #16]
 80269b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80269bc:	f104 0314 	add.w	r3, r4, #20
 80269c0:	f019 091f 	ands.w	r9, r9, #31
 80269c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80269c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80269cc:	d02b      	beq.n	8026a26 <__lshift+0xbe>
 80269ce:	f1c9 0e20 	rsb	lr, r9, #32
 80269d2:	468a      	mov	sl, r1
 80269d4:	2200      	movs	r2, #0
 80269d6:	6818      	ldr	r0, [r3, #0]
 80269d8:	fa00 f009 	lsl.w	r0, r0, r9
 80269dc:	4310      	orrs	r0, r2
 80269de:	f84a 0b04 	str.w	r0, [sl], #4
 80269e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80269e6:	459c      	cmp	ip, r3
 80269e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80269ec:	d8f3      	bhi.n	80269d6 <__lshift+0x6e>
 80269ee:	ebac 0304 	sub.w	r3, ip, r4
 80269f2:	3b15      	subs	r3, #21
 80269f4:	f023 0303 	bic.w	r3, r3, #3
 80269f8:	3304      	adds	r3, #4
 80269fa:	f104 0015 	add.w	r0, r4, #21
 80269fe:	4584      	cmp	ip, r0
 8026a00:	bf38      	it	cc
 8026a02:	2304      	movcc	r3, #4
 8026a04:	50ca      	str	r2, [r1, r3]
 8026a06:	b10a      	cbz	r2, 8026a0c <__lshift+0xa4>
 8026a08:	f108 0602 	add.w	r6, r8, #2
 8026a0c:	3e01      	subs	r6, #1
 8026a0e:	4638      	mov	r0, r7
 8026a10:	612e      	str	r6, [r5, #16]
 8026a12:	4621      	mov	r1, r4
 8026a14:	f7ff fd90 	bl	8026538 <_Bfree>
 8026a18:	4628      	mov	r0, r5
 8026a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026a1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8026a22:	3301      	adds	r3, #1
 8026a24:	e7c5      	b.n	80269b2 <__lshift+0x4a>
 8026a26:	3904      	subs	r1, #4
 8026a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8026a2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8026a30:	459c      	cmp	ip, r3
 8026a32:	d8f9      	bhi.n	8026a28 <__lshift+0xc0>
 8026a34:	e7ea      	b.n	8026a0c <__lshift+0xa4>
 8026a36:	bf00      	nop
 8026a38:	0802d3b8 	.word	0x0802d3b8
 8026a3c:	0802d3c9 	.word	0x0802d3c9

08026a40 <__mcmp>:
 8026a40:	690a      	ldr	r2, [r1, #16]
 8026a42:	4603      	mov	r3, r0
 8026a44:	6900      	ldr	r0, [r0, #16]
 8026a46:	1a80      	subs	r0, r0, r2
 8026a48:	b530      	push	{r4, r5, lr}
 8026a4a:	d10e      	bne.n	8026a6a <__mcmp+0x2a>
 8026a4c:	3314      	adds	r3, #20
 8026a4e:	3114      	adds	r1, #20
 8026a50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8026a54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8026a58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8026a5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8026a60:	4295      	cmp	r5, r2
 8026a62:	d003      	beq.n	8026a6c <__mcmp+0x2c>
 8026a64:	d205      	bcs.n	8026a72 <__mcmp+0x32>
 8026a66:	f04f 30ff 	mov.w	r0, #4294967295
 8026a6a:	bd30      	pop	{r4, r5, pc}
 8026a6c:	42a3      	cmp	r3, r4
 8026a6e:	d3f3      	bcc.n	8026a58 <__mcmp+0x18>
 8026a70:	e7fb      	b.n	8026a6a <__mcmp+0x2a>
 8026a72:	2001      	movs	r0, #1
 8026a74:	e7f9      	b.n	8026a6a <__mcmp+0x2a>
	...

08026a78 <__mdiff>:
 8026a78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a7c:	4689      	mov	r9, r1
 8026a7e:	4606      	mov	r6, r0
 8026a80:	4611      	mov	r1, r2
 8026a82:	4648      	mov	r0, r9
 8026a84:	4614      	mov	r4, r2
 8026a86:	f7ff ffdb 	bl	8026a40 <__mcmp>
 8026a8a:	1e05      	subs	r5, r0, #0
 8026a8c:	d112      	bne.n	8026ab4 <__mdiff+0x3c>
 8026a8e:	4629      	mov	r1, r5
 8026a90:	4630      	mov	r0, r6
 8026a92:	f7ff fd11 	bl	80264b8 <_Balloc>
 8026a96:	4602      	mov	r2, r0
 8026a98:	b928      	cbnz	r0, 8026aa6 <__mdiff+0x2e>
 8026a9a:	4b3f      	ldr	r3, [pc, #252]	@ (8026b98 <__mdiff+0x120>)
 8026a9c:	f240 2137 	movw	r1, #567	@ 0x237
 8026aa0:	483e      	ldr	r0, [pc, #248]	@ (8026b9c <__mdiff+0x124>)
 8026aa2:	f7fe fec1 	bl	8025828 <__assert_func>
 8026aa6:	2301      	movs	r3, #1
 8026aa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8026aac:	4610      	mov	r0, r2
 8026aae:	b003      	add	sp, #12
 8026ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026ab4:	bfbc      	itt	lt
 8026ab6:	464b      	movlt	r3, r9
 8026ab8:	46a1      	movlt	r9, r4
 8026aba:	4630      	mov	r0, r6
 8026abc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8026ac0:	bfba      	itte	lt
 8026ac2:	461c      	movlt	r4, r3
 8026ac4:	2501      	movlt	r5, #1
 8026ac6:	2500      	movge	r5, #0
 8026ac8:	f7ff fcf6 	bl	80264b8 <_Balloc>
 8026acc:	4602      	mov	r2, r0
 8026ace:	b918      	cbnz	r0, 8026ad8 <__mdiff+0x60>
 8026ad0:	4b31      	ldr	r3, [pc, #196]	@ (8026b98 <__mdiff+0x120>)
 8026ad2:	f240 2145 	movw	r1, #581	@ 0x245
 8026ad6:	e7e3      	b.n	8026aa0 <__mdiff+0x28>
 8026ad8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8026adc:	6926      	ldr	r6, [r4, #16]
 8026ade:	60c5      	str	r5, [r0, #12]
 8026ae0:	f109 0310 	add.w	r3, r9, #16
 8026ae4:	f109 0514 	add.w	r5, r9, #20
 8026ae8:	f104 0e14 	add.w	lr, r4, #20
 8026aec:	f100 0b14 	add.w	fp, r0, #20
 8026af0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8026af4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8026af8:	9301      	str	r3, [sp, #4]
 8026afa:	46d9      	mov	r9, fp
 8026afc:	f04f 0c00 	mov.w	ip, #0
 8026b00:	9b01      	ldr	r3, [sp, #4]
 8026b02:	f85e 0b04 	ldr.w	r0, [lr], #4
 8026b06:	f853 af04 	ldr.w	sl, [r3, #4]!
 8026b0a:	9301      	str	r3, [sp, #4]
 8026b0c:	fa1f f38a 	uxth.w	r3, sl
 8026b10:	4619      	mov	r1, r3
 8026b12:	b283      	uxth	r3, r0
 8026b14:	1acb      	subs	r3, r1, r3
 8026b16:	0c00      	lsrs	r0, r0, #16
 8026b18:	4463      	add	r3, ip
 8026b1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8026b1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8026b22:	b29b      	uxth	r3, r3
 8026b24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8026b28:	4576      	cmp	r6, lr
 8026b2a:	f849 3b04 	str.w	r3, [r9], #4
 8026b2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026b32:	d8e5      	bhi.n	8026b00 <__mdiff+0x88>
 8026b34:	1b33      	subs	r3, r6, r4
 8026b36:	3b15      	subs	r3, #21
 8026b38:	f023 0303 	bic.w	r3, r3, #3
 8026b3c:	3415      	adds	r4, #21
 8026b3e:	3304      	adds	r3, #4
 8026b40:	42a6      	cmp	r6, r4
 8026b42:	bf38      	it	cc
 8026b44:	2304      	movcc	r3, #4
 8026b46:	441d      	add	r5, r3
 8026b48:	445b      	add	r3, fp
 8026b4a:	461e      	mov	r6, r3
 8026b4c:	462c      	mov	r4, r5
 8026b4e:	4544      	cmp	r4, r8
 8026b50:	d30e      	bcc.n	8026b70 <__mdiff+0xf8>
 8026b52:	f108 0103 	add.w	r1, r8, #3
 8026b56:	1b49      	subs	r1, r1, r5
 8026b58:	f021 0103 	bic.w	r1, r1, #3
 8026b5c:	3d03      	subs	r5, #3
 8026b5e:	45a8      	cmp	r8, r5
 8026b60:	bf38      	it	cc
 8026b62:	2100      	movcc	r1, #0
 8026b64:	440b      	add	r3, r1
 8026b66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8026b6a:	b191      	cbz	r1, 8026b92 <__mdiff+0x11a>
 8026b6c:	6117      	str	r7, [r2, #16]
 8026b6e:	e79d      	b.n	8026aac <__mdiff+0x34>
 8026b70:	f854 1b04 	ldr.w	r1, [r4], #4
 8026b74:	46e6      	mov	lr, ip
 8026b76:	0c08      	lsrs	r0, r1, #16
 8026b78:	fa1c fc81 	uxtah	ip, ip, r1
 8026b7c:	4471      	add	r1, lr
 8026b7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8026b82:	b289      	uxth	r1, r1
 8026b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8026b88:	f846 1b04 	str.w	r1, [r6], #4
 8026b8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026b90:	e7dd      	b.n	8026b4e <__mdiff+0xd6>
 8026b92:	3f01      	subs	r7, #1
 8026b94:	e7e7      	b.n	8026b66 <__mdiff+0xee>
 8026b96:	bf00      	nop
 8026b98:	0802d3b8 	.word	0x0802d3b8
 8026b9c:	0802d3c9 	.word	0x0802d3c9

08026ba0 <__ulp>:
 8026ba0:	b082      	sub	sp, #8
 8026ba2:	ed8d 0b00 	vstr	d0, [sp]
 8026ba6:	9a01      	ldr	r2, [sp, #4]
 8026ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8026be8 <__ulp+0x48>)
 8026baa:	4013      	ands	r3, r2
 8026bac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8026bb0:	2b00      	cmp	r3, #0
 8026bb2:	dc08      	bgt.n	8026bc6 <__ulp+0x26>
 8026bb4:	425b      	negs	r3, r3
 8026bb6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8026bba:	ea4f 5223 	mov.w	r2, r3, asr #20
 8026bbe:	da04      	bge.n	8026bca <__ulp+0x2a>
 8026bc0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8026bc4:	4113      	asrs	r3, r2
 8026bc6:	2200      	movs	r2, #0
 8026bc8:	e008      	b.n	8026bdc <__ulp+0x3c>
 8026bca:	f1a2 0314 	sub.w	r3, r2, #20
 8026bce:	2b1e      	cmp	r3, #30
 8026bd0:	bfda      	itte	le
 8026bd2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8026bd6:	40da      	lsrle	r2, r3
 8026bd8:	2201      	movgt	r2, #1
 8026bda:	2300      	movs	r3, #0
 8026bdc:	4619      	mov	r1, r3
 8026bde:	4610      	mov	r0, r2
 8026be0:	ec41 0b10 	vmov	d0, r0, r1
 8026be4:	b002      	add	sp, #8
 8026be6:	4770      	bx	lr
 8026be8:	7ff00000 	.word	0x7ff00000

08026bec <__b2d>:
 8026bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026bf0:	6906      	ldr	r6, [r0, #16]
 8026bf2:	f100 0814 	add.w	r8, r0, #20
 8026bf6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8026bfa:	1f37      	subs	r7, r6, #4
 8026bfc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8026c00:	4610      	mov	r0, r2
 8026c02:	f7ff fd4b 	bl	802669c <__hi0bits>
 8026c06:	f1c0 0320 	rsb	r3, r0, #32
 8026c0a:	280a      	cmp	r0, #10
 8026c0c:	600b      	str	r3, [r1, #0]
 8026c0e:	491b      	ldr	r1, [pc, #108]	@ (8026c7c <__b2d+0x90>)
 8026c10:	dc15      	bgt.n	8026c3e <__b2d+0x52>
 8026c12:	f1c0 0c0b 	rsb	ip, r0, #11
 8026c16:	fa22 f30c 	lsr.w	r3, r2, ip
 8026c1a:	45b8      	cmp	r8, r7
 8026c1c:	ea43 0501 	orr.w	r5, r3, r1
 8026c20:	bf34      	ite	cc
 8026c22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8026c26:	2300      	movcs	r3, #0
 8026c28:	3015      	adds	r0, #21
 8026c2a:	fa02 f000 	lsl.w	r0, r2, r0
 8026c2e:	fa23 f30c 	lsr.w	r3, r3, ip
 8026c32:	4303      	orrs	r3, r0
 8026c34:	461c      	mov	r4, r3
 8026c36:	ec45 4b10 	vmov	d0, r4, r5
 8026c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026c3e:	45b8      	cmp	r8, r7
 8026c40:	bf3a      	itte	cc
 8026c42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8026c46:	f1a6 0708 	subcc.w	r7, r6, #8
 8026c4a:	2300      	movcs	r3, #0
 8026c4c:	380b      	subs	r0, #11
 8026c4e:	d012      	beq.n	8026c76 <__b2d+0x8a>
 8026c50:	f1c0 0120 	rsb	r1, r0, #32
 8026c54:	fa23 f401 	lsr.w	r4, r3, r1
 8026c58:	4082      	lsls	r2, r0
 8026c5a:	4322      	orrs	r2, r4
 8026c5c:	4547      	cmp	r7, r8
 8026c5e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8026c62:	bf8c      	ite	hi
 8026c64:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8026c68:	2200      	movls	r2, #0
 8026c6a:	4083      	lsls	r3, r0
 8026c6c:	40ca      	lsrs	r2, r1
 8026c6e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8026c72:	4313      	orrs	r3, r2
 8026c74:	e7de      	b.n	8026c34 <__b2d+0x48>
 8026c76:	ea42 0501 	orr.w	r5, r2, r1
 8026c7a:	e7db      	b.n	8026c34 <__b2d+0x48>
 8026c7c:	3ff00000 	.word	0x3ff00000

08026c80 <__d2b>:
 8026c80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026c84:	460f      	mov	r7, r1
 8026c86:	2101      	movs	r1, #1
 8026c88:	ec59 8b10 	vmov	r8, r9, d0
 8026c8c:	4616      	mov	r6, r2
 8026c8e:	f7ff fc13 	bl	80264b8 <_Balloc>
 8026c92:	4604      	mov	r4, r0
 8026c94:	b930      	cbnz	r0, 8026ca4 <__d2b+0x24>
 8026c96:	4602      	mov	r2, r0
 8026c98:	4b23      	ldr	r3, [pc, #140]	@ (8026d28 <__d2b+0xa8>)
 8026c9a:	4824      	ldr	r0, [pc, #144]	@ (8026d2c <__d2b+0xac>)
 8026c9c:	f240 310f 	movw	r1, #783	@ 0x30f
 8026ca0:	f7fe fdc2 	bl	8025828 <__assert_func>
 8026ca4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8026ca8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8026cac:	b10d      	cbz	r5, 8026cb2 <__d2b+0x32>
 8026cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8026cb2:	9301      	str	r3, [sp, #4]
 8026cb4:	f1b8 0300 	subs.w	r3, r8, #0
 8026cb8:	d023      	beq.n	8026d02 <__d2b+0x82>
 8026cba:	4668      	mov	r0, sp
 8026cbc:	9300      	str	r3, [sp, #0]
 8026cbe:	f7ff fd0c 	bl	80266da <__lo0bits>
 8026cc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8026cc6:	b1d0      	cbz	r0, 8026cfe <__d2b+0x7e>
 8026cc8:	f1c0 0320 	rsb	r3, r0, #32
 8026ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8026cd0:	430b      	orrs	r3, r1
 8026cd2:	40c2      	lsrs	r2, r0
 8026cd4:	6163      	str	r3, [r4, #20]
 8026cd6:	9201      	str	r2, [sp, #4]
 8026cd8:	9b01      	ldr	r3, [sp, #4]
 8026cda:	61a3      	str	r3, [r4, #24]
 8026cdc:	2b00      	cmp	r3, #0
 8026cde:	bf0c      	ite	eq
 8026ce0:	2201      	moveq	r2, #1
 8026ce2:	2202      	movne	r2, #2
 8026ce4:	6122      	str	r2, [r4, #16]
 8026ce6:	b1a5      	cbz	r5, 8026d12 <__d2b+0x92>
 8026ce8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8026cec:	4405      	add	r5, r0
 8026cee:	603d      	str	r5, [r7, #0]
 8026cf0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8026cf4:	6030      	str	r0, [r6, #0]
 8026cf6:	4620      	mov	r0, r4
 8026cf8:	b003      	add	sp, #12
 8026cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026cfe:	6161      	str	r1, [r4, #20]
 8026d00:	e7ea      	b.n	8026cd8 <__d2b+0x58>
 8026d02:	a801      	add	r0, sp, #4
 8026d04:	f7ff fce9 	bl	80266da <__lo0bits>
 8026d08:	9b01      	ldr	r3, [sp, #4]
 8026d0a:	6163      	str	r3, [r4, #20]
 8026d0c:	3020      	adds	r0, #32
 8026d0e:	2201      	movs	r2, #1
 8026d10:	e7e8      	b.n	8026ce4 <__d2b+0x64>
 8026d12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8026d16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8026d1a:	6038      	str	r0, [r7, #0]
 8026d1c:	6918      	ldr	r0, [r3, #16]
 8026d1e:	f7ff fcbd 	bl	802669c <__hi0bits>
 8026d22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8026d26:	e7e5      	b.n	8026cf4 <__d2b+0x74>
 8026d28:	0802d3b8 	.word	0x0802d3b8
 8026d2c:	0802d3c9 	.word	0x0802d3c9

08026d30 <__ratio>:
 8026d30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d34:	4688      	mov	r8, r1
 8026d36:	4669      	mov	r1, sp
 8026d38:	4681      	mov	r9, r0
 8026d3a:	f7ff ff57 	bl	8026bec <__b2d>
 8026d3e:	a901      	add	r1, sp, #4
 8026d40:	4640      	mov	r0, r8
 8026d42:	ec55 4b10 	vmov	r4, r5, d0
 8026d46:	f7ff ff51 	bl	8026bec <__b2d>
 8026d4a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8026d4e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8026d52:	1ad2      	subs	r2, r2, r3
 8026d54:	e9dd 3100 	ldrd	r3, r1, [sp]
 8026d58:	1a5b      	subs	r3, r3, r1
 8026d5a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8026d5e:	ec57 6b10 	vmov	r6, r7, d0
 8026d62:	2b00      	cmp	r3, #0
 8026d64:	bfd6      	itet	le
 8026d66:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8026d6a:	462a      	movgt	r2, r5
 8026d6c:	463a      	movle	r2, r7
 8026d6e:	46ab      	mov	fp, r5
 8026d70:	46a2      	mov	sl, r4
 8026d72:	bfce      	itee	gt
 8026d74:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8026d78:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8026d7c:	ee00 3a90 	vmovle	s1, r3
 8026d80:	ec4b ab17 	vmov	d7, sl, fp
 8026d84:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8026d88:	b003      	add	sp, #12
 8026d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026d8e <__copybits>:
 8026d8e:	3901      	subs	r1, #1
 8026d90:	b570      	push	{r4, r5, r6, lr}
 8026d92:	1149      	asrs	r1, r1, #5
 8026d94:	6914      	ldr	r4, [r2, #16]
 8026d96:	3101      	adds	r1, #1
 8026d98:	f102 0314 	add.w	r3, r2, #20
 8026d9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8026da0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8026da4:	1f05      	subs	r5, r0, #4
 8026da6:	42a3      	cmp	r3, r4
 8026da8:	d30c      	bcc.n	8026dc4 <__copybits+0x36>
 8026daa:	1aa3      	subs	r3, r4, r2
 8026dac:	3b11      	subs	r3, #17
 8026dae:	f023 0303 	bic.w	r3, r3, #3
 8026db2:	3211      	adds	r2, #17
 8026db4:	42a2      	cmp	r2, r4
 8026db6:	bf88      	it	hi
 8026db8:	2300      	movhi	r3, #0
 8026dba:	4418      	add	r0, r3
 8026dbc:	2300      	movs	r3, #0
 8026dbe:	4288      	cmp	r0, r1
 8026dc0:	d305      	bcc.n	8026dce <__copybits+0x40>
 8026dc2:	bd70      	pop	{r4, r5, r6, pc}
 8026dc4:	f853 6b04 	ldr.w	r6, [r3], #4
 8026dc8:	f845 6f04 	str.w	r6, [r5, #4]!
 8026dcc:	e7eb      	b.n	8026da6 <__copybits+0x18>
 8026dce:	f840 3b04 	str.w	r3, [r0], #4
 8026dd2:	e7f4      	b.n	8026dbe <__copybits+0x30>

08026dd4 <__any_on>:
 8026dd4:	f100 0214 	add.w	r2, r0, #20
 8026dd8:	6900      	ldr	r0, [r0, #16]
 8026dda:	114b      	asrs	r3, r1, #5
 8026ddc:	4298      	cmp	r0, r3
 8026dde:	b510      	push	{r4, lr}
 8026de0:	db11      	blt.n	8026e06 <__any_on+0x32>
 8026de2:	dd0a      	ble.n	8026dfa <__any_on+0x26>
 8026de4:	f011 011f 	ands.w	r1, r1, #31
 8026de8:	d007      	beq.n	8026dfa <__any_on+0x26>
 8026dea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8026dee:	fa24 f001 	lsr.w	r0, r4, r1
 8026df2:	fa00 f101 	lsl.w	r1, r0, r1
 8026df6:	428c      	cmp	r4, r1
 8026df8:	d10b      	bne.n	8026e12 <__any_on+0x3e>
 8026dfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026dfe:	4293      	cmp	r3, r2
 8026e00:	d803      	bhi.n	8026e0a <__any_on+0x36>
 8026e02:	2000      	movs	r0, #0
 8026e04:	bd10      	pop	{r4, pc}
 8026e06:	4603      	mov	r3, r0
 8026e08:	e7f7      	b.n	8026dfa <__any_on+0x26>
 8026e0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8026e0e:	2900      	cmp	r1, #0
 8026e10:	d0f5      	beq.n	8026dfe <__any_on+0x2a>
 8026e12:	2001      	movs	r0, #1
 8026e14:	e7f6      	b.n	8026e04 <__any_on+0x30>

08026e16 <sulp>:
 8026e16:	b570      	push	{r4, r5, r6, lr}
 8026e18:	4604      	mov	r4, r0
 8026e1a:	460d      	mov	r5, r1
 8026e1c:	4616      	mov	r6, r2
 8026e1e:	ec45 4b10 	vmov	d0, r4, r5
 8026e22:	f7ff febd 	bl	8026ba0 <__ulp>
 8026e26:	b17e      	cbz	r6, 8026e48 <sulp+0x32>
 8026e28:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8026e2c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8026e30:	2b00      	cmp	r3, #0
 8026e32:	dd09      	ble.n	8026e48 <sulp+0x32>
 8026e34:	051b      	lsls	r3, r3, #20
 8026e36:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8026e3a:	2000      	movs	r0, #0
 8026e3c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8026e40:	ec41 0b17 	vmov	d7, r0, r1
 8026e44:	ee20 0b07 	vmul.f64	d0, d0, d7
 8026e48:	bd70      	pop	{r4, r5, r6, pc}
 8026e4a:	0000      	movs	r0, r0
 8026e4c:	0000      	movs	r0, r0
	...

08026e50 <_strtod_l>:
 8026e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e54:	ed2d 8b0a 	vpush	{d8-d12}
 8026e58:	b097      	sub	sp, #92	@ 0x5c
 8026e5a:	4688      	mov	r8, r1
 8026e5c:	920e      	str	r2, [sp, #56]	@ 0x38
 8026e5e:	2200      	movs	r2, #0
 8026e60:	9212      	str	r2, [sp, #72]	@ 0x48
 8026e62:	9005      	str	r0, [sp, #20]
 8026e64:	f04f 0a00 	mov.w	sl, #0
 8026e68:	f04f 0b00 	mov.w	fp, #0
 8026e6c:	460a      	mov	r2, r1
 8026e6e:	9211      	str	r2, [sp, #68]	@ 0x44
 8026e70:	7811      	ldrb	r1, [r2, #0]
 8026e72:	292b      	cmp	r1, #43	@ 0x2b
 8026e74:	d04c      	beq.n	8026f10 <_strtod_l+0xc0>
 8026e76:	d839      	bhi.n	8026eec <_strtod_l+0x9c>
 8026e78:	290d      	cmp	r1, #13
 8026e7a:	d833      	bhi.n	8026ee4 <_strtod_l+0x94>
 8026e7c:	2908      	cmp	r1, #8
 8026e7e:	d833      	bhi.n	8026ee8 <_strtod_l+0x98>
 8026e80:	2900      	cmp	r1, #0
 8026e82:	d03c      	beq.n	8026efe <_strtod_l+0xae>
 8026e84:	2200      	movs	r2, #0
 8026e86:	9208      	str	r2, [sp, #32]
 8026e88:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8026e8a:	782a      	ldrb	r2, [r5, #0]
 8026e8c:	2a30      	cmp	r2, #48	@ 0x30
 8026e8e:	f040 80b5 	bne.w	8026ffc <_strtod_l+0x1ac>
 8026e92:	786a      	ldrb	r2, [r5, #1]
 8026e94:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8026e98:	2a58      	cmp	r2, #88	@ 0x58
 8026e9a:	d170      	bne.n	8026f7e <_strtod_l+0x12e>
 8026e9c:	9302      	str	r3, [sp, #8]
 8026e9e:	9b08      	ldr	r3, [sp, #32]
 8026ea0:	9301      	str	r3, [sp, #4]
 8026ea2:	ab12      	add	r3, sp, #72	@ 0x48
 8026ea4:	9300      	str	r3, [sp, #0]
 8026ea6:	4a8b      	ldr	r2, [pc, #556]	@ (80270d4 <_strtod_l+0x284>)
 8026ea8:	9805      	ldr	r0, [sp, #20]
 8026eaa:	ab13      	add	r3, sp, #76	@ 0x4c
 8026eac:	a911      	add	r1, sp, #68	@ 0x44
 8026eae:	f001 fd71 	bl	8028994 <__gethex>
 8026eb2:	f010 060f 	ands.w	r6, r0, #15
 8026eb6:	4604      	mov	r4, r0
 8026eb8:	d005      	beq.n	8026ec6 <_strtod_l+0x76>
 8026eba:	2e06      	cmp	r6, #6
 8026ebc:	d12a      	bne.n	8026f14 <_strtod_l+0xc4>
 8026ebe:	3501      	adds	r5, #1
 8026ec0:	2300      	movs	r3, #0
 8026ec2:	9511      	str	r5, [sp, #68]	@ 0x44
 8026ec4:	9308      	str	r3, [sp, #32]
 8026ec6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026ec8:	2b00      	cmp	r3, #0
 8026eca:	f040 852f 	bne.w	802792c <_strtod_l+0xadc>
 8026ece:	9b08      	ldr	r3, [sp, #32]
 8026ed0:	ec4b ab10 	vmov	d0, sl, fp
 8026ed4:	b1cb      	cbz	r3, 8026f0a <_strtod_l+0xba>
 8026ed6:	eeb1 0b40 	vneg.f64	d0, d0
 8026eda:	b017      	add	sp, #92	@ 0x5c
 8026edc:	ecbd 8b0a 	vpop	{d8-d12}
 8026ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026ee4:	2920      	cmp	r1, #32
 8026ee6:	d1cd      	bne.n	8026e84 <_strtod_l+0x34>
 8026ee8:	3201      	adds	r2, #1
 8026eea:	e7c0      	b.n	8026e6e <_strtod_l+0x1e>
 8026eec:	292d      	cmp	r1, #45	@ 0x2d
 8026eee:	d1c9      	bne.n	8026e84 <_strtod_l+0x34>
 8026ef0:	2101      	movs	r1, #1
 8026ef2:	9108      	str	r1, [sp, #32]
 8026ef4:	1c51      	adds	r1, r2, #1
 8026ef6:	9111      	str	r1, [sp, #68]	@ 0x44
 8026ef8:	7852      	ldrb	r2, [r2, #1]
 8026efa:	2a00      	cmp	r2, #0
 8026efc:	d1c4      	bne.n	8026e88 <_strtod_l+0x38>
 8026efe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026f00:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8026f04:	2b00      	cmp	r3, #0
 8026f06:	f040 850f 	bne.w	8027928 <_strtod_l+0xad8>
 8026f0a:	ec4b ab10 	vmov	d0, sl, fp
 8026f0e:	e7e4      	b.n	8026eda <_strtod_l+0x8a>
 8026f10:	2100      	movs	r1, #0
 8026f12:	e7ee      	b.n	8026ef2 <_strtod_l+0xa2>
 8026f14:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026f16:	b13a      	cbz	r2, 8026f28 <_strtod_l+0xd8>
 8026f18:	2135      	movs	r1, #53	@ 0x35
 8026f1a:	a814      	add	r0, sp, #80	@ 0x50
 8026f1c:	f7ff ff37 	bl	8026d8e <__copybits>
 8026f20:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026f22:	9805      	ldr	r0, [sp, #20]
 8026f24:	f7ff fb08 	bl	8026538 <_Bfree>
 8026f28:	1e73      	subs	r3, r6, #1
 8026f2a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8026f2c:	2b04      	cmp	r3, #4
 8026f2e:	d806      	bhi.n	8026f3e <_strtod_l+0xee>
 8026f30:	e8df f003 	tbb	[pc, r3]
 8026f34:	201d0314 	.word	0x201d0314
 8026f38:	14          	.byte	0x14
 8026f39:	00          	.byte	0x00
 8026f3a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8026f3e:	05e3      	lsls	r3, r4, #23
 8026f40:	bf48      	it	mi
 8026f42:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8026f46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8026f4a:	0d1b      	lsrs	r3, r3, #20
 8026f4c:	051b      	lsls	r3, r3, #20
 8026f4e:	2b00      	cmp	r3, #0
 8026f50:	d1b9      	bne.n	8026ec6 <_strtod_l+0x76>
 8026f52:	f7fe fc27 	bl	80257a4 <__errno>
 8026f56:	2322      	movs	r3, #34	@ 0x22
 8026f58:	6003      	str	r3, [r0, #0]
 8026f5a:	e7b4      	b.n	8026ec6 <_strtod_l+0x76>
 8026f5c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8026f60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8026f64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8026f68:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8026f6c:	e7e7      	b.n	8026f3e <_strtod_l+0xee>
 8026f6e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80270dc <_strtod_l+0x28c>
 8026f72:	e7e4      	b.n	8026f3e <_strtod_l+0xee>
 8026f74:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8026f78:	f04f 3aff 	mov.w	sl, #4294967295
 8026f7c:	e7df      	b.n	8026f3e <_strtod_l+0xee>
 8026f7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026f80:	1c5a      	adds	r2, r3, #1
 8026f82:	9211      	str	r2, [sp, #68]	@ 0x44
 8026f84:	785b      	ldrb	r3, [r3, #1]
 8026f86:	2b30      	cmp	r3, #48	@ 0x30
 8026f88:	d0f9      	beq.n	8026f7e <_strtod_l+0x12e>
 8026f8a:	2b00      	cmp	r3, #0
 8026f8c:	d09b      	beq.n	8026ec6 <_strtod_l+0x76>
 8026f8e:	2301      	movs	r3, #1
 8026f90:	2600      	movs	r6, #0
 8026f92:	9307      	str	r3, [sp, #28]
 8026f94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026f96:	930a      	str	r3, [sp, #40]	@ 0x28
 8026f98:	46b1      	mov	r9, r6
 8026f9a:	4635      	mov	r5, r6
 8026f9c:	220a      	movs	r2, #10
 8026f9e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8026fa0:	7804      	ldrb	r4, [r0, #0]
 8026fa2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8026fa6:	b2d9      	uxtb	r1, r3
 8026fa8:	2909      	cmp	r1, #9
 8026faa:	d929      	bls.n	8027000 <_strtod_l+0x1b0>
 8026fac:	494a      	ldr	r1, [pc, #296]	@ (80270d8 <_strtod_l+0x288>)
 8026fae:	2201      	movs	r2, #1
 8026fb0:	f7fe fb8c 	bl	80256cc <strncmp>
 8026fb4:	b378      	cbz	r0, 8027016 <_strtod_l+0x1c6>
 8026fb6:	2000      	movs	r0, #0
 8026fb8:	4622      	mov	r2, r4
 8026fba:	462b      	mov	r3, r5
 8026fbc:	4607      	mov	r7, r0
 8026fbe:	9006      	str	r0, [sp, #24]
 8026fc0:	2a65      	cmp	r2, #101	@ 0x65
 8026fc2:	d001      	beq.n	8026fc8 <_strtod_l+0x178>
 8026fc4:	2a45      	cmp	r2, #69	@ 0x45
 8026fc6:	d117      	bne.n	8026ff8 <_strtod_l+0x1a8>
 8026fc8:	b91b      	cbnz	r3, 8026fd2 <_strtod_l+0x182>
 8026fca:	9b07      	ldr	r3, [sp, #28]
 8026fcc:	4303      	orrs	r3, r0
 8026fce:	d096      	beq.n	8026efe <_strtod_l+0xae>
 8026fd0:	2300      	movs	r3, #0
 8026fd2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8026fd6:	f108 0201 	add.w	r2, r8, #1
 8026fda:	9211      	str	r2, [sp, #68]	@ 0x44
 8026fdc:	f898 2001 	ldrb.w	r2, [r8, #1]
 8026fe0:	2a2b      	cmp	r2, #43	@ 0x2b
 8026fe2:	d06b      	beq.n	80270bc <_strtod_l+0x26c>
 8026fe4:	2a2d      	cmp	r2, #45	@ 0x2d
 8026fe6:	d071      	beq.n	80270cc <_strtod_l+0x27c>
 8026fe8:	f04f 0e00 	mov.w	lr, #0
 8026fec:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8026ff0:	2c09      	cmp	r4, #9
 8026ff2:	d979      	bls.n	80270e8 <_strtod_l+0x298>
 8026ff4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8026ff8:	2400      	movs	r4, #0
 8026ffa:	e094      	b.n	8027126 <_strtod_l+0x2d6>
 8026ffc:	2300      	movs	r3, #0
 8026ffe:	e7c7      	b.n	8026f90 <_strtod_l+0x140>
 8027000:	2d08      	cmp	r5, #8
 8027002:	f100 0001 	add.w	r0, r0, #1
 8027006:	bfd4      	ite	le
 8027008:	fb02 3909 	mlale	r9, r2, r9, r3
 802700c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8027010:	3501      	adds	r5, #1
 8027012:	9011      	str	r0, [sp, #68]	@ 0x44
 8027014:	e7c3      	b.n	8026f9e <_strtod_l+0x14e>
 8027016:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027018:	1c5a      	adds	r2, r3, #1
 802701a:	9211      	str	r2, [sp, #68]	@ 0x44
 802701c:	785a      	ldrb	r2, [r3, #1]
 802701e:	b375      	cbz	r5, 802707e <_strtod_l+0x22e>
 8027020:	4607      	mov	r7, r0
 8027022:	462b      	mov	r3, r5
 8027024:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8027028:	2909      	cmp	r1, #9
 802702a:	d913      	bls.n	8027054 <_strtod_l+0x204>
 802702c:	2101      	movs	r1, #1
 802702e:	9106      	str	r1, [sp, #24]
 8027030:	e7c6      	b.n	8026fc0 <_strtod_l+0x170>
 8027032:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027034:	1c5a      	adds	r2, r3, #1
 8027036:	9211      	str	r2, [sp, #68]	@ 0x44
 8027038:	785a      	ldrb	r2, [r3, #1]
 802703a:	3001      	adds	r0, #1
 802703c:	2a30      	cmp	r2, #48	@ 0x30
 802703e:	d0f8      	beq.n	8027032 <_strtod_l+0x1e2>
 8027040:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8027044:	2b08      	cmp	r3, #8
 8027046:	f200 8476 	bhi.w	8027936 <_strtod_l+0xae6>
 802704a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802704c:	930a      	str	r3, [sp, #40]	@ 0x28
 802704e:	4607      	mov	r7, r0
 8027050:	2000      	movs	r0, #0
 8027052:	4603      	mov	r3, r0
 8027054:	3a30      	subs	r2, #48	@ 0x30
 8027056:	f100 0101 	add.w	r1, r0, #1
 802705a:	d023      	beq.n	80270a4 <_strtod_l+0x254>
 802705c:	440f      	add	r7, r1
 802705e:	eb00 0c03 	add.w	ip, r0, r3
 8027062:	4619      	mov	r1, r3
 8027064:	240a      	movs	r4, #10
 8027066:	4561      	cmp	r1, ip
 8027068:	d10b      	bne.n	8027082 <_strtod_l+0x232>
 802706a:	1c5c      	adds	r4, r3, #1
 802706c:	4403      	add	r3, r0
 802706e:	2b08      	cmp	r3, #8
 8027070:	4404      	add	r4, r0
 8027072:	dc11      	bgt.n	8027098 <_strtod_l+0x248>
 8027074:	230a      	movs	r3, #10
 8027076:	fb03 2909 	mla	r9, r3, r9, r2
 802707a:	2100      	movs	r1, #0
 802707c:	e013      	b.n	80270a6 <_strtod_l+0x256>
 802707e:	4628      	mov	r0, r5
 8027080:	e7dc      	b.n	802703c <_strtod_l+0x1ec>
 8027082:	2908      	cmp	r1, #8
 8027084:	f101 0101 	add.w	r1, r1, #1
 8027088:	dc02      	bgt.n	8027090 <_strtod_l+0x240>
 802708a:	fb04 f909 	mul.w	r9, r4, r9
 802708e:	e7ea      	b.n	8027066 <_strtod_l+0x216>
 8027090:	2910      	cmp	r1, #16
 8027092:	bfd8      	it	le
 8027094:	4366      	mulle	r6, r4
 8027096:	e7e6      	b.n	8027066 <_strtod_l+0x216>
 8027098:	2b0f      	cmp	r3, #15
 802709a:	dcee      	bgt.n	802707a <_strtod_l+0x22a>
 802709c:	230a      	movs	r3, #10
 802709e:	fb03 2606 	mla	r6, r3, r6, r2
 80270a2:	e7ea      	b.n	802707a <_strtod_l+0x22a>
 80270a4:	461c      	mov	r4, r3
 80270a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80270a8:	1c5a      	adds	r2, r3, #1
 80270aa:	9211      	str	r2, [sp, #68]	@ 0x44
 80270ac:	785a      	ldrb	r2, [r3, #1]
 80270ae:	4608      	mov	r0, r1
 80270b0:	4623      	mov	r3, r4
 80270b2:	e7b7      	b.n	8027024 <_strtod_l+0x1d4>
 80270b4:	2301      	movs	r3, #1
 80270b6:	2700      	movs	r7, #0
 80270b8:	9306      	str	r3, [sp, #24]
 80270ba:	e786      	b.n	8026fca <_strtod_l+0x17a>
 80270bc:	f04f 0e00 	mov.w	lr, #0
 80270c0:	f108 0202 	add.w	r2, r8, #2
 80270c4:	9211      	str	r2, [sp, #68]	@ 0x44
 80270c6:	f898 2002 	ldrb.w	r2, [r8, #2]
 80270ca:	e78f      	b.n	8026fec <_strtod_l+0x19c>
 80270cc:	f04f 0e01 	mov.w	lr, #1
 80270d0:	e7f6      	b.n	80270c0 <_strtod_l+0x270>
 80270d2:	bf00      	nop
 80270d4:	0802d538 	.word	0x0802d538
 80270d8:	0802d520 	.word	0x0802d520
 80270dc:	7ff00000 	.word	0x7ff00000
 80270e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80270e2:	1c54      	adds	r4, r2, #1
 80270e4:	9411      	str	r4, [sp, #68]	@ 0x44
 80270e6:	7852      	ldrb	r2, [r2, #1]
 80270e8:	2a30      	cmp	r2, #48	@ 0x30
 80270ea:	d0f9      	beq.n	80270e0 <_strtod_l+0x290>
 80270ec:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80270f0:	2c08      	cmp	r4, #8
 80270f2:	d881      	bhi.n	8026ff8 <_strtod_l+0x1a8>
 80270f4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80270f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80270fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80270fc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80270fe:	1c51      	adds	r1, r2, #1
 8027100:	9111      	str	r1, [sp, #68]	@ 0x44
 8027102:	7852      	ldrb	r2, [r2, #1]
 8027104:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8027108:	2c09      	cmp	r4, #9
 802710a:	d938      	bls.n	802717e <_strtod_l+0x32e>
 802710c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802710e:	1b0c      	subs	r4, r1, r4
 8027110:	2c08      	cmp	r4, #8
 8027112:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8027116:	dc02      	bgt.n	802711e <_strtod_l+0x2ce>
 8027118:	4564      	cmp	r4, ip
 802711a:	bfa8      	it	ge
 802711c:	4664      	movge	r4, ip
 802711e:	f1be 0f00 	cmp.w	lr, #0
 8027122:	d000      	beq.n	8027126 <_strtod_l+0x2d6>
 8027124:	4264      	negs	r4, r4
 8027126:	2b00      	cmp	r3, #0
 8027128:	d14e      	bne.n	80271c8 <_strtod_l+0x378>
 802712a:	9b07      	ldr	r3, [sp, #28]
 802712c:	4318      	orrs	r0, r3
 802712e:	f47f aeca 	bne.w	8026ec6 <_strtod_l+0x76>
 8027132:	9b06      	ldr	r3, [sp, #24]
 8027134:	2b00      	cmp	r3, #0
 8027136:	f47f aee2 	bne.w	8026efe <_strtod_l+0xae>
 802713a:	2a69      	cmp	r2, #105	@ 0x69
 802713c:	d027      	beq.n	802718e <_strtod_l+0x33e>
 802713e:	dc24      	bgt.n	802718a <_strtod_l+0x33a>
 8027140:	2a49      	cmp	r2, #73	@ 0x49
 8027142:	d024      	beq.n	802718e <_strtod_l+0x33e>
 8027144:	2a4e      	cmp	r2, #78	@ 0x4e
 8027146:	f47f aeda 	bne.w	8026efe <_strtod_l+0xae>
 802714a:	4997      	ldr	r1, [pc, #604]	@ (80273a8 <_strtod_l+0x558>)
 802714c:	a811      	add	r0, sp, #68	@ 0x44
 802714e:	f001 fe43 	bl	8028dd8 <__match>
 8027152:	2800      	cmp	r0, #0
 8027154:	f43f aed3 	beq.w	8026efe <_strtod_l+0xae>
 8027158:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802715a:	781b      	ldrb	r3, [r3, #0]
 802715c:	2b28      	cmp	r3, #40	@ 0x28
 802715e:	d12d      	bne.n	80271bc <_strtod_l+0x36c>
 8027160:	4992      	ldr	r1, [pc, #584]	@ (80273ac <_strtod_l+0x55c>)
 8027162:	aa14      	add	r2, sp, #80	@ 0x50
 8027164:	a811      	add	r0, sp, #68	@ 0x44
 8027166:	f001 fe4b 	bl	8028e00 <__hexnan>
 802716a:	2805      	cmp	r0, #5
 802716c:	d126      	bne.n	80271bc <_strtod_l+0x36c>
 802716e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8027170:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8027174:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8027178:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 802717c:	e6a3      	b.n	8026ec6 <_strtod_l+0x76>
 802717e:	240a      	movs	r4, #10
 8027180:	fb04 2c0c 	mla	ip, r4, ip, r2
 8027184:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8027188:	e7b8      	b.n	80270fc <_strtod_l+0x2ac>
 802718a:	2a6e      	cmp	r2, #110	@ 0x6e
 802718c:	e7db      	b.n	8027146 <_strtod_l+0x2f6>
 802718e:	4988      	ldr	r1, [pc, #544]	@ (80273b0 <_strtod_l+0x560>)
 8027190:	a811      	add	r0, sp, #68	@ 0x44
 8027192:	f001 fe21 	bl	8028dd8 <__match>
 8027196:	2800      	cmp	r0, #0
 8027198:	f43f aeb1 	beq.w	8026efe <_strtod_l+0xae>
 802719c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802719e:	4985      	ldr	r1, [pc, #532]	@ (80273b4 <_strtod_l+0x564>)
 80271a0:	3b01      	subs	r3, #1
 80271a2:	a811      	add	r0, sp, #68	@ 0x44
 80271a4:	9311      	str	r3, [sp, #68]	@ 0x44
 80271a6:	f001 fe17 	bl	8028dd8 <__match>
 80271aa:	b910      	cbnz	r0, 80271b2 <_strtod_l+0x362>
 80271ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80271ae:	3301      	adds	r3, #1
 80271b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80271b2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80273c8 <_strtod_l+0x578>
 80271b6:	f04f 0a00 	mov.w	sl, #0
 80271ba:	e684      	b.n	8026ec6 <_strtod_l+0x76>
 80271bc:	487e      	ldr	r0, [pc, #504]	@ (80273b8 <_strtod_l+0x568>)
 80271be:	f001 fb5f 	bl	8028880 <nan>
 80271c2:	ec5b ab10 	vmov	sl, fp, d0
 80271c6:	e67e      	b.n	8026ec6 <_strtod_l+0x76>
 80271c8:	ee07 9a90 	vmov	s15, r9
 80271cc:	1be2      	subs	r2, r4, r7
 80271ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80271d2:	2d00      	cmp	r5, #0
 80271d4:	bf08      	it	eq
 80271d6:	461d      	moveq	r5, r3
 80271d8:	2b10      	cmp	r3, #16
 80271da:	9209      	str	r2, [sp, #36]	@ 0x24
 80271dc:	461a      	mov	r2, r3
 80271de:	bfa8      	it	ge
 80271e0:	2210      	movge	r2, #16
 80271e2:	2b09      	cmp	r3, #9
 80271e4:	ec5b ab17 	vmov	sl, fp, d7
 80271e8:	dc15      	bgt.n	8027216 <_strtod_l+0x3c6>
 80271ea:	1be1      	subs	r1, r4, r7
 80271ec:	2900      	cmp	r1, #0
 80271ee:	f43f ae6a 	beq.w	8026ec6 <_strtod_l+0x76>
 80271f2:	eba4 0107 	sub.w	r1, r4, r7
 80271f6:	dd72      	ble.n	80272de <_strtod_l+0x48e>
 80271f8:	2916      	cmp	r1, #22
 80271fa:	dc59      	bgt.n	80272b0 <_strtod_l+0x460>
 80271fc:	4b6f      	ldr	r3, [pc, #444]	@ (80273bc <_strtod_l+0x56c>)
 80271fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8027204:	ed93 7b00 	vldr	d7, [r3]
 8027208:	ec4b ab16 	vmov	d6, sl, fp
 802720c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027210:	ec5b ab17 	vmov	sl, fp, d7
 8027214:	e657      	b.n	8026ec6 <_strtod_l+0x76>
 8027216:	4969      	ldr	r1, [pc, #420]	@ (80273bc <_strtod_l+0x56c>)
 8027218:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802721c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8027220:	ee06 6a90 	vmov	s13, r6
 8027224:	2b0f      	cmp	r3, #15
 8027226:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 802722a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802722e:	ec5b ab16 	vmov	sl, fp, d6
 8027232:	ddda      	ble.n	80271ea <_strtod_l+0x39a>
 8027234:	1a9a      	subs	r2, r3, r2
 8027236:	1be1      	subs	r1, r4, r7
 8027238:	440a      	add	r2, r1
 802723a:	2a00      	cmp	r2, #0
 802723c:	f340 8094 	ble.w	8027368 <_strtod_l+0x518>
 8027240:	f012 000f 	ands.w	r0, r2, #15
 8027244:	d00a      	beq.n	802725c <_strtod_l+0x40c>
 8027246:	495d      	ldr	r1, [pc, #372]	@ (80273bc <_strtod_l+0x56c>)
 8027248:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 802724c:	ed91 7b00 	vldr	d7, [r1]
 8027250:	ec4b ab16 	vmov	d6, sl, fp
 8027254:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027258:	ec5b ab17 	vmov	sl, fp, d7
 802725c:	f032 020f 	bics.w	r2, r2, #15
 8027260:	d073      	beq.n	802734a <_strtod_l+0x4fa>
 8027262:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8027266:	dd47      	ble.n	80272f8 <_strtod_l+0x4a8>
 8027268:	2400      	movs	r4, #0
 802726a:	4625      	mov	r5, r4
 802726c:	9407      	str	r4, [sp, #28]
 802726e:	4626      	mov	r6, r4
 8027270:	9a05      	ldr	r2, [sp, #20]
 8027272:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80273c8 <_strtod_l+0x578>
 8027276:	2322      	movs	r3, #34	@ 0x22
 8027278:	6013      	str	r3, [r2, #0]
 802727a:	f04f 0a00 	mov.w	sl, #0
 802727e:	9b07      	ldr	r3, [sp, #28]
 8027280:	2b00      	cmp	r3, #0
 8027282:	f43f ae20 	beq.w	8026ec6 <_strtod_l+0x76>
 8027286:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027288:	9805      	ldr	r0, [sp, #20]
 802728a:	f7ff f955 	bl	8026538 <_Bfree>
 802728e:	9805      	ldr	r0, [sp, #20]
 8027290:	4631      	mov	r1, r6
 8027292:	f7ff f951 	bl	8026538 <_Bfree>
 8027296:	9805      	ldr	r0, [sp, #20]
 8027298:	4629      	mov	r1, r5
 802729a:	f7ff f94d 	bl	8026538 <_Bfree>
 802729e:	9907      	ldr	r1, [sp, #28]
 80272a0:	9805      	ldr	r0, [sp, #20]
 80272a2:	f7ff f949 	bl	8026538 <_Bfree>
 80272a6:	9805      	ldr	r0, [sp, #20]
 80272a8:	4621      	mov	r1, r4
 80272aa:	f7ff f945 	bl	8026538 <_Bfree>
 80272ae:	e60a      	b.n	8026ec6 <_strtod_l+0x76>
 80272b0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80272b4:	1be0      	subs	r0, r4, r7
 80272b6:	4281      	cmp	r1, r0
 80272b8:	dbbc      	blt.n	8027234 <_strtod_l+0x3e4>
 80272ba:	4a40      	ldr	r2, [pc, #256]	@ (80273bc <_strtod_l+0x56c>)
 80272bc:	f1c3 030f 	rsb	r3, r3, #15
 80272c0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80272c4:	ed91 7b00 	vldr	d7, [r1]
 80272c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80272ca:	ec4b ab16 	vmov	d6, sl, fp
 80272ce:	1acb      	subs	r3, r1, r3
 80272d0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80272d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80272d8:	ed92 6b00 	vldr	d6, [r2]
 80272dc:	e796      	b.n	802720c <_strtod_l+0x3bc>
 80272de:	3116      	adds	r1, #22
 80272e0:	dba8      	blt.n	8027234 <_strtod_l+0x3e4>
 80272e2:	4b36      	ldr	r3, [pc, #216]	@ (80273bc <_strtod_l+0x56c>)
 80272e4:	1b3c      	subs	r4, r7, r4
 80272e6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80272ea:	ed94 7b00 	vldr	d7, [r4]
 80272ee:	ec4b ab16 	vmov	d6, sl, fp
 80272f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80272f6:	e78b      	b.n	8027210 <_strtod_l+0x3c0>
 80272f8:	2000      	movs	r0, #0
 80272fa:	ec4b ab17 	vmov	d7, sl, fp
 80272fe:	4e30      	ldr	r6, [pc, #192]	@ (80273c0 <_strtod_l+0x570>)
 8027300:	1112      	asrs	r2, r2, #4
 8027302:	4601      	mov	r1, r0
 8027304:	2a01      	cmp	r2, #1
 8027306:	dc23      	bgt.n	8027350 <_strtod_l+0x500>
 8027308:	b108      	cbz	r0, 802730e <_strtod_l+0x4be>
 802730a:	ec5b ab17 	vmov	sl, fp, d7
 802730e:	4a2c      	ldr	r2, [pc, #176]	@ (80273c0 <_strtod_l+0x570>)
 8027310:	482c      	ldr	r0, [pc, #176]	@ (80273c4 <_strtod_l+0x574>)
 8027312:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8027316:	ed92 7b00 	vldr	d7, [r2]
 802731a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 802731e:	ec4b ab16 	vmov	d6, sl, fp
 8027322:	4a29      	ldr	r2, [pc, #164]	@ (80273c8 <_strtod_l+0x578>)
 8027324:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027328:	ee17 1a90 	vmov	r1, s15
 802732c:	400a      	ands	r2, r1
 802732e:	4282      	cmp	r2, r0
 8027330:	ec5b ab17 	vmov	sl, fp, d7
 8027334:	d898      	bhi.n	8027268 <_strtod_l+0x418>
 8027336:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 802733a:	4282      	cmp	r2, r0
 802733c:	bf86      	itte	hi
 802733e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80273cc <_strtod_l+0x57c>
 8027342:	f04f 3aff 	movhi.w	sl, #4294967295
 8027346:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 802734a:	2200      	movs	r2, #0
 802734c:	9206      	str	r2, [sp, #24]
 802734e:	e076      	b.n	802743e <_strtod_l+0x5ee>
 8027350:	f012 0f01 	tst.w	r2, #1
 8027354:	d004      	beq.n	8027360 <_strtod_l+0x510>
 8027356:	ed96 6b00 	vldr	d6, [r6]
 802735a:	2001      	movs	r0, #1
 802735c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027360:	3101      	adds	r1, #1
 8027362:	1052      	asrs	r2, r2, #1
 8027364:	3608      	adds	r6, #8
 8027366:	e7cd      	b.n	8027304 <_strtod_l+0x4b4>
 8027368:	d0ef      	beq.n	802734a <_strtod_l+0x4fa>
 802736a:	4252      	negs	r2, r2
 802736c:	f012 000f 	ands.w	r0, r2, #15
 8027370:	d00a      	beq.n	8027388 <_strtod_l+0x538>
 8027372:	4912      	ldr	r1, [pc, #72]	@ (80273bc <_strtod_l+0x56c>)
 8027374:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8027378:	ed91 7b00 	vldr	d7, [r1]
 802737c:	ec4b ab16 	vmov	d6, sl, fp
 8027380:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8027384:	ec5b ab17 	vmov	sl, fp, d7
 8027388:	1112      	asrs	r2, r2, #4
 802738a:	d0de      	beq.n	802734a <_strtod_l+0x4fa>
 802738c:	2a1f      	cmp	r2, #31
 802738e:	dd1f      	ble.n	80273d0 <_strtod_l+0x580>
 8027390:	2400      	movs	r4, #0
 8027392:	4625      	mov	r5, r4
 8027394:	9407      	str	r4, [sp, #28]
 8027396:	4626      	mov	r6, r4
 8027398:	9a05      	ldr	r2, [sp, #20]
 802739a:	2322      	movs	r3, #34	@ 0x22
 802739c:	f04f 0a00 	mov.w	sl, #0
 80273a0:	f04f 0b00 	mov.w	fp, #0
 80273a4:	6013      	str	r3, [r2, #0]
 80273a6:	e76a      	b.n	802727e <_strtod_l+0x42e>
 80273a8:	0802d2ed 	.word	0x0802d2ed
 80273ac:	0802d524 	.word	0x0802d524
 80273b0:	0802d2e5 	.word	0x0802d2e5
 80273b4:	0802d356 	.word	0x0802d356
 80273b8:	0802d352 	.word	0x0802d352
 80273bc:	0802d458 	.word	0x0802d458
 80273c0:	0802d430 	.word	0x0802d430
 80273c4:	7ca00000 	.word	0x7ca00000
 80273c8:	7ff00000 	.word	0x7ff00000
 80273cc:	7fefffff 	.word	0x7fefffff
 80273d0:	f012 0110 	ands.w	r1, r2, #16
 80273d4:	bf18      	it	ne
 80273d6:	216a      	movne	r1, #106	@ 0x6a
 80273d8:	9106      	str	r1, [sp, #24]
 80273da:	ec4b ab17 	vmov	d7, sl, fp
 80273de:	49b0      	ldr	r1, [pc, #704]	@ (80276a0 <_strtod_l+0x850>)
 80273e0:	2000      	movs	r0, #0
 80273e2:	07d6      	lsls	r6, r2, #31
 80273e4:	d504      	bpl.n	80273f0 <_strtod_l+0x5a0>
 80273e6:	ed91 6b00 	vldr	d6, [r1]
 80273ea:	2001      	movs	r0, #1
 80273ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80273f0:	1052      	asrs	r2, r2, #1
 80273f2:	f101 0108 	add.w	r1, r1, #8
 80273f6:	d1f4      	bne.n	80273e2 <_strtod_l+0x592>
 80273f8:	b108      	cbz	r0, 80273fe <_strtod_l+0x5ae>
 80273fa:	ec5b ab17 	vmov	sl, fp, d7
 80273fe:	9a06      	ldr	r2, [sp, #24]
 8027400:	b1b2      	cbz	r2, 8027430 <_strtod_l+0x5e0>
 8027402:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8027406:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 802740a:	2a00      	cmp	r2, #0
 802740c:	4658      	mov	r0, fp
 802740e:	dd0f      	ble.n	8027430 <_strtod_l+0x5e0>
 8027410:	2a1f      	cmp	r2, #31
 8027412:	dd55      	ble.n	80274c0 <_strtod_l+0x670>
 8027414:	2a34      	cmp	r2, #52	@ 0x34
 8027416:	bfde      	ittt	le
 8027418:	f04f 32ff 	movle.w	r2, #4294967295
 802741c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8027420:	408a      	lslle	r2, r1
 8027422:	f04f 0a00 	mov.w	sl, #0
 8027426:	bfcc      	ite	gt
 8027428:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 802742c:	ea02 0b00 	andle.w	fp, r2, r0
 8027430:	ec4b ab17 	vmov	d7, sl, fp
 8027434:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8027438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802743c:	d0a8      	beq.n	8027390 <_strtod_l+0x540>
 802743e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8027440:	9805      	ldr	r0, [sp, #20]
 8027442:	f8cd 9000 	str.w	r9, [sp]
 8027446:	462a      	mov	r2, r5
 8027448:	f7ff f8de 	bl	8026608 <__s2b>
 802744c:	9007      	str	r0, [sp, #28]
 802744e:	2800      	cmp	r0, #0
 8027450:	f43f af0a 	beq.w	8027268 <_strtod_l+0x418>
 8027454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027456:	1b3f      	subs	r7, r7, r4
 8027458:	2b00      	cmp	r3, #0
 802745a:	bfb4      	ite	lt
 802745c:	463b      	movlt	r3, r7
 802745e:	2300      	movge	r3, #0
 8027460:	930a      	str	r3, [sp, #40]	@ 0x28
 8027462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027464:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8027690 <_strtod_l+0x840>
 8027468:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802746c:	2400      	movs	r4, #0
 802746e:	930d      	str	r3, [sp, #52]	@ 0x34
 8027470:	4625      	mov	r5, r4
 8027472:	9b07      	ldr	r3, [sp, #28]
 8027474:	9805      	ldr	r0, [sp, #20]
 8027476:	6859      	ldr	r1, [r3, #4]
 8027478:	f7ff f81e 	bl	80264b8 <_Balloc>
 802747c:	4606      	mov	r6, r0
 802747e:	2800      	cmp	r0, #0
 8027480:	f43f aef6 	beq.w	8027270 <_strtod_l+0x420>
 8027484:	9b07      	ldr	r3, [sp, #28]
 8027486:	691a      	ldr	r2, [r3, #16]
 8027488:	ec4b ab19 	vmov	d9, sl, fp
 802748c:	3202      	adds	r2, #2
 802748e:	f103 010c 	add.w	r1, r3, #12
 8027492:	0092      	lsls	r2, r2, #2
 8027494:	300c      	adds	r0, #12
 8027496:	f7fe f9b2 	bl	80257fe <memcpy>
 802749a:	eeb0 0b49 	vmov.f64	d0, d9
 802749e:	9805      	ldr	r0, [sp, #20]
 80274a0:	aa14      	add	r2, sp, #80	@ 0x50
 80274a2:	a913      	add	r1, sp, #76	@ 0x4c
 80274a4:	f7ff fbec 	bl	8026c80 <__d2b>
 80274a8:	9012      	str	r0, [sp, #72]	@ 0x48
 80274aa:	2800      	cmp	r0, #0
 80274ac:	f43f aee0 	beq.w	8027270 <_strtod_l+0x420>
 80274b0:	9805      	ldr	r0, [sp, #20]
 80274b2:	2101      	movs	r1, #1
 80274b4:	f7ff f93e 	bl	8026734 <__i2b>
 80274b8:	4605      	mov	r5, r0
 80274ba:	b940      	cbnz	r0, 80274ce <_strtod_l+0x67e>
 80274bc:	2500      	movs	r5, #0
 80274be:	e6d7      	b.n	8027270 <_strtod_l+0x420>
 80274c0:	f04f 31ff 	mov.w	r1, #4294967295
 80274c4:	fa01 f202 	lsl.w	r2, r1, r2
 80274c8:	ea02 0a0a 	and.w	sl, r2, sl
 80274cc:	e7b0      	b.n	8027430 <_strtod_l+0x5e0>
 80274ce:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80274d0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80274d2:	2f00      	cmp	r7, #0
 80274d4:	bfab      	itete	ge
 80274d6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80274d8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80274da:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80274de:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80274e2:	bfac      	ite	ge
 80274e4:	eb07 0903 	addge.w	r9, r7, r3
 80274e8:	eba3 0807 	sublt.w	r8, r3, r7
 80274ec:	9b06      	ldr	r3, [sp, #24]
 80274ee:	1aff      	subs	r7, r7, r3
 80274f0:	4417      	add	r7, r2
 80274f2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80274f6:	4a6b      	ldr	r2, [pc, #428]	@ (80276a4 <_strtod_l+0x854>)
 80274f8:	3f01      	subs	r7, #1
 80274fa:	4297      	cmp	r7, r2
 80274fc:	da51      	bge.n	80275a2 <_strtod_l+0x752>
 80274fe:	1bd1      	subs	r1, r2, r7
 8027500:	291f      	cmp	r1, #31
 8027502:	eba3 0301 	sub.w	r3, r3, r1
 8027506:	f04f 0201 	mov.w	r2, #1
 802750a:	dc3e      	bgt.n	802758a <_strtod_l+0x73a>
 802750c:	408a      	lsls	r2, r1
 802750e:	920c      	str	r2, [sp, #48]	@ 0x30
 8027510:	2200      	movs	r2, #0
 8027512:	920b      	str	r2, [sp, #44]	@ 0x2c
 8027514:	eb09 0703 	add.w	r7, r9, r3
 8027518:	4498      	add	r8, r3
 802751a:	9b06      	ldr	r3, [sp, #24]
 802751c:	45b9      	cmp	r9, r7
 802751e:	4498      	add	r8, r3
 8027520:	464b      	mov	r3, r9
 8027522:	bfa8      	it	ge
 8027524:	463b      	movge	r3, r7
 8027526:	4543      	cmp	r3, r8
 8027528:	bfa8      	it	ge
 802752a:	4643      	movge	r3, r8
 802752c:	2b00      	cmp	r3, #0
 802752e:	bfc2      	ittt	gt
 8027530:	1aff      	subgt	r7, r7, r3
 8027532:	eba8 0803 	subgt.w	r8, r8, r3
 8027536:	eba9 0903 	subgt.w	r9, r9, r3
 802753a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802753c:	2b00      	cmp	r3, #0
 802753e:	dd16      	ble.n	802756e <_strtod_l+0x71e>
 8027540:	4629      	mov	r1, r5
 8027542:	9805      	ldr	r0, [sp, #20]
 8027544:	461a      	mov	r2, r3
 8027546:	f7ff f9b5 	bl	80268b4 <__pow5mult>
 802754a:	4605      	mov	r5, r0
 802754c:	2800      	cmp	r0, #0
 802754e:	d0b5      	beq.n	80274bc <_strtod_l+0x66c>
 8027550:	4601      	mov	r1, r0
 8027552:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8027554:	9805      	ldr	r0, [sp, #20]
 8027556:	f7ff f903 	bl	8026760 <__multiply>
 802755a:	900f      	str	r0, [sp, #60]	@ 0x3c
 802755c:	2800      	cmp	r0, #0
 802755e:	f43f ae87 	beq.w	8027270 <_strtod_l+0x420>
 8027562:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027564:	9805      	ldr	r0, [sp, #20]
 8027566:	f7fe ffe7 	bl	8026538 <_Bfree>
 802756a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802756c:	9312      	str	r3, [sp, #72]	@ 0x48
 802756e:	2f00      	cmp	r7, #0
 8027570:	dc1b      	bgt.n	80275aa <_strtod_l+0x75a>
 8027572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027574:	2b00      	cmp	r3, #0
 8027576:	dd21      	ble.n	80275bc <_strtod_l+0x76c>
 8027578:	4631      	mov	r1, r6
 802757a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802757c:	9805      	ldr	r0, [sp, #20]
 802757e:	f7ff f999 	bl	80268b4 <__pow5mult>
 8027582:	4606      	mov	r6, r0
 8027584:	b9d0      	cbnz	r0, 80275bc <_strtod_l+0x76c>
 8027586:	2600      	movs	r6, #0
 8027588:	e672      	b.n	8027270 <_strtod_l+0x420>
 802758a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 802758e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8027592:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8027596:	37e2      	adds	r7, #226	@ 0xe2
 8027598:	fa02 f107 	lsl.w	r1, r2, r7
 802759c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802759e:	920c      	str	r2, [sp, #48]	@ 0x30
 80275a0:	e7b8      	b.n	8027514 <_strtod_l+0x6c4>
 80275a2:	2200      	movs	r2, #0
 80275a4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80275a6:	2201      	movs	r2, #1
 80275a8:	e7f9      	b.n	802759e <_strtod_l+0x74e>
 80275aa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80275ac:	9805      	ldr	r0, [sp, #20]
 80275ae:	463a      	mov	r2, r7
 80275b0:	f7ff f9da 	bl	8026968 <__lshift>
 80275b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80275b6:	2800      	cmp	r0, #0
 80275b8:	d1db      	bne.n	8027572 <_strtod_l+0x722>
 80275ba:	e659      	b.n	8027270 <_strtod_l+0x420>
 80275bc:	f1b8 0f00 	cmp.w	r8, #0
 80275c0:	dd07      	ble.n	80275d2 <_strtod_l+0x782>
 80275c2:	4631      	mov	r1, r6
 80275c4:	9805      	ldr	r0, [sp, #20]
 80275c6:	4642      	mov	r2, r8
 80275c8:	f7ff f9ce 	bl	8026968 <__lshift>
 80275cc:	4606      	mov	r6, r0
 80275ce:	2800      	cmp	r0, #0
 80275d0:	d0d9      	beq.n	8027586 <_strtod_l+0x736>
 80275d2:	f1b9 0f00 	cmp.w	r9, #0
 80275d6:	dd08      	ble.n	80275ea <_strtod_l+0x79a>
 80275d8:	4629      	mov	r1, r5
 80275da:	9805      	ldr	r0, [sp, #20]
 80275dc:	464a      	mov	r2, r9
 80275de:	f7ff f9c3 	bl	8026968 <__lshift>
 80275e2:	4605      	mov	r5, r0
 80275e4:	2800      	cmp	r0, #0
 80275e6:	f43f ae43 	beq.w	8027270 <_strtod_l+0x420>
 80275ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80275ec:	9805      	ldr	r0, [sp, #20]
 80275ee:	4632      	mov	r2, r6
 80275f0:	f7ff fa42 	bl	8026a78 <__mdiff>
 80275f4:	4604      	mov	r4, r0
 80275f6:	2800      	cmp	r0, #0
 80275f8:	f43f ae3a 	beq.w	8027270 <_strtod_l+0x420>
 80275fc:	2300      	movs	r3, #0
 80275fe:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8027602:	60c3      	str	r3, [r0, #12]
 8027604:	4629      	mov	r1, r5
 8027606:	f7ff fa1b 	bl	8026a40 <__mcmp>
 802760a:	2800      	cmp	r0, #0
 802760c:	da4e      	bge.n	80276ac <_strtod_l+0x85c>
 802760e:	ea58 080a 	orrs.w	r8, r8, sl
 8027612:	d174      	bne.n	80276fe <_strtod_l+0x8ae>
 8027614:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8027618:	2b00      	cmp	r3, #0
 802761a:	d170      	bne.n	80276fe <_strtod_l+0x8ae>
 802761c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8027620:	0d1b      	lsrs	r3, r3, #20
 8027622:	051b      	lsls	r3, r3, #20
 8027624:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8027628:	d969      	bls.n	80276fe <_strtod_l+0x8ae>
 802762a:	6963      	ldr	r3, [r4, #20]
 802762c:	b913      	cbnz	r3, 8027634 <_strtod_l+0x7e4>
 802762e:	6923      	ldr	r3, [r4, #16]
 8027630:	2b01      	cmp	r3, #1
 8027632:	dd64      	ble.n	80276fe <_strtod_l+0x8ae>
 8027634:	4621      	mov	r1, r4
 8027636:	2201      	movs	r2, #1
 8027638:	9805      	ldr	r0, [sp, #20]
 802763a:	f7ff f995 	bl	8026968 <__lshift>
 802763e:	4629      	mov	r1, r5
 8027640:	4604      	mov	r4, r0
 8027642:	f7ff f9fd 	bl	8026a40 <__mcmp>
 8027646:	2800      	cmp	r0, #0
 8027648:	dd59      	ble.n	80276fe <_strtod_l+0x8ae>
 802764a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802764e:	9a06      	ldr	r2, [sp, #24]
 8027650:	0d1b      	lsrs	r3, r3, #20
 8027652:	051b      	lsls	r3, r3, #20
 8027654:	2a00      	cmp	r2, #0
 8027656:	d070      	beq.n	802773a <_strtod_l+0x8ea>
 8027658:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802765c:	d86d      	bhi.n	802773a <_strtod_l+0x8ea>
 802765e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8027662:	f67f ae99 	bls.w	8027398 <_strtod_l+0x548>
 8027666:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8027698 <_strtod_l+0x848>
 802766a:	ec4b ab16 	vmov	d6, sl, fp
 802766e:	4b0e      	ldr	r3, [pc, #56]	@ (80276a8 <_strtod_l+0x858>)
 8027670:	ee26 7b07 	vmul.f64	d7, d6, d7
 8027674:	ee17 2a90 	vmov	r2, s15
 8027678:	4013      	ands	r3, r2
 802767a:	ec5b ab17 	vmov	sl, fp, d7
 802767e:	2b00      	cmp	r3, #0
 8027680:	f47f ae01 	bne.w	8027286 <_strtod_l+0x436>
 8027684:	9a05      	ldr	r2, [sp, #20]
 8027686:	2322      	movs	r3, #34	@ 0x22
 8027688:	6013      	str	r3, [r2, #0]
 802768a:	e5fc      	b.n	8027286 <_strtod_l+0x436>
 802768c:	f3af 8000 	nop.w
 8027690:	ffc00000 	.word	0xffc00000
 8027694:	41dfffff 	.word	0x41dfffff
 8027698:	00000000 	.word	0x00000000
 802769c:	39500000 	.word	0x39500000
 80276a0:	0802d550 	.word	0x0802d550
 80276a4:	fffffc02 	.word	0xfffffc02
 80276a8:	7ff00000 	.word	0x7ff00000
 80276ac:	46d9      	mov	r9, fp
 80276ae:	d15d      	bne.n	802776c <_strtod_l+0x91c>
 80276b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80276b4:	f1b8 0f00 	cmp.w	r8, #0
 80276b8:	d02a      	beq.n	8027710 <_strtod_l+0x8c0>
 80276ba:	4aab      	ldr	r2, [pc, #684]	@ (8027968 <_strtod_l+0xb18>)
 80276bc:	4293      	cmp	r3, r2
 80276be:	d12a      	bne.n	8027716 <_strtod_l+0x8c6>
 80276c0:	9b06      	ldr	r3, [sp, #24]
 80276c2:	4652      	mov	r2, sl
 80276c4:	b1fb      	cbz	r3, 8027706 <_strtod_l+0x8b6>
 80276c6:	4ba9      	ldr	r3, [pc, #676]	@ (802796c <_strtod_l+0xb1c>)
 80276c8:	ea0b 0303 	and.w	r3, fp, r3
 80276cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80276d0:	f04f 31ff 	mov.w	r1, #4294967295
 80276d4:	d81a      	bhi.n	802770c <_strtod_l+0x8bc>
 80276d6:	0d1b      	lsrs	r3, r3, #20
 80276d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80276dc:	fa01 f303 	lsl.w	r3, r1, r3
 80276e0:	429a      	cmp	r2, r3
 80276e2:	d118      	bne.n	8027716 <_strtod_l+0x8c6>
 80276e4:	4ba2      	ldr	r3, [pc, #648]	@ (8027970 <_strtod_l+0xb20>)
 80276e6:	4599      	cmp	r9, r3
 80276e8:	d102      	bne.n	80276f0 <_strtod_l+0x8a0>
 80276ea:	3201      	adds	r2, #1
 80276ec:	f43f adc0 	beq.w	8027270 <_strtod_l+0x420>
 80276f0:	4b9e      	ldr	r3, [pc, #632]	@ (802796c <_strtod_l+0xb1c>)
 80276f2:	ea09 0303 	and.w	r3, r9, r3
 80276f6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80276fa:	f04f 0a00 	mov.w	sl, #0
 80276fe:	9b06      	ldr	r3, [sp, #24]
 8027700:	2b00      	cmp	r3, #0
 8027702:	d1b0      	bne.n	8027666 <_strtod_l+0x816>
 8027704:	e5bf      	b.n	8027286 <_strtod_l+0x436>
 8027706:	f04f 33ff 	mov.w	r3, #4294967295
 802770a:	e7e9      	b.n	80276e0 <_strtod_l+0x890>
 802770c:	460b      	mov	r3, r1
 802770e:	e7e7      	b.n	80276e0 <_strtod_l+0x890>
 8027710:	ea53 030a 	orrs.w	r3, r3, sl
 8027714:	d099      	beq.n	802764a <_strtod_l+0x7fa>
 8027716:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027718:	b1c3      	cbz	r3, 802774c <_strtod_l+0x8fc>
 802771a:	ea13 0f09 	tst.w	r3, r9
 802771e:	d0ee      	beq.n	80276fe <_strtod_l+0x8ae>
 8027720:	9a06      	ldr	r2, [sp, #24]
 8027722:	4650      	mov	r0, sl
 8027724:	4659      	mov	r1, fp
 8027726:	f1b8 0f00 	cmp.w	r8, #0
 802772a:	d013      	beq.n	8027754 <_strtod_l+0x904>
 802772c:	f7ff fb73 	bl	8026e16 <sulp>
 8027730:	ee39 7b00 	vadd.f64	d7, d9, d0
 8027734:	ec5b ab17 	vmov	sl, fp, d7
 8027738:	e7e1      	b.n	80276fe <_strtod_l+0x8ae>
 802773a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 802773e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8027742:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8027746:	f04f 3aff 	mov.w	sl, #4294967295
 802774a:	e7d8      	b.n	80276fe <_strtod_l+0x8ae>
 802774c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802774e:	ea13 0f0a 	tst.w	r3, sl
 8027752:	e7e4      	b.n	802771e <_strtod_l+0x8ce>
 8027754:	f7ff fb5f 	bl	8026e16 <sulp>
 8027758:	ee39 0b40 	vsub.f64	d0, d9, d0
 802775c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8027760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027764:	ec5b ab10 	vmov	sl, fp, d0
 8027768:	d1c9      	bne.n	80276fe <_strtod_l+0x8ae>
 802776a:	e615      	b.n	8027398 <_strtod_l+0x548>
 802776c:	4629      	mov	r1, r5
 802776e:	4620      	mov	r0, r4
 8027770:	f7ff fade 	bl	8026d30 <__ratio>
 8027774:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8027778:	eeb4 0bc7 	vcmpe.f64	d0, d7
 802777c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027780:	d85d      	bhi.n	802783e <_strtod_l+0x9ee>
 8027782:	f1b8 0f00 	cmp.w	r8, #0
 8027786:	d164      	bne.n	8027852 <_strtod_l+0xa02>
 8027788:	f1ba 0f00 	cmp.w	sl, #0
 802778c:	d14b      	bne.n	8027826 <_strtod_l+0x9d6>
 802778e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8027792:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8027796:	2b00      	cmp	r3, #0
 8027798:	d160      	bne.n	802785c <_strtod_l+0xa0c>
 802779a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 802779e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80277a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80277a6:	d401      	bmi.n	80277ac <_strtod_l+0x95c>
 80277a8:	ee20 8b08 	vmul.f64	d8, d0, d8
 80277ac:	eeb1 ab48 	vneg.f64	d10, d8
 80277b0:	486e      	ldr	r0, [pc, #440]	@ (802796c <_strtod_l+0xb1c>)
 80277b2:	4970      	ldr	r1, [pc, #448]	@ (8027974 <_strtod_l+0xb24>)
 80277b4:	ea09 0700 	and.w	r7, r9, r0
 80277b8:	428f      	cmp	r7, r1
 80277ba:	ec53 2b1a 	vmov	r2, r3, d10
 80277be:	d17d      	bne.n	80278bc <_strtod_l+0xa6c>
 80277c0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80277c4:	ec4b ab1c 	vmov	d12, sl, fp
 80277c8:	eeb0 0b4c 	vmov.f64	d0, d12
 80277cc:	f7ff f9e8 	bl	8026ba0 <__ulp>
 80277d0:	4866      	ldr	r0, [pc, #408]	@ (802796c <_strtod_l+0xb1c>)
 80277d2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80277d6:	ee1c 3a90 	vmov	r3, s25
 80277da:	4a67      	ldr	r2, [pc, #412]	@ (8027978 <_strtod_l+0xb28>)
 80277dc:	ea03 0100 	and.w	r1, r3, r0
 80277e0:	4291      	cmp	r1, r2
 80277e2:	ec5b ab1c 	vmov	sl, fp, d12
 80277e6:	d93c      	bls.n	8027862 <_strtod_l+0xa12>
 80277e8:	ee19 2a90 	vmov	r2, s19
 80277ec:	4b60      	ldr	r3, [pc, #384]	@ (8027970 <_strtod_l+0xb20>)
 80277ee:	429a      	cmp	r2, r3
 80277f0:	d104      	bne.n	80277fc <_strtod_l+0x9ac>
 80277f2:	ee19 3a10 	vmov	r3, s18
 80277f6:	3301      	adds	r3, #1
 80277f8:	f43f ad3a 	beq.w	8027270 <_strtod_l+0x420>
 80277fc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8027970 <_strtod_l+0xb20>
 8027800:	f04f 3aff 	mov.w	sl, #4294967295
 8027804:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027806:	9805      	ldr	r0, [sp, #20]
 8027808:	f7fe fe96 	bl	8026538 <_Bfree>
 802780c:	9805      	ldr	r0, [sp, #20]
 802780e:	4631      	mov	r1, r6
 8027810:	f7fe fe92 	bl	8026538 <_Bfree>
 8027814:	9805      	ldr	r0, [sp, #20]
 8027816:	4629      	mov	r1, r5
 8027818:	f7fe fe8e 	bl	8026538 <_Bfree>
 802781c:	9805      	ldr	r0, [sp, #20]
 802781e:	4621      	mov	r1, r4
 8027820:	f7fe fe8a 	bl	8026538 <_Bfree>
 8027824:	e625      	b.n	8027472 <_strtod_l+0x622>
 8027826:	f1ba 0f01 	cmp.w	sl, #1
 802782a:	d103      	bne.n	8027834 <_strtod_l+0x9e4>
 802782c:	f1bb 0f00 	cmp.w	fp, #0
 8027830:	f43f adb2 	beq.w	8027398 <_strtod_l+0x548>
 8027834:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8027838:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 802783c:	e7b8      	b.n	80277b0 <_strtod_l+0x960>
 802783e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8027842:	ee20 8b08 	vmul.f64	d8, d0, d8
 8027846:	f1b8 0f00 	cmp.w	r8, #0
 802784a:	d0af      	beq.n	80277ac <_strtod_l+0x95c>
 802784c:	eeb0 ab48 	vmov.f64	d10, d8
 8027850:	e7ae      	b.n	80277b0 <_strtod_l+0x960>
 8027852:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8027856:	eeb0 8b4a 	vmov.f64	d8, d10
 802785a:	e7a9      	b.n	80277b0 <_strtod_l+0x960>
 802785c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8027860:	e7a6      	b.n	80277b0 <_strtod_l+0x960>
 8027862:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8027866:	9b06      	ldr	r3, [sp, #24]
 8027868:	46d9      	mov	r9, fp
 802786a:	2b00      	cmp	r3, #0
 802786c:	d1ca      	bne.n	8027804 <_strtod_l+0x9b4>
 802786e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8027872:	0d1b      	lsrs	r3, r3, #20
 8027874:	051b      	lsls	r3, r3, #20
 8027876:	429f      	cmp	r7, r3
 8027878:	d1c4      	bne.n	8027804 <_strtod_l+0x9b4>
 802787a:	ec51 0b18 	vmov	r0, r1, d8
 802787e:	f7d8 ff5b 	bl	8000738 <__aeabi_d2lz>
 8027882:	f7d8 ff13 	bl	80006ac <__aeabi_l2d>
 8027886:	f3cb 0913 	ubfx	r9, fp, #0, #20
 802788a:	ec41 0b17 	vmov	d7, r0, r1
 802788e:	ea49 090a 	orr.w	r9, r9, sl
 8027892:	ea59 0908 	orrs.w	r9, r9, r8
 8027896:	ee38 8b47 	vsub.f64	d8, d8, d7
 802789a:	d03c      	beq.n	8027916 <_strtod_l+0xac6>
 802789c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8027950 <_strtod_l+0xb00>
 80278a0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80278a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80278a8:	f53f aced 	bmi.w	8027286 <_strtod_l+0x436>
 80278ac:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8027958 <_strtod_l+0xb08>
 80278b0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80278b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80278b8:	dda4      	ble.n	8027804 <_strtod_l+0x9b4>
 80278ba:	e4e4      	b.n	8027286 <_strtod_l+0x436>
 80278bc:	9906      	ldr	r1, [sp, #24]
 80278be:	b1e1      	cbz	r1, 80278fa <_strtod_l+0xaaa>
 80278c0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80278c4:	d819      	bhi.n	80278fa <_strtod_l+0xaaa>
 80278c6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80278ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80278ce:	d811      	bhi.n	80278f4 <_strtod_l+0xaa4>
 80278d0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80278d4:	ee18 3a10 	vmov	r3, s16
 80278d8:	2b01      	cmp	r3, #1
 80278da:	bf38      	it	cc
 80278dc:	2301      	movcc	r3, #1
 80278de:	ee08 3a10 	vmov	s16, r3
 80278e2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80278e6:	f1b8 0f00 	cmp.w	r8, #0
 80278ea:	d111      	bne.n	8027910 <_strtod_l+0xac0>
 80278ec:	eeb1 7b48 	vneg.f64	d7, d8
 80278f0:	ec53 2b17 	vmov	r2, r3, d7
 80278f4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80278f8:	1bcb      	subs	r3, r1, r7
 80278fa:	eeb0 0b49 	vmov.f64	d0, d9
 80278fe:	ec43 2b1a 	vmov	d10, r2, r3
 8027902:	f7ff f94d 	bl	8026ba0 <__ulp>
 8027906:	eeaa 9b00 	vfma.f64	d9, d10, d0
 802790a:	ec5b ab19 	vmov	sl, fp, d9
 802790e:	e7aa      	b.n	8027866 <_strtod_l+0xa16>
 8027910:	eeb0 7b48 	vmov.f64	d7, d8
 8027914:	e7ec      	b.n	80278f0 <_strtod_l+0xaa0>
 8027916:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8027960 <_strtod_l+0xb10>
 802791a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802791e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027922:	f57f af6f 	bpl.w	8027804 <_strtod_l+0x9b4>
 8027926:	e4ae      	b.n	8027286 <_strtod_l+0x436>
 8027928:	2300      	movs	r3, #0
 802792a:	9308      	str	r3, [sp, #32]
 802792c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802792e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027930:	6013      	str	r3, [r2, #0]
 8027932:	f7ff bacc 	b.w	8026ece <_strtod_l+0x7e>
 8027936:	2a65      	cmp	r2, #101	@ 0x65
 8027938:	f43f abbc 	beq.w	80270b4 <_strtod_l+0x264>
 802793c:	2a45      	cmp	r2, #69	@ 0x45
 802793e:	f43f abb9 	beq.w	80270b4 <_strtod_l+0x264>
 8027942:	2301      	movs	r3, #1
 8027944:	9306      	str	r3, [sp, #24]
 8027946:	f7ff bbf0 	b.w	802712a <_strtod_l+0x2da>
 802794a:	bf00      	nop
 802794c:	f3af 8000 	nop.w
 8027950:	94a03595 	.word	0x94a03595
 8027954:	3fdfffff 	.word	0x3fdfffff
 8027958:	35afe535 	.word	0x35afe535
 802795c:	3fe00000 	.word	0x3fe00000
 8027960:	94a03595 	.word	0x94a03595
 8027964:	3fcfffff 	.word	0x3fcfffff
 8027968:	000fffff 	.word	0x000fffff
 802796c:	7ff00000 	.word	0x7ff00000
 8027970:	7fefffff 	.word	0x7fefffff
 8027974:	7fe00000 	.word	0x7fe00000
 8027978:	7c9fffff 	.word	0x7c9fffff

0802797c <_strtod_r>:
 802797c:	4b01      	ldr	r3, [pc, #4]	@ (8027984 <_strtod_r+0x8>)
 802797e:	f7ff ba67 	b.w	8026e50 <_strtod_l>
 8027982:	bf00      	nop
 8027984:	24000274 	.word	0x24000274

08027988 <__ssputs_r>:
 8027988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802798c:	688e      	ldr	r6, [r1, #8]
 802798e:	461f      	mov	r7, r3
 8027990:	42be      	cmp	r6, r7
 8027992:	680b      	ldr	r3, [r1, #0]
 8027994:	4682      	mov	sl, r0
 8027996:	460c      	mov	r4, r1
 8027998:	4690      	mov	r8, r2
 802799a:	d82d      	bhi.n	80279f8 <__ssputs_r+0x70>
 802799c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80279a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80279a4:	d026      	beq.n	80279f4 <__ssputs_r+0x6c>
 80279a6:	6965      	ldr	r5, [r4, #20]
 80279a8:	6909      	ldr	r1, [r1, #16]
 80279aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80279ae:	eba3 0901 	sub.w	r9, r3, r1
 80279b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80279b6:	1c7b      	adds	r3, r7, #1
 80279b8:	444b      	add	r3, r9
 80279ba:	106d      	asrs	r5, r5, #1
 80279bc:	429d      	cmp	r5, r3
 80279be:	bf38      	it	cc
 80279c0:	461d      	movcc	r5, r3
 80279c2:	0553      	lsls	r3, r2, #21
 80279c4:	d527      	bpl.n	8027a16 <__ssputs_r+0x8e>
 80279c6:	4629      	mov	r1, r5
 80279c8:	f7fc fd42 	bl	8024450 <_malloc_r>
 80279cc:	4606      	mov	r6, r0
 80279ce:	b360      	cbz	r0, 8027a2a <__ssputs_r+0xa2>
 80279d0:	6921      	ldr	r1, [r4, #16]
 80279d2:	464a      	mov	r2, r9
 80279d4:	f7fd ff13 	bl	80257fe <memcpy>
 80279d8:	89a3      	ldrh	r3, [r4, #12]
 80279da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80279de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80279e2:	81a3      	strh	r3, [r4, #12]
 80279e4:	6126      	str	r6, [r4, #16]
 80279e6:	6165      	str	r5, [r4, #20]
 80279e8:	444e      	add	r6, r9
 80279ea:	eba5 0509 	sub.w	r5, r5, r9
 80279ee:	6026      	str	r6, [r4, #0]
 80279f0:	60a5      	str	r5, [r4, #8]
 80279f2:	463e      	mov	r6, r7
 80279f4:	42be      	cmp	r6, r7
 80279f6:	d900      	bls.n	80279fa <__ssputs_r+0x72>
 80279f8:	463e      	mov	r6, r7
 80279fa:	6820      	ldr	r0, [r4, #0]
 80279fc:	4632      	mov	r2, r6
 80279fe:	4641      	mov	r1, r8
 8027a00:	f7fd fe42 	bl	8025688 <memmove>
 8027a04:	68a3      	ldr	r3, [r4, #8]
 8027a06:	1b9b      	subs	r3, r3, r6
 8027a08:	60a3      	str	r3, [r4, #8]
 8027a0a:	6823      	ldr	r3, [r4, #0]
 8027a0c:	4433      	add	r3, r6
 8027a0e:	6023      	str	r3, [r4, #0]
 8027a10:	2000      	movs	r0, #0
 8027a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027a16:	462a      	mov	r2, r5
 8027a18:	f001 fa9f 	bl	8028f5a <_realloc_r>
 8027a1c:	4606      	mov	r6, r0
 8027a1e:	2800      	cmp	r0, #0
 8027a20:	d1e0      	bne.n	80279e4 <__ssputs_r+0x5c>
 8027a22:	6921      	ldr	r1, [r4, #16]
 8027a24:	4650      	mov	r0, sl
 8027a26:	f7fe fcfd 	bl	8026424 <_free_r>
 8027a2a:	230c      	movs	r3, #12
 8027a2c:	f8ca 3000 	str.w	r3, [sl]
 8027a30:	89a3      	ldrh	r3, [r4, #12]
 8027a32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027a36:	81a3      	strh	r3, [r4, #12]
 8027a38:	f04f 30ff 	mov.w	r0, #4294967295
 8027a3c:	e7e9      	b.n	8027a12 <__ssputs_r+0x8a>
	...

08027a40 <_svfiprintf_r>:
 8027a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a44:	4698      	mov	r8, r3
 8027a46:	898b      	ldrh	r3, [r1, #12]
 8027a48:	061b      	lsls	r3, r3, #24
 8027a4a:	b09d      	sub	sp, #116	@ 0x74
 8027a4c:	4607      	mov	r7, r0
 8027a4e:	460d      	mov	r5, r1
 8027a50:	4614      	mov	r4, r2
 8027a52:	d510      	bpl.n	8027a76 <_svfiprintf_r+0x36>
 8027a54:	690b      	ldr	r3, [r1, #16]
 8027a56:	b973      	cbnz	r3, 8027a76 <_svfiprintf_r+0x36>
 8027a58:	2140      	movs	r1, #64	@ 0x40
 8027a5a:	f7fc fcf9 	bl	8024450 <_malloc_r>
 8027a5e:	6028      	str	r0, [r5, #0]
 8027a60:	6128      	str	r0, [r5, #16]
 8027a62:	b930      	cbnz	r0, 8027a72 <_svfiprintf_r+0x32>
 8027a64:	230c      	movs	r3, #12
 8027a66:	603b      	str	r3, [r7, #0]
 8027a68:	f04f 30ff 	mov.w	r0, #4294967295
 8027a6c:	b01d      	add	sp, #116	@ 0x74
 8027a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027a72:	2340      	movs	r3, #64	@ 0x40
 8027a74:	616b      	str	r3, [r5, #20]
 8027a76:	2300      	movs	r3, #0
 8027a78:	9309      	str	r3, [sp, #36]	@ 0x24
 8027a7a:	2320      	movs	r3, #32
 8027a7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8027a80:	f8cd 800c 	str.w	r8, [sp, #12]
 8027a84:	2330      	movs	r3, #48	@ 0x30
 8027a86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8027c24 <_svfiprintf_r+0x1e4>
 8027a8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8027a8e:	f04f 0901 	mov.w	r9, #1
 8027a92:	4623      	mov	r3, r4
 8027a94:	469a      	mov	sl, r3
 8027a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027a9a:	b10a      	cbz	r2, 8027aa0 <_svfiprintf_r+0x60>
 8027a9c:	2a25      	cmp	r2, #37	@ 0x25
 8027a9e:	d1f9      	bne.n	8027a94 <_svfiprintf_r+0x54>
 8027aa0:	ebba 0b04 	subs.w	fp, sl, r4
 8027aa4:	d00b      	beq.n	8027abe <_svfiprintf_r+0x7e>
 8027aa6:	465b      	mov	r3, fp
 8027aa8:	4622      	mov	r2, r4
 8027aaa:	4629      	mov	r1, r5
 8027aac:	4638      	mov	r0, r7
 8027aae:	f7ff ff6b 	bl	8027988 <__ssputs_r>
 8027ab2:	3001      	adds	r0, #1
 8027ab4:	f000 80a7 	beq.w	8027c06 <_svfiprintf_r+0x1c6>
 8027ab8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027aba:	445a      	add	r2, fp
 8027abc:	9209      	str	r2, [sp, #36]	@ 0x24
 8027abe:	f89a 3000 	ldrb.w	r3, [sl]
 8027ac2:	2b00      	cmp	r3, #0
 8027ac4:	f000 809f 	beq.w	8027c06 <_svfiprintf_r+0x1c6>
 8027ac8:	2300      	movs	r3, #0
 8027aca:	f04f 32ff 	mov.w	r2, #4294967295
 8027ace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027ad2:	f10a 0a01 	add.w	sl, sl, #1
 8027ad6:	9304      	str	r3, [sp, #16]
 8027ad8:	9307      	str	r3, [sp, #28]
 8027ada:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8027ade:	931a      	str	r3, [sp, #104]	@ 0x68
 8027ae0:	4654      	mov	r4, sl
 8027ae2:	2205      	movs	r2, #5
 8027ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027ae8:	484e      	ldr	r0, [pc, #312]	@ (8027c24 <_svfiprintf_r+0x1e4>)
 8027aea:	f7d8 fbf9 	bl	80002e0 <memchr>
 8027aee:	9a04      	ldr	r2, [sp, #16]
 8027af0:	b9d8      	cbnz	r0, 8027b2a <_svfiprintf_r+0xea>
 8027af2:	06d0      	lsls	r0, r2, #27
 8027af4:	bf44      	itt	mi
 8027af6:	2320      	movmi	r3, #32
 8027af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027afc:	0711      	lsls	r1, r2, #28
 8027afe:	bf44      	itt	mi
 8027b00:	232b      	movmi	r3, #43	@ 0x2b
 8027b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027b06:	f89a 3000 	ldrb.w	r3, [sl]
 8027b0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8027b0c:	d015      	beq.n	8027b3a <_svfiprintf_r+0xfa>
 8027b0e:	9a07      	ldr	r2, [sp, #28]
 8027b10:	4654      	mov	r4, sl
 8027b12:	2000      	movs	r0, #0
 8027b14:	f04f 0c0a 	mov.w	ip, #10
 8027b18:	4621      	mov	r1, r4
 8027b1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027b1e:	3b30      	subs	r3, #48	@ 0x30
 8027b20:	2b09      	cmp	r3, #9
 8027b22:	d94b      	bls.n	8027bbc <_svfiprintf_r+0x17c>
 8027b24:	b1b0      	cbz	r0, 8027b54 <_svfiprintf_r+0x114>
 8027b26:	9207      	str	r2, [sp, #28]
 8027b28:	e014      	b.n	8027b54 <_svfiprintf_r+0x114>
 8027b2a:	eba0 0308 	sub.w	r3, r0, r8
 8027b2e:	fa09 f303 	lsl.w	r3, r9, r3
 8027b32:	4313      	orrs	r3, r2
 8027b34:	9304      	str	r3, [sp, #16]
 8027b36:	46a2      	mov	sl, r4
 8027b38:	e7d2      	b.n	8027ae0 <_svfiprintf_r+0xa0>
 8027b3a:	9b03      	ldr	r3, [sp, #12]
 8027b3c:	1d19      	adds	r1, r3, #4
 8027b3e:	681b      	ldr	r3, [r3, #0]
 8027b40:	9103      	str	r1, [sp, #12]
 8027b42:	2b00      	cmp	r3, #0
 8027b44:	bfbb      	ittet	lt
 8027b46:	425b      	neglt	r3, r3
 8027b48:	f042 0202 	orrlt.w	r2, r2, #2
 8027b4c:	9307      	strge	r3, [sp, #28]
 8027b4e:	9307      	strlt	r3, [sp, #28]
 8027b50:	bfb8      	it	lt
 8027b52:	9204      	strlt	r2, [sp, #16]
 8027b54:	7823      	ldrb	r3, [r4, #0]
 8027b56:	2b2e      	cmp	r3, #46	@ 0x2e
 8027b58:	d10a      	bne.n	8027b70 <_svfiprintf_r+0x130>
 8027b5a:	7863      	ldrb	r3, [r4, #1]
 8027b5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8027b5e:	d132      	bne.n	8027bc6 <_svfiprintf_r+0x186>
 8027b60:	9b03      	ldr	r3, [sp, #12]
 8027b62:	1d1a      	adds	r2, r3, #4
 8027b64:	681b      	ldr	r3, [r3, #0]
 8027b66:	9203      	str	r2, [sp, #12]
 8027b68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8027b6c:	3402      	adds	r4, #2
 8027b6e:	9305      	str	r3, [sp, #20]
 8027b70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8027c34 <_svfiprintf_r+0x1f4>
 8027b74:	7821      	ldrb	r1, [r4, #0]
 8027b76:	2203      	movs	r2, #3
 8027b78:	4650      	mov	r0, sl
 8027b7a:	f7d8 fbb1 	bl	80002e0 <memchr>
 8027b7e:	b138      	cbz	r0, 8027b90 <_svfiprintf_r+0x150>
 8027b80:	9b04      	ldr	r3, [sp, #16]
 8027b82:	eba0 000a 	sub.w	r0, r0, sl
 8027b86:	2240      	movs	r2, #64	@ 0x40
 8027b88:	4082      	lsls	r2, r0
 8027b8a:	4313      	orrs	r3, r2
 8027b8c:	3401      	adds	r4, #1
 8027b8e:	9304      	str	r3, [sp, #16]
 8027b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027b94:	4824      	ldr	r0, [pc, #144]	@ (8027c28 <_svfiprintf_r+0x1e8>)
 8027b96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8027b9a:	2206      	movs	r2, #6
 8027b9c:	f7d8 fba0 	bl	80002e0 <memchr>
 8027ba0:	2800      	cmp	r0, #0
 8027ba2:	d036      	beq.n	8027c12 <_svfiprintf_r+0x1d2>
 8027ba4:	4b21      	ldr	r3, [pc, #132]	@ (8027c2c <_svfiprintf_r+0x1ec>)
 8027ba6:	bb1b      	cbnz	r3, 8027bf0 <_svfiprintf_r+0x1b0>
 8027ba8:	9b03      	ldr	r3, [sp, #12]
 8027baa:	3307      	adds	r3, #7
 8027bac:	f023 0307 	bic.w	r3, r3, #7
 8027bb0:	3308      	adds	r3, #8
 8027bb2:	9303      	str	r3, [sp, #12]
 8027bb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027bb6:	4433      	add	r3, r6
 8027bb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8027bba:	e76a      	b.n	8027a92 <_svfiprintf_r+0x52>
 8027bbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8027bc0:	460c      	mov	r4, r1
 8027bc2:	2001      	movs	r0, #1
 8027bc4:	e7a8      	b.n	8027b18 <_svfiprintf_r+0xd8>
 8027bc6:	2300      	movs	r3, #0
 8027bc8:	3401      	adds	r4, #1
 8027bca:	9305      	str	r3, [sp, #20]
 8027bcc:	4619      	mov	r1, r3
 8027bce:	f04f 0c0a 	mov.w	ip, #10
 8027bd2:	4620      	mov	r0, r4
 8027bd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027bd8:	3a30      	subs	r2, #48	@ 0x30
 8027bda:	2a09      	cmp	r2, #9
 8027bdc:	d903      	bls.n	8027be6 <_svfiprintf_r+0x1a6>
 8027bde:	2b00      	cmp	r3, #0
 8027be0:	d0c6      	beq.n	8027b70 <_svfiprintf_r+0x130>
 8027be2:	9105      	str	r1, [sp, #20]
 8027be4:	e7c4      	b.n	8027b70 <_svfiprintf_r+0x130>
 8027be6:	fb0c 2101 	mla	r1, ip, r1, r2
 8027bea:	4604      	mov	r4, r0
 8027bec:	2301      	movs	r3, #1
 8027bee:	e7f0      	b.n	8027bd2 <_svfiprintf_r+0x192>
 8027bf0:	ab03      	add	r3, sp, #12
 8027bf2:	9300      	str	r3, [sp, #0]
 8027bf4:	462a      	mov	r2, r5
 8027bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8027c30 <_svfiprintf_r+0x1f0>)
 8027bf8:	a904      	add	r1, sp, #16
 8027bfa:	4638      	mov	r0, r7
 8027bfc:	f7fc fdfc 	bl	80247f8 <_printf_float>
 8027c00:	1c42      	adds	r2, r0, #1
 8027c02:	4606      	mov	r6, r0
 8027c04:	d1d6      	bne.n	8027bb4 <_svfiprintf_r+0x174>
 8027c06:	89ab      	ldrh	r3, [r5, #12]
 8027c08:	065b      	lsls	r3, r3, #25
 8027c0a:	f53f af2d 	bmi.w	8027a68 <_svfiprintf_r+0x28>
 8027c0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027c10:	e72c      	b.n	8027a6c <_svfiprintf_r+0x2c>
 8027c12:	ab03      	add	r3, sp, #12
 8027c14:	9300      	str	r3, [sp, #0]
 8027c16:	462a      	mov	r2, r5
 8027c18:	4b05      	ldr	r3, [pc, #20]	@ (8027c30 <_svfiprintf_r+0x1f0>)
 8027c1a:	a904      	add	r1, sp, #16
 8027c1c:	4638      	mov	r0, r7
 8027c1e:	f7fd f873 	bl	8024d08 <_printf_i>
 8027c22:	e7ed      	b.n	8027c00 <_svfiprintf_r+0x1c0>
 8027c24:	0802d578 	.word	0x0802d578
 8027c28:	0802d582 	.word	0x0802d582
 8027c2c:	080247f9 	.word	0x080247f9
 8027c30:	08027989 	.word	0x08027989
 8027c34:	0802d57e 	.word	0x0802d57e

08027c38 <_sungetc_r>:
 8027c38:	b538      	push	{r3, r4, r5, lr}
 8027c3a:	1c4b      	adds	r3, r1, #1
 8027c3c:	4614      	mov	r4, r2
 8027c3e:	d103      	bne.n	8027c48 <_sungetc_r+0x10>
 8027c40:	f04f 35ff 	mov.w	r5, #4294967295
 8027c44:	4628      	mov	r0, r5
 8027c46:	bd38      	pop	{r3, r4, r5, pc}
 8027c48:	8993      	ldrh	r3, [r2, #12]
 8027c4a:	f023 0320 	bic.w	r3, r3, #32
 8027c4e:	8193      	strh	r3, [r2, #12]
 8027c50:	6853      	ldr	r3, [r2, #4]
 8027c52:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8027c54:	b2cd      	uxtb	r5, r1
 8027c56:	b18a      	cbz	r2, 8027c7c <_sungetc_r+0x44>
 8027c58:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8027c5a:	429a      	cmp	r2, r3
 8027c5c:	dd08      	ble.n	8027c70 <_sungetc_r+0x38>
 8027c5e:	6823      	ldr	r3, [r4, #0]
 8027c60:	1e5a      	subs	r2, r3, #1
 8027c62:	6022      	str	r2, [r4, #0]
 8027c64:	f803 5c01 	strb.w	r5, [r3, #-1]
 8027c68:	6863      	ldr	r3, [r4, #4]
 8027c6a:	3301      	adds	r3, #1
 8027c6c:	6063      	str	r3, [r4, #4]
 8027c6e:	e7e9      	b.n	8027c44 <_sungetc_r+0xc>
 8027c70:	4621      	mov	r1, r4
 8027c72:	f000 fd34 	bl	80286de <__submore>
 8027c76:	2800      	cmp	r0, #0
 8027c78:	d0f1      	beq.n	8027c5e <_sungetc_r+0x26>
 8027c7a:	e7e1      	b.n	8027c40 <_sungetc_r+0x8>
 8027c7c:	6921      	ldr	r1, [r4, #16]
 8027c7e:	6822      	ldr	r2, [r4, #0]
 8027c80:	b141      	cbz	r1, 8027c94 <_sungetc_r+0x5c>
 8027c82:	4291      	cmp	r1, r2
 8027c84:	d206      	bcs.n	8027c94 <_sungetc_r+0x5c>
 8027c86:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8027c8a:	42a9      	cmp	r1, r5
 8027c8c:	d102      	bne.n	8027c94 <_sungetc_r+0x5c>
 8027c8e:	3a01      	subs	r2, #1
 8027c90:	6022      	str	r2, [r4, #0]
 8027c92:	e7ea      	b.n	8027c6a <_sungetc_r+0x32>
 8027c94:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8027c98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8027c9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8027c9e:	2303      	movs	r3, #3
 8027ca0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8027ca2:	4623      	mov	r3, r4
 8027ca4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8027ca8:	6023      	str	r3, [r4, #0]
 8027caa:	2301      	movs	r3, #1
 8027cac:	e7de      	b.n	8027c6c <_sungetc_r+0x34>

08027cae <__ssrefill_r>:
 8027cae:	b510      	push	{r4, lr}
 8027cb0:	460c      	mov	r4, r1
 8027cb2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8027cb4:	b169      	cbz	r1, 8027cd2 <__ssrefill_r+0x24>
 8027cb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8027cba:	4299      	cmp	r1, r3
 8027cbc:	d001      	beq.n	8027cc2 <__ssrefill_r+0x14>
 8027cbe:	f7fe fbb1 	bl	8026424 <_free_r>
 8027cc2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8027cc4:	6063      	str	r3, [r4, #4]
 8027cc6:	2000      	movs	r0, #0
 8027cc8:	6360      	str	r0, [r4, #52]	@ 0x34
 8027cca:	b113      	cbz	r3, 8027cd2 <__ssrefill_r+0x24>
 8027ccc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8027cce:	6023      	str	r3, [r4, #0]
 8027cd0:	bd10      	pop	{r4, pc}
 8027cd2:	6923      	ldr	r3, [r4, #16]
 8027cd4:	6023      	str	r3, [r4, #0]
 8027cd6:	2300      	movs	r3, #0
 8027cd8:	6063      	str	r3, [r4, #4]
 8027cda:	89a3      	ldrh	r3, [r4, #12]
 8027cdc:	f043 0320 	orr.w	r3, r3, #32
 8027ce0:	81a3      	strh	r3, [r4, #12]
 8027ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8027ce6:	e7f3      	b.n	8027cd0 <__ssrefill_r+0x22>

08027ce8 <__ssvfiscanf_r>:
 8027ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027cec:	460c      	mov	r4, r1
 8027cee:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8027cf2:	2100      	movs	r1, #0
 8027cf4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8027cf8:	49a5      	ldr	r1, [pc, #660]	@ (8027f90 <__ssvfiscanf_r+0x2a8>)
 8027cfa:	91a0      	str	r1, [sp, #640]	@ 0x280
 8027cfc:	f10d 0804 	add.w	r8, sp, #4
 8027d00:	49a4      	ldr	r1, [pc, #656]	@ (8027f94 <__ssvfiscanf_r+0x2ac>)
 8027d02:	4fa5      	ldr	r7, [pc, #660]	@ (8027f98 <__ssvfiscanf_r+0x2b0>)
 8027d04:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8027d08:	4606      	mov	r6, r0
 8027d0a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8027d0c:	9300      	str	r3, [sp, #0]
 8027d0e:	7813      	ldrb	r3, [r2, #0]
 8027d10:	2b00      	cmp	r3, #0
 8027d12:	f000 8158 	beq.w	8027fc6 <__ssvfiscanf_r+0x2de>
 8027d16:	5cf9      	ldrb	r1, [r7, r3]
 8027d18:	f011 0108 	ands.w	r1, r1, #8
 8027d1c:	f102 0501 	add.w	r5, r2, #1
 8027d20:	d019      	beq.n	8027d56 <__ssvfiscanf_r+0x6e>
 8027d22:	6863      	ldr	r3, [r4, #4]
 8027d24:	2b00      	cmp	r3, #0
 8027d26:	dd0f      	ble.n	8027d48 <__ssvfiscanf_r+0x60>
 8027d28:	6823      	ldr	r3, [r4, #0]
 8027d2a:	781a      	ldrb	r2, [r3, #0]
 8027d2c:	5cba      	ldrb	r2, [r7, r2]
 8027d2e:	0712      	lsls	r2, r2, #28
 8027d30:	d401      	bmi.n	8027d36 <__ssvfiscanf_r+0x4e>
 8027d32:	462a      	mov	r2, r5
 8027d34:	e7eb      	b.n	8027d0e <__ssvfiscanf_r+0x26>
 8027d36:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8027d38:	3201      	adds	r2, #1
 8027d3a:	9245      	str	r2, [sp, #276]	@ 0x114
 8027d3c:	6862      	ldr	r2, [r4, #4]
 8027d3e:	3301      	adds	r3, #1
 8027d40:	3a01      	subs	r2, #1
 8027d42:	6062      	str	r2, [r4, #4]
 8027d44:	6023      	str	r3, [r4, #0]
 8027d46:	e7ec      	b.n	8027d22 <__ssvfiscanf_r+0x3a>
 8027d48:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8027d4a:	4621      	mov	r1, r4
 8027d4c:	4630      	mov	r0, r6
 8027d4e:	4798      	blx	r3
 8027d50:	2800      	cmp	r0, #0
 8027d52:	d0e9      	beq.n	8027d28 <__ssvfiscanf_r+0x40>
 8027d54:	e7ed      	b.n	8027d32 <__ssvfiscanf_r+0x4a>
 8027d56:	2b25      	cmp	r3, #37	@ 0x25
 8027d58:	d012      	beq.n	8027d80 <__ssvfiscanf_r+0x98>
 8027d5a:	4699      	mov	r9, r3
 8027d5c:	6863      	ldr	r3, [r4, #4]
 8027d5e:	2b00      	cmp	r3, #0
 8027d60:	f340 8093 	ble.w	8027e8a <__ssvfiscanf_r+0x1a2>
 8027d64:	6822      	ldr	r2, [r4, #0]
 8027d66:	7813      	ldrb	r3, [r2, #0]
 8027d68:	454b      	cmp	r3, r9
 8027d6a:	f040 812c 	bne.w	8027fc6 <__ssvfiscanf_r+0x2de>
 8027d6e:	6863      	ldr	r3, [r4, #4]
 8027d70:	3b01      	subs	r3, #1
 8027d72:	6063      	str	r3, [r4, #4]
 8027d74:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8027d76:	3201      	adds	r2, #1
 8027d78:	3301      	adds	r3, #1
 8027d7a:	6022      	str	r2, [r4, #0]
 8027d7c:	9345      	str	r3, [sp, #276]	@ 0x114
 8027d7e:	e7d8      	b.n	8027d32 <__ssvfiscanf_r+0x4a>
 8027d80:	9141      	str	r1, [sp, #260]	@ 0x104
 8027d82:	9143      	str	r1, [sp, #268]	@ 0x10c
 8027d84:	7853      	ldrb	r3, [r2, #1]
 8027d86:	2b2a      	cmp	r3, #42	@ 0x2a
 8027d88:	bf02      	ittt	eq
 8027d8a:	2310      	moveq	r3, #16
 8027d8c:	1c95      	addeq	r5, r2, #2
 8027d8e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8027d90:	220a      	movs	r2, #10
 8027d92:	46a9      	mov	r9, r5
 8027d94:	f819 1b01 	ldrb.w	r1, [r9], #1
 8027d98:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8027d9c:	2b09      	cmp	r3, #9
 8027d9e:	d91e      	bls.n	8027dde <__ssvfiscanf_r+0xf6>
 8027da0:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8027f9c <__ssvfiscanf_r+0x2b4>
 8027da4:	2203      	movs	r2, #3
 8027da6:	4650      	mov	r0, sl
 8027da8:	f7d8 fa9a 	bl	80002e0 <memchr>
 8027dac:	b138      	cbz	r0, 8027dbe <__ssvfiscanf_r+0xd6>
 8027dae:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8027db0:	eba0 000a 	sub.w	r0, r0, sl
 8027db4:	2301      	movs	r3, #1
 8027db6:	4083      	lsls	r3, r0
 8027db8:	4313      	orrs	r3, r2
 8027dba:	9341      	str	r3, [sp, #260]	@ 0x104
 8027dbc:	464d      	mov	r5, r9
 8027dbe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8027dc2:	2b78      	cmp	r3, #120	@ 0x78
 8027dc4:	d806      	bhi.n	8027dd4 <__ssvfiscanf_r+0xec>
 8027dc6:	2b57      	cmp	r3, #87	@ 0x57
 8027dc8:	d810      	bhi.n	8027dec <__ssvfiscanf_r+0x104>
 8027dca:	2b25      	cmp	r3, #37	@ 0x25
 8027dcc:	d0c5      	beq.n	8027d5a <__ssvfiscanf_r+0x72>
 8027dce:	d857      	bhi.n	8027e80 <__ssvfiscanf_r+0x198>
 8027dd0:	2b00      	cmp	r3, #0
 8027dd2:	d065      	beq.n	8027ea0 <__ssvfiscanf_r+0x1b8>
 8027dd4:	2303      	movs	r3, #3
 8027dd6:	9347      	str	r3, [sp, #284]	@ 0x11c
 8027dd8:	230a      	movs	r3, #10
 8027dda:	9342      	str	r3, [sp, #264]	@ 0x108
 8027ddc:	e078      	b.n	8027ed0 <__ssvfiscanf_r+0x1e8>
 8027dde:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8027de0:	fb02 1103 	mla	r1, r2, r3, r1
 8027de4:	3930      	subs	r1, #48	@ 0x30
 8027de6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8027de8:	464d      	mov	r5, r9
 8027dea:	e7d2      	b.n	8027d92 <__ssvfiscanf_r+0xaa>
 8027dec:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8027df0:	2a20      	cmp	r2, #32
 8027df2:	d8ef      	bhi.n	8027dd4 <__ssvfiscanf_r+0xec>
 8027df4:	a101      	add	r1, pc, #4	@ (adr r1, 8027dfc <__ssvfiscanf_r+0x114>)
 8027df6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8027dfa:	bf00      	nop
 8027dfc:	08027eaf 	.word	0x08027eaf
 8027e00:	08027dd5 	.word	0x08027dd5
 8027e04:	08027dd5 	.word	0x08027dd5
 8027e08:	08027f09 	.word	0x08027f09
 8027e0c:	08027dd5 	.word	0x08027dd5
 8027e10:	08027dd5 	.word	0x08027dd5
 8027e14:	08027dd5 	.word	0x08027dd5
 8027e18:	08027dd5 	.word	0x08027dd5
 8027e1c:	08027dd5 	.word	0x08027dd5
 8027e20:	08027dd5 	.word	0x08027dd5
 8027e24:	08027dd5 	.word	0x08027dd5
 8027e28:	08027f1f 	.word	0x08027f1f
 8027e2c:	08027f05 	.word	0x08027f05
 8027e30:	08027e87 	.word	0x08027e87
 8027e34:	08027e87 	.word	0x08027e87
 8027e38:	08027e87 	.word	0x08027e87
 8027e3c:	08027dd5 	.word	0x08027dd5
 8027e40:	08027ec1 	.word	0x08027ec1
 8027e44:	08027dd5 	.word	0x08027dd5
 8027e48:	08027dd5 	.word	0x08027dd5
 8027e4c:	08027dd5 	.word	0x08027dd5
 8027e50:	08027dd5 	.word	0x08027dd5
 8027e54:	08027f2f 	.word	0x08027f2f
 8027e58:	08027ec9 	.word	0x08027ec9
 8027e5c:	08027ea7 	.word	0x08027ea7
 8027e60:	08027dd5 	.word	0x08027dd5
 8027e64:	08027dd5 	.word	0x08027dd5
 8027e68:	08027f2b 	.word	0x08027f2b
 8027e6c:	08027dd5 	.word	0x08027dd5
 8027e70:	08027f05 	.word	0x08027f05
 8027e74:	08027dd5 	.word	0x08027dd5
 8027e78:	08027dd5 	.word	0x08027dd5
 8027e7c:	08027eaf 	.word	0x08027eaf
 8027e80:	3b45      	subs	r3, #69	@ 0x45
 8027e82:	2b02      	cmp	r3, #2
 8027e84:	d8a6      	bhi.n	8027dd4 <__ssvfiscanf_r+0xec>
 8027e86:	2305      	movs	r3, #5
 8027e88:	e021      	b.n	8027ece <__ssvfiscanf_r+0x1e6>
 8027e8a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8027e8c:	4621      	mov	r1, r4
 8027e8e:	4630      	mov	r0, r6
 8027e90:	4798      	blx	r3
 8027e92:	2800      	cmp	r0, #0
 8027e94:	f43f af66 	beq.w	8027d64 <__ssvfiscanf_r+0x7c>
 8027e98:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8027e9a:	2800      	cmp	r0, #0
 8027e9c:	f040 808b 	bne.w	8027fb6 <__ssvfiscanf_r+0x2ce>
 8027ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8027ea4:	e08b      	b.n	8027fbe <__ssvfiscanf_r+0x2d6>
 8027ea6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8027ea8:	f042 0220 	orr.w	r2, r2, #32
 8027eac:	9241      	str	r2, [sp, #260]	@ 0x104
 8027eae:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8027eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8027eb4:	9241      	str	r2, [sp, #260]	@ 0x104
 8027eb6:	2210      	movs	r2, #16
 8027eb8:	2b6e      	cmp	r3, #110	@ 0x6e
 8027eba:	9242      	str	r2, [sp, #264]	@ 0x108
 8027ebc:	d902      	bls.n	8027ec4 <__ssvfiscanf_r+0x1dc>
 8027ebe:	e005      	b.n	8027ecc <__ssvfiscanf_r+0x1e4>
 8027ec0:	2300      	movs	r3, #0
 8027ec2:	9342      	str	r3, [sp, #264]	@ 0x108
 8027ec4:	2303      	movs	r3, #3
 8027ec6:	e002      	b.n	8027ece <__ssvfiscanf_r+0x1e6>
 8027ec8:	2308      	movs	r3, #8
 8027eca:	9342      	str	r3, [sp, #264]	@ 0x108
 8027ecc:	2304      	movs	r3, #4
 8027ece:	9347      	str	r3, [sp, #284]	@ 0x11c
 8027ed0:	6863      	ldr	r3, [r4, #4]
 8027ed2:	2b00      	cmp	r3, #0
 8027ed4:	dd39      	ble.n	8027f4a <__ssvfiscanf_r+0x262>
 8027ed6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8027ed8:	0659      	lsls	r1, r3, #25
 8027eda:	d404      	bmi.n	8027ee6 <__ssvfiscanf_r+0x1fe>
 8027edc:	6823      	ldr	r3, [r4, #0]
 8027ede:	781a      	ldrb	r2, [r3, #0]
 8027ee0:	5cba      	ldrb	r2, [r7, r2]
 8027ee2:	0712      	lsls	r2, r2, #28
 8027ee4:	d438      	bmi.n	8027f58 <__ssvfiscanf_r+0x270>
 8027ee6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8027ee8:	2b02      	cmp	r3, #2
 8027eea:	dc47      	bgt.n	8027f7c <__ssvfiscanf_r+0x294>
 8027eec:	466b      	mov	r3, sp
 8027eee:	4622      	mov	r2, r4
 8027ef0:	a941      	add	r1, sp, #260	@ 0x104
 8027ef2:	4630      	mov	r0, r6
 8027ef4:	f000 f9ae 	bl	8028254 <_scanf_chars>
 8027ef8:	2801      	cmp	r0, #1
 8027efa:	d064      	beq.n	8027fc6 <__ssvfiscanf_r+0x2de>
 8027efc:	2802      	cmp	r0, #2
 8027efe:	f47f af18 	bne.w	8027d32 <__ssvfiscanf_r+0x4a>
 8027f02:	e7c9      	b.n	8027e98 <__ssvfiscanf_r+0x1b0>
 8027f04:	220a      	movs	r2, #10
 8027f06:	e7d7      	b.n	8027eb8 <__ssvfiscanf_r+0x1d0>
 8027f08:	4629      	mov	r1, r5
 8027f0a:	4640      	mov	r0, r8
 8027f0c:	f000 fbae 	bl	802866c <__sccl>
 8027f10:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8027f12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027f16:	9341      	str	r3, [sp, #260]	@ 0x104
 8027f18:	4605      	mov	r5, r0
 8027f1a:	2301      	movs	r3, #1
 8027f1c:	e7d7      	b.n	8027ece <__ssvfiscanf_r+0x1e6>
 8027f1e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8027f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027f24:	9341      	str	r3, [sp, #260]	@ 0x104
 8027f26:	2300      	movs	r3, #0
 8027f28:	e7d1      	b.n	8027ece <__ssvfiscanf_r+0x1e6>
 8027f2a:	2302      	movs	r3, #2
 8027f2c:	e7cf      	b.n	8027ece <__ssvfiscanf_r+0x1e6>
 8027f2e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8027f30:	06c3      	lsls	r3, r0, #27
 8027f32:	f53f aefe 	bmi.w	8027d32 <__ssvfiscanf_r+0x4a>
 8027f36:	9b00      	ldr	r3, [sp, #0]
 8027f38:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8027f3a:	1d19      	adds	r1, r3, #4
 8027f3c:	9100      	str	r1, [sp, #0]
 8027f3e:	681b      	ldr	r3, [r3, #0]
 8027f40:	07c0      	lsls	r0, r0, #31
 8027f42:	bf4c      	ite	mi
 8027f44:	801a      	strhmi	r2, [r3, #0]
 8027f46:	601a      	strpl	r2, [r3, #0]
 8027f48:	e6f3      	b.n	8027d32 <__ssvfiscanf_r+0x4a>
 8027f4a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8027f4c:	4621      	mov	r1, r4
 8027f4e:	4630      	mov	r0, r6
 8027f50:	4798      	blx	r3
 8027f52:	2800      	cmp	r0, #0
 8027f54:	d0bf      	beq.n	8027ed6 <__ssvfiscanf_r+0x1ee>
 8027f56:	e79f      	b.n	8027e98 <__ssvfiscanf_r+0x1b0>
 8027f58:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8027f5a:	3201      	adds	r2, #1
 8027f5c:	9245      	str	r2, [sp, #276]	@ 0x114
 8027f5e:	6862      	ldr	r2, [r4, #4]
 8027f60:	3a01      	subs	r2, #1
 8027f62:	2a00      	cmp	r2, #0
 8027f64:	6062      	str	r2, [r4, #4]
 8027f66:	dd02      	ble.n	8027f6e <__ssvfiscanf_r+0x286>
 8027f68:	3301      	adds	r3, #1
 8027f6a:	6023      	str	r3, [r4, #0]
 8027f6c:	e7b6      	b.n	8027edc <__ssvfiscanf_r+0x1f4>
 8027f6e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8027f70:	4621      	mov	r1, r4
 8027f72:	4630      	mov	r0, r6
 8027f74:	4798      	blx	r3
 8027f76:	2800      	cmp	r0, #0
 8027f78:	d0b0      	beq.n	8027edc <__ssvfiscanf_r+0x1f4>
 8027f7a:	e78d      	b.n	8027e98 <__ssvfiscanf_r+0x1b0>
 8027f7c:	2b04      	cmp	r3, #4
 8027f7e:	dc0f      	bgt.n	8027fa0 <__ssvfiscanf_r+0x2b8>
 8027f80:	466b      	mov	r3, sp
 8027f82:	4622      	mov	r2, r4
 8027f84:	a941      	add	r1, sp, #260	@ 0x104
 8027f86:	4630      	mov	r0, r6
 8027f88:	f000 f9be 	bl	8028308 <_scanf_i>
 8027f8c:	e7b4      	b.n	8027ef8 <__ssvfiscanf_r+0x210>
 8027f8e:	bf00      	nop
 8027f90:	08027c39 	.word	0x08027c39
 8027f94:	08027caf 	.word	0x08027caf
 8027f98:	0802d1e0 	.word	0x0802d1e0
 8027f9c:	0802d57e 	.word	0x0802d57e
 8027fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8027fcc <__ssvfiscanf_r+0x2e4>)
 8027fa2:	2b00      	cmp	r3, #0
 8027fa4:	f43f aec5 	beq.w	8027d32 <__ssvfiscanf_r+0x4a>
 8027fa8:	466b      	mov	r3, sp
 8027faa:	4622      	mov	r2, r4
 8027fac:	a941      	add	r1, sp, #260	@ 0x104
 8027fae:	4630      	mov	r0, r6
 8027fb0:	f7fc ffca 	bl	8024f48 <_scanf_float>
 8027fb4:	e7a0      	b.n	8027ef8 <__ssvfiscanf_r+0x210>
 8027fb6:	89a3      	ldrh	r3, [r4, #12]
 8027fb8:	065b      	lsls	r3, r3, #25
 8027fba:	f53f af71 	bmi.w	8027ea0 <__ssvfiscanf_r+0x1b8>
 8027fbe:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8027fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027fc6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8027fc8:	e7f9      	b.n	8027fbe <__ssvfiscanf_r+0x2d6>
 8027fca:	bf00      	nop
 8027fcc:	08024f49 	.word	0x08024f49

08027fd0 <__sfputc_r>:
 8027fd0:	6893      	ldr	r3, [r2, #8]
 8027fd2:	3b01      	subs	r3, #1
 8027fd4:	2b00      	cmp	r3, #0
 8027fd6:	b410      	push	{r4}
 8027fd8:	6093      	str	r3, [r2, #8]
 8027fda:	da08      	bge.n	8027fee <__sfputc_r+0x1e>
 8027fdc:	6994      	ldr	r4, [r2, #24]
 8027fde:	42a3      	cmp	r3, r4
 8027fe0:	db01      	blt.n	8027fe6 <__sfputc_r+0x16>
 8027fe2:	290a      	cmp	r1, #10
 8027fe4:	d103      	bne.n	8027fee <__sfputc_r+0x1e>
 8027fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027fea:	f000 bbb2 	b.w	8028752 <__swbuf_r>
 8027fee:	6813      	ldr	r3, [r2, #0]
 8027ff0:	1c58      	adds	r0, r3, #1
 8027ff2:	6010      	str	r0, [r2, #0]
 8027ff4:	7019      	strb	r1, [r3, #0]
 8027ff6:	4608      	mov	r0, r1
 8027ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027ffc:	4770      	bx	lr

08027ffe <__sfputs_r>:
 8027ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028000:	4606      	mov	r6, r0
 8028002:	460f      	mov	r7, r1
 8028004:	4614      	mov	r4, r2
 8028006:	18d5      	adds	r5, r2, r3
 8028008:	42ac      	cmp	r4, r5
 802800a:	d101      	bne.n	8028010 <__sfputs_r+0x12>
 802800c:	2000      	movs	r0, #0
 802800e:	e007      	b.n	8028020 <__sfputs_r+0x22>
 8028010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028014:	463a      	mov	r2, r7
 8028016:	4630      	mov	r0, r6
 8028018:	f7ff ffda 	bl	8027fd0 <__sfputc_r>
 802801c:	1c43      	adds	r3, r0, #1
 802801e:	d1f3      	bne.n	8028008 <__sfputs_r+0xa>
 8028020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028024 <_vfiprintf_r>:
 8028024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028028:	460d      	mov	r5, r1
 802802a:	b09d      	sub	sp, #116	@ 0x74
 802802c:	4614      	mov	r4, r2
 802802e:	4698      	mov	r8, r3
 8028030:	4606      	mov	r6, r0
 8028032:	b118      	cbz	r0, 802803c <_vfiprintf_r+0x18>
 8028034:	6a03      	ldr	r3, [r0, #32]
 8028036:	b90b      	cbnz	r3, 802803c <_vfiprintf_r+0x18>
 8028038:	f7fd fa1e 	bl	8025478 <__sinit>
 802803c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802803e:	07d9      	lsls	r1, r3, #31
 8028040:	d405      	bmi.n	802804e <_vfiprintf_r+0x2a>
 8028042:	89ab      	ldrh	r3, [r5, #12]
 8028044:	059a      	lsls	r2, r3, #22
 8028046:	d402      	bmi.n	802804e <_vfiprintf_r+0x2a>
 8028048:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802804a:	f7fd fbd6 	bl	80257fa <__retarget_lock_acquire_recursive>
 802804e:	89ab      	ldrh	r3, [r5, #12]
 8028050:	071b      	lsls	r3, r3, #28
 8028052:	d501      	bpl.n	8028058 <_vfiprintf_r+0x34>
 8028054:	692b      	ldr	r3, [r5, #16]
 8028056:	b99b      	cbnz	r3, 8028080 <_vfiprintf_r+0x5c>
 8028058:	4629      	mov	r1, r5
 802805a:	4630      	mov	r0, r6
 802805c:	f000 fbb8 	bl	80287d0 <__swsetup_r>
 8028060:	b170      	cbz	r0, 8028080 <_vfiprintf_r+0x5c>
 8028062:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8028064:	07dc      	lsls	r4, r3, #31
 8028066:	d504      	bpl.n	8028072 <_vfiprintf_r+0x4e>
 8028068:	f04f 30ff 	mov.w	r0, #4294967295
 802806c:	b01d      	add	sp, #116	@ 0x74
 802806e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028072:	89ab      	ldrh	r3, [r5, #12]
 8028074:	0598      	lsls	r0, r3, #22
 8028076:	d4f7      	bmi.n	8028068 <_vfiprintf_r+0x44>
 8028078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802807a:	f7fd fbbf 	bl	80257fc <__retarget_lock_release_recursive>
 802807e:	e7f3      	b.n	8028068 <_vfiprintf_r+0x44>
 8028080:	2300      	movs	r3, #0
 8028082:	9309      	str	r3, [sp, #36]	@ 0x24
 8028084:	2320      	movs	r3, #32
 8028086:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802808a:	f8cd 800c 	str.w	r8, [sp, #12]
 802808e:	2330      	movs	r3, #48	@ 0x30
 8028090:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8028240 <_vfiprintf_r+0x21c>
 8028094:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8028098:	f04f 0901 	mov.w	r9, #1
 802809c:	4623      	mov	r3, r4
 802809e:	469a      	mov	sl, r3
 80280a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80280a4:	b10a      	cbz	r2, 80280aa <_vfiprintf_r+0x86>
 80280a6:	2a25      	cmp	r2, #37	@ 0x25
 80280a8:	d1f9      	bne.n	802809e <_vfiprintf_r+0x7a>
 80280aa:	ebba 0b04 	subs.w	fp, sl, r4
 80280ae:	d00b      	beq.n	80280c8 <_vfiprintf_r+0xa4>
 80280b0:	465b      	mov	r3, fp
 80280b2:	4622      	mov	r2, r4
 80280b4:	4629      	mov	r1, r5
 80280b6:	4630      	mov	r0, r6
 80280b8:	f7ff ffa1 	bl	8027ffe <__sfputs_r>
 80280bc:	3001      	adds	r0, #1
 80280be:	f000 80a7 	beq.w	8028210 <_vfiprintf_r+0x1ec>
 80280c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80280c4:	445a      	add	r2, fp
 80280c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80280c8:	f89a 3000 	ldrb.w	r3, [sl]
 80280cc:	2b00      	cmp	r3, #0
 80280ce:	f000 809f 	beq.w	8028210 <_vfiprintf_r+0x1ec>
 80280d2:	2300      	movs	r3, #0
 80280d4:	f04f 32ff 	mov.w	r2, #4294967295
 80280d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80280dc:	f10a 0a01 	add.w	sl, sl, #1
 80280e0:	9304      	str	r3, [sp, #16]
 80280e2:	9307      	str	r3, [sp, #28]
 80280e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80280e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80280ea:	4654      	mov	r4, sl
 80280ec:	2205      	movs	r2, #5
 80280ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80280f2:	4853      	ldr	r0, [pc, #332]	@ (8028240 <_vfiprintf_r+0x21c>)
 80280f4:	f7d8 f8f4 	bl	80002e0 <memchr>
 80280f8:	9a04      	ldr	r2, [sp, #16]
 80280fa:	b9d8      	cbnz	r0, 8028134 <_vfiprintf_r+0x110>
 80280fc:	06d1      	lsls	r1, r2, #27
 80280fe:	bf44      	itt	mi
 8028100:	2320      	movmi	r3, #32
 8028102:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8028106:	0713      	lsls	r3, r2, #28
 8028108:	bf44      	itt	mi
 802810a:	232b      	movmi	r3, #43	@ 0x2b
 802810c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8028110:	f89a 3000 	ldrb.w	r3, [sl]
 8028114:	2b2a      	cmp	r3, #42	@ 0x2a
 8028116:	d015      	beq.n	8028144 <_vfiprintf_r+0x120>
 8028118:	9a07      	ldr	r2, [sp, #28]
 802811a:	4654      	mov	r4, sl
 802811c:	2000      	movs	r0, #0
 802811e:	f04f 0c0a 	mov.w	ip, #10
 8028122:	4621      	mov	r1, r4
 8028124:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028128:	3b30      	subs	r3, #48	@ 0x30
 802812a:	2b09      	cmp	r3, #9
 802812c:	d94b      	bls.n	80281c6 <_vfiprintf_r+0x1a2>
 802812e:	b1b0      	cbz	r0, 802815e <_vfiprintf_r+0x13a>
 8028130:	9207      	str	r2, [sp, #28]
 8028132:	e014      	b.n	802815e <_vfiprintf_r+0x13a>
 8028134:	eba0 0308 	sub.w	r3, r0, r8
 8028138:	fa09 f303 	lsl.w	r3, r9, r3
 802813c:	4313      	orrs	r3, r2
 802813e:	9304      	str	r3, [sp, #16]
 8028140:	46a2      	mov	sl, r4
 8028142:	e7d2      	b.n	80280ea <_vfiprintf_r+0xc6>
 8028144:	9b03      	ldr	r3, [sp, #12]
 8028146:	1d19      	adds	r1, r3, #4
 8028148:	681b      	ldr	r3, [r3, #0]
 802814a:	9103      	str	r1, [sp, #12]
 802814c:	2b00      	cmp	r3, #0
 802814e:	bfbb      	ittet	lt
 8028150:	425b      	neglt	r3, r3
 8028152:	f042 0202 	orrlt.w	r2, r2, #2
 8028156:	9307      	strge	r3, [sp, #28]
 8028158:	9307      	strlt	r3, [sp, #28]
 802815a:	bfb8      	it	lt
 802815c:	9204      	strlt	r2, [sp, #16]
 802815e:	7823      	ldrb	r3, [r4, #0]
 8028160:	2b2e      	cmp	r3, #46	@ 0x2e
 8028162:	d10a      	bne.n	802817a <_vfiprintf_r+0x156>
 8028164:	7863      	ldrb	r3, [r4, #1]
 8028166:	2b2a      	cmp	r3, #42	@ 0x2a
 8028168:	d132      	bne.n	80281d0 <_vfiprintf_r+0x1ac>
 802816a:	9b03      	ldr	r3, [sp, #12]
 802816c:	1d1a      	adds	r2, r3, #4
 802816e:	681b      	ldr	r3, [r3, #0]
 8028170:	9203      	str	r2, [sp, #12]
 8028172:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8028176:	3402      	adds	r4, #2
 8028178:	9305      	str	r3, [sp, #20]
 802817a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8028250 <_vfiprintf_r+0x22c>
 802817e:	7821      	ldrb	r1, [r4, #0]
 8028180:	2203      	movs	r2, #3
 8028182:	4650      	mov	r0, sl
 8028184:	f7d8 f8ac 	bl	80002e0 <memchr>
 8028188:	b138      	cbz	r0, 802819a <_vfiprintf_r+0x176>
 802818a:	9b04      	ldr	r3, [sp, #16]
 802818c:	eba0 000a 	sub.w	r0, r0, sl
 8028190:	2240      	movs	r2, #64	@ 0x40
 8028192:	4082      	lsls	r2, r0
 8028194:	4313      	orrs	r3, r2
 8028196:	3401      	adds	r4, #1
 8028198:	9304      	str	r3, [sp, #16]
 802819a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802819e:	4829      	ldr	r0, [pc, #164]	@ (8028244 <_vfiprintf_r+0x220>)
 80281a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80281a4:	2206      	movs	r2, #6
 80281a6:	f7d8 f89b 	bl	80002e0 <memchr>
 80281aa:	2800      	cmp	r0, #0
 80281ac:	d03f      	beq.n	802822e <_vfiprintf_r+0x20a>
 80281ae:	4b26      	ldr	r3, [pc, #152]	@ (8028248 <_vfiprintf_r+0x224>)
 80281b0:	bb1b      	cbnz	r3, 80281fa <_vfiprintf_r+0x1d6>
 80281b2:	9b03      	ldr	r3, [sp, #12]
 80281b4:	3307      	adds	r3, #7
 80281b6:	f023 0307 	bic.w	r3, r3, #7
 80281ba:	3308      	adds	r3, #8
 80281bc:	9303      	str	r3, [sp, #12]
 80281be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80281c0:	443b      	add	r3, r7
 80281c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80281c4:	e76a      	b.n	802809c <_vfiprintf_r+0x78>
 80281c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80281ca:	460c      	mov	r4, r1
 80281cc:	2001      	movs	r0, #1
 80281ce:	e7a8      	b.n	8028122 <_vfiprintf_r+0xfe>
 80281d0:	2300      	movs	r3, #0
 80281d2:	3401      	adds	r4, #1
 80281d4:	9305      	str	r3, [sp, #20]
 80281d6:	4619      	mov	r1, r3
 80281d8:	f04f 0c0a 	mov.w	ip, #10
 80281dc:	4620      	mov	r0, r4
 80281de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80281e2:	3a30      	subs	r2, #48	@ 0x30
 80281e4:	2a09      	cmp	r2, #9
 80281e6:	d903      	bls.n	80281f0 <_vfiprintf_r+0x1cc>
 80281e8:	2b00      	cmp	r3, #0
 80281ea:	d0c6      	beq.n	802817a <_vfiprintf_r+0x156>
 80281ec:	9105      	str	r1, [sp, #20]
 80281ee:	e7c4      	b.n	802817a <_vfiprintf_r+0x156>
 80281f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80281f4:	4604      	mov	r4, r0
 80281f6:	2301      	movs	r3, #1
 80281f8:	e7f0      	b.n	80281dc <_vfiprintf_r+0x1b8>
 80281fa:	ab03      	add	r3, sp, #12
 80281fc:	9300      	str	r3, [sp, #0]
 80281fe:	462a      	mov	r2, r5
 8028200:	4b12      	ldr	r3, [pc, #72]	@ (802824c <_vfiprintf_r+0x228>)
 8028202:	a904      	add	r1, sp, #16
 8028204:	4630      	mov	r0, r6
 8028206:	f7fc faf7 	bl	80247f8 <_printf_float>
 802820a:	4607      	mov	r7, r0
 802820c:	1c78      	adds	r0, r7, #1
 802820e:	d1d6      	bne.n	80281be <_vfiprintf_r+0x19a>
 8028210:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8028212:	07d9      	lsls	r1, r3, #31
 8028214:	d405      	bmi.n	8028222 <_vfiprintf_r+0x1fe>
 8028216:	89ab      	ldrh	r3, [r5, #12]
 8028218:	059a      	lsls	r2, r3, #22
 802821a:	d402      	bmi.n	8028222 <_vfiprintf_r+0x1fe>
 802821c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802821e:	f7fd faed 	bl	80257fc <__retarget_lock_release_recursive>
 8028222:	89ab      	ldrh	r3, [r5, #12]
 8028224:	065b      	lsls	r3, r3, #25
 8028226:	f53f af1f 	bmi.w	8028068 <_vfiprintf_r+0x44>
 802822a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802822c:	e71e      	b.n	802806c <_vfiprintf_r+0x48>
 802822e:	ab03      	add	r3, sp, #12
 8028230:	9300      	str	r3, [sp, #0]
 8028232:	462a      	mov	r2, r5
 8028234:	4b05      	ldr	r3, [pc, #20]	@ (802824c <_vfiprintf_r+0x228>)
 8028236:	a904      	add	r1, sp, #16
 8028238:	4630      	mov	r0, r6
 802823a:	f7fc fd65 	bl	8024d08 <_printf_i>
 802823e:	e7e4      	b.n	802820a <_vfiprintf_r+0x1e6>
 8028240:	0802d578 	.word	0x0802d578
 8028244:	0802d582 	.word	0x0802d582
 8028248:	080247f9 	.word	0x080247f9
 802824c:	08027fff 	.word	0x08027fff
 8028250:	0802d57e 	.word	0x0802d57e

08028254 <_scanf_chars>:
 8028254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028258:	4615      	mov	r5, r2
 802825a:	688a      	ldr	r2, [r1, #8]
 802825c:	4680      	mov	r8, r0
 802825e:	460c      	mov	r4, r1
 8028260:	b932      	cbnz	r2, 8028270 <_scanf_chars+0x1c>
 8028262:	698a      	ldr	r2, [r1, #24]
 8028264:	2a00      	cmp	r2, #0
 8028266:	bf14      	ite	ne
 8028268:	f04f 32ff 	movne.w	r2, #4294967295
 802826c:	2201      	moveq	r2, #1
 802826e:	608a      	str	r2, [r1, #8]
 8028270:	6822      	ldr	r2, [r4, #0]
 8028272:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8028304 <_scanf_chars+0xb0>
 8028276:	06d1      	lsls	r1, r2, #27
 8028278:	bf5f      	itttt	pl
 802827a:	681a      	ldrpl	r2, [r3, #0]
 802827c:	1d11      	addpl	r1, r2, #4
 802827e:	6019      	strpl	r1, [r3, #0]
 8028280:	6816      	ldrpl	r6, [r2, #0]
 8028282:	2700      	movs	r7, #0
 8028284:	69a0      	ldr	r0, [r4, #24]
 8028286:	b188      	cbz	r0, 80282ac <_scanf_chars+0x58>
 8028288:	2801      	cmp	r0, #1
 802828a:	d107      	bne.n	802829c <_scanf_chars+0x48>
 802828c:	682b      	ldr	r3, [r5, #0]
 802828e:	781a      	ldrb	r2, [r3, #0]
 8028290:	6963      	ldr	r3, [r4, #20]
 8028292:	5c9b      	ldrb	r3, [r3, r2]
 8028294:	b953      	cbnz	r3, 80282ac <_scanf_chars+0x58>
 8028296:	2f00      	cmp	r7, #0
 8028298:	d031      	beq.n	80282fe <_scanf_chars+0xaa>
 802829a:	e022      	b.n	80282e2 <_scanf_chars+0x8e>
 802829c:	2802      	cmp	r0, #2
 802829e:	d120      	bne.n	80282e2 <_scanf_chars+0x8e>
 80282a0:	682b      	ldr	r3, [r5, #0]
 80282a2:	781b      	ldrb	r3, [r3, #0]
 80282a4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80282a8:	071b      	lsls	r3, r3, #28
 80282aa:	d41a      	bmi.n	80282e2 <_scanf_chars+0x8e>
 80282ac:	6823      	ldr	r3, [r4, #0]
 80282ae:	06da      	lsls	r2, r3, #27
 80282b0:	bf5e      	ittt	pl
 80282b2:	682b      	ldrpl	r3, [r5, #0]
 80282b4:	781b      	ldrbpl	r3, [r3, #0]
 80282b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80282ba:	682a      	ldr	r2, [r5, #0]
 80282bc:	686b      	ldr	r3, [r5, #4]
 80282be:	3201      	adds	r2, #1
 80282c0:	602a      	str	r2, [r5, #0]
 80282c2:	68a2      	ldr	r2, [r4, #8]
 80282c4:	3b01      	subs	r3, #1
 80282c6:	3a01      	subs	r2, #1
 80282c8:	606b      	str	r3, [r5, #4]
 80282ca:	3701      	adds	r7, #1
 80282cc:	60a2      	str	r2, [r4, #8]
 80282ce:	b142      	cbz	r2, 80282e2 <_scanf_chars+0x8e>
 80282d0:	2b00      	cmp	r3, #0
 80282d2:	dcd7      	bgt.n	8028284 <_scanf_chars+0x30>
 80282d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80282d8:	4629      	mov	r1, r5
 80282da:	4640      	mov	r0, r8
 80282dc:	4798      	blx	r3
 80282de:	2800      	cmp	r0, #0
 80282e0:	d0d0      	beq.n	8028284 <_scanf_chars+0x30>
 80282e2:	6823      	ldr	r3, [r4, #0]
 80282e4:	f013 0310 	ands.w	r3, r3, #16
 80282e8:	d105      	bne.n	80282f6 <_scanf_chars+0xa2>
 80282ea:	68e2      	ldr	r2, [r4, #12]
 80282ec:	3201      	adds	r2, #1
 80282ee:	60e2      	str	r2, [r4, #12]
 80282f0:	69a2      	ldr	r2, [r4, #24]
 80282f2:	b102      	cbz	r2, 80282f6 <_scanf_chars+0xa2>
 80282f4:	7033      	strb	r3, [r6, #0]
 80282f6:	6923      	ldr	r3, [r4, #16]
 80282f8:	443b      	add	r3, r7
 80282fa:	6123      	str	r3, [r4, #16]
 80282fc:	2000      	movs	r0, #0
 80282fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028302:	bf00      	nop
 8028304:	0802d1e0 	.word	0x0802d1e0

08028308 <_scanf_i>:
 8028308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802830c:	4698      	mov	r8, r3
 802830e:	4b74      	ldr	r3, [pc, #464]	@ (80284e0 <_scanf_i+0x1d8>)
 8028310:	460c      	mov	r4, r1
 8028312:	4682      	mov	sl, r0
 8028314:	4616      	mov	r6, r2
 8028316:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802831a:	b087      	sub	sp, #28
 802831c:	ab03      	add	r3, sp, #12
 802831e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8028322:	4b70      	ldr	r3, [pc, #448]	@ (80284e4 <_scanf_i+0x1dc>)
 8028324:	69a1      	ldr	r1, [r4, #24]
 8028326:	4a70      	ldr	r2, [pc, #448]	@ (80284e8 <_scanf_i+0x1e0>)
 8028328:	2903      	cmp	r1, #3
 802832a:	bf08      	it	eq
 802832c:	461a      	moveq	r2, r3
 802832e:	68a3      	ldr	r3, [r4, #8]
 8028330:	9201      	str	r2, [sp, #4]
 8028332:	1e5a      	subs	r2, r3, #1
 8028334:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8028338:	bf88      	it	hi
 802833a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 802833e:	4627      	mov	r7, r4
 8028340:	bf82      	ittt	hi
 8028342:	eb03 0905 	addhi.w	r9, r3, r5
 8028346:	f240 135d 	movwhi	r3, #349	@ 0x15d
 802834a:	60a3      	strhi	r3, [r4, #8]
 802834c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8028350:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8028354:	bf98      	it	ls
 8028356:	f04f 0900 	movls.w	r9, #0
 802835a:	6023      	str	r3, [r4, #0]
 802835c:	463d      	mov	r5, r7
 802835e:	f04f 0b00 	mov.w	fp, #0
 8028362:	6831      	ldr	r1, [r6, #0]
 8028364:	ab03      	add	r3, sp, #12
 8028366:	7809      	ldrb	r1, [r1, #0]
 8028368:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802836c:	2202      	movs	r2, #2
 802836e:	f7d7 ffb7 	bl	80002e0 <memchr>
 8028372:	b328      	cbz	r0, 80283c0 <_scanf_i+0xb8>
 8028374:	f1bb 0f01 	cmp.w	fp, #1
 8028378:	d159      	bne.n	802842e <_scanf_i+0x126>
 802837a:	6862      	ldr	r2, [r4, #4]
 802837c:	b92a      	cbnz	r2, 802838a <_scanf_i+0x82>
 802837e:	6822      	ldr	r2, [r4, #0]
 8028380:	2108      	movs	r1, #8
 8028382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8028386:	6061      	str	r1, [r4, #4]
 8028388:	6022      	str	r2, [r4, #0]
 802838a:	6822      	ldr	r2, [r4, #0]
 802838c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8028390:	6022      	str	r2, [r4, #0]
 8028392:	68a2      	ldr	r2, [r4, #8]
 8028394:	1e51      	subs	r1, r2, #1
 8028396:	60a1      	str	r1, [r4, #8]
 8028398:	b192      	cbz	r2, 80283c0 <_scanf_i+0xb8>
 802839a:	6832      	ldr	r2, [r6, #0]
 802839c:	1c51      	adds	r1, r2, #1
 802839e:	6031      	str	r1, [r6, #0]
 80283a0:	7812      	ldrb	r2, [r2, #0]
 80283a2:	f805 2b01 	strb.w	r2, [r5], #1
 80283a6:	6872      	ldr	r2, [r6, #4]
 80283a8:	3a01      	subs	r2, #1
 80283aa:	2a00      	cmp	r2, #0
 80283ac:	6072      	str	r2, [r6, #4]
 80283ae:	dc07      	bgt.n	80283c0 <_scanf_i+0xb8>
 80283b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80283b4:	4631      	mov	r1, r6
 80283b6:	4650      	mov	r0, sl
 80283b8:	4790      	blx	r2
 80283ba:	2800      	cmp	r0, #0
 80283bc:	f040 8085 	bne.w	80284ca <_scanf_i+0x1c2>
 80283c0:	f10b 0b01 	add.w	fp, fp, #1
 80283c4:	f1bb 0f03 	cmp.w	fp, #3
 80283c8:	d1cb      	bne.n	8028362 <_scanf_i+0x5a>
 80283ca:	6863      	ldr	r3, [r4, #4]
 80283cc:	b90b      	cbnz	r3, 80283d2 <_scanf_i+0xca>
 80283ce:	230a      	movs	r3, #10
 80283d0:	6063      	str	r3, [r4, #4]
 80283d2:	6863      	ldr	r3, [r4, #4]
 80283d4:	4945      	ldr	r1, [pc, #276]	@ (80284ec <_scanf_i+0x1e4>)
 80283d6:	6960      	ldr	r0, [r4, #20]
 80283d8:	1ac9      	subs	r1, r1, r3
 80283da:	f000 f947 	bl	802866c <__sccl>
 80283de:	f04f 0b00 	mov.w	fp, #0
 80283e2:	68a3      	ldr	r3, [r4, #8]
 80283e4:	6822      	ldr	r2, [r4, #0]
 80283e6:	2b00      	cmp	r3, #0
 80283e8:	d03d      	beq.n	8028466 <_scanf_i+0x15e>
 80283ea:	6831      	ldr	r1, [r6, #0]
 80283ec:	6960      	ldr	r0, [r4, #20]
 80283ee:	f891 c000 	ldrb.w	ip, [r1]
 80283f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80283f6:	2800      	cmp	r0, #0
 80283f8:	d035      	beq.n	8028466 <_scanf_i+0x15e>
 80283fa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80283fe:	d124      	bne.n	802844a <_scanf_i+0x142>
 8028400:	0510      	lsls	r0, r2, #20
 8028402:	d522      	bpl.n	802844a <_scanf_i+0x142>
 8028404:	f10b 0b01 	add.w	fp, fp, #1
 8028408:	f1b9 0f00 	cmp.w	r9, #0
 802840c:	d003      	beq.n	8028416 <_scanf_i+0x10e>
 802840e:	3301      	adds	r3, #1
 8028410:	f109 39ff 	add.w	r9, r9, #4294967295
 8028414:	60a3      	str	r3, [r4, #8]
 8028416:	6873      	ldr	r3, [r6, #4]
 8028418:	3b01      	subs	r3, #1
 802841a:	2b00      	cmp	r3, #0
 802841c:	6073      	str	r3, [r6, #4]
 802841e:	dd1b      	ble.n	8028458 <_scanf_i+0x150>
 8028420:	6833      	ldr	r3, [r6, #0]
 8028422:	3301      	adds	r3, #1
 8028424:	6033      	str	r3, [r6, #0]
 8028426:	68a3      	ldr	r3, [r4, #8]
 8028428:	3b01      	subs	r3, #1
 802842a:	60a3      	str	r3, [r4, #8]
 802842c:	e7d9      	b.n	80283e2 <_scanf_i+0xda>
 802842e:	f1bb 0f02 	cmp.w	fp, #2
 8028432:	d1ae      	bne.n	8028392 <_scanf_i+0x8a>
 8028434:	6822      	ldr	r2, [r4, #0]
 8028436:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 802843a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802843e:	d1bf      	bne.n	80283c0 <_scanf_i+0xb8>
 8028440:	2110      	movs	r1, #16
 8028442:	6061      	str	r1, [r4, #4]
 8028444:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8028448:	e7a2      	b.n	8028390 <_scanf_i+0x88>
 802844a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 802844e:	6022      	str	r2, [r4, #0]
 8028450:	780b      	ldrb	r3, [r1, #0]
 8028452:	f805 3b01 	strb.w	r3, [r5], #1
 8028456:	e7de      	b.n	8028416 <_scanf_i+0x10e>
 8028458:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 802845c:	4631      	mov	r1, r6
 802845e:	4650      	mov	r0, sl
 8028460:	4798      	blx	r3
 8028462:	2800      	cmp	r0, #0
 8028464:	d0df      	beq.n	8028426 <_scanf_i+0x11e>
 8028466:	6823      	ldr	r3, [r4, #0]
 8028468:	05d9      	lsls	r1, r3, #23
 802846a:	d50d      	bpl.n	8028488 <_scanf_i+0x180>
 802846c:	42bd      	cmp	r5, r7
 802846e:	d909      	bls.n	8028484 <_scanf_i+0x17c>
 8028470:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8028474:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8028478:	4632      	mov	r2, r6
 802847a:	4650      	mov	r0, sl
 802847c:	4798      	blx	r3
 802847e:	f105 39ff 	add.w	r9, r5, #4294967295
 8028482:	464d      	mov	r5, r9
 8028484:	42bd      	cmp	r5, r7
 8028486:	d028      	beq.n	80284da <_scanf_i+0x1d2>
 8028488:	6822      	ldr	r2, [r4, #0]
 802848a:	f012 0210 	ands.w	r2, r2, #16
 802848e:	d113      	bne.n	80284b8 <_scanf_i+0x1b0>
 8028490:	702a      	strb	r2, [r5, #0]
 8028492:	6863      	ldr	r3, [r4, #4]
 8028494:	9e01      	ldr	r6, [sp, #4]
 8028496:	4639      	mov	r1, r7
 8028498:	4650      	mov	r0, sl
 802849a:	47b0      	blx	r6
 802849c:	f8d8 3000 	ldr.w	r3, [r8]
 80284a0:	6821      	ldr	r1, [r4, #0]
 80284a2:	1d1a      	adds	r2, r3, #4
 80284a4:	f8c8 2000 	str.w	r2, [r8]
 80284a8:	f011 0f20 	tst.w	r1, #32
 80284ac:	681b      	ldr	r3, [r3, #0]
 80284ae:	d00f      	beq.n	80284d0 <_scanf_i+0x1c8>
 80284b0:	6018      	str	r0, [r3, #0]
 80284b2:	68e3      	ldr	r3, [r4, #12]
 80284b4:	3301      	adds	r3, #1
 80284b6:	60e3      	str	r3, [r4, #12]
 80284b8:	6923      	ldr	r3, [r4, #16]
 80284ba:	1bed      	subs	r5, r5, r7
 80284bc:	445d      	add	r5, fp
 80284be:	442b      	add	r3, r5
 80284c0:	6123      	str	r3, [r4, #16]
 80284c2:	2000      	movs	r0, #0
 80284c4:	b007      	add	sp, #28
 80284c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80284ca:	f04f 0b00 	mov.w	fp, #0
 80284ce:	e7ca      	b.n	8028466 <_scanf_i+0x15e>
 80284d0:	07ca      	lsls	r2, r1, #31
 80284d2:	bf4c      	ite	mi
 80284d4:	8018      	strhmi	r0, [r3, #0]
 80284d6:	6018      	strpl	r0, [r3, #0]
 80284d8:	e7eb      	b.n	80284b2 <_scanf_i+0x1aa>
 80284da:	2001      	movs	r0, #1
 80284dc:	e7f2      	b.n	80284c4 <_scanf_i+0x1bc>
 80284de:	bf00      	nop
 80284e0:	0802cfa4 	.word	0x0802cfa4
 80284e4:	080246d9 	.word	0x080246d9
 80284e8:	08029095 	.word	0x08029095
 80284ec:	0802d599 	.word	0x0802d599

080284f0 <__sflush_r>:
 80284f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80284f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80284f8:	0716      	lsls	r6, r2, #28
 80284fa:	4605      	mov	r5, r0
 80284fc:	460c      	mov	r4, r1
 80284fe:	d454      	bmi.n	80285aa <__sflush_r+0xba>
 8028500:	684b      	ldr	r3, [r1, #4]
 8028502:	2b00      	cmp	r3, #0
 8028504:	dc02      	bgt.n	802850c <__sflush_r+0x1c>
 8028506:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8028508:	2b00      	cmp	r3, #0
 802850a:	dd48      	ble.n	802859e <__sflush_r+0xae>
 802850c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802850e:	2e00      	cmp	r6, #0
 8028510:	d045      	beq.n	802859e <__sflush_r+0xae>
 8028512:	2300      	movs	r3, #0
 8028514:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8028518:	682f      	ldr	r7, [r5, #0]
 802851a:	6a21      	ldr	r1, [r4, #32]
 802851c:	602b      	str	r3, [r5, #0]
 802851e:	d030      	beq.n	8028582 <__sflush_r+0x92>
 8028520:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8028522:	89a3      	ldrh	r3, [r4, #12]
 8028524:	0759      	lsls	r1, r3, #29
 8028526:	d505      	bpl.n	8028534 <__sflush_r+0x44>
 8028528:	6863      	ldr	r3, [r4, #4]
 802852a:	1ad2      	subs	r2, r2, r3
 802852c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802852e:	b10b      	cbz	r3, 8028534 <__sflush_r+0x44>
 8028530:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8028532:	1ad2      	subs	r2, r2, r3
 8028534:	2300      	movs	r3, #0
 8028536:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8028538:	6a21      	ldr	r1, [r4, #32]
 802853a:	4628      	mov	r0, r5
 802853c:	47b0      	blx	r6
 802853e:	1c43      	adds	r3, r0, #1
 8028540:	89a3      	ldrh	r3, [r4, #12]
 8028542:	d106      	bne.n	8028552 <__sflush_r+0x62>
 8028544:	6829      	ldr	r1, [r5, #0]
 8028546:	291d      	cmp	r1, #29
 8028548:	d82b      	bhi.n	80285a2 <__sflush_r+0xb2>
 802854a:	4a2a      	ldr	r2, [pc, #168]	@ (80285f4 <__sflush_r+0x104>)
 802854c:	410a      	asrs	r2, r1
 802854e:	07d6      	lsls	r6, r2, #31
 8028550:	d427      	bmi.n	80285a2 <__sflush_r+0xb2>
 8028552:	2200      	movs	r2, #0
 8028554:	6062      	str	r2, [r4, #4]
 8028556:	04d9      	lsls	r1, r3, #19
 8028558:	6922      	ldr	r2, [r4, #16]
 802855a:	6022      	str	r2, [r4, #0]
 802855c:	d504      	bpl.n	8028568 <__sflush_r+0x78>
 802855e:	1c42      	adds	r2, r0, #1
 8028560:	d101      	bne.n	8028566 <__sflush_r+0x76>
 8028562:	682b      	ldr	r3, [r5, #0]
 8028564:	b903      	cbnz	r3, 8028568 <__sflush_r+0x78>
 8028566:	6560      	str	r0, [r4, #84]	@ 0x54
 8028568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802856a:	602f      	str	r7, [r5, #0]
 802856c:	b1b9      	cbz	r1, 802859e <__sflush_r+0xae>
 802856e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8028572:	4299      	cmp	r1, r3
 8028574:	d002      	beq.n	802857c <__sflush_r+0x8c>
 8028576:	4628      	mov	r0, r5
 8028578:	f7fd ff54 	bl	8026424 <_free_r>
 802857c:	2300      	movs	r3, #0
 802857e:	6363      	str	r3, [r4, #52]	@ 0x34
 8028580:	e00d      	b.n	802859e <__sflush_r+0xae>
 8028582:	2301      	movs	r3, #1
 8028584:	4628      	mov	r0, r5
 8028586:	47b0      	blx	r6
 8028588:	4602      	mov	r2, r0
 802858a:	1c50      	adds	r0, r2, #1
 802858c:	d1c9      	bne.n	8028522 <__sflush_r+0x32>
 802858e:	682b      	ldr	r3, [r5, #0]
 8028590:	2b00      	cmp	r3, #0
 8028592:	d0c6      	beq.n	8028522 <__sflush_r+0x32>
 8028594:	2b1d      	cmp	r3, #29
 8028596:	d001      	beq.n	802859c <__sflush_r+0xac>
 8028598:	2b16      	cmp	r3, #22
 802859a:	d11e      	bne.n	80285da <__sflush_r+0xea>
 802859c:	602f      	str	r7, [r5, #0]
 802859e:	2000      	movs	r0, #0
 80285a0:	e022      	b.n	80285e8 <__sflush_r+0xf8>
 80285a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80285a6:	b21b      	sxth	r3, r3
 80285a8:	e01b      	b.n	80285e2 <__sflush_r+0xf2>
 80285aa:	690f      	ldr	r7, [r1, #16]
 80285ac:	2f00      	cmp	r7, #0
 80285ae:	d0f6      	beq.n	802859e <__sflush_r+0xae>
 80285b0:	0793      	lsls	r3, r2, #30
 80285b2:	680e      	ldr	r6, [r1, #0]
 80285b4:	bf08      	it	eq
 80285b6:	694b      	ldreq	r3, [r1, #20]
 80285b8:	600f      	str	r7, [r1, #0]
 80285ba:	bf18      	it	ne
 80285bc:	2300      	movne	r3, #0
 80285be:	eba6 0807 	sub.w	r8, r6, r7
 80285c2:	608b      	str	r3, [r1, #8]
 80285c4:	f1b8 0f00 	cmp.w	r8, #0
 80285c8:	dde9      	ble.n	802859e <__sflush_r+0xae>
 80285ca:	6a21      	ldr	r1, [r4, #32]
 80285cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80285ce:	4643      	mov	r3, r8
 80285d0:	463a      	mov	r2, r7
 80285d2:	4628      	mov	r0, r5
 80285d4:	47b0      	blx	r6
 80285d6:	2800      	cmp	r0, #0
 80285d8:	dc08      	bgt.n	80285ec <__sflush_r+0xfc>
 80285da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80285de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80285e2:	81a3      	strh	r3, [r4, #12]
 80285e4:	f04f 30ff 	mov.w	r0, #4294967295
 80285e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80285ec:	4407      	add	r7, r0
 80285ee:	eba8 0800 	sub.w	r8, r8, r0
 80285f2:	e7e7      	b.n	80285c4 <__sflush_r+0xd4>
 80285f4:	dfbffffe 	.word	0xdfbffffe

080285f8 <_fflush_r>:
 80285f8:	b538      	push	{r3, r4, r5, lr}
 80285fa:	690b      	ldr	r3, [r1, #16]
 80285fc:	4605      	mov	r5, r0
 80285fe:	460c      	mov	r4, r1
 8028600:	b913      	cbnz	r3, 8028608 <_fflush_r+0x10>
 8028602:	2500      	movs	r5, #0
 8028604:	4628      	mov	r0, r5
 8028606:	bd38      	pop	{r3, r4, r5, pc}
 8028608:	b118      	cbz	r0, 8028612 <_fflush_r+0x1a>
 802860a:	6a03      	ldr	r3, [r0, #32]
 802860c:	b90b      	cbnz	r3, 8028612 <_fflush_r+0x1a>
 802860e:	f7fc ff33 	bl	8025478 <__sinit>
 8028612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028616:	2b00      	cmp	r3, #0
 8028618:	d0f3      	beq.n	8028602 <_fflush_r+0xa>
 802861a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802861c:	07d0      	lsls	r0, r2, #31
 802861e:	d404      	bmi.n	802862a <_fflush_r+0x32>
 8028620:	0599      	lsls	r1, r3, #22
 8028622:	d402      	bmi.n	802862a <_fflush_r+0x32>
 8028624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028626:	f7fd f8e8 	bl	80257fa <__retarget_lock_acquire_recursive>
 802862a:	4628      	mov	r0, r5
 802862c:	4621      	mov	r1, r4
 802862e:	f7ff ff5f 	bl	80284f0 <__sflush_r>
 8028632:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028634:	07da      	lsls	r2, r3, #31
 8028636:	4605      	mov	r5, r0
 8028638:	d4e4      	bmi.n	8028604 <_fflush_r+0xc>
 802863a:	89a3      	ldrh	r3, [r4, #12]
 802863c:	059b      	lsls	r3, r3, #22
 802863e:	d4e1      	bmi.n	8028604 <_fflush_r+0xc>
 8028640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028642:	f7fd f8db 	bl	80257fc <__retarget_lock_release_recursive>
 8028646:	e7dd      	b.n	8028604 <_fflush_r+0xc>

08028648 <fiprintf>:
 8028648:	b40e      	push	{r1, r2, r3}
 802864a:	b503      	push	{r0, r1, lr}
 802864c:	4601      	mov	r1, r0
 802864e:	ab03      	add	r3, sp, #12
 8028650:	4805      	ldr	r0, [pc, #20]	@ (8028668 <fiprintf+0x20>)
 8028652:	f853 2b04 	ldr.w	r2, [r3], #4
 8028656:	6800      	ldr	r0, [r0, #0]
 8028658:	9301      	str	r3, [sp, #4]
 802865a:	f7ff fce3 	bl	8028024 <_vfiprintf_r>
 802865e:	b002      	add	sp, #8
 8028660:	f85d eb04 	ldr.w	lr, [sp], #4
 8028664:	b003      	add	sp, #12
 8028666:	4770      	bx	lr
 8028668:	24000224 	.word	0x24000224

0802866c <__sccl>:
 802866c:	b570      	push	{r4, r5, r6, lr}
 802866e:	780b      	ldrb	r3, [r1, #0]
 8028670:	4604      	mov	r4, r0
 8028672:	2b5e      	cmp	r3, #94	@ 0x5e
 8028674:	bf0b      	itete	eq
 8028676:	784b      	ldrbeq	r3, [r1, #1]
 8028678:	1c4a      	addne	r2, r1, #1
 802867a:	1c8a      	addeq	r2, r1, #2
 802867c:	2100      	movne	r1, #0
 802867e:	bf08      	it	eq
 8028680:	2101      	moveq	r1, #1
 8028682:	3801      	subs	r0, #1
 8028684:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8028688:	f800 1f01 	strb.w	r1, [r0, #1]!
 802868c:	42a8      	cmp	r0, r5
 802868e:	d1fb      	bne.n	8028688 <__sccl+0x1c>
 8028690:	b90b      	cbnz	r3, 8028696 <__sccl+0x2a>
 8028692:	1e50      	subs	r0, r2, #1
 8028694:	bd70      	pop	{r4, r5, r6, pc}
 8028696:	f081 0101 	eor.w	r1, r1, #1
 802869a:	54e1      	strb	r1, [r4, r3]
 802869c:	4610      	mov	r0, r2
 802869e:	4602      	mov	r2, r0
 80286a0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80286a4:	2d2d      	cmp	r5, #45	@ 0x2d
 80286a6:	d005      	beq.n	80286b4 <__sccl+0x48>
 80286a8:	2d5d      	cmp	r5, #93	@ 0x5d
 80286aa:	d016      	beq.n	80286da <__sccl+0x6e>
 80286ac:	2d00      	cmp	r5, #0
 80286ae:	d0f1      	beq.n	8028694 <__sccl+0x28>
 80286b0:	462b      	mov	r3, r5
 80286b2:	e7f2      	b.n	802869a <__sccl+0x2e>
 80286b4:	7846      	ldrb	r6, [r0, #1]
 80286b6:	2e5d      	cmp	r6, #93	@ 0x5d
 80286b8:	d0fa      	beq.n	80286b0 <__sccl+0x44>
 80286ba:	42b3      	cmp	r3, r6
 80286bc:	dcf8      	bgt.n	80286b0 <__sccl+0x44>
 80286be:	3002      	adds	r0, #2
 80286c0:	461a      	mov	r2, r3
 80286c2:	3201      	adds	r2, #1
 80286c4:	4296      	cmp	r6, r2
 80286c6:	54a1      	strb	r1, [r4, r2]
 80286c8:	dcfb      	bgt.n	80286c2 <__sccl+0x56>
 80286ca:	1af2      	subs	r2, r6, r3
 80286cc:	3a01      	subs	r2, #1
 80286ce:	1c5d      	adds	r5, r3, #1
 80286d0:	42b3      	cmp	r3, r6
 80286d2:	bfa8      	it	ge
 80286d4:	2200      	movge	r2, #0
 80286d6:	18ab      	adds	r3, r5, r2
 80286d8:	e7e1      	b.n	802869e <__sccl+0x32>
 80286da:	4610      	mov	r0, r2
 80286dc:	e7da      	b.n	8028694 <__sccl+0x28>

080286de <__submore>:
 80286de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80286e2:	460c      	mov	r4, r1
 80286e4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80286e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80286ea:	4299      	cmp	r1, r3
 80286ec:	d11d      	bne.n	802872a <__submore+0x4c>
 80286ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80286f2:	f7fb fead 	bl	8024450 <_malloc_r>
 80286f6:	b918      	cbnz	r0, 8028700 <__submore+0x22>
 80286f8:	f04f 30ff 	mov.w	r0, #4294967295
 80286fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028700:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8028704:	63a3      	str	r3, [r4, #56]	@ 0x38
 8028706:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 802870a:	6360      	str	r0, [r4, #52]	@ 0x34
 802870c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8028710:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8028714:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8028718:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 802871c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8028720:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8028724:	6020      	str	r0, [r4, #0]
 8028726:	2000      	movs	r0, #0
 8028728:	e7e8      	b.n	80286fc <__submore+0x1e>
 802872a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 802872c:	0077      	lsls	r7, r6, #1
 802872e:	463a      	mov	r2, r7
 8028730:	f000 fc13 	bl	8028f5a <_realloc_r>
 8028734:	4605      	mov	r5, r0
 8028736:	2800      	cmp	r0, #0
 8028738:	d0de      	beq.n	80286f8 <__submore+0x1a>
 802873a:	eb00 0806 	add.w	r8, r0, r6
 802873e:	4601      	mov	r1, r0
 8028740:	4632      	mov	r2, r6
 8028742:	4640      	mov	r0, r8
 8028744:	f7fd f85b 	bl	80257fe <memcpy>
 8028748:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 802874c:	f8c4 8000 	str.w	r8, [r4]
 8028750:	e7e9      	b.n	8028726 <__submore+0x48>

08028752 <__swbuf_r>:
 8028752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028754:	460e      	mov	r6, r1
 8028756:	4614      	mov	r4, r2
 8028758:	4605      	mov	r5, r0
 802875a:	b118      	cbz	r0, 8028764 <__swbuf_r+0x12>
 802875c:	6a03      	ldr	r3, [r0, #32]
 802875e:	b90b      	cbnz	r3, 8028764 <__swbuf_r+0x12>
 8028760:	f7fc fe8a 	bl	8025478 <__sinit>
 8028764:	69a3      	ldr	r3, [r4, #24]
 8028766:	60a3      	str	r3, [r4, #8]
 8028768:	89a3      	ldrh	r3, [r4, #12]
 802876a:	071a      	lsls	r2, r3, #28
 802876c:	d501      	bpl.n	8028772 <__swbuf_r+0x20>
 802876e:	6923      	ldr	r3, [r4, #16]
 8028770:	b943      	cbnz	r3, 8028784 <__swbuf_r+0x32>
 8028772:	4621      	mov	r1, r4
 8028774:	4628      	mov	r0, r5
 8028776:	f000 f82b 	bl	80287d0 <__swsetup_r>
 802877a:	b118      	cbz	r0, 8028784 <__swbuf_r+0x32>
 802877c:	f04f 37ff 	mov.w	r7, #4294967295
 8028780:	4638      	mov	r0, r7
 8028782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028784:	6823      	ldr	r3, [r4, #0]
 8028786:	6922      	ldr	r2, [r4, #16]
 8028788:	1a98      	subs	r0, r3, r2
 802878a:	6963      	ldr	r3, [r4, #20]
 802878c:	b2f6      	uxtb	r6, r6
 802878e:	4283      	cmp	r3, r0
 8028790:	4637      	mov	r7, r6
 8028792:	dc05      	bgt.n	80287a0 <__swbuf_r+0x4e>
 8028794:	4621      	mov	r1, r4
 8028796:	4628      	mov	r0, r5
 8028798:	f7ff ff2e 	bl	80285f8 <_fflush_r>
 802879c:	2800      	cmp	r0, #0
 802879e:	d1ed      	bne.n	802877c <__swbuf_r+0x2a>
 80287a0:	68a3      	ldr	r3, [r4, #8]
 80287a2:	3b01      	subs	r3, #1
 80287a4:	60a3      	str	r3, [r4, #8]
 80287a6:	6823      	ldr	r3, [r4, #0]
 80287a8:	1c5a      	adds	r2, r3, #1
 80287aa:	6022      	str	r2, [r4, #0]
 80287ac:	701e      	strb	r6, [r3, #0]
 80287ae:	6962      	ldr	r2, [r4, #20]
 80287b0:	1c43      	adds	r3, r0, #1
 80287b2:	429a      	cmp	r2, r3
 80287b4:	d004      	beq.n	80287c0 <__swbuf_r+0x6e>
 80287b6:	89a3      	ldrh	r3, [r4, #12]
 80287b8:	07db      	lsls	r3, r3, #31
 80287ba:	d5e1      	bpl.n	8028780 <__swbuf_r+0x2e>
 80287bc:	2e0a      	cmp	r6, #10
 80287be:	d1df      	bne.n	8028780 <__swbuf_r+0x2e>
 80287c0:	4621      	mov	r1, r4
 80287c2:	4628      	mov	r0, r5
 80287c4:	f7ff ff18 	bl	80285f8 <_fflush_r>
 80287c8:	2800      	cmp	r0, #0
 80287ca:	d0d9      	beq.n	8028780 <__swbuf_r+0x2e>
 80287cc:	e7d6      	b.n	802877c <__swbuf_r+0x2a>
	...

080287d0 <__swsetup_r>:
 80287d0:	b538      	push	{r3, r4, r5, lr}
 80287d2:	4b29      	ldr	r3, [pc, #164]	@ (8028878 <__swsetup_r+0xa8>)
 80287d4:	4605      	mov	r5, r0
 80287d6:	6818      	ldr	r0, [r3, #0]
 80287d8:	460c      	mov	r4, r1
 80287da:	b118      	cbz	r0, 80287e4 <__swsetup_r+0x14>
 80287dc:	6a03      	ldr	r3, [r0, #32]
 80287de:	b90b      	cbnz	r3, 80287e4 <__swsetup_r+0x14>
 80287e0:	f7fc fe4a 	bl	8025478 <__sinit>
 80287e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80287e8:	0719      	lsls	r1, r3, #28
 80287ea:	d422      	bmi.n	8028832 <__swsetup_r+0x62>
 80287ec:	06da      	lsls	r2, r3, #27
 80287ee:	d407      	bmi.n	8028800 <__swsetup_r+0x30>
 80287f0:	2209      	movs	r2, #9
 80287f2:	602a      	str	r2, [r5, #0]
 80287f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80287f8:	81a3      	strh	r3, [r4, #12]
 80287fa:	f04f 30ff 	mov.w	r0, #4294967295
 80287fe:	e033      	b.n	8028868 <__swsetup_r+0x98>
 8028800:	0758      	lsls	r0, r3, #29
 8028802:	d512      	bpl.n	802882a <__swsetup_r+0x5a>
 8028804:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028806:	b141      	cbz	r1, 802881a <__swsetup_r+0x4a>
 8028808:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802880c:	4299      	cmp	r1, r3
 802880e:	d002      	beq.n	8028816 <__swsetup_r+0x46>
 8028810:	4628      	mov	r0, r5
 8028812:	f7fd fe07 	bl	8026424 <_free_r>
 8028816:	2300      	movs	r3, #0
 8028818:	6363      	str	r3, [r4, #52]	@ 0x34
 802881a:	89a3      	ldrh	r3, [r4, #12]
 802881c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8028820:	81a3      	strh	r3, [r4, #12]
 8028822:	2300      	movs	r3, #0
 8028824:	6063      	str	r3, [r4, #4]
 8028826:	6923      	ldr	r3, [r4, #16]
 8028828:	6023      	str	r3, [r4, #0]
 802882a:	89a3      	ldrh	r3, [r4, #12]
 802882c:	f043 0308 	orr.w	r3, r3, #8
 8028830:	81a3      	strh	r3, [r4, #12]
 8028832:	6923      	ldr	r3, [r4, #16]
 8028834:	b94b      	cbnz	r3, 802884a <__swsetup_r+0x7a>
 8028836:	89a3      	ldrh	r3, [r4, #12]
 8028838:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802883c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8028840:	d003      	beq.n	802884a <__swsetup_r+0x7a>
 8028842:	4621      	mov	r1, r4
 8028844:	4628      	mov	r0, r5
 8028846:	f000 fc5a 	bl	80290fe <__smakebuf_r>
 802884a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802884e:	f013 0201 	ands.w	r2, r3, #1
 8028852:	d00a      	beq.n	802886a <__swsetup_r+0x9a>
 8028854:	2200      	movs	r2, #0
 8028856:	60a2      	str	r2, [r4, #8]
 8028858:	6962      	ldr	r2, [r4, #20]
 802885a:	4252      	negs	r2, r2
 802885c:	61a2      	str	r2, [r4, #24]
 802885e:	6922      	ldr	r2, [r4, #16]
 8028860:	b942      	cbnz	r2, 8028874 <__swsetup_r+0xa4>
 8028862:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8028866:	d1c5      	bne.n	80287f4 <__swsetup_r+0x24>
 8028868:	bd38      	pop	{r3, r4, r5, pc}
 802886a:	0799      	lsls	r1, r3, #30
 802886c:	bf58      	it	pl
 802886e:	6962      	ldrpl	r2, [r4, #20]
 8028870:	60a2      	str	r2, [r4, #8]
 8028872:	e7f4      	b.n	802885e <__swsetup_r+0x8e>
 8028874:	2000      	movs	r0, #0
 8028876:	e7f7      	b.n	8028868 <__swsetup_r+0x98>
 8028878:	24000224 	.word	0x24000224
 802887c:	00000000 	.word	0x00000000

08028880 <nan>:
 8028880:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8028888 <nan+0x8>
 8028884:	4770      	bx	lr
 8028886:	bf00      	nop
 8028888:	00000000 	.word	0x00000000
 802888c:	7ff80000 	.word	0x7ff80000

08028890 <abort>:
 8028890:	b508      	push	{r3, lr}
 8028892:	2006      	movs	r0, #6
 8028894:	f000 fc98 	bl	80291c8 <raise>
 8028898:	2001      	movs	r0, #1
 802889a:	f7dc fec1 	bl	8005620 <_exit>

0802889e <_calloc_r>:
 802889e:	b570      	push	{r4, r5, r6, lr}
 80288a0:	fba1 5402 	umull	r5, r4, r1, r2
 80288a4:	b93c      	cbnz	r4, 80288b6 <_calloc_r+0x18>
 80288a6:	4629      	mov	r1, r5
 80288a8:	f7fb fdd2 	bl	8024450 <_malloc_r>
 80288ac:	4606      	mov	r6, r0
 80288ae:	b928      	cbnz	r0, 80288bc <_calloc_r+0x1e>
 80288b0:	2600      	movs	r6, #0
 80288b2:	4630      	mov	r0, r6
 80288b4:	bd70      	pop	{r4, r5, r6, pc}
 80288b6:	220c      	movs	r2, #12
 80288b8:	6002      	str	r2, [r0, #0]
 80288ba:	e7f9      	b.n	80288b0 <_calloc_r+0x12>
 80288bc:	462a      	mov	r2, r5
 80288be:	4621      	mov	r1, r4
 80288c0:	f7fc fefc 	bl	80256bc <memset>
 80288c4:	e7f5      	b.n	80288b2 <_calloc_r+0x14>

080288c6 <rshift>:
 80288c6:	6903      	ldr	r3, [r0, #16]
 80288c8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80288cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80288d0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80288d4:	f100 0414 	add.w	r4, r0, #20
 80288d8:	dd45      	ble.n	8028966 <rshift+0xa0>
 80288da:	f011 011f 	ands.w	r1, r1, #31
 80288de:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80288e2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80288e6:	d10c      	bne.n	8028902 <rshift+0x3c>
 80288e8:	f100 0710 	add.w	r7, r0, #16
 80288ec:	4629      	mov	r1, r5
 80288ee:	42b1      	cmp	r1, r6
 80288f0:	d334      	bcc.n	802895c <rshift+0x96>
 80288f2:	1a9b      	subs	r3, r3, r2
 80288f4:	009b      	lsls	r3, r3, #2
 80288f6:	1eea      	subs	r2, r5, #3
 80288f8:	4296      	cmp	r6, r2
 80288fa:	bf38      	it	cc
 80288fc:	2300      	movcc	r3, #0
 80288fe:	4423      	add	r3, r4
 8028900:	e015      	b.n	802892e <rshift+0x68>
 8028902:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8028906:	f1c1 0820 	rsb	r8, r1, #32
 802890a:	40cf      	lsrs	r7, r1
 802890c:	f105 0e04 	add.w	lr, r5, #4
 8028910:	46a1      	mov	r9, r4
 8028912:	4576      	cmp	r6, lr
 8028914:	46f4      	mov	ip, lr
 8028916:	d815      	bhi.n	8028944 <rshift+0x7e>
 8028918:	1a9a      	subs	r2, r3, r2
 802891a:	0092      	lsls	r2, r2, #2
 802891c:	3a04      	subs	r2, #4
 802891e:	3501      	adds	r5, #1
 8028920:	42ae      	cmp	r6, r5
 8028922:	bf38      	it	cc
 8028924:	2200      	movcc	r2, #0
 8028926:	18a3      	adds	r3, r4, r2
 8028928:	50a7      	str	r7, [r4, r2]
 802892a:	b107      	cbz	r7, 802892e <rshift+0x68>
 802892c:	3304      	adds	r3, #4
 802892e:	1b1a      	subs	r2, r3, r4
 8028930:	42a3      	cmp	r3, r4
 8028932:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8028936:	bf08      	it	eq
 8028938:	2300      	moveq	r3, #0
 802893a:	6102      	str	r2, [r0, #16]
 802893c:	bf08      	it	eq
 802893e:	6143      	streq	r3, [r0, #20]
 8028940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028944:	f8dc c000 	ldr.w	ip, [ip]
 8028948:	fa0c fc08 	lsl.w	ip, ip, r8
 802894c:	ea4c 0707 	orr.w	r7, ip, r7
 8028950:	f849 7b04 	str.w	r7, [r9], #4
 8028954:	f85e 7b04 	ldr.w	r7, [lr], #4
 8028958:	40cf      	lsrs	r7, r1
 802895a:	e7da      	b.n	8028912 <rshift+0x4c>
 802895c:	f851 cb04 	ldr.w	ip, [r1], #4
 8028960:	f847 cf04 	str.w	ip, [r7, #4]!
 8028964:	e7c3      	b.n	80288ee <rshift+0x28>
 8028966:	4623      	mov	r3, r4
 8028968:	e7e1      	b.n	802892e <rshift+0x68>

0802896a <__hexdig_fun>:
 802896a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 802896e:	2b09      	cmp	r3, #9
 8028970:	d802      	bhi.n	8028978 <__hexdig_fun+0xe>
 8028972:	3820      	subs	r0, #32
 8028974:	b2c0      	uxtb	r0, r0
 8028976:	4770      	bx	lr
 8028978:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802897c:	2b05      	cmp	r3, #5
 802897e:	d801      	bhi.n	8028984 <__hexdig_fun+0x1a>
 8028980:	3847      	subs	r0, #71	@ 0x47
 8028982:	e7f7      	b.n	8028974 <__hexdig_fun+0xa>
 8028984:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8028988:	2b05      	cmp	r3, #5
 802898a:	d801      	bhi.n	8028990 <__hexdig_fun+0x26>
 802898c:	3827      	subs	r0, #39	@ 0x27
 802898e:	e7f1      	b.n	8028974 <__hexdig_fun+0xa>
 8028990:	2000      	movs	r0, #0
 8028992:	4770      	bx	lr

08028994 <__gethex>:
 8028994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028998:	b085      	sub	sp, #20
 802899a:	468a      	mov	sl, r1
 802899c:	9302      	str	r3, [sp, #8]
 802899e:	680b      	ldr	r3, [r1, #0]
 80289a0:	9001      	str	r0, [sp, #4]
 80289a2:	4690      	mov	r8, r2
 80289a4:	1c9c      	adds	r4, r3, #2
 80289a6:	46a1      	mov	r9, r4
 80289a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80289ac:	2830      	cmp	r0, #48	@ 0x30
 80289ae:	d0fa      	beq.n	80289a6 <__gethex+0x12>
 80289b0:	eba9 0303 	sub.w	r3, r9, r3
 80289b4:	f1a3 0b02 	sub.w	fp, r3, #2
 80289b8:	f7ff ffd7 	bl	802896a <__hexdig_fun>
 80289bc:	4605      	mov	r5, r0
 80289be:	2800      	cmp	r0, #0
 80289c0:	d168      	bne.n	8028a94 <__gethex+0x100>
 80289c2:	49a0      	ldr	r1, [pc, #640]	@ (8028c44 <__gethex+0x2b0>)
 80289c4:	2201      	movs	r2, #1
 80289c6:	4648      	mov	r0, r9
 80289c8:	f7fc fe80 	bl	80256cc <strncmp>
 80289cc:	4607      	mov	r7, r0
 80289ce:	2800      	cmp	r0, #0
 80289d0:	d167      	bne.n	8028aa2 <__gethex+0x10e>
 80289d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80289d6:	4626      	mov	r6, r4
 80289d8:	f7ff ffc7 	bl	802896a <__hexdig_fun>
 80289dc:	2800      	cmp	r0, #0
 80289de:	d062      	beq.n	8028aa6 <__gethex+0x112>
 80289e0:	4623      	mov	r3, r4
 80289e2:	7818      	ldrb	r0, [r3, #0]
 80289e4:	2830      	cmp	r0, #48	@ 0x30
 80289e6:	4699      	mov	r9, r3
 80289e8:	f103 0301 	add.w	r3, r3, #1
 80289ec:	d0f9      	beq.n	80289e2 <__gethex+0x4e>
 80289ee:	f7ff ffbc 	bl	802896a <__hexdig_fun>
 80289f2:	fab0 f580 	clz	r5, r0
 80289f6:	096d      	lsrs	r5, r5, #5
 80289f8:	f04f 0b01 	mov.w	fp, #1
 80289fc:	464a      	mov	r2, r9
 80289fe:	4616      	mov	r6, r2
 8028a00:	3201      	adds	r2, #1
 8028a02:	7830      	ldrb	r0, [r6, #0]
 8028a04:	f7ff ffb1 	bl	802896a <__hexdig_fun>
 8028a08:	2800      	cmp	r0, #0
 8028a0a:	d1f8      	bne.n	80289fe <__gethex+0x6a>
 8028a0c:	498d      	ldr	r1, [pc, #564]	@ (8028c44 <__gethex+0x2b0>)
 8028a0e:	2201      	movs	r2, #1
 8028a10:	4630      	mov	r0, r6
 8028a12:	f7fc fe5b 	bl	80256cc <strncmp>
 8028a16:	2800      	cmp	r0, #0
 8028a18:	d13f      	bne.n	8028a9a <__gethex+0x106>
 8028a1a:	b944      	cbnz	r4, 8028a2e <__gethex+0x9a>
 8028a1c:	1c74      	adds	r4, r6, #1
 8028a1e:	4622      	mov	r2, r4
 8028a20:	4616      	mov	r6, r2
 8028a22:	3201      	adds	r2, #1
 8028a24:	7830      	ldrb	r0, [r6, #0]
 8028a26:	f7ff ffa0 	bl	802896a <__hexdig_fun>
 8028a2a:	2800      	cmp	r0, #0
 8028a2c:	d1f8      	bne.n	8028a20 <__gethex+0x8c>
 8028a2e:	1ba4      	subs	r4, r4, r6
 8028a30:	00a7      	lsls	r7, r4, #2
 8028a32:	7833      	ldrb	r3, [r6, #0]
 8028a34:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8028a38:	2b50      	cmp	r3, #80	@ 0x50
 8028a3a:	d13e      	bne.n	8028aba <__gethex+0x126>
 8028a3c:	7873      	ldrb	r3, [r6, #1]
 8028a3e:	2b2b      	cmp	r3, #43	@ 0x2b
 8028a40:	d033      	beq.n	8028aaa <__gethex+0x116>
 8028a42:	2b2d      	cmp	r3, #45	@ 0x2d
 8028a44:	d034      	beq.n	8028ab0 <__gethex+0x11c>
 8028a46:	1c71      	adds	r1, r6, #1
 8028a48:	2400      	movs	r4, #0
 8028a4a:	7808      	ldrb	r0, [r1, #0]
 8028a4c:	f7ff ff8d 	bl	802896a <__hexdig_fun>
 8028a50:	1e43      	subs	r3, r0, #1
 8028a52:	b2db      	uxtb	r3, r3
 8028a54:	2b18      	cmp	r3, #24
 8028a56:	d830      	bhi.n	8028aba <__gethex+0x126>
 8028a58:	f1a0 0210 	sub.w	r2, r0, #16
 8028a5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8028a60:	f7ff ff83 	bl	802896a <__hexdig_fun>
 8028a64:	f100 3cff 	add.w	ip, r0, #4294967295
 8028a68:	fa5f fc8c 	uxtb.w	ip, ip
 8028a6c:	f1bc 0f18 	cmp.w	ip, #24
 8028a70:	f04f 030a 	mov.w	r3, #10
 8028a74:	d91e      	bls.n	8028ab4 <__gethex+0x120>
 8028a76:	b104      	cbz	r4, 8028a7a <__gethex+0xe6>
 8028a78:	4252      	negs	r2, r2
 8028a7a:	4417      	add	r7, r2
 8028a7c:	f8ca 1000 	str.w	r1, [sl]
 8028a80:	b1ed      	cbz	r5, 8028abe <__gethex+0x12a>
 8028a82:	f1bb 0f00 	cmp.w	fp, #0
 8028a86:	bf0c      	ite	eq
 8028a88:	2506      	moveq	r5, #6
 8028a8a:	2500      	movne	r5, #0
 8028a8c:	4628      	mov	r0, r5
 8028a8e:	b005      	add	sp, #20
 8028a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028a94:	2500      	movs	r5, #0
 8028a96:	462c      	mov	r4, r5
 8028a98:	e7b0      	b.n	80289fc <__gethex+0x68>
 8028a9a:	2c00      	cmp	r4, #0
 8028a9c:	d1c7      	bne.n	8028a2e <__gethex+0x9a>
 8028a9e:	4627      	mov	r7, r4
 8028aa0:	e7c7      	b.n	8028a32 <__gethex+0x9e>
 8028aa2:	464e      	mov	r6, r9
 8028aa4:	462f      	mov	r7, r5
 8028aa6:	2501      	movs	r5, #1
 8028aa8:	e7c3      	b.n	8028a32 <__gethex+0x9e>
 8028aaa:	2400      	movs	r4, #0
 8028aac:	1cb1      	adds	r1, r6, #2
 8028aae:	e7cc      	b.n	8028a4a <__gethex+0xb6>
 8028ab0:	2401      	movs	r4, #1
 8028ab2:	e7fb      	b.n	8028aac <__gethex+0x118>
 8028ab4:	fb03 0002 	mla	r0, r3, r2, r0
 8028ab8:	e7ce      	b.n	8028a58 <__gethex+0xc4>
 8028aba:	4631      	mov	r1, r6
 8028abc:	e7de      	b.n	8028a7c <__gethex+0xe8>
 8028abe:	eba6 0309 	sub.w	r3, r6, r9
 8028ac2:	3b01      	subs	r3, #1
 8028ac4:	4629      	mov	r1, r5
 8028ac6:	2b07      	cmp	r3, #7
 8028ac8:	dc0a      	bgt.n	8028ae0 <__gethex+0x14c>
 8028aca:	9801      	ldr	r0, [sp, #4]
 8028acc:	f7fd fcf4 	bl	80264b8 <_Balloc>
 8028ad0:	4604      	mov	r4, r0
 8028ad2:	b940      	cbnz	r0, 8028ae6 <__gethex+0x152>
 8028ad4:	4b5c      	ldr	r3, [pc, #368]	@ (8028c48 <__gethex+0x2b4>)
 8028ad6:	4602      	mov	r2, r0
 8028ad8:	21e4      	movs	r1, #228	@ 0xe4
 8028ada:	485c      	ldr	r0, [pc, #368]	@ (8028c4c <__gethex+0x2b8>)
 8028adc:	f7fc fea4 	bl	8025828 <__assert_func>
 8028ae0:	3101      	adds	r1, #1
 8028ae2:	105b      	asrs	r3, r3, #1
 8028ae4:	e7ef      	b.n	8028ac6 <__gethex+0x132>
 8028ae6:	f100 0a14 	add.w	sl, r0, #20
 8028aea:	2300      	movs	r3, #0
 8028aec:	4655      	mov	r5, sl
 8028aee:	469b      	mov	fp, r3
 8028af0:	45b1      	cmp	r9, r6
 8028af2:	d337      	bcc.n	8028b64 <__gethex+0x1d0>
 8028af4:	f845 bb04 	str.w	fp, [r5], #4
 8028af8:	eba5 050a 	sub.w	r5, r5, sl
 8028afc:	10ad      	asrs	r5, r5, #2
 8028afe:	6125      	str	r5, [r4, #16]
 8028b00:	4658      	mov	r0, fp
 8028b02:	f7fd fdcb 	bl	802669c <__hi0bits>
 8028b06:	016d      	lsls	r5, r5, #5
 8028b08:	f8d8 6000 	ldr.w	r6, [r8]
 8028b0c:	1a2d      	subs	r5, r5, r0
 8028b0e:	42b5      	cmp	r5, r6
 8028b10:	dd54      	ble.n	8028bbc <__gethex+0x228>
 8028b12:	1bad      	subs	r5, r5, r6
 8028b14:	4629      	mov	r1, r5
 8028b16:	4620      	mov	r0, r4
 8028b18:	f7fe f95c 	bl	8026dd4 <__any_on>
 8028b1c:	4681      	mov	r9, r0
 8028b1e:	b178      	cbz	r0, 8028b40 <__gethex+0x1ac>
 8028b20:	1e6b      	subs	r3, r5, #1
 8028b22:	1159      	asrs	r1, r3, #5
 8028b24:	f003 021f 	and.w	r2, r3, #31
 8028b28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8028b2c:	f04f 0901 	mov.w	r9, #1
 8028b30:	fa09 f202 	lsl.w	r2, r9, r2
 8028b34:	420a      	tst	r2, r1
 8028b36:	d003      	beq.n	8028b40 <__gethex+0x1ac>
 8028b38:	454b      	cmp	r3, r9
 8028b3a:	dc36      	bgt.n	8028baa <__gethex+0x216>
 8028b3c:	f04f 0902 	mov.w	r9, #2
 8028b40:	4629      	mov	r1, r5
 8028b42:	4620      	mov	r0, r4
 8028b44:	f7ff febf 	bl	80288c6 <rshift>
 8028b48:	442f      	add	r7, r5
 8028b4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8028b4e:	42bb      	cmp	r3, r7
 8028b50:	da42      	bge.n	8028bd8 <__gethex+0x244>
 8028b52:	9801      	ldr	r0, [sp, #4]
 8028b54:	4621      	mov	r1, r4
 8028b56:	f7fd fcef 	bl	8026538 <_Bfree>
 8028b5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028b5c:	2300      	movs	r3, #0
 8028b5e:	6013      	str	r3, [r2, #0]
 8028b60:	25a3      	movs	r5, #163	@ 0xa3
 8028b62:	e793      	b.n	8028a8c <__gethex+0xf8>
 8028b64:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8028b68:	2a2e      	cmp	r2, #46	@ 0x2e
 8028b6a:	d012      	beq.n	8028b92 <__gethex+0x1fe>
 8028b6c:	2b20      	cmp	r3, #32
 8028b6e:	d104      	bne.n	8028b7a <__gethex+0x1e6>
 8028b70:	f845 bb04 	str.w	fp, [r5], #4
 8028b74:	f04f 0b00 	mov.w	fp, #0
 8028b78:	465b      	mov	r3, fp
 8028b7a:	7830      	ldrb	r0, [r6, #0]
 8028b7c:	9303      	str	r3, [sp, #12]
 8028b7e:	f7ff fef4 	bl	802896a <__hexdig_fun>
 8028b82:	9b03      	ldr	r3, [sp, #12]
 8028b84:	f000 000f 	and.w	r0, r0, #15
 8028b88:	4098      	lsls	r0, r3
 8028b8a:	ea4b 0b00 	orr.w	fp, fp, r0
 8028b8e:	3304      	adds	r3, #4
 8028b90:	e7ae      	b.n	8028af0 <__gethex+0x15c>
 8028b92:	45b1      	cmp	r9, r6
 8028b94:	d8ea      	bhi.n	8028b6c <__gethex+0x1d8>
 8028b96:	492b      	ldr	r1, [pc, #172]	@ (8028c44 <__gethex+0x2b0>)
 8028b98:	9303      	str	r3, [sp, #12]
 8028b9a:	2201      	movs	r2, #1
 8028b9c:	4630      	mov	r0, r6
 8028b9e:	f7fc fd95 	bl	80256cc <strncmp>
 8028ba2:	9b03      	ldr	r3, [sp, #12]
 8028ba4:	2800      	cmp	r0, #0
 8028ba6:	d1e1      	bne.n	8028b6c <__gethex+0x1d8>
 8028ba8:	e7a2      	b.n	8028af0 <__gethex+0x15c>
 8028baa:	1ea9      	subs	r1, r5, #2
 8028bac:	4620      	mov	r0, r4
 8028bae:	f7fe f911 	bl	8026dd4 <__any_on>
 8028bb2:	2800      	cmp	r0, #0
 8028bb4:	d0c2      	beq.n	8028b3c <__gethex+0x1a8>
 8028bb6:	f04f 0903 	mov.w	r9, #3
 8028bba:	e7c1      	b.n	8028b40 <__gethex+0x1ac>
 8028bbc:	da09      	bge.n	8028bd2 <__gethex+0x23e>
 8028bbe:	1b75      	subs	r5, r6, r5
 8028bc0:	4621      	mov	r1, r4
 8028bc2:	9801      	ldr	r0, [sp, #4]
 8028bc4:	462a      	mov	r2, r5
 8028bc6:	f7fd fecf 	bl	8026968 <__lshift>
 8028bca:	1b7f      	subs	r7, r7, r5
 8028bcc:	4604      	mov	r4, r0
 8028bce:	f100 0a14 	add.w	sl, r0, #20
 8028bd2:	f04f 0900 	mov.w	r9, #0
 8028bd6:	e7b8      	b.n	8028b4a <__gethex+0x1b6>
 8028bd8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028bdc:	42bd      	cmp	r5, r7
 8028bde:	dd6f      	ble.n	8028cc0 <__gethex+0x32c>
 8028be0:	1bed      	subs	r5, r5, r7
 8028be2:	42ae      	cmp	r6, r5
 8028be4:	dc34      	bgt.n	8028c50 <__gethex+0x2bc>
 8028be6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8028bea:	2b02      	cmp	r3, #2
 8028bec:	d022      	beq.n	8028c34 <__gethex+0x2a0>
 8028bee:	2b03      	cmp	r3, #3
 8028bf0:	d024      	beq.n	8028c3c <__gethex+0x2a8>
 8028bf2:	2b01      	cmp	r3, #1
 8028bf4:	d115      	bne.n	8028c22 <__gethex+0x28e>
 8028bf6:	42ae      	cmp	r6, r5
 8028bf8:	d113      	bne.n	8028c22 <__gethex+0x28e>
 8028bfa:	2e01      	cmp	r6, #1
 8028bfc:	d10b      	bne.n	8028c16 <__gethex+0x282>
 8028bfe:	9a02      	ldr	r2, [sp, #8]
 8028c00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8028c04:	6013      	str	r3, [r2, #0]
 8028c06:	2301      	movs	r3, #1
 8028c08:	6123      	str	r3, [r4, #16]
 8028c0a:	f8ca 3000 	str.w	r3, [sl]
 8028c0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028c10:	2562      	movs	r5, #98	@ 0x62
 8028c12:	601c      	str	r4, [r3, #0]
 8028c14:	e73a      	b.n	8028a8c <__gethex+0xf8>
 8028c16:	1e71      	subs	r1, r6, #1
 8028c18:	4620      	mov	r0, r4
 8028c1a:	f7fe f8db 	bl	8026dd4 <__any_on>
 8028c1e:	2800      	cmp	r0, #0
 8028c20:	d1ed      	bne.n	8028bfe <__gethex+0x26a>
 8028c22:	9801      	ldr	r0, [sp, #4]
 8028c24:	4621      	mov	r1, r4
 8028c26:	f7fd fc87 	bl	8026538 <_Bfree>
 8028c2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028c2c:	2300      	movs	r3, #0
 8028c2e:	6013      	str	r3, [r2, #0]
 8028c30:	2550      	movs	r5, #80	@ 0x50
 8028c32:	e72b      	b.n	8028a8c <__gethex+0xf8>
 8028c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028c36:	2b00      	cmp	r3, #0
 8028c38:	d1f3      	bne.n	8028c22 <__gethex+0x28e>
 8028c3a:	e7e0      	b.n	8028bfe <__gethex+0x26a>
 8028c3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028c3e:	2b00      	cmp	r3, #0
 8028c40:	d1dd      	bne.n	8028bfe <__gethex+0x26a>
 8028c42:	e7ee      	b.n	8028c22 <__gethex+0x28e>
 8028c44:	0802d520 	.word	0x0802d520
 8028c48:	0802d3b8 	.word	0x0802d3b8
 8028c4c:	0802d5ac 	.word	0x0802d5ac
 8028c50:	1e6f      	subs	r7, r5, #1
 8028c52:	f1b9 0f00 	cmp.w	r9, #0
 8028c56:	d130      	bne.n	8028cba <__gethex+0x326>
 8028c58:	b127      	cbz	r7, 8028c64 <__gethex+0x2d0>
 8028c5a:	4639      	mov	r1, r7
 8028c5c:	4620      	mov	r0, r4
 8028c5e:	f7fe f8b9 	bl	8026dd4 <__any_on>
 8028c62:	4681      	mov	r9, r0
 8028c64:	117a      	asrs	r2, r7, #5
 8028c66:	2301      	movs	r3, #1
 8028c68:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8028c6c:	f007 071f 	and.w	r7, r7, #31
 8028c70:	40bb      	lsls	r3, r7
 8028c72:	4213      	tst	r3, r2
 8028c74:	4629      	mov	r1, r5
 8028c76:	4620      	mov	r0, r4
 8028c78:	bf18      	it	ne
 8028c7a:	f049 0902 	orrne.w	r9, r9, #2
 8028c7e:	f7ff fe22 	bl	80288c6 <rshift>
 8028c82:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8028c86:	1b76      	subs	r6, r6, r5
 8028c88:	2502      	movs	r5, #2
 8028c8a:	f1b9 0f00 	cmp.w	r9, #0
 8028c8e:	d047      	beq.n	8028d20 <__gethex+0x38c>
 8028c90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8028c94:	2b02      	cmp	r3, #2
 8028c96:	d015      	beq.n	8028cc4 <__gethex+0x330>
 8028c98:	2b03      	cmp	r3, #3
 8028c9a:	d017      	beq.n	8028ccc <__gethex+0x338>
 8028c9c:	2b01      	cmp	r3, #1
 8028c9e:	d109      	bne.n	8028cb4 <__gethex+0x320>
 8028ca0:	f019 0f02 	tst.w	r9, #2
 8028ca4:	d006      	beq.n	8028cb4 <__gethex+0x320>
 8028ca6:	f8da 3000 	ldr.w	r3, [sl]
 8028caa:	ea49 0903 	orr.w	r9, r9, r3
 8028cae:	f019 0f01 	tst.w	r9, #1
 8028cb2:	d10e      	bne.n	8028cd2 <__gethex+0x33e>
 8028cb4:	f045 0510 	orr.w	r5, r5, #16
 8028cb8:	e032      	b.n	8028d20 <__gethex+0x38c>
 8028cba:	f04f 0901 	mov.w	r9, #1
 8028cbe:	e7d1      	b.n	8028c64 <__gethex+0x2d0>
 8028cc0:	2501      	movs	r5, #1
 8028cc2:	e7e2      	b.n	8028c8a <__gethex+0x2f6>
 8028cc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028cc6:	f1c3 0301 	rsb	r3, r3, #1
 8028cca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028ccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028cce:	2b00      	cmp	r3, #0
 8028cd0:	d0f0      	beq.n	8028cb4 <__gethex+0x320>
 8028cd2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8028cd6:	f104 0314 	add.w	r3, r4, #20
 8028cda:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8028cde:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8028ce2:	f04f 0c00 	mov.w	ip, #0
 8028ce6:	4618      	mov	r0, r3
 8028ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8028cec:	f1b2 3fff 	cmp.w	r2, #4294967295
 8028cf0:	d01b      	beq.n	8028d2a <__gethex+0x396>
 8028cf2:	3201      	adds	r2, #1
 8028cf4:	6002      	str	r2, [r0, #0]
 8028cf6:	2d02      	cmp	r5, #2
 8028cf8:	f104 0314 	add.w	r3, r4, #20
 8028cfc:	d13c      	bne.n	8028d78 <__gethex+0x3e4>
 8028cfe:	f8d8 2000 	ldr.w	r2, [r8]
 8028d02:	3a01      	subs	r2, #1
 8028d04:	42b2      	cmp	r2, r6
 8028d06:	d109      	bne.n	8028d1c <__gethex+0x388>
 8028d08:	1171      	asrs	r1, r6, #5
 8028d0a:	2201      	movs	r2, #1
 8028d0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8028d10:	f006 061f 	and.w	r6, r6, #31
 8028d14:	fa02 f606 	lsl.w	r6, r2, r6
 8028d18:	421e      	tst	r6, r3
 8028d1a:	d13a      	bne.n	8028d92 <__gethex+0x3fe>
 8028d1c:	f045 0520 	orr.w	r5, r5, #32
 8028d20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028d22:	601c      	str	r4, [r3, #0]
 8028d24:	9b02      	ldr	r3, [sp, #8]
 8028d26:	601f      	str	r7, [r3, #0]
 8028d28:	e6b0      	b.n	8028a8c <__gethex+0xf8>
 8028d2a:	4299      	cmp	r1, r3
 8028d2c:	f843 cc04 	str.w	ip, [r3, #-4]
 8028d30:	d8d9      	bhi.n	8028ce6 <__gethex+0x352>
 8028d32:	68a3      	ldr	r3, [r4, #8]
 8028d34:	459b      	cmp	fp, r3
 8028d36:	db17      	blt.n	8028d68 <__gethex+0x3d4>
 8028d38:	6861      	ldr	r1, [r4, #4]
 8028d3a:	9801      	ldr	r0, [sp, #4]
 8028d3c:	3101      	adds	r1, #1
 8028d3e:	f7fd fbbb 	bl	80264b8 <_Balloc>
 8028d42:	4681      	mov	r9, r0
 8028d44:	b918      	cbnz	r0, 8028d4e <__gethex+0x3ba>
 8028d46:	4b1a      	ldr	r3, [pc, #104]	@ (8028db0 <__gethex+0x41c>)
 8028d48:	4602      	mov	r2, r0
 8028d4a:	2184      	movs	r1, #132	@ 0x84
 8028d4c:	e6c5      	b.n	8028ada <__gethex+0x146>
 8028d4e:	6922      	ldr	r2, [r4, #16]
 8028d50:	3202      	adds	r2, #2
 8028d52:	f104 010c 	add.w	r1, r4, #12
 8028d56:	0092      	lsls	r2, r2, #2
 8028d58:	300c      	adds	r0, #12
 8028d5a:	f7fc fd50 	bl	80257fe <memcpy>
 8028d5e:	4621      	mov	r1, r4
 8028d60:	9801      	ldr	r0, [sp, #4]
 8028d62:	f7fd fbe9 	bl	8026538 <_Bfree>
 8028d66:	464c      	mov	r4, r9
 8028d68:	6923      	ldr	r3, [r4, #16]
 8028d6a:	1c5a      	adds	r2, r3, #1
 8028d6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8028d70:	6122      	str	r2, [r4, #16]
 8028d72:	2201      	movs	r2, #1
 8028d74:	615a      	str	r2, [r3, #20]
 8028d76:	e7be      	b.n	8028cf6 <__gethex+0x362>
 8028d78:	6922      	ldr	r2, [r4, #16]
 8028d7a:	455a      	cmp	r2, fp
 8028d7c:	dd0b      	ble.n	8028d96 <__gethex+0x402>
 8028d7e:	2101      	movs	r1, #1
 8028d80:	4620      	mov	r0, r4
 8028d82:	f7ff fda0 	bl	80288c6 <rshift>
 8028d86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8028d8a:	3701      	adds	r7, #1
 8028d8c:	42bb      	cmp	r3, r7
 8028d8e:	f6ff aee0 	blt.w	8028b52 <__gethex+0x1be>
 8028d92:	2501      	movs	r5, #1
 8028d94:	e7c2      	b.n	8028d1c <__gethex+0x388>
 8028d96:	f016 061f 	ands.w	r6, r6, #31
 8028d9a:	d0fa      	beq.n	8028d92 <__gethex+0x3fe>
 8028d9c:	4453      	add	r3, sl
 8028d9e:	f1c6 0620 	rsb	r6, r6, #32
 8028da2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8028da6:	f7fd fc79 	bl	802669c <__hi0bits>
 8028daa:	42b0      	cmp	r0, r6
 8028dac:	dbe7      	blt.n	8028d7e <__gethex+0x3ea>
 8028dae:	e7f0      	b.n	8028d92 <__gethex+0x3fe>
 8028db0:	0802d3b8 	.word	0x0802d3b8

08028db4 <L_shift>:
 8028db4:	f1c2 0208 	rsb	r2, r2, #8
 8028db8:	0092      	lsls	r2, r2, #2
 8028dba:	b570      	push	{r4, r5, r6, lr}
 8028dbc:	f1c2 0620 	rsb	r6, r2, #32
 8028dc0:	6843      	ldr	r3, [r0, #4]
 8028dc2:	6804      	ldr	r4, [r0, #0]
 8028dc4:	fa03 f506 	lsl.w	r5, r3, r6
 8028dc8:	432c      	orrs	r4, r5
 8028dca:	40d3      	lsrs	r3, r2
 8028dcc:	6004      	str	r4, [r0, #0]
 8028dce:	f840 3f04 	str.w	r3, [r0, #4]!
 8028dd2:	4288      	cmp	r0, r1
 8028dd4:	d3f4      	bcc.n	8028dc0 <L_shift+0xc>
 8028dd6:	bd70      	pop	{r4, r5, r6, pc}

08028dd8 <__match>:
 8028dd8:	b530      	push	{r4, r5, lr}
 8028dda:	6803      	ldr	r3, [r0, #0]
 8028ddc:	3301      	adds	r3, #1
 8028dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028de2:	b914      	cbnz	r4, 8028dea <__match+0x12>
 8028de4:	6003      	str	r3, [r0, #0]
 8028de6:	2001      	movs	r0, #1
 8028de8:	bd30      	pop	{r4, r5, pc}
 8028dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028dee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8028df2:	2d19      	cmp	r5, #25
 8028df4:	bf98      	it	ls
 8028df6:	3220      	addls	r2, #32
 8028df8:	42a2      	cmp	r2, r4
 8028dfa:	d0f0      	beq.n	8028dde <__match+0x6>
 8028dfc:	2000      	movs	r0, #0
 8028dfe:	e7f3      	b.n	8028de8 <__match+0x10>

08028e00 <__hexnan>:
 8028e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e04:	680b      	ldr	r3, [r1, #0]
 8028e06:	6801      	ldr	r1, [r0, #0]
 8028e08:	115e      	asrs	r6, r3, #5
 8028e0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8028e0e:	f013 031f 	ands.w	r3, r3, #31
 8028e12:	b087      	sub	sp, #28
 8028e14:	bf18      	it	ne
 8028e16:	3604      	addne	r6, #4
 8028e18:	2500      	movs	r5, #0
 8028e1a:	1f37      	subs	r7, r6, #4
 8028e1c:	4682      	mov	sl, r0
 8028e1e:	4690      	mov	r8, r2
 8028e20:	9301      	str	r3, [sp, #4]
 8028e22:	f846 5c04 	str.w	r5, [r6, #-4]
 8028e26:	46b9      	mov	r9, r7
 8028e28:	463c      	mov	r4, r7
 8028e2a:	9502      	str	r5, [sp, #8]
 8028e2c:	46ab      	mov	fp, r5
 8028e2e:	784a      	ldrb	r2, [r1, #1]
 8028e30:	1c4b      	adds	r3, r1, #1
 8028e32:	9303      	str	r3, [sp, #12]
 8028e34:	b342      	cbz	r2, 8028e88 <__hexnan+0x88>
 8028e36:	4610      	mov	r0, r2
 8028e38:	9105      	str	r1, [sp, #20]
 8028e3a:	9204      	str	r2, [sp, #16]
 8028e3c:	f7ff fd95 	bl	802896a <__hexdig_fun>
 8028e40:	2800      	cmp	r0, #0
 8028e42:	d151      	bne.n	8028ee8 <__hexnan+0xe8>
 8028e44:	9a04      	ldr	r2, [sp, #16]
 8028e46:	9905      	ldr	r1, [sp, #20]
 8028e48:	2a20      	cmp	r2, #32
 8028e4a:	d818      	bhi.n	8028e7e <__hexnan+0x7e>
 8028e4c:	9b02      	ldr	r3, [sp, #8]
 8028e4e:	459b      	cmp	fp, r3
 8028e50:	dd13      	ble.n	8028e7a <__hexnan+0x7a>
 8028e52:	454c      	cmp	r4, r9
 8028e54:	d206      	bcs.n	8028e64 <__hexnan+0x64>
 8028e56:	2d07      	cmp	r5, #7
 8028e58:	dc04      	bgt.n	8028e64 <__hexnan+0x64>
 8028e5a:	462a      	mov	r2, r5
 8028e5c:	4649      	mov	r1, r9
 8028e5e:	4620      	mov	r0, r4
 8028e60:	f7ff ffa8 	bl	8028db4 <L_shift>
 8028e64:	4544      	cmp	r4, r8
 8028e66:	d952      	bls.n	8028f0e <__hexnan+0x10e>
 8028e68:	2300      	movs	r3, #0
 8028e6a:	f1a4 0904 	sub.w	r9, r4, #4
 8028e6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8028e72:	f8cd b008 	str.w	fp, [sp, #8]
 8028e76:	464c      	mov	r4, r9
 8028e78:	461d      	mov	r5, r3
 8028e7a:	9903      	ldr	r1, [sp, #12]
 8028e7c:	e7d7      	b.n	8028e2e <__hexnan+0x2e>
 8028e7e:	2a29      	cmp	r2, #41	@ 0x29
 8028e80:	d157      	bne.n	8028f32 <__hexnan+0x132>
 8028e82:	3102      	adds	r1, #2
 8028e84:	f8ca 1000 	str.w	r1, [sl]
 8028e88:	f1bb 0f00 	cmp.w	fp, #0
 8028e8c:	d051      	beq.n	8028f32 <__hexnan+0x132>
 8028e8e:	454c      	cmp	r4, r9
 8028e90:	d206      	bcs.n	8028ea0 <__hexnan+0xa0>
 8028e92:	2d07      	cmp	r5, #7
 8028e94:	dc04      	bgt.n	8028ea0 <__hexnan+0xa0>
 8028e96:	462a      	mov	r2, r5
 8028e98:	4649      	mov	r1, r9
 8028e9a:	4620      	mov	r0, r4
 8028e9c:	f7ff ff8a 	bl	8028db4 <L_shift>
 8028ea0:	4544      	cmp	r4, r8
 8028ea2:	d936      	bls.n	8028f12 <__hexnan+0x112>
 8028ea4:	f1a8 0204 	sub.w	r2, r8, #4
 8028ea8:	4623      	mov	r3, r4
 8028eaa:	f853 1b04 	ldr.w	r1, [r3], #4
 8028eae:	f842 1f04 	str.w	r1, [r2, #4]!
 8028eb2:	429f      	cmp	r7, r3
 8028eb4:	d2f9      	bcs.n	8028eaa <__hexnan+0xaa>
 8028eb6:	1b3b      	subs	r3, r7, r4
 8028eb8:	f023 0303 	bic.w	r3, r3, #3
 8028ebc:	3304      	adds	r3, #4
 8028ebe:	3401      	adds	r4, #1
 8028ec0:	3e03      	subs	r6, #3
 8028ec2:	42b4      	cmp	r4, r6
 8028ec4:	bf88      	it	hi
 8028ec6:	2304      	movhi	r3, #4
 8028ec8:	4443      	add	r3, r8
 8028eca:	2200      	movs	r2, #0
 8028ecc:	f843 2b04 	str.w	r2, [r3], #4
 8028ed0:	429f      	cmp	r7, r3
 8028ed2:	d2fb      	bcs.n	8028ecc <__hexnan+0xcc>
 8028ed4:	683b      	ldr	r3, [r7, #0]
 8028ed6:	b91b      	cbnz	r3, 8028ee0 <__hexnan+0xe0>
 8028ed8:	4547      	cmp	r7, r8
 8028eda:	d128      	bne.n	8028f2e <__hexnan+0x12e>
 8028edc:	2301      	movs	r3, #1
 8028ede:	603b      	str	r3, [r7, #0]
 8028ee0:	2005      	movs	r0, #5
 8028ee2:	b007      	add	sp, #28
 8028ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028ee8:	3501      	adds	r5, #1
 8028eea:	2d08      	cmp	r5, #8
 8028eec:	f10b 0b01 	add.w	fp, fp, #1
 8028ef0:	dd06      	ble.n	8028f00 <__hexnan+0x100>
 8028ef2:	4544      	cmp	r4, r8
 8028ef4:	d9c1      	bls.n	8028e7a <__hexnan+0x7a>
 8028ef6:	2300      	movs	r3, #0
 8028ef8:	f844 3c04 	str.w	r3, [r4, #-4]
 8028efc:	2501      	movs	r5, #1
 8028efe:	3c04      	subs	r4, #4
 8028f00:	6822      	ldr	r2, [r4, #0]
 8028f02:	f000 000f 	and.w	r0, r0, #15
 8028f06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8028f0a:	6020      	str	r0, [r4, #0]
 8028f0c:	e7b5      	b.n	8028e7a <__hexnan+0x7a>
 8028f0e:	2508      	movs	r5, #8
 8028f10:	e7b3      	b.n	8028e7a <__hexnan+0x7a>
 8028f12:	9b01      	ldr	r3, [sp, #4]
 8028f14:	2b00      	cmp	r3, #0
 8028f16:	d0dd      	beq.n	8028ed4 <__hexnan+0xd4>
 8028f18:	f1c3 0320 	rsb	r3, r3, #32
 8028f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8028f20:	40da      	lsrs	r2, r3
 8028f22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8028f26:	4013      	ands	r3, r2
 8028f28:	f846 3c04 	str.w	r3, [r6, #-4]
 8028f2c:	e7d2      	b.n	8028ed4 <__hexnan+0xd4>
 8028f2e:	3f04      	subs	r7, #4
 8028f30:	e7d0      	b.n	8028ed4 <__hexnan+0xd4>
 8028f32:	2004      	movs	r0, #4
 8028f34:	e7d5      	b.n	8028ee2 <__hexnan+0xe2>

08028f36 <__ascii_mbtowc>:
 8028f36:	b082      	sub	sp, #8
 8028f38:	b901      	cbnz	r1, 8028f3c <__ascii_mbtowc+0x6>
 8028f3a:	a901      	add	r1, sp, #4
 8028f3c:	b142      	cbz	r2, 8028f50 <__ascii_mbtowc+0x1a>
 8028f3e:	b14b      	cbz	r3, 8028f54 <__ascii_mbtowc+0x1e>
 8028f40:	7813      	ldrb	r3, [r2, #0]
 8028f42:	600b      	str	r3, [r1, #0]
 8028f44:	7812      	ldrb	r2, [r2, #0]
 8028f46:	1e10      	subs	r0, r2, #0
 8028f48:	bf18      	it	ne
 8028f4a:	2001      	movne	r0, #1
 8028f4c:	b002      	add	sp, #8
 8028f4e:	4770      	bx	lr
 8028f50:	4610      	mov	r0, r2
 8028f52:	e7fb      	b.n	8028f4c <__ascii_mbtowc+0x16>
 8028f54:	f06f 0001 	mvn.w	r0, #1
 8028f58:	e7f8      	b.n	8028f4c <__ascii_mbtowc+0x16>

08028f5a <_realloc_r>:
 8028f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028f5e:	4680      	mov	r8, r0
 8028f60:	4615      	mov	r5, r2
 8028f62:	460c      	mov	r4, r1
 8028f64:	b921      	cbnz	r1, 8028f70 <_realloc_r+0x16>
 8028f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028f6a:	4611      	mov	r1, r2
 8028f6c:	f7fb ba70 	b.w	8024450 <_malloc_r>
 8028f70:	b92a      	cbnz	r2, 8028f7e <_realloc_r+0x24>
 8028f72:	f7fd fa57 	bl	8026424 <_free_r>
 8028f76:	2400      	movs	r4, #0
 8028f78:	4620      	mov	r0, r4
 8028f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028f7e:	f000 f961 	bl	8029244 <_malloc_usable_size_r>
 8028f82:	4285      	cmp	r5, r0
 8028f84:	4606      	mov	r6, r0
 8028f86:	d802      	bhi.n	8028f8e <_realloc_r+0x34>
 8028f88:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8028f8c:	d8f4      	bhi.n	8028f78 <_realloc_r+0x1e>
 8028f8e:	4629      	mov	r1, r5
 8028f90:	4640      	mov	r0, r8
 8028f92:	f7fb fa5d 	bl	8024450 <_malloc_r>
 8028f96:	4607      	mov	r7, r0
 8028f98:	2800      	cmp	r0, #0
 8028f9a:	d0ec      	beq.n	8028f76 <_realloc_r+0x1c>
 8028f9c:	42b5      	cmp	r5, r6
 8028f9e:	462a      	mov	r2, r5
 8028fa0:	4621      	mov	r1, r4
 8028fa2:	bf28      	it	cs
 8028fa4:	4632      	movcs	r2, r6
 8028fa6:	f7fc fc2a 	bl	80257fe <memcpy>
 8028faa:	4621      	mov	r1, r4
 8028fac:	4640      	mov	r0, r8
 8028fae:	f7fd fa39 	bl	8026424 <_free_r>
 8028fb2:	463c      	mov	r4, r7
 8028fb4:	e7e0      	b.n	8028f78 <_realloc_r+0x1e>
	...

08028fb8 <_strtoul_l.constprop.0>:
 8028fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028fbc:	4e34      	ldr	r6, [pc, #208]	@ (8029090 <_strtoul_l.constprop.0+0xd8>)
 8028fbe:	4686      	mov	lr, r0
 8028fc0:	460d      	mov	r5, r1
 8028fc2:	4628      	mov	r0, r5
 8028fc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8028fc8:	5d37      	ldrb	r7, [r6, r4]
 8028fca:	f017 0708 	ands.w	r7, r7, #8
 8028fce:	d1f8      	bne.n	8028fc2 <_strtoul_l.constprop.0+0xa>
 8028fd0:	2c2d      	cmp	r4, #45	@ 0x2d
 8028fd2:	d12f      	bne.n	8029034 <_strtoul_l.constprop.0+0x7c>
 8028fd4:	782c      	ldrb	r4, [r5, #0]
 8028fd6:	2701      	movs	r7, #1
 8028fd8:	1c85      	adds	r5, r0, #2
 8028fda:	f033 0010 	bics.w	r0, r3, #16
 8028fde:	d109      	bne.n	8028ff4 <_strtoul_l.constprop.0+0x3c>
 8028fe0:	2c30      	cmp	r4, #48	@ 0x30
 8028fe2:	d12c      	bne.n	802903e <_strtoul_l.constprop.0+0x86>
 8028fe4:	7828      	ldrb	r0, [r5, #0]
 8028fe6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8028fea:	2858      	cmp	r0, #88	@ 0x58
 8028fec:	d127      	bne.n	802903e <_strtoul_l.constprop.0+0x86>
 8028fee:	786c      	ldrb	r4, [r5, #1]
 8028ff0:	2310      	movs	r3, #16
 8028ff2:	3502      	adds	r5, #2
 8028ff4:	f04f 38ff 	mov.w	r8, #4294967295
 8028ff8:	2600      	movs	r6, #0
 8028ffa:	fbb8 f8f3 	udiv	r8, r8, r3
 8028ffe:	fb03 f908 	mul.w	r9, r3, r8
 8029002:	ea6f 0909 	mvn.w	r9, r9
 8029006:	4630      	mov	r0, r6
 8029008:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 802900c:	f1bc 0f09 	cmp.w	ip, #9
 8029010:	d81c      	bhi.n	802904c <_strtoul_l.constprop.0+0x94>
 8029012:	4664      	mov	r4, ip
 8029014:	42a3      	cmp	r3, r4
 8029016:	dd2a      	ble.n	802906e <_strtoul_l.constprop.0+0xb6>
 8029018:	f1b6 3fff 	cmp.w	r6, #4294967295
 802901c:	d007      	beq.n	802902e <_strtoul_l.constprop.0+0x76>
 802901e:	4580      	cmp	r8, r0
 8029020:	d322      	bcc.n	8029068 <_strtoul_l.constprop.0+0xb0>
 8029022:	d101      	bne.n	8029028 <_strtoul_l.constprop.0+0x70>
 8029024:	45a1      	cmp	r9, r4
 8029026:	db1f      	blt.n	8029068 <_strtoul_l.constprop.0+0xb0>
 8029028:	fb00 4003 	mla	r0, r0, r3, r4
 802902c:	2601      	movs	r6, #1
 802902e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029032:	e7e9      	b.n	8029008 <_strtoul_l.constprop.0+0x50>
 8029034:	2c2b      	cmp	r4, #43	@ 0x2b
 8029036:	bf04      	itt	eq
 8029038:	782c      	ldrbeq	r4, [r5, #0]
 802903a:	1c85      	addeq	r5, r0, #2
 802903c:	e7cd      	b.n	8028fda <_strtoul_l.constprop.0+0x22>
 802903e:	2b00      	cmp	r3, #0
 8029040:	d1d8      	bne.n	8028ff4 <_strtoul_l.constprop.0+0x3c>
 8029042:	2c30      	cmp	r4, #48	@ 0x30
 8029044:	bf0c      	ite	eq
 8029046:	2308      	moveq	r3, #8
 8029048:	230a      	movne	r3, #10
 802904a:	e7d3      	b.n	8028ff4 <_strtoul_l.constprop.0+0x3c>
 802904c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8029050:	f1bc 0f19 	cmp.w	ip, #25
 8029054:	d801      	bhi.n	802905a <_strtoul_l.constprop.0+0xa2>
 8029056:	3c37      	subs	r4, #55	@ 0x37
 8029058:	e7dc      	b.n	8029014 <_strtoul_l.constprop.0+0x5c>
 802905a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 802905e:	f1bc 0f19 	cmp.w	ip, #25
 8029062:	d804      	bhi.n	802906e <_strtoul_l.constprop.0+0xb6>
 8029064:	3c57      	subs	r4, #87	@ 0x57
 8029066:	e7d5      	b.n	8029014 <_strtoul_l.constprop.0+0x5c>
 8029068:	f04f 36ff 	mov.w	r6, #4294967295
 802906c:	e7df      	b.n	802902e <_strtoul_l.constprop.0+0x76>
 802906e:	1c73      	adds	r3, r6, #1
 8029070:	d106      	bne.n	8029080 <_strtoul_l.constprop.0+0xc8>
 8029072:	2322      	movs	r3, #34	@ 0x22
 8029074:	f8ce 3000 	str.w	r3, [lr]
 8029078:	4630      	mov	r0, r6
 802907a:	b932      	cbnz	r2, 802908a <_strtoul_l.constprop.0+0xd2>
 802907c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029080:	b107      	cbz	r7, 8029084 <_strtoul_l.constprop.0+0xcc>
 8029082:	4240      	negs	r0, r0
 8029084:	2a00      	cmp	r2, #0
 8029086:	d0f9      	beq.n	802907c <_strtoul_l.constprop.0+0xc4>
 8029088:	b106      	cbz	r6, 802908c <_strtoul_l.constprop.0+0xd4>
 802908a:	1e69      	subs	r1, r5, #1
 802908c:	6011      	str	r1, [r2, #0]
 802908e:	e7f5      	b.n	802907c <_strtoul_l.constprop.0+0xc4>
 8029090:	0802d1e0 	.word	0x0802d1e0

08029094 <_strtoul_r>:
 8029094:	f7ff bf90 	b.w	8028fb8 <_strtoul_l.constprop.0>

08029098 <__ascii_wctomb>:
 8029098:	4603      	mov	r3, r0
 802909a:	4608      	mov	r0, r1
 802909c:	b141      	cbz	r1, 80290b0 <__ascii_wctomb+0x18>
 802909e:	2aff      	cmp	r2, #255	@ 0xff
 80290a0:	d904      	bls.n	80290ac <__ascii_wctomb+0x14>
 80290a2:	228a      	movs	r2, #138	@ 0x8a
 80290a4:	601a      	str	r2, [r3, #0]
 80290a6:	f04f 30ff 	mov.w	r0, #4294967295
 80290aa:	4770      	bx	lr
 80290ac:	700a      	strb	r2, [r1, #0]
 80290ae:	2001      	movs	r0, #1
 80290b0:	4770      	bx	lr

080290b2 <__swhatbuf_r>:
 80290b2:	b570      	push	{r4, r5, r6, lr}
 80290b4:	460c      	mov	r4, r1
 80290b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80290ba:	2900      	cmp	r1, #0
 80290bc:	b096      	sub	sp, #88	@ 0x58
 80290be:	4615      	mov	r5, r2
 80290c0:	461e      	mov	r6, r3
 80290c2:	da0d      	bge.n	80290e0 <__swhatbuf_r+0x2e>
 80290c4:	89a3      	ldrh	r3, [r4, #12]
 80290c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80290ca:	f04f 0100 	mov.w	r1, #0
 80290ce:	bf14      	ite	ne
 80290d0:	2340      	movne	r3, #64	@ 0x40
 80290d2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80290d6:	2000      	movs	r0, #0
 80290d8:	6031      	str	r1, [r6, #0]
 80290da:	602b      	str	r3, [r5, #0]
 80290dc:	b016      	add	sp, #88	@ 0x58
 80290de:	bd70      	pop	{r4, r5, r6, pc}
 80290e0:	466a      	mov	r2, sp
 80290e2:	f000 f879 	bl	80291d8 <_fstat_r>
 80290e6:	2800      	cmp	r0, #0
 80290e8:	dbec      	blt.n	80290c4 <__swhatbuf_r+0x12>
 80290ea:	9901      	ldr	r1, [sp, #4]
 80290ec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80290f0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80290f4:	4259      	negs	r1, r3
 80290f6:	4159      	adcs	r1, r3
 80290f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80290fc:	e7eb      	b.n	80290d6 <__swhatbuf_r+0x24>

080290fe <__smakebuf_r>:
 80290fe:	898b      	ldrh	r3, [r1, #12]
 8029100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029102:	079d      	lsls	r5, r3, #30
 8029104:	4606      	mov	r6, r0
 8029106:	460c      	mov	r4, r1
 8029108:	d507      	bpl.n	802911a <__smakebuf_r+0x1c>
 802910a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802910e:	6023      	str	r3, [r4, #0]
 8029110:	6123      	str	r3, [r4, #16]
 8029112:	2301      	movs	r3, #1
 8029114:	6163      	str	r3, [r4, #20]
 8029116:	b003      	add	sp, #12
 8029118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802911a:	ab01      	add	r3, sp, #4
 802911c:	466a      	mov	r2, sp
 802911e:	f7ff ffc8 	bl	80290b2 <__swhatbuf_r>
 8029122:	9f00      	ldr	r7, [sp, #0]
 8029124:	4605      	mov	r5, r0
 8029126:	4639      	mov	r1, r7
 8029128:	4630      	mov	r0, r6
 802912a:	f7fb f991 	bl	8024450 <_malloc_r>
 802912e:	b948      	cbnz	r0, 8029144 <__smakebuf_r+0x46>
 8029130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029134:	059a      	lsls	r2, r3, #22
 8029136:	d4ee      	bmi.n	8029116 <__smakebuf_r+0x18>
 8029138:	f023 0303 	bic.w	r3, r3, #3
 802913c:	f043 0302 	orr.w	r3, r3, #2
 8029140:	81a3      	strh	r3, [r4, #12]
 8029142:	e7e2      	b.n	802910a <__smakebuf_r+0xc>
 8029144:	89a3      	ldrh	r3, [r4, #12]
 8029146:	6020      	str	r0, [r4, #0]
 8029148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802914c:	81a3      	strh	r3, [r4, #12]
 802914e:	9b01      	ldr	r3, [sp, #4]
 8029150:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8029154:	b15b      	cbz	r3, 802916e <__smakebuf_r+0x70>
 8029156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802915a:	4630      	mov	r0, r6
 802915c:	f000 f84e 	bl	80291fc <_isatty_r>
 8029160:	b128      	cbz	r0, 802916e <__smakebuf_r+0x70>
 8029162:	89a3      	ldrh	r3, [r4, #12]
 8029164:	f023 0303 	bic.w	r3, r3, #3
 8029168:	f043 0301 	orr.w	r3, r3, #1
 802916c:	81a3      	strh	r3, [r4, #12]
 802916e:	89a3      	ldrh	r3, [r4, #12]
 8029170:	431d      	orrs	r5, r3
 8029172:	81a5      	strh	r5, [r4, #12]
 8029174:	e7cf      	b.n	8029116 <__smakebuf_r+0x18>

08029176 <_raise_r>:
 8029176:	291f      	cmp	r1, #31
 8029178:	b538      	push	{r3, r4, r5, lr}
 802917a:	4605      	mov	r5, r0
 802917c:	460c      	mov	r4, r1
 802917e:	d904      	bls.n	802918a <_raise_r+0x14>
 8029180:	2316      	movs	r3, #22
 8029182:	6003      	str	r3, [r0, #0]
 8029184:	f04f 30ff 	mov.w	r0, #4294967295
 8029188:	bd38      	pop	{r3, r4, r5, pc}
 802918a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802918c:	b112      	cbz	r2, 8029194 <_raise_r+0x1e>
 802918e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029192:	b94b      	cbnz	r3, 80291a8 <_raise_r+0x32>
 8029194:	4628      	mov	r0, r5
 8029196:	f000 f853 	bl	8029240 <_getpid_r>
 802919a:	4622      	mov	r2, r4
 802919c:	4601      	mov	r1, r0
 802919e:	4628      	mov	r0, r5
 80291a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80291a4:	f000 b83a 	b.w	802921c <_kill_r>
 80291a8:	2b01      	cmp	r3, #1
 80291aa:	d00a      	beq.n	80291c2 <_raise_r+0x4c>
 80291ac:	1c59      	adds	r1, r3, #1
 80291ae:	d103      	bne.n	80291b8 <_raise_r+0x42>
 80291b0:	2316      	movs	r3, #22
 80291b2:	6003      	str	r3, [r0, #0]
 80291b4:	2001      	movs	r0, #1
 80291b6:	e7e7      	b.n	8029188 <_raise_r+0x12>
 80291b8:	2100      	movs	r1, #0
 80291ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80291be:	4620      	mov	r0, r4
 80291c0:	4798      	blx	r3
 80291c2:	2000      	movs	r0, #0
 80291c4:	e7e0      	b.n	8029188 <_raise_r+0x12>
	...

080291c8 <raise>:
 80291c8:	4b02      	ldr	r3, [pc, #8]	@ (80291d4 <raise+0xc>)
 80291ca:	4601      	mov	r1, r0
 80291cc:	6818      	ldr	r0, [r3, #0]
 80291ce:	f7ff bfd2 	b.w	8029176 <_raise_r>
 80291d2:	bf00      	nop
 80291d4:	24000224 	.word	0x24000224

080291d8 <_fstat_r>:
 80291d8:	b538      	push	{r3, r4, r5, lr}
 80291da:	4d07      	ldr	r5, [pc, #28]	@ (80291f8 <_fstat_r+0x20>)
 80291dc:	2300      	movs	r3, #0
 80291de:	4604      	mov	r4, r0
 80291e0:	4608      	mov	r0, r1
 80291e2:	4611      	mov	r1, r2
 80291e4:	602b      	str	r3, [r5, #0]
 80291e6:	f7dc fa6b 	bl	80056c0 <_fstat>
 80291ea:	1c43      	adds	r3, r0, #1
 80291ec:	d102      	bne.n	80291f4 <_fstat_r+0x1c>
 80291ee:	682b      	ldr	r3, [r5, #0]
 80291f0:	b103      	cbz	r3, 80291f4 <_fstat_r+0x1c>
 80291f2:	6023      	str	r3, [r4, #0]
 80291f4:	bd38      	pop	{r3, r4, r5, pc}
 80291f6:	bf00      	nop
 80291f8:	2400bfc0 	.word	0x2400bfc0

080291fc <_isatty_r>:
 80291fc:	b538      	push	{r3, r4, r5, lr}
 80291fe:	4d06      	ldr	r5, [pc, #24]	@ (8029218 <_isatty_r+0x1c>)
 8029200:	2300      	movs	r3, #0
 8029202:	4604      	mov	r4, r0
 8029204:	4608      	mov	r0, r1
 8029206:	602b      	str	r3, [r5, #0]
 8029208:	f7dc fa6a 	bl	80056e0 <_isatty>
 802920c:	1c43      	adds	r3, r0, #1
 802920e:	d102      	bne.n	8029216 <_isatty_r+0x1a>
 8029210:	682b      	ldr	r3, [r5, #0]
 8029212:	b103      	cbz	r3, 8029216 <_isatty_r+0x1a>
 8029214:	6023      	str	r3, [r4, #0]
 8029216:	bd38      	pop	{r3, r4, r5, pc}
 8029218:	2400bfc0 	.word	0x2400bfc0

0802921c <_kill_r>:
 802921c:	b538      	push	{r3, r4, r5, lr}
 802921e:	4d07      	ldr	r5, [pc, #28]	@ (802923c <_kill_r+0x20>)
 8029220:	2300      	movs	r3, #0
 8029222:	4604      	mov	r4, r0
 8029224:	4608      	mov	r0, r1
 8029226:	4611      	mov	r1, r2
 8029228:	602b      	str	r3, [r5, #0]
 802922a:	f7dc f9e7 	bl	80055fc <_kill>
 802922e:	1c43      	adds	r3, r0, #1
 8029230:	d102      	bne.n	8029238 <_kill_r+0x1c>
 8029232:	682b      	ldr	r3, [r5, #0]
 8029234:	b103      	cbz	r3, 8029238 <_kill_r+0x1c>
 8029236:	6023      	str	r3, [r4, #0]
 8029238:	bd38      	pop	{r3, r4, r5, pc}
 802923a:	bf00      	nop
 802923c:	2400bfc0 	.word	0x2400bfc0

08029240 <_getpid_r>:
 8029240:	f7dc b9d4 	b.w	80055ec <_getpid>

08029244 <_malloc_usable_size_r>:
 8029244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029248:	1f18      	subs	r0, r3, #4
 802924a:	2b00      	cmp	r3, #0
 802924c:	bfbc      	itt	lt
 802924e:	580b      	ldrlt	r3, [r1, r0]
 8029250:	18c0      	addlt	r0, r0, r3
 8029252:	4770      	bx	lr

08029254 <_init>:
 8029254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029256:	bf00      	nop
 8029258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802925a:	bc08      	pop	{r3}
 802925c:	469e      	mov	lr, r3
 802925e:	4770      	bx	lr

08029260 <_fini>:
 8029260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029262:	bf00      	nop
 8029264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029266:	bc08      	pop	{r3}
 8029268:	469e      	mov	lr, r3
 802926a:	4770      	bx	lr
