
ATP_S1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028d4c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000043e4  08028ff0  08028ff0  00029ff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802d3d4  0802d3d4  0002e3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802d3dc  0802d3dc  0002e3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0802d3e0  0802d3e0  0002e3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000003d8  24000000  0802d3e4  0002f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000bd20  240003d8  0802d7bc  0002f3d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2400c0f8  0802d7bc  000300f8  2**0
                  ALLOC
  9 .lwip_sec     00004a83  30000000  30000000  00030000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0003515c  2**0
                  CONTENTS, READONLY
 11 ._Text_Area   000006d8  30004a84  30004a84  00034a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .debug_info   00045dbb  00000000  00000000  0003518a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009c28  00000000  00000000  0007af45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c50  00000000  00000000  00084b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000232c  00000000  00000000  000877c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004dbf9  00000000  00000000  00089aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000562a1  00000000  00000000  000d76e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018bb4a  00000000  00000000  0012d986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002b94d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ca30  00000000  00000000  002b9514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  002c5f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240003d8 	.word	0x240003d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08028fd4 	.word	0x08028fd4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240003dc 	.word	0x240003dc
 80002dc:	08028fd4 	.word	0x08028fd4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <checkData>:
uint8_t setFocusFreq = 0;




uint8_t checkData(uint8_t* data, uint8_t length) {
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	70fb      	strb	r3, [r7, #3]
    uint8_t check = 0x00;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < length; i++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	e009      	b.n	8000a92 <checkData+0x2a>
        check ^= data[i];
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	4413      	add	r3, r2
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	4053      	eors	r3, r2
 8000a8a:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < length; i++) {
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	78fb      	ldrb	r3, [r7, #3]
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	dbf1      	blt.n	8000a7e <checkData+0x16>
    }
    return check;
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <SendFocusData>:

void SendFocusData(SendFocusFrameTypedef *SendType)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    SendType->data[0] = SendType->head[0];
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	711a      	strb	r2, [r3, #4]
    SendType->data[1] = SendType->head[1];
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	785a      	ldrb	r2, [r3, #1]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	715a      	strb	r2, [r3, #5]
    SendType->data[4] = 0x03; // 设备ID
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	721a      	strb	r2, [r3, #8]
    SendType->data[5] = 0x00; //通道
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	725a      	strb	r2, [r3, #9]
    switch (SendType->func)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	78db      	ldrb	r3, [r3, #3]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	2b1a      	cmp	r3, #26
 8000ad4:	f200 80d5 	bhi.w	8000c82 <SendFocusData+0x1da>
 8000ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ae0 <SendFocusData+0x38>)
 8000ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ade:	bf00      	nop
 8000ae0:	08000b4d 	.word	0x08000b4d
 8000ae4:	08000c83 	.word	0x08000c83
 8000ae8:	08000b9d 	.word	0x08000b9d
 8000aec:	08000c83 	.word	0x08000c83
 8000af0:	08000bcd 	.word	0x08000bcd
 8000af4:	08000c83 	.word	0x08000c83
 8000af8:	08000c83 	.word	0x08000c83
 8000afc:	08000c83 	.word	0x08000c83
 8000b00:	08000c83 	.word	0x08000c83
 8000b04:	08000c83 	.word	0x08000c83
 8000b08:	08000c83 	.word	0x08000c83
 8000b0c:	08000c83 	.word	0x08000c83
 8000b10:	08000c83 	.word	0x08000c83
 8000b14:	08000c83 	.word	0x08000c83
 8000b18:	08000bfd 	.word	0x08000bfd
 8000b1c:	08000c2f 	.word	0x08000c2f
 8000b20:	08000c83 	.word	0x08000c83
 8000b24:	08000c83 	.word	0x08000c83
 8000b28:	08000c83 	.word	0x08000c83
 8000b2c:	08000c83 	.word	0x08000c83
 8000b30:	08000c83 	.word	0x08000c83
 8000b34:	08000c83 	.word	0x08000c83
 8000b38:	08000c83 	.word	0x08000c83
 8000b3c:	08000c83 	.word	0x08000c83
 8000b40:	08000c83 	.word	0x08000c83
 8000b44:	08000c83 	.word	0x08000c83
 8000b48:	08000c59 	.word	0x08000c59
    {
        case SetPos:{
            SendType->len = 0x0c;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	220c      	movs	r2, #12
 8000b50:	709a      	strb	r2, [r3, #2]
            SendType->data[2] = SendType->len;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	789a      	ldrb	r2, [r3, #2]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	719a      	strb	r2, [r3, #6]
            SendType->data[3] = SetPos;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	71da      	strb	r2, [r3, #7]
            //     setFocusPos.f = 2000.f;
            // }else if(setFocusPos.f < -2000.f)
            // {
            //     setFocusPos.f = -2000.f;
            // }
            SendType->data[6] = setFocusPos.u8t[3];
 8000b60:	4b5a      	ldr	r3, [pc, #360]	@ (8000ccc <SendFocusData+0x224>)
 8000b62:	78da      	ldrb	r2, [r3, #3]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	729a      	strb	r2, [r3, #10]
            SendType->data[7] = setFocusPos.u8t[2];
 8000b68:	4b58      	ldr	r3, [pc, #352]	@ (8000ccc <SendFocusData+0x224>)
 8000b6a:	789a      	ldrb	r2, [r3, #2]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	72da      	strb	r2, [r3, #11]
            SendType->data[8] = setFocusPos.u8t[1];
 8000b70:	4b56      	ldr	r3, [pc, #344]	@ (8000ccc <SendFocusData+0x224>)
 8000b72:	785a      	ldrb	r2, [r3, #1]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	731a      	strb	r2, [r3, #12]
            SendType->data[9] = setFocusPos.u8t[0];
 8000b78:	4b54      	ldr	r3, [pc, #336]	@ (8000ccc <SendFocusData+0x224>)
 8000b7a:	781a      	ldrb	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	735a      	strb	r2, [r3, #13]
            SendType->data[10] = 0x01;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2201      	movs	r2, #1
 8000b84:	739a      	strb	r2, [r3, #14]
            SendType->data[11] = checkData(SendType->data, 11);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	210b      	movs	r1, #11
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff6b 	bl	8000a68 <checkData>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461a      	mov	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	73da      	strb	r2, [r3, #15]
        }break;
 8000b9a:	e073      	b.n	8000c84 <SendFocusData+0x1dc>
        case GetCurPos:{
            SendType->len = 0x08;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2208      	movs	r2, #8
 8000ba0:	709a      	strb	r2, [r3, #2]
            SendType->data[2] = SendType->len;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	789a      	ldrb	r2, [r3, #2]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	719a      	strb	r2, [r3, #6]
            SendType->data[3] = GetCurPos;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2203      	movs	r2, #3
 8000bae:	71da      	strb	r2, [r3, #7]
            SendType->data[6] = 0x01;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	729a      	strb	r2, [r3, #10]
            SendType->data[7] = checkData(SendType->data, 7);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	2107      	movs	r1, #7
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff53 	bl	8000a68 <checkData>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	72da      	strb	r2, [r3, #11]
        }break;
 8000bca:	e05b      	b.n	8000c84 <SendFocusData+0x1dc>
        case StopRun:{
            SendType->len = 0x08;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2208      	movs	r2, #8
 8000bd0:	709a      	strb	r2, [r3, #2]
            SendType->data[2] = SendType->len;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	789a      	ldrb	r2, [r3, #2]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	719a      	strb	r2, [r3, #6]
            SendType->data[3] = StopRun;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2205      	movs	r2, #5
 8000bde:	71da      	strb	r2, [r3, #7]
            SendType->data[6] = 0x00;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	729a      	strb	r2, [r3, #10]
            SendType->data[7] = checkData(SendType->data, 7);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2107      	movs	r1, #7
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff3b 	bl	8000a68 <checkData>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	72da      	strb	r2, [r3, #11]
        }break;
 8000bfa:	e043      	b.n	8000c84 <SendFocusData+0x1dc>
        case MultiGetCurPos:{
            SendType->len = 0x08;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2208      	movs	r2, #8
 8000c00:	709a      	strb	r2, [r3, #2]
            SendType->data[2] = SendType->len;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	789a      	ldrb	r2, [r3, #2]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	719a      	strb	r2, [r3, #6]
            SendType->data[3] = MultiGetCurPos;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	220f      	movs	r2, #15
 8000c0e:	71da      	strb	r2, [r3, #7]
            SendType->data[6] = setFocusFreq;
 8000c10:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd0 <SendFocusData+0x228>)
 8000c12:	781a      	ldrb	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	729a      	strb	r2, [r3, #10]
            SendType->data[7] = checkData(SendType->data, 7);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	2107      	movs	r1, #7
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff22 	bl	8000a68 <checkData>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	72da      	strb	r2, [r3, #11]
        }break;
 8000c2c:	e02a      	b.n	8000c84 <SendFocusData+0x1dc>
        case StopGetPos:{
            SendType->len = 0x06;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2206      	movs	r2, #6
 8000c32:	709a      	strb	r2, [r3, #2]
            SendType->data[2] = SendType->len;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	789a      	ldrb	r2, [r3, #2]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	719a      	strb	r2, [r3, #6]
            SendType->data[3] = StopGetPos;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2210      	movs	r2, #16
 8000c40:	71da      	strb	r2, [r3, #7]
            SendType->data[5] = checkData(SendType->data, 5);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2105      	movs	r1, #5
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff0d 	bl	8000a68 <checkData>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	725a      	strb	r2, [r3, #9]
        }break;
 8000c56:	e015      	b.n	8000c84 <SendFocusData+0x1dc>
        case ClearPos:{
            SendType->len = 0x06;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2206      	movs	r2, #6
 8000c5c:	709a      	strb	r2, [r3, #2]
            SendType->data[2] = SendType->len;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	789a      	ldrb	r2, [r3, #2]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	719a      	strb	r2, [r3, #6]
            SendType->data[3] = ClearPos;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	221b      	movs	r2, #27
 8000c6a:	71da      	strb	r2, [r3, #7]
            SendType->data[5] = checkData(SendType->data, 5);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3304      	adds	r3, #4
 8000c70:	2105      	movs	r1, #5
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fef8 	bl	8000a68 <checkData>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	725a      	strb	r2, [r3, #9]
        }break;
 8000c80:	e000      	b.n	8000c84 <SendFocusData+0x1dc>
        default:
            break;
 8000c82:	bf00      	nop
    }
    for(int i = 0;i < SendType->len;i++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	e00b      	b.n	8000ca2 <SendFocusData+0x1fa>
    {
        // SendType->data[SendType->len] = SendType->check;
        uart_printf("%02x ", SendType->data[i]);
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	3304      	adds	r3, #4
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	480f      	ldr	r0, [pc, #60]	@ (8000cd4 <SendFocusData+0x22c>)
 8000c98:	f004 f80e 	bl	8004cb8 <uart_printf>
    for(int i = 0;i < SendType->len;i++)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	789b      	ldrb	r3, [r3, #2]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4293      	cmp	r3, r2
 8000cac:	dbed      	blt.n	8000c8a <SendFocusData+0x1e2>
    }
    HAL_UART_Transmit(&huart6, SendType->data, SendType->len, HAL_MAX_DELAY);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	1d19      	adds	r1, r3, #4
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	789b      	ldrb	r3, [r3, #2]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbc:	4806      	ldr	r0, [pc, #24]	@ (8000cd8 <SendFocusData+0x230>)
 8000cbe:	f00d ff2f 	bl	800eb20 <HAL_UART_Transmit>
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	240003f4 	.word	0x240003f4
 8000cd0:	240003fc 	.word	0x240003fc
 8000cd4:	08028ff0 	.word	0x08028ff0
 8000cd8:	24000bc8 	.word	0x24000bc8

08000cdc <packData>:
        .Offset_Y = 0
};


void packData(ImgSendTypedef_t *SendType,ImgSendDataTypedef *SendData)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]
    switch (SendType->FuncCode) // 功能码
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	799b      	ldrb	r3, [r3, #6]
 8000cee:	3b06      	subs	r3, #6
 8000cf0:	2b0e      	cmp	r3, #14
 8000cf2:	f200 814e 	bhi.w	8000f92 <packData+0x2b6>
 8000cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cfc <packData+0x20>)
 8000cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfc:	08000d39 	.word	0x08000d39
 8000d00:	08000f93 	.word	0x08000f93
 8000d04:	08000e55 	.word	0x08000e55
 8000d08:	08000f93 	.word	0x08000f93
 8000d0c:	08000f93 	.word	0x08000f93
 8000d10:	08000f93 	.word	0x08000f93
 8000d14:	08000f93 	.word	0x08000f93
 8000d18:	08000f93 	.word	0x08000f93
 8000d1c:	08000f93 	.word	0x08000f93
 8000d20:	08000f93 	.word	0x08000f93
 8000d24:	08000f93 	.word	0x08000f93
 8000d28:	08000f93 	.word	0x08000f93
 8000d2c:	08000f93 	.word	0x08000f93
 8000d30:	08000f93 	.word	0x08000f93
 8000d34:	08000f41 	.word	0x08000f41
    {
        case SETTING_DEVICEPARAM: // 0x06
        {
            switch (SendType->FuncSubCode) // 功能码子项
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	79db      	ldrb	r3, [r3, #7]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	f200 8086 	bhi.w	8000e50 <packData+0x174>
 8000d44:	a201      	add	r2, pc, #4	@ (adr r2, 8000d4c <packData+0x70>)
 8000d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4a:	bf00      	nop
 8000d4c:	08000d61 	.word	0x08000d61
 8000d50:	08000d93 	.word	0x08000d93
 8000d54:	08000dc5 	.word	0x08000dc5
 8000d58:	08000df7 	.word	0x08000df7
 8000d5c:	08000e49 	.word	0x08000e49
            {
                case FOCUS_ADJUST: // 0x03
                {
                	for(i = 0;i < 4;i++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	e00e      	b.n	8000d84 <packData+0xa8>
                	{
                		SendType->Data[10+i] = SendData->focusAdjust >> 8*(i);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	40da      	lsrs	r2, r3
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	330a      	adds	r3, #10
 8000d74:	b2d1      	uxtb	r1, r2
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	460a      	mov	r2, r1
 8000d7c:	729a      	strb	r2, [r3, #10]
                	for(i = 0;i < 4;i++)
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	3301      	adds	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d9ed      	bls.n	8000d66 <packData+0x8a>
                	}
                    SendType->DataLen = 6;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2206      	movs	r2, #6
 8000d8e:	805a      	strh	r2, [r3, #2]
                    break;
 8000d90:	e05f      	b.n	8000e52 <packData+0x176>
                }
                case ZOOM_ADJUST: // 0x04
                {
                    for(i = 0;i < 4;i++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	e00e      	b.n	8000db6 <packData+0xda>
                	{
                		SendType->Data[10+i] = SendData->zoomAdjust >> 8*(i);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	40da      	lsrs	r2, r3
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	330a      	adds	r3, #10
 8000da6:	b2d1      	uxtb	r1, r2
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	4413      	add	r3, r2
 8000dac:	460a      	mov	r2, r1
 8000dae:	729a      	strb	r2, [r3, #10]
                    for(i = 0;i < 4;i++)
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	3301      	adds	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d9ed      	bls.n	8000d98 <packData+0xbc>
                	}
                    SendType->DataLen = 6;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2206      	movs	r2, #6
 8000dc0:	805a      	strh	r2, [r3, #2]
                    break;
 8000dc2:	e046      	b.n	8000e52 <packData+0x176>
                }
                case EXPOSURE: // 0x05
                {
                    for(i = 0;i < 4;i++)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73fb      	strb	r3, [r7, #15]
 8000dc8:	e00e      	b.n	8000de8 <packData+0x10c>
                	{
                		SendType->Data[10+i] = SendData->exposure >> 8*(i);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	40da      	lsrs	r2, r3
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	330a      	adds	r3, #10
 8000dd8:	b2d1      	uxtb	r1, r2
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	460a      	mov	r2, r1
 8000de0:	729a      	strb	r2, [r3, #10]
                    for(i = 0;i < 4;i++)
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	3301      	adds	r3, #1
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d9ed      	bls.n	8000dca <packData+0xee>
                	}
                    SendType->DataLen = 6;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2206      	movs	r2, #6
 8000df2:	805a      	strh	r2, [r3, #2]
                    break;
 8000df4:	e02d      	b.n	8000e52 <packData+0x176>
                }
                case OPTICAL_CENTER: // 0x06
                {
                    for(i = 0;i < 4;i++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]
 8000dfa:	e01e      	b.n	8000e3a <packData+0x15e>
                    {
                        SendType->Data[10+i] = SendData->offsetX >> 8*(3-i);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	f1c3 0303 	rsb	r3, r3, #3
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	40da      	lsrs	r2, r3
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	330a      	adds	r3, #10
 8000e0e:	b2d1      	uxtb	r1, r2
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	460a      	mov	r2, r1
 8000e16:	729a      	strb	r2, [r3, #10]
                        SendType->Data[14+i] = SendData->offsetY >> 8*(3-i);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	691a      	ldr	r2, [r3, #16]
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	f1c3 0303 	rsb	r3, r3, #3
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	40da      	lsrs	r2, r3
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	330e      	adds	r3, #14
 8000e2a:	b2d1      	uxtb	r1, r2
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	4413      	add	r3, r2
 8000e30:	460a      	mov	r2, r1
 8000e32:	729a      	strb	r2, [r3, #10]
                    for(i = 0;i < 4;i++)
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	3301      	adds	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d9dd      	bls.n	8000dfc <packData+0x120>
                    }
                    SendType->DataLen = 10;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	220a      	movs	r2, #10
 8000e44:	805a      	strh	r2, [r3, #2]
                    break;
 8000e46:	e004      	b.n	8000e52 <packData+0x176>
                    // SendType->Data[17] = DeviceIPAddr.u8t[1];
                    // SendType->Data[18] = DeviceIPAddr.u8t[2];
                    // SendType->Data[19] = DeviceIPAddr.u8t[3];
                    // SendType->Data[20] = DevicePort >> 8;
                    // SendType->Data[21] = DevicePort;
                    SendType->DataLen = 14;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	220e      	movs	r2, #14
 8000e4c:	805a      	strh	r2, [r3, #2]
                    break;
 8000e4e:	e000      	b.n	8000e52 <packData+0x176>
                }
                default:
                {
                    break;
 8000e50:	bf00      	nop
                }
            }
        }break;
 8000e52:	e09e      	b.n	8000f92 <packData+0x2b6>
        case SETTING_TRACK: // 0x07
        {
            switch (SendType->FuncSubCode) // 功能码子项
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	79db      	ldrb	r3, [r3, #7]
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	d02e      	beq.n	8000eba <packData+0x1de>
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	dc6d      	bgt.n	8000f3c <packData+0x260>
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d002      	beq.n	8000e6a <packData+0x18e>
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d004      	beq.n	8000e72 <packData+0x196>
                    SendType->DataLen = 10;
                    break;
                }
                default:
                {
                    break;
 8000e68:	e068      	b.n	8000f3c <packData+0x260>
                    SendType->DataLen = 2;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	805a      	strh	r2, [r3, #2]
                    break;
 8000e70:	e065      	b.n	8000f3e <packData+0x262>
                    SendType->Data[10] = SendData->AutoTracking.TrackingType;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	7d1a      	ldrb	r2, [r3, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	751a      	strb	r2, [r3, #20]
                    SendType->Data[11] = SendData->AutoTracking.CaptureStrategy;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	7d5a      	ldrb	r2, [r3, #21]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	755a      	strb	r2, [r3, #21]
                    SendType->Data[12] = SendData->AutoTracking.OffsetX;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	8adb      	ldrh	r3, [r3, #22]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	759a      	strb	r2, [r3, #22]
                    SendType->Data[13] = SendData->AutoTracking.OffsetX >> 8;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	8adb      	ldrh	r3, [r3, #22]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	75da      	strb	r2, [r3, #23]
                    SendType->Data[14] = SendData->AutoTracking.OffsetY;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	8b1b      	ldrh	r3, [r3, #24]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	761a      	strb	r2, [r3, #24]
                    SendType->Data[15] = SendData->AutoTracking.OffsetY >> 8;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	8b1b      	ldrh	r3, [r3, #24]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	765a      	strb	r2, [r3, #25]
                    SendType->DataLen = 8;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	805a      	strh	r2, [r3, #2]
                    break;
 8000eb8:	e041      	b.n	8000f3e <packData+0x262>
                    for(i = 0;i < 2;i++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	e036      	b.n	8000f2e <packData+0x252>
                        SendType->Data[10+i] = SendData->ManualTracking.TrackingCenterX >> 8*(i);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	8b5b      	ldrh	r3, [r3, #26]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	411a      	asrs	r2, r3
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	330a      	adds	r3, #10
 8000ed0:	b2d1      	uxtb	r1, r2
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	460a      	mov	r2, r1
 8000ed8:	729a      	strb	r2, [r3, #10]
                        SendType->Data[12+i] = SendData->ManualTracking.TrackingCenterY >> 8*(i);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	8b9b      	ldrh	r3, [r3, #28]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	411a      	asrs	r2, r3
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	330c      	adds	r3, #12
 8000eea:	b2d1      	uxtb	r1, r2
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	729a      	strb	r2, [r3, #10]
                        SendType->Data[14+i] = SendData->ManualTracking.TrackingWidth >> 8*(i);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	8bdb      	ldrh	r3, [r3, #30]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	411a      	asrs	r2, r3
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	330e      	adds	r3, #14
 8000f04:	b2d1      	uxtb	r1, r2
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	460a      	mov	r2, r1
 8000f0c:	729a      	strb	r2, [r3, #10]
                        SendType->Data[16+i] = SendData->ManualTracking.TrackingHeight >> 8*(i);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	8c1b      	ldrh	r3, [r3, #32]
 8000f12:	461a      	mov	r2, r3
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	411a      	asrs	r2, r3
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	3310      	adds	r3, #16
 8000f1e:	b2d1      	uxtb	r1, r2
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	460a      	mov	r2, r1
 8000f26:	729a      	strb	r2, [r3, #10]
                    for(i = 0;i < 2;i++)
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d9c5      	bls.n	8000ec0 <packData+0x1e4>
                    SendType->DataLen = 10;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	220a      	movs	r2, #10
 8000f38:	805a      	strh	r2, [r3, #2]
                    break;
 8000f3a:	e000      	b.n	8000f3e <packData+0x262>
                    break;
 8000f3c:	bf00      	nop
                }
            }
        }break;
 8000f3e:	e028      	b.n	8000f92 <packData+0x2b6>


        }break;
        case SETTING_IMGTRANS: // 0x14
        {
            switch (SendType->FuncSubCode) // 功能码子项
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	79db      	ldrb	r3, [r3, #7]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d002      	beq.n	8000f4e <packData+0x272>
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d121      	bne.n	8000f90 <packData+0x2b4>
            {
                case 0x02: // 停止传输图像
                {
                    break;
 8000f4c:	e020      	b.n	8000f90 <packData+0x2b4>
                }
                case 0x01: // 开始传输图像
                {
                    SendType->Data[10] = SendData->ImgTrans.ResolutionX;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	751a      	strb	r2, [r3, #20]
                    SendType->Data[11] = SendData->ImgTrans.ResolutionX >> 8;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	755a      	strb	r2, [r3, #21]
                    SendType->Data[12] = SendData->ImgTrans.ResolutionY;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	759a      	strb	r2, [r3, #22]
                    SendType->Data[13] = SendData->ImgTrans.ResolutionY >> 8;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	75da      	strb	r2, [r3, #23]
                    SendType->Data[14] = SendData->ImgTrans.OSDType;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	761a      	strb	r2, [r3, #24]
                    SendType->DataLen = 7;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2207      	movs	r2, #7
 8000f8c:	805a      	strh	r2, [r3, #2]
                    break;
 8000f8e:	bf00      	nop
                }
            }
        }break;
 8000f90:	bf00      	nop
    }


    SendType->Data[0] = SendType->Head1;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	781a      	ldrb	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	729a      	strb	r2, [r3, #10]
    SendType->Data[1] = SendType->Head2;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	785a      	ldrb	r2, [r3, #1]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	72da      	strb	r2, [r3, #11]
    SendType->Data[2] = SendType->DataLen >> 8; //小端
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	885b      	ldrh	r3, [r3, #2]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	731a      	strb	r2, [r3, #12]
    SendType->Data[3] = SendType->DataLen;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	885b      	ldrh	r3, [r3, #2]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	735a      	strb	r2, [r3, #13]
    SendType->Data[4] = SendType->FrameMark;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	791a      	ldrb	r2, [r3, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	739a      	strb	r2, [r3, #14]
    SendType->Data[5] = SendType->DeviceID;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	795a      	ldrb	r2, [r3, #5]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	73da      	strb	r2, [r3, #15]
    SendType->Data[6] = SendType->FuncCode;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	799a      	ldrb	r2, [r3, #6]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	741a      	strb	r2, [r3, #16]
    SendType->Data[7] = SendType->FuncSubCode;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	79da      	ldrb	r2, [r3, #7]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	745a      	strb	r2, [r3, #17]
    SendType->Data[8] = 0x00;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	749a      	strb	r2, [r3, #18]
    SendType->Data[9] = 0x00;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	74da      	strb	r2, [r3, #19]
    SendType->Data[TXDATA_LEN - 1] = SendType->Tail;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
}
 8000ff2:	bf00      	nop
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <Send2ImgModule>:

void Send2ImgModule(ImgSendTypedef_t *SendType,ImgSendDataTypedef *SendData)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]

		packData(SendType,SendData);
 800100a:	6839      	ldr	r1, [r7, #0]
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff fe65 	bl	8000cdc <packData>
		// memset(SendType->Data,0xff,64);
        // for(int i = 0;i < 64;i++)
        // {
        //     uart_printf("%02x ",SendType->Data[i]);
        // }
	switch(SendType->DeviceID)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	795b      	ldrb	r3, [r3, #5]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d002      	beq.n	8001020 <Send2ImgModule+0x20>
 800101a:	2b02      	cmp	r3, #2
 800101c:	d011      	beq.n	8001042 <Send2ImgModule+0x42>
		case TRACKING_JING:{
			// 串口4发送
            HAL_UART_Transmit(&huart4,SendType->Data,64, HAL_MAX_DELAY);
            memset(SendType->Data,0xff,64);
		}break;
		default:break;
 800101e:	e021      	b.n	8001064 <Send2ImgModule+0x64>
            HAL_UART_Transmit(&huart3,SendType->Data,64, HAL_MAX_DELAY);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f103 010a 	add.w	r1, r3, #10
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	2240      	movs	r2, #64	@ 0x40
 800102c:	480f      	ldr	r0, [pc, #60]	@ (800106c <Send2ImgModule+0x6c>)
 800102e:	f00d fd77 	bl	800eb20 <HAL_UART_Transmit>
            memset(SendType->Data,0xff,64);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	330a      	adds	r3, #10
 8001036:	2240      	movs	r2, #64	@ 0x40
 8001038:	21ff      	movs	r1, #255	@ 0xff
 800103a:	4618      	mov	r0, r3
 800103c:	f024 f9fe 	bl	802543c <memset>
		}break;
 8001040:	e010      	b.n	8001064 <Send2ImgModule+0x64>
            HAL_UART_Transmit(&huart4,SendType->Data,64, HAL_MAX_DELAY);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f103 010a 	add.w	r1, r3, #10
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	2240      	movs	r2, #64	@ 0x40
 800104e:	4808      	ldr	r0, [pc, #32]	@ (8001070 <Send2ImgModule+0x70>)
 8001050:	f00d fd66 	bl	800eb20 <HAL_UART_Transmit>
            memset(SendType->Data,0xff,64);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	330a      	adds	r3, #10
 8001058:	2240      	movs	r2, #64	@ 0x40
 800105a:	21ff      	movs	r1, #255	@ 0xff
 800105c:	4618      	mov	r0, r3
 800105e:	f024 f9ed 	bl	802543c <memset>
		}break;
 8001062:	bf00      	nop
	}

}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	24000b34 	.word	0x24000b34
 8001070:	24000850 	.word	0x24000850

08001074 <CheckSumRangefinder>:



// 校验和是将DeviceID、FuncCode、Param[4]相加取低8位
uint8_t CheckSumRangefinder(uint8_t *ptr,uint8_t len)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]
    for(int i = 0;i < len;i++)
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	e009      	b.n	800109e <CheckSumRangefinder+0x2a>
    {
        sum += ptr[i];
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4413      	add	r3, r2
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	4413      	add	r3, r2
 8001096:	73fb      	strb	r3, [r7, #15]
    for(int i = 0;i < len;i++)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	3301      	adds	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dbf1      	blt.n	800108a <CheckSumRangefinder+0x16>
    }
    return sum;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <PackRangefinerData>:

void PackRangefinerData(RangefinderDataFrame_t *SendType)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    switch (SendType->FuncCode)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	791b      	ldrb	r3, [r3, #4]
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	dc25      	bgt.n	8001110 <PackRangefinerData+0x5c>
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	dc13      	bgt.n	80010f0 <PackRangefinerData+0x3c>
        {
            SendType->len = 0x02;
            break;
        }
        default:
            break;
 80010c8:	e06e      	b.n	80011a8 <PackRangefinerData+0xf4>
    switch (SendType->FuncCode)
 80010ca:	3ba0      	subs	r3, #160	@ 0xa0
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	d86b      	bhi.n	80011a8 <PackRangefinerData+0xf4>
 80010d0:	a201      	add	r2, pc, #4	@ (adr r2, 80010d8 <PackRangefinerData+0x24>)
 80010d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d6:	bf00      	nop
 80010d8:	0800114b 	.word	0x0800114b
 80010dc:	08001153 	.word	0x08001153
 80010e0:	08001169 	.word	0x08001169
 80010e4:	08001181 	.word	0x08001181
 80010e8:	08001189 	.word	0x08001189
 80010ec:	080011a1 	.word	0x080011a1
 80010f0:	3b01      	subs	r3, #1
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	d858      	bhi.n	80011a8 <PackRangefinerData+0xf4>
 80010f6:	a201      	add	r2, pc, #4	@ (adr r2, 80010fc <PackRangefinerData+0x48>)
 80010f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fc:	0800111b 	.word	0x0800111b
 8001100:	08001123 	.word	0x08001123
 8001104:	0800112b 	.word	0x0800112b
 8001108:	0800113b 	.word	0x0800113b
 800110c:	08001143 	.word	0x08001143
 8001110:	2ba5      	cmp	r3, #165	@ 0xa5
 8001112:	dc49      	bgt.n	80011a8 <PackRangefinerData+0xf4>
 8001114:	2ba0      	cmp	r3, #160	@ 0xa0
 8001116:	dad8      	bge.n	80010ca <PackRangefinerData+0x16>
            break;
 8001118:	e046      	b.n	80011a8 <PackRangefinerData+0xf4>
            SendType->len = 0x02;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2202      	movs	r2, #2
 800111e:	709a      	strb	r2, [r3, #2]
            break;
 8001120:	e043      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x02;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2202      	movs	r2, #2
 8001126:	709a      	strb	r2, [r3, #2]
            break;
 8001128:	e03f      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x03;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2203      	movs	r2, #3
 800112e:	709a      	strb	r2, [r3, #2]
            SendType->Data[5] = cSetTarget;
 8001130:	4b41      	ldr	r3, [pc, #260]	@ (8001238 <PackRangefinerData+0x184>)
 8001132:	781a      	ldrb	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	739a      	strb	r2, [r3, #14]
            break;
 8001138:	e037      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x02;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2202      	movs	r2, #2
 800113e:	709a      	strb	r2, [r3, #2]
            break;
 8001140:	e033      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x02;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2202      	movs	r2, #2
 8001146:	709a      	strb	r2, [r3, #2]
            break;
 8001148:	e02f      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x06;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2206      	movs	r2, #6
 800114e:	709a      	strb	r2, [r3, #2]
            break;
 8001150:	e02b      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x04;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2204      	movs	r2, #4
 8001156:	709a      	strb	r2, [r3, #2]
            SendType->Data[5] = cSetMultiFreq;
 8001158:	4b38      	ldr	r3, [pc, #224]	@ (800123c <PackRangefinerData+0x188>)
 800115a:	781a      	ldrb	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	739a      	strb	r2, [r3, #14]
            SendType->Data[6] = 0x00;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	73da      	strb	r2, [r3, #15]
            break;
 8001166:	e020      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x04;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2204      	movs	r2, #4
 800116c:	709a      	strb	r2, [r3, #2]
            SendType->Data[5] = cSetMinRange.data_u8[1];
 800116e:	4b34      	ldr	r3, [pc, #208]	@ (8001240 <PackRangefinerData+0x18c>)
 8001170:	785a      	ldrb	r2, [r3, #1]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	739a      	strb	r2, [r3, #14]
            SendType->Data[6] = cSetMinRange.data_u8[0];
 8001176:	4b32      	ldr	r3, [pc, #200]	@ (8001240 <PackRangefinerData+0x18c>)
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	73da      	strb	r2, [r3, #15]
            break;
 800117e:	e014      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x02;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2202      	movs	r2, #2
 8001184:	709a      	strb	r2, [r3, #2]
            break;
 8001186:	e010      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x04;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2204      	movs	r2, #4
 800118c:	709a      	strb	r2, [r3, #2]
            SendType->Data[5] = cSetMaxRange.data_u8[1];
 800118e:	4b2d      	ldr	r3, [pc, #180]	@ (8001244 <PackRangefinerData+0x190>)
 8001190:	785a      	ldrb	r2, [r3, #1]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	739a      	strb	r2, [r3, #14]
            SendType->Data[6] = cSetMaxRange.data_u8[0];
 8001196:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <PackRangefinerData+0x190>)
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	73da      	strb	r2, [r3, #15]
            break;
 800119e:	e004      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x02;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2202      	movs	r2, #2
 80011a4:	709a      	strb	r2, [r3, #2]
            break;
 80011a6:	e000      	b.n	80011aa <PackRangefinerData+0xf6>
            break;
 80011a8:	bf00      	nop
    }
    SendType->Data[0] = SendType->head[0];
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	725a      	strb	r2, [r3, #9]
    SendType->Data[1] = SendType->head[1];
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	785a      	ldrb	r2, [r3, #1]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	729a      	strb	r2, [r3, #10]
    SendType->Data[2] = SendType->len;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	789a      	ldrb	r2, [r3, #2]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	72da      	strb	r2, [r3, #11]
    SendType->Data[3] = SendType->DeviceID; 
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	78da      	ldrb	r2, [r3, #3]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	731a      	strb	r2, [r3, #12]
    SendType->Data[4] = SendType->FuncCode;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	791a      	ldrb	r2, [r3, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	735a      	strb	r2, [r3, #13]

    if(SendType->len == 0x02)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	789b      	ldrb	r3, [r3, #2]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d10b      	bne.n	80011f2 <PackRangefinerData+0x13e>
    {
        SendType->Data[5] = CheckSumRangefinder(SendType->Data+3,2);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3309      	adds	r3, #9
 80011de:	3303      	adds	r3, #3
 80011e0:	2102      	movs	r1, #2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff46 	bl	8001074 <CheckSumRangefinder>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	739a      	strb	r2, [r3, #14]
    else if(SendType->len == 0x04)
    {
        SendType->Data[7] = CheckSumRangefinder(SendType->Data+3,4);
    }
    
}
 80011f0:	e01e      	b.n	8001230 <PackRangefinerData+0x17c>
    else if(SendType->len == 0x03)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	789b      	ldrb	r3, [r3, #2]
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d10b      	bne.n	8001212 <PackRangefinerData+0x15e>
        SendType->Data[6] = CheckSumRangefinder(SendType->Data+3,3);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3309      	adds	r3, #9
 80011fe:	3303      	adds	r3, #3
 8001200:	2103      	movs	r1, #3
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff36 	bl	8001074 <CheckSumRangefinder>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	73da      	strb	r2, [r3, #15]
}
 8001210:	e00e      	b.n	8001230 <PackRangefinerData+0x17c>
    else if(SendType->len == 0x04)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	789b      	ldrb	r3, [r3, #2]
 8001216:	2b04      	cmp	r3, #4
 8001218:	d10a      	bne.n	8001230 <PackRangefinerData+0x17c>
        SendType->Data[7] = CheckSumRangefinder(SendType->Data+3,4);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3309      	adds	r3, #9
 800121e:	3303      	adds	r3, #3
 8001220:	2104      	movs	r1, #4
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff26 	bl	8001074 <CheckSumRangefinder>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	741a      	strb	r2, [r3, #16]
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	24000444 	.word	0x24000444
 800123c:	24000445 	.word	0x24000445
 8001240:	24000448 	.word	0x24000448
 8001244:	2400044c 	.word	0x2400044c

08001248 <Send2RangefinderModule>:


void Send2RangefinderModule(RangefinderDataFrame_t *SendType)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    PackRangefinerData(SendType);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff2f 	bl	80010b4 <PackRangefinerData>
    if(SendType->len == 0x02)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	789b      	ldrb	r3, [r3, #2]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d109      	bne.n	8001272 <Send2RangefinderModule+0x2a>
    {
        HAL_UART_Transmit(&huart7, SendType->Data, 6, 0xffff);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f103 0109 	add.w	r1, r3, #9
 8001264:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001268:	2206      	movs	r2, #6
 800126a:	4815      	ldr	r0, [pc, #84]	@ (80012c0 <Send2RangefinderModule+0x78>)
 800126c:	f00d fc58 	bl	800eb20 <HAL_UART_Transmit>
 8001270:	e01a      	b.n	80012a8 <Send2RangefinderModule+0x60>
    }
    else if(SendType->len == 0x03)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	789b      	ldrb	r3, [r3, #2]
 8001276:	2b03      	cmp	r3, #3
 8001278:	d109      	bne.n	800128e <Send2RangefinderModule+0x46>
    {
        HAL_UART_Transmit(&huart7, SendType->Data, 7, 0xffff);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f103 0109 	add.w	r1, r3, #9
 8001280:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001284:	2207      	movs	r2, #7
 8001286:	480e      	ldr	r0, [pc, #56]	@ (80012c0 <Send2RangefinderModule+0x78>)
 8001288:	f00d fc4a 	bl	800eb20 <HAL_UART_Transmit>
 800128c:	e00c      	b.n	80012a8 <Send2RangefinderModule+0x60>
    }
    else if(SendType->len == 0x04)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	789b      	ldrb	r3, [r3, #2]
 8001292:	2b04      	cmp	r3, #4
 8001294:	d108      	bne.n	80012a8 <Send2RangefinderModule+0x60>
    {
        HAL_UART_Transmit(&huart7, SendType->Data, 8, 0xffff);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f103 0109 	add.w	r1, r3, #9
 800129c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012a0:	2208      	movs	r2, #8
 80012a2:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <Send2RangefinderModule+0x78>)
 80012a4:	f00d fc3c 	bl	800eb20 <HAL_UART_Transmit>
    }
    // for(int i = 0;i < 8;i++)
    // {
    //     uart_printf("%02x ", SendType->Data[i]);
    // }
    memset(SendType->Data, 0, 16);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3309      	adds	r3, #9
 80012ac:	2210      	movs	r2, #16
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f024 f8c3 	bl	802543c <memset>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	24000978 	.word	0x24000978

080012c4 <CheckSum>:
TrackingFaultCu_Typedef TrackingFaultCodeCu;
TrackingFaultJing_Typedef TrackingFaultCodeJing;

// 和校验
uint8_t CheckSum(uint8_t *ptr, uint8_t len)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]
    for(int i = 0;i < len;i++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	e009      	b.n	80012ee <CheckSum+0x2a>
    {
        sum += ptr[i];
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	781a      	ldrb	r2, [r3, #0]
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	4413      	add	r3, r2
 80012e6:	73fb      	strb	r3, [r7, #15]
    for(int i = 0;i < len;i++)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	3301      	adds	r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	dbf1      	blt.n	80012da <CheckSum+0x16>
    }
    return sum;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <ServoDataPack>:


void ServoDataPack(SendCmd_Typedef *SendType,ServoSendData_Typedef *ServoData)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
    static uint8_t crc = 0;
    uint8_t check = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	73fb      	strb	r3, [r7, #15]
    SendType->data[3] = ServoData->TurnMode;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	781a      	ldrb	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	719a      	strb	r2, [r3, #6]
    SendType->data[4] = ServoData->MotorEnable;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	785a      	ldrb	r2, [r3, #1]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	71da      	strb	r2, [r3, #7]
    SendType->data[5] = ServoData->Turntable_Yaw >> 8;
    SendType->data[6] = ServoData->Turntable_Yaw;
    SendType->data[7] = ServoData->Turntable_Pitch >> 8;
    SendType->data[8] = ServoData->Turntable_Pitch;
    #else
    SendType->data[5] = ServoData->Turntable_Yaw;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	721a      	strb	r2, [r3, #8]
    SendType->data[6] = ServoData->Turntable_Yaw >> 8;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001334:	121b      	asrs	r3, r3, #8
 8001336:	b21b      	sxth	r3, r3
 8001338:	b2da      	uxtb	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	725a      	strb	r2, [r3, #9]
    SendType->data[7] = ServoData->Turntable_Pitch;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	729a      	strb	r2, [r3, #10]
    SendType->data[8] = ServoData->Turntable_Pitch >> 8;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001350:	121b      	asrs	r3, r3, #8
 8001352:	b21b      	sxth	r3, r3
 8001354:	b2da      	uxtb	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	72da      	strb	r2, [r3, #11]
    #endif

    SendType->data[9] = ServoData->TrackingDataValid;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	799a      	ldrb	r2, [r3, #6]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	731a      	strb	r2, [r3, #12]

    for(int i = 0;i < 4;i++)
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	e018      	b.n	800139a <ServoDataPack+0x96>
    {
        #if BIG_ENDIAN
        SendType->data[10+i] = ServoData->TargetYaw.u8t[3-i];
        SendType->data[14+i] = ServoData->TargetPitch.u8t[3-i];
        #else
        SendType->data[10+i] = ServoData->TargetYaw.u8t[i];
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	330a      	adds	r3, #10
 800136c:	6839      	ldr	r1, [r7, #0]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	440a      	add	r2, r1
 8001372:	3208      	adds	r2, #8
 8001374:	7811      	ldrb	r1, [r2, #0]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	460a      	mov	r2, r1
 800137c:	70da      	strb	r2, [r3, #3]
        SendType->data[14+i] = ServoData->TargetPitch.u8t[i];
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	330e      	adds	r3, #14
 8001382:	6839      	ldr	r1, [r7, #0]
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	440a      	add	r2, r1
 8001388:	320c      	adds	r2, #12
 800138a:	7811      	ldrb	r1, [r2, #0]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	4413      	add	r3, r2
 8001390:	460a      	mov	r2, r1
 8001392:	70da      	strb	r2, [r3, #3]
    for(int i = 0;i < 4;i++)
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	3301      	adds	r3, #1
 8001398:	61fb      	str	r3, [r7, #28]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	2b03      	cmp	r3, #3
 800139e:	dde3      	ble.n	8001368 <ServoDataPack+0x64>
    //   else
    //   {
    //     ServoData->TrackingFaultCleanCu = 0x55;
    //     errorflag = 0;
    //   }
    if(ServoData->TrackingFaultCleanCu == 0x66)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	7c1b      	ldrb	r3, [r3, #16]
 80013a4:	2b66      	cmp	r3, #102	@ 0x66
 80013a6:	d107      	bne.n	80013b8 <ServoDataPack+0xb4>
    {
        SendType->data[18] = ServoData->TrackingFaultCleanCu;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	7c1a      	ldrb	r2, [r3, #16]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	755a      	strb	r2, [r3, #21]
        ServoData->TrackingFaultCleanCu = 0x55;     
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2255      	movs	r2, #85	@ 0x55
 80013b4:	741a      	strb	r2, [r3, #16]
 80013b6:	e002      	b.n	80013be <ServoDataPack+0xba>
    }else
    {
        SendType->data[18] = 0x55;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2255      	movs	r2, #85	@ 0x55
 80013bc:	755a      	strb	r2, [r3, #21]
    }

    // SendType->data[18] = ServoData->TrackingFaultCleanCu;
    SendType->data[19] = ServoData->FSMMode;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	7c5a      	ldrb	r2, [r3, #17]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	759a      	strb	r2, [r3, #22]
    SendType->data[20] = ServoData->ControlEnableJing;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	7c9a      	ldrb	r2, [r3, #18]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	75da      	strb	r2, [r3, #23]

    for(int i = 0;i < 4;i++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
 80013d2:	e02e      	b.n	8001432 <ServoDataPack+0x12e>
        SendType->data[21+i] = ServoData->TargetFSMYaw.u8t[3-i];
        SendType->data[25+i] = ServoData->TargetFSMPitch.u8t[3-i];
        SendType->data[29+i] = ServoData->ZeroCorrectionFSMX.u8t[3-i];
        SendType->data[33+i] = ServoData->ZeroCorrectionFSMY.u8t[3-i];
        #else
        SendType->data[21+i] = ServoData->TargetFSMYaw.u8t[i];
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	3315      	adds	r3, #21
 80013d8:	6839      	ldr	r1, [r7, #0]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	440a      	add	r2, r1
 80013de:	3214      	adds	r2, #20
 80013e0:	7811      	ldrb	r1, [r2, #0]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	460a      	mov	r2, r1
 80013e8:	70da      	strb	r2, [r3, #3]
        SendType->data[25+i] = ServoData->TargetFSMPitch.u8t[i];
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	3319      	adds	r3, #25
 80013ee:	6839      	ldr	r1, [r7, #0]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	440a      	add	r2, r1
 80013f4:	3218      	adds	r2, #24
 80013f6:	7811      	ldrb	r1, [r2, #0]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	460a      	mov	r2, r1
 80013fe:	70da      	strb	r2, [r3, #3]
        SendType->data[29+i] = ServoData->ZeroCorrectionFSMX.u8t[i];
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	331d      	adds	r3, #29
 8001404:	6839      	ldr	r1, [r7, #0]
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	440a      	add	r2, r1
 800140a:	321c      	adds	r2, #28
 800140c:	7811      	ldrb	r1, [r2, #0]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	460a      	mov	r2, r1
 8001414:	70da      	strb	r2, [r3, #3]
        SendType->data[33+i] = ServoData->ZeroCorrectionFSMY.u8t[i];
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	3321      	adds	r3, #33	@ 0x21
 800141a:	6839      	ldr	r1, [r7, #0]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	440a      	add	r2, r1
 8001420:	3220      	adds	r2, #32
 8001422:	7811      	ldrb	r1, [r2, #0]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	460a      	mov	r2, r1
 800142a:	70da      	strb	r2, [r3, #3]
    for(int i = 0;i < 4;i++)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	3301      	adds	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b03      	cmp	r3, #3
 8001436:	ddcd      	ble.n	80013d4 <ServoDataPack+0xd0>
        #endif
    }

    for(int i = 0;i < 2;i++)
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e01c      	b.n	8001478 <ServoDataPack+0x174>
    {
        #if BIG_ENDIAN
        SendType->data[37+i] = ServoData->MousePointX >> 8*(1-i);
        SendType->data[39+i] = ServoData->MousePointY >> 8*(1-i);
        #else
        SendType->data[37+i] = ServoData->MousePointX >> 8*i;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001442:	461a      	mov	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	411a      	asrs	r2, r3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3325      	adds	r3, #37	@ 0x25
 800144e:	b2d1      	uxtb	r1, r2
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	4413      	add	r3, r2
 8001454:	460a      	mov	r2, r1
 8001456:	70da      	strb	r2, [r3, #3]
        SendType->data[39+i] = ServoData->MousePointY >> 8*i;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800145c:	461a      	mov	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	411a      	asrs	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	3327      	adds	r3, #39	@ 0x27
 8001468:	b2d1      	uxtb	r1, r2
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	460a      	mov	r2, r1
 8001470:	70da      	strb	r2, [r3, #3]
    for(int i = 0;i < 2;i++)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b01      	cmp	r3, #1
 800147c:	dddf      	ble.n	800143e <ServoDataPack+0x13a>
        #endif
    }

    SendType->data[41] = ServoData->MousePointJing;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    //   else
    //   {
    //     errorflag = 0;
    //     ServoData->TrackingFaultCleanJing = 0x55;
    //   }
    if(ServoData->TrackingFaultCleanJing == 0x33)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001490:	2b33      	cmp	r3, #51	@ 0x33
 8001492:	d10a      	bne.n	80014aa <ServoDataPack+0x1a6>
    {
        SendType->data[42] = ServoData->TrackingFaultCleanJing;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        ServoData->TrackingFaultCleanJing = 0x55;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2255      	movs	r2, #85	@ 0x55
 80014a4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 80014a8:	e003      	b.n	80014b2 <ServoDataPack+0x1ae>
    }else
    {
        SendType->data[42] = 0x55;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2255      	movs	r2, #85	@ 0x55
 80014ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
    // SendType->data[42] = ServoData->TrackingFaultCleanJing;

    for(int i = 0;i < 4;i++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	e00d      	b.n	80014d4 <ServoDataPack+0x1d0>
    {
        #if BIG_ENDIAN
        SendType->data[43+i] = ServoData->AngleJing.u8t[3-i];
        #else
        SendType->data[43+i] = ServoData->AngleJing.u8t[i];
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	332b      	adds	r3, #43	@ 0x2b
 80014bc:	6839      	ldr	r1, [r7, #0]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	440a      	add	r2, r1
 80014c2:	322c      	adds	r2, #44	@ 0x2c
 80014c4:	7811      	ldrb	r1, [r2, #0]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	460a      	mov	r2, r1
 80014cc:	70da      	strb	r2, [r3, #3]
    for(int i = 0;i < 4;i++)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	3301      	adds	r3, #1
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	ddee      	ble.n	80014b8 <ServoDataPack+0x1b4>
        #endif
    }
    SendType->crc = crc;
 80014da:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <ServoDataPack+0x23c>)
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    SendType->data[0] = SendType->head[0];
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	70da      	strb	r2, [r3, #3]
    SendType->data[1] = SendType->head[1];
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	785a      	ldrb	r2, [r3, #1]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	711a      	strb	r2, [r3, #4]
    SendType->data[2] = SendType->len;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	789a      	ldrb	r2, [r3, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	715a      	strb	r2, [r3, #5]
    SendType->data[47] = crc;
 80014fc:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <ServoDataPack+0x23c>)
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    check = CheckSum(SendType->data, 48);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3303      	adds	r3, #3
 800150a:	2130      	movs	r1, #48	@ 0x30
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fed9 	bl	80012c4 <CheckSum>
 8001512:	4603      	mov	r3, r0
 8001514:	73fb      	strb	r3, [r7, #15]
    SendType->data[48] = check;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    SendType->data[49] = SendType->end;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 2037 	ldrb.w	r2, [r3, #55]	@ 0x37
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    crc++;
 800152a:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <ServoDataPack+0x23c>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <ServoDataPack+0x23c>)
 8001534:	701a      	strb	r2, [r3, #0]

}
 8001536:	bf00      	nop
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	240004af 	.word	0x240004af

08001544 <ServoDataSend>:

void ServoDataSend(SendCmd_Typedef *SendType,ServoSendData_Typedef *ServoData)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
        ServoDataPack(SendType, ServoData);
 800154e:	6839      	ldr	r1, [r7, #0]
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fed7 	bl	8001304 <ServoDataPack>
        // 串口发送
        for(int i = 0;i < 50;i++)
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	e00b      	b.n	8001574 <ServoDataSend+0x30>
        {
            uart_printf("%02x ", SendType->data[i]);
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4413      	add	r3, r2
 8001562:	3303      	adds	r3, #3
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	4619      	mov	r1, r3
 8001568:	480d      	ldr	r0, [pc, #52]	@ (80015a0 <ServoDataSend+0x5c>)
 800156a:	f003 fba5 	bl	8004cb8 <uart_printf>
        for(int i = 0;i < 50;i++)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3301      	adds	r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2b31      	cmp	r3, #49	@ 0x31
 8001578:	ddf0      	ble.n	800155c <ServoDataSend+0x18>
            // HAL_UART_Transmit(&huart5, SendType->data, 50, 0xffff);
        }
        // uart_printf("\r\n");
        if(errorflag)
 800157a:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <ServoDataSend+0x60>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <ServoDataSend+0x44>
        {
            // HAL_UART_Transmit(&huart5, SendType->data, 50, 0xffff);
            errorflag = 0;
 8001582:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <ServoDataSend+0x60>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
        }
        // uart_printf("errorflag = %d\r\n",errorflag);
        HAL_UART_Transmit(&huart5, SendType->data, 50, HAL_MAX_DELAY);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	1cd9      	adds	r1, r3, #3
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	2232      	movs	r2, #50	@ 0x32
 8001592:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <ServoDataSend+0x64>)
 8001594:	f00d fac4 	bl	800eb20 <HAL_UART_Transmit>
        // memset(SendType->data, 0, 50);
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	08028ff8 	.word	0x08028ff8
 80015a4:	2400044e 	.word	0x2400044e
 80015a8:	240008e4 	.word	0x240008e4

080015ac <processControl>:
uint8_t error_cnt = 0;
uint8_t offset_flag = 0;
uint8_t laserChange = 0;

void processControl()
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af06      	add	r7, sp, #24
    if(state == STATE_INIT){
 80015b2:	4b89      	ldr	r3, [pc, #548]	@ (80017d8 <processControl+0x22c>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d111      	bne.n	80015de <processControl+0x32>
        
        RangefinderDataFrameSend.FuncCode = SetMultiFreq;
 80015ba:	4b88      	ldr	r3, [pc, #544]	@ (80017dc <processControl+0x230>)
 80015bc:	22a1      	movs	r2, #161	@ 0xa1
 80015be:	711a      	strb	r2, [r3, #4]
        cSetMultiFreq = 0x0A;
 80015c0:	4b87      	ldr	r3, [pc, #540]	@ (80017e0 <processControl+0x234>)
 80015c2:	220a      	movs	r2, #10
 80015c4:	701a      	strb	r2, [r3, #0]
        Send2RangefinderModule(&RangefinderDataFrameSend);
 80015c6:	4885      	ldr	r0, [pc, #532]	@ (80017dc <processControl+0x230>)
 80015c8:	f7ff fe3e 	bl	8001248 <Send2RangefinderModule>
        state = STATE_STANDBY;
 80015cc:	4b82      	ldr	r3, [pc, #520]	@ (80017d8 <processControl+0x22c>)
 80015ce:	2202      	movs	r2, #2
 80015d0:	701a      	strb	r2, [r3, #0]

//        setFocusPos.f = 0;
//        SendFocusFrame.func = SetPos;
//        SendFocusData(&SendFocusFrame);
         SendFocusFrame.func = ClearPos;
 80015d2:	4b84      	ldr	r3, [pc, #528]	@ (80017e4 <processControl+0x238>)
 80015d4:	221b      	movs	r2, #27
 80015d6:	70da      	strb	r2, [r3, #3]
         SendFocusData(&SendFocusFrame);
 80015d8:	4882      	ldr	r0, [pc, #520]	@ (80017e4 <processControl+0x238>)
 80015da:	f7ff fa65 	bl	8000aa8 <SendFocusData>
    }



    // 系统状态 
    if(stateChange == 1)
 80015de:	4b82      	ldr	r3, [pc, #520]	@ (80017e8 <processControl+0x23c>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d133      	bne.n	800164e <processControl+0xa2>
    {
        stateChange = 0;
 80015e6:	4b80      	ldr	r3, [pc, #512]	@ (80017e8 <processControl+0x23c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
        if(CommandTypedef.go2Zero == 1)
 80015ec:	4b7f      	ldr	r3, [pc, #508]	@ (80017ec <processControl+0x240>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d105      	bne.n	8001600 <processControl+0x54>
        {
            go2Zero();
 80015f4:	f000 fa32 	bl	8001a5c <go2Zero>
        // HAL_GPIO_WritePin(RF_PWD_GPIO_Port,RF_PWD_Pin,GPIO_PIN_SET);
        // RangefinderDataFrameSend.FuncCode = SetMultiFreq;
        // cSetMultiFreq = 0x0A;
        // Send2RangefinderModule(&RangefinderDataFrameSend);
            state = STATE_ZERO;
 80015f8:	4b77      	ldr	r3, [pc, #476]	@ (80017d8 <processControl+0x22c>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	701a      	strb	r2, [r3, #0]
 80015fe:	e026      	b.n	800164e <processControl+0xa2>
        }
        else if(CommandTypedef.standbyEnable == 1)
 8001600:	4b7a      	ldr	r3, [pc, #488]	@ (80017ec <processControl+0x240>)
 8001602:	785b      	ldrb	r3, [r3, #1]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d105      	bne.n	8001614 <processControl+0x68>
        {
            standbyEnable();
 8001608:	f000 fa96 	bl	8001b38 <standbyEnable>
            state = STATE_STANDBY;
 800160c:	4b72      	ldr	r3, [pc, #456]	@ (80017d8 <processControl+0x22c>)
 800160e:	2202      	movs	r2, #2
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	e01c      	b.n	800164e <processControl+0xa2>
        }
        else if(CommandTypedef.scanEnable == 1)
 8001614:	4b75      	ldr	r3, [pc, #468]	@ (80017ec <processControl+0x240>)
 8001616:	78db      	ldrb	r3, [r3, #3]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d105      	bne.n	8001628 <processControl+0x7c>
        {
            scanEnable();
 800161c:	f000 fb4e 	bl	8001cbc <scanEnable>
            state = STATE_SCAN;
 8001620:	4b6d      	ldr	r3, [pc, #436]	@ (80017d8 <processControl+0x22c>)
 8001622:	2205      	movs	r2, #5
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	e012      	b.n	800164e <processControl+0xa2>
        }
        else if(CommandTypedef.guideEnable == 1)
 8001628:	4b70      	ldr	r3, [pc, #448]	@ (80017ec <processControl+0x240>)
 800162a:	791b      	ldrb	r3, [r3, #4]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d105      	bne.n	800163c <processControl+0x90>
        {
            guideEnable();
 8001630:	f000 fafa 	bl	8001c28 <guideEnable>
            state = STATE_GUIDE;
 8001634:	4b68      	ldr	r3, [pc, #416]	@ (80017d8 <processControl+0x22c>)
 8001636:	2204      	movs	r2, #4
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	e008      	b.n	800164e <processControl+0xa2>
        }
        else if(CommandTypedef.standbyDisable == 1)
 800163c:	4b6b      	ldr	r3, [pc, #428]	@ (80017ec <processControl+0x240>)
 800163e:	789b      	ldrb	r3, [r3, #2]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d104      	bne.n	800164e <processControl+0xa2>
        {
            standbyDisable();
 8001644:	f000 fada 	bl	8001bfc <standbyDisable>
            state = STATE_STANDBYDISABLE; // 待机状态进入待机禁止状态
 8001648:	4b63      	ldr	r3, [pc, #396]	@ (80017d8 <processControl+0x22c>)
 800164a:	2203      	movs	r2, #3
 800164c:	701a      	strb	r2, [r3, #0]
        }
    }

    // 伺服状态
    if((servo_flag == 1) || (sifuFlag.turnStateFlag == 1) || (sifuFlag.FSMModeFlag == 1) || (sifuFlag.controlEnableJingFlag == 1) || (sifuFlag.motorEnableFlag == 1))
 800164e:	4b68      	ldr	r3, [pc, #416]	@ (80017f0 <processControl+0x244>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d00f      	beq.n	8001676 <processControl+0xca>
 8001656:	4b67      	ldr	r3, [pc, #412]	@ (80017f4 <processControl+0x248>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d00b      	beq.n	8001676 <processControl+0xca>
 800165e:	4b65      	ldr	r3, [pc, #404]	@ (80017f4 <processControl+0x248>)
 8001660:	78db      	ldrb	r3, [r3, #3]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d007      	beq.n	8001676 <processControl+0xca>
 8001666:	4b63      	ldr	r3, [pc, #396]	@ (80017f4 <processControl+0x248>)
 8001668:	791b      	ldrb	r3, [r3, #4]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d003      	beq.n	8001676 <processControl+0xca>
 800166e:	4b61      	ldr	r3, [pc, #388]	@ (80017f4 <processControl+0x248>)
 8001670:	785b      	ldrb	r3, [r3, #1]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d172      	bne.n	800175c <processControl+0x1b0>
    {
        if(servo_flag == 1 && state == STATE_GUIDE)
 8001676:	4b5e      	ldr	r3, [pc, #376]	@ (80017f0 <processControl+0x244>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d116      	bne.n	80016ac <processControl+0x100>
 800167e:	4b56      	ldr	r3, [pc, #344]	@ (80017d8 <processControl+0x22c>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b04      	cmp	r3, #4
 8001684:	d112      	bne.n	80016ac <processControl+0x100>
        {
            servo_flag = 0;
 8001686:	4b5a      	ldr	r3, [pc, #360]	@ (80017f0 <processControl+0x244>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
            ServoDataSendTypedef.TargetYaw = CommandTypedef.turnYaw;
 800168c:	4a5a      	ldr	r2, [pc, #360]	@ (80017f8 <processControl+0x24c>)
 800168e:	4b57      	ldr	r3, [pc, #348]	@ (80017ec <processControl+0x240>)
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	6093      	str	r3, [r2, #8]
            ServoDataSendTypedef.TargetPitch = CommandTypedef.turnPitch;
 8001694:	4a58      	ldr	r2, [pc, #352]	@ (80017f8 <processControl+0x24c>)
 8001696:	4b55      	ldr	r3, [pc, #340]	@ (80017ec <processControl+0x240>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	60d3      	str	r3, [r2, #12]
            ServoDataSendTypedef.TargetFSMYaw = CommandTypedef.FSM_Yaw;
 800169c:	4a56      	ldr	r2, [pc, #344]	@ (80017f8 <processControl+0x24c>)
 800169e:	4b53      	ldr	r3, [pc, #332]	@ (80017ec <processControl+0x240>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	6153      	str	r3, [r2, #20]
            ServoDataSendTypedef.TargetFSMPitch = CommandTypedef.FSM_Pitch;
 80016a4:	4a54      	ldr	r2, [pc, #336]	@ (80017f8 <processControl+0x24c>)
 80016a6:	4b51      	ldr	r3, [pc, #324]	@ (80017ec <processControl+0x240>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	6193      	str	r3, [r2, #24]
        }
        if(sifuFlag.turnStateFlag == 1) // 设置转台工作模式
 80016ac:	4b51      	ldr	r3, [pc, #324]	@ (80017f4 <processControl+0x248>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d107      	bne.n	80016c4 <processControl+0x118>
        {
            sifuFlag.turnStateFlag = 0;
 80016b4:	4b4f      	ldr	r3, [pc, #316]	@ (80017f4 <processControl+0x248>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
            ServoDataSendTypedef.TurnMode = CommandTypedef.setTurnState;
 80016ba:	4b4c      	ldr	r3, [pc, #304]	@ (80017ec <processControl+0x240>)
 80016bc:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 80016c0:	4b4d      	ldr	r3, [pc, #308]	@ (80017f8 <processControl+0x24c>)
 80016c2:	701a      	strb	r2, [r3, #0]
        }
        if(sifuFlag.FSMModeFlag == 1)
 80016c4:	4b4b      	ldr	r3, [pc, #300]	@ (80017f4 <processControl+0x248>)
 80016c6:	78db      	ldrb	r3, [r3, #3]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d107      	bne.n	80016dc <processControl+0x130>
        {
            sifuFlag.FSMModeFlag = 0;
 80016cc:	4b49      	ldr	r3, [pc, #292]	@ (80017f4 <processControl+0x248>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	70da      	strb	r2, [r3, #3]
            ServoDataSendTypedef.FSMMode = CommandTypedef.setFSMState;
 80016d2:	4b46      	ldr	r3, [pc, #280]	@ (80017ec <processControl+0x240>)
 80016d4:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 80016d8:	4b47      	ldr	r3, [pc, #284]	@ (80017f8 <processControl+0x24c>)
 80016da:	745a      	strb	r2, [r3, #17]
        }
        if(sifuFlag.controlEnableJingFlag == 1)
 80016dc:	4b45      	ldr	r3, [pc, #276]	@ (80017f4 <processControl+0x248>)
 80016de:	791b      	ldrb	r3, [r3, #4]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d10c      	bne.n	80016fe <processControl+0x152>
        {
            sifuFlag.controlEnableJingFlag = 0;
 80016e4:	4b43      	ldr	r3, [pc, #268]	@ (80017f4 <processControl+0x248>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	711a      	strb	r2, [r3, #4]
            ServoDataSendTypedef.ControlEnableJing = CommandTypedef.trackJingEnable;
 80016ea:	4b40      	ldr	r3, [pc, #256]	@ (80017ec <processControl+0x240>)
 80016ec:	7a5a      	ldrb	r2, [r3, #9]
 80016ee:	4b42      	ldr	r3, [pc, #264]	@ (80017f8 <processControl+0x24c>)
 80016f0:	749a      	strb	r2, [r3, #18]
            uart_printf("trackJingEnable:%d\n",CommandTypedef.trackJingEnable);
 80016f2:	4b3e      	ldr	r3, [pc, #248]	@ (80017ec <processControl+0x240>)
 80016f4:	7a5b      	ldrb	r3, [r3, #9]
 80016f6:	4619      	mov	r1, r3
 80016f8:	4840      	ldr	r0, [pc, #256]	@ (80017fc <processControl+0x250>)
 80016fa:	f003 fadd 	bl	8004cb8 <uart_printf>
        }
        if(sifuFlag.motorEnableFlag == 1) // 设置转台电机使能
 80016fe:	4b3d      	ldr	r3, [pc, #244]	@ (80017f4 <processControl+0x248>)
 8001700:	785b      	ldrb	r3, [r3, #1]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d107      	bne.n	8001716 <processControl+0x16a>
        {
            sifuFlag.motorEnableFlag = 0;
 8001706:	4b3b      	ldr	r3, [pc, #236]	@ (80017f4 <processControl+0x248>)
 8001708:	2200      	movs	r2, #0
 800170a:	705a      	strb	r2, [r3, #1]
            ServoDataSendTypedef.MotorEnable = CommandTypedef.motorEnable;
 800170c:	4b37      	ldr	r3, [pc, #220]	@ (80017ec <processControl+0x240>)
 800170e:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8001712:	4b39      	ldr	r3, [pc, #228]	@ (80017f8 <processControl+0x24c>)
 8001714:	705a      	strb	r2, [r3, #1]
        }
        uart_printf("TargetYaw:%f,TargetPitch:%f,TargetFSMYaw:%f,TargetFSMPitch:%f\n",CommandTypedef.turnYaw.f,CommandTypedef.turnPitch.f,CommandTypedef.FSM_Yaw.f,CommandTypedef.FSM_Pitch.f);
 8001716:	4b35      	ldr	r3, [pc, #212]	@ (80017ec <processControl+0x240>)
 8001718:	edd3 7a04 	vldr	s15, [r3, #16]
 800171c:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8001720:	4b32      	ldr	r3, [pc, #200]	@ (80017ec <processControl+0x240>)
 8001722:	edd3 7a05 	vldr	s15, [r3, #20]
 8001726:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800172a:	4b30      	ldr	r3, [pc, #192]	@ (80017ec <processControl+0x240>)
 800172c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001730:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001734:	4b2d      	ldr	r3, [pc, #180]	@ (80017ec <processControl+0x240>)
 8001736:	edd3 5a07 	vldr	s11, [r3, #28]
 800173a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800173e:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001742:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001746:	ed8d 7b00 	vstr	d7, [sp]
 800174a:	ec53 2b14 	vmov	r2, r3, d4
 800174e:	482c      	ldr	r0, [pc, #176]	@ (8001800 <processControl+0x254>)
 8001750:	f003 fab2 	bl	8004cb8 <uart_printf>
        ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 8001754:	4928      	ldr	r1, [pc, #160]	@ (80017f8 <processControl+0x24c>)
 8001756:	482b      	ldr	r0, [pc, #172]	@ (8001804 <processControl+0x258>)
 8001758:	f7ff fef4 	bl	8001544 <ServoDataSend>
    }

    if(laserChange == 1)
 800175c:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <processControl+0x25c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d112      	bne.n	800178a <processControl+0x1de>
    {
        laserChange = 0;
 8001764:	4b28      	ldr	r3, [pc, #160]	@ (8001808 <processControl+0x25c>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
        setFocusPos.f = (float)CommandTypedef.laserAdjust;
 800176a:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <processControl+0x240>)
 800176c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001770:	ee07 3a90 	vmov	s15, r3
 8001774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001778:	4b24      	ldr	r3, [pc, #144]	@ (800180c <processControl+0x260>)
 800177a:	edc3 7a00 	vstr	s15, [r3]
        SendFocusFrame.func = SetPos;
 800177e:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <processControl+0x238>)
 8001780:	2201      	movs	r2, #1
 8001782:	70da      	strb	r2, [r3, #3]
        SendFocusData(&SendFocusFrame);
 8001784:	4817      	ldr	r0, [pc, #92]	@ (80017e4 <processControl+0x238>)
 8001786:	f7ff f98f 	bl	8000aa8 <SendFocusData>
    }

    if(manual_flag == 1) //手动模式
 800178a:	4b21      	ldr	r3, [pc, #132]	@ (8001810 <processControl+0x264>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d179      	bne.n	8001886 <processControl+0x2da>
    {
        manual_flag = 0;
 8001792:	4b1f      	ldr	r3, [pc, #124]	@ (8001810 <processControl+0x264>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
        if(CommandTypedef.manual_cj == 1)
 8001798:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <processControl+0x240>)
 800179a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d13c      	bne.n	800181c <processControl+0x270>
        {
            ImgSendTypedef_CU.FuncCode = SETTING_TRACK;
 80017a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <processControl+0x268>)
 80017a4:	2208      	movs	r2, #8
 80017a6:	719a      	strb	r2, [r3, #6]
            ImgSendTypedef_CU.FuncSubCode = MANUAL_TRACK;
 80017a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001814 <processControl+0x268>)
 80017aa:	2203      	movs	r2, #3
 80017ac:	71da      	strb	r2, [r3, #7]
            ImgSendDataTypedef_CU.ManualTracking.TrackingCenterX = CommandTypedef.manual_center_x;
 80017ae:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <processControl+0x240>)
 80017b0:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80017b2:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <processControl+0x26c>)
 80017b4:	835a      	strh	r2, [r3, #26]
            ImgSendDataTypedef_CU.ManualTracking.TrackingCenterY = CommandTypedef.manual_center_y;
 80017b6:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <processControl+0x240>)
 80017b8:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 80017ba:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <processControl+0x26c>)
 80017bc:	839a      	strh	r2, [r3, #28]
            ImgSendDataTypedef_CU.ManualTracking.TrackingWidth = CommandTypedef.manual_width;
 80017be:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <processControl+0x240>)
 80017c0:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <processControl+0x26c>)
 80017c4:	83da      	strh	r2, [r3, #30]
            ImgSendDataTypedef_CU.ManualTracking.TrackingHeight = CommandTypedef.manual_height;
 80017c6:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <processControl+0x240>)
 80017c8:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 80017ca:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <processControl+0x26c>)
 80017cc:	841a      	strh	r2, [r3, #32]
            // uart_printf("粗跟踪\n");
            Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 80017ce:	4912      	ldr	r1, [pc, #72]	@ (8001818 <processControl+0x26c>)
 80017d0:	4810      	ldr	r0, [pc, #64]	@ (8001814 <processControl+0x268>)
 80017d2:	f7ff fc15 	bl	8001000 <Send2ImgModule>
 80017d6:	e040      	b.n	800185a <processControl+0x2ae>
 80017d8:	240004b0 	.word	0x240004b0
 80017dc:	24000100 	.word	0x24000100
 80017e0:	24000445 	.word	0x24000445
 80017e4:	24000000 	.word	0x24000000
 80017e8:	240004b1 	.word	0x240004b1
 80017ec:	24000184 	.word	0x24000184
 80017f0:	240004bd 	.word	0x240004bd
 80017f4:	240004b4 	.word	0x240004b4
 80017f8:	24000154 	.word	0x24000154
 80017fc:	08029000 	.word	0x08029000
 8001800:	08029014 	.word	0x08029014
 8001804:	2400011c 	.word	0x2400011c
 8001808:	240004c3 	.word	0x240004c3
 800180c:	240003f4 	.word	0x240003f4
 8001810:	240001d0 	.word	0x240001d0
 8001814:	24000018 	.word	0x24000018
 8001818:	24000064 	.word	0x24000064
        }else if(CommandTypedef.manual_cj == 2){
 800181c:	4b7b      	ldr	r3, [pc, #492]	@ (8001a0c <processControl+0x460>)
 800181e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001822:	2b02      	cmp	r3, #2
 8001824:	d119      	bne.n	800185a <processControl+0x2ae>
            // TODO: 参数还需要改 这是粗相机的参数

            ImgSendTypedef_JING.FuncCode = SETTING_TRACK;
 8001826:	4b7a      	ldr	r3, [pc, #488]	@ (8001a10 <processControl+0x464>)
 8001828:	2208      	movs	r2, #8
 800182a:	719a      	strb	r2, [r3, #6]
            ImgSendTypedef_JING.FuncSubCode = MANUAL_TRACK;
 800182c:	4b78      	ldr	r3, [pc, #480]	@ (8001a10 <processControl+0x464>)
 800182e:	2203      	movs	r2, #3
 8001830:	71da      	strb	r2, [r3, #7]
            ImgSendDataTypedef_JING.ManualTracking.TrackingCenterX = CommandTypedef.manual_center_x;
 8001832:	4b76      	ldr	r3, [pc, #472]	@ (8001a0c <processControl+0x460>)
 8001834:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8001836:	4b77      	ldr	r3, [pc, #476]	@ (8001a14 <processControl+0x468>)
 8001838:	835a      	strh	r2, [r3, #26]
            ImgSendDataTypedef_JING.ManualTracking.TrackingCenterY = CommandTypedef.manual_center_y;
 800183a:	4b74      	ldr	r3, [pc, #464]	@ (8001a0c <processControl+0x460>)
 800183c:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 800183e:	4b75      	ldr	r3, [pc, #468]	@ (8001a14 <processControl+0x468>)
 8001840:	839a      	strh	r2, [r3, #28]
            ImgSendDataTypedef_JING.ManualTracking.TrackingWidth = CommandTypedef.manual_width;
 8001842:	4b72      	ldr	r3, [pc, #456]	@ (8001a0c <processControl+0x460>)
 8001844:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8001846:	4b73      	ldr	r3, [pc, #460]	@ (8001a14 <processControl+0x468>)
 8001848:	83da      	strh	r2, [r3, #30]
            ImgSendDataTypedef_JING.ManualTracking.TrackingHeight = CommandTypedef.manual_height;
 800184a:	4b70      	ldr	r3, [pc, #448]	@ (8001a0c <processControl+0x460>)
 800184c:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 800184e:	4b71      	ldr	r3, [pc, #452]	@ (8001a14 <processControl+0x468>)
 8001850:	841a      	strh	r2, [r3, #32]
            Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8001852:	4970      	ldr	r1, [pc, #448]	@ (8001a14 <processControl+0x468>)
 8001854:	486e      	ldr	r0, [pc, #440]	@ (8001a10 <processControl+0x464>)
 8001856:	f7ff fbd3 	bl	8001000 <Send2ImgModule>
            // uart_printf("精跟踪\n");
        }
//                uart_printf("%d,%d",CommandTypedef.trackCuEnable,CommandTypedef.trackJingEnable);
        uart_printf("manual_cj:%d,TrackingCenterX:%d,TrackingCenterY:%d,TrackingWidth:%d,TrackingHeight:%d\n",CommandTypedef.manual_cj,CommandTypedef.manual_center_x,CommandTypedef.manual_center_y,CommandTypedef.manual_width,CommandTypedef.manual_height);
 800185a:	4b6c      	ldr	r3, [pc, #432]	@ (8001a0c <processControl+0x460>)
 800185c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001860:	4619      	mov	r1, r3
 8001862:	4b6a      	ldr	r3, [pc, #424]	@ (8001a0c <processControl+0x460>)
 8001864:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001866:	4618      	mov	r0, r3
 8001868:	4b68      	ldr	r3, [pc, #416]	@ (8001a0c <processControl+0x460>)
 800186a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800186c:	461c      	mov	r4, r3
 800186e:	4b67      	ldr	r3, [pc, #412]	@ (8001a0c <processControl+0x460>)
 8001870:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8001872:	461a      	mov	r2, r3
 8001874:	4b65      	ldr	r3, [pc, #404]	@ (8001a0c <processControl+0x460>)
 8001876:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	9200      	str	r2, [sp, #0]
 800187c:	4623      	mov	r3, r4
 800187e:	4602      	mov	r2, r0
 8001880:	4865      	ldr	r0, [pc, #404]	@ (8001a18 <processControl+0x46c>)
 8001882:	f003 fa19 	bl	8004cb8 <uart_printf>
        // Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
    }


    // 曝光调节
    if(expose_flag == 1)
 8001886:	4b65      	ldr	r3, [pc, #404]	@ (8001a1c <processControl+0x470>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d116      	bne.n	80018bc <processControl+0x310>
    {
        // 粗电视曝光调节
        ImgSendTypedef_CU.FuncCode = SETTING_DEVICEPARAM; 
 800188e:	4b64      	ldr	r3, [pc, #400]	@ (8001a20 <processControl+0x474>)
 8001890:	2206      	movs	r2, #6
 8001892:	719a      	strb	r2, [r3, #6]
        ImgSendDataTypedef_CU.exposure = CommandTypedef.exposureCU;
 8001894:	4b5d      	ldr	r3, [pc, #372]	@ (8001a0c <processControl+0x460>)
 8001896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001898:	4a62      	ldr	r2, [pc, #392]	@ (8001a24 <processControl+0x478>)
 800189a:	6093      	str	r3, [r2, #8]
        ImgSendTypedef_CU.FuncSubCode = EXPOSURE;
 800189c:	4b60      	ldr	r3, [pc, #384]	@ (8001a20 <processControl+0x474>)
 800189e:	2205      	movs	r2, #5
 80018a0:	71da      	strb	r2, [r3, #7]
        Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 80018a2:	4960      	ldr	r1, [pc, #384]	@ (8001a24 <processControl+0x478>)
 80018a4:	485e      	ldr	r0, [pc, #376]	@ (8001a20 <processControl+0x474>)
 80018a6:	f7ff fbab 	bl	8001000 <Send2ImgModule>
        uart_printf("exposureCU:%ld\n",CommandTypedef.exposureCU);
 80018aa:	4b58      	ldr	r3, [pc, #352]	@ (8001a0c <processControl+0x460>)
 80018ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ae:	4619      	mov	r1, r3
 80018b0:	485d      	ldr	r0, [pc, #372]	@ (8001a28 <processControl+0x47c>)
 80018b2:	f003 fa01 	bl	8004cb8 <uart_printf>
        
        expose_flag = 0;
 80018b6:	4b59      	ldr	r3, [pc, #356]	@ (8001a1c <processControl+0x470>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
    }
    if(exposeJing_flag == 1)
 80018bc:	4b5b      	ldr	r3, [pc, #364]	@ (8001a2c <processControl+0x480>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d110      	bne.n	80018e6 <processControl+0x33a>
    {
        ImgSendTypedef_JING.FuncCode = SETTING_DEVICEPARAM;
 80018c4:	4b52      	ldr	r3, [pc, #328]	@ (8001a10 <processControl+0x464>)
 80018c6:	2206      	movs	r2, #6
 80018c8:	719a      	strb	r2, [r3, #6]
        ImgSendDataTypedef_JING.exposure = CommandTypedef.exposureJING;
 80018ca:	4b50      	ldr	r3, [pc, #320]	@ (8001a0c <processControl+0x460>)
 80018cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ce:	4a51      	ldr	r2, [pc, #324]	@ (8001a14 <processControl+0x468>)
 80018d0:	6093      	str	r3, [r2, #8]
        ImgSendTypedef_JING.FuncSubCode = EXPOSURE;
 80018d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001a10 <processControl+0x464>)
 80018d4:	2205      	movs	r2, #5
 80018d6:	71da      	strb	r2, [r3, #7]
        Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 80018d8:	494e      	ldr	r1, [pc, #312]	@ (8001a14 <processControl+0x468>)
 80018da:	484d      	ldr	r0, [pc, #308]	@ (8001a10 <processControl+0x464>)
 80018dc:	f7ff fb90 	bl	8001000 <Send2ImgModule>
        exposeJing_flag = 0;
 80018e0:	4b52      	ldr	r3, [pc, #328]	@ (8001a2c <processControl+0x480>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
    }

    if(focus_flag == 1)
 80018e6:	4b52      	ldr	r3, [pc, #328]	@ (8001a30 <processControl+0x484>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d110      	bne.n	8001910 <processControl+0x364>
    {
        // 粗电视调焦
        ImgSendTypedef_CU.FuncCode = SETTING_DEVICEPARAM;
 80018ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001a20 <processControl+0x474>)
 80018f0:	2206      	movs	r2, #6
 80018f2:	719a      	strb	r2, [r3, #6]
        ImgSendDataTypedef_CU.focusAdjust = CommandTypedef.cuFocusAdjust;
 80018f4:	4b45      	ldr	r3, [pc, #276]	@ (8001a0c <processControl+0x460>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001a24 <processControl+0x478>)
 80018fa:	6013      	str	r3, [r2, #0]
        ImgSendTypedef_CU.FuncSubCode = FOCUS_ADJUST;
 80018fc:	4b48      	ldr	r3, [pc, #288]	@ (8001a20 <processControl+0x474>)
 80018fe:	2203      	movs	r2, #3
 8001900:	71da      	strb	r2, [r3, #7]
        Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001902:	4948      	ldr	r1, [pc, #288]	@ (8001a24 <processControl+0x478>)
 8001904:	4846      	ldr	r0, [pc, #280]	@ (8001a20 <processControl+0x474>)
 8001906:	f7ff fb7b 	bl	8001000 <Send2ImgModule>
        focus_flag = 0;
 800190a:	4b49      	ldr	r3, [pc, #292]	@ (8001a30 <processControl+0x484>)
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
    }
    if(zoom_flag == 1)
 8001910:	4b48      	ldr	r3, [pc, #288]	@ (8001a34 <processControl+0x488>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d116      	bne.n	8001946 <processControl+0x39a>
    {
        // 粗电视变倍调节
        ImgSendTypedef_CU.FuncCode = SETTING_DEVICEPARAM;
 8001918:	4b41      	ldr	r3, [pc, #260]	@ (8001a20 <processControl+0x474>)
 800191a:	2206      	movs	r2, #6
 800191c:	719a      	strb	r2, [r3, #6]
        ImgSendDataTypedef_CU.zoomAdjust = CommandTypedef.zoomAdjust;
 800191e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a0c <processControl+0x460>)
 8001920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001922:	4a40      	ldr	r2, [pc, #256]	@ (8001a24 <processControl+0x478>)
 8001924:	6053      	str	r3, [r2, #4]
        ImgSendTypedef_CU.FuncSubCode = ZOOM_ADJUST;
 8001926:	4b3e      	ldr	r3, [pc, #248]	@ (8001a20 <processControl+0x474>)
 8001928:	2204      	movs	r2, #4
 800192a:	71da      	strb	r2, [r3, #7]
        uart_printf("zoomAdjust:%ld\n",CommandTypedef.zoomAdjust);
 800192c:	4b37      	ldr	r3, [pc, #220]	@ (8001a0c <processControl+0x460>)
 800192e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001930:	4619      	mov	r1, r3
 8001932:	4841      	ldr	r0, [pc, #260]	@ (8001a38 <processControl+0x48c>)
 8001934:	f003 f9c0 	bl	8004cb8 <uart_printf>
        Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001938:	493a      	ldr	r1, [pc, #232]	@ (8001a24 <processControl+0x478>)
 800193a:	4839      	ldr	r0, [pc, #228]	@ (8001a20 <processControl+0x474>)
 800193c:	f7ff fb60 	bl	8001000 <Send2ImgModule>
        zoom_flag = 0;
 8001940:	4b3c      	ldr	r3, [pc, #240]	@ (8001a34 <processControl+0x488>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
    }
    if(offset_flag == 1)
 8001946:	4b3d      	ldr	r3, [pc, #244]	@ (8001a3c <processControl+0x490>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d116      	bne.n	800197c <processControl+0x3d0>
    {
        // 粗电视光学中心设置
        ImgSendTypedef_CU.FuncCode = SETTING_DEVICEPARAM;
 800194e:	4b34      	ldr	r3, [pc, #208]	@ (8001a20 <processControl+0x474>)
 8001950:	2206      	movs	r2, #6
 8001952:	719a      	strb	r2, [r3, #6]
        ImgSendDataTypedef_CU.offsetX = CommandTypedef.x_offset;
 8001954:	4b2d      	ldr	r3, [pc, #180]	@ (8001a0c <processControl+0x460>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	461a      	mov	r2, r3
 800195a:	4b32      	ldr	r3, [pc, #200]	@ (8001a24 <processControl+0x478>)
 800195c:	60da      	str	r2, [r3, #12]
        ImgSendDataTypedef_CU.offsetY = CommandTypedef.y_offset;
 800195e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a0c <processControl+0x460>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001962:	461a      	mov	r2, r3
 8001964:	4b2f      	ldr	r3, [pc, #188]	@ (8001a24 <processControl+0x478>)
 8001966:	611a      	str	r2, [r3, #16]
        ImgSendTypedef_CU.FuncSubCode = OPTICAL_CENTER;
 8001968:	4b2d      	ldr	r3, [pc, #180]	@ (8001a20 <processControl+0x474>)
 800196a:	2206      	movs	r2, #6
 800196c:	71da      	strb	r2, [r3, #7]
        Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 800196e:	492d      	ldr	r1, [pc, #180]	@ (8001a24 <processControl+0x478>)
 8001970:	482b      	ldr	r0, [pc, #172]	@ (8001a20 <processControl+0x474>)
 8001972:	f7ff fb45 	bl	8001000 <Send2ImgModule>
        offset_flag = 0;
 8001976:	4b31      	ldr	r3, [pc, #196]	@ (8001a3c <processControl+0x490>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
    }

    // 测距机测距开启关闭
    if(rangefander_flag == 1)
 800197c:	4b30      	ldr	r3, [pc, #192]	@ (8001a40 <processControl+0x494>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d109      	bne.n	8001998 <processControl+0x3ec>
    {
        RangefinderDataFrameSend.FuncCode = MultiMeasure;
 8001984:	4b2f      	ldr	r3, [pc, #188]	@ (8001a44 <processControl+0x498>)
 8001986:	2204      	movs	r2, #4
 8001988:	711a      	strb	r2, [r3, #4]
        Send2RangefinderModule(&RangefinderDataFrameSend);
 800198a:	482e      	ldr	r0, [pc, #184]	@ (8001a44 <processControl+0x498>)
 800198c:	f7ff fc5c 	bl	8001248 <Send2RangefinderModule>
        rangefander_flag = 0;
 8001990:	4b2b      	ldr	r3, [pc, #172]	@ (8001a40 <processControl+0x494>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
 8001996:	e00c      	b.n	80019b2 <processControl+0x406>
    }else if(rangefinder_close == 1)
 8001998:	4b2b      	ldr	r3, [pc, #172]	@ (8001a48 <processControl+0x49c>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d108      	bne.n	80019b2 <processControl+0x406>
    {
        RangefinderDataFrameSend.FuncCode = StopMeasure;
 80019a0:	4b28      	ldr	r3, [pc, #160]	@ (8001a44 <processControl+0x498>)
 80019a2:	2205      	movs	r2, #5
 80019a4:	711a      	strb	r2, [r3, #4]
        Send2RangefinderModule(&RangefinderDataFrameSend);
 80019a6:	4827      	ldr	r0, [pc, #156]	@ (8001a44 <processControl+0x498>)
 80019a8:	f7ff fc4e 	bl	8001248 <Send2RangefinderModule>
        rangefinder_close = 0;
 80019ac:	4b26      	ldr	r3, [pc, #152]	@ (8001a48 <processControl+0x49c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
//    	clearerror_flag = 0;
//    	ImgSendTypedef_CU.FuncCode = SETTING_TRACK;
//    	ImgSendTypedef_CU.FuncSubCode = AUTO_TRACK;
//    	Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
//    }
    if(clearerror_flag == 1 && error_cnt < 2)
 80019b2:	4b26      	ldr	r3, [pc, #152]	@ (8001a4c <processControl+0x4a0>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d123      	bne.n	8001a02 <processControl+0x456>
 80019ba:	4b25      	ldr	r3, [pc, #148]	@ (8001a50 <processControl+0x4a4>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d81f      	bhi.n	8001a02 <processControl+0x456>
    {
        error_cnt++;
 80019c2:	4b23      	ldr	r3, [pc, #140]	@ (8001a50 <processControl+0x4a4>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4b21      	ldr	r3, [pc, #132]	@ (8001a50 <processControl+0x4a4>)
 80019cc:	701a      	strb	r2, [r3, #0]
        if(error_cnt == 1)
 80019ce:	4b20      	ldr	r3, [pc, #128]	@ (8001a50 <processControl+0x4a4>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d107      	bne.n	80019e6 <processControl+0x43a>
        {
            ServoDataSendTypedef.TrackingFaultCleanCu = 0x66;
 80019d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a54 <processControl+0x4a8>)
 80019d8:	2266      	movs	r2, #102	@ 0x66
 80019da:	741a      	strb	r2, [r3, #16]
            ServoDataSendTypedef.TrackingFaultCleanJing = 0x33;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <processControl+0x4a8>)
 80019de:	2233      	movs	r2, #51	@ 0x33
 80019e0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 80019e4:	e009      	b.n	80019fa <processControl+0x44e>
        }else if(error_cnt == 2)
 80019e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a50 <processControl+0x4a4>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d105      	bne.n	80019fa <processControl+0x44e>
        {
            clearerror_flag = 0;
 80019ee:	4b17      	ldr	r3, [pc, #92]	@ (8001a4c <processControl+0x4a0>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
            error_cnt = 0;
 80019f4:	4b16      	ldr	r3, [pc, #88]	@ (8001a50 <processControl+0x4a4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
        }
        ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 80019fa:	4916      	ldr	r1, [pc, #88]	@ (8001a54 <processControl+0x4a8>)
 80019fc:	4816      	ldr	r0, [pc, #88]	@ (8001a58 <processControl+0x4ac>)
 80019fe:	f7ff fda1 	bl	8001544 <ServoDataSend>
    // else if(state == STATE_STANDBYDISABLE)
    // {
    //     // ServoDataSendTypedef.TurnMode = TURNTABLE_OPEN_LOOP;
    //     // ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
    // }
}
 8001a02:	bf00      	nop
 8001a04:	3704      	adds	r7, #4
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd90      	pop	{r4, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	24000184 	.word	0x24000184
 8001a10:	2400008c 	.word	0x2400008c
 8001a14:	240000d8 	.word	0x240000d8
 8001a18:	08029054 	.word	0x08029054
 8001a1c:	240004b9 	.word	0x240004b9
 8001a20:	24000018 	.word	0x24000018
 8001a24:	24000064 	.word	0x24000064
 8001a28:	080290ac 	.word	0x080290ac
 8001a2c:	240004ba 	.word	0x240004ba
 8001a30:	240004bf 	.word	0x240004bf
 8001a34:	240004be 	.word	0x240004be
 8001a38:	080290bc 	.word	0x080290bc
 8001a3c:	240004c2 	.word	0x240004c2
 8001a40:	240004bb 	.word	0x240004bb
 8001a44:	24000100 	.word	0x24000100
 8001a48:	240004bc 	.word	0x240004bc
 8001a4c:	240004c0 	.word	0x240004c0
 8001a50:	240004c1 	.word	0x240004c1
 8001a54:	24000154 	.word	0x24000154
 8001a58:	2400011c 	.word	0x2400011c

08001a5c <go2Zero>:
    cSetMultiFreq = 0x0A;
    Send2RangefinderModule(&RangefinderDataFrameSend);
}

void go2Zero() //! 回零需要确定数值，可最后调整
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
    // 转台回零
    ServoDataSendTypedef.TurnMode               = TURNTABLE_GUIDE;
 8001a60:	4b2c      	ldr	r3, [pc, #176]	@ (8001b14 <go2Zero+0xb8>)
 8001a62:	22b2      	movs	r2, #178	@ 0xb2
 8001a64:	701a      	strb	r2, [r3, #0]
    ServoDataSendTypedef.MotorEnable            = MotorPowerOn;
 8001a66:	4b2b      	ldr	r3, [pc, #172]	@ (8001b14 <go2Zero+0xb8>)
 8001a68:	2266      	movs	r2, #102	@ 0x66
 8001a6a:	705a      	strb	r2, [r3, #1]
    ServoDataSendTypedef.Turntable_Yaw          = SPEED_INIT_YAW;
 8001a6c:	4b29      	ldr	r3, [pc, #164]	@ (8001b14 <go2Zero+0xb8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	805a      	strh	r2, [r3, #2]
    ServoDataSendTypedef.Turntable_Pitch        = SPEED_INIT_PITCH;
 8001a72:	4b28      	ldr	r3, [pc, #160]	@ (8001b14 <go2Zero+0xb8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	809a      	strh	r2, [r3, #4]
    ServoDataSendTypedef.TrackingDataValid      = DATA_VALID;
 8001a78:	4b26      	ldr	r3, [pc, #152]	@ (8001b14 <go2Zero+0xb8>)
 8001a7a:	2233      	movs	r2, #51	@ 0x33
 8001a7c:	719a      	strb	r2, [r3, #6]
    ServoDataSendTypedef.TargetYaw.f            = POS_INIT_YAW;
 8001a7e:	4b25      	ldr	r3, [pc, #148]	@ (8001b14 <go2Zero+0xb8>)
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
    ServoDataSendTypedef.TargetPitch.f          = POS_INIT_PITCH;
 8001a86:	4b23      	ldr	r3, [pc, #140]	@ (8001b14 <go2Zero+0xb8>)
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
    // ServoDataSendTypedef.TrackingFaultCleanCu   = CUTRACKING_FAULT_CLEAN;
    ServoDataSendTypedef.FSMMode                = FSM_ZERO;
 8001a8e:	4b21      	ldr	r3, [pc, #132]	@ (8001b14 <go2Zero+0xb8>)
 8001a90:	22c0      	movs	r2, #192	@ 0xc0
 8001a92:	745a      	strb	r2, [r3, #17]
    ServoDataSendTypedef.ControlEnableJing      = ENABLE_JING;
 8001a94:	4b1f      	ldr	r3, [pc, #124]	@ (8001b14 <go2Zero+0xb8>)
 8001a96:	2266      	movs	r2, #102	@ 0x66
 8001a98:	749a      	strb	r2, [r3, #18]
    ServoDataSendTypedef.TargetFSMYaw.f         = FSM_INIT_YAW;
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b14 <go2Zero+0xb8>)
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
    ServoDataSendTypedef.TargetFSMPitch.f       = FSM_INIT_PITCH;
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b14 <go2Zero+0xb8>)
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
    ServoDataSendTypedef.ZeroCorrectionFSMX.f   = 0.f;
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b14 <go2Zero+0xb8>)
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
    ServoDataSendTypedef.ZeroCorrectionFSMY.f   = 0.f;
 8001ab2:	4b18      	ldr	r3, [pc, #96]	@ (8001b14 <go2Zero+0xb8>)
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	621a      	str	r2, [r3, #32]
    // ServoDataSendTypedef.TrackingFaultCleanJing   = JINGTRACKING_FAULT_CLEAN;
    ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 8001aba:	4916      	ldr	r1, [pc, #88]	@ (8001b14 <go2Zero+0xb8>)
 8001abc:	4816      	ldr	r0, [pc, #88]	@ (8001b18 <go2Zero+0xbc>)
 8001abe:	f7ff fd41 	bl	8001544 <ServoDataSend>
    // ImgSendTypedef_CU.FuncSubCode = OPTICAL_CENTER;
    // ImgSendDataTypedef_CU.offsetX = 1024;
    // ImgSendDataTypedef_CU.offsetY = 544;
    // Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
    // DelayMs(2);
    ImgSendTypedef_CU.FuncCode = SETTING_TRACK;
 8001ac2:	4b16      	ldr	r3, [pc, #88]	@ (8001b1c <go2Zero+0xc0>)
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	719a      	strb	r2, [r3, #6]
    ImgSendTypedef_CU.FuncSubCode = STANDBY_MODE;
 8001ac8:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <go2Zero+0xc0>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	71da      	strb	r2, [r3, #7]
    Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001ace:	4914      	ldr	r1, [pc, #80]	@ (8001b20 <go2Zero+0xc4>)
 8001ad0:	4812      	ldr	r0, [pc, #72]	@ (8001b1c <go2Zero+0xc0>)
 8001ad2:	f7ff fa95 	bl	8001000 <Send2ImgModule>
    DelayMs(2);
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	f003 f912 	bl	8004d00 <DelayMs>
//    DelayMs(2);
    // ImgSendTypedef_JING.FuncSubCode = OPTICAL_CENTER;
    // ImgSendDataTypedef_JING.offsetX = 1024;
    // ImgSendDataTypedef_JING.offsetY = 544;
    // Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
    ImgSendTypedef_JING.FuncCode = SETTING_TRACK;
 8001adc:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <go2Zero+0xc8>)
 8001ade:	2208      	movs	r2, #8
 8001ae0:	719a      	strb	r2, [r3, #6]
    ImgSendTypedef_JING.FuncSubCode = STANDBY_MODE;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	@ (8001b24 <go2Zero+0xc8>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	71da      	strb	r2, [r3, #7]
    Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8001ae8:	490f      	ldr	r1, [pc, #60]	@ (8001b28 <go2Zero+0xcc>)
 8001aea:	480e      	ldr	r0, [pc, #56]	@ (8001b24 <go2Zero+0xc8>)
 8001aec:	f7ff fa88 	bl	8001000 <Send2ImgModule>
    // Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);


    // 调焦回零 
    // TODO:还有清零
    setFocusPos.f = 0.f;
 8001af0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <go2Zero+0xd0>)
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
    SendFocusFrame.func = SetPos;
 8001af8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <go2Zero+0xd4>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	70da      	strb	r2, [r3, #3]
    SendFocusData(&SendFocusFrame);
 8001afe:	480c      	ldr	r0, [pc, #48]	@ (8001b30 <go2Zero+0xd4>)
 8001b00:	f7fe ffd2 	bl	8000aa8 <SendFocusData>

    // 测距机回零
    RangefinderDataFrameSend.FuncCode = StopMeasure;
 8001b04:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <go2Zero+0xd8>)
 8001b06:	2205      	movs	r2, #5
 8001b08:	711a      	strb	r2, [r3, #4]
    Send2RangefinderModule(&RangefinderDataFrameSend);
 8001b0a:	480a      	ldr	r0, [pc, #40]	@ (8001b34 <go2Zero+0xd8>)
 8001b0c:	f7ff fb9c 	bl	8001248 <Send2RangefinderModule>

}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	24000154 	.word	0x24000154
 8001b18:	2400011c 	.word	0x2400011c
 8001b1c:	24000018 	.word	0x24000018
 8001b20:	24000064 	.word	0x24000064
 8001b24:	2400008c 	.word	0x2400008c
 8001b28:	240000d8 	.word	0x240000d8
 8001b2c:	240003f4 	.word	0x240003f4
 8001b30:	24000000 	.word	0x24000000
 8001b34:	24000100 	.word	0x24000100

08001b38 <standbyEnable>:

void standbyEnable()
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
    // 电机使能
    ServoDataSendTypedef.TurnMode = TURNTABLE_GUIDE;
 8001b3c:	4b27      	ldr	r3, [pc, #156]	@ (8001bdc <standbyEnable+0xa4>)
 8001b3e:	22b2      	movs	r2, #178	@ 0xb2
 8001b40:	701a      	strb	r2, [r3, #0]
    ServoDataSendTypedef.MotorEnable = MotorPowerOn;
 8001b42:	4b26      	ldr	r3, [pc, #152]	@ (8001bdc <standbyEnable+0xa4>)
 8001b44:	2266      	movs	r2, #102	@ 0x66
 8001b46:	705a      	strb	r2, [r3, #1]
    ServoDataSendTypedef.Turntable_Yaw = 0;
 8001b48:	4b24      	ldr	r3, [pc, #144]	@ (8001bdc <standbyEnable+0xa4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	805a      	strh	r2, [r3, #2]
    ServoDataSendTypedef.Turntable_Pitch = 0;
 8001b4e:	4b23      	ldr	r3, [pc, #140]	@ (8001bdc <standbyEnable+0xa4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	809a      	strh	r2, [r3, #4]
    ServoDataSendTypedef.TrackingDataValid = DATA_INVALID;
 8001b54:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <standbyEnable+0xa4>)
 8001b56:	2211      	movs	r2, #17
 8001b58:	719a      	strb	r2, [r3, #6]
    ServoDataSendTypedef.TargetYaw.f = ServoRevTypedef.ServoYawPos.f;
 8001b5a:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <standbyEnable+0xa8>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8001bdc <standbyEnable+0xa4>)
 8001b60:	6093      	str	r3, [r2, #8]
    ServoDataSendTypedef.TargetPitch.f = ServoRevTypedef.ServoPitchPos.f;
 8001b62:	4b1f      	ldr	r3, [pc, #124]	@ (8001be0 <standbyEnable+0xa8>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4a1d      	ldr	r2, [pc, #116]	@ (8001bdc <standbyEnable+0xa4>)
 8001b68:	60d3      	str	r3, [r2, #12]
    ServoDataSendTypedef.FSMMode = FSM_DIRECTION;
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <standbyEnable+0xa4>)
 8001b6c:	22c1      	movs	r2, #193	@ 0xc1
 8001b6e:	745a      	strb	r2, [r3, #17]
    ServoDataSendTypedef.ControlEnableJing = ENABLE_JING;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	@ (8001bdc <standbyEnable+0xa4>)
 8001b72:	2266      	movs	r2, #102	@ 0x66
 8001b74:	749a      	strb	r2, [r3, #18]
    ServoDataSendTypedef.TargetFSMYaw.f = ServoRevTypedef.FSMXPos.f;
 8001b76:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <standbyEnable+0xa8>)
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	4a18      	ldr	r2, [pc, #96]	@ (8001bdc <standbyEnable+0xa4>)
 8001b7c:	6153      	str	r3, [r2, #20]
    ServoDataSendTypedef.TargetFSMPitch.f = ServoRevTypedef.FSMYPos.f;
 8001b7e:	4b18      	ldr	r3, [pc, #96]	@ (8001be0 <standbyEnable+0xa8>)
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	4a16      	ldr	r2, [pc, #88]	@ (8001bdc <standbyEnable+0xa4>)
 8001b84:	6193      	str	r3, [r2, #24]
    ServoDataSendTypedef.ZeroCorrectionFSMX.f = 0.f;
 8001b86:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <standbyEnable+0xa4>)
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
    ServoDataSendTypedef.ZeroCorrectionFSMY.f = 0.f;
 8001b8e:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <standbyEnable+0xa4>)
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	621a      	str	r2, [r3, #32]
    ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 8001b96:	4911      	ldr	r1, [pc, #68]	@ (8001bdc <standbyEnable+0xa4>)
 8001b98:	4812      	ldr	r0, [pc, #72]	@ (8001be4 <standbyEnable+0xac>)
 8001b9a:	f7ff fcd3 	bl	8001544 <ServoDataSend>


    // 粗电视待机
    ImgSendTypedef_CU.FuncCode = SETTING_TRACK;
 8001b9e:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <standbyEnable+0xb0>)
 8001ba0:	2208      	movs	r2, #8
 8001ba2:	719a      	strb	r2, [r3, #6]
    ImgSendTypedef_CU.FuncSubCode = STANDBY_MODE;
 8001ba4:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <standbyEnable+0xb0>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	71da      	strb	r2, [r3, #7]
    Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001baa:	4910      	ldr	r1, [pc, #64]	@ (8001bec <standbyEnable+0xb4>)
 8001bac:	480e      	ldr	r0, [pc, #56]	@ (8001be8 <standbyEnable+0xb0>)
 8001bae:	f7ff fa27 	bl	8001000 <Send2ImgModule>
    DelayMs(2);
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	f003 f8a4 	bl	8004d00 <DelayMs>

    // 精电视待机
    ImgSendTypedef_JING.FuncCode = SETTING_TRACK;
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <standbyEnable+0xb8>)
 8001bba:	2208      	movs	r2, #8
 8001bbc:	719a      	strb	r2, [r3, #6]
    ImgSendTypedef_JING.FuncSubCode = STANDBY_MODE;
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <standbyEnable+0xb8>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	71da      	strb	r2, [r3, #7]
    Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8001bc4:	490b      	ldr	r1, [pc, #44]	@ (8001bf4 <standbyEnable+0xbc>)
 8001bc6:	480a      	ldr	r0, [pc, #40]	@ (8001bf0 <standbyEnable+0xb8>)
 8001bc8:	f7ff fa1a 	bl	8001000 <Send2ImgModule>
    // setFocusPos.f = 4000.f;
    // SendFocusFrame.func = SetPos;
    // SendFocusData(&SendFocusFrame);

    // 测距机回零
    RangefinderDataFrameSend.FuncCode = StopMeasure;
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <standbyEnable+0xc0>)
 8001bce:	2205      	movs	r2, #5
 8001bd0:	711a      	strb	r2, [r3, #4]
    Send2RangefinderModule(&RangefinderDataFrameSend);
 8001bd2:	4809      	ldr	r0, [pc, #36]	@ (8001bf8 <standbyEnable+0xc0>)
 8001bd4:	f7ff fb38 	bl	8001248 <Send2RangefinderModule>
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	24000154 	.word	0x24000154
 8001be0:	24000450 	.word	0x24000450
 8001be4:	2400011c 	.word	0x2400011c
 8001be8:	24000018 	.word	0x24000018
 8001bec:	24000064 	.word	0x24000064
 8001bf0:	2400008c 	.word	0x2400008c
 8001bf4:	240000d8 	.word	0x240000d8
 8001bf8:	24000100 	.word	0x24000100

08001bfc <standbyDisable>:

void standbyDisable()
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
    // 电机失能
    ServoDataSendTypedef.TurnMode = TURNTABLE_OPEN_LOOP;
 8001c00:	4b07      	ldr	r3, [pc, #28]	@ (8001c20 <standbyDisable+0x24>)
 8001c02:	22b1      	movs	r2, #177	@ 0xb1
 8001c04:	701a      	strb	r2, [r3, #0]
    ServoDataSendTypedef.MotorEnable = MotorPowerOff;
 8001c06:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <standbyDisable+0x24>)
 8001c08:	2233      	movs	r2, #51	@ 0x33
 8001c0a:	705a      	strb	r2, [r3, #1]
    ServoDataSendTypedef.ControlEnableJing = DISABLE_JING;
 8001c0c:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <standbyDisable+0x24>)
 8001c0e:	2233      	movs	r2, #51	@ 0x33
 8001c10:	749a      	strb	r2, [r3, #18]
    ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 8001c12:	4903      	ldr	r1, [pc, #12]	@ (8001c20 <standbyDisable+0x24>)
 8001c14:	4803      	ldr	r0, [pc, #12]	@ (8001c24 <standbyDisable+0x28>)
 8001c16:	f7ff fc95 	bl	8001544 <ServoDataSend>
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	24000154 	.word	0x24000154
 8001c24:	2400011c 	.word	0x2400011c

08001c28 <guideEnable>:

void guideEnable()
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
    // 电机使能
    ServoDataSendTypedef.TurnMode = TURNTABLE_GUIDE;
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca0 <guideEnable+0x78>)
 8001c2e:	22b2      	movs	r2, #178	@ 0xb2
 8001c30:	701a      	strb	r2, [r3, #0]
    ServoDataSendTypedef.MotorEnable = MotorPowerOn;
 8001c32:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca0 <guideEnable+0x78>)
 8001c34:	2266      	movs	r2, #102	@ 0x66
 8001c36:	705a      	strb	r2, [r3, #1]
    ServoDataSendTypedef.ControlEnableJing = ENABLE_JING;
 8001c38:	4b19      	ldr	r3, [pc, #100]	@ (8001ca0 <guideEnable+0x78>)
 8001c3a:	2266      	movs	r2, #102	@ 0x66
 8001c3c:	749a      	strb	r2, [r3, #18]
    ServoDataSendTypedef.TargetPitch.f = CommandTypedef.turnPitch.f;
 8001c3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <guideEnable+0x7c>)
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	4a17      	ldr	r2, [pc, #92]	@ (8001ca0 <guideEnable+0x78>)
 8001c44:	60d3      	str	r3, [r2, #12]
    ServoDataSendTypedef.TargetYaw.f = CommandTypedef.turnYaw.f;
 8001c46:	4b17      	ldr	r3, [pc, #92]	@ (8001ca4 <guideEnable+0x7c>)
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	4a15      	ldr	r2, [pc, #84]	@ (8001ca0 <guideEnable+0x78>)
 8001c4c:	6093      	str	r3, [r2, #8]
    ServoDataSendTypedef.TrackingDataValid = DATA_VALID;
 8001c4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <guideEnable+0x78>)
 8001c50:	2233      	movs	r2, #51	@ 0x33
 8001c52:	719a      	strb	r2, [r3, #6]
    ServoDataSendTypedef.FSMMode = FSM_DIRECTION;
 8001c54:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <guideEnable+0x78>)
 8001c56:	22c1      	movs	r2, #193	@ 0xc1
 8001c58:	745a      	strb	r2, [r3, #17]
    ServoDataSendTypedef.TargetFSMYaw.f = CommandTypedef.FSM_Yaw.f;
 8001c5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <guideEnable+0x7c>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	4a10      	ldr	r2, [pc, #64]	@ (8001ca0 <guideEnable+0x78>)
 8001c60:	6153      	str	r3, [r2, #20]
    ServoDataSendTypedef.TargetFSMPitch.f = CommandTypedef.FSM_Pitch.f;
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <guideEnable+0x7c>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca0 <guideEnable+0x78>)
 8001c68:	6193      	str	r3, [r2, #24]
    ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 8001c6a:	490d      	ldr	r1, [pc, #52]	@ (8001ca0 <guideEnable+0x78>)
 8001c6c:	480e      	ldr	r0, [pc, #56]	@ (8001ca8 <guideEnable+0x80>)
 8001c6e:	f7ff fc69 	bl	8001544 <ServoDataSend>

    // 粗电视引导  
    ImgSendTypedef_CU.FuncCode = SETTING_TRACK;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	@ (8001cac <guideEnable+0x84>)
 8001c74:	2208      	movs	r2, #8
 8001c76:	719a      	strb	r2, [r3, #6]
    // ImgSendTypedef_CU.FuncSubCode = MANUAL_TRACK;  //TODO: 数据来源于上位机 待修改
    
    ImgSendTypedef_CU.FuncSubCode = AUTO_TRACK;  //TODO: 数据来源于上位机 待修改
 8001c78:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <guideEnable+0x84>)
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	71da      	strb	r2, [r3, #7]
    Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001c7e:	490c      	ldr	r1, [pc, #48]	@ (8001cb0 <guideEnable+0x88>)
 8001c80:	480a      	ldr	r0, [pc, #40]	@ (8001cac <guideEnable+0x84>)
 8001c82:	f7ff f9bd 	bl	8001000 <Send2ImgModule>

    // 精电视引导
    ImgSendTypedef_JING.FuncCode = SETTING_TRACK;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <guideEnable+0x8c>)
 8001c88:	2208      	movs	r2, #8
 8001c8a:	719a      	strb	r2, [r3, #6]
    ImgSendTypedef_JING.FuncSubCode = AUTO_TRACK;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <guideEnable+0x8c>)
 8001c8e:	2202      	movs	r2, #2
 8001c90:	71da      	strb	r2, [r3, #7]
    Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8001c92:	4909      	ldr	r1, [pc, #36]	@ (8001cb8 <guideEnable+0x90>)
 8001c94:	4807      	ldr	r0, [pc, #28]	@ (8001cb4 <guideEnable+0x8c>)
 8001c96:	f7ff f9b3 	bl	8001000 <Send2ImgModule>
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	24000154 	.word	0x24000154
 8001ca4:	24000184 	.word	0x24000184
 8001ca8:	2400011c 	.word	0x2400011c
 8001cac:	24000018 	.word	0x24000018
 8001cb0:	24000064 	.word	0x24000064
 8001cb4:	2400008c 	.word	0x2400008c
 8001cb8:	240000d8 	.word	0x240000d8

08001cbc <scanEnable>:

void scanEnable()
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
    // 电机使能
    ServoDataSendTypedef.TurnMode = TURNTABLE_SCAN;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <scanEnable+0x4c>)
 8001cc2:	22b5      	movs	r2, #181	@ 0xb5
 8001cc4:	701a      	strb	r2, [r3, #0]
    ServoDataSendTypedef.MotorEnable = MotorPowerOn;
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <scanEnable+0x4c>)
 8001cc8:	2266      	movs	r2, #102	@ 0x66
 8001cca:	705a      	strb	r2, [r3, #1]
    ServoDataSendTypedef.ControlEnableJing = ENABLE_JING;
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <scanEnable+0x4c>)
 8001cce:	2266      	movs	r2, #102	@ 0x66
 8001cd0:	749a      	strb	r2, [r3, #18]
    ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 8001cd2:	490d      	ldr	r1, [pc, #52]	@ (8001d08 <scanEnable+0x4c>)
 8001cd4:	480d      	ldr	r0, [pc, #52]	@ (8001d0c <scanEnable+0x50>)
 8001cd6:	f7ff fc35 	bl	8001544 <ServoDataSend>
    // ServoDataSendTypedef.ZeroCorrectionFSMX.f   = 0.f;
    // ServoDataSendTypedef.ZeroCorrectionFSMY.f   = 0.f;
    // ServoDataSendTypedef.TrackingFaultCleanCu   = JINGTRACKING_FAULT_CLEAN;

    // 粗电视引导  
    ImgSendTypedef_CU.FuncCode = SETTING_TRACK;
 8001cda:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <scanEnable+0x54>)
 8001cdc:	2208      	movs	r2, #8
 8001cde:	719a      	strb	r2, [r3, #6]
    ImgSendTypedef_CU.FuncSubCode = AUTO_TRACK;  //TODO: 数据来源于上位机 待修改
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <scanEnable+0x54>)
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	71da      	strb	r2, [r3, #7]
    Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001ce6:	490b      	ldr	r1, [pc, #44]	@ (8001d14 <scanEnable+0x58>)
 8001ce8:	4809      	ldr	r0, [pc, #36]	@ (8001d10 <scanEnable+0x54>)
 8001cea:	f7ff f989 	bl	8001000 <Send2ImgModule>
    // ImgSendTypedef_CU.FuncSubCode = FOCUS_ADJUST;
    // ImgSendDataTypedef_CU.focusAdjust = 0; //TODO: 数据来源于上位机 待修改
    // Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);

    // // 精电视引导
    ImgSendTypedef_JING.FuncCode = SETTING_TRACK;
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <scanEnable+0x5c>)
 8001cf0:	2208      	movs	r2, #8
 8001cf2:	719a      	strb	r2, [r3, #6]
    ImgSendTypedef_JING.FuncSubCode = AUTO_TRACK;
 8001cf4:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <scanEnable+0x5c>)
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	71da      	strb	r2, [r3, #7]
    Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8001cfa:	4908      	ldr	r1, [pc, #32]	@ (8001d1c <scanEnable+0x60>)
 8001cfc:	4806      	ldr	r0, [pc, #24]	@ (8001d18 <scanEnable+0x5c>)
 8001cfe:	f7ff f97f 	bl	8001000 <Send2ImgModule>
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	24000154 	.word	0x24000154
 8001d0c:	2400011c 	.word	0x2400011c
 8001d10:	24000018 	.word	0x24000018
 8001d14:	24000064 	.word	0x24000064
 8001d18:	2400008c 	.word	0x2400008c
 8001d1c:	240000d8 	.word	0x240000d8

08001d20 <udpecho_thread>:
    .cuOffsetState = 0,
    .jingOffsetState = 0
};

static void udpecho_thread(void *arg)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	6078      	str	r0, [r7, #4]
//    socklen_t addrlen;


    while (1)
    {
        recv_data = (char *)pvPortMalloc(RECV_DATA);
 8001d28:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001d2c:	f013 fa1e 	bl	801516c <pvPortMalloc>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4a81      	ldr	r2, [pc, #516]	@ (8001f38 <udpecho_thread+0x218>)
 8001d34:	6013      	str	r3, [r2, #0]
//        senddata = (char *)pvPortMalloc(128);
        if (recv_data == NULL)
 8001d36:	4b80      	ldr	r3, [pc, #512]	@ (8001f38 <udpecho_thread+0x218>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 82ca 	beq.w	80022d4 <udpecho_thread+0x5b4>
        {
            // uart_printf("No memory\n");
            goto __exit;
        }

        sock = socket(AF_INET, SOCK_DGRAM, 0);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2102      	movs	r1, #2
 8001d44:	2002      	movs	r0, #2
 8001d46:	f016 fabf 	bl	80182c8 <lwip_socket>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4a7b      	ldr	r2, [pc, #492]	@ (8001f3c <udpecho_thread+0x21c>)
 8001d4e:	6013      	str	r3, [r2, #0]
        if (sock < 0)
 8001d50:	4b7a      	ldr	r3, [pc, #488]	@ (8001f3c <udpecho_thread+0x21c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f2c0 82bf 	blt.w	80022d8 <udpecho_thread+0x5b8>
        {
        	// uart_printf("Socket error\n");
            goto __exit;
        }
        addrlen = sizeof(struct sockaddr);
 8001d5a:	4b79      	ldr	r3, [pc, #484]	@ (8001f40 <udpecho_thread+0x220>)
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	601a      	str	r2, [r3, #0]
        udp_addr.sin_family = AF_INET;
 8001d60:	4b78      	ldr	r3, [pc, #480]	@ (8001f44 <udpecho_thread+0x224>)
 8001d62:	2202      	movs	r2, #2
 8001d64:	705a      	strb	r2, [r3, #1]
        udp_addr.sin_addr.s_addr = INADDR_ANY;
 8001d66:	4b77      	ldr	r3, [pc, #476]	@ (8001f44 <udpecho_thread+0x224>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	605a      	str	r2, [r3, #4]
        udp_addr.sin_port = htons(PORT);
 8001d6c:	f241 3089 	movw	r0, #5001	@ 0x1389
 8001d70:	f016 fe4e 	bl	8018a10 <lwip_htons>
 8001d74:	4603      	mov	r3, r0
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b72      	ldr	r3, [pc, #456]	@ (8001f44 <udpecho_thread+0x224>)
 8001d7a:	805a      	strh	r2, [r3, #2]
        memset(&(udp_addr.sin_zero), 0, sizeof(udp_addr.sin_zero));
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4871      	ldr	r0, [pc, #452]	@ (8001f48 <udpecho_thread+0x228>)
 8001d82:	f023 fb5b 	bl	802543c <memset>

        if (bind(sock, (struct sockaddr *)&udp_addr, sizeof(struct sockaddr)) == -1)
 8001d86:	4b6d      	ldr	r3, [pc, #436]	@ (8001f3c <udpecho_thread+0x21c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2210      	movs	r2, #16
 8001d8c:	496d      	ldr	r1, [pc, #436]	@ (8001f44 <udpecho_thread+0x224>)
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f015 fdb0 	bl	80178f4 <lwip_bind>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9a:	f000 829f 	beq.w	80022dc <udpecho_thread+0x5bc>
        }

        while (1)
        {
//        	test++;
             recv_data_len=recvfrom(sock,recv_data,
 8001d9e:	4b67      	ldr	r3, [pc, #412]	@ (8001f3c <udpecho_thread+0x21c>)
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	4b65      	ldr	r3, [pc, #404]	@ (8001f38 <udpecho_thread+0x218>)
 8001da4:	6819      	ldr	r1, [r3, #0]
 8001da6:	4b66      	ldr	r3, [pc, #408]	@ (8001f40 <udpecho_thread+0x220>)
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	4b68      	ldr	r3, [pc, #416]	@ (8001f4c <udpecho_thread+0x22c>)
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2300      	movs	r3, #0
 8001db0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001db4:	f016 f8e6 	bl	8017f84 <lwip_recvfrom>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4a65      	ldr	r2, [pc, #404]	@ (8001f50 <udpecho_thread+0x230>)
 8001dbc:	6013      	str	r3, [r2, #0]
             /*显示发送端的IP地址*/
            //  uart_printf("receive from %s\n",inet_ntoa(seraddr.sin_addr));

             /*显示发送端发来的字串*/
            //  uart_printf("recevce:%s\n",recv_data);
            for(int i = 0;i < recv_data_len;i++)
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	e00b      	b.n	8001ddc <udpecho_thread+0xbc>
            {
                uart_printf("%02x ",recv_data[i]);
 8001dc4:	4b5c      	ldr	r3, [pc, #368]	@ (8001f38 <udpecho_thread+0x218>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4413      	add	r3, r2
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4860      	ldr	r0, [pc, #384]	@ (8001f54 <udpecho_thread+0x234>)
 8001dd2:	f002 ff71 	bl	8004cb8 <uart_printf>
            for(int i = 0;i < recv_data_len;i++)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	4b5c      	ldr	r3, [pc, #368]	@ (8001f50 <udpecho_thread+0x230>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	dbee      	blt.n	8001dc4 <udpecho_thread+0xa4>
            }       
            HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001de6:	2108      	movs	r1, #8
 8001de8:	485b      	ldr	r0, [pc, #364]	@ (8001f58 <udpecho_thread+0x238>)
 8001dea:	f009 fcd2 	bl	800b792 <HAL_GPIO_TogglePin>
            //  uart_printf("recevce:%s,len:%d",mes,recv_data_len);

            if(recv_data[0] == 0x90 && recv_data[1] == 0x60 && recv_data[recv_data_len - 1] == 0xee)
 8001dee:	4b52      	ldr	r3, [pc, #328]	@ (8001f38 <udpecho_thread+0x218>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b90      	cmp	r3, #144	@ 0x90
 8001df6:	f040 8269 	bne.w	80022cc <udpecho_thread+0x5ac>
 8001dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8001f38 <udpecho_thread+0x218>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b60      	cmp	r3, #96	@ 0x60
 8001e04:	f040 8262 	bne.w	80022cc <udpecho_thread+0x5ac>
 8001e08:	4b4b      	ldr	r3, [pc, #300]	@ (8001f38 <udpecho_thread+0x218>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b50      	ldr	r3, [pc, #320]	@ (8001f50 <udpecho_thread+0x230>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2bee      	cmp	r3, #238	@ 0xee
 8001e18:	f040 8258 	bne.w	80022cc <udpecho_thread+0x5ac>
            {
                #if testcode
                // --------------------------------------------------
                if(CommandTypedef.state != recv_data[3])
 8001e1c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f5c <udpecho_thread+0x23c>)
 8001e1e:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8001e22:	4b45      	ldr	r3, [pc, #276]	@ (8001f38 <udpecho_thread+0x218>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3303      	adds	r3, #3
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d002      	beq.n	8001e34 <udpecho_thread+0x114>
                {
                    stateChange = 1;
 8001e2e:	4b4c      	ldr	r3, [pc, #304]	@ (8001f60 <udpecho_thread+0x240>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
                }
                CommandTypedef.go2Zero          = recv_data[3] & bit(0) ? 1 : 0;
 8001e34:	4b40      	ldr	r3, [pc, #256]	@ (8001f38 <udpecho_thread+0x218>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	3303      	adds	r3, #3
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4b46      	ldr	r3, [pc, #280]	@ (8001f5c <udpecho_thread+0x23c>)
 8001e44:	701a      	strb	r2, [r3, #0]
                CommandTypedef.standbyEnable    = recv_data[3] & bit(1) ? 1 : 0;
 8001e46:	4b3c      	ldr	r3, [pc, #240]	@ (8001f38 <udpecho_thread+0x218>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	3303      	adds	r3, #3
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	105b      	asrs	r3, r3, #1
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	4b40      	ldr	r3, [pc, #256]	@ (8001f5c <udpecho_thread+0x23c>)
 8001e5a:	705a      	strb	r2, [r3, #1]
                CommandTypedef.standbyDisable   = recv_data[3] & bit(2) ? 1 : 0;
 8001e5c:	4b36      	ldr	r3, [pc, #216]	@ (8001f38 <udpecho_thread+0x218>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3303      	adds	r3, #3
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	109b      	asrs	r3, r3, #2
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f5c <udpecho_thread+0x23c>)
 8001e70:	709a      	strb	r2, [r3, #2]
                CommandTypedef.guideEnable      = recv_data[3] & bit(3) ? 1 : 0;
 8001e72:	4b31      	ldr	r3, [pc, #196]	@ (8001f38 <udpecho_thread+0x218>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3303      	adds	r3, #3
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	10db      	asrs	r3, r3, #3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b35      	ldr	r3, [pc, #212]	@ (8001f5c <udpecho_thread+0x23c>)
 8001e86:	711a      	strb	r2, [r3, #4]
                CommandTypedef.catchEnable      = recv_data[3] & bit(4) ? 1 : 0;
 8001e88:	4b2b      	ldr	r3, [pc, #172]	@ (8001f38 <udpecho_thread+0x218>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	3303      	adds	r3, #3
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	111b      	asrs	r3, r3, #4
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4b30      	ldr	r3, [pc, #192]	@ (8001f5c <udpecho_thread+0x23c>)
 8001e9c:	715a      	strb	r2, [r3, #5]
                CommandTypedef.state = recv_data[3];
 8001e9e:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <udpecho_thread+0x218>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	3303      	adds	r3, #3
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f5c <udpecho_thread+0x23c>)
 8001ea8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                

                // uart_printf("gozeor:%d,standbyEnable:%d,standbyDisable:%d,guideEnable:%d,catchEnable:%d\n",CommandTypedef.go2Zero,CommandTypedef.standbyEnable,CommandTypedef.standbyDisable,CommandTypedef.guideEnable,CommandTypedef.catchEnable);

                if(CommandTypedef.rangefinderOpen == 0 && recv_data[4] == 1)
 8001eac:	4b2b      	ldr	r3, [pc, #172]	@ (8001f5c <udpecho_thread+0x23c>)
 8001eae:	7a9b      	ldrb	r3, [r3, #10]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d108      	bne.n	8001ec6 <udpecho_thread+0x1a6>
 8001eb4:	4b20      	ldr	r3, [pc, #128]	@ (8001f38 <udpecho_thread+0x218>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d102      	bne.n	8001ec6 <udpecho_thread+0x1a6>
                {
                    rangefander_flag = 1;
 8001ec0:	4b28      	ldr	r3, [pc, #160]	@ (8001f64 <udpecho_thread+0x244>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
                }
                if(CommandTypedef.rangefinderOpen == 1 && recv_data[4] == 0)
 8001ec6:	4b25      	ldr	r3, [pc, #148]	@ (8001f5c <udpecho_thread+0x23c>)
 8001ec8:	7a9b      	ldrb	r3, [r3, #10]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d108      	bne.n	8001ee0 <udpecho_thread+0x1c0>
 8001ece:	4b1a      	ldr	r3, [pc, #104]	@ (8001f38 <udpecho_thread+0x218>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d102      	bne.n	8001ee0 <udpecho_thread+0x1c0>
                {
                    rangefinder_close = 1;
 8001eda:	4b23      	ldr	r3, [pc, #140]	@ (8001f68 <udpecho_thread+0x248>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]
                }
                if(CommandTypedef.laserAdjust != ((recv_data[6] << 8) | recv_data[5]))
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f5c <udpecho_thread+0x23c>)
 8001ee2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4b13      	ldr	r3, [pc, #76]	@ (8001f38 <udpecho_thread+0x218>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	3306      	adds	r3, #6
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	4a11      	ldr	r2, [pc, #68]	@ (8001f38 <udpecho_thread+0x218>)
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	3205      	adds	r2, #5
 8001ef8:	7812      	ldrb	r2, [r2, #0]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	4299      	cmp	r1, r3
 8001efe:	d002      	beq.n	8001f06 <udpecho_thread+0x1e6>
                {
                    laserChange = 1;
 8001f00:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <udpecho_thread+0x24c>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
                }

                CommandTypedef.rangefinderOpen  = recv_data[4];
 8001f06:	4b0c      	ldr	r3, [pc, #48]	@ (8001f38 <udpecho_thread+0x218>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	4b13      	ldr	r3, [pc, #76]	@ (8001f5c <udpecho_thread+0x23c>)
 8001f10:	729a      	strb	r2, [r3, #10]
                // 数据是低位在前高为在后
                CommandTypedef.laserAdjust = (recv_data[6] << 8) | recv_data[5];
 8001f12:	4b09      	ldr	r3, [pc, #36]	@ (8001f38 <udpecho_thread+0x218>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3306      	adds	r3, #6
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	b21a      	sxth	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <udpecho_thread+0x218>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	3305      	adds	r3, #5
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b21b      	sxth	r3, r3
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <udpecho_thread+0x23c>)
 8001f2e:	819a      	strh	r2, [r3, #12]
                // uart_printf("laserAdjust:%d\n",CommandTypedef.laserAdjust);
                for(int i = 0;i < 4;i++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	e04e      	b.n	8001fd4 <udpecho_thread+0x2b4>
 8001f36:	bf00      	nop
 8001f38:	240004c4 	.word	0x240004c4
 8001f3c:	240001d4 	.word	0x240001d4
 8001f40:	240004fc 	.word	0x240004fc
 8001f44:	240004c8 	.word	0x240004c8
 8001f48:	240004d0 	.word	0x240004d0
 8001f4c:	240004d8 	.word	0x240004d8
 8001f50:	240004f8 	.word	0x240004f8
 8001f54:	080290cc 	.word	0x080290cc
 8001f58:	58021800 	.word	0x58021800
 8001f5c:	24000184 	.word	0x24000184
 8001f60:	240004b1 	.word	0x240004b1
 8001f64:	240004bb 	.word	0x240004bb
 8001f68:	240004bc 	.word	0x240004bc
 8001f6c:	240004c3 	.word	0x240004c3
                {
                    angle[0].u8t[i] = recv_data[7 + i];
 8001f70:	4b56      	ldr	r3, [pc, #344]	@ (80020cc <udpecho_thread+0x3ac>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	3207      	adds	r2, #7
 8001f78:	4413      	add	r3, r2
 8001f7a:	7819      	ldrb	r1, [r3, #0]
 8001f7c:	4a54      	ldr	r2, [pc, #336]	@ (80020d0 <udpecho_thread+0x3b0>)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	4413      	add	r3, r2
 8001f82:	460a      	mov	r2, r1
 8001f84:	701a      	strb	r2, [r3, #0]
                    angle[1].u8t[i] = recv_data[11 + i];
 8001f86:	4b51      	ldr	r3, [pc, #324]	@ (80020cc <udpecho_thread+0x3ac>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	320b      	adds	r2, #11
 8001f8e:	4413      	add	r3, r2
 8001f90:	7819      	ldrb	r1, [r3, #0]
 8001f92:	4a4f      	ldr	r2, [pc, #316]	@ (80020d0 <udpecho_thread+0x3b0>)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4413      	add	r3, r2
 8001f98:	3304      	adds	r3, #4
 8001f9a:	460a      	mov	r2, r1
 8001f9c:	701a      	strb	r2, [r3, #0]
                    angle[2].u8t[i] = recv_data[15 + i];
 8001f9e:	4b4b      	ldr	r3, [pc, #300]	@ (80020cc <udpecho_thread+0x3ac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	320f      	adds	r2, #15
 8001fa6:	4413      	add	r3, r2
 8001fa8:	7819      	ldrb	r1, [r3, #0]
 8001faa:	4a49      	ldr	r2, [pc, #292]	@ (80020d0 <udpecho_thread+0x3b0>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4413      	add	r3, r2
 8001fb0:	3308      	adds	r3, #8
 8001fb2:	460a      	mov	r2, r1
 8001fb4:	701a      	strb	r2, [r3, #0]
                    angle[3].u8t[i] = recv_data[19 + i];
 8001fb6:	4b45      	ldr	r3, [pc, #276]	@ (80020cc <udpecho_thread+0x3ac>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	3213      	adds	r2, #19
 8001fbe:	4413      	add	r3, r2
 8001fc0:	7819      	ldrb	r1, [r3, #0]
 8001fc2:	4a43      	ldr	r2, [pc, #268]	@ (80020d0 <udpecho_thread+0x3b0>)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	330c      	adds	r3, #12
 8001fca:	460a      	mov	r2, r1
 8001fcc:	701a      	strb	r2, [r3, #0]
                for(int i = 0;i < 4;i++)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	ddca      	ble.n	8001f70 <udpecho_thread+0x250>
                }
                if((CommandTypedef.turnYaw.f != angle[0].f) || (CommandTypedef.turnPitch.f != angle[1].f) || (CommandTypedef.FSM_Yaw.f != angle[2].f) || (CommandTypedef.FSM_Pitch.f != angle[3].f))
 8001fda:	4b3e      	ldr	r3, [pc, #248]	@ (80020d4 <udpecho_thread+0x3b4>)
 8001fdc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80020d0 <udpecho_thread+0x3b0>)
 8001fe2:	edd3 7a00 	vldr	s15, [r3]
 8001fe6:	eeb4 7a67 	vcmp.f32	s14, s15
 8001fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fee:	d120      	bne.n	8002032 <udpecho_thread+0x312>
 8001ff0:	4b38      	ldr	r3, [pc, #224]	@ (80020d4 <udpecho_thread+0x3b4>)
 8001ff2:	ed93 7a05 	vldr	s14, [r3, #20]
 8001ff6:	4b36      	ldr	r3, [pc, #216]	@ (80020d0 <udpecho_thread+0x3b0>)
 8001ff8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ffc:	eeb4 7a67 	vcmp.f32	s14, s15
 8002000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002004:	d115      	bne.n	8002032 <udpecho_thread+0x312>
 8002006:	4b33      	ldr	r3, [pc, #204]	@ (80020d4 <udpecho_thread+0x3b4>)
 8002008:	ed93 7a06 	vldr	s14, [r3, #24]
 800200c:	4b30      	ldr	r3, [pc, #192]	@ (80020d0 <udpecho_thread+0x3b0>)
 800200e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002012:	eeb4 7a67 	vcmp.f32	s14, s15
 8002016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201a:	d10a      	bne.n	8002032 <udpecho_thread+0x312>
 800201c:	4b2d      	ldr	r3, [pc, #180]	@ (80020d4 <udpecho_thread+0x3b4>)
 800201e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002022:	4b2b      	ldr	r3, [pc, #172]	@ (80020d0 <udpecho_thread+0x3b0>)
 8002024:	edd3 7a03 	vldr	s15, [r3, #12]
 8002028:	eeb4 7a67 	vcmp.f32	s14, s15
 800202c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002030:	d002      	beq.n	8002038 <udpecho_thread+0x318>
                {
                    servo_flag = 1;
 8002032:	4b29      	ldr	r3, [pc, #164]	@ (80020d8 <udpecho_thread+0x3b8>)
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
                }

                CommandTypedef.turnYaw.f        = angle[0].f;
 8002038:	4b25      	ldr	r3, [pc, #148]	@ (80020d0 <udpecho_thread+0x3b0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a25      	ldr	r2, [pc, #148]	@ (80020d4 <udpecho_thread+0x3b4>)
 800203e:	6113      	str	r3, [r2, #16]
                CommandTypedef.turnPitch.f      = angle[1].f;
 8002040:	4b23      	ldr	r3, [pc, #140]	@ (80020d0 <udpecho_thread+0x3b0>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a23      	ldr	r2, [pc, #140]	@ (80020d4 <udpecho_thread+0x3b4>)
 8002046:	6153      	str	r3, [r2, #20]
                CommandTypedef.FSM_Yaw.f        = angle[2].f;
 8002048:	4b21      	ldr	r3, [pc, #132]	@ (80020d0 <udpecho_thread+0x3b0>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a21      	ldr	r2, [pc, #132]	@ (80020d4 <udpecho_thread+0x3b4>)
 800204e:	6193      	str	r3, [r2, #24]
                CommandTypedef.FSM_Pitch.f      = angle[3].f;
 8002050:	4b1f      	ldr	r3, [pc, #124]	@ (80020d0 <udpecho_thread+0x3b0>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4a1f      	ldr	r2, [pc, #124]	@ (80020d4 <udpecho_thread+0x3b4>)
 8002056:	61d3      	str	r3, [r2, #28]
                
                static uint32_t temp[2];
                static uint32_t exp_temp[2];
                static int32_t offset[2];

                temp[0] = (recv_data[26]<<24) | (recv_data[25]<<16) | (recv_data[24]<<8) | recv_data[23];
 8002058:	4b1c      	ldr	r3, [pc, #112]	@ (80020cc <udpecho_thread+0x3ac>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	331a      	adds	r3, #26
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	061a      	lsls	r2, r3, #24
 8002062:	4b1a      	ldr	r3, [pc, #104]	@ (80020cc <udpecho_thread+0x3ac>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3319      	adds	r3, #25
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	431a      	orrs	r2, r3
 800206e:	4b17      	ldr	r3, [pc, #92]	@ (80020cc <udpecho_thread+0x3ac>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3318      	adds	r3, #24
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	4313      	orrs	r3, r2
 800207a:	4a14      	ldr	r2, [pc, #80]	@ (80020cc <udpecho_thread+0x3ac>)
 800207c:	6812      	ldr	r2, [r2, #0]
 800207e:	3217      	adds	r2, #23
 8002080:	7812      	ldrb	r2, [r2, #0]
 8002082:	4313      	orrs	r3, r2
 8002084:	461a      	mov	r2, r3
 8002086:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <udpecho_thread+0x3bc>)
 8002088:	601a      	str	r2, [r3, #0]
                if(CommandTypedef.zoomAdjust != temp[0])
 800208a:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <udpecho_thread+0x3b4>)
 800208c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800208e:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <udpecho_thread+0x3bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d002      	beq.n	800209c <udpecho_thread+0x37c>
                {
                    // uart_printf("zoomAdjust:%ld,temp:%ld\n",CommandTypedef.zoomAdjust,temp[0]);
                    zoom_flag = 1;
 8002096:	4b12      	ldr	r3, [pc, #72]	@ (80020e0 <udpecho_thread+0x3c0>)
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
                }
                CommandTypedef.zoomAdjust = temp[0];
 800209c:	4b0f      	ldr	r3, [pc, #60]	@ (80020dc <udpecho_thread+0x3bc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0c      	ldr	r2, [pc, #48]	@ (80020d4 <udpecho_thread+0x3b4>)
 80020a2:	6253      	str	r3, [r2, #36]	@ 0x24
                CommandTypedef.clearerror = recv_data[27];
 80020a4:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <udpecho_thread+0x3ac>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	331b      	adds	r3, #27
 80020aa:	781a      	ldrb	r2, [r3, #0]
 80020ac:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <udpecho_thread+0x3b4>)
 80020ae:	71da      	strb	r2, [r3, #7]
                CommandTypedef.manualEnable = recv_data[28];
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <udpecho_thread+0x3ac>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	331c      	adds	r3, #28
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <udpecho_thread+0x3b4>)
 80020ba:	719a      	strb	r2, [r3, #6]
                if(CommandTypedef.manualEnable == 1)
 80020bc:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <udpecho_thread+0x3b4>)
 80020be:	799b      	ldrb	r3, [r3, #6]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d111      	bne.n	80020e8 <udpecho_thread+0x3c8>
                {
                    manual_flag = 1;
 80020c4:	4b07      	ldr	r3, [pc, #28]	@ (80020e4 <udpecho_thread+0x3c4>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
 80020ca:	e014      	b.n	80020f6 <udpecho_thread+0x3d6>
 80020cc:	240004c4 	.word	0x240004c4
 80020d0:	24000500 	.word	0x24000500
 80020d4:	24000184 	.word	0x24000184
 80020d8:	240004bd 	.word	0x240004bd
 80020dc:	24000540 	.word	0x24000540
 80020e0:	240004be 	.word	0x240004be
 80020e4:	240001d0 	.word	0x240001d0
                }else if(CommandTypedef.manualEnable == 2)
 80020e8:	4b87      	ldr	r3, [pc, #540]	@ (8002308 <udpecho_thread+0x5e8>)
 80020ea:	799b      	ldrb	r3, [r3, #6]
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d102      	bne.n	80020f6 <udpecho_thread+0x3d6>
                {
                    manual_flag = 2;
 80020f0:	4b86      	ldr	r3, [pc, #536]	@ (800230c <udpecho_thread+0x5ec>)
 80020f2:	2202      	movs	r2, #2
 80020f4:	701a      	strb	r2, [r3, #0]
                }
                if(CommandTypedef.clearerror == 1)
 80020f6:	4b84      	ldr	r3, [pc, #528]	@ (8002308 <udpecho_thread+0x5e8>)
 80020f8:	79db      	ldrb	r3, [r3, #7]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d102      	bne.n	8002104 <udpecho_thread+0x3e4>
                {
                    clearerror_flag = 1;
 80020fe:	4b84      	ldr	r3, [pc, #528]	@ (8002310 <udpecho_thread+0x5f0>)
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
                }
                CommandTypedef.manual_center_x = (recv_data[30] << 8) | recv_data[29];
 8002104:	4b83      	ldr	r3, [pc, #524]	@ (8002314 <udpecho_thread+0x5f4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	331e      	adds	r3, #30
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	b21a      	sxth	r2, r3
 8002110:	4b80      	ldr	r3, [pc, #512]	@ (8002314 <udpecho_thread+0x5f4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	331d      	adds	r3, #29
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b21b      	sxth	r3, r3
 800211a:	4313      	orrs	r3, r2
 800211c:	b21b      	sxth	r3, r3
 800211e:	b29a      	uxth	r2, r3
 8002120:	4b79      	ldr	r3, [pc, #484]	@ (8002308 <udpecho_thread+0x5e8>)
 8002122:	869a      	strh	r2, [r3, #52]	@ 0x34
                CommandTypedef.manual_center_y = (recv_data[32] << 8) | recv_data[31];
 8002124:	4b7b      	ldr	r3, [pc, #492]	@ (8002314 <udpecho_thread+0x5f4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	3320      	adds	r3, #32
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	b21a      	sxth	r2, r3
 8002130:	4b78      	ldr	r3, [pc, #480]	@ (8002314 <udpecho_thread+0x5f4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	331f      	adds	r3, #31
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	b21b      	sxth	r3, r3
 800213a:	4313      	orrs	r3, r2
 800213c:	b21b      	sxth	r3, r3
 800213e:	b29a      	uxth	r2, r3
 8002140:	4b71      	ldr	r3, [pc, #452]	@ (8002308 <udpecho_thread+0x5e8>)
 8002142:	86da      	strh	r2, [r3, #54]	@ 0x36
                CommandTypedef.manual_width = (recv_data[34] << 8) | recv_data[33];
 8002144:	4b73      	ldr	r3, [pc, #460]	@ (8002314 <udpecho_thread+0x5f4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	3322      	adds	r3, #34	@ 0x22
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b21a      	sxth	r2, r3
 8002150:	4b70      	ldr	r3, [pc, #448]	@ (8002314 <udpecho_thread+0x5f4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3321      	adds	r3, #33	@ 0x21
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b21b      	sxth	r3, r3
 800215a:	4313      	orrs	r3, r2
 800215c:	b21b      	sxth	r3, r3
 800215e:	b29a      	uxth	r2, r3
 8002160:	4b69      	ldr	r3, [pc, #420]	@ (8002308 <udpecho_thread+0x5e8>)
 8002162:	871a      	strh	r2, [r3, #56]	@ 0x38
                CommandTypedef.manual_height = (recv_data[36] << 8) | recv_data[35];
 8002164:	4b6b      	ldr	r3, [pc, #428]	@ (8002314 <udpecho_thread+0x5f4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	3324      	adds	r3, #36	@ 0x24
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	b21a      	sxth	r2, r3
 8002170:	4b68      	ldr	r3, [pc, #416]	@ (8002314 <udpecho_thread+0x5f4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3323      	adds	r3, #35	@ 0x23
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b21b      	sxth	r3, r3
 800217a:	4313      	orrs	r3, r2
 800217c:	b21b      	sxth	r3, r3
 800217e:	b29a      	uxth	r2, r3
 8002180:	4b61      	ldr	r3, [pc, #388]	@ (8002308 <udpecho_thread+0x5e8>)
 8002182:	875a      	strh	r2, [r3, #58]	@ 0x3a
                // uart_printf("manual_center_x:%d,manual_center_y:%d,manual_width:%d,manual_height:%d\n",CommandTypedef.manual_center_x,CommandTypedef.manual_center_y,CommandTypedef.manual_width,CommandTypedef.manual_height);
                CommandTypedef.manual_cj = recv_data[37];
 8002184:	4b63      	ldr	r3, [pc, #396]	@ (8002314 <udpecho_thread+0x5f4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	3325      	adds	r3, #37	@ 0x25
 800218a:	781a      	ldrb	r2, [r3, #0]
 800218c:	4b5e      	ldr	r3, [pc, #376]	@ (8002308 <udpecho_thread+0x5e8>)
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                if(CommandTypedef.setTurnState != recv_data[38])
 8002192:	4b5d      	ldr	r3, [pc, #372]	@ (8002308 <udpecho_thread+0x5e8>)
 8002194:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 8002198:	4b5e      	ldr	r3, [pc, #376]	@ (8002314 <udpecho_thread+0x5f4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	3326      	adds	r3, #38	@ 0x26
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d002      	beq.n	80021aa <udpecho_thread+0x48a>
                {
                    sifuFlag.turnStateFlag = 1;
 80021a4:	4b5c      	ldr	r3, [pc, #368]	@ (8002318 <udpecho_thread+0x5f8>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
                }
                if(CommandTypedef.setFSMState != recv_data[39])
 80021aa:	4b57      	ldr	r3, [pc, #348]	@ (8002308 <udpecho_thread+0x5e8>)
 80021ac:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 80021b0:	4b58      	ldr	r3, [pc, #352]	@ (8002314 <udpecho_thread+0x5f4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	3327      	adds	r3, #39	@ 0x27
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d002      	beq.n	80021c2 <udpecho_thread+0x4a2>
                {
                    sifuFlag.FSMModeFlag = 1;
 80021bc:	4b56      	ldr	r3, [pc, #344]	@ (8002318 <udpecho_thread+0x5f8>)
 80021be:	2201      	movs	r2, #1
 80021c0:	70da      	strb	r2, [r3, #3]
                }
                if(CommandTypedef.trackJingEnable != recv_data[40])
 80021c2:	4b51      	ldr	r3, [pc, #324]	@ (8002308 <udpecho_thread+0x5e8>)
 80021c4:	7a5a      	ldrb	r2, [r3, #9]
 80021c6:	4b53      	ldr	r3, [pc, #332]	@ (8002314 <udpecho_thread+0x5f4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	3328      	adds	r3, #40	@ 0x28
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d002      	beq.n	80021d8 <udpecho_thread+0x4b8>
                {
                    sifuFlag.controlEnableJingFlag = 1;
 80021d2:	4b51      	ldr	r3, [pc, #324]	@ (8002318 <udpecho_thread+0x5f8>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	711a      	strb	r2, [r3, #4]
                }
                if(ServoDataSendTypedef.MotorEnable != recv_data[41])
 80021d8:	4b50      	ldr	r3, [pc, #320]	@ (800231c <udpecho_thread+0x5fc>)
 80021da:	785a      	ldrb	r2, [r3, #1]
 80021dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002314 <udpecho_thread+0x5f4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3329      	adds	r3, #41	@ 0x29
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d002      	beq.n	80021ee <udpecho_thread+0x4ce>
                {
                    sifuFlag.motorEnableFlag = 1;
 80021e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002318 <udpecho_thread+0x5f8>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	705a      	strb	r2, [r3, #1]
                }
                CommandTypedef.setTurnState = recv_data[38];
 80021ee:	4b49      	ldr	r3, [pc, #292]	@ (8002314 <udpecho_thread+0x5f4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	3326      	adds	r3, #38	@ 0x26
 80021f4:	781a      	ldrb	r2, [r3, #0]
 80021f6:	4b44      	ldr	r3, [pc, #272]	@ (8002308 <udpecho_thread+0x5e8>)
 80021f8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
                CommandTypedef.setFSMState = recv_data[39];
 80021fc:	4b45      	ldr	r3, [pc, #276]	@ (8002314 <udpecho_thread+0x5f4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3327      	adds	r3, #39	@ 0x27
 8002202:	781a      	ldrb	r2, [r3, #0]
 8002204:	4b40      	ldr	r3, [pc, #256]	@ (8002308 <udpecho_thread+0x5e8>)
 8002206:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
                CommandTypedef.trackJingEnable = recv_data[40];
 800220a:	4b42      	ldr	r3, [pc, #264]	@ (8002314 <udpecho_thread+0x5f4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	3328      	adds	r3, #40	@ 0x28
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	4b3d      	ldr	r3, [pc, #244]	@ (8002308 <udpecho_thread+0x5e8>)
 8002214:	725a      	strb	r2, [r3, #9]
                CommandTypedef.motorEnable = recv_data[41];
 8002216:	4b3f      	ldr	r3, [pc, #252]	@ (8002314 <udpecho_thread+0x5f4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3329      	adds	r3, #41	@ 0x29
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	4b3a      	ldr	r3, [pc, #232]	@ (8002308 <udpecho_thread+0x5e8>)
 8002220:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
                ServoDataSendTypedef.TrackingDataValid = recv_data[42];
 8002224:	4b3b      	ldr	r3, [pc, #236]	@ (8002314 <udpecho_thread+0x5f4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	332a      	adds	r3, #42	@ 0x2a
 800222a:	781a      	ldrb	r2, [r3, #0]
 800222c:	4b3b      	ldr	r3, [pc, #236]	@ (800231c <udpecho_thread+0x5fc>)
 800222e:	719a      	strb	r2, [r3, #6]
                exp_temp[0] = recv_data[43] | (recv_data[44] << 8) | (recv_data[45] << 16) | (recv_data[46] << 24);
 8002230:	4b38      	ldr	r3, [pc, #224]	@ (8002314 <udpecho_thread+0x5f4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	332b      	adds	r3, #43	@ 0x2b
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	4b36      	ldr	r3, [pc, #216]	@ (8002314 <udpecho_thread+0x5f4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	332c      	adds	r3, #44	@ 0x2c
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	431a      	orrs	r2, r3
 8002246:	4b33      	ldr	r3, [pc, #204]	@ (8002314 <udpecho_thread+0x5f4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	332d      	adds	r3, #45	@ 0x2d
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	041b      	lsls	r3, r3, #16
 8002250:	431a      	orrs	r2, r3
 8002252:	4b30      	ldr	r3, [pc, #192]	@ (8002314 <udpecho_thread+0x5f4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	332e      	adds	r3, #46	@ 0x2e
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	061b      	lsls	r3, r3, #24
 800225c:	4313      	orrs	r3, r2
 800225e:	461a      	mov	r2, r3
 8002260:	4b2f      	ldr	r3, [pc, #188]	@ (8002320 <udpecho_thread+0x600>)
 8002262:	601a      	str	r2, [r3, #0]
                exp_temp[1] = recv_data[47] | (recv_data[48] << 8) | (recv_data[49] << 16) | (recv_data[50] << 24);
 8002264:	4b2b      	ldr	r3, [pc, #172]	@ (8002314 <udpecho_thread+0x5f4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	332f      	adds	r3, #47	@ 0x2f
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b29      	ldr	r3, [pc, #164]	@ (8002314 <udpecho_thread+0x5f4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3330      	adds	r3, #48	@ 0x30
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	431a      	orrs	r2, r3
 800227a:	4b26      	ldr	r3, [pc, #152]	@ (8002314 <udpecho_thread+0x5f4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3331      	adds	r3, #49	@ 0x31
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	041b      	lsls	r3, r3, #16
 8002284:	431a      	orrs	r2, r3
 8002286:	4b23      	ldr	r3, [pc, #140]	@ (8002314 <udpecho_thread+0x5f4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	3332      	adds	r3, #50	@ 0x32
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	061b      	lsls	r3, r3, #24
 8002290:	4313      	orrs	r3, r2
 8002292:	461a      	mov	r2, r3
 8002294:	4b22      	ldr	r3, [pc, #136]	@ (8002320 <udpecho_thread+0x600>)
 8002296:	605a      	str	r2, [r3, #4]
                if(CommandTypedef.exposureCU != exp_temp[0])
 8002298:	4b1b      	ldr	r3, [pc, #108]	@ (8002308 <udpecho_thread+0x5e8>)
 800229a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800229c:	4b20      	ldr	r3, [pc, #128]	@ (8002320 <udpecho_thread+0x600>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d002      	beq.n	80022aa <udpecho_thread+0x58a>
                {
                    expose_flag = 1;
 80022a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002324 <udpecho_thread+0x604>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
                }
                if(CommandTypedef.exposureJING != exp_temp[1])
 80022aa:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <udpecho_thread+0x5e8>)
 80022ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002320 <udpecho_thread+0x600>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d002      	beq.n	80022bc <udpecho_thread+0x59c>
                {
                    exposeJing_flag = 1;
 80022b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002328 <udpecho_thread+0x608>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
                }
                CommandTypedef.exposureCU = exp_temp[0];
 80022bc:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <udpecho_thread+0x600>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a11      	ldr	r2, [pc, #68]	@ (8002308 <udpecho_thread+0x5e8>)
 80022c2:	6293      	str	r3, [r2, #40]	@ 0x28
                CommandTypedef.exposureJING = exp_temp[1];
 80022c4:	4b16      	ldr	r3, [pc, #88]	@ (8002320 <udpecho_thread+0x600>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002308 <udpecho_thread+0x5e8>)
 80022ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
//           }
//           sendto(sock,recv_data,
//               recv_data_len,0,
//               (struct sockaddr*)&seraddr,
//               addrlen);
             osDelay(10);
 80022cc:	200a      	movs	r0, #10
 80022ce:	f010 f92b 	bl	8012528 <osDelay>
             recv_data_len=recvfrom(sock,recv_data,
 80022d2:	e564      	b.n	8001d9e <udpecho_thread+0x7e>
            goto __exit;
 80022d4:	bf00      	nop
 80022d6:	e002      	b.n	80022de <udpecho_thread+0x5be>
            goto __exit;
 80022d8:	bf00      	nop
 80022da:	e000      	b.n	80022de <udpecho_thread+0x5be>
            goto __exit;
 80022dc:	bf00      	nop
        }

__exit:
        if (sock >= 0) closesocket(sock);
 80022de:	4b13      	ldr	r3, [pc, #76]	@ (800232c <udpecho_thread+0x60c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	db04      	blt.n	80022f0 <udpecho_thread+0x5d0>
 80022e6:	4b11      	ldr	r3, [pc, #68]	@ (800232c <udpecho_thread+0x60c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f015 fb70 	bl	80179d0 <lwip_close>
        if (recv_data) free(recv_data);
 80022f0:	4b08      	ldr	r3, [pc, #32]	@ (8002314 <udpecho_thread+0x5f4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f43f ad17 	beq.w	8001d28 <udpecho_thread+0x8>
 80022fa:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <udpecho_thread+0x5f4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f021 ff3c 	bl	802417c <free>
        recv_data = (char *)pvPortMalloc(RECV_DATA);
 8002304:	e510      	b.n	8001d28 <udpecho_thread+0x8>
 8002306:	bf00      	nop
 8002308:	24000184 	.word	0x24000184
 800230c:	240001d0 	.word	0x240001d0
 8002310:	240004c0 	.word	0x240004c0
 8002314:	240004c4 	.word	0x240004c4
 8002318:	240004b4 	.word	0x240004b4
 800231c:	24000154 	.word	0x24000154
 8002320:	24000548 	.word	0x24000548
 8002324:	240004b9 	.word	0x240004b9
 8002328:	240004ba 	.word	0x240004ba
 800232c:	240001d4 	.word	0x240001d4

08002330 <WriteEthTask>:
}

// char data[256];

static void WriteEthTask(void *thread_param)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af02      	add	r7, sp, #8
 8002336:	6078      	str	r0, [r7, #4]
    //         senddata[i] = i;
    //  }
     while(1)
     {
        //  senddata = (char *)pvPortMalloc(128);
        sockw = socket(AF_INET, SOCK_DGRAM, 0);
 8002338:	2200      	movs	r2, #0
 800233a:	2102      	movs	r1, #2
 800233c:	2002      	movs	r0, #2
 800233e:	f015 ffc3 	bl	80182c8 <lwip_socket>
 8002342:	4603      	mov	r3, r0
 8002344:	4a9c      	ldr	r2, [pc, #624]	@ (80025b8 <WriteEthTask+0x288>)
 8002346:	6013      	str	r3, [r2, #0]
        // {
        //     // uart_printf("No memory\n");
        //     goto __exit;
        // }
        
        addrlen = sizeof(struct sockaddr);
 8002348:	4b9c      	ldr	r3, [pc, #624]	@ (80025bc <WriteEthTask+0x28c>)
 800234a:	2210      	movs	r2, #16
 800234c:	601a      	str	r2, [r3, #0]
        sendaddr.sin_family = AF_INET;
 800234e:	4b9c      	ldr	r3, [pc, #624]	@ (80025c0 <WriteEthTask+0x290>)
 8002350:	2202      	movs	r2, #2
 8002352:	705a      	strb	r2, [r3, #1]
        sendaddr.sin_addr.s_addr = inet_addr(IP_ADDR);
 8002354:	489b      	ldr	r0, [pc, #620]	@ (80025c4 <WriteEthTask+0x294>)
 8002356:	f020 fcd4 	bl	8022d02 <ipaddr_addr>
 800235a:	4603      	mov	r3, r0
 800235c:	4a98      	ldr	r2, [pc, #608]	@ (80025c0 <WriteEthTask+0x290>)
 800235e:	6053      	str	r3, [r2, #4]
        sendaddr.sin_port = htons(10802);
 8002360:	f642 2032 	movw	r0, #10802	@ 0x2a32
 8002364:	f016 fb54 	bl	8018a10 <lwip_htons>
 8002368:	4603      	mov	r3, r0
 800236a:	461a      	mov	r2, r3
 800236c:	4b94      	ldr	r3, [pc, #592]	@ (80025c0 <WriteEthTask+0x290>)
 800236e:	805a      	strh	r2, [r3, #2]
//        if (bind(sock, (struct sockaddr *)&sendaddr, sizeof(struct sockaddr)) == -1)
//        {
//            // uart_printf("Unable to bind\n");
//            goto __exit;
//        }
        memset(&(sendaddr.sin_zero), 0, sizeof(sendaddr.sin_zero));
 8002370:	2208      	movs	r2, #8
 8002372:	2100      	movs	r1, #0
 8002374:	4894      	ldr	r0, [pc, #592]	@ (80025c8 <WriteEthTask+0x298>)
 8002376:	f023 f861 	bl	802543c <memset>
        while(1)
        {
            senddata[0] = 0x90;
 800237a:	4b94      	ldr	r3, [pc, #592]	@ (80025cc <WriteEthTask+0x29c>)
 800237c:	2290      	movs	r2, #144	@ 0x90
 800237e:	701a      	strb	r2, [r3, #0]
            senddata[1] = 0x60;
 8002380:	4b92      	ldr	r3, [pc, #584]	@ (80025cc <WriteEthTask+0x29c>)
 8002382:	2260      	movs	r2, #96	@ 0x60
 8002384:	705a      	strb	r2, [r3, #1]
            pcSend.XoffsetCu.f = ImgRecvDataTypedef_CU.Offset_X;
 8002386:	4b92      	ldr	r3, [pc, #584]	@ (80025d0 <WriteEthTask+0x2a0>)
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	4a92      	ldr	r2, [pc, #584]	@ (80025d4 <WriteEthTask+0x2a4>)
 800238c:	6013      	str	r3, [r2, #0]
            pcSend.YoffsetCu.f = ImgRecvDataTypedef_CU.Offset_Y;
 800238e:	4b90      	ldr	r3, [pc, #576]	@ (80025d0 <WriteEthTask+0x2a0>)
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	4a90      	ldr	r2, [pc, #576]	@ (80025d4 <WriteEthTask+0x2a4>)
 8002394:	6053      	str	r3, [r2, #4]
            pcSend.XoffsetJing.f = ImgRecvDataTypedef_JING.Offset_X;
 8002396:	4b90      	ldr	r3, [pc, #576]	@ (80025d8 <WriteEthTask+0x2a8>)
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	4a8e      	ldr	r2, [pc, #568]	@ (80025d4 <WriteEthTask+0x2a4>)
 800239c:	6093      	str	r3, [r2, #8]
            pcSend.YoffsetJing.f = ImgRecvDataTypedef_JING.Offset_Y;
 800239e:	4b8e      	ldr	r3, [pc, #568]	@ (80025d8 <WriteEthTask+0x2a8>)
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	4a8c      	ldr	r2, [pc, #560]	@ (80025d4 <WriteEthTask+0x2a4>)
 80023a4:	60d3      	str	r3, [r2, #12]
            pcSend.rangefinder.f = RangeFinderRevData.Distance;
 80023a6:	4b8d      	ldr	r3, [pc, #564]	@ (80025dc <WriteEthTask+0x2ac>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	4a8a      	ldr	r2, [pc, #552]	@ (80025d4 <WriteEthTask+0x2a4>)
 80023ac:	6113      	str	r3, [r2, #16]
            // pcSend.ServoYaw.f = ServoRevTypedef.ServoYawPos.f;
            pcSend.ServoYaw.f += 0.01;
 80023ae:	4b89      	ldr	r3, [pc, #548]	@ (80025d4 <WriteEthTask+0x2a4>)
 80023b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80023b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023b8:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 80025b0 <WriteEthTask+0x280>
 80023bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80023c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023c4:	4b83      	ldr	r3, [pc, #524]	@ (80025d4 <WriteEthTask+0x2a4>)
 80023c6:	edc3 7a05 	vstr	s15, [r3, #20]
            pcSend.ServoPitch.f = ServoRevTypedef.ServoPitchPos.f;
 80023ca:	4b85      	ldr	r3, [pc, #532]	@ (80025e0 <WriteEthTask+0x2b0>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4a81      	ldr	r2, [pc, #516]	@ (80025d4 <WriteEthTask+0x2a4>)
 80023d0:	6193      	str	r3, [r2, #24]
            // pcSend.state = state;
            // pcSend.cuEnable = 0;
            // pcSend.jingEnable = 0;
            for(int i = 0;i < 4;i++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	e040      	b.n	800245a <WriteEthTask+0x12a>
            {
                senddata[2+i] = pcSend.XoffsetCu.u8t[i];
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3302      	adds	r3, #2
 80023dc:	497d      	ldr	r1, [pc, #500]	@ (80025d4 <WriteEthTask+0x2a4>)
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	440a      	add	r2, r1
 80023e2:	7811      	ldrb	r1, [r2, #0]
 80023e4:	4a79      	ldr	r2, [pc, #484]	@ (80025cc <WriteEthTask+0x29c>)
 80023e6:	54d1      	strb	r1, [r2, r3]
                senddata[6+i] = pcSend.YoffsetCu.u8t[i];
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3306      	adds	r3, #6
 80023ec:	4979      	ldr	r1, [pc, #484]	@ (80025d4 <WriteEthTask+0x2a4>)
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	440a      	add	r2, r1
 80023f2:	3204      	adds	r2, #4
 80023f4:	7811      	ldrb	r1, [r2, #0]
 80023f6:	4a75      	ldr	r2, [pc, #468]	@ (80025cc <WriteEthTask+0x29c>)
 80023f8:	54d1      	strb	r1, [r2, r3]
                senddata[10+i] = pcSend.XoffsetJing.u8t[i];
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	330a      	adds	r3, #10
 80023fe:	4975      	ldr	r1, [pc, #468]	@ (80025d4 <WriteEthTask+0x2a4>)
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	440a      	add	r2, r1
 8002404:	3208      	adds	r2, #8
 8002406:	7811      	ldrb	r1, [r2, #0]
 8002408:	4a70      	ldr	r2, [pc, #448]	@ (80025cc <WriteEthTask+0x29c>)
 800240a:	54d1      	strb	r1, [r2, r3]
                senddata[14+i] = pcSend.YoffsetJing.u8t[i];
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	330e      	adds	r3, #14
 8002410:	4970      	ldr	r1, [pc, #448]	@ (80025d4 <WriteEthTask+0x2a4>)
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	440a      	add	r2, r1
 8002416:	320c      	adds	r2, #12
 8002418:	7811      	ldrb	r1, [r2, #0]
 800241a:	4a6c      	ldr	r2, [pc, #432]	@ (80025cc <WriteEthTask+0x29c>)
 800241c:	54d1      	strb	r1, [r2, r3]
                senddata[18+i] = pcSend.rangefinder.u8t[i];
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	3312      	adds	r3, #18
 8002422:	496c      	ldr	r1, [pc, #432]	@ (80025d4 <WriteEthTask+0x2a4>)
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	440a      	add	r2, r1
 8002428:	3210      	adds	r2, #16
 800242a:	7811      	ldrb	r1, [r2, #0]
 800242c:	4a67      	ldr	r2, [pc, #412]	@ (80025cc <WriteEthTask+0x29c>)
 800242e:	54d1      	strb	r1, [r2, r3]
                senddata[22+i] = pcSend.ServoYaw.u8t[i];
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	3316      	adds	r3, #22
 8002434:	4967      	ldr	r1, [pc, #412]	@ (80025d4 <WriteEthTask+0x2a4>)
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	440a      	add	r2, r1
 800243a:	3214      	adds	r2, #20
 800243c:	7811      	ldrb	r1, [r2, #0]
 800243e:	4a63      	ldr	r2, [pc, #396]	@ (80025cc <WriteEthTask+0x29c>)
 8002440:	54d1      	strb	r1, [r2, r3]
                senddata[26+i] = pcSend.ServoPitch.u8t[i];
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	331a      	adds	r3, #26
 8002446:	4963      	ldr	r1, [pc, #396]	@ (80025d4 <WriteEthTask+0x2a4>)
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	440a      	add	r2, r1
 800244c:	3218      	adds	r2, #24
 800244e:	7811      	ldrb	r1, [r2, #0]
 8002450:	4a5e      	ldr	r2, [pc, #376]	@ (80025cc <WriteEthTask+0x29c>)
 8002452:	54d1      	strb	r1, [r2, r3]
            for(int i = 0;i < 4;i++)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	3301      	adds	r3, #1
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2b03      	cmp	r3, #3
 800245e:	ddbb      	ble.n	80023d8 <WriteEthTask+0xa8>
            }
            // senddata[30] = pcSend.state;
            switch(state){
 8002460:	4b60      	ldr	r3, [pc, #384]	@ (80025e4 <WriteEthTask+0x2b4>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	3b01      	subs	r3, #1
 8002466:	2b05      	cmp	r3, #5
 8002468:	d822      	bhi.n	80024b0 <WriteEthTask+0x180>
 800246a:	a201      	add	r2, pc, #4	@ (adr r2, 8002470 <WriteEthTask+0x140>)
 800246c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002470:	080024a9 	.word	0x080024a9
 8002474:	08002499 	.word	0x08002499
 8002478:	080024a1 	.word	0x080024a1
 800247c:	08002489 	.word	0x08002489
 8002480:	080024b1 	.word	0x080024b1
 8002484:	08002491 	.word	0x08002491
                case STATE_GUIDE:
                    senddata[30] = bit(3);
 8002488:	4b50      	ldr	r3, [pc, #320]	@ (80025cc <WriteEthTask+0x29c>)
 800248a:	2208      	movs	r2, #8
 800248c:	779a      	strb	r2, [r3, #30]
                    break;
 800248e:	e00f      	b.n	80024b0 <WriteEthTask+0x180>
                case STATE_CATCH:
                    senddata[30] = bit(4);
 8002490:	4b4e      	ldr	r3, [pc, #312]	@ (80025cc <WriteEthTask+0x29c>)
 8002492:	2210      	movs	r2, #16
 8002494:	779a      	strb	r2, [r3, #30]
                    break;
 8002496:	e00b      	b.n	80024b0 <WriteEthTask+0x180>
                case STATE_STANDBY:
                    senddata[30] = bit(1);
 8002498:	4b4c      	ldr	r3, [pc, #304]	@ (80025cc <WriteEthTask+0x29c>)
 800249a:	2202      	movs	r2, #2
 800249c:	779a      	strb	r2, [r3, #30]
                    break;
 800249e:	e007      	b.n	80024b0 <WriteEthTask+0x180>
                case STATE_STANDBYDISABLE:
                    senddata[30] = bit(2);
 80024a0:	4b4a      	ldr	r3, [pc, #296]	@ (80025cc <WriteEthTask+0x29c>)
 80024a2:	2204      	movs	r2, #4
 80024a4:	779a      	strb	r2, [r3, #30]
                    break;
 80024a6:	e003      	b.n	80024b0 <WriteEthTask+0x180>
                case STATE_ZERO:
                    senddata[30] = bit(0);
 80024a8:	4b48      	ldr	r3, [pc, #288]	@ (80025cc <WriteEthTask+0x29c>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	779a      	strb	r2, [r3, #30]
                    break;
 80024ae:	bf00      	nop
            }
            senddata[31] = pcSend.cuEnable; //TODO: 还未赋值粗跟踪状态
 80024b0:	4b48      	ldr	r3, [pc, #288]	@ (80025d4 <WriteEthTask+0x2a4>)
 80024b2:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80024b6:	4b45      	ldr	r3, [pc, #276]	@ (80025cc <WriteEthTask+0x29c>)
 80024b8:	77da      	strb	r2, [r3, #31]
            senddata[32] = pcSend.jingEnable; //TODO: 还未赋值粗跟踪状态
 80024ba:	4b46      	ldr	r3, [pc, #280]	@ (80025d4 <WriteEthTask+0x2a4>)
 80024bc:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 80024c0:	4b42      	ldr	r3, [pc, #264]	@ (80025cc <WriteEthTask+0x29c>)
 80024c2:	f883 2020 	strb.w	r2, [r3, #32]
            
            pcSend.FSM_Yaw.f = ServoRevTypedef.FSMXPos.f;
 80024c6:	4b46      	ldr	r3, [pc, #280]	@ (80025e0 <WriteEthTask+0x2b0>)
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	4a42      	ldr	r2, [pc, #264]	@ (80025d4 <WriteEthTask+0x2a4>)
 80024cc:	6213      	str	r3, [r2, #32]
            pcSend.FSM_Pitch.f = ServoRevTypedef.FSMYPos.f;
 80024ce:	4b44      	ldr	r3, [pc, #272]	@ (80025e0 <WriteEthTask+0x2b0>)
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	4a40      	ldr	r2, [pc, #256]	@ (80025d4 <WriteEthTask+0x2a4>)
 80024d4:	61d3      	str	r3, [r2, #28]

            for(int i = 0;i < 4;i++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	e014      	b.n	8002506 <WriteEthTask+0x1d6>
            {
                senddata[33+i] = pcSend.FSM_Yaw.u8t[i];
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	3321      	adds	r3, #33	@ 0x21
 80024e0:	493c      	ldr	r1, [pc, #240]	@ (80025d4 <WriteEthTask+0x2a4>)
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	440a      	add	r2, r1
 80024e6:	3220      	adds	r2, #32
 80024e8:	7811      	ldrb	r1, [r2, #0]
 80024ea:	4a38      	ldr	r2, [pc, #224]	@ (80025cc <WriteEthTask+0x29c>)
 80024ec:	54d1      	strb	r1, [r2, r3]
                senddata[37+i] = pcSend.FSM_Pitch.u8t[i];
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	3325      	adds	r3, #37	@ 0x25
 80024f2:	4938      	ldr	r1, [pc, #224]	@ (80025d4 <WriteEthTask+0x2a4>)
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	440a      	add	r2, r1
 80024f8:	321c      	adds	r2, #28
 80024fa:	7811      	ldrb	r1, [r2, #0]
 80024fc:	4a33      	ldr	r2, [pc, #204]	@ (80025cc <WriteEthTask+0x29c>)
 80024fe:	54d1      	strb	r1, [r2, r3]
            for(int i = 0;i < 4;i++)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	3301      	adds	r3, #1
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b03      	cmp	r3, #3
 800250a:	dde7      	ble.n	80024dc <WriteEthTask+0x1ac>
            }
            pcSend.servoTrackingState = ServoRevTypedef.cTurnTableTrackState;
 800250c:	4b34      	ldr	r3, [pc, #208]	@ (80025e0 <WriteEthTask+0x2b0>)
 800250e:	7b1a      	ldrb	r2, [r3, #12]
 8002510:	4b30      	ldr	r3, [pc, #192]	@ (80025d4 <WriteEthTask+0x2a4>)
 8002512:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
            pcSend.FSMTrackingState = ServoRevTypedef.cFSMTrackState;
 8002516:	4b32      	ldr	r3, [pc, #200]	@ (80025e0 <WriteEthTask+0x2b0>)
 8002518:	7b5a      	ldrb	r2, [r3, #13]
 800251a:	4b2e      	ldr	r3, [pc, #184]	@ (80025d4 <WriteEthTask+0x2a4>)
 800251c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            // senddata[41] = pcSend.servoTrackingState;
            // senddata[42] = pcSend.FSMTrackingState;
            senddata[41] = pcSend.servoTrackingState;
 8002520:	4b2c      	ldr	r3, [pc, #176]	@ (80025d4 <WriteEthTask+0x2a4>)
 8002522:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8002526:	4b29      	ldr	r3, [pc, #164]	@ (80025cc <WriteEthTask+0x29c>)
 8002528:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            senddata[42] = pcSend.FSMTrackingState;
 800252c:	4b29      	ldr	r3, [pc, #164]	@ (80025d4 <WriteEthTask+0x2a4>)
 800252e:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8002532:	4b26      	ldr	r3, [pc, #152]	@ (80025cc <WriteEthTask+0x29c>)
 8002534:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            for(int i = 0;i < 2;i++)
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e014      	b.n	8002568 <WriteEthTask+0x238>
            {
                senddata[43+i] = pcSend.cuErrorCode[i];
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	332b      	adds	r3, #43	@ 0x2b
 8002542:	4924      	ldr	r1, [pc, #144]	@ (80025d4 <WriteEthTask+0x2a4>)
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	440a      	add	r2, r1
 8002548:	3229      	adds	r2, #41	@ 0x29
 800254a:	7811      	ldrb	r1, [r2, #0]
 800254c:	4a1f      	ldr	r2, [pc, #124]	@ (80025cc <WriteEthTask+0x29c>)
 800254e:	54d1      	strb	r1, [r2, r3]
                senddata[45+i] = pcSend.jingErrorCode[i];
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	332d      	adds	r3, #45	@ 0x2d
 8002554:	491f      	ldr	r1, [pc, #124]	@ (80025d4 <WriteEthTask+0x2a4>)
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	440a      	add	r2, r1
 800255a:	322b      	adds	r2, #43	@ 0x2b
 800255c:	7811      	ldrb	r1, [r2, #0]
 800255e:	4a1b      	ldr	r2, [pc, #108]	@ (80025cc <WriteEthTask+0x29c>)
 8002560:	54d1      	strb	r1, [r2, r3]
            for(int i = 0;i < 2;i++)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	3301      	adds	r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b01      	cmp	r3, #1
 800256c:	dde7      	ble.n	800253e <WriteEthTask+0x20e>
            }
            senddata[47] = pcSend.cuOffsetState; //TODO: 还未赋值
 800256e:	4b19      	ldr	r3, [pc, #100]	@ (80025d4 <WriteEthTask+0x2a4>)
 8002570:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8002574:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <WriteEthTask+0x29c>)
 8002576:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
            senddata[48] = pcSend.jingOffsetState; //TODO: 还未赋值
 800257a:	4b16      	ldr	r3, [pc, #88]	@ (80025d4 <WriteEthTask+0x2a4>)
 800257c:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8002580:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <WriteEthTask+0x29c>)
 8002582:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            // senddata[49] = TrackingFaultCodeCu.errorCode[0];
            // senddata[50] = TrackingFaultCodeCu.errorCode[1];
            // senddata[51] = TrackingFaultCodeJing.errorCode[0];
            // senddata[52] = TrackingFaultCodeJing.errorCode[1];

            senddata[53] = 0xee;
 8002586:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <WriteEthTask+0x29c>)
 8002588:	22ee      	movs	r2, #238	@ 0xee
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            sendto(sockw,senddata,54,0,(struct sockaddr*)&sendaddr,addrlen);
 800258e:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <WriteEthTask+0x288>)
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	4b0a      	ldr	r3, [pc, #40]	@ (80025bc <WriteEthTask+0x28c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <WriteEthTask+0x290>)
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2300      	movs	r3, #0
 800259e:	2236      	movs	r2, #54	@ 0x36
 80025a0:	490a      	ldr	r1, [pc, #40]	@ (80025cc <WriteEthTask+0x29c>)
 80025a2:	f015 fddf 	bl	8018164 <lwip_sendto>
            // }
            // if(sendto(sockw,data,128,0,(struct sockaddr*)&sendaddr,addrlen) > 0)
            // {
//                HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
            // }
            osDelay(50);
 80025a6:	2032      	movs	r0, #50	@ 0x32
 80025a8:	f00f ffbe 	bl	8012528 <osDelay>
            senddata[0] = 0x90;
 80025ac:	e6e5      	b.n	800237a <WriteEthTask+0x4a>
 80025ae:	bf00      	nop
 80025b0:	47ae147b 	.word	0x47ae147b
 80025b4:	3f847ae1 	.word	0x3f847ae1
 80025b8:	240001d8 	.word	0x240001d8
 80025bc:	240004fc 	.word	0x240004fc
 80025c0:	240004e8 	.word	0x240004e8
 80025c4:	080290d4 	.word	0x080290d4
 80025c8:	240004f0 	.word	0x240004f0
 80025cc:	30004a84 	.word	0x30004a84
 80025d0:	24000400 	.word	0x24000400
 80025d4:	24000510 	.word	0x24000510
 80025d8:	2400041c 	.word	0x2400041c
 80025dc:	24000438 	.word	0x24000438
 80025e0:	24000450 	.word	0x24000450
 80025e4:	240004b0 	.word	0x240004b0

080025e8 <udpecho_init>:
}


/*---------------------------------------------------------------------*/
void udpecho_init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af02      	add	r7, sp, #8
    sys_thread_new("udpecho_thread", udpecho_thread, NULL, 2048, osPriorityAboveNormal);
 80025ee:	2301      	movs	r3, #1
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80025f6:	2200      	movs	r2, #0
 80025f8:	4907      	ldr	r1, [pc, #28]	@ (8002618 <udpecho_init+0x30>)
 80025fa:	4808      	ldr	r0, [pc, #32]	@ (800261c <udpecho_init+0x34>)
 80025fc:	f021 fd72 	bl	80240e4 <sys_thread_new>
    sys_thread_new("writeEthTask", WriteEthTask, NULL, 1024, osPriorityAboveNormal);
 8002600:	2301      	movs	r3, #1
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002608:	2200      	movs	r2, #0
 800260a:	4905      	ldr	r1, [pc, #20]	@ (8002620 <udpecho_init+0x38>)
 800260c:	4805      	ldr	r0, [pc, #20]	@ (8002624 <udpecho_init+0x3c>)
 800260e:	f021 fd69 	bl	80240e4 <sys_thread_new>
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	08001d21 	.word	0x08001d21
 800261c:	080290e4 	.word	0x080290e4
 8002620:	08002331 	.word	0x08002331
 8002624:	080290f4 	.word	0x080290f4

08002628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800262e:	4b41      	ldr	r3, [pc, #260]	@ (8002734 <MX_DMA_Init+0x10c>)
 8002630:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002634:	4a3f      	ldr	r2, [pc, #252]	@ (8002734 <MX_DMA_Init+0x10c>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800263e:	4b3d      	ldr	r3, [pc, #244]	@ (8002734 <MX_DMA_Init+0x10c>)
 8002640:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800264c:	4b39      	ldr	r3, [pc, #228]	@ (8002734 <MX_DMA_Init+0x10c>)
 800264e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002652:	4a38      	ldr	r2, [pc, #224]	@ (8002734 <MX_DMA_Init+0x10c>)
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800265c:	4b35      	ldr	r3, [pc, #212]	@ (8002734 <MX_DMA_Init+0x10c>)
 800265e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2105      	movs	r1, #5
 800266e:	200b      	movs	r0, #11
 8002670:	f004 fa82 	bl	8006b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002674:	200b      	movs	r0, #11
 8002676:	f004 fa99 	bl	8006bac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2105      	movs	r1, #5
 800267e:	200c      	movs	r0, #12
 8002680:	f004 fa7a 	bl	8006b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002684:	200c      	movs	r0, #12
 8002686:	f004 fa91 	bl	8006bac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2105      	movs	r1, #5
 800268e:	200d      	movs	r0, #13
 8002690:	f004 fa72 	bl	8006b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002694:	200d      	movs	r0, #13
 8002696:	f004 fa89 	bl	8006bac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2105      	movs	r1, #5
 800269e:	200e      	movs	r0, #14
 80026a0:	f004 fa6a 	bl	8006b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80026a4:	200e      	movs	r0, #14
 80026a6:	f004 fa81 	bl	8006bac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	2105      	movs	r1, #5
 80026ae:	200f      	movs	r0, #15
 80026b0:	f004 fa62 	bl	8006b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80026b4:	200f      	movs	r0, #15
 80026b6:	f004 fa79 	bl	8006bac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2105      	movs	r1, #5
 80026be:	2010      	movs	r0, #16
 80026c0:	f004 fa5a 	bl	8006b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80026c4:	2010      	movs	r0, #16
 80026c6:	f004 fa71 	bl	8006bac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2105      	movs	r1, #5
 80026ce:	2011      	movs	r0, #17
 80026d0:	f004 fa52 	bl	8006b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80026d4:	2011      	movs	r0, #17
 80026d6:	f004 fa69 	bl	8006bac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2105      	movs	r1, #5
 80026de:	202f      	movs	r0, #47	@ 0x2f
 80026e0:	f004 fa4a 	bl	8006b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80026e4:	202f      	movs	r0, #47	@ 0x2f
 80026e6:	f004 fa61 	bl	8006bac <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2105      	movs	r1, #5
 80026ee:	2038      	movs	r0, #56	@ 0x38
 80026f0:	f004 fa42 	bl	8006b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80026f4:	2038      	movs	r0, #56	@ 0x38
 80026f6:	f004 fa59 	bl	8006bac <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2105      	movs	r1, #5
 80026fe:	2039      	movs	r0, #57	@ 0x39
 8002700:	f004 fa3a 	bl	8006b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002704:	2039      	movs	r0, #57	@ 0x39
 8002706:	f004 fa51 	bl	8006bac <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800270a:	2200      	movs	r2, #0
 800270c:	2105      	movs	r1, #5
 800270e:	203a      	movs	r0, #58	@ 0x3a
 8002710:	f004 fa32 	bl	8006b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002714:	203a      	movs	r0, #58	@ 0x3a
 8002716:	f004 fa49 	bl	8006bac <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800271a:	2200      	movs	r2, #0
 800271c:	2105      	movs	r1, #5
 800271e:	203b      	movs	r0, #59	@ 0x3b
 8002720:	f004 fa2a 	bl	8006b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002724:	203b      	movs	r0, #59	@ 0x3b
 8002726:	f004 fa41 	bl	8006bac <HAL_NVIC_EnableIRQ>

}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	58024400 	.word	0x58024400

08002738 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4a07      	ldr	r2, [pc, #28]	@ (8002764 <vApplicationGetIdleTaskMemory+0x2c>)
 8002748:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	4a06      	ldr	r2, [pc, #24]	@ (8002768 <vApplicationGetIdleTaskMemory+0x30>)
 800274e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2280      	movs	r2, #128	@ 0x80
 8002754:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	24000598 	.word	0x24000598
 8002768:	240005ec 	.word	0x240005ec

0800276c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800276c:	b5b0      	push	{r4, r5, r7, lr}
 800276e:	b0bc      	sub	sp, #240	@ 0xf0
 8002770:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinaryServo */
  osSemaphoreDef(BinaryServo);
 8002772:	2300      	movs	r3, #0
 8002774:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002778:	2300      	movs	r3, #0
 800277a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  BinaryServoHandle = osSemaphoreCreate(osSemaphore(BinaryServo), 1);
 800277e:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002782:	2101      	movs	r1, #1
 8002784:	4618      	mov	r0, r3
 8002786:	f00f ff7f 	bl	8012688 <osSemaphoreCreate>
 800278a:	4603      	mov	r3, r0
 800278c:	4a62      	ldr	r2, [pc, #392]	@ (8002918 <MX_FREERTOS_Init+0x1ac>)
 800278e:	6013      	str	r3, [r2, #0]

  /* definition and creation of BinaryCu */
  osSemaphoreDef(BinaryCu);
 8002790:	2300      	movs	r3, #0
 8002792:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002796:	2300      	movs	r3, #0
 8002798:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  BinaryCuHandle = osSemaphoreCreate(osSemaphore(BinaryCu), 1);
 800279c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80027a0:	2101      	movs	r1, #1
 80027a2:	4618      	mov	r0, r3
 80027a4:	f00f ff70 	bl	8012688 <osSemaphoreCreate>
 80027a8:	4603      	mov	r3, r0
 80027aa:	4a5c      	ldr	r2, [pc, #368]	@ (800291c <MX_FREERTOS_Init+0x1b0>)
 80027ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of BinaryJing */
  osSemaphoreDef(BinaryJing);
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  BinaryJingHandle = osSemaphoreCreate(osSemaphore(BinaryJing), 1);
 80027ba:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80027be:	2101      	movs	r1, #1
 80027c0:	4618      	mov	r0, r3
 80027c2:	f00f ff61 	bl	8012688 <osSemaphoreCreate>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4a55      	ldr	r2, [pc, #340]	@ (8002920 <MX_FREERTOS_Init+0x1b4>)
 80027ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of BinaryFocus */
  osSemaphoreDef(BinaryFocus);
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  BinaryFocusHandle = osSemaphoreCreate(osSemaphore(BinaryFocus), 1);
 80027d8:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80027dc:	2101      	movs	r1, #1
 80027de:	4618      	mov	r0, r3
 80027e0:	f00f ff52 	bl	8012688 <osSemaphoreCreate>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4a4f      	ldr	r2, [pc, #316]	@ (8002924 <MX_FREERTOS_Init+0x1b8>)
 80027e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of BinaryRangefinder */
  osSemaphoreDef(BinaryRangefinder);
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  BinaryRangefinderHandle = osSemaphoreCreate(osSemaphore(BinaryRangefinder), 1);
 80027f6:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80027fa:	2101      	movs	r1, #1
 80027fc:	4618      	mov	r0, r3
 80027fe:	f00f ff43 	bl	8012688 <osSemaphoreCreate>
 8002802:	4603      	mov	r3, r0
 8002804:	4a48      	ldr	r2, [pc, #288]	@ (8002928 <MX_FREERTOS_Init+0x1bc>)
 8002806:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8002808:	4b48      	ldr	r3, [pc, #288]	@ (800292c <MX_FREERTOS_Init+0x1c0>)
 800280a:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 800280e:	461d      	mov	r5, r3
 8002810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002814:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002818:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800281c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f00f fe34 	bl	8012490 <osThreadCreate>
 8002828:	4603      	mov	r3, r0
 800282a:	4a41      	ldr	r2, [pc, #260]	@ (8002930 <MX_FREERTOS_Init+0x1c4>)
 800282c:	6013      	str	r3, [r2, #0]

  /* definition and creation of turn */
  osThreadDef(turn, TurnTask, osPriorityBelowNormal, 0, 256);
 800282e:	4b41      	ldr	r3, [pc, #260]	@ (8002934 <MX_FREERTOS_Init+0x1c8>)
 8002830:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8002834:	461d      	mov	r5, r3
 8002836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800283a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800283e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  turnHandle = osThreadCreate(osThread(turn), NULL);
 8002842:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f00f fe21 	bl	8012490 <osThreadCreate>
 800284e:	4603      	mov	r3, r0
 8002850:	4a39      	ldr	r2, [pc, #228]	@ (8002938 <MX_FREERTOS_Init+0x1cc>)
 8002852:	6013      	str	r3, [r2, #0]

  /* definition and creation of imgcu */
  osThreadDef(imgcu, ImgCuTask, osPriorityBelowNormal, 0, 256);
 8002854:	4b39      	ldr	r3, [pc, #228]	@ (800293c <MX_FREERTOS_Init+0x1d0>)
 8002856:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800285a:	461d      	mov	r5, r3
 800285c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800285e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002860:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002864:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imgcuHandle = osThreadCreate(osThread(imgcu), NULL);
 8002868:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f00f fe0e 	bl	8012490 <osThreadCreate>
 8002874:	4603      	mov	r3, r0
 8002876:	4a32      	ldr	r2, [pc, #200]	@ (8002940 <MX_FREERTOS_Init+0x1d4>)
 8002878:	6013      	str	r3, [r2, #0]

  /* definition and creation of imgjing */
  osThreadDef(imgjing, ImgJingTask, osPriorityBelowNormal, 0, 256);
 800287a:	4b32      	ldr	r3, [pc, #200]	@ (8002944 <MX_FREERTOS_Init+0x1d8>)
 800287c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8002880:	461d      	mov	r5, r3
 8002882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002886:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800288a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imgjingHandle = osThreadCreate(osThread(imgjing), NULL);
 800288e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f00f fdfb 	bl	8012490 <osThreadCreate>
 800289a:	4603      	mov	r3, r0
 800289c:	4a2a      	ldr	r2, [pc, #168]	@ (8002948 <MX_FREERTOS_Init+0x1dc>)
 800289e:	6013      	str	r3, [r2, #0]

  /* definition and creation of focus */
  osThreadDef(focus, FocusTask, osPriorityBelowNormal, 0, 256);
 80028a0:	4b2a      	ldr	r3, [pc, #168]	@ (800294c <MX_FREERTOS_Init+0x1e0>)
 80028a2:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80028a6:	461d      	mov	r5, r3
 80028a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  focusHandle = osThreadCreate(osThread(focus), NULL);
 80028b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80028b8:	2100      	movs	r1, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f00f fde8 	bl	8012490 <osThreadCreate>
 80028c0:	4603      	mov	r3, r0
 80028c2:	4a23      	ldr	r2, [pc, #140]	@ (8002950 <MX_FREERTOS_Init+0x1e4>)
 80028c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of rangefinder */
  osThreadDef(rangefinder, RangefinderTask, osPriorityBelowNormal, 0, 256);
 80028c6:	4b23      	ldr	r3, [pc, #140]	@ (8002954 <MX_FREERTOS_Init+0x1e8>)
 80028c8:	f107 0420 	add.w	r4, r7, #32
 80028cc:	461d      	mov	r5, r3
 80028ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rangefinderHandle = osThreadCreate(osThread(rangefinder), NULL);
 80028da:	f107 0320 	add.w	r3, r7, #32
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f00f fdd5 	bl	8012490 <osThreadCreate>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002958 <MX_FREERTOS_Init+0x1ec>)
 80028ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	osThreadDef(mytask, mytask, osPriorityNormal, 0, 256);
 80028ec:	4b1b      	ldr	r3, [pc, #108]	@ (800295c <MX_FREERTOS_Init+0x1f0>)
 80028ee:	1d3c      	adds	r4, r7, #4
 80028f0:	461d      	mov	r5, r3
 80028f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	mytaskHandle = osThreadCreate(osThread(mytask), NULL);
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f00f fdc4 	bl	8012490 <osThreadCreate>
 8002908:	4603      	mov	r3, r0
 800290a:	4a15      	ldr	r2, [pc, #84]	@ (8002960 <MX_FREERTOS_Init+0x1f4>)
 800290c:	6013      	str	r3, [r2, #0]



  /* USER CODE END RTOS_THREADS */

}
 800290e:	bf00      	nop
 8002910:	37f0      	adds	r7, #240	@ 0xf0
 8002912:	46bd      	mov	sp, r7
 8002914:	bdb0      	pop	{r4, r5, r7, pc}
 8002916:	bf00      	nop
 8002918:	24000580 	.word	0x24000580
 800291c:	24000584 	.word	0x24000584
 8002920:	24000588 	.word	0x24000588
 8002924:	2400058c 	.word	0x2400058c
 8002928:	24000590 	.word	0x24000590
 800292c:	080291d8 	.word	0x080291d8
 8002930:	24000568 	.word	0x24000568
 8002934:	080291fc 	.word	0x080291fc
 8002938:	2400056c 	.word	0x2400056c
 800293c:	08029220 	.word	0x08029220
 8002940:	24000570 	.word	0x24000570
 8002944:	08029244 	.word	0x08029244
 8002948:	24000574 	.word	0x24000574
 800294c:	08029268 	.word	0x08029268
 8002950:	24000578 	.word	0x24000578
 8002954:	08029290 	.word	0x08029290
 8002958:	2400057c 	.word	0x2400057c
 800295c:	080292b4 	.word	0x080292b4
 8002960:	24000594 	.word	0x24000594

08002964 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  memset(ImgSendTypedef_CU.Data,0xff,64);
 800296c:	2240      	movs	r2, #64	@ 0x40
 800296e:	21ff      	movs	r1, #255	@ 0xff
 8002970:	4867      	ldr	r0, [pc, #412]	@ (8002b10 <StartDefaultTask+0x1ac>)
 8002972:	f022 fd63 	bl	802543c <memset>
  memset(ImgSendTypedef_JING.Data,0xff,64);
 8002976:	2240      	movs	r2, #64	@ 0x40
 8002978:	21ff      	movs	r1, #255	@ 0xff
 800297a:	4866      	ldr	r0, [pc, #408]	@ (8002b14 <StartDefaultTask+0x1b0>)
 800297c:	f022 fd5e 	bl	802543c <memset>
  MX_LWIP_Init();
 8002980:	f00e fedc 	bl	801173c <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
//  client_init();
  udpecho_init();
 8002984:	f7ff fe30 	bl	80025e8 <udpecho_init>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxbuff_servo, 128);
 8002988:	2280      	movs	r2, #128	@ 0x80
 800298a:	4963      	ldr	r1, [pc, #396]	@ (8002b18 <StartDefaultTask+0x1b4>)
 800298c:	4863      	ldr	r0, [pc, #396]	@ (8002b1c <StartDefaultTask+0x1b8>)
 800298e:	f00e fe32 	bl	80115f6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_uart5_rx, DMA_IT_HT);
 8002992:	4b63      	ldr	r3, [pc, #396]	@ (8002b20 <StartDefaultTask+0x1bc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a63      	ldr	r2, [pc, #396]	@ (8002b24 <StartDefaultTask+0x1c0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d04a      	beq.n	8002a32 <StartDefaultTask+0xce>
 800299c:	4b60      	ldr	r3, [pc, #384]	@ (8002b20 <StartDefaultTask+0x1bc>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a61      	ldr	r2, [pc, #388]	@ (8002b28 <StartDefaultTask+0x1c4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d045      	beq.n	8002a32 <StartDefaultTask+0xce>
 80029a6:	4b5e      	ldr	r3, [pc, #376]	@ (8002b20 <StartDefaultTask+0x1bc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a60      	ldr	r2, [pc, #384]	@ (8002b2c <StartDefaultTask+0x1c8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d040      	beq.n	8002a32 <StartDefaultTask+0xce>
 80029b0:	4b5b      	ldr	r3, [pc, #364]	@ (8002b20 <StartDefaultTask+0x1bc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a5e      	ldr	r2, [pc, #376]	@ (8002b30 <StartDefaultTask+0x1cc>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d03b      	beq.n	8002a32 <StartDefaultTask+0xce>
 80029ba:	4b59      	ldr	r3, [pc, #356]	@ (8002b20 <StartDefaultTask+0x1bc>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a5d      	ldr	r2, [pc, #372]	@ (8002b34 <StartDefaultTask+0x1d0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d036      	beq.n	8002a32 <StartDefaultTask+0xce>
 80029c4:	4b56      	ldr	r3, [pc, #344]	@ (8002b20 <StartDefaultTask+0x1bc>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a5b      	ldr	r2, [pc, #364]	@ (8002b38 <StartDefaultTask+0x1d4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d031      	beq.n	8002a32 <StartDefaultTask+0xce>
 80029ce:	4b54      	ldr	r3, [pc, #336]	@ (8002b20 <StartDefaultTask+0x1bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a5a      	ldr	r2, [pc, #360]	@ (8002b3c <StartDefaultTask+0x1d8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d02c      	beq.n	8002a32 <StartDefaultTask+0xce>
 80029d8:	4b51      	ldr	r3, [pc, #324]	@ (8002b20 <StartDefaultTask+0x1bc>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a58      	ldr	r2, [pc, #352]	@ (8002b40 <StartDefaultTask+0x1dc>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d027      	beq.n	8002a32 <StartDefaultTask+0xce>
 80029e2:	4b4f      	ldr	r3, [pc, #316]	@ (8002b20 <StartDefaultTask+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a57      	ldr	r2, [pc, #348]	@ (8002b44 <StartDefaultTask+0x1e0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d022      	beq.n	8002a32 <StartDefaultTask+0xce>
 80029ec:	4b4c      	ldr	r3, [pc, #304]	@ (8002b20 <StartDefaultTask+0x1bc>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a55      	ldr	r2, [pc, #340]	@ (8002b48 <StartDefaultTask+0x1e4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d01d      	beq.n	8002a32 <StartDefaultTask+0xce>
 80029f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002b20 <StartDefaultTask+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a54      	ldr	r2, [pc, #336]	@ (8002b4c <StartDefaultTask+0x1e8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d018      	beq.n	8002a32 <StartDefaultTask+0xce>
 8002a00:	4b47      	ldr	r3, [pc, #284]	@ (8002b20 <StartDefaultTask+0x1bc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a52      	ldr	r2, [pc, #328]	@ (8002b50 <StartDefaultTask+0x1ec>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <StartDefaultTask+0xce>
 8002a0a:	4b45      	ldr	r3, [pc, #276]	@ (8002b20 <StartDefaultTask+0x1bc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a51      	ldr	r2, [pc, #324]	@ (8002b54 <StartDefaultTask+0x1f0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d00e      	beq.n	8002a32 <StartDefaultTask+0xce>
 8002a14:	4b42      	ldr	r3, [pc, #264]	@ (8002b20 <StartDefaultTask+0x1bc>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a4f      	ldr	r2, [pc, #316]	@ (8002b58 <StartDefaultTask+0x1f4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d009      	beq.n	8002a32 <StartDefaultTask+0xce>
 8002a1e:	4b40      	ldr	r3, [pc, #256]	@ (8002b20 <StartDefaultTask+0x1bc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a4e      	ldr	r2, [pc, #312]	@ (8002b5c <StartDefaultTask+0x1f8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d004      	beq.n	8002a32 <StartDefaultTask+0xce>
 8002a28:	4b3d      	ldr	r3, [pc, #244]	@ (8002b20 <StartDefaultTask+0x1bc>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a4c      	ldr	r2, [pc, #304]	@ (8002b60 <StartDefaultTask+0x1fc>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d108      	bne.n	8002a44 <StartDefaultTask+0xe0>
 8002a32:	4b3b      	ldr	r3, [pc, #236]	@ (8002b20 <StartDefaultTask+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b39      	ldr	r3, [pc, #228]	@ (8002b20 <StartDefaultTask+0x1bc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0208 	bic.w	r2, r2, #8
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	e007      	b.n	8002a54 <StartDefaultTask+0xf0>
 8002a44:	4b36      	ldr	r3, [pc, #216]	@ (8002b20 <StartDefaultTask+0x1bc>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	4b35      	ldr	r3, [pc, #212]	@ (8002b20 <StartDefaultTask+0x1bc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0204 	bic.w	r2, r2, #4
 8002a52:	601a      	str	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxbuff_cu, 128);
 8002a54:	2280      	movs	r2, #128	@ 0x80
 8002a56:	4943      	ldr	r1, [pc, #268]	@ (8002b64 <StartDefaultTask+0x200>)
 8002a58:	4843      	ldr	r0, [pc, #268]	@ (8002b68 <StartDefaultTask+0x204>)
 8002a5a:	f00e fdcc 	bl	80115f6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002a5e:	4b43      	ldr	r3, [pc, #268]	@ (8002b6c <StartDefaultTask+0x208>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a30      	ldr	r2, [pc, #192]	@ (8002b24 <StartDefaultTask+0x1c0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d04a      	beq.n	8002afe <StartDefaultTask+0x19a>
 8002a68:	4b40      	ldr	r3, [pc, #256]	@ (8002b6c <StartDefaultTask+0x208>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a2e      	ldr	r2, [pc, #184]	@ (8002b28 <StartDefaultTask+0x1c4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d045      	beq.n	8002afe <StartDefaultTask+0x19a>
 8002a72:	4b3e      	ldr	r3, [pc, #248]	@ (8002b6c <StartDefaultTask+0x208>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a2d      	ldr	r2, [pc, #180]	@ (8002b2c <StartDefaultTask+0x1c8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d040      	beq.n	8002afe <StartDefaultTask+0x19a>
 8002a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b6c <StartDefaultTask+0x208>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a2b      	ldr	r2, [pc, #172]	@ (8002b30 <StartDefaultTask+0x1cc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d03b      	beq.n	8002afe <StartDefaultTask+0x19a>
 8002a86:	4b39      	ldr	r3, [pc, #228]	@ (8002b6c <StartDefaultTask+0x208>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8002b34 <StartDefaultTask+0x1d0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d036      	beq.n	8002afe <StartDefaultTask+0x19a>
 8002a90:	4b36      	ldr	r3, [pc, #216]	@ (8002b6c <StartDefaultTask+0x208>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a28      	ldr	r2, [pc, #160]	@ (8002b38 <StartDefaultTask+0x1d4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d031      	beq.n	8002afe <StartDefaultTask+0x19a>
 8002a9a:	4b34      	ldr	r3, [pc, #208]	@ (8002b6c <StartDefaultTask+0x208>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a27      	ldr	r2, [pc, #156]	@ (8002b3c <StartDefaultTask+0x1d8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d02c      	beq.n	8002afe <StartDefaultTask+0x19a>
 8002aa4:	4b31      	ldr	r3, [pc, #196]	@ (8002b6c <StartDefaultTask+0x208>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a25      	ldr	r2, [pc, #148]	@ (8002b40 <StartDefaultTask+0x1dc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d027      	beq.n	8002afe <StartDefaultTask+0x19a>
 8002aae:	4b2f      	ldr	r3, [pc, #188]	@ (8002b6c <StartDefaultTask+0x208>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a24      	ldr	r2, [pc, #144]	@ (8002b44 <StartDefaultTask+0x1e0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d022      	beq.n	8002afe <StartDefaultTask+0x19a>
 8002ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8002b6c <StartDefaultTask+0x208>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a22      	ldr	r2, [pc, #136]	@ (8002b48 <StartDefaultTask+0x1e4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d01d      	beq.n	8002afe <StartDefaultTask+0x19a>
 8002ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b6c <StartDefaultTask+0x208>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a21      	ldr	r2, [pc, #132]	@ (8002b4c <StartDefaultTask+0x1e8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d018      	beq.n	8002afe <StartDefaultTask+0x19a>
 8002acc:	4b27      	ldr	r3, [pc, #156]	@ (8002b6c <StartDefaultTask+0x208>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b50 <StartDefaultTask+0x1ec>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d013      	beq.n	8002afe <StartDefaultTask+0x19a>
 8002ad6:	4b25      	ldr	r3, [pc, #148]	@ (8002b6c <StartDefaultTask+0x208>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a1e      	ldr	r2, [pc, #120]	@ (8002b54 <StartDefaultTask+0x1f0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d00e      	beq.n	8002afe <StartDefaultTask+0x19a>
 8002ae0:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <StartDefaultTask+0x208>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8002b58 <StartDefaultTask+0x1f4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d009      	beq.n	8002afe <StartDefaultTask+0x19a>
 8002aea:	4b20      	ldr	r3, [pc, #128]	@ (8002b6c <StartDefaultTask+0x208>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1b      	ldr	r2, [pc, #108]	@ (8002b5c <StartDefaultTask+0x1f8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d004      	beq.n	8002afe <StartDefaultTask+0x19a>
 8002af4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b6c <StartDefaultTask+0x208>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a19      	ldr	r2, [pc, #100]	@ (8002b60 <StartDefaultTask+0x1fc>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d138      	bne.n	8002b70 <StartDefaultTask+0x20c>
 8002afe:	4b1b      	ldr	r3, [pc, #108]	@ (8002b6c <StartDefaultTask+0x208>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b19      	ldr	r3, [pc, #100]	@ (8002b6c <StartDefaultTask+0x208>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0208 	bic.w	r2, r2, #8
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	e037      	b.n	8002b80 <StartDefaultTask+0x21c>
 8002b10:	24000022 	.word	0x24000022
 8002b14:	24000096 	.word	0x24000096
 8002b18:	30004b84 	.word	0x30004b84
 8002b1c:	240008e4 	.word	0x240008e4
 8002b20:	24000d4c 	.word	0x24000d4c
 8002b24:	40020010 	.word	0x40020010
 8002b28:	40020028 	.word	0x40020028
 8002b2c:	40020040 	.word	0x40020040
 8002b30:	40020058 	.word	0x40020058
 8002b34:	40020070 	.word	0x40020070
 8002b38:	40020088 	.word	0x40020088
 8002b3c:	400200a0 	.word	0x400200a0
 8002b40:	400200b8 	.word	0x400200b8
 8002b44:	40020410 	.word	0x40020410
 8002b48:	40020428 	.word	0x40020428
 8002b4c:	40020440 	.word	0x40020440
 8002b50:	40020458 	.word	0x40020458
 8002b54:	40020470 	.word	0x40020470
 8002b58:	40020488 	.word	0x40020488
 8002b5c:	400204a0 	.word	0x400204a0
 8002b60:	400204b8 	.word	0x400204b8
 8002b64:	30004d84 	.word	0x30004d84
 8002b68:	24000b34 	.word	0x24000b34
 8002b6c:	2400101c 	.word	0x2400101c
 8002b70:	4b65      	ldr	r3, [pc, #404]	@ (8002d08 <StartDefaultTask+0x3a4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	4b64      	ldr	r3, [pc, #400]	@ (8002d08 <StartDefaultTask+0x3a4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0204 	bic.w	r2, r2, #4
 8002b7e:	601a      	str	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rxbuff_jing, 128);
 8002b80:	2280      	movs	r2, #128	@ 0x80
 8002b82:	4962      	ldr	r1, [pc, #392]	@ (8002d0c <StartDefaultTask+0x3a8>)
 8002b84:	4862      	ldr	r0, [pc, #392]	@ (8002d10 <StartDefaultTask+0x3ac>)
 8002b86:	f00e fd36 	bl	80115f6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 8002b8a:	4b62      	ldr	r3, [pc, #392]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a62      	ldr	r2, [pc, #392]	@ (8002d18 <StartDefaultTask+0x3b4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d04a      	beq.n	8002c2a <StartDefaultTask+0x2c6>
 8002b94:	4b5f      	ldr	r3, [pc, #380]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a60      	ldr	r2, [pc, #384]	@ (8002d1c <StartDefaultTask+0x3b8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d045      	beq.n	8002c2a <StartDefaultTask+0x2c6>
 8002b9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a5f      	ldr	r2, [pc, #380]	@ (8002d20 <StartDefaultTask+0x3bc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d040      	beq.n	8002c2a <StartDefaultTask+0x2c6>
 8002ba8:	4b5a      	ldr	r3, [pc, #360]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a5d      	ldr	r2, [pc, #372]	@ (8002d24 <StartDefaultTask+0x3c0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d03b      	beq.n	8002c2a <StartDefaultTask+0x2c6>
 8002bb2:	4b58      	ldr	r3, [pc, #352]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a5c      	ldr	r2, [pc, #368]	@ (8002d28 <StartDefaultTask+0x3c4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d036      	beq.n	8002c2a <StartDefaultTask+0x2c6>
 8002bbc:	4b55      	ldr	r3, [pc, #340]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a5a      	ldr	r2, [pc, #360]	@ (8002d2c <StartDefaultTask+0x3c8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d031      	beq.n	8002c2a <StartDefaultTask+0x2c6>
 8002bc6:	4b53      	ldr	r3, [pc, #332]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a59      	ldr	r2, [pc, #356]	@ (8002d30 <StartDefaultTask+0x3cc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d02c      	beq.n	8002c2a <StartDefaultTask+0x2c6>
 8002bd0:	4b50      	ldr	r3, [pc, #320]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a57      	ldr	r2, [pc, #348]	@ (8002d34 <StartDefaultTask+0x3d0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d027      	beq.n	8002c2a <StartDefaultTask+0x2c6>
 8002bda:	4b4e      	ldr	r3, [pc, #312]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a56      	ldr	r2, [pc, #344]	@ (8002d38 <StartDefaultTask+0x3d4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d022      	beq.n	8002c2a <StartDefaultTask+0x2c6>
 8002be4:	4b4b      	ldr	r3, [pc, #300]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a54      	ldr	r2, [pc, #336]	@ (8002d3c <StartDefaultTask+0x3d8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01d      	beq.n	8002c2a <StartDefaultTask+0x2c6>
 8002bee:	4b49      	ldr	r3, [pc, #292]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a53      	ldr	r2, [pc, #332]	@ (8002d40 <StartDefaultTask+0x3dc>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d018      	beq.n	8002c2a <StartDefaultTask+0x2c6>
 8002bf8:	4b46      	ldr	r3, [pc, #280]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a51      	ldr	r2, [pc, #324]	@ (8002d44 <StartDefaultTask+0x3e0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d013      	beq.n	8002c2a <StartDefaultTask+0x2c6>
 8002c02:	4b44      	ldr	r3, [pc, #272]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a50      	ldr	r2, [pc, #320]	@ (8002d48 <StartDefaultTask+0x3e4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d00e      	beq.n	8002c2a <StartDefaultTask+0x2c6>
 8002c0c:	4b41      	ldr	r3, [pc, #260]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a4e      	ldr	r2, [pc, #312]	@ (8002d4c <StartDefaultTask+0x3e8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d009      	beq.n	8002c2a <StartDefaultTask+0x2c6>
 8002c16:	4b3f      	ldr	r3, [pc, #252]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a4d      	ldr	r2, [pc, #308]	@ (8002d50 <StartDefaultTask+0x3ec>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d004      	beq.n	8002c2a <StartDefaultTask+0x2c6>
 8002c20:	4b3c      	ldr	r3, [pc, #240]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a4b      	ldr	r2, [pc, #300]	@ (8002d54 <StartDefaultTask+0x3f0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d108      	bne.n	8002c3c <StartDefaultTask+0x2d8>
 8002c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b38      	ldr	r3, [pc, #224]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0208 	bic.w	r2, r2, #8
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	e007      	b.n	8002c4c <StartDefaultTask+0x2e8>
 8002c3c:	4b35      	ldr	r3, [pc, #212]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	4b34      	ldr	r3, [pc, #208]	@ (8002d14 <StartDefaultTask+0x3b0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0204 	bic.w	r2, r2, #4
 8002c4a:	601a      	str	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rxbuff_focus, 11);
 8002c4c:	220b      	movs	r2, #11
 8002c4e:	4942      	ldr	r1, [pc, #264]	@ (8002d58 <StartDefaultTask+0x3f4>)
 8002c50:	4842      	ldr	r0, [pc, #264]	@ (8002d5c <StartDefaultTask+0x3f8>)
 8002c52:	f00e fcd0 	bl	80115f6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8002c56:	4b42      	ldr	r3, [pc, #264]	@ (8002d60 <StartDefaultTask+0x3fc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002d18 <StartDefaultTask+0x3b4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d04a      	beq.n	8002cf6 <StartDefaultTask+0x392>
 8002c60:	4b3f      	ldr	r3, [pc, #252]	@ (8002d60 <StartDefaultTask+0x3fc>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a2d      	ldr	r2, [pc, #180]	@ (8002d1c <StartDefaultTask+0x3b8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d045      	beq.n	8002cf6 <StartDefaultTask+0x392>
 8002c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d60 <StartDefaultTask+0x3fc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002d20 <StartDefaultTask+0x3bc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d040      	beq.n	8002cf6 <StartDefaultTask+0x392>
 8002c74:	4b3a      	ldr	r3, [pc, #232]	@ (8002d60 <StartDefaultTask+0x3fc>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a2a      	ldr	r2, [pc, #168]	@ (8002d24 <StartDefaultTask+0x3c0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d03b      	beq.n	8002cf6 <StartDefaultTask+0x392>
 8002c7e:	4b38      	ldr	r3, [pc, #224]	@ (8002d60 <StartDefaultTask+0x3fc>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a29      	ldr	r2, [pc, #164]	@ (8002d28 <StartDefaultTask+0x3c4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d036      	beq.n	8002cf6 <StartDefaultTask+0x392>
 8002c88:	4b35      	ldr	r3, [pc, #212]	@ (8002d60 <StartDefaultTask+0x3fc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a27      	ldr	r2, [pc, #156]	@ (8002d2c <StartDefaultTask+0x3c8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d031      	beq.n	8002cf6 <StartDefaultTask+0x392>
 8002c92:	4b33      	ldr	r3, [pc, #204]	@ (8002d60 <StartDefaultTask+0x3fc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a26      	ldr	r2, [pc, #152]	@ (8002d30 <StartDefaultTask+0x3cc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d02c      	beq.n	8002cf6 <StartDefaultTask+0x392>
 8002c9c:	4b30      	ldr	r3, [pc, #192]	@ (8002d60 <StartDefaultTask+0x3fc>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a24      	ldr	r2, [pc, #144]	@ (8002d34 <StartDefaultTask+0x3d0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d027      	beq.n	8002cf6 <StartDefaultTask+0x392>
 8002ca6:	4b2e      	ldr	r3, [pc, #184]	@ (8002d60 <StartDefaultTask+0x3fc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a23      	ldr	r2, [pc, #140]	@ (8002d38 <StartDefaultTask+0x3d4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d022      	beq.n	8002cf6 <StartDefaultTask+0x392>
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d60 <StartDefaultTask+0x3fc>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a21      	ldr	r2, [pc, #132]	@ (8002d3c <StartDefaultTask+0x3d8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01d      	beq.n	8002cf6 <StartDefaultTask+0x392>
 8002cba:	4b29      	ldr	r3, [pc, #164]	@ (8002d60 <StartDefaultTask+0x3fc>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a20      	ldr	r2, [pc, #128]	@ (8002d40 <StartDefaultTask+0x3dc>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d018      	beq.n	8002cf6 <StartDefaultTask+0x392>
 8002cc4:	4b26      	ldr	r3, [pc, #152]	@ (8002d60 <StartDefaultTask+0x3fc>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1e      	ldr	r2, [pc, #120]	@ (8002d44 <StartDefaultTask+0x3e0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <StartDefaultTask+0x392>
 8002cce:	4b24      	ldr	r3, [pc, #144]	@ (8002d60 <StartDefaultTask+0x3fc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8002d48 <StartDefaultTask+0x3e4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00e      	beq.n	8002cf6 <StartDefaultTask+0x392>
 8002cd8:	4b21      	ldr	r3, [pc, #132]	@ (8002d60 <StartDefaultTask+0x3fc>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8002d4c <StartDefaultTask+0x3e8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <StartDefaultTask+0x392>
 8002ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d60 <StartDefaultTask+0x3fc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d50 <StartDefaultTask+0x3ec>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <StartDefaultTask+0x392>
 8002cec:	4b1c      	ldr	r3, [pc, #112]	@ (8002d60 <StartDefaultTask+0x3fc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a18      	ldr	r2, [pc, #96]	@ (8002d54 <StartDefaultTask+0x3f0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d136      	bne.n	8002d64 <StartDefaultTask+0x400>
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d60 <StartDefaultTask+0x3fc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b18      	ldr	r3, [pc, #96]	@ (8002d60 <StartDefaultTask+0x3fc>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0208 	bic.w	r2, r2, #8
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e035      	b.n	8002d74 <StartDefaultTask+0x410>
 8002d08:	2400101c 	.word	0x2400101c
 8002d0c:	30004e84 	.word	0x30004e84
 8002d10:	24000850 	.word	0x24000850
 8002d14:	24000c5c 	.word	0x24000c5c
 8002d18:	40020010 	.word	0x40020010
 8002d1c:	40020028 	.word	0x40020028
 8002d20:	40020040 	.word	0x40020040
 8002d24:	40020058 	.word	0x40020058
 8002d28:	40020070 	.word	0x40020070
 8002d2c:	40020088 	.word	0x40020088
 8002d30:	400200a0 	.word	0x400200a0
 8002d34:	400200b8 	.word	0x400200b8
 8002d38:	40020410 	.word	0x40020410
 8002d3c:	40020428 	.word	0x40020428
 8002d40:	40020440 	.word	0x40020440
 8002d44:	40020458 	.word	0x40020458
 8002d48:	40020470 	.word	0x40020470
 8002d4c:	40020488 	.word	0x40020488
 8002d50:	400204a0 	.word	0x400204a0
 8002d54:	400204b8 	.word	0x400204b8
 8002d58:	30004f10 	.word	0x30004f10
 8002d5c:	24000bc8 	.word	0x24000bc8
 8002d60:	2400110c 	.word	0x2400110c
 8002d64:	4b74      	ldr	r3, [pc, #464]	@ (8002f38 <StartDefaultTask+0x5d4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	4b73      	ldr	r3, [pc, #460]	@ (8002f38 <StartDefaultTask+0x5d4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0204 	bic.w	r2, r2, #4
 8002d72:	601a      	str	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart7, rxbuff_rangefinder, 128);
 8002d74:	2280      	movs	r2, #128	@ 0x80
 8002d76:	4971      	ldr	r1, [pc, #452]	@ (8002f3c <StartDefaultTask+0x5d8>)
 8002d78:	4871      	ldr	r0, [pc, #452]	@ (8002f40 <StartDefaultTask+0x5dc>)
 8002d7a:	f00e fc3c 	bl	80115f6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8002d7e:	4b71      	ldr	r3, [pc, #452]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a71      	ldr	r2, [pc, #452]	@ (8002f48 <StartDefaultTask+0x5e4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d04a      	beq.n	8002e1e <StartDefaultTask+0x4ba>
 8002d88:	4b6e      	ldr	r3, [pc, #440]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a6f      	ldr	r2, [pc, #444]	@ (8002f4c <StartDefaultTask+0x5e8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d045      	beq.n	8002e1e <StartDefaultTask+0x4ba>
 8002d92:	4b6c      	ldr	r3, [pc, #432]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a6e      	ldr	r2, [pc, #440]	@ (8002f50 <StartDefaultTask+0x5ec>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d040      	beq.n	8002e1e <StartDefaultTask+0x4ba>
 8002d9c:	4b69      	ldr	r3, [pc, #420]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a6c      	ldr	r2, [pc, #432]	@ (8002f54 <StartDefaultTask+0x5f0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d03b      	beq.n	8002e1e <StartDefaultTask+0x4ba>
 8002da6:	4b67      	ldr	r3, [pc, #412]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a6b      	ldr	r2, [pc, #428]	@ (8002f58 <StartDefaultTask+0x5f4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d036      	beq.n	8002e1e <StartDefaultTask+0x4ba>
 8002db0:	4b64      	ldr	r3, [pc, #400]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a69      	ldr	r2, [pc, #420]	@ (8002f5c <StartDefaultTask+0x5f8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d031      	beq.n	8002e1e <StartDefaultTask+0x4ba>
 8002dba:	4b62      	ldr	r3, [pc, #392]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a68      	ldr	r2, [pc, #416]	@ (8002f60 <StartDefaultTask+0x5fc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d02c      	beq.n	8002e1e <StartDefaultTask+0x4ba>
 8002dc4:	4b5f      	ldr	r3, [pc, #380]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a66      	ldr	r2, [pc, #408]	@ (8002f64 <StartDefaultTask+0x600>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d027      	beq.n	8002e1e <StartDefaultTask+0x4ba>
 8002dce:	4b5d      	ldr	r3, [pc, #372]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a65      	ldr	r2, [pc, #404]	@ (8002f68 <StartDefaultTask+0x604>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d022      	beq.n	8002e1e <StartDefaultTask+0x4ba>
 8002dd8:	4b5a      	ldr	r3, [pc, #360]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a63      	ldr	r2, [pc, #396]	@ (8002f6c <StartDefaultTask+0x608>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d01d      	beq.n	8002e1e <StartDefaultTask+0x4ba>
 8002de2:	4b58      	ldr	r3, [pc, #352]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a62      	ldr	r2, [pc, #392]	@ (8002f70 <StartDefaultTask+0x60c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d018      	beq.n	8002e1e <StartDefaultTask+0x4ba>
 8002dec:	4b55      	ldr	r3, [pc, #340]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a60      	ldr	r2, [pc, #384]	@ (8002f74 <StartDefaultTask+0x610>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d013      	beq.n	8002e1e <StartDefaultTask+0x4ba>
 8002df6:	4b53      	ldr	r3, [pc, #332]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a5f      	ldr	r2, [pc, #380]	@ (8002f78 <StartDefaultTask+0x614>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00e      	beq.n	8002e1e <StartDefaultTask+0x4ba>
 8002e00:	4b50      	ldr	r3, [pc, #320]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a5d      	ldr	r2, [pc, #372]	@ (8002f7c <StartDefaultTask+0x618>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d009      	beq.n	8002e1e <StartDefaultTask+0x4ba>
 8002e0a:	4b4e      	ldr	r3, [pc, #312]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a5c      	ldr	r2, [pc, #368]	@ (8002f80 <StartDefaultTask+0x61c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d004      	beq.n	8002e1e <StartDefaultTask+0x4ba>
 8002e14:	4b4b      	ldr	r3, [pc, #300]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a5a      	ldr	r2, [pc, #360]	@ (8002f84 <StartDefaultTask+0x620>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d108      	bne.n	8002e30 <StartDefaultTask+0x4cc>
 8002e1e:	4b49      	ldr	r3, [pc, #292]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b47      	ldr	r3, [pc, #284]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0208 	bic.w	r2, r2, #8
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	e007      	b.n	8002e40 <StartDefaultTask+0x4dc>
 8002e30:	4b44      	ldr	r3, [pc, #272]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4b43      	ldr	r3, [pc, #268]	@ (8002f44 <StartDefaultTask+0x5e0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0204 	bic.w	r2, r2, #4
 8002e3e:	601a      	str	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)chcmd, 64);
 8002e40:	2240      	movs	r2, #64	@ 0x40
 8002e42:	4951      	ldr	r1, [pc, #324]	@ (8002f88 <StartDefaultTask+0x624>)
 8002e44:	4851      	ldr	r0, [pc, #324]	@ (8002f8c <StartDefaultTask+0x628>)
 8002e46:	f00e fbd6 	bl	80115f6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002e4a:	4b51      	ldr	r3, [pc, #324]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a3e      	ldr	r2, [pc, #248]	@ (8002f48 <StartDefaultTask+0x5e4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d04a      	beq.n	8002eea <StartDefaultTask+0x586>
 8002e54:	4b4e      	ldr	r3, [pc, #312]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a3c      	ldr	r2, [pc, #240]	@ (8002f4c <StartDefaultTask+0x5e8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d045      	beq.n	8002eea <StartDefaultTask+0x586>
 8002e5e:	4b4c      	ldr	r3, [pc, #304]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a3b      	ldr	r2, [pc, #236]	@ (8002f50 <StartDefaultTask+0x5ec>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d040      	beq.n	8002eea <StartDefaultTask+0x586>
 8002e68:	4b49      	ldr	r3, [pc, #292]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a39      	ldr	r2, [pc, #228]	@ (8002f54 <StartDefaultTask+0x5f0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d03b      	beq.n	8002eea <StartDefaultTask+0x586>
 8002e72:	4b47      	ldr	r3, [pc, #284]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a38      	ldr	r2, [pc, #224]	@ (8002f58 <StartDefaultTask+0x5f4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d036      	beq.n	8002eea <StartDefaultTask+0x586>
 8002e7c:	4b44      	ldr	r3, [pc, #272]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a36      	ldr	r2, [pc, #216]	@ (8002f5c <StartDefaultTask+0x5f8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d031      	beq.n	8002eea <StartDefaultTask+0x586>
 8002e86:	4b42      	ldr	r3, [pc, #264]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a35      	ldr	r2, [pc, #212]	@ (8002f60 <StartDefaultTask+0x5fc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d02c      	beq.n	8002eea <StartDefaultTask+0x586>
 8002e90:	4b3f      	ldr	r3, [pc, #252]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a33      	ldr	r2, [pc, #204]	@ (8002f64 <StartDefaultTask+0x600>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d027      	beq.n	8002eea <StartDefaultTask+0x586>
 8002e9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a32      	ldr	r2, [pc, #200]	@ (8002f68 <StartDefaultTask+0x604>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d022      	beq.n	8002eea <StartDefaultTask+0x586>
 8002ea4:	4b3a      	ldr	r3, [pc, #232]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a30      	ldr	r2, [pc, #192]	@ (8002f6c <StartDefaultTask+0x608>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01d      	beq.n	8002eea <StartDefaultTask+0x586>
 8002eae:	4b38      	ldr	r3, [pc, #224]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a2f      	ldr	r2, [pc, #188]	@ (8002f70 <StartDefaultTask+0x60c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d018      	beq.n	8002eea <StartDefaultTask+0x586>
 8002eb8:	4b35      	ldr	r3, [pc, #212]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8002f74 <StartDefaultTask+0x610>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d013      	beq.n	8002eea <StartDefaultTask+0x586>
 8002ec2:	4b33      	ldr	r3, [pc, #204]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8002f78 <StartDefaultTask+0x614>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00e      	beq.n	8002eea <StartDefaultTask+0x586>
 8002ecc:	4b30      	ldr	r3, [pc, #192]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8002f7c <StartDefaultTask+0x618>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d009      	beq.n	8002eea <StartDefaultTask+0x586>
 8002ed6:	4b2e      	ldr	r3, [pc, #184]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a29      	ldr	r2, [pc, #164]	@ (8002f80 <StartDefaultTask+0x61c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <StartDefaultTask+0x586>
 8002ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a27      	ldr	r2, [pc, #156]	@ (8002f84 <StartDefaultTask+0x620>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d108      	bne.n	8002efc <StartDefaultTask+0x598>
 8002eea:	4b29      	ldr	r3, [pc, #164]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	4b27      	ldr	r3, [pc, #156]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0208 	bic.w	r2, r2, #8
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e007      	b.n	8002f0c <StartDefaultTask+0x5a8>
 8002efc:	4b24      	ldr	r3, [pc, #144]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b23      	ldr	r3, [pc, #140]	@ (8002f90 <StartDefaultTask+0x62c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0204 	bic.w	r2, r2, #4
 8002f0a:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(RF_PWD_GPIO_Port,RF_PWD_Pin,GPIO_PIN_SET);
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f12:	4820      	ldr	r0, [pc, #128]	@ (8002f94 <StartDefaultTask+0x630>)
 8002f14:	f008 fc24 	bl	800b760 <HAL_GPIO_WritePin>
	// go2init();
	osDelay(100);
 8002f18:	2064      	movs	r0, #100	@ 0x64
 8002f1a:	f00f fb05 	bl	8012528 <osDelay>
//	osDelay(2000);
	vTaskSuspend(mytaskHandle);
 8002f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f98 <StartDefaultTask+0x634>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f010 ffe8 	bl	8013ef8 <vTaskSuspend>
//	  if(InitFlag == 1)
//	  {
//		  go2init();
//		  InitFlag = 0;
//	  }
		processControl();
 8002f28:	f7fe fb40 	bl	80015ac <processControl>

//	state = STATE_GUIDE;
//	CommandTypedef.turnYaw.f = 30.f;
//	CommandTypedef.turnPitch.f = 60.f;
//	processControl();
    osDelay(20);
 8002f2c:	2014      	movs	r0, #20
 8002f2e:	f00f fafb 	bl	8012528 <osDelay>
		processControl();
 8002f32:	bf00      	nop
 8002f34:	e7f8      	b.n	8002f28 <StartDefaultTask+0x5c4>
 8002f36:	bf00      	nop
 8002f38:	2400110c 	.word	0x2400110c
 8002f3c:	30004f9c 	.word	0x30004f9c
 8002f40:	24000978 	.word	0x24000978
 8002f44:	24000e3c 	.word	0x24000e3c
 8002f48:	40020010 	.word	0x40020010
 8002f4c:	40020028 	.word	0x40020028
 8002f50:	40020040 	.word	0x40020040
 8002f54:	40020058 	.word	0x40020058
 8002f58:	40020070 	.word	0x40020070
 8002f5c:	40020088 	.word	0x40020088
 8002f60:	400200a0 	.word	0x400200a0
 8002f64:	400200b8 	.word	0x400200b8
 8002f68:	40020410 	.word	0x40020410
 8002f6c:	40020428 	.word	0x40020428
 8002f70:	40020440 	.word	0x40020440
 8002f74:	40020458 	.word	0x40020458
 8002f78:	40020470 	.word	0x40020470
 8002f7c:	40020488 	.word	0x40020488
 8002f80:	400204a0 	.word	0x400204a0
 8002f84:	400204b8 	.word	0x400204b8
 8002f88:	3000501c 	.word	0x3000501c
 8002f8c:	24000aa0 	.word	0x24000aa0
 8002f90:	24000f2c 	.word	0x24000f2c
 8002f94:	58021400 	.word	0x58021400
 8002f98:	24000594 	.word	0x24000594

08002f9c <TurnTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TurnTask */
void TurnTask(void const * argument)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TurnTask */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(BinaryServoHandle, 10) == osOK && taskTurnBegin == pdTRUE)
 8002fa4:	4b89      	ldr	r3, [pc, #548]	@ (80031cc <TurnTask+0x230>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	210a      	movs	r1, #10
 8002faa:	4618      	mov	r0, r3
 8002fac:	f00f fb9e 	bl	80126ec <osSemaphoreWait>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f040 81a7 	bne.w	8003306 <TurnTask+0x36a>
 8002fb8:	4b85      	ldr	r3, [pc, #532]	@ (80031d0 <TurnTask+0x234>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	f040 81a2 	bne.w	8003306 <TurnTask+0x36a>
	  {
		 pcSend.cuErrorCode[0]             			  = rxdata_servo[3];
 8002fc2:	4b84      	ldr	r3, [pc, #528]	@ (80031d4 <TurnTask+0x238>)
 8002fc4:	78da      	ldrb	r2, [r3, #3]
 8002fc6:	4b84      	ldr	r3, [pc, #528]	@ (80031d8 <TurnTask+0x23c>)
 8002fc8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		 pcSend.cuErrorCode[1]             			  = rxdata_servo[4];
 8002fcc:	4b81      	ldr	r3, [pc, #516]	@ (80031d4 <TurnTask+0x238>)
 8002fce:	791a      	ldrb	r2, [r3, #4]
 8002fd0:	4b81      	ldr	r3, [pc, #516]	@ (80031d8 <TurnTask+0x23c>)
 8002fd2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		 
		 TrackingFaultCodeCu.errorCode[1]             = rxdata_servo[4];
 8002fd6:	4b7f      	ldr	r3, [pc, #508]	@ (80031d4 <TurnTask+0x238>)
 8002fd8:	791a      	ldrb	r2, [r3, #4]
 8002fda:	4b80      	ldr	r3, [pc, #512]	@ (80031dc <TurnTask+0x240>)
 8002fdc:	705a      	strb	r2, [r3, #1]
		 TrackingFaultCodeCu.CommunicationFault       = (rxdata_servo[3] & bit(0)) ? 1 : 0;
 8002fde:	4b7d      	ldr	r3, [pc, #500]	@ (80031d4 <TurnTask+0x238>)
 8002fe0:	78db      	ldrb	r3, [r3, #3]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	4b7c      	ldr	r3, [pc, #496]	@ (80031dc <TurnTask+0x240>)
 8002fea:	709a      	strb	r2, [r3, #2]
		 TrackingFaultCodeCu.EncoderFault             = (rxdata_servo[3] & bit(1)) ? 1 : 0;
 8002fec:	4b79      	ldr	r3, [pc, #484]	@ (80031d4 <TurnTask+0x238>)
 8002fee:	78db      	ldrb	r3, [r3, #3]
 8002ff0:	105b      	asrs	r3, r3, #1
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	4b78      	ldr	r3, [pc, #480]	@ (80031dc <TurnTask+0x240>)
 8002ffc:	70da      	strb	r2, [r3, #3]
		 TrackingFaultCodeCu.DriverFaultA             = (rxdata_servo[3] & bit(2)) ? 1 : 0;
 8002ffe:	4b75      	ldr	r3, [pc, #468]	@ (80031d4 <TurnTask+0x238>)
 8003000:	78db      	ldrb	r3, [r3, #3]
 8003002:	109b      	asrs	r3, r3, #2
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	b2da      	uxtb	r2, r3
 800300c:	4b73      	ldr	r3, [pc, #460]	@ (80031dc <TurnTask+0x240>)
 800300e:	711a      	strb	r2, [r3, #4]
		 TrackingFaultCodeCu.DriverFaultE             = (rxdata_servo[3] & bit(3)) ? 1 : 0;
 8003010:	4b70      	ldr	r3, [pc, #448]	@ (80031d4 <TurnTask+0x238>)
 8003012:	78db      	ldrb	r3, [r3, #3]
 8003014:	10db      	asrs	r3, r3, #3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4b6f      	ldr	r3, [pc, #444]	@ (80031dc <TurnTask+0x240>)
 8003020:	715a      	strb	r2, [r3, #5]
		 TrackingFaultCodeCu.OverSpeedA               = (rxdata_servo[3] & bit(4)) ? 1 : 0;
 8003022:	4b6c      	ldr	r3, [pc, #432]	@ (80031d4 <TurnTask+0x238>)
 8003024:	78db      	ldrb	r3, [r3, #3]
 8003026:	111b      	asrs	r3, r3, #4
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	b2da      	uxtb	r2, r3
 8003030:	4b6a      	ldr	r3, [pc, #424]	@ (80031dc <TurnTask+0x240>)
 8003032:	719a      	strb	r2, [r3, #6]
		 TrackingFaultCodeCu.OverSpeedE               = (rxdata_servo[3] & bit(5)) ? 1 : 0;
 8003034:	4b67      	ldr	r3, [pc, #412]	@ (80031d4 <TurnTask+0x238>)
 8003036:	78db      	ldrb	r3, [r3, #3]
 8003038:	115b      	asrs	r3, r3, #5
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4b66      	ldr	r3, [pc, #408]	@ (80031dc <TurnTask+0x240>)
 8003044:	71da      	strb	r2, [r3, #7]
		 TrackingFaultCodeCu.ControlOverLimitA        = (rxdata_servo[3] & bit(6)) ? 1 : 0;
 8003046:	4b63      	ldr	r3, [pc, #396]	@ (80031d4 <TurnTask+0x238>)
 8003048:	78db      	ldrb	r3, [r3, #3]
 800304a:	119b      	asrs	r3, r3, #6
 800304c:	b2db      	uxtb	r3, r3
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	b2da      	uxtb	r2, r3
 8003054:	4b61      	ldr	r3, [pc, #388]	@ (80031dc <TurnTask+0x240>)
 8003056:	721a      	strb	r2, [r3, #8]
		 TrackingFaultCodeCu.ControlOverLimitE        = (rxdata_servo[3] & bit(7)) ? 1 : 0;
 8003058:	4b5e      	ldr	r3, [pc, #376]	@ (80031d4 <TurnTask+0x238>)
 800305a:	78db      	ldrb	r3, [r3, #3]
 800305c:	09db      	lsrs	r3, r3, #7
 800305e:	b2da      	uxtb	r2, r3
 8003060:	4b5e      	ldr	r3, [pc, #376]	@ (80031dc <TurnTask+0x240>)
 8003062:	725a      	strb	r2, [r3, #9]
		 TrackingFaultCodeCu.PositionOverLimitE       = (rxdata_servo[4] & bit(0)) ? 1 : 0;
 8003064:	4b5b      	ldr	r3, [pc, #364]	@ (80031d4 <TurnTask+0x238>)
 8003066:	791b      	ldrb	r3, [r3, #4]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	b2da      	uxtb	r2, r3
 800306e:	4b5b      	ldr	r3, [pc, #364]	@ (80031dc <TurnTask+0x240>)
 8003070:	729a      	strb	r2, [r3, #10]
		 TrackingFaultCodeCu.PositionUnderLimitE      = (rxdata_servo[4] & bit(1)) ? 1 : 0;
 8003072:	4b58      	ldr	r3, [pc, #352]	@ (80031d4 <TurnTask+0x238>)
 8003074:	791b      	ldrb	r3, [r3, #4]
 8003076:	105b      	asrs	r3, r3, #1
 8003078:	b2db      	uxtb	r3, r3
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	b2da      	uxtb	r2, r3
 8003080:	4b56      	ldr	r3, [pc, #344]	@ (80031dc <TurnTask+0x240>)
 8003082:	72da      	strb	r2, [r3, #11]
		 TrackingFaultCodeCu.TrackingFaultCuByte1     = (rxdata_servo[4] & bit(2)) ? 1 : 0;
 8003084:	4b53      	ldr	r3, [pc, #332]	@ (80031d4 <TurnTask+0x238>)
 8003086:	791b      	ldrb	r3, [r3, #4]
 8003088:	109b      	asrs	r3, r3, #2
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	b2da      	uxtb	r2, r3
 8003092:	4b52      	ldr	r3, [pc, #328]	@ (80031dc <TurnTask+0x240>)
 8003094:	731a      	strb	r2, [r3, #12]
		 TrackingFaultCodeCu.TrackingFaultCuByte2     = (rxdata_servo[4] & bit(3)) ? 1 : 0;
 8003096:	4b4f      	ldr	r3, [pc, #316]	@ (80031d4 <TurnTask+0x238>)
 8003098:	791b      	ldrb	r3, [r3, #4]
 800309a:	10db      	asrs	r3, r3, #3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	4b4d      	ldr	r3, [pc, #308]	@ (80031dc <TurnTask+0x240>)
 80030a6:	735a      	strb	r2, [r3, #13]
		 TrackingFaultCodeCu.TrackingFaultCuByte3     = (rxdata_servo[4] & bit(4)) ? 1 : 0;
 80030a8:	4b4a      	ldr	r3, [pc, #296]	@ (80031d4 <TurnTask+0x238>)
 80030aa:	791b      	ldrb	r3, [r3, #4]
 80030ac:	111b      	asrs	r3, r3, #4
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4b49      	ldr	r3, [pc, #292]	@ (80031dc <TurnTask+0x240>)
 80030b8:	739a      	strb	r2, [r3, #14]
		 TrackingFaultCodeCu.TrackingFaultCuByte4     = (rxdata_servo[4] & bit(5)) ? 1 : 0;
 80030ba:	4b46      	ldr	r3, [pc, #280]	@ (80031d4 <TurnTask+0x238>)
 80030bc:	791b      	ldrb	r3, [r3, #4]
 80030be:	115b      	asrs	r3, r3, #5
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	4b44      	ldr	r3, [pc, #272]	@ (80031dc <TurnTask+0x240>)
 80030ca:	73da      	strb	r2, [r3, #15]


		 pcSend.jingErrorCode[0]                      = rxdata_servo[5];
 80030cc:	4b41      	ldr	r3, [pc, #260]	@ (80031d4 <TurnTask+0x238>)
 80030ce:	795a      	ldrb	r2, [r3, #5]
 80030d0:	4b41      	ldr	r3, [pc, #260]	@ (80031d8 <TurnTask+0x23c>)
 80030d2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		 pcSend.jingErrorCode[1]                      = rxdata_servo[6];
 80030d6:	4b3f      	ldr	r3, [pc, #252]	@ (80031d4 <TurnTask+0x238>)
 80030d8:	799a      	ldrb	r2, [r3, #6]
 80030da:	4b3f      	ldr	r3, [pc, #252]	@ (80031d8 <TurnTask+0x23c>)
 80030dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		 TrackingFaultCodeJing.FSMControlOverLimitX   = (rxdata_servo[5] & bit(0)) ? 1 : 0;
 80030e0:	4b3c      	ldr	r3, [pc, #240]	@ (80031d4 <TurnTask+0x238>)
 80030e2:	795b      	ldrb	r3, [r3, #5]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	4b3d      	ldr	r3, [pc, #244]	@ (80031e0 <TurnTask+0x244>)
 80030ec:	709a      	strb	r2, [r3, #2]
		 TrackingFaultCodeJing.FSMControlOverLimitY   = (rxdata_servo[5] & bit(1)) ? 1 : 0;
 80030ee:	4b39      	ldr	r3, [pc, #228]	@ (80031d4 <TurnTask+0x238>)
 80030f0:	795b      	ldrb	r3, [r3, #5]
 80030f2:	105b      	asrs	r3, r3, #1
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	4b38      	ldr	r3, [pc, #224]	@ (80031e0 <TurnTask+0x244>)
 80030fe:	70da      	strb	r2, [r3, #3]
		 TrackingFaultCodeJing.FSMPositionOverLimitX  = (rxdata_servo[6] & bit(0)) ? 1 : 0;
 8003100:	4b34      	ldr	r3, [pc, #208]	@ (80031d4 <TurnTask+0x238>)
 8003102:	799b      	ldrb	r3, [r3, #6]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4b35      	ldr	r3, [pc, #212]	@ (80031e0 <TurnTask+0x244>)
 800310c:	711a      	strb	r2, [r3, #4]
		 TrackingFaultCodeJing.FSMPositionOverLimitY  = (rxdata_servo[6] & bit(1)) ? 1 : 0;
 800310e:	4b31      	ldr	r3, [pc, #196]	@ (80031d4 <TurnTask+0x238>)
 8003110:	799b      	ldrb	r3, [r3, #6]
 8003112:	105b      	asrs	r3, r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	b2da      	uxtb	r2, r3
 800311c:	4b30      	ldr	r3, [pc, #192]	@ (80031e0 <TurnTask+0x244>)
 800311e:	715a      	strb	r2, [r3, #5]
		 TrackingFaultCodeJing.TrackingFaultJing      = (rxdata_servo[6] & bit(2)) ? 1 : 0;
 8003120:	4b2c      	ldr	r3, [pc, #176]	@ (80031d4 <TurnTask+0x238>)
 8003122:	799b      	ldrb	r3, [r3, #6]
 8003124:	109b      	asrs	r3, r3, #2
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	b2da      	uxtb	r2, r3
 800312e:	4b2c      	ldr	r3, [pc, #176]	@ (80031e0 <TurnTask+0x244>)
 8003130:	719a      	strb	r2, [r3, #6]


		 ServoRevTypedef.cCuOffsetState               =  rxdata_servo[17];
 8003132:	4b28      	ldr	r3, [pc, #160]	@ (80031d4 <TurnTask+0x238>)
 8003134:	7c5a      	ldrb	r2, [r3, #17]
 8003136:	4b2b      	ldr	r3, [pc, #172]	@ (80031e4 <TurnTask+0x248>)
 8003138:	701a      	strb	r2, [r3, #0]
		 ServoRevTypedef.CuOffset_X.s                 =  rxdata_servo[18] << 8 | rxdata_servo[19];
 800313a:	4b26      	ldr	r3, [pc, #152]	@ (80031d4 <TurnTask+0x238>)
 800313c:	7c9b      	ldrb	r3, [r3, #18]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	b21a      	sxth	r2, r3
 8003142:	4b24      	ldr	r3, [pc, #144]	@ (80031d4 <TurnTask+0x238>)
 8003144:	7cdb      	ldrb	r3, [r3, #19]
 8003146:	b21b      	sxth	r3, r3
 8003148:	4313      	orrs	r3, r2
 800314a:	b21a      	sxth	r2, r3
 800314c:	4b25      	ldr	r3, [pc, #148]	@ (80031e4 <TurnTask+0x248>)
 800314e:	809a      	strh	r2, [r3, #4]
		 ServoRevTypedef.CuOffset_Y.s                 =  rxdata_servo[20] << 8 | rxdata_servo[21];
 8003150:	4b20      	ldr	r3, [pc, #128]	@ (80031d4 <TurnTask+0x238>)
 8003152:	7d1b      	ldrb	r3, [r3, #20]
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	b21a      	sxth	r2, r3
 8003158:	4b1e      	ldr	r3, [pc, #120]	@ (80031d4 <TurnTask+0x238>)
 800315a:	7d5b      	ldrb	r3, [r3, #21]
 800315c:	b21b      	sxth	r3, r3
 800315e:	4313      	orrs	r3, r2
 8003160:	b21a      	sxth	r2, r3
 8003162:	4b20      	ldr	r3, [pc, #128]	@ (80031e4 <TurnTask+0x248>)
 8003164:	80da      	strh	r2, [r3, #6]
		 ServoRevTypedef.cJingOffsetState             =  rxdata_servo[22];
 8003166:	4b1b      	ldr	r3, [pc, #108]	@ (80031d4 <TurnTask+0x238>)
 8003168:	7d9a      	ldrb	r2, [r3, #22]
 800316a:	4b1e      	ldr	r3, [pc, #120]	@ (80031e4 <TurnTask+0x248>)
 800316c:	705a      	strb	r2, [r3, #1]
		 ServoRevTypedef.cJingISOffsetState           =  rxdata_servo[23];
 800316e:	4b19      	ldr	r3, [pc, #100]	@ (80031d4 <TurnTask+0x238>)
 8003170:	7dda      	ldrb	r2, [r3, #23]
 8003172:	4b1c      	ldr	r3, [pc, #112]	@ (80031e4 <TurnTask+0x248>)
 8003174:	709a      	strb	r2, [r3, #2]
		 ServoRevTypedef.JingOffset_X.s               =  rxdata_servo[24] << 8 | rxdata_servo[25];
 8003176:	4b17      	ldr	r3, [pc, #92]	@ (80031d4 <TurnTask+0x238>)
 8003178:	7e1b      	ldrb	r3, [r3, #24]
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	b21a      	sxth	r2, r3
 800317e:	4b15      	ldr	r3, [pc, #84]	@ (80031d4 <TurnTask+0x238>)
 8003180:	7e5b      	ldrb	r3, [r3, #25]
 8003182:	b21b      	sxth	r3, r3
 8003184:	4313      	orrs	r3, r2
 8003186:	b21a      	sxth	r2, r3
 8003188:	4b16      	ldr	r3, [pc, #88]	@ (80031e4 <TurnTask+0x248>)
 800318a:	811a      	strh	r2, [r3, #8]
		 ServoRevTypedef.JingOffset_Y.s               =  rxdata_servo[26] << 8 | rxdata_servo[27];
 800318c:	4b11      	ldr	r3, [pc, #68]	@ (80031d4 <TurnTask+0x238>)
 800318e:	7e9b      	ldrb	r3, [r3, #26]
 8003190:	021b      	lsls	r3, r3, #8
 8003192:	b21a      	sxth	r2, r3
 8003194:	4b0f      	ldr	r3, [pc, #60]	@ (80031d4 <TurnTask+0x238>)
 8003196:	7edb      	ldrb	r3, [r3, #27]
 8003198:	b21b      	sxth	r3, r3
 800319a:	4313      	orrs	r3, r2
 800319c:	b21a      	sxth	r2, r3
 800319e:	4b11      	ldr	r3, [pc, #68]	@ (80031e4 <TurnTask+0x248>)
 80031a0:	815a      	strh	r2, [r3, #10]
		 ServoRevTypedef.cTurnTableTrackState         =  rxdata_servo[28];
 80031a2:	4b0c      	ldr	r3, [pc, #48]	@ (80031d4 <TurnTask+0x238>)
 80031a4:	7f1a      	ldrb	r2, [r3, #28]
 80031a6:	4b0f      	ldr	r3, [pc, #60]	@ (80031e4 <TurnTask+0x248>)
 80031a8:	731a      	strb	r2, [r3, #12]
		 ServoRevTypedef.cFSMTrackState               =  rxdata_servo[29];
 80031aa:	4b0a      	ldr	r3, [pc, #40]	@ (80031d4 <TurnTask+0x238>)
 80031ac:	7f5a      	ldrb	r2, [r3, #29]
 80031ae:	4b0d      	ldr	r3, [pc, #52]	@ (80031e4 <TurnTask+0x248>)
 80031b0:	735a      	strb	r2, [r3, #13]
		 // ServoRevTypedef.cElectPositionState          =  rxdata_servo[30];
		 ServoRevTypedef.cTurnTableMotorPowerState    =  rxdata_servo[31];
 80031b2:	4b08      	ldr	r3, [pc, #32]	@ (80031d4 <TurnTask+0x238>)
 80031b4:	7fda      	ldrb	r2, [r3, #31]
 80031b6:	4b0b      	ldr	r3, [pc, #44]	@ (80031e4 <TurnTask+0x248>)
 80031b8:	73da      	strb	r2, [r3, #15]
		 ServoRevTypedef.cJingTrackControlState       =  rxdata_servo[32];
 80031ba:	4b06      	ldr	r3, [pc, #24]	@ (80031d4 <TurnTask+0x238>)
 80031bc:	f893 2020 	ldrb.w	r2, [r3, #32]
 80031c0:	4b08      	ldr	r3, [pc, #32]	@ (80031e4 <TurnTask+0x248>)
 80031c2:	741a      	strb	r2, [r3, #16]
		 for(int i = 0;i < 4;i++)
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	e089      	b.n	80032de <TurnTask+0x342>
 80031ca:	bf00      	nop
 80031cc:	24000580 	.word	0x24000580
 80031d0:	24000554 	.word	0x24000554
 80031d4:	30004b04 	.word	0x30004b04
 80031d8:	24000510 	.word	0x24000510
 80031dc:	24000498 	.word	0x24000498
 80031e0:	240004a8 	.word	0x240004a8
 80031e4:	24000450 	.word	0x24000450
		   ServoRevTypedef.TurnYawOutput.u8t[3-i] = rxdata_servo[65+i];
		   ServoRevTypedef.TurnPitchOutput.u8t[3-i] = rxdata_servo[69+i];
		   ServoRevTypedef.FSMXOutput.u8t[3-i] = rxdata_servo[73+i];
		   ServoRevTypedef.FSMYOutput.u8t[3-i] = rxdata_servo[77+i];
		   #else
		   ServoRevTypedef.FSMXPos.u8t[i] = rxdata_servo[33+i];
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3321      	adds	r3, #33	@ 0x21
 80031ec:	4a48      	ldr	r2, [pc, #288]	@ (8003310 <TurnTask+0x374>)
 80031ee:	5cd1      	ldrb	r1, [r2, r3]
 80031f0:	4a48      	ldr	r2, [pc, #288]	@ (8003314 <TurnTask+0x378>)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4413      	add	r3, r2
 80031f6:	3314      	adds	r3, #20
 80031f8:	460a      	mov	r2, r1
 80031fa:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.FSMYPos.u8t[i] = rxdata_servo[37+i];
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3325      	adds	r3, #37	@ 0x25
 8003200:	4a43      	ldr	r2, [pc, #268]	@ (8003310 <TurnTask+0x374>)
 8003202:	5cd1      	ldrb	r1, [r2, r3]
 8003204:	4a43      	ldr	r2, [pc, #268]	@ (8003314 <TurnTask+0x378>)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4413      	add	r3, r2
 800320a:	3318      	adds	r3, #24
 800320c:	460a      	mov	r2, r1
 800320e:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.ServoYawPos.u8t[i] = rxdata_servo[41+i];
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	3329      	adds	r3, #41	@ 0x29
 8003214:	4a3e      	ldr	r2, [pc, #248]	@ (8003310 <TurnTask+0x374>)
 8003216:	5cd1      	ldrb	r1, [r2, r3]
 8003218:	4a3e      	ldr	r2, [pc, #248]	@ (8003314 <TurnTask+0x378>)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4413      	add	r3, r2
 800321e:	331c      	adds	r3, #28
 8003220:	460a      	mov	r2, r1
 8003222:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.ServoPitchPos.u8t[i] = rxdata_servo[45+i];
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	332d      	adds	r3, #45	@ 0x2d
 8003228:	4a39      	ldr	r2, [pc, #228]	@ (8003310 <TurnTask+0x374>)
 800322a:	5cd1      	ldrb	r1, [r2, r3]
 800322c:	4a39      	ldr	r2, [pc, #228]	@ (8003314 <TurnTask+0x378>)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4413      	add	r3, r2
 8003232:	3320      	adds	r3, #32
 8003234:	460a      	mov	r2, r1
 8003236:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.YawSpeed.u8t[i] = rxdata_servo[49+i];
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3331      	adds	r3, #49	@ 0x31
 800323c:	4a34      	ldr	r2, [pc, #208]	@ (8003310 <TurnTask+0x374>)
 800323e:	5cd1      	ldrb	r1, [r2, r3]
 8003240:	4a34      	ldr	r2, [pc, #208]	@ (8003314 <TurnTask+0x378>)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4413      	add	r3, r2
 8003246:	3324      	adds	r3, #36	@ 0x24
 8003248:	460a      	mov	r2, r1
 800324a:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.PitchSpeed.u8t[i] = rxdata_servo[53+i];
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3335      	adds	r3, #53	@ 0x35
 8003250:	4a2f      	ldr	r2, [pc, #188]	@ (8003310 <TurnTask+0x374>)
 8003252:	5cd1      	ldrb	r1, [r2, r3]
 8003254:	4a2f      	ldr	r2, [pc, #188]	@ (8003314 <TurnTask+0x378>)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4413      	add	r3, r2
 800325a:	3328      	adds	r3, #40	@ 0x28
 800325c:	460a      	mov	r2, r1
 800325e:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.FSMXPosZero.u8t[i] = rxdata_servo[57+i];
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3339      	adds	r3, #57	@ 0x39
 8003264:	4a2a      	ldr	r2, [pc, #168]	@ (8003310 <TurnTask+0x374>)
 8003266:	5cd1      	ldrb	r1, [r2, r3]
 8003268:	4a2a      	ldr	r2, [pc, #168]	@ (8003314 <TurnTask+0x378>)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4413      	add	r3, r2
 800326e:	332c      	adds	r3, #44	@ 0x2c
 8003270:	460a      	mov	r2, r1
 8003272:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.FSMYPosZero.u8t[i] = rxdata_servo[61+i];
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	333d      	adds	r3, #61	@ 0x3d
 8003278:	4a25      	ldr	r2, [pc, #148]	@ (8003310 <TurnTask+0x374>)
 800327a:	5cd1      	ldrb	r1, [r2, r3]
 800327c:	4a25      	ldr	r2, [pc, #148]	@ (8003314 <TurnTask+0x378>)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4413      	add	r3, r2
 8003282:	3330      	adds	r3, #48	@ 0x30
 8003284:	460a      	mov	r2, r1
 8003286:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.TurnYawOutput.u8t[i] = rxdata_servo[65+i];
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3341      	adds	r3, #65	@ 0x41
 800328c:	4a20      	ldr	r2, [pc, #128]	@ (8003310 <TurnTask+0x374>)
 800328e:	5cd1      	ldrb	r1, [r2, r3]
 8003290:	4a20      	ldr	r2, [pc, #128]	@ (8003314 <TurnTask+0x378>)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4413      	add	r3, r2
 8003296:	3334      	adds	r3, #52	@ 0x34
 8003298:	460a      	mov	r2, r1
 800329a:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.TurnPitchOutput.u8t[i] = rxdata_servo[69+i];
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3345      	adds	r3, #69	@ 0x45
 80032a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003310 <TurnTask+0x374>)
 80032a2:	5cd1      	ldrb	r1, [r2, r3]
 80032a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003314 <TurnTask+0x378>)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4413      	add	r3, r2
 80032aa:	3338      	adds	r3, #56	@ 0x38
 80032ac:	460a      	mov	r2, r1
 80032ae:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.FSMXOutput.u8t[i] = rxdata_servo[73+i];
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3349      	adds	r3, #73	@ 0x49
 80032b4:	4a16      	ldr	r2, [pc, #88]	@ (8003310 <TurnTask+0x374>)
 80032b6:	5cd1      	ldrb	r1, [r2, r3]
 80032b8:	4a16      	ldr	r2, [pc, #88]	@ (8003314 <TurnTask+0x378>)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	333c      	adds	r3, #60	@ 0x3c
 80032c0:	460a      	mov	r2, r1
 80032c2:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.FSMYOutput.u8t[i] = rxdata_servo[77+i];
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	334d      	adds	r3, #77	@ 0x4d
 80032c8:	4a11      	ldr	r2, [pc, #68]	@ (8003310 <TurnTask+0x374>)
 80032ca:	5cd1      	ldrb	r1, [r2, r3]
 80032cc:	4a11      	ldr	r2, [pc, #68]	@ (8003314 <TurnTask+0x378>)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4413      	add	r3, r2
 80032d2:	3340      	adds	r3, #64	@ 0x40
 80032d4:	460a      	mov	r2, r1
 80032d6:	701a      	strb	r2, [r3, #0]
		 for(int i = 0;i < 4;i++)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	3301      	adds	r3, #1
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	dd81      	ble.n	80031e8 <TurnTask+0x24c>
		   #endif
		 }

		 ServoRevTypedef.ServoCrc                     =  rxdata_servo[81];
 80032e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003310 <TurnTask+0x374>)
 80032e6:	f893 2051 	ldrb.w	r2, [r3, #81]	@ 0x51
 80032ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <TurnTask+0x378>)
 80032ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		 ServoRevTypedef.ServoCheck                   =  rxdata_servo[82];
 80032f0:	4b07      	ldr	r3, [pc, #28]	@ (8003310 <TurnTask+0x374>)
 80032f2:	f893 2052 	ldrb.w	r2, [r3, #82]	@ 0x52
 80032f6:	4b07      	ldr	r3, [pc, #28]	@ (8003314 <TurnTask+0x378>)
 80032f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
//		         			  	HAL_UART_Transmit_DMA(&huart6, msg2, 12);
//		         			  			  osDelay(3000);
//		         uint8_t msg4[8] = {0xaa, 0x01, 0x08, 0x0f, 0x03, 0x00, 0x32, 0x9d};
//		         HAL_UART_Transmit(&huart6, msg4, 8,0xff);

		        memset(rxdata_servo,0,sizeof(rxdata_servo));
 80032fc:	2280      	movs	r2, #128	@ 0x80
 80032fe:	2100      	movs	r1, #0
 8003300:	4803      	ldr	r0, [pc, #12]	@ (8003310 <TurnTask+0x374>)
 8003302:	f022 f89b 	bl	802543c <memset>
//		  HAL_UART_Transmit_DMA(&huart5, rxdata_servo, rxSize);
	  }
    osDelay(20);
 8003306:	2014      	movs	r0, #20
 8003308:	f00f f90e 	bl	8012528 <osDelay>
	  if(osSemaphoreWait(BinaryServoHandle, 10) == osOK && taskTurnBegin == pdTRUE)
 800330c:	e64a      	b.n	8002fa4 <TurnTask+0x8>
 800330e:	bf00      	nop
 8003310:	30004b04 	.word	0x30004b04
 8003314:	24000450 	.word	0x24000450

08003318 <ImgCuTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ImgCuTask */
void ImgCuTask(void const * argument)
{
 8003318:	b590      	push	{r4, r7, lr}
 800331a:	b087      	sub	sp, #28
 800331c:	af02      	add	r7, sp, #8
 800331e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ImgCuTask */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(BinaryCuHandle, 10) == osOK && taskCuBegin == pdTRUE)
 8003320:	4b73      	ldr	r3, [pc, #460]	@ (80034f0 <ImgCuTask+0x1d8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	210a      	movs	r1, #10
 8003326:	4618      	mov	r0, r3
 8003328:	f00f f9e0 	bl	80126ec <osSemaphoreWait>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	f040 80d9 	bne.w	80034e6 <ImgCuTask+0x1ce>
 8003334:	4b6f      	ldr	r3, [pc, #444]	@ (80034f4 <ImgCuTask+0x1dc>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b01      	cmp	r3, #1
 800333a:	f040 80d4 	bne.w	80034e6 <ImgCuTask+0x1ce>
	  {
		ImgRecvDataTypedef_CU.code1.SelfCheck     = (rxdata_cu[3] & bit(0)) ? 1 : 0;
 800333e:	4b6e      	ldr	r3, [pc, #440]	@ (80034f8 <ImgCuTask+0x1e0>)
 8003340:	78db      	ldrb	r3, [r3, #3]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	b2da      	uxtb	r2, r3
 8003348:	4b6c      	ldr	r3, [pc, #432]	@ (80034fc <ImgCuTask+0x1e4>)
 800334a:	701a      	strb	r2, [r3, #0]
		ImgRecvDataTypedef_CU.code1.Standby       = (rxdata_cu[3] & bit(1)) ? 1 : 0;
 800334c:	4b6a      	ldr	r3, [pc, #424]	@ (80034f8 <ImgCuTask+0x1e0>)
 800334e:	78db      	ldrb	r3, [r3, #3]
 8003350:	105b      	asrs	r3, r3, #1
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	b2da      	uxtb	r2, r3
 800335a:	4b68      	ldr	r3, [pc, #416]	@ (80034fc <ImgCuTask+0x1e4>)
 800335c:	705a      	strb	r2, [r3, #1]
		ImgRecvDataTypedef_CU.code1.AutoTrack     = (rxdata_cu[3] & bit(2)) ? 1 : 0;
 800335e:	4b66      	ldr	r3, [pc, #408]	@ (80034f8 <ImgCuTask+0x1e0>)
 8003360:	78db      	ldrb	r3, [r3, #3]
 8003362:	109b      	asrs	r3, r3, #2
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	b2da      	uxtb	r2, r3
 800336c:	4b63      	ldr	r3, [pc, #396]	@ (80034fc <ImgCuTask+0x1e4>)
 800336e:	709a      	strb	r2, [r3, #2]
		ImgRecvDataTypedef_CU.code1.ManualTrack   = (rxdata_cu[3] & bit(3)) ? 1 : 0;
 8003370:	4b61      	ldr	r3, [pc, #388]	@ (80034f8 <ImgCuTask+0x1e0>)
 8003372:	78db      	ldrb	r3, [r3, #3]
 8003374:	10db      	asrs	r3, r3, #3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4b5f      	ldr	r3, [pc, #380]	@ (80034fc <ImgCuTask+0x1e4>)
 8003380:	70da      	strb	r2, [r3, #3]

		uart2_printf("selfcheck:%d,standby:%d,autotrack:%d,manualtrack:%d\r\n",ImgRecvDataTypedef_CU.code1.SelfCheck,ImgRecvDataTypedef_CU.code1.Standby,ImgRecvDataTypedef_CU.code1.AutoTrack,ImgRecvDataTypedef_CU.code1.ManualTrack);
 8003382:	4b5e      	ldr	r3, [pc, #376]	@ (80034fc <ImgCuTask+0x1e4>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	4619      	mov	r1, r3
 8003388:	4b5c      	ldr	r3, [pc, #368]	@ (80034fc <ImgCuTask+0x1e4>)
 800338a:	785b      	ldrb	r3, [r3, #1]
 800338c:	461a      	mov	r2, r3
 800338e:	4b5b      	ldr	r3, [pc, #364]	@ (80034fc <ImgCuTask+0x1e4>)
 8003390:	789b      	ldrb	r3, [r3, #2]
 8003392:	4618      	mov	r0, r3
 8003394:	4b59      	ldr	r3, [pc, #356]	@ (80034fc <ImgCuTask+0x1e4>)
 8003396:	78db      	ldrb	r3, [r3, #3]
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	4603      	mov	r3, r0
 800339c:	4858      	ldr	r0, [pc, #352]	@ (8003500 <ImgCuTask+0x1e8>)
 800339e:	f003 f93f 	bl	8006620 <uart2_printf>
		ImgRecvDataTypedef_CU.code2.CheckState    = (rxdata_cu[4] & bit(0)) ? 1 : 0;
 80033a2:	4b55      	ldr	r3, [pc, #340]	@ (80034f8 <ImgCuTask+0x1e0>)
 80033a4:	791b      	ldrb	r3, [r3, #4]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	4b53      	ldr	r3, [pc, #332]	@ (80034fc <ImgCuTask+0x1e4>)
 80033ae:	711a      	strb	r2, [r3, #4]
		ImgRecvDataTypedef_CU.code2.InitState     = (rxdata_cu[4] & bit(1)) ? 1 : 0;
 80033b0:	4b51      	ldr	r3, [pc, #324]	@ (80034f8 <ImgCuTask+0x1e0>)
 80033b2:	791b      	ldrb	r3, [r3, #4]
 80033b4:	105b      	asrs	r3, r3, #1
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	4b4f      	ldr	r3, [pc, #316]	@ (80034fc <ImgCuTask+0x1e4>)
 80033c0:	715a      	strb	r2, [r3, #5]
		ImgRecvDataTypedef_CU.code2.NormalTrack   = (rxdata_cu[4] & bit(2)) ? 1 : 0;
 80033c2:	4b4d      	ldr	r3, [pc, #308]	@ (80034f8 <ImgCuTask+0x1e0>)
 80033c4:	791b      	ldrb	r3, [r3, #4]
 80033c6:	109b      	asrs	r3, r3, #2
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	4b4a      	ldr	r3, [pc, #296]	@ (80034fc <ImgCuTask+0x1e4>)
 80033d2:	719a      	strb	r2, [r3, #6]
		ImgRecvDataTypedef_CU.code2.RememberTrack = (rxdata_cu[4] & bit(3)) ? 1 : 0;
 80033d4:	4b48      	ldr	r3, [pc, #288]	@ (80034f8 <ImgCuTask+0x1e0>)
 80033d6:	791b      	ldrb	r3, [r3, #4]
 80033d8:	10db      	asrs	r3, r3, #3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4b46      	ldr	r3, [pc, #280]	@ (80034fc <ImgCuTask+0x1e4>)
 80033e4:	71da      	strb	r2, [r3, #7]
		ImgRecvDataTypedef_CU.code2.TrackLose     = (rxdata_cu[4] & bit(4)) ? 1 : 0;
 80033e6:	4b44      	ldr	r3, [pc, #272]	@ (80034f8 <ImgCuTask+0x1e0>)
 80033e8:	791b      	ldrb	r3, [r3, #4]
 80033ea:	111b      	asrs	r3, r3, #4
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	4b41      	ldr	r3, [pc, #260]	@ (80034fc <ImgCuTask+0x1e4>)
 80033f6:	721a      	strb	r2, [r3, #8]
		
		uart2_printf("checkstate:%d,initstate:%d,normaltrack:%d,remembertrack:%d,tracklose:%d\r\n",ImgRecvDataTypedef_CU.code2.CheckState,ImgRecvDataTypedef_CU.code2.InitState,ImgRecvDataTypedef_CU.code2.NormalTrack,ImgRecvDataTypedef_CU.code2.RememberTrack,ImgRecvDataTypedef_CU.code2.TrackLose);
 80033f8:	4b40      	ldr	r3, [pc, #256]	@ (80034fc <ImgCuTask+0x1e4>)
 80033fa:	791b      	ldrb	r3, [r3, #4]
 80033fc:	4619      	mov	r1, r3
 80033fe:	4b3f      	ldr	r3, [pc, #252]	@ (80034fc <ImgCuTask+0x1e4>)
 8003400:	795b      	ldrb	r3, [r3, #5]
 8003402:	4618      	mov	r0, r3
 8003404:	4b3d      	ldr	r3, [pc, #244]	@ (80034fc <ImgCuTask+0x1e4>)
 8003406:	799b      	ldrb	r3, [r3, #6]
 8003408:	461c      	mov	r4, r3
 800340a:	4b3c      	ldr	r3, [pc, #240]	@ (80034fc <ImgCuTask+0x1e4>)
 800340c:	79db      	ldrb	r3, [r3, #7]
 800340e:	461a      	mov	r2, r3
 8003410:	4b3a      	ldr	r3, [pc, #232]	@ (80034fc <ImgCuTask+0x1e4>)
 8003412:	7a1b      	ldrb	r3, [r3, #8]
 8003414:	9301      	str	r3, [sp, #4]
 8003416:	9200      	str	r2, [sp, #0]
 8003418:	4623      	mov	r3, r4
 800341a:	4602      	mov	r2, r0
 800341c:	4839      	ldr	r0, [pc, #228]	@ (8003504 <ImgCuTask+0x1ec>)
 800341e:	f003 f8ff 	bl	8006620 <uart2_printf>

		ImgRecvDataTypedef_CU.WorkState           = rxdata_cu[5];
 8003422:	4b35      	ldr	r3, [pc, #212]	@ (80034f8 <ImgCuTask+0x1e0>)
 8003424:	795a      	ldrb	r2, [r3, #5]
 8003426:	4b35      	ldr	r3, [pc, #212]	@ (80034fc <ImgCuTask+0x1e4>)
 8003428:	72da      	strb	r2, [r3, #11]

		ImgRecvDataTypedef_CU.HardVersion         = (uint8_t)(rxdata_cu[8] & 00000111);
 800342a:	4b33      	ldr	r3, [pc, #204]	@ (80034f8 <ImgCuTask+0x1e0>)
 800342c:	7a1b      	ldrb	r3, [r3, #8]
 800342e:	f003 0349 	and.w	r3, r3, #73	@ 0x49
 8003432:	b2da      	uxtb	r2, r3
 8003434:	4b31      	ldr	r3, [pc, #196]	@ (80034fc <ImgCuTask+0x1e4>)
 8003436:	735a      	strb	r2, [r3, #13]
		ImgRecvDataTypedef_CU.SoftVersion         = (uint8_t)(rxdata_cu[8] & 01111000);
 8003438:	4b30      	ldr	r3, [pc, #192]	@ (80034fc <ImgCuTask+0x1e4>)
 800343a:	2200      	movs	r2, #0
 800343c:	731a      	strb	r2, [r3, #12]

		ImgRecvDataTypedef_CU.ImgCount            = rxdata_cu[7] << 8 | rxdata_cu[6];
 800343e:	4b2e      	ldr	r3, [pc, #184]	@ (80034f8 <ImgCuTask+0x1e0>)
 8003440:	79db      	ldrb	r3, [r3, #7]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	b21a      	sxth	r2, r3
 8003446:	4b2c      	ldr	r3, [pc, #176]	@ (80034f8 <ImgCuTask+0x1e0>)
 8003448:	799b      	ldrb	r3, [r3, #6]
 800344a:	b21b      	sxth	r3, r3
 800344c:	4313      	orrs	r3, r2
 800344e:	b21b      	sxth	r3, r3
 8003450:	b29a      	uxth	r2, r3
 8003452:	4b2a      	ldr	r3, [pc, #168]	@ (80034fc <ImgCuTask+0x1e4>)
 8003454:	81da      	strh	r2, [r3, #14]
		ImgRecvDataTypedef_CU.DataCount           = rxdata_cu[10] << 8 | rxdata_cu[9];
 8003456:	4b28      	ldr	r3, [pc, #160]	@ (80034f8 <ImgCuTask+0x1e0>)
 8003458:	7a9b      	ldrb	r3, [r3, #10]
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	b21a      	sxth	r2, r3
 800345e:	4b26      	ldr	r3, [pc, #152]	@ (80034f8 <ImgCuTask+0x1e0>)
 8003460:	7a5b      	ldrb	r3, [r3, #9]
 8003462:	b21b      	sxth	r3, r3
 8003464:	4313      	orrs	r3, r2
 8003466:	b21b      	sxth	r3, r3
 8003468:	b29a      	uxth	r2, r3
 800346a:	4b24      	ldr	r3, [pc, #144]	@ (80034fc <ImgCuTask+0x1e4>)
 800346c:	821a      	strh	r2, [r3, #16]

		int buff[2] = {0,0};
 800346e:	2300      	movs	r3, #0
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
		buff[0]							          = (rxdata_cu[15] << 28 | rxdata_cu[14] << 21 | rxdata_cu[13] << 14 | rxdata_cu[12] << 7 | rxdata_cu[11]);
 8003476:	4b20      	ldr	r3, [pc, #128]	@ (80034f8 <ImgCuTask+0x1e0>)
 8003478:	7bdb      	ldrb	r3, [r3, #15]
 800347a:	071a      	lsls	r2, r3, #28
 800347c:	4b1e      	ldr	r3, [pc, #120]	@ (80034f8 <ImgCuTask+0x1e0>)
 800347e:	7b9b      	ldrb	r3, [r3, #14]
 8003480:	055b      	lsls	r3, r3, #21
 8003482:	431a      	orrs	r2, r3
 8003484:	4b1c      	ldr	r3, [pc, #112]	@ (80034f8 <ImgCuTask+0x1e0>)
 8003486:	7b5b      	ldrb	r3, [r3, #13]
 8003488:	039b      	lsls	r3, r3, #14
 800348a:	431a      	orrs	r2, r3
 800348c:	4b1a      	ldr	r3, [pc, #104]	@ (80034f8 <ImgCuTask+0x1e0>)
 800348e:	7b1b      	ldrb	r3, [r3, #12]
 8003490:	01db      	lsls	r3, r3, #7
 8003492:	4313      	orrs	r3, r2
 8003494:	4a18      	ldr	r2, [pc, #96]	@ (80034f8 <ImgCuTask+0x1e0>)
 8003496:	7ad2      	ldrb	r2, [r2, #11]
 8003498:	4313      	orrs	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]
		buff[1]            						  = (rxdata_cu[20] << 28 | rxdata_cu[19] << 21 | rxdata_cu[18] << 14 | rxdata_cu[17] << 7 | rxdata_cu[16]);
 800349c:	4b16      	ldr	r3, [pc, #88]	@ (80034f8 <ImgCuTask+0x1e0>)
 800349e:	7d1b      	ldrb	r3, [r3, #20]
 80034a0:	071a      	lsls	r2, r3, #28
 80034a2:	4b15      	ldr	r3, [pc, #84]	@ (80034f8 <ImgCuTask+0x1e0>)
 80034a4:	7cdb      	ldrb	r3, [r3, #19]
 80034a6:	055b      	lsls	r3, r3, #21
 80034a8:	431a      	orrs	r2, r3
 80034aa:	4b13      	ldr	r3, [pc, #76]	@ (80034f8 <ImgCuTask+0x1e0>)
 80034ac:	7c9b      	ldrb	r3, [r3, #18]
 80034ae:	039b      	lsls	r3, r3, #14
 80034b0:	431a      	orrs	r2, r3
 80034b2:	4b11      	ldr	r3, [pc, #68]	@ (80034f8 <ImgCuTask+0x1e0>)
 80034b4:	7c5b      	ldrb	r3, [r3, #17]
 80034b6:	01db      	lsls	r3, r3, #7
 80034b8:	4313      	orrs	r3, r2
 80034ba:	4a0f      	ldr	r2, [pc, #60]	@ (80034f8 <ImgCuTask+0x1e0>)
 80034bc:	7c12      	ldrb	r2, [r2, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
		ImgRecvDataTypedef_CU.Offset_X            = *((float *)&buff[0]);
 80034c2:	f107 0308 	add.w	r3, r7, #8
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a0c      	ldr	r2, [pc, #48]	@ (80034fc <ImgCuTask+0x1e4>)
 80034ca:	6153      	str	r3, [r2, #20]
		ImgRecvDataTypedef_CU.Offset_Y            = *((float *)&buff[1]);
 80034cc:	f107 0308 	add.w	r3, r7, #8
 80034d0:	3304      	adds	r3, #4
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a09      	ldr	r2, [pc, #36]	@ (80034fc <ImgCuTask+0x1e4>)
 80034d6:	6193      	str	r3, [r2, #24]
		        // ImgRecvDataTypedef_CU.Offset_Y            = (rxdata_cu[20] << 28 | rxdata_cu[19] << 21 | rxdata_cu[18] << 14 | rxdata_cu[17] << 7 | rxdata_cu[16]) / 1.f;

//		        char msg[128];
		        // sprintf(msg,"x:%.2f,y:%.2f",ImgRecvDataTypedef_CU.Offset_X,ImgRecvDataTypedef_CU.Offset_Y);
		        // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)msg, strlen(msg));
		  memset(rxdata_cu,0,rxSize);
 80034d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003508 <ImgCuTask+0x1f0>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	2100      	movs	r1, #0
 80034e0:	4805      	ldr	r0, [pc, #20]	@ (80034f8 <ImgCuTask+0x1e0>)
 80034e2:	f021 ffab 	bl	802543c <memset>
	  }
    osDelay(10);
 80034e6:	200a      	movs	r0, #10
 80034e8:	f00f f81e 	bl	8012528 <osDelay>
	  if(osSemaphoreWait(BinaryCuHandle, 10) == osOK && taskCuBegin == pdTRUE)
 80034ec:	e718      	b.n	8003320 <ImgCuTask+0x8>
 80034ee:	bf00      	nop
 80034f0:	24000584 	.word	0x24000584
 80034f4:	24000558 	.word	0x24000558
 80034f8:	30004d04 	.word	0x30004d04
 80034fc:	24000400 	.word	0x24000400
 8003500:	080292d0 	.word	0x080292d0
 8003504:	08029308 	.word	0x08029308
 8003508:	24000550 	.word	0x24000550

0800350c <ImgJingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ImgJingTask */
void ImgJingTask(void const * argument)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ImgJingTask */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(BinaryJingHandle, 10) == osOK && taskJingBegin == pdTRUE)
 8003514:	4b60      	ldr	r3, [pc, #384]	@ (8003698 <ImgJingTask+0x18c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	210a      	movs	r1, #10
 800351a:	4618      	mov	r0, r3
 800351c:	f00f f8e6 	bl	80126ec <osSemaphoreWait>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	f040 80b4 	bne.w	8003690 <ImgJingTask+0x184>
 8003528:	4b5c      	ldr	r3, [pc, #368]	@ (800369c <ImgJingTask+0x190>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b01      	cmp	r3, #1
 800352e:	f040 80af 	bne.w	8003690 <ImgJingTask+0x184>
	  {
		  	ImgRecvDataTypedef_JING.code1.SelfCheck     = (rxdata_jing[3] & bit(0)) ? 1 : 0;
 8003532:	4b5b      	ldr	r3, [pc, #364]	@ (80036a0 <ImgJingTask+0x194>)
 8003534:	78db      	ldrb	r3, [r3, #3]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	b2da      	uxtb	r2, r3
 800353c:	4b59      	ldr	r3, [pc, #356]	@ (80036a4 <ImgJingTask+0x198>)
 800353e:	701a      	strb	r2, [r3, #0]
	        ImgRecvDataTypedef_JING.code1.Standby       = (rxdata_jing[3] & bit(1)) ? 1 : 0;
 8003540:	4b57      	ldr	r3, [pc, #348]	@ (80036a0 <ImgJingTask+0x194>)
 8003542:	78db      	ldrb	r3, [r3, #3]
 8003544:	105b      	asrs	r3, r3, #1
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	b2da      	uxtb	r2, r3
 800354e:	4b55      	ldr	r3, [pc, #340]	@ (80036a4 <ImgJingTask+0x198>)
 8003550:	705a      	strb	r2, [r3, #1]
	        ImgRecvDataTypedef_JING.code1.AutoTrack     = (rxdata_jing[3] & bit(2)) ? 1 : 0;
 8003552:	4b53      	ldr	r3, [pc, #332]	@ (80036a0 <ImgJingTask+0x194>)
 8003554:	78db      	ldrb	r3, [r3, #3]
 8003556:	109b      	asrs	r3, r3, #2
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	b2da      	uxtb	r2, r3
 8003560:	4b50      	ldr	r3, [pc, #320]	@ (80036a4 <ImgJingTask+0x198>)
 8003562:	709a      	strb	r2, [r3, #2]
	        ImgRecvDataTypedef_JING.code1.ManualTrack   = (rxdata_jing[3] & bit(3)) ? 1 : 0;
 8003564:	4b4e      	ldr	r3, [pc, #312]	@ (80036a0 <ImgJingTask+0x194>)
 8003566:	78db      	ldrb	r3, [r3, #3]
 8003568:	10db      	asrs	r3, r3, #3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	b2da      	uxtb	r2, r3
 8003572:	4b4c      	ldr	r3, [pc, #304]	@ (80036a4 <ImgJingTask+0x198>)
 8003574:	70da      	strb	r2, [r3, #3]

	        ImgRecvDataTypedef_JING.code2.CheckState    = (rxdata_jing[4] & bit(0)) ? 1 : 0;
 8003576:	4b4a      	ldr	r3, [pc, #296]	@ (80036a0 <ImgJingTask+0x194>)
 8003578:	791b      	ldrb	r3, [r3, #4]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	b2da      	uxtb	r2, r3
 8003580:	4b48      	ldr	r3, [pc, #288]	@ (80036a4 <ImgJingTask+0x198>)
 8003582:	711a      	strb	r2, [r3, #4]
	        ImgRecvDataTypedef_JING.code2.InitState     = (rxdata_jing[4] & bit(1)) ? 1 : 0;
 8003584:	4b46      	ldr	r3, [pc, #280]	@ (80036a0 <ImgJingTask+0x194>)
 8003586:	791b      	ldrb	r3, [r3, #4]
 8003588:	105b      	asrs	r3, r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	b2da      	uxtb	r2, r3
 8003592:	4b44      	ldr	r3, [pc, #272]	@ (80036a4 <ImgJingTask+0x198>)
 8003594:	715a      	strb	r2, [r3, #5]
	        ImgRecvDataTypedef_JING.code2.NormalTrack   = (rxdata_jing[4] & bit(2)) ? 1 : 0;
 8003596:	4b42      	ldr	r3, [pc, #264]	@ (80036a0 <ImgJingTask+0x194>)
 8003598:	791b      	ldrb	r3, [r3, #4]
 800359a:	109b      	asrs	r3, r3, #2
 800359c:	b2db      	uxtb	r3, r3
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	4b3f      	ldr	r3, [pc, #252]	@ (80036a4 <ImgJingTask+0x198>)
 80035a6:	719a      	strb	r2, [r3, #6]
	        ImgRecvDataTypedef_JING.code2.RememberTrack = (rxdata_jing[4] & bit(3)) ? 1 : 0;
 80035a8:	4b3d      	ldr	r3, [pc, #244]	@ (80036a0 <ImgJingTask+0x194>)
 80035aa:	791b      	ldrb	r3, [r3, #4]
 80035ac:	10db      	asrs	r3, r3, #3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	4b3b      	ldr	r3, [pc, #236]	@ (80036a4 <ImgJingTask+0x198>)
 80035b8:	71da      	strb	r2, [r3, #7]
	        ImgRecvDataTypedef_JING.code2.TrackLose     = (rxdata_jing[4] & bit(4)) ? 1 : 0;
 80035ba:	4b39      	ldr	r3, [pc, #228]	@ (80036a0 <ImgJingTask+0x194>)
 80035bc:	791b      	ldrb	r3, [r3, #4]
 80035be:	111b      	asrs	r3, r3, #4
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	4b36      	ldr	r3, [pc, #216]	@ (80036a4 <ImgJingTask+0x198>)
 80035ca:	721a      	strb	r2, [r3, #8]

	        ImgRecvDataTypedef_JING.WorkState           = rxdata_jing[5];
 80035cc:	4b34      	ldr	r3, [pc, #208]	@ (80036a0 <ImgJingTask+0x194>)
 80035ce:	795a      	ldrb	r2, [r3, #5]
 80035d0:	4b34      	ldr	r3, [pc, #208]	@ (80036a4 <ImgJingTask+0x198>)
 80035d2:	72da      	strb	r2, [r3, #11]

	        ImgRecvDataTypedef_JING.HardVersion         = (uint8_t)(rxdata_jing[8] & 00000111);
 80035d4:	4b32      	ldr	r3, [pc, #200]	@ (80036a0 <ImgJingTask+0x194>)
 80035d6:	7a1b      	ldrb	r3, [r3, #8]
 80035d8:	f003 0349 	and.w	r3, r3, #73	@ 0x49
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	4b31      	ldr	r3, [pc, #196]	@ (80036a4 <ImgJingTask+0x198>)
 80035e0:	735a      	strb	r2, [r3, #13]
	        ImgRecvDataTypedef_JING.SoftVersion         = (uint8_t)(rxdata_jing[8] & 01111000);
 80035e2:	4b30      	ldr	r3, [pc, #192]	@ (80036a4 <ImgJingTask+0x198>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	731a      	strb	r2, [r3, #12]

	        ImgRecvDataTypedef_JING.ImgCount            = rxdata_jing[7] << 8 | rxdata_jing[6];
 80035e8:	4b2d      	ldr	r3, [pc, #180]	@ (80036a0 <ImgJingTask+0x194>)
 80035ea:	79db      	ldrb	r3, [r3, #7]
 80035ec:	021b      	lsls	r3, r3, #8
 80035ee:	b21a      	sxth	r2, r3
 80035f0:	4b2b      	ldr	r3, [pc, #172]	@ (80036a0 <ImgJingTask+0x194>)
 80035f2:	799b      	ldrb	r3, [r3, #6]
 80035f4:	b21b      	sxth	r3, r3
 80035f6:	4313      	orrs	r3, r2
 80035f8:	b21b      	sxth	r3, r3
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	4b29      	ldr	r3, [pc, #164]	@ (80036a4 <ImgJingTask+0x198>)
 80035fe:	81da      	strh	r2, [r3, #14]
	        ImgRecvDataTypedef_JING.DataCount           = rxdata_jing[10] << 8 | rxdata_jing[9];
 8003600:	4b27      	ldr	r3, [pc, #156]	@ (80036a0 <ImgJingTask+0x194>)
 8003602:	7a9b      	ldrb	r3, [r3, #10]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	b21a      	sxth	r2, r3
 8003608:	4b25      	ldr	r3, [pc, #148]	@ (80036a0 <ImgJingTask+0x194>)
 800360a:	7a5b      	ldrb	r3, [r3, #9]
 800360c:	b21b      	sxth	r3, r3
 800360e:	4313      	orrs	r3, r2
 8003610:	b21b      	sxth	r3, r3
 8003612:	b29a      	uxth	r2, r3
 8003614:	4b23      	ldr	r3, [pc, #140]	@ (80036a4 <ImgJingTask+0x198>)
 8003616:	821a      	strh	r2, [r3, #16]
	        
			int buff[2] = {0,0};
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	2300      	movs	r3, #0
 800361e:	60fb      	str	r3, [r7, #12]
			buff[0]							            = (rxdata_jing[15] << 28 | rxdata_jing[14] << 21 | rxdata_jing[13] << 14 | rxdata_jing[12] << 7 | rxdata_jing[11]);
 8003620:	4b1f      	ldr	r3, [pc, #124]	@ (80036a0 <ImgJingTask+0x194>)
 8003622:	7bdb      	ldrb	r3, [r3, #15]
 8003624:	071a      	lsls	r2, r3, #28
 8003626:	4b1e      	ldr	r3, [pc, #120]	@ (80036a0 <ImgJingTask+0x194>)
 8003628:	7b9b      	ldrb	r3, [r3, #14]
 800362a:	055b      	lsls	r3, r3, #21
 800362c:	431a      	orrs	r2, r3
 800362e:	4b1c      	ldr	r3, [pc, #112]	@ (80036a0 <ImgJingTask+0x194>)
 8003630:	7b5b      	ldrb	r3, [r3, #13]
 8003632:	039b      	lsls	r3, r3, #14
 8003634:	431a      	orrs	r2, r3
 8003636:	4b1a      	ldr	r3, [pc, #104]	@ (80036a0 <ImgJingTask+0x194>)
 8003638:	7b1b      	ldrb	r3, [r3, #12]
 800363a:	01db      	lsls	r3, r3, #7
 800363c:	4313      	orrs	r3, r2
 800363e:	4a18      	ldr	r2, [pc, #96]	@ (80036a0 <ImgJingTask+0x194>)
 8003640:	7ad2      	ldrb	r2, [r2, #11]
 8003642:	4313      	orrs	r3, r2
 8003644:	60bb      	str	r3, [r7, #8]
	        buff[1]            							= (rxdata_jing[20] << 28 | rxdata_jing[19] << 21 | rxdata_jing[18] << 14 | rxdata_jing[17] << 7 | rxdata_jing[16]);
 8003646:	4b16      	ldr	r3, [pc, #88]	@ (80036a0 <ImgJingTask+0x194>)
 8003648:	7d1b      	ldrb	r3, [r3, #20]
 800364a:	071a      	lsls	r2, r3, #28
 800364c:	4b14      	ldr	r3, [pc, #80]	@ (80036a0 <ImgJingTask+0x194>)
 800364e:	7cdb      	ldrb	r3, [r3, #19]
 8003650:	055b      	lsls	r3, r3, #21
 8003652:	431a      	orrs	r2, r3
 8003654:	4b12      	ldr	r3, [pc, #72]	@ (80036a0 <ImgJingTask+0x194>)
 8003656:	7c9b      	ldrb	r3, [r3, #18]
 8003658:	039b      	lsls	r3, r3, #14
 800365a:	431a      	orrs	r2, r3
 800365c:	4b10      	ldr	r3, [pc, #64]	@ (80036a0 <ImgJingTask+0x194>)
 800365e:	7c5b      	ldrb	r3, [r3, #17]
 8003660:	01db      	lsls	r3, r3, #7
 8003662:	4313      	orrs	r3, r2
 8003664:	4a0e      	ldr	r2, [pc, #56]	@ (80036a0 <ImgJingTask+0x194>)
 8003666:	7c12      	ldrb	r2, [r2, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
			ImgRecvDataTypedef_JING.Offset_X            = *((float *)&buff[0]);
 800366c:	f107 0308 	add.w	r3, r7, #8
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a0c      	ldr	r2, [pc, #48]	@ (80036a4 <ImgJingTask+0x198>)
 8003674:	6153      	str	r3, [r2, #20]
	        ImgRecvDataTypedef_JING.Offset_Y            = *((float *)&buff[1]);
 8003676:	f107 0308 	add.w	r3, r7, #8
 800367a:	3304      	adds	r3, #4
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a09      	ldr	r2, [pc, #36]	@ (80036a4 <ImgJingTask+0x198>)
 8003680:	6193      	str	r3, [r2, #24]
			// uart_printf("workstate:%d,hardversion:%d,softversion:%d,imgcount:%d,datacount:%d,offsetx:%.2f,offsety:%.2f\r\n",ImgRecvDataTypedef_JING.WorkState,ImgRecvDataTypedef_JING.HardVersion,ImgRecvDataTypedef_JING.SoftVersion,ImgRecvDataTypedef_JING.ImgCount,ImgRecvDataTypedef_JING.DataCount,ImgRecvDataTypedef_JING.Offset_X,ImgRecvDataTypedef_JING.Offset_Y);

//	        char msg[128];
	        // sprintf(msg,"x:%.2f,y:%.2f",ImgRecvDataTypedef_JING.Offset_X,ImgRecvDataTypedef_JING.Offset_Y);
//	         uart_printf("%s",msg);
	        memset(rxdata_cu,0,rxSize);
 8003682:	4b09      	ldr	r3, [pc, #36]	@ (80036a8 <ImgJingTask+0x19c>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	2100      	movs	r1, #0
 800368a:	4808      	ldr	r0, [pc, #32]	@ (80036ac <ImgJingTask+0x1a0>)
 800368c:	f021 fed6 	bl	802543c <memset>
	  }
    osDelay(10);
 8003690:	200a      	movs	r0, #10
 8003692:	f00e ff49 	bl	8012528 <osDelay>
	  if(osSemaphoreWait(BinaryJingHandle, 10) == osOK && taskJingBegin == pdTRUE)
 8003696:	e73d      	b.n	8003514 <ImgJingTask+0x8>
 8003698:	24000588 	.word	0x24000588
 800369c:	2400055c 	.word	0x2400055c
 80036a0:	30004e04 	.word	0x30004e04
 80036a4:	2400041c 	.word	0x2400041c
 80036a8:	24000550 	.word	0x24000550
 80036ac:	30004d04 	.word	0x30004d04

080036b0 <FocusTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FocusTask */
void FocusTask(void const * argument)
{
 80036b0:	b5b0      	push	{r4, r5, r7, lr}
 80036b2:	b0a6      	sub	sp, #152	@ 0x98
 80036b4:	af04      	add	r7, sp, #16
 80036b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FocusTask */

  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(BinaryFocusHandle, 10) == osOK && taskFocusBegin == pdTRUE)
 80036b8:	4b23      	ldr	r3, [pc, #140]	@ (8003748 <FocusTask+0x98>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	210a      	movs	r1, #10
 80036be:	4618      	mov	r0, r3
 80036c0:	f00f f814 	bl	80126ec <osSemaphoreWait>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d13a      	bne.n	8003740 <FocusTask+0x90>
 80036ca:	4b20      	ldr	r3, [pc, #128]	@ (800374c <FocusTask+0x9c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d136      	bne.n	8003740 <FocusTask+0x90>
	  {
		  getFocusPos.u8t[3] = rxdata_focus[6];
 80036d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003750 <FocusTask+0xa0>)
 80036d4:	799a      	ldrb	r2, [r3, #6]
 80036d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003754 <FocusTask+0xa4>)
 80036d8:	70da      	strb	r2, [r3, #3]
		  getFocusPos.u8t[2] = rxdata_focus[7];
 80036da:	4b1d      	ldr	r3, [pc, #116]	@ (8003750 <FocusTask+0xa0>)
 80036dc:	79da      	ldrb	r2, [r3, #7]
 80036de:	4b1d      	ldr	r3, [pc, #116]	@ (8003754 <FocusTask+0xa4>)
 80036e0:	709a      	strb	r2, [r3, #2]
		  getFocusPos.u8t[1] = rxdata_focus[8];
 80036e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003750 <FocusTask+0xa0>)
 80036e4:	7a1a      	ldrb	r2, [r3, #8]
 80036e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003754 <FocusTask+0xa4>)
 80036e8:	705a      	strb	r2, [r3, #1]
		  getFocusPos.u8t[0] = rxdata_focus[9];
 80036ea:	4b19      	ldr	r3, [pc, #100]	@ (8003750 <FocusTask+0xa0>)
 80036ec:	7a5a      	ldrb	r2, [r3, #9]
 80036ee:	4b19      	ldr	r3, [pc, #100]	@ (8003754 <FocusTask+0xa4>)
 80036f0:	701a      	strb	r2, [r3, #0]

		        char msg[128];
		        sprintf(msg,"%02x,%02x,%02x,%02x,pos:%f",rxdata_focus[6],rxdata_focus[7],rxdata_focus[8],rxdata_focus[9],getFocusPos.f);
 80036f2:	4b17      	ldr	r3, [pc, #92]	@ (8003750 <FocusTask+0xa0>)
 80036f4:	799b      	ldrb	r3, [r3, #6]
 80036f6:	461c      	mov	r4, r3
 80036f8:	4b15      	ldr	r3, [pc, #84]	@ (8003750 <FocusTask+0xa0>)
 80036fa:	79db      	ldrb	r3, [r3, #7]
 80036fc:	461d      	mov	r5, r3
 80036fe:	4b14      	ldr	r3, [pc, #80]	@ (8003750 <FocusTask+0xa0>)
 8003700:	7a1b      	ldrb	r3, [r3, #8]
 8003702:	461a      	mov	r2, r3
 8003704:	4b12      	ldr	r3, [pc, #72]	@ (8003750 <FocusTask+0xa0>)
 8003706:	7a5b      	ldrb	r3, [r3, #9]
 8003708:	4619      	mov	r1, r3
 800370a:	4b12      	ldr	r3, [pc, #72]	@ (8003754 <FocusTask+0xa4>)
 800370c:	edd3 7a00 	vldr	s15, [r3]
 8003710:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003714:	f107 0008 	add.w	r0, r7, #8
 8003718:	ed8d 7b02 	vstr	d7, [sp, #8]
 800371c:	9101      	str	r1, [sp, #4]
 800371e:	9200      	str	r2, [sp, #0]
 8003720:	462b      	mov	r3, r5
 8003722:	4622      	mov	r2, r4
 8003724:	490c      	ldr	r1, [pc, #48]	@ (8003758 <FocusTask+0xa8>)
 8003726:	f021 fdaf 	bl	8025288 <siprintf>
		        // HAL_UART_Transmit(&huart5, (uint8_t *)msg, strlen(msg), 0xff);
				uart_printf("%s",msg);
 800372a:	f107 0308 	add.w	r3, r7, #8
 800372e:	4619      	mov	r1, r3
 8003730:	480a      	ldr	r0, [pc, #40]	@ (800375c <FocusTask+0xac>)
 8003732:	f001 fac1 	bl	8004cb8 <uart_printf>
		        memset(rxdata_focus,0,sizeof(rxdata_focus));
 8003736:	220b      	movs	r2, #11
 8003738:	2100      	movs	r1, #0
 800373a:	4805      	ldr	r0, [pc, #20]	@ (8003750 <FocusTask+0xa0>)
 800373c:	f021 fe7e 	bl	802543c <memset>
	  }

    osDelay(100);
 8003740:	2064      	movs	r0, #100	@ 0x64
 8003742:	f00e fef1 	bl	8012528 <osDelay>
	  if(osSemaphoreWait(BinaryFocusHandle, 10) == osOK && taskFocusBegin == pdTRUE)
 8003746:	e7b7      	b.n	80036b8 <FocusTask+0x8>
 8003748:	2400058c 	.word	0x2400058c
 800374c:	24000560 	.word	0x24000560
 8003750:	30004f04 	.word	0x30004f04
 8003754:	240003f8 	.word	0x240003f8
 8003758:	08029354 	.word	0x08029354
 800375c:	08029370 	.word	0x08029370

08003760 <RangefinderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RangefinderTask */
void RangefinderTask(void const * argument)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RangefinderTask */
	// TODO:掉电�???????要重新设�???????
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(BinaryRangefinderHandle, 10) == osOK && taskRangeBegin == pdTRUE)
 8003768:	4b71      	ldr	r3, [pc, #452]	@ (8003930 <RangefinderTask+0x1d0>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	210a      	movs	r1, #10
 800376e:	4618      	mov	r0, r3
 8003770:	f00e ffbc 	bl	80126ec <osSemaphoreWait>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	f040 80d1 	bne.w	800391e <RangefinderTask+0x1be>
 800377c:	4b6d      	ldr	r3, [pc, #436]	@ (8003934 <RangefinderTask+0x1d4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b01      	cmp	r3, #1
 8003782:	f040 80cc 	bne.w	800391e <RangefinderTask+0x1be>
		// for(int i = 0;i < rxSize;i++)
	  	// {
		// 	uart_printf("%02x ",rxdata_rangefinder[i]);
		// }

		  switch (rxdata_rangefinder[4])
 8003786:	4b6c      	ldr	r3, [pc, #432]	@ (8003938 <RangefinderTask+0x1d8>)
 8003788:	791b      	ldrb	r3, [r3, #4]
 800378a:	3b01      	subs	r3, #1
 800378c:	2b05      	cmp	r3, #5
 800378e:	f200 80b6 	bhi.w	80038fe <RangefinderTask+0x19e>
 8003792:	a201      	add	r2, pc, #4	@ (adr r2, 8003798 <RangefinderTask+0x38>)
 8003794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003798:	080037b1 	.word	0x080037b1
 800379c:	0800382b 	.word	0x0800382b
 80037a0:	080038ff 	.word	0x080038ff
 80037a4:	08003863 	.word	0x08003863
 80037a8:	080038ff 	.word	0x080038ff
 80037ac:	0800389b 	.word	0x0800389b
		        {
		          case DeviceCheck:{
		            RangeFinderRevData.HuiBoValue = rxdata_rangefinder[6];
 80037b0:	4b61      	ldr	r3, [pc, #388]	@ (8003938 <RangefinderTask+0x1d8>)
 80037b2:	799a      	ldrb	r2, [r3, #6]
 80037b4:	4b61      	ldr	r3, [pc, #388]	@ (800393c <RangefinderTask+0x1dc>)
 80037b6:	701a      	strb	r2, [r3, #0]
		            RangeFinderRevData.FPGAState  = rxdata_rangefinder[7] & bit(0) ? 1 : 0;
 80037b8:	4b5f      	ldr	r3, [pc, #380]	@ (8003938 <RangefinderTask+0x1d8>)
 80037ba:	79db      	ldrb	r3, [r3, #7]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	4b5e      	ldr	r3, [pc, #376]	@ (800393c <RangefinderTask+0x1dc>)
 80037c4:	705a      	strb	r2, [r3, #1]
		            RangeFinderRevData.RayState   = rxdata_rangefinder[7] & bit(1) ? 1 : 0;
 80037c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003938 <RangefinderTask+0x1d8>)
 80037c8:	79db      	ldrb	r3, [r3, #7]
 80037ca:	105b      	asrs	r3, r3, #1
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	4b59      	ldr	r3, [pc, #356]	@ (800393c <RangefinderTask+0x1dc>)
 80037d6:	709a      	strb	r2, [r3, #2]
		            RangeFinderRevData.ZhuBoState = rxdata_rangefinder[7] & bit(2) ? 1 : 0;
 80037d8:	4b57      	ldr	r3, [pc, #348]	@ (8003938 <RangefinderTask+0x1d8>)
 80037da:	79db      	ldrb	r3, [r3, #7]
 80037dc:	109b      	asrs	r3, r3, #2
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4b55      	ldr	r3, [pc, #340]	@ (800393c <RangefinderTask+0x1dc>)
 80037e8:	70da      	strb	r2, [r3, #3]
		            RangeFinderRevData.HuiBoState = rxdata_rangefinder[7] & bit(3) ? 1 : 0;
 80037ea:	4b53      	ldr	r3, [pc, #332]	@ (8003938 <RangefinderTask+0x1d8>)
 80037ec:	79db      	ldrb	r3, [r3, #7]
 80037ee:	10db      	asrs	r3, r3, #3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	4b50      	ldr	r3, [pc, #320]	@ (800393c <RangefinderTask+0x1dc>)
 80037fa:	711a      	strb	r2, [r3, #4]
		            RangeFinderRevData.TempState  = rxdata_rangefinder[7] & bit(6) ? 1 : 0;
 80037fc:	4b4e      	ldr	r3, [pc, #312]	@ (8003938 <RangefinderTask+0x1d8>)
 80037fe:	79db      	ldrb	r3, [r3, #7]
 8003800:	119b      	asrs	r3, r3, #6
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	b2da      	uxtb	r2, r3
 800380a:	4b4c      	ldr	r3, [pc, #304]	@ (800393c <RangefinderTask+0x1dc>)
 800380c:	715a      	strb	r2, [r3, #5]
		            RangeFinderRevData.RayOn      = rxdata_rangefinder[7] & bit(7) ? 1 : 0;
 800380e:	4b4a      	ldr	r3, [pc, #296]	@ (8003938 <RangefinderTask+0x1d8>)
 8003810:	79db      	ldrb	r3, [r3, #7]
 8003812:	09db      	lsrs	r3, r3, #7
 8003814:	b2da      	uxtb	r2, r3
 8003816:	4b49      	ldr	r3, [pc, #292]	@ (800393c <RangefinderTask+0x1dc>)
 8003818:	719a      	strb	r2, [r3, #6]
		            RangeFinderRevData.PowerState = rxdata_rangefinder[8] & bit(0) ? 1 : 0;
 800381a:	4b47      	ldr	r3, [pc, #284]	@ (8003938 <RangefinderTask+0x1d8>)
 800381c:	7a1b      	ldrb	r3, [r3, #8]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	b2da      	uxtb	r2, r3
 8003824:	4b45      	ldr	r3, [pc, #276]	@ (800393c <RangefinderTask+0x1dc>)
 8003826:	71da      	strb	r2, [r3, #7]
		          }break;
 8003828:	e06a      	b.n	8003900 <RangefinderTask+0x1a0>
		          case SingleMeasure:{
		            RangeFinderRevData.Distance   = rxdata_rangefinder[6] * 256 + rxdata_rangefinder[7] + rxdata_rangefinder[8] * 0.1;
 800382a:	4b43      	ldr	r3, [pc, #268]	@ (8003938 <RangefinderTask+0x1d8>)
 800382c:	799b      	ldrb	r3, [r3, #6]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	4a41      	ldr	r2, [pc, #260]	@ (8003938 <RangefinderTask+0x1d8>)
 8003832:	79d2      	ldrb	r2, [r2, #7]
 8003834:	4413      	add	r3, r2
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800383e:	4b3e      	ldr	r3, [pc, #248]	@ (8003938 <RangefinderTask+0x1d8>)
 8003840:	7a1b      	ldrb	r3, [r3, #8]
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800384a:	ed9f 5b37 	vldr	d5, [pc, #220]	@ 8003928 <RangefinderTask+0x1c8>
 800384e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003852:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003856:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800385a:	4b38      	ldr	r3, [pc, #224]	@ (800393c <RangefinderTask+0x1dc>)
 800385c:	edc3 7a02 	vstr	s15, [r3, #8]

		          }break;
 8003860:	e04e      	b.n	8003900 <RangefinderTask+0x1a0>
		          case MultiMeasure:{
		            RangeFinderRevData.Distance   = rxdata_rangefinder[6] * 256 + rxdata_rangefinder[7] + rxdata_rangefinder[8] * 0.1;
 8003862:	4b35      	ldr	r3, [pc, #212]	@ (8003938 <RangefinderTask+0x1d8>)
 8003864:	799b      	ldrb	r3, [r3, #6]
 8003866:	021b      	lsls	r3, r3, #8
 8003868:	4a33      	ldr	r2, [pc, #204]	@ (8003938 <RangefinderTask+0x1d8>)
 800386a:	79d2      	ldrb	r2, [r2, #7]
 800386c:	4413      	add	r3, r2
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003876:	4b30      	ldr	r3, [pc, #192]	@ (8003938 <RangefinderTask+0x1d8>)
 8003878:	7a1b      	ldrb	r3, [r3, #8]
 800387a:	ee07 3a90 	vmov	s15, r3
 800387e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003882:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8003928 <RangefinderTask+0x1c8>
 8003886:	ee27 7b05 	vmul.f64	d7, d7, d5
 800388a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800388e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003892:	4b2a      	ldr	r3, [pc, #168]	@ (800393c <RangefinderTask+0x1dc>)
 8003894:	edc3 7a02 	vstr	s15, [r3, #8]
		          }break;
 8003898:	e032      	b.n	8003900 <RangefinderTask+0x1a0>
		          case DeviceError:{
		            RangeFinderRevData.FPGAState  = rxdata_rangefinder[8] & bit(0) ? 1 : 0;
 800389a:	4b27      	ldr	r3, [pc, #156]	@ (8003938 <RangefinderTask+0x1d8>)
 800389c:	7a1b      	ldrb	r3, [r3, #8]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	4b25      	ldr	r3, [pc, #148]	@ (800393c <RangefinderTask+0x1dc>)
 80038a6:	705a      	strb	r2, [r3, #1]
		            RangeFinderRevData.RayState   = rxdata_rangefinder[8] & bit(1) ? 1 : 0;
 80038a8:	4b23      	ldr	r3, [pc, #140]	@ (8003938 <RangefinderTask+0x1d8>)
 80038aa:	7a1b      	ldrb	r3, [r3, #8]
 80038ac:	105b      	asrs	r3, r3, #1
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	4b21      	ldr	r3, [pc, #132]	@ (800393c <RangefinderTask+0x1dc>)
 80038b8:	709a      	strb	r2, [r3, #2]
		            RangeFinderRevData.ZhuBoState = rxdata_rangefinder[8] & bit(2) ? 1 : 0;
 80038ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003938 <RangefinderTask+0x1d8>)
 80038bc:	7a1b      	ldrb	r3, [r3, #8]
 80038be:	109b      	asrs	r3, r3, #2
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	4b1c      	ldr	r3, [pc, #112]	@ (800393c <RangefinderTask+0x1dc>)
 80038ca:	70da      	strb	r2, [r3, #3]
		            RangeFinderRevData.HuiBoState = rxdata_rangefinder[8] & bit(3) ? 1 : 0;
 80038cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003938 <RangefinderTask+0x1d8>)
 80038ce:	7a1b      	ldrb	r3, [r3, #8]
 80038d0:	10db      	asrs	r3, r3, #3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	4b18      	ldr	r3, [pc, #96]	@ (800393c <RangefinderTask+0x1dc>)
 80038dc:	711a      	strb	r2, [r3, #4]
		            RangeFinderRevData.TempState  = rxdata_rangefinder[8] & bit(6) ? 1 : 0;
 80038de:	4b16      	ldr	r3, [pc, #88]	@ (8003938 <RangefinderTask+0x1d8>)
 80038e0:	7a1b      	ldrb	r3, [r3, #8]
 80038e2:	119b      	asrs	r3, r3, #6
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	4b13      	ldr	r3, [pc, #76]	@ (800393c <RangefinderTask+0x1dc>)
 80038ee:	715a      	strb	r2, [r3, #5]
		            RangeFinderRevData.RayOn      = rxdata_rangefinder[8] & bit(7) ? 1 : 0;
 80038f0:	4b11      	ldr	r3, [pc, #68]	@ (8003938 <RangefinderTask+0x1d8>)
 80038f2:	7a1b      	ldrb	r3, [r3, #8]
 80038f4:	09db      	lsrs	r3, r3, #7
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	4b10      	ldr	r3, [pc, #64]	@ (800393c <RangefinderTask+0x1dc>)
 80038fa:	719a      	strb	r2, [r3, #6]
		          }break;
 80038fc:	e000      	b.n	8003900 <RangefinderTask+0x1a0>
		          default:
		            break;
 80038fe:	bf00      	nop
		        }
				uart_printf("distance:%.2f\r\n",RangeFinderRevData.Distance);
 8003900:	4b0e      	ldr	r3, [pc, #56]	@ (800393c <RangefinderTask+0x1dc>)
 8003902:	edd3 7a02 	vldr	s15, [r3, #8]
 8003906:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800390a:	ec53 2b17 	vmov	r2, r3, d7
 800390e:	480c      	ldr	r0, [pc, #48]	@ (8003940 <RangefinderTask+0x1e0>)
 8003910:	f001 f9d2 	bl	8004cb8 <uart_printf>
		//   char msg[128];
		//         sprintf(msg,"distance = %.2f\r\n",RangeFinderRevData.Distance);
		//         HAL_UART_Transmit_DMA(&huart5, (uint8_t*)msg, strlen(msg));
		        memset(rxdata_rangefinder,0,sizeof(rxdata_rangefinder));
 8003914:	2280      	movs	r2, #128	@ 0x80
 8003916:	2100      	movs	r1, #0
 8003918:	4807      	ldr	r0, [pc, #28]	@ (8003938 <RangefinderTask+0x1d8>)
 800391a:	f021 fd8f 	bl	802543c <memset>
	  }
    osDelay(10);
 800391e:	200a      	movs	r0, #10
 8003920:	f00e fe02 	bl	8012528 <osDelay>
	  if(osSemaphoreWait(BinaryRangefinderHandle, 10) == osOK && taskRangeBegin == pdTRUE)
 8003924:	e720      	b.n	8003768 <RangefinderTask+0x8>
 8003926:	bf00      	nop
 8003928:	9999999a 	.word	0x9999999a
 800392c:	3fb99999 	.word	0x3fb99999
 8003930:	24000590 	.word	0x24000590
 8003934:	24000564 	.word	0x24000564
 8003938:	30004f1c 	.word	0x30004f1c
 800393c:	24000438 	.word	0x24000438
 8003940:	08029374 	.word	0x08029374

08003944 <HAL_UARTEx_RxEventCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003944:	b590      	push	{r4, r7, lr}
 8003946:	b085      	sub	sp, #20
 8003948:	af02      	add	r7, sp, #8
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  UNUSED(Size);
  rxSize = Size;
 8003950:	887b      	ldrh	r3, [r7, #2]
 8003952:	b2da      	uxtb	r2, r3
 8003954:	4b4c      	ldr	r3, [pc, #304]	@ (8003a88 <HAL_UARTEx_RxEventCallback+0x144>)
 8003956:	701a      	strb	r2, [r3, #0]
//   static float fPm1, fPm2, fPm3;
// 	static int iPm1, iPm2, iPm3;
  if(huart == &huart5)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a4c      	ldr	r2, [pc, #304]	@ (8003a8c <HAL_UARTEx_RxEventCallback+0x148>)
 800395c:	4293      	cmp	r3, r2
 800395e:	f040 80c3 	bne.w	8003ae8 <HAL_UARTEx_RxEventCallback+0x1a4>
  {
	  taskTurnBegin = pdTRUE;
 8003962:	4b4b      	ldr	r3, [pc, #300]	@ (8003a90 <HAL_UARTEx_RxEventCallback+0x14c>)
 8003964:	2201      	movs	r2, #1
 8003966:	601a      	str	r2, [r3, #0]
	  if(rxbuff_servo[0] == 0xEB && rxbuff_servo[1] == 0x90 && rxbuff_servo[Size - 1] == 0xFE)
 8003968:	4b4a      	ldr	r3, [pc, #296]	@ (8003a94 <HAL_UARTEx_RxEventCallback+0x150>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2beb      	cmp	r3, #235	@ 0xeb
 800396e:	d122      	bne.n	80039b6 <HAL_UARTEx_RxEventCallback+0x72>
 8003970:	4b48      	ldr	r3, [pc, #288]	@ (8003a94 <HAL_UARTEx_RxEventCallback+0x150>)
 8003972:	785b      	ldrb	r3, [r3, #1]
 8003974:	2b90      	cmp	r3, #144	@ 0x90
 8003976:	d11e      	bne.n	80039b6 <HAL_UARTEx_RxEventCallback+0x72>
 8003978:	887b      	ldrh	r3, [r7, #2]
 800397a:	3b01      	subs	r3, #1
 800397c:	4a45      	ldr	r2, [pc, #276]	@ (8003a94 <HAL_UARTEx_RxEventCallback+0x150>)
 800397e:	5cd3      	ldrb	r3, [r2, r3]
 8003980:	2bfe      	cmp	r3, #254	@ 0xfe
 8003982:	d118      	bne.n	80039b6 <HAL_UARTEx_RxEventCallback+0x72>
	  {
		  if(osSemaphoreRelease(BinaryServoHandle) == osOK)
 8003984:	4b44      	ldr	r3, [pc, #272]	@ (8003a98 <HAL_UARTEx_RxEventCallback+0x154>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f00e fefd 	bl	8012788 <osSemaphoreRelease>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d110      	bne.n	80039b6 <HAL_UARTEx_RxEventCallback+0x72>
		  {
			  memcpy(rxdata_servo,rxbuff_servo,Size);
 8003994:	887b      	ldrh	r3, [r7, #2]
 8003996:	461a      	mov	r2, r3
 8003998:	493e      	ldr	r1, [pc, #248]	@ (8003a94 <HAL_UARTEx_RxEventCallback+0x150>)
 800399a:	4840      	ldr	r0, [pc, #256]	@ (8003a9c <HAL_UARTEx_RxEventCallback+0x158>)
 800399c:	f021 fdef 	bl	802557e <memcpy>
			  memset(rxbuff_servo,0,Size);
 80039a0:	887b      	ldrh	r3, [r7, #2]
 80039a2:	461a      	mov	r2, r3
 80039a4:	2100      	movs	r1, #0
 80039a6:	483b      	ldr	r0, [pc, #236]	@ (8003a94 <HAL_UARTEx_RxEventCallback+0x150>)
 80039a8:	f021 fd48 	bl	802543c <memset>
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80039ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039b0:	483b      	ldr	r0, [pc, #236]	@ (8003aa0 <HAL_UARTEx_RxEventCallback+0x15c>)
 80039b2:	f007 feee 	bl	800b792 <HAL_GPIO_TogglePin>
		  }
	  }
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxbuff_servo, 128);
 80039b6:	2280      	movs	r2, #128	@ 0x80
 80039b8:	4936      	ldr	r1, [pc, #216]	@ (8003a94 <HAL_UARTEx_RxEventCallback+0x150>)
 80039ba:	4834      	ldr	r0, [pc, #208]	@ (8003a8c <HAL_UARTEx_RxEventCallback+0x148>)
 80039bc:	f00d fe1b 	bl	80115f6 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_uart5_rx, DMA_IT_HT);
 80039c0:	4b38      	ldr	r3, [pc, #224]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a38      	ldr	r2, [pc, #224]	@ (8003aa8 <HAL_UARTEx_RxEventCallback+0x164>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d04a      	beq.n	8003a60 <HAL_UARTEx_RxEventCallback+0x11c>
 80039ca:	4b36      	ldr	r3, [pc, #216]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a37      	ldr	r2, [pc, #220]	@ (8003aac <HAL_UARTEx_RxEventCallback+0x168>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d045      	beq.n	8003a60 <HAL_UARTEx_RxEventCallback+0x11c>
 80039d4:	4b33      	ldr	r3, [pc, #204]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a35      	ldr	r2, [pc, #212]	@ (8003ab0 <HAL_UARTEx_RxEventCallback+0x16c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d040      	beq.n	8003a60 <HAL_UARTEx_RxEventCallback+0x11c>
 80039de:	4b31      	ldr	r3, [pc, #196]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a34      	ldr	r2, [pc, #208]	@ (8003ab4 <HAL_UARTEx_RxEventCallback+0x170>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d03b      	beq.n	8003a60 <HAL_UARTEx_RxEventCallback+0x11c>
 80039e8:	4b2e      	ldr	r3, [pc, #184]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a32      	ldr	r2, [pc, #200]	@ (8003ab8 <HAL_UARTEx_RxEventCallback+0x174>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d036      	beq.n	8003a60 <HAL_UARTEx_RxEventCallback+0x11c>
 80039f2:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a31      	ldr	r2, [pc, #196]	@ (8003abc <HAL_UARTEx_RxEventCallback+0x178>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d031      	beq.n	8003a60 <HAL_UARTEx_RxEventCallback+0x11c>
 80039fc:	4b29      	ldr	r3, [pc, #164]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a2f      	ldr	r2, [pc, #188]	@ (8003ac0 <HAL_UARTEx_RxEventCallback+0x17c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d02c      	beq.n	8003a60 <HAL_UARTEx_RxEventCallback+0x11c>
 8003a06:	4b27      	ldr	r3, [pc, #156]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a2e      	ldr	r2, [pc, #184]	@ (8003ac4 <HAL_UARTEx_RxEventCallback+0x180>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d027      	beq.n	8003a60 <HAL_UARTEx_RxEventCallback+0x11c>
 8003a10:	4b24      	ldr	r3, [pc, #144]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a2c      	ldr	r2, [pc, #176]	@ (8003ac8 <HAL_UARTEx_RxEventCallback+0x184>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d022      	beq.n	8003a60 <HAL_UARTEx_RxEventCallback+0x11c>
 8003a1a:	4b22      	ldr	r3, [pc, #136]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a2b      	ldr	r2, [pc, #172]	@ (8003acc <HAL_UARTEx_RxEventCallback+0x188>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d01d      	beq.n	8003a60 <HAL_UARTEx_RxEventCallback+0x11c>
 8003a24:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a29      	ldr	r2, [pc, #164]	@ (8003ad0 <HAL_UARTEx_RxEventCallback+0x18c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d018      	beq.n	8003a60 <HAL_UARTEx_RxEventCallback+0x11c>
 8003a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a28      	ldr	r2, [pc, #160]	@ (8003ad4 <HAL_UARTEx_RxEventCallback+0x190>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d013      	beq.n	8003a60 <HAL_UARTEx_RxEventCallback+0x11c>
 8003a38:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a26      	ldr	r2, [pc, #152]	@ (8003ad8 <HAL_UARTEx_RxEventCallback+0x194>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00e      	beq.n	8003a60 <HAL_UARTEx_RxEventCallback+0x11c>
 8003a42:	4b18      	ldr	r3, [pc, #96]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a25      	ldr	r2, [pc, #148]	@ (8003adc <HAL_UARTEx_RxEventCallback+0x198>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d009      	beq.n	8003a60 <HAL_UARTEx_RxEventCallback+0x11c>
 8003a4c:	4b15      	ldr	r3, [pc, #84]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a23      	ldr	r2, [pc, #140]	@ (8003ae0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d004      	beq.n	8003a60 <HAL_UARTEx_RxEventCallback+0x11c>
 8003a56:	4b13      	ldr	r3, [pc, #76]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a22      	ldr	r2, [pc, #136]	@ (8003ae4 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d109      	bne.n	8003a74 <HAL_UARTEx_RxEventCallback+0x130>
 8003a60:	4b10      	ldr	r3, [pc, #64]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0208 	bic.w	r2, r2, #8
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	f000 bcf2 	b.w	8004458 <HAL_UARTEx_RxEventCallback+0xb14>
 8003a74:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <HAL_UARTEx_RxEventCallback+0x160>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0204 	bic.w	r2, r2, #4
 8003a82:	601a      	str	r2, [r3, #0]
// 	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
//  }
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a84:	f000 bce8 	b.w	8004458 <HAL_UARTEx_RxEventCallback+0xb14>
 8003a88:	24000550 	.word	0x24000550
 8003a8c:	240008e4 	.word	0x240008e4
 8003a90:	24000554 	.word	0x24000554
 8003a94:	30004b84 	.word	0x30004b84
 8003a98:	24000580 	.word	0x24000580
 8003a9c:	30004b04 	.word	0x30004b04
 8003aa0:	58022000 	.word	0x58022000
 8003aa4:	24000d4c 	.word	0x24000d4c
 8003aa8:	40020010 	.word	0x40020010
 8003aac:	40020028 	.word	0x40020028
 8003ab0:	40020040 	.word	0x40020040
 8003ab4:	40020058 	.word	0x40020058
 8003ab8:	40020070 	.word	0x40020070
 8003abc:	40020088 	.word	0x40020088
 8003ac0:	400200a0 	.word	0x400200a0
 8003ac4:	400200b8 	.word	0x400200b8
 8003ac8:	40020410 	.word	0x40020410
 8003acc:	40020428 	.word	0x40020428
 8003ad0:	40020440 	.word	0x40020440
 8003ad4:	40020458 	.word	0x40020458
 8003ad8:	40020470 	.word	0x40020470
 8003adc:	40020488 	.word	0x40020488
 8003ae0:	400204a0 	.word	0x400204a0
 8003ae4:	400204b8 	.word	0x400204b8
  }else if(huart == &huart3){
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a4b      	ldr	r2, [pc, #300]	@ (8003c18 <HAL_UARTEx_RxEventCallback+0x2d4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	f040 80c1 	bne.w	8003c74 <HAL_UARTEx_RxEventCallback+0x330>
	  taskCuBegin = pdTRUE;
 8003af2:	4b4a      	ldr	r3, [pc, #296]	@ (8003c1c <HAL_UARTEx_RxEventCallback+0x2d8>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
	  if(rxbuff_cu[0] == 0xCC && rxbuff_cu[1] == 0xC0 && rxbuff_cu[Size - 1] == 0xBB)
 8003af8:	4b49      	ldr	r3, [pc, #292]	@ (8003c20 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2bcc      	cmp	r3, #204	@ 0xcc
 8003afe:	d122      	bne.n	8003b46 <HAL_UARTEx_RxEventCallback+0x202>
 8003b00:	4b47      	ldr	r3, [pc, #284]	@ (8003c20 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8003b02:	785b      	ldrb	r3, [r3, #1]
 8003b04:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b06:	d11e      	bne.n	8003b46 <HAL_UARTEx_RxEventCallback+0x202>
 8003b08:	887b      	ldrh	r3, [r7, #2]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	4a44      	ldr	r2, [pc, #272]	@ (8003c20 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8003b0e:	5cd3      	ldrb	r3, [r2, r3]
 8003b10:	2bbb      	cmp	r3, #187	@ 0xbb
 8003b12:	d118      	bne.n	8003b46 <HAL_UARTEx_RxEventCallback+0x202>
		  if(osSemaphoreRelease(BinaryCuHandle) == osOK)
 8003b14:	4b43      	ldr	r3, [pc, #268]	@ (8003c24 <HAL_UARTEx_RxEventCallback+0x2e0>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f00e fe35 	bl	8012788 <osSemaphoreRelease>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d110      	bne.n	8003b46 <HAL_UARTEx_RxEventCallback+0x202>
			  memcpy(rxdata_cu,rxbuff_cu,Size);
 8003b24:	887b      	ldrh	r3, [r7, #2]
 8003b26:	461a      	mov	r2, r3
 8003b28:	493d      	ldr	r1, [pc, #244]	@ (8003c20 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8003b2a:	483f      	ldr	r0, [pc, #252]	@ (8003c28 <HAL_UARTEx_RxEventCallback+0x2e4>)
 8003b2c:	f021 fd27 	bl	802557e <memcpy>
			  memset(rxbuff_cu,0,Size);
 8003b30:	887b      	ldrh	r3, [r7, #2]
 8003b32:	461a      	mov	r2, r3
 8003b34:	2100      	movs	r1, #0
 8003b36:	483a      	ldr	r0, [pc, #232]	@ (8003c20 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8003b38:	f021 fc80 	bl	802543c <memset>
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003b3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b40:	483a      	ldr	r0, [pc, #232]	@ (8003c2c <HAL_UARTEx_RxEventCallback+0x2e8>)
 8003b42:	f007 fe26 	bl	800b792 <HAL_GPIO_TogglePin>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxbuff_cu, 128);
 8003b46:	2280      	movs	r2, #128	@ 0x80
 8003b48:	4935      	ldr	r1, [pc, #212]	@ (8003c20 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8003b4a:	4833      	ldr	r0, [pc, #204]	@ (8003c18 <HAL_UARTEx_RxEventCallback+0x2d4>)
 8003b4c:	f00d fd53 	bl	80115f6 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8003b50:	4b37      	ldr	r3, [pc, #220]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a37      	ldr	r2, [pc, #220]	@ (8003c34 <HAL_UARTEx_RxEventCallback+0x2f0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d04a      	beq.n	8003bf0 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003b5a:	4b35      	ldr	r3, [pc, #212]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a36      	ldr	r2, [pc, #216]	@ (8003c38 <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d045      	beq.n	8003bf0 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003b64:	4b32      	ldr	r3, [pc, #200]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a34      	ldr	r2, [pc, #208]	@ (8003c3c <HAL_UARTEx_RxEventCallback+0x2f8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d040      	beq.n	8003bf0 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003b6e:	4b30      	ldr	r3, [pc, #192]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a33      	ldr	r2, [pc, #204]	@ (8003c40 <HAL_UARTEx_RxEventCallback+0x2fc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d03b      	beq.n	8003bf0 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003b78:	4b2d      	ldr	r3, [pc, #180]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a31      	ldr	r2, [pc, #196]	@ (8003c44 <HAL_UARTEx_RxEventCallback+0x300>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d036      	beq.n	8003bf0 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003b82:	4b2b      	ldr	r3, [pc, #172]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a30      	ldr	r2, [pc, #192]	@ (8003c48 <HAL_UARTEx_RxEventCallback+0x304>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d031      	beq.n	8003bf0 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003b8c:	4b28      	ldr	r3, [pc, #160]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a2e      	ldr	r2, [pc, #184]	@ (8003c4c <HAL_UARTEx_RxEventCallback+0x308>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d02c      	beq.n	8003bf0 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003b96:	4b26      	ldr	r3, [pc, #152]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8003c50 <HAL_UARTEx_RxEventCallback+0x30c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d027      	beq.n	8003bf0 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003ba0:	4b23      	ldr	r3, [pc, #140]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8003c54 <HAL_UARTEx_RxEventCallback+0x310>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d022      	beq.n	8003bf0 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003baa:	4b21      	ldr	r3, [pc, #132]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a2a      	ldr	r2, [pc, #168]	@ (8003c58 <HAL_UARTEx_RxEventCallback+0x314>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d01d      	beq.n	8003bf0 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a28      	ldr	r2, [pc, #160]	@ (8003c5c <HAL_UARTEx_RxEventCallback+0x318>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d018      	beq.n	8003bf0 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a27      	ldr	r2, [pc, #156]	@ (8003c60 <HAL_UARTEx_RxEventCallback+0x31c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003bc8:	4b19      	ldr	r3, [pc, #100]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a25      	ldr	r2, [pc, #148]	@ (8003c64 <HAL_UARTEx_RxEventCallback+0x320>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00e      	beq.n	8003bf0 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003bd2:	4b17      	ldr	r3, [pc, #92]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a24      	ldr	r2, [pc, #144]	@ (8003c68 <HAL_UARTEx_RxEventCallback+0x324>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d009      	beq.n	8003bf0 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003bdc:	4b14      	ldr	r3, [pc, #80]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a22      	ldr	r2, [pc, #136]	@ (8003c6c <HAL_UARTEx_RxEventCallback+0x328>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003be6:	4b12      	ldr	r3, [pc, #72]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a21      	ldr	r2, [pc, #132]	@ (8003c70 <HAL_UARTEx_RxEventCallback+0x32c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d109      	bne.n	8003c04 <HAL_UARTEx_RxEventCallback+0x2c0>
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0208 	bic.w	r2, r2, #8
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	f000 bc2a 	b.w	8004458 <HAL_UARTEx_RxEventCallback+0xb14>
 8003c04:	4b0a      	ldr	r3, [pc, #40]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	4b09      	ldr	r3, [pc, #36]	@ (8003c30 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0204 	bic.w	r2, r2, #4
 8003c12:	601a      	str	r2, [r3, #0]
}
 8003c14:	f000 bc20 	b.w	8004458 <HAL_UARTEx_RxEventCallback+0xb14>
 8003c18:	24000b34 	.word	0x24000b34
 8003c1c:	24000558 	.word	0x24000558
 8003c20:	30004d84 	.word	0x30004d84
 8003c24:	24000584 	.word	0x24000584
 8003c28:	30004d04 	.word	0x30004d04
 8003c2c:	58022000 	.word	0x58022000
 8003c30:	2400101c 	.word	0x2400101c
 8003c34:	40020010 	.word	0x40020010
 8003c38:	40020028 	.word	0x40020028
 8003c3c:	40020040 	.word	0x40020040
 8003c40:	40020058 	.word	0x40020058
 8003c44:	40020070 	.word	0x40020070
 8003c48:	40020088 	.word	0x40020088
 8003c4c:	400200a0 	.word	0x400200a0
 8003c50:	400200b8 	.word	0x400200b8
 8003c54:	40020410 	.word	0x40020410
 8003c58:	40020428 	.word	0x40020428
 8003c5c:	40020440 	.word	0x40020440
 8003c60:	40020458 	.word	0x40020458
 8003c64:	40020470 	.word	0x40020470
 8003c68:	40020488 	.word	0x40020488
 8003c6c:	400204a0 	.word	0x400204a0
 8003c70:	400204b8 	.word	0x400204b8
  }else if(huart == &huart4){
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a4a      	ldr	r2, [pc, #296]	@ (8003da0 <HAL_UARTEx_RxEventCallback+0x45c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	f040 80bf 	bne.w	8003dfc <HAL_UARTEx_RxEventCallback+0x4b8>
	  taskJingBegin = pdTRUE;
 8003c7e:	4b49      	ldr	r3, [pc, #292]	@ (8003da4 <HAL_UARTEx_RxEventCallback+0x460>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	601a      	str	r2, [r3, #0]
	  if(rxbuff_jing[0] == 0xCC && rxbuff_jing[1] == 0xC0 && rxbuff_jing[Size - 1] == 0xBB)
 8003c84:	4b48      	ldr	r3, [pc, #288]	@ (8003da8 <HAL_UARTEx_RxEventCallback+0x464>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2bcc      	cmp	r3, #204	@ 0xcc
 8003c8a:	d122      	bne.n	8003cd2 <HAL_UARTEx_RxEventCallback+0x38e>
 8003c8c:	4b46      	ldr	r3, [pc, #280]	@ (8003da8 <HAL_UARTEx_RxEventCallback+0x464>)
 8003c8e:	785b      	ldrb	r3, [r3, #1]
 8003c90:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c92:	d11e      	bne.n	8003cd2 <HAL_UARTEx_RxEventCallback+0x38e>
 8003c94:	887b      	ldrh	r3, [r7, #2]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	4a43      	ldr	r2, [pc, #268]	@ (8003da8 <HAL_UARTEx_RxEventCallback+0x464>)
 8003c9a:	5cd3      	ldrb	r3, [r2, r3]
 8003c9c:	2bbb      	cmp	r3, #187	@ 0xbb
 8003c9e:	d118      	bne.n	8003cd2 <HAL_UARTEx_RxEventCallback+0x38e>
	  		  if(osSemaphoreRelease(BinaryJingHandle) == osOK)
 8003ca0:	4b42      	ldr	r3, [pc, #264]	@ (8003dac <HAL_UARTEx_RxEventCallback+0x468>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f00e fd6f 	bl	8012788 <osSemaphoreRelease>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d110      	bne.n	8003cd2 <HAL_UARTEx_RxEventCallback+0x38e>
	  			  memcpy(rxdata_jing,rxbuff_jing,Size);
 8003cb0:	887b      	ldrh	r3, [r7, #2]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	493c      	ldr	r1, [pc, #240]	@ (8003da8 <HAL_UARTEx_RxEventCallback+0x464>)
 8003cb6:	483e      	ldr	r0, [pc, #248]	@ (8003db0 <HAL_UARTEx_RxEventCallback+0x46c>)
 8003cb8:	f021 fc61 	bl	802557e <memcpy>
	  			  memset(rxbuff_jing,0,Size);
 8003cbc:	887b      	ldrh	r3, [r7, #2]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4839      	ldr	r0, [pc, #228]	@ (8003da8 <HAL_UARTEx_RxEventCallback+0x464>)
 8003cc4:	f021 fbba 	bl	802543c <memset>
	  			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003cc8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ccc:	4839      	ldr	r0, [pc, #228]	@ (8003db4 <HAL_UARTEx_RxEventCallback+0x470>)
 8003cce:	f007 fd60 	bl	800b792 <HAL_GPIO_TogglePin>
	  	  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rxbuff_jing, 128);
 8003cd2:	2280      	movs	r2, #128	@ 0x80
 8003cd4:	4934      	ldr	r1, [pc, #208]	@ (8003da8 <HAL_UARTEx_RxEventCallback+0x464>)
 8003cd6:	4832      	ldr	r0, [pc, #200]	@ (8003da0 <HAL_UARTEx_RxEventCallback+0x45c>)
 8003cd8:	f00d fc8d 	bl	80115f6 <HAL_UARTEx_ReceiveToIdle_DMA>
	  	  __HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 8003cdc:	4b36      	ldr	r3, [pc, #216]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a36      	ldr	r2, [pc, #216]	@ (8003dbc <HAL_UARTEx_RxEventCallback+0x478>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d04a      	beq.n	8003d7c <HAL_UARTEx_RxEventCallback+0x438>
 8003ce6:	4b34      	ldr	r3, [pc, #208]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a35      	ldr	r2, [pc, #212]	@ (8003dc0 <HAL_UARTEx_RxEventCallback+0x47c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d045      	beq.n	8003d7c <HAL_UARTEx_RxEventCallback+0x438>
 8003cf0:	4b31      	ldr	r3, [pc, #196]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a33      	ldr	r2, [pc, #204]	@ (8003dc4 <HAL_UARTEx_RxEventCallback+0x480>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d040      	beq.n	8003d7c <HAL_UARTEx_RxEventCallback+0x438>
 8003cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a32      	ldr	r2, [pc, #200]	@ (8003dc8 <HAL_UARTEx_RxEventCallback+0x484>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d03b      	beq.n	8003d7c <HAL_UARTEx_RxEventCallback+0x438>
 8003d04:	4b2c      	ldr	r3, [pc, #176]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a30      	ldr	r2, [pc, #192]	@ (8003dcc <HAL_UARTEx_RxEventCallback+0x488>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d036      	beq.n	8003d7c <HAL_UARTEx_RxEventCallback+0x438>
 8003d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a2f      	ldr	r2, [pc, #188]	@ (8003dd0 <HAL_UARTEx_RxEventCallback+0x48c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d031      	beq.n	8003d7c <HAL_UARTEx_RxEventCallback+0x438>
 8003d18:	4b27      	ldr	r3, [pc, #156]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a2d      	ldr	r2, [pc, #180]	@ (8003dd4 <HAL_UARTEx_RxEventCallback+0x490>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d02c      	beq.n	8003d7c <HAL_UARTEx_RxEventCallback+0x438>
 8003d22:	4b25      	ldr	r3, [pc, #148]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a2c      	ldr	r2, [pc, #176]	@ (8003dd8 <HAL_UARTEx_RxEventCallback+0x494>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d027      	beq.n	8003d7c <HAL_UARTEx_RxEventCallback+0x438>
 8003d2c:	4b22      	ldr	r3, [pc, #136]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a2a      	ldr	r2, [pc, #168]	@ (8003ddc <HAL_UARTEx_RxEventCallback+0x498>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d022      	beq.n	8003d7c <HAL_UARTEx_RxEventCallback+0x438>
 8003d36:	4b20      	ldr	r3, [pc, #128]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a29      	ldr	r2, [pc, #164]	@ (8003de0 <HAL_UARTEx_RxEventCallback+0x49c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d01d      	beq.n	8003d7c <HAL_UARTEx_RxEventCallback+0x438>
 8003d40:	4b1d      	ldr	r3, [pc, #116]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a27      	ldr	r2, [pc, #156]	@ (8003de4 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d018      	beq.n	8003d7c <HAL_UARTEx_RxEventCallback+0x438>
 8003d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a26      	ldr	r2, [pc, #152]	@ (8003de8 <HAL_UARTEx_RxEventCallback+0x4a4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d013      	beq.n	8003d7c <HAL_UARTEx_RxEventCallback+0x438>
 8003d54:	4b18      	ldr	r3, [pc, #96]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a24      	ldr	r2, [pc, #144]	@ (8003dec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00e      	beq.n	8003d7c <HAL_UARTEx_RxEventCallback+0x438>
 8003d5e:	4b16      	ldr	r3, [pc, #88]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a23      	ldr	r2, [pc, #140]	@ (8003df0 <HAL_UARTEx_RxEventCallback+0x4ac>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d009      	beq.n	8003d7c <HAL_UARTEx_RxEventCallback+0x438>
 8003d68:	4b13      	ldr	r3, [pc, #76]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a21      	ldr	r2, [pc, #132]	@ (8003df4 <HAL_UARTEx_RxEventCallback+0x4b0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <HAL_UARTEx_RxEventCallback+0x438>
 8003d72:	4b11      	ldr	r3, [pc, #68]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a20      	ldr	r2, [pc, #128]	@ (8003df8 <HAL_UARTEx_RxEventCallback+0x4b4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d108      	bne.n	8003d8e <HAL_UARTEx_RxEventCallback+0x44a>
 8003d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4b0d      	ldr	r3, [pc, #52]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0208 	bic.w	r2, r2, #8
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e364      	b.n	8004458 <HAL_UARTEx_RxEventCallback+0xb14>
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	4b08      	ldr	r3, [pc, #32]	@ (8003db8 <HAL_UARTEx_RxEventCallback+0x474>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0204 	bic.w	r2, r2, #4
 8003d9c:	601a      	str	r2, [r3, #0]
}
 8003d9e:	e35b      	b.n	8004458 <HAL_UARTEx_RxEventCallback+0xb14>
 8003da0:	24000850 	.word	0x24000850
 8003da4:	2400055c 	.word	0x2400055c
 8003da8:	30004e84 	.word	0x30004e84
 8003dac:	24000588 	.word	0x24000588
 8003db0:	30004e04 	.word	0x30004e04
 8003db4:	58022000 	.word	0x58022000
 8003db8:	24000c5c 	.word	0x24000c5c
 8003dbc:	40020010 	.word	0x40020010
 8003dc0:	40020028 	.word	0x40020028
 8003dc4:	40020040 	.word	0x40020040
 8003dc8:	40020058 	.word	0x40020058
 8003dcc:	40020070 	.word	0x40020070
 8003dd0:	40020088 	.word	0x40020088
 8003dd4:	400200a0 	.word	0x400200a0
 8003dd8:	400200b8 	.word	0x400200b8
 8003ddc:	40020410 	.word	0x40020410
 8003de0:	40020428 	.word	0x40020428
 8003de4:	40020440 	.word	0x40020440
 8003de8:	40020458 	.word	0x40020458
 8003dec:	40020470 	.word	0x40020470
 8003df0:	40020488 	.word	0x40020488
 8003df4:	400204a0 	.word	0x400204a0
 8003df8:	400204b8 	.word	0x400204b8
  }else if(huart == &huart6){
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a52      	ldr	r2, [pc, #328]	@ (8003f48 <HAL_UARTEx_RxEventCallback+0x604>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	f040 80d3 	bne.w	8003fac <HAL_UARTEx_RxEventCallback+0x668>
	  taskFocusBegin = pdTRUE;
 8003e06:	4b51      	ldr	r3, [pc, #324]	@ (8003f4c <HAL_UARTEx_RxEventCallback+0x608>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
	  if(rxbuff_focus[0] == 0xaa && rxbuff_focus[1] == 0x01 && rxbuff_focus[Size - 1] == checkData(rxbuff_focus, Size - 1))
 8003e0c:	4b50      	ldr	r3, [pc, #320]	@ (8003f50 <HAL_UARTEx_RxEventCallback+0x60c>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2baa      	cmp	r3, #170	@ 0xaa
 8003e12:	d131      	bne.n	8003e78 <HAL_UARTEx_RxEventCallback+0x534>
 8003e14:	4b4e      	ldr	r3, [pc, #312]	@ (8003f50 <HAL_UARTEx_RxEventCallback+0x60c>)
 8003e16:	785b      	ldrb	r3, [r3, #1]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d12d      	bne.n	8003e78 <HAL_UARTEx_RxEventCallback+0x534>
 8003e1c:	887b      	ldrh	r3, [r7, #2]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	4a4b      	ldr	r2, [pc, #300]	@ (8003f50 <HAL_UARTEx_RxEventCallback+0x60c>)
 8003e22:	5cd4      	ldrb	r4, [r2, r3]
 8003e24:	887b      	ldrh	r3, [r7, #2]
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4848      	ldr	r0, [pc, #288]	@ (8003f50 <HAL_UARTEx_RxEventCallback+0x60c>)
 8003e30:	f7fc fe1a 	bl	8000a68 <checkData>
 8003e34:	4603      	mov	r3, r0
 8003e36:	429c      	cmp	r4, r3
 8003e38:	d11e      	bne.n	8003e78 <HAL_UARTEx_RxEventCallback+0x534>
		uart_printf("enter focus\r\n");
 8003e3a:	4846      	ldr	r0, [pc, #280]	@ (8003f54 <HAL_UARTEx_RxEventCallback+0x610>)
 8003e3c:	f000 ff3c 	bl	8004cb8 <uart_printf>
		  if(osSemaphoreRelease(BinaryFocusHandle) == osOK)
 8003e40:	4b45      	ldr	r3, [pc, #276]	@ (8003f58 <HAL_UARTEx_RxEventCallback+0x614>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f00e fc9f 	bl	8012788 <osSemaphoreRelease>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d113      	bne.n	8003e78 <HAL_UARTEx_RxEventCallback+0x534>
			uart_printf("enter\r\n");
 8003e50:	4842      	ldr	r0, [pc, #264]	@ (8003f5c <HAL_UARTEx_RxEventCallback+0x618>)
 8003e52:	f000 ff31 	bl	8004cb8 <uart_printf>
			  memcpy(rxdata_focus,rxbuff_focus,Size);
 8003e56:	887b      	ldrh	r3, [r7, #2]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	493d      	ldr	r1, [pc, #244]	@ (8003f50 <HAL_UARTEx_RxEventCallback+0x60c>)
 8003e5c:	4840      	ldr	r0, [pc, #256]	@ (8003f60 <HAL_UARTEx_RxEventCallback+0x61c>)
 8003e5e:	f021 fb8e 	bl	802557e <memcpy>
			  memset(rxbuff_focus,0,Size);
 8003e62:	887b      	ldrh	r3, [r7, #2]
 8003e64:	461a      	mov	r2, r3
 8003e66:	2100      	movs	r1, #0
 8003e68:	4839      	ldr	r0, [pc, #228]	@ (8003f50 <HAL_UARTEx_RxEventCallback+0x60c>)
 8003e6a:	f021 fae7 	bl	802543c <memset>
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003e6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e72:	483c      	ldr	r0, [pc, #240]	@ (8003f64 <HAL_UARTEx_RxEventCallback+0x620>)
 8003e74:	f007 fc8d 	bl	800b792 <HAL_GPIO_TogglePin>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rxbuff_focus, 11);
 8003e78:	220b      	movs	r2, #11
 8003e7a:	4935      	ldr	r1, [pc, #212]	@ (8003f50 <HAL_UARTEx_RxEventCallback+0x60c>)
 8003e7c:	4832      	ldr	r0, [pc, #200]	@ (8003f48 <HAL_UARTEx_RxEventCallback+0x604>)
 8003e7e:	f00d fbba 	bl	80115f6 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8003e82:	4b39      	ldr	r3, [pc, #228]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a39      	ldr	r2, [pc, #228]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x628>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d04a      	beq.n	8003f22 <HAL_UARTEx_RxEventCallback+0x5de>
 8003e8c:	4b36      	ldr	r3, [pc, #216]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a37      	ldr	r2, [pc, #220]	@ (8003f70 <HAL_UARTEx_RxEventCallback+0x62c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d045      	beq.n	8003f22 <HAL_UARTEx_RxEventCallback+0x5de>
 8003e96:	4b34      	ldr	r3, [pc, #208]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a36      	ldr	r2, [pc, #216]	@ (8003f74 <HAL_UARTEx_RxEventCallback+0x630>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d040      	beq.n	8003f22 <HAL_UARTEx_RxEventCallback+0x5de>
 8003ea0:	4b31      	ldr	r3, [pc, #196]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a34      	ldr	r2, [pc, #208]	@ (8003f78 <HAL_UARTEx_RxEventCallback+0x634>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d03b      	beq.n	8003f22 <HAL_UARTEx_RxEventCallback+0x5de>
 8003eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a33      	ldr	r2, [pc, #204]	@ (8003f7c <HAL_UARTEx_RxEventCallback+0x638>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d036      	beq.n	8003f22 <HAL_UARTEx_RxEventCallback+0x5de>
 8003eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a31      	ldr	r2, [pc, #196]	@ (8003f80 <HAL_UARTEx_RxEventCallback+0x63c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d031      	beq.n	8003f22 <HAL_UARTEx_RxEventCallback+0x5de>
 8003ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a30      	ldr	r2, [pc, #192]	@ (8003f84 <HAL_UARTEx_RxEventCallback+0x640>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d02c      	beq.n	8003f22 <HAL_UARTEx_RxEventCallback+0x5de>
 8003ec8:	4b27      	ldr	r3, [pc, #156]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8003f88 <HAL_UARTEx_RxEventCallback+0x644>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d027      	beq.n	8003f22 <HAL_UARTEx_RxEventCallback+0x5de>
 8003ed2:	4b25      	ldr	r3, [pc, #148]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a2d      	ldr	r2, [pc, #180]	@ (8003f8c <HAL_UARTEx_RxEventCallback+0x648>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d022      	beq.n	8003f22 <HAL_UARTEx_RxEventCallback+0x5de>
 8003edc:	4b22      	ldr	r3, [pc, #136]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8003f90 <HAL_UARTEx_RxEventCallback+0x64c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01d      	beq.n	8003f22 <HAL_UARTEx_RxEventCallback+0x5de>
 8003ee6:	4b20      	ldr	r3, [pc, #128]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a2a      	ldr	r2, [pc, #168]	@ (8003f94 <HAL_UARTEx_RxEventCallback+0x650>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d018      	beq.n	8003f22 <HAL_UARTEx_RxEventCallback+0x5de>
 8003ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a28      	ldr	r2, [pc, #160]	@ (8003f98 <HAL_UARTEx_RxEventCallback+0x654>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_UARTEx_RxEventCallback+0x5de>
 8003efa:	4b1b      	ldr	r3, [pc, #108]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a27      	ldr	r2, [pc, #156]	@ (8003f9c <HAL_UARTEx_RxEventCallback+0x658>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00e      	beq.n	8003f22 <HAL_UARTEx_RxEventCallback+0x5de>
 8003f04:	4b18      	ldr	r3, [pc, #96]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a25      	ldr	r2, [pc, #148]	@ (8003fa0 <HAL_UARTEx_RxEventCallback+0x65c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d009      	beq.n	8003f22 <HAL_UARTEx_RxEventCallback+0x5de>
 8003f0e:	4b16      	ldr	r3, [pc, #88]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a24      	ldr	r2, [pc, #144]	@ (8003fa4 <HAL_UARTEx_RxEventCallback+0x660>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d004      	beq.n	8003f22 <HAL_UARTEx_RxEventCallback+0x5de>
 8003f18:	4b13      	ldr	r3, [pc, #76]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a22      	ldr	r2, [pc, #136]	@ (8003fa8 <HAL_UARTEx_RxEventCallback+0x664>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d108      	bne.n	8003f34 <HAL_UARTEx_RxEventCallback+0x5f0>
 8003f22:	4b11      	ldr	r3, [pc, #68]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b0f      	ldr	r3, [pc, #60]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0208 	bic.w	r2, r2, #8
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e291      	b.n	8004458 <HAL_UARTEx_RxEventCallback+0xb14>
 8003f34:	4b0c      	ldr	r3, [pc, #48]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f68 <HAL_UARTEx_RxEventCallback+0x624>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0204 	bic.w	r2, r2, #4
 8003f42:	601a      	str	r2, [r3, #0]
}
 8003f44:	e288      	b.n	8004458 <HAL_UARTEx_RxEventCallback+0xb14>
 8003f46:	bf00      	nop
 8003f48:	24000bc8 	.word	0x24000bc8
 8003f4c:	24000560 	.word	0x24000560
 8003f50:	30004f10 	.word	0x30004f10
 8003f54:	08029384 	.word	0x08029384
 8003f58:	2400058c 	.word	0x2400058c
 8003f5c:	08029394 	.word	0x08029394
 8003f60:	30004f04 	.word	0x30004f04
 8003f64:	58022000 	.word	0x58022000
 8003f68:	2400110c 	.word	0x2400110c
 8003f6c:	40020010 	.word	0x40020010
 8003f70:	40020028 	.word	0x40020028
 8003f74:	40020040 	.word	0x40020040
 8003f78:	40020058 	.word	0x40020058
 8003f7c:	40020070 	.word	0x40020070
 8003f80:	40020088 	.word	0x40020088
 8003f84:	400200a0 	.word	0x400200a0
 8003f88:	400200b8 	.word	0x400200b8
 8003f8c:	40020410 	.word	0x40020410
 8003f90:	40020428 	.word	0x40020428
 8003f94:	40020440 	.word	0x40020440
 8003f98:	40020458 	.word	0x40020458
 8003f9c:	40020470 	.word	0x40020470
 8003fa0:	40020488 	.word	0x40020488
 8003fa4:	400204a0 	.word	0x400204a0
 8003fa8:	400204b8 	.word	0x400204b8
  }else if(huart == &huart7){
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a9e      	ldr	r2, [pc, #632]	@ (8004228 <HAL_UARTEx_RxEventCallback+0x8e4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	f040 8099 	bne.w	80040e8 <HAL_UARTEx_RxEventCallback+0x7a4>
	  taskRangeBegin = pdTRUE;
 8003fb6:	4b9d      	ldr	r3, [pc, #628]	@ (800422c <HAL_UARTEx_RxEventCallback+0x8e8>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
	  if(rxbuff_rangefinder[0] == 0xee && rxbuff_rangefinder[1] == 0x16 && rxbuff_rangefinder[Size - 1] == CheckSumRangefinder(rxbuff_rangefinder + 3, rxbuff_rangefinder[2]))
 8003fbc:	4b9c      	ldr	r3, [pc, #624]	@ (8004230 <HAL_UARTEx_RxEventCallback+0x8ec>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2bee      	cmp	r3, #238	@ 0xee
 8003fc2:	d12a      	bne.n	800401a <HAL_UARTEx_RxEventCallback+0x6d6>
 8003fc4:	4b9a      	ldr	r3, [pc, #616]	@ (8004230 <HAL_UARTEx_RxEventCallback+0x8ec>)
 8003fc6:	785b      	ldrb	r3, [r3, #1]
 8003fc8:	2b16      	cmp	r3, #22
 8003fca:	d126      	bne.n	800401a <HAL_UARTEx_RxEventCallback+0x6d6>
 8003fcc:	887b      	ldrh	r3, [r7, #2]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	4a97      	ldr	r2, [pc, #604]	@ (8004230 <HAL_UARTEx_RxEventCallback+0x8ec>)
 8003fd2:	5cd4      	ldrb	r4, [r2, r3]
 8003fd4:	4a97      	ldr	r2, [pc, #604]	@ (8004234 <HAL_UARTEx_RxEventCallback+0x8f0>)
 8003fd6:	4b96      	ldr	r3, [pc, #600]	@ (8004230 <HAL_UARTEx_RxEventCallback+0x8ec>)
 8003fd8:	789b      	ldrb	r3, [r3, #2]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4610      	mov	r0, r2
 8003fde:	f7fd f849 	bl	8001074 <CheckSumRangefinder>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	429c      	cmp	r4, r3
 8003fe6:	d118      	bne.n	800401a <HAL_UARTEx_RxEventCallback+0x6d6>
		  if(osSemaphoreRelease(BinaryRangefinderHandle) == osOK)
 8003fe8:	4b93      	ldr	r3, [pc, #588]	@ (8004238 <HAL_UARTEx_RxEventCallback+0x8f4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f00e fbcb 	bl	8012788 <osSemaphoreRelease>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d110      	bne.n	800401a <HAL_UARTEx_RxEventCallback+0x6d6>
			  memcpy(rxdata_rangefinder,rxbuff_rangefinder,Size);
 8003ff8:	887b      	ldrh	r3, [r7, #2]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	498c      	ldr	r1, [pc, #560]	@ (8004230 <HAL_UARTEx_RxEventCallback+0x8ec>)
 8003ffe:	488f      	ldr	r0, [pc, #572]	@ (800423c <HAL_UARTEx_RxEventCallback+0x8f8>)
 8004000:	f021 fabd 	bl	802557e <memcpy>
			  memset(rxbuff_rangefinder,0,Size);
 8004004:	887b      	ldrh	r3, [r7, #2]
 8004006:	461a      	mov	r2, r3
 8004008:	2100      	movs	r1, #0
 800400a:	4889      	ldr	r0, [pc, #548]	@ (8004230 <HAL_UARTEx_RxEventCallback+0x8ec>)
 800400c:	f021 fa16 	bl	802543c <memset>
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8004010:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004014:	488a      	ldr	r0, [pc, #552]	@ (8004240 <HAL_UARTEx_RxEventCallback+0x8fc>)
 8004016:	f007 fbbc 	bl	800b792 <HAL_GPIO_TogglePin>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart7, rxbuff_rangefinder, 128);
 800401a:	2280      	movs	r2, #128	@ 0x80
 800401c:	4984      	ldr	r1, [pc, #528]	@ (8004230 <HAL_UARTEx_RxEventCallback+0x8ec>)
 800401e:	4882      	ldr	r0, [pc, #520]	@ (8004228 <HAL_UARTEx_RxEventCallback+0x8e4>)
 8004020:	f00d fae9 	bl	80115f6 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8004024:	4b87      	ldr	r3, [pc, #540]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a87      	ldr	r2, [pc, #540]	@ (8004248 <HAL_UARTEx_RxEventCallback+0x904>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d04a      	beq.n	80040c4 <HAL_UARTEx_RxEventCallback+0x780>
 800402e:	4b85      	ldr	r3, [pc, #532]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a86      	ldr	r2, [pc, #536]	@ (800424c <HAL_UARTEx_RxEventCallback+0x908>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d045      	beq.n	80040c4 <HAL_UARTEx_RxEventCallback+0x780>
 8004038:	4b82      	ldr	r3, [pc, #520]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a84      	ldr	r2, [pc, #528]	@ (8004250 <HAL_UARTEx_RxEventCallback+0x90c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d040      	beq.n	80040c4 <HAL_UARTEx_RxEventCallback+0x780>
 8004042:	4b80      	ldr	r3, [pc, #512]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a83      	ldr	r2, [pc, #524]	@ (8004254 <HAL_UARTEx_RxEventCallback+0x910>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d03b      	beq.n	80040c4 <HAL_UARTEx_RxEventCallback+0x780>
 800404c:	4b7d      	ldr	r3, [pc, #500]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a81      	ldr	r2, [pc, #516]	@ (8004258 <HAL_UARTEx_RxEventCallback+0x914>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d036      	beq.n	80040c4 <HAL_UARTEx_RxEventCallback+0x780>
 8004056:	4b7b      	ldr	r3, [pc, #492]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a80      	ldr	r2, [pc, #512]	@ (800425c <HAL_UARTEx_RxEventCallback+0x918>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d031      	beq.n	80040c4 <HAL_UARTEx_RxEventCallback+0x780>
 8004060:	4b78      	ldr	r3, [pc, #480]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a7e      	ldr	r2, [pc, #504]	@ (8004260 <HAL_UARTEx_RxEventCallback+0x91c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d02c      	beq.n	80040c4 <HAL_UARTEx_RxEventCallback+0x780>
 800406a:	4b76      	ldr	r3, [pc, #472]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a7d      	ldr	r2, [pc, #500]	@ (8004264 <HAL_UARTEx_RxEventCallback+0x920>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d027      	beq.n	80040c4 <HAL_UARTEx_RxEventCallback+0x780>
 8004074:	4b73      	ldr	r3, [pc, #460]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a7b      	ldr	r2, [pc, #492]	@ (8004268 <HAL_UARTEx_RxEventCallback+0x924>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d022      	beq.n	80040c4 <HAL_UARTEx_RxEventCallback+0x780>
 800407e:	4b71      	ldr	r3, [pc, #452]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a7a      	ldr	r2, [pc, #488]	@ (800426c <HAL_UARTEx_RxEventCallback+0x928>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d01d      	beq.n	80040c4 <HAL_UARTEx_RxEventCallback+0x780>
 8004088:	4b6e      	ldr	r3, [pc, #440]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a78      	ldr	r2, [pc, #480]	@ (8004270 <HAL_UARTEx_RxEventCallback+0x92c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d018      	beq.n	80040c4 <HAL_UARTEx_RxEventCallback+0x780>
 8004092:	4b6c      	ldr	r3, [pc, #432]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a77      	ldr	r2, [pc, #476]	@ (8004274 <HAL_UARTEx_RxEventCallback+0x930>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d013      	beq.n	80040c4 <HAL_UARTEx_RxEventCallback+0x780>
 800409c:	4b69      	ldr	r3, [pc, #420]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a75      	ldr	r2, [pc, #468]	@ (8004278 <HAL_UARTEx_RxEventCallback+0x934>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00e      	beq.n	80040c4 <HAL_UARTEx_RxEventCallback+0x780>
 80040a6:	4b67      	ldr	r3, [pc, #412]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a74      	ldr	r2, [pc, #464]	@ (800427c <HAL_UARTEx_RxEventCallback+0x938>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d009      	beq.n	80040c4 <HAL_UARTEx_RxEventCallback+0x780>
 80040b0:	4b64      	ldr	r3, [pc, #400]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a72      	ldr	r2, [pc, #456]	@ (8004280 <HAL_UARTEx_RxEventCallback+0x93c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d004      	beq.n	80040c4 <HAL_UARTEx_RxEventCallback+0x780>
 80040ba:	4b62      	ldr	r3, [pc, #392]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a71      	ldr	r2, [pc, #452]	@ (8004284 <HAL_UARTEx_RxEventCallback+0x940>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d108      	bne.n	80040d6 <HAL_UARTEx_RxEventCallback+0x792>
 80040c4:	4b5f      	ldr	r3, [pc, #380]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	4b5e      	ldr	r3, [pc, #376]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0208 	bic.w	r2, r2, #8
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e1c0      	b.n	8004458 <HAL_UARTEx_RxEventCallback+0xb14>
 80040d6:	4b5b      	ldr	r3, [pc, #364]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4b59      	ldr	r3, [pc, #356]	@ (8004244 <HAL_UARTEx_RxEventCallback+0x900>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0204 	bic.w	r2, r2, #4
 80040e4:	601a      	str	r2, [r3, #0]
}
 80040e6:	e1b7      	b.n	8004458 <HAL_UARTEx_RxEventCallback+0xb14>
  else if(huart == &huart2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a67      	ldr	r2, [pc, #412]	@ (8004288 <HAL_UARTEx_RxEventCallback+0x944>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	f040 81b3 	bne.w	8004458 <HAL_UARTEx_RxEventCallback+0xb14>
	switch(chcmd[0])
 80040f2:	4b66      	ldr	r3, [pc, #408]	@ (800428c <HAL_UARTEx_RxEventCallback+0x948>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	3b43      	subs	r3, #67	@ 0x43
 80040f8:	2b13      	cmp	r3, #19
 80040fa:	f200 813f 	bhi.w	800437c <HAL_UARTEx_RxEventCallback+0xa38>
 80040fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004104 <HAL_UARTEx_RxEventCallback+0x7c0>)
 8004100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004104:	0800434f 	.word	0x0800434f
 8004108:	0800437d 	.word	0x0800437d
 800410c:	0800437d 	.word	0x0800437d
 8004110:	0800435f 	.word	0x0800435f
 8004114:	0800437d 	.word	0x0800437d
 8004118:	0800437d 	.word	0x0800437d
 800411c:	0800437d 	.word	0x0800437d
 8004120:	0800437d 	.word	0x0800437d
 8004124:	0800437d 	.word	0x0800437d
 8004128:	0800437d 	.word	0x0800437d
 800412c:	08004155 	.word	0x08004155
 8004130:	0800437d 	.word	0x0800437d
 8004134:	0800437d 	.word	0x0800437d
 8004138:	08004175 	.word	0x08004175
 800413c:	0800437d 	.word	0x0800437d
 8004140:	0800437d 	.word	0x0800437d
 8004144:	08004197 	.word	0x08004197
 8004148:	0800437d 	.word	0x0800437d
 800414c:	0800437d 	.word	0x0800437d
 8004150:	08004301 	.word	0x08004301
			sscanf(chcmd + 1,"%x", &iPm1);
 8004154:	4b4e      	ldr	r3, [pc, #312]	@ (8004290 <HAL_UARTEx_RxEventCallback+0x94c>)
 8004156:	4a4f      	ldr	r2, [pc, #316]	@ (8004294 <HAL_UARTEx_RxEventCallback+0x950>)
 8004158:	494f      	ldr	r1, [pc, #316]	@ (8004298 <HAL_UARTEx_RxEventCallback+0x954>)
 800415a:	4618      	mov	r0, r3
 800415c:	f021 f8b4 	bl	80252c8 <siscanf>
			ServoDataSendTypedef.TurnMode = iPm1;
 8004160:	4b4c      	ldr	r3, [pc, #304]	@ (8004294 <HAL_UARTEx_RxEventCallback+0x950>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	b2da      	uxtb	r2, r3
 8004166:	4b4d      	ldr	r3, [pc, #308]	@ (800429c <HAL_UARTEx_RxEventCallback+0x958>)
 8004168:	701a      	strb	r2, [r3, #0]
			ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 800416a:	494c      	ldr	r1, [pc, #304]	@ (800429c <HAL_UARTEx_RxEventCallback+0x958>)
 800416c:	484c      	ldr	r0, [pc, #304]	@ (80042a0 <HAL_UARTEx_RxEventCallback+0x95c>)
 800416e:	f7fd f9e9 	bl	8001544 <ServoDataSend>
		}break;
 8004172:	e104      	b.n	800437e <HAL_UARTEx_RxEventCallback+0xa3a>
			sscanf(chcmd + 1,"%f,%f", &fPm1, &fPm2, &fPm3);
 8004174:	4846      	ldr	r0, [pc, #280]	@ (8004290 <HAL_UARTEx_RxEventCallback+0x94c>)
 8004176:	4b4b      	ldr	r3, [pc, #300]	@ (80042a4 <HAL_UARTEx_RxEventCallback+0x960>)
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	4b4b      	ldr	r3, [pc, #300]	@ (80042a8 <HAL_UARTEx_RxEventCallback+0x964>)
 800417c:	4a4b      	ldr	r2, [pc, #300]	@ (80042ac <HAL_UARTEx_RxEventCallback+0x968>)
 800417e:	494c      	ldr	r1, [pc, #304]	@ (80042b0 <HAL_UARTEx_RxEventCallback+0x96c>)
 8004180:	f021 f8a2 	bl	80252c8 <siscanf>
			CommandTypedef.turnYaw.f = fPm1;
 8004184:	4b49      	ldr	r3, [pc, #292]	@ (80042ac <HAL_UARTEx_RxEventCallback+0x968>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a4a      	ldr	r2, [pc, #296]	@ (80042b4 <HAL_UARTEx_RxEventCallback+0x970>)
 800418a:	6113      	str	r3, [r2, #16]
			CommandTypedef.turnPitch.f = fPm2;
 800418c:	4b46      	ldr	r3, [pc, #280]	@ (80042a8 <HAL_UARTEx_RxEventCallback+0x964>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a48      	ldr	r2, [pc, #288]	@ (80042b4 <HAL_UARTEx_RxEventCallback+0x970>)
 8004192:	6153      	str	r3, [r2, #20]
		}break;
 8004194:	e0f3      	b.n	800437e <HAL_UARTEx_RxEventCallback+0xa3a>
			sscanf(chcmd + 1,"%d", &iPm1);
 8004196:	4b3e      	ldr	r3, [pc, #248]	@ (8004290 <HAL_UARTEx_RxEventCallback+0x94c>)
 8004198:	4a3e      	ldr	r2, [pc, #248]	@ (8004294 <HAL_UARTEx_RxEventCallback+0x950>)
 800419a:	4947      	ldr	r1, [pc, #284]	@ (80042b8 <HAL_UARTEx_RxEventCallback+0x974>)
 800419c:	4618      	mov	r0, r3
 800419e:	f021 f893 	bl	80252c8 <siscanf>
			switch(iPm1)
 80041a2:	4b3c      	ldr	r3, [pc, #240]	@ (8004294 <HAL_UARTEx_RxEventCallback+0x950>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	f200 80a8 	bhi.w	80042fc <HAL_UARTEx_RxEventCallback+0x9b8>
 80041ac:	a201      	add	r2, pc, #4	@ (adr r2, 80041b4 <HAL_UARTEx_RxEventCallback+0x870>)
 80041ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b2:	bf00      	nop
 80041b4:	080041c9 	.word	0x080041c9
 80041b8:	080041e9 	.word	0x080041e9
 80041bc:	08004209 	.word	0x08004209
 80041c0:	080042bd 	.word	0x080042bd
 80041c4:	080042dd 	.word	0x080042dd
					CommandTypedef.go2Zero = 0x01;
 80041c8:	4b3a      	ldr	r3, [pc, #232]	@ (80042b4 <HAL_UARTEx_RxEventCallback+0x970>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	701a      	strb	r2, [r3, #0]
					CommandTypedef.standbyEnable = 0x00;
 80041ce:	4b39      	ldr	r3, [pc, #228]	@ (80042b4 <HAL_UARTEx_RxEventCallback+0x970>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	705a      	strb	r2, [r3, #1]
					CommandTypedef.standbyDisable = 0x00;
 80041d4:	4b37      	ldr	r3, [pc, #220]	@ (80042b4 <HAL_UARTEx_RxEventCallback+0x970>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	709a      	strb	r2, [r3, #2]
					CommandTypedef.guideEnable = 0x00;
 80041da:	4b36      	ldr	r3, [pc, #216]	@ (80042b4 <HAL_UARTEx_RxEventCallback+0x970>)
 80041dc:	2200      	movs	r2, #0
 80041de:	711a      	strb	r2, [r3, #4]
					CommandTypedef.scanEnable = 0x00;
 80041e0:	4b34      	ldr	r3, [pc, #208]	@ (80042b4 <HAL_UARTEx_RxEventCallback+0x970>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	70da      	strb	r2, [r3, #3]
				}break;
 80041e6:	e08a      	b.n	80042fe <HAL_UARTEx_RxEventCallback+0x9ba>
					CommandTypedef.go2Zero = 0x00;
 80041e8:	4b32      	ldr	r3, [pc, #200]	@ (80042b4 <HAL_UARTEx_RxEventCallback+0x970>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	701a      	strb	r2, [r3, #0]
					CommandTypedef.standbyEnable = 0x01;
 80041ee:	4b31      	ldr	r3, [pc, #196]	@ (80042b4 <HAL_UARTEx_RxEventCallback+0x970>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	705a      	strb	r2, [r3, #1]
					CommandTypedef.standbyDisable = 0x00;
 80041f4:	4b2f      	ldr	r3, [pc, #188]	@ (80042b4 <HAL_UARTEx_RxEventCallback+0x970>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	709a      	strb	r2, [r3, #2]
					CommandTypedef.guideEnable = 0x00;
 80041fa:	4b2e      	ldr	r3, [pc, #184]	@ (80042b4 <HAL_UARTEx_RxEventCallback+0x970>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	711a      	strb	r2, [r3, #4]
					CommandTypedef.scanEnable = 0x00;
 8004200:	4b2c      	ldr	r3, [pc, #176]	@ (80042b4 <HAL_UARTEx_RxEventCallback+0x970>)
 8004202:	2200      	movs	r2, #0
 8004204:	70da      	strb	r2, [r3, #3]
				}break;
 8004206:	e07a      	b.n	80042fe <HAL_UARTEx_RxEventCallback+0x9ba>
					CommandTypedef.go2Zero = 0x00;
 8004208:	4b2a      	ldr	r3, [pc, #168]	@ (80042b4 <HAL_UARTEx_RxEventCallback+0x970>)
 800420a:	2200      	movs	r2, #0
 800420c:	701a      	strb	r2, [r3, #0]
					CommandTypedef.standbyEnable = 0x00;
 800420e:	4b29      	ldr	r3, [pc, #164]	@ (80042b4 <HAL_UARTEx_RxEventCallback+0x970>)
 8004210:	2200      	movs	r2, #0
 8004212:	705a      	strb	r2, [r3, #1]
					CommandTypedef.standbyDisable = 0x01;
 8004214:	4b27      	ldr	r3, [pc, #156]	@ (80042b4 <HAL_UARTEx_RxEventCallback+0x970>)
 8004216:	2201      	movs	r2, #1
 8004218:	709a      	strb	r2, [r3, #2]
					CommandTypedef.guideEnable = 0x00;
 800421a:	4b26      	ldr	r3, [pc, #152]	@ (80042b4 <HAL_UARTEx_RxEventCallback+0x970>)
 800421c:	2200      	movs	r2, #0
 800421e:	711a      	strb	r2, [r3, #4]
					CommandTypedef.scanEnable = 0x00;
 8004220:	4b24      	ldr	r3, [pc, #144]	@ (80042b4 <HAL_UARTEx_RxEventCallback+0x970>)
 8004222:	2200      	movs	r2, #0
 8004224:	70da      	strb	r2, [r3, #3]
				}break;
 8004226:	e06a      	b.n	80042fe <HAL_UARTEx_RxEventCallback+0x9ba>
 8004228:	24000978 	.word	0x24000978
 800422c:	24000564 	.word	0x24000564
 8004230:	30004f9c 	.word	0x30004f9c
 8004234:	30004f9f 	.word	0x30004f9f
 8004238:	24000590 	.word	0x24000590
 800423c:	30004f1c 	.word	0x30004f1c
 8004240:	58022000 	.word	0x58022000
 8004244:	24000e3c 	.word	0x24000e3c
 8004248:	40020010 	.word	0x40020010
 800424c:	40020028 	.word	0x40020028
 8004250:	40020040 	.word	0x40020040
 8004254:	40020058 	.word	0x40020058
 8004258:	40020070 	.word	0x40020070
 800425c:	40020088 	.word	0x40020088
 8004260:	400200a0 	.word	0x400200a0
 8004264:	400200b8 	.word	0x400200b8
 8004268:	40020410 	.word	0x40020410
 800426c:	40020428 	.word	0x40020428
 8004270:	40020440 	.word	0x40020440
 8004274:	40020458 	.word	0x40020458
 8004278:	40020470 	.word	0x40020470
 800427c:	40020488 	.word	0x40020488
 8004280:	400204a0 	.word	0x400204a0
 8004284:	400204b8 	.word	0x400204b8
 8004288:	24000aa0 	.word	0x24000aa0
 800428c:	3000501c 	.word	0x3000501c
 8004290:	3000501d 	.word	0x3000501d
 8004294:	240007ec 	.word	0x240007ec
 8004298:	0802939c 	.word	0x0802939c
 800429c:	24000154 	.word	0x24000154
 80042a0:	2400011c 	.word	0x2400011c
 80042a4:	240007f8 	.word	0x240007f8
 80042a8:	240007f4 	.word	0x240007f4
 80042ac:	240007f0 	.word	0x240007f0
 80042b0:	080293a0 	.word	0x080293a0
 80042b4:	24000184 	.word	0x24000184
 80042b8:	080293a8 	.word	0x080293a8
					CommandTypedef.go2Zero = 0x00;
 80042bc:	4b68      	ldr	r3, [pc, #416]	@ (8004460 <HAL_UARTEx_RxEventCallback+0xb1c>)
 80042be:	2200      	movs	r2, #0
 80042c0:	701a      	strb	r2, [r3, #0]
					CommandTypedef.standbyEnable = 0x00;
 80042c2:	4b67      	ldr	r3, [pc, #412]	@ (8004460 <HAL_UARTEx_RxEventCallback+0xb1c>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	705a      	strb	r2, [r3, #1]
					CommandTypedef.standbyDisable = 0x00;
 80042c8:	4b65      	ldr	r3, [pc, #404]	@ (8004460 <HAL_UARTEx_RxEventCallback+0xb1c>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	709a      	strb	r2, [r3, #2]
					CommandTypedef.guideEnable = 0x01;
 80042ce:	4b64      	ldr	r3, [pc, #400]	@ (8004460 <HAL_UARTEx_RxEventCallback+0xb1c>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	711a      	strb	r2, [r3, #4]
					CommandTypedef.scanEnable = 0x00;
 80042d4:	4b62      	ldr	r3, [pc, #392]	@ (8004460 <HAL_UARTEx_RxEventCallback+0xb1c>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	70da      	strb	r2, [r3, #3]
				}break;
 80042da:	e010      	b.n	80042fe <HAL_UARTEx_RxEventCallback+0x9ba>
					CommandTypedef.go2Zero = 0x00;
 80042dc:	4b60      	ldr	r3, [pc, #384]	@ (8004460 <HAL_UARTEx_RxEventCallback+0xb1c>)
 80042de:	2200      	movs	r2, #0
 80042e0:	701a      	strb	r2, [r3, #0]
					CommandTypedef.standbyEnable = 0x00;
 80042e2:	4b5f      	ldr	r3, [pc, #380]	@ (8004460 <HAL_UARTEx_RxEventCallback+0xb1c>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	705a      	strb	r2, [r3, #1]
					CommandTypedef.standbyDisable = 0x00;
 80042e8:	4b5d      	ldr	r3, [pc, #372]	@ (8004460 <HAL_UARTEx_RxEventCallback+0xb1c>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	709a      	strb	r2, [r3, #2]
					CommandTypedef.guideEnable = 0x00;
 80042ee:	4b5c      	ldr	r3, [pc, #368]	@ (8004460 <HAL_UARTEx_RxEventCallback+0xb1c>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	711a      	strb	r2, [r3, #4]
					CommandTypedef.scanEnable = 0x01;
 80042f4:	4b5a      	ldr	r3, [pc, #360]	@ (8004460 <HAL_UARTEx_RxEventCallback+0xb1c>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	70da      	strb	r2, [r3, #3]
				}break;
 80042fa:	e000      	b.n	80042fe <HAL_UARTEx_RxEventCallback+0x9ba>
					break;
 80042fc:	bf00      	nop
		}break;
 80042fe:	e03e      	b.n	800437e <HAL_UARTEx_RxEventCallback+0xa3a>
			sscanf(chcmd + 1,"%d,%d", &iPm1, &iPm2);
 8004300:	4858      	ldr	r0, [pc, #352]	@ (8004464 <HAL_UARTEx_RxEventCallback+0xb20>)
 8004302:	4b59      	ldr	r3, [pc, #356]	@ (8004468 <HAL_UARTEx_RxEventCallback+0xb24>)
 8004304:	4a59      	ldr	r2, [pc, #356]	@ (800446c <HAL_UARTEx_RxEventCallback+0xb28>)
 8004306:	495a      	ldr	r1, [pc, #360]	@ (8004470 <HAL_UARTEx_RxEventCallback+0xb2c>)
 8004308:	f020 ffde 	bl	80252c8 <siscanf>
			CommandTypedef.turnYawSpeed = iPm1 * 100;
 800430c:	4b57      	ldr	r3, [pc, #348]	@ (800446c <HAL_UARTEx_RxEventCallback+0xb28>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	b29b      	uxth	r3, r3
 8004312:	461a      	mov	r2, r3
 8004314:	0092      	lsls	r2, r2, #2
 8004316:	4413      	add	r3, r2
 8004318:	461a      	mov	r2, r3
 800431a:	0091      	lsls	r1, r2, #2
 800431c:	461a      	mov	r2, r3
 800431e:	460b      	mov	r3, r1
 8004320:	4413      	add	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	b29b      	uxth	r3, r3
 8004326:	b21a      	sxth	r2, r3
 8004328:	4b4d      	ldr	r3, [pc, #308]	@ (8004460 <HAL_UARTEx_RxEventCallback+0xb1c>)
 800432a:	861a      	strh	r2, [r3, #48]	@ 0x30
			CommandTypedef.turnPitchSpeed = iPm2 * 100;
 800432c:	4b4e      	ldr	r3, [pc, #312]	@ (8004468 <HAL_UARTEx_RxEventCallback+0xb24>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	b29b      	uxth	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	0092      	lsls	r2, r2, #2
 8004336:	4413      	add	r3, r2
 8004338:	461a      	mov	r2, r3
 800433a:	0091      	lsls	r1, r2, #2
 800433c:	461a      	mov	r2, r3
 800433e:	460b      	mov	r3, r1
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	b29b      	uxth	r3, r3
 8004346:	b21a      	sxth	r2, r3
 8004348:	4b45      	ldr	r3, [pc, #276]	@ (8004460 <HAL_UARTEx_RxEventCallback+0xb1c>)
 800434a:	865a      	strh	r2, [r3, #50]	@ 0x32
		}break;
 800434c:	e017      	b.n	800437e <HAL_UARTEx_RxEventCallback+0xa3a>
			ServoDataSendTypedef.TrackingFaultCleanCu = 0x66;
 800434e:	4b49      	ldr	r3, [pc, #292]	@ (8004474 <HAL_UARTEx_RxEventCallback+0xb30>)
 8004350:	2266      	movs	r2, #102	@ 0x66
 8004352:	741a      	strb	r2, [r3, #16]
			ServoDataSendTypedef.TrackingFaultCleanJing = 0x33;
 8004354:	4b47      	ldr	r3, [pc, #284]	@ (8004474 <HAL_UARTEx_RxEventCallback+0xb30>)
 8004356:	2233      	movs	r2, #51	@ 0x33
 8004358:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		}break;
 800435c:	e00f      	b.n	800437e <HAL_UARTEx_RxEventCallback+0xa3a>
			sscanf(chcmd + 1,"%f,%f", &fPm1, &fPm2);
 800435e:	4841      	ldr	r0, [pc, #260]	@ (8004464 <HAL_UARTEx_RxEventCallback+0xb20>)
 8004360:	4b45      	ldr	r3, [pc, #276]	@ (8004478 <HAL_UARTEx_RxEventCallback+0xb34>)
 8004362:	4a46      	ldr	r2, [pc, #280]	@ (800447c <HAL_UARTEx_RxEventCallback+0xb38>)
 8004364:	4946      	ldr	r1, [pc, #280]	@ (8004480 <HAL_UARTEx_RxEventCallback+0xb3c>)
 8004366:	f020 ffaf 	bl	80252c8 <siscanf>
			CommandTypedef.FSM_Yaw.f = fPm1;
 800436a:	4b44      	ldr	r3, [pc, #272]	@ (800447c <HAL_UARTEx_RxEventCallback+0xb38>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a3c      	ldr	r2, [pc, #240]	@ (8004460 <HAL_UARTEx_RxEventCallback+0xb1c>)
 8004370:	6193      	str	r3, [r2, #24]
			CommandTypedef.FSM_Pitch.f = fPm2;
 8004372:	4b41      	ldr	r3, [pc, #260]	@ (8004478 <HAL_UARTEx_RxEventCallback+0xb34>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a3a      	ldr	r2, [pc, #232]	@ (8004460 <HAL_UARTEx_RxEventCallback+0xb1c>)
 8004378:	61d3      	str	r3, [r2, #28]
		}break;
 800437a:	e000      	b.n	800437e <HAL_UARTEx_RxEventCallback+0xa3a>
		break;
 800437c:	bf00      	nop
	HAL_UART_Transmit(&huart2, chcmd, Size, 0xff);
 800437e:	887a      	ldrh	r2, [r7, #2]
 8004380:	23ff      	movs	r3, #255	@ 0xff
 8004382:	4940      	ldr	r1, [pc, #256]	@ (8004484 <HAL_UARTEx_RxEventCallback+0xb40>)
 8004384:	4840      	ldr	r0, [pc, #256]	@ (8004488 <HAL_UARTEx_RxEventCallback+0xb44>)
 8004386:	f00a fbcb 	bl	800eb20 <HAL_UART_Transmit>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)chcmd, 64);
 800438a:	2240      	movs	r2, #64	@ 0x40
 800438c:	493d      	ldr	r1, [pc, #244]	@ (8004484 <HAL_UARTEx_RxEventCallback+0xb40>)
 800438e:	483e      	ldr	r0, [pc, #248]	@ (8004488 <HAL_UARTEx_RxEventCallback+0xb44>)
 8004390:	f00d f931 	bl	80115f6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8004394:	4b3d      	ldr	r3, [pc, #244]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a3d      	ldr	r2, [pc, #244]	@ (8004490 <HAL_UARTEx_RxEventCallback+0xb4c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d04a      	beq.n	8004434 <HAL_UARTEx_RxEventCallback+0xaf0>
 800439e:	4b3b      	ldr	r3, [pc, #236]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a3c      	ldr	r2, [pc, #240]	@ (8004494 <HAL_UARTEx_RxEventCallback+0xb50>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d045      	beq.n	8004434 <HAL_UARTEx_RxEventCallback+0xaf0>
 80043a8:	4b38      	ldr	r3, [pc, #224]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a3a      	ldr	r2, [pc, #232]	@ (8004498 <HAL_UARTEx_RxEventCallback+0xb54>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d040      	beq.n	8004434 <HAL_UARTEx_RxEventCallback+0xaf0>
 80043b2:	4b36      	ldr	r3, [pc, #216]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a39      	ldr	r2, [pc, #228]	@ (800449c <HAL_UARTEx_RxEventCallback+0xb58>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d03b      	beq.n	8004434 <HAL_UARTEx_RxEventCallback+0xaf0>
 80043bc:	4b33      	ldr	r3, [pc, #204]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a37      	ldr	r2, [pc, #220]	@ (80044a0 <HAL_UARTEx_RxEventCallback+0xb5c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d036      	beq.n	8004434 <HAL_UARTEx_RxEventCallback+0xaf0>
 80043c6:	4b31      	ldr	r3, [pc, #196]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a36      	ldr	r2, [pc, #216]	@ (80044a4 <HAL_UARTEx_RxEventCallback+0xb60>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d031      	beq.n	8004434 <HAL_UARTEx_RxEventCallback+0xaf0>
 80043d0:	4b2e      	ldr	r3, [pc, #184]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a34      	ldr	r2, [pc, #208]	@ (80044a8 <HAL_UARTEx_RxEventCallback+0xb64>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d02c      	beq.n	8004434 <HAL_UARTEx_RxEventCallback+0xaf0>
 80043da:	4b2c      	ldr	r3, [pc, #176]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a33      	ldr	r2, [pc, #204]	@ (80044ac <HAL_UARTEx_RxEventCallback+0xb68>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d027      	beq.n	8004434 <HAL_UARTEx_RxEventCallback+0xaf0>
 80043e4:	4b29      	ldr	r3, [pc, #164]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a31      	ldr	r2, [pc, #196]	@ (80044b0 <HAL_UARTEx_RxEventCallback+0xb6c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d022      	beq.n	8004434 <HAL_UARTEx_RxEventCallback+0xaf0>
 80043ee:	4b27      	ldr	r3, [pc, #156]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a30      	ldr	r2, [pc, #192]	@ (80044b4 <HAL_UARTEx_RxEventCallback+0xb70>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d01d      	beq.n	8004434 <HAL_UARTEx_RxEventCallback+0xaf0>
 80043f8:	4b24      	ldr	r3, [pc, #144]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2e      	ldr	r2, [pc, #184]	@ (80044b8 <HAL_UARTEx_RxEventCallback+0xb74>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d018      	beq.n	8004434 <HAL_UARTEx_RxEventCallback+0xaf0>
 8004402:	4b22      	ldr	r3, [pc, #136]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2d      	ldr	r2, [pc, #180]	@ (80044bc <HAL_UARTEx_RxEventCallback+0xb78>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d013      	beq.n	8004434 <HAL_UARTEx_RxEventCallback+0xaf0>
 800440c:	4b1f      	ldr	r3, [pc, #124]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2b      	ldr	r2, [pc, #172]	@ (80044c0 <HAL_UARTEx_RxEventCallback+0xb7c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00e      	beq.n	8004434 <HAL_UARTEx_RxEventCallback+0xaf0>
 8004416:	4b1d      	ldr	r3, [pc, #116]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a2a      	ldr	r2, [pc, #168]	@ (80044c4 <HAL_UARTEx_RxEventCallback+0xb80>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d009      	beq.n	8004434 <HAL_UARTEx_RxEventCallback+0xaf0>
 8004420:	4b1a      	ldr	r3, [pc, #104]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a28      	ldr	r2, [pc, #160]	@ (80044c8 <HAL_UARTEx_RxEventCallback+0xb84>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d004      	beq.n	8004434 <HAL_UARTEx_RxEventCallback+0xaf0>
 800442a:	4b18      	ldr	r3, [pc, #96]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a27      	ldr	r2, [pc, #156]	@ (80044cc <HAL_UARTEx_RxEventCallback+0xb88>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d108      	bne.n	8004446 <HAL_UARTEx_RxEventCallback+0xb02>
 8004434:	4b15      	ldr	r3, [pc, #84]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	4b14      	ldr	r3, [pc, #80]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0208 	bic.w	r2, r2, #8
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	e008      	b.n	8004458 <HAL_UARTEx_RxEventCallback+0xb14>
 8004446:	4b11      	ldr	r3, [pc, #68]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b0f      	ldr	r3, [pc, #60]	@ (800448c <HAL_UARTEx_RxEventCallback+0xb48>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0204 	bic.w	r2, r2, #4
 8004454:	601a      	str	r2, [r3, #0]
}
 8004456:	e7ff      	b.n	8004458 <HAL_UARTEx_RxEventCallback+0xb14>
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	bd90      	pop	{r4, r7, pc}
 8004460:	24000184 	.word	0x24000184
 8004464:	3000501d 	.word	0x3000501d
 8004468:	240007fc 	.word	0x240007fc
 800446c:	240007ec 	.word	0x240007ec
 8004470:	080293ac 	.word	0x080293ac
 8004474:	24000154 	.word	0x24000154
 8004478:	240007f4 	.word	0x240007f4
 800447c:	240007f0 	.word	0x240007f0
 8004480:	080293a0 	.word	0x080293a0
 8004484:	3000501c 	.word	0x3000501c
 8004488:	24000aa0 	.word	0x24000aa0
 800448c:	24000f2c 	.word	0x24000f2c
 8004490:	40020010 	.word	0x40020010
 8004494:	40020028 	.word	0x40020028
 8004498:	40020040 	.word	0x40020040
 800449c:	40020058 	.word	0x40020058
 80044a0:	40020070 	.word	0x40020070
 80044a4:	40020088 	.word	0x40020088
 80044a8:	400200a0 	.word	0x400200a0
 80044ac:	400200b8 	.word	0x400200b8
 80044b0:	40020410 	.word	0x40020410
 80044b4:	40020428 	.word	0x40020428
 80044b8:	40020440 	.word	0x40020440
 80044bc:	40020458 	.word	0x40020458
 80044c0:	40020470 	.word	0x40020470
 80044c4:	40020488 	.word	0x40020488
 80044c8:	400204a0 	.word	0x400204a0
 80044cc:	400204b8 	.word	0x400204b8

080044d0 <HAL_UART_ErrorCallback>:
//             the HAL_UART_RxCpltCallback can be implemented in the user file.
//    */
// }

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  if(huart == &huart5)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a6b      	ldr	r2, [pc, #428]	@ (8004688 <HAL_UART_ErrorCallback+0x1b8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d166      	bne.n	80045ae <HAL_UART_ErrorCallback+0xde>
  {
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxbuff_servo, 128);
 80044e0:	2280      	movs	r2, #128	@ 0x80
 80044e2:	496a      	ldr	r1, [pc, #424]	@ (800468c <HAL_UART_ErrorCallback+0x1bc>)
 80044e4:	4868      	ldr	r0, [pc, #416]	@ (8004688 <HAL_UART_ErrorCallback+0x1b8>)
 80044e6:	f00d f886 	bl	80115f6 <HAL_UARTEx_ReceiveToIdle_DMA>
	   __HAL_DMA_DISABLE_IT(&hdma_uart5_rx, DMA_IT_HT);
 80044ea:	4b69      	ldr	r3, [pc, #420]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a69      	ldr	r2, [pc, #420]	@ (8004694 <HAL_UART_ErrorCallback+0x1c4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d04a      	beq.n	800458a <HAL_UART_ErrorCallback+0xba>
 80044f4:	4b66      	ldr	r3, [pc, #408]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a67      	ldr	r2, [pc, #412]	@ (8004698 <HAL_UART_ErrorCallback+0x1c8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d045      	beq.n	800458a <HAL_UART_ErrorCallback+0xba>
 80044fe:	4b64      	ldr	r3, [pc, #400]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a66      	ldr	r2, [pc, #408]	@ (800469c <HAL_UART_ErrorCallback+0x1cc>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d040      	beq.n	800458a <HAL_UART_ErrorCallback+0xba>
 8004508:	4b61      	ldr	r3, [pc, #388]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a64      	ldr	r2, [pc, #400]	@ (80046a0 <HAL_UART_ErrorCallback+0x1d0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d03b      	beq.n	800458a <HAL_UART_ErrorCallback+0xba>
 8004512:	4b5f      	ldr	r3, [pc, #380]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a63      	ldr	r2, [pc, #396]	@ (80046a4 <HAL_UART_ErrorCallback+0x1d4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d036      	beq.n	800458a <HAL_UART_ErrorCallback+0xba>
 800451c:	4b5c      	ldr	r3, [pc, #368]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a61      	ldr	r2, [pc, #388]	@ (80046a8 <HAL_UART_ErrorCallback+0x1d8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d031      	beq.n	800458a <HAL_UART_ErrorCallback+0xba>
 8004526:	4b5a      	ldr	r3, [pc, #360]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a60      	ldr	r2, [pc, #384]	@ (80046ac <HAL_UART_ErrorCallback+0x1dc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d02c      	beq.n	800458a <HAL_UART_ErrorCallback+0xba>
 8004530:	4b57      	ldr	r3, [pc, #348]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a5e      	ldr	r2, [pc, #376]	@ (80046b0 <HAL_UART_ErrorCallback+0x1e0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d027      	beq.n	800458a <HAL_UART_ErrorCallback+0xba>
 800453a:	4b55      	ldr	r3, [pc, #340]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a5d      	ldr	r2, [pc, #372]	@ (80046b4 <HAL_UART_ErrorCallback+0x1e4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d022      	beq.n	800458a <HAL_UART_ErrorCallback+0xba>
 8004544:	4b52      	ldr	r3, [pc, #328]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a5b      	ldr	r2, [pc, #364]	@ (80046b8 <HAL_UART_ErrorCallback+0x1e8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d01d      	beq.n	800458a <HAL_UART_ErrorCallback+0xba>
 800454e:	4b50      	ldr	r3, [pc, #320]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a5a      	ldr	r2, [pc, #360]	@ (80046bc <HAL_UART_ErrorCallback+0x1ec>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d018      	beq.n	800458a <HAL_UART_ErrorCallback+0xba>
 8004558:	4b4d      	ldr	r3, [pc, #308]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a58      	ldr	r2, [pc, #352]	@ (80046c0 <HAL_UART_ErrorCallback+0x1f0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <HAL_UART_ErrorCallback+0xba>
 8004562:	4b4b      	ldr	r3, [pc, #300]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a57      	ldr	r2, [pc, #348]	@ (80046c4 <HAL_UART_ErrorCallback+0x1f4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00e      	beq.n	800458a <HAL_UART_ErrorCallback+0xba>
 800456c:	4b48      	ldr	r3, [pc, #288]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a55      	ldr	r2, [pc, #340]	@ (80046c8 <HAL_UART_ErrorCallback+0x1f8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d009      	beq.n	800458a <HAL_UART_ErrorCallback+0xba>
 8004576:	4b46      	ldr	r3, [pc, #280]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a54      	ldr	r2, [pc, #336]	@ (80046cc <HAL_UART_ErrorCallback+0x1fc>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d004      	beq.n	800458a <HAL_UART_ErrorCallback+0xba>
 8004580:	4b43      	ldr	r3, [pc, #268]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a52      	ldr	r2, [pc, #328]	@ (80046d0 <HAL_UART_ErrorCallback+0x200>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d108      	bne.n	800459c <HAL_UART_ErrorCallback+0xcc>
 800458a:	4b41      	ldr	r3, [pc, #260]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4b3f      	ldr	r3, [pc, #252]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0208 	bic.w	r2, r2, #8
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	e27b      	b.n	8004a94 <HAL_UART_ErrorCallback+0x5c4>
 800459c:	4b3c      	ldr	r3, [pc, #240]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004690 <HAL_UART_ErrorCallback+0x1c0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0204 	bic.w	r2, r2, #4
 80045aa:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);	
	}
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045ac:	e272      	b.n	8004a94 <HAL_UART_ErrorCallback+0x5c4>
  }else if(huart == &huart3)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a48      	ldr	r2, [pc, #288]	@ (80046d4 <HAL_UART_ErrorCallback+0x204>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	f040 8094 	bne.w	80046e0 <HAL_UART_ErrorCallback+0x210>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxbuff_cu, 128);
 80045b8:	2280      	movs	r2, #128	@ 0x80
 80045ba:	4947      	ldr	r1, [pc, #284]	@ (80046d8 <HAL_UART_ErrorCallback+0x208>)
 80045bc:	4845      	ldr	r0, [pc, #276]	@ (80046d4 <HAL_UART_ErrorCallback+0x204>)
 80045be:	f00d f81a 	bl	80115f6 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80045c2:	4b46      	ldr	r3, [pc, #280]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a33      	ldr	r2, [pc, #204]	@ (8004694 <HAL_UART_ErrorCallback+0x1c4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d04a      	beq.n	8004662 <HAL_UART_ErrorCallback+0x192>
 80045cc:	4b43      	ldr	r3, [pc, #268]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a31      	ldr	r2, [pc, #196]	@ (8004698 <HAL_UART_ErrorCallback+0x1c8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d045      	beq.n	8004662 <HAL_UART_ErrorCallback+0x192>
 80045d6:	4b41      	ldr	r3, [pc, #260]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a30      	ldr	r2, [pc, #192]	@ (800469c <HAL_UART_ErrorCallback+0x1cc>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d040      	beq.n	8004662 <HAL_UART_ErrorCallback+0x192>
 80045e0:	4b3e      	ldr	r3, [pc, #248]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a2e      	ldr	r2, [pc, #184]	@ (80046a0 <HAL_UART_ErrorCallback+0x1d0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d03b      	beq.n	8004662 <HAL_UART_ErrorCallback+0x192>
 80045ea:	4b3c      	ldr	r3, [pc, #240]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a2d      	ldr	r2, [pc, #180]	@ (80046a4 <HAL_UART_ErrorCallback+0x1d4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d036      	beq.n	8004662 <HAL_UART_ErrorCallback+0x192>
 80045f4:	4b39      	ldr	r3, [pc, #228]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a2b      	ldr	r2, [pc, #172]	@ (80046a8 <HAL_UART_ErrorCallback+0x1d8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d031      	beq.n	8004662 <HAL_UART_ErrorCallback+0x192>
 80045fe:	4b37      	ldr	r3, [pc, #220]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a2a      	ldr	r2, [pc, #168]	@ (80046ac <HAL_UART_ErrorCallback+0x1dc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d02c      	beq.n	8004662 <HAL_UART_ErrorCallback+0x192>
 8004608:	4b34      	ldr	r3, [pc, #208]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a28      	ldr	r2, [pc, #160]	@ (80046b0 <HAL_UART_ErrorCallback+0x1e0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d027      	beq.n	8004662 <HAL_UART_ErrorCallback+0x192>
 8004612:	4b32      	ldr	r3, [pc, #200]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a27      	ldr	r2, [pc, #156]	@ (80046b4 <HAL_UART_ErrorCallback+0x1e4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d022      	beq.n	8004662 <HAL_UART_ErrorCallback+0x192>
 800461c:	4b2f      	ldr	r3, [pc, #188]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a25      	ldr	r2, [pc, #148]	@ (80046b8 <HAL_UART_ErrorCallback+0x1e8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d01d      	beq.n	8004662 <HAL_UART_ErrorCallback+0x192>
 8004626:	4b2d      	ldr	r3, [pc, #180]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a24      	ldr	r2, [pc, #144]	@ (80046bc <HAL_UART_ErrorCallback+0x1ec>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d018      	beq.n	8004662 <HAL_UART_ErrorCallback+0x192>
 8004630:	4b2a      	ldr	r3, [pc, #168]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a22      	ldr	r2, [pc, #136]	@ (80046c0 <HAL_UART_ErrorCallback+0x1f0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d013      	beq.n	8004662 <HAL_UART_ErrorCallback+0x192>
 800463a:	4b28      	ldr	r3, [pc, #160]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a21      	ldr	r2, [pc, #132]	@ (80046c4 <HAL_UART_ErrorCallback+0x1f4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00e      	beq.n	8004662 <HAL_UART_ErrorCallback+0x192>
 8004644:	4b25      	ldr	r3, [pc, #148]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1f      	ldr	r2, [pc, #124]	@ (80046c8 <HAL_UART_ErrorCallback+0x1f8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d009      	beq.n	8004662 <HAL_UART_ErrorCallback+0x192>
 800464e:	4b23      	ldr	r3, [pc, #140]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1e      	ldr	r2, [pc, #120]	@ (80046cc <HAL_UART_ErrorCallback+0x1fc>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <HAL_UART_ErrorCallback+0x192>
 8004658:	4b20      	ldr	r3, [pc, #128]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1c      	ldr	r2, [pc, #112]	@ (80046d0 <HAL_UART_ErrorCallback+0x200>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d108      	bne.n	8004674 <HAL_UART_ErrorCallback+0x1a4>
 8004662:	4b1e      	ldr	r3, [pc, #120]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	4b1c      	ldr	r3, [pc, #112]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0208 	bic.w	r2, r2, #8
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	e20f      	b.n	8004a94 <HAL_UART_ErrorCallback+0x5c4>
 8004674:	4b19      	ldr	r3, [pc, #100]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	4b18      	ldr	r3, [pc, #96]	@ (80046dc <HAL_UART_ErrorCallback+0x20c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0204 	bic.w	r2, r2, #4
 8004682:	601a      	str	r2, [r3, #0]
}
 8004684:	e206      	b.n	8004a94 <HAL_UART_ErrorCallback+0x5c4>
 8004686:	bf00      	nop
 8004688:	240008e4 	.word	0x240008e4
 800468c:	30004b84 	.word	0x30004b84
 8004690:	24000d4c 	.word	0x24000d4c
 8004694:	40020010 	.word	0x40020010
 8004698:	40020028 	.word	0x40020028
 800469c:	40020040 	.word	0x40020040
 80046a0:	40020058 	.word	0x40020058
 80046a4:	40020070 	.word	0x40020070
 80046a8:	40020088 	.word	0x40020088
 80046ac:	400200a0 	.word	0x400200a0
 80046b0:	400200b8 	.word	0x400200b8
 80046b4:	40020410 	.word	0x40020410
 80046b8:	40020428 	.word	0x40020428
 80046bc:	40020440 	.word	0x40020440
 80046c0:	40020458 	.word	0x40020458
 80046c4:	40020470 	.word	0x40020470
 80046c8:	40020488 	.word	0x40020488
 80046cc:	400204a0 	.word	0x400204a0
 80046d0:	400204b8 	.word	0x400204b8
 80046d4:	24000b34 	.word	0x24000b34
 80046d8:	30004d84 	.word	0x30004d84
 80046dc:	2400101c 	.word	0x2400101c
  }else if(huart == &huart4)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a6b      	ldr	r2, [pc, #428]	@ (8004890 <HAL_UART_ErrorCallback+0x3c0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d166      	bne.n	80047b6 <HAL_UART_ErrorCallback+0x2e6>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rxbuff_jing, 128);
 80046e8:	2280      	movs	r2, #128	@ 0x80
 80046ea:	496a      	ldr	r1, [pc, #424]	@ (8004894 <HAL_UART_ErrorCallback+0x3c4>)
 80046ec:	4868      	ldr	r0, [pc, #416]	@ (8004890 <HAL_UART_ErrorCallback+0x3c0>)
 80046ee:	f00c ff82 	bl	80115f6 <HAL_UARTEx_ReceiveToIdle_DMA>
	  	  	  __HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 80046f2:	4b69      	ldr	r3, [pc, #420]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a69      	ldr	r2, [pc, #420]	@ (800489c <HAL_UART_ErrorCallback+0x3cc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d04a      	beq.n	8004792 <HAL_UART_ErrorCallback+0x2c2>
 80046fc:	4b66      	ldr	r3, [pc, #408]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a67      	ldr	r2, [pc, #412]	@ (80048a0 <HAL_UART_ErrorCallback+0x3d0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d045      	beq.n	8004792 <HAL_UART_ErrorCallback+0x2c2>
 8004706:	4b64      	ldr	r3, [pc, #400]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a66      	ldr	r2, [pc, #408]	@ (80048a4 <HAL_UART_ErrorCallback+0x3d4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d040      	beq.n	8004792 <HAL_UART_ErrorCallback+0x2c2>
 8004710:	4b61      	ldr	r3, [pc, #388]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a64      	ldr	r2, [pc, #400]	@ (80048a8 <HAL_UART_ErrorCallback+0x3d8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d03b      	beq.n	8004792 <HAL_UART_ErrorCallback+0x2c2>
 800471a:	4b5f      	ldr	r3, [pc, #380]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a63      	ldr	r2, [pc, #396]	@ (80048ac <HAL_UART_ErrorCallback+0x3dc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d036      	beq.n	8004792 <HAL_UART_ErrorCallback+0x2c2>
 8004724:	4b5c      	ldr	r3, [pc, #368]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a61      	ldr	r2, [pc, #388]	@ (80048b0 <HAL_UART_ErrorCallback+0x3e0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d031      	beq.n	8004792 <HAL_UART_ErrorCallback+0x2c2>
 800472e:	4b5a      	ldr	r3, [pc, #360]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a60      	ldr	r2, [pc, #384]	@ (80048b4 <HAL_UART_ErrorCallback+0x3e4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d02c      	beq.n	8004792 <HAL_UART_ErrorCallback+0x2c2>
 8004738:	4b57      	ldr	r3, [pc, #348]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a5e      	ldr	r2, [pc, #376]	@ (80048b8 <HAL_UART_ErrorCallback+0x3e8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d027      	beq.n	8004792 <HAL_UART_ErrorCallback+0x2c2>
 8004742:	4b55      	ldr	r3, [pc, #340]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a5d      	ldr	r2, [pc, #372]	@ (80048bc <HAL_UART_ErrorCallback+0x3ec>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d022      	beq.n	8004792 <HAL_UART_ErrorCallback+0x2c2>
 800474c:	4b52      	ldr	r3, [pc, #328]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a5b      	ldr	r2, [pc, #364]	@ (80048c0 <HAL_UART_ErrorCallback+0x3f0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01d      	beq.n	8004792 <HAL_UART_ErrorCallback+0x2c2>
 8004756:	4b50      	ldr	r3, [pc, #320]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a5a      	ldr	r2, [pc, #360]	@ (80048c4 <HAL_UART_ErrorCallback+0x3f4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d018      	beq.n	8004792 <HAL_UART_ErrorCallback+0x2c2>
 8004760:	4b4d      	ldr	r3, [pc, #308]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a58      	ldr	r2, [pc, #352]	@ (80048c8 <HAL_UART_ErrorCallback+0x3f8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d013      	beq.n	8004792 <HAL_UART_ErrorCallback+0x2c2>
 800476a:	4b4b      	ldr	r3, [pc, #300]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a57      	ldr	r2, [pc, #348]	@ (80048cc <HAL_UART_ErrorCallback+0x3fc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00e      	beq.n	8004792 <HAL_UART_ErrorCallback+0x2c2>
 8004774:	4b48      	ldr	r3, [pc, #288]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a55      	ldr	r2, [pc, #340]	@ (80048d0 <HAL_UART_ErrorCallback+0x400>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d009      	beq.n	8004792 <HAL_UART_ErrorCallback+0x2c2>
 800477e:	4b46      	ldr	r3, [pc, #280]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a54      	ldr	r2, [pc, #336]	@ (80048d4 <HAL_UART_ErrorCallback+0x404>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d004      	beq.n	8004792 <HAL_UART_ErrorCallback+0x2c2>
 8004788:	4b43      	ldr	r3, [pc, #268]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a52      	ldr	r2, [pc, #328]	@ (80048d8 <HAL_UART_ErrorCallback+0x408>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d108      	bne.n	80047a4 <HAL_UART_ErrorCallback+0x2d4>
 8004792:	4b41      	ldr	r3, [pc, #260]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	4b3f      	ldr	r3, [pc, #252]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0208 	bic.w	r2, r2, #8
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	e177      	b.n	8004a94 <HAL_UART_ErrorCallback+0x5c4>
 80047a4:	4b3c      	ldr	r3, [pc, #240]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004898 <HAL_UART_ErrorCallback+0x3c8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0204 	bic.w	r2, r2, #4
 80047b2:	601a      	str	r2, [r3, #0]
}
 80047b4:	e16e      	b.n	8004a94 <HAL_UART_ErrorCallback+0x5c4>
  }else if(huart == &huart6)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a48      	ldr	r2, [pc, #288]	@ (80048dc <HAL_UART_ErrorCallback+0x40c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	f040 8094 	bne.w	80048e8 <HAL_UART_ErrorCallback+0x418>
	  HAL_UARTEx_ReceiveToIdle_IT(&huart6, rxbuff_focus, 11);
 80047c0:	220b      	movs	r2, #11
 80047c2:	4947      	ldr	r1, [pc, #284]	@ (80048e0 <HAL_UART_ErrorCallback+0x410>)
 80047c4:	4845      	ldr	r0, [pc, #276]	@ (80048dc <HAL_UART_ErrorCallback+0x40c>)
 80047c6:	f00c fec6 	bl	8011556 <HAL_UARTEx_ReceiveToIdle_IT>
	  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 80047ca:	4b46      	ldr	r3, [pc, #280]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a33      	ldr	r2, [pc, #204]	@ (800489c <HAL_UART_ErrorCallback+0x3cc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d04a      	beq.n	800486a <HAL_UART_ErrorCallback+0x39a>
 80047d4:	4b43      	ldr	r3, [pc, #268]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a31      	ldr	r2, [pc, #196]	@ (80048a0 <HAL_UART_ErrorCallback+0x3d0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d045      	beq.n	800486a <HAL_UART_ErrorCallback+0x39a>
 80047de:	4b41      	ldr	r3, [pc, #260]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a30      	ldr	r2, [pc, #192]	@ (80048a4 <HAL_UART_ErrorCallback+0x3d4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d040      	beq.n	800486a <HAL_UART_ErrorCallback+0x39a>
 80047e8:	4b3e      	ldr	r3, [pc, #248]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a2e      	ldr	r2, [pc, #184]	@ (80048a8 <HAL_UART_ErrorCallback+0x3d8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d03b      	beq.n	800486a <HAL_UART_ErrorCallback+0x39a>
 80047f2:	4b3c      	ldr	r3, [pc, #240]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a2d      	ldr	r2, [pc, #180]	@ (80048ac <HAL_UART_ErrorCallback+0x3dc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d036      	beq.n	800486a <HAL_UART_ErrorCallback+0x39a>
 80047fc:	4b39      	ldr	r3, [pc, #228]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a2b      	ldr	r2, [pc, #172]	@ (80048b0 <HAL_UART_ErrorCallback+0x3e0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d031      	beq.n	800486a <HAL_UART_ErrorCallback+0x39a>
 8004806:	4b37      	ldr	r3, [pc, #220]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a2a      	ldr	r2, [pc, #168]	@ (80048b4 <HAL_UART_ErrorCallback+0x3e4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d02c      	beq.n	800486a <HAL_UART_ErrorCallback+0x39a>
 8004810:	4b34      	ldr	r3, [pc, #208]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a28      	ldr	r2, [pc, #160]	@ (80048b8 <HAL_UART_ErrorCallback+0x3e8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d027      	beq.n	800486a <HAL_UART_ErrorCallback+0x39a>
 800481a:	4b32      	ldr	r3, [pc, #200]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a27      	ldr	r2, [pc, #156]	@ (80048bc <HAL_UART_ErrorCallback+0x3ec>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d022      	beq.n	800486a <HAL_UART_ErrorCallback+0x39a>
 8004824:	4b2f      	ldr	r3, [pc, #188]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a25      	ldr	r2, [pc, #148]	@ (80048c0 <HAL_UART_ErrorCallback+0x3f0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d01d      	beq.n	800486a <HAL_UART_ErrorCallback+0x39a>
 800482e:	4b2d      	ldr	r3, [pc, #180]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a24      	ldr	r2, [pc, #144]	@ (80048c4 <HAL_UART_ErrorCallback+0x3f4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d018      	beq.n	800486a <HAL_UART_ErrorCallback+0x39a>
 8004838:	4b2a      	ldr	r3, [pc, #168]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a22      	ldr	r2, [pc, #136]	@ (80048c8 <HAL_UART_ErrorCallback+0x3f8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <HAL_UART_ErrorCallback+0x39a>
 8004842:	4b28      	ldr	r3, [pc, #160]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a21      	ldr	r2, [pc, #132]	@ (80048cc <HAL_UART_ErrorCallback+0x3fc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00e      	beq.n	800486a <HAL_UART_ErrorCallback+0x39a>
 800484c:	4b25      	ldr	r3, [pc, #148]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a1f      	ldr	r2, [pc, #124]	@ (80048d0 <HAL_UART_ErrorCallback+0x400>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d009      	beq.n	800486a <HAL_UART_ErrorCallback+0x39a>
 8004856:	4b23      	ldr	r3, [pc, #140]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a1e      	ldr	r2, [pc, #120]	@ (80048d4 <HAL_UART_ErrorCallback+0x404>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d004      	beq.n	800486a <HAL_UART_ErrorCallback+0x39a>
 8004860:	4b20      	ldr	r3, [pc, #128]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a1c      	ldr	r2, [pc, #112]	@ (80048d8 <HAL_UART_ErrorCallback+0x408>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d108      	bne.n	800487c <HAL_UART_ErrorCallback+0x3ac>
 800486a:	4b1e      	ldr	r3, [pc, #120]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	4b1c      	ldr	r3, [pc, #112]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0208 	bic.w	r2, r2, #8
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e10b      	b.n	8004a94 <HAL_UART_ErrorCallback+0x5c4>
 800487c:	4b19      	ldr	r3, [pc, #100]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4b18      	ldr	r3, [pc, #96]	@ (80048e4 <HAL_UART_ErrorCallback+0x414>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0204 	bic.w	r2, r2, #4
 800488a:	601a      	str	r2, [r3, #0]
}
 800488c:	e102      	b.n	8004a94 <HAL_UART_ErrorCallback+0x5c4>
 800488e:	bf00      	nop
 8004890:	24000850 	.word	0x24000850
 8004894:	30004e84 	.word	0x30004e84
 8004898:	24000c5c 	.word	0x24000c5c
 800489c:	40020010 	.word	0x40020010
 80048a0:	40020028 	.word	0x40020028
 80048a4:	40020040 	.word	0x40020040
 80048a8:	40020058 	.word	0x40020058
 80048ac:	40020070 	.word	0x40020070
 80048b0:	40020088 	.word	0x40020088
 80048b4:	400200a0 	.word	0x400200a0
 80048b8:	400200b8 	.word	0x400200b8
 80048bc:	40020410 	.word	0x40020410
 80048c0:	40020428 	.word	0x40020428
 80048c4:	40020440 	.word	0x40020440
 80048c8:	40020458 	.word	0x40020458
 80048cc:	40020470 	.word	0x40020470
 80048d0:	40020488 	.word	0x40020488
 80048d4:	400204a0 	.word	0x400204a0
 80048d8:	400204b8 	.word	0x400204b8
 80048dc:	24000bc8 	.word	0x24000bc8
 80048e0:	30004f10 	.word	0x30004f10
 80048e4:	2400110c 	.word	0x2400110c
  }else if(huart == &huart7)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a6c      	ldr	r2, [pc, #432]	@ (8004a9c <HAL_UART_ErrorCallback+0x5cc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d166      	bne.n	80049be <HAL_UART_ErrorCallback+0x4ee>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart7, rxbuff_rangefinder, 128);
 80048f0:	2280      	movs	r2, #128	@ 0x80
 80048f2:	496b      	ldr	r1, [pc, #428]	@ (8004aa0 <HAL_UART_ErrorCallback+0x5d0>)
 80048f4:	4869      	ldr	r0, [pc, #420]	@ (8004a9c <HAL_UART_ErrorCallback+0x5cc>)
 80048f6:	f00c fe7e 	bl	80115f6 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 80048fa:	4b6a      	ldr	r3, [pc, #424]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a6a      	ldr	r2, [pc, #424]	@ (8004aa8 <HAL_UART_ErrorCallback+0x5d8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d04a      	beq.n	800499a <HAL_UART_ErrorCallback+0x4ca>
 8004904:	4b67      	ldr	r3, [pc, #412]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a68      	ldr	r2, [pc, #416]	@ (8004aac <HAL_UART_ErrorCallback+0x5dc>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d045      	beq.n	800499a <HAL_UART_ErrorCallback+0x4ca>
 800490e:	4b65      	ldr	r3, [pc, #404]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a67      	ldr	r2, [pc, #412]	@ (8004ab0 <HAL_UART_ErrorCallback+0x5e0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d040      	beq.n	800499a <HAL_UART_ErrorCallback+0x4ca>
 8004918:	4b62      	ldr	r3, [pc, #392]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a65      	ldr	r2, [pc, #404]	@ (8004ab4 <HAL_UART_ErrorCallback+0x5e4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d03b      	beq.n	800499a <HAL_UART_ErrorCallback+0x4ca>
 8004922:	4b60      	ldr	r3, [pc, #384]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a64      	ldr	r2, [pc, #400]	@ (8004ab8 <HAL_UART_ErrorCallback+0x5e8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d036      	beq.n	800499a <HAL_UART_ErrorCallback+0x4ca>
 800492c:	4b5d      	ldr	r3, [pc, #372]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a62      	ldr	r2, [pc, #392]	@ (8004abc <HAL_UART_ErrorCallback+0x5ec>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d031      	beq.n	800499a <HAL_UART_ErrorCallback+0x4ca>
 8004936:	4b5b      	ldr	r3, [pc, #364]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a61      	ldr	r2, [pc, #388]	@ (8004ac0 <HAL_UART_ErrorCallback+0x5f0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d02c      	beq.n	800499a <HAL_UART_ErrorCallback+0x4ca>
 8004940:	4b58      	ldr	r3, [pc, #352]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a5f      	ldr	r2, [pc, #380]	@ (8004ac4 <HAL_UART_ErrorCallback+0x5f4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d027      	beq.n	800499a <HAL_UART_ErrorCallback+0x4ca>
 800494a:	4b56      	ldr	r3, [pc, #344]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ac8 <HAL_UART_ErrorCallback+0x5f8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d022      	beq.n	800499a <HAL_UART_ErrorCallback+0x4ca>
 8004954:	4b53      	ldr	r3, [pc, #332]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a5c      	ldr	r2, [pc, #368]	@ (8004acc <HAL_UART_ErrorCallback+0x5fc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d01d      	beq.n	800499a <HAL_UART_ErrorCallback+0x4ca>
 800495e:	4b51      	ldr	r3, [pc, #324]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a5b      	ldr	r2, [pc, #364]	@ (8004ad0 <HAL_UART_ErrorCallback+0x600>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d018      	beq.n	800499a <HAL_UART_ErrorCallback+0x4ca>
 8004968:	4b4e      	ldr	r3, [pc, #312]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a59      	ldr	r2, [pc, #356]	@ (8004ad4 <HAL_UART_ErrorCallback+0x604>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <HAL_UART_ErrorCallback+0x4ca>
 8004972:	4b4c      	ldr	r3, [pc, #304]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a58      	ldr	r2, [pc, #352]	@ (8004ad8 <HAL_UART_ErrorCallback+0x608>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00e      	beq.n	800499a <HAL_UART_ErrorCallback+0x4ca>
 800497c:	4b49      	ldr	r3, [pc, #292]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a56      	ldr	r2, [pc, #344]	@ (8004adc <HAL_UART_ErrorCallback+0x60c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d009      	beq.n	800499a <HAL_UART_ErrorCallback+0x4ca>
 8004986:	4b47      	ldr	r3, [pc, #284]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a55      	ldr	r2, [pc, #340]	@ (8004ae0 <HAL_UART_ErrorCallback+0x610>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d004      	beq.n	800499a <HAL_UART_ErrorCallback+0x4ca>
 8004990:	4b44      	ldr	r3, [pc, #272]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a53      	ldr	r2, [pc, #332]	@ (8004ae4 <HAL_UART_ErrorCallback+0x614>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d108      	bne.n	80049ac <HAL_UART_ErrorCallback+0x4dc>
 800499a:	4b42      	ldr	r3, [pc, #264]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	4b40      	ldr	r3, [pc, #256]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0208 	bic.w	r2, r2, #8
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e073      	b.n	8004a94 <HAL_UART_ErrorCallback+0x5c4>
 80049ac:	4b3d      	ldr	r3, [pc, #244]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b3c      	ldr	r3, [pc, #240]	@ (8004aa4 <HAL_UART_ErrorCallback+0x5d4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0204 	bic.w	r2, r2, #4
 80049ba:	601a      	str	r2, [r3, #0]
}
 80049bc:	e06a      	b.n	8004a94 <HAL_UART_ErrorCallback+0x5c4>
	else if(huart == &huart2)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a49      	ldr	r2, [pc, #292]	@ (8004ae8 <HAL_UART_ErrorCallback+0x618>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d166      	bne.n	8004a94 <HAL_UART_ErrorCallback+0x5c4>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)chcmd, 16);
 80049c6:	2210      	movs	r2, #16
 80049c8:	4948      	ldr	r1, [pc, #288]	@ (8004aec <HAL_UART_ErrorCallback+0x61c>)
 80049ca:	4847      	ldr	r0, [pc, #284]	@ (8004ae8 <HAL_UART_ErrorCallback+0x618>)
 80049cc:	f00c fe13 	bl	80115f6 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);	
 80049d0:	4b47      	ldr	r3, [pc, #284]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a34      	ldr	r2, [pc, #208]	@ (8004aa8 <HAL_UART_ErrorCallback+0x5d8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d04a      	beq.n	8004a70 <HAL_UART_ErrorCallback+0x5a0>
 80049da:	4b45      	ldr	r3, [pc, #276]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a33      	ldr	r2, [pc, #204]	@ (8004aac <HAL_UART_ErrorCallback+0x5dc>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d045      	beq.n	8004a70 <HAL_UART_ErrorCallback+0x5a0>
 80049e4:	4b42      	ldr	r3, [pc, #264]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a31      	ldr	r2, [pc, #196]	@ (8004ab0 <HAL_UART_ErrorCallback+0x5e0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d040      	beq.n	8004a70 <HAL_UART_ErrorCallback+0x5a0>
 80049ee:	4b40      	ldr	r3, [pc, #256]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a30      	ldr	r2, [pc, #192]	@ (8004ab4 <HAL_UART_ErrorCallback+0x5e4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d03b      	beq.n	8004a70 <HAL_UART_ErrorCallback+0x5a0>
 80049f8:	4b3d      	ldr	r3, [pc, #244]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a2e      	ldr	r2, [pc, #184]	@ (8004ab8 <HAL_UART_ErrorCallback+0x5e8>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d036      	beq.n	8004a70 <HAL_UART_ErrorCallback+0x5a0>
 8004a02:	4b3b      	ldr	r3, [pc, #236]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a2d      	ldr	r2, [pc, #180]	@ (8004abc <HAL_UART_ErrorCallback+0x5ec>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d031      	beq.n	8004a70 <HAL_UART_ErrorCallback+0x5a0>
 8004a0c:	4b38      	ldr	r3, [pc, #224]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a2b      	ldr	r2, [pc, #172]	@ (8004ac0 <HAL_UART_ErrorCallback+0x5f0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d02c      	beq.n	8004a70 <HAL_UART_ErrorCallback+0x5a0>
 8004a16:	4b36      	ldr	r3, [pc, #216]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ac4 <HAL_UART_ErrorCallback+0x5f4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d027      	beq.n	8004a70 <HAL_UART_ErrorCallback+0x5a0>
 8004a20:	4b33      	ldr	r3, [pc, #204]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a28      	ldr	r2, [pc, #160]	@ (8004ac8 <HAL_UART_ErrorCallback+0x5f8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d022      	beq.n	8004a70 <HAL_UART_ErrorCallback+0x5a0>
 8004a2a:	4b31      	ldr	r3, [pc, #196]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a27      	ldr	r2, [pc, #156]	@ (8004acc <HAL_UART_ErrorCallback+0x5fc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d01d      	beq.n	8004a70 <HAL_UART_ErrorCallback+0x5a0>
 8004a34:	4b2e      	ldr	r3, [pc, #184]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a25      	ldr	r2, [pc, #148]	@ (8004ad0 <HAL_UART_ErrorCallback+0x600>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d018      	beq.n	8004a70 <HAL_UART_ErrorCallback+0x5a0>
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a24      	ldr	r2, [pc, #144]	@ (8004ad4 <HAL_UART_ErrorCallback+0x604>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d013      	beq.n	8004a70 <HAL_UART_ErrorCallback+0x5a0>
 8004a48:	4b29      	ldr	r3, [pc, #164]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a22      	ldr	r2, [pc, #136]	@ (8004ad8 <HAL_UART_ErrorCallback+0x608>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00e      	beq.n	8004a70 <HAL_UART_ErrorCallback+0x5a0>
 8004a52:	4b27      	ldr	r3, [pc, #156]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a21      	ldr	r2, [pc, #132]	@ (8004adc <HAL_UART_ErrorCallback+0x60c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d009      	beq.n	8004a70 <HAL_UART_ErrorCallback+0x5a0>
 8004a5c:	4b24      	ldr	r3, [pc, #144]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a1f      	ldr	r2, [pc, #124]	@ (8004ae0 <HAL_UART_ErrorCallback+0x610>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d004      	beq.n	8004a70 <HAL_UART_ErrorCallback+0x5a0>
 8004a66:	4b22      	ldr	r3, [pc, #136]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ae4 <HAL_UART_ErrorCallback+0x614>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d108      	bne.n	8004a82 <HAL_UART_ErrorCallback+0x5b2>
 8004a70:	4b1f      	ldr	r3, [pc, #124]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	4b1e      	ldr	r3, [pc, #120]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0208 	bic.w	r2, r2, #8
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	e008      	b.n	8004a94 <HAL_UART_ErrorCallback+0x5c4>
 8004a82:	4b1b      	ldr	r3, [pc, #108]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4b19      	ldr	r3, [pc, #100]	@ (8004af0 <HAL_UART_ErrorCallback+0x620>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0204 	bic.w	r2, r2, #4
 8004a90:	601a      	str	r2, [r3, #0]
}
 8004a92:	e7ff      	b.n	8004a94 <HAL_UART_ErrorCallback+0x5c4>
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	24000978 	.word	0x24000978
 8004aa0:	30004f9c 	.word	0x30004f9c
 8004aa4:	24000e3c 	.word	0x24000e3c
 8004aa8:	40020010 	.word	0x40020010
 8004aac:	40020028 	.word	0x40020028
 8004ab0:	40020040 	.word	0x40020040
 8004ab4:	40020058 	.word	0x40020058
 8004ab8:	40020070 	.word	0x40020070
 8004abc:	40020088 	.word	0x40020088
 8004ac0:	400200a0 	.word	0x400200a0
 8004ac4:	400200b8 	.word	0x400200b8
 8004ac8:	40020410 	.word	0x40020410
 8004acc:	40020428 	.word	0x40020428
 8004ad0:	40020440 	.word	0x40020440
 8004ad4:	40020458 	.word	0x40020458
 8004ad8:	40020470 	.word	0x40020470
 8004adc:	40020488 	.word	0x40020488
 8004ae0:	400204a0 	.word	0x400204a0
 8004ae4:	400204b8 	.word	0x400204b8
 8004ae8:	24000aa0 	.word	0x24000aa0
 8004aec:	3000501c 	.word	0x3000501c
 8004af0:	24000f2c 	.word	0x24000f2c

08004af4 <mytask>:



void mytask(void const * argument)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
	static switchFlag = 0;
	osDelay(5000);
 8004afc:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004b00:	f00d fd12 	bl	8012528 <osDelay>
	// SendFocusFrame.func = SetPos;
	// SendFocusData(&SendFocusFrame);
	// uart_printf("laserAdjust:%f\r\n",setFocusPos.f);
	// osDelay(100);

	Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8004b04:	4904      	ldr	r1, [pc, #16]	@ (8004b18 <mytask+0x24>)
 8004b06:	4805      	ldr	r0, [pc, #20]	@ (8004b1c <mytask+0x28>)
 8004b08:	f7fc fa7a 	bl	8001000 <Send2ImgModule>
	osDelay(500);
 8004b0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004b10:	f00d fd0a 	bl	8012528 <osDelay>
	Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8004b14:	bf00      	nop
 8004b16:	e7f5      	b.n	8004b04 <mytask+0x10>
 8004b18:	240000d8 	.word	0x240000d8
 8004b1c:	2400008c 	.word	0x2400008c

08004b20 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08e      	sub	sp, #56	@ 0x38
 8004b24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	605a      	str	r2, [r3, #4]
 8004b30:	609a      	str	r2, [r3, #8]
 8004b32:	60da      	str	r2, [r3, #12]
 8004b34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004b36:	4b5c      	ldr	r3, [pc, #368]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b3c:	4a5a      	ldr	r2, [pc, #360]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b46:	4b58      	ldr	r3, [pc, #352]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b50:	623b      	str	r3, [r7, #32]
 8004b52:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b54:	4b54      	ldr	r3, [pc, #336]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b5a:	4a53      	ldr	r2, [pc, #332]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004b5c:	f043 0320 	orr.w	r3, r3, #32
 8004b60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b64:	4b50      	ldr	r3, [pc, #320]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b72:	4b4d      	ldr	r3, [pc, #308]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b78:	4a4b      	ldr	r2, [pc, #300]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b82:	4b49      	ldr	r3, [pc, #292]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b90:	4b45      	ldr	r3, [pc, #276]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b96:	4a44      	ldr	r2, [pc, #272]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004b98:	f043 0304 	orr.w	r3, r3, #4
 8004b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ba0:	4b41      	ldr	r3, [pc, #260]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bae:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bb4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bbe:	4b3a      	ldr	r3, [pc, #232]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bcc:	4b36      	ldr	r3, [pc, #216]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bd2:	4a35      	ldr	r2, [pc, #212]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004bd4:	f043 0302 	orr.w	r3, r3, #2
 8004bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bdc:	4b32      	ldr	r3, [pc, #200]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004bea:	4b2f      	ldr	r3, [pc, #188]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bf0:	4a2d      	ldr	r2, [pc, #180]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c08:	4b27      	ldr	r3, [pc, #156]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c0e:	4a26      	ldr	r2, [pc, #152]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004c10:	f043 0308 	orr.w	r3, r3, #8
 8004c14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c18:	4b23      	ldr	r3, [pc, #140]	@ (8004ca8 <MX_GPIO_Init+0x188>)
 8004c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	607b      	str	r3, [r7, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8004c26:	2200      	movs	r2, #0
 8004c28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c2c:	481f      	ldr	r0, [pc, #124]	@ (8004cac <MX_GPIO_Init+0x18c>)
 8004c2e:	f006 fd97 	bl	800b760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_PWD_GPIO_Port, RF_PWD_Pin, GPIO_PIN_RESET);
 8004c32:	2200      	movs	r2, #0
 8004c34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c38:	481d      	ldr	r0, [pc, #116]	@ (8004cb0 <MX_GPIO_Init+0x190>)
 8004c3a:	f006 fd91 	bl	800b760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2108      	movs	r1, #8
 8004c42:	481c      	ldr	r0, [pc, #112]	@ (8004cb4 <MX_GPIO_Init+0x194>)
 8004c44:	f006 fd8c 	bl	800b760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8004c48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c56:	2300      	movs	r3, #0
 8004c58:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8004c5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4812      	ldr	r0, [pc, #72]	@ (8004cac <MX_GPIO_Init+0x18c>)
 8004c62:	f006 fbcd 	bl	800b400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_PWD_Pin;
 8004c66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c74:	2300      	movs	r3, #0
 8004c76:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RF_PWD_GPIO_Port, &GPIO_InitStruct);
 8004c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	480c      	ldr	r0, [pc, #48]	@ (8004cb0 <MX_GPIO_Init+0x190>)
 8004c80:	f006 fbbe 	bl	800b400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8004c84:	2308      	movs	r3, #8
 8004c86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c90:	2300      	movs	r3, #0
 8004c92:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8004c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4806      	ldr	r0, [pc, #24]	@ (8004cb4 <MX_GPIO_Init+0x194>)
 8004c9c:	f006 fbb0 	bl	800b400 <HAL_GPIO_Init>

}
 8004ca0:	bf00      	nop
 8004ca2:	3738      	adds	r7, #56	@ 0x38
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	58024400 	.word	0x58024400
 8004cac:	58022000 	.word	0x58022000
 8004cb0:	58021400 	.word	0x58021400
 8004cb4:	58021800 	.word	0x58021800

08004cb8 <uart_printf>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
__attribute__((section("._Text_Area"))) static char buff[128];

int uart_printf(const char *fmt, ...){
 8004cb8:	b40f      	push	{r0, r1, r2, r3}
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b082      	sub	sp, #8
 8004cbe:	af00      	add	r7, sp, #0
//  static char buff[128];
  va_list va;int ret;
  va_start(va, fmt);
 8004cc0:	f107 0314 	add.w	r3, r7, #20
 8004cc4:	603b      	str	r3, [r7, #0]
  ret = vsprintf(buff, fmt, va);
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	6939      	ldr	r1, [r7, #16]
 8004cca:	480b      	ldr	r0, [pc, #44]	@ (8004cf8 <uart_printf+0x40>)
 8004ccc:	f020 fb82 	bl	80253d4 <vsiprintf>
 8004cd0:	6078      	str	r0, [r7, #4]
  va_end(va);
  if (ret > 0){
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	dd07      	ble.n	8004ce8 <uart_printf+0x30>
    HAL_UART_Transmit(&huart1, (uint8_t*)buff, ret, HAL_MAX_DELAY);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce0:	4905      	ldr	r1, [pc, #20]	@ (8004cf8 <uart_printf+0x40>)
 8004ce2:	4806      	ldr	r0, [pc, #24]	@ (8004cfc <uart_printf+0x44>)
 8004ce4:	f009 ff1c 	bl	800eb20 <HAL_UART_Transmit>
  }
  return ret;
 8004ce8:	687b      	ldr	r3, [r7, #4]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cf4:	b004      	add	sp, #16
 8004cf6:	4770      	bx	lr
 8004cf8:	3000505c 	.word	0x3000505c
 8004cfc:	24000a0c 	.word	0x24000a0c

08004d00 <DelayMs>:



void DelayMs(uint32_t ms) {
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
    uint32_t startTick = HAL_GetTick();  // 记录当前SysTick�?
 8004d08:	f001 fe2e 	bl	8006968 <HAL_GetTick>
 8004d0c:	60f8      	str	r0, [r7, #12]
    while ((HAL_GetTick() - startTick) < ms) {
 8004d0e:	bf00      	nop
 8004d10:	f001 fe2a 	bl	8006968 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d8f7      	bhi.n	8004d10 <DelayMs+0x10>
        // 忙等�?
    }
}
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004d32:	f000 f935 	bl	8004fa0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8004d36:	4b41      	ldr	r3, [pc, #260]	@ (8004e3c <main+0x110>)
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d11b      	bne.n	8004d7a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004d42:	f3bf 8f4f 	dsb	sy
}
 8004d46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d48:	f3bf 8f6f 	isb	sy
}
 8004d4c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e3c <main+0x110>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004d56:	f3bf 8f4f 	dsb	sy
}
 8004d5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d5c:	f3bf 8f6f 	isb	sy
}
 8004d60:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004d62:	4b36      	ldr	r3, [pc, #216]	@ (8004e3c <main+0x110>)
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	4a35      	ldr	r2, [pc, #212]	@ (8004e3c <main+0x110>)
 8004d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d6c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d6e:	f3bf 8f4f 	dsb	sy
}
 8004d72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d74:	f3bf 8f6f 	isb	sy
}
 8004d78:	e000      	b.n	8004d7c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8004d7a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8004d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8004e3c <main+0x110>)
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d138      	bne.n	8004dfa <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004d88:	4b2c      	ldr	r3, [pc, #176]	@ (8004e3c <main+0x110>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004d90:	f3bf 8f4f 	dsb	sy
}
 8004d94:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8004d96:	4b29      	ldr	r3, [pc, #164]	@ (8004e3c <main+0x110>)
 8004d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d9c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	0b5b      	lsrs	r3, r3, #13
 8004da2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004da6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	08db      	lsrs	r3, r3, #3
 8004dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004db0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8004dba:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004dc0:	491e      	ldr	r1, [pc, #120]	@ (8004e3c <main+0x110>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	1e5a      	subs	r2, r3, #1
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1ef      	bne.n	8004db2 <main+0x86>
    } while(sets-- != 0U);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	1e5a      	subs	r2, r3, #1
 8004dd6:	60ba      	str	r2, [r7, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e5      	bne.n	8004da8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8004ddc:	f3bf 8f4f 	dsb	sy
}
 8004de0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8004de2:	4b16      	ldr	r3, [pc, #88]	@ (8004e3c <main+0x110>)
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	4a15      	ldr	r2, [pc, #84]	@ (8004e3c <main+0x110>)
 8004de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004dee:	f3bf 8f4f 	dsb	sy
}
 8004df2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004df4:	f3bf 8f6f 	isb	sy
}
 8004df8:	e000      	b.n	8004dfc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8004dfa:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004dfc:	f001 fd64 	bl	80068c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e00:	f000 f81e 	bl	8004e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e04:	f7ff fe8c 	bl	8004b20 <MX_GPIO_Init>
  MX_DMA_Init();
 8004e08:	f7fd fc0e 	bl	8002628 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8004e0c:	f000 fcc2 	bl	8005794 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004e10:	f000 fd0c 	bl	800582c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004e14:	f000 fd56 	bl	80058c4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8004e18:	f000 fda0 	bl	800595c <MX_USART6_UART_Init>
  MX_UART4_Init();
 8004e1c:	f000 fbd6 	bl	80055cc <MX_UART4_Init>
  MX_UART5_Init();
 8004e20:	f000 fc20 	bl	8005664 <MX_UART5_Init>
  MX_UART7_Init();
 8004e24:	f000 fc6a 	bl	80056fc <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2000);
 8004e28:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004e2c:	f001 fda8 	bl	8006980 <HAL_Delay>
//  uart_printf("hello world");
//  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8004e30:	f7fd fc9c 	bl	800276c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004e34:	f00d fb15 	bl	8012462 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004e38:	bf00      	nop
 8004e3a:	e7fd      	b.n	8004e38 <main+0x10c>
 8004e3c:	e000ed00 	.word	0xe000ed00

08004e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b09e      	sub	sp, #120	@ 0x78
 8004e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e4a:	224c      	movs	r2, #76	@ 0x4c
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f020 faf4 	bl	802543c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e54:	f107 030c 	add.w	r3, r7, #12
 8004e58:	2220      	movs	r2, #32
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f020 faed 	bl	802543c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004e62:	2002      	movs	r0, #2
 8004e64:	f006 fcb0 	bl	800b7c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60bb      	str	r3, [r7, #8]
 8004e6c:	4b49      	ldr	r3, [pc, #292]	@ (8004f94 <SystemClock_Config+0x154>)
 8004e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e70:	4a48      	ldr	r2, [pc, #288]	@ (8004f94 <SystemClock_Config+0x154>)
 8004e72:	f023 0301 	bic.w	r3, r3, #1
 8004e76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e78:	4b46      	ldr	r3, [pc, #280]	@ (8004f94 <SystemClock_Config+0x154>)
 8004e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	4b45      	ldr	r3, [pc, #276]	@ (8004f98 <SystemClock_Config+0x158>)
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	4a44      	ldr	r2, [pc, #272]	@ (8004f98 <SystemClock_Config+0x158>)
 8004e88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e8c:	6193      	str	r3, [r2, #24]
 8004e8e:	4b42      	ldr	r3, [pc, #264]	@ (8004f98 <SystemClock_Config+0x158>)
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004e96:	60bb      	str	r3, [r7, #8]
 8004e98:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004e9a:	bf00      	nop
 8004e9c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f98 <SystemClock_Config+0x158>)
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ea4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ea8:	d1f8      	bne.n	8004e9c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eaa:	4b3c      	ldr	r3, [pc, #240]	@ (8004f9c <SystemClock_Config+0x15c>)
 8004eac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004eb0:	4a3a      	ldr	r2, [pc, #232]	@ (8004f9c <SystemClock_Config+0x15c>)
 8004eb2:	f043 0302 	orr.w	r3, r3, #2
 8004eb6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004eba:	4b38      	ldr	r3, [pc, #224]	@ (8004f9c <SystemClock_Config+0x15c>)
 8004ebc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	607b      	str	r3, [r7, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004ec8:	2300      	movs	r3, #0
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	4b32      	ldr	r3, [pc, #200]	@ (8004f98 <SystemClock_Config+0x158>)
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	4a31      	ldr	r2, [pc, #196]	@ (8004f98 <SystemClock_Config+0x158>)
 8004ed2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ed6:	6193      	str	r3, [r2, #24]
 8004ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8004f98 <SystemClock_Config+0x158>)
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004ee0:	603b      	str	r3, [r7, #0]
 8004ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8004f94 <SystemClock_Config+0x154>)
 8004ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee6:	4a2b      	ldr	r2, [pc, #172]	@ (8004f94 <SystemClock_Config+0x154>)
 8004ee8:	f043 0301 	orr.w	r3, r3, #1
 8004eec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004eee:	4b29      	ldr	r3, [pc, #164]	@ (8004f94 <SystemClock_Config+0x154>)
 8004ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	603b      	str	r3, [r7, #0]
 8004ef8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004efa:	bf00      	nop
 8004efc:	4b26      	ldr	r3, [pc, #152]	@ (8004f98 <SystemClock_Config+0x158>)
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f08:	d1f8      	bne.n	8004efc <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004f12:	2340      	movs	r3, #64	@ 0x40
 8004f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f16:	2302      	movs	r3, #2
 8004f18:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004f1e:	2304      	movs	r3, #4
 8004f20:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004f22:	233c      	movs	r3, #60	@ 0x3c
 8004f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004f26:	2302      	movs	r3, #2
 8004f28:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004f2e:	2302      	movs	r3, #2
 8004f30:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004f32:	230c      	movs	r3, #12
 8004f34:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004f36:	2300      	movs	r3, #0
 8004f38:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f42:	4618      	mov	r0, r3
 8004f44:	f006 fc7a 	bl	800b83c <HAL_RCC_OscConfig>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8004f4e:	f000 f877 	bl	8005040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f52:	233f      	movs	r3, #63	@ 0x3f
 8004f54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f56:	2303      	movs	r3, #3
 8004f58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004f5e:	2308      	movs	r3, #8
 8004f60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004f62:	2340      	movs	r3, #64	@ 0x40
 8004f64:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004f66:	2340      	movs	r3, #64	@ 0x40
 8004f68:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004f6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004f70:	2340      	movs	r3, #64	@ 0x40
 8004f72:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004f74:	f107 030c 	add.w	r3, r7, #12
 8004f78:	2104      	movs	r1, #4
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f007 f8b8 	bl	800c0f0 <HAL_RCC_ClockConfig>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8004f86:	f000 f85b 	bl	8005040 <Error_Handler>
  }
}
 8004f8a:	bf00      	nop
 8004f8c:	3778      	adds	r7, #120	@ 0x78
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	58000400 	.word	0x58000400
 8004f98:	58024800 	.word	0x58024800
 8004f9c:	58024400 	.word	0x58024400

08004fa0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8004fa6:	463b      	mov	r3, r7
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	605a      	str	r2, [r3, #4]
 8004fae:	609a      	str	r2, [r3, #8]
 8004fb0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8004fb2:	f001 fe09 	bl	8006bc8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8004fc2:	231f      	movs	r3, #31
 8004fc4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8004fc6:	2387      	movs	r3, #135	@ 0x87
 8004fc8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004fe2:	463b      	mov	r3, r7
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f001 fe27 	bl	8006c38 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8004fea:	2301      	movs	r3, #1
 8004fec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8004fee:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8004ff2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8004ff4:	230e      	movs	r3, #14
 8004ff6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8005000:	2303      	movs	r3, #3
 8005002:	72fb      	strb	r3, [r7, #11]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005004:	463b      	mov	r3, r7
 8005006:	4618      	mov	r0, r3
 8005008:	f001 fe16 	bl	8006c38 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800500c:	2004      	movs	r0, #4
 800500e:	f001 fdf3 	bl	8006bf8 <HAL_MPU_Enable>

}
 8005012:	bf00      	nop
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a04      	ldr	r2, [pc, #16]	@ (800503c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d101      	bne.n	8005032 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800502e:	f001 fc87 	bl	8006940 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40001000 	.word	0x40001000

08005040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005044:	b672      	cpsid	i
}
 8005046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005048:	bf00      	nop
 800504a:	e7fd      	b.n	8005048 <Error_Handler+0x8>

0800504c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005052:	4b0c      	ldr	r3, [pc, #48]	@ (8005084 <HAL_MspInit+0x38>)
 8005054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005058:	4a0a      	ldr	r2, [pc, #40]	@ (8005084 <HAL_MspInit+0x38>)
 800505a:	f043 0302 	orr.w	r3, r3, #2
 800505e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005062:	4b08      	ldr	r3, [pc, #32]	@ (8005084 <HAL_MspInit+0x38>)
 8005064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	607b      	str	r3, [r7, #4]
 800506e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005070:	2200      	movs	r2, #0
 8005072:	210f      	movs	r1, #15
 8005074:	f06f 0001 	mvn.w	r0, #1
 8005078:	f001 fd7e 	bl	8006b78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800507c:	bf00      	nop
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	58024400 	.word	0x58024400

08005088 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b090      	sub	sp, #64	@ 0x40
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b0f      	cmp	r3, #15
 8005094:	d827      	bhi.n	80050e6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8005096:	2200      	movs	r2, #0
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	2036      	movs	r0, #54	@ 0x36
 800509c:	f001 fd6c 	bl	8006b78 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80050a0:	2036      	movs	r0, #54	@ 0x36
 80050a2:	f001 fd83 	bl	8006bac <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80050a6:	4a29      	ldr	r2, [pc, #164]	@ (800514c <HAL_InitTick+0xc4>)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80050ac:	4b28      	ldr	r3, [pc, #160]	@ (8005150 <HAL_InitTick+0xc8>)
 80050ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050b2:	4a27      	ldr	r2, [pc, #156]	@ (8005150 <HAL_InitTick+0xc8>)
 80050b4:	f043 0310 	orr.w	r3, r3, #16
 80050b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80050bc:	4b24      	ldr	r3, [pc, #144]	@ (8005150 <HAL_InitTick+0xc8>)
 80050be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050c2:	f003 0310 	and.w	r3, r3, #16
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80050ca:	f107 0210 	add.w	r2, r7, #16
 80050ce:	f107 0314 	add.w	r3, r7, #20
 80050d2:	4611      	mov	r1, r2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f007 fb97 	bl	800c808 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80050da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80050de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <HAL_InitTick+0x6a>
 80050e4:	e001      	b.n	80050ea <HAL_InitTick+0x62>
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e02b      	b.n	8005142 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80050ea:	f007 fb61 	bl	800c7b0 <HAL_RCC_GetPCLK1Freq>
 80050ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80050f0:	e004      	b.n	80050fc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80050f2:	f007 fb5d 	bl	800c7b0 <HAL_RCC_GetPCLK1Freq>
 80050f6:	4603      	mov	r3, r0
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80050fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050fe:	4a15      	ldr	r2, [pc, #84]	@ (8005154 <HAL_InitTick+0xcc>)
 8005100:	fba2 2303 	umull	r2, r3, r2, r3
 8005104:	0c9b      	lsrs	r3, r3, #18
 8005106:	3b01      	subs	r3, #1
 8005108:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800510a:	4b13      	ldr	r3, [pc, #76]	@ (8005158 <HAL_InitTick+0xd0>)
 800510c:	4a13      	ldr	r2, [pc, #76]	@ (800515c <HAL_InitTick+0xd4>)
 800510e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005110:	4b11      	ldr	r3, [pc, #68]	@ (8005158 <HAL_InitTick+0xd0>)
 8005112:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005116:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005118:	4a0f      	ldr	r2, [pc, #60]	@ (8005158 <HAL_InitTick+0xd0>)
 800511a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800511c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800511e:	4b0e      	ldr	r3, [pc, #56]	@ (8005158 <HAL_InitTick+0xd0>)
 8005120:	2200      	movs	r2, #0
 8005122:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005124:	4b0c      	ldr	r3, [pc, #48]	@ (8005158 <HAL_InitTick+0xd0>)
 8005126:	2200      	movs	r2, #0
 8005128:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800512a:	480b      	ldr	r0, [pc, #44]	@ (8005158 <HAL_InitTick+0xd0>)
 800512c:	f009 f9da 	bl	800e4e4 <HAL_TIM_Base_Init>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d104      	bne.n	8005140 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005136:	4808      	ldr	r0, [pc, #32]	@ (8005158 <HAL_InitTick+0xd0>)
 8005138:	f009 fa36 	bl	800e5a8 <HAL_TIM_Base_Start_IT>
 800513c:	4603      	mov	r3, r0
 800513e:	e000      	b.n	8005142 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
}
 8005142:	4618      	mov	r0, r3
 8005144:	3740      	adds	r7, #64	@ 0x40
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	240001e4 	.word	0x240001e4
 8005150:	58024400 	.word	0x58024400
 8005154:	431bde83 	.word	0x431bde83
 8005158:	24000800 	.word	0x24000800
 800515c:	40001000 	.word	0x40001000

08005160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005164:	bf00      	nop
 8005166:	e7fd      	b.n	8005164 <NMI_Handler+0x4>

08005168 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800516c:	bf00      	nop
 800516e:	e7fd      	b.n	800516c <HardFault_Handler+0x4>

08005170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005174:	bf00      	nop
 8005176:	e7fd      	b.n	8005174 <MemManage_Handler+0x4>

08005178 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800517c:	bf00      	nop
 800517e:	e7fd      	b.n	800517c <BusFault_Handler+0x4>

08005180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005184:	bf00      	nop
 8005186:	e7fd      	b.n	8005184 <UsageFault_Handler+0x4>

08005188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800518c:	bf00      	nop
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
	...

08005198 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800519c:	4802      	ldr	r0, [pc, #8]	@ (80051a8 <DMA1_Stream0_IRQHandler+0x10>)
 800519e:	f003 f8b5 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80051a2:	bf00      	nop
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	24000f2c 	.word	0x24000f2c

080051ac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80051b0:	4802      	ldr	r0, [pc, #8]	@ (80051bc <DMA1_Stream1_IRQHandler+0x10>)
 80051b2:	f003 f8ab 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80051b6:	bf00      	nop
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	24000fa4 	.word	0x24000fa4

080051c0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80051c4:	4802      	ldr	r0, [pc, #8]	@ (80051d0 <DMA1_Stream2_IRQHandler+0x10>)
 80051c6:	f003 f8a1 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80051ca:	bf00      	nop
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	2400101c 	.word	0x2400101c

080051d4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80051d8:	4802      	ldr	r0, [pc, #8]	@ (80051e4 <DMA1_Stream3_IRQHandler+0x10>)
 80051da:	f003 f897 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80051de:	bf00      	nop
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	24001094 	.word	0x24001094

080051e8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80051ec:	4802      	ldr	r0, [pc, #8]	@ (80051f8 <DMA1_Stream4_IRQHandler+0x10>)
 80051ee:	f003 f88d 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80051f2:	bf00      	nop
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	2400110c 	.word	0x2400110c

080051fc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8005200:	4802      	ldr	r0, [pc, #8]	@ (800520c <DMA1_Stream5_IRQHandler+0x10>)
 8005202:	f003 f883 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005206:	bf00      	nop
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	24001184 	.word	0x24001184

08005210 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005214:	4802      	ldr	r0, [pc, #8]	@ (8005220 <DMA1_Stream6_IRQHandler+0x10>)
 8005216:	f003 f879 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800521a:	bf00      	nop
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	24000c5c 	.word	0x24000c5c

08005224 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005228:	4802      	ldr	r0, [pc, #8]	@ (8005234 <USART2_IRQHandler+0x10>)
 800522a:	f009 fd07 	bl	800ec3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800522e:	bf00      	nop
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	24000aa0 	.word	0x24000aa0

08005238 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800523c:	4802      	ldr	r0, [pc, #8]	@ (8005248 <USART3_IRQHandler+0x10>)
 800523e:	f009 fcfd 	bl	800ec3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005242:	bf00      	nop
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	24000b34 	.word	0x24000b34

0800524c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005250:	4802      	ldr	r0, [pc, #8]	@ (800525c <DMA1_Stream7_IRQHandler+0x10>)
 8005252:	f003 f85b 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8005256:	bf00      	nop
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	24000cd4 	.word	0x24000cd4

08005260 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005264:	4802      	ldr	r0, [pc, #8]	@ (8005270 <UART4_IRQHandler+0x10>)
 8005266:	f009 fce9 	bl	800ec3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800526a:	bf00      	nop
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	24000850 	.word	0x24000850

08005274 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005278:	4802      	ldr	r0, [pc, #8]	@ (8005284 <UART5_IRQHandler+0x10>)
 800527a:	f009 fcdf 	bl	800ec3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800527e:	bf00      	nop
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	240008e4 	.word	0x240008e4

08005288 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800528c:	4802      	ldr	r0, [pc, #8]	@ (8005298 <TIM6_DAC_IRQHandler+0x10>)
 800528e:	f009 fa03 	bl	800e698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005292:	bf00      	nop
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	24000800 	.word	0x24000800

0800529c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80052a0:	4802      	ldr	r0, [pc, #8]	@ (80052ac <DMA2_Stream0_IRQHandler+0x10>)
 80052a2:	f003 f833 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80052a6:	bf00      	nop
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	24000d4c 	.word	0x24000d4c

080052b0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80052b4:	4802      	ldr	r0, [pc, #8]	@ (80052c0 <DMA2_Stream1_IRQHandler+0x10>)
 80052b6:	f003 f829 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80052ba:	bf00      	nop
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	24000dc4 	.word	0x24000dc4

080052c4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80052c8:	4802      	ldr	r0, [pc, #8]	@ (80052d4 <DMA2_Stream2_IRQHandler+0x10>)
 80052ca:	f003 f81f 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80052ce:	bf00      	nop
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	24000e3c 	.word	0x24000e3c

080052d8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 80052dc:	4802      	ldr	r0, [pc, #8]	@ (80052e8 <DMA2_Stream3_IRQHandler+0x10>)
 80052de:	f003 f815 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80052e2:	bf00      	nop
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	24000eb4 	.word	0x24000eb4

080052ec <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80052f0:	4802      	ldr	r0, [pc, #8]	@ (80052fc <ETH_IRQHandler+0x10>)
 80052f2:	f004 fef1 	bl	800a0d8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80052f6:	bf00      	nop
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	2400125c 	.word	0x2400125c

08005300 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005304:	4802      	ldr	r0, [pc, #8]	@ (8005310 <USART6_IRQHandler+0x10>)
 8005306:	f009 fc99 	bl	800ec3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
//  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
  /* USER CODE END USART6_IRQn 1 */
}
 800530a:	bf00      	nop
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	24000bc8 	.word	0x24000bc8

08005314 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8005318:	4802      	ldr	r0, [pc, #8]	@ (8005324 <UART7_IRQHandler+0x10>)
 800531a:	f009 fc8f 	bl	800ec3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800531e:	bf00      	nop
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	24000978 	.word	0x24000978

08005328 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  return 1;
 800532c:	2301      	movs	r3, #1
}
 800532e:	4618      	mov	r0, r3
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <_kill>:

int _kill(int pid, int sig)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005342:	4b05      	ldr	r3, [pc, #20]	@ (8005358 <_kill+0x20>)
 8005344:	2216      	movs	r2, #22
 8005346:	601a      	str	r2, [r3, #0]
  return -1;
 8005348:	f04f 33ff 	mov.w	r3, #4294967295
}
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	2400bfa8 	.word	0x2400bfa8

0800535c <_exit>:

void _exit (int status)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005364:	f04f 31ff 	mov.w	r1, #4294967295
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff ffe5 	bl	8005338 <_kill>
  while (1) {}    /* Make sure we hang here */
 800536e:	bf00      	nop
 8005370:	e7fd      	b.n	800536e <_exit+0x12>

08005372 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b086      	sub	sp, #24
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	e00a      	b.n	800539a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005384:	f3af 8000 	nop.w
 8005388:	4601      	mov	r1, r0
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	60ba      	str	r2, [r7, #8]
 8005390:	b2ca      	uxtb	r2, r1
 8005392:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	3301      	adds	r3, #1
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	429a      	cmp	r2, r3
 80053a0:	dbf0      	blt.n	8005384 <_read+0x12>
  }

  return len;
 80053a2:	687b      	ldr	r3, [r7, #4]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	e009      	b.n	80053d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	60ba      	str	r2, [r7, #8]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	3301      	adds	r3, #1
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	dbf1      	blt.n	80053be <_write+0x12>
  }
  return len;
 80053da:	687b      	ldr	r3, [r7, #4]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <_close>:

int _close(int file)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80053ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800540c:	605a      	str	r2, [r3, #4]
  return 0;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <_isatty>:

int _isatty(int file)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005424:	2301      	movs	r3, #1
}
 8005426:	4618      	mov	r0, r3
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005454:	4a14      	ldr	r2, [pc, #80]	@ (80054a8 <_sbrk+0x5c>)
 8005456:	4b15      	ldr	r3, [pc, #84]	@ (80054ac <_sbrk+0x60>)
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005460:	4b13      	ldr	r3, [pc, #76]	@ (80054b0 <_sbrk+0x64>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005468:	4b11      	ldr	r3, [pc, #68]	@ (80054b0 <_sbrk+0x64>)
 800546a:	4a12      	ldr	r2, [pc, #72]	@ (80054b4 <_sbrk+0x68>)
 800546c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800546e:	4b10      	ldr	r3, [pc, #64]	@ (80054b0 <_sbrk+0x64>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4413      	add	r3, r2
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	429a      	cmp	r2, r3
 800547a:	d205      	bcs.n	8005488 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800547c:	4b0e      	ldr	r3, [pc, #56]	@ (80054b8 <_sbrk+0x6c>)
 800547e:	220c      	movs	r2, #12
 8005480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005482:	f04f 33ff 	mov.w	r3, #4294967295
 8005486:	e009      	b.n	800549c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8005488:	4b09      	ldr	r3, [pc, #36]	@ (80054b0 <_sbrk+0x64>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800548e:	4b08      	ldr	r3, [pc, #32]	@ (80054b0 <_sbrk+0x64>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4413      	add	r3, r2
 8005496:	4a06      	ldr	r2, [pc, #24]	@ (80054b0 <_sbrk+0x64>)
 8005498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800549a:	68fb      	ldr	r3, [r7, #12]
}
 800549c:	4618      	mov	r0, r3
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	24080000 	.word	0x24080000
 80054ac:	00000400 	.word	0x00000400
 80054b0:	2400084c 	.word	0x2400084c
 80054b4:	2400c0f8 	.word	0x2400c0f8
 80054b8:	2400bfa8 	.word	0x2400bfa8

080054bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80054c0:	4b37      	ldr	r3, [pc, #220]	@ (80055a0 <SystemInit+0xe4>)
 80054c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c6:	4a36      	ldr	r2, [pc, #216]	@ (80055a0 <SystemInit+0xe4>)
 80054c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80054cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80054d0:	4b34      	ldr	r3, [pc, #208]	@ (80055a4 <SystemInit+0xe8>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 030f 	and.w	r3, r3, #15
 80054d8:	2b06      	cmp	r3, #6
 80054da:	d807      	bhi.n	80054ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80054dc:	4b31      	ldr	r3, [pc, #196]	@ (80055a4 <SystemInit+0xe8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f023 030f 	bic.w	r3, r3, #15
 80054e4:	4a2f      	ldr	r2, [pc, #188]	@ (80055a4 <SystemInit+0xe8>)
 80054e6:	f043 0307 	orr.w	r3, r3, #7
 80054ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80054ec:	4b2e      	ldr	r3, [pc, #184]	@ (80055a8 <SystemInit+0xec>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a2d      	ldr	r2, [pc, #180]	@ (80055a8 <SystemInit+0xec>)
 80054f2:	f043 0301 	orr.w	r3, r3, #1
 80054f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80054f8:	4b2b      	ldr	r3, [pc, #172]	@ (80055a8 <SystemInit+0xec>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80054fe:	4b2a      	ldr	r3, [pc, #168]	@ (80055a8 <SystemInit+0xec>)
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4929      	ldr	r1, [pc, #164]	@ (80055a8 <SystemInit+0xec>)
 8005504:	4b29      	ldr	r3, [pc, #164]	@ (80055ac <SystemInit+0xf0>)
 8005506:	4013      	ands	r3, r2
 8005508:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800550a:	4b26      	ldr	r3, [pc, #152]	@ (80055a4 <SystemInit+0xe8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0308 	and.w	r3, r3, #8
 8005512:	2b00      	cmp	r3, #0
 8005514:	d007      	beq.n	8005526 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005516:	4b23      	ldr	r3, [pc, #140]	@ (80055a4 <SystemInit+0xe8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f023 030f 	bic.w	r3, r3, #15
 800551e:	4a21      	ldr	r2, [pc, #132]	@ (80055a4 <SystemInit+0xe8>)
 8005520:	f043 0307 	orr.w	r3, r3, #7
 8005524:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005526:	4b20      	ldr	r3, [pc, #128]	@ (80055a8 <SystemInit+0xec>)
 8005528:	2200      	movs	r2, #0
 800552a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800552c:	4b1e      	ldr	r3, [pc, #120]	@ (80055a8 <SystemInit+0xec>)
 800552e:	2200      	movs	r2, #0
 8005530:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005532:	4b1d      	ldr	r3, [pc, #116]	@ (80055a8 <SystemInit+0xec>)
 8005534:	2200      	movs	r2, #0
 8005536:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005538:	4b1b      	ldr	r3, [pc, #108]	@ (80055a8 <SystemInit+0xec>)
 800553a:	4a1d      	ldr	r2, [pc, #116]	@ (80055b0 <SystemInit+0xf4>)
 800553c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800553e:	4b1a      	ldr	r3, [pc, #104]	@ (80055a8 <SystemInit+0xec>)
 8005540:	4a1c      	ldr	r2, [pc, #112]	@ (80055b4 <SystemInit+0xf8>)
 8005542:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005544:	4b18      	ldr	r3, [pc, #96]	@ (80055a8 <SystemInit+0xec>)
 8005546:	4a1c      	ldr	r2, [pc, #112]	@ (80055b8 <SystemInit+0xfc>)
 8005548:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800554a:	4b17      	ldr	r3, [pc, #92]	@ (80055a8 <SystemInit+0xec>)
 800554c:	2200      	movs	r2, #0
 800554e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005550:	4b15      	ldr	r3, [pc, #84]	@ (80055a8 <SystemInit+0xec>)
 8005552:	4a19      	ldr	r2, [pc, #100]	@ (80055b8 <SystemInit+0xfc>)
 8005554:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005556:	4b14      	ldr	r3, [pc, #80]	@ (80055a8 <SystemInit+0xec>)
 8005558:	2200      	movs	r2, #0
 800555a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800555c:	4b12      	ldr	r3, [pc, #72]	@ (80055a8 <SystemInit+0xec>)
 800555e:	4a16      	ldr	r2, [pc, #88]	@ (80055b8 <SystemInit+0xfc>)
 8005560:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005562:	4b11      	ldr	r3, [pc, #68]	@ (80055a8 <SystemInit+0xec>)
 8005564:	2200      	movs	r2, #0
 8005566:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005568:	4b0f      	ldr	r3, [pc, #60]	@ (80055a8 <SystemInit+0xec>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a0e      	ldr	r2, [pc, #56]	@ (80055a8 <SystemInit+0xec>)
 800556e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005572:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005574:	4b0c      	ldr	r3, [pc, #48]	@ (80055a8 <SystemInit+0xec>)
 8005576:	2200      	movs	r2, #0
 8005578:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800557a:	4b10      	ldr	r3, [pc, #64]	@ (80055bc <SystemInit+0x100>)
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	4b10      	ldr	r3, [pc, #64]	@ (80055c0 <SystemInit+0x104>)
 8005580:	4013      	ands	r3, r2
 8005582:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005586:	d202      	bcs.n	800558e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005588:	4b0e      	ldr	r3, [pc, #56]	@ (80055c4 <SystemInit+0x108>)
 800558a:	2201      	movs	r2, #1
 800558c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800558e:	4b0e      	ldr	r3, [pc, #56]	@ (80055c8 <SystemInit+0x10c>)
 8005590:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8005594:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005596:	bf00      	nop
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	e000ed00 	.word	0xe000ed00
 80055a4:	52002000 	.word	0x52002000
 80055a8:	58024400 	.word	0x58024400
 80055ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80055b0:	02020200 	.word	0x02020200
 80055b4:	01ff0000 	.word	0x01ff0000
 80055b8:	01010280 	.word	0x01010280
 80055bc:	5c001000 	.word	0x5c001000
 80055c0:	ffff0000 	.word	0xffff0000
 80055c4:	51008108 	.word	0x51008108
 80055c8:	52004000 	.word	0x52004000

080055cc <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80055d0:	4b22      	ldr	r3, [pc, #136]	@ (800565c <MX_UART4_Init+0x90>)
 80055d2:	4a23      	ldr	r2, [pc, #140]	@ (8005660 <MX_UART4_Init+0x94>)
 80055d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 80055d6:	4b21      	ldr	r3, [pc, #132]	@ (800565c <MX_UART4_Init+0x90>)
 80055d8:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80055dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80055de:	4b1f      	ldr	r3, [pc, #124]	@ (800565c <MX_UART4_Init+0x90>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80055e4:	4b1d      	ldr	r3, [pc, #116]	@ (800565c <MX_UART4_Init+0x90>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80055ea:	4b1c      	ldr	r3, [pc, #112]	@ (800565c <MX_UART4_Init+0x90>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80055f0:	4b1a      	ldr	r3, [pc, #104]	@ (800565c <MX_UART4_Init+0x90>)
 80055f2:	220c      	movs	r2, #12
 80055f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055f6:	4b19      	ldr	r3, [pc, #100]	@ (800565c <MX_UART4_Init+0x90>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80055fc:	4b17      	ldr	r3, [pc, #92]	@ (800565c <MX_UART4_Init+0x90>)
 80055fe:	2200      	movs	r2, #0
 8005600:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005602:	4b16      	ldr	r3, [pc, #88]	@ (800565c <MX_UART4_Init+0x90>)
 8005604:	2200      	movs	r2, #0
 8005606:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005608:	4b14      	ldr	r3, [pc, #80]	@ (800565c <MX_UART4_Init+0x90>)
 800560a:	2200      	movs	r2, #0
 800560c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800560e:	4b13      	ldr	r3, [pc, #76]	@ (800565c <MX_UART4_Init+0x90>)
 8005610:	2200      	movs	r2, #0
 8005612:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005614:	4811      	ldr	r0, [pc, #68]	@ (800565c <MX_UART4_Init+0x90>)
 8005616:	f009 fa33 	bl	800ea80 <HAL_UART_Init>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8005620:	f7ff fd0e 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005624:	2100      	movs	r1, #0
 8005626:	480d      	ldr	r0, [pc, #52]	@ (800565c <MX_UART4_Init+0x90>)
 8005628:	f00b ff19 	bl	801145e <HAL_UARTEx_SetTxFifoThreshold>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8005632:	f7ff fd05 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005636:	2100      	movs	r1, #0
 8005638:	4808      	ldr	r0, [pc, #32]	@ (800565c <MX_UART4_Init+0x90>)
 800563a:	f00b ff4e 	bl	80114da <HAL_UARTEx_SetRxFifoThreshold>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8005644:	f7ff fcfc 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8005648:	4804      	ldr	r0, [pc, #16]	@ (800565c <MX_UART4_Init+0x90>)
 800564a:	f00b fecf 	bl	80113ec <HAL_UARTEx_DisableFifoMode>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8005654:	f7ff fcf4 	bl	8005040 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005658:	bf00      	nop
 800565a:	bd80      	pop	{r7, pc}
 800565c:	24000850 	.word	0x24000850
 8005660:	40004c00 	.word	0x40004c00

08005664 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005668:	4b22      	ldr	r3, [pc, #136]	@ (80056f4 <MX_UART5_Init+0x90>)
 800566a:	4a23      	ldr	r2, [pc, #140]	@ (80056f8 <MX_UART5_Init+0x94>)
 800566c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 800566e:	4b21      	ldr	r3, [pc, #132]	@ (80056f4 <MX_UART5_Init+0x90>)
 8005670:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8005674:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005676:	4b1f      	ldr	r3, [pc, #124]	@ (80056f4 <MX_UART5_Init+0x90>)
 8005678:	2200      	movs	r2, #0
 800567a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800567c:	4b1d      	ldr	r3, [pc, #116]	@ (80056f4 <MX_UART5_Init+0x90>)
 800567e:	2200      	movs	r2, #0
 8005680:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005682:	4b1c      	ldr	r3, [pc, #112]	@ (80056f4 <MX_UART5_Init+0x90>)
 8005684:	2200      	movs	r2, #0
 8005686:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005688:	4b1a      	ldr	r3, [pc, #104]	@ (80056f4 <MX_UART5_Init+0x90>)
 800568a:	220c      	movs	r2, #12
 800568c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800568e:	4b19      	ldr	r3, [pc, #100]	@ (80056f4 <MX_UART5_Init+0x90>)
 8005690:	2200      	movs	r2, #0
 8005692:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005694:	4b17      	ldr	r3, [pc, #92]	@ (80056f4 <MX_UART5_Init+0x90>)
 8005696:	2200      	movs	r2, #0
 8005698:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800569a:	4b16      	ldr	r3, [pc, #88]	@ (80056f4 <MX_UART5_Init+0x90>)
 800569c:	2200      	movs	r2, #0
 800569e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80056a0:	4b14      	ldr	r3, [pc, #80]	@ (80056f4 <MX_UART5_Init+0x90>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80056a6:	4b13      	ldr	r3, [pc, #76]	@ (80056f4 <MX_UART5_Init+0x90>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80056ac:	4811      	ldr	r0, [pc, #68]	@ (80056f4 <MX_UART5_Init+0x90>)
 80056ae:	f009 f9e7 	bl	800ea80 <HAL_UART_Init>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80056b8:	f7ff fcc2 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80056bc:	2100      	movs	r1, #0
 80056be:	480d      	ldr	r0, [pc, #52]	@ (80056f4 <MX_UART5_Init+0x90>)
 80056c0:	f00b fecd 	bl	801145e <HAL_UARTEx_SetTxFifoThreshold>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80056ca:	f7ff fcb9 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80056ce:	2100      	movs	r1, #0
 80056d0:	4808      	ldr	r0, [pc, #32]	@ (80056f4 <MX_UART5_Init+0x90>)
 80056d2:	f00b ff02 	bl	80114da <HAL_UARTEx_SetRxFifoThreshold>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80056dc:	f7ff fcb0 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80056e0:	4804      	ldr	r0, [pc, #16]	@ (80056f4 <MX_UART5_Init+0x90>)
 80056e2:	f00b fe83 	bl	80113ec <HAL_UARTEx_DisableFifoMode>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80056ec:	f7ff fca8 	bl	8005040 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80056f0:	bf00      	nop
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	240008e4 	.word	0x240008e4
 80056f8:	40005000 	.word	0x40005000

080056fc <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8005700:	4b22      	ldr	r3, [pc, #136]	@ (800578c <MX_UART7_Init+0x90>)
 8005702:	4a23      	ldr	r2, [pc, #140]	@ (8005790 <MX_UART7_Init+0x94>)
 8005704:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8005706:	4b21      	ldr	r3, [pc, #132]	@ (800578c <MX_UART7_Init+0x90>)
 8005708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800570c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800570e:	4b1f      	ldr	r3, [pc, #124]	@ (800578c <MX_UART7_Init+0x90>)
 8005710:	2200      	movs	r2, #0
 8005712:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8005714:	4b1d      	ldr	r3, [pc, #116]	@ (800578c <MX_UART7_Init+0x90>)
 8005716:	2200      	movs	r2, #0
 8005718:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800571a:	4b1c      	ldr	r3, [pc, #112]	@ (800578c <MX_UART7_Init+0x90>)
 800571c:	2200      	movs	r2, #0
 800571e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8005720:	4b1a      	ldr	r3, [pc, #104]	@ (800578c <MX_UART7_Init+0x90>)
 8005722:	220c      	movs	r2, #12
 8005724:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005726:	4b19      	ldr	r3, [pc, #100]	@ (800578c <MX_UART7_Init+0x90>)
 8005728:	2200      	movs	r2, #0
 800572a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800572c:	4b17      	ldr	r3, [pc, #92]	@ (800578c <MX_UART7_Init+0x90>)
 800572e:	2200      	movs	r2, #0
 8005730:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005732:	4b16      	ldr	r3, [pc, #88]	@ (800578c <MX_UART7_Init+0x90>)
 8005734:	2200      	movs	r2, #0
 8005736:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005738:	4b14      	ldr	r3, [pc, #80]	@ (800578c <MX_UART7_Init+0x90>)
 800573a:	2200      	movs	r2, #0
 800573c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800573e:	4b13      	ldr	r3, [pc, #76]	@ (800578c <MX_UART7_Init+0x90>)
 8005740:	2200      	movs	r2, #0
 8005742:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8005744:	4811      	ldr	r0, [pc, #68]	@ (800578c <MX_UART7_Init+0x90>)
 8005746:	f009 f99b 	bl	800ea80 <HAL_UART_Init>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8005750:	f7ff fc76 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005754:	2100      	movs	r1, #0
 8005756:	480d      	ldr	r0, [pc, #52]	@ (800578c <MX_UART7_Init+0x90>)
 8005758:	f00b fe81 	bl	801145e <HAL_UARTEx_SetTxFifoThreshold>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8005762:	f7ff fc6d 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005766:	2100      	movs	r1, #0
 8005768:	4808      	ldr	r0, [pc, #32]	@ (800578c <MX_UART7_Init+0x90>)
 800576a:	f00b feb6 	bl	80114da <HAL_UARTEx_SetRxFifoThreshold>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8005774:	f7ff fc64 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8005778:	4804      	ldr	r0, [pc, #16]	@ (800578c <MX_UART7_Init+0x90>)
 800577a:	f00b fe37 	bl	80113ec <HAL_UARTEx_DisableFifoMode>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8005784:	f7ff fc5c 	bl	8005040 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8005788:	bf00      	nop
 800578a:	bd80      	pop	{r7, pc}
 800578c:	24000978 	.word	0x24000978
 8005790:	40007800 	.word	0x40007800

08005794 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005798:	4b22      	ldr	r3, [pc, #136]	@ (8005824 <MX_USART1_UART_Init+0x90>)
 800579a:	4a23      	ldr	r2, [pc, #140]	@ (8005828 <MX_USART1_UART_Init+0x94>)
 800579c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800579e:	4b21      	ldr	r3, [pc, #132]	@ (8005824 <MX_USART1_UART_Init+0x90>)
 80057a0:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80057a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80057a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005824 <MX_USART1_UART_Init+0x90>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80057ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005824 <MX_USART1_UART_Init+0x90>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80057b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005824 <MX_USART1_UART_Init+0x90>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80057b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005824 <MX_USART1_UART_Init+0x90>)
 80057ba:	220c      	movs	r2, #12
 80057bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057be:	4b19      	ldr	r3, [pc, #100]	@ (8005824 <MX_USART1_UART_Init+0x90>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80057c4:	4b17      	ldr	r3, [pc, #92]	@ (8005824 <MX_USART1_UART_Init+0x90>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80057ca:	4b16      	ldr	r3, [pc, #88]	@ (8005824 <MX_USART1_UART_Init+0x90>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80057d0:	4b14      	ldr	r3, [pc, #80]	@ (8005824 <MX_USART1_UART_Init+0x90>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80057d6:	4b13      	ldr	r3, [pc, #76]	@ (8005824 <MX_USART1_UART_Init+0x90>)
 80057d8:	2200      	movs	r2, #0
 80057da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80057dc:	4811      	ldr	r0, [pc, #68]	@ (8005824 <MX_USART1_UART_Init+0x90>)
 80057de:	f009 f94f 	bl	800ea80 <HAL_UART_Init>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80057e8:	f7ff fc2a 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80057ec:	2100      	movs	r1, #0
 80057ee:	480d      	ldr	r0, [pc, #52]	@ (8005824 <MX_USART1_UART_Init+0x90>)
 80057f0:	f00b fe35 	bl	801145e <HAL_UARTEx_SetTxFifoThreshold>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80057fa:	f7ff fc21 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80057fe:	2100      	movs	r1, #0
 8005800:	4808      	ldr	r0, [pc, #32]	@ (8005824 <MX_USART1_UART_Init+0x90>)
 8005802:	f00b fe6a 	bl	80114da <HAL_UARTEx_SetRxFifoThreshold>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800580c:	f7ff fc18 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005810:	4804      	ldr	r0, [pc, #16]	@ (8005824 <MX_USART1_UART_Init+0x90>)
 8005812:	f00b fdeb 	bl	80113ec <HAL_UARTEx_DisableFifoMode>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800581c:	f7ff fc10 	bl	8005040 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005820:	bf00      	nop
 8005822:	bd80      	pop	{r7, pc}
 8005824:	24000a0c 	.word	0x24000a0c
 8005828:	40011000 	.word	0x40011000

0800582c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005830:	4b22      	ldr	r3, [pc, #136]	@ (80058bc <MX_USART2_UART_Init+0x90>)
 8005832:	4a23      	ldr	r2, [pc, #140]	@ (80058c0 <MX_USART2_UART_Init+0x94>)
 8005834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8005836:	4b21      	ldr	r3, [pc, #132]	@ (80058bc <MX_USART2_UART_Init+0x90>)
 8005838:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 800583c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800583e:	4b1f      	ldr	r3, [pc, #124]	@ (80058bc <MX_USART2_UART_Init+0x90>)
 8005840:	2200      	movs	r2, #0
 8005842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005844:	4b1d      	ldr	r3, [pc, #116]	@ (80058bc <MX_USART2_UART_Init+0x90>)
 8005846:	2200      	movs	r2, #0
 8005848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800584a:	4b1c      	ldr	r3, [pc, #112]	@ (80058bc <MX_USART2_UART_Init+0x90>)
 800584c:	2200      	movs	r2, #0
 800584e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005850:	4b1a      	ldr	r3, [pc, #104]	@ (80058bc <MX_USART2_UART_Init+0x90>)
 8005852:	220c      	movs	r2, #12
 8005854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005856:	4b19      	ldr	r3, [pc, #100]	@ (80058bc <MX_USART2_UART_Init+0x90>)
 8005858:	2200      	movs	r2, #0
 800585a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800585c:	4b17      	ldr	r3, [pc, #92]	@ (80058bc <MX_USART2_UART_Init+0x90>)
 800585e:	2200      	movs	r2, #0
 8005860:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005862:	4b16      	ldr	r3, [pc, #88]	@ (80058bc <MX_USART2_UART_Init+0x90>)
 8005864:	2200      	movs	r2, #0
 8005866:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005868:	4b14      	ldr	r3, [pc, #80]	@ (80058bc <MX_USART2_UART_Init+0x90>)
 800586a:	2200      	movs	r2, #0
 800586c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800586e:	4b13      	ldr	r3, [pc, #76]	@ (80058bc <MX_USART2_UART_Init+0x90>)
 8005870:	2200      	movs	r2, #0
 8005872:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005874:	4811      	ldr	r0, [pc, #68]	@ (80058bc <MX_USART2_UART_Init+0x90>)
 8005876:	f009 f903 	bl	800ea80 <HAL_UART_Init>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005880:	f7ff fbde 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005884:	2100      	movs	r1, #0
 8005886:	480d      	ldr	r0, [pc, #52]	@ (80058bc <MX_USART2_UART_Init+0x90>)
 8005888:	f00b fde9 	bl	801145e <HAL_UARTEx_SetTxFifoThreshold>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005892:	f7ff fbd5 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005896:	2100      	movs	r1, #0
 8005898:	4808      	ldr	r0, [pc, #32]	@ (80058bc <MX_USART2_UART_Init+0x90>)
 800589a:	f00b fe1e 	bl	80114da <HAL_UARTEx_SetRxFifoThreshold>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80058a4:	f7ff fbcc 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80058a8:	4804      	ldr	r0, [pc, #16]	@ (80058bc <MX_USART2_UART_Init+0x90>)
 80058aa:	f00b fd9f 	bl	80113ec <HAL_UARTEx_DisableFifoMode>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80058b4:	f7ff fbc4 	bl	8005040 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80058b8:	bf00      	nop
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	24000aa0 	.word	0x24000aa0
 80058c0:	40004400 	.word	0x40004400

080058c4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80058c8:	4b22      	ldr	r3, [pc, #136]	@ (8005954 <MX_USART3_UART_Init+0x90>)
 80058ca:	4a23      	ldr	r2, [pc, #140]	@ (8005958 <MX_USART3_UART_Init+0x94>)
 80058cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80058ce:	4b21      	ldr	r3, [pc, #132]	@ (8005954 <MX_USART3_UART_Init+0x90>)
 80058d0:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80058d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80058d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005954 <MX_USART3_UART_Init+0x90>)
 80058d8:	2200      	movs	r2, #0
 80058da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80058dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005954 <MX_USART3_UART_Init+0x90>)
 80058de:	2200      	movs	r2, #0
 80058e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80058e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005954 <MX_USART3_UART_Init+0x90>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80058e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005954 <MX_USART3_UART_Init+0x90>)
 80058ea:	220c      	movs	r2, #12
 80058ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058ee:	4b19      	ldr	r3, [pc, #100]	@ (8005954 <MX_USART3_UART_Init+0x90>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80058f4:	4b17      	ldr	r3, [pc, #92]	@ (8005954 <MX_USART3_UART_Init+0x90>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80058fa:	4b16      	ldr	r3, [pc, #88]	@ (8005954 <MX_USART3_UART_Init+0x90>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005900:	4b14      	ldr	r3, [pc, #80]	@ (8005954 <MX_USART3_UART_Init+0x90>)
 8005902:	2200      	movs	r2, #0
 8005904:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005906:	4b13      	ldr	r3, [pc, #76]	@ (8005954 <MX_USART3_UART_Init+0x90>)
 8005908:	2200      	movs	r2, #0
 800590a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800590c:	4811      	ldr	r0, [pc, #68]	@ (8005954 <MX_USART3_UART_Init+0x90>)
 800590e:	f009 f8b7 	bl	800ea80 <HAL_UART_Init>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005918:	f7ff fb92 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800591c:	2100      	movs	r1, #0
 800591e:	480d      	ldr	r0, [pc, #52]	@ (8005954 <MX_USART3_UART_Init+0x90>)
 8005920:	f00b fd9d 	bl	801145e <HAL_UARTEx_SetTxFifoThreshold>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800592a:	f7ff fb89 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800592e:	2100      	movs	r1, #0
 8005930:	4808      	ldr	r0, [pc, #32]	@ (8005954 <MX_USART3_UART_Init+0x90>)
 8005932:	f00b fdd2 	bl	80114da <HAL_UARTEx_SetRxFifoThreshold>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800593c:	f7ff fb80 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005940:	4804      	ldr	r0, [pc, #16]	@ (8005954 <MX_USART3_UART_Init+0x90>)
 8005942:	f00b fd53 	bl	80113ec <HAL_UARTEx_DisableFifoMode>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800594c:	f7ff fb78 	bl	8005040 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005950:	bf00      	nop
 8005952:	bd80      	pop	{r7, pc}
 8005954:	24000b34 	.word	0x24000b34
 8005958:	40004800 	.word	0x40004800

0800595c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005960:	4b22      	ldr	r3, [pc, #136]	@ (80059ec <MX_USART6_UART_Init+0x90>)
 8005962:	4a23      	ldr	r2, [pc, #140]	@ (80059f0 <MX_USART6_UART_Init+0x94>)
 8005964:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005966:	4b21      	ldr	r3, [pc, #132]	@ (80059ec <MX_USART6_UART_Init+0x90>)
 8005968:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800596c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800596e:	4b1f      	ldr	r3, [pc, #124]	@ (80059ec <MX_USART6_UART_Init+0x90>)
 8005970:	2200      	movs	r2, #0
 8005972:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005974:	4b1d      	ldr	r3, [pc, #116]	@ (80059ec <MX_USART6_UART_Init+0x90>)
 8005976:	2200      	movs	r2, #0
 8005978:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800597a:	4b1c      	ldr	r3, [pc, #112]	@ (80059ec <MX_USART6_UART_Init+0x90>)
 800597c:	2200      	movs	r2, #0
 800597e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005980:	4b1a      	ldr	r3, [pc, #104]	@ (80059ec <MX_USART6_UART_Init+0x90>)
 8005982:	220c      	movs	r2, #12
 8005984:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005986:	4b19      	ldr	r3, [pc, #100]	@ (80059ec <MX_USART6_UART_Init+0x90>)
 8005988:	2200      	movs	r2, #0
 800598a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800598c:	4b17      	ldr	r3, [pc, #92]	@ (80059ec <MX_USART6_UART_Init+0x90>)
 800598e:	2200      	movs	r2, #0
 8005990:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005992:	4b16      	ldr	r3, [pc, #88]	@ (80059ec <MX_USART6_UART_Init+0x90>)
 8005994:	2200      	movs	r2, #0
 8005996:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005998:	4b14      	ldr	r3, [pc, #80]	@ (80059ec <MX_USART6_UART_Init+0x90>)
 800599a:	2200      	movs	r2, #0
 800599c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800599e:	4b13      	ldr	r3, [pc, #76]	@ (80059ec <MX_USART6_UART_Init+0x90>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80059a4:	4811      	ldr	r0, [pc, #68]	@ (80059ec <MX_USART6_UART_Init+0x90>)
 80059a6:	f009 f86b 	bl	800ea80 <HAL_UART_Init>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80059b0:	f7ff fb46 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80059b4:	2100      	movs	r1, #0
 80059b6:	480d      	ldr	r0, [pc, #52]	@ (80059ec <MX_USART6_UART_Init+0x90>)
 80059b8:	f00b fd51 	bl	801145e <HAL_UARTEx_SetTxFifoThreshold>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80059c2:	f7ff fb3d 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80059c6:	2100      	movs	r1, #0
 80059c8:	4808      	ldr	r0, [pc, #32]	@ (80059ec <MX_USART6_UART_Init+0x90>)
 80059ca:	f00b fd86 	bl	80114da <HAL_UARTEx_SetRxFifoThreshold>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80059d4:	f7ff fb34 	bl	8005040 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80059d8:	4804      	ldr	r0, [pc, #16]	@ (80059ec <MX_USART6_UART_Init+0x90>)
 80059da:	f00b fd07 	bl	80113ec <HAL_UARTEx_DisableFifoMode>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80059e4:	f7ff fb2c 	bl	8005040 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80059e8:	bf00      	nop
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	24000bc8 	.word	0x24000bc8
 80059f0:	40011400 	.word	0x40011400

080059f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b0ca      	sub	sp, #296	@ 0x128
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80059fe:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005a02:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a04:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	605a      	str	r2, [r3, #4]
 8005a0e:	609a      	str	r2, [r3, #8]
 8005a10:	60da      	str	r2, [r3, #12]
 8005a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005a14:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005a18:	22c0      	movs	r2, #192	@ 0xc0
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f01f fd0d 	bl	802543c <memset>
  if(uartHandle->Instance==UART4)
 8005a22:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005a26:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a72      	ldr	r2, [pc, #456]	@ (8005bf8 <HAL_UART_MspInit+0x204>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	f040 80f1 	bne.w	8005c18 <HAL_UART_MspInit+0x224>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005a36:	f04f 0202 	mov.w	r2, #2
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005a42:	2300      	movs	r3, #0
 8005a44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a48:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f006 ff1d 	bl	800c88c <HAL_RCCEx_PeriphCLKConfig>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <HAL_UART_MspInit+0x68>
    {
      Error_Handler();
 8005a58:	f7ff faf2 	bl	8005040 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005a5c:	4b67      	ldr	r3, [pc, #412]	@ (8005bfc <HAL_UART_MspInit+0x208>)
 8005a5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a62:	4a66      	ldr	r2, [pc, #408]	@ (8005bfc <HAL_UART_MspInit+0x208>)
 8005a64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005a6c:	4b63      	ldr	r3, [pc, #396]	@ (8005bfc <HAL_UART_MspInit+0x208>)
 8005a6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a7a:	4b60      	ldr	r3, [pc, #384]	@ (8005bfc <HAL_UART_MspInit+0x208>)
 8005a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a80:	4a5e      	ldr	r2, [pc, #376]	@ (8005bfc <HAL_UART_MspInit+0x208>)
 8005a82:	f043 0301 	orr.w	r3, r3, #1
 8005a86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005a8a:	4b5c      	ldr	r3, [pc, #368]	@ (8005bfc <HAL_UART_MspInit+0x208>)
 8005a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a98:	4b58      	ldr	r3, [pc, #352]	@ (8005bfc <HAL_UART_MspInit+0x208>)
 8005a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a9e:	4a57      	ldr	r2, [pc, #348]	@ (8005bfc <HAL_UART_MspInit+0x208>)
 8005aa0:	f043 0304 	orr.w	r3, r3, #4
 8005aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005aa8:	4b54      	ldr	r3, [pc, #336]	@ (8005bfc <HAL_UART_MspInit+0x208>)
 8005aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005aae:	f003 0304 	and.w	r3, r3, #4
 8005ab2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005abc:	2302      	movs	r3, #2
 8005abe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005ace:	2308      	movs	r3, #8
 8005ad0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ad4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4849      	ldr	r0, [pc, #292]	@ (8005c00 <HAL_UART_MspInit+0x20c>)
 8005adc:	f005 fc90 	bl	800b400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005ae0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ae4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae8:	2302      	movs	r3, #2
 8005aea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005af4:	2300      	movs	r3, #0
 8005af6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005afa:	2308      	movs	r3, #8
 8005afc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b00:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005b04:	4619      	mov	r1, r3
 8005b06:	483f      	ldr	r0, [pc, #252]	@ (8005c04 <HAL_UART_MspInit+0x210>)
 8005b08:	f005 fc7a 	bl	800b400 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream6;
 8005b0c:	4b3e      	ldr	r3, [pc, #248]	@ (8005c08 <HAL_UART_MspInit+0x214>)
 8005b0e:	4a3f      	ldr	r2, [pc, #252]	@ (8005c0c <HAL_UART_MspInit+0x218>)
 8005b10:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8005b12:	4b3d      	ldr	r3, [pc, #244]	@ (8005c08 <HAL_UART_MspInit+0x214>)
 8005b14:	223f      	movs	r2, #63	@ 0x3f
 8005b16:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b18:	4b3b      	ldr	r3, [pc, #236]	@ (8005c08 <HAL_UART_MspInit+0x214>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b1e:	4b3a      	ldr	r3, [pc, #232]	@ (8005c08 <HAL_UART_MspInit+0x214>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b24:	4b38      	ldr	r3, [pc, #224]	@ (8005c08 <HAL_UART_MspInit+0x214>)
 8005b26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b2a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b2c:	4b36      	ldr	r3, [pc, #216]	@ (8005c08 <HAL_UART_MspInit+0x214>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b32:	4b35      	ldr	r3, [pc, #212]	@ (8005c08 <HAL_UART_MspInit+0x214>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005b38:	4b33      	ldr	r3, [pc, #204]	@ (8005c08 <HAL_UART_MspInit+0x214>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005b3e:	4b32      	ldr	r3, [pc, #200]	@ (8005c08 <HAL_UART_MspInit+0x214>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b44:	4b30      	ldr	r3, [pc, #192]	@ (8005c08 <HAL_UART_MspInit+0x214>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005b4a:	482f      	ldr	r0, [pc, #188]	@ (8005c08 <HAL_UART_MspInit+0x214>)
 8005b4c:	f001 f8b4 	bl	8006cb8 <HAL_DMA_Init>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8005b56:	f7ff fa73 	bl	8005040 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8005b5a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005b5e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a28      	ldr	r2, [pc, #160]	@ (8005c08 <HAL_UART_MspInit+0x214>)
 8005b66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005b6a:	4a27      	ldr	r2, [pc, #156]	@ (8005c08 <HAL_UART_MspInit+0x214>)
 8005b6c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005b70:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream7;
 8005b78:	4b25      	ldr	r3, [pc, #148]	@ (8005c10 <HAL_UART_MspInit+0x21c>)
 8005b7a:	4a26      	ldr	r2, [pc, #152]	@ (8005c14 <HAL_UART_MspInit+0x220>)
 8005b7c:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8005b7e:	4b24      	ldr	r3, [pc, #144]	@ (8005c10 <HAL_UART_MspInit+0x21c>)
 8005b80:	2240      	movs	r2, #64	@ 0x40
 8005b82:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b84:	4b22      	ldr	r3, [pc, #136]	@ (8005c10 <HAL_UART_MspInit+0x21c>)
 8005b86:	2240      	movs	r2, #64	@ 0x40
 8005b88:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b8a:	4b21      	ldr	r3, [pc, #132]	@ (8005c10 <HAL_UART_MspInit+0x21c>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b90:	4b1f      	ldr	r3, [pc, #124]	@ (8005c10 <HAL_UART_MspInit+0x21c>)
 8005b92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b96:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b98:	4b1d      	ldr	r3, [pc, #116]	@ (8005c10 <HAL_UART_MspInit+0x21c>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8005c10 <HAL_UART_MspInit+0x21c>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8005ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8005c10 <HAL_UART_MspInit+0x21c>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005baa:	4b19      	ldr	r3, [pc, #100]	@ (8005c10 <HAL_UART_MspInit+0x21c>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005bb0:	4b17      	ldr	r3, [pc, #92]	@ (8005c10 <HAL_UART_MspInit+0x21c>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005bb6:	4816      	ldr	r0, [pc, #88]	@ (8005c10 <HAL_UART_MspInit+0x21c>)
 8005bb8:	f001 f87e 	bl	8006cb8 <HAL_DMA_Init>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <HAL_UART_MspInit+0x1d2>
    {
      Error_Handler();
 8005bc2:	f7ff fa3d 	bl	8005040 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8005bc6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005bca:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a0f      	ldr	r2, [pc, #60]	@ (8005c10 <HAL_UART_MspInit+0x21c>)
 8005bd2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005bd4:	4a0e      	ldr	r2, [pc, #56]	@ (8005c10 <HAL_UART_MspInit+0x21c>)
 8005bd6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005bda:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005be2:	2200      	movs	r2, #0
 8005be4:	2105      	movs	r1, #5
 8005be6:	2034      	movs	r0, #52	@ 0x34
 8005be8:	f000 ffc6 	bl	8006b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005bec:	2034      	movs	r0, #52	@ 0x34
 8005bee:	f000 ffdd 	bl	8006bac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005bf2:	f000 bd02 	b.w	80065fa <HAL_UART_MspInit+0xc06>
 8005bf6:	bf00      	nop
 8005bf8:	40004c00 	.word	0x40004c00
 8005bfc:	58024400 	.word	0x58024400
 8005c00:	58020000 	.word	0x58020000
 8005c04:	58020800 	.word	0x58020800
 8005c08:	24000c5c 	.word	0x24000c5c
 8005c0c:	400200a0 	.word	0x400200a0
 8005c10:	24000cd4 	.word	0x24000cd4
 8005c14:	400200b8 	.word	0x400200b8
  else if(uartHandle->Instance==UART5)
 8005c18:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005c1c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a71      	ldr	r2, [pc, #452]	@ (8005dec <HAL_UART_MspInit+0x3f8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	f040 80f0 	bne.w	8005e0c <HAL_UART_MspInit+0x418>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8005c2c:	f04f 0202 	mov.w	r2, #2
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c3e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005c42:	4618      	mov	r0, r3
 8005c44:	f006 fe22 	bl	800c88c <HAL_RCCEx_PeriphCLKConfig>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8005c4e:	f7ff f9f7 	bl	8005040 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8005c52:	4b67      	ldr	r3, [pc, #412]	@ (8005df0 <HAL_UART_MspInit+0x3fc>)
 8005c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c58:	4a65      	ldr	r2, [pc, #404]	@ (8005df0 <HAL_UART_MspInit+0x3fc>)
 8005c5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005c62:	4b63      	ldr	r3, [pc, #396]	@ (8005df0 <HAL_UART_MspInit+0x3fc>)
 8005c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c70:	4b5f      	ldr	r3, [pc, #380]	@ (8005df0 <HAL_UART_MspInit+0x3fc>)
 8005c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c76:	4a5e      	ldr	r2, [pc, #376]	@ (8005df0 <HAL_UART_MspInit+0x3fc>)
 8005c78:	f043 0304 	orr.w	r3, r3, #4
 8005c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005c80:	4b5b      	ldr	r3, [pc, #364]	@ (8005df0 <HAL_UART_MspInit+0x3fc>)
 8005c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c8e:	4b58      	ldr	r3, [pc, #352]	@ (8005df0 <HAL_UART_MspInit+0x3fc>)
 8005c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c94:	4a56      	ldr	r2, [pc, #344]	@ (8005df0 <HAL_UART_MspInit+0x3fc>)
 8005c96:	f043 0308 	orr.w	r3, r3, #8
 8005c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005c9e:	4b54      	ldr	r3, [pc, #336]	@ (8005df0 <HAL_UART_MspInit+0x3fc>)
 8005ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ca4:	f003 0308 	and.w	r3, r3, #8
 8005ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005cac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005cb0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005cc6:	2308      	movs	r3, #8
 8005cc8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ccc:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4848      	ldr	r0, [pc, #288]	@ (8005df4 <HAL_UART_MspInit+0x400>)
 8005cd4:	f005 fb94 	bl	800b400 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005cd8:	2304      	movs	r3, #4
 8005cda:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cde:	2302      	movs	r3, #2
 8005ce0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cea:	2300      	movs	r3, #0
 8005cec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005cf0:	2308      	movs	r3, #8
 8005cf2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cf6:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	483e      	ldr	r0, [pc, #248]	@ (8005df8 <HAL_UART_MspInit+0x404>)
 8005cfe:	f005 fb7f 	bl	800b400 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA2_Stream0;
 8005d02:	4b3e      	ldr	r3, [pc, #248]	@ (8005dfc <HAL_UART_MspInit+0x408>)
 8005d04:	4a3e      	ldr	r2, [pc, #248]	@ (8005e00 <HAL_UART_MspInit+0x40c>)
 8005d06:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8005d08:	4b3c      	ldr	r3, [pc, #240]	@ (8005dfc <HAL_UART_MspInit+0x408>)
 8005d0a:	2241      	movs	r2, #65	@ 0x41
 8005d0c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d0e:	4b3b      	ldr	r3, [pc, #236]	@ (8005dfc <HAL_UART_MspInit+0x408>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d14:	4b39      	ldr	r3, [pc, #228]	@ (8005dfc <HAL_UART_MspInit+0x408>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d1a:	4b38      	ldr	r3, [pc, #224]	@ (8005dfc <HAL_UART_MspInit+0x408>)
 8005d1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d20:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d22:	4b36      	ldr	r3, [pc, #216]	@ (8005dfc <HAL_UART_MspInit+0x408>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d28:	4b34      	ldr	r3, [pc, #208]	@ (8005dfc <HAL_UART_MspInit+0x408>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8005d2e:	4b33      	ldr	r3, [pc, #204]	@ (8005dfc <HAL_UART_MspInit+0x408>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005d34:	4b31      	ldr	r3, [pc, #196]	@ (8005dfc <HAL_UART_MspInit+0x408>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d3a:	4b30      	ldr	r3, [pc, #192]	@ (8005dfc <HAL_UART_MspInit+0x408>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8005d40:	482e      	ldr	r0, [pc, #184]	@ (8005dfc <HAL_UART_MspInit+0x408>)
 8005d42:	f000 ffb9 	bl	8006cb8 <HAL_DMA_Init>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <HAL_UART_MspInit+0x35c>
      Error_Handler();
 8005d4c:	f7ff f978 	bl	8005040 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8005d50:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005d54:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a28      	ldr	r2, [pc, #160]	@ (8005dfc <HAL_UART_MspInit+0x408>)
 8005d5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005d60:	4a26      	ldr	r2, [pc, #152]	@ (8005dfc <HAL_UART_MspInit+0x408>)
 8005d62:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005d66:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA2_Stream1;
 8005d6e:	4b25      	ldr	r3, [pc, #148]	@ (8005e04 <HAL_UART_MspInit+0x410>)
 8005d70:	4a25      	ldr	r2, [pc, #148]	@ (8005e08 <HAL_UART_MspInit+0x414>)
 8005d72:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8005d74:	4b23      	ldr	r3, [pc, #140]	@ (8005e04 <HAL_UART_MspInit+0x410>)
 8005d76:	2242      	movs	r2, #66	@ 0x42
 8005d78:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d7a:	4b22      	ldr	r3, [pc, #136]	@ (8005e04 <HAL_UART_MspInit+0x410>)
 8005d7c:	2240      	movs	r2, #64	@ 0x40
 8005d7e:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d80:	4b20      	ldr	r3, [pc, #128]	@ (8005e04 <HAL_UART_MspInit+0x410>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d86:	4b1f      	ldr	r3, [pc, #124]	@ (8005e04 <HAL_UART_MspInit+0x410>)
 8005d88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d8c:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8005e04 <HAL_UART_MspInit+0x410>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d94:	4b1b      	ldr	r3, [pc, #108]	@ (8005e04 <HAL_UART_MspInit+0x410>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8005d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8005e04 <HAL_UART_MspInit+0x410>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005da0:	4b18      	ldr	r3, [pc, #96]	@ (8005e04 <HAL_UART_MspInit+0x410>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005da6:	4b17      	ldr	r3, [pc, #92]	@ (8005e04 <HAL_UART_MspInit+0x410>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8005dac:	4815      	ldr	r0, [pc, #84]	@ (8005e04 <HAL_UART_MspInit+0x410>)
 8005dae:	f000 ff83 	bl	8006cb8 <HAL_DMA_Init>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <HAL_UART_MspInit+0x3c8>
      Error_Handler();
 8005db8:	f7ff f942 	bl	8005040 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8005dbc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005dc0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8005e04 <HAL_UART_MspInit+0x410>)
 8005dc8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005dca:	4a0e      	ldr	r2, [pc, #56]	@ (8005e04 <HAL_UART_MspInit+0x410>)
 8005dcc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005dd0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2105      	movs	r1, #5
 8005ddc:	2035      	movs	r0, #53	@ 0x35
 8005dde:	f000 fecb 	bl	8006b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005de2:	2035      	movs	r0, #53	@ 0x35
 8005de4:	f000 fee2 	bl	8006bac <HAL_NVIC_EnableIRQ>
}
 8005de8:	f000 bc07 	b.w	80065fa <HAL_UART_MspInit+0xc06>
 8005dec:	40005000 	.word	0x40005000
 8005df0:	58024400 	.word	0x58024400
 8005df4:	58020800 	.word	0x58020800
 8005df8:	58020c00 	.word	0x58020c00
 8005dfc:	24000d4c 	.word	0x24000d4c
 8005e00:	40020410 	.word	0x40020410
 8005e04:	24000dc4 	.word	0x24000dc4
 8005e08:	40020428 	.word	0x40020428
  else if(uartHandle->Instance==UART7)
 8005e0c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005e10:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a8b      	ldr	r2, [pc, #556]	@ (8006048 <HAL_UART_MspInit+0x654>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	f040 80ba 	bne.w	8005f94 <HAL_UART_MspInit+0x5a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005e20:	f04f 0202 	mov.w	r2, #2
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e32:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005e36:	4618      	mov	r0, r3
 8005e38:	f006 fd28 	bl	800c88c <HAL_RCCEx_PeriphCLKConfig>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <HAL_UART_MspInit+0x452>
      Error_Handler();
 8005e42:	f7ff f8fd 	bl	8005040 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8005e46:	4b81      	ldr	r3, [pc, #516]	@ (800604c <HAL_UART_MspInit+0x658>)
 8005e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e4c:	4a7f      	ldr	r2, [pc, #508]	@ (800604c <HAL_UART_MspInit+0x658>)
 8005e4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005e56:	4b7d      	ldr	r3, [pc, #500]	@ (800604c <HAL_UART_MspInit+0x658>)
 8005e58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e5c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005e64:	4b79      	ldr	r3, [pc, #484]	@ (800604c <HAL_UART_MspInit+0x658>)
 8005e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e6a:	4a78      	ldr	r2, [pc, #480]	@ (800604c <HAL_UART_MspInit+0x658>)
 8005e6c:	f043 0320 	orr.w	r3, r3, #32
 8005e70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005e74:	4b75      	ldr	r3, [pc, #468]	@ (800604c <HAL_UART_MspInit+0x658>)
 8005e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005e82:	23c0      	movs	r3, #192	@ 0xc0
 8005e84:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e94:	2300      	movs	r3, #0
 8005e96:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8005e9a:	2307      	movs	r3, #7
 8005e9c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005ea0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	486a      	ldr	r0, [pc, #424]	@ (8006050 <HAL_UART_MspInit+0x65c>)
 8005ea8:	f005 faaa 	bl	800b400 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA2_Stream2;
 8005eac:	4b69      	ldr	r3, [pc, #420]	@ (8006054 <HAL_UART_MspInit+0x660>)
 8005eae:	4a6a      	ldr	r2, [pc, #424]	@ (8006058 <HAL_UART_MspInit+0x664>)
 8005eb0:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8005eb2:	4b68      	ldr	r3, [pc, #416]	@ (8006054 <HAL_UART_MspInit+0x660>)
 8005eb4:	224f      	movs	r2, #79	@ 0x4f
 8005eb6:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005eb8:	4b66      	ldr	r3, [pc, #408]	@ (8006054 <HAL_UART_MspInit+0x660>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ebe:	4b65      	ldr	r3, [pc, #404]	@ (8006054 <HAL_UART_MspInit+0x660>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ec4:	4b63      	ldr	r3, [pc, #396]	@ (8006054 <HAL_UART_MspInit+0x660>)
 8005ec6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005eca:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ecc:	4b61      	ldr	r3, [pc, #388]	@ (8006054 <HAL_UART_MspInit+0x660>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ed2:	4b60      	ldr	r3, [pc, #384]	@ (8006054 <HAL_UART_MspInit+0x660>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8005ed8:	4b5e      	ldr	r3, [pc, #376]	@ (8006054 <HAL_UART_MspInit+0x660>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ede:	4b5d      	ldr	r3, [pc, #372]	@ (8006054 <HAL_UART_MspInit+0x660>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ee4:	4b5b      	ldr	r3, [pc, #364]	@ (8006054 <HAL_UART_MspInit+0x660>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8005eea:	485a      	ldr	r0, [pc, #360]	@ (8006054 <HAL_UART_MspInit+0x660>)
 8005eec:	f000 fee4 	bl	8006cb8 <HAL_DMA_Init>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <HAL_UART_MspInit+0x506>
      Error_Handler();
 8005ef6:	f7ff f8a3 	bl	8005040 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8005efa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005efe:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a53      	ldr	r2, [pc, #332]	@ (8006054 <HAL_UART_MspInit+0x660>)
 8005f06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005f0a:	4a52      	ldr	r2, [pc, #328]	@ (8006054 <HAL_UART_MspInit+0x660>)
 8005f0c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005f10:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart7_tx.Instance = DMA2_Stream3;
 8005f18:	4b50      	ldr	r3, [pc, #320]	@ (800605c <HAL_UART_MspInit+0x668>)
 8005f1a:	4a51      	ldr	r2, [pc, #324]	@ (8006060 <HAL_UART_MspInit+0x66c>)
 8005f1c:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8005f1e:	4b4f      	ldr	r3, [pc, #316]	@ (800605c <HAL_UART_MspInit+0x668>)
 8005f20:	2250      	movs	r2, #80	@ 0x50
 8005f22:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f24:	4b4d      	ldr	r3, [pc, #308]	@ (800605c <HAL_UART_MspInit+0x668>)
 8005f26:	2240      	movs	r2, #64	@ 0x40
 8005f28:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800605c <HAL_UART_MspInit+0x668>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005f30:	4b4a      	ldr	r3, [pc, #296]	@ (800605c <HAL_UART_MspInit+0x668>)
 8005f32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f36:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f38:	4b48      	ldr	r3, [pc, #288]	@ (800605c <HAL_UART_MspInit+0x668>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f3e:	4b47      	ldr	r3, [pc, #284]	@ (800605c <HAL_UART_MspInit+0x668>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8005f44:	4b45      	ldr	r3, [pc, #276]	@ (800605c <HAL_UART_MspInit+0x668>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005f4a:	4b44      	ldr	r3, [pc, #272]	@ (800605c <HAL_UART_MspInit+0x668>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f50:	4b42      	ldr	r3, [pc, #264]	@ (800605c <HAL_UART_MspInit+0x668>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8005f56:	4841      	ldr	r0, [pc, #260]	@ (800605c <HAL_UART_MspInit+0x668>)
 8005f58:	f000 feae 	bl	8006cb8 <HAL_DMA_Init>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <HAL_UART_MspInit+0x572>
      Error_Handler();
 8005f62:	f7ff f86d 	bl	8005040 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8005f66:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005f6a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a3a      	ldr	r2, [pc, #232]	@ (800605c <HAL_UART_MspInit+0x668>)
 8005f72:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005f74:	4a39      	ldr	r2, [pc, #228]	@ (800605c <HAL_UART_MspInit+0x668>)
 8005f76:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005f7a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8005f82:	2200      	movs	r2, #0
 8005f84:	2105      	movs	r1, #5
 8005f86:	2052      	movs	r0, #82	@ 0x52
 8005f88:	f000 fdf6 	bl	8006b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8005f8c:	2052      	movs	r0, #82	@ 0x52
 8005f8e:	f000 fe0d 	bl	8006bac <HAL_NVIC_EnableIRQ>
}
 8005f92:	e332      	b.n	80065fa <HAL_UART_MspInit+0xc06>
  else if(uartHandle->Instance==USART1)
 8005f94:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005f98:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a30      	ldr	r2, [pc, #192]	@ (8006064 <HAL_UART_MspInit+0x670>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d162      	bne.n	800606c <HAL_UART_MspInit+0x678>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005fa6:	f04f 0201 	mov.w	r2, #1
 8005faa:	f04f 0300 	mov.w	r3, #0
 8005fae:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005fb8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f006 fc65 	bl	800c88c <HAL_RCCEx_PeriphCLKConfig>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <HAL_UART_MspInit+0x5d8>
      Error_Handler();
 8005fc8:	f7ff f83a 	bl	8005040 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800604c <HAL_UART_MspInit+0x658>)
 8005fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800604c <HAL_UART_MspInit+0x658>)
 8005fd4:	f043 0310 	orr.w	r3, r3, #16
 8005fd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800604c <HAL_UART_MspInit+0x658>)
 8005fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fe2:	f003 0310 	and.w	r3, r3, #16
 8005fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fea:	4b18      	ldr	r3, [pc, #96]	@ (800604c <HAL_UART_MspInit+0x658>)
 8005fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ff0:	4a16      	ldr	r2, [pc, #88]	@ (800604c <HAL_UART_MspInit+0x658>)
 8005ff2:	f043 0301 	orr.w	r3, r3, #1
 8005ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005ffa:	4b14      	ldr	r3, [pc, #80]	@ (800604c <HAL_UART_MspInit+0x658>)
 8005ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006000:	f003 0201 	and.w	r2, r3, #1
 8006004:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006008:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006012:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006016:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006018:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800601c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006020:	2302      	movs	r3, #2
 8006022:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006026:	2300      	movs	r3, #0
 8006028:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800602c:	2300      	movs	r3, #0
 800602e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006032:	2307      	movs	r3, #7
 8006034:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006038:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800603c:	4619      	mov	r1, r3
 800603e:	480a      	ldr	r0, [pc, #40]	@ (8006068 <HAL_UART_MspInit+0x674>)
 8006040:	f005 f9de 	bl	800b400 <HAL_GPIO_Init>
}
 8006044:	e2d9      	b.n	80065fa <HAL_UART_MspInit+0xc06>
 8006046:	bf00      	nop
 8006048:	40007800 	.word	0x40007800
 800604c:	58024400 	.word	0x58024400
 8006050:	58021400 	.word	0x58021400
 8006054:	24000e3c 	.word	0x24000e3c
 8006058:	40020440 	.word	0x40020440
 800605c:	24000eb4 	.word	0x24000eb4
 8006060:	40020458 	.word	0x40020458
 8006064:	40011000 	.word	0x40011000
 8006068:	58020000 	.word	0x58020000
  else if(uartHandle->Instance==USART2)
 800606c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006070:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a7c      	ldr	r2, [pc, #496]	@ (800626c <HAL_UART_MspInit+0x878>)
 800607a:	4293      	cmp	r3, r2
 800607c:	f040 8106 	bne.w	800628c <HAL_UART_MspInit+0x898>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006080:	f04f 0202 	mov.w	r2, #2
 8006084:	f04f 0300 	mov.w	r3, #0
 8006088:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800608c:	2300      	movs	r3, #0
 800608e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006092:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8006096:	4618      	mov	r0, r3
 8006098:	f006 fbf8 	bl	800c88c <HAL_RCCEx_PeriphCLKConfig>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <HAL_UART_MspInit+0x6b2>
      Error_Handler();
 80060a2:	f7fe ffcd 	bl	8005040 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80060a6:	4b72      	ldr	r3, [pc, #456]	@ (8006270 <HAL_UART_MspInit+0x87c>)
 80060a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060ac:	4a70      	ldr	r2, [pc, #448]	@ (8006270 <HAL_UART_MspInit+0x87c>)
 80060ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80060b6:	4b6e      	ldr	r3, [pc, #440]	@ (8006270 <HAL_UART_MspInit+0x87c>)
 80060b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060bc:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 80060c0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80060c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80060ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060d2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060d4:	4b66      	ldr	r3, [pc, #408]	@ (8006270 <HAL_UART_MspInit+0x87c>)
 80060d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060da:	4a65      	ldr	r2, [pc, #404]	@ (8006270 <HAL_UART_MspInit+0x87c>)
 80060dc:	f043 0301 	orr.w	r3, r3, #1
 80060e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80060e4:	4b62      	ldr	r3, [pc, #392]	@ (8006270 <HAL_UART_MspInit+0x87c>)
 80060e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060ea:	f003 0201 	and.w	r2, r3, #1
 80060ee:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80060f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80060fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006100:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006102:	4b5b      	ldr	r3, [pc, #364]	@ (8006270 <HAL_UART_MspInit+0x87c>)
 8006104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006108:	4a59      	ldr	r2, [pc, #356]	@ (8006270 <HAL_UART_MspInit+0x87c>)
 800610a:	f043 0308 	orr.w	r3, r3, #8
 800610e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006112:	4b57      	ldr	r3, [pc, #348]	@ (8006270 <HAL_UART_MspInit+0x87c>)
 8006114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006118:	f003 0208 	and.w	r2, r3, #8
 800611c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006120:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800612a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800612e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006130:	2308      	movs	r3, #8
 8006132:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006136:	2302      	movs	r3, #2
 8006138:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800613c:	2300      	movs	r3, #0
 800613e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006142:	2300      	movs	r3, #0
 8006144:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006148:	2307      	movs	r3, #7
 800614a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800614e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8006152:	4619      	mov	r1, r3
 8006154:	4847      	ldr	r0, [pc, #284]	@ (8006274 <HAL_UART_MspInit+0x880>)
 8006156:	f005 f953 	bl	800b400 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800615a:	2320      	movs	r3, #32
 800615c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006160:	2302      	movs	r3, #2
 8006162:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006166:	2300      	movs	r3, #0
 8006168:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800616c:	2300      	movs	r3, #0
 800616e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006172:	2307      	movs	r3, #7
 8006174:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006178:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800617c:	4619      	mov	r1, r3
 800617e:	483e      	ldr	r0, [pc, #248]	@ (8006278 <HAL_UART_MspInit+0x884>)
 8006180:	f005 f93e 	bl	800b400 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream0;
 8006184:	4b3d      	ldr	r3, [pc, #244]	@ (800627c <HAL_UART_MspInit+0x888>)
 8006186:	4a3e      	ldr	r2, [pc, #248]	@ (8006280 <HAL_UART_MspInit+0x88c>)
 8006188:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800618a:	4b3c      	ldr	r3, [pc, #240]	@ (800627c <HAL_UART_MspInit+0x888>)
 800618c:	222b      	movs	r2, #43	@ 0x2b
 800618e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006190:	4b3a      	ldr	r3, [pc, #232]	@ (800627c <HAL_UART_MspInit+0x888>)
 8006192:	2200      	movs	r2, #0
 8006194:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006196:	4b39      	ldr	r3, [pc, #228]	@ (800627c <HAL_UART_MspInit+0x888>)
 8006198:	2200      	movs	r2, #0
 800619a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800619c:	4b37      	ldr	r3, [pc, #220]	@ (800627c <HAL_UART_MspInit+0x888>)
 800619e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80061a2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061a4:	4b35      	ldr	r3, [pc, #212]	@ (800627c <HAL_UART_MspInit+0x888>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061aa:	4b34      	ldr	r3, [pc, #208]	@ (800627c <HAL_UART_MspInit+0x888>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80061b0:	4b32      	ldr	r3, [pc, #200]	@ (800627c <HAL_UART_MspInit+0x888>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80061b6:	4b31      	ldr	r3, [pc, #196]	@ (800627c <HAL_UART_MspInit+0x888>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80061bc:	4b2f      	ldr	r3, [pc, #188]	@ (800627c <HAL_UART_MspInit+0x888>)
 80061be:	2200      	movs	r2, #0
 80061c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80061c2:	482e      	ldr	r0, [pc, #184]	@ (800627c <HAL_UART_MspInit+0x888>)
 80061c4:	f000 fd78 	bl	8006cb8 <HAL_DMA_Init>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <HAL_UART_MspInit+0x7de>
      Error_Handler();
 80061ce:	f7fe ff37 	bl	8005040 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80061d2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80061d6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a27      	ldr	r2, [pc, #156]	@ (800627c <HAL_UART_MspInit+0x888>)
 80061de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80061e2:	4a26      	ldr	r2, [pc, #152]	@ (800627c <HAL_UART_MspInit+0x888>)
 80061e4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80061e8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream1;
 80061f0:	4b24      	ldr	r3, [pc, #144]	@ (8006284 <HAL_UART_MspInit+0x890>)
 80061f2:	4a25      	ldr	r2, [pc, #148]	@ (8006288 <HAL_UART_MspInit+0x894>)
 80061f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80061f6:	4b23      	ldr	r3, [pc, #140]	@ (8006284 <HAL_UART_MspInit+0x890>)
 80061f8:	222c      	movs	r2, #44	@ 0x2c
 80061fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061fc:	4b21      	ldr	r3, [pc, #132]	@ (8006284 <HAL_UART_MspInit+0x890>)
 80061fe:	2240      	movs	r2, #64	@ 0x40
 8006200:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006202:	4b20      	ldr	r3, [pc, #128]	@ (8006284 <HAL_UART_MspInit+0x890>)
 8006204:	2200      	movs	r2, #0
 8006206:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006208:	4b1e      	ldr	r3, [pc, #120]	@ (8006284 <HAL_UART_MspInit+0x890>)
 800620a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800620e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006210:	4b1c      	ldr	r3, [pc, #112]	@ (8006284 <HAL_UART_MspInit+0x890>)
 8006212:	2200      	movs	r2, #0
 8006214:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006216:	4b1b      	ldr	r3, [pc, #108]	@ (8006284 <HAL_UART_MspInit+0x890>)
 8006218:	2200      	movs	r2, #0
 800621a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800621c:	4b19      	ldr	r3, [pc, #100]	@ (8006284 <HAL_UART_MspInit+0x890>)
 800621e:	2200      	movs	r2, #0
 8006220:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006222:	4b18      	ldr	r3, [pc, #96]	@ (8006284 <HAL_UART_MspInit+0x890>)
 8006224:	2200      	movs	r2, #0
 8006226:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006228:	4b16      	ldr	r3, [pc, #88]	@ (8006284 <HAL_UART_MspInit+0x890>)
 800622a:	2200      	movs	r2, #0
 800622c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800622e:	4815      	ldr	r0, [pc, #84]	@ (8006284 <HAL_UART_MspInit+0x890>)
 8006230:	f000 fd42 	bl	8006cb8 <HAL_DMA_Init>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <HAL_UART_MspInit+0x84a>
      Error_Handler();
 800623a:	f7fe ff01 	bl	8005040 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800623e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006242:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a0e      	ldr	r2, [pc, #56]	@ (8006284 <HAL_UART_MspInit+0x890>)
 800624a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800624c:	4a0d      	ldr	r2, [pc, #52]	@ (8006284 <HAL_UART_MspInit+0x890>)
 800624e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006252:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800625a:	2200      	movs	r2, #0
 800625c:	2105      	movs	r1, #5
 800625e:	2026      	movs	r0, #38	@ 0x26
 8006260:	f000 fc8a 	bl	8006b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006264:	2026      	movs	r0, #38	@ 0x26
 8006266:	f000 fca1 	bl	8006bac <HAL_NVIC_EnableIRQ>
}
 800626a:	e1c6      	b.n	80065fa <HAL_UART_MspInit+0xc06>
 800626c:	40004400 	.word	0x40004400
 8006270:	58024400 	.word	0x58024400
 8006274:	58020000 	.word	0x58020000
 8006278:	58020c00 	.word	0x58020c00
 800627c:	24000f2c 	.word	0x24000f2c
 8006280:	40020010 	.word	0x40020010
 8006284:	24000fa4 	.word	0x24000fa4
 8006288:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART3)
 800628c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006290:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a67      	ldr	r2, [pc, #412]	@ (8006438 <HAL_UART_MspInit+0xa44>)
 800629a:	4293      	cmp	r3, r2
 800629c:	f040 80da 	bne.w	8006454 <HAL_UART_MspInit+0xa60>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80062a0:	f04f 0202 	mov.w	r2, #2
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80062ac:	2300      	movs	r3, #0
 80062ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062b2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80062b6:	4618      	mov	r0, r3
 80062b8:	f006 fae8 	bl	800c88c <HAL_RCCEx_PeriphCLKConfig>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <HAL_UART_MspInit+0x8d2>
      Error_Handler();
 80062c2:	f7fe febd 	bl	8005040 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80062c6:	4b5d      	ldr	r3, [pc, #372]	@ (800643c <HAL_UART_MspInit+0xa48>)
 80062c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80062cc:	4a5b      	ldr	r2, [pc, #364]	@ (800643c <HAL_UART_MspInit+0xa48>)
 80062ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80062d6:	4b59      	ldr	r3, [pc, #356]	@ (800643c <HAL_UART_MspInit+0xa48>)
 80062d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80062dc:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 80062e0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80062e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80062ee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80062f2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062f4:	4b51      	ldr	r3, [pc, #324]	@ (800643c <HAL_UART_MspInit+0xa48>)
 80062f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062fa:	4a50      	ldr	r2, [pc, #320]	@ (800643c <HAL_UART_MspInit+0xa48>)
 80062fc:	f043 0302 	orr.w	r3, r3, #2
 8006300:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006304:	4b4d      	ldr	r3, [pc, #308]	@ (800643c <HAL_UART_MspInit+0xa48>)
 8006306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800630a:	f003 0202 	and.w	r2, r3, #2
 800630e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006312:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800631c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006320:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006322:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006326:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800632a:	2302      	movs	r3, #2
 800632c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006330:	2300      	movs	r3, #0
 8006332:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006336:	2300      	movs	r3, #0
 8006338:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800633c:	2307      	movs	r3, #7
 800633e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006342:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8006346:	4619      	mov	r1, r3
 8006348:	483d      	ldr	r0, [pc, #244]	@ (8006440 <HAL_UART_MspInit+0xa4c>)
 800634a:	f005 f859 	bl	800b400 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream2;
 800634e:	4b3d      	ldr	r3, [pc, #244]	@ (8006444 <HAL_UART_MspInit+0xa50>)
 8006350:	4a3d      	ldr	r2, [pc, #244]	@ (8006448 <HAL_UART_MspInit+0xa54>)
 8006352:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8006354:	4b3b      	ldr	r3, [pc, #236]	@ (8006444 <HAL_UART_MspInit+0xa50>)
 8006356:	222d      	movs	r2, #45	@ 0x2d
 8006358:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800635a:	4b3a      	ldr	r3, [pc, #232]	@ (8006444 <HAL_UART_MspInit+0xa50>)
 800635c:	2200      	movs	r2, #0
 800635e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006360:	4b38      	ldr	r3, [pc, #224]	@ (8006444 <HAL_UART_MspInit+0xa50>)
 8006362:	2200      	movs	r2, #0
 8006364:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006366:	4b37      	ldr	r3, [pc, #220]	@ (8006444 <HAL_UART_MspInit+0xa50>)
 8006368:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800636c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800636e:	4b35      	ldr	r3, [pc, #212]	@ (8006444 <HAL_UART_MspInit+0xa50>)
 8006370:	2200      	movs	r2, #0
 8006372:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006374:	4b33      	ldr	r3, [pc, #204]	@ (8006444 <HAL_UART_MspInit+0xa50>)
 8006376:	2200      	movs	r2, #0
 8006378:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800637a:	4b32      	ldr	r3, [pc, #200]	@ (8006444 <HAL_UART_MspInit+0xa50>)
 800637c:	2200      	movs	r2, #0
 800637e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006380:	4b30      	ldr	r3, [pc, #192]	@ (8006444 <HAL_UART_MspInit+0xa50>)
 8006382:	2200      	movs	r2, #0
 8006384:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006386:	4b2f      	ldr	r3, [pc, #188]	@ (8006444 <HAL_UART_MspInit+0xa50>)
 8006388:	2200      	movs	r2, #0
 800638a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800638c:	482d      	ldr	r0, [pc, #180]	@ (8006444 <HAL_UART_MspInit+0xa50>)
 800638e:	f000 fc93 	bl	8006cb8 <HAL_DMA_Init>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <HAL_UART_MspInit+0x9a8>
      Error_Handler();
 8006398:	f7fe fe52 	bl	8005040 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800639c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80063a0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a27      	ldr	r2, [pc, #156]	@ (8006444 <HAL_UART_MspInit+0xa50>)
 80063a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80063ac:	4a25      	ldr	r2, [pc, #148]	@ (8006444 <HAL_UART_MspInit+0xa50>)
 80063ae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80063b2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80063ba:	4b24      	ldr	r3, [pc, #144]	@ (800644c <HAL_UART_MspInit+0xa58>)
 80063bc:	4a24      	ldr	r2, [pc, #144]	@ (8006450 <HAL_UART_MspInit+0xa5c>)
 80063be:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80063c0:	4b22      	ldr	r3, [pc, #136]	@ (800644c <HAL_UART_MspInit+0xa58>)
 80063c2:	222e      	movs	r2, #46	@ 0x2e
 80063c4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80063c6:	4b21      	ldr	r3, [pc, #132]	@ (800644c <HAL_UART_MspInit+0xa58>)
 80063c8:	2240      	movs	r2, #64	@ 0x40
 80063ca:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063cc:	4b1f      	ldr	r3, [pc, #124]	@ (800644c <HAL_UART_MspInit+0xa58>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80063d2:	4b1e      	ldr	r3, [pc, #120]	@ (800644c <HAL_UART_MspInit+0xa58>)
 80063d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80063d8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063da:	4b1c      	ldr	r3, [pc, #112]	@ (800644c <HAL_UART_MspInit+0xa58>)
 80063dc:	2200      	movs	r2, #0
 80063de:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063e0:	4b1a      	ldr	r3, [pc, #104]	@ (800644c <HAL_UART_MspInit+0xa58>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80063e6:	4b19      	ldr	r3, [pc, #100]	@ (800644c <HAL_UART_MspInit+0xa58>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80063ec:	4b17      	ldr	r3, [pc, #92]	@ (800644c <HAL_UART_MspInit+0xa58>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80063f2:	4b16      	ldr	r3, [pc, #88]	@ (800644c <HAL_UART_MspInit+0xa58>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80063f8:	4814      	ldr	r0, [pc, #80]	@ (800644c <HAL_UART_MspInit+0xa58>)
 80063fa:	f000 fc5d 	bl	8006cb8 <HAL_DMA_Init>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <HAL_UART_MspInit+0xa14>
      Error_Handler();
 8006404:	f7fe fe1c 	bl	8005040 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8006408:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800640c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a0e      	ldr	r2, [pc, #56]	@ (800644c <HAL_UART_MspInit+0xa58>)
 8006414:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006416:	4a0d      	ldr	r2, [pc, #52]	@ (800644c <HAL_UART_MspInit+0xa58>)
 8006418:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800641c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006424:	2200      	movs	r2, #0
 8006426:	2105      	movs	r1, #5
 8006428:	2027      	movs	r0, #39	@ 0x27
 800642a:	f000 fba5 	bl	8006b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800642e:	2027      	movs	r0, #39	@ 0x27
 8006430:	f000 fbbc 	bl	8006bac <HAL_NVIC_EnableIRQ>
}
 8006434:	e0e1      	b.n	80065fa <HAL_UART_MspInit+0xc06>
 8006436:	bf00      	nop
 8006438:	40004800 	.word	0x40004800
 800643c:	58024400 	.word	0x58024400
 8006440:	58020400 	.word	0x58020400
 8006444:	2400101c 	.word	0x2400101c
 8006448:	40020040 	.word	0x40020040
 800644c:	24001094 	.word	0x24001094
 8006450:	40020058 	.word	0x40020058
  else if(uartHandle->Instance==USART6)
 8006454:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006458:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a68      	ldr	r2, [pc, #416]	@ (8006604 <HAL_UART_MspInit+0xc10>)
 8006462:	4293      	cmp	r3, r2
 8006464:	f040 80c9 	bne.w	80065fa <HAL_UART_MspInit+0xc06>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8006468:	f04f 0201 	mov.w	r2, #1
 800646c:	f04f 0300 	mov.w	r3, #0
 8006470:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006474:	2300      	movs	r3, #0
 8006476:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800647a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800647e:	4618      	mov	r0, r3
 8006480:	f006 fa04 	bl	800c88c <HAL_RCCEx_PeriphCLKConfig>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <HAL_UART_MspInit+0xa9a>
      Error_Handler();
 800648a:	f7fe fdd9 	bl	8005040 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800648e:	4b5e      	ldr	r3, [pc, #376]	@ (8006608 <HAL_UART_MspInit+0xc14>)
 8006490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006494:	4a5c      	ldr	r2, [pc, #368]	@ (8006608 <HAL_UART_MspInit+0xc14>)
 8006496:	f043 0320 	orr.w	r3, r3, #32
 800649a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800649e:	4b5a      	ldr	r3, [pc, #360]	@ (8006608 <HAL_UART_MspInit+0xc14>)
 80064a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064a4:	f003 0220 	and.w	r2, r3, #32
 80064a8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80064ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80064b6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80064ba:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064bc:	4b52      	ldr	r3, [pc, #328]	@ (8006608 <HAL_UART_MspInit+0xc14>)
 80064be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064c2:	4a51      	ldr	r2, [pc, #324]	@ (8006608 <HAL_UART_MspInit+0xc14>)
 80064c4:	f043 0304 	orr.w	r3, r3, #4
 80064c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80064cc:	4b4e      	ldr	r3, [pc, #312]	@ (8006608 <HAL_UART_MspInit+0xc14>)
 80064ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064d2:	f003 0204 	and.w	r2, r3, #4
 80064d6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80064da:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80064e4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80064e8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80064ea:	23c0      	movs	r3, #192	@ 0xc0
 80064ec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064f0:	2302      	movs	r3, #2
 80064f2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064fc:	2300      	movs	r3, #0
 80064fe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8006502:	2307      	movs	r3, #7
 8006504:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006508:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800650c:	4619      	mov	r1, r3
 800650e:	483f      	ldr	r0, [pc, #252]	@ (800660c <HAL_UART_MspInit+0xc18>)
 8006510:	f004 ff76 	bl	800b400 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA1_Stream4;
 8006514:	4b3e      	ldr	r3, [pc, #248]	@ (8006610 <HAL_UART_MspInit+0xc1c>)
 8006516:	4a3f      	ldr	r2, [pc, #252]	@ (8006614 <HAL_UART_MspInit+0xc20>)
 8006518:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 800651a:	4b3d      	ldr	r3, [pc, #244]	@ (8006610 <HAL_UART_MspInit+0xc1c>)
 800651c:	2247      	movs	r2, #71	@ 0x47
 800651e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006520:	4b3b      	ldr	r3, [pc, #236]	@ (8006610 <HAL_UART_MspInit+0xc1c>)
 8006522:	2200      	movs	r2, #0
 8006524:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006526:	4b3a      	ldr	r3, [pc, #232]	@ (8006610 <HAL_UART_MspInit+0xc1c>)
 8006528:	2200      	movs	r2, #0
 800652a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800652c:	4b38      	ldr	r3, [pc, #224]	@ (8006610 <HAL_UART_MspInit+0xc1c>)
 800652e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006532:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006534:	4b36      	ldr	r3, [pc, #216]	@ (8006610 <HAL_UART_MspInit+0xc1c>)
 8006536:	2200      	movs	r2, #0
 8006538:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800653a:	4b35      	ldr	r3, [pc, #212]	@ (8006610 <HAL_UART_MspInit+0xc1c>)
 800653c:	2200      	movs	r2, #0
 800653e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8006540:	4b33      	ldr	r3, [pc, #204]	@ (8006610 <HAL_UART_MspInit+0xc1c>)
 8006542:	2200      	movs	r2, #0
 8006544:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006546:	4b32      	ldr	r3, [pc, #200]	@ (8006610 <HAL_UART_MspInit+0xc1c>)
 8006548:	2200      	movs	r2, #0
 800654a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800654c:	4b30      	ldr	r3, [pc, #192]	@ (8006610 <HAL_UART_MspInit+0xc1c>)
 800654e:	2200      	movs	r2, #0
 8006550:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006552:	482f      	ldr	r0, [pc, #188]	@ (8006610 <HAL_UART_MspInit+0xc1c>)
 8006554:	f000 fbb0 	bl	8006cb8 <HAL_DMA_Init>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <HAL_UART_MspInit+0xb6e>
      Error_Handler();
 800655e:	f7fe fd6f 	bl	8005040 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8006562:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006566:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a28      	ldr	r2, [pc, #160]	@ (8006610 <HAL_UART_MspInit+0xc1c>)
 800656e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006572:	4a27      	ldr	r2, [pc, #156]	@ (8006610 <HAL_UART_MspInit+0xc1c>)
 8006574:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006578:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA1_Stream5;
 8006580:	4b25      	ldr	r3, [pc, #148]	@ (8006618 <HAL_UART_MspInit+0xc24>)
 8006582:	4a26      	ldr	r2, [pc, #152]	@ (800661c <HAL_UART_MspInit+0xc28>)
 8006584:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 8006586:	4b24      	ldr	r3, [pc, #144]	@ (8006618 <HAL_UART_MspInit+0xc24>)
 8006588:	2248      	movs	r2, #72	@ 0x48
 800658a:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800658c:	4b22      	ldr	r3, [pc, #136]	@ (8006618 <HAL_UART_MspInit+0xc24>)
 800658e:	2240      	movs	r2, #64	@ 0x40
 8006590:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006592:	4b21      	ldr	r3, [pc, #132]	@ (8006618 <HAL_UART_MspInit+0xc24>)
 8006594:	2200      	movs	r2, #0
 8006596:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006598:	4b1f      	ldr	r3, [pc, #124]	@ (8006618 <HAL_UART_MspInit+0xc24>)
 800659a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800659e:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006618 <HAL_UART_MspInit+0xc24>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065a6:	4b1c      	ldr	r3, [pc, #112]	@ (8006618 <HAL_UART_MspInit+0xc24>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80065ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006618 <HAL_UART_MspInit+0xc24>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80065b2:	4b19      	ldr	r3, [pc, #100]	@ (8006618 <HAL_UART_MspInit+0xc24>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065b8:	4b17      	ldr	r3, [pc, #92]	@ (8006618 <HAL_UART_MspInit+0xc24>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80065be:	4816      	ldr	r0, [pc, #88]	@ (8006618 <HAL_UART_MspInit+0xc24>)
 80065c0:	f000 fb7a 	bl	8006cb8 <HAL_DMA_Init>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <HAL_UART_MspInit+0xbda>
      Error_Handler();
 80065ca:	f7fe fd39 	bl	8005040 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80065ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80065d2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a0f      	ldr	r2, [pc, #60]	@ (8006618 <HAL_UART_MspInit+0xc24>)
 80065da:	67da      	str	r2, [r3, #124]	@ 0x7c
 80065dc:	4a0e      	ldr	r2, [pc, #56]	@ (8006618 <HAL_UART_MspInit+0xc24>)
 80065de:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80065e2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80065ea:	2200      	movs	r2, #0
 80065ec:	2105      	movs	r1, #5
 80065ee:	2047      	movs	r0, #71	@ 0x47
 80065f0:	f000 fac2 	bl	8006b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80065f4:	2047      	movs	r0, #71	@ 0x47
 80065f6:	f000 fad9 	bl	8006bac <HAL_NVIC_EnableIRQ>
}
 80065fa:	bf00      	nop
 80065fc:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	40011400 	.word	0x40011400
 8006608:	58024400 	.word	0x58024400
 800660c:	58020800 	.word	0x58020800
 8006610:	2400110c 	.word	0x2400110c
 8006614:	40020070 	.word	0x40020070
 8006618:	24001184 	.word	0x24001184
 800661c:	40020088 	.word	0x40020088

08006620 <uart2_printf>:
  }
}

/* USER CODE BEGIN 1 */
__attribute__((section("._Text_Area"))) static char buff1[128];
int uart2_printf(const char *fmt, ...){
 8006620:	b40f      	push	{r0, r1, r2, r3}
 8006622:	b580      	push	{r7, lr}
 8006624:	b082      	sub	sp, #8
 8006626:	af00      	add	r7, sp, #0
//  static char buff[128];
  va_list va;int ret;
  va_start(va, fmt);
 8006628:	f107 0314 	add.w	r3, r7, #20
 800662c:	603b      	str	r3, [r7, #0]
  ret = vsprintf(buff1, fmt, va);
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	6939      	ldr	r1, [r7, #16]
 8006632:	480b      	ldr	r0, [pc, #44]	@ (8006660 <uart2_printf+0x40>)
 8006634:	f01e fece 	bl	80253d4 <vsiprintf>
 8006638:	6078      	str	r0, [r7, #4]
  va_end(va);
  if (ret > 0){
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	dd07      	ble.n	8006650 <uart2_printf+0x30>
    HAL_UART_Transmit(&huart2, (uint8_t*)buff1, ret, HAL_MAX_DELAY);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	b29a      	uxth	r2, r3
 8006644:	f04f 33ff 	mov.w	r3, #4294967295
 8006648:	4905      	ldr	r1, [pc, #20]	@ (8006660 <uart2_printf+0x40>)
 800664a:	4806      	ldr	r0, [pc, #24]	@ (8006664 <uart2_printf+0x44>)
 800664c:	f008 fa68 	bl	800eb20 <HAL_UART_Transmit>
  }
  return ret;
 8006650:	687b      	ldr	r3, [r7, #4]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800665c:	b004      	add	sp, #16
 800665e:	4770      	bx	lr
 8006660:	300050dc 	.word	0x300050dc
 8006664:	24000aa0 	.word	0x24000aa0

08006668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006668:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80066a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800666c:	f7fe ff26 	bl	80054bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006670:	480c      	ldr	r0, [pc, #48]	@ (80066a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006672:	490d      	ldr	r1, [pc, #52]	@ (80066a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006674:	4a0d      	ldr	r2, [pc, #52]	@ (80066ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006678:	e002      	b.n	8006680 <LoopCopyDataInit>

0800667a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800667a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800667c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800667e:	3304      	adds	r3, #4

08006680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006684:	d3f9      	bcc.n	800667a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006686:	4a0a      	ldr	r2, [pc, #40]	@ (80066b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006688:	4c0a      	ldr	r4, [pc, #40]	@ (80066b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800668a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800668c:	e001      	b.n	8006692 <LoopFillZerobss>

0800668e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800668e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006690:	3204      	adds	r2, #4

08006692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006694:	d3fb      	bcc.n	800668e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006696:	f01e ff4b 	bl	8025530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800669a:	f7fe fb47 	bl	8004d2c <main>
  bx  lr
 800669e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80066a0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80066a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80066a8:	240003d8 	.word	0x240003d8
  ldr r2, =_sidata
 80066ac:	0802d3e4 	.word	0x0802d3e4
  ldr r2, =_sbss
 80066b0:	240003d8 	.word	0x240003d8
  ldr r4, =_ebss
 80066b4:	2400c0f8 	.word	0x2400c0f8

080066b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80066b8:	e7fe      	b.n	80066b8 <ADC3_IRQHandler>

080066ba <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00b      	beq.n	80066e2 <LAN8742_RegisterBusIO+0x28>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d007      	beq.n	80066e2 <LAN8742_RegisterBusIO+0x28>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <LAN8742_RegisterBusIO+0x28>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d102      	bne.n	80066e8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80066e2:	f04f 33ff 	mov.w	r3, #4294967295
 80066e6:	e014      	b.n	8006712 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	689a      	ldr	r2, [r3, #8]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	691a      	ldr	r2, [r3, #16]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800671e:	b580      	push	{r7, lr}
 8006720:	b086      	sub	sp, #24
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	2300      	movs	r3, #0
 800672c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d139      	bne.n	80067ae <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800674e:	2300      	movs	r3, #0
 8006750:	617b      	str	r3, [r7, #20]
 8006752:	e01c      	b.n	800678e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	f107 020c 	add.w	r2, r7, #12
 800675c:	2112      	movs	r1, #18
 800675e:	6978      	ldr	r0, [r7, #20]
 8006760:	4798      	blx	r3
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	da03      	bge.n	8006770 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8006768:	f06f 0304 	mvn.w	r3, #4
 800676c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800676e:	e00b      	b.n	8006788 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f003 031f 	and.w	r3, r3, #31
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	429a      	cmp	r2, r3
 800677a:	d105      	bne.n	8006788 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	613b      	str	r3, [r7, #16]
         break;
 8006786:	e005      	b.n	8006794 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	3301      	adds	r3, #1
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2b1f      	cmp	r3, #31
 8006792:	d9df      	bls.n	8006754 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b1f      	cmp	r3, #31
 800679a:	d902      	bls.n	80067a2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800679c:	f06f 0302 	mvn.w	r3, #2
 80067a0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d102      	bne.n	80067ae <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80067ae:	693b      	ldr	r3, [r7, #16]
 }
 80067b0:	4618      	mov	r0, r3
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6810      	ldr	r0, [r2, #0]
 80067cc:	f107 020c 	add.w	r2, r7, #12
 80067d0:	2101      	movs	r1, #1
 80067d2:	4798      	blx	r3
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	da02      	bge.n	80067e0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80067da:	f06f 0304 	mvn.w	r3, #4
 80067de:	e06e      	b.n	80068be <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6810      	ldr	r0, [r2, #0]
 80067e8:	f107 020c 	add.w	r2, r7, #12
 80067ec:	2101      	movs	r1, #1
 80067ee:	4798      	blx	r3
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	da02      	bge.n	80067fc <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80067f6:	f06f 0304 	mvn.w	r3, #4
 80067fa:	e060      	b.n	80068be <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f003 0304 	and.w	r3, r3, #4
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8006806:	2301      	movs	r3, #1
 8006808:	e059      	b.n	80068be <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6810      	ldr	r0, [r2, #0]
 8006812:	f107 020c 	add.w	r2, r7, #12
 8006816:	2100      	movs	r1, #0
 8006818:	4798      	blx	r3
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	da02      	bge.n	8006826 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8006820:	f06f 0304 	mvn.w	r3, #4
 8006824:	e04b      	b.n	80068be <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d11b      	bne.n	8006868 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d006      	beq.n	8006848 <LAN8742_GetLinkState+0x90>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006840:	2b00      	cmp	r3, #0
 8006842:	d001      	beq.n	8006848 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8006844:	2302      	movs	r3, #2
 8006846:	e03a      	b.n	80068be <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8006852:	2303      	movs	r3, #3
 8006854:	e033      	b.n	80068be <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8006860:	2304      	movs	r3, #4
 8006862:	e02c      	b.n	80068be <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8006864:	2305      	movs	r3, #5
 8006866:	e02a      	b.n	80068be <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6810      	ldr	r0, [r2, #0]
 8006870:	f107 020c 	add.w	r2, r7, #12
 8006874:	211f      	movs	r1, #31
 8006876:	4798      	blx	r3
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	da02      	bge.n	8006884 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800687e:	f06f 0304 	mvn.w	r3, #4
 8006882:	e01c      	b.n	80068be <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800688e:	2306      	movs	r3, #6
 8006890:	e015      	b.n	80068be <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f003 031c 	and.w	r3, r3, #28
 8006898:	2b18      	cmp	r3, #24
 800689a:	d101      	bne.n	80068a0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800689c:	2302      	movs	r3, #2
 800689e:	e00e      	b.n	80068be <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f003 031c 	and.w	r3, r3, #28
 80068a6:	2b08      	cmp	r3, #8
 80068a8:	d101      	bne.n	80068ae <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e007      	b.n	80068be <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f003 031c 	and.w	r3, r3, #28
 80068b4:	2b14      	cmp	r3, #20
 80068b6:	d101      	bne.n	80068bc <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80068b8:	2304      	movs	r3, #4
 80068ba:	e000      	b.n	80068be <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80068bc:	2305      	movs	r3, #5
    }
  }
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
	...

080068c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068ce:	2003      	movs	r0, #3
 80068d0:	f000 f947 	bl	8006b62 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80068d4:	f005 fdc2 	bl	800c45c <HAL_RCC_GetSysClockFreq>
 80068d8:	4602      	mov	r2, r0
 80068da:	4b15      	ldr	r3, [pc, #84]	@ (8006930 <HAL_Init+0x68>)
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	0a1b      	lsrs	r3, r3, #8
 80068e0:	f003 030f 	and.w	r3, r3, #15
 80068e4:	4913      	ldr	r1, [pc, #76]	@ (8006934 <HAL_Init+0x6c>)
 80068e6:	5ccb      	ldrb	r3, [r1, r3]
 80068e8:	f003 031f 	and.w	r3, r3, #31
 80068ec:	fa22 f303 	lsr.w	r3, r2, r3
 80068f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006930 <HAL_Init+0x68>)
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006934 <HAL_Init+0x6c>)
 80068fc:	5cd3      	ldrb	r3, [r2, r3]
 80068fe:	f003 031f 	and.w	r3, r3, #31
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	fa22 f303 	lsr.w	r3, r2, r3
 8006908:	4a0b      	ldr	r2, [pc, #44]	@ (8006938 <HAL_Init+0x70>)
 800690a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800690c:	4a0b      	ldr	r2, [pc, #44]	@ (800693c <HAL_Init+0x74>)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006912:	200f      	movs	r0, #15
 8006914:	f7fe fbb8 	bl	8005088 <HAL_InitTick>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e002      	b.n	8006928 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006922:	f7fe fb93 	bl	800504c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	58024400 	.word	0x58024400
 8006934:	0802cd74 	.word	0x0802cd74
 8006938:	240001e0 	.word	0x240001e0
 800693c:	240001dc 	.word	0x240001dc

08006940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006944:	4b06      	ldr	r3, [pc, #24]	@ (8006960 <HAL_IncTick+0x20>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	461a      	mov	r2, r3
 800694a:	4b06      	ldr	r3, [pc, #24]	@ (8006964 <HAL_IncTick+0x24>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4413      	add	r3, r2
 8006950:	4a04      	ldr	r2, [pc, #16]	@ (8006964 <HAL_IncTick+0x24>)
 8006952:	6013      	str	r3, [r2, #0]
}
 8006954:	bf00      	nop
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	240001e8 	.word	0x240001e8
 8006964:	240011fc 	.word	0x240011fc

08006968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006968:	b480      	push	{r7}
 800696a:	af00      	add	r7, sp, #0
  return uwTick;
 800696c:	4b03      	ldr	r3, [pc, #12]	@ (800697c <HAL_GetTick+0x14>)
 800696e:	681b      	ldr	r3, [r3, #0]
}
 8006970:	4618      	mov	r0, r3
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	240011fc 	.word	0x240011fc

08006980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006988:	f7ff ffee 	bl	8006968 <HAL_GetTick>
 800698c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006998:	d005      	beq.n	80069a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800699a:	4b0a      	ldr	r3, [pc, #40]	@ (80069c4 <HAL_Delay+0x44>)
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4413      	add	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80069a6:	bf00      	nop
 80069a8:	f7ff ffde 	bl	8006968 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d8f7      	bhi.n	80069a8 <HAL_Delay+0x28>
  {
  }
}
 80069b8:	bf00      	nop
 80069ba:	bf00      	nop
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	240001e8 	.word	0x240001e8

080069c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80069cc:	4b03      	ldr	r3, [pc, #12]	@ (80069dc <HAL_GetREVID+0x14>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	0c1b      	lsrs	r3, r3, #16
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	5c001000 	.word	0x5c001000

080069e0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80069e8:	4b06      	ldr	r3, [pc, #24]	@ (8006a04 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80069f0:	4904      	ldr	r1, [pc, #16]	@ (8006a04 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	604b      	str	r3, [r1, #4]
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	58000400 	.word	0x58000400

08006a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a18:	4b0b      	ldr	r3, [pc, #44]	@ (8006a48 <__NVIC_SetPriorityGrouping+0x40>)
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006a24:	4013      	ands	r3, r2
 8006a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006a30:	4b06      	ldr	r3, [pc, #24]	@ (8006a4c <__NVIC_SetPriorityGrouping+0x44>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a36:	4a04      	ldr	r2, [pc, #16]	@ (8006a48 <__NVIC_SetPriorityGrouping+0x40>)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	60d3      	str	r3, [r2, #12]
}
 8006a3c:	bf00      	nop
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	e000ed00 	.word	0xe000ed00
 8006a4c:	05fa0000 	.word	0x05fa0000

08006a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a54:	4b04      	ldr	r3, [pc, #16]	@ (8006a68 <__NVIC_GetPriorityGrouping+0x18>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	0a1b      	lsrs	r3, r3, #8
 8006a5a:	f003 0307 	and.w	r3, r3, #7
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	e000ed00 	.word	0xe000ed00

08006a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	4603      	mov	r3, r0
 8006a74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	db0b      	blt.n	8006a96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a7e:	88fb      	ldrh	r3, [r7, #6]
 8006a80:	f003 021f 	and.w	r2, r3, #31
 8006a84:	4907      	ldr	r1, [pc, #28]	@ (8006aa4 <__NVIC_EnableIRQ+0x38>)
 8006a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a8a:	095b      	lsrs	r3, r3, #5
 8006a8c:	2001      	movs	r0, #1
 8006a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8006a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	e000e100 	.word	0xe000e100

08006aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	4603      	mov	r3, r0
 8006ab0:	6039      	str	r1, [r7, #0]
 8006ab2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006ab4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	db0a      	blt.n	8006ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	490c      	ldr	r1, [pc, #48]	@ (8006af4 <__NVIC_SetPriority+0x4c>)
 8006ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ac6:	0112      	lsls	r2, r2, #4
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	440b      	add	r3, r1
 8006acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ad0:	e00a      	b.n	8006ae8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	4908      	ldr	r1, [pc, #32]	@ (8006af8 <__NVIC_SetPriority+0x50>)
 8006ad8:	88fb      	ldrh	r3, [r7, #6]
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	3b04      	subs	r3, #4
 8006ae0:	0112      	lsls	r2, r2, #4
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	761a      	strb	r2, [r3, #24]
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	e000e100 	.word	0xe000e100
 8006af8:	e000ed00 	.word	0xe000ed00

08006afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b089      	sub	sp, #36	@ 0x24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f1c3 0307 	rsb	r3, r3, #7
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	bf28      	it	cs
 8006b1a:	2304      	movcs	r3, #4
 8006b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	3304      	adds	r3, #4
 8006b22:	2b06      	cmp	r3, #6
 8006b24:	d902      	bls.n	8006b2c <NVIC_EncodePriority+0x30>
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	3b03      	subs	r3, #3
 8006b2a:	e000      	b.n	8006b2e <NVIC_EncodePriority+0x32>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b30:	f04f 32ff 	mov.w	r2, #4294967295
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3a:	43da      	mvns	r2, r3
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	401a      	ands	r2, r3
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b44:	f04f 31ff 	mov.w	r1, #4294967295
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4e:	43d9      	mvns	r1, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b54:	4313      	orrs	r3, r2
         );
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3724      	adds	r7, #36	@ 0x24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b082      	sub	sp, #8
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff ff4c 	bl	8006a08 <__NVIC_SetPriorityGrouping>
}
 8006b70:	bf00      	nop
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b86:	f7ff ff63 	bl	8006a50 <__NVIC_GetPriorityGrouping>
 8006b8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	68b9      	ldr	r1, [r7, #8]
 8006b90:	6978      	ldr	r0, [r7, #20]
 8006b92:	f7ff ffb3 	bl	8006afc <NVIC_EncodePriority>
 8006b96:	4602      	mov	r2, r0
 8006b98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff ff82 	bl	8006aa8 <__NVIC_SetPriority>
}
 8006ba4:	bf00      	nop
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff ff56 	bl	8006a6c <__NVIC_EnableIRQ>
}
 8006bc0:	bf00      	nop
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006bcc:	f3bf 8f5f 	dmb	sy
}
 8006bd0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006bd2:	4b07      	ldr	r3, [pc, #28]	@ (8006bf0 <HAL_MPU_Disable+0x28>)
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd6:	4a06      	ldr	r2, [pc, #24]	@ (8006bf0 <HAL_MPU_Disable+0x28>)
 8006bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bdc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006bde:	4b05      	ldr	r3, [pc, #20]	@ (8006bf4 <HAL_MPU_Disable+0x2c>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	605a      	str	r2, [r3, #4]
}
 8006be4:	bf00      	nop
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	e000ed00 	.word	0xe000ed00
 8006bf4:	e000ed90 	.word	0xe000ed90

08006bf8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006c00:	4a0b      	ldr	r2, [pc, #44]	@ (8006c30 <HAL_MPU_Enable+0x38>)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f043 0301 	orr.w	r3, r3, #1
 8006c08:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c34 <HAL_MPU_Enable+0x3c>)
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0e:	4a09      	ldr	r2, [pc, #36]	@ (8006c34 <HAL_MPU_Enable+0x3c>)
 8006c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c14:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006c16:	f3bf 8f4f 	dsb	sy
}
 8006c1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006c1c:	f3bf 8f6f 	isb	sy
}
 8006c20:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006c22:	bf00      	nop
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	e000ed90 	.word	0xe000ed90
 8006c34:	e000ed00 	.word	0xe000ed00

08006c38 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	785a      	ldrb	r2, [r3, #1]
 8006c44:	4b1b      	ldr	r3, [pc, #108]	@ (8006cb4 <HAL_MPU_ConfigRegion+0x7c>)
 8006c46:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006c48:	4b1a      	ldr	r3, [pc, #104]	@ (8006cb4 <HAL_MPU_ConfigRegion+0x7c>)
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	4a19      	ldr	r2, [pc, #100]	@ (8006cb4 <HAL_MPU_ConfigRegion+0x7c>)
 8006c4e:	f023 0301 	bic.w	r3, r3, #1
 8006c52:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006c54:	4a17      	ldr	r2, [pc, #92]	@ (8006cb4 <HAL_MPU_ConfigRegion+0x7c>)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	7b1b      	ldrb	r3, [r3, #12]
 8006c60:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	7adb      	ldrb	r3, [r3, #11]
 8006c66:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006c68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	7a9b      	ldrb	r3, [r3, #10]
 8006c6e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006c70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	7b5b      	ldrb	r3, [r3, #13]
 8006c76:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006c78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	7b9b      	ldrb	r3, [r3, #14]
 8006c7e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006c80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	7bdb      	ldrb	r3, [r3, #15]
 8006c86:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006c88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	7a5b      	ldrb	r3, [r3, #9]
 8006c8e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006c90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	7a1b      	ldrb	r3, [r3, #8]
 8006c96:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006c98:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	7812      	ldrb	r2, [r2, #0]
 8006c9e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ca0:	4a04      	ldr	r2, [pc, #16]	@ (8006cb4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006ca2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ca4:	6113      	str	r3, [r2, #16]
}
 8006ca6:	bf00      	nop
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	e000ed90 	.word	0xe000ed90

08006cb8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006cc0:	f7ff fe52 	bl	8006968 <HAL_GetTick>
 8006cc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e316      	b.n	80072fe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a66      	ldr	r2, [pc, #408]	@ (8006e70 <HAL_DMA_Init+0x1b8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d04a      	beq.n	8006d70 <HAL_DMA_Init+0xb8>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a65      	ldr	r2, [pc, #404]	@ (8006e74 <HAL_DMA_Init+0x1bc>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d045      	beq.n	8006d70 <HAL_DMA_Init+0xb8>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a63      	ldr	r2, [pc, #396]	@ (8006e78 <HAL_DMA_Init+0x1c0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d040      	beq.n	8006d70 <HAL_DMA_Init+0xb8>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a62      	ldr	r2, [pc, #392]	@ (8006e7c <HAL_DMA_Init+0x1c4>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d03b      	beq.n	8006d70 <HAL_DMA_Init+0xb8>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a60      	ldr	r2, [pc, #384]	@ (8006e80 <HAL_DMA_Init+0x1c8>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d036      	beq.n	8006d70 <HAL_DMA_Init+0xb8>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a5f      	ldr	r2, [pc, #380]	@ (8006e84 <HAL_DMA_Init+0x1cc>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d031      	beq.n	8006d70 <HAL_DMA_Init+0xb8>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a5d      	ldr	r2, [pc, #372]	@ (8006e88 <HAL_DMA_Init+0x1d0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d02c      	beq.n	8006d70 <HAL_DMA_Init+0xb8>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a5c      	ldr	r2, [pc, #368]	@ (8006e8c <HAL_DMA_Init+0x1d4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d027      	beq.n	8006d70 <HAL_DMA_Init+0xb8>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a5a      	ldr	r2, [pc, #360]	@ (8006e90 <HAL_DMA_Init+0x1d8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d022      	beq.n	8006d70 <HAL_DMA_Init+0xb8>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a59      	ldr	r2, [pc, #356]	@ (8006e94 <HAL_DMA_Init+0x1dc>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d01d      	beq.n	8006d70 <HAL_DMA_Init+0xb8>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a57      	ldr	r2, [pc, #348]	@ (8006e98 <HAL_DMA_Init+0x1e0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d018      	beq.n	8006d70 <HAL_DMA_Init+0xb8>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a56      	ldr	r2, [pc, #344]	@ (8006e9c <HAL_DMA_Init+0x1e4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d013      	beq.n	8006d70 <HAL_DMA_Init+0xb8>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a54      	ldr	r2, [pc, #336]	@ (8006ea0 <HAL_DMA_Init+0x1e8>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00e      	beq.n	8006d70 <HAL_DMA_Init+0xb8>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a53      	ldr	r2, [pc, #332]	@ (8006ea4 <HAL_DMA_Init+0x1ec>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d009      	beq.n	8006d70 <HAL_DMA_Init+0xb8>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a51      	ldr	r2, [pc, #324]	@ (8006ea8 <HAL_DMA_Init+0x1f0>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d004      	beq.n	8006d70 <HAL_DMA_Init+0xb8>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a50      	ldr	r2, [pc, #320]	@ (8006eac <HAL_DMA_Init+0x1f4>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d101      	bne.n	8006d74 <HAL_DMA_Init+0xbc>
 8006d70:	2301      	movs	r3, #1
 8006d72:	e000      	b.n	8006d76 <HAL_DMA_Init+0xbe>
 8006d74:	2300      	movs	r3, #0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 813b 	beq.w	8006ff2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a37      	ldr	r2, [pc, #220]	@ (8006e70 <HAL_DMA_Init+0x1b8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d04a      	beq.n	8006e2c <HAL_DMA_Init+0x174>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a36      	ldr	r2, [pc, #216]	@ (8006e74 <HAL_DMA_Init+0x1bc>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d045      	beq.n	8006e2c <HAL_DMA_Init+0x174>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a34      	ldr	r2, [pc, #208]	@ (8006e78 <HAL_DMA_Init+0x1c0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d040      	beq.n	8006e2c <HAL_DMA_Init+0x174>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a33      	ldr	r2, [pc, #204]	@ (8006e7c <HAL_DMA_Init+0x1c4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d03b      	beq.n	8006e2c <HAL_DMA_Init+0x174>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a31      	ldr	r2, [pc, #196]	@ (8006e80 <HAL_DMA_Init+0x1c8>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d036      	beq.n	8006e2c <HAL_DMA_Init+0x174>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a30      	ldr	r2, [pc, #192]	@ (8006e84 <HAL_DMA_Init+0x1cc>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d031      	beq.n	8006e2c <HAL_DMA_Init+0x174>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a2e      	ldr	r2, [pc, #184]	@ (8006e88 <HAL_DMA_Init+0x1d0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d02c      	beq.n	8006e2c <HAL_DMA_Init+0x174>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a2d      	ldr	r2, [pc, #180]	@ (8006e8c <HAL_DMA_Init+0x1d4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d027      	beq.n	8006e2c <HAL_DMA_Init+0x174>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a2b      	ldr	r2, [pc, #172]	@ (8006e90 <HAL_DMA_Init+0x1d8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d022      	beq.n	8006e2c <HAL_DMA_Init+0x174>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a2a      	ldr	r2, [pc, #168]	@ (8006e94 <HAL_DMA_Init+0x1dc>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d01d      	beq.n	8006e2c <HAL_DMA_Init+0x174>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a28      	ldr	r2, [pc, #160]	@ (8006e98 <HAL_DMA_Init+0x1e0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d018      	beq.n	8006e2c <HAL_DMA_Init+0x174>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a27      	ldr	r2, [pc, #156]	@ (8006e9c <HAL_DMA_Init+0x1e4>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d013      	beq.n	8006e2c <HAL_DMA_Init+0x174>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a25      	ldr	r2, [pc, #148]	@ (8006ea0 <HAL_DMA_Init+0x1e8>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d00e      	beq.n	8006e2c <HAL_DMA_Init+0x174>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a24      	ldr	r2, [pc, #144]	@ (8006ea4 <HAL_DMA_Init+0x1ec>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d009      	beq.n	8006e2c <HAL_DMA_Init+0x174>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a22      	ldr	r2, [pc, #136]	@ (8006ea8 <HAL_DMA_Init+0x1f0>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d004      	beq.n	8006e2c <HAL_DMA_Init+0x174>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a21      	ldr	r2, [pc, #132]	@ (8006eac <HAL_DMA_Init+0x1f4>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d108      	bne.n	8006e3e <HAL_DMA_Init+0x186>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f022 0201 	bic.w	r2, r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	e007      	b.n	8006e4e <HAL_DMA_Init+0x196>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 0201 	bic.w	r2, r2, #1
 8006e4c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006e4e:	e02f      	b.n	8006eb0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e50:	f7ff fd8a 	bl	8006968 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b05      	cmp	r3, #5
 8006e5c:	d928      	bls.n	8006eb0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2220      	movs	r2, #32
 8006e62:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2203      	movs	r2, #3
 8006e68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e246      	b.n	80072fe <HAL_DMA_Init+0x646>
 8006e70:	40020010 	.word	0x40020010
 8006e74:	40020028 	.word	0x40020028
 8006e78:	40020040 	.word	0x40020040
 8006e7c:	40020058 	.word	0x40020058
 8006e80:	40020070 	.word	0x40020070
 8006e84:	40020088 	.word	0x40020088
 8006e88:	400200a0 	.word	0x400200a0
 8006e8c:	400200b8 	.word	0x400200b8
 8006e90:	40020410 	.word	0x40020410
 8006e94:	40020428 	.word	0x40020428
 8006e98:	40020440 	.word	0x40020440
 8006e9c:	40020458 	.word	0x40020458
 8006ea0:	40020470 	.word	0x40020470
 8006ea4:	40020488 	.word	0x40020488
 8006ea8:	400204a0 	.word	0x400204a0
 8006eac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1c8      	bne.n	8006e50 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4b83      	ldr	r3, [pc, #524]	@ (80070d8 <HAL_DMA_Init+0x420>)
 8006eca:	4013      	ands	r3, r2
 8006ecc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006ed6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ee2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006eee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f00:	2b04      	cmp	r3, #4
 8006f02:	d107      	bne.n	8006f14 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006f14:	4b71      	ldr	r3, [pc, #452]	@ (80070dc <HAL_DMA_Init+0x424>)
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	4b71      	ldr	r3, [pc, #452]	@ (80070e0 <HAL_DMA_Init+0x428>)
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f20:	d328      	bcc.n	8006f74 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	2b28      	cmp	r3, #40	@ 0x28
 8006f28:	d903      	bls.n	8006f32 <HAL_DMA_Init+0x27a>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f30:	d917      	bls.n	8006f62 <HAL_DMA_Init+0x2aa>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f38:	d903      	bls.n	8006f42 <HAL_DMA_Init+0x28a>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	2b42      	cmp	r3, #66	@ 0x42
 8006f40:	d90f      	bls.n	8006f62 <HAL_DMA_Init+0x2aa>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	2b46      	cmp	r3, #70	@ 0x46
 8006f48:	d903      	bls.n	8006f52 <HAL_DMA_Init+0x29a>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	2b48      	cmp	r3, #72	@ 0x48
 8006f50:	d907      	bls.n	8006f62 <HAL_DMA_Init+0x2aa>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2b4e      	cmp	r3, #78	@ 0x4e
 8006f58:	d905      	bls.n	8006f66 <HAL_DMA_Init+0x2ae>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2b52      	cmp	r3, #82	@ 0x52
 8006f60:	d801      	bhi.n	8006f66 <HAL_DMA_Init+0x2ae>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e000      	b.n	8006f68 <HAL_DMA_Init+0x2b0>
 8006f66:	2300      	movs	r3, #0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f72:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f023 0307 	bic.w	r3, r3, #7
 8006f8a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	d117      	bne.n	8006fce <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00e      	beq.n	8006fce <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f002 fb33 	bl	800961c <DMA_CheckFifoParam>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d008      	beq.n	8006fce <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2240      	movs	r2, #64	@ 0x40
 8006fc0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e197      	b.n	80072fe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f002 fa6e 	bl	80094b8 <DMA_CalcBaseAndBitshift>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fe4:	f003 031f 	and.w	r3, r3, #31
 8006fe8:	223f      	movs	r2, #63	@ 0x3f
 8006fea:	409a      	lsls	r2, r3
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	609a      	str	r2, [r3, #8]
 8006ff0:	e0cd      	b.n	800718e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a3b      	ldr	r2, [pc, #236]	@ (80070e4 <HAL_DMA_Init+0x42c>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d022      	beq.n	8007042 <HAL_DMA_Init+0x38a>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a39      	ldr	r2, [pc, #228]	@ (80070e8 <HAL_DMA_Init+0x430>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d01d      	beq.n	8007042 <HAL_DMA_Init+0x38a>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a38      	ldr	r2, [pc, #224]	@ (80070ec <HAL_DMA_Init+0x434>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d018      	beq.n	8007042 <HAL_DMA_Init+0x38a>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a36      	ldr	r2, [pc, #216]	@ (80070f0 <HAL_DMA_Init+0x438>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d013      	beq.n	8007042 <HAL_DMA_Init+0x38a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a35      	ldr	r2, [pc, #212]	@ (80070f4 <HAL_DMA_Init+0x43c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d00e      	beq.n	8007042 <HAL_DMA_Init+0x38a>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a33      	ldr	r2, [pc, #204]	@ (80070f8 <HAL_DMA_Init+0x440>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d009      	beq.n	8007042 <HAL_DMA_Init+0x38a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a32      	ldr	r2, [pc, #200]	@ (80070fc <HAL_DMA_Init+0x444>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d004      	beq.n	8007042 <HAL_DMA_Init+0x38a>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a30      	ldr	r2, [pc, #192]	@ (8007100 <HAL_DMA_Init+0x448>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d101      	bne.n	8007046 <HAL_DMA_Init+0x38e>
 8007042:	2301      	movs	r3, #1
 8007044:	e000      	b.n	8007048 <HAL_DMA_Init+0x390>
 8007046:	2300      	movs	r3, #0
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 8097 	beq.w	800717c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a24      	ldr	r2, [pc, #144]	@ (80070e4 <HAL_DMA_Init+0x42c>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d021      	beq.n	800709c <HAL_DMA_Init+0x3e4>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a22      	ldr	r2, [pc, #136]	@ (80070e8 <HAL_DMA_Init+0x430>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d01c      	beq.n	800709c <HAL_DMA_Init+0x3e4>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a21      	ldr	r2, [pc, #132]	@ (80070ec <HAL_DMA_Init+0x434>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d017      	beq.n	800709c <HAL_DMA_Init+0x3e4>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a1f      	ldr	r2, [pc, #124]	@ (80070f0 <HAL_DMA_Init+0x438>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d012      	beq.n	800709c <HAL_DMA_Init+0x3e4>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a1e      	ldr	r2, [pc, #120]	@ (80070f4 <HAL_DMA_Init+0x43c>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d00d      	beq.n	800709c <HAL_DMA_Init+0x3e4>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a1c      	ldr	r2, [pc, #112]	@ (80070f8 <HAL_DMA_Init+0x440>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d008      	beq.n	800709c <HAL_DMA_Init+0x3e4>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a1b      	ldr	r2, [pc, #108]	@ (80070fc <HAL_DMA_Init+0x444>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d003      	beq.n	800709c <HAL_DMA_Init+0x3e4>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a19      	ldr	r2, [pc, #100]	@ (8007100 <HAL_DMA_Init+0x448>)
 800709a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	4b13      	ldr	r3, [pc, #76]	@ (8007104 <HAL_DMA_Init+0x44c>)
 80070b8:	4013      	ands	r3, r2
 80070ba:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	2b40      	cmp	r3, #64	@ 0x40
 80070c2:	d021      	beq.n	8007108 <HAL_DMA_Init+0x450>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	2b80      	cmp	r3, #128	@ 0x80
 80070ca:	d102      	bne.n	80070d2 <HAL_DMA_Init+0x41a>
 80070cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80070d0:	e01b      	b.n	800710a <HAL_DMA_Init+0x452>
 80070d2:	2300      	movs	r3, #0
 80070d4:	e019      	b.n	800710a <HAL_DMA_Init+0x452>
 80070d6:	bf00      	nop
 80070d8:	fe10803f 	.word	0xfe10803f
 80070dc:	5c001000 	.word	0x5c001000
 80070e0:	ffff0000 	.word	0xffff0000
 80070e4:	58025408 	.word	0x58025408
 80070e8:	5802541c 	.word	0x5802541c
 80070ec:	58025430 	.word	0x58025430
 80070f0:	58025444 	.word	0x58025444
 80070f4:	58025458 	.word	0x58025458
 80070f8:	5802546c 	.word	0x5802546c
 80070fc:	58025480 	.word	0x58025480
 8007100:	58025494 	.word	0x58025494
 8007104:	fffe000f 	.word	0xfffe000f
 8007108:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	68d2      	ldr	r2, [r2, #12]
 800710e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007110:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007118:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007120:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007128:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007130:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007138:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	4313      	orrs	r3, r2
 800713e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	4b6e      	ldr	r3, [pc, #440]	@ (8007308 <HAL_DMA_Init+0x650>)
 8007150:	4413      	add	r3, r2
 8007152:	4a6e      	ldr	r2, [pc, #440]	@ (800730c <HAL_DMA_Init+0x654>)
 8007154:	fba2 2303 	umull	r2, r3, r2, r3
 8007158:	091b      	lsrs	r3, r3, #4
 800715a:	009a      	lsls	r2, r3, #2
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f002 f9a9 	bl	80094b8 <DMA_CalcBaseAndBitshift>
 8007166:	4603      	mov	r3, r0
 8007168:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800716e:	f003 031f 	and.w	r3, r3, #31
 8007172:	2201      	movs	r2, #1
 8007174:	409a      	lsls	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	605a      	str	r2, [r3, #4]
 800717a:	e008      	b.n	800718e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2240      	movs	r2, #64	@ 0x40
 8007180:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2203      	movs	r2, #3
 8007186:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e0b7      	b.n	80072fe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a5f      	ldr	r2, [pc, #380]	@ (8007310 <HAL_DMA_Init+0x658>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d072      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a5d      	ldr	r2, [pc, #372]	@ (8007314 <HAL_DMA_Init+0x65c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d06d      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a5c      	ldr	r2, [pc, #368]	@ (8007318 <HAL_DMA_Init+0x660>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d068      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a5a      	ldr	r2, [pc, #360]	@ (800731c <HAL_DMA_Init+0x664>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d063      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a59      	ldr	r2, [pc, #356]	@ (8007320 <HAL_DMA_Init+0x668>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d05e      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a57      	ldr	r2, [pc, #348]	@ (8007324 <HAL_DMA_Init+0x66c>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d059      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a56      	ldr	r2, [pc, #344]	@ (8007328 <HAL_DMA_Init+0x670>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d054      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a54      	ldr	r2, [pc, #336]	@ (800732c <HAL_DMA_Init+0x674>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d04f      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a53      	ldr	r2, [pc, #332]	@ (8007330 <HAL_DMA_Init+0x678>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d04a      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a51      	ldr	r2, [pc, #324]	@ (8007334 <HAL_DMA_Init+0x67c>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d045      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a50      	ldr	r2, [pc, #320]	@ (8007338 <HAL_DMA_Init+0x680>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d040      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a4e      	ldr	r2, [pc, #312]	@ (800733c <HAL_DMA_Init+0x684>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d03b      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a4d      	ldr	r2, [pc, #308]	@ (8007340 <HAL_DMA_Init+0x688>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d036      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a4b      	ldr	r2, [pc, #300]	@ (8007344 <HAL_DMA_Init+0x68c>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d031      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a4a      	ldr	r2, [pc, #296]	@ (8007348 <HAL_DMA_Init+0x690>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d02c      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a48      	ldr	r2, [pc, #288]	@ (800734c <HAL_DMA_Init+0x694>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d027      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a47      	ldr	r2, [pc, #284]	@ (8007350 <HAL_DMA_Init+0x698>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d022      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a45      	ldr	r2, [pc, #276]	@ (8007354 <HAL_DMA_Init+0x69c>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d01d      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a44      	ldr	r2, [pc, #272]	@ (8007358 <HAL_DMA_Init+0x6a0>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d018      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a42      	ldr	r2, [pc, #264]	@ (800735c <HAL_DMA_Init+0x6a4>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d013      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a41      	ldr	r2, [pc, #260]	@ (8007360 <HAL_DMA_Init+0x6a8>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d00e      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a3f      	ldr	r2, [pc, #252]	@ (8007364 <HAL_DMA_Init+0x6ac>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d009      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a3e      	ldr	r2, [pc, #248]	@ (8007368 <HAL_DMA_Init+0x6b0>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d004      	beq.n	800727e <HAL_DMA_Init+0x5c6>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a3c      	ldr	r2, [pc, #240]	@ (800736c <HAL_DMA_Init+0x6b4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d101      	bne.n	8007282 <HAL_DMA_Init+0x5ca>
 800727e:	2301      	movs	r3, #1
 8007280:	e000      	b.n	8007284 <HAL_DMA_Init+0x5cc>
 8007282:	2300      	movs	r3, #0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d032      	beq.n	80072ee <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f002 fa43 	bl	8009714 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	2b80      	cmp	r3, #128	@ 0x80
 8007294:	d102      	bne.n	800729c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072a4:	b2d2      	uxtb	r2, r2
 80072a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80072b0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d010      	beq.n	80072dc <HAL_DMA_Init+0x624>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	2b08      	cmp	r3, #8
 80072c0:	d80c      	bhi.n	80072dc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f002 fac0 	bl	8009848 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072cc:	2200      	movs	r2, #0
 80072ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80072d8:	605a      	str	r2, [r3, #4]
 80072da:	e008      	b.n	80072ee <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	a7fdabf8 	.word	0xa7fdabf8
 800730c:	cccccccd 	.word	0xcccccccd
 8007310:	40020010 	.word	0x40020010
 8007314:	40020028 	.word	0x40020028
 8007318:	40020040 	.word	0x40020040
 800731c:	40020058 	.word	0x40020058
 8007320:	40020070 	.word	0x40020070
 8007324:	40020088 	.word	0x40020088
 8007328:	400200a0 	.word	0x400200a0
 800732c:	400200b8 	.word	0x400200b8
 8007330:	40020410 	.word	0x40020410
 8007334:	40020428 	.word	0x40020428
 8007338:	40020440 	.word	0x40020440
 800733c:	40020458 	.word	0x40020458
 8007340:	40020470 	.word	0x40020470
 8007344:	40020488 	.word	0x40020488
 8007348:	400204a0 	.word	0x400204a0
 800734c:	400204b8 	.word	0x400204b8
 8007350:	58025408 	.word	0x58025408
 8007354:	5802541c 	.word	0x5802541c
 8007358:	58025430 	.word	0x58025430
 800735c:	58025444 	.word	0x58025444
 8007360:	58025458 	.word	0x58025458
 8007364:	5802546c 	.word	0x5802546c
 8007368:	58025480 	.word	0x58025480
 800736c:	58025494 	.word	0x58025494

08007370 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e226      	b.n	80077da <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007392:	2b01      	cmp	r3, #1
 8007394:	d101      	bne.n	800739a <HAL_DMA_Start_IT+0x2a>
 8007396:	2302      	movs	r3, #2
 8007398:	e21f      	b.n	80077da <HAL_DMA_Start_IT+0x46a>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	f040 820a 	bne.w	80077c4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a68      	ldr	r2, [pc, #416]	@ (8007564 <HAL_DMA_Start_IT+0x1f4>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d04a      	beq.n	800745e <HAL_DMA_Start_IT+0xee>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a66      	ldr	r2, [pc, #408]	@ (8007568 <HAL_DMA_Start_IT+0x1f8>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d045      	beq.n	800745e <HAL_DMA_Start_IT+0xee>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a65      	ldr	r2, [pc, #404]	@ (800756c <HAL_DMA_Start_IT+0x1fc>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d040      	beq.n	800745e <HAL_DMA_Start_IT+0xee>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a63      	ldr	r2, [pc, #396]	@ (8007570 <HAL_DMA_Start_IT+0x200>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d03b      	beq.n	800745e <HAL_DMA_Start_IT+0xee>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a62      	ldr	r2, [pc, #392]	@ (8007574 <HAL_DMA_Start_IT+0x204>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d036      	beq.n	800745e <HAL_DMA_Start_IT+0xee>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a60      	ldr	r2, [pc, #384]	@ (8007578 <HAL_DMA_Start_IT+0x208>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d031      	beq.n	800745e <HAL_DMA_Start_IT+0xee>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a5f      	ldr	r2, [pc, #380]	@ (800757c <HAL_DMA_Start_IT+0x20c>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d02c      	beq.n	800745e <HAL_DMA_Start_IT+0xee>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a5d      	ldr	r2, [pc, #372]	@ (8007580 <HAL_DMA_Start_IT+0x210>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d027      	beq.n	800745e <HAL_DMA_Start_IT+0xee>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a5c      	ldr	r2, [pc, #368]	@ (8007584 <HAL_DMA_Start_IT+0x214>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d022      	beq.n	800745e <HAL_DMA_Start_IT+0xee>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a5a      	ldr	r2, [pc, #360]	@ (8007588 <HAL_DMA_Start_IT+0x218>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d01d      	beq.n	800745e <HAL_DMA_Start_IT+0xee>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a59      	ldr	r2, [pc, #356]	@ (800758c <HAL_DMA_Start_IT+0x21c>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d018      	beq.n	800745e <HAL_DMA_Start_IT+0xee>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a57      	ldr	r2, [pc, #348]	@ (8007590 <HAL_DMA_Start_IT+0x220>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d013      	beq.n	800745e <HAL_DMA_Start_IT+0xee>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a56      	ldr	r2, [pc, #344]	@ (8007594 <HAL_DMA_Start_IT+0x224>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d00e      	beq.n	800745e <HAL_DMA_Start_IT+0xee>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a54      	ldr	r2, [pc, #336]	@ (8007598 <HAL_DMA_Start_IT+0x228>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d009      	beq.n	800745e <HAL_DMA_Start_IT+0xee>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a53      	ldr	r2, [pc, #332]	@ (800759c <HAL_DMA_Start_IT+0x22c>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d004      	beq.n	800745e <HAL_DMA_Start_IT+0xee>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a51      	ldr	r2, [pc, #324]	@ (80075a0 <HAL_DMA_Start_IT+0x230>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d108      	bne.n	8007470 <HAL_DMA_Start_IT+0x100>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 0201 	bic.w	r2, r2, #1
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	e007      	b.n	8007480 <HAL_DMA_Start_IT+0x110>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 0201 	bic.w	r2, r2, #1
 800747e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	68b9      	ldr	r1, [r7, #8]
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f001 fe6a 	bl	8009160 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a34      	ldr	r2, [pc, #208]	@ (8007564 <HAL_DMA_Start_IT+0x1f4>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d04a      	beq.n	800752c <HAL_DMA_Start_IT+0x1bc>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a33      	ldr	r2, [pc, #204]	@ (8007568 <HAL_DMA_Start_IT+0x1f8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d045      	beq.n	800752c <HAL_DMA_Start_IT+0x1bc>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a31      	ldr	r2, [pc, #196]	@ (800756c <HAL_DMA_Start_IT+0x1fc>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d040      	beq.n	800752c <HAL_DMA_Start_IT+0x1bc>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a30      	ldr	r2, [pc, #192]	@ (8007570 <HAL_DMA_Start_IT+0x200>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d03b      	beq.n	800752c <HAL_DMA_Start_IT+0x1bc>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a2e      	ldr	r2, [pc, #184]	@ (8007574 <HAL_DMA_Start_IT+0x204>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d036      	beq.n	800752c <HAL_DMA_Start_IT+0x1bc>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a2d      	ldr	r2, [pc, #180]	@ (8007578 <HAL_DMA_Start_IT+0x208>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d031      	beq.n	800752c <HAL_DMA_Start_IT+0x1bc>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a2b      	ldr	r2, [pc, #172]	@ (800757c <HAL_DMA_Start_IT+0x20c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d02c      	beq.n	800752c <HAL_DMA_Start_IT+0x1bc>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a2a      	ldr	r2, [pc, #168]	@ (8007580 <HAL_DMA_Start_IT+0x210>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d027      	beq.n	800752c <HAL_DMA_Start_IT+0x1bc>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a28      	ldr	r2, [pc, #160]	@ (8007584 <HAL_DMA_Start_IT+0x214>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d022      	beq.n	800752c <HAL_DMA_Start_IT+0x1bc>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a27      	ldr	r2, [pc, #156]	@ (8007588 <HAL_DMA_Start_IT+0x218>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d01d      	beq.n	800752c <HAL_DMA_Start_IT+0x1bc>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a25      	ldr	r2, [pc, #148]	@ (800758c <HAL_DMA_Start_IT+0x21c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d018      	beq.n	800752c <HAL_DMA_Start_IT+0x1bc>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a24      	ldr	r2, [pc, #144]	@ (8007590 <HAL_DMA_Start_IT+0x220>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d013      	beq.n	800752c <HAL_DMA_Start_IT+0x1bc>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a22      	ldr	r2, [pc, #136]	@ (8007594 <HAL_DMA_Start_IT+0x224>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d00e      	beq.n	800752c <HAL_DMA_Start_IT+0x1bc>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a21      	ldr	r2, [pc, #132]	@ (8007598 <HAL_DMA_Start_IT+0x228>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d009      	beq.n	800752c <HAL_DMA_Start_IT+0x1bc>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a1f      	ldr	r2, [pc, #124]	@ (800759c <HAL_DMA_Start_IT+0x22c>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d004      	beq.n	800752c <HAL_DMA_Start_IT+0x1bc>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a1e      	ldr	r2, [pc, #120]	@ (80075a0 <HAL_DMA_Start_IT+0x230>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d101      	bne.n	8007530 <HAL_DMA_Start_IT+0x1c0>
 800752c:	2301      	movs	r3, #1
 800752e:	e000      	b.n	8007532 <HAL_DMA_Start_IT+0x1c2>
 8007530:	2300      	movs	r3, #0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d036      	beq.n	80075a4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f023 021e 	bic.w	r2, r3, #30
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f042 0216 	orr.w	r2, r2, #22
 8007548:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	d03e      	beq.n	80075d0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f042 0208 	orr.w	r2, r2, #8
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	e035      	b.n	80075d0 <HAL_DMA_Start_IT+0x260>
 8007564:	40020010 	.word	0x40020010
 8007568:	40020028 	.word	0x40020028
 800756c:	40020040 	.word	0x40020040
 8007570:	40020058 	.word	0x40020058
 8007574:	40020070 	.word	0x40020070
 8007578:	40020088 	.word	0x40020088
 800757c:	400200a0 	.word	0x400200a0
 8007580:	400200b8 	.word	0x400200b8
 8007584:	40020410 	.word	0x40020410
 8007588:	40020428 	.word	0x40020428
 800758c:	40020440 	.word	0x40020440
 8007590:	40020458 	.word	0x40020458
 8007594:	40020470 	.word	0x40020470
 8007598:	40020488 	.word	0x40020488
 800759c:	400204a0 	.word	0x400204a0
 80075a0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f023 020e 	bic.w	r2, r3, #14
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 020a 	orr.w	r2, r2, #10
 80075b6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d007      	beq.n	80075d0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f042 0204 	orr.w	r2, r2, #4
 80075ce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a83      	ldr	r2, [pc, #524]	@ (80077e4 <HAL_DMA_Start_IT+0x474>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d072      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a82      	ldr	r2, [pc, #520]	@ (80077e8 <HAL_DMA_Start_IT+0x478>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d06d      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a80      	ldr	r2, [pc, #512]	@ (80077ec <HAL_DMA_Start_IT+0x47c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d068      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a7f      	ldr	r2, [pc, #508]	@ (80077f0 <HAL_DMA_Start_IT+0x480>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d063      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a7d      	ldr	r2, [pc, #500]	@ (80077f4 <HAL_DMA_Start_IT+0x484>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d05e      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a7c      	ldr	r2, [pc, #496]	@ (80077f8 <HAL_DMA_Start_IT+0x488>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d059      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a7a      	ldr	r2, [pc, #488]	@ (80077fc <HAL_DMA_Start_IT+0x48c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d054      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a79      	ldr	r2, [pc, #484]	@ (8007800 <HAL_DMA_Start_IT+0x490>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d04f      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a77      	ldr	r2, [pc, #476]	@ (8007804 <HAL_DMA_Start_IT+0x494>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d04a      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a76      	ldr	r2, [pc, #472]	@ (8007808 <HAL_DMA_Start_IT+0x498>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d045      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a74      	ldr	r2, [pc, #464]	@ (800780c <HAL_DMA_Start_IT+0x49c>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d040      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a73      	ldr	r2, [pc, #460]	@ (8007810 <HAL_DMA_Start_IT+0x4a0>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d03b      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a71      	ldr	r2, [pc, #452]	@ (8007814 <HAL_DMA_Start_IT+0x4a4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d036      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a70      	ldr	r2, [pc, #448]	@ (8007818 <HAL_DMA_Start_IT+0x4a8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d031      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a6e      	ldr	r2, [pc, #440]	@ (800781c <HAL_DMA_Start_IT+0x4ac>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d02c      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a6d      	ldr	r2, [pc, #436]	@ (8007820 <HAL_DMA_Start_IT+0x4b0>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d027      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a6b      	ldr	r2, [pc, #428]	@ (8007824 <HAL_DMA_Start_IT+0x4b4>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d022      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a6a      	ldr	r2, [pc, #424]	@ (8007828 <HAL_DMA_Start_IT+0x4b8>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d01d      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a68      	ldr	r2, [pc, #416]	@ (800782c <HAL_DMA_Start_IT+0x4bc>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d018      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a67      	ldr	r2, [pc, #412]	@ (8007830 <HAL_DMA_Start_IT+0x4c0>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d013      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a65      	ldr	r2, [pc, #404]	@ (8007834 <HAL_DMA_Start_IT+0x4c4>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d00e      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a64      	ldr	r2, [pc, #400]	@ (8007838 <HAL_DMA_Start_IT+0x4c8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d009      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a62      	ldr	r2, [pc, #392]	@ (800783c <HAL_DMA_Start_IT+0x4cc>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d004      	beq.n	80076c0 <HAL_DMA_Start_IT+0x350>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a61      	ldr	r2, [pc, #388]	@ (8007840 <HAL_DMA_Start_IT+0x4d0>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d101      	bne.n	80076c4 <HAL_DMA_Start_IT+0x354>
 80076c0:	2301      	movs	r3, #1
 80076c2:	e000      	b.n	80076c6 <HAL_DMA_Start_IT+0x356>
 80076c4:	2300      	movs	r3, #0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d01a      	beq.n	8007700 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d007      	beq.n	80076e8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80076e6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d007      	beq.n	8007700 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80076fe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a37      	ldr	r2, [pc, #220]	@ (80077e4 <HAL_DMA_Start_IT+0x474>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d04a      	beq.n	80077a0 <HAL_DMA_Start_IT+0x430>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a36      	ldr	r2, [pc, #216]	@ (80077e8 <HAL_DMA_Start_IT+0x478>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d045      	beq.n	80077a0 <HAL_DMA_Start_IT+0x430>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a34      	ldr	r2, [pc, #208]	@ (80077ec <HAL_DMA_Start_IT+0x47c>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d040      	beq.n	80077a0 <HAL_DMA_Start_IT+0x430>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a33      	ldr	r2, [pc, #204]	@ (80077f0 <HAL_DMA_Start_IT+0x480>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d03b      	beq.n	80077a0 <HAL_DMA_Start_IT+0x430>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a31      	ldr	r2, [pc, #196]	@ (80077f4 <HAL_DMA_Start_IT+0x484>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d036      	beq.n	80077a0 <HAL_DMA_Start_IT+0x430>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a30      	ldr	r2, [pc, #192]	@ (80077f8 <HAL_DMA_Start_IT+0x488>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d031      	beq.n	80077a0 <HAL_DMA_Start_IT+0x430>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a2e      	ldr	r2, [pc, #184]	@ (80077fc <HAL_DMA_Start_IT+0x48c>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d02c      	beq.n	80077a0 <HAL_DMA_Start_IT+0x430>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a2d      	ldr	r2, [pc, #180]	@ (8007800 <HAL_DMA_Start_IT+0x490>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d027      	beq.n	80077a0 <HAL_DMA_Start_IT+0x430>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a2b      	ldr	r2, [pc, #172]	@ (8007804 <HAL_DMA_Start_IT+0x494>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d022      	beq.n	80077a0 <HAL_DMA_Start_IT+0x430>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a2a      	ldr	r2, [pc, #168]	@ (8007808 <HAL_DMA_Start_IT+0x498>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d01d      	beq.n	80077a0 <HAL_DMA_Start_IT+0x430>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a28      	ldr	r2, [pc, #160]	@ (800780c <HAL_DMA_Start_IT+0x49c>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d018      	beq.n	80077a0 <HAL_DMA_Start_IT+0x430>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a27      	ldr	r2, [pc, #156]	@ (8007810 <HAL_DMA_Start_IT+0x4a0>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d013      	beq.n	80077a0 <HAL_DMA_Start_IT+0x430>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a25      	ldr	r2, [pc, #148]	@ (8007814 <HAL_DMA_Start_IT+0x4a4>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d00e      	beq.n	80077a0 <HAL_DMA_Start_IT+0x430>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a24      	ldr	r2, [pc, #144]	@ (8007818 <HAL_DMA_Start_IT+0x4a8>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d009      	beq.n	80077a0 <HAL_DMA_Start_IT+0x430>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a22      	ldr	r2, [pc, #136]	@ (800781c <HAL_DMA_Start_IT+0x4ac>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d004      	beq.n	80077a0 <HAL_DMA_Start_IT+0x430>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a21      	ldr	r2, [pc, #132]	@ (8007820 <HAL_DMA_Start_IT+0x4b0>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d108      	bne.n	80077b2 <HAL_DMA_Start_IT+0x442>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 0201 	orr.w	r2, r2, #1
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	e012      	b.n	80077d8 <HAL_DMA_Start_IT+0x468>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f042 0201 	orr.w	r2, r2, #1
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	e009      	b.n	80077d8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	40020010 	.word	0x40020010
 80077e8:	40020028 	.word	0x40020028
 80077ec:	40020040 	.word	0x40020040
 80077f0:	40020058 	.word	0x40020058
 80077f4:	40020070 	.word	0x40020070
 80077f8:	40020088 	.word	0x40020088
 80077fc:	400200a0 	.word	0x400200a0
 8007800:	400200b8 	.word	0x400200b8
 8007804:	40020410 	.word	0x40020410
 8007808:	40020428 	.word	0x40020428
 800780c:	40020440 	.word	0x40020440
 8007810:	40020458 	.word	0x40020458
 8007814:	40020470 	.word	0x40020470
 8007818:	40020488 	.word	0x40020488
 800781c:	400204a0 	.word	0x400204a0
 8007820:	400204b8 	.word	0x400204b8
 8007824:	58025408 	.word	0x58025408
 8007828:	5802541c 	.word	0x5802541c
 800782c:	58025430 	.word	0x58025430
 8007830:	58025444 	.word	0x58025444
 8007834:	58025458 	.word	0x58025458
 8007838:	5802546c 	.word	0x5802546c
 800783c:	58025480 	.word	0x58025480
 8007840:	58025494 	.word	0x58025494

08007844 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800784c:	f7ff f88c 	bl	8006968 <HAL_GetTick>
 8007850:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e2dc      	b.n	8007e16 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b02      	cmp	r3, #2
 8007866:	d008      	beq.n	800787a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2280      	movs	r2, #128	@ 0x80
 800786c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e2cd      	b.n	8007e16 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a76      	ldr	r2, [pc, #472]	@ (8007a58 <HAL_DMA_Abort+0x214>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d04a      	beq.n	800791a <HAL_DMA_Abort+0xd6>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a74      	ldr	r2, [pc, #464]	@ (8007a5c <HAL_DMA_Abort+0x218>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d045      	beq.n	800791a <HAL_DMA_Abort+0xd6>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a73      	ldr	r2, [pc, #460]	@ (8007a60 <HAL_DMA_Abort+0x21c>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d040      	beq.n	800791a <HAL_DMA_Abort+0xd6>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a71      	ldr	r2, [pc, #452]	@ (8007a64 <HAL_DMA_Abort+0x220>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d03b      	beq.n	800791a <HAL_DMA_Abort+0xd6>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a70      	ldr	r2, [pc, #448]	@ (8007a68 <HAL_DMA_Abort+0x224>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d036      	beq.n	800791a <HAL_DMA_Abort+0xd6>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a6e      	ldr	r2, [pc, #440]	@ (8007a6c <HAL_DMA_Abort+0x228>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d031      	beq.n	800791a <HAL_DMA_Abort+0xd6>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a6d      	ldr	r2, [pc, #436]	@ (8007a70 <HAL_DMA_Abort+0x22c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d02c      	beq.n	800791a <HAL_DMA_Abort+0xd6>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a6b      	ldr	r2, [pc, #428]	@ (8007a74 <HAL_DMA_Abort+0x230>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d027      	beq.n	800791a <HAL_DMA_Abort+0xd6>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a6a      	ldr	r2, [pc, #424]	@ (8007a78 <HAL_DMA_Abort+0x234>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d022      	beq.n	800791a <HAL_DMA_Abort+0xd6>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a68      	ldr	r2, [pc, #416]	@ (8007a7c <HAL_DMA_Abort+0x238>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d01d      	beq.n	800791a <HAL_DMA_Abort+0xd6>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a67      	ldr	r2, [pc, #412]	@ (8007a80 <HAL_DMA_Abort+0x23c>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d018      	beq.n	800791a <HAL_DMA_Abort+0xd6>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a65      	ldr	r2, [pc, #404]	@ (8007a84 <HAL_DMA_Abort+0x240>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d013      	beq.n	800791a <HAL_DMA_Abort+0xd6>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a64      	ldr	r2, [pc, #400]	@ (8007a88 <HAL_DMA_Abort+0x244>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d00e      	beq.n	800791a <HAL_DMA_Abort+0xd6>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a62      	ldr	r2, [pc, #392]	@ (8007a8c <HAL_DMA_Abort+0x248>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d009      	beq.n	800791a <HAL_DMA_Abort+0xd6>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a61      	ldr	r2, [pc, #388]	@ (8007a90 <HAL_DMA_Abort+0x24c>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d004      	beq.n	800791a <HAL_DMA_Abort+0xd6>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a5f      	ldr	r2, [pc, #380]	@ (8007a94 <HAL_DMA_Abort+0x250>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d101      	bne.n	800791e <HAL_DMA_Abort+0xda>
 800791a:	2301      	movs	r3, #1
 800791c:	e000      	b.n	8007920 <HAL_DMA_Abort+0xdc>
 800791e:	2300      	movs	r3, #0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d013      	beq.n	800794c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f022 021e 	bic.w	r2, r2, #30
 8007932:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	695a      	ldr	r2, [r3, #20]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007942:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	617b      	str	r3, [r7, #20]
 800794a:	e00a      	b.n	8007962 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 020e 	bic.w	r2, r2, #14
 800795a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a3c      	ldr	r2, [pc, #240]	@ (8007a58 <HAL_DMA_Abort+0x214>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d072      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a3a      	ldr	r2, [pc, #232]	@ (8007a5c <HAL_DMA_Abort+0x218>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d06d      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a39      	ldr	r2, [pc, #228]	@ (8007a60 <HAL_DMA_Abort+0x21c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d068      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a37      	ldr	r2, [pc, #220]	@ (8007a64 <HAL_DMA_Abort+0x220>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d063      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a36      	ldr	r2, [pc, #216]	@ (8007a68 <HAL_DMA_Abort+0x224>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d05e      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a34      	ldr	r2, [pc, #208]	@ (8007a6c <HAL_DMA_Abort+0x228>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d059      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a33      	ldr	r2, [pc, #204]	@ (8007a70 <HAL_DMA_Abort+0x22c>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d054      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a31      	ldr	r2, [pc, #196]	@ (8007a74 <HAL_DMA_Abort+0x230>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d04f      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a30      	ldr	r2, [pc, #192]	@ (8007a78 <HAL_DMA_Abort+0x234>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d04a      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a2e      	ldr	r2, [pc, #184]	@ (8007a7c <HAL_DMA_Abort+0x238>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d045      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a2d      	ldr	r2, [pc, #180]	@ (8007a80 <HAL_DMA_Abort+0x23c>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d040      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a2b      	ldr	r2, [pc, #172]	@ (8007a84 <HAL_DMA_Abort+0x240>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d03b      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a2a      	ldr	r2, [pc, #168]	@ (8007a88 <HAL_DMA_Abort+0x244>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d036      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a28      	ldr	r2, [pc, #160]	@ (8007a8c <HAL_DMA_Abort+0x248>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d031      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a27      	ldr	r2, [pc, #156]	@ (8007a90 <HAL_DMA_Abort+0x24c>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d02c      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a25      	ldr	r2, [pc, #148]	@ (8007a94 <HAL_DMA_Abort+0x250>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d027      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a24      	ldr	r2, [pc, #144]	@ (8007a98 <HAL_DMA_Abort+0x254>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d022      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a22      	ldr	r2, [pc, #136]	@ (8007a9c <HAL_DMA_Abort+0x258>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d01d      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a21      	ldr	r2, [pc, #132]	@ (8007aa0 <HAL_DMA_Abort+0x25c>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d018      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a1f      	ldr	r2, [pc, #124]	@ (8007aa4 <HAL_DMA_Abort+0x260>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d013      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8007aa8 <HAL_DMA_Abort+0x264>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d00e      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a1c      	ldr	r2, [pc, #112]	@ (8007aac <HAL_DMA_Abort+0x268>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d009      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a1b      	ldr	r2, [pc, #108]	@ (8007ab0 <HAL_DMA_Abort+0x26c>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d004      	beq.n	8007a52 <HAL_DMA_Abort+0x20e>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a19      	ldr	r2, [pc, #100]	@ (8007ab4 <HAL_DMA_Abort+0x270>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d132      	bne.n	8007ab8 <HAL_DMA_Abort+0x274>
 8007a52:	2301      	movs	r3, #1
 8007a54:	e031      	b.n	8007aba <HAL_DMA_Abort+0x276>
 8007a56:	bf00      	nop
 8007a58:	40020010 	.word	0x40020010
 8007a5c:	40020028 	.word	0x40020028
 8007a60:	40020040 	.word	0x40020040
 8007a64:	40020058 	.word	0x40020058
 8007a68:	40020070 	.word	0x40020070
 8007a6c:	40020088 	.word	0x40020088
 8007a70:	400200a0 	.word	0x400200a0
 8007a74:	400200b8 	.word	0x400200b8
 8007a78:	40020410 	.word	0x40020410
 8007a7c:	40020428 	.word	0x40020428
 8007a80:	40020440 	.word	0x40020440
 8007a84:	40020458 	.word	0x40020458
 8007a88:	40020470 	.word	0x40020470
 8007a8c:	40020488 	.word	0x40020488
 8007a90:	400204a0 	.word	0x400204a0
 8007a94:	400204b8 	.word	0x400204b8
 8007a98:	58025408 	.word	0x58025408
 8007a9c:	5802541c 	.word	0x5802541c
 8007aa0:	58025430 	.word	0x58025430
 8007aa4:	58025444 	.word	0x58025444
 8007aa8:	58025458 	.word	0x58025458
 8007aac:	5802546c 	.word	0x5802546c
 8007ab0:	58025480 	.word	0x58025480
 8007ab4:	58025494 	.word	0x58025494
 8007ab8:	2300      	movs	r3, #0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d007      	beq.n	8007ace <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ac8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007acc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a6d      	ldr	r2, [pc, #436]	@ (8007c88 <HAL_DMA_Abort+0x444>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d04a      	beq.n	8007b6e <HAL_DMA_Abort+0x32a>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a6b      	ldr	r2, [pc, #428]	@ (8007c8c <HAL_DMA_Abort+0x448>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d045      	beq.n	8007b6e <HAL_DMA_Abort+0x32a>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a6a      	ldr	r2, [pc, #424]	@ (8007c90 <HAL_DMA_Abort+0x44c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d040      	beq.n	8007b6e <HAL_DMA_Abort+0x32a>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a68      	ldr	r2, [pc, #416]	@ (8007c94 <HAL_DMA_Abort+0x450>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d03b      	beq.n	8007b6e <HAL_DMA_Abort+0x32a>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a67      	ldr	r2, [pc, #412]	@ (8007c98 <HAL_DMA_Abort+0x454>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d036      	beq.n	8007b6e <HAL_DMA_Abort+0x32a>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a65      	ldr	r2, [pc, #404]	@ (8007c9c <HAL_DMA_Abort+0x458>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d031      	beq.n	8007b6e <HAL_DMA_Abort+0x32a>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a64      	ldr	r2, [pc, #400]	@ (8007ca0 <HAL_DMA_Abort+0x45c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d02c      	beq.n	8007b6e <HAL_DMA_Abort+0x32a>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a62      	ldr	r2, [pc, #392]	@ (8007ca4 <HAL_DMA_Abort+0x460>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d027      	beq.n	8007b6e <HAL_DMA_Abort+0x32a>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a61      	ldr	r2, [pc, #388]	@ (8007ca8 <HAL_DMA_Abort+0x464>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d022      	beq.n	8007b6e <HAL_DMA_Abort+0x32a>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a5f      	ldr	r2, [pc, #380]	@ (8007cac <HAL_DMA_Abort+0x468>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d01d      	beq.n	8007b6e <HAL_DMA_Abort+0x32a>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a5e      	ldr	r2, [pc, #376]	@ (8007cb0 <HAL_DMA_Abort+0x46c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d018      	beq.n	8007b6e <HAL_DMA_Abort+0x32a>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a5c      	ldr	r2, [pc, #368]	@ (8007cb4 <HAL_DMA_Abort+0x470>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d013      	beq.n	8007b6e <HAL_DMA_Abort+0x32a>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a5b      	ldr	r2, [pc, #364]	@ (8007cb8 <HAL_DMA_Abort+0x474>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00e      	beq.n	8007b6e <HAL_DMA_Abort+0x32a>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a59      	ldr	r2, [pc, #356]	@ (8007cbc <HAL_DMA_Abort+0x478>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d009      	beq.n	8007b6e <HAL_DMA_Abort+0x32a>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a58      	ldr	r2, [pc, #352]	@ (8007cc0 <HAL_DMA_Abort+0x47c>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d004      	beq.n	8007b6e <HAL_DMA_Abort+0x32a>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a56      	ldr	r2, [pc, #344]	@ (8007cc4 <HAL_DMA_Abort+0x480>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d108      	bne.n	8007b80 <HAL_DMA_Abort+0x33c>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 0201 	bic.w	r2, r2, #1
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	e007      	b.n	8007b90 <HAL_DMA_Abort+0x34c>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0201 	bic.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007b90:	e013      	b.n	8007bba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b92:	f7fe fee9 	bl	8006968 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b05      	cmp	r3, #5
 8007b9e:	d90c      	bls.n	8007bba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2203      	movs	r2, #3
 8007baa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e12d      	b.n	8007e16 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e5      	bne.n	8007b92 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a2f      	ldr	r2, [pc, #188]	@ (8007c88 <HAL_DMA_Abort+0x444>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d04a      	beq.n	8007c66 <HAL_DMA_Abort+0x422>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8007c8c <HAL_DMA_Abort+0x448>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d045      	beq.n	8007c66 <HAL_DMA_Abort+0x422>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a2c      	ldr	r2, [pc, #176]	@ (8007c90 <HAL_DMA_Abort+0x44c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d040      	beq.n	8007c66 <HAL_DMA_Abort+0x422>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a2a      	ldr	r2, [pc, #168]	@ (8007c94 <HAL_DMA_Abort+0x450>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d03b      	beq.n	8007c66 <HAL_DMA_Abort+0x422>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a29      	ldr	r2, [pc, #164]	@ (8007c98 <HAL_DMA_Abort+0x454>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d036      	beq.n	8007c66 <HAL_DMA_Abort+0x422>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a27      	ldr	r2, [pc, #156]	@ (8007c9c <HAL_DMA_Abort+0x458>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d031      	beq.n	8007c66 <HAL_DMA_Abort+0x422>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a26      	ldr	r2, [pc, #152]	@ (8007ca0 <HAL_DMA_Abort+0x45c>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d02c      	beq.n	8007c66 <HAL_DMA_Abort+0x422>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a24      	ldr	r2, [pc, #144]	@ (8007ca4 <HAL_DMA_Abort+0x460>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d027      	beq.n	8007c66 <HAL_DMA_Abort+0x422>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a23      	ldr	r2, [pc, #140]	@ (8007ca8 <HAL_DMA_Abort+0x464>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d022      	beq.n	8007c66 <HAL_DMA_Abort+0x422>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a21      	ldr	r2, [pc, #132]	@ (8007cac <HAL_DMA_Abort+0x468>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d01d      	beq.n	8007c66 <HAL_DMA_Abort+0x422>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a20      	ldr	r2, [pc, #128]	@ (8007cb0 <HAL_DMA_Abort+0x46c>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d018      	beq.n	8007c66 <HAL_DMA_Abort+0x422>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a1e      	ldr	r2, [pc, #120]	@ (8007cb4 <HAL_DMA_Abort+0x470>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d013      	beq.n	8007c66 <HAL_DMA_Abort+0x422>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a1d      	ldr	r2, [pc, #116]	@ (8007cb8 <HAL_DMA_Abort+0x474>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d00e      	beq.n	8007c66 <HAL_DMA_Abort+0x422>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8007cbc <HAL_DMA_Abort+0x478>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d009      	beq.n	8007c66 <HAL_DMA_Abort+0x422>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a1a      	ldr	r2, [pc, #104]	@ (8007cc0 <HAL_DMA_Abort+0x47c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d004      	beq.n	8007c66 <HAL_DMA_Abort+0x422>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a18      	ldr	r2, [pc, #96]	@ (8007cc4 <HAL_DMA_Abort+0x480>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d101      	bne.n	8007c6a <HAL_DMA_Abort+0x426>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e000      	b.n	8007c6c <HAL_DMA_Abort+0x428>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d02b      	beq.n	8007cc8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c74:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c7a:	f003 031f 	and.w	r3, r3, #31
 8007c7e:	223f      	movs	r2, #63	@ 0x3f
 8007c80:	409a      	lsls	r2, r3
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	609a      	str	r2, [r3, #8]
 8007c86:	e02a      	b.n	8007cde <HAL_DMA_Abort+0x49a>
 8007c88:	40020010 	.word	0x40020010
 8007c8c:	40020028 	.word	0x40020028
 8007c90:	40020040 	.word	0x40020040
 8007c94:	40020058 	.word	0x40020058
 8007c98:	40020070 	.word	0x40020070
 8007c9c:	40020088 	.word	0x40020088
 8007ca0:	400200a0 	.word	0x400200a0
 8007ca4:	400200b8 	.word	0x400200b8
 8007ca8:	40020410 	.word	0x40020410
 8007cac:	40020428 	.word	0x40020428
 8007cb0:	40020440 	.word	0x40020440
 8007cb4:	40020458 	.word	0x40020458
 8007cb8:	40020470 	.word	0x40020470
 8007cbc:	40020488 	.word	0x40020488
 8007cc0:	400204a0 	.word	0x400204a0
 8007cc4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ccc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cd2:	f003 031f 	and.w	r3, r3, #31
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	409a      	lsls	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a4f      	ldr	r2, [pc, #316]	@ (8007e20 <HAL_DMA_Abort+0x5dc>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d072      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a4d      	ldr	r2, [pc, #308]	@ (8007e24 <HAL_DMA_Abort+0x5e0>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d06d      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a4c      	ldr	r2, [pc, #304]	@ (8007e28 <HAL_DMA_Abort+0x5e4>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d068      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a4a      	ldr	r2, [pc, #296]	@ (8007e2c <HAL_DMA_Abort+0x5e8>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d063      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a49      	ldr	r2, [pc, #292]	@ (8007e30 <HAL_DMA_Abort+0x5ec>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d05e      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a47      	ldr	r2, [pc, #284]	@ (8007e34 <HAL_DMA_Abort+0x5f0>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d059      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a46      	ldr	r2, [pc, #280]	@ (8007e38 <HAL_DMA_Abort+0x5f4>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d054      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a44      	ldr	r2, [pc, #272]	@ (8007e3c <HAL_DMA_Abort+0x5f8>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d04f      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a43      	ldr	r2, [pc, #268]	@ (8007e40 <HAL_DMA_Abort+0x5fc>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d04a      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a41      	ldr	r2, [pc, #260]	@ (8007e44 <HAL_DMA_Abort+0x600>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d045      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a40      	ldr	r2, [pc, #256]	@ (8007e48 <HAL_DMA_Abort+0x604>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d040      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a3e      	ldr	r2, [pc, #248]	@ (8007e4c <HAL_DMA_Abort+0x608>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d03b      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a3d      	ldr	r2, [pc, #244]	@ (8007e50 <HAL_DMA_Abort+0x60c>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d036      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a3b      	ldr	r2, [pc, #236]	@ (8007e54 <HAL_DMA_Abort+0x610>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d031      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a3a      	ldr	r2, [pc, #232]	@ (8007e58 <HAL_DMA_Abort+0x614>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d02c      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a38      	ldr	r2, [pc, #224]	@ (8007e5c <HAL_DMA_Abort+0x618>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d027      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a37      	ldr	r2, [pc, #220]	@ (8007e60 <HAL_DMA_Abort+0x61c>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d022      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a35      	ldr	r2, [pc, #212]	@ (8007e64 <HAL_DMA_Abort+0x620>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d01d      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a34      	ldr	r2, [pc, #208]	@ (8007e68 <HAL_DMA_Abort+0x624>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d018      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a32      	ldr	r2, [pc, #200]	@ (8007e6c <HAL_DMA_Abort+0x628>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d013      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a31      	ldr	r2, [pc, #196]	@ (8007e70 <HAL_DMA_Abort+0x62c>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00e      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a2f      	ldr	r2, [pc, #188]	@ (8007e74 <HAL_DMA_Abort+0x630>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d009      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a2e      	ldr	r2, [pc, #184]	@ (8007e78 <HAL_DMA_Abort+0x634>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d004      	beq.n	8007dce <HAL_DMA_Abort+0x58a>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8007e7c <HAL_DMA_Abort+0x638>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d101      	bne.n	8007dd2 <HAL_DMA_Abort+0x58e>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e000      	b.n	8007dd4 <HAL_DMA_Abort+0x590>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d015      	beq.n	8007e04 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007de0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00c      	beq.n	8007e04 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007df4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007df8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007e02:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	40020010 	.word	0x40020010
 8007e24:	40020028 	.word	0x40020028
 8007e28:	40020040 	.word	0x40020040
 8007e2c:	40020058 	.word	0x40020058
 8007e30:	40020070 	.word	0x40020070
 8007e34:	40020088 	.word	0x40020088
 8007e38:	400200a0 	.word	0x400200a0
 8007e3c:	400200b8 	.word	0x400200b8
 8007e40:	40020410 	.word	0x40020410
 8007e44:	40020428 	.word	0x40020428
 8007e48:	40020440 	.word	0x40020440
 8007e4c:	40020458 	.word	0x40020458
 8007e50:	40020470 	.word	0x40020470
 8007e54:	40020488 	.word	0x40020488
 8007e58:	400204a0 	.word	0x400204a0
 8007e5c:	400204b8 	.word	0x400204b8
 8007e60:	58025408 	.word	0x58025408
 8007e64:	5802541c 	.word	0x5802541c
 8007e68:	58025430 	.word	0x58025430
 8007e6c:	58025444 	.word	0x58025444
 8007e70:	58025458 	.word	0x58025458
 8007e74:	5802546c 	.word	0x5802546c
 8007e78:	58025480 	.word	0x58025480
 8007e7c:	58025494 	.word	0x58025494

08007e80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e237      	b.n	8008302 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d004      	beq.n	8007ea8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2280      	movs	r2, #128	@ 0x80
 8007ea2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e22c      	b.n	8008302 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a5c      	ldr	r2, [pc, #368]	@ (8008020 <HAL_DMA_Abort_IT+0x1a0>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d04a      	beq.n	8007f48 <HAL_DMA_Abort_IT+0xc8>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a5b      	ldr	r2, [pc, #364]	@ (8008024 <HAL_DMA_Abort_IT+0x1a4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d045      	beq.n	8007f48 <HAL_DMA_Abort_IT+0xc8>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a59      	ldr	r2, [pc, #356]	@ (8008028 <HAL_DMA_Abort_IT+0x1a8>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d040      	beq.n	8007f48 <HAL_DMA_Abort_IT+0xc8>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a58      	ldr	r2, [pc, #352]	@ (800802c <HAL_DMA_Abort_IT+0x1ac>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d03b      	beq.n	8007f48 <HAL_DMA_Abort_IT+0xc8>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a56      	ldr	r2, [pc, #344]	@ (8008030 <HAL_DMA_Abort_IT+0x1b0>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d036      	beq.n	8007f48 <HAL_DMA_Abort_IT+0xc8>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a55      	ldr	r2, [pc, #340]	@ (8008034 <HAL_DMA_Abort_IT+0x1b4>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d031      	beq.n	8007f48 <HAL_DMA_Abort_IT+0xc8>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a53      	ldr	r2, [pc, #332]	@ (8008038 <HAL_DMA_Abort_IT+0x1b8>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d02c      	beq.n	8007f48 <HAL_DMA_Abort_IT+0xc8>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a52      	ldr	r2, [pc, #328]	@ (800803c <HAL_DMA_Abort_IT+0x1bc>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d027      	beq.n	8007f48 <HAL_DMA_Abort_IT+0xc8>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a50      	ldr	r2, [pc, #320]	@ (8008040 <HAL_DMA_Abort_IT+0x1c0>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d022      	beq.n	8007f48 <HAL_DMA_Abort_IT+0xc8>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a4f      	ldr	r2, [pc, #316]	@ (8008044 <HAL_DMA_Abort_IT+0x1c4>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d01d      	beq.n	8007f48 <HAL_DMA_Abort_IT+0xc8>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a4d      	ldr	r2, [pc, #308]	@ (8008048 <HAL_DMA_Abort_IT+0x1c8>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d018      	beq.n	8007f48 <HAL_DMA_Abort_IT+0xc8>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a4c      	ldr	r2, [pc, #304]	@ (800804c <HAL_DMA_Abort_IT+0x1cc>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d013      	beq.n	8007f48 <HAL_DMA_Abort_IT+0xc8>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a4a      	ldr	r2, [pc, #296]	@ (8008050 <HAL_DMA_Abort_IT+0x1d0>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d00e      	beq.n	8007f48 <HAL_DMA_Abort_IT+0xc8>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a49      	ldr	r2, [pc, #292]	@ (8008054 <HAL_DMA_Abort_IT+0x1d4>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d009      	beq.n	8007f48 <HAL_DMA_Abort_IT+0xc8>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a47      	ldr	r2, [pc, #284]	@ (8008058 <HAL_DMA_Abort_IT+0x1d8>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d004      	beq.n	8007f48 <HAL_DMA_Abort_IT+0xc8>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a46      	ldr	r2, [pc, #280]	@ (800805c <HAL_DMA_Abort_IT+0x1dc>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d101      	bne.n	8007f4c <HAL_DMA_Abort_IT+0xcc>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e000      	b.n	8007f4e <HAL_DMA_Abort_IT+0xce>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 8086 	beq.w	8008060 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2204      	movs	r2, #4
 8007f58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a2f      	ldr	r2, [pc, #188]	@ (8008020 <HAL_DMA_Abort_IT+0x1a0>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d04a      	beq.n	8007ffc <HAL_DMA_Abort_IT+0x17c>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a2e      	ldr	r2, [pc, #184]	@ (8008024 <HAL_DMA_Abort_IT+0x1a4>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d045      	beq.n	8007ffc <HAL_DMA_Abort_IT+0x17c>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a2c      	ldr	r2, [pc, #176]	@ (8008028 <HAL_DMA_Abort_IT+0x1a8>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d040      	beq.n	8007ffc <HAL_DMA_Abort_IT+0x17c>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a2b      	ldr	r2, [pc, #172]	@ (800802c <HAL_DMA_Abort_IT+0x1ac>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d03b      	beq.n	8007ffc <HAL_DMA_Abort_IT+0x17c>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a29      	ldr	r2, [pc, #164]	@ (8008030 <HAL_DMA_Abort_IT+0x1b0>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d036      	beq.n	8007ffc <HAL_DMA_Abort_IT+0x17c>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a28      	ldr	r2, [pc, #160]	@ (8008034 <HAL_DMA_Abort_IT+0x1b4>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d031      	beq.n	8007ffc <HAL_DMA_Abort_IT+0x17c>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a26      	ldr	r2, [pc, #152]	@ (8008038 <HAL_DMA_Abort_IT+0x1b8>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d02c      	beq.n	8007ffc <HAL_DMA_Abort_IT+0x17c>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a25      	ldr	r2, [pc, #148]	@ (800803c <HAL_DMA_Abort_IT+0x1bc>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d027      	beq.n	8007ffc <HAL_DMA_Abort_IT+0x17c>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a23      	ldr	r2, [pc, #140]	@ (8008040 <HAL_DMA_Abort_IT+0x1c0>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d022      	beq.n	8007ffc <HAL_DMA_Abort_IT+0x17c>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a22      	ldr	r2, [pc, #136]	@ (8008044 <HAL_DMA_Abort_IT+0x1c4>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d01d      	beq.n	8007ffc <HAL_DMA_Abort_IT+0x17c>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a20      	ldr	r2, [pc, #128]	@ (8008048 <HAL_DMA_Abort_IT+0x1c8>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d018      	beq.n	8007ffc <HAL_DMA_Abort_IT+0x17c>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a1f      	ldr	r2, [pc, #124]	@ (800804c <HAL_DMA_Abort_IT+0x1cc>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d013      	beq.n	8007ffc <HAL_DMA_Abort_IT+0x17c>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8008050 <HAL_DMA_Abort_IT+0x1d0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d00e      	beq.n	8007ffc <HAL_DMA_Abort_IT+0x17c>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8008054 <HAL_DMA_Abort_IT+0x1d4>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d009      	beq.n	8007ffc <HAL_DMA_Abort_IT+0x17c>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a1a      	ldr	r2, [pc, #104]	@ (8008058 <HAL_DMA_Abort_IT+0x1d8>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d004      	beq.n	8007ffc <HAL_DMA_Abort_IT+0x17c>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a19      	ldr	r2, [pc, #100]	@ (800805c <HAL_DMA_Abort_IT+0x1dc>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d108      	bne.n	800800e <HAL_DMA_Abort_IT+0x18e>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0201 	bic.w	r2, r2, #1
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	e178      	b.n	8008300 <HAL_DMA_Abort_IT+0x480>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0201 	bic.w	r2, r2, #1
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	e16f      	b.n	8008300 <HAL_DMA_Abort_IT+0x480>
 8008020:	40020010 	.word	0x40020010
 8008024:	40020028 	.word	0x40020028
 8008028:	40020040 	.word	0x40020040
 800802c:	40020058 	.word	0x40020058
 8008030:	40020070 	.word	0x40020070
 8008034:	40020088 	.word	0x40020088
 8008038:	400200a0 	.word	0x400200a0
 800803c:	400200b8 	.word	0x400200b8
 8008040:	40020410 	.word	0x40020410
 8008044:	40020428 	.word	0x40020428
 8008048:	40020440 	.word	0x40020440
 800804c:	40020458 	.word	0x40020458
 8008050:	40020470 	.word	0x40020470
 8008054:	40020488 	.word	0x40020488
 8008058:	400204a0 	.word	0x400204a0
 800805c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 020e 	bic.w	r2, r2, #14
 800806e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a6c      	ldr	r2, [pc, #432]	@ (8008228 <HAL_DMA_Abort_IT+0x3a8>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d04a      	beq.n	8008110 <HAL_DMA_Abort_IT+0x290>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a6b      	ldr	r2, [pc, #428]	@ (800822c <HAL_DMA_Abort_IT+0x3ac>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d045      	beq.n	8008110 <HAL_DMA_Abort_IT+0x290>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a69      	ldr	r2, [pc, #420]	@ (8008230 <HAL_DMA_Abort_IT+0x3b0>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d040      	beq.n	8008110 <HAL_DMA_Abort_IT+0x290>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a68      	ldr	r2, [pc, #416]	@ (8008234 <HAL_DMA_Abort_IT+0x3b4>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d03b      	beq.n	8008110 <HAL_DMA_Abort_IT+0x290>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a66      	ldr	r2, [pc, #408]	@ (8008238 <HAL_DMA_Abort_IT+0x3b8>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d036      	beq.n	8008110 <HAL_DMA_Abort_IT+0x290>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a65      	ldr	r2, [pc, #404]	@ (800823c <HAL_DMA_Abort_IT+0x3bc>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d031      	beq.n	8008110 <HAL_DMA_Abort_IT+0x290>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a63      	ldr	r2, [pc, #396]	@ (8008240 <HAL_DMA_Abort_IT+0x3c0>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d02c      	beq.n	8008110 <HAL_DMA_Abort_IT+0x290>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a62      	ldr	r2, [pc, #392]	@ (8008244 <HAL_DMA_Abort_IT+0x3c4>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d027      	beq.n	8008110 <HAL_DMA_Abort_IT+0x290>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a60      	ldr	r2, [pc, #384]	@ (8008248 <HAL_DMA_Abort_IT+0x3c8>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d022      	beq.n	8008110 <HAL_DMA_Abort_IT+0x290>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a5f      	ldr	r2, [pc, #380]	@ (800824c <HAL_DMA_Abort_IT+0x3cc>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d01d      	beq.n	8008110 <HAL_DMA_Abort_IT+0x290>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a5d      	ldr	r2, [pc, #372]	@ (8008250 <HAL_DMA_Abort_IT+0x3d0>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d018      	beq.n	8008110 <HAL_DMA_Abort_IT+0x290>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a5c      	ldr	r2, [pc, #368]	@ (8008254 <HAL_DMA_Abort_IT+0x3d4>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d013      	beq.n	8008110 <HAL_DMA_Abort_IT+0x290>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a5a      	ldr	r2, [pc, #360]	@ (8008258 <HAL_DMA_Abort_IT+0x3d8>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d00e      	beq.n	8008110 <HAL_DMA_Abort_IT+0x290>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a59      	ldr	r2, [pc, #356]	@ (800825c <HAL_DMA_Abort_IT+0x3dc>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d009      	beq.n	8008110 <HAL_DMA_Abort_IT+0x290>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a57      	ldr	r2, [pc, #348]	@ (8008260 <HAL_DMA_Abort_IT+0x3e0>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d004      	beq.n	8008110 <HAL_DMA_Abort_IT+0x290>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a56      	ldr	r2, [pc, #344]	@ (8008264 <HAL_DMA_Abort_IT+0x3e4>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d108      	bne.n	8008122 <HAL_DMA_Abort_IT+0x2a2>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f022 0201 	bic.w	r2, r2, #1
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	e007      	b.n	8008132 <HAL_DMA_Abort_IT+0x2b2>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 0201 	bic.w	r2, r2, #1
 8008130:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a3c      	ldr	r2, [pc, #240]	@ (8008228 <HAL_DMA_Abort_IT+0x3a8>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d072      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a3a      	ldr	r2, [pc, #232]	@ (800822c <HAL_DMA_Abort_IT+0x3ac>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d06d      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a39      	ldr	r2, [pc, #228]	@ (8008230 <HAL_DMA_Abort_IT+0x3b0>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d068      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a37      	ldr	r2, [pc, #220]	@ (8008234 <HAL_DMA_Abort_IT+0x3b4>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d063      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a36      	ldr	r2, [pc, #216]	@ (8008238 <HAL_DMA_Abort_IT+0x3b8>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d05e      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a34      	ldr	r2, [pc, #208]	@ (800823c <HAL_DMA_Abort_IT+0x3bc>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d059      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a33      	ldr	r2, [pc, #204]	@ (8008240 <HAL_DMA_Abort_IT+0x3c0>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d054      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a31      	ldr	r2, [pc, #196]	@ (8008244 <HAL_DMA_Abort_IT+0x3c4>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d04f      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a30      	ldr	r2, [pc, #192]	@ (8008248 <HAL_DMA_Abort_IT+0x3c8>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d04a      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a2e      	ldr	r2, [pc, #184]	@ (800824c <HAL_DMA_Abort_IT+0x3cc>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d045      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a2d      	ldr	r2, [pc, #180]	@ (8008250 <HAL_DMA_Abort_IT+0x3d0>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d040      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a2b      	ldr	r2, [pc, #172]	@ (8008254 <HAL_DMA_Abort_IT+0x3d4>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d03b      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a2a      	ldr	r2, [pc, #168]	@ (8008258 <HAL_DMA_Abort_IT+0x3d8>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d036      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a28      	ldr	r2, [pc, #160]	@ (800825c <HAL_DMA_Abort_IT+0x3dc>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d031      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a27      	ldr	r2, [pc, #156]	@ (8008260 <HAL_DMA_Abort_IT+0x3e0>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d02c      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a25      	ldr	r2, [pc, #148]	@ (8008264 <HAL_DMA_Abort_IT+0x3e4>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d027      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a24      	ldr	r2, [pc, #144]	@ (8008268 <HAL_DMA_Abort_IT+0x3e8>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d022      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a22      	ldr	r2, [pc, #136]	@ (800826c <HAL_DMA_Abort_IT+0x3ec>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d01d      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a21      	ldr	r2, [pc, #132]	@ (8008270 <HAL_DMA_Abort_IT+0x3f0>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d018      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a1f      	ldr	r2, [pc, #124]	@ (8008274 <HAL_DMA_Abort_IT+0x3f4>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d013      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a1e      	ldr	r2, [pc, #120]	@ (8008278 <HAL_DMA_Abort_IT+0x3f8>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d00e      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a1c      	ldr	r2, [pc, #112]	@ (800827c <HAL_DMA_Abort_IT+0x3fc>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d009      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a1b      	ldr	r2, [pc, #108]	@ (8008280 <HAL_DMA_Abort_IT+0x400>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d004      	beq.n	8008222 <HAL_DMA_Abort_IT+0x3a2>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a19      	ldr	r2, [pc, #100]	@ (8008284 <HAL_DMA_Abort_IT+0x404>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d132      	bne.n	8008288 <HAL_DMA_Abort_IT+0x408>
 8008222:	2301      	movs	r3, #1
 8008224:	e031      	b.n	800828a <HAL_DMA_Abort_IT+0x40a>
 8008226:	bf00      	nop
 8008228:	40020010 	.word	0x40020010
 800822c:	40020028 	.word	0x40020028
 8008230:	40020040 	.word	0x40020040
 8008234:	40020058 	.word	0x40020058
 8008238:	40020070 	.word	0x40020070
 800823c:	40020088 	.word	0x40020088
 8008240:	400200a0 	.word	0x400200a0
 8008244:	400200b8 	.word	0x400200b8
 8008248:	40020410 	.word	0x40020410
 800824c:	40020428 	.word	0x40020428
 8008250:	40020440 	.word	0x40020440
 8008254:	40020458 	.word	0x40020458
 8008258:	40020470 	.word	0x40020470
 800825c:	40020488 	.word	0x40020488
 8008260:	400204a0 	.word	0x400204a0
 8008264:	400204b8 	.word	0x400204b8
 8008268:	58025408 	.word	0x58025408
 800826c:	5802541c 	.word	0x5802541c
 8008270:	58025430 	.word	0x58025430
 8008274:	58025444 	.word	0x58025444
 8008278:	58025458 	.word	0x58025458
 800827c:	5802546c 	.word	0x5802546c
 8008280:	58025480 	.word	0x58025480
 8008284:	58025494 	.word	0x58025494
 8008288:	2300      	movs	r3, #0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d028      	beq.n	80082e0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008298:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800829c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082a2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082a8:	f003 031f 	and.w	r3, r3, #31
 80082ac:	2201      	movs	r2, #1
 80082ae:	409a      	lsls	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80082bc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00c      	beq.n	80082e0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80082d4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80082de:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop

0800830c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b08a      	sub	sp, #40	@ 0x28
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008318:	4b67      	ldr	r3, [pc, #412]	@ (80084b8 <HAL_DMA_IRQHandler+0x1ac>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a67      	ldr	r2, [pc, #412]	@ (80084bc <HAL_DMA_IRQHandler+0x1b0>)
 800831e:	fba2 2303 	umull	r2, r3, r2, r3
 8008322:	0a9b      	lsrs	r3, r3, #10
 8008324:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800832a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008330:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a5f      	ldr	r2, [pc, #380]	@ (80084c0 <HAL_DMA_IRQHandler+0x1b4>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d04a      	beq.n	80083de <HAL_DMA_IRQHandler+0xd2>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a5d      	ldr	r2, [pc, #372]	@ (80084c4 <HAL_DMA_IRQHandler+0x1b8>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d045      	beq.n	80083de <HAL_DMA_IRQHandler+0xd2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a5c      	ldr	r2, [pc, #368]	@ (80084c8 <HAL_DMA_IRQHandler+0x1bc>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d040      	beq.n	80083de <HAL_DMA_IRQHandler+0xd2>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a5a      	ldr	r2, [pc, #360]	@ (80084cc <HAL_DMA_IRQHandler+0x1c0>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d03b      	beq.n	80083de <HAL_DMA_IRQHandler+0xd2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a59      	ldr	r2, [pc, #356]	@ (80084d0 <HAL_DMA_IRQHandler+0x1c4>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d036      	beq.n	80083de <HAL_DMA_IRQHandler+0xd2>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a57      	ldr	r2, [pc, #348]	@ (80084d4 <HAL_DMA_IRQHandler+0x1c8>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d031      	beq.n	80083de <HAL_DMA_IRQHandler+0xd2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a56      	ldr	r2, [pc, #344]	@ (80084d8 <HAL_DMA_IRQHandler+0x1cc>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d02c      	beq.n	80083de <HAL_DMA_IRQHandler+0xd2>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a54      	ldr	r2, [pc, #336]	@ (80084dc <HAL_DMA_IRQHandler+0x1d0>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d027      	beq.n	80083de <HAL_DMA_IRQHandler+0xd2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a53      	ldr	r2, [pc, #332]	@ (80084e0 <HAL_DMA_IRQHandler+0x1d4>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d022      	beq.n	80083de <HAL_DMA_IRQHandler+0xd2>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a51      	ldr	r2, [pc, #324]	@ (80084e4 <HAL_DMA_IRQHandler+0x1d8>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d01d      	beq.n	80083de <HAL_DMA_IRQHandler+0xd2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a50      	ldr	r2, [pc, #320]	@ (80084e8 <HAL_DMA_IRQHandler+0x1dc>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d018      	beq.n	80083de <HAL_DMA_IRQHandler+0xd2>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a4e      	ldr	r2, [pc, #312]	@ (80084ec <HAL_DMA_IRQHandler+0x1e0>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d013      	beq.n	80083de <HAL_DMA_IRQHandler+0xd2>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a4d      	ldr	r2, [pc, #308]	@ (80084f0 <HAL_DMA_IRQHandler+0x1e4>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d00e      	beq.n	80083de <HAL_DMA_IRQHandler+0xd2>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a4b      	ldr	r2, [pc, #300]	@ (80084f4 <HAL_DMA_IRQHandler+0x1e8>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d009      	beq.n	80083de <HAL_DMA_IRQHandler+0xd2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a4a      	ldr	r2, [pc, #296]	@ (80084f8 <HAL_DMA_IRQHandler+0x1ec>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d004      	beq.n	80083de <HAL_DMA_IRQHandler+0xd2>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a48      	ldr	r2, [pc, #288]	@ (80084fc <HAL_DMA_IRQHandler+0x1f0>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d101      	bne.n	80083e2 <HAL_DMA_IRQHandler+0xd6>
 80083de:	2301      	movs	r3, #1
 80083e0:	e000      	b.n	80083e4 <HAL_DMA_IRQHandler+0xd8>
 80083e2:	2300      	movs	r3, #0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 842b 	beq.w	8008c40 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083ee:	f003 031f 	and.w	r3, r3, #31
 80083f2:	2208      	movs	r2, #8
 80083f4:	409a      	lsls	r2, r3
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	4013      	ands	r3, r2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 80a2 	beq.w	8008544 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a2e      	ldr	r2, [pc, #184]	@ (80084c0 <HAL_DMA_IRQHandler+0x1b4>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d04a      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x194>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a2d      	ldr	r2, [pc, #180]	@ (80084c4 <HAL_DMA_IRQHandler+0x1b8>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d045      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x194>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a2b      	ldr	r2, [pc, #172]	@ (80084c8 <HAL_DMA_IRQHandler+0x1bc>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d040      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x194>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a2a      	ldr	r2, [pc, #168]	@ (80084cc <HAL_DMA_IRQHandler+0x1c0>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d03b      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x194>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a28      	ldr	r2, [pc, #160]	@ (80084d0 <HAL_DMA_IRQHandler+0x1c4>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d036      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x194>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a27      	ldr	r2, [pc, #156]	@ (80084d4 <HAL_DMA_IRQHandler+0x1c8>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d031      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x194>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a25      	ldr	r2, [pc, #148]	@ (80084d8 <HAL_DMA_IRQHandler+0x1cc>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d02c      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x194>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a24      	ldr	r2, [pc, #144]	@ (80084dc <HAL_DMA_IRQHandler+0x1d0>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d027      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x194>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a22      	ldr	r2, [pc, #136]	@ (80084e0 <HAL_DMA_IRQHandler+0x1d4>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d022      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x194>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a21      	ldr	r2, [pc, #132]	@ (80084e4 <HAL_DMA_IRQHandler+0x1d8>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d01d      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x194>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a1f      	ldr	r2, [pc, #124]	@ (80084e8 <HAL_DMA_IRQHandler+0x1dc>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d018      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x194>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a1e      	ldr	r2, [pc, #120]	@ (80084ec <HAL_DMA_IRQHandler+0x1e0>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d013      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x194>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a1c      	ldr	r2, [pc, #112]	@ (80084f0 <HAL_DMA_IRQHandler+0x1e4>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d00e      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x194>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a1b      	ldr	r2, [pc, #108]	@ (80084f4 <HAL_DMA_IRQHandler+0x1e8>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d009      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x194>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a19      	ldr	r2, [pc, #100]	@ (80084f8 <HAL_DMA_IRQHandler+0x1ec>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d004      	beq.n	80084a0 <HAL_DMA_IRQHandler+0x194>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a18      	ldr	r2, [pc, #96]	@ (80084fc <HAL_DMA_IRQHandler+0x1f0>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d12f      	bne.n	8008500 <HAL_DMA_IRQHandler+0x1f4>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0304 	and.w	r3, r3, #4
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	bf14      	ite	ne
 80084ae:	2301      	movne	r3, #1
 80084b0:	2300      	moveq	r3, #0
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	e02e      	b.n	8008514 <HAL_DMA_IRQHandler+0x208>
 80084b6:	bf00      	nop
 80084b8:	240001dc 	.word	0x240001dc
 80084bc:	1b4e81b5 	.word	0x1b4e81b5
 80084c0:	40020010 	.word	0x40020010
 80084c4:	40020028 	.word	0x40020028
 80084c8:	40020040 	.word	0x40020040
 80084cc:	40020058 	.word	0x40020058
 80084d0:	40020070 	.word	0x40020070
 80084d4:	40020088 	.word	0x40020088
 80084d8:	400200a0 	.word	0x400200a0
 80084dc:	400200b8 	.word	0x400200b8
 80084e0:	40020410 	.word	0x40020410
 80084e4:	40020428 	.word	0x40020428
 80084e8:	40020440 	.word	0x40020440
 80084ec:	40020458 	.word	0x40020458
 80084f0:	40020470 	.word	0x40020470
 80084f4:	40020488 	.word	0x40020488
 80084f8:	400204a0 	.word	0x400204a0
 80084fc:	400204b8 	.word	0x400204b8
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0308 	and.w	r3, r3, #8
 800850a:	2b00      	cmp	r3, #0
 800850c:	bf14      	ite	ne
 800850e:	2301      	movne	r3, #1
 8008510:	2300      	moveq	r3, #0
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	d015      	beq.n	8008544 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f022 0204 	bic.w	r2, r2, #4
 8008526:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800852c:	f003 031f 	and.w	r3, r3, #31
 8008530:	2208      	movs	r2, #8
 8008532:	409a      	lsls	r2, r3
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800853c:	f043 0201 	orr.w	r2, r3, #1
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008548:	f003 031f 	and.w	r3, r3, #31
 800854c:	69ba      	ldr	r2, [r7, #24]
 800854e:	fa22 f303 	lsr.w	r3, r2, r3
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	2b00      	cmp	r3, #0
 8008558:	d06e      	beq.n	8008638 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a69      	ldr	r2, [pc, #420]	@ (8008704 <HAL_DMA_IRQHandler+0x3f8>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d04a      	beq.n	80085fa <HAL_DMA_IRQHandler+0x2ee>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a67      	ldr	r2, [pc, #412]	@ (8008708 <HAL_DMA_IRQHandler+0x3fc>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d045      	beq.n	80085fa <HAL_DMA_IRQHandler+0x2ee>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a66      	ldr	r2, [pc, #408]	@ (800870c <HAL_DMA_IRQHandler+0x400>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d040      	beq.n	80085fa <HAL_DMA_IRQHandler+0x2ee>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a64      	ldr	r2, [pc, #400]	@ (8008710 <HAL_DMA_IRQHandler+0x404>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d03b      	beq.n	80085fa <HAL_DMA_IRQHandler+0x2ee>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a63      	ldr	r2, [pc, #396]	@ (8008714 <HAL_DMA_IRQHandler+0x408>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d036      	beq.n	80085fa <HAL_DMA_IRQHandler+0x2ee>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a61      	ldr	r2, [pc, #388]	@ (8008718 <HAL_DMA_IRQHandler+0x40c>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d031      	beq.n	80085fa <HAL_DMA_IRQHandler+0x2ee>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a60      	ldr	r2, [pc, #384]	@ (800871c <HAL_DMA_IRQHandler+0x410>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d02c      	beq.n	80085fa <HAL_DMA_IRQHandler+0x2ee>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a5e      	ldr	r2, [pc, #376]	@ (8008720 <HAL_DMA_IRQHandler+0x414>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d027      	beq.n	80085fa <HAL_DMA_IRQHandler+0x2ee>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a5d      	ldr	r2, [pc, #372]	@ (8008724 <HAL_DMA_IRQHandler+0x418>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d022      	beq.n	80085fa <HAL_DMA_IRQHandler+0x2ee>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a5b      	ldr	r2, [pc, #364]	@ (8008728 <HAL_DMA_IRQHandler+0x41c>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d01d      	beq.n	80085fa <HAL_DMA_IRQHandler+0x2ee>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a5a      	ldr	r2, [pc, #360]	@ (800872c <HAL_DMA_IRQHandler+0x420>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d018      	beq.n	80085fa <HAL_DMA_IRQHandler+0x2ee>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a58      	ldr	r2, [pc, #352]	@ (8008730 <HAL_DMA_IRQHandler+0x424>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d013      	beq.n	80085fa <HAL_DMA_IRQHandler+0x2ee>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a57      	ldr	r2, [pc, #348]	@ (8008734 <HAL_DMA_IRQHandler+0x428>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d00e      	beq.n	80085fa <HAL_DMA_IRQHandler+0x2ee>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a55      	ldr	r2, [pc, #340]	@ (8008738 <HAL_DMA_IRQHandler+0x42c>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d009      	beq.n	80085fa <HAL_DMA_IRQHandler+0x2ee>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a54      	ldr	r2, [pc, #336]	@ (800873c <HAL_DMA_IRQHandler+0x430>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d004      	beq.n	80085fa <HAL_DMA_IRQHandler+0x2ee>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a52      	ldr	r2, [pc, #328]	@ (8008740 <HAL_DMA_IRQHandler+0x434>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d10a      	bne.n	8008610 <HAL_DMA_IRQHandler+0x304>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008604:	2b00      	cmp	r3, #0
 8008606:	bf14      	ite	ne
 8008608:	2301      	movne	r3, #1
 800860a:	2300      	moveq	r3, #0
 800860c:	b2db      	uxtb	r3, r3
 800860e:	e003      	b.n	8008618 <HAL_DMA_IRQHandler+0x30c>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2300      	movs	r3, #0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00d      	beq.n	8008638 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008620:	f003 031f 	and.w	r3, r3, #31
 8008624:	2201      	movs	r2, #1
 8008626:	409a      	lsls	r2, r3
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008630:	f043 0202 	orr.w	r2, r3, #2
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800863c:	f003 031f 	and.w	r3, r3, #31
 8008640:	2204      	movs	r2, #4
 8008642:	409a      	lsls	r2, r3
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	4013      	ands	r3, r2
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 808f 	beq.w	800876c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a2c      	ldr	r2, [pc, #176]	@ (8008704 <HAL_DMA_IRQHandler+0x3f8>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d04a      	beq.n	80086ee <HAL_DMA_IRQHandler+0x3e2>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a2a      	ldr	r2, [pc, #168]	@ (8008708 <HAL_DMA_IRQHandler+0x3fc>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d045      	beq.n	80086ee <HAL_DMA_IRQHandler+0x3e2>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a29      	ldr	r2, [pc, #164]	@ (800870c <HAL_DMA_IRQHandler+0x400>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d040      	beq.n	80086ee <HAL_DMA_IRQHandler+0x3e2>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a27      	ldr	r2, [pc, #156]	@ (8008710 <HAL_DMA_IRQHandler+0x404>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d03b      	beq.n	80086ee <HAL_DMA_IRQHandler+0x3e2>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a26      	ldr	r2, [pc, #152]	@ (8008714 <HAL_DMA_IRQHandler+0x408>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d036      	beq.n	80086ee <HAL_DMA_IRQHandler+0x3e2>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a24      	ldr	r2, [pc, #144]	@ (8008718 <HAL_DMA_IRQHandler+0x40c>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d031      	beq.n	80086ee <HAL_DMA_IRQHandler+0x3e2>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a23      	ldr	r2, [pc, #140]	@ (800871c <HAL_DMA_IRQHandler+0x410>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d02c      	beq.n	80086ee <HAL_DMA_IRQHandler+0x3e2>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a21      	ldr	r2, [pc, #132]	@ (8008720 <HAL_DMA_IRQHandler+0x414>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d027      	beq.n	80086ee <HAL_DMA_IRQHandler+0x3e2>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a20      	ldr	r2, [pc, #128]	@ (8008724 <HAL_DMA_IRQHandler+0x418>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d022      	beq.n	80086ee <HAL_DMA_IRQHandler+0x3e2>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a1e      	ldr	r2, [pc, #120]	@ (8008728 <HAL_DMA_IRQHandler+0x41c>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d01d      	beq.n	80086ee <HAL_DMA_IRQHandler+0x3e2>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a1d      	ldr	r2, [pc, #116]	@ (800872c <HAL_DMA_IRQHandler+0x420>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d018      	beq.n	80086ee <HAL_DMA_IRQHandler+0x3e2>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a1b      	ldr	r2, [pc, #108]	@ (8008730 <HAL_DMA_IRQHandler+0x424>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d013      	beq.n	80086ee <HAL_DMA_IRQHandler+0x3e2>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a1a      	ldr	r2, [pc, #104]	@ (8008734 <HAL_DMA_IRQHandler+0x428>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d00e      	beq.n	80086ee <HAL_DMA_IRQHandler+0x3e2>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a18      	ldr	r2, [pc, #96]	@ (8008738 <HAL_DMA_IRQHandler+0x42c>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d009      	beq.n	80086ee <HAL_DMA_IRQHandler+0x3e2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a17      	ldr	r2, [pc, #92]	@ (800873c <HAL_DMA_IRQHandler+0x430>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d004      	beq.n	80086ee <HAL_DMA_IRQHandler+0x3e2>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a15      	ldr	r2, [pc, #84]	@ (8008740 <HAL_DMA_IRQHandler+0x434>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d12a      	bne.n	8008744 <HAL_DMA_IRQHandler+0x438>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	bf14      	ite	ne
 80086fc:	2301      	movne	r3, #1
 80086fe:	2300      	moveq	r3, #0
 8008700:	b2db      	uxtb	r3, r3
 8008702:	e023      	b.n	800874c <HAL_DMA_IRQHandler+0x440>
 8008704:	40020010 	.word	0x40020010
 8008708:	40020028 	.word	0x40020028
 800870c:	40020040 	.word	0x40020040
 8008710:	40020058 	.word	0x40020058
 8008714:	40020070 	.word	0x40020070
 8008718:	40020088 	.word	0x40020088
 800871c:	400200a0 	.word	0x400200a0
 8008720:	400200b8 	.word	0x400200b8
 8008724:	40020410 	.word	0x40020410
 8008728:	40020428 	.word	0x40020428
 800872c:	40020440 	.word	0x40020440
 8008730:	40020458 	.word	0x40020458
 8008734:	40020470 	.word	0x40020470
 8008738:	40020488 	.word	0x40020488
 800873c:	400204a0 	.word	0x400204a0
 8008740:	400204b8 	.word	0x400204b8
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2300      	movs	r3, #0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00d      	beq.n	800876c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008754:	f003 031f 	and.w	r3, r3, #31
 8008758:	2204      	movs	r2, #4
 800875a:	409a      	lsls	r2, r3
 800875c:	6a3b      	ldr	r3, [r7, #32]
 800875e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008764:	f043 0204 	orr.w	r2, r3, #4
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008770:	f003 031f 	and.w	r3, r3, #31
 8008774:	2210      	movs	r2, #16
 8008776:	409a      	lsls	r2, r3
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	4013      	ands	r3, r2
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 80a6 	beq.w	80088ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a85      	ldr	r2, [pc, #532]	@ (800899c <HAL_DMA_IRQHandler+0x690>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d04a      	beq.n	8008822 <HAL_DMA_IRQHandler+0x516>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a83      	ldr	r2, [pc, #524]	@ (80089a0 <HAL_DMA_IRQHandler+0x694>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d045      	beq.n	8008822 <HAL_DMA_IRQHandler+0x516>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a82      	ldr	r2, [pc, #520]	@ (80089a4 <HAL_DMA_IRQHandler+0x698>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d040      	beq.n	8008822 <HAL_DMA_IRQHandler+0x516>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a80      	ldr	r2, [pc, #512]	@ (80089a8 <HAL_DMA_IRQHandler+0x69c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d03b      	beq.n	8008822 <HAL_DMA_IRQHandler+0x516>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a7f      	ldr	r2, [pc, #508]	@ (80089ac <HAL_DMA_IRQHandler+0x6a0>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d036      	beq.n	8008822 <HAL_DMA_IRQHandler+0x516>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a7d      	ldr	r2, [pc, #500]	@ (80089b0 <HAL_DMA_IRQHandler+0x6a4>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d031      	beq.n	8008822 <HAL_DMA_IRQHandler+0x516>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a7c      	ldr	r2, [pc, #496]	@ (80089b4 <HAL_DMA_IRQHandler+0x6a8>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d02c      	beq.n	8008822 <HAL_DMA_IRQHandler+0x516>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a7a      	ldr	r2, [pc, #488]	@ (80089b8 <HAL_DMA_IRQHandler+0x6ac>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d027      	beq.n	8008822 <HAL_DMA_IRQHandler+0x516>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a79      	ldr	r2, [pc, #484]	@ (80089bc <HAL_DMA_IRQHandler+0x6b0>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d022      	beq.n	8008822 <HAL_DMA_IRQHandler+0x516>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a77      	ldr	r2, [pc, #476]	@ (80089c0 <HAL_DMA_IRQHandler+0x6b4>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d01d      	beq.n	8008822 <HAL_DMA_IRQHandler+0x516>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a76      	ldr	r2, [pc, #472]	@ (80089c4 <HAL_DMA_IRQHandler+0x6b8>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d018      	beq.n	8008822 <HAL_DMA_IRQHandler+0x516>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a74      	ldr	r2, [pc, #464]	@ (80089c8 <HAL_DMA_IRQHandler+0x6bc>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d013      	beq.n	8008822 <HAL_DMA_IRQHandler+0x516>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a73      	ldr	r2, [pc, #460]	@ (80089cc <HAL_DMA_IRQHandler+0x6c0>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d00e      	beq.n	8008822 <HAL_DMA_IRQHandler+0x516>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a71      	ldr	r2, [pc, #452]	@ (80089d0 <HAL_DMA_IRQHandler+0x6c4>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d009      	beq.n	8008822 <HAL_DMA_IRQHandler+0x516>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a70      	ldr	r2, [pc, #448]	@ (80089d4 <HAL_DMA_IRQHandler+0x6c8>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d004      	beq.n	8008822 <HAL_DMA_IRQHandler+0x516>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a6e      	ldr	r2, [pc, #440]	@ (80089d8 <HAL_DMA_IRQHandler+0x6cc>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d10a      	bne.n	8008838 <HAL_DMA_IRQHandler+0x52c>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0308 	and.w	r3, r3, #8
 800882c:	2b00      	cmp	r3, #0
 800882e:	bf14      	ite	ne
 8008830:	2301      	movne	r3, #1
 8008832:	2300      	moveq	r3, #0
 8008834:	b2db      	uxtb	r3, r3
 8008836:	e009      	b.n	800884c <HAL_DMA_IRQHandler+0x540>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0304 	and.w	r3, r3, #4
 8008842:	2b00      	cmp	r3, #0
 8008844:	bf14      	ite	ne
 8008846:	2301      	movne	r3, #1
 8008848:	2300      	moveq	r3, #0
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	d03e      	beq.n	80088ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008854:	f003 031f 	and.w	r3, r3, #31
 8008858:	2210      	movs	r2, #16
 800885a:	409a      	lsls	r2, r3
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d018      	beq.n	80088a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d108      	bne.n	800888e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008880:	2b00      	cmp	r3, #0
 8008882:	d024      	beq.n	80088ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	4798      	blx	r3
 800888c:	e01f      	b.n	80088ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008892:	2b00      	cmp	r3, #0
 8008894:	d01b      	beq.n	80088ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	4798      	blx	r3
 800889e:	e016      	b.n	80088ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d107      	bne.n	80088be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 0208 	bic.w	r2, r2, #8
 80088bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d003      	beq.n	80088ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088d2:	f003 031f 	and.w	r3, r3, #31
 80088d6:	2220      	movs	r2, #32
 80088d8:	409a      	lsls	r2, r3
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	4013      	ands	r3, r2
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f000 8110 	beq.w	8008b04 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a2c      	ldr	r2, [pc, #176]	@ (800899c <HAL_DMA_IRQHandler+0x690>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d04a      	beq.n	8008984 <HAL_DMA_IRQHandler+0x678>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a2b      	ldr	r2, [pc, #172]	@ (80089a0 <HAL_DMA_IRQHandler+0x694>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d045      	beq.n	8008984 <HAL_DMA_IRQHandler+0x678>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a29      	ldr	r2, [pc, #164]	@ (80089a4 <HAL_DMA_IRQHandler+0x698>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d040      	beq.n	8008984 <HAL_DMA_IRQHandler+0x678>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a28      	ldr	r2, [pc, #160]	@ (80089a8 <HAL_DMA_IRQHandler+0x69c>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d03b      	beq.n	8008984 <HAL_DMA_IRQHandler+0x678>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a26      	ldr	r2, [pc, #152]	@ (80089ac <HAL_DMA_IRQHandler+0x6a0>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d036      	beq.n	8008984 <HAL_DMA_IRQHandler+0x678>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a25      	ldr	r2, [pc, #148]	@ (80089b0 <HAL_DMA_IRQHandler+0x6a4>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d031      	beq.n	8008984 <HAL_DMA_IRQHandler+0x678>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a23      	ldr	r2, [pc, #140]	@ (80089b4 <HAL_DMA_IRQHandler+0x6a8>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d02c      	beq.n	8008984 <HAL_DMA_IRQHandler+0x678>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a22      	ldr	r2, [pc, #136]	@ (80089b8 <HAL_DMA_IRQHandler+0x6ac>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d027      	beq.n	8008984 <HAL_DMA_IRQHandler+0x678>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a20      	ldr	r2, [pc, #128]	@ (80089bc <HAL_DMA_IRQHandler+0x6b0>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d022      	beq.n	8008984 <HAL_DMA_IRQHandler+0x678>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a1f      	ldr	r2, [pc, #124]	@ (80089c0 <HAL_DMA_IRQHandler+0x6b4>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d01d      	beq.n	8008984 <HAL_DMA_IRQHandler+0x678>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a1d      	ldr	r2, [pc, #116]	@ (80089c4 <HAL_DMA_IRQHandler+0x6b8>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d018      	beq.n	8008984 <HAL_DMA_IRQHandler+0x678>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a1c      	ldr	r2, [pc, #112]	@ (80089c8 <HAL_DMA_IRQHandler+0x6bc>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d013      	beq.n	8008984 <HAL_DMA_IRQHandler+0x678>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a1a      	ldr	r2, [pc, #104]	@ (80089cc <HAL_DMA_IRQHandler+0x6c0>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d00e      	beq.n	8008984 <HAL_DMA_IRQHandler+0x678>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a19      	ldr	r2, [pc, #100]	@ (80089d0 <HAL_DMA_IRQHandler+0x6c4>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d009      	beq.n	8008984 <HAL_DMA_IRQHandler+0x678>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a17      	ldr	r2, [pc, #92]	@ (80089d4 <HAL_DMA_IRQHandler+0x6c8>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d004      	beq.n	8008984 <HAL_DMA_IRQHandler+0x678>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a16      	ldr	r2, [pc, #88]	@ (80089d8 <HAL_DMA_IRQHandler+0x6cc>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d12b      	bne.n	80089dc <HAL_DMA_IRQHandler+0x6d0>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0310 	and.w	r3, r3, #16
 800898e:	2b00      	cmp	r3, #0
 8008990:	bf14      	ite	ne
 8008992:	2301      	movne	r3, #1
 8008994:	2300      	moveq	r3, #0
 8008996:	b2db      	uxtb	r3, r3
 8008998:	e02a      	b.n	80089f0 <HAL_DMA_IRQHandler+0x6e4>
 800899a:	bf00      	nop
 800899c:	40020010 	.word	0x40020010
 80089a0:	40020028 	.word	0x40020028
 80089a4:	40020040 	.word	0x40020040
 80089a8:	40020058 	.word	0x40020058
 80089ac:	40020070 	.word	0x40020070
 80089b0:	40020088 	.word	0x40020088
 80089b4:	400200a0 	.word	0x400200a0
 80089b8:	400200b8 	.word	0x400200b8
 80089bc:	40020410 	.word	0x40020410
 80089c0:	40020428 	.word	0x40020428
 80089c4:	40020440 	.word	0x40020440
 80089c8:	40020458 	.word	0x40020458
 80089cc:	40020470 	.word	0x40020470
 80089d0:	40020488 	.word	0x40020488
 80089d4:	400204a0 	.word	0x400204a0
 80089d8:	400204b8 	.word	0x400204b8
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0302 	and.w	r3, r3, #2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	bf14      	ite	ne
 80089ea:	2301      	movne	r3, #1
 80089ec:	2300      	moveq	r3, #0
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 8087 	beq.w	8008b04 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089fa:	f003 031f 	and.w	r3, r3, #31
 80089fe:	2220      	movs	r2, #32
 8008a00:	409a      	lsls	r2, r3
 8008a02:	6a3b      	ldr	r3, [r7, #32]
 8008a04:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d139      	bne.n	8008a86 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f022 0216 	bic.w	r2, r2, #22
 8008a20:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	695a      	ldr	r2, [r3, #20]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a30:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d103      	bne.n	8008a42 <HAL_DMA_IRQHandler+0x736>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d007      	beq.n	8008a52 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f022 0208 	bic.w	r2, r2, #8
 8008a50:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a56:	f003 031f 	and.w	r3, r3, #31
 8008a5a:	223f      	movs	r2, #63	@ 0x3f
 8008a5c:	409a      	lsls	r2, r3
 8008a5e:	6a3b      	ldr	r3, [r7, #32]
 8008a60:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 834a 	beq.w	8009110 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	4798      	blx	r3
          }
          return;
 8008a84:	e344      	b.n	8009110 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d018      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d108      	bne.n	8008ab4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d02c      	beq.n	8008b04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	4798      	blx	r3
 8008ab2:	e027      	b.n	8008b04 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d023      	beq.n	8008b04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	4798      	blx	r3
 8008ac4:	e01e      	b.n	8008b04 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10f      	bne.n	8008af4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f022 0210 	bic.w	r2, r2, #16
 8008ae2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d003      	beq.n	8008b04 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 8306 	beq.w	800911a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 8088 	beq.w	8008c2c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2204      	movs	r2, #4
 8008b20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a7a      	ldr	r2, [pc, #488]	@ (8008d14 <HAL_DMA_IRQHandler+0xa08>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d04a      	beq.n	8008bc4 <HAL_DMA_IRQHandler+0x8b8>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a79      	ldr	r2, [pc, #484]	@ (8008d18 <HAL_DMA_IRQHandler+0xa0c>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d045      	beq.n	8008bc4 <HAL_DMA_IRQHandler+0x8b8>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a77      	ldr	r2, [pc, #476]	@ (8008d1c <HAL_DMA_IRQHandler+0xa10>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d040      	beq.n	8008bc4 <HAL_DMA_IRQHandler+0x8b8>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a76      	ldr	r2, [pc, #472]	@ (8008d20 <HAL_DMA_IRQHandler+0xa14>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d03b      	beq.n	8008bc4 <HAL_DMA_IRQHandler+0x8b8>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a74      	ldr	r2, [pc, #464]	@ (8008d24 <HAL_DMA_IRQHandler+0xa18>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d036      	beq.n	8008bc4 <HAL_DMA_IRQHandler+0x8b8>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a73      	ldr	r2, [pc, #460]	@ (8008d28 <HAL_DMA_IRQHandler+0xa1c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d031      	beq.n	8008bc4 <HAL_DMA_IRQHandler+0x8b8>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a71      	ldr	r2, [pc, #452]	@ (8008d2c <HAL_DMA_IRQHandler+0xa20>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d02c      	beq.n	8008bc4 <HAL_DMA_IRQHandler+0x8b8>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a70      	ldr	r2, [pc, #448]	@ (8008d30 <HAL_DMA_IRQHandler+0xa24>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d027      	beq.n	8008bc4 <HAL_DMA_IRQHandler+0x8b8>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a6e      	ldr	r2, [pc, #440]	@ (8008d34 <HAL_DMA_IRQHandler+0xa28>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d022      	beq.n	8008bc4 <HAL_DMA_IRQHandler+0x8b8>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a6d      	ldr	r2, [pc, #436]	@ (8008d38 <HAL_DMA_IRQHandler+0xa2c>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d01d      	beq.n	8008bc4 <HAL_DMA_IRQHandler+0x8b8>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a6b      	ldr	r2, [pc, #428]	@ (8008d3c <HAL_DMA_IRQHandler+0xa30>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d018      	beq.n	8008bc4 <HAL_DMA_IRQHandler+0x8b8>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a6a      	ldr	r2, [pc, #424]	@ (8008d40 <HAL_DMA_IRQHandler+0xa34>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d013      	beq.n	8008bc4 <HAL_DMA_IRQHandler+0x8b8>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a68      	ldr	r2, [pc, #416]	@ (8008d44 <HAL_DMA_IRQHandler+0xa38>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00e      	beq.n	8008bc4 <HAL_DMA_IRQHandler+0x8b8>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a67      	ldr	r2, [pc, #412]	@ (8008d48 <HAL_DMA_IRQHandler+0xa3c>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d009      	beq.n	8008bc4 <HAL_DMA_IRQHandler+0x8b8>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a65      	ldr	r2, [pc, #404]	@ (8008d4c <HAL_DMA_IRQHandler+0xa40>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d004      	beq.n	8008bc4 <HAL_DMA_IRQHandler+0x8b8>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a64      	ldr	r2, [pc, #400]	@ (8008d50 <HAL_DMA_IRQHandler+0xa44>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d108      	bne.n	8008bd6 <HAL_DMA_IRQHandler+0x8ca>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f022 0201 	bic.w	r2, r2, #1
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	e007      	b.n	8008be6 <HAL_DMA_IRQHandler+0x8da>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f022 0201 	bic.w	r2, r2, #1
 8008be4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	3301      	adds	r3, #1
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d307      	bcc.n	8008c02 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1f2      	bne.n	8008be6 <HAL_DMA_IRQHandler+0x8da>
 8008c00:	e000      	b.n	8008c04 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008c02:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d004      	beq.n	8008c1c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2203      	movs	r2, #3
 8008c16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008c1a:	e003      	b.n	8008c24 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 8272 	beq.w	800911a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	4798      	blx	r3
 8008c3e:	e26c      	b.n	800911a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a43      	ldr	r2, [pc, #268]	@ (8008d54 <HAL_DMA_IRQHandler+0xa48>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d022      	beq.n	8008c90 <HAL_DMA_IRQHandler+0x984>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a42      	ldr	r2, [pc, #264]	@ (8008d58 <HAL_DMA_IRQHandler+0xa4c>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d01d      	beq.n	8008c90 <HAL_DMA_IRQHandler+0x984>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a40      	ldr	r2, [pc, #256]	@ (8008d5c <HAL_DMA_IRQHandler+0xa50>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d018      	beq.n	8008c90 <HAL_DMA_IRQHandler+0x984>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a3f      	ldr	r2, [pc, #252]	@ (8008d60 <HAL_DMA_IRQHandler+0xa54>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d013      	beq.n	8008c90 <HAL_DMA_IRQHandler+0x984>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a3d      	ldr	r2, [pc, #244]	@ (8008d64 <HAL_DMA_IRQHandler+0xa58>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d00e      	beq.n	8008c90 <HAL_DMA_IRQHandler+0x984>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a3c      	ldr	r2, [pc, #240]	@ (8008d68 <HAL_DMA_IRQHandler+0xa5c>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d009      	beq.n	8008c90 <HAL_DMA_IRQHandler+0x984>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a3a      	ldr	r2, [pc, #232]	@ (8008d6c <HAL_DMA_IRQHandler+0xa60>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d004      	beq.n	8008c90 <HAL_DMA_IRQHandler+0x984>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a39      	ldr	r2, [pc, #228]	@ (8008d70 <HAL_DMA_IRQHandler+0xa64>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d101      	bne.n	8008c94 <HAL_DMA_IRQHandler+0x988>
 8008c90:	2301      	movs	r3, #1
 8008c92:	e000      	b.n	8008c96 <HAL_DMA_IRQHandler+0x98a>
 8008c94:	2300      	movs	r3, #0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 823f 	beq.w	800911a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ca8:	f003 031f 	and.w	r3, r3, #31
 8008cac:	2204      	movs	r2, #4
 8008cae:	409a      	lsls	r2, r3
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 80cd 	beq.w	8008e54 <HAL_DMA_IRQHandler+0xb48>
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	f003 0304 	and.w	r3, r3, #4
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f000 80c7 	beq.w	8008e54 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cca:	f003 031f 	and.w	r3, r3, #31
 8008cce:	2204      	movs	r2, #4
 8008cd0:	409a      	lsls	r2, r3
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d049      	beq.n	8008d74 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d109      	bne.n	8008cfe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f000 8210 	beq.w	8009114 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008cfc:	e20a      	b.n	8009114 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 8206 	beq.w	8009114 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d10:	e200      	b.n	8009114 <HAL_DMA_IRQHandler+0xe08>
 8008d12:	bf00      	nop
 8008d14:	40020010 	.word	0x40020010
 8008d18:	40020028 	.word	0x40020028
 8008d1c:	40020040 	.word	0x40020040
 8008d20:	40020058 	.word	0x40020058
 8008d24:	40020070 	.word	0x40020070
 8008d28:	40020088 	.word	0x40020088
 8008d2c:	400200a0 	.word	0x400200a0
 8008d30:	400200b8 	.word	0x400200b8
 8008d34:	40020410 	.word	0x40020410
 8008d38:	40020428 	.word	0x40020428
 8008d3c:	40020440 	.word	0x40020440
 8008d40:	40020458 	.word	0x40020458
 8008d44:	40020470 	.word	0x40020470
 8008d48:	40020488 	.word	0x40020488
 8008d4c:	400204a0 	.word	0x400204a0
 8008d50:	400204b8 	.word	0x400204b8
 8008d54:	58025408 	.word	0x58025408
 8008d58:	5802541c 	.word	0x5802541c
 8008d5c:	58025430 	.word	0x58025430
 8008d60:	58025444 	.word	0x58025444
 8008d64:	58025458 	.word	0x58025458
 8008d68:	5802546c 	.word	0x5802546c
 8008d6c:	58025480 	.word	0x58025480
 8008d70:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	f003 0320 	and.w	r3, r3, #32
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d160      	bne.n	8008e40 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a7f      	ldr	r2, [pc, #508]	@ (8008f80 <HAL_DMA_IRQHandler+0xc74>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d04a      	beq.n	8008e1e <HAL_DMA_IRQHandler+0xb12>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a7d      	ldr	r2, [pc, #500]	@ (8008f84 <HAL_DMA_IRQHandler+0xc78>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d045      	beq.n	8008e1e <HAL_DMA_IRQHandler+0xb12>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a7c      	ldr	r2, [pc, #496]	@ (8008f88 <HAL_DMA_IRQHandler+0xc7c>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d040      	beq.n	8008e1e <HAL_DMA_IRQHandler+0xb12>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a7a      	ldr	r2, [pc, #488]	@ (8008f8c <HAL_DMA_IRQHandler+0xc80>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d03b      	beq.n	8008e1e <HAL_DMA_IRQHandler+0xb12>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a79      	ldr	r2, [pc, #484]	@ (8008f90 <HAL_DMA_IRQHandler+0xc84>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d036      	beq.n	8008e1e <HAL_DMA_IRQHandler+0xb12>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a77      	ldr	r2, [pc, #476]	@ (8008f94 <HAL_DMA_IRQHandler+0xc88>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d031      	beq.n	8008e1e <HAL_DMA_IRQHandler+0xb12>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a76      	ldr	r2, [pc, #472]	@ (8008f98 <HAL_DMA_IRQHandler+0xc8c>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d02c      	beq.n	8008e1e <HAL_DMA_IRQHandler+0xb12>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a74      	ldr	r2, [pc, #464]	@ (8008f9c <HAL_DMA_IRQHandler+0xc90>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d027      	beq.n	8008e1e <HAL_DMA_IRQHandler+0xb12>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a73      	ldr	r2, [pc, #460]	@ (8008fa0 <HAL_DMA_IRQHandler+0xc94>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d022      	beq.n	8008e1e <HAL_DMA_IRQHandler+0xb12>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a71      	ldr	r2, [pc, #452]	@ (8008fa4 <HAL_DMA_IRQHandler+0xc98>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d01d      	beq.n	8008e1e <HAL_DMA_IRQHandler+0xb12>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a70      	ldr	r2, [pc, #448]	@ (8008fa8 <HAL_DMA_IRQHandler+0xc9c>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d018      	beq.n	8008e1e <HAL_DMA_IRQHandler+0xb12>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a6e      	ldr	r2, [pc, #440]	@ (8008fac <HAL_DMA_IRQHandler+0xca0>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d013      	beq.n	8008e1e <HAL_DMA_IRQHandler+0xb12>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a6d      	ldr	r2, [pc, #436]	@ (8008fb0 <HAL_DMA_IRQHandler+0xca4>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d00e      	beq.n	8008e1e <HAL_DMA_IRQHandler+0xb12>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a6b      	ldr	r2, [pc, #428]	@ (8008fb4 <HAL_DMA_IRQHandler+0xca8>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d009      	beq.n	8008e1e <HAL_DMA_IRQHandler+0xb12>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a6a      	ldr	r2, [pc, #424]	@ (8008fb8 <HAL_DMA_IRQHandler+0xcac>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d004      	beq.n	8008e1e <HAL_DMA_IRQHandler+0xb12>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a68      	ldr	r2, [pc, #416]	@ (8008fbc <HAL_DMA_IRQHandler+0xcb0>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d108      	bne.n	8008e30 <HAL_DMA_IRQHandler+0xb24>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f022 0208 	bic.w	r2, r2, #8
 8008e2c:	601a      	str	r2, [r3, #0]
 8008e2e:	e007      	b.n	8008e40 <HAL_DMA_IRQHandler+0xb34>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f022 0204 	bic.w	r2, r2, #4
 8008e3e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 8165 	beq.w	8009114 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e52:	e15f      	b.n	8009114 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e58:	f003 031f 	and.w	r3, r3, #31
 8008e5c:	2202      	movs	r2, #2
 8008e5e:	409a      	lsls	r2, r3
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	4013      	ands	r3, r2
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f000 80c5 	beq.w	8008ff4 <HAL_DMA_IRQHandler+0xce8>
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	f003 0302 	and.w	r3, r3, #2
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f000 80bf 	beq.w	8008ff4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e7a:	f003 031f 	and.w	r3, r3, #31
 8008e7e:	2202      	movs	r2, #2
 8008e80:	409a      	lsls	r2, r3
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d018      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d109      	bne.n	8008eae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f000 813a 	beq.w	8009118 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008eac:	e134      	b.n	8009118 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 8130 	beq.w	8009118 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ec0:	e12a      	b.n	8009118 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	f003 0320 	and.w	r3, r3, #32
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f040 8089 	bne.w	8008fe0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a2b      	ldr	r2, [pc, #172]	@ (8008f80 <HAL_DMA_IRQHandler+0xc74>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d04a      	beq.n	8008f6e <HAL_DMA_IRQHandler+0xc62>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a29      	ldr	r2, [pc, #164]	@ (8008f84 <HAL_DMA_IRQHandler+0xc78>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d045      	beq.n	8008f6e <HAL_DMA_IRQHandler+0xc62>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a28      	ldr	r2, [pc, #160]	@ (8008f88 <HAL_DMA_IRQHandler+0xc7c>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d040      	beq.n	8008f6e <HAL_DMA_IRQHandler+0xc62>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a26      	ldr	r2, [pc, #152]	@ (8008f8c <HAL_DMA_IRQHandler+0xc80>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d03b      	beq.n	8008f6e <HAL_DMA_IRQHandler+0xc62>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a25      	ldr	r2, [pc, #148]	@ (8008f90 <HAL_DMA_IRQHandler+0xc84>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d036      	beq.n	8008f6e <HAL_DMA_IRQHandler+0xc62>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a23      	ldr	r2, [pc, #140]	@ (8008f94 <HAL_DMA_IRQHandler+0xc88>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d031      	beq.n	8008f6e <HAL_DMA_IRQHandler+0xc62>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a22      	ldr	r2, [pc, #136]	@ (8008f98 <HAL_DMA_IRQHandler+0xc8c>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d02c      	beq.n	8008f6e <HAL_DMA_IRQHandler+0xc62>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a20      	ldr	r2, [pc, #128]	@ (8008f9c <HAL_DMA_IRQHandler+0xc90>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d027      	beq.n	8008f6e <HAL_DMA_IRQHandler+0xc62>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a1f      	ldr	r2, [pc, #124]	@ (8008fa0 <HAL_DMA_IRQHandler+0xc94>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d022      	beq.n	8008f6e <HAL_DMA_IRQHandler+0xc62>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8008fa4 <HAL_DMA_IRQHandler+0xc98>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d01d      	beq.n	8008f6e <HAL_DMA_IRQHandler+0xc62>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a1c      	ldr	r2, [pc, #112]	@ (8008fa8 <HAL_DMA_IRQHandler+0xc9c>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d018      	beq.n	8008f6e <HAL_DMA_IRQHandler+0xc62>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a1a      	ldr	r2, [pc, #104]	@ (8008fac <HAL_DMA_IRQHandler+0xca0>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d013      	beq.n	8008f6e <HAL_DMA_IRQHandler+0xc62>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a19      	ldr	r2, [pc, #100]	@ (8008fb0 <HAL_DMA_IRQHandler+0xca4>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d00e      	beq.n	8008f6e <HAL_DMA_IRQHandler+0xc62>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a17      	ldr	r2, [pc, #92]	@ (8008fb4 <HAL_DMA_IRQHandler+0xca8>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d009      	beq.n	8008f6e <HAL_DMA_IRQHandler+0xc62>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a16      	ldr	r2, [pc, #88]	@ (8008fb8 <HAL_DMA_IRQHandler+0xcac>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d004      	beq.n	8008f6e <HAL_DMA_IRQHandler+0xc62>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a14      	ldr	r2, [pc, #80]	@ (8008fbc <HAL_DMA_IRQHandler+0xcb0>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d128      	bne.n	8008fc0 <HAL_DMA_IRQHandler+0xcb4>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f022 0214 	bic.w	r2, r2, #20
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	e027      	b.n	8008fd0 <HAL_DMA_IRQHandler+0xcc4>
 8008f80:	40020010 	.word	0x40020010
 8008f84:	40020028 	.word	0x40020028
 8008f88:	40020040 	.word	0x40020040
 8008f8c:	40020058 	.word	0x40020058
 8008f90:	40020070 	.word	0x40020070
 8008f94:	40020088 	.word	0x40020088
 8008f98:	400200a0 	.word	0x400200a0
 8008f9c:	400200b8 	.word	0x400200b8
 8008fa0:	40020410 	.word	0x40020410
 8008fa4:	40020428 	.word	0x40020428
 8008fa8:	40020440 	.word	0x40020440
 8008fac:	40020458 	.word	0x40020458
 8008fb0:	40020470 	.word	0x40020470
 8008fb4:	40020488 	.word	0x40020488
 8008fb8:	400204a0 	.word	0x400204a0
 8008fbc:	400204b8 	.word	0x400204b8
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f022 020a 	bic.w	r2, r2, #10
 8008fce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f000 8097 	beq.w	8009118 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ff2:	e091      	b.n	8009118 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ff8:	f003 031f 	and.w	r3, r3, #31
 8008ffc:	2208      	movs	r2, #8
 8008ffe:	409a      	lsls	r2, r3
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	4013      	ands	r3, r2
 8009004:	2b00      	cmp	r3, #0
 8009006:	f000 8088 	beq.w	800911a <HAL_DMA_IRQHandler+0xe0e>
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f003 0308 	and.w	r3, r3, #8
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 8082 	beq.w	800911a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a41      	ldr	r2, [pc, #260]	@ (8009120 <HAL_DMA_IRQHandler+0xe14>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d04a      	beq.n	80090b6 <HAL_DMA_IRQHandler+0xdaa>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a3f      	ldr	r2, [pc, #252]	@ (8009124 <HAL_DMA_IRQHandler+0xe18>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d045      	beq.n	80090b6 <HAL_DMA_IRQHandler+0xdaa>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a3e      	ldr	r2, [pc, #248]	@ (8009128 <HAL_DMA_IRQHandler+0xe1c>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d040      	beq.n	80090b6 <HAL_DMA_IRQHandler+0xdaa>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a3c      	ldr	r2, [pc, #240]	@ (800912c <HAL_DMA_IRQHandler+0xe20>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d03b      	beq.n	80090b6 <HAL_DMA_IRQHandler+0xdaa>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a3b      	ldr	r2, [pc, #236]	@ (8009130 <HAL_DMA_IRQHandler+0xe24>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d036      	beq.n	80090b6 <HAL_DMA_IRQHandler+0xdaa>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a39      	ldr	r2, [pc, #228]	@ (8009134 <HAL_DMA_IRQHandler+0xe28>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d031      	beq.n	80090b6 <HAL_DMA_IRQHandler+0xdaa>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a38      	ldr	r2, [pc, #224]	@ (8009138 <HAL_DMA_IRQHandler+0xe2c>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d02c      	beq.n	80090b6 <HAL_DMA_IRQHandler+0xdaa>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a36      	ldr	r2, [pc, #216]	@ (800913c <HAL_DMA_IRQHandler+0xe30>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d027      	beq.n	80090b6 <HAL_DMA_IRQHandler+0xdaa>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a35      	ldr	r2, [pc, #212]	@ (8009140 <HAL_DMA_IRQHandler+0xe34>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d022      	beq.n	80090b6 <HAL_DMA_IRQHandler+0xdaa>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a33      	ldr	r2, [pc, #204]	@ (8009144 <HAL_DMA_IRQHandler+0xe38>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d01d      	beq.n	80090b6 <HAL_DMA_IRQHandler+0xdaa>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a32      	ldr	r2, [pc, #200]	@ (8009148 <HAL_DMA_IRQHandler+0xe3c>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d018      	beq.n	80090b6 <HAL_DMA_IRQHandler+0xdaa>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a30      	ldr	r2, [pc, #192]	@ (800914c <HAL_DMA_IRQHandler+0xe40>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d013      	beq.n	80090b6 <HAL_DMA_IRQHandler+0xdaa>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a2f      	ldr	r2, [pc, #188]	@ (8009150 <HAL_DMA_IRQHandler+0xe44>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d00e      	beq.n	80090b6 <HAL_DMA_IRQHandler+0xdaa>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a2d      	ldr	r2, [pc, #180]	@ (8009154 <HAL_DMA_IRQHandler+0xe48>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d009      	beq.n	80090b6 <HAL_DMA_IRQHandler+0xdaa>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a2c      	ldr	r2, [pc, #176]	@ (8009158 <HAL_DMA_IRQHandler+0xe4c>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d004      	beq.n	80090b6 <HAL_DMA_IRQHandler+0xdaa>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a2a      	ldr	r2, [pc, #168]	@ (800915c <HAL_DMA_IRQHandler+0xe50>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d108      	bne.n	80090c8 <HAL_DMA_IRQHandler+0xdbc>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f022 021c 	bic.w	r2, r2, #28
 80090c4:	601a      	str	r2, [r3, #0]
 80090c6:	e007      	b.n	80090d8 <HAL_DMA_IRQHandler+0xdcc>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f022 020e 	bic.w	r2, r2, #14
 80090d6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090dc:	f003 031f 	and.w	r3, r3, #31
 80090e0:	2201      	movs	r2, #1
 80090e2:	409a      	lsls	r2, r3
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009102:	2b00      	cmp	r3, #0
 8009104:	d009      	beq.n	800911a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	4798      	blx	r3
 800910e:	e004      	b.n	800911a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009110:	bf00      	nop
 8009112:	e002      	b.n	800911a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009114:	bf00      	nop
 8009116:	e000      	b.n	800911a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009118:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800911a:	3728      	adds	r7, #40	@ 0x28
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	40020010 	.word	0x40020010
 8009124:	40020028 	.word	0x40020028
 8009128:	40020040 	.word	0x40020040
 800912c:	40020058 	.word	0x40020058
 8009130:	40020070 	.word	0x40020070
 8009134:	40020088 	.word	0x40020088
 8009138:	400200a0 	.word	0x400200a0
 800913c:	400200b8 	.word	0x400200b8
 8009140:	40020410 	.word	0x40020410
 8009144:	40020428 	.word	0x40020428
 8009148:	40020440 	.word	0x40020440
 800914c:	40020458 	.word	0x40020458
 8009150:	40020470 	.word	0x40020470
 8009154:	40020488 	.word	0x40020488
 8009158:	400204a0 	.word	0x400204a0
 800915c:	400204b8 	.word	0x400204b8

08009160 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009160:	b480      	push	{r7}
 8009162:	b087      	sub	sp, #28
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
 800916c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009172:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009178:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a7f      	ldr	r2, [pc, #508]	@ (800937c <DMA_SetConfig+0x21c>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d072      	beq.n	800926a <DMA_SetConfig+0x10a>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a7d      	ldr	r2, [pc, #500]	@ (8009380 <DMA_SetConfig+0x220>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d06d      	beq.n	800926a <DMA_SetConfig+0x10a>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a7c      	ldr	r2, [pc, #496]	@ (8009384 <DMA_SetConfig+0x224>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d068      	beq.n	800926a <DMA_SetConfig+0x10a>
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a7a      	ldr	r2, [pc, #488]	@ (8009388 <DMA_SetConfig+0x228>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d063      	beq.n	800926a <DMA_SetConfig+0x10a>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a79      	ldr	r2, [pc, #484]	@ (800938c <DMA_SetConfig+0x22c>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d05e      	beq.n	800926a <DMA_SetConfig+0x10a>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a77      	ldr	r2, [pc, #476]	@ (8009390 <DMA_SetConfig+0x230>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d059      	beq.n	800926a <DMA_SetConfig+0x10a>
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a76      	ldr	r2, [pc, #472]	@ (8009394 <DMA_SetConfig+0x234>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d054      	beq.n	800926a <DMA_SetConfig+0x10a>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a74      	ldr	r2, [pc, #464]	@ (8009398 <DMA_SetConfig+0x238>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d04f      	beq.n	800926a <DMA_SetConfig+0x10a>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a73      	ldr	r2, [pc, #460]	@ (800939c <DMA_SetConfig+0x23c>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d04a      	beq.n	800926a <DMA_SetConfig+0x10a>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a71      	ldr	r2, [pc, #452]	@ (80093a0 <DMA_SetConfig+0x240>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d045      	beq.n	800926a <DMA_SetConfig+0x10a>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a70      	ldr	r2, [pc, #448]	@ (80093a4 <DMA_SetConfig+0x244>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d040      	beq.n	800926a <DMA_SetConfig+0x10a>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a6e      	ldr	r2, [pc, #440]	@ (80093a8 <DMA_SetConfig+0x248>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d03b      	beq.n	800926a <DMA_SetConfig+0x10a>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a6d      	ldr	r2, [pc, #436]	@ (80093ac <DMA_SetConfig+0x24c>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d036      	beq.n	800926a <DMA_SetConfig+0x10a>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a6b      	ldr	r2, [pc, #428]	@ (80093b0 <DMA_SetConfig+0x250>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d031      	beq.n	800926a <DMA_SetConfig+0x10a>
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a6a      	ldr	r2, [pc, #424]	@ (80093b4 <DMA_SetConfig+0x254>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d02c      	beq.n	800926a <DMA_SetConfig+0x10a>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a68      	ldr	r2, [pc, #416]	@ (80093b8 <DMA_SetConfig+0x258>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d027      	beq.n	800926a <DMA_SetConfig+0x10a>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a67      	ldr	r2, [pc, #412]	@ (80093bc <DMA_SetConfig+0x25c>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d022      	beq.n	800926a <DMA_SetConfig+0x10a>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a65      	ldr	r2, [pc, #404]	@ (80093c0 <DMA_SetConfig+0x260>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d01d      	beq.n	800926a <DMA_SetConfig+0x10a>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a64      	ldr	r2, [pc, #400]	@ (80093c4 <DMA_SetConfig+0x264>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d018      	beq.n	800926a <DMA_SetConfig+0x10a>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a62      	ldr	r2, [pc, #392]	@ (80093c8 <DMA_SetConfig+0x268>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d013      	beq.n	800926a <DMA_SetConfig+0x10a>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a61      	ldr	r2, [pc, #388]	@ (80093cc <DMA_SetConfig+0x26c>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d00e      	beq.n	800926a <DMA_SetConfig+0x10a>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a5f      	ldr	r2, [pc, #380]	@ (80093d0 <DMA_SetConfig+0x270>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d009      	beq.n	800926a <DMA_SetConfig+0x10a>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a5e      	ldr	r2, [pc, #376]	@ (80093d4 <DMA_SetConfig+0x274>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d004      	beq.n	800926a <DMA_SetConfig+0x10a>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a5c      	ldr	r2, [pc, #368]	@ (80093d8 <DMA_SetConfig+0x278>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d101      	bne.n	800926e <DMA_SetConfig+0x10e>
 800926a:	2301      	movs	r3, #1
 800926c:	e000      	b.n	8009270 <DMA_SetConfig+0x110>
 800926e:	2300      	movs	r3, #0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00d      	beq.n	8009290 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800927c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009282:	2b00      	cmp	r3, #0
 8009284:	d004      	beq.n	8009290 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800928e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a39      	ldr	r2, [pc, #228]	@ (800937c <DMA_SetConfig+0x21c>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d04a      	beq.n	8009330 <DMA_SetConfig+0x1d0>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a38      	ldr	r2, [pc, #224]	@ (8009380 <DMA_SetConfig+0x220>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d045      	beq.n	8009330 <DMA_SetConfig+0x1d0>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a36      	ldr	r2, [pc, #216]	@ (8009384 <DMA_SetConfig+0x224>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d040      	beq.n	8009330 <DMA_SetConfig+0x1d0>
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a35      	ldr	r2, [pc, #212]	@ (8009388 <DMA_SetConfig+0x228>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d03b      	beq.n	8009330 <DMA_SetConfig+0x1d0>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a33      	ldr	r2, [pc, #204]	@ (800938c <DMA_SetConfig+0x22c>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d036      	beq.n	8009330 <DMA_SetConfig+0x1d0>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a32      	ldr	r2, [pc, #200]	@ (8009390 <DMA_SetConfig+0x230>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d031      	beq.n	8009330 <DMA_SetConfig+0x1d0>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a30      	ldr	r2, [pc, #192]	@ (8009394 <DMA_SetConfig+0x234>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d02c      	beq.n	8009330 <DMA_SetConfig+0x1d0>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a2f      	ldr	r2, [pc, #188]	@ (8009398 <DMA_SetConfig+0x238>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d027      	beq.n	8009330 <DMA_SetConfig+0x1d0>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a2d      	ldr	r2, [pc, #180]	@ (800939c <DMA_SetConfig+0x23c>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d022      	beq.n	8009330 <DMA_SetConfig+0x1d0>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a2c      	ldr	r2, [pc, #176]	@ (80093a0 <DMA_SetConfig+0x240>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d01d      	beq.n	8009330 <DMA_SetConfig+0x1d0>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a2a      	ldr	r2, [pc, #168]	@ (80093a4 <DMA_SetConfig+0x244>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d018      	beq.n	8009330 <DMA_SetConfig+0x1d0>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a29      	ldr	r2, [pc, #164]	@ (80093a8 <DMA_SetConfig+0x248>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d013      	beq.n	8009330 <DMA_SetConfig+0x1d0>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a27      	ldr	r2, [pc, #156]	@ (80093ac <DMA_SetConfig+0x24c>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d00e      	beq.n	8009330 <DMA_SetConfig+0x1d0>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a26      	ldr	r2, [pc, #152]	@ (80093b0 <DMA_SetConfig+0x250>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d009      	beq.n	8009330 <DMA_SetConfig+0x1d0>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a24      	ldr	r2, [pc, #144]	@ (80093b4 <DMA_SetConfig+0x254>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d004      	beq.n	8009330 <DMA_SetConfig+0x1d0>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a23      	ldr	r2, [pc, #140]	@ (80093b8 <DMA_SetConfig+0x258>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d101      	bne.n	8009334 <DMA_SetConfig+0x1d4>
 8009330:	2301      	movs	r3, #1
 8009332:	e000      	b.n	8009336 <DMA_SetConfig+0x1d6>
 8009334:	2300      	movs	r3, #0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d059      	beq.n	80093ee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800933e:	f003 031f 	and.w	r3, r3, #31
 8009342:	223f      	movs	r2, #63	@ 0x3f
 8009344:	409a      	lsls	r2, r3
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009358:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	2b40      	cmp	r3, #64	@ 0x40
 8009368:	d138      	bne.n	80093dc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800937a:	e086      	b.n	800948a <DMA_SetConfig+0x32a>
 800937c:	40020010 	.word	0x40020010
 8009380:	40020028 	.word	0x40020028
 8009384:	40020040 	.word	0x40020040
 8009388:	40020058 	.word	0x40020058
 800938c:	40020070 	.word	0x40020070
 8009390:	40020088 	.word	0x40020088
 8009394:	400200a0 	.word	0x400200a0
 8009398:	400200b8 	.word	0x400200b8
 800939c:	40020410 	.word	0x40020410
 80093a0:	40020428 	.word	0x40020428
 80093a4:	40020440 	.word	0x40020440
 80093a8:	40020458 	.word	0x40020458
 80093ac:	40020470 	.word	0x40020470
 80093b0:	40020488 	.word	0x40020488
 80093b4:	400204a0 	.word	0x400204a0
 80093b8:	400204b8 	.word	0x400204b8
 80093bc:	58025408 	.word	0x58025408
 80093c0:	5802541c 	.word	0x5802541c
 80093c4:	58025430 	.word	0x58025430
 80093c8:	58025444 	.word	0x58025444
 80093cc:	58025458 	.word	0x58025458
 80093d0:	5802546c 	.word	0x5802546c
 80093d4:	58025480 	.word	0x58025480
 80093d8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	60da      	str	r2, [r3, #12]
}
 80093ec:	e04d      	b.n	800948a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a29      	ldr	r2, [pc, #164]	@ (8009498 <DMA_SetConfig+0x338>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d022      	beq.n	800943e <DMA_SetConfig+0x2de>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a27      	ldr	r2, [pc, #156]	@ (800949c <DMA_SetConfig+0x33c>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d01d      	beq.n	800943e <DMA_SetConfig+0x2de>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a26      	ldr	r2, [pc, #152]	@ (80094a0 <DMA_SetConfig+0x340>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d018      	beq.n	800943e <DMA_SetConfig+0x2de>
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a24      	ldr	r2, [pc, #144]	@ (80094a4 <DMA_SetConfig+0x344>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d013      	beq.n	800943e <DMA_SetConfig+0x2de>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a23      	ldr	r2, [pc, #140]	@ (80094a8 <DMA_SetConfig+0x348>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d00e      	beq.n	800943e <DMA_SetConfig+0x2de>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a21      	ldr	r2, [pc, #132]	@ (80094ac <DMA_SetConfig+0x34c>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d009      	beq.n	800943e <DMA_SetConfig+0x2de>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a20      	ldr	r2, [pc, #128]	@ (80094b0 <DMA_SetConfig+0x350>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d004      	beq.n	800943e <DMA_SetConfig+0x2de>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a1e      	ldr	r2, [pc, #120]	@ (80094b4 <DMA_SetConfig+0x354>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d101      	bne.n	8009442 <DMA_SetConfig+0x2e2>
 800943e:	2301      	movs	r3, #1
 8009440:	e000      	b.n	8009444 <DMA_SetConfig+0x2e4>
 8009442:	2300      	movs	r3, #0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d020      	beq.n	800948a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800944c:	f003 031f 	and.w	r3, r3, #31
 8009450:	2201      	movs	r2, #1
 8009452:	409a      	lsls	r2, r3
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	2b40      	cmp	r3, #64	@ 0x40
 8009466:	d108      	bne.n	800947a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	60da      	str	r2, [r3, #12]
}
 8009478:	e007      	b.n	800948a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	60da      	str	r2, [r3, #12]
}
 800948a:	bf00      	nop
 800948c:	371c      	adds	r7, #28
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	58025408 	.word	0x58025408
 800949c:	5802541c 	.word	0x5802541c
 80094a0:	58025430 	.word	0x58025430
 80094a4:	58025444 	.word	0x58025444
 80094a8:	58025458 	.word	0x58025458
 80094ac:	5802546c 	.word	0x5802546c
 80094b0:	58025480 	.word	0x58025480
 80094b4:	58025494 	.word	0x58025494

080094b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a42      	ldr	r2, [pc, #264]	@ (80095d0 <DMA_CalcBaseAndBitshift+0x118>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d04a      	beq.n	8009560 <DMA_CalcBaseAndBitshift+0xa8>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a41      	ldr	r2, [pc, #260]	@ (80095d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d045      	beq.n	8009560 <DMA_CalcBaseAndBitshift+0xa8>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a3f      	ldr	r2, [pc, #252]	@ (80095d8 <DMA_CalcBaseAndBitshift+0x120>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d040      	beq.n	8009560 <DMA_CalcBaseAndBitshift+0xa8>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a3e      	ldr	r2, [pc, #248]	@ (80095dc <DMA_CalcBaseAndBitshift+0x124>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d03b      	beq.n	8009560 <DMA_CalcBaseAndBitshift+0xa8>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a3c      	ldr	r2, [pc, #240]	@ (80095e0 <DMA_CalcBaseAndBitshift+0x128>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d036      	beq.n	8009560 <DMA_CalcBaseAndBitshift+0xa8>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a3b      	ldr	r2, [pc, #236]	@ (80095e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d031      	beq.n	8009560 <DMA_CalcBaseAndBitshift+0xa8>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a39      	ldr	r2, [pc, #228]	@ (80095e8 <DMA_CalcBaseAndBitshift+0x130>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d02c      	beq.n	8009560 <DMA_CalcBaseAndBitshift+0xa8>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a38      	ldr	r2, [pc, #224]	@ (80095ec <DMA_CalcBaseAndBitshift+0x134>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d027      	beq.n	8009560 <DMA_CalcBaseAndBitshift+0xa8>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a36      	ldr	r2, [pc, #216]	@ (80095f0 <DMA_CalcBaseAndBitshift+0x138>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d022      	beq.n	8009560 <DMA_CalcBaseAndBitshift+0xa8>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a35      	ldr	r2, [pc, #212]	@ (80095f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d01d      	beq.n	8009560 <DMA_CalcBaseAndBitshift+0xa8>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a33      	ldr	r2, [pc, #204]	@ (80095f8 <DMA_CalcBaseAndBitshift+0x140>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d018      	beq.n	8009560 <DMA_CalcBaseAndBitshift+0xa8>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a32      	ldr	r2, [pc, #200]	@ (80095fc <DMA_CalcBaseAndBitshift+0x144>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d013      	beq.n	8009560 <DMA_CalcBaseAndBitshift+0xa8>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a30      	ldr	r2, [pc, #192]	@ (8009600 <DMA_CalcBaseAndBitshift+0x148>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d00e      	beq.n	8009560 <DMA_CalcBaseAndBitshift+0xa8>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a2f      	ldr	r2, [pc, #188]	@ (8009604 <DMA_CalcBaseAndBitshift+0x14c>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d009      	beq.n	8009560 <DMA_CalcBaseAndBitshift+0xa8>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a2d      	ldr	r2, [pc, #180]	@ (8009608 <DMA_CalcBaseAndBitshift+0x150>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d004      	beq.n	8009560 <DMA_CalcBaseAndBitshift+0xa8>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a2c      	ldr	r2, [pc, #176]	@ (800960c <DMA_CalcBaseAndBitshift+0x154>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d101      	bne.n	8009564 <DMA_CalcBaseAndBitshift+0xac>
 8009560:	2301      	movs	r3, #1
 8009562:	e000      	b.n	8009566 <DMA_CalcBaseAndBitshift+0xae>
 8009564:	2300      	movs	r3, #0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d024      	beq.n	80095b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	b2db      	uxtb	r3, r3
 8009570:	3b10      	subs	r3, #16
 8009572:	4a27      	ldr	r2, [pc, #156]	@ (8009610 <DMA_CalcBaseAndBitshift+0x158>)
 8009574:	fba2 2303 	umull	r2, r3, r2, r3
 8009578:	091b      	lsrs	r3, r3, #4
 800957a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f003 0307 	and.w	r3, r3, #7
 8009582:	4a24      	ldr	r2, [pc, #144]	@ (8009614 <DMA_CalcBaseAndBitshift+0x15c>)
 8009584:	5cd3      	ldrb	r3, [r2, r3]
 8009586:	461a      	mov	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2b03      	cmp	r3, #3
 8009590:	d908      	bls.n	80095a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	461a      	mov	r2, r3
 8009598:	4b1f      	ldr	r3, [pc, #124]	@ (8009618 <DMA_CalcBaseAndBitshift+0x160>)
 800959a:	4013      	ands	r3, r2
 800959c:	1d1a      	adds	r2, r3, #4
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80095a2:	e00d      	b.n	80095c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	461a      	mov	r2, r3
 80095aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009618 <DMA_CalcBaseAndBitshift+0x160>)
 80095ac:	4013      	ands	r3, r2
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80095b2:	e005      	b.n	80095c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3714      	adds	r7, #20
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	40020010 	.word	0x40020010
 80095d4:	40020028 	.word	0x40020028
 80095d8:	40020040 	.word	0x40020040
 80095dc:	40020058 	.word	0x40020058
 80095e0:	40020070 	.word	0x40020070
 80095e4:	40020088 	.word	0x40020088
 80095e8:	400200a0 	.word	0x400200a0
 80095ec:	400200b8 	.word	0x400200b8
 80095f0:	40020410 	.word	0x40020410
 80095f4:	40020428 	.word	0x40020428
 80095f8:	40020440 	.word	0x40020440
 80095fc:	40020458 	.word	0x40020458
 8009600:	40020470 	.word	0x40020470
 8009604:	40020488 	.word	0x40020488
 8009608:	400204a0 	.word	0x400204a0
 800960c:	400204b8 	.word	0x400204b8
 8009610:	aaaaaaab 	.word	0xaaaaaaab
 8009614:	0802cd84 	.word	0x0802cd84
 8009618:	fffffc00 	.word	0xfffffc00

0800961c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d120      	bne.n	8009672 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009634:	2b03      	cmp	r3, #3
 8009636:	d858      	bhi.n	80096ea <DMA_CheckFifoParam+0xce>
 8009638:	a201      	add	r2, pc, #4	@ (adr r2, 8009640 <DMA_CheckFifoParam+0x24>)
 800963a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963e:	bf00      	nop
 8009640:	08009651 	.word	0x08009651
 8009644:	08009663 	.word	0x08009663
 8009648:	08009651 	.word	0x08009651
 800964c:	080096eb 	.word	0x080096eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009654:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d048      	beq.n	80096ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009660:	e045      	b.n	80096ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009666:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800966a:	d142      	bne.n	80096f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009670:	e03f      	b.n	80096f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800967a:	d123      	bne.n	80096c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009680:	2b03      	cmp	r3, #3
 8009682:	d838      	bhi.n	80096f6 <DMA_CheckFifoParam+0xda>
 8009684:	a201      	add	r2, pc, #4	@ (adr r2, 800968c <DMA_CheckFifoParam+0x70>)
 8009686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968a:	bf00      	nop
 800968c:	0800969d 	.word	0x0800969d
 8009690:	080096a3 	.word	0x080096a3
 8009694:	0800969d 	.word	0x0800969d
 8009698:	080096b5 	.word	0x080096b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	73fb      	strb	r3, [r7, #15]
        break;
 80096a0:	e030      	b.n	8009704 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d025      	beq.n	80096fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80096b2:	e022      	b.n	80096fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80096bc:	d11f      	bne.n	80096fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80096c2:	e01c      	b.n	80096fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d902      	bls.n	80096d2 <DMA_CheckFifoParam+0xb6>
 80096cc:	2b03      	cmp	r3, #3
 80096ce:	d003      	beq.n	80096d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80096d0:	e018      	b.n	8009704 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	73fb      	strb	r3, [r7, #15]
        break;
 80096d6:	e015      	b.n	8009704 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00e      	beq.n	8009702 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	73fb      	strb	r3, [r7, #15]
    break;
 80096e8:	e00b      	b.n	8009702 <DMA_CheckFifoParam+0xe6>
        break;
 80096ea:	bf00      	nop
 80096ec:	e00a      	b.n	8009704 <DMA_CheckFifoParam+0xe8>
        break;
 80096ee:	bf00      	nop
 80096f0:	e008      	b.n	8009704 <DMA_CheckFifoParam+0xe8>
        break;
 80096f2:	bf00      	nop
 80096f4:	e006      	b.n	8009704 <DMA_CheckFifoParam+0xe8>
        break;
 80096f6:	bf00      	nop
 80096f8:	e004      	b.n	8009704 <DMA_CheckFifoParam+0xe8>
        break;
 80096fa:	bf00      	nop
 80096fc:	e002      	b.n	8009704 <DMA_CheckFifoParam+0xe8>
        break;
 80096fe:	bf00      	nop
 8009700:	e000      	b.n	8009704 <DMA_CheckFifoParam+0xe8>
    break;
 8009702:	bf00      	nop
    }
  }

  return status;
 8009704:	7bfb      	ldrb	r3, [r7, #15]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop

08009714 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a38      	ldr	r2, [pc, #224]	@ (8009808 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d022      	beq.n	8009772 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a36      	ldr	r2, [pc, #216]	@ (800980c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d01d      	beq.n	8009772 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a35      	ldr	r2, [pc, #212]	@ (8009810 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d018      	beq.n	8009772 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a33      	ldr	r2, [pc, #204]	@ (8009814 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d013      	beq.n	8009772 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a32      	ldr	r2, [pc, #200]	@ (8009818 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d00e      	beq.n	8009772 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a30      	ldr	r2, [pc, #192]	@ (800981c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d009      	beq.n	8009772 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a2f      	ldr	r2, [pc, #188]	@ (8009820 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d004      	beq.n	8009772 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a2d      	ldr	r2, [pc, #180]	@ (8009824 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d101      	bne.n	8009776 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009772:	2301      	movs	r3, #1
 8009774:	e000      	b.n	8009778 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009776:	2300      	movs	r3, #0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d01a      	beq.n	80097b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	b2db      	uxtb	r3, r3
 8009782:	3b08      	subs	r3, #8
 8009784:	4a28      	ldr	r2, [pc, #160]	@ (8009828 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009786:	fba2 2303 	umull	r2, r3, r2, r3
 800978a:	091b      	lsrs	r3, r3, #4
 800978c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	4b26      	ldr	r3, [pc, #152]	@ (800982c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009792:	4413      	add	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	461a      	mov	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a24      	ldr	r2, [pc, #144]	@ (8009830 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80097a0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f003 031f 	and.w	r3, r3, #31
 80097a8:	2201      	movs	r2, #1
 80097aa:	409a      	lsls	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80097b0:	e024      	b.n	80097fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	3b10      	subs	r3, #16
 80097ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009834 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80097bc:	fba2 2303 	umull	r2, r3, r2, r3
 80097c0:	091b      	lsrs	r3, r3, #4
 80097c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	4a1c      	ldr	r2, [pc, #112]	@ (8009838 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d806      	bhi.n	80097da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	4a1b      	ldr	r2, [pc, #108]	@ (800983c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d902      	bls.n	80097da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	3308      	adds	r3, #8
 80097d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	4b18      	ldr	r3, [pc, #96]	@ (8009840 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80097de:	4413      	add	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	461a      	mov	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a16      	ldr	r2, [pc, #88]	@ (8009844 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80097ec:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f003 031f 	and.w	r3, r3, #31
 80097f4:	2201      	movs	r2, #1
 80097f6:	409a      	lsls	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80097fc:	bf00      	nop
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr
 8009808:	58025408 	.word	0x58025408
 800980c:	5802541c 	.word	0x5802541c
 8009810:	58025430 	.word	0x58025430
 8009814:	58025444 	.word	0x58025444
 8009818:	58025458 	.word	0x58025458
 800981c:	5802546c 	.word	0x5802546c
 8009820:	58025480 	.word	0x58025480
 8009824:	58025494 	.word	0x58025494
 8009828:	cccccccd 	.word	0xcccccccd
 800982c:	16009600 	.word	0x16009600
 8009830:	58025880 	.word	0x58025880
 8009834:	aaaaaaab 	.word	0xaaaaaaab
 8009838:	400204b8 	.word	0x400204b8
 800983c:	4002040f 	.word	0x4002040f
 8009840:	10008200 	.word	0x10008200
 8009844:	40020880 	.word	0x40020880

08009848 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	b2db      	uxtb	r3, r3
 8009856:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d04a      	beq.n	80098f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2b08      	cmp	r3, #8
 8009862:	d847      	bhi.n	80098f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a25      	ldr	r2, [pc, #148]	@ (8009900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d022      	beq.n	80098b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a24      	ldr	r2, [pc, #144]	@ (8009904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d01d      	beq.n	80098b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a22      	ldr	r2, [pc, #136]	@ (8009908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d018      	beq.n	80098b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a21      	ldr	r2, [pc, #132]	@ (800990c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d013      	beq.n	80098b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a1f      	ldr	r2, [pc, #124]	@ (8009910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d00e      	beq.n	80098b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a1e      	ldr	r2, [pc, #120]	@ (8009914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d009      	beq.n	80098b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d004      	beq.n	80098b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a1b      	ldr	r2, [pc, #108]	@ (800991c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d101      	bne.n	80098b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80098b4:	2301      	movs	r3, #1
 80098b6:	e000      	b.n	80098ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80098b8:	2300      	movs	r3, #0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00a      	beq.n	80098d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	4b17      	ldr	r3, [pc, #92]	@ (8009920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80098c2:	4413      	add	r3, r2
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	461a      	mov	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a15      	ldr	r2, [pc, #84]	@ (8009924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80098d0:	671a      	str	r2, [r3, #112]	@ 0x70
 80098d2:	e009      	b.n	80098e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	4b14      	ldr	r3, [pc, #80]	@ (8009928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80098d8:	4413      	add	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	461a      	mov	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a11      	ldr	r2, [pc, #68]	@ (800992c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80098e6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3b01      	subs	r3, #1
 80098ec:	2201      	movs	r2, #1
 80098ee:	409a      	lsls	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80098f4:	bf00      	nop
 80098f6:	3714      	adds	r7, #20
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr
 8009900:	58025408 	.word	0x58025408
 8009904:	5802541c 	.word	0x5802541c
 8009908:	58025430 	.word	0x58025430
 800990c:	58025444 	.word	0x58025444
 8009910:	58025458 	.word	0x58025458
 8009914:	5802546c 	.word	0x5802546c
 8009918:	58025480 	.word	0x58025480
 800991c:	58025494 	.word	0x58025494
 8009920:	1600963f 	.word	0x1600963f
 8009924:	58025940 	.word	0x58025940
 8009928:	1000823f 	.word	0x1000823f
 800992c:	40020940 	.word	0x40020940

08009930 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e0e3      	b.n	8009b0a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009948:	2b00      	cmp	r3, #0
 800994a:	d106      	bne.n	800995a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2223      	movs	r2, #35	@ 0x23
 8009950:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f008 fb05 	bl	8011f64 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800995a:	4b6e      	ldr	r3, [pc, #440]	@ (8009b14 <HAL_ETH_Init+0x1e4>)
 800995c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009960:	4a6c      	ldr	r2, [pc, #432]	@ (8009b14 <HAL_ETH_Init+0x1e4>)
 8009962:	f043 0302 	orr.w	r3, r3, #2
 8009966:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800996a:	4b6a      	ldr	r3, [pc, #424]	@ (8009b14 <HAL_ETH_Init+0x1e4>)
 800996c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009970:	f003 0302 	and.w	r3, r3, #2
 8009974:	60bb      	str	r3, [r7, #8]
 8009976:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	7a1b      	ldrb	r3, [r3, #8]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d103      	bne.n	8009988 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8009980:	2000      	movs	r0, #0
 8009982:	f7fd f82d 	bl	80069e0 <HAL_SYSCFG_ETHInterfaceSelect>
 8009986:	e003      	b.n	8009990 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009988:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800998c:	f7fd f828 	bl	80069e0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8009990:	4b61      	ldr	r3, [pc, #388]	@ (8009b18 <HAL_ETH_Init+0x1e8>)
 8009992:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	6812      	ldr	r2, [r2, #0]
 80099a2:	f043 0301 	orr.w	r3, r3, #1
 80099a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80099aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80099ac:	f7fc ffdc 	bl	8006968 <HAL_GetTick>
 80099b0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80099b2:	e011      	b.n	80099d8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80099b4:	f7fc ffd8 	bl	8006968 <HAL_GetTick>
 80099b8:	4602      	mov	r2, r0
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80099c2:	d909      	bls.n	80099d8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2204      	movs	r2, #4
 80099c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	22e0      	movs	r2, #224	@ 0xe0
 80099d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	e098      	b.n	8009b0a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 0301 	and.w	r3, r3, #1
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1e4      	bne.n	80099b4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 ff1c 	bl	800a828 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80099f0:	f002 feae 	bl	800c750 <HAL_RCC_GetHCLKFreq>
 80099f4:	4603      	mov	r3, r0
 80099f6:	4a49      	ldr	r2, [pc, #292]	@ (8009b1c <HAL_ETH_Init+0x1ec>)
 80099f8:	fba2 2303 	umull	r2, r3, r2, r3
 80099fc:	0c9a      	lsrs	r2, r3, #18
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3a01      	subs	r2, #1
 8009a04:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f001 f919 	bl	800ac40 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a16:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009a1a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	6812      	ldr	r2, [r2, #0]
 8009a22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009a2a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	f003 0303 	and.w	r3, r3, #3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d009      	beq.n	8009a4e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	22e0      	movs	r2, #224	@ 0xe0
 8009a46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e05d      	b.n	8009b0a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a56:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009a5a:	4b31      	ldr	r3, [pc, #196]	@ (8009b20 <HAL_ETH_Init+0x1f0>)
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	6952      	ldr	r2, [r2, #20]
 8009a62:	0051      	lsls	r1, r2, #1
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	6812      	ldr	r2, [r2, #0]
 8009a68:	430b      	orrs	r3, r1
 8009a6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009a6e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f001 f981 	bl	800ad7a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f001 f9c7 	bl	800ae0c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	3305      	adds	r3, #5
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	021a      	lsls	r2, r3, #8
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	4619      	mov	r1, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	430a      	orrs	r2, r1
 8009a98:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	3303      	adds	r3, #3
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	061a      	lsls	r2, r3, #24
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	3302      	adds	r3, #2
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	041b      	lsls	r3, r3, #16
 8009ab0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009abc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009aca:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009acc:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	4b11      	ldr	r3, [pc, #68]	@ (8009b24 <HAL_ETH_Init+0x1f4>)
 8009ade:	430b      	orrs	r3, r1
 8009ae0:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	4b0d      	ldr	r3, [pc, #52]	@ (8009b28 <HAL_ETH_Init+0x1f8>)
 8009af2:	430b      	orrs	r3, r1
 8009af4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2210      	movs	r2, #16
 8009b04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	58024400 	.word	0x58024400
 8009b18:	58000400 	.word	0x58000400
 8009b1c:	431bde83 	.word	0x431bde83
 8009b20:	ffff8001 	.word	0xffff8001
 8009b24:	0c020060 	.word	0x0c020060
 8009b28:	0c20c000 	.word	0x0c20c000

08009b2c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b3a:	2b10      	cmp	r3, #16
 8009b3c:	d165      	bne.n	8009c0a <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2223      	movs	r2, #35	@ 0x23
 8009b42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2204      	movs	r2, #4
 8009b50:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f9e4 	bl	8009f20 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b60:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	6812      	ldr	r2, [r2, #0]
 8009b68:	f043 0301 	orr.w	r3, r3, #1
 8009b6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009b70:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	6812      	ldr	r2, [r2, #0]
 8009b84:	f043 0301 	orr.w	r3, r3, #1
 8009b88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009b8c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b98:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	6812      	ldr	r2, [r2, #0]
 8009ba0:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8009ba4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009ba8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f042 0201 	orr.w	r2, r2, #1
 8009bbc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f042 0202 	orr.w	r2, r2, #2
 8009bce:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f042 0201 	orr.w	r2, r2, #1
 8009bde:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009be8:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8009bf4:	430b      	orrs	r3, r1
 8009bf6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009bfa:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2223      	movs	r2, #35	@ 0x23
 8009c02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	e000      	b.n	8009c0c <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
  }
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c22:	2b23      	cmp	r3, #35	@ 0x23
 8009c24:	d165      	bne.n	8009cf2 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2223      	movs	r2, #35	@ 0x23
 8009c2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c36:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	4b30      	ldr	r3, [pc, #192]	@ (8009d00 <HAL_ETH_Stop_IT+0xec>)
 8009c40:	400b      	ands	r3, r1
 8009c42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009c46:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c52:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	6812      	ldr	r2, [r2, #0]
 8009c5a:	f023 0301 	bic.w	r3, r3, #1
 8009c5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009c62:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	6812      	ldr	r2, [r2, #0]
 8009c76:	f023 0301 	bic.w	r3, r3, #1
 8009c7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009c7e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f022 0201 	bic.w	r2, r2, #1
 8009c90:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f042 0201 	orr.w	r2, r2, #1
 8009ca2:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f022 0202 	bic.w	r2, r2, #2
 8009cb4:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	60fb      	str	r3, [r7, #12]
 8009cba:	e00e      	b.n	8009cda <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	3212      	adds	r2, #18
 8009cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc6:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	60fb      	str	r3, [r7, #12]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2b03      	cmp	r3, #3
 8009cde:	d9ed      	bls.n	8009cbc <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2210      	movs	r2, #16
 8009cea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	e000      	b.n	8009cf4 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
  }
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3714      	adds	r7, #20
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	ffff2f3e 	.word	0xffff2f3e

08009d04 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d109      	bne.n	8009d28 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d1a:	f043 0201 	orr.w	r2, r3, #1
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e03a      	b.n	8009d9e <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d2e:	2b23      	cmp	r3, #35	@ 0x23
 8009d30:	d134      	bne.n	8009d9c <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f001 f8c2 	bl	800aec8 <ETH_Prepare_Tx_Descriptors>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d009      	beq.n	8009d5e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d50:	f043 0202 	orr.w	r2, r3, #2
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e01f      	b.n	8009d9e <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8009d5e:	f3bf 8f4f 	dsb	sy
}
 8009d62:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d68:	1c5a      	adds	r2, r3, #1
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d904      	bls.n	8009d80 <HAL_ETH_Transmit_IT+0x7c>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d7a:	1f1a      	subs	r2, r3, #4
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	3106      	adds	r1, #6
 8009d8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009d94:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	e000      	b.n	8009d9e <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
  }
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b088      	sub	sp, #32
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8009db0:	2300      	movs	r3, #0
 8009db2:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8009db4:	2300      	movs	r3, #0
 8009db6:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d109      	bne.n	8009dd2 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dc4:	f043 0201 	orr.w	r2, r3, #1
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e0a2      	b.n	8009f18 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dd8:	2b23      	cmp	r3, #35	@ 0x23
 8009dda:	d001      	beq.n	8009de0 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e09b      	b.n	8009f18 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009de4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	69fa      	ldr	r2, [r7, #28]
 8009dea:	3212      	adds	r2, #18
 8009dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df0:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009df6:	f1c3 0304 	rsb	r3, r3, #4
 8009dfa:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8009dfc:	e064      	b.n	8009ec8 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d007      	beq.n	8009e1a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d103      	bne.n	8009e2e <HAL_ETH_ReadData+0x88>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d03a      	beq.n	8009ea4 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d005      	beq.n	8009e46 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d005      	beq.n	8009e6e <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	68da      	ldr	r2, [r3, #12]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8009e7e:	461a      	mov	r2, r3
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	f008 fa50 	bl	8012328 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e8c:	1c5a      	adds	r2, r3, #1
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	441a      	add	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	61fb      	str	r3, [r7, #28]
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	2b03      	cmp	r3, #3
 8009eae:	d902      	bls.n	8009eb6 <HAL_ETH_ReadData+0x110>
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	3b04      	subs	r3, #4
 8009eb4:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	69fa      	ldr	r2, [r7, #28]
 8009eba:	3212      	adds	r2, #18
 8009ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec0:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	db06      	blt.n	8009ede <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d202      	bcs.n	8009ede <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8009ed8:	7cfb      	ldrb	r3, [r7, #19]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d08f      	beq.n	8009dfe <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	441a      	add	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f814 	bl	8009f20 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	69fa      	ldr	r2, [r7, #28]
 8009efc:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8009efe:	7cfb      	ldrb	r3, [r7, #19]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d108      	bne.n	8009f16 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	e000      	b.n	8009f18 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3720      	adds	r7, #32
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b088      	sub	sp, #32
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009f34:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	69fa      	ldr	r2, [r7, #28]
 8009f3a:	3212      	adds	r2, #18
 8009f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f40:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f46:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8009f48:	e038      	b.n	8009fbc <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d112      	bne.n	8009f78 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8009f52:	f107 0308 	add.w	r3, r7, #8
 8009f56:	4618      	mov	r0, r3
 8009f58:	f008 f9b6 	bl	80122c8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d102      	bne.n	8009f68 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8009f62:	2300      	movs	r3, #0
 8009f64:	74fb      	strb	r3, [r7, #19]
 8009f66:	e007      	b.n	8009f78 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	461a      	mov	r2, r3
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8009f78:	7cfb      	ldrb	r3, [r7, #19]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d01e      	beq.n	8009fbc <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d004      	beq.n	8009f90 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8009f8c:	60da      	str	r2, [r3, #12]
 8009f8e:	e003      	b.n	8009f98 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8009f96:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	61fb      	str	r3, [r7, #28]
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	2b03      	cmp	r3, #3
 8009fa2:	d902      	bls.n	8009faa <ETH_UpdateDescriptor+0x8a>
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	3b04      	subs	r3, #4
 8009fa8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	69fa      	ldr	r2, [r7, #28]
 8009fae:	3212      	adds	r2, #18
 8009fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb4:	617b      	str	r3, [r7, #20]
      desccount--;
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d002      	beq.n	8009fc8 <ETH_UpdateDescriptor+0xa8>
 8009fc2:	7cfb      	ldrb	r3, [r7, #19]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1c0      	bne.n	8009f4a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fcc:	69ba      	ldr	r2, [r7, #24]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d01b      	beq.n	800a00a <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	f003 0303 	and.w	r3, r3, #3
 8009fda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8009fdc:	f3bf 8f5f 	dmb	sy
}
 8009fe0:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6919      	ldr	r1, [r3, #16]
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	005b      	lsls	r3, r3, #1
 8009fec:	4413      	add	r3, r2
 8009fee:	00db      	lsls	r3, r3, #3
 8009ff0:	18ca      	adds	r2, r1, r3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ffa:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	69fa      	ldr	r2, [r7, #28]
 800a002:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	69ba      	ldr	r2, [r7, #24]
 800a008:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800a00a:	bf00      	nop
 800a00c:	3720      	adds	r7, #32
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b086      	sub	sp, #24
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	3318      	adds	r3, #24
 800a01e:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a024:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a02a:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800a02c:	2301      	movs	r3, #1
 800a02e:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800a030:	e047      	b.n	800a0c2 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800a032:	2301      	movs	r3, #1
 800a034:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	3b01      	subs	r3, #1
 800a03a:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	3304      	adds	r3, #4
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10a      	bne.n	800a062 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	3301      	adds	r3, #1
 800a050:	613b      	str	r3, [r7, #16]
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	2b03      	cmp	r3, #3
 800a056:	d902      	bls.n	800a05e <HAL_ETH_ReleaseTxPacket+0x4c>
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	3b04      	subs	r3, #4
 800a05c:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800a05e:	2300      	movs	r3, #0
 800a060:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800a062:	7bbb      	ldrb	r3, [r7, #14]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d02c      	beq.n	800a0c2 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68d9      	ldr	r1, [r3, #12]
 800a06c:	693a      	ldr	r2, [r7, #16]
 800a06e:	4613      	mov	r3, r2
 800a070:	005b      	lsls	r3, r3, #1
 800a072:	4413      	add	r3, r2
 800a074:	00db      	lsls	r3, r3, #3
 800a076:	440b      	add	r3, r1
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	db1f      	blt.n	800a0be <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	3304      	adds	r3, #4
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	4413      	add	r3, r2
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	4618      	mov	r0, r3
 800a08c:	f008 f9b4 	bl	80123f8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	3304      	adds	r3, #4
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	2200      	movs	r2, #0
 800a09c:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	613b      	str	r3, [r7, #16]
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	2b03      	cmp	r3, #3
 800a0a8:	d902      	bls.n	800a0b0 <HAL_ETH_ReleaseTxPacket+0x9e>
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	3b04      	subs	r3, #4
 800a0ae:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	697a      	ldr	r2, [r7, #20]
 800a0b4:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	693a      	ldr	r2, [r7, #16]
 800a0ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a0bc:	e001      	b.n	800a0c2 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d002      	beq.n	800a0ce <HAL_ETH_ReleaseTxPacket+0xbc>
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1b1      	bne.n	800a032 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3718      	adds	r7, #24
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b086      	sub	sp, #24
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a0e8:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0f2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800a0f6:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a100:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800a104:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 800a106:	4b6d      	ldr	r3, [pc, #436]	@ (800a2bc <HAL_ETH_IRQHandler+0x1e4>)
 800a108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a10a:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a112:	2b00      	cmp	r3, #0
 800a114:	d010      	beq.n	800a138 <HAL_ETH_IRQHandler+0x60>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00b      	beq.n	800a138 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a128:	461a      	mov	r2, r3
 800a12a:	f248 0340 	movw	r3, #32832	@ 0x8040
 800a12e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f007 fc44 	bl	80119c0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	f003 0301 	and.w	r3, r3, #1
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d010      	beq.n	800a164 <HAL_ETH_IRQHandler+0x8c>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f003 0301 	and.w	r3, r3, #1
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00b      	beq.n	800a164 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a154:	461a      	mov	r2, r3
 800a156:	f248 0301 	movw	r3, #32769	@ 0x8001
 800a15a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f007 fc3e 	bl	80119e0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d047      	beq.n	800a1fe <HAL_ETH_IRQHandler+0x126>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a174:	2b00      	cmp	r3, #0
 800a176:	d042      	beq.n	800a1fe <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a17e:	f043 0208 	orr.w	r2, r3, #8
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d01e      	beq.n	800a1d0 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a19a:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800a19e:	f241 1302 	movw	r3, #4354	@ 0x1102
 800a1a2:	4013      	ands	r3, r2
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1b2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	6812      	ldr	r2, [r2, #0]
 800a1ba:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800a1be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a1c2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	22e0      	movs	r2, #224	@ 0xe0
 800a1ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800a1ce:	e013      	b.n	800a1f8 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1d8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800a1dc:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 800a1f4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f007 fc01 	bl	8011a00 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a204:	2b00      	cmp	r3, #0
 800a206:	d104      	bne.n	800a212 <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d019      	beq.n	800a246 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a218:	f043 0210 	orr.w	r2, r3, #16
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	22e0      	movs	r2, #224	@ 0xe0
 800a234:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f007 fbe1 	bl	8011a00 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f003 0310 	and.w	r3, r3, #16
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00f      	beq.n	800a270 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a258:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f82c 	bl	800a2c0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	f003 0320 	and.w	r3, r3, #32
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00f      	beq.n	800a29a <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800a282:	f003 020f 	and.w	r2, r3, #15
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f821 	bl	800a2d4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d006      	beq.n	800a2b2 <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800a2a4:	4b05      	ldr	r3, [pc, #20]	@ (800a2bc <HAL_ETH_IRQHandler+0x1e4>)
 800a2a6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800a2aa:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f81b 	bl	800a2e8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 800a2b2:	bf00      	nop
 800a2b4:	3718      	adds	r7, #24
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	58000080 	.word	0x58000080

0800a2c0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
 800a308:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a312:	f003 0301 	and.w	r3, r3, #1
 800a316:	2b00      	cmp	r3, #0
 800a318:	d001      	beq.n	800a31e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e03e      	b.n	800a39c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a326:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	055b      	lsls	r3, r3, #21
 800a332:	4313      	orrs	r3, r2
 800a334:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	041b      	lsls	r3, r3, #16
 800a340:	4313      	orrs	r3, r2
 800a342:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	f043 030c 	orr.w	r3, r3, #12
 800a34a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	f043 0301 	orr.w	r3, r3, #1
 800a352:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	697a      	ldr	r2, [r7, #20]
 800a35a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800a35e:	f7fc fb03 	bl	8006968 <HAL_GetTick>
 800a362:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800a364:	e009      	b.n	800a37a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800a366:	f7fc faff 	bl	8006968 <HAL_GetTick>
 800a36a:	4602      	mov	r2, r0
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a374:	d901      	bls.n	800a37a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e010      	b.n	800a39c <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a382:	f003 0301 	and.w	r3, r3, #1
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1ed      	bne.n	800a366 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a392:	b29b      	uxth	r3, r3
 800a394:	461a      	mov	r2, r3
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3718      	adds	r7, #24
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b086      	sub	sp, #24
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
 800a3b0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e03c      	b.n	800a440 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a3ce:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	055b      	lsls	r3, r3, #21
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	041b      	lsls	r3, r3, #16
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	f023 030c 	bic.w	r3, r3, #12
 800a3f2:	f043 0304 	orr.w	r3, r3, #4
 800a3f6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	f043 0301 	orr.w	r3, r3, #1
 800a3fe:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	b29a      	uxth	r2, r3
 800a404:	4b10      	ldr	r3, [pc, #64]	@ (800a448 <HAL_ETH_WritePHYRegister+0xa4>)
 800a406:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800a40a:	4a0f      	ldr	r2, [pc, #60]	@ (800a448 <HAL_ETH_WritePHYRegister+0xa4>)
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800a412:	f7fc faa9 	bl	8006968 <HAL_GetTick>
 800a416:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800a418:	e009      	b.n	800a42e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800a41a:	f7fc faa5 	bl	8006968 <HAL_GetTick>
 800a41e:	4602      	mov	r2, r0
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a428:	d901      	bls.n	800a42e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800a42a:	2301      	movs	r3, #1
 800a42c:	e008      	b.n	800a440 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1ed      	bne.n	800a41a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3718      	adds	r7, #24
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	40028000 	.word	0x40028000

0800a44c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e1c3      	b.n	800a7e8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f003 020c 	and.w	r2, r3, #12
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 0310 	and.w	r3, r3, #16
 800a478:	2b00      	cmp	r3, #0
 800a47a:	bf14      	ite	ne
 800a47c:	2301      	movne	r3, #1
 800a47e:	2300      	moveq	r3, #0
 800a480:	b2db      	uxtb	r3, r3
 800a482:	461a      	mov	r2, r3
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	bf0c      	ite	eq
 800a4a6:	2301      	moveq	r3, #1
 800a4a8:	2300      	movne	r3, #0
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	bf14      	ite	ne
 800a4c2:	2301      	movne	r3, #1
 800a4c4:	2300      	moveq	r3, #0
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	bf0c      	ite	eq
 800a4dc:	2301      	moveq	r3, #1
 800a4de:	2300      	movne	r3, #0
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800a4ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	bf14      	ite	ne
 800a4f6:	2301      	movne	r3, #1
 800a4f8:	2300      	moveq	r3, #0
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	bf14      	ite	ne
 800a510:	2301      	movne	r3, #1
 800a512:	2300      	moveq	r3, #0
 800a514:	b2db      	uxtb	r3, r3
 800a516:	461a      	mov	r2, r3
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a542:	2b00      	cmp	r3, #0
 800a544:	bf14      	ite	ne
 800a546:	2301      	movne	r3, #1
 800a548:	2300      	moveq	r3, #0
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	461a      	mov	r2, r3
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	bf0c      	ite	eq
 800a560:	2301      	moveq	r3, #1
 800a562:	2300      	movne	r3, #0
 800a564:	b2db      	uxtb	r3, r3
 800a566:	461a      	mov	r2, r3
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a576:	2b00      	cmp	r3, #0
 800a578:	bf0c      	ite	eq
 800a57a:	2301      	moveq	r3, #1
 800a57c:	2300      	movne	r3, #0
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	461a      	mov	r2, r3
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a590:	2b00      	cmp	r3, #0
 800a592:	bf14      	ite	ne
 800a594:	2301      	movne	r3, #1
 800a596:	2300      	moveq	r3, #0
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	461a      	mov	r2, r3
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	bf14      	ite	ne
 800a5ae:	2301      	movne	r3, #1
 800a5b0:	2300      	moveq	r3, #0
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	bf14      	ite	ne
 800a5c8:	2301      	movne	r3, #1
 800a5ca:	2300      	moveq	r3, #0
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800a5da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	bf14      	ite	ne
 800a5e2:	2301      	movne	r3, #1
 800a5e4:	2300      	moveq	r3, #0
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a606:	2b00      	cmp	r3, #0
 800a608:	bf14      	ite	ne
 800a60a:	2301      	movne	r3, #1
 800a60c:	2300      	moveq	r3, #0
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	461a      	mov	r2, r3
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	bf0c      	ite	eq
 800a640:	2301      	moveq	r3, #1
 800a642:	2300      	movne	r3, #0
 800a644:	b2db      	uxtb	r3, r3
 800a646:	461a      	mov	r2, r3
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a658:	2b00      	cmp	r3, #0
 800a65a:	bf14      	ite	ne
 800a65c:	2301      	movne	r3, #1
 800a65e:	2300      	moveq	r3, #0
 800a660:	b2db      	uxtb	r3, r3
 800a662:	461a      	mov	r2, r3
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800a670:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a674:	2b00      	cmp	r3, #0
 800a676:	bf14      	ite	ne
 800a678:	2301      	movne	r3, #1
 800a67a:	2300      	moveq	r3, #0
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 800a690:	2b00      	cmp	r3, #0
 800a692:	bf14      	ite	ne
 800a694:	2301      	movne	r3, #1
 800a696:	2300      	moveq	r3, #0
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	0e5b      	lsrs	r3, r3, #25
 800a6aa:	f003 021f 	and.w	r2, r3, #31
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	bf14      	ite	ne
 800a6c0:	2301      	movne	r3, #1
 800a6c2:	2300      	moveq	r3, #0
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	f003 020f 	and.w	r2, r3, #15
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6e2:	f003 0302 	and.w	r3, r3, #2
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	bf14      	ite	ne
 800a6ea:	2301      	movne	r3, #1
 800a6ec:	2300      	moveq	r3, #0
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a702:	2b00      	cmp	r3, #0
 800a704:	bf0c      	ite	eq
 800a706:	2301      	moveq	r3, #1
 800a708:	2300      	movne	r3, #0
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	461a      	mov	r2, r3
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a71a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a728:	0c1b      	lsrs	r3, r3, #16
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a738:	f003 0301 	and.w	r3, r3, #1
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	bf14      	ite	ne
 800a740:	2301      	movne	r3, #1
 800a742:	2300      	moveq	r3, #0
 800a744:	b2db      	uxtb	r3, r3
 800a746:	461a      	mov	r2, r3
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a756:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	bf14      	ite	ne
 800a75e:	2301      	movne	r3, #1
 800a760:	2300      	moveq	r3, #0
 800a762:	b2db      	uxtb	r3, r3
 800a764:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800a774:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800a784:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800a794:	f003 0308 	and.w	r3, r3, #8
 800a798:	2b00      	cmp	r3, #0
 800a79a:	bf14      	ite	ne
 800a79c:	2301      	movne	r3, #1
 800a79e:	2300      	moveq	r3, #0
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800a7b2:	f003 0310 	and.w	r3, r3, #16
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	bf14      	ite	ne
 800a7ba:	2301      	movne	r3, #1
 800a7bc:	2300      	moveq	r3, #0
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800a7d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	bf0c      	ite	eq
 800a7d8:	2301      	moveq	r3, #1
 800a7da:	2300      	movne	r3, #0
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d101      	bne.n	800a808 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	e00b      	b.n	800a820 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a80e:	2b10      	cmp	r3, #16
 800a810:	d105      	bne.n	800a81e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800a812:	6839      	ldr	r1, [r7, #0]
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 f871 	bl	800a8fc <ETH_SetMACConfig>

    return HAL_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	e000      	b.n	800a820 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
  }
}
 800a820:	4618      	mov	r0, r3
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a838:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a840:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800a842:	f001 ff85 	bl	800c750 <HAL_RCC_GetHCLKFreq>
 800a846:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	4a1a      	ldr	r2, [pc, #104]	@ (800a8b4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d804      	bhi.n	800a85a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a856:	60fb      	str	r3, [r7, #12]
 800a858:	e022      	b.n	800a8a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	4a16      	ldr	r2, [pc, #88]	@ (800a8b8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d204      	bcs.n	800a86c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a868:	60fb      	str	r3, [r7, #12]
 800a86a:	e019      	b.n	800a8a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	4a13      	ldr	r2, [pc, #76]	@ (800a8bc <HAL_ETH_SetMDIOClockRange+0x94>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d915      	bls.n	800a8a0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	4a12      	ldr	r2, [pc, #72]	@ (800a8c0 <HAL_ETH_SetMDIOClockRange+0x98>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d804      	bhi.n	800a886 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a882:	60fb      	str	r3, [r7, #12]
 800a884:	e00c      	b.n	800a8a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	4a0e      	ldr	r2, [pc, #56]	@ (800a8c4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d804      	bhi.n	800a898 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a894:	60fb      	str	r3, [r7, #12]
 800a896:	e003      	b.n	800a8a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800a89e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800a8aa:	bf00      	nop
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	02160ebf 	.word	0x02160ebf
 800a8b8:	03938700 	.word	0x03938700
 800a8bc:	05f5e0ff 	.word	0x05f5e0ff
 800a8c0:	08f0d17f 	.word	0x08f0d17f
 800a8c4:	0ee6b27f 	.word	0x0ee6b27f

0800a8c8 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	370c      	adds	r7, #12
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b083      	sub	sp, #12
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800a90e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	791b      	ldrb	r3, [r3, #4]
 800a914:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800a916:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	7b1b      	ldrb	r3, [r3, #12]
 800a91c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a91e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	7b5b      	ldrb	r3, [r3, #13]
 800a924:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a926:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	7b9b      	ldrb	r3, [r3, #14]
 800a92c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a92e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	7bdb      	ldrb	r3, [r3, #15]
 800a934:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a936:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a938:	683a      	ldr	r2, [r7, #0]
 800a93a:	7c12      	ldrb	r2, [r2, #16]
 800a93c:	2a00      	cmp	r2, #0
 800a93e:	d102      	bne.n	800a946 <ETH_SetMACConfig+0x4a>
 800a940:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800a944:	e000      	b.n	800a948 <ETH_SetMACConfig+0x4c>
 800a946:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a948:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a94a:	683a      	ldr	r2, [r7, #0]
 800a94c:	7c52      	ldrb	r2, [r2, #17]
 800a94e:	2a00      	cmp	r2, #0
 800a950:	d102      	bne.n	800a958 <ETH_SetMACConfig+0x5c>
 800a952:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a956:	e000      	b.n	800a95a <ETH_SetMACConfig+0x5e>
 800a958:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a95a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	7c9b      	ldrb	r3, [r3, #18]
 800a960:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a962:	431a      	orrs	r2, r3
               macconf->Speed |
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800a968:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800a96e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	7f1b      	ldrb	r3, [r3, #28]
 800a974:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800a976:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	7f5b      	ldrb	r3, [r3, #29]
 800a97c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a97e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a980:	683a      	ldr	r2, [r7, #0]
 800a982:	7f92      	ldrb	r2, [r2, #30]
 800a984:	2a00      	cmp	r2, #0
 800a986:	d102      	bne.n	800a98e <ETH_SetMACConfig+0x92>
 800a988:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a98c:	e000      	b.n	800a990 <ETH_SetMACConfig+0x94>
 800a98e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a990:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	7fdb      	ldrb	r3, [r3, #31]
 800a996:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a998:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a99a:	683a      	ldr	r2, [r7, #0]
 800a99c:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a9a0:	2a00      	cmp	r2, #0
 800a9a2:	d102      	bne.n	800a9aa <ETH_SetMACConfig+0xae>
 800a9a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a9a8:	e000      	b.n	800a9ac <ETH_SetMACConfig+0xb0>
 800a9aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a9ac:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a9b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a9ba:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800a9bc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	4b56      	ldr	r3, [pc, #344]	@ (800ab28 <ETH_SetMACConfig+0x22c>)
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	6812      	ldr	r2, [r2, #0]
 800a9d4:	68f9      	ldr	r1, [r7, #12]
 800a9d6:	430b      	orrs	r3, r1
 800a9d8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9de:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a9e6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a9e8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a9f0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a9f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a9fa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a9fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800aa04:	2a00      	cmp	r2, #0
 800aa06:	d102      	bne.n	800aa0e <ETH_SetMACConfig+0x112>
 800aa08:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800aa0c:	e000      	b.n	800aa10 <ETH_SetMACConfig+0x114>
 800aa0e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800aa10:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800aa16:	4313      	orrs	r3, r2
 800aa18:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	685a      	ldr	r2, [r3, #4]
 800aa20:	4b42      	ldr	r3, [pc, #264]	@ (800ab2c <ETH_SetMACConfig+0x230>)
 800aa22:	4013      	ands	r3, r2
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	6812      	ldr	r2, [r2, #0]
 800aa28:	68f9      	ldr	r1, [r7, #12]
 800aa2a:	430b      	orrs	r3, r1
 800aa2c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aa34:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	68da      	ldr	r2, [r3, #12]
 800aa44:	4b3a      	ldr	r3, [pc, #232]	@ (800ab30 <ETH_SetMACConfig+0x234>)
 800aa46:	4013      	ands	r3, r2
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	6812      	ldr	r2, [r2, #0]
 800aa4c:	68f9      	ldr	r1, [r7, #12]
 800aa4e:	430b      	orrs	r3, r1
 800aa50:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800aa58:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800aa5e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800aa66:	2a00      	cmp	r2, #0
 800aa68:	d101      	bne.n	800aa6e <ETH_SetMACConfig+0x172>
 800aa6a:	2280      	movs	r2, #128	@ 0x80
 800aa6c:	e000      	b.n	800aa70 <ETH_SetMACConfig+0x174>
 800aa6e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800aa70:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa76:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aa82:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800aa86:	4013      	ands	r3, r2
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	6812      	ldr	r2, [r2, #0]
 800aa8c:	68f9      	ldr	r1, [r7, #12]
 800aa8e:	430b      	orrs	r3, r1
 800aa90:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800aa98:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800aaa0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaae:	f023 0103 	bic.w	r1, r3, #3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	430a      	orrs	r2, r1
 800aaba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800aac6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	430a      	orrs	r2, r1
 800aad4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800aadc:	683a      	ldr	r2, [r7, #0]
 800aade:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800aae2:	2a00      	cmp	r2, #0
 800aae4:	d101      	bne.n	800aaea <ETH_SetMACConfig+0x1ee>
 800aae6:	2240      	movs	r2, #64	@ 0x40
 800aae8:	e000      	b.n	800aaec <ETH_SetMACConfig+0x1f0>
 800aaea:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800aaec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800aaf4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800aaf6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800aafe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800ab00:	4313      	orrs	r3, r2
 800ab02:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800ab0c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	430a      	orrs	r2, r1
 800ab18:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800ab1c:	bf00      	nop
 800ab1e:	3714      	adds	r7, #20
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr
 800ab28:	00048083 	.word	0x00048083
 800ab2c:	c0f88000 	.word	0xc0f88000
 800ab30:	fffffef0 	.word	0xfffffef0

0800ab34 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	4b38      	ldr	r3, [pc, #224]	@ (800ac2c <ETH_SetDMAConfig+0xf8>)
 800ab4a:	4013      	ands	r3, r2
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	6811      	ldr	r1, [r2, #0]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	6812      	ldr	r2, [r2, #0]
 800ab54:	430b      	orrs	r3, r1
 800ab56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ab5a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	791b      	ldrb	r3, [r3, #4]
 800ab60:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800ab66:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	7b1b      	ldrb	r3, [r3, #12]
 800ab6c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab7a:	685a      	ldr	r2, [r3, #4]
 800ab7c:	4b2c      	ldr	r3, [pc, #176]	@ (800ac30 <ETH_SetDMAConfig+0xfc>)
 800ab7e:	4013      	ands	r3, r2
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	6812      	ldr	r2, [r2, #0]
 800ab84:	68f9      	ldr	r1, [r7, #12]
 800ab86:	430b      	orrs	r3, r1
 800ab88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ab8c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	7b5b      	ldrb	r3, [r3, #13]
 800ab92:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aba4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800aba8:	4b22      	ldr	r3, [pc, #136]	@ (800ac34 <ETH_SetDMAConfig+0x100>)
 800abaa:	4013      	ands	r3, r2
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	6812      	ldr	r2, [r2, #0]
 800abb0:	68f9      	ldr	r1, [r7, #12]
 800abb2:	430b      	orrs	r3, r1
 800abb4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800abb8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	7d1b      	ldrb	r3, [r3, #20]
 800abc4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800abc6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	7f5b      	ldrb	r3, [r3, #29]
 800abcc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800abce:	4313      	orrs	r3, r2
 800abd0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abda:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800abde:	4b16      	ldr	r3, [pc, #88]	@ (800ac38 <ETH_SetDMAConfig+0x104>)
 800abe0:	4013      	ands	r3, r2
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	6812      	ldr	r2, [r2, #0]
 800abe6:	68f9      	ldr	r1, [r7, #12]
 800abe8:	430b      	orrs	r3, r1
 800abea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800abee:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	7f1b      	ldrb	r3, [r3, #28]
 800abf6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800abfc:	4313      	orrs	r3, r2
 800abfe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac08:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800ac0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ac3c <ETH_SetDMAConfig+0x108>)
 800ac0e:	4013      	ands	r3, r2
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	6812      	ldr	r2, [r2, #0]
 800ac14:	68f9      	ldr	r1, [r7, #12]
 800ac16:	430b      	orrs	r3, r1
 800ac18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ac1c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800ac20:	bf00      	nop
 800ac22:	3714      	adds	r7, #20
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr
 800ac2c:	ffff87fd 	.word	0xffff87fd
 800ac30:	ffff2ffe 	.word	0xffff2ffe
 800ac34:	fffec000 	.word	0xfffec000
 800ac38:	ffc0efef 	.word	0xffc0efef
 800ac3c:	7fc0ffff 	.word	0x7fc0ffff

0800ac40 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b0a4      	sub	sp, #144	@ 0x90
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800ac52:	2300      	movs	r3, #0
 800ac54:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800ac64:	2301      	movs	r3, #1
 800ac66:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800ac70:	2300      	movs	r3, #0
 800ac72:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800ac76:	2301      	movs	r3, #1
 800ac78:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800ac7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ac80:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800ac82:	2300      	movs	r3, #0
 800ac84:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800ac92:	2300      	movs	r3, #0
 800ac94:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800ac98:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800ac9c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800aca4:	2300      	movs	r3, #0
 800aca6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800aca8:	2301      	movs	r3, #1
 800acaa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800acae:	2300      	movs	r3, #0
 800acb0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800acb4:	2300      	movs	r3, #0
 800acb6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800acba:	2300      	movs	r3, #0
 800acbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800acbe:	2300      	movs	r3, #0
 800acc0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800acc2:	2300      	movs	r3, #0
 800acc4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800acc6:	2300      	movs	r3, #0
 800acc8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800accc:	2300      	movs	r3, #0
 800acce:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800acd2:	2301      	movs	r3, #1
 800acd4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800acd8:	2320      	movs	r3, #32
 800acda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800acde:	2301      	movs	r3, #1
 800ace0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800ace4:	2300      	movs	r3, #0
 800ace6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800acea:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800acee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800acf0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800acf4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800acf6:	2300      	movs	r3, #0
 800acf8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800acfc:	2302      	movs	r3, #2
 800acfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800ad02:	2300      	movs	r3, #0
 800ad04:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800ad14:	2301      	movs	r3, #1
 800ad16:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800ad24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ad28:	4619      	mov	r1, r3
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7ff fde6 	bl	800a8fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800ad30:	2301      	movs	r3, #1
 800ad32:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800ad34:	2301      	movs	r3, #1
 800ad36:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800ad42:	2300      	movs	r3, #0
 800ad44:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800ad46:	2300      	movs	r3, #0
 800ad48:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800ad4a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ad4e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800ad50:	2300      	movs	r3, #0
 800ad52:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800ad54:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ad58:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800ad60:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800ad64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800ad66:	f107 0308 	add.w	r3, r7, #8
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f7ff fee1 	bl	800ab34 <ETH_SetDMAConfig>
}
 800ad72:	bf00      	nop
 800ad74:	3790      	adds	r7, #144	@ 0x90
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}

0800ad7a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b085      	sub	sp, #20
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800ad82:	2300      	movs	r3, #0
 800ad84:	60fb      	str	r3, [r7, #12]
 800ad86:	e01d      	b.n	800adc4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	68d9      	ldr	r1, [r3, #12]
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	005b      	lsls	r3, r3, #1
 800ad92:	4413      	add	r3, r2
 800ad94:	00db      	lsls	r3, r3, #3
 800ad96:	440b      	add	r3, r1
 800ad98:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	2200      	movs	r2, #0
 800ada4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	2200      	movs	r2, #0
 800adaa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	2200      	movs	r2, #0
 800adb0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800adb2:	68b9      	ldr	r1, [r7, #8]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	3206      	adds	r2, #6
 800adba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	3301      	adds	r3, #1
 800adc2:	60fb      	str	r3, [r7, #12]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2b03      	cmp	r3, #3
 800adc8:	d9de      	bls.n	800ad88 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800add8:	461a      	mov	r2, r3
 800adda:	2303      	movs	r3, #3
 800addc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	68da      	ldr	r2, [r3, #12]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800adec:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	68da      	ldr	r2, [r3, #12]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800adfc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800ae00:	bf00      	nop
 800ae02:	3714      	adds	r7, #20
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800ae14:	2300      	movs	r3, #0
 800ae16:	60fb      	str	r3, [r7, #12]
 800ae18:	e023      	b.n	800ae62 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6919      	ldr	r1, [r3, #16]
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	4613      	mov	r3, r2
 800ae22:	005b      	lsls	r3, r3, #1
 800ae24:	4413      	add	r3, r2
 800ae26:	00db      	lsls	r3, r3, #3
 800ae28:	440b      	add	r3, r1
 800ae2a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	2200      	movs	r2, #0
 800ae36:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	2200      	movs	r2, #0
 800ae42:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	2200      	movs	r2, #0
 800ae48:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800ae50:	68b9      	ldr	r1, [r7, #8]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	3212      	adds	r2, #18
 800ae58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	60fb      	str	r3, [r7, #12]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2b03      	cmp	r3, #3
 800ae66:	d9d8      	bls.n	800ae1a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae8e:	461a      	mov	r2, r3
 800ae90:	2303      	movs	r3, #3
 800ae92:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	691a      	ldr	r2, [r3, #16]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aea2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aeb6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800aeba:	bf00      	nop
 800aebc:	3714      	adds	r7, #20
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
	...

0800aec8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b091      	sub	sp, #68	@ 0x44
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	3318      	adds	r3, #24
 800aed8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800aeda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800aee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800aee6:	2300      	movs	r3, #0
 800aee8:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800aeea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aeee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef2:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800aefa:	2300      	movs	r3, #0
 800aefc:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800aefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af0a:	d007      	beq.n	800af1c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800af0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af10:	3304      	adds	r3, #4
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d001      	beq.n	800af20 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800af1c:	2302      	movs	r3, #2
 800af1e:	e266      	b.n	800b3ee <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f003 0304 	and.w	r3, r3, #4
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d044      	beq.n	800afb6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800af2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af2e:	68da      	ldr	r2, [r3, #12]
 800af30:	4b75      	ldr	r3, [pc, #468]	@ (800b108 <ETH_Prepare_Tx_Descriptors+0x240>)
 800af32:	4013      	ands	r3, r2
 800af34:	68ba      	ldr	r2, [r7, #8]
 800af36:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800af38:	431a      	orrs	r2, r3
 800af3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800af3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800af46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af48:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800af58:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f003 0308 	and.w	r3, r3, #8
 800af62:	2b00      	cmp	r3, #0
 800af64:	d027      	beq.n	800afb6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800af66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af70:	041b      	lsls	r3, r3, #16
 800af72:	431a      	orrs	r2, r3
 800af74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af76:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800af78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800af80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af82:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800af84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af90:	431a      	orrs	r2, r3
 800af92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af94:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800afa4:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800afb4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f003 0310 	and.w	r3, r3, #16
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00e      	beq.n	800afe0 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800afc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc4:	689a      	ldr	r2, [r3, #8]
 800afc6:	4b51      	ldr	r3, [pc, #324]	@ (800b10c <ETH_Prepare_Tx_Descriptors+0x244>)
 800afc8:	4013      	ands	r3, r2
 800afca:	68ba      	ldr	r2, [r7, #8]
 800afcc:	6992      	ldr	r2, [r2, #24]
 800afce:	431a      	orrs	r2, r3
 800afd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800afd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800afdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afde:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f003 0304 	and.w	r3, r3, #4
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d105      	bne.n	800aff8 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f003 0310 	and.w	r3, r3, #16
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d036      	beq.n	800b066 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800aff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b002:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800b004:	f3bf 8f5f 	dmb	sy
}
 800b008:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800b00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b014:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800b016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b018:	3301      	adds	r3, #1
 800b01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b01c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b01e:	2b03      	cmp	r3, #3
 800b020:	d902      	bls.n	800b028 <ETH_Prepare_Tx_Descriptors+0x160>
 800b022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b024:	3b04      	subs	r3, #4
 800b026:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b02a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b02c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b030:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 800b032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b034:	3301      	adds	r3, #1
 800b036:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800b038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b040:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b044:	d10f      	bne.n	800b066 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800b046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b048:	6a3a      	ldr	r2, [r7, #32]
 800b04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b04e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800b050:	f3bf 8f5f 	dmb	sy
}
 800b054:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800b056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b060:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800b062:	2302      	movs	r3, #2
 800b064:	e1c3      	b.n	800b3ee <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800b066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b068:	3301      	adds	r3, #1
 800b06a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800b06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	461a      	mov	r2, r3
 800b072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b074:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800b076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b078:	689a      	ldr	r2, [r3, #8]
 800b07a:	4b24      	ldr	r3, [pc, #144]	@ (800b10c <ETH_Prepare_Tx_Descriptors+0x244>)
 800b07c:	4013      	ands	r3, r2
 800b07e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b080:	6852      	ldr	r2, [r2, #4]
 800b082:	431a      	orrs	r2, r3
 800b084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b086:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 800b088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d012      	beq.n	800b0b6 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 800b090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800b096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	461a      	mov	r2, r3
 800b09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b09e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a2:	689a      	ldr	r2, [r3, #8]
 800b0a4:	4b1a      	ldr	r3, [pc, #104]	@ (800b110 <ETH_Prepare_Tx_Descriptors+0x248>)
 800b0a6:	4013      	ands	r3, r2
 800b0a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0aa:	6852      	ldr	r2, [r2, #4]
 800b0ac:	0412      	lsls	r2, r2, #16
 800b0ae:	431a      	orrs	r2, r3
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b2:	609a      	str	r2, [r3, #8]
 800b0b4:	e008      	b.n	800b0c8 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800b0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0be:	689a      	ldr	r2, [r3, #8]
 800b0c0:	4b13      	ldr	r3, [pc, #76]	@ (800b110 <ETH_Prepare_Tx_Descriptors+0x248>)
 800b0c2:	4013      	ands	r3, r2
 800b0c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0c6:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 0310 	and.w	r3, r3, #16
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d021      	beq.n	800b118 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800b0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	6a1b      	ldr	r3, [r3, #32]
 800b0e0:	04db      	lsls	r3, r3, #19
 800b0e2:	431a      	orrs	r2, r3
 800b0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e6:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ea:	68da      	ldr	r2, [r3, #12]
 800b0ec:	4b09      	ldr	r3, [pc, #36]	@ (800b114 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800b0ee:	4013      	ands	r3, r2
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	69d2      	ldr	r2, [r2, #28]
 800b0f4:	431a      	orrs	r2, r3
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800b0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800b102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b104:	60da      	str	r2, [r3, #12]
 800b106:	e02e      	b.n	800b166 <ETH_Prepare_Tx_Descriptors+0x29e>
 800b108:	ffff0000 	.word	0xffff0000
 800b10c:	ffffc000 	.word	0xffffc000
 800b110:	c000ffff 	.word	0xc000ffff
 800b114:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800b118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b11a:	68da      	ldr	r2, [r3, #12]
 800b11c:	4b7b      	ldr	r3, [pc, #492]	@ (800b30c <ETH_Prepare_Tx_Descriptors+0x444>)
 800b11e:	4013      	ands	r3, r2
 800b120:	68ba      	ldr	r2, [r7, #8]
 800b122:	6852      	ldr	r2, [r2, #4]
 800b124:	431a      	orrs	r2, r3
 800b126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b128:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 0301 	and.w	r3, r3, #1
 800b132:	2b00      	cmp	r3, #0
 800b134:	d008      	beq.n	800b148 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800b136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	695b      	ldr	r3, [r3, #20]
 800b142:	431a      	orrs	r2, r3
 800b144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b146:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 0320 	and.w	r3, r3, #32
 800b150:	2b00      	cmp	r3, #0
 800b152:	d008      	beq.n	800b166 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800b154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	431a      	orrs	r2, r3
 800b162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b164:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 0304 	and.w	r3, r3, #4
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d008      	beq.n	800b184 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800b172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b17e:	431a      	orrs	r2, r3
 800b180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b182:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800b184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800b190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800b198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b19a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800b19c:	f3bf 8f5f 	dmb	sy
}
 800b1a0:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ac:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 0302 	and.w	r3, r3, #2
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	f000 80da 	beq.w	800b370 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800b1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	431a      	orrs	r2, r3
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1cc:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800b1ce:	e0cf      	b.n	800b370 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800b1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1da:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800b1dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1de:	3301      	adds	r3, #1
 800b1e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1e4:	2b03      	cmp	r3, #3
 800b1e6:	d902      	bls.n	800b1ee <ETH_Prepare_Tx_Descriptors+0x326>
 800b1e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1ea:	3b04      	subs	r3, #4
 800b1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800b1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b202:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800b204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b20c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b210:	d007      	beq.n	800b222 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800b212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b216:	3304      	adds	r3, #4
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	4413      	add	r3, r2
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d029      	beq.n	800b276 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800b222:	6a3b      	ldr	r3, [r7, #32]
 800b224:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b228:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b22a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b22e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800b230:	2300      	movs	r3, #0
 800b232:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b234:	e019      	b.n	800b26a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800b236:	f3bf 8f5f 	dmb	sy
}
 800b23a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800b23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b246:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800b248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b24a:	3301      	adds	r3, #1
 800b24c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b24e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b250:	2b03      	cmp	r3, #3
 800b252:	d902      	bls.n	800b25a <ETH_Prepare_Tx_Descriptors+0x392>
 800b254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b256:	3b04      	subs	r3, #4
 800b258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b25c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b262:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800b264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b266:	3301      	adds	r3, #1
 800b268:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b26a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b26c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b26e:	429a      	cmp	r2, r3
 800b270:	d3e1      	bcc.n	800b236 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800b272:	2302      	movs	r3, #2
 800b274:	e0bb      	b.n	800b3ee <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 800b276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b278:	3301      	adds	r3, #1
 800b27a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800b27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800b282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	461a      	mov	r2, r3
 800b288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800b28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28e:	689a      	ldr	r2, [r3, #8]
 800b290:	4b1f      	ldr	r3, [pc, #124]	@ (800b310 <ETH_Prepare_Tx_Descriptors+0x448>)
 800b292:	4013      	ands	r3, r2
 800b294:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b296:	6852      	ldr	r2, [r2, #4]
 800b298:	431a      	orrs	r2, r3
 800b29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800b29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d012      	beq.n	800b2cc <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800b2a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800b2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b8:	689a      	ldr	r2, [r3, #8]
 800b2ba:	4b16      	ldr	r3, [pc, #88]	@ (800b314 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800b2bc:	4013      	ands	r3, r2
 800b2be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2c0:	6852      	ldr	r2, [r2, #4]
 800b2c2:	0412      	lsls	r2, r2, #16
 800b2c4:	431a      	orrs	r2, r3
 800b2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c8:	609a      	str	r2, [r3, #8]
 800b2ca:	e008      	b.n	800b2de <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d4:	689a      	ldr	r2, [r3, #8]
 800b2d6:	4b0f      	ldr	r3, [pc, #60]	@ (800b314 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800b2d8:	4013      	ands	r3, r2
 800b2da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2dc:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f003 0310 	and.w	r3, r3, #16
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d018      	beq.n	800b31c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ec:	68da      	ldr	r2, [r3, #12]
 800b2ee:	4b0a      	ldr	r3, [pc, #40]	@ (800b318 <ETH_Prepare_Tx_Descriptors+0x450>)
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	69d2      	ldr	r2, [r2, #28]
 800b2f6:	431a      	orrs	r2, r3
 800b2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2fa:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800b2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800b304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b306:	60da      	str	r2, [r3, #12]
 800b308:	e020      	b.n	800b34c <ETH_Prepare_Tx_Descriptors+0x484>
 800b30a:	bf00      	nop
 800b30c:	ffff8000 	.word	0xffff8000
 800b310:	ffffc000 	.word	0xffffc000
 800b314:	c000ffff 	.word	0xc000ffff
 800b318:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800b31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31e:	68da      	ldr	r2, [r3, #12]
 800b320:	4b36      	ldr	r3, [pc, #216]	@ (800b3fc <ETH_Prepare_Tx_Descriptors+0x534>)
 800b322:	4013      	ands	r3, r2
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	6852      	ldr	r2, [r2, #4]
 800b328:	431a      	orrs	r2, r3
 800b32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f003 0301 	and.w	r3, r3, #1
 800b336:	2b00      	cmp	r3, #0
 800b338:	d008      	beq.n	800b34c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800b33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	695b      	ldr	r3, [r3, #20]
 800b346:	431a      	orrs	r2, r3
 800b348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800b34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b34e:	3301      	adds	r3, #1
 800b350:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800b352:	f3bf 8f5f 	dmb	sy
}
 800b356:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800b358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b362:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800b364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800b36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800b370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	2b00      	cmp	r3, #0
 800b376:	f47f af2b 	bne.w	800b1d0 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d006      	beq.n	800b38e <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800b380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b38a:	609a      	str	r2, [r3, #8]
 800b38c:	e005      	b.n	800b39a <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800b38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b398:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800b39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800b3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b3aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b3ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	440b      	add	r3, r1
 800b3b4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b3ba:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3bc:	f3ef 8310 	mrs	r3, PRIMASK
 800b3c0:	613b      	str	r3, [r7, #16]
  return(result);
 800b3c2:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800b3c4:	61fb      	str	r3, [r7, #28]
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	f383 8810 	msr	PRIMASK, r3
}
 800b3d0:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800b3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d8:	4413      	add	r3, r2
 800b3da:	1c5a      	adds	r2, r3, #1
 800b3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3de:	629a      	str	r2, [r3, #40]	@ 0x28
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	f383 8810 	msr	PRIMASK, r3
}
 800b3ea:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3744      	adds	r7, #68	@ 0x44
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	ffff8000 	.word	0xffff8000

0800b400 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b400:	b480      	push	{r7}
 800b402:	b089      	sub	sp, #36	@ 0x24
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b40a:	2300      	movs	r3, #0
 800b40c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b40e:	4b89      	ldr	r3, [pc, #548]	@ (800b634 <HAL_GPIO_Init+0x234>)
 800b410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b412:	e194      	b.n	800b73e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	2101      	movs	r1, #1
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	fa01 f303 	lsl.w	r3, r1, r3
 800b420:	4013      	ands	r3, r2
 800b422:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	2b00      	cmp	r3, #0
 800b428:	f000 8186 	beq.w	800b738 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	f003 0303 	and.w	r3, r3, #3
 800b434:	2b01      	cmp	r3, #1
 800b436:	d005      	beq.n	800b444 <HAL_GPIO_Init+0x44>
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	f003 0303 	and.w	r3, r3, #3
 800b440:	2b02      	cmp	r3, #2
 800b442:	d130      	bne.n	800b4a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	005b      	lsls	r3, r3, #1
 800b44e:	2203      	movs	r2, #3
 800b450:	fa02 f303 	lsl.w	r3, r2, r3
 800b454:	43db      	mvns	r3, r3
 800b456:	69ba      	ldr	r2, [r7, #24]
 800b458:	4013      	ands	r3, r2
 800b45a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	68da      	ldr	r2, [r3, #12]
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	005b      	lsls	r3, r3, #1
 800b464:	fa02 f303 	lsl.w	r3, r2, r3
 800b468:	69ba      	ldr	r2, [r7, #24]
 800b46a:	4313      	orrs	r3, r2
 800b46c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	69ba      	ldr	r2, [r7, #24]
 800b472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b47a:	2201      	movs	r2, #1
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	fa02 f303 	lsl.w	r3, r2, r3
 800b482:	43db      	mvns	r3, r3
 800b484:	69ba      	ldr	r2, [r7, #24]
 800b486:	4013      	ands	r3, r2
 800b488:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	091b      	lsrs	r3, r3, #4
 800b490:	f003 0201 	and.w	r2, r3, #1
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	fa02 f303 	lsl.w	r3, r2, r3
 800b49a:	69ba      	ldr	r2, [r7, #24]
 800b49c:	4313      	orrs	r3, r2
 800b49e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	69ba      	ldr	r2, [r7, #24]
 800b4a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	f003 0303 	and.w	r3, r3, #3
 800b4ae:	2b03      	cmp	r3, #3
 800b4b0:	d017      	beq.n	800b4e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	005b      	lsls	r3, r3, #1
 800b4bc:	2203      	movs	r2, #3
 800b4be:	fa02 f303 	lsl.w	r3, r2, r3
 800b4c2:	43db      	mvns	r3, r3
 800b4c4:	69ba      	ldr	r2, [r7, #24]
 800b4c6:	4013      	ands	r3, r2
 800b4c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	689a      	ldr	r2, [r3, #8]
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	005b      	lsls	r3, r3, #1
 800b4d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b4d6:	69ba      	ldr	r2, [r7, #24]
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	69ba      	ldr	r2, [r7, #24]
 800b4e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	f003 0303 	and.w	r3, r3, #3
 800b4ea:	2b02      	cmp	r3, #2
 800b4ec:	d123      	bne.n	800b536 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	08da      	lsrs	r2, r3, #3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	3208      	adds	r2, #8
 800b4f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	f003 0307 	and.w	r3, r3, #7
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	220f      	movs	r2, #15
 800b506:	fa02 f303 	lsl.w	r3, r2, r3
 800b50a:	43db      	mvns	r3, r3
 800b50c:	69ba      	ldr	r2, [r7, #24]
 800b50e:	4013      	ands	r3, r2
 800b510:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	691a      	ldr	r2, [r3, #16]
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	f003 0307 	and.w	r3, r3, #7
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	fa02 f303 	lsl.w	r3, r2, r3
 800b522:	69ba      	ldr	r2, [r7, #24]
 800b524:	4313      	orrs	r3, r2
 800b526:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	08da      	lsrs	r2, r3, #3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	3208      	adds	r2, #8
 800b530:	69b9      	ldr	r1, [r7, #24]
 800b532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	005b      	lsls	r3, r3, #1
 800b540:	2203      	movs	r2, #3
 800b542:	fa02 f303 	lsl.w	r3, r2, r3
 800b546:	43db      	mvns	r3, r3
 800b548:	69ba      	ldr	r2, [r7, #24]
 800b54a:	4013      	ands	r3, r2
 800b54c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	f003 0203 	and.w	r2, r3, #3
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	005b      	lsls	r3, r3, #1
 800b55a:	fa02 f303 	lsl.w	r3, r2, r3
 800b55e:	69ba      	ldr	r2, [r7, #24]
 800b560:	4313      	orrs	r3, r2
 800b562:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	69ba      	ldr	r2, [r7, #24]
 800b568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b572:	2b00      	cmp	r3, #0
 800b574:	f000 80e0 	beq.w	800b738 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b578:	4b2f      	ldr	r3, [pc, #188]	@ (800b638 <HAL_GPIO_Init+0x238>)
 800b57a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b57e:	4a2e      	ldr	r2, [pc, #184]	@ (800b638 <HAL_GPIO_Init+0x238>)
 800b580:	f043 0302 	orr.w	r3, r3, #2
 800b584:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b588:	4b2b      	ldr	r3, [pc, #172]	@ (800b638 <HAL_GPIO_Init+0x238>)
 800b58a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b58e:	f003 0302 	and.w	r3, r3, #2
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b596:	4a29      	ldr	r2, [pc, #164]	@ (800b63c <HAL_GPIO_Init+0x23c>)
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	089b      	lsrs	r3, r3, #2
 800b59c:	3302      	adds	r3, #2
 800b59e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	f003 0303 	and.w	r3, r3, #3
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	220f      	movs	r2, #15
 800b5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b5b2:	43db      	mvns	r3, r3
 800b5b4:	69ba      	ldr	r2, [r7, #24]
 800b5b6:	4013      	ands	r3, r2
 800b5b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a20      	ldr	r2, [pc, #128]	@ (800b640 <HAL_GPIO_Init+0x240>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d052      	beq.n	800b668 <HAL_GPIO_Init+0x268>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4a1f      	ldr	r2, [pc, #124]	@ (800b644 <HAL_GPIO_Init+0x244>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d031      	beq.n	800b62e <HAL_GPIO_Init+0x22e>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4a1e      	ldr	r2, [pc, #120]	@ (800b648 <HAL_GPIO_Init+0x248>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d02b      	beq.n	800b62a <HAL_GPIO_Init+0x22a>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4a1d      	ldr	r2, [pc, #116]	@ (800b64c <HAL_GPIO_Init+0x24c>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d025      	beq.n	800b626 <HAL_GPIO_Init+0x226>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a1c      	ldr	r2, [pc, #112]	@ (800b650 <HAL_GPIO_Init+0x250>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d01f      	beq.n	800b622 <HAL_GPIO_Init+0x222>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a1b      	ldr	r2, [pc, #108]	@ (800b654 <HAL_GPIO_Init+0x254>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d019      	beq.n	800b61e <HAL_GPIO_Init+0x21e>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a1a      	ldr	r2, [pc, #104]	@ (800b658 <HAL_GPIO_Init+0x258>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d013      	beq.n	800b61a <HAL_GPIO_Init+0x21a>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a19      	ldr	r2, [pc, #100]	@ (800b65c <HAL_GPIO_Init+0x25c>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d00d      	beq.n	800b616 <HAL_GPIO_Init+0x216>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a18      	ldr	r2, [pc, #96]	@ (800b660 <HAL_GPIO_Init+0x260>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d007      	beq.n	800b612 <HAL_GPIO_Init+0x212>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4a17      	ldr	r2, [pc, #92]	@ (800b664 <HAL_GPIO_Init+0x264>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d101      	bne.n	800b60e <HAL_GPIO_Init+0x20e>
 800b60a:	2309      	movs	r3, #9
 800b60c:	e02d      	b.n	800b66a <HAL_GPIO_Init+0x26a>
 800b60e:	230a      	movs	r3, #10
 800b610:	e02b      	b.n	800b66a <HAL_GPIO_Init+0x26a>
 800b612:	2308      	movs	r3, #8
 800b614:	e029      	b.n	800b66a <HAL_GPIO_Init+0x26a>
 800b616:	2307      	movs	r3, #7
 800b618:	e027      	b.n	800b66a <HAL_GPIO_Init+0x26a>
 800b61a:	2306      	movs	r3, #6
 800b61c:	e025      	b.n	800b66a <HAL_GPIO_Init+0x26a>
 800b61e:	2305      	movs	r3, #5
 800b620:	e023      	b.n	800b66a <HAL_GPIO_Init+0x26a>
 800b622:	2304      	movs	r3, #4
 800b624:	e021      	b.n	800b66a <HAL_GPIO_Init+0x26a>
 800b626:	2303      	movs	r3, #3
 800b628:	e01f      	b.n	800b66a <HAL_GPIO_Init+0x26a>
 800b62a:	2302      	movs	r3, #2
 800b62c:	e01d      	b.n	800b66a <HAL_GPIO_Init+0x26a>
 800b62e:	2301      	movs	r3, #1
 800b630:	e01b      	b.n	800b66a <HAL_GPIO_Init+0x26a>
 800b632:	bf00      	nop
 800b634:	58000080 	.word	0x58000080
 800b638:	58024400 	.word	0x58024400
 800b63c:	58000400 	.word	0x58000400
 800b640:	58020000 	.word	0x58020000
 800b644:	58020400 	.word	0x58020400
 800b648:	58020800 	.word	0x58020800
 800b64c:	58020c00 	.word	0x58020c00
 800b650:	58021000 	.word	0x58021000
 800b654:	58021400 	.word	0x58021400
 800b658:	58021800 	.word	0x58021800
 800b65c:	58021c00 	.word	0x58021c00
 800b660:	58022000 	.word	0x58022000
 800b664:	58022400 	.word	0x58022400
 800b668:	2300      	movs	r3, #0
 800b66a:	69fa      	ldr	r2, [r7, #28]
 800b66c:	f002 0203 	and.w	r2, r2, #3
 800b670:	0092      	lsls	r2, r2, #2
 800b672:	4093      	lsls	r3, r2
 800b674:	69ba      	ldr	r2, [r7, #24]
 800b676:	4313      	orrs	r3, r2
 800b678:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b67a:	4938      	ldr	r1, [pc, #224]	@ (800b75c <HAL_GPIO_Init+0x35c>)
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	089b      	lsrs	r3, r3, #2
 800b680:	3302      	adds	r3, #2
 800b682:	69ba      	ldr	r2, [r7, #24]
 800b684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	43db      	mvns	r3, r3
 800b694:	69ba      	ldr	r2, [r7, #24]
 800b696:	4013      	ands	r3, r2
 800b698:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d003      	beq.n	800b6ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b6a6:	69ba      	ldr	r2, [r7, #24]
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b6ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b6b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	43db      	mvns	r3, r3
 800b6c2:	69ba      	ldr	r2, [r7, #24]
 800b6c4:	4013      	ands	r3, r2
 800b6c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d003      	beq.n	800b6dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b6d4:	69ba      	ldr	r2, [r7, #24]
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b6dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	43db      	mvns	r3, r3
 800b6ee:	69ba      	ldr	r2, [r7, #24]
 800b6f0:	4013      	ands	r3, r2
 800b6f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d003      	beq.n	800b708 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b700:	69ba      	ldr	r2, [r7, #24]
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	4313      	orrs	r3, r2
 800b706:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	69ba      	ldr	r2, [r7, #24]
 800b70c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	43db      	mvns	r3, r3
 800b718:	69ba      	ldr	r2, [r7, #24]
 800b71a:	4013      	ands	r3, r2
 800b71c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b726:	2b00      	cmp	r3, #0
 800b728:	d003      	beq.n	800b732 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b72a:	69ba      	ldr	r2, [r7, #24]
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	4313      	orrs	r3, r2
 800b730:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	69ba      	ldr	r2, [r7, #24]
 800b736:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	3301      	adds	r3, #1
 800b73c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	69fb      	ldr	r3, [r7, #28]
 800b744:	fa22 f303 	lsr.w	r3, r2, r3
 800b748:	2b00      	cmp	r3, #0
 800b74a:	f47f ae63 	bne.w	800b414 <HAL_GPIO_Init+0x14>
  }
}
 800b74e:	bf00      	nop
 800b750:	bf00      	nop
 800b752:	3724      	adds	r7, #36	@ 0x24
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	58000400 	.word	0x58000400

0800b760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	460b      	mov	r3, r1
 800b76a:	807b      	strh	r3, [r7, #2]
 800b76c:	4613      	mov	r3, r2
 800b76e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b770:	787b      	ldrb	r3, [r7, #1]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d003      	beq.n	800b77e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b776:	887a      	ldrh	r2, [r7, #2]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b77c:	e003      	b.n	800b786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b77e:	887b      	ldrh	r3, [r7, #2]
 800b780:	041a      	lsls	r2, r3, #16
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	619a      	str	r2, [r3, #24]
}
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b792:	b480      	push	{r7}
 800b794:	b085      	sub	sp, #20
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	460b      	mov	r3, r1
 800b79c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	695b      	ldr	r3, [r3, #20]
 800b7a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b7a4:	887a      	ldrh	r2, [r7, #2]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	041a      	lsls	r2, r3, #16
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	43d9      	mvns	r1, r3
 800b7b0:	887b      	ldrh	r3, [r7, #2]
 800b7b2:	400b      	ands	r3, r1
 800b7b4:	431a      	orrs	r2, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	619a      	str	r2, [r3, #24]
}
 800b7ba:	bf00      	nop
 800b7bc:	3714      	adds	r7, #20
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
	...

0800b7c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b7d0:	4b19      	ldr	r3, [pc, #100]	@ (800b838 <HAL_PWREx_ConfigSupply+0x70>)
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	f003 0304 	and.w	r3, r3, #4
 800b7d8:	2b04      	cmp	r3, #4
 800b7da:	d00a      	beq.n	800b7f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b7dc:	4b16      	ldr	r3, [pc, #88]	@ (800b838 <HAL_PWREx_ConfigSupply+0x70>)
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	f003 0307 	and.w	r3, r3, #7
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d001      	beq.n	800b7ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e01f      	b.n	800b82e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	e01d      	b.n	800b82e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b7f2:	4b11      	ldr	r3, [pc, #68]	@ (800b838 <HAL_PWREx_ConfigSupply+0x70>)
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	f023 0207 	bic.w	r2, r3, #7
 800b7fa:	490f      	ldr	r1, [pc, #60]	@ (800b838 <HAL_PWREx_ConfigSupply+0x70>)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	4313      	orrs	r3, r2
 800b800:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b802:	f7fb f8b1 	bl	8006968 <HAL_GetTick>
 800b806:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b808:	e009      	b.n	800b81e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b80a:	f7fb f8ad 	bl	8006968 <HAL_GetTick>
 800b80e:	4602      	mov	r2, r0
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b818:	d901      	bls.n	800b81e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	e007      	b.n	800b82e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b81e:	4b06      	ldr	r3, [pc, #24]	@ (800b838 <HAL_PWREx_ConfigSupply+0x70>)
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b82a:	d1ee      	bne.n	800b80a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	58024800 	.word	0x58024800

0800b83c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b08c      	sub	sp, #48	@ 0x30
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d102      	bne.n	800b850 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b84a:	2301      	movs	r3, #1
 800b84c:	f000 bc48 	b.w	800c0e0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f000 8088 	beq.w	800b96e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b85e:	4b99      	ldr	r3, [pc, #612]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b860:	691b      	ldr	r3, [r3, #16]
 800b862:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b866:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b868:	4b96      	ldr	r3, [pc, #600]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b86a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b86c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b870:	2b10      	cmp	r3, #16
 800b872:	d007      	beq.n	800b884 <HAL_RCC_OscConfig+0x48>
 800b874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b876:	2b18      	cmp	r3, #24
 800b878:	d111      	bne.n	800b89e <HAL_RCC_OscConfig+0x62>
 800b87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b87c:	f003 0303 	and.w	r3, r3, #3
 800b880:	2b02      	cmp	r3, #2
 800b882:	d10c      	bne.n	800b89e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b884:	4b8f      	ldr	r3, [pc, #572]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d06d      	beq.n	800b96c <HAL_RCC_OscConfig+0x130>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d169      	bne.n	800b96c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	f000 bc21 	b.w	800c0e0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8a6:	d106      	bne.n	800b8b6 <HAL_RCC_OscConfig+0x7a>
 800b8a8:	4b86      	ldr	r3, [pc, #536]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a85      	ldr	r2, [pc, #532]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b8ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b8b2:	6013      	str	r3, [r2, #0]
 800b8b4:	e02e      	b.n	800b914 <HAL_RCC_OscConfig+0xd8>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10c      	bne.n	800b8d8 <HAL_RCC_OscConfig+0x9c>
 800b8be:	4b81      	ldr	r3, [pc, #516]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a80      	ldr	r2, [pc, #512]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b8c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b8c8:	6013      	str	r3, [r2, #0]
 800b8ca:	4b7e      	ldr	r3, [pc, #504]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a7d      	ldr	r2, [pc, #500]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b8d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b8d4:	6013      	str	r3, [r2, #0]
 800b8d6:	e01d      	b.n	800b914 <HAL_RCC_OscConfig+0xd8>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b8e0:	d10c      	bne.n	800b8fc <HAL_RCC_OscConfig+0xc0>
 800b8e2:	4b78      	ldr	r3, [pc, #480]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a77      	ldr	r2, [pc, #476]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b8e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b8ec:	6013      	str	r3, [r2, #0]
 800b8ee:	4b75      	ldr	r3, [pc, #468]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a74      	ldr	r2, [pc, #464]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b8f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b8f8:	6013      	str	r3, [r2, #0]
 800b8fa:	e00b      	b.n	800b914 <HAL_RCC_OscConfig+0xd8>
 800b8fc:	4b71      	ldr	r3, [pc, #452]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a70      	ldr	r2, [pc, #448]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b906:	6013      	str	r3, [r2, #0]
 800b908:	4b6e      	ldr	r3, [pc, #440]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a6d      	ldr	r2, [pc, #436]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b90e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d013      	beq.n	800b944 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b91c:	f7fb f824 	bl	8006968 <HAL_GetTick>
 800b920:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b922:	e008      	b.n	800b936 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b924:	f7fb f820 	bl	8006968 <HAL_GetTick>
 800b928:	4602      	mov	r2, r0
 800b92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b92c:	1ad3      	subs	r3, r2, r3
 800b92e:	2b64      	cmp	r3, #100	@ 0x64
 800b930:	d901      	bls.n	800b936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b932:	2303      	movs	r3, #3
 800b934:	e3d4      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b936:	4b63      	ldr	r3, [pc, #396]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d0f0      	beq.n	800b924 <HAL_RCC_OscConfig+0xe8>
 800b942:	e014      	b.n	800b96e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b944:	f7fb f810 	bl	8006968 <HAL_GetTick>
 800b948:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b94a:	e008      	b.n	800b95e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b94c:	f7fb f80c 	bl	8006968 <HAL_GetTick>
 800b950:	4602      	mov	r2, r0
 800b952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	2b64      	cmp	r3, #100	@ 0x64
 800b958:	d901      	bls.n	800b95e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b95a:	2303      	movs	r3, #3
 800b95c:	e3c0      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b95e:	4b59      	ldr	r3, [pc, #356]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1f0      	bne.n	800b94c <HAL_RCC_OscConfig+0x110>
 800b96a:	e000      	b.n	800b96e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b96c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f003 0302 	and.w	r3, r3, #2
 800b976:	2b00      	cmp	r3, #0
 800b978:	f000 80ca 	beq.w	800bb10 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b97c:	4b51      	ldr	r3, [pc, #324]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b97e:	691b      	ldr	r3, [r3, #16]
 800b980:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b984:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b986:	4b4f      	ldr	r3, [pc, #316]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b98a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b98c:	6a3b      	ldr	r3, [r7, #32]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d007      	beq.n	800b9a2 <HAL_RCC_OscConfig+0x166>
 800b992:	6a3b      	ldr	r3, [r7, #32]
 800b994:	2b18      	cmp	r3, #24
 800b996:	d156      	bne.n	800ba46 <HAL_RCC_OscConfig+0x20a>
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	f003 0303 	and.w	r3, r3, #3
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d151      	bne.n	800ba46 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b9a2:	4b48      	ldr	r3, [pc, #288]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f003 0304 	and.w	r3, r3, #4
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d005      	beq.n	800b9ba <HAL_RCC_OscConfig+0x17e>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	68db      	ldr	r3, [r3, #12]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d101      	bne.n	800b9ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e392      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b9ba:	4b42      	ldr	r3, [pc, #264]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f023 0219 	bic.w	r2, r3, #25
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	493f      	ldr	r1, [pc, #252]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9cc:	f7fa ffcc 	bl	8006968 <HAL_GetTick>
 800b9d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b9d2:	e008      	b.n	800b9e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b9d4:	f7fa ffc8 	bl	8006968 <HAL_GetTick>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9dc:	1ad3      	subs	r3, r2, r3
 800b9de:	2b02      	cmp	r3, #2
 800b9e0:	d901      	bls.n	800b9e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b9e2:	2303      	movs	r3, #3
 800b9e4:	e37c      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b9e6:	4b37      	ldr	r3, [pc, #220]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f003 0304 	and.w	r3, r3, #4
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d0f0      	beq.n	800b9d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b9f2:	f7fa ffe9 	bl	80069c8 <HAL_GetREVID>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d817      	bhi.n	800ba30 <HAL_RCC_OscConfig+0x1f4>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	2b40      	cmp	r3, #64	@ 0x40
 800ba06:	d108      	bne.n	800ba1a <HAL_RCC_OscConfig+0x1de>
 800ba08:	4b2e      	ldr	r3, [pc, #184]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800ba10:	4a2c      	ldr	r2, [pc, #176]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800ba12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba16:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ba18:	e07a      	b.n	800bb10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba1a:	4b2a      	ldr	r3, [pc, #168]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	031b      	lsls	r3, r3, #12
 800ba28:	4926      	ldr	r1, [pc, #152]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ba2e:	e06f      	b.n	800bb10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba30:	4b24      	ldr	r3, [pc, #144]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	691b      	ldr	r3, [r3, #16]
 800ba3c:	061b      	lsls	r3, r3, #24
 800ba3e:	4921      	ldr	r1, [pc, #132]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800ba40:	4313      	orrs	r3, r2
 800ba42:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ba44:	e064      	b.n	800bb10 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d047      	beq.n	800bade <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ba4e:	4b1d      	ldr	r3, [pc, #116]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f023 0219 	bic.w	r2, r3, #25
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	68db      	ldr	r3, [r3, #12]
 800ba5a:	491a      	ldr	r1, [pc, #104]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba60:	f7fa ff82 	bl	8006968 <HAL_GetTick>
 800ba64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ba66:	e008      	b.n	800ba7a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ba68:	f7fa ff7e 	bl	8006968 <HAL_GetTick>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	d901      	bls.n	800ba7a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800ba76:	2303      	movs	r3, #3
 800ba78:	e332      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ba7a:	4b12      	ldr	r3, [pc, #72]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 0304 	and.w	r3, r3, #4
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d0f0      	beq.n	800ba68 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba86:	f7fa ff9f 	bl	80069c8 <HAL_GetREVID>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d819      	bhi.n	800bac8 <HAL_RCC_OscConfig+0x28c>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	691b      	ldr	r3, [r3, #16]
 800ba98:	2b40      	cmp	r3, #64	@ 0x40
 800ba9a:	d108      	bne.n	800baae <HAL_RCC_OscConfig+0x272>
 800ba9c:	4b09      	ldr	r3, [pc, #36]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800baa4:	4a07      	ldr	r2, [pc, #28]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800baa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800baaa:	6053      	str	r3, [r2, #4]
 800baac:	e030      	b.n	800bb10 <HAL_RCC_OscConfig+0x2d4>
 800baae:	4b05      	ldr	r3, [pc, #20]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	031b      	lsls	r3, r3, #12
 800babc:	4901      	ldr	r1, [pc, #4]	@ (800bac4 <HAL_RCC_OscConfig+0x288>)
 800babe:	4313      	orrs	r3, r2
 800bac0:	604b      	str	r3, [r1, #4]
 800bac2:	e025      	b.n	800bb10 <HAL_RCC_OscConfig+0x2d4>
 800bac4:	58024400 	.word	0x58024400
 800bac8:	4b9a      	ldr	r3, [pc, #616]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	691b      	ldr	r3, [r3, #16]
 800bad4:	061b      	lsls	r3, r3, #24
 800bad6:	4997      	ldr	r1, [pc, #604]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bad8:	4313      	orrs	r3, r2
 800bada:	604b      	str	r3, [r1, #4]
 800badc:	e018      	b.n	800bb10 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bade:	4b95      	ldr	r3, [pc, #596]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a94      	ldr	r2, [pc, #592]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bae4:	f023 0301 	bic.w	r3, r3, #1
 800bae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800baea:	f7fa ff3d 	bl	8006968 <HAL_GetTick>
 800baee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800baf0:	e008      	b.n	800bb04 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800baf2:	f7fa ff39 	bl	8006968 <HAL_GetTick>
 800baf6:	4602      	mov	r2, r0
 800baf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bafa:	1ad3      	subs	r3, r2, r3
 800bafc:	2b02      	cmp	r3, #2
 800bafe:	d901      	bls.n	800bb04 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800bb00:	2303      	movs	r3, #3
 800bb02:	e2ed      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bb04:	4b8b      	ldr	r3, [pc, #556]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f003 0304 	and.w	r3, r3, #4
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d1f0      	bne.n	800baf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f003 0310 	and.w	r3, r3, #16
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	f000 80a9 	beq.w	800bc70 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb1e:	4b85      	ldr	r3, [pc, #532]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb26:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bb28:	4b82      	ldr	r3, [pc, #520]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bb2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb2c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	2b08      	cmp	r3, #8
 800bb32:	d007      	beq.n	800bb44 <HAL_RCC_OscConfig+0x308>
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	2b18      	cmp	r3, #24
 800bb38:	d13a      	bne.n	800bbb0 <HAL_RCC_OscConfig+0x374>
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	f003 0303 	and.w	r3, r3, #3
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d135      	bne.n	800bbb0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bb44:	4b7b      	ldr	r3, [pc, #492]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d005      	beq.n	800bb5c <HAL_RCC_OscConfig+0x320>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	69db      	ldr	r3, [r3, #28]
 800bb54:	2b80      	cmp	r3, #128	@ 0x80
 800bb56:	d001      	beq.n	800bb5c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	e2c1      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bb5c:	f7fa ff34 	bl	80069c8 <HAL_GetREVID>
 800bb60:	4603      	mov	r3, r0
 800bb62:	f241 0203 	movw	r2, #4099	@ 0x1003
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d817      	bhi.n	800bb9a <HAL_RCC_OscConfig+0x35e>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a1b      	ldr	r3, [r3, #32]
 800bb6e:	2b20      	cmp	r3, #32
 800bb70:	d108      	bne.n	800bb84 <HAL_RCC_OscConfig+0x348>
 800bb72:	4b70      	ldr	r3, [pc, #448]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800bb7a:	4a6e      	ldr	r2, [pc, #440]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bb7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bb80:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bb82:	e075      	b.n	800bc70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bb84:	4b6b      	ldr	r3, [pc, #428]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6a1b      	ldr	r3, [r3, #32]
 800bb90:	069b      	lsls	r3, r3, #26
 800bb92:	4968      	ldr	r1, [pc, #416]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bb94:	4313      	orrs	r3, r2
 800bb96:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bb98:	e06a      	b.n	800bc70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bb9a:	4b66      	ldr	r3, [pc, #408]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6a1b      	ldr	r3, [r3, #32]
 800bba6:	061b      	lsls	r3, r3, #24
 800bba8:	4962      	ldr	r1, [pc, #392]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bbae:	e05f      	b.n	800bc70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	69db      	ldr	r3, [r3, #28]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d042      	beq.n	800bc3e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bbb8:	4b5e      	ldr	r3, [pc, #376]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a5d      	ldr	r2, [pc, #372]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bbbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbc4:	f7fa fed0 	bl	8006968 <HAL_GetTick>
 800bbc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bbca:	e008      	b.n	800bbde <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bbcc:	f7fa fecc 	bl	8006968 <HAL_GetTick>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd4:	1ad3      	subs	r3, r2, r3
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d901      	bls.n	800bbde <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800bbda:	2303      	movs	r3, #3
 800bbdc:	e280      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bbde:	4b55      	ldr	r3, [pc, #340]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d0f0      	beq.n	800bbcc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bbea:	f7fa feed 	bl	80069c8 <HAL_GetREVID>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d817      	bhi.n	800bc28 <HAL_RCC_OscConfig+0x3ec>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6a1b      	ldr	r3, [r3, #32]
 800bbfc:	2b20      	cmp	r3, #32
 800bbfe:	d108      	bne.n	800bc12 <HAL_RCC_OscConfig+0x3d6>
 800bc00:	4b4c      	ldr	r3, [pc, #304]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800bc08:	4a4a      	ldr	r2, [pc, #296]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bc0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bc0e:	6053      	str	r3, [r2, #4]
 800bc10:	e02e      	b.n	800bc70 <HAL_RCC_OscConfig+0x434>
 800bc12:	4b48      	ldr	r3, [pc, #288]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6a1b      	ldr	r3, [r3, #32]
 800bc1e:	069b      	lsls	r3, r3, #26
 800bc20:	4944      	ldr	r1, [pc, #272]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bc22:	4313      	orrs	r3, r2
 800bc24:	604b      	str	r3, [r1, #4]
 800bc26:	e023      	b.n	800bc70 <HAL_RCC_OscConfig+0x434>
 800bc28:	4b42      	ldr	r3, [pc, #264]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6a1b      	ldr	r3, [r3, #32]
 800bc34:	061b      	lsls	r3, r3, #24
 800bc36:	493f      	ldr	r1, [pc, #252]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	60cb      	str	r3, [r1, #12]
 800bc3c:	e018      	b.n	800bc70 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800bc3e:	4b3d      	ldr	r3, [pc, #244]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a3c      	ldr	r2, [pc, #240]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bc44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc4a:	f7fa fe8d 	bl	8006968 <HAL_GetTick>
 800bc4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bc50:	e008      	b.n	800bc64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bc52:	f7fa fe89 	bl	8006968 <HAL_GetTick>
 800bc56:	4602      	mov	r2, r0
 800bc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d901      	bls.n	800bc64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bc60:	2303      	movs	r3, #3
 800bc62:	e23d      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bc64:	4b33      	ldr	r3, [pc, #204]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d1f0      	bne.n	800bc52 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f003 0308 	and.w	r3, r3, #8
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d036      	beq.n	800bcea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	695b      	ldr	r3, [r3, #20]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d019      	beq.n	800bcb8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bc84:	4b2b      	ldr	r3, [pc, #172]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bc86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc88:	4a2a      	ldr	r2, [pc, #168]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bc8a:	f043 0301 	orr.w	r3, r3, #1
 800bc8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc90:	f7fa fe6a 	bl	8006968 <HAL_GetTick>
 800bc94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bc96:	e008      	b.n	800bcaa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bc98:	f7fa fe66 	bl	8006968 <HAL_GetTick>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d901      	bls.n	800bcaa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800bca6:	2303      	movs	r3, #3
 800bca8:	e21a      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bcaa:	4b22      	ldr	r3, [pc, #136]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bcac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bcae:	f003 0302 	and.w	r3, r3, #2
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d0f0      	beq.n	800bc98 <HAL_RCC_OscConfig+0x45c>
 800bcb6:	e018      	b.n	800bcea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bcb8:	4b1e      	ldr	r3, [pc, #120]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bcba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bcbc:	4a1d      	ldr	r2, [pc, #116]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bcbe:	f023 0301 	bic.w	r3, r3, #1
 800bcc2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcc4:	f7fa fe50 	bl	8006968 <HAL_GetTick>
 800bcc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bcca:	e008      	b.n	800bcde <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bccc:	f7fa fe4c 	bl	8006968 <HAL_GetTick>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd4:	1ad3      	subs	r3, r2, r3
 800bcd6:	2b02      	cmp	r3, #2
 800bcd8:	d901      	bls.n	800bcde <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800bcda:	2303      	movs	r3, #3
 800bcdc:	e200      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bcde:	4b15      	ldr	r3, [pc, #84]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bce2:	f003 0302 	and.w	r3, r3, #2
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1f0      	bne.n	800bccc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f003 0320 	and.w	r3, r3, #32
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d039      	beq.n	800bd6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	699b      	ldr	r3, [r3, #24]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d01c      	beq.n	800bd38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bcfe:	4b0d      	ldr	r3, [pc, #52]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a0c      	ldr	r2, [pc, #48]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bd04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800bd08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bd0a:	f7fa fe2d 	bl	8006968 <HAL_GetTick>
 800bd0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bd10:	e008      	b.n	800bd24 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bd12:	f7fa fe29 	bl	8006968 <HAL_GetTick>
 800bd16:	4602      	mov	r2, r0
 800bd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1a:	1ad3      	subs	r3, r2, r3
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	d901      	bls.n	800bd24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800bd20:	2303      	movs	r3, #3
 800bd22:	e1dd      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bd24:	4b03      	ldr	r3, [pc, #12]	@ (800bd34 <HAL_RCC_OscConfig+0x4f8>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d0f0      	beq.n	800bd12 <HAL_RCC_OscConfig+0x4d6>
 800bd30:	e01b      	b.n	800bd6a <HAL_RCC_OscConfig+0x52e>
 800bd32:	bf00      	nop
 800bd34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bd38:	4b9b      	ldr	r3, [pc, #620]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4a9a      	ldr	r2, [pc, #616]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bd3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bd44:	f7fa fe10 	bl	8006968 <HAL_GetTick>
 800bd48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bd4a:	e008      	b.n	800bd5e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bd4c:	f7fa fe0c 	bl	8006968 <HAL_GetTick>
 800bd50:	4602      	mov	r2, r0
 800bd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd54:	1ad3      	subs	r3, r2, r3
 800bd56:	2b02      	cmp	r3, #2
 800bd58:	d901      	bls.n	800bd5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800bd5a:	2303      	movs	r3, #3
 800bd5c:	e1c0      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bd5e:	4b92      	ldr	r3, [pc, #584]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d1f0      	bne.n	800bd4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f003 0304 	and.w	r3, r3, #4
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	f000 8081 	beq.w	800be7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bd78:	4b8c      	ldr	r3, [pc, #560]	@ (800bfac <HAL_RCC_OscConfig+0x770>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a8b      	ldr	r2, [pc, #556]	@ (800bfac <HAL_RCC_OscConfig+0x770>)
 800bd7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bd84:	f7fa fdf0 	bl	8006968 <HAL_GetTick>
 800bd88:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd8a:	e008      	b.n	800bd9e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd8c:	f7fa fdec 	bl	8006968 <HAL_GetTick>
 800bd90:	4602      	mov	r2, r0
 800bd92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd94:	1ad3      	subs	r3, r2, r3
 800bd96:	2b64      	cmp	r3, #100	@ 0x64
 800bd98:	d901      	bls.n	800bd9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800bd9a:	2303      	movs	r3, #3
 800bd9c:	e1a0      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd9e:	4b83      	ldr	r3, [pc, #524]	@ (800bfac <HAL_RCC_OscConfig+0x770>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d0f0      	beq.n	800bd8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d106      	bne.n	800bdc0 <HAL_RCC_OscConfig+0x584>
 800bdb2:	4b7d      	ldr	r3, [pc, #500]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bdb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdb6:	4a7c      	ldr	r2, [pc, #496]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bdb8:	f043 0301 	orr.w	r3, r3, #1
 800bdbc:	6713      	str	r3, [r2, #112]	@ 0x70
 800bdbe:	e02d      	b.n	800be1c <HAL_RCC_OscConfig+0x5e0>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d10c      	bne.n	800bde2 <HAL_RCC_OscConfig+0x5a6>
 800bdc8:	4b77      	ldr	r3, [pc, #476]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bdca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdcc:	4a76      	ldr	r2, [pc, #472]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bdce:	f023 0301 	bic.w	r3, r3, #1
 800bdd2:	6713      	str	r3, [r2, #112]	@ 0x70
 800bdd4:	4b74      	ldr	r3, [pc, #464]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bdd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdd8:	4a73      	ldr	r2, [pc, #460]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bdda:	f023 0304 	bic.w	r3, r3, #4
 800bdde:	6713      	str	r3, [r2, #112]	@ 0x70
 800bde0:	e01c      	b.n	800be1c <HAL_RCC_OscConfig+0x5e0>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	2b05      	cmp	r3, #5
 800bde8:	d10c      	bne.n	800be04 <HAL_RCC_OscConfig+0x5c8>
 800bdea:	4b6f      	ldr	r3, [pc, #444]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bdec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdee:	4a6e      	ldr	r2, [pc, #440]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bdf0:	f043 0304 	orr.w	r3, r3, #4
 800bdf4:	6713      	str	r3, [r2, #112]	@ 0x70
 800bdf6:	4b6c      	ldr	r3, [pc, #432]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bdf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdfa:	4a6b      	ldr	r2, [pc, #428]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bdfc:	f043 0301 	orr.w	r3, r3, #1
 800be00:	6713      	str	r3, [r2, #112]	@ 0x70
 800be02:	e00b      	b.n	800be1c <HAL_RCC_OscConfig+0x5e0>
 800be04:	4b68      	ldr	r3, [pc, #416]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800be06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be08:	4a67      	ldr	r2, [pc, #412]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800be0a:	f023 0301 	bic.w	r3, r3, #1
 800be0e:	6713      	str	r3, [r2, #112]	@ 0x70
 800be10:	4b65      	ldr	r3, [pc, #404]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800be12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be14:	4a64      	ldr	r2, [pc, #400]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800be16:	f023 0304 	bic.w	r3, r3, #4
 800be1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	689b      	ldr	r3, [r3, #8]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d015      	beq.n	800be50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be24:	f7fa fda0 	bl	8006968 <HAL_GetTick>
 800be28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be2a:	e00a      	b.n	800be42 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be2c:	f7fa fd9c 	bl	8006968 <HAL_GetTick>
 800be30:	4602      	mov	r2, r0
 800be32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be34:	1ad3      	subs	r3, r2, r3
 800be36:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d901      	bls.n	800be42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800be3e:	2303      	movs	r3, #3
 800be40:	e14e      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be42:	4b59      	ldr	r3, [pc, #356]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800be44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be46:	f003 0302 	and.w	r3, r3, #2
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d0ee      	beq.n	800be2c <HAL_RCC_OscConfig+0x5f0>
 800be4e:	e014      	b.n	800be7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be50:	f7fa fd8a 	bl	8006968 <HAL_GetTick>
 800be54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800be56:	e00a      	b.n	800be6e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be58:	f7fa fd86 	bl	8006968 <HAL_GetTick>
 800be5c:	4602      	mov	r2, r0
 800be5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be66:	4293      	cmp	r3, r2
 800be68:	d901      	bls.n	800be6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800be6a:	2303      	movs	r3, #3
 800be6c:	e138      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800be6e:	4b4e      	ldr	r3, [pc, #312]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800be70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be72:	f003 0302 	and.w	r3, r3, #2
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1ee      	bne.n	800be58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f000 812d 	beq.w	800c0de <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800be84:	4b48      	ldr	r3, [pc, #288]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800be86:	691b      	ldr	r3, [r3, #16]
 800be88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800be8c:	2b18      	cmp	r3, #24
 800be8e:	f000 80bd 	beq.w	800c00c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be96:	2b02      	cmp	r3, #2
 800be98:	f040 809e 	bne.w	800bfd8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be9c:	4b42      	ldr	r3, [pc, #264]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a41      	ldr	r2, [pc, #260]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bea8:	f7fa fd5e 	bl	8006968 <HAL_GetTick>
 800beac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800beae:	e008      	b.n	800bec2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800beb0:	f7fa fd5a 	bl	8006968 <HAL_GetTick>
 800beb4:	4602      	mov	r2, r0
 800beb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	2b02      	cmp	r3, #2
 800bebc:	d901      	bls.n	800bec2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800bebe:	2303      	movs	r3, #3
 800bec0:	e10e      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bec2:	4b39      	ldr	r3, [pc, #228]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1f0      	bne.n	800beb0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bece:	4b36      	ldr	r3, [pc, #216]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bed0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bed2:	4b37      	ldr	r3, [pc, #220]	@ (800bfb0 <HAL_RCC_OscConfig+0x774>)
 800bed4:	4013      	ands	r3, r2
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800bede:	0112      	lsls	r2, r2, #4
 800bee0:	430a      	orrs	r2, r1
 800bee2:	4931      	ldr	r1, [pc, #196]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bee4:	4313      	orrs	r3, r2
 800bee6:	628b      	str	r3, [r1, #40]	@ 0x28
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beec:	3b01      	subs	r3, #1
 800beee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bef6:	3b01      	subs	r3, #1
 800bef8:	025b      	lsls	r3, r3, #9
 800befa:	b29b      	uxth	r3, r3
 800befc:	431a      	orrs	r2, r3
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf02:	3b01      	subs	r3, #1
 800bf04:	041b      	lsls	r3, r3, #16
 800bf06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bf0a:	431a      	orrs	r2, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf10:	3b01      	subs	r3, #1
 800bf12:	061b      	lsls	r3, r3, #24
 800bf14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bf18:	4923      	ldr	r1, [pc, #140]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800bf1e:	4b22      	ldr	r3, [pc, #136]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf22:	4a21      	ldr	r2, [pc, #132]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf24:	f023 0301 	bic.w	r3, r3, #1
 800bf28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bf2a:	4b1f      	ldr	r3, [pc, #124]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf2e:	4b21      	ldr	r3, [pc, #132]	@ (800bfb4 <HAL_RCC_OscConfig+0x778>)
 800bf30:	4013      	ands	r3, r2
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bf36:	00d2      	lsls	r2, r2, #3
 800bf38:	491b      	ldr	r1, [pc, #108]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bf3e:	4b1a      	ldr	r3, [pc, #104]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf42:	f023 020c 	bic.w	r2, r3, #12
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf4a:	4917      	ldr	r1, [pc, #92]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bf50:	4b15      	ldr	r3, [pc, #84]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf54:	f023 0202 	bic.w	r2, r3, #2
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf5c:	4912      	ldr	r1, [pc, #72]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bf62:	4b11      	ldr	r3, [pc, #68]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf66:	4a10      	ldr	r2, [pc, #64]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf6e:	4b0e      	ldr	r3, [pc, #56]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf72:	4a0d      	ldr	r2, [pc, #52]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bf7a:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf7e:	4a0a      	ldr	r2, [pc, #40]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bf84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800bf86:	4b08      	ldr	r3, [pc, #32]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf8a:	4a07      	ldr	r2, [pc, #28]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf8c:	f043 0301 	orr.w	r3, r3, #1
 800bf90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bf92:	4b05      	ldr	r3, [pc, #20]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a04      	ldr	r2, [pc, #16]	@ (800bfa8 <HAL_RCC_OscConfig+0x76c>)
 800bf98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bf9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf9e:	f7fa fce3 	bl	8006968 <HAL_GetTick>
 800bfa2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bfa4:	e011      	b.n	800bfca <HAL_RCC_OscConfig+0x78e>
 800bfa6:	bf00      	nop
 800bfa8:	58024400 	.word	0x58024400
 800bfac:	58024800 	.word	0x58024800
 800bfb0:	fffffc0c 	.word	0xfffffc0c
 800bfb4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bfb8:	f7fa fcd6 	bl	8006968 <HAL_GetTick>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	d901      	bls.n	800bfca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800bfc6:	2303      	movs	r3, #3
 800bfc8:	e08a      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bfca:	4b47      	ldr	r3, [pc, #284]	@ (800c0e8 <HAL_RCC_OscConfig+0x8ac>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d0f0      	beq.n	800bfb8 <HAL_RCC_OscConfig+0x77c>
 800bfd6:	e082      	b.n	800c0de <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bfd8:	4b43      	ldr	r3, [pc, #268]	@ (800c0e8 <HAL_RCC_OscConfig+0x8ac>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a42      	ldr	r2, [pc, #264]	@ (800c0e8 <HAL_RCC_OscConfig+0x8ac>)
 800bfde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bfe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfe4:	f7fa fcc0 	bl	8006968 <HAL_GetTick>
 800bfe8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bfea:	e008      	b.n	800bffe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bfec:	f7fa fcbc 	bl	8006968 <HAL_GetTick>
 800bff0:	4602      	mov	r2, r0
 800bff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff4:	1ad3      	subs	r3, r2, r3
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	d901      	bls.n	800bffe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800bffa:	2303      	movs	r3, #3
 800bffc:	e070      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bffe:	4b3a      	ldr	r3, [pc, #232]	@ (800c0e8 <HAL_RCC_OscConfig+0x8ac>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c006:	2b00      	cmp	r3, #0
 800c008:	d1f0      	bne.n	800bfec <HAL_RCC_OscConfig+0x7b0>
 800c00a:	e068      	b.n	800c0de <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c00c:	4b36      	ldr	r3, [pc, #216]	@ (800c0e8 <HAL_RCC_OscConfig+0x8ac>)
 800c00e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c010:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c012:	4b35      	ldr	r3, [pc, #212]	@ (800c0e8 <HAL_RCC_OscConfig+0x8ac>)
 800c014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c016:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d031      	beq.n	800c084 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	f003 0203 	and.w	r2, r3, #3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d12a      	bne.n	800c084 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	091b      	lsrs	r3, r3, #4
 800c032:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d122      	bne.n	800c084 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c048:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d11a      	bne.n	800c084 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	0a5b      	lsrs	r3, r3, #9
 800c052:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c05a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d111      	bne.n	800c084 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	0c1b      	lsrs	r3, r3, #16
 800c064:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c06c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c06e:	429a      	cmp	r2, r3
 800c070:	d108      	bne.n	800c084 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	0e1b      	lsrs	r3, r3, #24
 800c076:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c07e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c080:	429a      	cmp	r2, r3
 800c082:	d001      	beq.n	800c088 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c084:	2301      	movs	r3, #1
 800c086:	e02b      	b.n	800c0e0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c088:	4b17      	ldr	r3, [pc, #92]	@ (800c0e8 <HAL_RCC_OscConfig+0x8ac>)
 800c08a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c08c:	08db      	lsrs	r3, r3, #3
 800c08e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c092:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c098:	693a      	ldr	r2, [r7, #16]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d01f      	beq.n	800c0de <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c09e:	4b12      	ldr	r3, [pc, #72]	@ (800c0e8 <HAL_RCC_OscConfig+0x8ac>)
 800c0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0a2:	4a11      	ldr	r2, [pc, #68]	@ (800c0e8 <HAL_RCC_OscConfig+0x8ac>)
 800c0a4:	f023 0301 	bic.w	r3, r3, #1
 800c0a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c0aa:	f7fa fc5d 	bl	8006968 <HAL_GetTick>
 800c0ae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c0b0:	bf00      	nop
 800c0b2:	f7fa fc59 	bl	8006968 <HAL_GetTick>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d0f9      	beq.n	800c0b2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c0be:	4b0a      	ldr	r3, [pc, #40]	@ (800c0e8 <HAL_RCC_OscConfig+0x8ac>)
 800c0c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c0c2:	4b0a      	ldr	r3, [pc, #40]	@ (800c0ec <HAL_RCC_OscConfig+0x8b0>)
 800c0c4:	4013      	ands	r3, r2
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c0ca:	00d2      	lsls	r2, r2, #3
 800c0cc:	4906      	ldr	r1, [pc, #24]	@ (800c0e8 <HAL_RCC_OscConfig+0x8ac>)
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c0d2:	4b05      	ldr	r3, [pc, #20]	@ (800c0e8 <HAL_RCC_OscConfig+0x8ac>)
 800c0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0d6:	4a04      	ldr	r2, [pc, #16]	@ (800c0e8 <HAL_RCC_OscConfig+0x8ac>)
 800c0d8:	f043 0301 	orr.w	r3, r3, #1
 800c0dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c0de:	2300      	movs	r3, #0
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3730      	adds	r7, #48	@ 0x30
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	58024400 	.word	0x58024400
 800c0ec:	ffff0007 	.word	0xffff0007

0800c0f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d101      	bne.n	800c104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c100:	2301      	movs	r3, #1
 800c102:	e19c      	b.n	800c43e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c104:	4b8a      	ldr	r3, [pc, #552]	@ (800c330 <HAL_RCC_ClockConfig+0x240>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f003 030f 	and.w	r3, r3, #15
 800c10c:	683a      	ldr	r2, [r7, #0]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d910      	bls.n	800c134 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c112:	4b87      	ldr	r3, [pc, #540]	@ (800c330 <HAL_RCC_ClockConfig+0x240>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f023 020f 	bic.w	r2, r3, #15
 800c11a:	4985      	ldr	r1, [pc, #532]	@ (800c330 <HAL_RCC_ClockConfig+0x240>)
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	4313      	orrs	r3, r2
 800c120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c122:	4b83      	ldr	r3, [pc, #524]	@ (800c330 <HAL_RCC_ClockConfig+0x240>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f003 030f 	and.w	r3, r3, #15
 800c12a:	683a      	ldr	r2, [r7, #0]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d001      	beq.n	800c134 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c130:	2301      	movs	r3, #1
 800c132:	e184      	b.n	800c43e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f003 0304 	and.w	r3, r3, #4
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d010      	beq.n	800c162 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	691a      	ldr	r2, [r3, #16]
 800c144:	4b7b      	ldr	r3, [pc, #492]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c146:	699b      	ldr	r3, [r3, #24]
 800c148:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d908      	bls.n	800c162 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c150:	4b78      	ldr	r3, [pc, #480]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c152:	699b      	ldr	r3, [r3, #24]
 800c154:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	691b      	ldr	r3, [r3, #16]
 800c15c:	4975      	ldr	r1, [pc, #468]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c15e:	4313      	orrs	r3, r2
 800c160:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f003 0308 	and.w	r3, r3, #8
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d010      	beq.n	800c190 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	695a      	ldr	r2, [r3, #20]
 800c172:	4b70      	ldr	r3, [pc, #448]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c174:	69db      	ldr	r3, [r3, #28]
 800c176:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d908      	bls.n	800c190 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c17e:	4b6d      	ldr	r3, [pc, #436]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c180:	69db      	ldr	r3, [r3, #28]
 800c182:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	695b      	ldr	r3, [r3, #20]
 800c18a:	496a      	ldr	r1, [pc, #424]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c18c:	4313      	orrs	r3, r2
 800c18e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f003 0310 	and.w	r3, r3, #16
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d010      	beq.n	800c1be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	699a      	ldr	r2, [r3, #24]
 800c1a0:	4b64      	ldr	r3, [pc, #400]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c1a2:	69db      	ldr	r3, [r3, #28]
 800c1a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d908      	bls.n	800c1be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c1ac:	4b61      	ldr	r3, [pc, #388]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c1ae:	69db      	ldr	r3, [r3, #28]
 800c1b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	699b      	ldr	r3, [r3, #24]
 800c1b8:	495e      	ldr	r1, [pc, #376]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f003 0320 	and.w	r3, r3, #32
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d010      	beq.n	800c1ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	69da      	ldr	r2, [r3, #28]
 800c1ce:	4b59      	ldr	r3, [pc, #356]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c1d0:	6a1b      	ldr	r3, [r3, #32]
 800c1d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d908      	bls.n	800c1ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c1da:	4b56      	ldr	r3, [pc, #344]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c1dc:	6a1b      	ldr	r3, [r3, #32]
 800c1de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	69db      	ldr	r3, [r3, #28]
 800c1e6:	4953      	ldr	r1, [pc, #332]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f003 0302 	and.w	r3, r3, #2
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d010      	beq.n	800c21a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	68da      	ldr	r2, [r3, #12]
 800c1fc:	4b4d      	ldr	r3, [pc, #308]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c1fe:	699b      	ldr	r3, [r3, #24]
 800c200:	f003 030f 	and.w	r3, r3, #15
 800c204:	429a      	cmp	r2, r3
 800c206:	d908      	bls.n	800c21a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c208:	4b4a      	ldr	r3, [pc, #296]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c20a:	699b      	ldr	r3, [r3, #24]
 800c20c:	f023 020f 	bic.w	r2, r3, #15
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	4947      	ldr	r1, [pc, #284]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c216:	4313      	orrs	r3, r2
 800c218:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f003 0301 	and.w	r3, r3, #1
 800c222:	2b00      	cmp	r3, #0
 800c224:	d055      	beq.n	800c2d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c226:	4b43      	ldr	r3, [pc, #268]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c228:	699b      	ldr	r3, [r3, #24]
 800c22a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	4940      	ldr	r1, [pc, #256]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c234:	4313      	orrs	r3, r2
 800c236:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	2b02      	cmp	r3, #2
 800c23e:	d107      	bne.n	800c250 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c240:	4b3c      	ldr	r3, [pc, #240]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d121      	bne.n	800c290 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c24c:	2301      	movs	r3, #1
 800c24e:	e0f6      	b.n	800c43e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	2b03      	cmp	r3, #3
 800c256:	d107      	bne.n	800c268 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c258:	4b36      	ldr	r3, [pc, #216]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c260:	2b00      	cmp	r3, #0
 800c262:	d115      	bne.n	800c290 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c264:	2301      	movs	r3, #1
 800c266:	e0ea      	b.n	800c43e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d107      	bne.n	800c280 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c270:	4b30      	ldr	r3, [pc, #192]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d109      	bne.n	800c290 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	e0de      	b.n	800c43e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c280:	4b2c      	ldr	r3, [pc, #176]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f003 0304 	and.w	r3, r3, #4
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d101      	bne.n	800c290 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	e0d6      	b.n	800c43e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c290:	4b28      	ldr	r3, [pc, #160]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	f023 0207 	bic.w	r2, r3, #7
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	4925      	ldr	r1, [pc, #148]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2a2:	f7fa fb61 	bl	8006968 <HAL_GetTick>
 800c2a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c2a8:	e00a      	b.n	800c2c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c2aa:	f7fa fb5d 	bl	8006968 <HAL_GetTick>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	1ad3      	subs	r3, r2, r3
 800c2b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d901      	bls.n	800c2c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c2bc:	2303      	movs	r3, #3
 800c2be:	e0be      	b.n	800c43e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c2c0:	4b1c      	ldr	r3, [pc, #112]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c2c2:	691b      	ldr	r3, [r3, #16]
 800c2c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	00db      	lsls	r3, r3, #3
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d1eb      	bne.n	800c2aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f003 0302 	and.w	r3, r3, #2
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d010      	beq.n	800c300 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	68da      	ldr	r2, [r3, #12]
 800c2e2:	4b14      	ldr	r3, [pc, #80]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c2e4:	699b      	ldr	r3, [r3, #24]
 800c2e6:	f003 030f 	and.w	r3, r3, #15
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d208      	bcs.n	800c300 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c2ee:	4b11      	ldr	r3, [pc, #68]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c2f0:	699b      	ldr	r3, [r3, #24]
 800c2f2:	f023 020f 	bic.w	r2, r3, #15
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	490e      	ldr	r1, [pc, #56]	@ (800c334 <HAL_RCC_ClockConfig+0x244>)
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c300:	4b0b      	ldr	r3, [pc, #44]	@ (800c330 <HAL_RCC_ClockConfig+0x240>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 030f 	and.w	r3, r3, #15
 800c308:	683a      	ldr	r2, [r7, #0]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d214      	bcs.n	800c338 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c30e:	4b08      	ldr	r3, [pc, #32]	@ (800c330 <HAL_RCC_ClockConfig+0x240>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f023 020f 	bic.w	r2, r3, #15
 800c316:	4906      	ldr	r1, [pc, #24]	@ (800c330 <HAL_RCC_ClockConfig+0x240>)
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	4313      	orrs	r3, r2
 800c31c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c31e:	4b04      	ldr	r3, [pc, #16]	@ (800c330 <HAL_RCC_ClockConfig+0x240>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f003 030f 	and.w	r3, r3, #15
 800c326:	683a      	ldr	r2, [r7, #0]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d005      	beq.n	800c338 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c32c:	2301      	movs	r3, #1
 800c32e:	e086      	b.n	800c43e <HAL_RCC_ClockConfig+0x34e>
 800c330:	52002000 	.word	0x52002000
 800c334:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f003 0304 	and.w	r3, r3, #4
 800c340:	2b00      	cmp	r3, #0
 800c342:	d010      	beq.n	800c366 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	691a      	ldr	r2, [r3, #16]
 800c348:	4b3f      	ldr	r3, [pc, #252]	@ (800c448 <HAL_RCC_ClockConfig+0x358>)
 800c34a:	699b      	ldr	r3, [r3, #24]
 800c34c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c350:	429a      	cmp	r2, r3
 800c352:	d208      	bcs.n	800c366 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c354:	4b3c      	ldr	r3, [pc, #240]	@ (800c448 <HAL_RCC_ClockConfig+0x358>)
 800c356:	699b      	ldr	r3, [r3, #24]
 800c358:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	691b      	ldr	r3, [r3, #16]
 800c360:	4939      	ldr	r1, [pc, #228]	@ (800c448 <HAL_RCC_ClockConfig+0x358>)
 800c362:	4313      	orrs	r3, r2
 800c364:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f003 0308 	and.w	r3, r3, #8
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d010      	beq.n	800c394 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	695a      	ldr	r2, [r3, #20]
 800c376:	4b34      	ldr	r3, [pc, #208]	@ (800c448 <HAL_RCC_ClockConfig+0x358>)
 800c378:	69db      	ldr	r3, [r3, #28]
 800c37a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c37e:	429a      	cmp	r2, r3
 800c380:	d208      	bcs.n	800c394 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c382:	4b31      	ldr	r3, [pc, #196]	@ (800c448 <HAL_RCC_ClockConfig+0x358>)
 800c384:	69db      	ldr	r3, [r3, #28]
 800c386:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	695b      	ldr	r3, [r3, #20]
 800c38e:	492e      	ldr	r1, [pc, #184]	@ (800c448 <HAL_RCC_ClockConfig+0x358>)
 800c390:	4313      	orrs	r3, r2
 800c392:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f003 0310 	and.w	r3, r3, #16
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d010      	beq.n	800c3c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	699a      	ldr	r2, [r3, #24]
 800c3a4:	4b28      	ldr	r3, [pc, #160]	@ (800c448 <HAL_RCC_ClockConfig+0x358>)
 800c3a6:	69db      	ldr	r3, [r3, #28]
 800c3a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d208      	bcs.n	800c3c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c3b0:	4b25      	ldr	r3, [pc, #148]	@ (800c448 <HAL_RCC_ClockConfig+0x358>)
 800c3b2:	69db      	ldr	r3, [r3, #28]
 800c3b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	699b      	ldr	r3, [r3, #24]
 800c3bc:	4922      	ldr	r1, [pc, #136]	@ (800c448 <HAL_RCC_ClockConfig+0x358>)
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f003 0320 	and.w	r3, r3, #32
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d010      	beq.n	800c3f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	69da      	ldr	r2, [r3, #28]
 800c3d2:	4b1d      	ldr	r3, [pc, #116]	@ (800c448 <HAL_RCC_ClockConfig+0x358>)
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d208      	bcs.n	800c3f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c3de:	4b1a      	ldr	r3, [pc, #104]	@ (800c448 <HAL_RCC_ClockConfig+0x358>)
 800c3e0:	6a1b      	ldr	r3, [r3, #32]
 800c3e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	69db      	ldr	r3, [r3, #28]
 800c3ea:	4917      	ldr	r1, [pc, #92]	@ (800c448 <HAL_RCC_ClockConfig+0x358>)
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c3f0:	f000 f834 	bl	800c45c <HAL_RCC_GetSysClockFreq>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	4b14      	ldr	r3, [pc, #80]	@ (800c448 <HAL_RCC_ClockConfig+0x358>)
 800c3f8:	699b      	ldr	r3, [r3, #24]
 800c3fa:	0a1b      	lsrs	r3, r3, #8
 800c3fc:	f003 030f 	and.w	r3, r3, #15
 800c400:	4912      	ldr	r1, [pc, #72]	@ (800c44c <HAL_RCC_ClockConfig+0x35c>)
 800c402:	5ccb      	ldrb	r3, [r1, r3]
 800c404:	f003 031f 	and.w	r3, r3, #31
 800c408:	fa22 f303 	lsr.w	r3, r2, r3
 800c40c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c40e:	4b0e      	ldr	r3, [pc, #56]	@ (800c448 <HAL_RCC_ClockConfig+0x358>)
 800c410:	699b      	ldr	r3, [r3, #24]
 800c412:	f003 030f 	and.w	r3, r3, #15
 800c416:	4a0d      	ldr	r2, [pc, #52]	@ (800c44c <HAL_RCC_ClockConfig+0x35c>)
 800c418:	5cd3      	ldrb	r3, [r2, r3]
 800c41a:	f003 031f 	and.w	r3, r3, #31
 800c41e:	693a      	ldr	r2, [r7, #16]
 800c420:	fa22 f303 	lsr.w	r3, r2, r3
 800c424:	4a0a      	ldr	r2, [pc, #40]	@ (800c450 <HAL_RCC_ClockConfig+0x360>)
 800c426:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c428:	4a0a      	ldr	r2, [pc, #40]	@ (800c454 <HAL_RCC_ClockConfig+0x364>)
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c42e:	4b0a      	ldr	r3, [pc, #40]	@ (800c458 <HAL_RCC_ClockConfig+0x368>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4618      	mov	r0, r3
 800c434:	f7f8 fe28 	bl	8005088 <HAL_InitTick>
 800c438:	4603      	mov	r3, r0
 800c43a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3718      	adds	r7, #24
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	58024400 	.word	0x58024400
 800c44c:	0802cd74 	.word	0x0802cd74
 800c450:	240001e0 	.word	0x240001e0
 800c454:	240001dc 	.word	0x240001dc
 800c458:	240001e4 	.word	0x240001e4

0800c45c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b089      	sub	sp, #36	@ 0x24
 800c460:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c462:	4bb3      	ldr	r3, [pc, #716]	@ (800c730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c46a:	2b18      	cmp	r3, #24
 800c46c:	f200 8155 	bhi.w	800c71a <HAL_RCC_GetSysClockFreq+0x2be>
 800c470:	a201      	add	r2, pc, #4	@ (adr r2, 800c478 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c476:	bf00      	nop
 800c478:	0800c4dd 	.word	0x0800c4dd
 800c47c:	0800c71b 	.word	0x0800c71b
 800c480:	0800c71b 	.word	0x0800c71b
 800c484:	0800c71b 	.word	0x0800c71b
 800c488:	0800c71b 	.word	0x0800c71b
 800c48c:	0800c71b 	.word	0x0800c71b
 800c490:	0800c71b 	.word	0x0800c71b
 800c494:	0800c71b 	.word	0x0800c71b
 800c498:	0800c503 	.word	0x0800c503
 800c49c:	0800c71b 	.word	0x0800c71b
 800c4a0:	0800c71b 	.word	0x0800c71b
 800c4a4:	0800c71b 	.word	0x0800c71b
 800c4a8:	0800c71b 	.word	0x0800c71b
 800c4ac:	0800c71b 	.word	0x0800c71b
 800c4b0:	0800c71b 	.word	0x0800c71b
 800c4b4:	0800c71b 	.word	0x0800c71b
 800c4b8:	0800c509 	.word	0x0800c509
 800c4bc:	0800c71b 	.word	0x0800c71b
 800c4c0:	0800c71b 	.word	0x0800c71b
 800c4c4:	0800c71b 	.word	0x0800c71b
 800c4c8:	0800c71b 	.word	0x0800c71b
 800c4cc:	0800c71b 	.word	0x0800c71b
 800c4d0:	0800c71b 	.word	0x0800c71b
 800c4d4:	0800c71b 	.word	0x0800c71b
 800c4d8:	0800c50f 	.word	0x0800c50f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4dc:	4b94      	ldr	r3, [pc, #592]	@ (800c730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f003 0320 	and.w	r3, r3, #32
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d009      	beq.n	800c4fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4e8:	4b91      	ldr	r3, [pc, #580]	@ (800c730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	08db      	lsrs	r3, r3, #3
 800c4ee:	f003 0303 	and.w	r3, r3, #3
 800c4f2:	4a90      	ldr	r2, [pc, #576]	@ (800c734 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c4f4:	fa22 f303 	lsr.w	r3, r2, r3
 800c4f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c4fa:	e111      	b.n	800c720 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c4fc:	4b8d      	ldr	r3, [pc, #564]	@ (800c734 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c4fe:	61bb      	str	r3, [r7, #24]
      break;
 800c500:	e10e      	b.n	800c720 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c502:	4b8d      	ldr	r3, [pc, #564]	@ (800c738 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c504:	61bb      	str	r3, [r7, #24]
      break;
 800c506:	e10b      	b.n	800c720 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c508:	4b8c      	ldr	r3, [pc, #560]	@ (800c73c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c50a:	61bb      	str	r3, [r7, #24]
      break;
 800c50c:	e108      	b.n	800c720 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c50e:	4b88      	ldr	r3, [pc, #544]	@ (800c730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c512:	f003 0303 	and.w	r3, r3, #3
 800c516:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c518:	4b85      	ldr	r3, [pc, #532]	@ (800c730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c51a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c51c:	091b      	lsrs	r3, r3, #4
 800c51e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c522:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c524:	4b82      	ldr	r3, [pc, #520]	@ (800c730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c528:	f003 0301 	and.w	r3, r3, #1
 800c52c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c52e:	4b80      	ldr	r3, [pc, #512]	@ (800c730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c532:	08db      	lsrs	r3, r3, #3
 800c534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	fb02 f303 	mul.w	r3, r2, r3
 800c53e:	ee07 3a90 	vmov	s15, r3
 800c542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c546:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	f000 80e1 	beq.w	800c714 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	2b02      	cmp	r3, #2
 800c556:	f000 8083 	beq.w	800c660 <HAL_RCC_GetSysClockFreq+0x204>
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	2b02      	cmp	r3, #2
 800c55e:	f200 80a1 	bhi.w	800c6a4 <HAL_RCC_GetSysClockFreq+0x248>
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d003      	beq.n	800c570 <HAL_RCC_GetSysClockFreq+0x114>
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d056      	beq.n	800c61c <HAL_RCC_GetSysClockFreq+0x1c0>
 800c56e:	e099      	b.n	800c6a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c570:	4b6f      	ldr	r3, [pc, #444]	@ (800c730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f003 0320 	and.w	r3, r3, #32
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d02d      	beq.n	800c5d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c57c:	4b6c      	ldr	r3, [pc, #432]	@ (800c730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	08db      	lsrs	r3, r3, #3
 800c582:	f003 0303 	and.w	r3, r3, #3
 800c586:	4a6b      	ldr	r2, [pc, #428]	@ (800c734 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c588:	fa22 f303 	lsr.w	r3, r2, r3
 800c58c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	ee07 3a90 	vmov	s15, r3
 800c594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	ee07 3a90 	vmov	s15, r3
 800c59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5a6:	4b62      	ldr	r3, [pc, #392]	@ (800c730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5ae:	ee07 3a90 	vmov	s15, r3
 800c5b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c5ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800c740 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c5be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c5ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c5d6:	e087      	b.n	800c6e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	ee07 3a90 	vmov	s15, r3
 800c5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800c744 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c5e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5ea:	4b51      	ldr	r3, [pc, #324]	@ (800c730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5f2:	ee07 3a90 	vmov	s15, r3
 800c5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5fa:	ed97 6a02 	vldr	s12, [r7, #8]
 800c5fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800c740 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c60a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c60e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c612:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c616:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c61a:	e065      	b.n	800c6e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	ee07 3a90 	vmov	s15, r3
 800c622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c626:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800c748 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c62a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c62e:	4b40      	ldr	r3, [pc, #256]	@ (800c730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c636:	ee07 3a90 	vmov	s15, r3
 800c63a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c63e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c642:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c740 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c64a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c64e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c65a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c65e:	e043      	b.n	800c6e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	ee07 3a90 	vmov	s15, r3
 800c666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c66a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800c74c <HAL_RCC_GetSysClockFreq+0x2f0>
 800c66e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c672:	4b2f      	ldr	r3, [pc, #188]	@ (800c730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c67a:	ee07 3a90 	vmov	s15, r3
 800c67e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c682:	ed97 6a02 	vldr	s12, [r7, #8]
 800c686:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800c740 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c68a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c68e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c69a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c69e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c6a2:	e021      	b.n	800c6e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	ee07 3a90 	vmov	s15, r3
 800c6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c748 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c6b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6b6:	4b1e      	ldr	r3, [pc, #120]	@ (800c730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6be:	ee07 3a90 	vmov	s15, r3
 800c6c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c6ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800c740 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c6ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c6e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c6e8:	4b11      	ldr	r3, [pc, #68]	@ (800c730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6ec:	0a5b      	lsrs	r3, r3, #9
 800c6ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	ee07 3a90 	vmov	s15, r3
 800c6fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c700:	edd7 6a07 	vldr	s13, [r7, #28]
 800c704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c70c:	ee17 3a90 	vmov	r3, s15
 800c710:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c712:	e005      	b.n	800c720 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c714:	2300      	movs	r3, #0
 800c716:	61bb      	str	r3, [r7, #24]
      break;
 800c718:	e002      	b.n	800c720 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c71a:	4b07      	ldr	r3, [pc, #28]	@ (800c738 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c71c:	61bb      	str	r3, [r7, #24]
      break;
 800c71e:	bf00      	nop
  }

  return sysclockfreq;
 800c720:	69bb      	ldr	r3, [r7, #24]
}
 800c722:	4618      	mov	r0, r3
 800c724:	3724      	adds	r7, #36	@ 0x24
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop
 800c730:	58024400 	.word	0x58024400
 800c734:	03d09000 	.word	0x03d09000
 800c738:	003d0900 	.word	0x003d0900
 800c73c:	017d7840 	.word	0x017d7840
 800c740:	46000000 	.word	0x46000000
 800c744:	4c742400 	.word	0x4c742400
 800c748:	4a742400 	.word	0x4a742400
 800c74c:	4bbebc20 	.word	0x4bbebc20

0800c750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c756:	f7ff fe81 	bl	800c45c <HAL_RCC_GetSysClockFreq>
 800c75a:	4602      	mov	r2, r0
 800c75c:	4b10      	ldr	r3, [pc, #64]	@ (800c7a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800c75e:	699b      	ldr	r3, [r3, #24]
 800c760:	0a1b      	lsrs	r3, r3, #8
 800c762:	f003 030f 	and.w	r3, r3, #15
 800c766:	490f      	ldr	r1, [pc, #60]	@ (800c7a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800c768:	5ccb      	ldrb	r3, [r1, r3]
 800c76a:	f003 031f 	and.w	r3, r3, #31
 800c76e:	fa22 f303 	lsr.w	r3, r2, r3
 800c772:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c774:	4b0a      	ldr	r3, [pc, #40]	@ (800c7a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800c776:	699b      	ldr	r3, [r3, #24]
 800c778:	f003 030f 	and.w	r3, r3, #15
 800c77c:	4a09      	ldr	r2, [pc, #36]	@ (800c7a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800c77e:	5cd3      	ldrb	r3, [r2, r3]
 800c780:	f003 031f 	and.w	r3, r3, #31
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	fa22 f303 	lsr.w	r3, r2, r3
 800c78a:	4a07      	ldr	r2, [pc, #28]	@ (800c7a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800c78c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c78e:	4a07      	ldr	r2, [pc, #28]	@ (800c7ac <HAL_RCC_GetHCLKFreq+0x5c>)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c794:	4b04      	ldr	r3, [pc, #16]	@ (800c7a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800c796:	681b      	ldr	r3, [r3, #0]
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	58024400 	.word	0x58024400
 800c7a4:	0802cd74 	.word	0x0802cd74
 800c7a8:	240001e0 	.word	0x240001e0
 800c7ac:	240001dc 	.word	0x240001dc

0800c7b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c7b4:	f7ff ffcc 	bl	800c750 <HAL_RCC_GetHCLKFreq>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	4b06      	ldr	r3, [pc, #24]	@ (800c7d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c7bc:	69db      	ldr	r3, [r3, #28]
 800c7be:	091b      	lsrs	r3, r3, #4
 800c7c0:	f003 0307 	and.w	r3, r3, #7
 800c7c4:	4904      	ldr	r1, [pc, #16]	@ (800c7d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c7c6:	5ccb      	ldrb	r3, [r1, r3]
 800c7c8:	f003 031f 	and.w	r3, r3, #31
 800c7cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	58024400 	.word	0x58024400
 800c7d8:	0802cd74 	.word	0x0802cd74

0800c7dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c7e0:	f7ff ffb6 	bl	800c750 <HAL_RCC_GetHCLKFreq>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	4b06      	ldr	r3, [pc, #24]	@ (800c800 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c7e8:	69db      	ldr	r3, [r3, #28]
 800c7ea:	0a1b      	lsrs	r3, r3, #8
 800c7ec:	f003 0307 	and.w	r3, r3, #7
 800c7f0:	4904      	ldr	r1, [pc, #16]	@ (800c804 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c7f2:	5ccb      	ldrb	r3, [r1, r3]
 800c7f4:	f003 031f 	and.w	r3, r3, #31
 800c7f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	58024400 	.word	0x58024400
 800c804:	0802cd74 	.word	0x0802cd74

0800c808 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c808:	b480      	push	{r7}
 800c80a:	b083      	sub	sp, #12
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	223f      	movs	r2, #63	@ 0x3f
 800c816:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c818:	4b1a      	ldr	r3, [pc, #104]	@ (800c884 <HAL_RCC_GetClockConfig+0x7c>)
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	f003 0207 	and.w	r2, r3, #7
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800c824:	4b17      	ldr	r3, [pc, #92]	@ (800c884 <HAL_RCC_GetClockConfig+0x7c>)
 800c826:	699b      	ldr	r3, [r3, #24]
 800c828:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800c830:	4b14      	ldr	r3, [pc, #80]	@ (800c884 <HAL_RCC_GetClockConfig+0x7c>)
 800c832:	699b      	ldr	r3, [r3, #24]
 800c834:	f003 020f 	and.w	r2, r3, #15
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800c83c:	4b11      	ldr	r3, [pc, #68]	@ (800c884 <HAL_RCC_GetClockConfig+0x7c>)
 800c83e:	699b      	ldr	r3, [r3, #24]
 800c840:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800c848:	4b0e      	ldr	r3, [pc, #56]	@ (800c884 <HAL_RCC_GetClockConfig+0x7c>)
 800c84a:	69db      	ldr	r3, [r3, #28]
 800c84c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800c854:	4b0b      	ldr	r3, [pc, #44]	@ (800c884 <HAL_RCC_GetClockConfig+0x7c>)
 800c856:	69db      	ldr	r3, [r3, #28]
 800c858:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800c860:	4b08      	ldr	r3, [pc, #32]	@ (800c884 <HAL_RCC_GetClockConfig+0x7c>)
 800c862:	6a1b      	ldr	r3, [r3, #32]
 800c864:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c86c:	4b06      	ldr	r3, [pc, #24]	@ (800c888 <HAL_RCC_GetClockConfig+0x80>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f003 020f 	and.w	r2, r3, #15
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	601a      	str	r2, [r3, #0]
}
 800c878:	bf00      	nop
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr
 800c884:	58024400 	.word	0x58024400
 800c888:	52002000 	.word	0x52002000

0800c88c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c88c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c890:	b0ca      	sub	sp, #296	@ 0x128
 800c892:	af00      	add	r7, sp, #0
 800c894:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c898:	2300      	movs	r3, #0
 800c89a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c89e:	2300      	movs	r3, #0
 800c8a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c8a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800c8b0:	2500      	movs	r5, #0
 800c8b2:	ea54 0305 	orrs.w	r3, r4, r5
 800c8b6:	d049      	beq.n	800c94c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c8b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c8c2:	d02f      	beq.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c8c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c8c8:	d828      	bhi.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c8ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c8ce:	d01a      	beq.n	800c906 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c8d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c8d4:	d822      	bhi.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d003      	beq.n	800c8e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c8da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c8de:	d007      	beq.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c8e0:	e01c      	b.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8e2:	4bb8      	ldr	r3, [pc, #736]	@ (800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c8e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8e6:	4ab7      	ldr	r2, [pc, #732]	@ (800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c8e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c8ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c8ee:	e01a      	b.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c8f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8f4:	3308      	adds	r3, #8
 800c8f6:	2102      	movs	r1, #2
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f001 fc8f 	bl	800e21c <RCCEx_PLL2_Config>
 800c8fe:	4603      	mov	r3, r0
 800c900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c904:	e00f      	b.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c90a:	3328      	adds	r3, #40	@ 0x28
 800c90c:	2102      	movs	r1, #2
 800c90e:	4618      	mov	r0, r3
 800c910:	f001 fd36 	bl	800e380 <RCCEx_PLL3_Config>
 800c914:	4603      	mov	r3, r0
 800c916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c91a:	e004      	b.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c91c:	2301      	movs	r3, #1
 800c91e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c922:	e000      	b.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c924:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d10a      	bne.n	800c944 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c92e:	4ba5      	ldr	r3, [pc, #660]	@ (800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c932:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c93a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c93c:	4aa1      	ldr	r2, [pc, #644]	@ (800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c93e:	430b      	orrs	r3, r1
 800c940:	6513      	str	r3, [r2, #80]	@ 0x50
 800c942:	e003      	b.n	800c94c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c94c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c954:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800c958:	f04f 0900 	mov.w	r9, #0
 800c95c:	ea58 0309 	orrs.w	r3, r8, r9
 800c960:	d047      	beq.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c968:	2b04      	cmp	r3, #4
 800c96a:	d82a      	bhi.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c96c:	a201      	add	r2, pc, #4	@ (adr r2, 800c974 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c972:	bf00      	nop
 800c974:	0800c989 	.word	0x0800c989
 800c978:	0800c997 	.word	0x0800c997
 800c97c:	0800c9ad 	.word	0x0800c9ad
 800c980:	0800c9cb 	.word	0x0800c9cb
 800c984:	0800c9cb 	.word	0x0800c9cb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c988:	4b8e      	ldr	r3, [pc, #568]	@ (800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c98a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c98c:	4a8d      	ldr	r2, [pc, #564]	@ (800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c98e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c994:	e01a      	b.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c99a:	3308      	adds	r3, #8
 800c99c:	2100      	movs	r1, #0
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f001 fc3c 	bl	800e21c <RCCEx_PLL2_Config>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c9aa:	e00f      	b.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c9ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9b0:	3328      	adds	r3, #40	@ 0x28
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f001 fce3 	bl	800e380 <RCCEx_PLL3_Config>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c9c0:	e004      	b.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c9c8:	e000      	b.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c9ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d10a      	bne.n	800c9ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c9d4:	4b7b      	ldr	r3, [pc, #492]	@ (800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c9d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9d8:	f023 0107 	bic.w	r1, r3, #7
 800c9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9e2:	4a78      	ldr	r2, [pc, #480]	@ (800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c9e4:	430b      	orrs	r3, r1
 800c9e6:	6513      	str	r3, [r2, #80]	@ 0x50
 800c9e8:	e003      	b.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c9ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800c9fe:	f04f 0b00 	mov.w	fp, #0
 800ca02:	ea5a 030b 	orrs.w	r3, sl, fp
 800ca06:	d04c      	beq.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ca08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca12:	d030      	beq.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ca14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca18:	d829      	bhi.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ca1a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ca1c:	d02d      	beq.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ca1e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ca20:	d825      	bhi.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ca22:	2b80      	cmp	r3, #128	@ 0x80
 800ca24:	d018      	beq.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ca26:	2b80      	cmp	r3, #128	@ 0x80
 800ca28:	d821      	bhi.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d002      	beq.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ca2e:	2b40      	cmp	r3, #64	@ 0x40
 800ca30:	d007      	beq.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ca32:	e01c      	b.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca34:	4b63      	ldr	r3, [pc, #396]	@ (800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca38:	4a62      	ldr	r2, [pc, #392]	@ (800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ca40:	e01c      	b.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca46:	3308      	adds	r3, #8
 800ca48:	2100      	movs	r1, #0
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f001 fbe6 	bl	800e21c <RCCEx_PLL2_Config>
 800ca50:	4603      	mov	r3, r0
 800ca52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ca56:	e011      	b.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca5c:	3328      	adds	r3, #40	@ 0x28
 800ca5e:	2100      	movs	r1, #0
 800ca60:	4618      	mov	r0, r3
 800ca62:	f001 fc8d 	bl	800e380 <RCCEx_PLL3_Config>
 800ca66:	4603      	mov	r3, r0
 800ca68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ca6c:	e006      	b.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ca74:	e002      	b.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ca76:	bf00      	nop
 800ca78:	e000      	b.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ca7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d10a      	bne.n	800ca9a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ca84:	4b4f      	ldr	r3, [pc, #316]	@ (800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca88:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800ca8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca92:	4a4c      	ldr	r2, [pc, #304]	@ (800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca94:	430b      	orrs	r3, r1
 800ca96:	6513      	str	r3, [r2, #80]	@ 0x50
 800ca98:	e003      	b.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ca9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800caa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800caa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caaa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800caae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800cab2:	2300      	movs	r3, #0
 800cab4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800cab8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800cabc:	460b      	mov	r3, r1
 800cabe:	4313      	orrs	r3, r2
 800cac0:	d053      	beq.n	800cb6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800cac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cac6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800caca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cace:	d035      	beq.n	800cb3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800cad0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cad4:	d82e      	bhi.n	800cb34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cad6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cada:	d031      	beq.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800cadc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cae0:	d828      	bhi.n	800cb34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cae2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cae6:	d01a      	beq.n	800cb1e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800cae8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800caec:	d822      	bhi.n	800cb34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d003      	beq.n	800cafa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800caf2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800caf6:	d007      	beq.n	800cb08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800caf8:	e01c      	b.n	800cb34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cafa:	4b32      	ldr	r3, [pc, #200]	@ (800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cafc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cafe:	4a31      	ldr	r2, [pc, #196]	@ (800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cb06:	e01c      	b.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cb08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb0c:	3308      	adds	r3, #8
 800cb0e:	2100      	movs	r1, #0
 800cb10:	4618      	mov	r0, r3
 800cb12:	f001 fb83 	bl	800e21c <RCCEx_PLL2_Config>
 800cb16:	4603      	mov	r3, r0
 800cb18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cb1c:	e011      	b.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cb1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb22:	3328      	adds	r3, #40	@ 0x28
 800cb24:	2100      	movs	r1, #0
 800cb26:	4618      	mov	r0, r3
 800cb28:	f001 fc2a 	bl	800e380 <RCCEx_PLL3_Config>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cb32:	e006      	b.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cb34:	2301      	movs	r3, #1
 800cb36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cb3a:	e002      	b.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cb3c:	bf00      	nop
 800cb3e:	e000      	b.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cb40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d10b      	bne.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800cb4a:	4b1e      	ldr	r3, [pc, #120]	@ (800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb4e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800cb52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800cb5a:	4a1a      	ldr	r2, [pc, #104]	@ (800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb5c:	430b      	orrs	r3, r1
 800cb5e:	6593      	str	r3, [r2, #88]	@ 0x58
 800cb60:	e003      	b.n	800cb6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cb66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800cb6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb72:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800cb76:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800cb80:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800cb84:	460b      	mov	r3, r1
 800cb86:	4313      	orrs	r3, r2
 800cb88:	d056      	beq.n	800cc38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800cb8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cb92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cb96:	d038      	beq.n	800cc0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800cb98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cb9c:	d831      	bhi.n	800cc02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cb9e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cba2:	d034      	beq.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800cba4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cba8:	d82b      	bhi.n	800cc02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cbaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cbae:	d01d      	beq.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x360>
 800cbb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cbb4:	d825      	bhi.n	800cc02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d006      	beq.n	800cbc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800cbba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cbbe:	d00a      	beq.n	800cbd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800cbc0:	e01f      	b.n	800cc02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cbc2:	bf00      	nop
 800cbc4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbc8:	4ba2      	ldr	r3, [pc, #648]	@ (800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cbca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbcc:	4aa1      	ldr	r2, [pc, #644]	@ (800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cbce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cbd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cbd4:	e01c      	b.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cbd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbda:	3308      	adds	r3, #8
 800cbdc:	2100      	movs	r1, #0
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f001 fb1c 	bl	800e21c <RCCEx_PLL2_Config>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cbea:	e011      	b.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cbec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbf0:	3328      	adds	r3, #40	@ 0x28
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f001 fbc3 	bl	800e380 <RCCEx_PLL3_Config>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cc00:	e006      	b.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cc08:	e002      	b.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cc0a:	bf00      	nop
 800cc0c:	e000      	b.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cc0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d10b      	bne.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cc18:	4b8e      	ldr	r3, [pc, #568]	@ (800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cc1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc1c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800cc20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cc28:	4a8a      	ldr	r2, [pc, #552]	@ (800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cc2a:	430b      	orrs	r3, r1
 800cc2c:	6593      	str	r3, [r2, #88]	@ 0x58
 800cc2e:	e003      	b.n	800cc38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cc38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc40:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800cc44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cc48:	2300      	movs	r3, #0
 800cc4a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cc4e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800cc52:	460b      	mov	r3, r1
 800cc54:	4313      	orrs	r3, r2
 800cc56:	d03a      	beq.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800cc58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc5e:	2b30      	cmp	r3, #48	@ 0x30
 800cc60:	d01f      	beq.n	800cca2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800cc62:	2b30      	cmp	r3, #48	@ 0x30
 800cc64:	d819      	bhi.n	800cc9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cc66:	2b20      	cmp	r3, #32
 800cc68:	d00c      	beq.n	800cc84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800cc6a:	2b20      	cmp	r3, #32
 800cc6c:	d815      	bhi.n	800cc9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d019      	beq.n	800cca6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800cc72:	2b10      	cmp	r3, #16
 800cc74:	d111      	bne.n	800cc9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc76:	4b77      	ldr	r3, [pc, #476]	@ (800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cc78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc7a:	4a76      	ldr	r2, [pc, #472]	@ (800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cc7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cc82:	e011      	b.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cc84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc88:	3308      	adds	r3, #8
 800cc8a:	2102      	movs	r1, #2
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f001 fac5 	bl	800e21c <RCCEx_PLL2_Config>
 800cc92:	4603      	mov	r3, r0
 800cc94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cc98:	e006      	b.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cca0:	e002      	b.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800cca2:	bf00      	nop
 800cca4:	e000      	b.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800cca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cca8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d10a      	bne.n	800ccc6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ccb0:	4b68      	ldr	r3, [pc, #416]	@ (800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ccb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ccb4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800ccb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ccbe:	4a65      	ldr	r2, [pc, #404]	@ (800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ccc0:	430b      	orrs	r3, r1
 800ccc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ccc4:	e003      	b.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ccca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ccce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800ccda:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ccde:	2300      	movs	r3, #0
 800cce0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800cce4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800cce8:	460b      	mov	r3, r1
 800ccea:	4313      	orrs	r3, r2
 800ccec:	d051      	beq.n	800cd92 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ccee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ccf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ccf8:	d035      	beq.n	800cd66 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ccfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ccfe:	d82e      	bhi.n	800cd5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cd00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd04:	d031      	beq.n	800cd6a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800cd06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd0a:	d828      	bhi.n	800cd5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cd0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd10:	d01a      	beq.n	800cd48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800cd12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd16:	d822      	bhi.n	800cd5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d003      	beq.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800cd1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd20:	d007      	beq.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800cd22:	e01c      	b.n	800cd5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd24:	4b4b      	ldr	r3, [pc, #300]	@ (800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd28:	4a4a      	ldr	r2, [pc, #296]	@ (800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cd30:	e01c      	b.n	800cd6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd36:	3308      	adds	r3, #8
 800cd38:	2100      	movs	r1, #0
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f001 fa6e 	bl	800e21c <RCCEx_PLL2_Config>
 800cd40:	4603      	mov	r3, r0
 800cd42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cd46:	e011      	b.n	800cd6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd4c:	3328      	adds	r3, #40	@ 0x28
 800cd4e:	2100      	movs	r1, #0
 800cd50:	4618      	mov	r0, r3
 800cd52:	f001 fb15 	bl	800e380 <RCCEx_PLL3_Config>
 800cd56:	4603      	mov	r3, r0
 800cd58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cd5c:	e006      	b.n	800cd6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cd64:	e002      	b.n	800cd6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800cd66:	bf00      	nop
 800cd68:	e000      	b.n	800cd6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800cd6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d10a      	bne.n	800cd8a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800cd74:	4b37      	ldr	r3, [pc, #220]	@ (800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd78:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800cd7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd82:	4a34      	ldr	r2, [pc, #208]	@ (800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd84:	430b      	orrs	r3, r1
 800cd86:	6513      	str	r3, [r2, #80]	@ 0x50
 800cd88:	e003      	b.n	800cd92 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800cd92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd9a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800cd9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cda2:	2300      	movs	r3, #0
 800cda4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800cda8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800cdac:	460b      	mov	r3, r1
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	d056      	beq.n	800ce60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800cdb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cdb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cdbc:	d033      	beq.n	800ce26 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800cdbe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cdc2:	d82c      	bhi.n	800ce1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cdc4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cdc8:	d02f      	beq.n	800ce2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800cdca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cdce:	d826      	bhi.n	800ce1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cdd0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cdd4:	d02b      	beq.n	800ce2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800cdd6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cdda:	d820      	bhi.n	800ce1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cddc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cde0:	d012      	beq.n	800ce08 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800cde2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cde6:	d81a      	bhi.n	800ce1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d022      	beq.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800cdec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdf0:	d115      	bne.n	800ce1e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cdf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cdf6:	3308      	adds	r3, #8
 800cdf8:	2101      	movs	r1, #1
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f001 fa0e 	bl	800e21c <RCCEx_PLL2_Config>
 800ce00:	4603      	mov	r3, r0
 800ce02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ce06:	e015      	b.n	800ce34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ce08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce0c:	3328      	adds	r3, #40	@ 0x28
 800ce0e:	2101      	movs	r1, #1
 800ce10:	4618      	mov	r0, r3
 800ce12:	f001 fab5 	bl	800e380 <RCCEx_PLL3_Config>
 800ce16:	4603      	mov	r3, r0
 800ce18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ce1c:	e00a      	b.n	800ce34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ce24:	e006      	b.n	800ce34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ce26:	bf00      	nop
 800ce28:	e004      	b.n	800ce34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ce2a:	bf00      	nop
 800ce2c:	e002      	b.n	800ce34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ce2e:	bf00      	nop
 800ce30:	e000      	b.n	800ce34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ce32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10d      	bne.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ce3c:	4b05      	ldr	r3, [pc, #20]	@ (800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce40:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800ce44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce4a:	4a02      	ldr	r2, [pc, #8]	@ (800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce4c:	430b      	orrs	r3, r1
 800ce4e:	6513      	str	r3, [r2, #80]	@ 0x50
 800ce50:	e006      	b.n	800ce60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ce52:	bf00      	nop
 800ce54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ce5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ce60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce68:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800ce6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ce70:	2300      	movs	r3, #0
 800ce72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ce76:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	d055      	beq.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ce80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ce88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ce8c:	d033      	beq.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ce8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ce92:	d82c      	bhi.n	800ceee <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ce94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce98:	d02f      	beq.n	800cefa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ce9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce9e:	d826      	bhi.n	800ceee <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cea0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cea4:	d02b      	beq.n	800cefe <HAL_RCCEx_PeriphCLKConfig+0x672>
 800cea6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ceaa:	d820      	bhi.n	800ceee <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ceac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ceb0:	d012      	beq.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ceb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ceb6:	d81a      	bhi.n	800ceee <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d022      	beq.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800cebc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cec0:	d115      	bne.n	800ceee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cec6:	3308      	adds	r3, #8
 800cec8:	2101      	movs	r1, #1
 800ceca:	4618      	mov	r0, r3
 800cecc:	f001 f9a6 	bl	800e21c <RCCEx_PLL2_Config>
 800ced0:	4603      	mov	r3, r0
 800ced2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ced6:	e015      	b.n	800cf04 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ced8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cedc:	3328      	adds	r3, #40	@ 0x28
 800cede:	2101      	movs	r1, #1
 800cee0:	4618      	mov	r0, r3
 800cee2:	f001 fa4d 	bl	800e380 <RCCEx_PLL3_Config>
 800cee6:	4603      	mov	r3, r0
 800cee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ceec:	e00a      	b.n	800cf04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ceee:	2301      	movs	r3, #1
 800cef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cef4:	e006      	b.n	800cf04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cef6:	bf00      	nop
 800cef8:	e004      	b.n	800cf04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cefa:	bf00      	nop
 800cefc:	e002      	b.n	800cf04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cefe:	bf00      	nop
 800cf00:	e000      	b.n	800cf04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cf02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d10b      	bne.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cf0c:	4ba3      	ldr	r3, [pc, #652]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf10:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800cf14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cf1c:	4a9f      	ldr	r2, [pc, #636]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf1e:	430b      	orrs	r3, r1
 800cf20:	6593      	str	r3, [r2, #88]	@ 0x58
 800cf22:	e003      	b.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cf28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cf2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf34:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800cf38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cf42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cf46:	460b      	mov	r3, r1
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	d037      	beq.n	800cfbc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800cf4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf56:	d00e      	beq.n	800cf76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800cf58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf5c:	d816      	bhi.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d018      	beq.n	800cf94 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800cf62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf66:	d111      	bne.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf68:	4b8c      	ldr	r3, [pc, #560]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf6c:	4a8b      	ldr	r2, [pc, #556]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cf72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cf74:	e00f      	b.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cf76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf7a:	3308      	adds	r3, #8
 800cf7c:	2101      	movs	r1, #1
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f001 f94c 	bl	800e21c <RCCEx_PLL2_Config>
 800cf84:	4603      	mov	r3, r0
 800cf86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cf8a:	e004      	b.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cf92:	e000      	b.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800cf94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d10a      	bne.n	800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cf9e:	4b7f      	ldr	r3, [pc, #508]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cfa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cfa2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800cfa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfac:	4a7b      	ldr	r2, [pc, #492]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cfae:	430b      	orrs	r3, r1
 800cfb0:	6513      	str	r3, [r2, #80]	@ 0x50
 800cfb2:	e003      	b.n	800cfbc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cfb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cfbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800cfc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cfcc:	2300      	movs	r3, #0
 800cfce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cfd2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	d039      	beq.n	800d050 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800cfdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cfe2:	2b03      	cmp	r3, #3
 800cfe4:	d81c      	bhi.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800cfe6:	a201      	add	r2, pc, #4	@ (adr r2, 800cfec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800cfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfec:	0800d029 	.word	0x0800d029
 800cff0:	0800cffd 	.word	0x0800cffd
 800cff4:	0800d00b 	.word	0x0800d00b
 800cff8:	0800d029 	.word	0x0800d029
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cffc:	4b67      	ldr	r3, [pc, #412]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d000:	4a66      	ldr	r2, [pc, #408]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d006:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d008:	e00f      	b.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d00e:	3308      	adds	r3, #8
 800d010:	2102      	movs	r1, #2
 800d012:	4618      	mov	r0, r3
 800d014:	f001 f902 	bl	800e21c <RCCEx_PLL2_Config>
 800d018:	4603      	mov	r3, r0
 800d01a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d01e:	e004      	b.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d020:	2301      	movs	r3, #1
 800d022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d026:	e000      	b.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800d028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d02a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d10a      	bne.n	800d048 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d032:	4b5a      	ldr	r3, [pc, #360]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d036:	f023 0103 	bic.w	r1, r3, #3
 800d03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d03e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d040:	4a56      	ldr	r2, [pc, #344]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d042:	430b      	orrs	r3, r1
 800d044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d046:	e003      	b.n	800d050 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d04c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d058:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800d05c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d060:	2300      	movs	r3, #0
 800d062:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d066:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800d06a:	460b      	mov	r3, r1
 800d06c:	4313      	orrs	r3, r2
 800d06e:	f000 809f 	beq.w	800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d072:	4b4b      	ldr	r3, [pc, #300]	@ (800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a4a      	ldr	r2, [pc, #296]	@ (800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d07c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d07e:	f7f9 fc73 	bl	8006968 <HAL_GetTick>
 800d082:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d086:	e00b      	b.n	800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d088:	f7f9 fc6e 	bl	8006968 <HAL_GetTick>
 800d08c:	4602      	mov	r2, r0
 800d08e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	2b64      	cmp	r3, #100	@ 0x64
 800d096:	d903      	bls.n	800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800d098:	2303      	movs	r3, #3
 800d09a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d09e:	e005      	b.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d0a0:	4b3f      	ldr	r3, [pc, #252]	@ (800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d0ed      	beq.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800d0ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d179      	bne.n	800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d0b4:	4b39      	ldr	r3, [pc, #228]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d0b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d0c0:	4053      	eors	r3, r2
 800d0c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d015      	beq.n	800d0f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d0ca:	4b34      	ldr	r3, [pc, #208]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d0cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d0d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d0d6:	4b31      	ldr	r3, [pc, #196]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d0d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0da:	4a30      	ldr	r2, [pc, #192]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d0dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d0e0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d0e2:	4b2e      	ldr	r3, [pc, #184]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d0e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0e6:	4a2d      	ldr	r2, [pc, #180]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d0e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d0ec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d0ee:	4a2b      	ldr	r2, [pc, #172]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d0f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d0f4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d0f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d0fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d102:	d118      	bne.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d104:	f7f9 fc30 	bl	8006968 <HAL_GetTick>
 800d108:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d10c:	e00d      	b.n	800d12a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d10e:	f7f9 fc2b 	bl	8006968 <HAL_GetTick>
 800d112:	4602      	mov	r2, r0
 800d114:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d118:	1ad2      	subs	r2, r2, r3
 800d11a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d11e:	429a      	cmp	r2, r3
 800d120:	d903      	bls.n	800d12a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800d122:	2303      	movs	r3, #3
 800d124:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800d128:	e005      	b.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d12a:	4b1c      	ldr	r3, [pc, #112]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d12c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d12e:	f003 0302 	and.w	r3, r3, #2
 800d132:	2b00      	cmp	r3, #0
 800d134:	d0eb      	beq.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800d136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d129      	bne.n	800d192 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d142:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d14a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d14e:	d10e      	bne.n	800d16e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800d150:	4b12      	ldr	r3, [pc, #72]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d152:	691b      	ldr	r3, [r3, #16]
 800d154:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800d158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d15c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d160:	091a      	lsrs	r2, r3, #4
 800d162:	4b10      	ldr	r3, [pc, #64]	@ (800d1a4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800d164:	4013      	ands	r3, r2
 800d166:	4a0d      	ldr	r2, [pc, #52]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d168:	430b      	orrs	r3, r1
 800d16a:	6113      	str	r3, [r2, #16]
 800d16c:	e005      	b.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800d16e:	4b0b      	ldr	r3, [pc, #44]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	4a0a      	ldr	r2, [pc, #40]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d174:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d178:	6113      	str	r3, [r2, #16]
 800d17a:	4b08      	ldr	r3, [pc, #32]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d17c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d182:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d18a:	4a04      	ldr	r2, [pc, #16]	@ (800d19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d18c:	430b      	orrs	r3, r1
 800d18e:	6713      	str	r3, [r2, #112]	@ 0x70
 800d190:	e00e      	b.n	800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d196:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800d19a:	e009      	b.n	800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800d19c:	58024400 	.word	0x58024400
 800d1a0:	58024800 	.word	0x58024800
 800d1a4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d1ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d1b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b8:	f002 0301 	and.w	r3, r2, #1
 800d1bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d1c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d1ca:	460b      	mov	r3, r1
 800d1cc:	4313      	orrs	r3, r2
 800d1ce:	f000 8089 	beq.w	800d2e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d1d8:	2b28      	cmp	r3, #40	@ 0x28
 800d1da:	d86b      	bhi.n	800d2b4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800d1dc:	a201      	add	r2, pc, #4	@ (adr r2, 800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e2:	bf00      	nop
 800d1e4:	0800d2bd 	.word	0x0800d2bd
 800d1e8:	0800d2b5 	.word	0x0800d2b5
 800d1ec:	0800d2b5 	.word	0x0800d2b5
 800d1f0:	0800d2b5 	.word	0x0800d2b5
 800d1f4:	0800d2b5 	.word	0x0800d2b5
 800d1f8:	0800d2b5 	.word	0x0800d2b5
 800d1fc:	0800d2b5 	.word	0x0800d2b5
 800d200:	0800d2b5 	.word	0x0800d2b5
 800d204:	0800d289 	.word	0x0800d289
 800d208:	0800d2b5 	.word	0x0800d2b5
 800d20c:	0800d2b5 	.word	0x0800d2b5
 800d210:	0800d2b5 	.word	0x0800d2b5
 800d214:	0800d2b5 	.word	0x0800d2b5
 800d218:	0800d2b5 	.word	0x0800d2b5
 800d21c:	0800d2b5 	.word	0x0800d2b5
 800d220:	0800d2b5 	.word	0x0800d2b5
 800d224:	0800d29f 	.word	0x0800d29f
 800d228:	0800d2b5 	.word	0x0800d2b5
 800d22c:	0800d2b5 	.word	0x0800d2b5
 800d230:	0800d2b5 	.word	0x0800d2b5
 800d234:	0800d2b5 	.word	0x0800d2b5
 800d238:	0800d2b5 	.word	0x0800d2b5
 800d23c:	0800d2b5 	.word	0x0800d2b5
 800d240:	0800d2b5 	.word	0x0800d2b5
 800d244:	0800d2bd 	.word	0x0800d2bd
 800d248:	0800d2b5 	.word	0x0800d2b5
 800d24c:	0800d2b5 	.word	0x0800d2b5
 800d250:	0800d2b5 	.word	0x0800d2b5
 800d254:	0800d2b5 	.word	0x0800d2b5
 800d258:	0800d2b5 	.word	0x0800d2b5
 800d25c:	0800d2b5 	.word	0x0800d2b5
 800d260:	0800d2b5 	.word	0x0800d2b5
 800d264:	0800d2bd 	.word	0x0800d2bd
 800d268:	0800d2b5 	.word	0x0800d2b5
 800d26c:	0800d2b5 	.word	0x0800d2b5
 800d270:	0800d2b5 	.word	0x0800d2b5
 800d274:	0800d2b5 	.word	0x0800d2b5
 800d278:	0800d2b5 	.word	0x0800d2b5
 800d27c:	0800d2b5 	.word	0x0800d2b5
 800d280:	0800d2b5 	.word	0x0800d2b5
 800d284:	0800d2bd 	.word	0x0800d2bd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d28c:	3308      	adds	r3, #8
 800d28e:	2101      	movs	r1, #1
 800d290:	4618      	mov	r0, r3
 800d292:	f000 ffc3 	bl	800e21c <RCCEx_PLL2_Config>
 800d296:	4603      	mov	r3, r0
 800d298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d29c:	e00f      	b.n	800d2be <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2a2:	3328      	adds	r3, #40	@ 0x28
 800d2a4:	2101      	movs	r1, #1
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f001 f86a 	bl	800e380 <RCCEx_PLL3_Config>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d2b2:	e004      	b.n	800d2be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d2ba:	e000      	b.n	800d2be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800d2bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d10a      	bne.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d2c6:	4bbf      	ldr	r3, [pc, #764]	@ (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d2c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2ca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800d2ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d2d4:	4abb      	ldr	r2, [pc, #748]	@ (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d2d6:	430b      	orrs	r3, r1
 800d2d8:	6553      	str	r3, [r2, #84]	@ 0x54
 800d2da:	e003      	b.n	800d2e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d2e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ec:	f002 0302 	and.w	r3, r2, #2
 800d2f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d2fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800d2fe:	460b      	mov	r3, r1
 800d300:	4313      	orrs	r3, r2
 800d302:	d041      	beq.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d308:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d30a:	2b05      	cmp	r3, #5
 800d30c:	d824      	bhi.n	800d358 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800d30e:	a201      	add	r2, pc, #4	@ (adr r2, 800d314 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800d310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d314:	0800d361 	.word	0x0800d361
 800d318:	0800d32d 	.word	0x0800d32d
 800d31c:	0800d343 	.word	0x0800d343
 800d320:	0800d361 	.word	0x0800d361
 800d324:	0800d361 	.word	0x0800d361
 800d328:	0800d361 	.word	0x0800d361
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d330:	3308      	adds	r3, #8
 800d332:	2101      	movs	r1, #1
 800d334:	4618      	mov	r0, r3
 800d336:	f000 ff71 	bl	800e21c <RCCEx_PLL2_Config>
 800d33a:	4603      	mov	r3, r0
 800d33c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d340:	e00f      	b.n	800d362 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d346:	3328      	adds	r3, #40	@ 0x28
 800d348:	2101      	movs	r1, #1
 800d34a:	4618      	mov	r0, r3
 800d34c:	f001 f818 	bl	800e380 <RCCEx_PLL3_Config>
 800d350:	4603      	mov	r3, r0
 800d352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d356:	e004      	b.n	800d362 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d358:	2301      	movs	r3, #1
 800d35a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d35e:	e000      	b.n	800d362 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800d360:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d362:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d366:	2b00      	cmp	r3, #0
 800d368:	d10a      	bne.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d36a:	4b96      	ldr	r3, [pc, #600]	@ (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d36c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d36e:	f023 0107 	bic.w	r1, r3, #7
 800d372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d376:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d378:	4a92      	ldr	r2, [pc, #584]	@ (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d37a:	430b      	orrs	r3, r1
 800d37c:	6553      	str	r3, [r2, #84]	@ 0x54
 800d37e:	e003      	b.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d384:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d390:	f002 0304 	and.w	r3, r2, #4
 800d394:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d398:	2300      	movs	r3, #0
 800d39a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d39e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	d044      	beq.n	800d432 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d3b0:	2b05      	cmp	r3, #5
 800d3b2:	d825      	bhi.n	800d400 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d3b4:	a201      	add	r2, pc, #4	@ (adr r2, 800d3bc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ba:	bf00      	nop
 800d3bc:	0800d409 	.word	0x0800d409
 800d3c0:	0800d3d5 	.word	0x0800d3d5
 800d3c4:	0800d3eb 	.word	0x0800d3eb
 800d3c8:	0800d409 	.word	0x0800d409
 800d3cc:	0800d409 	.word	0x0800d409
 800d3d0:	0800d409 	.word	0x0800d409
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3d8:	3308      	adds	r3, #8
 800d3da:	2101      	movs	r1, #1
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f000 ff1d 	bl	800e21c <RCCEx_PLL2_Config>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d3e8:	e00f      	b.n	800d40a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d3ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3ee:	3328      	adds	r3, #40	@ 0x28
 800d3f0:	2101      	movs	r1, #1
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f000 ffc4 	bl	800e380 <RCCEx_PLL3_Config>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d3fe:	e004      	b.n	800d40a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d400:	2301      	movs	r3, #1
 800d402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d406:	e000      	b.n	800d40a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d40a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d10b      	bne.n	800d42a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d412:	4b6c      	ldr	r3, [pc, #432]	@ (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d416:	f023 0107 	bic.w	r1, r3, #7
 800d41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d41e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d422:	4a68      	ldr	r2, [pc, #416]	@ (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d424:	430b      	orrs	r3, r1
 800d426:	6593      	str	r3, [r2, #88]	@ 0x58
 800d428:	e003      	b.n	800d432 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d42a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d42e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43a:	f002 0320 	and.w	r3, r2, #32
 800d43e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d442:	2300      	movs	r3, #0
 800d444:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d448:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d44c:	460b      	mov	r3, r1
 800d44e:	4313      	orrs	r3, r2
 800d450:	d055      	beq.n	800d4fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d45a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d45e:	d033      	beq.n	800d4c8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d460:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d464:	d82c      	bhi.n	800d4c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d46a:	d02f      	beq.n	800d4cc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d46c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d470:	d826      	bhi.n	800d4c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d472:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d476:	d02b      	beq.n	800d4d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d478:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d47c:	d820      	bhi.n	800d4c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d47e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d482:	d012      	beq.n	800d4aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d488:	d81a      	bhi.n	800d4c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d022      	beq.n	800d4d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d48e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d492:	d115      	bne.n	800d4c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d498:	3308      	adds	r3, #8
 800d49a:	2100      	movs	r1, #0
 800d49c:	4618      	mov	r0, r3
 800d49e:	f000 febd 	bl	800e21c <RCCEx_PLL2_Config>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d4a8:	e015      	b.n	800d4d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d4aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4ae:	3328      	adds	r3, #40	@ 0x28
 800d4b0:	2102      	movs	r1, #2
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f000 ff64 	bl	800e380 <RCCEx_PLL3_Config>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d4be:	e00a      	b.n	800d4d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d4c6:	e006      	b.n	800d4d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d4c8:	bf00      	nop
 800d4ca:	e004      	b.n	800d4d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d4cc:	bf00      	nop
 800d4ce:	e002      	b.n	800d4d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d4d0:	bf00      	nop
 800d4d2:	e000      	b.n	800d4d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d4d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d10b      	bne.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d4de:	4b39      	ldr	r3, [pc, #228]	@ (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d4e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4ee:	4a35      	ldr	r2, [pc, #212]	@ (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d4f0:	430b      	orrs	r3, r1
 800d4f2:	6553      	str	r3, [r2, #84]	@ 0x54
 800d4f4:	e003      	b.n	800d4fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d4fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d506:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d50a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d50e:	2300      	movs	r3, #0
 800d510:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d514:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d518:	460b      	mov	r3, r1
 800d51a:	4313      	orrs	r3, r2
 800d51c:	d058      	beq.n	800d5d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d522:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d526:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d52a:	d033      	beq.n	800d594 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d52c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d530:	d82c      	bhi.n	800d58c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d536:	d02f      	beq.n	800d598 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d53c:	d826      	bhi.n	800d58c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d53e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d542:	d02b      	beq.n	800d59c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d544:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d548:	d820      	bhi.n	800d58c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d54a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d54e:	d012      	beq.n	800d576 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d550:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d554:	d81a      	bhi.n	800d58c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d556:	2b00      	cmp	r3, #0
 800d558:	d022      	beq.n	800d5a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d55a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d55e:	d115      	bne.n	800d58c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d564:	3308      	adds	r3, #8
 800d566:	2100      	movs	r1, #0
 800d568:	4618      	mov	r0, r3
 800d56a:	f000 fe57 	bl	800e21c <RCCEx_PLL2_Config>
 800d56e:	4603      	mov	r3, r0
 800d570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d574:	e015      	b.n	800d5a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d57a:	3328      	adds	r3, #40	@ 0x28
 800d57c:	2102      	movs	r1, #2
 800d57e:	4618      	mov	r0, r3
 800d580:	f000 fefe 	bl	800e380 <RCCEx_PLL3_Config>
 800d584:	4603      	mov	r3, r0
 800d586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d58a:	e00a      	b.n	800d5a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d58c:	2301      	movs	r3, #1
 800d58e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d592:	e006      	b.n	800d5a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d594:	bf00      	nop
 800d596:	e004      	b.n	800d5a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d598:	bf00      	nop
 800d59a:	e002      	b.n	800d5a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d59c:	bf00      	nop
 800d59e:	e000      	b.n	800d5a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d5a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d10e      	bne.n	800d5c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d5aa:	4b06      	ldr	r3, [pc, #24]	@ (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d5ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5ae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800d5b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d5ba:	4a02      	ldr	r2, [pc, #8]	@ (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d5bc:	430b      	orrs	r3, r1
 800d5be:	6593      	str	r3, [r2, #88]	@ 0x58
 800d5c0:	e006      	b.n	800d5d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d5c2:	bf00      	nop
 800d5c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d5cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d5d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d5dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d5e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	d055      	beq.n	800d69c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d5f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d5f8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d5fc:	d033      	beq.n	800d666 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d5fe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d602:	d82c      	bhi.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d608:	d02f      	beq.n	800d66a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d60a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d60e:	d826      	bhi.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d610:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d614:	d02b      	beq.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d616:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d61a:	d820      	bhi.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d61c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d620:	d012      	beq.n	800d648 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d622:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d626:	d81a      	bhi.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d022      	beq.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d62c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d630:	d115      	bne.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d636:	3308      	adds	r3, #8
 800d638:	2100      	movs	r1, #0
 800d63a:	4618      	mov	r0, r3
 800d63c:	f000 fdee 	bl	800e21c <RCCEx_PLL2_Config>
 800d640:	4603      	mov	r3, r0
 800d642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d646:	e015      	b.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d64c:	3328      	adds	r3, #40	@ 0x28
 800d64e:	2102      	movs	r1, #2
 800d650:	4618      	mov	r0, r3
 800d652:	f000 fe95 	bl	800e380 <RCCEx_PLL3_Config>
 800d656:	4603      	mov	r3, r0
 800d658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d65c:	e00a      	b.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d65e:	2301      	movs	r3, #1
 800d660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d664:	e006      	b.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d666:	bf00      	nop
 800d668:	e004      	b.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d66a:	bf00      	nop
 800d66c:	e002      	b.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d66e:	bf00      	nop
 800d670:	e000      	b.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d672:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d10b      	bne.n	800d694 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d67c:	4ba1      	ldr	r3, [pc, #644]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d67e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d680:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800d684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d688:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d68c:	4a9d      	ldr	r2, [pc, #628]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d68e:	430b      	orrs	r3, r1
 800d690:	6593      	str	r3, [r2, #88]	@ 0x58
 800d692:	e003      	b.n	800d69c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d698:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d69c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a4:	f002 0308 	and.w	r3, r2, #8
 800d6a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d6b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	d01e      	beq.n	800d6fa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d6bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d6c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d6c8:	d10c      	bne.n	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6ce:	3328      	adds	r3, #40	@ 0x28
 800d6d0:	2102      	movs	r1, #2
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f000 fe54 	bl	800e380 <RCCEx_PLL3_Config>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d002      	beq.n	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d6e4:	4b87      	ldr	r3, [pc, #540]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d6e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6e8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d6ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d6f4:	4a83      	ldr	r2, [pc, #524]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d6f6:	430b      	orrs	r3, r1
 800d6f8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d6fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d702:	f002 0310 	and.w	r3, r2, #16
 800d706:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d70a:	2300      	movs	r3, #0
 800d70c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d710:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d714:	460b      	mov	r3, r1
 800d716:	4313      	orrs	r3, r2
 800d718:	d01e      	beq.n	800d758 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d71a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d71e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d726:	d10c      	bne.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d72c:	3328      	adds	r3, #40	@ 0x28
 800d72e:	2102      	movs	r1, #2
 800d730:	4618      	mov	r0, r3
 800d732:	f000 fe25 	bl	800e380 <RCCEx_PLL3_Config>
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d002      	beq.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800d73c:	2301      	movs	r3, #1
 800d73e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d742:	4b70      	ldr	r3, [pc, #448]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d746:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d74e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d752:	4a6c      	ldr	r2, [pc, #432]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d754:	430b      	orrs	r3, r1
 800d756:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d760:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800d764:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d768:	2300      	movs	r3, #0
 800d76a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d76e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d772:	460b      	mov	r3, r1
 800d774:	4313      	orrs	r3, r2
 800d776:	d03e      	beq.n	800d7f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d77c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d780:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d784:	d022      	beq.n	800d7cc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800d786:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d78a:	d81b      	bhi.n	800d7c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d003      	beq.n	800d798 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800d790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d794:	d00b      	beq.n	800d7ae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800d796:	e015      	b.n	800d7c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d79c:	3308      	adds	r3, #8
 800d79e:	2100      	movs	r1, #0
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f000 fd3b 	bl	800e21c <RCCEx_PLL2_Config>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d7ac:	e00f      	b.n	800d7ce <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d7ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7b2:	3328      	adds	r3, #40	@ 0x28
 800d7b4:	2102      	movs	r1, #2
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f000 fde2 	bl	800e380 <RCCEx_PLL3_Config>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d7c2:	e004      	b.n	800d7ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d7ca:	e000      	b.n	800d7ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800d7cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d7ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d10b      	bne.n	800d7ee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d7d6:	4b4b      	ldr	r3, [pc, #300]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d7d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d7de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d7e6:	4a47      	ldr	r2, [pc, #284]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d7e8:	430b      	orrs	r3, r1
 800d7ea:	6593      	str	r3, [r2, #88]	@ 0x58
 800d7ec:	e003      	b.n	800d7f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d7f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800d802:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d804:	2300      	movs	r3, #0
 800d806:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d808:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800d80c:	460b      	mov	r3, r1
 800d80e:	4313      	orrs	r3, r2
 800d810:	d03b      	beq.n	800d88a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d81a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d81e:	d01f      	beq.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800d820:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d824:	d818      	bhi.n	800d858 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800d826:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d82a:	d003      	beq.n	800d834 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800d82c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d830:	d007      	beq.n	800d842 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800d832:	e011      	b.n	800d858 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d834:	4b33      	ldr	r3, [pc, #204]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d838:	4a32      	ldr	r2, [pc, #200]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d83a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d83e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d840:	e00f      	b.n	800d862 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d846:	3328      	adds	r3, #40	@ 0x28
 800d848:	2101      	movs	r1, #1
 800d84a:	4618      	mov	r0, r3
 800d84c:	f000 fd98 	bl	800e380 <RCCEx_PLL3_Config>
 800d850:	4603      	mov	r3, r0
 800d852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800d856:	e004      	b.n	800d862 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d858:	2301      	movs	r3, #1
 800d85a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d85e:	e000      	b.n	800d862 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800d860:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d866:	2b00      	cmp	r3, #0
 800d868:	d10b      	bne.n	800d882 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d86a:	4b26      	ldr	r3, [pc, #152]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d86c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d86e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d87a:	4a22      	ldr	r2, [pc, #136]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d87c:	430b      	orrs	r3, r1
 800d87e:	6553      	str	r3, [r2, #84]	@ 0x54
 800d880:	e003      	b.n	800d88a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d886:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d88a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d892:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d896:	673b      	str	r3, [r7, #112]	@ 0x70
 800d898:	2300      	movs	r3, #0
 800d89a:	677b      	str	r3, [r7, #116]	@ 0x74
 800d89c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	d034      	beq.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d8a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d003      	beq.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800d8b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d8b4:	d007      	beq.n	800d8c6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800d8b6:	e011      	b.n	800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8b8:	4b12      	ldr	r3, [pc, #72]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d8ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8bc:	4a11      	ldr	r2, [pc, #68]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d8be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d8c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d8c4:	e00e      	b.n	800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8ca:	3308      	adds	r3, #8
 800d8cc:	2102      	movs	r1, #2
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f000 fca4 	bl	800e21c <RCCEx_PLL2_Config>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d8da:	e003      	b.n	800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d8e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d10d      	bne.n	800d908 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d8ec:	4b05      	ldr	r3, [pc, #20]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d8ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d8f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d8f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8fa:	4a02      	ldr	r2, [pc, #8]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d8fc:	430b      	orrs	r3, r1
 800d8fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d900:	e006      	b.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800d902:	bf00      	nop
 800d904:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d908:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d90c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d918:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800d91c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d91e:	2300      	movs	r3, #0
 800d920:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d922:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800d926:	460b      	mov	r3, r1
 800d928:	4313      	orrs	r3, r2
 800d92a:	d00c      	beq.n	800d946 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d92c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d930:	3328      	adds	r3, #40	@ 0x28
 800d932:	2102      	movs	r1, #2
 800d934:	4618      	mov	r0, r3
 800d936:	f000 fd23 	bl	800e380 <RCCEx_PLL3_Config>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d002      	beq.n	800d946 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800d940:	2301      	movs	r3, #1
 800d942:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d94e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d952:	663b      	str	r3, [r7, #96]	@ 0x60
 800d954:	2300      	movs	r3, #0
 800d956:	667b      	str	r3, [r7, #100]	@ 0x64
 800d958:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800d95c:	460b      	mov	r3, r1
 800d95e:	4313      	orrs	r3, r2
 800d960:	d038      	beq.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d96a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d96e:	d018      	beq.n	800d9a2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800d970:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d974:	d811      	bhi.n	800d99a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d97a:	d014      	beq.n	800d9a6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800d97c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d980:	d80b      	bhi.n	800d99a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d982:	2b00      	cmp	r3, #0
 800d984:	d011      	beq.n	800d9aa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800d986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d98a:	d106      	bne.n	800d99a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d98c:	4bc3      	ldr	r3, [pc, #780]	@ (800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d98e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d990:	4ac2      	ldr	r2, [pc, #776]	@ (800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d996:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d998:	e008      	b.n	800d9ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d99a:	2301      	movs	r3, #1
 800d99c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d9a0:	e004      	b.n	800d9ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d9a2:	bf00      	nop
 800d9a4:	e002      	b.n	800d9ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d9a6:	bf00      	nop
 800d9a8:	e000      	b.n	800d9ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d9aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d10b      	bne.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d9b4:	4bb9      	ldr	r3, [pc, #740]	@ (800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d9b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9b8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d9bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d9c4:	4ab5      	ldr	r2, [pc, #724]	@ (800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d9c6:	430b      	orrs	r3, r1
 800d9c8:	6553      	str	r3, [r2, #84]	@ 0x54
 800d9ca:	e003      	b.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d9d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800d9e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d9e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	4313      	orrs	r3, r2
 800d9ee:	d009      	beq.n	800da04 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d9f0:	4baa      	ldr	r3, [pc, #680]	@ (800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d9f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9fe:	4aa7      	ldr	r2, [pc, #668]	@ (800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da00:	430b      	orrs	r3, r1
 800da02:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800da04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800da10:	653b      	str	r3, [r7, #80]	@ 0x50
 800da12:	2300      	movs	r3, #0
 800da14:	657b      	str	r3, [r7, #84]	@ 0x54
 800da16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800da1a:	460b      	mov	r3, r1
 800da1c:	4313      	orrs	r3, r2
 800da1e:	d00a      	beq.n	800da36 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800da20:	4b9e      	ldr	r3, [pc, #632]	@ (800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da22:	691b      	ldr	r3, [r3, #16]
 800da24:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800da28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800da30:	4a9a      	ldr	r2, [pc, #616]	@ (800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da32:	430b      	orrs	r3, r1
 800da34:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800da36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da3e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800da42:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da44:	2300      	movs	r3, #0
 800da46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da48:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800da4c:	460b      	mov	r3, r1
 800da4e:	4313      	orrs	r3, r2
 800da50:	d009      	beq.n	800da66 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800da52:	4b92      	ldr	r3, [pc, #584]	@ (800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da56:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800da5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da60:	4a8e      	ldr	r2, [pc, #568]	@ (800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da62:	430b      	orrs	r3, r1
 800da64:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800da66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800da72:	643b      	str	r3, [r7, #64]	@ 0x40
 800da74:	2300      	movs	r3, #0
 800da76:	647b      	str	r3, [r7, #68]	@ 0x44
 800da78:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800da7c:	460b      	mov	r3, r1
 800da7e:	4313      	orrs	r3, r2
 800da80:	d00e      	beq.n	800daa0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800da82:	4b86      	ldr	r3, [pc, #536]	@ (800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da84:	691b      	ldr	r3, [r3, #16]
 800da86:	4a85      	ldr	r2, [pc, #532]	@ (800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da88:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800da8c:	6113      	str	r3, [r2, #16]
 800da8e:	4b83      	ldr	r3, [pc, #524]	@ (800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da90:	6919      	ldr	r1, [r3, #16]
 800da92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800da9a:	4a80      	ldr	r2, [pc, #512]	@ (800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da9c:	430b      	orrs	r3, r1
 800da9e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800daa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800daa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800daac:	63bb      	str	r3, [r7, #56]	@ 0x38
 800daae:	2300      	movs	r3, #0
 800dab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dab2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800dab6:	460b      	mov	r3, r1
 800dab8:	4313      	orrs	r3, r2
 800daba:	d009      	beq.n	800dad0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800dabc:	4b77      	ldr	r3, [pc, #476]	@ (800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dabe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dac0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800dac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800daca:	4a74      	ldr	r2, [pc, #464]	@ (800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dacc:	430b      	orrs	r3, r1
 800dace:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800dad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800dadc:	633b      	str	r3, [r7, #48]	@ 0x30
 800dade:	2300      	movs	r3, #0
 800dae0:	637b      	str	r3, [r7, #52]	@ 0x34
 800dae2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800dae6:	460b      	mov	r3, r1
 800dae8:	4313      	orrs	r3, r2
 800daea:	d00a      	beq.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800daec:	4b6b      	ldr	r3, [pc, #428]	@ (800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800daee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800daf0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800daf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800daf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dafc:	4a67      	ldr	r2, [pc, #412]	@ (800dc9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dafe:	430b      	orrs	r3, r1
 800db00:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800db02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0a:	2100      	movs	r1, #0
 800db0c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800db0e:	f003 0301 	and.w	r3, r3, #1
 800db12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db14:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800db18:	460b      	mov	r3, r1
 800db1a:	4313      	orrs	r3, r2
 800db1c:	d011      	beq.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800db1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db22:	3308      	adds	r3, #8
 800db24:	2100      	movs	r1, #0
 800db26:	4618      	mov	r0, r3
 800db28:	f000 fb78 	bl	800e21c <RCCEx_PLL2_Config>
 800db2c:	4603      	mov	r3, r0
 800db2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800db32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db36:	2b00      	cmp	r3, #0
 800db38:	d003      	beq.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800db42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4a:	2100      	movs	r1, #0
 800db4c:	6239      	str	r1, [r7, #32]
 800db4e:	f003 0302 	and.w	r3, r3, #2
 800db52:	627b      	str	r3, [r7, #36]	@ 0x24
 800db54:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800db58:	460b      	mov	r3, r1
 800db5a:	4313      	orrs	r3, r2
 800db5c:	d011      	beq.n	800db82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800db5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db62:	3308      	adds	r3, #8
 800db64:	2101      	movs	r1, #1
 800db66:	4618      	mov	r0, r3
 800db68:	f000 fb58 	bl	800e21c <RCCEx_PLL2_Config>
 800db6c:	4603      	mov	r3, r0
 800db6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800db72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db76:	2b00      	cmp	r3, #0
 800db78:	d003      	beq.n	800db82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800db82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8a:	2100      	movs	r1, #0
 800db8c:	61b9      	str	r1, [r7, #24]
 800db8e:	f003 0304 	and.w	r3, r3, #4
 800db92:	61fb      	str	r3, [r7, #28]
 800db94:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800db98:	460b      	mov	r3, r1
 800db9a:	4313      	orrs	r3, r2
 800db9c:	d011      	beq.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800db9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dba2:	3308      	adds	r3, #8
 800dba4:	2102      	movs	r1, #2
 800dba6:	4618      	mov	r0, r3
 800dba8:	f000 fb38 	bl	800e21c <RCCEx_PLL2_Config>
 800dbac:	4603      	mov	r3, r0
 800dbae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800dbb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d003      	beq.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800dbc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbca:	2100      	movs	r1, #0
 800dbcc:	6139      	str	r1, [r7, #16]
 800dbce:	f003 0308 	and.w	r3, r3, #8
 800dbd2:	617b      	str	r3, [r7, #20]
 800dbd4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	d011      	beq.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dbde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbe2:	3328      	adds	r3, #40	@ 0x28
 800dbe4:	2100      	movs	r1, #0
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f000 fbca 	bl	800e380 <RCCEx_PLL3_Config>
 800dbec:	4603      	mov	r3, r0
 800dbee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800dbf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d003      	beq.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800dc02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0a:	2100      	movs	r1, #0
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	f003 0310 	and.w	r3, r3, #16
 800dc12:	60fb      	str	r3, [r7, #12]
 800dc14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dc18:	460b      	mov	r3, r1
 800dc1a:	4313      	orrs	r3, r2
 800dc1c:	d011      	beq.n	800dc42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dc1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc22:	3328      	adds	r3, #40	@ 0x28
 800dc24:	2101      	movs	r1, #1
 800dc26:	4618      	mov	r0, r3
 800dc28:	f000 fbaa 	bl	800e380 <RCCEx_PLL3_Config>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800dc32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d003      	beq.n	800dc42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800dc42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	6039      	str	r1, [r7, #0]
 800dc4e:	f003 0320 	and.w	r3, r3, #32
 800dc52:	607b      	str	r3, [r7, #4]
 800dc54:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dc58:	460b      	mov	r3, r1
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	d011      	beq.n	800dc82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dc5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc62:	3328      	adds	r3, #40	@ 0x28
 800dc64:	2102      	movs	r1, #2
 800dc66:	4618      	mov	r0, r3
 800dc68:	f000 fb8a 	bl	800e380 <RCCEx_PLL3_Config>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800dc72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d003      	beq.n	800dc82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800dc82:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d101      	bne.n	800dc8e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	e000      	b.n	800dc90 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800dc8e:	2301      	movs	r3, #1
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800dc96:	46bd      	mov	sp, r7
 800dc98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dc9c:	58024400 	.word	0x58024400

0800dca0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800dca4:	f7fe fd54 	bl	800c750 <HAL_RCC_GetHCLKFreq>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	4b06      	ldr	r3, [pc, #24]	@ (800dcc4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800dcac:	6a1b      	ldr	r3, [r3, #32]
 800dcae:	091b      	lsrs	r3, r3, #4
 800dcb0:	f003 0307 	and.w	r3, r3, #7
 800dcb4:	4904      	ldr	r1, [pc, #16]	@ (800dcc8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800dcb6:	5ccb      	ldrb	r3, [r1, r3]
 800dcb8:	f003 031f 	and.w	r3, r3, #31
 800dcbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	bd80      	pop	{r7, pc}
 800dcc4:	58024400 	.word	0x58024400
 800dcc8:	0802cd74 	.word	0x0802cd74

0800dccc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b089      	sub	sp, #36	@ 0x24
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dcd4:	4ba1      	ldr	r3, [pc, #644]	@ (800df5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dcd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcd8:	f003 0303 	and.w	r3, r3, #3
 800dcdc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800dcde:	4b9f      	ldr	r3, [pc, #636]	@ (800df5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dce2:	0b1b      	lsrs	r3, r3, #12
 800dce4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dce8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800dcea:	4b9c      	ldr	r3, [pc, #624]	@ (800df5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dcec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcee:	091b      	lsrs	r3, r3, #4
 800dcf0:	f003 0301 	and.w	r3, r3, #1
 800dcf4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800dcf6:	4b99      	ldr	r3, [pc, #612]	@ (800df5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dcf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcfa:	08db      	lsrs	r3, r3, #3
 800dcfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dd00:	693a      	ldr	r2, [r7, #16]
 800dd02:	fb02 f303 	mul.w	r3, r2, r3
 800dd06:	ee07 3a90 	vmov	s15, r3
 800dd0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	f000 8111 	beq.w	800df3c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800dd1a:	69bb      	ldr	r3, [r7, #24]
 800dd1c:	2b02      	cmp	r3, #2
 800dd1e:	f000 8083 	beq.w	800de28 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	f200 80a1 	bhi.w	800de6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d003      	beq.n	800dd38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d056      	beq.n	800dde4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800dd36:	e099      	b.n	800de6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd38:	4b88      	ldr	r3, [pc, #544]	@ (800df5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f003 0320 	and.w	r3, r3, #32
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d02d      	beq.n	800dda0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dd44:	4b85      	ldr	r3, [pc, #532]	@ (800df5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	08db      	lsrs	r3, r3, #3
 800dd4a:	f003 0303 	and.w	r3, r3, #3
 800dd4e:	4a84      	ldr	r2, [pc, #528]	@ (800df60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800dd50:	fa22 f303 	lsr.w	r3, r2, r3
 800dd54:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	ee07 3a90 	vmov	s15, r3
 800dd5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	ee07 3a90 	vmov	s15, r3
 800dd66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd6e:	4b7b      	ldr	r3, [pc, #492]	@ (800df5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dd70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd76:	ee07 3a90 	vmov	s15, r3
 800dd7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800df64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dd86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dd9e:	e087      	b.n	800deb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	ee07 3a90 	vmov	s15, r3
 800dda6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddaa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800df68 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ddae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ddb2:	4b6a      	ldr	r3, [pc, #424]	@ (800df5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ddb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddba:	ee07 3a90 	vmov	s15, r3
 800ddbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ddc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ddc6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800df64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ddca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ddce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ddd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ddd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ddda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dde2:	e065      	b.n	800deb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	ee07 3a90 	vmov	s15, r3
 800ddea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800df6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ddf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ddf6:	4b59      	ldr	r3, [pc, #356]	@ (800df5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ddf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddfe:	ee07 3a90 	vmov	s15, r3
 800de02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de06:	ed97 6a03 	vldr	s12, [r7, #12]
 800de0a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800df64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800de0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800de1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800de26:	e043      	b.n	800deb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	ee07 3a90 	vmov	s15, r3
 800de2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de32:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800df70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800de36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de3a:	4b48      	ldr	r3, [pc, #288]	@ (800df5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de42:	ee07 3a90 	vmov	s15, r3
 800de46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800de4e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800df64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800de52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800de5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800de6a:	e021      	b.n	800deb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	ee07 3a90 	vmov	s15, r3
 800de72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de76:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800df6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800de7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de7e:	4b37      	ldr	r3, [pc, #220]	@ (800df5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de86:	ee07 3a90 	vmov	s15, r3
 800de8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800de92:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800df64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800de96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800deae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800deb0:	4b2a      	ldr	r3, [pc, #168]	@ (800df5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800deb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800deb4:	0a5b      	lsrs	r3, r3, #9
 800deb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800deba:	ee07 3a90 	vmov	s15, r3
 800debe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dec2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dec6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800deca:	edd7 6a07 	vldr	s13, [r7, #28]
 800dece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ded2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ded6:	ee17 2a90 	vmov	r2, s15
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800dede:	4b1f      	ldr	r3, [pc, #124]	@ (800df5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dee2:	0c1b      	lsrs	r3, r3, #16
 800dee4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dee8:	ee07 3a90 	vmov	s15, r3
 800deec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800def0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800def4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800def8:	edd7 6a07 	vldr	s13, [r7, #28]
 800defc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df04:	ee17 2a90 	vmov	r2, s15
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800df0c:	4b13      	ldr	r3, [pc, #76]	@ (800df5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df10:	0e1b      	lsrs	r3, r3, #24
 800df12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df16:	ee07 3a90 	vmov	s15, r3
 800df1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800df22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800df26:	edd7 6a07 	vldr	s13, [r7, #28]
 800df2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df32:	ee17 2a90 	vmov	r2, s15
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800df3a:	e008      	b.n	800df4e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2200      	movs	r2, #0
 800df40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2200      	movs	r2, #0
 800df46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	609a      	str	r2, [r3, #8]
}
 800df4e:	bf00      	nop
 800df50:	3724      	adds	r7, #36	@ 0x24
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
 800df5a:	bf00      	nop
 800df5c:	58024400 	.word	0x58024400
 800df60:	03d09000 	.word	0x03d09000
 800df64:	46000000 	.word	0x46000000
 800df68:	4c742400 	.word	0x4c742400
 800df6c:	4a742400 	.word	0x4a742400
 800df70:	4bbebc20 	.word	0x4bbebc20

0800df74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800df74:	b480      	push	{r7}
 800df76:	b089      	sub	sp, #36	@ 0x24
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800df7c:	4ba1      	ldr	r3, [pc, #644]	@ (800e204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800df7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df80:	f003 0303 	and.w	r3, r3, #3
 800df84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800df86:	4b9f      	ldr	r3, [pc, #636]	@ (800e204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800df88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df8a:	0d1b      	lsrs	r3, r3, #20
 800df8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800df90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800df92:	4b9c      	ldr	r3, [pc, #624]	@ (800e204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800df94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df96:	0a1b      	lsrs	r3, r3, #8
 800df98:	f003 0301 	and.w	r3, r3, #1
 800df9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800df9e:	4b99      	ldr	r3, [pc, #612]	@ (800e204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dfa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfa2:	08db      	lsrs	r3, r3, #3
 800dfa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dfa8:	693a      	ldr	r2, [r7, #16]
 800dfaa:	fb02 f303 	mul.w	r3, r2, r3
 800dfae:	ee07 3a90 	vmov	s15, r3
 800dfb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	f000 8111 	beq.w	800e1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800dfc2:	69bb      	ldr	r3, [r7, #24]
 800dfc4:	2b02      	cmp	r3, #2
 800dfc6:	f000 8083 	beq.w	800e0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800dfca:	69bb      	ldr	r3, [r7, #24]
 800dfcc:	2b02      	cmp	r3, #2
 800dfce:	f200 80a1 	bhi.w	800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800dfd2:	69bb      	ldr	r3, [r7, #24]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d003      	beq.n	800dfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800dfd8:	69bb      	ldr	r3, [r7, #24]
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d056      	beq.n	800e08c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800dfde:	e099      	b.n	800e114 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dfe0:	4b88      	ldr	r3, [pc, #544]	@ (800e204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f003 0320 	and.w	r3, r3, #32
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d02d      	beq.n	800e048 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dfec:	4b85      	ldr	r3, [pc, #532]	@ (800e204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	08db      	lsrs	r3, r3, #3
 800dff2:	f003 0303 	and.w	r3, r3, #3
 800dff6:	4a84      	ldr	r2, [pc, #528]	@ (800e208 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800dff8:	fa22 f303 	lsr.w	r3, r2, r3
 800dffc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	ee07 3a90 	vmov	s15, r3
 800e004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	ee07 3a90 	vmov	s15, r3
 800e00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e016:	4b7b      	ldr	r3, [pc, #492]	@ (800e204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e01e:	ee07 3a90 	vmov	s15, r3
 800e022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e026:	ed97 6a03 	vldr	s12, [r7, #12]
 800e02a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e20c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e02e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e03a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e042:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e046:	e087      	b.n	800e158 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	ee07 3a90 	vmov	s15, r3
 800e04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e052:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e210 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e05a:	4b6a      	ldr	r3, [pc, #424]	@ (800e204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e05c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e062:	ee07 3a90 	vmov	s15, r3
 800e066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e06a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e06e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e20c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e07a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e07e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e082:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e08a:	e065      	b.n	800e158 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	ee07 3a90 	vmov	s15, r3
 800e092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e096:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e214 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e09a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e09e:	4b59      	ldr	r3, [pc, #356]	@ (800e204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e0a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0a6:	ee07 3a90 	vmov	s15, r3
 800e0aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e0ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800e0b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e20c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e0b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e0ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e0be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e0ce:	e043      	b.n	800e158 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	ee07 3a90 	vmov	s15, r3
 800e0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e218 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e0de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e0e2:	4b48      	ldr	r3, [pc, #288]	@ (800e204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e0e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0ea:	ee07 3a90 	vmov	s15, r3
 800e0ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e0f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800e0f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e20c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e0fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e0fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e10e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e112:	e021      	b.n	800e158 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	ee07 3a90 	vmov	s15, r3
 800e11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e11e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e214 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e126:	4b37      	ldr	r3, [pc, #220]	@ (800e204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e12a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e12e:	ee07 3a90 	vmov	s15, r3
 800e132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e136:	ed97 6a03 	vldr	s12, [r7, #12]
 800e13a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e20c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e13e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e14a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e14e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e156:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e158:	4b2a      	ldr	r3, [pc, #168]	@ (800e204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e15a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e15c:	0a5b      	lsrs	r3, r3, #9
 800e15e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e162:	ee07 3a90 	vmov	s15, r3
 800e166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e16a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e16e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e172:	edd7 6a07 	vldr	s13, [r7, #28]
 800e176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e17a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e17e:	ee17 2a90 	vmov	r2, s15
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e186:	4b1f      	ldr	r3, [pc, #124]	@ (800e204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e18a:	0c1b      	lsrs	r3, r3, #16
 800e18c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e190:	ee07 3a90 	vmov	s15, r3
 800e194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e198:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e19c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e1a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800e1a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e1a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e1ac:	ee17 2a90 	vmov	r2, s15
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e1b4:	4b13      	ldr	r3, [pc, #76]	@ (800e204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e1b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1b8:	0e1b      	lsrs	r3, r3, #24
 800e1ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1be:	ee07 3a90 	vmov	s15, r3
 800e1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e1ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e1ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800e1d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e1d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e1da:	ee17 2a90 	vmov	r2, s15
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e1e2:	e008      	b.n	800e1f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	609a      	str	r2, [r3, #8]
}
 800e1f6:	bf00      	nop
 800e1f8:	3724      	adds	r7, #36	@ 0x24
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e200:	4770      	bx	lr
 800e202:	bf00      	nop
 800e204:	58024400 	.word	0x58024400
 800e208:	03d09000 	.word	0x03d09000
 800e20c:	46000000 	.word	0x46000000
 800e210:	4c742400 	.word	0x4c742400
 800e214:	4a742400 	.word	0x4a742400
 800e218:	4bbebc20 	.word	0x4bbebc20

0800e21c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b084      	sub	sp, #16
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e226:	2300      	movs	r3, #0
 800e228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e22a:	4b53      	ldr	r3, [pc, #332]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e22e:	f003 0303 	and.w	r3, r3, #3
 800e232:	2b03      	cmp	r3, #3
 800e234:	d101      	bne.n	800e23a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e236:	2301      	movs	r3, #1
 800e238:	e099      	b.n	800e36e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e23a:	4b4f      	ldr	r3, [pc, #316]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	4a4e      	ldr	r2, [pc, #312]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e240:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e246:	f7f8 fb8f 	bl	8006968 <HAL_GetTick>
 800e24a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e24c:	e008      	b.n	800e260 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e24e:	f7f8 fb8b 	bl	8006968 <HAL_GetTick>
 800e252:	4602      	mov	r2, r0
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	1ad3      	subs	r3, r2, r3
 800e258:	2b02      	cmp	r3, #2
 800e25a:	d901      	bls.n	800e260 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e25c:	2303      	movs	r3, #3
 800e25e:	e086      	b.n	800e36e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e260:	4b45      	ldr	r3, [pc, #276]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1f0      	bne.n	800e24e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e26c:	4b42      	ldr	r3, [pc, #264]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e26e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e270:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	031b      	lsls	r3, r3, #12
 800e27a:	493f      	ldr	r1, [pc, #252]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e27c:	4313      	orrs	r3, r2
 800e27e:	628b      	str	r3, [r1, #40]	@ 0x28
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	3b01      	subs	r3, #1
 800e286:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	689b      	ldr	r3, [r3, #8]
 800e28e:	3b01      	subs	r3, #1
 800e290:	025b      	lsls	r3, r3, #9
 800e292:	b29b      	uxth	r3, r3
 800e294:	431a      	orrs	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	68db      	ldr	r3, [r3, #12]
 800e29a:	3b01      	subs	r3, #1
 800e29c:	041b      	lsls	r3, r3, #16
 800e29e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e2a2:	431a      	orrs	r2, r3
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	691b      	ldr	r3, [r3, #16]
 800e2a8:	3b01      	subs	r3, #1
 800e2aa:	061b      	lsls	r3, r3, #24
 800e2ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e2b0:	4931      	ldr	r1, [pc, #196]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e2b6:	4b30      	ldr	r3, [pc, #192]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	695b      	ldr	r3, [r3, #20]
 800e2c2:	492d      	ldr	r1, [pc, #180]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e2c4:	4313      	orrs	r3, r2
 800e2c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e2c8:	4b2b      	ldr	r3, [pc, #172]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2cc:	f023 0220 	bic.w	r2, r3, #32
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	699b      	ldr	r3, [r3, #24]
 800e2d4:	4928      	ldr	r1, [pc, #160]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e2da:	4b27      	ldr	r3, [pc, #156]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e2dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2de:	4a26      	ldr	r2, [pc, #152]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e2e0:	f023 0310 	bic.w	r3, r3, #16
 800e2e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e2e6:	4b24      	ldr	r3, [pc, #144]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e2e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e2ea:	4b24      	ldr	r3, [pc, #144]	@ (800e37c <RCCEx_PLL2_Config+0x160>)
 800e2ec:	4013      	ands	r3, r2
 800e2ee:	687a      	ldr	r2, [r7, #4]
 800e2f0:	69d2      	ldr	r2, [r2, #28]
 800e2f2:	00d2      	lsls	r2, r2, #3
 800e2f4:	4920      	ldr	r1, [pc, #128]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e2fa:	4b1f      	ldr	r3, [pc, #124]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2fe:	4a1e      	ldr	r2, [pc, #120]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e300:	f043 0310 	orr.w	r3, r3, #16
 800e304:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d106      	bne.n	800e31a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e30c:	4b1a      	ldr	r3, [pc, #104]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e30e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e310:	4a19      	ldr	r2, [pc, #100]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e312:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e316:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e318:	e00f      	b.n	800e33a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d106      	bne.n	800e32e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e320:	4b15      	ldr	r3, [pc, #84]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e324:	4a14      	ldr	r2, [pc, #80]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e326:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e32a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e32c:	e005      	b.n	800e33a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e32e:	4b12      	ldr	r3, [pc, #72]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e332:	4a11      	ldr	r2, [pc, #68]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e334:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e338:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e33a:	4b0f      	ldr	r3, [pc, #60]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	4a0e      	ldr	r2, [pc, #56]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e340:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e346:	f7f8 fb0f 	bl	8006968 <HAL_GetTick>
 800e34a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e34c:	e008      	b.n	800e360 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e34e:	f7f8 fb0b 	bl	8006968 <HAL_GetTick>
 800e352:	4602      	mov	r2, r0
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	1ad3      	subs	r3, r2, r3
 800e358:	2b02      	cmp	r3, #2
 800e35a:	d901      	bls.n	800e360 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e35c:	2303      	movs	r3, #3
 800e35e:	e006      	b.n	800e36e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e360:	4b05      	ldr	r3, [pc, #20]	@ (800e378 <RCCEx_PLL2_Config+0x15c>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d0f0      	beq.n	800e34e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3710      	adds	r7, #16
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	58024400 	.word	0x58024400
 800e37c:	ffff0007 	.word	0xffff0007

0800e380 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e38a:	2300      	movs	r3, #0
 800e38c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e38e:	4b53      	ldr	r3, [pc, #332]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e392:	f003 0303 	and.w	r3, r3, #3
 800e396:	2b03      	cmp	r3, #3
 800e398:	d101      	bne.n	800e39e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e39a:	2301      	movs	r3, #1
 800e39c:	e099      	b.n	800e4d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e39e:	4b4f      	ldr	r3, [pc, #316]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	4a4e      	ldr	r2, [pc, #312]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e3a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e3a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e3aa:	f7f8 fadd 	bl	8006968 <HAL_GetTick>
 800e3ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e3b0:	e008      	b.n	800e3c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e3b2:	f7f8 fad9 	bl	8006968 <HAL_GetTick>
 800e3b6:	4602      	mov	r2, r0
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	1ad3      	subs	r3, r2, r3
 800e3bc:	2b02      	cmp	r3, #2
 800e3be:	d901      	bls.n	800e3c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e3c0:	2303      	movs	r3, #3
 800e3c2:	e086      	b.n	800e4d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e3c4:	4b45      	ldr	r3, [pc, #276]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d1f0      	bne.n	800e3b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e3d0:	4b42      	ldr	r3, [pc, #264]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e3d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3d4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	051b      	lsls	r3, r3, #20
 800e3de:	493f      	ldr	r1, [pc, #252]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	628b      	str	r3, [r1, #40]	@ 0x28
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	3b01      	subs	r3, #1
 800e3ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	689b      	ldr	r3, [r3, #8]
 800e3f2:	3b01      	subs	r3, #1
 800e3f4:	025b      	lsls	r3, r3, #9
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	431a      	orrs	r2, r3
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	68db      	ldr	r3, [r3, #12]
 800e3fe:	3b01      	subs	r3, #1
 800e400:	041b      	lsls	r3, r3, #16
 800e402:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e406:	431a      	orrs	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	691b      	ldr	r3, [r3, #16]
 800e40c:	3b01      	subs	r3, #1
 800e40e:	061b      	lsls	r3, r3, #24
 800e410:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e414:	4931      	ldr	r1, [pc, #196]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e416:	4313      	orrs	r3, r2
 800e418:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e41a:	4b30      	ldr	r3, [pc, #192]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e41e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	695b      	ldr	r3, [r3, #20]
 800e426:	492d      	ldr	r1, [pc, #180]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e428:	4313      	orrs	r3, r2
 800e42a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e42c:	4b2b      	ldr	r3, [pc, #172]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e42e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e430:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	699b      	ldr	r3, [r3, #24]
 800e438:	4928      	ldr	r1, [pc, #160]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e43a:	4313      	orrs	r3, r2
 800e43c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e43e:	4b27      	ldr	r3, [pc, #156]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e442:	4a26      	ldr	r2, [pc, #152]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e448:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e44a:	4b24      	ldr	r3, [pc, #144]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e44c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e44e:	4b24      	ldr	r3, [pc, #144]	@ (800e4e0 <RCCEx_PLL3_Config+0x160>)
 800e450:	4013      	ands	r3, r2
 800e452:	687a      	ldr	r2, [r7, #4]
 800e454:	69d2      	ldr	r2, [r2, #28]
 800e456:	00d2      	lsls	r2, r2, #3
 800e458:	4920      	ldr	r1, [pc, #128]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e45a:	4313      	orrs	r3, r2
 800e45c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e45e:	4b1f      	ldr	r3, [pc, #124]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e462:	4a1e      	ldr	r2, [pc, #120]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e468:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d106      	bne.n	800e47e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e470:	4b1a      	ldr	r3, [pc, #104]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e474:	4a19      	ldr	r2, [pc, #100]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e476:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e47a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e47c:	e00f      	b.n	800e49e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	2b01      	cmp	r3, #1
 800e482:	d106      	bne.n	800e492 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e484:	4b15      	ldr	r3, [pc, #84]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e488:	4a14      	ldr	r2, [pc, #80]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e48a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e48e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e490:	e005      	b.n	800e49e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e492:	4b12      	ldr	r3, [pc, #72]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e496:	4a11      	ldr	r2, [pc, #68]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e498:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e49c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e49e:	4b0f      	ldr	r3, [pc, #60]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	4a0e      	ldr	r2, [pc, #56]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e4a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e4a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e4aa:	f7f8 fa5d 	bl	8006968 <HAL_GetTick>
 800e4ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e4b0:	e008      	b.n	800e4c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e4b2:	f7f8 fa59 	bl	8006968 <HAL_GetTick>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	1ad3      	subs	r3, r2, r3
 800e4bc:	2b02      	cmp	r3, #2
 800e4be:	d901      	bls.n	800e4c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e4c0:	2303      	movs	r3, #3
 800e4c2:	e006      	b.n	800e4d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e4c4:	4b05      	ldr	r3, [pc, #20]	@ (800e4dc <RCCEx_PLL3_Config+0x15c>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d0f0      	beq.n	800e4b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
 800e4da:	bf00      	nop
 800e4dc:	58024400 	.word	0x58024400
 800e4e0:	ffff0007 	.word	0xffff0007

0800e4e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d101      	bne.n	800e4f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	e049      	b.n	800e58a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d106      	bne.n	800e510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2200      	movs	r2, #0
 800e506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f000 f841 	bl	800e592 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2202      	movs	r2, #2
 800e514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	3304      	adds	r3, #4
 800e520:	4619      	mov	r1, r3
 800e522:	4610      	mov	r0, r2
 800e524:	f000 f9e8 	bl	800e8f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2201      	movs	r2, #1
 800e52c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2201      	movs	r2, #1
 800e534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2201      	movs	r2, #1
 800e53c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2201      	movs	r2, #1
 800e544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2201      	movs	r2, #1
 800e54c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2201      	movs	r2, #1
 800e554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2201      	movs	r2, #1
 800e55c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2201      	movs	r2, #1
 800e564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2201      	movs	r2, #1
 800e56c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2201      	movs	r2, #1
 800e574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2201      	movs	r2, #1
 800e57c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2201      	movs	r2, #1
 800e584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e588:	2300      	movs	r3, #0
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3708      	adds	r7, #8
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}

0800e592 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e592:	b480      	push	{r7}
 800e594:	b083      	sub	sp, #12
 800e596:	af00      	add	r7, sp, #0
 800e598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e59a:	bf00      	nop
 800e59c:	370c      	adds	r7, #12
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a4:	4770      	bx	lr
	...

0800e5a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b085      	sub	sp, #20
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e5b6:	b2db      	uxtb	r3, r3
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d001      	beq.n	800e5c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e5bc:	2301      	movs	r3, #1
 800e5be:	e054      	b.n	800e66a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2202      	movs	r2, #2
 800e5c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	68da      	ldr	r2, [r3, #12]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f042 0201 	orr.w	r2, r2, #1
 800e5d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4a26      	ldr	r2, [pc, #152]	@ (800e678 <HAL_TIM_Base_Start_IT+0xd0>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d022      	beq.n	800e628 <HAL_TIM_Base_Start_IT+0x80>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5ea:	d01d      	beq.n	800e628 <HAL_TIM_Base_Start_IT+0x80>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4a22      	ldr	r2, [pc, #136]	@ (800e67c <HAL_TIM_Base_Start_IT+0xd4>)
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	d018      	beq.n	800e628 <HAL_TIM_Base_Start_IT+0x80>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4a21      	ldr	r2, [pc, #132]	@ (800e680 <HAL_TIM_Base_Start_IT+0xd8>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d013      	beq.n	800e628 <HAL_TIM_Base_Start_IT+0x80>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	4a1f      	ldr	r2, [pc, #124]	@ (800e684 <HAL_TIM_Base_Start_IT+0xdc>)
 800e606:	4293      	cmp	r3, r2
 800e608:	d00e      	beq.n	800e628 <HAL_TIM_Base_Start_IT+0x80>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4a1e      	ldr	r2, [pc, #120]	@ (800e688 <HAL_TIM_Base_Start_IT+0xe0>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d009      	beq.n	800e628 <HAL_TIM_Base_Start_IT+0x80>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	4a1c      	ldr	r2, [pc, #112]	@ (800e68c <HAL_TIM_Base_Start_IT+0xe4>)
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d004      	beq.n	800e628 <HAL_TIM_Base_Start_IT+0x80>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	4a1b      	ldr	r2, [pc, #108]	@ (800e690 <HAL_TIM_Base_Start_IT+0xe8>)
 800e624:	4293      	cmp	r3, r2
 800e626:	d115      	bne.n	800e654 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	689a      	ldr	r2, [r3, #8]
 800e62e:	4b19      	ldr	r3, [pc, #100]	@ (800e694 <HAL_TIM_Base_Start_IT+0xec>)
 800e630:	4013      	ands	r3, r2
 800e632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2b06      	cmp	r3, #6
 800e638:	d015      	beq.n	800e666 <HAL_TIM_Base_Start_IT+0xbe>
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e640:	d011      	beq.n	800e666 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	681a      	ldr	r2, [r3, #0]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f042 0201 	orr.w	r2, r2, #1
 800e650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e652:	e008      	b.n	800e666 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	681a      	ldr	r2, [r3, #0]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f042 0201 	orr.w	r2, r2, #1
 800e662:	601a      	str	r2, [r3, #0]
 800e664:	e000      	b.n	800e668 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e666:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e668:	2300      	movs	r3, #0
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3714      	adds	r7, #20
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr
 800e676:	bf00      	nop
 800e678:	40010000 	.word	0x40010000
 800e67c:	40000400 	.word	0x40000400
 800e680:	40000800 	.word	0x40000800
 800e684:	40000c00 	.word	0x40000c00
 800e688:	40010400 	.word	0x40010400
 800e68c:	40001800 	.word	0x40001800
 800e690:	40014000 	.word	0x40014000
 800e694:	00010007 	.word	0x00010007

0800e698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	68db      	ldr	r3, [r3, #12]
 800e6a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	691b      	ldr	r3, [r3, #16]
 800e6ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	f003 0302 	and.w	r3, r3, #2
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d020      	beq.n	800e6fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f003 0302 	and.w	r3, r3, #2
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d01b      	beq.n	800e6fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f06f 0202 	mvn.w	r2, #2
 800e6cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2201      	movs	r2, #1
 800e6d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	699b      	ldr	r3, [r3, #24]
 800e6da:	f003 0303 	and.w	r3, r3, #3
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d003      	beq.n	800e6ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f000 f8e9 	bl	800e8ba <HAL_TIM_IC_CaptureCallback>
 800e6e8:	e005      	b.n	800e6f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f000 f8db 	bl	800e8a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f000 f8ec 	bl	800e8ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	f003 0304 	and.w	r3, r3, #4
 800e702:	2b00      	cmp	r3, #0
 800e704:	d020      	beq.n	800e748 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f003 0304 	and.w	r3, r3, #4
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d01b      	beq.n	800e748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f06f 0204 	mvn.w	r2, #4
 800e718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2202      	movs	r2, #2
 800e71e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	699b      	ldr	r3, [r3, #24]
 800e726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d003      	beq.n	800e736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f000 f8c3 	bl	800e8ba <HAL_TIM_IC_CaptureCallback>
 800e734:	e005      	b.n	800e742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f000 f8b5 	bl	800e8a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 f8c6 	bl	800e8ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2200      	movs	r2, #0
 800e746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	f003 0308 	and.w	r3, r3, #8
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d020      	beq.n	800e794 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	f003 0308 	and.w	r3, r3, #8
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d01b      	beq.n	800e794 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	f06f 0208 	mvn.w	r2, #8
 800e764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2204      	movs	r2, #4
 800e76a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	69db      	ldr	r3, [r3, #28]
 800e772:	f003 0303 	and.w	r3, r3, #3
 800e776:	2b00      	cmp	r3, #0
 800e778:	d003      	beq.n	800e782 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f000 f89d 	bl	800e8ba <HAL_TIM_IC_CaptureCallback>
 800e780:	e005      	b.n	800e78e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f000 f88f 	bl	800e8a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f000 f8a0 	bl	800e8ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2200      	movs	r2, #0
 800e792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	f003 0310 	and.w	r3, r3, #16
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d020      	beq.n	800e7e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	f003 0310 	and.w	r3, r3, #16
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d01b      	beq.n	800e7e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f06f 0210 	mvn.w	r2, #16
 800e7b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2208      	movs	r2, #8
 800e7b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	69db      	ldr	r3, [r3, #28]
 800e7be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d003      	beq.n	800e7ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f000 f877 	bl	800e8ba <HAL_TIM_IC_CaptureCallback>
 800e7cc:	e005      	b.n	800e7da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f000 f869 	bl	800e8a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f000 f87a 	bl	800e8ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	f003 0301 	and.w	r3, r3, #1
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d00c      	beq.n	800e804 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f003 0301 	and.w	r3, r3, #1
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d007      	beq.n	800e804 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f06f 0201 	mvn.w	r2, #1
 800e7fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f7f6 fc0c 	bl	800501c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d104      	bne.n	800e818 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e814:	2b00      	cmp	r3, #0
 800e816:	d00c      	beq.n	800e832 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d007      	beq.n	800e832 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e82a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f000 f913 	bl	800ea58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d00c      	beq.n	800e856 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e842:	2b00      	cmp	r3, #0
 800e844:	d007      	beq.n	800e856 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e84e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f000 f90b 	bl	800ea6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d00c      	beq.n	800e87a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e866:	2b00      	cmp	r3, #0
 800e868:	d007      	beq.n	800e87a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f000 f834 	bl	800e8e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	f003 0320 	and.w	r3, r3, #32
 800e880:	2b00      	cmp	r3, #0
 800e882:	d00c      	beq.n	800e89e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f003 0320 	and.w	r3, r3, #32
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d007      	beq.n	800e89e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f06f 0220 	mvn.w	r2, #32
 800e896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f000 f8d3 	bl	800ea44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e89e:	bf00      	nop
 800e8a0:	3710      	adds	r7, #16
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}

0800e8a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e8a6:	b480      	push	{r7}
 800e8a8:	b083      	sub	sp, #12
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e8ae:	bf00      	nop
 800e8b0:	370c      	adds	r7, #12
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr

0800e8ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e8ba:	b480      	push	{r7}
 800e8bc:	b083      	sub	sp, #12
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e8c2:	bf00      	nop
 800e8c4:	370c      	adds	r7, #12
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr

0800e8ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e8ce:	b480      	push	{r7}
 800e8d0:	b083      	sub	sp, #12
 800e8d2:	af00      	add	r7, sp, #0
 800e8d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e8d6:	bf00      	nop
 800e8d8:	370c      	adds	r7, #12
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e0:	4770      	bx	lr

0800e8e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e8e2:	b480      	push	{r7}
 800e8e4:	b083      	sub	sp, #12
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e8ea:	bf00      	nop
 800e8ec:	370c      	adds	r7, #12
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f4:	4770      	bx	lr
	...

0800e8f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b085      	sub	sp, #20
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	4a46      	ldr	r2, [pc, #280]	@ (800ea24 <TIM_Base_SetConfig+0x12c>)
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d013      	beq.n	800e938 <TIM_Base_SetConfig+0x40>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e916:	d00f      	beq.n	800e938 <TIM_Base_SetConfig+0x40>
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	4a43      	ldr	r2, [pc, #268]	@ (800ea28 <TIM_Base_SetConfig+0x130>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d00b      	beq.n	800e938 <TIM_Base_SetConfig+0x40>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	4a42      	ldr	r2, [pc, #264]	@ (800ea2c <TIM_Base_SetConfig+0x134>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d007      	beq.n	800e938 <TIM_Base_SetConfig+0x40>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	4a41      	ldr	r2, [pc, #260]	@ (800ea30 <TIM_Base_SetConfig+0x138>)
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d003      	beq.n	800e938 <TIM_Base_SetConfig+0x40>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	4a40      	ldr	r2, [pc, #256]	@ (800ea34 <TIM_Base_SetConfig+0x13c>)
 800e934:	4293      	cmp	r3, r2
 800e936:	d108      	bne.n	800e94a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e93e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	68fa      	ldr	r2, [r7, #12]
 800e946:	4313      	orrs	r3, r2
 800e948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	4a35      	ldr	r2, [pc, #212]	@ (800ea24 <TIM_Base_SetConfig+0x12c>)
 800e94e:	4293      	cmp	r3, r2
 800e950:	d01f      	beq.n	800e992 <TIM_Base_SetConfig+0x9a>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e958:	d01b      	beq.n	800e992 <TIM_Base_SetConfig+0x9a>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	4a32      	ldr	r2, [pc, #200]	@ (800ea28 <TIM_Base_SetConfig+0x130>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d017      	beq.n	800e992 <TIM_Base_SetConfig+0x9a>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4a31      	ldr	r2, [pc, #196]	@ (800ea2c <TIM_Base_SetConfig+0x134>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d013      	beq.n	800e992 <TIM_Base_SetConfig+0x9a>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4a30      	ldr	r2, [pc, #192]	@ (800ea30 <TIM_Base_SetConfig+0x138>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d00f      	beq.n	800e992 <TIM_Base_SetConfig+0x9a>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	4a2f      	ldr	r2, [pc, #188]	@ (800ea34 <TIM_Base_SetConfig+0x13c>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d00b      	beq.n	800e992 <TIM_Base_SetConfig+0x9a>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4a2e      	ldr	r2, [pc, #184]	@ (800ea38 <TIM_Base_SetConfig+0x140>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d007      	beq.n	800e992 <TIM_Base_SetConfig+0x9a>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	4a2d      	ldr	r2, [pc, #180]	@ (800ea3c <TIM_Base_SetConfig+0x144>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d003      	beq.n	800e992 <TIM_Base_SetConfig+0x9a>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4a2c      	ldr	r2, [pc, #176]	@ (800ea40 <TIM_Base_SetConfig+0x148>)
 800e98e:	4293      	cmp	r3, r2
 800e990:	d108      	bne.n	800e9a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	68db      	ldr	r3, [r3, #12]
 800e99e:	68fa      	ldr	r2, [r7, #12]
 800e9a0:	4313      	orrs	r3, r2
 800e9a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	695b      	ldr	r3, [r3, #20]
 800e9ae:	4313      	orrs	r3, r2
 800e9b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	68fa      	ldr	r2, [r7, #12]
 800e9b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	689a      	ldr	r2, [r3, #8]
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	681a      	ldr	r2, [r3, #0]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	4a16      	ldr	r2, [pc, #88]	@ (800ea24 <TIM_Base_SetConfig+0x12c>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d00f      	beq.n	800e9f0 <TIM_Base_SetConfig+0xf8>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	4a18      	ldr	r2, [pc, #96]	@ (800ea34 <TIM_Base_SetConfig+0x13c>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d00b      	beq.n	800e9f0 <TIM_Base_SetConfig+0xf8>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4a17      	ldr	r2, [pc, #92]	@ (800ea38 <TIM_Base_SetConfig+0x140>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d007      	beq.n	800e9f0 <TIM_Base_SetConfig+0xf8>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	4a16      	ldr	r2, [pc, #88]	@ (800ea3c <TIM_Base_SetConfig+0x144>)
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	d003      	beq.n	800e9f0 <TIM_Base_SetConfig+0xf8>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	4a15      	ldr	r2, [pc, #84]	@ (800ea40 <TIM_Base_SetConfig+0x148>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d103      	bne.n	800e9f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	691a      	ldr	r2, [r3, #16]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	691b      	ldr	r3, [r3, #16]
 800ea02:	f003 0301 	and.w	r3, r3, #1
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	d105      	bne.n	800ea16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	691b      	ldr	r3, [r3, #16]
 800ea0e:	f023 0201 	bic.w	r2, r3, #1
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	611a      	str	r2, [r3, #16]
  }
}
 800ea16:	bf00      	nop
 800ea18:	3714      	adds	r7, #20
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea20:	4770      	bx	lr
 800ea22:	bf00      	nop
 800ea24:	40010000 	.word	0x40010000
 800ea28:	40000400 	.word	0x40000400
 800ea2c:	40000800 	.word	0x40000800
 800ea30:	40000c00 	.word	0x40000c00
 800ea34:	40010400 	.word	0x40010400
 800ea38:	40014000 	.word	0x40014000
 800ea3c:	40014400 	.word	0x40014400
 800ea40:	40014800 	.word	0x40014800

0800ea44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ea4c:	bf00      	nop
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr

0800ea58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b083      	sub	sp, #12
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ea60:	bf00      	nop
 800ea62:	370c      	adds	r7, #12
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b083      	sub	sp, #12
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ea74:	bf00      	nop
 800ea76:	370c      	adds	r7, #12
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr

0800ea80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d101      	bne.n	800ea92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ea8e:	2301      	movs	r3, #1
 800ea90:	e042      	b.n	800eb18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d106      	bne.n	800eaaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f7f6 ffa5 	bl	80059f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2224      	movs	r2, #36	@ 0x24
 800eaae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f022 0201 	bic.w	r2, r2, #1
 800eac0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d002      	beq.n	800ead0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f001 f9f6 	bl	800febc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f000 fc8b 	bl	800f3ec <UART_SetConfig>
 800ead6:	4603      	mov	r3, r0
 800ead8:	2b01      	cmp	r3, #1
 800eada:	d101      	bne.n	800eae0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800eadc:	2301      	movs	r3, #1
 800eade:	e01b      	b.n	800eb18 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	685a      	ldr	r2, [r3, #4]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800eaee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	689a      	ldr	r2, [r3, #8]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800eafe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	681a      	ldr	r2, [r3, #0]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f042 0201 	orr.w	r2, r2, #1
 800eb0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f001 fa75 	bl	8010000 <UART_CheckIdleState>
 800eb16:	4603      	mov	r3, r0
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3708      	adds	r7, #8
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b08a      	sub	sp, #40	@ 0x28
 800eb24:	af02      	add	r7, sp, #8
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	603b      	str	r3, [r7, #0]
 800eb2c:	4613      	mov	r3, r2
 800eb2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb36:	2b20      	cmp	r3, #32
 800eb38:	d17b      	bne.n	800ec32 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d002      	beq.n	800eb46 <HAL_UART_Transmit+0x26>
 800eb40:	88fb      	ldrh	r3, [r7, #6]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d101      	bne.n	800eb4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800eb46:	2301      	movs	r3, #1
 800eb48:	e074      	b.n	800ec34 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2221      	movs	r2, #33	@ 0x21
 800eb56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eb5a:	f7f7 ff05 	bl	8006968 <HAL_GetTick>
 800eb5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	88fa      	ldrh	r2, [r7, #6]
 800eb64:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	88fa      	ldrh	r2, [r7, #6]
 800eb6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	689b      	ldr	r3, [r3, #8]
 800eb74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb78:	d108      	bne.n	800eb8c <HAL_UART_Transmit+0x6c>
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	691b      	ldr	r3, [r3, #16]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d104      	bne.n	800eb8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800eb82:	2300      	movs	r3, #0
 800eb84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	61bb      	str	r3, [r7, #24]
 800eb8a:	e003      	b.n	800eb94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eb90:	2300      	movs	r3, #0
 800eb92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800eb94:	e030      	b.n	800ebf8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	9300      	str	r3, [sp, #0]
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	2180      	movs	r1, #128	@ 0x80
 800eba0:	68f8      	ldr	r0, [r7, #12]
 800eba2:	f001 fad7 	bl	8010154 <UART_WaitOnFlagUntilTimeout>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d005      	beq.n	800ebb8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2220      	movs	r2, #32
 800ebb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ebb4:	2303      	movs	r3, #3
 800ebb6:	e03d      	b.n	800ec34 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d10b      	bne.n	800ebd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	881b      	ldrh	r3, [r3, #0]
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ebcc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ebce:	69bb      	ldr	r3, [r7, #24]
 800ebd0:	3302      	adds	r3, #2
 800ebd2:	61bb      	str	r3, [r7, #24]
 800ebd4:	e007      	b.n	800ebe6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ebd6:	69fb      	ldr	r3, [r7, #28]
 800ebd8:	781a      	ldrb	r2, [r3, #0]
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	3b01      	subs	r3, #1
 800ebf0:	b29a      	uxth	r2, r3
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d1c8      	bne.n	800eb96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	9300      	str	r3, [sp, #0]
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	2140      	movs	r1, #64	@ 0x40
 800ec0e:	68f8      	ldr	r0, [r7, #12]
 800ec10:	f001 faa0 	bl	8010154 <UART_WaitOnFlagUntilTimeout>
 800ec14:	4603      	mov	r3, r0
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d005      	beq.n	800ec26 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	2220      	movs	r2, #32
 800ec1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ec22:	2303      	movs	r3, #3
 800ec24:	e006      	b.n	800ec34 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2220      	movs	r2, #32
 800ec2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	e000      	b.n	800ec34 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ec32:	2302      	movs	r3, #2
  }
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3720      	adds	r7, #32
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b0ba      	sub	sp, #232	@ 0xe8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	69db      	ldr	r3, [r3, #28]
 800ec4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	689b      	ldr	r3, [r3, #8]
 800ec5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ec62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ec66:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ec6a:	4013      	ands	r3, r2
 800ec6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ec70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d11b      	bne.n	800ecb0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ec78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec7c:	f003 0320 	and.w	r3, r3, #32
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d015      	beq.n	800ecb0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ec84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec88:	f003 0320 	and.w	r3, r3, #32
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d105      	bne.n	800ec9c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ec90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ec94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d009      	beq.n	800ecb0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	f000 8377 	beq.w	800f394 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	4798      	blx	r3
      }
      return;
 800ecae:	e371      	b.n	800f394 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ecb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	f000 8123 	beq.w	800ef00 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ecba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ecbe:	4b8d      	ldr	r3, [pc, #564]	@ (800eef4 <HAL_UART_IRQHandler+0x2b8>)
 800ecc0:	4013      	ands	r3, r2
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d106      	bne.n	800ecd4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ecc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ecca:	4b8b      	ldr	r3, [pc, #556]	@ (800eef8 <HAL_UART_IRQHandler+0x2bc>)
 800eccc:	4013      	ands	r3, r2
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	f000 8116 	beq.w	800ef00 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ecd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ecd8:	f003 0301 	and.w	r3, r3, #1
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d011      	beq.n	800ed04 <HAL_UART_IRQHandler+0xc8>
 800ece0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ece4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d00b      	beq.n	800ed04 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ecfa:	f043 0201 	orr.w	r2, r3, #1
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed08:	f003 0302 	and.w	r3, r3, #2
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d011      	beq.n	800ed34 <HAL_UART_IRQHandler+0xf8>
 800ed10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ed14:	f003 0301 	and.w	r3, r3, #1
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d00b      	beq.n	800ed34 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	2202      	movs	r2, #2
 800ed22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed2a:	f043 0204 	orr.w	r2, r3, #4
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed38:	f003 0304 	and.w	r3, r3, #4
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d011      	beq.n	800ed64 <HAL_UART_IRQHandler+0x128>
 800ed40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ed44:	f003 0301 	and.w	r3, r3, #1
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00b      	beq.n	800ed64 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	2204      	movs	r2, #4
 800ed52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed5a:	f043 0202 	orr.w	r2, r3, #2
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ed64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed68:	f003 0308 	and.w	r3, r3, #8
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d017      	beq.n	800eda0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ed70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed74:	f003 0320 	and.w	r3, r3, #32
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d105      	bne.n	800ed88 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ed7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ed80:	4b5c      	ldr	r3, [pc, #368]	@ (800eef4 <HAL_UART_IRQHandler+0x2b8>)
 800ed82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d00b      	beq.n	800eda0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	2208      	movs	r2, #8
 800ed8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed96:	f043 0208 	orr.w	r2, r3, #8
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800eda0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eda4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d012      	beq.n	800edd2 <HAL_UART_IRQHandler+0x196>
 800edac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800edb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d00c      	beq.n	800edd2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800edc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edc8:	f043 0220 	orr.w	r2, r3, #32
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f000 82dd 	beq.w	800f398 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800edde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ede2:	f003 0320 	and.w	r3, r3, #32
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d013      	beq.n	800ee12 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800edea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800edee:	f003 0320 	and.w	r3, r3, #32
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d105      	bne.n	800ee02 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800edf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800edfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d007      	beq.n	800ee12 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d003      	beq.n	800ee12 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	689b      	ldr	r3, [r3, #8]
 800ee22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee26:	2b40      	cmp	r3, #64	@ 0x40
 800ee28:	d005      	beq.n	800ee36 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ee2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ee2e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d054      	beq.n	800eee0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f001 fc04 	bl	8010644 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee46:	2b40      	cmp	r3, #64	@ 0x40
 800ee48:	d146      	bne.n	800eed8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	3308      	adds	r3, #8
 800ee50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ee58:	e853 3f00 	ldrex	r3, [r3]
 800ee5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ee60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ee64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	3308      	adds	r3, #8
 800ee72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ee76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ee7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ee82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ee86:	e841 2300 	strex	r3, r2, [r1]
 800ee8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ee8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d1d9      	bne.n	800ee4a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d017      	beq.n	800eed0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eea6:	4a15      	ldr	r2, [pc, #84]	@ (800eefc <HAL_UART_IRQHandler+0x2c0>)
 800eea8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7f8 ffe5 	bl	8007e80 <HAL_DMA_Abort_IT>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d019      	beq.n	800eef0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800eeca:	4610      	mov	r0, r2
 800eecc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eece:	e00f      	b.n	800eef0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f7f5 fafd 	bl	80044d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eed6:	e00b      	b.n	800eef0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f7f5 faf9 	bl	80044d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eede:	e007      	b.n	800eef0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f7f5 faf5 	bl	80044d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2200      	movs	r2, #0
 800eeea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800eeee:	e253      	b.n	800f398 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eef0:	bf00      	nop
    return;
 800eef2:	e251      	b.n	800f398 <HAL_UART_IRQHandler+0x75c>
 800eef4:	10000001 	.word	0x10000001
 800eef8:	04000120 	.word	0x04000120
 800eefc:	080108f7 	.word	0x080108f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	f040 81e7 	bne.w	800f2d8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ef0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef0e:	f003 0310 	and.w	r3, r3, #16
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	f000 81e0 	beq.w	800f2d8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ef18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ef1c:	f003 0310 	and.w	r3, r3, #16
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	f000 81d9 	beq.w	800f2d8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	2210      	movs	r2, #16
 800ef2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	689b      	ldr	r3, [r3, #8]
 800ef34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef38:	2b40      	cmp	r3, #64	@ 0x40
 800ef3a:	f040 8151 	bne.w	800f1e0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	4a96      	ldr	r2, [pc, #600]	@ (800f1a0 <HAL_UART_IRQHandler+0x564>)
 800ef48:	4293      	cmp	r3, r2
 800ef4a:	d068      	beq.n	800f01e <HAL_UART_IRQHandler+0x3e2>
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4a93      	ldr	r2, [pc, #588]	@ (800f1a4 <HAL_UART_IRQHandler+0x568>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d061      	beq.n	800f01e <HAL_UART_IRQHandler+0x3e2>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	4a91      	ldr	r2, [pc, #580]	@ (800f1a8 <HAL_UART_IRQHandler+0x56c>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d05a      	beq.n	800f01e <HAL_UART_IRQHandler+0x3e2>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4a8e      	ldr	r2, [pc, #568]	@ (800f1ac <HAL_UART_IRQHandler+0x570>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d053      	beq.n	800f01e <HAL_UART_IRQHandler+0x3e2>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	4a8c      	ldr	r2, [pc, #560]	@ (800f1b0 <HAL_UART_IRQHandler+0x574>)
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d04c      	beq.n	800f01e <HAL_UART_IRQHandler+0x3e2>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4a89      	ldr	r2, [pc, #548]	@ (800f1b4 <HAL_UART_IRQHandler+0x578>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d045      	beq.n	800f01e <HAL_UART_IRQHandler+0x3e2>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	4a87      	ldr	r2, [pc, #540]	@ (800f1b8 <HAL_UART_IRQHandler+0x57c>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d03e      	beq.n	800f01e <HAL_UART_IRQHandler+0x3e2>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	4a84      	ldr	r2, [pc, #528]	@ (800f1bc <HAL_UART_IRQHandler+0x580>)
 800efaa:	4293      	cmp	r3, r2
 800efac:	d037      	beq.n	800f01e <HAL_UART_IRQHandler+0x3e2>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4a82      	ldr	r2, [pc, #520]	@ (800f1c0 <HAL_UART_IRQHandler+0x584>)
 800efb8:	4293      	cmp	r3, r2
 800efba:	d030      	beq.n	800f01e <HAL_UART_IRQHandler+0x3e2>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4a7f      	ldr	r2, [pc, #508]	@ (800f1c4 <HAL_UART_IRQHandler+0x588>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d029      	beq.n	800f01e <HAL_UART_IRQHandler+0x3e2>
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	4a7d      	ldr	r2, [pc, #500]	@ (800f1c8 <HAL_UART_IRQHandler+0x58c>)
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d022      	beq.n	800f01e <HAL_UART_IRQHandler+0x3e2>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	4a7a      	ldr	r2, [pc, #488]	@ (800f1cc <HAL_UART_IRQHandler+0x590>)
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d01b      	beq.n	800f01e <HAL_UART_IRQHandler+0x3e2>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4a78      	ldr	r2, [pc, #480]	@ (800f1d0 <HAL_UART_IRQHandler+0x594>)
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d014      	beq.n	800f01e <HAL_UART_IRQHandler+0x3e2>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	4a75      	ldr	r2, [pc, #468]	@ (800f1d4 <HAL_UART_IRQHandler+0x598>)
 800effe:	4293      	cmp	r3, r2
 800f000:	d00d      	beq.n	800f01e <HAL_UART_IRQHandler+0x3e2>
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	4a73      	ldr	r2, [pc, #460]	@ (800f1d8 <HAL_UART_IRQHandler+0x59c>)
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d006      	beq.n	800f01e <HAL_UART_IRQHandler+0x3e2>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4a70      	ldr	r2, [pc, #448]	@ (800f1dc <HAL_UART_IRQHandler+0x5a0>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d106      	bne.n	800f02c <HAL_UART_IRQHandler+0x3f0>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	b29b      	uxth	r3, r3
 800f02a:	e005      	b.n	800f038 <HAL_UART_IRQHandler+0x3fc>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	685b      	ldr	r3, [r3, #4]
 800f036:	b29b      	uxth	r3, r3
 800f038:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f03c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f040:	2b00      	cmp	r3, #0
 800f042:	f000 81ab 	beq.w	800f39c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f04c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f050:	429a      	cmp	r2, r3
 800f052:	f080 81a3 	bcs.w	800f39c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f05c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f066:	69db      	ldr	r3, [r3, #28]
 800f068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f06c:	f000 8087 	beq.w	800f17e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f078:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f07c:	e853 3f00 	ldrex	r3, [r3]
 800f080:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f084:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f08c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	461a      	mov	r2, r3
 800f096:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f09a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f09e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f0a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f0aa:	e841 2300 	strex	r3, r2, [r1]
 800f0ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f0b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d1da      	bne.n	800f070 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	3308      	adds	r3, #8
 800f0c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f0c4:	e853 3f00 	ldrex	r3, [r3]
 800f0c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f0ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f0cc:	f023 0301 	bic.w	r3, r3, #1
 800f0d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	3308      	adds	r3, #8
 800f0da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f0de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f0e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f0e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f0ea:	e841 2300 	strex	r3, r2, [r1]
 800f0ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f0f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d1e1      	bne.n	800f0ba <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	3308      	adds	r3, #8
 800f0fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f100:	e853 3f00 	ldrex	r3, [r3]
 800f104:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f106:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f10c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	3308      	adds	r3, #8
 800f116:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f11a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f11c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f11e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f120:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f122:	e841 2300 	strex	r3, r2, [r1]
 800f126:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f128:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d1e3      	bne.n	800f0f6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2220      	movs	r2, #32
 800f132:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2200      	movs	r2, #0
 800f13a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f144:	e853 3f00 	ldrex	r3, [r3]
 800f148:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f14a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f14c:	f023 0310 	bic.w	r3, r3, #16
 800f150:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	461a      	mov	r2, r3
 800f15a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f15e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f160:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f162:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f164:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f166:	e841 2300 	strex	r3, r2, [r1]
 800f16a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f16c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d1e4      	bne.n	800f13c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f178:	4618      	mov	r0, r3
 800f17a:	f7f8 fb63 	bl	8007844 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2202      	movs	r2, #2
 800f182:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f190:	b29b      	uxth	r3, r3
 800f192:	1ad3      	subs	r3, r2, r3
 800f194:	b29b      	uxth	r3, r3
 800f196:	4619      	mov	r1, r3
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f7f4 fbd3 	bl	8003944 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f19e:	e0fd      	b.n	800f39c <HAL_UART_IRQHandler+0x760>
 800f1a0:	40020010 	.word	0x40020010
 800f1a4:	40020028 	.word	0x40020028
 800f1a8:	40020040 	.word	0x40020040
 800f1ac:	40020058 	.word	0x40020058
 800f1b0:	40020070 	.word	0x40020070
 800f1b4:	40020088 	.word	0x40020088
 800f1b8:	400200a0 	.word	0x400200a0
 800f1bc:	400200b8 	.word	0x400200b8
 800f1c0:	40020410 	.word	0x40020410
 800f1c4:	40020428 	.word	0x40020428
 800f1c8:	40020440 	.word	0x40020440
 800f1cc:	40020458 	.word	0x40020458
 800f1d0:	40020470 	.word	0x40020470
 800f1d4:	40020488 	.word	0x40020488
 800f1d8:	400204a0 	.word	0x400204a0
 800f1dc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f1ec:	b29b      	uxth	r3, r3
 800f1ee:	1ad3      	subs	r3, r2, r3
 800f1f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f1fa:	b29b      	uxth	r3, r3
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	f000 80cf 	beq.w	800f3a0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f202:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f206:	2b00      	cmp	r3, #0
 800f208:	f000 80ca 	beq.w	800f3a0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f214:	e853 3f00 	ldrex	r3, [r3]
 800f218:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f21a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f21c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f220:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	461a      	mov	r2, r3
 800f22a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f22e:	647b      	str	r3, [r7, #68]	@ 0x44
 800f230:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f232:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f236:	e841 2300 	strex	r3, r2, [r1]
 800f23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f23c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d1e4      	bne.n	800f20c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	3308      	adds	r3, #8
 800f248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f24c:	e853 3f00 	ldrex	r3, [r3]
 800f250:	623b      	str	r3, [r7, #32]
   return(result);
 800f252:	6a3a      	ldr	r2, [r7, #32]
 800f254:	4b55      	ldr	r3, [pc, #340]	@ (800f3ac <HAL_UART_IRQHandler+0x770>)
 800f256:	4013      	ands	r3, r2
 800f258:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	3308      	adds	r3, #8
 800f262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f266:	633a      	str	r2, [r7, #48]	@ 0x30
 800f268:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f26a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f26c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f26e:	e841 2300 	strex	r3, r2, [r1]
 800f272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f276:	2b00      	cmp	r3, #0
 800f278:	d1e3      	bne.n	800f242 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2220      	movs	r2, #32
 800f27e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2200      	movs	r2, #0
 800f286:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2200      	movs	r2, #0
 800f28c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	e853 3f00 	ldrex	r3, [r3]
 800f29a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f023 0310 	bic.w	r3, r3, #16
 800f2a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	461a      	mov	r2, r3
 800f2ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f2b0:	61fb      	str	r3, [r7, #28]
 800f2b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2b4:	69b9      	ldr	r1, [r7, #24]
 800f2b6:	69fa      	ldr	r2, [r7, #28]
 800f2b8:	e841 2300 	strex	r3, r2, [r1]
 800f2bc:	617b      	str	r3, [r7, #20]
   return(result);
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d1e4      	bne.n	800f28e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2202      	movs	r2, #2
 800f2c8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f2ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f7f4 fb37 	bl	8003944 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f2d6:	e063      	b.n	800f3a0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f2d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d00e      	beq.n	800f302 <HAL_UART_IRQHandler+0x6c6>
 800f2e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f2e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d008      	beq.n	800f302 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f2f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f002 f858 	bl	80113b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f300:	e051      	b.n	800f3a6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d014      	beq.n	800f338 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f30e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f316:	2b00      	cmp	r3, #0
 800f318:	d105      	bne.n	800f326 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f31a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f31e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f322:	2b00      	cmp	r3, #0
 800f324:	d008      	beq.n	800f338 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d03a      	beq.n	800f3a4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	4798      	blx	r3
    }
    return;
 800f336:	e035      	b.n	800f3a4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f33c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f340:	2b00      	cmp	r3, #0
 800f342:	d009      	beq.n	800f358 <HAL_UART_IRQHandler+0x71c>
 800f344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d003      	beq.n	800f358 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f001 fae6 	bl	8010922 <UART_EndTransmit_IT>
    return;
 800f356:	e026      	b.n	800f3a6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f35c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f360:	2b00      	cmp	r3, #0
 800f362:	d009      	beq.n	800f378 <HAL_UART_IRQHandler+0x73c>
 800f364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f368:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d003      	beq.n	800f378 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f002 f831 	bl	80113d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f376:	e016      	b.n	800f3a6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f37c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f380:	2b00      	cmp	r3, #0
 800f382:	d010      	beq.n	800f3a6 <HAL_UART_IRQHandler+0x76a>
 800f384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	da0c      	bge.n	800f3a6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f002 f819 	bl	80113c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f392:	e008      	b.n	800f3a6 <HAL_UART_IRQHandler+0x76a>
      return;
 800f394:	bf00      	nop
 800f396:	e006      	b.n	800f3a6 <HAL_UART_IRQHandler+0x76a>
    return;
 800f398:	bf00      	nop
 800f39a:	e004      	b.n	800f3a6 <HAL_UART_IRQHandler+0x76a>
      return;
 800f39c:	bf00      	nop
 800f39e:	e002      	b.n	800f3a6 <HAL_UART_IRQHandler+0x76a>
      return;
 800f3a0:	bf00      	nop
 800f3a2:	e000      	b.n	800f3a6 <HAL_UART_IRQHandler+0x76a>
    return;
 800f3a4:	bf00      	nop
  }
}
 800f3a6:	37e8      	adds	r7, #232	@ 0xe8
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}
 800f3ac:	effffffe 	.word	0xeffffffe

0800f3b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b083      	sub	sp, #12
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f3b8:	bf00      	nop
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f3cc:	bf00      	nop
 800f3ce:	370c      	adds	r7, #12
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d6:	4770      	bx	lr

0800f3d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f3d8:	b480      	push	{r7}
 800f3da:	b083      	sub	sp, #12
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f3e0:	bf00      	nop
 800f3e2:	370c      	adds	r7, #12
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr

0800f3ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f3ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f3f0:	b092      	sub	sp, #72	@ 0x48
 800f3f2:	af00      	add	r7, sp, #0
 800f3f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	689a      	ldr	r2, [r3, #8]
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	691b      	ldr	r3, [r3, #16]
 800f404:	431a      	orrs	r2, r3
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	695b      	ldr	r3, [r3, #20]
 800f40a:	431a      	orrs	r2, r3
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	69db      	ldr	r3, [r3, #28]
 800f410:	4313      	orrs	r3, r2
 800f412:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	681a      	ldr	r2, [r3, #0]
 800f41a:	4bbe      	ldr	r3, [pc, #760]	@ (800f714 <UART_SetConfig+0x328>)
 800f41c:	4013      	ands	r3, r2
 800f41e:	697a      	ldr	r2, [r7, #20]
 800f420:	6812      	ldr	r2, [r2, #0]
 800f422:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f424:	430b      	orrs	r3, r1
 800f426:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	68da      	ldr	r2, [r3, #12]
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	430a      	orrs	r2, r1
 800f43c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	699b      	ldr	r3, [r3, #24]
 800f442:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	4ab3      	ldr	r2, [pc, #716]	@ (800f718 <UART_SetConfig+0x32c>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d004      	beq.n	800f458 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	6a1b      	ldr	r3, [r3, #32]
 800f452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f454:	4313      	orrs	r3, r2
 800f456:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	689a      	ldr	r2, [r3, #8]
 800f45e:	4baf      	ldr	r3, [pc, #700]	@ (800f71c <UART_SetConfig+0x330>)
 800f460:	4013      	ands	r3, r2
 800f462:	697a      	ldr	r2, [r7, #20]
 800f464:	6812      	ldr	r2, [r2, #0]
 800f466:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f468:	430b      	orrs	r3, r1
 800f46a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f472:	f023 010f 	bic.w	r1, r3, #15
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	430a      	orrs	r2, r1
 800f480:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	4aa6      	ldr	r2, [pc, #664]	@ (800f720 <UART_SetConfig+0x334>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d177      	bne.n	800f57c <UART_SetConfig+0x190>
 800f48c:	4ba5      	ldr	r3, [pc, #660]	@ (800f724 <UART_SetConfig+0x338>)
 800f48e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f490:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f494:	2b28      	cmp	r3, #40	@ 0x28
 800f496:	d86d      	bhi.n	800f574 <UART_SetConfig+0x188>
 800f498:	a201      	add	r2, pc, #4	@ (adr r2, 800f4a0 <UART_SetConfig+0xb4>)
 800f49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f49e:	bf00      	nop
 800f4a0:	0800f545 	.word	0x0800f545
 800f4a4:	0800f575 	.word	0x0800f575
 800f4a8:	0800f575 	.word	0x0800f575
 800f4ac:	0800f575 	.word	0x0800f575
 800f4b0:	0800f575 	.word	0x0800f575
 800f4b4:	0800f575 	.word	0x0800f575
 800f4b8:	0800f575 	.word	0x0800f575
 800f4bc:	0800f575 	.word	0x0800f575
 800f4c0:	0800f54d 	.word	0x0800f54d
 800f4c4:	0800f575 	.word	0x0800f575
 800f4c8:	0800f575 	.word	0x0800f575
 800f4cc:	0800f575 	.word	0x0800f575
 800f4d0:	0800f575 	.word	0x0800f575
 800f4d4:	0800f575 	.word	0x0800f575
 800f4d8:	0800f575 	.word	0x0800f575
 800f4dc:	0800f575 	.word	0x0800f575
 800f4e0:	0800f555 	.word	0x0800f555
 800f4e4:	0800f575 	.word	0x0800f575
 800f4e8:	0800f575 	.word	0x0800f575
 800f4ec:	0800f575 	.word	0x0800f575
 800f4f0:	0800f575 	.word	0x0800f575
 800f4f4:	0800f575 	.word	0x0800f575
 800f4f8:	0800f575 	.word	0x0800f575
 800f4fc:	0800f575 	.word	0x0800f575
 800f500:	0800f55d 	.word	0x0800f55d
 800f504:	0800f575 	.word	0x0800f575
 800f508:	0800f575 	.word	0x0800f575
 800f50c:	0800f575 	.word	0x0800f575
 800f510:	0800f575 	.word	0x0800f575
 800f514:	0800f575 	.word	0x0800f575
 800f518:	0800f575 	.word	0x0800f575
 800f51c:	0800f575 	.word	0x0800f575
 800f520:	0800f565 	.word	0x0800f565
 800f524:	0800f575 	.word	0x0800f575
 800f528:	0800f575 	.word	0x0800f575
 800f52c:	0800f575 	.word	0x0800f575
 800f530:	0800f575 	.word	0x0800f575
 800f534:	0800f575 	.word	0x0800f575
 800f538:	0800f575 	.word	0x0800f575
 800f53c:	0800f575 	.word	0x0800f575
 800f540:	0800f56d 	.word	0x0800f56d
 800f544:	2301      	movs	r3, #1
 800f546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f54a:	e222      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f54c:	2304      	movs	r3, #4
 800f54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f552:	e21e      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f554:	2308      	movs	r3, #8
 800f556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f55a:	e21a      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f55c:	2310      	movs	r3, #16
 800f55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f562:	e216      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f564:	2320      	movs	r3, #32
 800f566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f56a:	e212      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f56c:	2340      	movs	r3, #64	@ 0x40
 800f56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f572:	e20e      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f574:	2380      	movs	r3, #128	@ 0x80
 800f576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f57a:	e20a      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	4a69      	ldr	r2, [pc, #420]	@ (800f728 <UART_SetConfig+0x33c>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d130      	bne.n	800f5e8 <UART_SetConfig+0x1fc>
 800f586:	4b67      	ldr	r3, [pc, #412]	@ (800f724 <UART_SetConfig+0x338>)
 800f588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f58a:	f003 0307 	and.w	r3, r3, #7
 800f58e:	2b05      	cmp	r3, #5
 800f590:	d826      	bhi.n	800f5e0 <UART_SetConfig+0x1f4>
 800f592:	a201      	add	r2, pc, #4	@ (adr r2, 800f598 <UART_SetConfig+0x1ac>)
 800f594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f598:	0800f5b1 	.word	0x0800f5b1
 800f59c:	0800f5b9 	.word	0x0800f5b9
 800f5a0:	0800f5c1 	.word	0x0800f5c1
 800f5a4:	0800f5c9 	.word	0x0800f5c9
 800f5a8:	0800f5d1 	.word	0x0800f5d1
 800f5ac:	0800f5d9 	.word	0x0800f5d9
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5b6:	e1ec      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f5b8:	2304      	movs	r3, #4
 800f5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5be:	e1e8      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f5c0:	2308      	movs	r3, #8
 800f5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5c6:	e1e4      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f5c8:	2310      	movs	r3, #16
 800f5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ce:	e1e0      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f5d0:	2320      	movs	r3, #32
 800f5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5d6:	e1dc      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f5d8:	2340      	movs	r3, #64	@ 0x40
 800f5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5de:	e1d8      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f5e0:	2380      	movs	r3, #128	@ 0x80
 800f5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5e6:	e1d4      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	4a4f      	ldr	r2, [pc, #316]	@ (800f72c <UART_SetConfig+0x340>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d130      	bne.n	800f654 <UART_SetConfig+0x268>
 800f5f2:	4b4c      	ldr	r3, [pc, #304]	@ (800f724 <UART_SetConfig+0x338>)
 800f5f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5f6:	f003 0307 	and.w	r3, r3, #7
 800f5fa:	2b05      	cmp	r3, #5
 800f5fc:	d826      	bhi.n	800f64c <UART_SetConfig+0x260>
 800f5fe:	a201      	add	r2, pc, #4	@ (adr r2, 800f604 <UART_SetConfig+0x218>)
 800f600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f604:	0800f61d 	.word	0x0800f61d
 800f608:	0800f625 	.word	0x0800f625
 800f60c:	0800f62d 	.word	0x0800f62d
 800f610:	0800f635 	.word	0x0800f635
 800f614:	0800f63d 	.word	0x0800f63d
 800f618:	0800f645 	.word	0x0800f645
 800f61c:	2300      	movs	r3, #0
 800f61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f622:	e1b6      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f624:	2304      	movs	r3, #4
 800f626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f62a:	e1b2      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f62c:	2308      	movs	r3, #8
 800f62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f632:	e1ae      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f634:	2310      	movs	r3, #16
 800f636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f63a:	e1aa      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f63c:	2320      	movs	r3, #32
 800f63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f642:	e1a6      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f644:	2340      	movs	r3, #64	@ 0x40
 800f646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f64a:	e1a2      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f64c:	2380      	movs	r3, #128	@ 0x80
 800f64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f652:	e19e      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	4a35      	ldr	r2, [pc, #212]	@ (800f730 <UART_SetConfig+0x344>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d130      	bne.n	800f6c0 <UART_SetConfig+0x2d4>
 800f65e:	4b31      	ldr	r3, [pc, #196]	@ (800f724 <UART_SetConfig+0x338>)
 800f660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f662:	f003 0307 	and.w	r3, r3, #7
 800f666:	2b05      	cmp	r3, #5
 800f668:	d826      	bhi.n	800f6b8 <UART_SetConfig+0x2cc>
 800f66a:	a201      	add	r2, pc, #4	@ (adr r2, 800f670 <UART_SetConfig+0x284>)
 800f66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f670:	0800f689 	.word	0x0800f689
 800f674:	0800f691 	.word	0x0800f691
 800f678:	0800f699 	.word	0x0800f699
 800f67c:	0800f6a1 	.word	0x0800f6a1
 800f680:	0800f6a9 	.word	0x0800f6a9
 800f684:	0800f6b1 	.word	0x0800f6b1
 800f688:	2300      	movs	r3, #0
 800f68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f68e:	e180      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f690:	2304      	movs	r3, #4
 800f692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f696:	e17c      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f698:	2308      	movs	r3, #8
 800f69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f69e:	e178      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f6a0:	2310      	movs	r3, #16
 800f6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6a6:	e174      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f6a8:	2320      	movs	r3, #32
 800f6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ae:	e170      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f6b0:	2340      	movs	r3, #64	@ 0x40
 800f6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6b6:	e16c      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f6b8:	2380      	movs	r3, #128	@ 0x80
 800f6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6be:	e168      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	4a1b      	ldr	r2, [pc, #108]	@ (800f734 <UART_SetConfig+0x348>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d142      	bne.n	800f750 <UART_SetConfig+0x364>
 800f6ca:	4b16      	ldr	r3, [pc, #88]	@ (800f724 <UART_SetConfig+0x338>)
 800f6cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6ce:	f003 0307 	and.w	r3, r3, #7
 800f6d2:	2b05      	cmp	r3, #5
 800f6d4:	d838      	bhi.n	800f748 <UART_SetConfig+0x35c>
 800f6d6:	a201      	add	r2, pc, #4	@ (adr r2, 800f6dc <UART_SetConfig+0x2f0>)
 800f6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6dc:	0800f6f5 	.word	0x0800f6f5
 800f6e0:	0800f6fd 	.word	0x0800f6fd
 800f6e4:	0800f705 	.word	0x0800f705
 800f6e8:	0800f70d 	.word	0x0800f70d
 800f6ec:	0800f739 	.word	0x0800f739
 800f6f0:	0800f741 	.word	0x0800f741
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6fa:	e14a      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f6fc:	2304      	movs	r3, #4
 800f6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f702:	e146      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f704:	2308      	movs	r3, #8
 800f706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f70a:	e142      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f70c:	2310      	movs	r3, #16
 800f70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f712:	e13e      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f714:	cfff69f3 	.word	0xcfff69f3
 800f718:	58000c00 	.word	0x58000c00
 800f71c:	11fff4ff 	.word	0x11fff4ff
 800f720:	40011000 	.word	0x40011000
 800f724:	58024400 	.word	0x58024400
 800f728:	40004400 	.word	0x40004400
 800f72c:	40004800 	.word	0x40004800
 800f730:	40004c00 	.word	0x40004c00
 800f734:	40005000 	.word	0x40005000
 800f738:	2320      	movs	r3, #32
 800f73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f73e:	e128      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f740:	2340      	movs	r3, #64	@ 0x40
 800f742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f746:	e124      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f748:	2380      	movs	r3, #128	@ 0x80
 800f74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f74e:	e120      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4acb      	ldr	r2, [pc, #812]	@ (800fa84 <UART_SetConfig+0x698>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d176      	bne.n	800f848 <UART_SetConfig+0x45c>
 800f75a:	4bcb      	ldr	r3, [pc, #812]	@ (800fa88 <UART_SetConfig+0x69c>)
 800f75c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f75e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f762:	2b28      	cmp	r3, #40	@ 0x28
 800f764:	d86c      	bhi.n	800f840 <UART_SetConfig+0x454>
 800f766:	a201      	add	r2, pc, #4	@ (adr r2, 800f76c <UART_SetConfig+0x380>)
 800f768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f76c:	0800f811 	.word	0x0800f811
 800f770:	0800f841 	.word	0x0800f841
 800f774:	0800f841 	.word	0x0800f841
 800f778:	0800f841 	.word	0x0800f841
 800f77c:	0800f841 	.word	0x0800f841
 800f780:	0800f841 	.word	0x0800f841
 800f784:	0800f841 	.word	0x0800f841
 800f788:	0800f841 	.word	0x0800f841
 800f78c:	0800f819 	.word	0x0800f819
 800f790:	0800f841 	.word	0x0800f841
 800f794:	0800f841 	.word	0x0800f841
 800f798:	0800f841 	.word	0x0800f841
 800f79c:	0800f841 	.word	0x0800f841
 800f7a0:	0800f841 	.word	0x0800f841
 800f7a4:	0800f841 	.word	0x0800f841
 800f7a8:	0800f841 	.word	0x0800f841
 800f7ac:	0800f821 	.word	0x0800f821
 800f7b0:	0800f841 	.word	0x0800f841
 800f7b4:	0800f841 	.word	0x0800f841
 800f7b8:	0800f841 	.word	0x0800f841
 800f7bc:	0800f841 	.word	0x0800f841
 800f7c0:	0800f841 	.word	0x0800f841
 800f7c4:	0800f841 	.word	0x0800f841
 800f7c8:	0800f841 	.word	0x0800f841
 800f7cc:	0800f829 	.word	0x0800f829
 800f7d0:	0800f841 	.word	0x0800f841
 800f7d4:	0800f841 	.word	0x0800f841
 800f7d8:	0800f841 	.word	0x0800f841
 800f7dc:	0800f841 	.word	0x0800f841
 800f7e0:	0800f841 	.word	0x0800f841
 800f7e4:	0800f841 	.word	0x0800f841
 800f7e8:	0800f841 	.word	0x0800f841
 800f7ec:	0800f831 	.word	0x0800f831
 800f7f0:	0800f841 	.word	0x0800f841
 800f7f4:	0800f841 	.word	0x0800f841
 800f7f8:	0800f841 	.word	0x0800f841
 800f7fc:	0800f841 	.word	0x0800f841
 800f800:	0800f841 	.word	0x0800f841
 800f804:	0800f841 	.word	0x0800f841
 800f808:	0800f841 	.word	0x0800f841
 800f80c:	0800f839 	.word	0x0800f839
 800f810:	2301      	movs	r3, #1
 800f812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f816:	e0bc      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f818:	2304      	movs	r3, #4
 800f81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f81e:	e0b8      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f820:	2308      	movs	r3, #8
 800f822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f826:	e0b4      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f828:	2310      	movs	r3, #16
 800f82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f82e:	e0b0      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f830:	2320      	movs	r3, #32
 800f832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f836:	e0ac      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f838:	2340      	movs	r3, #64	@ 0x40
 800f83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f83e:	e0a8      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f840:	2380      	movs	r3, #128	@ 0x80
 800f842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f846:	e0a4      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4a8f      	ldr	r2, [pc, #572]	@ (800fa8c <UART_SetConfig+0x6a0>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d130      	bne.n	800f8b4 <UART_SetConfig+0x4c8>
 800f852:	4b8d      	ldr	r3, [pc, #564]	@ (800fa88 <UART_SetConfig+0x69c>)
 800f854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f856:	f003 0307 	and.w	r3, r3, #7
 800f85a:	2b05      	cmp	r3, #5
 800f85c:	d826      	bhi.n	800f8ac <UART_SetConfig+0x4c0>
 800f85e:	a201      	add	r2, pc, #4	@ (adr r2, 800f864 <UART_SetConfig+0x478>)
 800f860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f864:	0800f87d 	.word	0x0800f87d
 800f868:	0800f885 	.word	0x0800f885
 800f86c:	0800f88d 	.word	0x0800f88d
 800f870:	0800f895 	.word	0x0800f895
 800f874:	0800f89d 	.word	0x0800f89d
 800f878:	0800f8a5 	.word	0x0800f8a5
 800f87c:	2300      	movs	r3, #0
 800f87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f882:	e086      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f884:	2304      	movs	r3, #4
 800f886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f88a:	e082      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f88c:	2308      	movs	r3, #8
 800f88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f892:	e07e      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f894:	2310      	movs	r3, #16
 800f896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f89a:	e07a      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f89c:	2320      	movs	r3, #32
 800f89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8a2:	e076      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f8a4:	2340      	movs	r3, #64	@ 0x40
 800f8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8aa:	e072      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f8ac:	2380      	movs	r3, #128	@ 0x80
 800f8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8b2:	e06e      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	4a75      	ldr	r2, [pc, #468]	@ (800fa90 <UART_SetConfig+0x6a4>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d130      	bne.n	800f920 <UART_SetConfig+0x534>
 800f8be:	4b72      	ldr	r3, [pc, #456]	@ (800fa88 <UART_SetConfig+0x69c>)
 800f8c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8c2:	f003 0307 	and.w	r3, r3, #7
 800f8c6:	2b05      	cmp	r3, #5
 800f8c8:	d826      	bhi.n	800f918 <UART_SetConfig+0x52c>
 800f8ca:	a201      	add	r2, pc, #4	@ (adr r2, 800f8d0 <UART_SetConfig+0x4e4>)
 800f8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8d0:	0800f8e9 	.word	0x0800f8e9
 800f8d4:	0800f8f1 	.word	0x0800f8f1
 800f8d8:	0800f8f9 	.word	0x0800f8f9
 800f8dc:	0800f901 	.word	0x0800f901
 800f8e0:	0800f909 	.word	0x0800f909
 800f8e4:	0800f911 	.word	0x0800f911
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ee:	e050      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f8f0:	2304      	movs	r3, #4
 800f8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8f6:	e04c      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f8f8:	2308      	movs	r3, #8
 800f8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8fe:	e048      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f900:	2310      	movs	r3, #16
 800f902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f906:	e044      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f908:	2320      	movs	r3, #32
 800f90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f90e:	e040      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f910:	2340      	movs	r3, #64	@ 0x40
 800f912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f916:	e03c      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f918:	2380      	movs	r3, #128	@ 0x80
 800f91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f91e:	e038      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	4a5b      	ldr	r2, [pc, #364]	@ (800fa94 <UART_SetConfig+0x6a8>)
 800f926:	4293      	cmp	r3, r2
 800f928:	d130      	bne.n	800f98c <UART_SetConfig+0x5a0>
 800f92a:	4b57      	ldr	r3, [pc, #348]	@ (800fa88 <UART_SetConfig+0x69c>)
 800f92c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f92e:	f003 0307 	and.w	r3, r3, #7
 800f932:	2b05      	cmp	r3, #5
 800f934:	d826      	bhi.n	800f984 <UART_SetConfig+0x598>
 800f936:	a201      	add	r2, pc, #4	@ (adr r2, 800f93c <UART_SetConfig+0x550>)
 800f938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f93c:	0800f955 	.word	0x0800f955
 800f940:	0800f95d 	.word	0x0800f95d
 800f944:	0800f965 	.word	0x0800f965
 800f948:	0800f96d 	.word	0x0800f96d
 800f94c:	0800f975 	.word	0x0800f975
 800f950:	0800f97d 	.word	0x0800f97d
 800f954:	2302      	movs	r3, #2
 800f956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f95a:	e01a      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f95c:	2304      	movs	r3, #4
 800f95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f962:	e016      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f964:	2308      	movs	r3, #8
 800f966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f96a:	e012      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f96c:	2310      	movs	r3, #16
 800f96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f972:	e00e      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f974:	2320      	movs	r3, #32
 800f976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f97a:	e00a      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f97c:	2340      	movs	r3, #64	@ 0x40
 800f97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f982:	e006      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f984:	2380      	movs	r3, #128	@ 0x80
 800f986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f98a:	e002      	b.n	800f992 <UART_SetConfig+0x5a6>
 800f98c:	2380      	movs	r3, #128	@ 0x80
 800f98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	4a3f      	ldr	r2, [pc, #252]	@ (800fa94 <UART_SetConfig+0x6a8>)
 800f998:	4293      	cmp	r3, r2
 800f99a:	f040 80f8 	bne.w	800fb8e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f99e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f9a2:	2b20      	cmp	r3, #32
 800f9a4:	dc46      	bgt.n	800fa34 <UART_SetConfig+0x648>
 800f9a6:	2b02      	cmp	r3, #2
 800f9a8:	f2c0 8082 	blt.w	800fab0 <UART_SetConfig+0x6c4>
 800f9ac:	3b02      	subs	r3, #2
 800f9ae:	2b1e      	cmp	r3, #30
 800f9b0:	d87e      	bhi.n	800fab0 <UART_SetConfig+0x6c4>
 800f9b2:	a201      	add	r2, pc, #4	@ (adr r2, 800f9b8 <UART_SetConfig+0x5cc>)
 800f9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9b8:	0800fa3b 	.word	0x0800fa3b
 800f9bc:	0800fab1 	.word	0x0800fab1
 800f9c0:	0800fa43 	.word	0x0800fa43
 800f9c4:	0800fab1 	.word	0x0800fab1
 800f9c8:	0800fab1 	.word	0x0800fab1
 800f9cc:	0800fab1 	.word	0x0800fab1
 800f9d0:	0800fa53 	.word	0x0800fa53
 800f9d4:	0800fab1 	.word	0x0800fab1
 800f9d8:	0800fab1 	.word	0x0800fab1
 800f9dc:	0800fab1 	.word	0x0800fab1
 800f9e0:	0800fab1 	.word	0x0800fab1
 800f9e4:	0800fab1 	.word	0x0800fab1
 800f9e8:	0800fab1 	.word	0x0800fab1
 800f9ec:	0800fab1 	.word	0x0800fab1
 800f9f0:	0800fa63 	.word	0x0800fa63
 800f9f4:	0800fab1 	.word	0x0800fab1
 800f9f8:	0800fab1 	.word	0x0800fab1
 800f9fc:	0800fab1 	.word	0x0800fab1
 800fa00:	0800fab1 	.word	0x0800fab1
 800fa04:	0800fab1 	.word	0x0800fab1
 800fa08:	0800fab1 	.word	0x0800fab1
 800fa0c:	0800fab1 	.word	0x0800fab1
 800fa10:	0800fab1 	.word	0x0800fab1
 800fa14:	0800fab1 	.word	0x0800fab1
 800fa18:	0800fab1 	.word	0x0800fab1
 800fa1c:	0800fab1 	.word	0x0800fab1
 800fa20:	0800fab1 	.word	0x0800fab1
 800fa24:	0800fab1 	.word	0x0800fab1
 800fa28:	0800fab1 	.word	0x0800fab1
 800fa2c:	0800fab1 	.word	0x0800fab1
 800fa30:	0800faa3 	.word	0x0800faa3
 800fa34:	2b40      	cmp	r3, #64	@ 0x40
 800fa36:	d037      	beq.n	800faa8 <UART_SetConfig+0x6bc>
 800fa38:	e03a      	b.n	800fab0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fa3a:	f7fe f931 	bl	800dca0 <HAL_RCCEx_GetD3PCLK1Freq>
 800fa3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fa40:	e03c      	b.n	800fabc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7fe f940 	bl	800dccc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fa4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa50:	e034      	b.n	800fabc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa52:	f107 0318 	add.w	r3, r7, #24
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7fe fa8c 	bl	800df74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fa5c:	69fb      	ldr	r3, [r7, #28]
 800fa5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa60:	e02c      	b.n	800fabc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa62:	4b09      	ldr	r3, [pc, #36]	@ (800fa88 <UART_SetConfig+0x69c>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f003 0320 	and.w	r3, r3, #32
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d016      	beq.n	800fa9c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fa6e:	4b06      	ldr	r3, [pc, #24]	@ (800fa88 <UART_SetConfig+0x69c>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	08db      	lsrs	r3, r3, #3
 800fa74:	f003 0303 	and.w	r3, r3, #3
 800fa78:	4a07      	ldr	r2, [pc, #28]	@ (800fa98 <UART_SetConfig+0x6ac>)
 800fa7a:	fa22 f303 	lsr.w	r3, r2, r3
 800fa7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fa80:	e01c      	b.n	800fabc <UART_SetConfig+0x6d0>
 800fa82:	bf00      	nop
 800fa84:	40011400 	.word	0x40011400
 800fa88:	58024400 	.word	0x58024400
 800fa8c:	40007800 	.word	0x40007800
 800fa90:	40007c00 	.word	0x40007c00
 800fa94:	58000c00 	.word	0x58000c00
 800fa98:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800fa9c:	4b9d      	ldr	r3, [pc, #628]	@ (800fd14 <UART_SetConfig+0x928>)
 800fa9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800faa0:	e00c      	b.n	800fabc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800faa2:	4b9d      	ldr	r3, [pc, #628]	@ (800fd18 <UART_SetConfig+0x92c>)
 800faa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800faa6:	e009      	b.n	800fabc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800faa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800faac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800faae:	e005      	b.n	800fabc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800fab0:	2300      	movs	r3, #0
 800fab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fab4:	2301      	movs	r3, #1
 800fab6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800faba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fabc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	f000 81de 	beq.w	800fe80 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fac8:	4a94      	ldr	r2, [pc, #592]	@ (800fd1c <UART_SetConfig+0x930>)
 800faca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800face:	461a      	mov	r2, r3
 800fad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fad2:	fbb3 f3f2 	udiv	r3, r3, r2
 800fad6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	685a      	ldr	r2, [r3, #4]
 800fadc:	4613      	mov	r3, r2
 800fade:	005b      	lsls	r3, r3, #1
 800fae0:	4413      	add	r3, r2
 800fae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d305      	bcc.n	800faf4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	685b      	ldr	r3, [r3, #4]
 800faec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800faee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d903      	bls.n	800fafc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800faf4:	2301      	movs	r3, #1
 800faf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fafa:	e1c1      	b.n	800fe80 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fafc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fafe:	2200      	movs	r2, #0
 800fb00:	60bb      	str	r3, [r7, #8]
 800fb02:	60fa      	str	r2, [r7, #12]
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb08:	4a84      	ldr	r2, [pc, #528]	@ (800fd1c <UART_SetConfig+0x930>)
 800fb0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	2200      	movs	r2, #0
 800fb12:	603b      	str	r3, [r7, #0]
 800fb14:	607a      	str	r2, [r7, #4]
 800fb16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fb1e:	f7f0 fdf3 	bl	8000708 <__aeabi_uldivmod>
 800fb22:	4602      	mov	r2, r0
 800fb24:	460b      	mov	r3, r1
 800fb26:	4610      	mov	r0, r2
 800fb28:	4619      	mov	r1, r3
 800fb2a:	f04f 0200 	mov.w	r2, #0
 800fb2e:	f04f 0300 	mov.w	r3, #0
 800fb32:	020b      	lsls	r3, r1, #8
 800fb34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fb38:	0202      	lsls	r2, r0, #8
 800fb3a:	6979      	ldr	r1, [r7, #20]
 800fb3c:	6849      	ldr	r1, [r1, #4]
 800fb3e:	0849      	lsrs	r1, r1, #1
 800fb40:	2000      	movs	r0, #0
 800fb42:	460c      	mov	r4, r1
 800fb44:	4605      	mov	r5, r0
 800fb46:	eb12 0804 	adds.w	r8, r2, r4
 800fb4a:	eb43 0905 	adc.w	r9, r3, r5
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	685b      	ldr	r3, [r3, #4]
 800fb52:	2200      	movs	r2, #0
 800fb54:	469a      	mov	sl, r3
 800fb56:	4693      	mov	fp, r2
 800fb58:	4652      	mov	r2, sl
 800fb5a:	465b      	mov	r3, fp
 800fb5c:	4640      	mov	r0, r8
 800fb5e:	4649      	mov	r1, r9
 800fb60:	f7f0 fdd2 	bl	8000708 <__aeabi_uldivmod>
 800fb64:	4602      	mov	r2, r0
 800fb66:	460b      	mov	r3, r1
 800fb68:	4613      	mov	r3, r2
 800fb6a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fb6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fb72:	d308      	bcc.n	800fb86 <UART_SetConfig+0x79a>
 800fb74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fb7a:	d204      	bcs.n	800fb86 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fb82:	60da      	str	r2, [r3, #12]
 800fb84:	e17c      	b.n	800fe80 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fb86:	2301      	movs	r3, #1
 800fb88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fb8c:	e178      	b.n	800fe80 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	69db      	ldr	r3, [r3, #28]
 800fb92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fb96:	f040 80c5 	bne.w	800fd24 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800fb9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fb9e:	2b20      	cmp	r3, #32
 800fba0:	dc48      	bgt.n	800fc34 <UART_SetConfig+0x848>
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	db7b      	blt.n	800fc9e <UART_SetConfig+0x8b2>
 800fba6:	2b20      	cmp	r3, #32
 800fba8:	d879      	bhi.n	800fc9e <UART_SetConfig+0x8b2>
 800fbaa:	a201      	add	r2, pc, #4	@ (adr r2, 800fbb0 <UART_SetConfig+0x7c4>)
 800fbac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbb0:	0800fc3b 	.word	0x0800fc3b
 800fbb4:	0800fc43 	.word	0x0800fc43
 800fbb8:	0800fc9f 	.word	0x0800fc9f
 800fbbc:	0800fc9f 	.word	0x0800fc9f
 800fbc0:	0800fc4b 	.word	0x0800fc4b
 800fbc4:	0800fc9f 	.word	0x0800fc9f
 800fbc8:	0800fc9f 	.word	0x0800fc9f
 800fbcc:	0800fc9f 	.word	0x0800fc9f
 800fbd0:	0800fc5b 	.word	0x0800fc5b
 800fbd4:	0800fc9f 	.word	0x0800fc9f
 800fbd8:	0800fc9f 	.word	0x0800fc9f
 800fbdc:	0800fc9f 	.word	0x0800fc9f
 800fbe0:	0800fc9f 	.word	0x0800fc9f
 800fbe4:	0800fc9f 	.word	0x0800fc9f
 800fbe8:	0800fc9f 	.word	0x0800fc9f
 800fbec:	0800fc9f 	.word	0x0800fc9f
 800fbf0:	0800fc6b 	.word	0x0800fc6b
 800fbf4:	0800fc9f 	.word	0x0800fc9f
 800fbf8:	0800fc9f 	.word	0x0800fc9f
 800fbfc:	0800fc9f 	.word	0x0800fc9f
 800fc00:	0800fc9f 	.word	0x0800fc9f
 800fc04:	0800fc9f 	.word	0x0800fc9f
 800fc08:	0800fc9f 	.word	0x0800fc9f
 800fc0c:	0800fc9f 	.word	0x0800fc9f
 800fc10:	0800fc9f 	.word	0x0800fc9f
 800fc14:	0800fc9f 	.word	0x0800fc9f
 800fc18:	0800fc9f 	.word	0x0800fc9f
 800fc1c:	0800fc9f 	.word	0x0800fc9f
 800fc20:	0800fc9f 	.word	0x0800fc9f
 800fc24:	0800fc9f 	.word	0x0800fc9f
 800fc28:	0800fc9f 	.word	0x0800fc9f
 800fc2c:	0800fc9f 	.word	0x0800fc9f
 800fc30:	0800fc91 	.word	0x0800fc91
 800fc34:	2b40      	cmp	r3, #64	@ 0x40
 800fc36:	d02e      	beq.n	800fc96 <UART_SetConfig+0x8aa>
 800fc38:	e031      	b.n	800fc9e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fc3a:	f7fc fdb9 	bl	800c7b0 <HAL_RCC_GetPCLK1Freq>
 800fc3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fc40:	e033      	b.n	800fcaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fc42:	f7fc fdcb 	bl	800c7dc <HAL_RCC_GetPCLK2Freq>
 800fc46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fc48:	e02f      	b.n	800fcaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f7fe f83c 	bl	800dccc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fc54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc58:	e027      	b.n	800fcaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc5a:	f107 0318 	add.w	r3, r7, #24
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7fe f988 	bl	800df74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fc64:	69fb      	ldr	r3, [r7, #28]
 800fc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc68:	e01f      	b.n	800fcaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc6a:	4b2d      	ldr	r3, [pc, #180]	@ (800fd20 <UART_SetConfig+0x934>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	f003 0320 	and.w	r3, r3, #32
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d009      	beq.n	800fc8a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fc76:	4b2a      	ldr	r3, [pc, #168]	@ (800fd20 <UART_SetConfig+0x934>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	08db      	lsrs	r3, r3, #3
 800fc7c:	f003 0303 	and.w	r3, r3, #3
 800fc80:	4a24      	ldr	r2, [pc, #144]	@ (800fd14 <UART_SetConfig+0x928>)
 800fc82:	fa22 f303 	lsr.w	r3, r2, r3
 800fc86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc88:	e00f      	b.n	800fcaa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fc8a:	4b22      	ldr	r3, [pc, #136]	@ (800fd14 <UART_SetConfig+0x928>)
 800fc8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc8e:	e00c      	b.n	800fcaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fc90:	4b21      	ldr	r3, [pc, #132]	@ (800fd18 <UART_SetConfig+0x92c>)
 800fc92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc94:	e009      	b.n	800fcaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fc9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc9c:	e005      	b.n	800fcaa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fca2:	2301      	movs	r3, #1
 800fca4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fca8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fcaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	f000 80e7 	beq.w	800fe80 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcb6:	4a19      	ldr	r2, [pc, #100]	@ (800fd1c <UART_SetConfig+0x930>)
 800fcb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800fcc4:	005a      	lsls	r2, r3, #1
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	685b      	ldr	r3, [r3, #4]
 800fcca:	085b      	lsrs	r3, r3, #1
 800fccc:	441a      	add	r2, r3
 800fcce:	697b      	ldr	r3, [r7, #20]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fcd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcda:	2b0f      	cmp	r3, #15
 800fcdc:	d916      	bls.n	800fd0c <UART_SetConfig+0x920>
 800fcde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fce4:	d212      	bcs.n	800fd0c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fce8:	b29b      	uxth	r3, r3
 800fcea:	f023 030f 	bic.w	r3, r3, #15
 800fcee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fcf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcf2:	085b      	lsrs	r3, r3, #1
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	f003 0307 	and.w	r3, r3, #7
 800fcfa:	b29a      	uxth	r2, r3
 800fcfc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fcfe:	4313      	orrs	r3, r2
 800fd00:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800fd02:	697b      	ldr	r3, [r7, #20]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fd08:	60da      	str	r2, [r3, #12]
 800fd0a:	e0b9      	b.n	800fe80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fd12:	e0b5      	b.n	800fe80 <UART_SetConfig+0xa94>
 800fd14:	03d09000 	.word	0x03d09000
 800fd18:	003d0900 	.word	0x003d0900
 800fd1c:	0802cd8c 	.word	0x0802cd8c
 800fd20:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800fd24:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fd28:	2b20      	cmp	r3, #32
 800fd2a:	dc49      	bgt.n	800fdc0 <UART_SetConfig+0x9d4>
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	db7c      	blt.n	800fe2a <UART_SetConfig+0xa3e>
 800fd30:	2b20      	cmp	r3, #32
 800fd32:	d87a      	bhi.n	800fe2a <UART_SetConfig+0xa3e>
 800fd34:	a201      	add	r2, pc, #4	@ (adr r2, 800fd3c <UART_SetConfig+0x950>)
 800fd36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd3a:	bf00      	nop
 800fd3c:	0800fdc7 	.word	0x0800fdc7
 800fd40:	0800fdcf 	.word	0x0800fdcf
 800fd44:	0800fe2b 	.word	0x0800fe2b
 800fd48:	0800fe2b 	.word	0x0800fe2b
 800fd4c:	0800fdd7 	.word	0x0800fdd7
 800fd50:	0800fe2b 	.word	0x0800fe2b
 800fd54:	0800fe2b 	.word	0x0800fe2b
 800fd58:	0800fe2b 	.word	0x0800fe2b
 800fd5c:	0800fde7 	.word	0x0800fde7
 800fd60:	0800fe2b 	.word	0x0800fe2b
 800fd64:	0800fe2b 	.word	0x0800fe2b
 800fd68:	0800fe2b 	.word	0x0800fe2b
 800fd6c:	0800fe2b 	.word	0x0800fe2b
 800fd70:	0800fe2b 	.word	0x0800fe2b
 800fd74:	0800fe2b 	.word	0x0800fe2b
 800fd78:	0800fe2b 	.word	0x0800fe2b
 800fd7c:	0800fdf7 	.word	0x0800fdf7
 800fd80:	0800fe2b 	.word	0x0800fe2b
 800fd84:	0800fe2b 	.word	0x0800fe2b
 800fd88:	0800fe2b 	.word	0x0800fe2b
 800fd8c:	0800fe2b 	.word	0x0800fe2b
 800fd90:	0800fe2b 	.word	0x0800fe2b
 800fd94:	0800fe2b 	.word	0x0800fe2b
 800fd98:	0800fe2b 	.word	0x0800fe2b
 800fd9c:	0800fe2b 	.word	0x0800fe2b
 800fda0:	0800fe2b 	.word	0x0800fe2b
 800fda4:	0800fe2b 	.word	0x0800fe2b
 800fda8:	0800fe2b 	.word	0x0800fe2b
 800fdac:	0800fe2b 	.word	0x0800fe2b
 800fdb0:	0800fe2b 	.word	0x0800fe2b
 800fdb4:	0800fe2b 	.word	0x0800fe2b
 800fdb8:	0800fe2b 	.word	0x0800fe2b
 800fdbc:	0800fe1d 	.word	0x0800fe1d
 800fdc0:	2b40      	cmp	r3, #64	@ 0x40
 800fdc2:	d02e      	beq.n	800fe22 <UART_SetConfig+0xa36>
 800fdc4:	e031      	b.n	800fe2a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fdc6:	f7fc fcf3 	bl	800c7b0 <HAL_RCC_GetPCLK1Freq>
 800fdca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fdcc:	e033      	b.n	800fe36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fdce:	f7fc fd05 	bl	800c7dc <HAL_RCC_GetPCLK2Freq>
 800fdd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fdd4:	e02f      	b.n	800fe36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fdd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fdda:	4618      	mov	r0, r3
 800fddc:	f7fd ff76 	bl	800dccc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fde0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fde2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fde4:	e027      	b.n	800fe36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fde6:	f107 0318 	add.w	r3, r7, #24
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fe f8c2 	bl	800df74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fdf0:	69fb      	ldr	r3, [r7, #28]
 800fdf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdf4:	e01f      	b.n	800fe36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fdf6:	4b2d      	ldr	r3, [pc, #180]	@ (800feac <UART_SetConfig+0xac0>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	f003 0320 	and.w	r3, r3, #32
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d009      	beq.n	800fe16 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe02:	4b2a      	ldr	r3, [pc, #168]	@ (800feac <UART_SetConfig+0xac0>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	08db      	lsrs	r3, r3, #3
 800fe08:	f003 0303 	and.w	r3, r3, #3
 800fe0c:	4a28      	ldr	r2, [pc, #160]	@ (800feb0 <UART_SetConfig+0xac4>)
 800fe0e:	fa22 f303 	lsr.w	r3, r2, r3
 800fe12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fe14:	e00f      	b.n	800fe36 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800fe16:	4b26      	ldr	r3, [pc, #152]	@ (800feb0 <UART_SetConfig+0xac4>)
 800fe18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe1a:	e00c      	b.n	800fe36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fe1c:	4b25      	ldr	r3, [pc, #148]	@ (800feb4 <UART_SetConfig+0xac8>)
 800fe1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe20:	e009      	b.n	800fe36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fe26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe28:	e005      	b.n	800fe36 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fe2e:	2301      	movs	r3, #1
 800fe30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fe34:	bf00      	nop
    }

    if (pclk != 0U)
 800fe36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d021      	beq.n	800fe80 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe40:	4a1d      	ldr	r2, [pc, #116]	@ (800feb8 <UART_SetConfig+0xacc>)
 800fe42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe46:	461a      	mov	r2, r3
 800fe48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe4a:	fbb3 f2f2 	udiv	r2, r3, r2
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	685b      	ldr	r3, [r3, #4]
 800fe52:	085b      	lsrs	r3, r3, #1
 800fe54:	441a      	add	r2, r3
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe62:	2b0f      	cmp	r3, #15
 800fe64:	d909      	bls.n	800fe7a <UART_SetConfig+0xa8e>
 800fe66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fe6c:	d205      	bcs.n	800fe7a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fe6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe70:	b29a      	uxth	r2, r3
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	60da      	str	r2, [r3, #12]
 800fe78:	e002      	b.n	800fe80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	2201      	movs	r2, #1
 800fe84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	2200      	movs	r2, #0
 800fe94:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fe9c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800fea0:	4618      	mov	r0, r3
 800fea2:	3748      	adds	r7, #72	@ 0x48
 800fea4:	46bd      	mov	sp, r7
 800fea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800feaa:	bf00      	nop
 800feac:	58024400 	.word	0x58024400
 800feb0:	03d09000 	.word	0x03d09000
 800feb4:	003d0900 	.word	0x003d0900
 800feb8:	0802cd8c 	.word	0x0802cd8c

0800febc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800febc:	b480      	push	{r7}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fec8:	f003 0308 	and.w	r3, r3, #8
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d00a      	beq.n	800fee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	430a      	orrs	r2, r1
 800fee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800feea:	f003 0301 	and.w	r3, r3, #1
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d00a      	beq.n	800ff08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	430a      	orrs	r2, r1
 800ff06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff0c:	f003 0302 	and.w	r3, r3, #2
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d00a      	beq.n	800ff2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	430a      	orrs	r2, r1
 800ff28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff2e:	f003 0304 	and.w	r3, r3, #4
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00a      	beq.n	800ff4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	685b      	ldr	r3, [r3, #4]
 800ff3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	430a      	orrs	r2, r1
 800ff4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff50:	f003 0310 	and.w	r3, r3, #16
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d00a      	beq.n	800ff6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	689b      	ldr	r3, [r3, #8]
 800ff5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	430a      	orrs	r2, r1
 800ff6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff72:	f003 0320 	and.w	r3, r3, #32
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d00a      	beq.n	800ff90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	689b      	ldr	r3, [r3, #8]
 800ff80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	430a      	orrs	r2, r1
 800ff8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d01a      	beq.n	800ffd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	430a      	orrs	r2, r1
 800ffb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ffb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ffba:	d10a      	bne.n	800ffd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	430a      	orrs	r2, r1
 800ffd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d00a      	beq.n	800fff4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	430a      	orrs	r2, r1
 800fff2:	605a      	str	r2, [r3, #4]
  }
}
 800fff4:	bf00      	nop
 800fff6:	370c      	adds	r7, #12
 800fff8:	46bd      	mov	sp, r7
 800fffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffe:	4770      	bx	lr

08010000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b098      	sub	sp, #96	@ 0x60
 8010004:	af02      	add	r7, sp, #8
 8010006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2200      	movs	r2, #0
 801000c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010010:	f7f6 fcaa 	bl	8006968 <HAL_GetTick>
 8010014:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	f003 0308 	and.w	r3, r3, #8
 8010020:	2b08      	cmp	r3, #8
 8010022:	d12f      	bne.n	8010084 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010024:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010028:	9300      	str	r3, [sp, #0]
 801002a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801002c:	2200      	movs	r2, #0
 801002e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f000 f88e 	bl	8010154 <UART_WaitOnFlagUntilTimeout>
 8010038:	4603      	mov	r3, r0
 801003a:	2b00      	cmp	r3, #0
 801003c:	d022      	beq.n	8010084 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010046:	e853 3f00 	ldrex	r3, [r3]
 801004a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801004c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801004e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010052:	653b      	str	r3, [r7, #80]	@ 0x50
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	461a      	mov	r2, r3
 801005a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801005c:	647b      	str	r3, [r7, #68]	@ 0x44
 801005e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010060:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010062:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010064:	e841 2300 	strex	r3, r2, [r1]
 8010068:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801006a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801006c:	2b00      	cmp	r3, #0
 801006e:	d1e6      	bne.n	801003e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2220      	movs	r2, #32
 8010074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2200      	movs	r2, #0
 801007c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010080:	2303      	movs	r3, #3
 8010082:	e063      	b.n	801014c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	f003 0304 	and.w	r3, r3, #4
 801008e:	2b04      	cmp	r3, #4
 8010090:	d149      	bne.n	8010126 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010092:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010096:	9300      	str	r3, [sp, #0]
 8010098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801009a:	2200      	movs	r2, #0
 801009c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80100a0:	6878      	ldr	r0, [r7, #4]
 80100a2:	f000 f857 	bl	8010154 <UART_WaitOnFlagUntilTimeout>
 80100a6:	4603      	mov	r3, r0
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d03c      	beq.n	8010126 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b4:	e853 3f00 	ldrex	r3, [r3]
 80100b8:	623b      	str	r3, [r7, #32]
   return(result);
 80100ba:	6a3b      	ldr	r3, [r7, #32]
 80100bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80100c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	461a      	mov	r2, r3
 80100c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80100ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80100cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80100d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100d2:	e841 2300 	strex	r3, r2, [r1]
 80100d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80100d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d1e6      	bne.n	80100ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	3308      	adds	r3, #8
 80100e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	e853 3f00 	ldrex	r3, [r3]
 80100ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	f023 0301 	bic.w	r3, r3, #1
 80100f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	3308      	adds	r3, #8
 80100fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80100fe:	61fa      	str	r2, [r7, #28]
 8010100:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010102:	69b9      	ldr	r1, [r7, #24]
 8010104:	69fa      	ldr	r2, [r7, #28]
 8010106:	e841 2300 	strex	r3, r2, [r1]
 801010a:	617b      	str	r3, [r7, #20]
   return(result);
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d1e5      	bne.n	80100de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2220      	movs	r2, #32
 8010116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2200      	movs	r2, #0
 801011e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010122:	2303      	movs	r3, #3
 8010124:	e012      	b.n	801014c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	2220      	movs	r2, #32
 801012a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2220      	movs	r2, #32
 8010132:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2200      	movs	r2, #0
 801013a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2200      	movs	r2, #0
 8010140:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	2200      	movs	r2, #0
 8010146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801014a:	2300      	movs	r3, #0
}
 801014c:	4618      	mov	r0, r3
 801014e:	3758      	adds	r7, #88	@ 0x58
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b084      	sub	sp, #16
 8010158:	af00      	add	r7, sp, #0
 801015a:	60f8      	str	r0, [r7, #12]
 801015c:	60b9      	str	r1, [r7, #8]
 801015e:	603b      	str	r3, [r7, #0]
 8010160:	4613      	mov	r3, r2
 8010162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010164:	e04f      	b.n	8010206 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010166:	69bb      	ldr	r3, [r7, #24]
 8010168:	f1b3 3fff 	cmp.w	r3, #4294967295
 801016c:	d04b      	beq.n	8010206 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801016e:	f7f6 fbfb 	bl	8006968 <HAL_GetTick>
 8010172:	4602      	mov	r2, r0
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	1ad3      	subs	r3, r2, r3
 8010178:	69ba      	ldr	r2, [r7, #24]
 801017a:	429a      	cmp	r2, r3
 801017c:	d302      	bcc.n	8010184 <UART_WaitOnFlagUntilTimeout+0x30>
 801017e:	69bb      	ldr	r3, [r7, #24]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d101      	bne.n	8010188 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010184:	2303      	movs	r3, #3
 8010186:	e04e      	b.n	8010226 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f003 0304 	and.w	r3, r3, #4
 8010192:	2b00      	cmp	r3, #0
 8010194:	d037      	beq.n	8010206 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	2b80      	cmp	r3, #128	@ 0x80
 801019a:	d034      	beq.n	8010206 <UART_WaitOnFlagUntilTimeout+0xb2>
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	2b40      	cmp	r3, #64	@ 0x40
 80101a0:	d031      	beq.n	8010206 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	69db      	ldr	r3, [r3, #28]
 80101a8:	f003 0308 	and.w	r3, r3, #8
 80101ac:	2b08      	cmp	r3, #8
 80101ae:	d110      	bne.n	80101d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	2208      	movs	r2, #8
 80101b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80101b8:	68f8      	ldr	r0, [r7, #12]
 80101ba:	f000 fa43 	bl	8010644 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	2208      	movs	r2, #8
 80101c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	2200      	movs	r2, #0
 80101ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80101ce:	2301      	movs	r3, #1
 80101d0:	e029      	b.n	8010226 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	69db      	ldr	r3, [r3, #28]
 80101d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80101dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80101e0:	d111      	bne.n	8010206 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80101ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80101ec:	68f8      	ldr	r0, [r7, #12]
 80101ee:	f000 fa29 	bl	8010644 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	2220      	movs	r2, #32
 80101f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	2200      	movs	r2, #0
 80101fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010202:	2303      	movs	r3, #3
 8010204:	e00f      	b.n	8010226 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	69da      	ldr	r2, [r3, #28]
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	4013      	ands	r3, r2
 8010210:	68ba      	ldr	r2, [r7, #8]
 8010212:	429a      	cmp	r2, r3
 8010214:	bf0c      	ite	eq
 8010216:	2301      	moveq	r3, #1
 8010218:	2300      	movne	r3, #0
 801021a:	b2db      	uxtb	r3, r3
 801021c:	461a      	mov	r2, r3
 801021e:	79fb      	ldrb	r3, [r7, #7]
 8010220:	429a      	cmp	r2, r3
 8010222:	d0a0      	beq.n	8010166 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010224:	2300      	movs	r3, #0
}
 8010226:	4618      	mov	r0, r3
 8010228:	3710      	adds	r7, #16
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
	...

08010230 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010230:	b480      	push	{r7}
 8010232:	b0a3      	sub	sp, #140	@ 0x8c
 8010234:	af00      	add	r7, sp, #0
 8010236:	60f8      	str	r0, [r7, #12]
 8010238:	60b9      	str	r1, [r7, #8]
 801023a:	4613      	mov	r3, r2
 801023c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	68ba      	ldr	r2, [r7, #8]
 8010242:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	88fa      	ldrh	r2, [r7, #6]
 8010248:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	88fa      	ldrh	r2, [r7, #6]
 8010250:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2200      	movs	r2, #0
 8010258:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	689b      	ldr	r3, [r3, #8]
 801025e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010262:	d10e      	bne.n	8010282 <UART_Start_Receive_IT+0x52>
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	691b      	ldr	r3, [r3, #16]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d105      	bne.n	8010278 <UART_Start_Receive_IT+0x48>
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8010272:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010276:	e02d      	b.n	80102d4 <UART_Start_Receive_IT+0xa4>
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	22ff      	movs	r2, #255	@ 0xff
 801027c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010280:	e028      	b.n	80102d4 <UART_Start_Receive_IT+0xa4>
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	689b      	ldr	r3, [r3, #8]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d10d      	bne.n	80102a6 <UART_Start_Receive_IT+0x76>
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	691b      	ldr	r3, [r3, #16]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d104      	bne.n	801029c <UART_Start_Receive_IT+0x6c>
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	22ff      	movs	r2, #255	@ 0xff
 8010296:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801029a:	e01b      	b.n	80102d4 <UART_Start_Receive_IT+0xa4>
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	227f      	movs	r2, #127	@ 0x7f
 80102a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80102a4:	e016      	b.n	80102d4 <UART_Start_Receive_IT+0xa4>
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	689b      	ldr	r3, [r3, #8]
 80102aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80102ae:	d10d      	bne.n	80102cc <UART_Start_Receive_IT+0x9c>
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	691b      	ldr	r3, [r3, #16]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d104      	bne.n	80102c2 <UART_Start_Receive_IT+0x92>
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	227f      	movs	r2, #127	@ 0x7f
 80102bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80102c0:	e008      	b.n	80102d4 <UART_Start_Receive_IT+0xa4>
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	223f      	movs	r2, #63	@ 0x3f
 80102c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80102ca:	e003      	b.n	80102d4 <UART_Start_Receive_IT+0xa4>
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	2200      	movs	r2, #0
 80102d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	2200      	movs	r2, #0
 80102d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	2222      	movs	r2, #34	@ 0x22
 80102e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	3308      	adds	r3, #8
 80102ea:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80102ee:	e853 3f00 	ldrex	r3, [r3]
 80102f2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80102f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80102f6:	f043 0301 	orr.w	r3, r3, #1
 80102fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	3308      	adds	r3, #8
 8010304:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010308:	673a      	str	r2, [r7, #112]	@ 0x70
 801030a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801030c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801030e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010310:	e841 2300 	strex	r3, r2, [r1]
 8010314:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8010316:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010318:	2b00      	cmp	r3, #0
 801031a:	d1e3      	bne.n	80102e4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010324:	d14f      	bne.n	80103c6 <UART_Start_Receive_IT+0x196>
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801032c:	88fa      	ldrh	r2, [r7, #6]
 801032e:	429a      	cmp	r2, r3
 8010330:	d349      	bcc.n	80103c6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	689b      	ldr	r3, [r3, #8]
 8010336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801033a:	d107      	bne.n	801034c <UART_Start_Receive_IT+0x11c>
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	691b      	ldr	r3, [r3, #16]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d103      	bne.n	801034c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	4a47      	ldr	r2, [pc, #284]	@ (8010464 <UART_Start_Receive_IT+0x234>)
 8010348:	675a      	str	r2, [r3, #116]	@ 0x74
 801034a:	e002      	b.n	8010352 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	4a46      	ldr	r2, [pc, #280]	@ (8010468 <UART_Start_Receive_IT+0x238>)
 8010350:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	691b      	ldr	r3, [r3, #16]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d01a      	beq.n	8010390 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010362:	e853 3f00 	ldrex	r3, [r3]
 8010366:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801036a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801036e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	461a      	mov	r2, r3
 8010378:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801037c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801037e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010380:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010382:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010384:	e841 2300 	strex	r3, r2, [r1]
 8010388:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801038a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801038c:	2b00      	cmp	r3, #0
 801038e:	d1e4      	bne.n	801035a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	3308      	adds	r3, #8
 8010396:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801039a:	e853 3f00 	ldrex	r3, [r3]
 801039e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80103a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80103a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	3308      	adds	r3, #8
 80103ae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80103b0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80103b2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80103b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80103b8:	e841 2300 	strex	r3, r2, [r1]
 80103bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80103be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d1e5      	bne.n	8010390 <UART_Start_Receive_IT+0x160>
 80103c4:	e046      	b.n	8010454 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	689b      	ldr	r3, [r3, #8]
 80103ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80103ce:	d107      	bne.n	80103e0 <UART_Start_Receive_IT+0x1b0>
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	691b      	ldr	r3, [r3, #16]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d103      	bne.n	80103e0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	4a24      	ldr	r2, [pc, #144]	@ (801046c <UART_Start_Receive_IT+0x23c>)
 80103dc:	675a      	str	r2, [r3, #116]	@ 0x74
 80103de:	e002      	b.n	80103e6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	4a23      	ldr	r2, [pc, #140]	@ (8010470 <UART_Start_Receive_IT+0x240>)
 80103e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	691b      	ldr	r3, [r3, #16]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d019      	beq.n	8010422 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103f6:	e853 3f00 	ldrex	r3, [r3]
 80103fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80103fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103fe:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8010402:	677b      	str	r3, [r7, #116]	@ 0x74
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	461a      	mov	r2, r3
 801040a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801040c:	637b      	str	r3, [r7, #52]	@ 0x34
 801040e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010410:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010412:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010414:	e841 2300 	strex	r3, r2, [r1]
 8010418:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801041a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801041c:	2b00      	cmp	r3, #0
 801041e:	d1e6      	bne.n	80103ee <UART_Start_Receive_IT+0x1be>
 8010420:	e018      	b.n	8010454 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	e853 3f00 	ldrex	r3, [r3]
 801042e:	613b      	str	r3, [r7, #16]
   return(result);
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	f043 0320 	orr.w	r3, r3, #32
 8010436:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	461a      	mov	r2, r3
 801043e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010440:	623b      	str	r3, [r7, #32]
 8010442:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010444:	69f9      	ldr	r1, [r7, #28]
 8010446:	6a3a      	ldr	r2, [r7, #32]
 8010448:	e841 2300 	strex	r3, r2, [r1]
 801044c:	61bb      	str	r3, [r7, #24]
   return(result);
 801044e:	69bb      	ldr	r3, [r7, #24]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d1e6      	bne.n	8010422 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8010454:	2300      	movs	r3, #0
}
 8010456:	4618      	mov	r0, r3
 8010458:	378c      	adds	r7, #140	@ 0x8c
 801045a:	46bd      	mov	sp, r7
 801045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010460:	4770      	bx	lr
 8010462:	bf00      	nop
 8010464:	08011049 	.word	0x08011049
 8010468:	08010ce9 	.word	0x08010ce9
 801046c:	08010b31 	.word	0x08010b31
 8010470:	08010979 	.word	0x08010979

08010474 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b096      	sub	sp, #88	@ 0x58
 8010478:	af00      	add	r7, sp, #0
 801047a:	60f8      	str	r0, [r7, #12]
 801047c:	60b9      	str	r1, [r7, #8]
 801047e:	4613      	mov	r3, r2
 8010480:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	68ba      	ldr	r2, [r7, #8]
 8010486:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	88fa      	ldrh	r2, [r7, #6]
 801048c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2200      	movs	r2, #0
 8010494:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	2222      	movs	r2, #34	@ 0x22
 801049c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d02d      	beq.n	8010506 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104b0:	4a40      	ldr	r2, [pc, #256]	@ (80105b4 <UART_Start_Receive_DMA+0x140>)
 80104b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104ba:	4a3f      	ldr	r2, [pc, #252]	@ (80105b8 <UART_Start_Receive_DMA+0x144>)
 80104bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104c4:	4a3d      	ldr	r2, [pc, #244]	@ (80105bc <UART_Start_Receive_DMA+0x148>)
 80104c6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104ce:	2200      	movs	r2, #0
 80104d0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	3324      	adds	r3, #36	@ 0x24
 80104de:	4619      	mov	r1, r3
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80104e4:	461a      	mov	r2, r3
 80104e6:	88fb      	ldrh	r3, [r7, #6]
 80104e8:	f7f6 ff42 	bl	8007370 <HAL_DMA_Start_IT>
 80104ec:	4603      	mov	r3, r0
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d009      	beq.n	8010506 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	2210      	movs	r2, #16
 80104f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	2220      	movs	r2, #32
 80104fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8010502:	2301      	movs	r3, #1
 8010504:	e051      	b.n	80105aa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	691b      	ldr	r3, [r3, #16]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d018      	beq.n	8010540 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010516:	e853 3f00 	ldrex	r3, [r3]
 801051a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801051c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801051e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010522:	657b      	str	r3, [r7, #84]	@ 0x54
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	461a      	mov	r2, r3
 801052a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801052c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801052e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010530:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010532:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010534:	e841 2300 	strex	r3, r2, [r1]
 8010538:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801053a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801053c:	2b00      	cmp	r3, #0
 801053e:	d1e6      	bne.n	801050e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	3308      	adds	r3, #8
 8010546:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801054a:	e853 3f00 	ldrex	r3, [r3]
 801054e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010552:	f043 0301 	orr.w	r3, r3, #1
 8010556:	653b      	str	r3, [r7, #80]	@ 0x50
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	3308      	adds	r3, #8
 801055e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010560:	637a      	str	r2, [r7, #52]	@ 0x34
 8010562:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010564:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010566:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010568:	e841 2300 	strex	r3, r2, [r1]
 801056c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801056e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010570:	2b00      	cmp	r3, #0
 8010572:	d1e5      	bne.n	8010540 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	3308      	adds	r3, #8
 801057a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	e853 3f00 	ldrex	r3, [r3]
 8010582:	613b      	str	r3, [r7, #16]
   return(result);
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801058a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	3308      	adds	r3, #8
 8010592:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010594:	623a      	str	r2, [r7, #32]
 8010596:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010598:	69f9      	ldr	r1, [r7, #28]
 801059a:	6a3a      	ldr	r2, [r7, #32]
 801059c:	e841 2300 	strex	r3, r2, [r1]
 80105a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80105a2:	69bb      	ldr	r3, [r7, #24]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d1e5      	bne.n	8010574 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80105a8:	2300      	movs	r3, #0
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	3758      	adds	r7, #88	@ 0x58
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}
 80105b2:	bf00      	nop
 80105b4:	08010711 	.word	0x08010711
 80105b8:	08010839 	.word	0x08010839
 80105bc:	08010877 	.word	0x08010877

080105c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80105c0:	b480      	push	{r7}
 80105c2:	b08f      	sub	sp, #60	@ 0x3c
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ce:	6a3b      	ldr	r3, [r7, #32]
 80105d0:	e853 3f00 	ldrex	r3, [r3]
 80105d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80105d6:	69fb      	ldr	r3, [r7, #28]
 80105d8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80105dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	461a      	mov	r2, r3
 80105e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80105e8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80105ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80105ee:	e841 2300 	strex	r3, r2, [r1]
 80105f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80105f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d1e6      	bne.n	80105c8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	3308      	adds	r3, #8
 8010600:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	e853 3f00 	ldrex	r3, [r3]
 8010608:	60bb      	str	r3, [r7, #8]
   return(result);
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010610:	633b      	str	r3, [r7, #48]	@ 0x30
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	3308      	adds	r3, #8
 8010618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801061a:	61ba      	str	r2, [r7, #24]
 801061c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061e:	6979      	ldr	r1, [r7, #20]
 8010620:	69ba      	ldr	r2, [r7, #24]
 8010622:	e841 2300 	strex	r3, r2, [r1]
 8010626:	613b      	str	r3, [r7, #16]
   return(result);
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d1e5      	bne.n	80105fa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2220      	movs	r2, #32
 8010632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010636:	bf00      	nop
 8010638:	373c      	adds	r7, #60	@ 0x3c
 801063a:	46bd      	mov	sp, r7
 801063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010640:	4770      	bx	lr
	...

08010644 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010644:	b480      	push	{r7}
 8010646:	b095      	sub	sp, #84	@ 0x54
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010654:	e853 3f00 	ldrex	r3, [r3]
 8010658:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801065a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801065c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	461a      	mov	r2, r3
 8010668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801066a:	643b      	str	r3, [r7, #64]	@ 0x40
 801066c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801066e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010670:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010672:	e841 2300 	strex	r3, r2, [r1]
 8010676:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801067a:	2b00      	cmp	r3, #0
 801067c:	d1e6      	bne.n	801064c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	3308      	adds	r3, #8
 8010684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010686:	6a3b      	ldr	r3, [r7, #32]
 8010688:	e853 3f00 	ldrex	r3, [r3]
 801068c:	61fb      	str	r3, [r7, #28]
   return(result);
 801068e:	69fa      	ldr	r2, [r7, #28]
 8010690:	4b1e      	ldr	r3, [pc, #120]	@ (801070c <UART_EndRxTransfer+0xc8>)
 8010692:	4013      	ands	r3, r2
 8010694:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	3308      	adds	r3, #8
 801069c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801069e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80106a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80106a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80106a6:	e841 2300 	strex	r3, r2, [r1]
 80106aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80106ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d1e5      	bne.n	801067e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106b6:	2b01      	cmp	r3, #1
 80106b8:	d118      	bne.n	80106ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	e853 3f00 	ldrex	r3, [r3]
 80106c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	f023 0310 	bic.w	r3, r3, #16
 80106ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	461a      	mov	r2, r3
 80106d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80106d8:	61bb      	str	r3, [r7, #24]
 80106da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106dc:	6979      	ldr	r1, [r7, #20]
 80106de:	69ba      	ldr	r2, [r7, #24]
 80106e0:	e841 2300 	strex	r3, r2, [r1]
 80106e4:	613b      	str	r3, [r7, #16]
   return(result);
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d1e6      	bne.n	80106ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2220      	movs	r2, #32
 80106f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2200      	movs	r2, #0
 80106f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2200      	movs	r2, #0
 80106fe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010700:	bf00      	nop
 8010702:	3754      	adds	r7, #84	@ 0x54
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr
 801070c:	effffffe 	.word	0xeffffffe

08010710 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b09c      	sub	sp, #112	@ 0x70
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801071c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	69db      	ldr	r3, [r3, #28]
 8010722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010726:	d071      	beq.n	801080c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801072a:	2200      	movs	r2, #0
 801072c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010738:	e853 3f00 	ldrex	r3, [r3]
 801073c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801073e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010740:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010744:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010746:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	461a      	mov	r2, r3
 801074c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801074e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010750:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010752:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010754:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010756:	e841 2300 	strex	r3, r2, [r1]
 801075a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801075c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801075e:	2b00      	cmp	r3, #0
 8010760:	d1e6      	bne.n	8010730 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010762:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	3308      	adds	r3, #8
 8010768:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801076a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801076c:	e853 3f00 	ldrex	r3, [r3]
 8010770:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010774:	f023 0301 	bic.w	r3, r3, #1
 8010778:	667b      	str	r3, [r7, #100]	@ 0x64
 801077a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	3308      	adds	r3, #8
 8010780:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010782:	647a      	str	r2, [r7, #68]	@ 0x44
 8010784:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010786:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010788:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801078a:	e841 2300 	strex	r3, r2, [r1]
 801078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010792:	2b00      	cmp	r3, #0
 8010794:	d1e5      	bne.n	8010762 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010796:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	3308      	adds	r3, #8
 801079c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801079e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a0:	e853 3f00 	ldrex	r3, [r3]
 80107a4:	623b      	str	r3, [r7, #32]
   return(result);
 80107a6:	6a3b      	ldr	r3, [r7, #32]
 80107a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80107ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80107ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	3308      	adds	r3, #8
 80107b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80107b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80107b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80107bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107be:	e841 2300 	strex	r3, r2, [r1]
 80107c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80107c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d1e5      	bne.n	8010796 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80107ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107cc:	2220      	movs	r2, #32
 80107ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107d6:	2b01      	cmp	r3, #1
 80107d8:	d118      	bne.n	801080c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107e0:	693b      	ldr	r3, [r7, #16]
 80107e2:	e853 3f00 	ldrex	r3, [r3]
 80107e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	f023 0310 	bic.w	r3, r3, #16
 80107ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80107f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	461a      	mov	r2, r3
 80107f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80107f8:	61fb      	str	r3, [r7, #28]
 80107fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107fc:	69b9      	ldr	r1, [r7, #24]
 80107fe:	69fa      	ldr	r2, [r7, #28]
 8010800:	e841 2300 	strex	r3, r2, [r1]
 8010804:	617b      	str	r3, [r7, #20]
   return(result);
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d1e6      	bne.n	80107da <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801080c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801080e:	2200      	movs	r2, #0
 8010810:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010816:	2b01      	cmp	r3, #1
 8010818:	d107      	bne.n	801082a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801081a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801081c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010820:	4619      	mov	r1, r3
 8010822:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010824:	f7f3 f88e 	bl	8003944 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010828:	e002      	b.n	8010830 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 801082a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801082c:	f7fe fdca 	bl	800f3c4 <HAL_UART_RxCpltCallback>
}
 8010830:	bf00      	nop
 8010832:	3770      	adds	r7, #112	@ 0x70
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b084      	sub	sp, #16
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010844:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	2201      	movs	r2, #1
 801084a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010850:	2b01      	cmp	r3, #1
 8010852:	d109      	bne.n	8010868 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801085a:	085b      	lsrs	r3, r3, #1
 801085c:	b29b      	uxth	r3, r3
 801085e:	4619      	mov	r1, r3
 8010860:	68f8      	ldr	r0, [r7, #12]
 8010862:	f7f3 f86f 	bl	8003944 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010866:	e002      	b.n	801086e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010868:	68f8      	ldr	r0, [r7, #12]
 801086a:	f7fe fdb5 	bl	800f3d8 <HAL_UART_RxHalfCpltCallback>
}
 801086e:	bf00      	nop
 8010870:	3710      	adds	r7, #16
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}

08010876 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010876:	b580      	push	{r7, lr}
 8010878:	b086      	sub	sp, #24
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010882:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801088a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010892:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	689b      	ldr	r3, [r3, #8]
 801089a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801089e:	2b80      	cmp	r3, #128	@ 0x80
 80108a0:	d109      	bne.n	80108b6 <UART_DMAError+0x40>
 80108a2:	693b      	ldr	r3, [r7, #16]
 80108a4:	2b21      	cmp	r3, #33	@ 0x21
 80108a6:	d106      	bne.n	80108b6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80108a8:	697b      	ldr	r3, [r7, #20]
 80108aa:	2200      	movs	r2, #0
 80108ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80108b0:	6978      	ldr	r0, [r7, #20]
 80108b2:	f7ff fe85 	bl	80105c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	689b      	ldr	r3, [r3, #8]
 80108bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108c0:	2b40      	cmp	r3, #64	@ 0x40
 80108c2:	d109      	bne.n	80108d8 <UART_DMAError+0x62>
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	2b22      	cmp	r3, #34	@ 0x22
 80108c8:	d106      	bne.n	80108d8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	2200      	movs	r2, #0
 80108ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80108d2:	6978      	ldr	r0, [r7, #20]
 80108d4:	f7ff feb6 	bl	8010644 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80108de:	f043 0210 	orr.w	r2, r3, #16
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80108e8:	6978      	ldr	r0, [r7, #20]
 80108ea:	f7f3 fdf1 	bl	80044d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80108ee:	bf00      	nop
 80108f0:	3718      	adds	r7, #24
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}

080108f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80108f6:	b580      	push	{r7, lr}
 80108f8:	b084      	sub	sp, #16
 80108fa:	af00      	add	r7, sp, #0
 80108fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010902:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	2200      	movs	r2, #0
 8010908:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	2200      	movs	r2, #0
 8010910:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010914:	68f8      	ldr	r0, [r7, #12]
 8010916:	f7f3 fddb 	bl	80044d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801091a:	bf00      	nop
 801091c:	3710      	adds	r7, #16
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}

08010922 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010922:	b580      	push	{r7, lr}
 8010924:	b088      	sub	sp, #32
 8010926:	af00      	add	r7, sp, #0
 8010928:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	e853 3f00 	ldrex	r3, [r3]
 8010936:	60bb      	str	r3, [r7, #8]
   return(result);
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801093e:	61fb      	str	r3, [r7, #28]
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	461a      	mov	r2, r3
 8010946:	69fb      	ldr	r3, [r7, #28]
 8010948:	61bb      	str	r3, [r7, #24]
 801094a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801094c:	6979      	ldr	r1, [r7, #20]
 801094e:	69ba      	ldr	r2, [r7, #24]
 8010950:	e841 2300 	strex	r3, r2, [r1]
 8010954:	613b      	str	r3, [r7, #16]
   return(result);
 8010956:	693b      	ldr	r3, [r7, #16]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d1e6      	bne.n	801092a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2220      	movs	r2, #32
 8010960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2200      	movs	r2, #0
 8010968:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f7fe fd20 	bl	800f3b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010970:	bf00      	nop
 8010972:	3720      	adds	r7, #32
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}

08010978 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b09c      	sub	sp, #112	@ 0x70
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010986:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010990:	2b22      	cmp	r3, #34	@ 0x22
 8010992:	f040 80be 	bne.w	8010b12 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801099c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80109a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80109a4:	b2d9      	uxtb	r1, r3
 80109a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80109aa:	b2da      	uxtb	r2, r3
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80109b0:	400a      	ands	r2, r1
 80109b2:	b2d2      	uxtb	r2, r2
 80109b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80109ba:	1c5a      	adds	r2, r3, #1
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80109c6:	b29b      	uxth	r3, r3
 80109c8:	3b01      	subs	r3, #1
 80109ca:	b29a      	uxth	r2, r3
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80109d8:	b29b      	uxth	r3, r3
 80109da:	2b00      	cmp	r3, #0
 80109dc:	f040 80a1 	bne.w	8010b22 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109e8:	e853 3f00 	ldrex	r3, [r3]
 80109ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80109ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80109f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	461a      	mov	r2, r3
 80109fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80109fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010a00:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010a04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010a06:	e841 2300 	strex	r3, r2, [r1]
 8010a0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010a0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d1e6      	bne.n	80109e0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	3308      	adds	r3, #8
 8010a18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a1c:	e853 3f00 	ldrex	r3, [r3]
 8010a20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a24:	f023 0301 	bic.w	r3, r3, #1
 8010a28:	667b      	str	r3, [r7, #100]	@ 0x64
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	3308      	adds	r3, #8
 8010a30:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010a32:	647a      	str	r2, [r7, #68]	@ 0x44
 8010a34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010a38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010a3a:	e841 2300 	strex	r3, r2, [r1]
 8010a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d1e5      	bne.n	8010a12 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2220      	movs	r2, #32
 8010a4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2200      	movs	r2, #0
 8010a52:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2200      	movs	r2, #0
 8010a58:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	4a33      	ldr	r2, [pc, #204]	@ (8010b2c <UART_RxISR_8BIT+0x1b4>)
 8010a60:	4293      	cmp	r3, r2
 8010a62:	d01f      	beq.n	8010aa4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	685b      	ldr	r3, [r3, #4]
 8010a6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d018      	beq.n	8010aa4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a7a:	e853 3f00 	ldrex	r3, [r3]
 8010a7e:	623b      	str	r3, [r7, #32]
   return(result);
 8010a80:	6a3b      	ldr	r3, [r7, #32]
 8010a82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010a86:	663b      	str	r3, [r7, #96]	@ 0x60
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	461a      	mov	r2, r3
 8010a8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010a90:	633b      	str	r3, [r7, #48]	@ 0x30
 8010a92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010a96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a98:	e841 2300 	strex	r3, r2, [r1]
 8010a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d1e6      	bne.n	8010a72 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010aa8:	2b01      	cmp	r3, #1
 8010aaa:	d12e      	bne.n	8010b0a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	e853 3f00 	ldrex	r3, [r3]
 8010abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	f023 0310 	bic.w	r3, r3, #16
 8010ac6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	461a      	mov	r2, r3
 8010ace:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010ad0:	61fb      	str	r3, [r7, #28]
 8010ad2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ad4:	69b9      	ldr	r1, [r7, #24]
 8010ad6:	69fa      	ldr	r2, [r7, #28]
 8010ad8:	e841 2300 	strex	r3, r2, [r1]
 8010adc:	617b      	str	r3, [r7, #20]
   return(result);
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d1e6      	bne.n	8010ab2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	69db      	ldr	r3, [r3, #28]
 8010aea:	f003 0310 	and.w	r3, r3, #16
 8010aee:	2b10      	cmp	r3, #16
 8010af0:	d103      	bne.n	8010afa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	2210      	movs	r2, #16
 8010af8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010b00:	4619      	mov	r1, r3
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	f7f2 ff1e 	bl	8003944 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010b08:	e00b      	b.n	8010b22 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f7fe fc5a 	bl	800f3c4 <HAL_UART_RxCpltCallback>
}
 8010b10:	e007      	b.n	8010b22 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	699a      	ldr	r2, [r3, #24]
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	f042 0208 	orr.w	r2, r2, #8
 8010b20:	619a      	str	r2, [r3, #24]
}
 8010b22:	bf00      	nop
 8010b24:	3770      	adds	r7, #112	@ 0x70
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	58000c00 	.word	0x58000c00

08010b30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b09c      	sub	sp, #112	@ 0x70
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010b3e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010b48:	2b22      	cmp	r3, #34	@ 0x22
 8010b4a:	f040 80be 	bne.w	8010cca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b54:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8010b5e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8010b62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010b66:	4013      	ands	r3, r2
 8010b68:	b29a      	uxth	r2, r3
 8010b6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010b6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010b72:	1c9a      	adds	r2, r3, #2
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010b7e:	b29b      	uxth	r3, r3
 8010b80:	3b01      	subs	r3, #1
 8010b82:	b29a      	uxth	r2, r3
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010b90:	b29b      	uxth	r3, r3
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f040 80a1 	bne.w	8010cda <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010ba0:	e853 3f00 	ldrex	r3, [r3]
 8010ba4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010ba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ba8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010bac:	667b      	str	r3, [r7, #100]	@ 0x64
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	461a      	mov	r2, r3
 8010bb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010bb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8010bb8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010bbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010bbe:	e841 2300 	strex	r3, r2, [r1]
 8010bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d1e6      	bne.n	8010b98 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	3308      	adds	r3, #8
 8010bd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bd4:	e853 3f00 	ldrex	r3, [r3]
 8010bd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bdc:	f023 0301 	bic.w	r3, r3, #1
 8010be0:	663b      	str	r3, [r7, #96]	@ 0x60
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	3308      	adds	r3, #8
 8010be8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010bea:	643a      	str	r2, [r7, #64]	@ 0x40
 8010bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010bf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010bf2:	e841 2300 	strex	r3, r2, [r1]
 8010bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d1e5      	bne.n	8010bca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2220      	movs	r2, #32
 8010c02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2200      	movs	r2, #0
 8010c0a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	4a33      	ldr	r2, [pc, #204]	@ (8010ce4 <UART_RxISR_16BIT+0x1b4>)
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d01f      	beq.n	8010c5c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	685b      	ldr	r3, [r3, #4]
 8010c22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d018      	beq.n	8010c5c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c30:	6a3b      	ldr	r3, [r7, #32]
 8010c32:	e853 3f00 	ldrex	r3, [r3]
 8010c36:	61fb      	str	r3, [r7, #28]
   return(result);
 8010c38:	69fb      	ldr	r3, [r7, #28]
 8010c3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010c3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	461a      	mov	r2, r3
 8010c46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010c4a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010c50:	e841 2300 	strex	r3, r2, [r1]
 8010c54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d1e6      	bne.n	8010c2a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c60:	2b01      	cmp	r3, #1
 8010c62:	d12e      	bne.n	8010cc2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2200      	movs	r2, #0
 8010c68:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	e853 3f00 	ldrex	r3, [r3]
 8010c76:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	f023 0310 	bic.w	r3, r3, #16
 8010c7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	461a      	mov	r2, r3
 8010c86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010c88:	61bb      	str	r3, [r7, #24]
 8010c8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c8c:	6979      	ldr	r1, [r7, #20]
 8010c8e:	69ba      	ldr	r2, [r7, #24]
 8010c90:	e841 2300 	strex	r3, r2, [r1]
 8010c94:	613b      	str	r3, [r7, #16]
   return(result);
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d1e6      	bne.n	8010c6a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	69db      	ldr	r3, [r3, #28]
 8010ca2:	f003 0310 	and.w	r3, r3, #16
 8010ca6:	2b10      	cmp	r3, #16
 8010ca8:	d103      	bne.n	8010cb2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	2210      	movs	r2, #16
 8010cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010cb8:	4619      	mov	r1, r3
 8010cba:	6878      	ldr	r0, [r7, #4]
 8010cbc:	f7f2 fe42 	bl	8003944 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010cc0:	e00b      	b.n	8010cda <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f7fe fb7e 	bl	800f3c4 <HAL_UART_RxCpltCallback>
}
 8010cc8:	e007      	b.n	8010cda <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	699a      	ldr	r2, [r3, #24]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	f042 0208 	orr.w	r2, r2, #8
 8010cd8:	619a      	str	r2, [r3, #24]
}
 8010cda:	bf00      	nop
 8010cdc:	3770      	adds	r7, #112	@ 0x70
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	58000c00 	.word	0x58000c00

08010ce8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b0ac      	sub	sp, #176	@ 0xb0
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010cf6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	69db      	ldr	r3, [r3, #28]
 8010d00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	689b      	ldr	r3, [r3, #8]
 8010d14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010d1e:	2b22      	cmp	r3, #34	@ 0x22
 8010d20:	f040 8180 	bne.w	8011024 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010d2a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010d2e:	e123      	b.n	8010f78 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d36:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010d3a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8010d3e:	b2d9      	uxtb	r1, r3
 8010d40:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8010d44:	b2da      	uxtb	r2, r3
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010d4a:	400a      	ands	r2, r1
 8010d4c:	b2d2      	uxtb	r2, r2
 8010d4e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010d54:	1c5a      	adds	r2, r3, #1
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010d60:	b29b      	uxth	r3, r3
 8010d62:	3b01      	subs	r3, #1
 8010d64:	b29a      	uxth	r2, r3
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	69db      	ldr	r3, [r3, #28]
 8010d72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d7a:	f003 0307 	and.w	r3, r3, #7
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d053      	beq.n	8010e2a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d86:	f003 0301 	and.w	r3, r3, #1
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d011      	beq.n	8010db2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8010d8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d00b      	beq.n	8010db2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	2201      	movs	r2, #1
 8010da0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010da8:	f043 0201 	orr.w	r2, r3, #1
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010db6:	f003 0302 	and.w	r3, r3, #2
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d011      	beq.n	8010de2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010dbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010dc2:	f003 0301 	and.w	r3, r3, #1
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d00b      	beq.n	8010de2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	2202      	movs	r2, #2
 8010dd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010dd8:	f043 0204 	orr.w	r2, r3, #4
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010de6:	f003 0304 	and.w	r3, r3, #4
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d011      	beq.n	8010e12 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010df2:	f003 0301 	and.w	r3, r3, #1
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d00b      	beq.n	8010e12 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	2204      	movs	r2, #4
 8010e00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e08:	f043 0202 	orr.w	r2, r3, #2
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d006      	beq.n	8010e2a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f7f3 fb57 	bl	80044d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2200      	movs	r2, #0
 8010e26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010e30:	b29b      	uxth	r3, r3
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	f040 80a0 	bne.w	8010f78 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010e40:	e853 3f00 	ldrex	r3, [r3]
 8010e44:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8010e46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010e4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	461a      	mov	r2, r3
 8010e56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010e5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010e5c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e5e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8010e60:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010e62:	e841 2300 	strex	r3, r2, [r1]
 8010e66:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8010e68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d1e4      	bne.n	8010e38 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	3308      	adds	r3, #8
 8010e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010e78:	e853 3f00 	ldrex	r3, [r3]
 8010e7c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8010e7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010e80:	4b6e      	ldr	r3, [pc, #440]	@ (801103c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8010e82:	4013      	ands	r3, r2
 8010e84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	3308      	adds	r3, #8
 8010e8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010e92:	66ba      	str	r2, [r7, #104]	@ 0x68
 8010e94:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e96:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8010e98:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010e9a:	e841 2300 	strex	r3, r2, [r1]
 8010e9e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8010ea0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d1e3      	bne.n	8010e6e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2220      	movs	r2, #32
 8010eaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	4a60      	ldr	r2, [pc, #384]	@ (8011040 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	d021      	beq.n	8010f08 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d01a      	beq.n	8010f08 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ed8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010eda:	e853 3f00 	ldrex	r3, [r3]
 8010ede:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ee2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010ee6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	461a      	mov	r2, r3
 8010ef0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010ef4:	657b      	str	r3, [r7, #84]	@ 0x54
 8010ef6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ef8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010efa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010efc:	e841 2300 	strex	r3, r2, [r1]
 8010f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d1e4      	bne.n	8010ed2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f0c:	2b01      	cmp	r3, #1
 8010f0e:	d130      	bne.n	8010f72 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2200      	movs	r2, #0
 8010f14:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f1e:	e853 3f00 	ldrex	r3, [r3]
 8010f22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f26:	f023 0310 	bic.w	r3, r3, #16
 8010f2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	461a      	mov	r2, r3
 8010f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010f38:	643b      	str	r3, [r7, #64]	@ 0x40
 8010f3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010f3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010f40:	e841 2300 	strex	r3, r2, [r1]
 8010f44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d1e4      	bne.n	8010f16 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	69db      	ldr	r3, [r3, #28]
 8010f52:	f003 0310 	and.w	r3, r3, #16
 8010f56:	2b10      	cmp	r3, #16
 8010f58:	d103      	bne.n	8010f62 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	2210      	movs	r2, #16
 8010f60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010f68:	4619      	mov	r1, r3
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f7f2 fcea 	bl	8003944 <HAL_UARTEx_RxEventCallback>
 8010f70:	e002      	b.n	8010f78 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f7fe fa26 	bl	800f3c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010f78:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d006      	beq.n	8010f8e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8010f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f84:	f003 0320 	and.w	r3, r3, #32
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	f47f aed1 	bne.w	8010d30 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010f94:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010f98:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d049      	beq.n	8011034 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010fa6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8010faa:	429a      	cmp	r2, r3
 8010fac:	d242      	bcs.n	8011034 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	3308      	adds	r3, #8
 8010fb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fb6:	6a3b      	ldr	r3, [r7, #32]
 8010fb8:	e853 3f00 	ldrex	r3, [r3]
 8010fbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010fc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	3308      	adds	r3, #8
 8010fce:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010fd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010fd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010fda:	e841 2300 	strex	r3, r2, [r1]
 8010fde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d1e3      	bne.n	8010fae <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	4a16      	ldr	r2, [pc, #88]	@ (8011044 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010fea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	e853 3f00 	ldrex	r3, [r3]
 8010ff8:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	f043 0320 	orr.w	r3, r3, #32
 8011000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	461a      	mov	r2, r3
 801100a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801100e:	61bb      	str	r3, [r7, #24]
 8011010:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011012:	6979      	ldr	r1, [r7, #20]
 8011014:	69ba      	ldr	r2, [r7, #24]
 8011016:	e841 2300 	strex	r3, r2, [r1]
 801101a:	613b      	str	r3, [r7, #16]
   return(result);
 801101c:	693b      	ldr	r3, [r7, #16]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d1e4      	bne.n	8010fec <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011022:	e007      	b.n	8011034 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	699a      	ldr	r2, [r3, #24]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	f042 0208 	orr.w	r2, r2, #8
 8011032:	619a      	str	r2, [r3, #24]
}
 8011034:	bf00      	nop
 8011036:	37b0      	adds	r7, #176	@ 0xb0
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	effffffe 	.word	0xeffffffe
 8011040:	58000c00 	.word	0x58000c00
 8011044:	08010979 	.word	0x08010979

08011048 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b0ae      	sub	sp, #184	@ 0xb8
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011056:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	69db      	ldr	r3, [r3, #28]
 8011060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	689b      	ldr	r3, [r3, #8]
 8011074:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801107e:	2b22      	cmp	r3, #34	@ 0x22
 8011080:	f040 8184 	bne.w	801138c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801108a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801108e:	e127      	b.n	80112e0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011096:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801109e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80110a2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80110a6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80110aa:	4013      	ands	r3, r2
 80110ac:	b29a      	uxth	r2, r3
 80110ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80110b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80110b8:	1c9a      	adds	r2, r3, #2
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	3b01      	subs	r3, #1
 80110c8:	b29a      	uxth	r2, r3
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	69db      	ldr	r3, [r3, #28]
 80110d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80110da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80110de:	f003 0307 	and.w	r3, r3, #7
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d053      	beq.n	801118e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80110e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80110ea:	f003 0301 	and.w	r3, r3, #1
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d011      	beq.n	8011116 <UART_RxISR_16BIT_FIFOEN+0xce>
 80110f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80110f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d00b      	beq.n	8011116 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	2201      	movs	r2, #1
 8011104:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801110c:	f043 0201 	orr.w	r2, r3, #1
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011116:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801111a:	f003 0302 	and.w	r3, r3, #2
 801111e:	2b00      	cmp	r3, #0
 8011120:	d011      	beq.n	8011146 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8011122:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011126:	f003 0301 	and.w	r3, r3, #1
 801112a:	2b00      	cmp	r3, #0
 801112c:	d00b      	beq.n	8011146 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	2202      	movs	r2, #2
 8011134:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801113c:	f043 0204 	orr.w	r2, r3, #4
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011146:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801114a:	f003 0304 	and.w	r3, r3, #4
 801114e:	2b00      	cmp	r3, #0
 8011150:	d011      	beq.n	8011176 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011152:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011156:	f003 0301 	and.w	r3, r3, #1
 801115a:	2b00      	cmp	r3, #0
 801115c:	d00b      	beq.n	8011176 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	2204      	movs	r2, #4
 8011164:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801116c:	f043 0202 	orr.w	r2, r3, #2
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801117c:	2b00      	cmp	r3, #0
 801117e:	d006      	beq.n	801118e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f7f3 f9a5 	bl	80044d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2200      	movs	r2, #0
 801118a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011194:	b29b      	uxth	r3, r3
 8011196:	2b00      	cmp	r3, #0
 8011198:	f040 80a2 	bne.w	80112e0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80111a4:	e853 3f00 	ldrex	r3, [r3]
 80111a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80111aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80111ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80111b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	461a      	mov	r2, r3
 80111ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80111be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80111c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80111c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80111ca:	e841 2300 	strex	r3, r2, [r1]
 80111ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80111d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d1e2      	bne.n	801119c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	3308      	adds	r3, #8
 80111dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80111e0:	e853 3f00 	ldrex	r3, [r3]
 80111e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80111e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80111e8:	4b6e      	ldr	r3, [pc, #440]	@ (80113a4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80111ea:	4013      	ands	r3, r2
 80111ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	3308      	adds	r3, #8
 80111f6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80111fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80111fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011200:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011202:	e841 2300 	strex	r3, r2, [r1]
 8011206:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011208:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801120a:	2b00      	cmp	r3, #0
 801120c:	d1e3      	bne.n	80111d6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2220      	movs	r2, #32
 8011212:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2200      	movs	r2, #0
 801121a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2200      	movs	r2, #0
 8011220:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	4a60      	ldr	r2, [pc, #384]	@ (80113a8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011228:	4293      	cmp	r3, r2
 801122a:	d021      	beq.n	8011270 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	685b      	ldr	r3, [r3, #4]
 8011232:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011236:	2b00      	cmp	r3, #0
 8011238:	d01a      	beq.n	8011270 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011240:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011242:	e853 3f00 	ldrex	r3, [r3]
 8011246:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011248:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801124a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801124e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	461a      	mov	r2, r3
 8011258:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801125c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801125e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011260:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011262:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011264:	e841 2300 	strex	r3, r2, [r1]
 8011268:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801126a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801126c:	2b00      	cmp	r3, #0
 801126e:	d1e4      	bne.n	801123a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011274:	2b01      	cmp	r3, #1
 8011276:	d130      	bne.n	80112da <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2200      	movs	r2, #0
 801127c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011286:	e853 3f00 	ldrex	r3, [r3]
 801128a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801128c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801128e:	f023 0310 	bic.w	r3, r3, #16
 8011292:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	461a      	mov	r2, r3
 801129c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80112a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80112a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80112a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80112a8:	e841 2300 	strex	r3, r2, [r1]
 80112ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80112ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d1e4      	bne.n	801127e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	69db      	ldr	r3, [r3, #28]
 80112ba:	f003 0310 	and.w	r3, r3, #16
 80112be:	2b10      	cmp	r3, #16
 80112c0:	d103      	bne.n	80112ca <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	2210      	movs	r2, #16
 80112c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80112d0:	4619      	mov	r1, r3
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f7f2 fb36 	bl	8003944 <HAL_UARTEx_RxEventCallback>
 80112d8:	e002      	b.n	80112e0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80112da:	6878      	ldr	r0, [r7, #4]
 80112dc:	f7fe f872 	bl	800f3c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80112e0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d006      	beq.n	80112f6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80112e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80112ec:	f003 0320 	and.w	r3, r3, #32
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	f47f aecd 	bne.w	8011090 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80112fc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011300:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8011304:	2b00      	cmp	r3, #0
 8011306:	d049      	beq.n	801139c <UART_RxISR_16BIT_FIFOEN+0x354>
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801130e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8011312:	429a      	cmp	r2, r3
 8011314:	d242      	bcs.n	801139c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	3308      	adds	r3, #8
 801131c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801131e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011320:	e853 3f00 	ldrex	r3, [r3]
 8011324:	623b      	str	r3, [r7, #32]
   return(result);
 8011326:	6a3b      	ldr	r3, [r7, #32]
 8011328:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801132c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	3308      	adds	r3, #8
 8011336:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801133a:	633a      	str	r2, [r7, #48]	@ 0x30
 801133c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801133e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011342:	e841 2300 	strex	r3, r2, [r1]
 8011346:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801134a:	2b00      	cmp	r3, #0
 801134c:	d1e3      	bne.n	8011316 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	4a16      	ldr	r2, [pc, #88]	@ (80113ac <UART_RxISR_16BIT_FIFOEN+0x364>)
 8011352:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801135a:	693b      	ldr	r3, [r7, #16]
 801135c:	e853 3f00 	ldrex	r3, [r3]
 8011360:	60fb      	str	r3, [r7, #12]
   return(result);
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	f043 0320 	orr.w	r3, r3, #32
 8011368:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	461a      	mov	r2, r3
 8011372:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011376:	61fb      	str	r3, [r7, #28]
 8011378:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801137a:	69b9      	ldr	r1, [r7, #24]
 801137c:	69fa      	ldr	r2, [r7, #28]
 801137e:	e841 2300 	strex	r3, r2, [r1]
 8011382:	617b      	str	r3, [r7, #20]
   return(result);
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d1e4      	bne.n	8011354 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801138a:	e007      	b.n	801139c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	699a      	ldr	r2, [r3, #24]
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	f042 0208 	orr.w	r2, r2, #8
 801139a:	619a      	str	r2, [r3, #24]
}
 801139c:	bf00      	nop
 801139e:	37b8      	adds	r7, #184	@ 0xb8
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}
 80113a4:	effffffe 	.word	0xeffffffe
 80113a8:	58000c00 	.word	0x58000c00
 80113ac:	08010b31 	.word	0x08010b31

080113b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80113b0:	b480      	push	{r7}
 80113b2:	b083      	sub	sp, #12
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80113b8:	bf00      	nop
 80113ba:	370c      	adds	r7, #12
 80113bc:	46bd      	mov	sp, r7
 80113be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c2:	4770      	bx	lr

080113c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80113c4:	b480      	push	{r7}
 80113c6:	b083      	sub	sp, #12
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80113cc:	bf00      	nop
 80113ce:	370c      	adds	r7, #12
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr

080113d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80113d8:	b480      	push	{r7}
 80113da:	b083      	sub	sp, #12
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80113e0:	bf00      	nop
 80113e2:	370c      	adds	r7, #12
 80113e4:	46bd      	mov	sp, r7
 80113e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ea:	4770      	bx	lr

080113ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80113ec:	b480      	push	{r7}
 80113ee:	b085      	sub	sp, #20
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80113fa:	2b01      	cmp	r3, #1
 80113fc:	d101      	bne.n	8011402 <HAL_UARTEx_DisableFifoMode+0x16>
 80113fe:	2302      	movs	r3, #2
 8011400:	e027      	b.n	8011452 <HAL_UARTEx_DisableFifoMode+0x66>
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2201      	movs	r2, #1
 8011406:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	2224      	movs	r2, #36	@ 0x24
 801140e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	681a      	ldr	r2, [r3, #0]
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	f022 0201 	bic.w	r2, r2, #1
 8011428:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011430:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2200      	movs	r2, #0
 8011436:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	68fa      	ldr	r2, [r7, #12]
 801143e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2220      	movs	r2, #32
 8011444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2200      	movs	r2, #0
 801144c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011450:	2300      	movs	r3, #0
}
 8011452:	4618      	mov	r0, r3
 8011454:	3714      	adds	r7, #20
 8011456:	46bd      	mov	sp, r7
 8011458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145c:	4770      	bx	lr

0801145e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801145e:	b580      	push	{r7, lr}
 8011460:	b084      	sub	sp, #16
 8011462:	af00      	add	r7, sp, #0
 8011464:	6078      	str	r0, [r7, #4]
 8011466:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801146e:	2b01      	cmp	r3, #1
 8011470:	d101      	bne.n	8011476 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011472:	2302      	movs	r3, #2
 8011474:	e02d      	b.n	80114d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2201      	movs	r2, #1
 801147a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	2224      	movs	r2, #36	@ 0x24
 8011482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	681a      	ldr	r2, [r3, #0]
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	f022 0201 	bic.w	r2, r2, #1
 801149c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	689b      	ldr	r3, [r3, #8]
 80114a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	683a      	ldr	r2, [r7, #0]
 80114ae:	430a      	orrs	r2, r1
 80114b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f000 f8f4 	bl	80116a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	68fa      	ldr	r2, [r7, #12]
 80114be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2220      	movs	r2, #32
 80114c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2200      	movs	r2, #0
 80114cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80114d0:	2300      	movs	r3, #0
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	3710      	adds	r7, #16
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}

080114da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80114da:	b580      	push	{r7, lr}
 80114dc:	b084      	sub	sp, #16
 80114de:	af00      	add	r7, sp, #0
 80114e0:	6078      	str	r0, [r7, #4]
 80114e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80114ea:	2b01      	cmp	r3, #1
 80114ec:	d101      	bne.n	80114f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80114ee:	2302      	movs	r3, #2
 80114f0:	e02d      	b.n	801154e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2201      	movs	r2, #1
 80114f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	2224      	movs	r2, #36	@ 0x24
 80114fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	681a      	ldr	r2, [r3, #0]
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	f022 0201 	bic.w	r2, r2, #1
 8011518:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	689b      	ldr	r3, [r3, #8]
 8011520:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	683a      	ldr	r2, [r7, #0]
 801152a:	430a      	orrs	r2, r1
 801152c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f000 f8b6 	bl	80116a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	68fa      	ldr	r2, [r7, #12]
 801153a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2220      	movs	r2, #32
 8011540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2200      	movs	r2, #0
 8011548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801154c:	2300      	movs	r3, #0
}
 801154e:	4618      	mov	r0, r3
 8011550:	3710      	adds	r7, #16
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}

08011556 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011556:	b580      	push	{r7, lr}
 8011558:	b08c      	sub	sp, #48	@ 0x30
 801155a:	af00      	add	r7, sp, #0
 801155c:	60f8      	str	r0, [r7, #12]
 801155e:	60b9      	str	r1, [r7, #8]
 8011560:	4613      	mov	r3, r2
 8011562:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8011564:	2300      	movs	r3, #0
 8011566:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011570:	2b20      	cmp	r3, #32
 8011572:	d13b      	bne.n	80115ec <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d002      	beq.n	8011580 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 801157a:	88fb      	ldrh	r3, [r7, #6]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d101      	bne.n	8011584 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8011580:	2301      	movs	r3, #1
 8011582:	e034      	b.n	80115ee <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	2201      	movs	r2, #1
 8011588:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	2200      	movs	r2, #0
 801158e:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8011590:	88fb      	ldrh	r3, [r7, #6]
 8011592:	461a      	mov	r2, r3
 8011594:	68b9      	ldr	r1, [r7, #8]
 8011596:	68f8      	ldr	r0, [r7, #12]
 8011598:	f7fe fe4a 	bl	8010230 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115a0:	2b01      	cmp	r3, #1
 80115a2:	d11d      	bne.n	80115e0 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	2210      	movs	r2, #16
 80115aa:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115b2:	69bb      	ldr	r3, [r7, #24]
 80115b4:	e853 3f00 	ldrex	r3, [r3]
 80115b8:	617b      	str	r3, [r7, #20]
   return(result);
 80115ba:	697b      	ldr	r3, [r7, #20]
 80115bc:	f043 0310 	orr.w	r3, r3, #16
 80115c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	461a      	mov	r2, r3
 80115c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80115cc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115ce:	6a39      	ldr	r1, [r7, #32]
 80115d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115d2:	e841 2300 	strex	r3, r2, [r1]
 80115d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80115d8:	69fb      	ldr	r3, [r7, #28]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d1e6      	bne.n	80115ac <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 80115de:	e002      	b.n	80115e6 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80115e0:	2301      	movs	r3, #1
 80115e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80115e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80115ea:	e000      	b.n	80115ee <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80115ec:	2302      	movs	r3, #2
  }
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	3730      	adds	r7, #48	@ 0x30
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}

080115f6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80115f6:	b580      	push	{r7, lr}
 80115f8:	b08c      	sub	sp, #48	@ 0x30
 80115fa:	af00      	add	r7, sp, #0
 80115fc:	60f8      	str	r0, [r7, #12]
 80115fe:	60b9      	str	r1, [r7, #8]
 8011600:	4613      	mov	r3, r2
 8011602:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801160a:	2b20      	cmp	r3, #32
 801160c:	d142      	bne.n	8011694 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d002      	beq.n	801161a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8011614:	88fb      	ldrh	r3, [r7, #6]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d101      	bne.n	801161e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 801161a:	2301      	movs	r3, #1
 801161c:	e03b      	b.n	8011696 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	2201      	movs	r2, #1
 8011622:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	2200      	movs	r2, #0
 8011628:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801162a:	88fb      	ldrh	r3, [r7, #6]
 801162c:	461a      	mov	r2, r3
 801162e:	68b9      	ldr	r1, [r7, #8]
 8011630:	68f8      	ldr	r0, [r7, #12]
 8011632:	f7fe ff1f 	bl	8010474 <UART_Start_Receive_DMA>
 8011636:	4603      	mov	r3, r0
 8011638:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801163c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011640:	2b00      	cmp	r3, #0
 8011642:	d124      	bne.n	801168e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011648:	2b01      	cmp	r3, #1
 801164a:	d11d      	bne.n	8011688 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	2210      	movs	r2, #16
 8011652:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801165a:	69bb      	ldr	r3, [r7, #24]
 801165c:	e853 3f00 	ldrex	r3, [r3]
 8011660:	617b      	str	r3, [r7, #20]
   return(result);
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	f043 0310 	orr.w	r3, r3, #16
 8011668:	62bb      	str	r3, [r7, #40]	@ 0x28
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	461a      	mov	r2, r3
 8011670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011672:	627b      	str	r3, [r7, #36]	@ 0x24
 8011674:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011676:	6a39      	ldr	r1, [r7, #32]
 8011678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801167a:	e841 2300 	strex	r3, r2, [r1]
 801167e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011680:	69fb      	ldr	r3, [r7, #28]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d1e6      	bne.n	8011654 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8011686:	e002      	b.n	801168e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8011688:	2301      	movs	r3, #1
 801168a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 801168e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011692:	e000      	b.n	8011696 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8011694:	2302      	movs	r3, #2
  }
}
 8011696:	4618      	mov	r0, r3
 8011698:	3730      	adds	r7, #48	@ 0x30
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}
	...

080116a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80116a0:	b480      	push	{r7}
 80116a2:	b085      	sub	sp, #20
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d108      	bne.n	80116c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2201      	movs	r2, #1
 80116b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	2201      	movs	r2, #1
 80116bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80116c0:	e031      	b.n	8011726 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80116c2:	2310      	movs	r3, #16
 80116c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80116c6:	2310      	movs	r3, #16
 80116c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	689b      	ldr	r3, [r3, #8]
 80116d0:	0e5b      	lsrs	r3, r3, #25
 80116d2:	b2db      	uxtb	r3, r3
 80116d4:	f003 0307 	and.w	r3, r3, #7
 80116d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	689b      	ldr	r3, [r3, #8]
 80116e0:	0f5b      	lsrs	r3, r3, #29
 80116e2:	b2db      	uxtb	r3, r3
 80116e4:	f003 0307 	and.w	r3, r3, #7
 80116e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80116ea:	7bbb      	ldrb	r3, [r7, #14]
 80116ec:	7b3a      	ldrb	r2, [r7, #12]
 80116ee:	4911      	ldr	r1, [pc, #68]	@ (8011734 <UARTEx_SetNbDataToProcess+0x94>)
 80116f0:	5c8a      	ldrb	r2, [r1, r2]
 80116f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80116f6:	7b3a      	ldrb	r2, [r7, #12]
 80116f8:	490f      	ldr	r1, [pc, #60]	@ (8011738 <UARTEx_SetNbDataToProcess+0x98>)
 80116fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80116fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8011700:	b29a      	uxth	r2, r3
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011708:	7bfb      	ldrb	r3, [r7, #15]
 801170a:	7b7a      	ldrb	r2, [r7, #13]
 801170c:	4909      	ldr	r1, [pc, #36]	@ (8011734 <UARTEx_SetNbDataToProcess+0x94>)
 801170e:	5c8a      	ldrb	r2, [r1, r2]
 8011710:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011714:	7b7a      	ldrb	r2, [r7, #13]
 8011716:	4908      	ldr	r1, [pc, #32]	@ (8011738 <UARTEx_SetNbDataToProcess+0x98>)
 8011718:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801171a:	fb93 f3f2 	sdiv	r3, r3, r2
 801171e:	b29a      	uxth	r2, r3
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011726:	bf00      	nop
 8011728:	3714      	adds	r7, #20
 801172a:	46bd      	mov	sp, r7
 801172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011730:	4770      	bx	lr
 8011732:	bf00      	nop
 8011734:	0802cda4 	.word	0x0802cda4
 8011738:	0802cdac 	.word	0x0802cdac

0801173c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801173c:	b5b0      	push	{r4, r5, r7, lr}
 801173e:	b08c      	sub	sp, #48	@ 0x30
 8011740:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8011742:	4b8f      	ldr	r3, [pc, #572]	@ (8011980 <MX_LWIP_Init+0x244>)
 8011744:	22c0      	movs	r2, #192	@ 0xc0
 8011746:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8011748:	4b8d      	ldr	r3, [pc, #564]	@ (8011980 <MX_LWIP_Init+0x244>)
 801174a:	22a8      	movs	r2, #168	@ 0xa8
 801174c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 801174e:	4b8c      	ldr	r3, [pc, #560]	@ (8011980 <MX_LWIP_Init+0x244>)
 8011750:	2201      	movs	r2, #1
 8011752:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 50;
 8011754:	4b8a      	ldr	r3, [pc, #552]	@ (8011980 <MX_LWIP_Init+0x244>)
 8011756:	2232      	movs	r2, #50	@ 0x32
 8011758:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 801175a:	4b8a      	ldr	r3, [pc, #552]	@ (8011984 <MX_LWIP_Init+0x248>)
 801175c:	22ff      	movs	r2, #255	@ 0xff
 801175e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8011760:	4b88      	ldr	r3, [pc, #544]	@ (8011984 <MX_LWIP_Init+0x248>)
 8011762:	22ff      	movs	r2, #255	@ 0xff
 8011764:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8011766:	4b87      	ldr	r3, [pc, #540]	@ (8011984 <MX_LWIP_Init+0x248>)
 8011768:	22ff      	movs	r2, #255	@ 0xff
 801176a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 801176c:	4b85      	ldr	r3, [pc, #532]	@ (8011984 <MX_LWIP_Init+0x248>)
 801176e:	2200      	movs	r2, #0
 8011770:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8011772:	4b85      	ldr	r3, [pc, #532]	@ (8011988 <MX_LWIP_Init+0x24c>)
 8011774:	22c0      	movs	r2, #192	@ 0xc0
 8011776:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8011778:	4b83      	ldr	r3, [pc, #524]	@ (8011988 <MX_LWIP_Init+0x24c>)
 801177a:	22a8      	movs	r2, #168	@ 0xa8
 801177c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 801177e:	4b82      	ldr	r3, [pc, #520]	@ (8011988 <MX_LWIP_Init+0x24c>)
 8011780:	2201      	movs	r2, #1
 8011782:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8011784:	4b80      	ldr	r3, [pc, #512]	@ (8011988 <MX_LWIP_Init+0x24c>)
 8011786:	2201      	movs	r2, #1
 8011788:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 801178a:	2100      	movs	r1, #0
 801178c:	2000      	movs	r0, #0
 801178e:	f007 f8f5 	bl	801897c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8011792:	4b7b      	ldr	r3, [pc, #492]	@ (8011980 <MX_LWIP_Init+0x244>)
 8011794:	781b      	ldrb	r3, [r3, #0]
 8011796:	061a      	lsls	r2, r3, #24
 8011798:	4b79      	ldr	r3, [pc, #484]	@ (8011980 <MX_LWIP_Init+0x244>)
 801179a:	785b      	ldrb	r3, [r3, #1]
 801179c:	041b      	lsls	r3, r3, #16
 801179e:	431a      	orrs	r2, r3
 80117a0:	4b77      	ldr	r3, [pc, #476]	@ (8011980 <MX_LWIP_Init+0x244>)
 80117a2:	789b      	ldrb	r3, [r3, #2]
 80117a4:	021b      	lsls	r3, r3, #8
 80117a6:	4313      	orrs	r3, r2
 80117a8:	4a75      	ldr	r2, [pc, #468]	@ (8011980 <MX_LWIP_Init+0x244>)
 80117aa:	78d2      	ldrb	r2, [r2, #3]
 80117ac:	4313      	orrs	r3, r2
 80117ae:	061a      	lsls	r2, r3, #24
 80117b0:	4b73      	ldr	r3, [pc, #460]	@ (8011980 <MX_LWIP_Init+0x244>)
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	0619      	lsls	r1, r3, #24
 80117b6:	4b72      	ldr	r3, [pc, #456]	@ (8011980 <MX_LWIP_Init+0x244>)
 80117b8:	785b      	ldrb	r3, [r3, #1]
 80117ba:	041b      	lsls	r3, r3, #16
 80117bc:	4319      	orrs	r1, r3
 80117be:	4b70      	ldr	r3, [pc, #448]	@ (8011980 <MX_LWIP_Init+0x244>)
 80117c0:	789b      	ldrb	r3, [r3, #2]
 80117c2:	021b      	lsls	r3, r3, #8
 80117c4:	430b      	orrs	r3, r1
 80117c6:	496e      	ldr	r1, [pc, #440]	@ (8011980 <MX_LWIP_Init+0x244>)
 80117c8:	78c9      	ldrb	r1, [r1, #3]
 80117ca:	430b      	orrs	r3, r1
 80117cc:	021b      	lsls	r3, r3, #8
 80117ce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80117d2:	431a      	orrs	r2, r3
 80117d4:	4b6a      	ldr	r3, [pc, #424]	@ (8011980 <MX_LWIP_Init+0x244>)
 80117d6:	781b      	ldrb	r3, [r3, #0]
 80117d8:	0619      	lsls	r1, r3, #24
 80117da:	4b69      	ldr	r3, [pc, #420]	@ (8011980 <MX_LWIP_Init+0x244>)
 80117dc:	785b      	ldrb	r3, [r3, #1]
 80117de:	041b      	lsls	r3, r3, #16
 80117e0:	4319      	orrs	r1, r3
 80117e2:	4b67      	ldr	r3, [pc, #412]	@ (8011980 <MX_LWIP_Init+0x244>)
 80117e4:	789b      	ldrb	r3, [r3, #2]
 80117e6:	021b      	lsls	r3, r3, #8
 80117e8:	430b      	orrs	r3, r1
 80117ea:	4965      	ldr	r1, [pc, #404]	@ (8011980 <MX_LWIP_Init+0x244>)
 80117ec:	78c9      	ldrb	r1, [r1, #3]
 80117ee:	430b      	orrs	r3, r1
 80117f0:	0a1b      	lsrs	r3, r3, #8
 80117f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80117f6:	431a      	orrs	r2, r3
 80117f8:	4b61      	ldr	r3, [pc, #388]	@ (8011980 <MX_LWIP_Init+0x244>)
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	0619      	lsls	r1, r3, #24
 80117fe:	4b60      	ldr	r3, [pc, #384]	@ (8011980 <MX_LWIP_Init+0x244>)
 8011800:	785b      	ldrb	r3, [r3, #1]
 8011802:	041b      	lsls	r3, r3, #16
 8011804:	4319      	orrs	r1, r3
 8011806:	4b5e      	ldr	r3, [pc, #376]	@ (8011980 <MX_LWIP_Init+0x244>)
 8011808:	789b      	ldrb	r3, [r3, #2]
 801180a:	021b      	lsls	r3, r3, #8
 801180c:	430b      	orrs	r3, r1
 801180e:	495c      	ldr	r1, [pc, #368]	@ (8011980 <MX_LWIP_Init+0x244>)
 8011810:	78c9      	ldrb	r1, [r1, #3]
 8011812:	430b      	orrs	r3, r1
 8011814:	0e1b      	lsrs	r3, r3, #24
 8011816:	4313      	orrs	r3, r2
 8011818:	4a5c      	ldr	r2, [pc, #368]	@ (801198c <MX_LWIP_Init+0x250>)
 801181a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801181c:	4b59      	ldr	r3, [pc, #356]	@ (8011984 <MX_LWIP_Init+0x248>)
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	061a      	lsls	r2, r3, #24
 8011822:	4b58      	ldr	r3, [pc, #352]	@ (8011984 <MX_LWIP_Init+0x248>)
 8011824:	785b      	ldrb	r3, [r3, #1]
 8011826:	041b      	lsls	r3, r3, #16
 8011828:	431a      	orrs	r2, r3
 801182a:	4b56      	ldr	r3, [pc, #344]	@ (8011984 <MX_LWIP_Init+0x248>)
 801182c:	789b      	ldrb	r3, [r3, #2]
 801182e:	021b      	lsls	r3, r3, #8
 8011830:	4313      	orrs	r3, r2
 8011832:	4a54      	ldr	r2, [pc, #336]	@ (8011984 <MX_LWIP_Init+0x248>)
 8011834:	78d2      	ldrb	r2, [r2, #3]
 8011836:	4313      	orrs	r3, r2
 8011838:	061a      	lsls	r2, r3, #24
 801183a:	4b52      	ldr	r3, [pc, #328]	@ (8011984 <MX_LWIP_Init+0x248>)
 801183c:	781b      	ldrb	r3, [r3, #0]
 801183e:	0619      	lsls	r1, r3, #24
 8011840:	4b50      	ldr	r3, [pc, #320]	@ (8011984 <MX_LWIP_Init+0x248>)
 8011842:	785b      	ldrb	r3, [r3, #1]
 8011844:	041b      	lsls	r3, r3, #16
 8011846:	4319      	orrs	r1, r3
 8011848:	4b4e      	ldr	r3, [pc, #312]	@ (8011984 <MX_LWIP_Init+0x248>)
 801184a:	789b      	ldrb	r3, [r3, #2]
 801184c:	021b      	lsls	r3, r3, #8
 801184e:	430b      	orrs	r3, r1
 8011850:	494c      	ldr	r1, [pc, #304]	@ (8011984 <MX_LWIP_Init+0x248>)
 8011852:	78c9      	ldrb	r1, [r1, #3]
 8011854:	430b      	orrs	r3, r1
 8011856:	021b      	lsls	r3, r3, #8
 8011858:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801185c:	431a      	orrs	r2, r3
 801185e:	4b49      	ldr	r3, [pc, #292]	@ (8011984 <MX_LWIP_Init+0x248>)
 8011860:	781b      	ldrb	r3, [r3, #0]
 8011862:	0619      	lsls	r1, r3, #24
 8011864:	4b47      	ldr	r3, [pc, #284]	@ (8011984 <MX_LWIP_Init+0x248>)
 8011866:	785b      	ldrb	r3, [r3, #1]
 8011868:	041b      	lsls	r3, r3, #16
 801186a:	4319      	orrs	r1, r3
 801186c:	4b45      	ldr	r3, [pc, #276]	@ (8011984 <MX_LWIP_Init+0x248>)
 801186e:	789b      	ldrb	r3, [r3, #2]
 8011870:	021b      	lsls	r3, r3, #8
 8011872:	430b      	orrs	r3, r1
 8011874:	4943      	ldr	r1, [pc, #268]	@ (8011984 <MX_LWIP_Init+0x248>)
 8011876:	78c9      	ldrb	r1, [r1, #3]
 8011878:	430b      	orrs	r3, r1
 801187a:	0a1b      	lsrs	r3, r3, #8
 801187c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011880:	431a      	orrs	r2, r3
 8011882:	4b40      	ldr	r3, [pc, #256]	@ (8011984 <MX_LWIP_Init+0x248>)
 8011884:	781b      	ldrb	r3, [r3, #0]
 8011886:	0619      	lsls	r1, r3, #24
 8011888:	4b3e      	ldr	r3, [pc, #248]	@ (8011984 <MX_LWIP_Init+0x248>)
 801188a:	785b      	ldrb	r3, [r3, #1]
 801188c:	041b      	lsls	r3, r3, #16
 801188e:	4319      	orrs	r1, r3
 8011890:	4b3c      	ldr	r3, [pc, #240]	@ (8011984 <MX_LWIP_Init+0x248>)
 8011892:	789b      	ldrb	r3, [r3, #2]
 8011894:	021b      	lsls	r3, r3, #8
 8011896:	430b      	orrs	r3, r1
 8011898:	493a      	ldr	r1, [pc, #232]	@ (8011984 <MX_LWIP_Init+0x248>)
 801189a:	78c9      	ldrb	r1, [r1, #3]
 801189c:	430b      	orrs	r3, r1
 801189e:	0e1b      	lsrs	r3, r3, #24
 80118a0:	4313      	orrs	r3, r2
 80118a2:	4a3b      	ldr	r2, [pc, #236]	@ (8011990 <MX_LWIP_Init+0x254>)
 80118a4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80118a6:	4b38      	ldr	r3, [pc, #224]	@ (8011988 <MX_LWIP_Init+0x24c>)
 80118a8:	781b      	ldrb	r3, [r3, #0]
 80118aa:	061a      	lsls	r2, r3, #24
 80118ac:	4b36      	ldr	r3, [pc, #216]	@ (8011988 <MX_LWIP_Init+0x24c>)
 80118ae:	785b      	ldrb	r3, [r3, #1]
 80118b0:	041b      	lsls	r3, r3, #16
 80118b2:	431a      	orrs	r2, r3
 80118b4:	4b34      	ldr	r3, [pc, #208]	@ (8011988 <MX_LWIP_Init+0x24c>)
 80118b6:	789b      	ldrb	r3, [r3, #2]
 80118b8:	021b      	lsls	r3, r3, #8
 80118ba:	4313      	orrs	r3, r2
 80118bc:	4a32      	ldr	r2, [pc, #200]	@ (8011988 <MX_LWIP_Init+0x24c>)
 80118be:	78d2      	ldrb	r2, [r2, #3]
 80118c0:	4313      	orrs	r3, r2
 80118c2:	061a      	lsls	r2, r3, #24
 80118c4:	4b30      	ldr	r3, [pc, #192]	@ (8011988 <MX_LWIP_Init+0x24c>)
 80118c6:	781b      	ldrb	r3, [r3, #0]
 80118c8:	0619      	lsls	r1, r3, #24
 80118ca:	4b2f      	ldr	r3, [pc, #188]	@ (8011988 <MX_LWIP_Init+0x24c>)
 80118cc:	785b      	ldrb	r3, [r3, #1]
 80118ce:	041b      	lsls	r3, r3, #16
 80118d0:	4319      	orrs	r1, r3
 80118d2:	4b2d      	ldr	r3, [pc, #180]	@ (8011988 <MX_LWIP_Init+0x24c>)
 80118d4:	789b      	ldrb	r3, [r3, #2]
 80118d6:	021b      	lsls	r3, r3, #8
 80118d8:	430b      	orrs	r3, r1
 80118da:	492b      	ldr	r1, [pc, #172]	@ (8011988 <MX_LWIP_Init+0x24c>)
 80118dc:	78c9      	ldrb	r1, [r1, #3]
 80118de:	430b      	orrs	r3, r1
 80118e0:	021b      	lsls	r3, r3, #8
 80118e2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80118e6:	431a      	orrs	r2, r3
 80118e8:	4b27      	ldr	r3, [pc, #156]	@ (8011988 <MX_LWIP_Init+0x24c>)
 80118ea:	781b      	ldrb	r3, [r3, #0]
 80118ec:	0619      	lsls	r1, r3, #24
 80118ee:	4b26      	ldr	r3, [pc, #152]	@ (8011988 <MX_LWIP_Init+0x24c>)
 80118f0:	785b      	ldrb	r3, [r3, #1]
 80118f2:	041b      	lsls	r3, r3, #16
 80118f4:	4319      	orrs	r1, r3
 80118f6:	4b24      	ldr	r3, [pc, #144]	@ (8011988 <MX_LWIP_Init+0x24c>)
 80118f8:	789b      	ldrb	r3, [r3, #2]
 80118fa:	021b      	lsls	r3, r3, #8
 80118fc:	430b      	orrs	r3, r1
 80118fe:	4922      	ldr	r1, [pc, #136]	@ (8011988 <MX_LWIP_Init+0x24c>)
 8011900:	78c9      	ldrb	r1, [r1, #3]
 8011902:	430b      	orrs	r3, r1
 8011904:	0a1b      	lsrs	r3, r3, #8
 8011906:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801190a:	431a      	orrs	r2, r3
 801190c:	4b1e      	ldr	r3, [pc, #120]	@ (8011988 <MX_LWIP_Init+0x24c>)
 801190e:	781b      	ldrb	r3, [r3, #0]
 8011910:	0619      	lsls	r1, r3, #24
 8011912:	4b1d      	ldr	r3, [pc, #116]	@ (8011988 <MX_LWIP_Init+0x24c>)
 8011914:	785b      	ldrb	r3, [r3, #1]
 8011916:	041b      	lsls	r3, r3, #16
 8011918:	4319      	orrs	r1, r3
 801191a:	4b1b      	ldr	r3, [pc, #108]	@ (8011988 <MX_LWIP_Init+0x24c>)
 801191c:	789b      	ldrb	r3, [r3, #2]
 801191e:	021b      	lsls	r3, r3, #8
 8011920:	430b      	orrs	r3, r1
 8011922:	4919      	ldr	r1, [pc, #100]	@ (8011988 <MX_LWIP_Init+0x24c>)
 8011924:	78c9      	ldrb	r1, [r1, #3]
 8011926:	430b      	orrs	r3, r1
 8011928:	0e1b      	lsrs	r3, r3, #24
 801192a:	4313      	orrs	r3, r2
 801192c:	4a19      	ldr	r2, [pc, #100]	@ (8011994 <MX_LWIP_Init+0x258>)
 801192e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8011930:	4b19      	ldr	r3, [pc, #100]	@ (8011998 <MX_LWIP_Init+0x25c>)
 8011932:	9302      	str	r3, [sp, #8]
 8011934:	4b19      	ldr	r3, [pc, #100]	@ (801199c <MX_LWIP_Init+0x260>)
 8011936:	9301      	str	r3, [sp, #4]
 8011938:	2300      	movs	r3, #0
 801193a:	9300      	str	r3, [sp, #0]
 801193c:	4b15      	ldr	r3, [pc, #84]	@ (8011994 <MX_LWIP_Init+0x258>)
 801193e:	4a14      	ldr	r2, [pc, #80]	@ (8011990 <MX_LWIP_Init+0x254>)
 8011940:	4912      	ldr	r1, [pc, #72]	@ (801198c <MX_LWIP_Init+0x250>)
 8011942:	4817      	ldr	r0, [pc, #92]	@ (80119a0 <MX_LWIP_Init+0x264>)
 8011944:	f007 fe9c 	bl	8019680 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8011948:	4815      	ldr	r0, [pc, #84]	@ (80119a0 <MX_LWIP_Init+0x264>)
 801194a:	f008 f84b 	bl	80199e4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 801194e:	4814      	ldr	r0, [pc, #80]	@ (80119a0 <MX_LWIP_Init+0x264>)
 8011950:	f008 f858 	bl	8019a04 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8011954:	4913      	ldr	r1, [pc, #76]	@ (80119a4 <MX_LWIP_Init+0x268>)
 8011956:	4812      	ldr	r0, [pc, #72]	@ (80119a0 <MX_LWIP_Init+0x264>)
 8011958:	f008 f956 	bl	8019c08 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 801195c:	4b12      	ldr	r3, [pc, #72]	@ (80119a8 <MX_LWIP_Init+0x26c>)
 801195e:	1d3c      	adds	r4, r7, #4
 8011960:	461d      	mov	r5, r3
 8011962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011966:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801196a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 801196e:	1d3b      	adds	r3, r7, #4
 8011970:	490b      	ldr	r1, [pc, #44]	@ (80119a0 <MX_LWIP_Init+0x264>)
 8011972:	4618      	mov	r0, r3
 8011974:	f000 fd8c 	bl	8012490 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8011978:	bf00      	nop
 801197a:	3720      	adds	r7, #32
 801197c:	46bd      	mov	sp, r7
 801197e:	bdb0      	pop	{r4, r5, r7, pc}
 8011980:	24001240 	.word	0x24001240
 8011984:	24001244 	.word	0x24001244
 8011988:	24001248 	.word	0x24001248
 801198c:	24001234 	.word	0x24001234
 8011990:	24001238 	.word	0x24001238
 8011994:	2400123c 	.word	0x2400123c
 8011998:	0801888d 	.word	0x0801888d
 801199c:	08011eb9 	.word	0x08011eb9
 80119a0:	24001200 	.word	0x24001200
 80119a4:	080119ad 	.word	0x080119ad
 80119a8:	080293bc 	.word	0x080293bc

080119ac <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80119ac:	b480      	push	{r7}
 80119ae:	b083      	sub	sp, #12
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80119b4:	bf00      	nop
 80119b6:	370c      	adds	r7, #12
 80119b8:	46bd      	mov	sp, r7
 80119ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119be:	4770      	bx	lr

080119c0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b082      	sub	sp, #8
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80119c8:	4b04      	ldr	r3, [pc, #16]	@ (80119dc <HAL_ETH_RxCpltCallback+0x1c>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	4618      	mov	r0, r3
 80119ce:	f000 fedb 	bl	8012788 <osSemaphoreRelease>
}
 80119d2:	bf00      	nop
 80119d4:	3708      	adds	r7, #8
 80119d6:	46bd      	mov	sp, r7
 80119d8:	bd80      	pop	{r7, pc}
 80119da:	bf00      	nop
 80119dc:	24001254 	.word	0x24001254

080119e0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b082      	sub	sp, #8
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80119e8:	4b04      	ldr	r3, [pc, #16]	@ (80119fc <HAL_ETH_TxCpltCallback+0x1c>)
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	4618      	mov	r0, r3
 80119ee:	f000 fecb 	bl	8012788 <osSemaphoreRelease>
}
 80119f2:	bf00      	nop
 80119f4:	3708      	adds	r7, #8
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}
 80119fa:	bf00      	nop
 80119fc:	24001258 	.word	0x24001258

08011a00 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b082      	sub	sp, #8
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f7f8 ff6a 	bl	800a8e2 <HAL_ETH_GetDMAError>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a14:	2b80      	cmp	r3, #128	@ 0x80
 8011a16:	d104      	bne.n	8011a22 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8011a18:	4b04      	ldr	r3, [pc, #16]	@ (8011a2c <HAL_ETH_ErrorCallback+0x2c>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f000 feb3 	bl	8012788 <osSemaphoreRelease>
  }
}
 8011a22:	bf00      	nop
 8011a24:	3708      	adds	r7, #8
 8011a26:	46bd      	mov	sp, r7
 8011a28:	bd80      	pop	{r7, pc}
 8011a2a:	bf00      	nop
 8011a2c:	24001254 	.word	0x24001254

08011a30 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8011a30:	b5b0      	push	{r4, r5, r7, lr}
 8011a32:	b0ac      	sub	sp, #176	@ 0xb0
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8011a38:	2300      	movs	r3, #0
 8011a3a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  uint32_t duplex, speed = 0;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int32_t PHYLinkState = 0;
 8011a44:	2300      	movs	r3, #0
 8011a46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 8011a4a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011a4e:	2264      	movs	r2, #100	@ 0x64
 8011a50:	2100      	movs	r1, #0
 8011a52:	4618      	mov	r0, r3
 8011a54:	f013 fcf2 	bl	802543c <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8011a58:	4b93      	ldr	r3, [pc, #588]	@ (8011ca8 <low_level_init+0x278>)
 8011a5a:	4a94      	ldr	r2, [pc, #592]	@ (8011cac <low_level_init+0x27c>)
 8011a5c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[1] = 0x80;
 8011a64:	2380      	movs	r3, #128	@ 0x80
 8011a66:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  MACAddr[2] = 0xE1;
 8011a6a:	23e1      	movs	r3, #225	@ 0xe1
 8011a6c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MACAddr[3] = 0x00;
 8011a70:	2300      	movs	r3, #0
 8011a72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MACAddr[4] = 0x00;
 8011a76:	2300      	movs	r3, #0
 8011a78:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[5] = 0x00;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  heth.Init.MACAddr = &MACAddr[0];
 8011a82:	4a89      	ldr	r2, [pc, #548]	@ (8011ca8 <low_level_init+0x278>)
 8011a84:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011a88:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8011a8a:	4b87      	ldr	r3, [pc, #540]	@ (8011ca8 <low_level_init+0x278>)
 8011a8c:	2201      	movs	r2, #1
 8011a8e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8011a90:	4b85      	ldr	r3, [pc, #532]	@ (8011ca8 <low_level_init+0x278>)
 8011a92:	4a87      	ldr	r2, [pc, #540]	@ (8011cb0 <low_level_init+0x280>)
 8011a94:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8011a96:	4b84      	ldr	r3, [pc, #528]	@ (8011ca8 <low_level_init+0x278>)
 8011a98:	4a86      	ldr	r2, [pc, #536]	@ (8011cb4 <low_level_init+0x284>)
 8011a9a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8011a9c:	4b82      	ldr	r3, [pc, #520]	@ (8011ca8 <low_level_init+0x278>)
 8011a9e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8011aa2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8011aa4:	4880      	ldr	r0, [pc, #512]	@ (8011ca8 <low_level_init+0x278>)
 8011aa6:	f7f7 ff43 	bl	8009930 <HAL_ETH_Init>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8011ab0:	2238      	movs	r2, #56	@ 0x38
 8011ab2:	2100      	movs	r1, #0
 8011ab4:	4880      	ldr	r0, [pc, #512]	@ (8011cb8 <low_level_init+0x288>)
 8011ab6:	f013 fcc1 	bl	802543c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8011aba:	4b7f      	ldr	r3, [pc, #508]	@ (8011cb8 <low_level_init+0x288>)
 8011abc:	2221      	movs	r2, #33	@ 0x21
 8011abe:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8011ac0:	4b7d      	ldr	r3, [pc, #500]	@ (8011cb8 <low_level_init+0x288>)
 8011ac2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8011ac6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8011ac8:	4b7b      	ldr	r3, [pc, #492]	@ (8011cb8 <low_level_init+0x288>)
 8011aca:	2200      	movs	r2, #0
 8011acc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8011ace:	487b      	ldr	r0, [pc, #492]	@ (8011cbc <low_level_init+0x28c>)
 8011ad0:	f007 fc90 	bl	80193f4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2206      	movs	r2, #6
 8011ad8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8011adc:	4b72      	ldr	r3, [pc, #456]	@ (8011ca8 <low_level_init+0x278>)
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	781a      	ldrb	r2, [r3, #0]
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8011ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8011ca8 <low_level_init+0x278>)
 8011aea:	685b      	ldr	r3, [r3, #4]
 8011aec:	785a      	ldrb	r2, [r3, #1]
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8011af4:	4b6c      	ldr	r3, [pc, #432]	@ (8011ca8 <low_level_init+0x278>)
 8011af6:	685b      	ldr	r3, [r3, #4]
 8011af8:	789a      	ldrb	r2, [r3, #2]
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8011b00:	4b69      	ldr	r3, [pc, #420]	@ (8011ca8 <low_level_init+0x278>)
 8011b02:	685b      	ldr	r3, [r3, #4]
 8011b04:	78da      	ldrb	r2, [r3, #3]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8011b0c:	4b66      	ldr	r3, [pc, #408]	@ (8011ca8 <low_level_init+0x278>)
 8011b0e:	685b      	ldr	r3, [r3, #4]
 8011b10:	791a      	ldrb	r2, [r3, #4]
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8011b18:	4b63      	ldr	r3, [pc, #396]	@ (8011ca8 <low_level_init+0x278>)
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	795a      	ldrb	r2, [r3, #5]
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8011b2a:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011b32:	f043 030a 	orr.w	r3, r3, #10
 8011b36:	b2da      	uxtb	r2, r3
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8011b3e:	2300      	movs	r3, #0
 8011b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011b42:	2300      	movs	r3, #0
 8011b44:	633b      	str	r3, [r7, #48]	@ 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8011b46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011b4a:	2101      	movs	r1, #1
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f000 fd9b 	bl	8012688 <osSemaphoreCreate>
 8011b52:	4603      	mov	r3, r0
 8011b54:	4a5a      	ldr	r2, [pc, #360]	@ (8011cc0 <low_level_init+0x290>)
 8011b56:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8011b58:	2300      	movs	r3, #0
 8011b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8011b60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011b64:	2101      	movs	r1, #1
 8011b66:	4618      	mov	r0, r3
 8011b68:	f000 fd8e 	bl	8012688 <osSemaphoreCreate>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	4a55      	ldr	r2, [pc, #340]	@ (8011cc4 <low_level_init+0x294>)
 8011b70:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8011b72:	4b53      	ldr	r3, [pc, #332]	@ (8011cc0 <low_level_init+0x290>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	2100      	movs	r1, #0
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f000 fdb7 	bl	80126ec <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8011b7e:	4b51      	ldr	r3, [pc, #324]	@ (8011cc4 <low_level_init+0x294>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	2100      	movs	r1, #0
 8011b84:	4618      	mov	r0, r3
 8011b86:	f000 fdb1 	bl	80126ec <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8011b8a:	4b4f      	ldr	r3, [pc, #316]	@ (8011cc8 <low_level_init+0x298>)
 8011b8c:	f107 0408 	add.w	r4, r7, #8
 8011b90:	461d      	mov	r5, r3
 8011b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011b9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8011b9e:	f107 0308 	add.w	r3, r7, #8
 8011ba2:	6879      	ldr	r1, [r7, #4]
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f000 fc73 	bl	8012490 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8011baa:	4948      	ldr	r1, [pc, #288]	@ (8011ccc <low_level_init+0x29c>)
 8011bac:	4848      	ldr	r0, [pc, #288]	@ (8011cd0 <low_level_init+0x2a0>)
 8011bae:	f7f4 fd84 	bl	80066ba <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8011bb2:	4847      	ldr	r0, [pc, #284]	@ (8011cd0 <low_level_init+0x2a0>)
 8011bb4:	f7f4 fdb3 	bl	800671e <LAN8742_Init>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d006      	beq.n	8011bcc <low_level_init+0x19c>
  {
    netif_set_link_down(netif);
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	f007 fff2 	bl	8019ba8 <netif_set_link_down>
    netif_set_down(netif);
 8011bc4:	6878      	ldr	r0, [r7, #4]
 8011bc6:	f007 ff89 	bl	8019adc <netif_set_down>
 8011bca:	e06a      	b.n	8011ca2 <low_level_init+0x272>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8011bcc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d164      	bne.n	8011c9e <low_level_init+0x26e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8011bd4:	483e      	ldr	r0, [pc, #248]	@ (8011cd0 <low_level_init+0x2a0>)
 8011bd6:	f7f4 fdef 	bl	80067b8 <LAN8742_GetLinkState>
 8011bda:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8011bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011be2:	2b01      	cmp	r3, #1
 8011be4:	dc06      	bgt.n	8011bf4 <low_level_init+0x1c4>
    {
      netif_set_link_down(netif);
 8011be6:	6878      	ldr	r0, [r7, #4]
 8011be8:	f007 ffde 	bl	8019ba8 <netif_set_link_down>
      netif_set_down(netif);
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	f007 ff75 	bl	8019adc <netif_set_down>
 8011bf2:	e056      	b.n	8011ca2 <low_level_init+0x272>
    }
    else
    {
      switch (PHYLinkState)
 8011bf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011bf8:	3b02      	subs	r3, #2
 8011bfa:	2b03      	cmp	r3, #3
 8011bfc:	d82a      	bhi.n	8011c54 <low_level_init+0x224>
 8011bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8011c04 <low_level_init+0x1d4>)
 8011c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c04:	08011c15 	.word	0x08011c15
 8011c08:	08011c27 	.word	0x08011c27
 8011c0c:	08011c37 	.word	0x08011c37
 8011c10:	08011c47 	.word	0x08011c47
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8011c14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011c18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8011c1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011c20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8011c24:	e01f      	b.n	8011c66 <low_level_init+0x236>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8011c26:	2300      	movs	r3, #0
 8011c28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8011c2c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011c30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8011c34:	e017      	b.n	8011c66 <low_level_init+0x236>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8011c36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8011c44:	e00f      	b.n	8011c66 <low_level_init+0x236>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8011c46:	2300      	movs	r3, #0
 8011c48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8011c52:	e008      	b.n	8011c66 <low_level_init+0x236>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8011c54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011c58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8011c5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011c60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8011c64:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8011c66:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011c6a:	4619      	mov	r1, r3
 8011c6c:	480e      	ldr	r0, [pc, #56]	@ (8011ca8 <low_level_init+0x278>)
 8011c6e:	f7f8 fbed 	bl	800a44c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8011c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011c76:	657b      	str	r3, [r7, #84]	@ 0x54
    MACConf.Speed = speed;
 8011c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011c7c:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8011c7e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011c82:	4619      	mov	r1, r3
 8011c84:	4808      	ldr	r0, [pc, #32]	@ (8011ca8 <low_level_init+0x278>)
 8011c86:	f7f8 fdb5 	bl	800a7f4 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8011c8a:	4807      	ldr	r0, [pc, #28]	@ (8011ca8 <low_level_init+0x278>)
 8011c8c:	f7f7 ff4e 	bl	8009b2c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f007 feb7 	bl	8019a04 <netif_set_up>
    netif_set_link_up(netif);
 8011c96:	6878      	ldr	r0, [r7, #4]
 8011c98:	f007 ff52 	bl	8019b40 <netif_set_link_up>
 8011c9c:	e001      	b.n	8011ca2 <low_level_init+0x272>
    }

  }
  else
  {
    Error_Handler();
 8011c9e:	f7f3 f9cf 	bl	8005040 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8011ca2:	37b0      	adds	r7, #176	@ 0xb0
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8011ca8:	2400125c 	.word	0x2400125c
 8011cac:	40028000 	.word	0x40028000
 8011cb0:	30000080 	.word	0x30000080
 8011cb4:	30000000 	.word	0x30000000
 8011cb8:	2400130c 	.word	0x2400130c
 8011cbc:	0802cdb4 	.word	0x0802cdb4
 8011cc0:	24001254 	.word	0x24001254
 8011cc4:	24001258 	.word	0x24001258
 8011cc8:	080293e0 	.word	0x080293e0
 8011ccc:	240001ec 	.word	0x240001ec
 8011cd0:	24001344 	.word	0x24001344

08011cd4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b092      	sub	sp, #72	@ 0x48
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
 8011cdc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8011cec:	f107 030c 	add.w	r3, r7, #12
 8011cf0:	2230      	movs	r2, #48	@ 0x30
 8011cf2:	2100      	movs	r1, #0
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f013 fba1 	bl	802543c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8011cfa:	f107 030c 	add.w	r3, r7, #12
 8011cfe:	2230      	movs	r2, #48	@ 0x30
 8011d00:	2100      	movs	r1, #0
 8011d02:	4618      	mov	r0, r3
 8011d04:	f013 fb9a 	bl	802543c <memset>

  for(q = p; q != NULL; q = q->next)
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8011d0c:	e045      	b.n	8011d9a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8011d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d10:	2b03      	cmp	r3, #3
 8011d12:	d902      	bls.n	8011d1a <low_level_output+0x46>
      return ERR_IF;
 8011d14:	f06f 030b 	mvn.w	r3, #11
 8011d18:	e07f      	b.n	8011e1a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8011d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011d1c:	6859      	ldr	r1, [r3, #4]
 8011d1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011d20:	4613      	mov	r3, r2
 8011d22:	005b      	lsls	r3, r3, #1
 8011d24:	4413      	add	r3, r2
 8011d26:	009b      	lsls	r3, r3, #2
 8011d28:	3348      	adds	r3, #72	@ 0x48
 8011d2a:	443b      	add	r3, r7
 8011d2c:	3b3c      	subs	r3, #60	@ 0x3c
 8011d2e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8011d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011d32:	895b      	ldrh	r3, [r3, #10]
 8011d34:	4619      	mov	r1, r3
 8011d36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011d38:	4613      	mov	r3, r2
 8011d3a:	005b      	lsls	r3, r3, #1
 8011d3c:	4413      	add	r3, r2
 8011d3e:	009b      	lsls	r3, r3, #2
 8011d40:	3348      	adds	r3, #72	@ 0x48
 8011d42:	443b      	add	r3, r7
 8011d44:	3b38      	subs	r3, #56	@ 0x38
 8011d46:	6019      	str	r1, [r3, #0]

    if(i>0)
 8011d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d011      	beq.n	8011d72 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8011d4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d50:	1e5a      	subs	r2, r3, #1
 8011d52:	f107 000c 	add.w	r0, r7, #12
 8011d56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011d58:	460b      	mov	r3, r1
 8011d5a:	005b      	lsls	r3, r3, #1
 8011d5c:	440b      	add	r3, r1
 8011d5e:	009b      	lsls	r3, r3, #2
 8011d60:	18c1      	adds	r1, r0, r3
 8011d62:	4613      	mov	r3, r2
 8011d64:	005b      	lsls	r3, r3, #1
 8011d66:	4413      	add	r3, r2
 8011d68:	009b      	lsls	r3, r3, #2
 8011d6a:	3348      	adds	r3, #72	@ 0x48
 8011d6c:	443b      	add	r3, r7
 8011d6e:	3b34      	subs	r3, #52	@ 0x34
 8011d70:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8011d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d109      	bne.n	8011d8e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8011d7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011d7c:	4613      	mov	r3, r2
 8011d7e:	005b      	lsls	r3, r3, #1
 8011d80:	4413      	add	r3, r2
 8011d82:	009b      	lsls	r3, r3, #2
 8011d84:	3348      	adds	r3, #72	@ 0x48
 8011d86:	443b      	add	r3, r7
 8011d88:	3b34      	subs	r3, #52	@ 0x34
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8011d8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d90:	3301      	adds	r3, #1
 8011d92:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8011d94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	643b      	str	r3, [r7, #64]	@ 0x40
 8011d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d1b6      	bne.n	8011d0e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	891b      	ldrh	r3, [r3, #8]
 8011da4:	461a      	mov	r2, r3
 8011da6:	4b1f      	ldr	r3, [pc, #124]	@ (8011e24 <low_level_output+0x150>)
 8011da8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8011daa:	4a1e      	ldr	r2, [pc, #120]	@ (8011e24 <low_level_output+0x150>)
 8011dac:	f107 030c 	add.w	r3, r7, #12
 8011db0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8011db2:	4a1c      	ldr	r2, [pc, #112]	@ (8011e24 <low_level_output+0x150>)
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8011db8:	6838      	ldr	r0, [r7, #0]
 8011dba:	f008 fbab 	bl	801a514 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8011dbe:	4919      	ldr	r1, [pc, #100]	@ (8011e24 <low_level_output+0x150>)
 8011dc0:	4819      	ldr	r0, [pc, #100]	@ (8011e28 <low_level_output+0x154>)
 8011dc2:	f7f7 ff9f 	bl	8009d04 <HAL_ETH_Transmit_IT>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d103      	bne.n	8011dd4 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8011dcc:	2300      	movs	r3, #0
 8011dce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011dd2:	e01b      	b.n	8011e0c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8011dd4:	4814      	ldr	r0, [pc, #80]	@ (8011e28 <low_level_output+0x154>)
 8011dd6:	f7f8 fd77 	bl	800a8c8 <HAL_ETH_GetError>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	f003 0302 	and.w	r3, r3, #2
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d00d      	beq.n	8011e00 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8011de4:	4b11      	ldr	r3, [pc, #68]	@ (8011e2c <low_level_output+0x158>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8011dec:	4618      	mov	r0, r3
 8011dee:	f000 fc7d 	bl	80126ec <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8011df2:	480d      	ldr	r0, [pc, #52]	@ (8011e28 <low_level_output+0x154>)
 8011df4:	f7f8 f90d 	bl	800a012 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8011df8:	23fe      	movs	r3, #254	@ 0xfe
 8011dfa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011dfe:	e005      	b.n	8011e0c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8011e00:	6838      	ldr	r0, [r7, #0]
 8011e02:	f008 fae1 	bl	801a3c8 <pbuf_free>
        errval =  ERR_IF;
 8011e06:	23f4      	movs	r3, #244	@ 0xf4
 8011e08:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8011e0c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011e10:	f113 0f02 	cmn.w	r3, #2
 8011e14:	d0d3      	beq.n	8011dbe <low_level_output+0xea>

  return errval;
 8011e16:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	3748      	adds	r7, #72	@ 0x48
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}
 8011e22:	bf00      	nop
 8011e24:	2400130c 	.word	0x2400130c
 8011e28:	2400125c 	.word	0x2400125c
 8011e2c:	24001258 	.word	0x24001258

08011e30 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b084      	sub	sp, #16
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8011e38:	2300      	movs	r3, #0
 8011e3a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8011e3c:	4b07      	ldr	r3, [pc, #28]	@ (8011e5c <low_level_input+0x2c>)
 8011e3e:	781b      	ldrb	r3, [r3, #0]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d105      	bne.n	8011e50 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8011e44:	f107 030c 	add.w	r3, r7, #12
 8011e48:	4619      	mov	r1, r3
 8011e4a:	4805      	ldr	r0, [pc, #20]	@ (8011e60 <low_level_input+0x30>)
 8011e4c:	f7f7 ffab 	bl	8009da6 <HAL_ETH_ReadData>
  }

  return p;
 8011e50:	68fb      	ldr	r3, [r7, #12]
}
 8011e52:	4618      	mov	r0, r3
 8011e54:	3710      	adds	r7, #16
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bd80      	pop	{r7, pc}
 8011e5a:	bf00      	nop
 8011e5c:	24001250 	.word	0x24001250
 8011e60:	2400125c 	.word	0x2400125c

08011e64 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b084      	sub	sp, #16
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8011e74:	4b0f      	ldr	r3, [pc, #60]	@ (8011eb4 <ethernetif_input+0x50>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	f04f 31ff 	mov.w	r1, #4294967295
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f000 fc35 	bl	80126ec <osSemaphoreWait>
 8011e82:	4603      	mov	r3, r0
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d1f5      	bne.n	8011e74 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8011e88:	68b8      	ldr	r0, [r7, #8]
 8011e8a:	f7ff ffd1 	bl	8011e30 <low_level_input>
 8011e8e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d00a      	beq.n	8011eac <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	691b      	ldr	r3, [r3, #16]
 8011e9a:	68b9      	ldr	r1, [r7, #8]
 8011e9c:	68f8      	ldr	r0, [r7, #12]
 8011e9e:	4798      	blx	r3
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d002      	beq.n	8011eac <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8011ea6:	68f8      	ldr	r0, [r7, #12]
 8011ea8:	f008 fa8e 	bl	801a3c8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d1ea      	bne.n	8011e88 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8011eb2:	e7df      	b.n	8011e74 <ethernetif_input+0x10>
 8011eb4:	24001254 	.word	0x24001254

08011eb8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b082      	sub	sp, #8
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d106      	bne.n	8011ed4 <ethernetif_init+0x1c>
 8011ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8011f00 <ethernetif_init+0x48>)
 8011ec8:	f240 2219 	movw	r2, #537	@ 0x219
 8011ecc:	490d      	ldr	r1, [pc, #52]	@ (8011f04 <ethernetif_init+0x4c>)
 8011ece:	480e      	ldr	r0, [pc, #56]	@ (8011f08 <ethernetif_init+0x50>)
 8011ed0:	f013 f9c8 	bl	8025264 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2273      	movs	r2, #115	@ 0x73
 8011ed8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2274      	movs	r2, #116	@ 0x74
 8011ee0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	4a09      	ldr	r2, [pc, #36]	@ (8011f0c <ethernetif_init+0x54>)
 8011ee8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	4a08      	ldr	r2, [pc, #32]	@ (8011f10 <ethernetif_init+0x58>)
 8011eee:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f7ff fd9d 	bl	8011a30 <low_level_init>

  return ERR_OK;
 8011ef6:	2300      	movs	r3, #0
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3708      	adds	r7, #8
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}
 8011f00:	080293fc 	.word	0x080293fc
 8011f04:	08029418 	.word	0x08029418
 8011f08:	08029428 	.word	0x08029428
 8011f0c:	08021ded 	.word	0x08021ded
 8011f10:	08011cd5 	.word	0x08011cd5

08011f14 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b084      	sub	sp, #16
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8011f20:	68f9      	ldr	r1, [r7, #12]
 8011f22:	4809      	ldr	r0, [pc, #36]	@ (8011f48 <pbuf_free_custom+0x34>)
 8011f24:	f007 fb56 	bl	80195d4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8011f28:	4b08      	ldr	r3, [pc, #32]	@ (8011f4c <pbuf_free_custom+0x38>)
 8011f2a:	781b      	ldrb	r3, [r3, #0]
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d107      	bne.n	8011f40 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8011f30:	4b06      	ldr	r3, [pc, #24]	@ (8011f4c <pbuf_free_custom+0x38>)
 8011f32:	2200      	movs	r2, #0
 8011f34:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8011f36:	4b06      	ldr	r3, [pc, #24]	@ (8011f50 <pbuf_free_custom+0x3c>)
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f000 fc24 	bl	8012788 <osSemaphoreRelease>
  }
}
 8011f40:	bf00      	nop
 8011f42:	3710      	adds	r7, #16
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}
 8011f48:	0802cdb4 	.word	0x0802cdb4
 8011f4c:	24001250 	.word	0x24001250
 8011f50:	24001254 	.word	0x24001254

08011f54 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8011f58:	f7f4 fd06 	bl	8006968 <HAL_GetTick>
 8011f5c:	4603      	mov	r3, r0
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	bd80      	pop	{r7, pc}
	...

08011f64 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b08e      	sub	sp, #56	@ 0x38
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011f70:	2200      	movs	r2, #0
 8011f72:	601a      	str	r2, [r3, #0]
 8011f74:	605a      	str	r2, [r3, #4]
 8011f76:	609a      	str	r2, [r3, #8]
 8011f78:	60da      	str	r2, [r3, #12]
 8011f7a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	4a5d      	ldr	r2, [pc, #372]	@ (80120f8 <HAL_ETH_MspInit+0x194>)
 8011f82:	4293      	cmp	r3, r2
 8011f84:	f040 80b3 	bne.w	80120ee <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8011f88:	4b5c      	ldr	r3, [pc, #368]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8011f8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011f8e:	4a5b      	ldr	r2, [pc, #364]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8011f90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011f94:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8011f98:	4b58      	ldr	r3, [pc, #352]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8011f9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011f9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011fa2:	623b      	str	r3, [r7, #32]
 8011fa4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8011fa6:	4b55      	ldr	r3, [pc, #340]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8011fa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011fac:	4a53      	ldr	r2, [pc, #332]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8011fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011fb2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8011fb6:	4b51      	ldr	r3, [pc, #324]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8011fb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011fc0:	61fb      	str	r3, [r7, #28]
 8011fc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8011fc4:	4b4d      	ldr	r3, [pc, #308]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8011fc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011fca:	4a4c      	ldr	r2, [pc, #304]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8011fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011fd0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8011fd4:	4b49      	ldr	r3, [pc, #292]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8011fd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011fde:	61bb      	str	r3, [r7, #24]
 8011fe0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011fe2:	4b46      	ldr	r3, [pc, #280]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8011fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011fe8:	4a44      	ldr	r2, [pc, #272]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8011fea:	f043 0304 	orr.w	r3, r3, #4
 8011fee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011ff2:	4b42      	ldr	r3, [pc, #264]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8011ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011ff8:	f003 0304 	and.w	r3, r3, #4
 8011ffc:	617b      	str	r3, [r7, #20]
 8011ffe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012000:	4b3e      	ldr	r3, [pc, #248]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8012002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012006:	4a3d      	ldr	r2, [pc, #244]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8012008:	f043 0301 	orr.w	r3, r3, #1
 801200c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8012010:	4b3a      	ldr	r3, [pc, #232]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8012012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012016:	f003 0301 	and.w	r3, r3, #1
 801201a:	613b      	str	r3, [r7, #16]
 801201c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801201e:	4b37      	ldr	r3, [pc, #220]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8012020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012024:	4a35      	ldr	r2, [pc, #212]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8012026:	f043 0302 	orr.w	r3, r3, #2
 801202a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801202e:	4b33      	ldr	r3, [pc, #204]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8012030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012034:	f003 0302 	and.w	r3, r3, #2
 8012038:	60fb      	str	r3, [r7, #12]
 801203a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801203c:	4b2f      	ldr	r3, [pc, #188]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 801203e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012042:	4a2e      	ldr	r2, [pc, #184]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 8012044:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012048:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801204c:	4b2b      	ldr	r3, [pc, #172]	@ (80120fc <HAL_ETH_MspInit+0x198>)
 801204e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012056:	60bb      	str	r3, [r7, #8]
 8012058:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 801205a:	2332      	movs	r3, #50	@ 0x32
 801205c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801205e:	2302      	movs	r3, #2
 8012060:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012062:	2300      	movs	r3, #0
 8012064:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012066:	2303      	movs	r3, #3
 8012068:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801206a:	230b      	movs	r3, #11
 801206c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801206e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012072:	4619      	mov	r1, r3
 8012074:	4822      	ldr	r0, [pc, #136]	@ (8012100 <HAL_ETH_MspInit+0x19c>)
 8012076:	f7f9 f9c3 	bl	800b400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 801207a:	2386      	movs	r3, #134	@ 0x86
 801207c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801207e:	2302      	movs	r3, #2
 8012080:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012082:	2300      	movs	r3, #0
 8012084:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012086:	2303      	movs	r3, #3
 8012088:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801208a:	230b      	movs	r3, #11
 801208c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801208e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012092:	4619      	mov	r1, r3
 8012094:	481b      	ldr	r0, [pc, #108]	@ (8012104 <HAL_ETH_MspInit+0x1a0>)
 8012096:	f7f9 f9b3 	bl	800b400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 801209a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 801209e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80120a0:	2302      	movs	r3, #2
 80120a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80120a4:	2300      	movs	r3, #0
 80120a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80120a8:	2303      	movs	r3, #3
 80120aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80120ac:	230b      	movs	r3, #11
 80120ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80120b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80120b4:	4619      	mov	r1, r3
 80120b6:	4814      	ldr	r0, [pc, #80]	@ (8012108 <HAL_ETH_MspInit+0x1a4>)
 80120b8:	f7f9 f9a2 	bl	800b400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80120bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80120c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80120c2:	2302      	movs	r3, #2
 80120c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80120c6:	2300      	movs	r3, #0
 80120c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80120ca:	2303      	movs	r3, #3
 80120cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80120ce:	230b      	movs	r3, #11
 80120d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80120d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80120d6:	4619      	mov	r1, r3
 80120d8:	480c      	ldr	r0, [pc, #48]	@ (801210c <HAL_ETH_MspInit+0x1a8>)
 80120da:	f7f9 f991 	bl	800b400 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80120de:	2200      	movs	r2, #0
 80120e0:	2105      	movs	r1, #5
 80120e2:	203d      	movs	r0, #61	@ 0x3d
 80120e4:	f7f4 fd48 	bl	8006b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80120e8:	203d      	movs	r0, #61	@ 0x3d
 80120ea:	f7f4 fd5f 	bl	8006bac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80120ee:	bf00      	nop
 80120f0:	3738      	adds	r7, #56	@ 0x38
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
 80120f6:	bf00      	nop
 80120f8:	40028000 	.word	0x40028000
 80120fc:	58024400 	.word	0x58024400
 8012100:	58020800 	.word	0x58020800
 8012104:	58020000 	.word	0x58020000
 8012108:	58020400 	.word	0x58020400
 801210c:	58021800 	.word	0x58021800

08012110 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8012114:	4802      	ldr	r0, [pc, #8]	@ (8012120 <ETH_PHY_IO_Init+0x10>)
 8012116:	f7f8 fb87 	bl	800a828 <HAL_ETH_SetMDIOClockRange>

  return 0;
 801211a:	2300      	movs	r3, #0
}
 801211c:	4618      	mov	r0, r3
 801211e:	bd80      	pop	{r7, pc}
 8012120:	2400125c 	.word	0x2400125c

08012124 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8012124:	b480      	push	{r7}
 8012126:	af00      	add	r7, sp, #0
  return 0;
 8012128:	2300      	movs	r3, #0
}
 801212a:	4618      	mov	r0, r3
 801212c:	46bd      	mov	sp, r7
 801212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012132:	4770      	bx	lr

08012134 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b084      	sub	sp, #16
 8012138:	af00      	add	r7, sp, #0
 801213a:	60f8      	str	r0, [r7, #12]
 801213c:	60b9      	str	r1, [r7, #8]
 801213e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	68ba      	ldr	r2, [r7, #8]
 8012144:	68f9      	ldr	r1, [r7, #12]
 8012146:	4807      	ldr	r0, [pc, #28]	@ (8012164 <ETH_PHY_IO_ReadReg+0x30>)
 8012148:	f7f8 f8d8 	bl	800a2fc <HAL_ETH_ReadPHYRegister>
 801214c:	4603      	mov	r3, r0
 801214e:	2b00      	cmp	r3, #0
 8012150:	d002      	beq.n	8012158 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8012152:	f04f 33ff 	mov.w	r3, #4294967295
 8012156:	e000      	b.n	801215a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8012158:	2300      	movs	r3, #0
}
 801215a:	4618      	mov	r0, r3
 801215c:	3710      	adds	r7, #16
 801215e:	46bd      	mov	sp, r7
 8012160:	bd80      	pop	{r7, pc}
 8012162:	bf00      	nop
 8012164:	2400125c 	.word	0x2400125c

08012168 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b084      	sub	sp, #16
 801216c:	af00      	add	r7, sp, #0
 801216e:	60f8      	str	r0, [r7, #12]
 8012170:	60b9      	str	r1, [r7, #8]
 8012172:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	68ba      	ldr	r2, [r7, #8]
 8012178:	68f9      	ldr	r1, [r7, #12]
 801217a:	4807      	ldr	r0, [pc, #28]	@ (8012198 <ETH_PHY_IO_WriteReg+0x30>)
 801217c:	f7f8 f912 	bl	800a3a4 <HAL_ETH_WritePHYRegister>
 8012180:	4603      	mov	r3, r0
 8012182:	2b00      	cmp	r3, #0
 8012184:	d002      	beq.n	801218c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8012186:	f04f 33ff 	mov.w	r3, #4294967295
 801218a:	e000      	b.n	801218e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 801218c:	2300      	movs	r3, #0
}
 801218e:	4618      	mov	r0, r3
 8012190:	3710      	adds	r7, #16
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}
 8012196:	bf00      	nop
 8012198:	2400125c 	.word	0x2400125c

0801219c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80121a0:	f7f4 fbe2 	bl	8006968 <HAL_GetTick>
 80121a4:	4603      	mov	r3, r0
}
 80121a6:	4618      	mov	r0, r3
 80121a8:	bd80      	pop	{r7, pc}
	...

080121ac <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b0a0      	sub	sp, #128	@ 0x80
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80121b4:	f107 0308 	add.w	r3, r7, #8
 80121b8:	2264      	movs	r2, #100	@ 0x64
 80121ba:	2100      	movs	r1, #0
 80121bc:	4618      	mov	r0, r3
 80121be:	f013 f93d 	bl	802543c <memset>
  int32_t PHYLinkState = 0;
 80121c2:	2300      	movs	r3, #0
 80121c4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80121c6:	2300      	movs	r3, #0
 80121c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80121ca:	2300      	movs	r3, #0
 80121cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80121ce:	2300      	movs	r3, #0
 80121d0:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80121d6:	483a      	ldr	r0, [pc, #232]	@ (80122c0 <ethernet_link_thread+0x114>)
 80121d8:	f7f4 faee 	bl	80067b8 <LAN8742_GetLinkState>
 80121dc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80121de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80121e4:	089b      	lsrs	r3, r3, #2
 80121e6:	f003 0301 	and.w	r3, r3, #1
 80121ea:	b2db      	uxtb	r3, r3
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d00c      	beq.n	801220a <ethernet_link_thread+0x5e>
 80121f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80121f2:	2b01      	cmp	r3, #1
 80121f4:	dc09      	bgt.n	801220a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80121f6:	4833      	ldr	r0, [pc, #204]	@ (80122c4 <ethernet_link_thread+0x118>)
 80121f8:	f7f7 fd0c 	bl	8009c14 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80121fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80121fe:	f007 fc6d 	bl	8019adc <netif_set_down>
    netif_set_link_down(netif);
 8012202:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012204:	f007 fcd0 	bl	8019ba8 <netif_set_link_down>
 8012208:	e055      	b.n	80122b6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 801220a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801220c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012210:	f003 0304 	and.w	r3, r3, #4
 8012214:	2b00      	cmp	r3, #0
 8012216:	d14e      	bne.n	80122b6 <ethernet_link_thread+0x10a>
 8012218:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801221a:	2b01      	cmp	r3, #1
 801221c:	dd4b      	ble.n	80122b6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 801221e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012220:	3b02      	subs	r3, #2
 8012222:	2b03      	cmp	r3, #3
 8012224:	d82a      	bhi.n	801227c <ethernet_link_thread+0xd0>
 8012226:	a201      	add	r2, pc, #4	@ (adr r2, 801222c <ethernet_link_thread+0x80>)
 8012228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801222c:	0801223d 	.word	0x0801223d
 8012230:	0801224f 	.word	0x0801224f
 8012234:	0801225f 	.word	0x0801225f
 8012238:	0801226f 	.word	0x0801226f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 801223c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012240:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8012242:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8012246:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8012248:	2301      	movs	r3, #1
 801224a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 801224c:	e017      	b.n	801227e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 801224e:	2300      	movs	r3, #0
 8012250:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8012252:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8012256:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8012258:	2301      	movs	r3, #1
 801225a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 801225c:	e00f      	b.n	801227e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 801225e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012262:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8012264:	2300      	movs	r3, #0
 8012266:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8012268:	2301      	movs	r3, #1
 801226a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 801226c:	e007      	b.n	801227e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 801226e:	2300      	movs	r3, #0
 8012270:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8012272:	2300      	movs	r3, #0
 8012274:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8012276:	2301      	movs	r3, #1
 8012278:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 801227a:	e000      	b.n	801227e <ethernet_link_thread+0xd2>
    default:
      break;
 801227c:	bf00      	nop
    }

    if(linkchanged)
 801227e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012280:	2b00      	cmp	r3, #0
 8012282:	d018      	beq.n	80122b6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8012284:	f107 0308 	add.w	r3, r7, #8
 8012288:	4619      	mov	r1, r3
 801228a:	480e      	ldr	r0, [pc, #56]	@ (80122c4 <ethernet_link_thread+0x118>)
 801228c:	f7f8 f8de 	bl	800a44c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8012290:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012292:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8012294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012296:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8012298:	f107 0308 	add.w	r3, r7, #8
 801229c:	4619      	mov	r1, r3
 801229e:	4809      	ldr	r0, [pc, #36]	@ (80122c4 <ethernet_link_thread+0x118>)
 80122a0:	f7f8 faa8 	bl	800a7f4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80122a4:	4807      	ldr	r0, [pc, #28]	@ (80122c4 <ethernet_link_thread+0x118>)
 80122a6:	f7f7 fc41 	bl	8009b2c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80122aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80122ac:	f007 fbaa 	bl	8019a04 <netif_set_up>
      netif_set_link_up(netif);
 80122b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80122b2:	f007 fc45 	bl	8019b40 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80122b6:	2064      	movs	r0, #100	@ 0x64
 80122b8:	f000 f936 	bl	8012528 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80122bc:	e78b      	b.n	80121d6 <ethernet_link_thread+0x2a>
 80122be:	bf00      	nop
 80122c0:	24001344 	.word	0x24001344
 80122c4:	2400125c 	.word	0x2400125c

080122c8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b086      	sub	sp, #24
 80122cc:	af02      	add	r7, sp, #8
 80122ce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80122d0:	4812      	ldr	r0, [pc, #72]	@ (801231c <HAL_ETH_RxAllocateCallback+0x54>)
 80122d2:	f007 f90b 	bl	80194ec <memp_malloc_pool>
 80122d6:	60f8      	str	r0, [r7, #12]
  if (p)
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d014      	beq.n	8012308 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	f103 0220 	add.w	r2, r3, #32
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	4a0d      	ldr	r2, [pc, #52]	@ (8012320 <HAL_ETH_RxAllocateCallback+0x58>)
 80122ec:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80122f6:	9201      	str	r2, [sp, #4]
 80122f8:	9300      	str	r3, [sp, #0]
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	2241      	movs	r2, #65	@ 0x41
 80122fe:	2100      	movs	r1, #0
 8012300:	2000      	movs	r0, #0
 8012302:	f007 fe75 	bl	8019ff0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8012306:	e005      	b.n	8012314 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8012308:	4b06      	ldr	r3, [pc, #24]	@ (8012324 <HAL_ETH_RxAllocateCallback+0x5c>)
 801230a:	2201      	movs	r2, #1
 801230c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2200      	movs	r2, #0
 8012312:	601a      	str	r2, [r3, #0]
}
 8012314:	bf00      	nop
 8012316:	3710      	adds	r7, #16
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}
 801231c:	0802cdb4 	.word	0x0802cdb4
 8012320:	08011f15 	.word	0x08011f15
 8012324:	24001250 	.word	0x24001250

08012328 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8012328:	b480      	push	{r7}
 801232a:	b08d      	sub	sp, #52	@ 0x34
 801232c:	af00      	add	r7, sp, #0
 801232e:	60f8      	str	r0, [r7, #12]
 8012330:	60b9      	str	r1, [r7, #8]
 8012332:	607a      	str	r2, [r7, #4]
 8012334:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 801233e:	2300      	movs	r3, #0
 8012340:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	3b20      	subs	r3, #32
 8012346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 8012348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801234a:	2200      	movs	r2, #0
 801234c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 801234e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012350:	2200      	movs	r2, #0
 8012352:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8012354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012356:	887a      	ldrh	r2, [r7, #2]
 8012358:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 801235a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d103      	bne.n	801236a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8012362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012366:	601a      	str	r2, [r3, #0]
 8012368:	e003      	b.n	8012372 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 801236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012370:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8012372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012374:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012376:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8012378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801237e:	e009      	b.n	8012394 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8012380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012382:	891a      	ldrh	r2, [r3, #8]
 8012384:	887b      	ldrh	r3, [r7, #2]
 8012386:	4413      	add	r3, r2
 8012388:	b29a      	uxth	r2, r3
 801238a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801238c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 801238e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012396:	2b00      	cmp	r3, #0
 8012398:	d1f2      	bne.n	8012380 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 801239a:	887b      	ldrh	r3, [r7, #2]
 801239c:	687a      	ldr	r2, [r7, #4]
 801239e:	623a      	str	r2, [r7, #32]
 80123a0:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80123a2:	69fb      	ldr	r3, [r7, #28]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	dd1d      	ble.n	80123e4 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80123a8:	6a3b      	ldr	r3, [r7, #32]
 80123aa:	f003 021f 	and.w	r2, r3, #31
 80123ae:	69fb      	ldr	r3, [r7, #28]
 80123b0:	4413      	add	r3, r2
 80123b2:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80123b4:	6a3b      	ldr	r3, [r7, #32]
 80123b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80123b8:	f3bf 8f4f 	dsb	sy
}
 80123bc:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80123be:	4a0d      	ldr	r2, [pc, #52]	@ (80123f4 <HAL_ETH_RxLinkCallback+0xcc>)
 80123c0:	697b      	ldr	r3, [r7, #20]
 80123c2:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80123c6:	697b      	ldr	r3, [r7, #20]
 80123c8:	3320      	adds	r3, #32
 80123ca:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80123cc:	69bb      	ldr	r3, [r7, #24]
 80123ce:	3b20      	subs	r3, #32
 80123d0:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80123d2:	69bb      	ldr	r3, [r7, #24]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	dcf2      	bgt.n	80123be <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 80123d8:	f3bf 8f4f 	dsb	sy
}
 80123dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80123de:	f3bf 8f6f 	isb	sy
}
 80123e2:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80123e4:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 80123e6:	bf00      	nop
 80123e8:	3734      	adds	r7, #52	@ 0x34
 80123ea:	46bd      	mov	sp, r7
 80123ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f0:	4770      	bx	lr
 80123f2:	bf00      	nop
 80123f4:	e000ed00 	.word	0xe000ed00

080123f8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b082      	sub	sp, #8
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f007 ffe1 	bl	801a3c8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8012406:	bf00      	nop
 8012408:	3708      	adds	r7, #8
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}

0801240e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801240e:	b480      	push	{r7}
 8012410:	b085      	sub	sp, #20
 8012412:	af00      	add	r7, sp, #0
 8012414:	4603      	mov	r3, r0
 8012416:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012418:	2300      	movs	r3, #0
 801241a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801241c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012420:	2b84      	cmp	r3, #132	@ 0x84
 8012422:	d005      	beq.n	8012430 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012424:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	4413      	add	r3, r2
 801242c:	3303      	adds	r3, #3
 801242e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012430:	68fb      	ldr	r3, [r7, #12]
}
 8012432:	4618      	mov	r0, r3
 8012434:	3714      	adds	r7, #20
 8012436:	46bd      	mov	sp, r7
 8012438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243c:	4770      	bx	lr

0801243e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801243e:	b480      	push	{r7}
 8012440:	b083      	sub	sp, #12
 8012442:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012444:	f3ef 8305 	mrs	r3, IPSR
 8012448:	607b      	str	r3, [r7, #4]
  return(result);
 801244a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801244c:	2b00      	cmp	r3, #0
 801244e:	bf14      	ite	ne
 8012450:	2301      	movne	r3, #1
 8012452:	2300      	moveq	r3, #0
 8012454:	b2db      	uxtb	r3, r3
}
 8012456:	4618      	mov	r0, r3
 8012458:	370c      	adds	r7, #12
 801245a:	46bd      	mov	sp, r7
 801245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012460:	4770      	bx	lr

08012462 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012462:	b580      	push	{r7, lr}
 8012464:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012466:	f001 fddb 	bl	8014020 <vTaskStartScheduler>
  
  return osOK;
 801246a:	2300      	movs	r3, #0
}
 801246c:	4618      	mov	r0, r3
 801246e:	bd80      	pop	{r7, pc}

08012470 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8012474:	f7ff ffe3 	bl	801243e <inHandlerMode>
 8012478:	4603      	mov	r3, r0
 801247a:	2b00      	cmp	r3, #0
 801247c:	d003      	beq.n	8012486 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 801247e:	f001 feed 	bl	801425c <xTaskGetTickCountFromISR>
 8012482:	4603      	mov	r3, r0
 8012484:	e002      	b.n	801248c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8012486:	f001 fed9 	bl	801423c <xTaskGetTickCount>
 801248a:	4603      	mov	r3, r0
  }
}
 801248c:	4618      	mov	r0, r3
 801248e:	bd80      	pop	{r7, pc}

08012490 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012492:	b089      	sub	sp, #36	@ 0x24
 8012494:	af04      	add	r7, sp, #16
 8012496:	6078      	str	r0, [r7, #4]
 8012498:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	695b      	ldr	r3, [r3, #20]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d020      	beq.n	80124e4 <osThreadCreate+0x54>
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	699b      	ldr	r3, [r3, #24]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d01c      	beq.n	80124e4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	685c      	ldr	r4, [r3, #4]
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	691e      	ldr	r6, [r3, #16]
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80124bc:	4618      	mov	r0, r3
 80124be:	f7ff ffa6 	bl	801240e <makeFreeRtosPriority>
 80124c2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	695b      	ldr	r3, [r3, #20]
 80124c8:	687a      	ldr	r2, [r7, #4]
 80124ca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80124cc:	9202      	str	r2, [sp, #8]
 80124ce:	9301      	str	r3, [sp, #4]
 80124d0:	9100      	str	r1, [sp, #0]
 80124d2:	683b      	ldr	r3, [r7, #0]
 80124d4:	4632      	mov	r2, r6
 80124d6:	4629      	mov	r1, r5
 80124d8:	4620      	mov	r0, r4
 80124da:	f001 fb3f 	bl	8013b5c <xTaskCreateStatic>
 80124de:	4603      	mov	r3, r0
 80124e0:	60fb      	str	r3, [r7, #12]
 80124e2:	e01c      	b.n	801251e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	685c      	ldr	r4, [r3, #4]
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80124f0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7ff ff88 	bl	801240e <makeFreeRtosPriority>
 80124fe:	4602      	mov	r2, r0
 8012500:	f107 030c 	add.w	r3, r7, #12
 8012504:	9301      	str	r3, [sp, #4]
 8012506:	9200      	str	r2, [sp, #0]
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	4632      	mov	r2, r6
 801250c:	4629      	mov	r1, r5
 801250e:	4620      	mov	r0, r4
 8012510:	f001 fb84 	bl	8013c1c <xTaskCreate>
 8012514:	4603      	mov	r3, r0
 8012516:	2b01      	cmp	r3, #1
 8012518:	d001      	beq.n	801251e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801251a:	2300      	movs	r3, #0
 801251c:	e000      	b.n	8012520 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801251e:	68fb      	ldr	r3, [r7, #12]
}
 8012520:	4618      	mov	r0, r3
 8012522:	3714      	adds	r7, #20
 8012524:	46bd      	mov	sp, r7
 8012526:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012528 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b084      	sub	sp, #16
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d001      	beq.n	801253e <osDelay+0x16>
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	e000      	b.n	8012540 <osDelay+0x18>
 801253e:	2301      	movs	r3, #1
 8012540:	4618      	mov	r0, r3
 8012542:	f001 fca3 	bl	8013e8c <vTaskDelay>
  
  return osOK;
 8012546:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012548:	4618      	mov	r0, r3
 801254a:	3710      	adds	r7, #16
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}

08012550 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b082      	sub	sp, #8
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	685b      	ldr	r3, [r3, #4]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d007      	beq.n	8012570 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	685b      	ldr	r3, [r3, #4]
 8012564:	4619      	mov	r1, r3
 8012566:	2001      	movs	r0, #1
 8012568:	f000 fc85 	bl	8012e76 <xQueueCreateMutexStatic>
 801256c:	4603      	mov	r3, r0
 801256e:	e003      	b.n	8012578 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012570:	2001      	movs	r0, #1
 8012572:	f000 fc68 	bl	8012e46 <xQueueCreateMutex>
 8012576:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012578:	4618      	mov	r0, r3
 801257a:	3708      	adds	r7, #8
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}

08012580 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b084      	sub	sp, #16
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
 8012588:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801258a:	2300      	movs	r3, #0
 801258c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d101      	bne.n	8012598 <osMutexWait+0x18>
    return osErrorParameter;
 8012594:	2380      	movs	r3, #128	@ 0x80
 8012596:	e03a      	b.n	801260e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8012598:	2300      	movs	r3, #0
 801259a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 801259c:	683b      	ldr	r3, [r7, #0]
 801259e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125a2:	d103      	bne.n	80125ac <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80125a4:	f04f 33ff 	mov.w	r3, #4294967295
 80125a8:	60fb      	str	r3, [r7, #12]
 80125aa:	e009      	b.n	80125c0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d006      	beq.n	80125c0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d101      	bne.n	80125c0 <osMutexWait+0x40>
      ticks = 1;
 80125bc:	2301      	movs	r3, #1
 80125be:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80125c0:	f7ff ff3d 	bl	801243e <inHandlerMode>
 80125c4:	4603      	mov	r3, r0
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d017      	beq.n	80125fa <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80125ca:	f107 0308 	add.w	r3, r7, #8
 80125ce:	461a      	mov	r2, r3
 80125d0:	2100      	movs	r1, #0
 80125d2:	6878      	ldr	r0, [r7, #4]
 80125d4:	f001 f88c 	bl	80136f0 <xQueueReceiveFromISR>
 80125d8:	4603      	mov	r3, r0
 80125da:	2b01      	cmp	r3, #1
 80125dc:	d001      	beq.n	80125e2 <osMutexWait+0x62>
      return osErrorOS;
 80125de:	23ff      	movs	r3, #255	@ 0xff
 80125e0:	e015      	b.n	801260e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80125e2:	68bb      	ldr	r3, [r7, #8]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d011      	beq.n	801260c <osMutexWait+0x8c>
 80125e8:	4b0b      	ldr	r3, [pc, #44]	@ (8012618 <osMutexWait+0x98>)
 80125ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80125ee:	601a      	str	r2, [r3, #0]
 80125f0:	f3bf 8f4f 	dsb	sy
 80125f4:	f3bf 8f6f 	isb	sy
 80125f8:	e008      	b.n	801260c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80125fa:	68f9      	ldr	r1, [r7, #12]
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	f000 ff67 	bl	80134d0 <xQueueSemaphoreTake>
 8012602:	4603      	mov	r3, r0
 8012604:	2b01      	cmp	r3, #1
 8012606:	d001      	beq.n	801260c <osMutexWait+0x8c>
    return osErrorOS;
 8012608:	23ff      	movs	r3, #255	@ 0xff
 801260a:	e000      	b.n	801260e <osMutexWait+0x8e>
  }
  
  return osOK;
 801260c:	2300      	movs	r3, #0
}
 801260e:	4618      	mov	r0, r3
 8012610:	3710      	adds	r7, #16
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}
 8012616:	bf00      	nop
 8012618:	e000ed04 	.word	0xe000ed04

0801261c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b084      	sub	sp, #16
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012624:	2300      	movs	r3, #0
 8012626:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012628:	2300      	movs	r3, #0
 801262a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 801262c:	f7ff ff07 	bl	801243e <inHandlerMode>
 8012630:	4603      	mov	r3, r0
 8012632:	2b00      	cmp	r3, #0
 8012634:	d016      	beq.n	8012664 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012636:	f107 0308 	add.w	r3, r7, #8
 801263a:	4619      	mov	r1, r3
 801263c:	6878      	ldr	r0, [r7, #4]
 801263e:	f000 fdd5 	bl	80131ec <xQueueGiveFromISR>
 8012642:	4603      	mov	r3, r0
 8012644:	2b01      	cmp	r3, #1
 8012646:	d001      	beq.n	801264c <osMutexRelease+0x30>
      return osErrorOS;
 8012648:	23ff      	movs	r3, #255	@ 0xff
 801264a:	e017      	b.n	801267c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801264c:	68bb      	ldr	r3, [r7, #8]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d013      	beq.n	801267a <osMutexRelease+0x5e>
 8012652:	4b0c      	ldr	r3, [pc, #48]	@ (8012684 <osMutexRelease+0x68>)
 8012654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012658:	601a      	str	r2, [r3, #0]
 801265a:	f3bf 8f4f 	dsb	sy
 801265e:	f3bf 8f6f 	isb	sy
 8012662:	e00a      	b.n	801267a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8012664:	2300      	movs	r3, #0
 8012666:	2200      	movs	r2, #0
 8012668:	2100      	movs	r1, #0
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f000 fc1e 	bl	8012eac <xQueueGenericSend>
 8012670:	4603      	mov	r3, r0
 8012672:	2b01      	cmp	r3, #1
 8012674:	d001      	beq.n	801267a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8012676:	23ff      	movs	r3, #255	@ 0xff
 8012678:	60fb      	str	r3, [r7, #12]
  }
  return result;
 801267a:	68fb      	ldr	r3, [r7, #12]
}
 801267c:	4618      	mov	r0, r3
 801267e:	3710      	adds	r7, #16
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}
 8012684:	e000ed04 	.word	0xe000ed04

08012688 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012688:	b580      	push	{r7, lr}
 801268a:	b086      	sub	sp, #24
 801268c:	af02      	add	r7, sp, #8
 801268e:	6078      	str	r0, [r7, #4]
 8012690:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	685b      	ldr	r3, [r3, #4]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d00f      	beq.n	80126ba <osSemaphoreCreate+0x32>
    if (count == 1) {
 801269a:	683b      	ldr	r3, [r7, #0]
 801269c:	2b01      	cmp	r3, #1
 801269e:	d10a      	bne.n	80126b6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	685b      	ldr	r3, [r3, #4]
 80126a4:	2203      	movs	r2, #3
 80126a6:	9200      	str	r2, [sp, #0]
 80126a8:	2200      	movs	r2, #0
 80126aa:	2100      	movs	r1, #0
 80126ac:	2001      	movs	r0, #1
 80126ae:	f000 fad9 	bl	8012c64 <xQueueGenericCreateStatic>
 80126b2:	4603      	mov	r3, r0
 80126b4:	e016      	b.n	80126e4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80126b6:	2300      	movs	r3, #0
 80126b8:	e014      	b.n	80126e4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	2b01      	cmp	r3, #1
 80126be:	d110      	bne.n	80126e2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80126c0:	2203      	movs	r2, #3
 80126c2:	2100      	movs	r1, #0
 80126c4:	2001      	movs	r0, #1
 80126c6:	f000 fb4a 	bl	8012d5e <xQueueGenericCreate>
 80126ca:	60f8      	str	r0, [r7, #12]
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d005      	beq.n	80126de <osSemaphoreCreate+0x56>
 80126d2:	2300      	movs	r3, #0
 80126d4:	2200      	movs	r2, #0
 80126d6:	2100      	movs	r1, #0
 80126d8:	68f8      	ldr	r0, [r7, #12]
 80126da:	f000 fbe7 	bl	8012eac <xQueueGenericSend>
      return sema;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	e000      	b.n	80126e4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80126e2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80126e4:	4618      	mov	r0, r3
 80126e6:	3710      	adds	r7, #16
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bd80      	pop	{r7, pc}

080126ec <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b084      	sub	sp, #16
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
 80126f4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80126f6:	2300      	movs	r3, #0
 80126f8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d101      	bne.n	8012704 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8012700:	2380      	movs	r3, #128	@ 0x80
 8012702:	e03a      	b.n	801277a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8012704:	2300      	movs	r3, #0
 8012706:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801270e:	d103      	bne.n	8012718 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8012710:	f04f 33ff 	mov.w	r3, #4294967295
 8012714:	60fb      	str	r3, [r7, #12]
 8012716:	e009      	b.n	801272c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d006      	beq.n	801272c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d101      	bne.n	801272c <osSemaphoreWait+0x40>
      ticks = 1;
 8012728:	2301      	movs	r3, #1
 801272a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 801272c:	f7ff fe87 	bl	801243e <inHandlerMode>
 8012730:	4603      	mov	r3, r0
 8012732:	2b00      	cmp	r3, #0
 8012734:	d017      	beq.n	8012766 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012736:	f107 0308 	add.w	r3, r7, #8
 801273a:	461a      	mov	r2, r3
 801273c:	2100      	movs	r1, #0
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f000 ffd6 	bl	80136f0 <xQueueReceiveFromISR>
 8012744:	4603      	mov	r3, r0
 8012746:	2b01      	cmp	r3, #1
 8012748:	d001      	beq.n	801274e <osSemaphoreWait+0x62>
      return osErrorOS;
 801274a:	23ff      	movs	r3, #255	@ 0xff
 801274c:	e015      	b.n	801277a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d011      	beq.n	8012778 <osSemaphoreWait+0x8c>
 8012754:	4b0b      	ldr	r3, [pc, #44]	@ (8012784 <osSemaphoreWait+0x98>)
 8012756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801275a:	601a      	str	r2, [r3, #0]
 801275c:	f3bf 8f4f 	dsb	sy
 8012760:	f3bf 8f6f 	isb	sy
 8012764:	e008      	b.n	8012778 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012766:	68f9      	ldr	r1, [r7, #12]
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f000 feb1 	bl	80134d0 <xQueueSemaphoreTake>
 801276e:	4603      	mov	r3, r0
 8012770:	2b01      	cmp	r3, #1
 8012772:	d001      	beq.n	8012778 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8012774:	23ff      	movs	r3, #255	@ 0xff
 8012776:	e000      	b.n	801277a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8012778:	2300      	movs	r3, #0
}
 801277a:	4618      	mov	r0, r3
 801277c:	3710      	adds	r7, #16
 801277e:	46bd      	mov	sp, r7
 8012780:	bd80      	pop	{r7, pc}
 8012782:	bf00      	nop
 8012784:	e000ed04 	.word	0xe000ed04

08012788 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b084      	sub	sp, #16
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012790:	2300      	movs	r3, #0
 8012792:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012794:	2300      	movs	r3, #0
 8012796:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8012798:	f7ff fe51 	bl	801243e <inHandlerMode>
 801279c:	4603      	mov	r3, r0
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d016      	beq.n	80127d0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80127a2:	f107 0308 	add.w	r3, r7, #8
 80127a6:	4619      	mov	r1, r3
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	f000 fd1f 	bl	80131ec <xQueueGiveFromISR>
 80127ae:	4603      	mov	r3, r0
 80127b0:	2b01      	cmp	r3, #1
 80127b2:	d001      	beq.n	80127b8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80127b4:	23ff      	movs	r3, #255	@ 0xff
 80127b6:	e017      	b.n	80127e8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80127b8:	68bb      	ldr	r3, [r7, #8]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d013      	beq.n	80127e6 <osSemaphoreRelease+0x5e>
 80127be:	4b0c      	ldr	r3, [pc, #48]	@ (80127f0 <osSemaphoreRelease+0x68>)
 80127c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80127c4:	601a      	str	r2, [r3, #0]
 80127c6:	f3bf 8f4f 	dsb	sy
 80127ca:	f3bf 8f6f 	isb	sy
 80127ce:	e00a      	b.n	80127e6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80127d0:	2300      	movs	r3, #0
 80127d2:	2200      	movs	r2, #0
 80127d4:	2100      	movs	r1, #0
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f000 fb68 	bl	8012eac <xQueueGenericSend>
 80127dc:	4603      	mov	r3, r0
 80127de:	2b01      	cmp	r3, #1
 80127e0:	d001      	beq.n	80127e6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80127e2:	23ff      	movs	r3, #255	@ 0xff
 80127e4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80127e6:	68fb      	ldr	r3, [r7, #12]
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3710      	adds	r7, #16
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}
 80127f0:	e000ed04 	.word	0xe000ed04

080127f4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80127fc:	f7ff fe1f 	bl	801243e <inHandlerMode>
 8012800:	4603      	mov	r3, r0
 8012802:	2b00      	cmp	r3, #0
 8012804:	d001      	beq.n	801280a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8012806:	2382      	movs	r3, #130	@ 0x82
 8012808:	e003      	b.n	8012812 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	f001 f830 	bl	8013870 <vQueueDelete>

  return osOK; 
 8012810:	2300      	movs	r3, #0
}
 8012812:	4618      	mov	r0, r3
 8012814:	3708      	adds	r7, #8
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}

0801281a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801281a:	b590      	push	{r4, r7, lr}
 801281c:	b085      	sub	sp, #20
 801281e:	af02      	add	r7, sp, #8
 8012820:	6078      	str	r0, [r7, #4]
 8012822:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	689b      	ldr	r3, [r3, #8]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d011      	beq.n	8012850 <osMessageCreate+0x36>
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	68db      	ldr	r3, [r3, #12]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d00d      	beq.n	8012850 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	6818      	ldr	r0, [r3, #0]
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	6859      	ldr	r1, [r3, #4]
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	689a      	ldr	r2, [r3, #8]
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	68db      	ldr	r3, [r3, #12]
 8012844:	2400      	movs	r4, #0
 8012846:	9400      	str	r4, [sp, #0]
 8012848:	f000 fa0c 	bl	8012c64 <xQueueGenericCreateStatic>
 801284c:	4603      	mov	r3, r0
 801284e:	e008      	b.n	8012862 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	6818      	ldr	r0, [r3, #0]
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	685b      	ldr	r3, [r3, #4]
 8012858:	2200      	movs	r2, #0
 801285a:	4619      	mov	r1, r3
 801285c:	f000 fa7f 	bl	8012d5e <xQueueGenericCreate>
 8012860:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8012862:	4618      	mov	r0, r3
 8012864:	370c      	adds	r7, #12
 8012866:	46bd      	mov	sp, r7
 8012868:	bd90      	pop	{r4, r7, pc}
	...

0801286c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b086      	sub	sp, #24
 8012870:	af00      	add	r7, sp, #0
 8012872:	60f8      	str	r0, [r7, #12]
 8012874:	60b9      	str	r1, [r7, #8]
 8012876:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012878:	2300      	movs	r3, #0
 801287a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8012880:	697b      	ldr	r3, [r7, #20]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d101      	bne.n	801288a <osMessagePut+0x1e>
    ticks = 1;
 8012886:	2301      	movs	r3, #1
 8012888:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801288a:	f7ff fdd8 	bl	801243e <inHandlerMode>
 801288e:	4603      	mov	r3, r0
 8012890:	2b00      	cmp	r3, #0
 8012892:	d018      	beq.n	80128c6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012894:	f107 0210 	add.w	r2, r7, #16
 8012898:	f107 0108 	add.w	r1, r7, #8
 801289c:	2300      	movs	r3, #0
 801289e:	68f8      	ldr	r0, [r7, #12]
 80128a0:	f000 fc06 	bl	80130b0 <xQueueGenericSendFromISR>
 80128a4:	4603      	mov	r3, r0
 80128a6:	2b01      	cmp	r3, #1
 80128a8:	d001      	beq.n	80128ae <osMessagePut+0x42>
      return osErrorOS;
 80128aa:	23ff      	movs	r3, #255	@ 0xff
 80128ac:	e018      	b.n	80128e0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80128ae:	693b      	ldr	r3, [r7, #16]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d014      	beq.n	80128de <osMessagePut+0x72>
 80128b4:	4b0c      	ldr	r3, [pc, #48]	@ (80128e8 <osMessagePut+0x7c>)
 80128b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80128ba:	601a      	str	r2, [r3, #0]
 80128bc:	f3bf 8f4f 	dsb	sy
 80128c0:	f3bf 8f6f 	isb	sy
 80128c4:	e00b      	b.n	80128de <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80128c6:	f107 0108 	add.w	r1, r7, #8
 80128ca:	2300      	movs	r3, #0
 80128cc:	697a      	ldr	r2, [r7, #20]
 80128ce:	68f8      	ldr	r0, [r7, #12]
 80128d0:	f000 faec 	bl	8012eac <xQueueGenericSend>
 80128d4:	4603      	mov	r3, r0
 80128d6:	2b01      	cmp	r3, #1
 80128d8:	d001      	beq.n	80128de <osMessagePut+0x72>
      return osErrorOS;
 80128da:	23ff      	movs	r3, #255	@ 0xff
 80128dc:	e000      	b.n	80128e0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80128de:	2300      	movs	r3, #0
}
 80128e0:	4618      	mov	r0, r3
 80128e2:	3718      	adds	r7, #24
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}
 80128e8:	e000ed04 	.word	0xe000ed04

080128ec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80128ec:	b590      	push	{r4, r7, lr}
 80128ee:	b08b      	sub	sp, #44	@ 0x2c
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	60f8      	str	r0, [r7, #12]
 80128f4:	60b9      	str	r1, [r7, #8]
 80128f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80128f8:	68bb      	ldr	r3, [r7, #8]
 80128fa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80128fc:	2300      	movs	r3, #0
 80128fe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d10a      	bne.n	801291c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8012906:	2380      	movs	r3, #128	@ 0x80
 8012908:	617b      	str	r3, [r7, #20]
    return event;
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	461c      	mov	r4, r3
 801290e:	f107 0314 	add.w	r3, r7, #20
 8012912:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801291a:	e054      	b.n	80129c6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801291c:	2300      	movs	r3, #0
 801291e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012920:	2300      	movs	r3, #0
 8012922:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	f1b3 3fff 	cmp.w	r3, #4294967295
 801292a:	d103      	bne.n	8012934 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 801292c:	f04f 33ff 	mov.w	r3, #4294967295
 8012930:	627b      	str	r3, [r7, #36]	@ 0x24
 8012932:	e009      	b.n	8012948 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d006      	beq.n	8012948 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 801293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012940:	2b00      	cmp	r3, #0
 8012942:	d101      	bne.n	8012948 <osMessageGet+0x5c>
      ticks = 1;
 8012944:	2301      	movs	r3, #1
 8012946:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012948:	f7ff fd79 	bl	801243e <inHandlerMode>
 801294c:	4603      	mov	r3, r0
 801294e:	2b00      	cmp	r3, #0
 8012950:	d01c      	beq.n	801298c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012952:	f107 0220 	add.w	r2, r7, #32
 8012956:	f107 0314 	add.w	r3, r7, #20
 801295a:	3304      	adds	r3, #4
 801295c:	4619      	mov	r1, r3
 801295e:	68b8      	ldr	r0, [r7, #8]
 8012960:	f000 fec6 	bl	80136f0 <xQueueReceiveFromISR>
 8012964:	4603      	mov	r3, r0
 8012966:	2b01      	cmp	r3, #1
 8012968:	d102      	bne.n	8012970 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801296a:	2310      	movs	r3, #16
 801296c:	617b      	str	r3, [r7, #20]
 801296e:	e001      	b.n	8012974 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8012970:	2300      	movs	r3, #0
 8012972:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012974:	6a3b      	ldr	r3, [r7, #32]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d01d      	beq.n	80129b6 <osMessageGet+0xca>
 801297a:	4b15      	ldr	r3, [pc, #84]	@ (80129d0 <osMessageGet+0xe4>)
 801297c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012980:	601a      	str	r2, [r3, #0]
 8012982:	f3bf 8f4f 	dsb	sy
 8012986:	f3bf 8f6f 	isb	sy
 801298a:	e014      	b.n	80129b6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801298c:	f107 0314 	add.w	r3, r7, #20
 8012990:	3304      	adds	r3, #4
 8012992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012994:	4619      	mov	r1, r3
 8012996:	68b8      	ldr	r0, [r7, #8]
 8012998:	f000 fcb8 	bl	801330c <xQueueReceive>
 801299c:	4603      	mov	r3, r0
 801299e:	2b01      	cmp	r3, #1
 80129a0:	d102      	bne.n	80129a8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80129a2:	2310      	movs	r3, #16
 80129a4:	617b      	str	r3, [r7, #20]
 80129a6:	e006      	b.n	80129b6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80129a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d101      	bne.n	80129b2 <osMessageGet+0xc6>
 80129ae:	2300      	movs	r3, #0
 80129b0:	e000      	b.n	80129b4 <osMessageGet+0xc8>
 80129b2:	2340      	movs	r3, #64	@ 0x40
 80129b4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	461c      	mov	r4, r3
 80129ba:	f107 0314 	add.w	r3, r7, #20
 80129be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80129c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80129c6:	68f8      	ldr	r0, [r7, #12]
 80129c8:	372c      	adds	r7, #44	@ 0x2c
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd90      	pop	{r4, r7, pc}
 80129ce:	bf00      	nop
 80129d0:	e000ed04 	.word	0xe000ed04

080129d4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b082      	sub	sp, #8
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80129dc:	f7ff fd2f 	bl	801243e <inHandlerMode>
 80129e0:	4603      	mov	r3, r0
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d004      	beq.n	80129f0 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f000 ff23 	bl	8013832 <uxQueueMessagesWaitingFromISR>
 80129ec:	4603      	mov	r3, r0
 80129ee:	e003      	b.n	80129f8 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f000 feff 	bl	80137f4 <uxQueueMessagesWaiting>
 80129f6:	4603      	mov	r3, r0
  }
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	3708      	adds	r7, #8
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}

08012a00 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b082      	sub	sp, #8
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8012a08:	f7ff fd19 	bl	801243e <inHandlerMode>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d001      	beq.n	8012a16 <osMessageDelete+0x16>
    return osErrorISR;
 8012a12:	2382      	movs	r3, #130	@ 0x82
 8012a14:	e003      	b.n	8012a1e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f000 ff2a 	bl	8013870 <vQueueDelete>

  return osOK; 
 8012a1c:	2300      	movs	r3, #0
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3708      	adds	r7, #8
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}

08012a26 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012a26:	b480      	push	{r7}
 8012a28:	b083      	sub	sp, #12
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	f103 0208 	add.w	r2, r3, #8
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8012a3e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	f103 0208 	add.w	r2, r3, #8
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f103 0208 	add.w	r2, r3, #8
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	2200      	movs	r2, #0
 8012a58:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012a5a:	bf00      	nop
 8012a5c:	370c      	adds	r7, #12
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a64:	4770      	bx	lr

08012a66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012a66:	b480      	push	{r7}
 8012a68:	b083      	sub	sp, #12
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	2200      	movs	r2, #0
 8012a72:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012a74:	bf00      	nop
 8012a76:	370c      	adds	r7, #12
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7e:	4770      	bx	lr

08012a80 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012a80:	b480      	push	{r7}
 8012a82:	b085      	sub	sp, #20
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
 8012a88:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	685b      	ldr	r3, [r3, #4]
 8012a8e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012a90:	683b      	ldr	r3, [r7, #0]
 8012a92:	68fa      	ldr	r2, [r7, #12]
 8012a94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	689a      	ldr	r2, [r3, #8]
 8012a9a:	683b      	ldr	r3, [r7, #0]
 8012a9c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	689b      	ldr	r3, [r3, #8]
 8012aa2:	683a      	ldr	r2, [r7, #0]
 8012aa4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	683a      	ldr	r2, [r7, #0]
 8012aaa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	687a      	ldr	r2, [r7, #4]
 8012ab0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	1c5a      	adds	r2, r3, #1
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	601a      	str	r2, [r3, #0]
}
 8012abc:	bf00      	nop
 8012abe:	3714      	adds	r7, #20
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac6:	4770      	bx	lr

08012ac8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b085      	sub	sp, #20
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ade:	d103      	bne.n	8012ae8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	691b      	ldr	r3, [r3, #16]
 8012ae4:	60fb      	str	r3, [r7, #12]
 8012ae6:	e00c      	b.n	8012b02 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	3308      	adds	r3, #8
 8012aec:	60fb      	str	r3, [r7, #12]
 8012aee:	e002      	b.n	8012af6 <vListInsert+0x2e>
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	60fb      	str	r3, [r7, #12]
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	685b      	ldr	r3, [r3, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	68ba      	ldr	r2, [r7, #8]
 8012afe:	429a      	cmp	r2, r3
 8012b00:	d2f6      	bcs.n	8012af0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	685a      	ldr	r2, [r3, #4]
 8012b06:	683b      	ldr	r3, [r7, #0]
 8012b08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012b0a:	683b      	ldr	r3, [r7, #0]
 8012b0c:	685b      	ldr	r3, [r3, #4]
 8012b0e:	683a      	ldr	r2, [r7, #0]
 8012b10:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	68fa      	ldr	r2, [r7, #12]
 8012b16:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	683a      	ldr	r2, [r7, #0]
 8012b1c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012b1e:	683b      	ldr	r3, [r7, #0]
 8012b20:	687a      	ldr	r2, [r7, #4]
 8012b22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	1c5a      	adds	r2, r3, #1
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	601a      	str	r2, [r3, #0]
}
 8012b2e:	bf00      	nop
 8012b30:	3714      	adds	r7, #20
 8012b32:	46bd      	mov	sp, r7
 8012b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b38:	4770      	bx	lr

08012b3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012b3a:	b480      	push	{r7}
 8012b3c:	b085      	sub	sp, #20
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	691b      	ldr	r3, [r3, #16]
 8012b46:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	685b      	ldr	r3, [r3, #4]
 8012b4c:	687a      	ldr	r2, [r7, #4]
 8012b4e:	6892      	ldr	r2, [r2, #8]
 8012b50:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	689b      	ldr	r3, [r3, #8]
 8012b56:	687a      	ldr	r2, [r7, #4]
 8012b58:	6852      	ldr	r2, [r2, #4]
 8012b5a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	685b      	ldr	r3, [r3, #4]
 8012b60:	687a      	ldr	r2, [r7, #4]
 8012b62:	429a      	cmp	r2, r3
 8012b64:	d103      	bne.n	8012b6e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	689a      	ldr	r2, [r3, #8]
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	2200      	movs	r2, #0
 8012b72:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	1e5a      	subs	r2, r3, #1
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	681b      	ldr	r3, [r3, #0]
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	3714      	adds	r7, #20
 8012b86:	46bd      	mov	sp, r7
 8012b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8c:	4770      	bx	lr
	...

08012b90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b084      	sub	sp, #16
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
 8012b98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d10b      	bne.n	8012bbc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ba8:	f383 8811 	msr	BASEPRI, r3
 8012bac:	f3bf 8f6f 	isb	sy
 8012bb0:	f3bf 8f4f 	dsb	sy
 8012bb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012bb6:	bf00      	nop
 8012bb8:	bf00      	nop
 8012bba:	e7fd      	b.n	8012bb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012bbc:	f002 f9b4 	bl	8014f28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	681a      	ldr	r2, [r3, #0]
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012bc8:	68f9      	ldr	r1, [r7, #12]
 8012bca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012bcc:	fb01 f303 	mul.w	r3, r1, r3
 8012bd0:	441a      	add	r2, r3
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	2200      	movs	r2, #0
 8012bda:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	681a      	ldr	r2, [r3, #0]
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	681a      	ldr	r2, [r3, #0]
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012bec:	3b01      	subs	r3, #1
 8012bee:	68f9      	ldr	r1, [r7, #12]
 8012bf0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012bf2:	fb01 f303 	mul.w	r3, r1, r3
 8012bf6:	441a      	add	r2, r3
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	22ff      	movs	r2, #255	@ 0xff
 8012c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	22ff      	movs	r2, #255	@ 0xff
 8012c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012c0c:	683b      	ldr	r3, [r7, #0]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d114      	bne.n	8012c3c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	691b      	ldr	r3, [r3, #16]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d01a      	beq.n	8012c50 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	3310      	adds	r3, #16
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f001 fc6a 	bl	80144f8 <xTaskRemoveFromEventList>
 8012c24:	4603      	mov	r3, r0
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d012      	beq.n	8012c50 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8012c60 <xQueueGenericReset+0xd0>)
 8012c2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c30:	601a      	str	r2, [r3, #0]
 8012c32:	f3bf 8f4f 	dsb	sy
 8012c36:	f3bf 8f6f 	isb	sy
 8012c3a:	e009      	b.n	8012c50 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	3310      	adds	r3, #16
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7ff fef0 	bl	8012a26 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	3324      	adds	r3, #36	@ 0x24
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f7ff feeb 	bl	8012a26 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012c50:	f002 f99c 	bl	8014f8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012c54:	2301      	movs	r3, #1
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	3710      	adds	r7, #16
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd80      	pop	{r7, pc}
 8012c5e:	bf00      	nop
 8012c60:	e000ed04 	.word	0xe000ed04

08012c64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b08e      	sub	sp, #56	@ 0x38
 8012c68:	af02      	add	r7, sp, #8
 8012c6a:	60f8      	str	r0, [r7, #12]
 8012c6c:	60b9      	str	r1, [r7, #8]
 8012c6e:	607a      	str	r2, [r7, #4]
 8012c70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d10b      	bne.n	8012c90 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8012c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c7c:	f383 8811 	msr	BASEPRI, r3
 8012c80:	f3bf 8f6f 	isb	sy
 8012c84:	f3bf 8f4f 	dsb	sy
 8012c88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012c8a:	bf00      	nop
 8012c8c:	bf00      	nop
 8012c8e:	e7fd      	b.n	8012c8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d10b      	bne.n	8012cae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8012c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c9a:	f383 8811 	msr	BASEPRI, r3
 8012c9e:	f3bf 8f6f 	isb	sy
 8012ca2:	f3bf 8f4f 	dsb	sy
 8012ca6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012ca8:	bf00      	nop
 8012caa:	bf00      	nop
 8012cac:	e7fd      	b.n	8012caa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d002      	beq.n	8012cba <xQueueGenericCreateStatic+0x56>
 8012cb4:	68bb      	ldr	r3, [r7, #8]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d001      	beq.n	8012cbe <xQueueGenericCreateStatic+0x5a>
 8012cba:	2301      	movs	r3, #1
 8012cbc:	e000      	b.n	8012cc0 <xQueueGenericCreateStatic+0x5c>
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d10b      	bne.n	8012cdc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8012cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cc8:	f383 8811 	msr	BASEPRI, r3
 8012ccc:	f3bf 8f6f 	isb	sy
 8012cd0:	f3bf 8f4f 	dsb	sy
 8012cd4:	623b      	str	r3, [r7, #32]
}
 8012cd6:	bf00      	nop
 8012cd8:	bf00      	nop
 8012cda:	e7fd      	b.n	8012cd8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d102      	bne.n	8012ce8 <xQueueGenericCreateStatic+0x84>
 8012ce2:	68bb      	ldr	r3, [r7, #8]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d101      	bne.n	8012cec <xQueueGenericCreateStatic+0x88>
 8012ce8:	2301      	movs	r3, #1
 8012cea:	e000      	b.n	8012cee <xQueueGenericCreateStatic+0x8a>
 8012cec:	2300      	movs	r3, #0
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d10b      	bne.n	8012d0a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8012cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cf6:	f383 8811 	msr	BASEPRI, r3
 8012cfa:	f3bf 8f6f 	isb	sy
 8012cfe:	f3bf 8f4f 	dsb	sy
 8012d02:	61fb      	str	r3, [r7, #28]
}
 8012d04:	bf00      	nop
 8012d06:	bf00      	nop
 8012d08:	e7fd      	b.n	8012d06 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012d0a:	2348      	movs	r3, #72	@ 0x48
 8012d0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	2b48      	cmp	r3, #72	@ 0x48
 8012d12:	d00b      	beq.n	8012d2c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8012d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d18:	f383 8811 	msr	BASEPRI, r3
 8012d1c:	f3bf 8f6f 	isb	sy
 8012d20:	f3bf 8f4f 	dsb	sy
 8012d24:	61bb      	str	r3, [r7, #24]
}
 8012d26:	bf00      	nop
 8012d28:	bf00      	nop
 8012d2a:	e7fd      	b.n	8012d28 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012d2c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012d2e:	683b      	ldr	r3, [r7, #0]
 8012d30:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8012d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d00d      	beq.n	8012d54 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d3a:	2201      	movs	r2, #1
 8012d3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012d40:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8012d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d46:	9300      	str	r3, [sp, #0]
 8012d48:	4613      	mov	r3, r2
 8012d4a:	687a      	ldr	r2, [r7, #4]
 8012d4c:	68b9      	ldr	r1, [r7, #8]
 8012d4e:	68f8      	ldr	r0, [r7, #12]
 8012d50:	f000 f840 	bl	8012dd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8012d56:	4618      	mov	r0, r3
 8012d58:	3730      	adds	r7, #48	@ 0x30
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}

08012d5e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012d5e:	b580      	push	{r7, lr}
 8012d60:	b08a      	sub	sp, #40	@ 0x28
 8012d62:	af02      	add	r7, sp, #8
 8012d64:	60f8      	str	r0, [r7, #12]
 8012d66:	60b9      	str	r1, [r7, #8]
 8012d68:	4613      	mov	r3, r2
 8012d6a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d10b      	bne.n	8012d8a <xQueueGenericCreate+0x2c>
	__asm volatile
 8012d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d76:	f383 8811 	msr	BASEPRI, r3
 8012d7a:	f3bf 8f6f 	isb	sy
 8012d7e:	f3bf 8f4f 	dsb	sy
 8012d82:	613b      	str	r3, [r7, #16]
}
 8012d84:	bf00      	nop
 8012d86:	bf00      	nop
 8012d88:	e7fd      	b.n	8012d86 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	68ba      	ldr	r2, [r7, #8]
 8012d8e:	fb02 f303 	mul.w	r3, r2, r3
 8012d92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012d94:	69fb      	ldr	r3, [r7, #28]
 8012d96:	3348      	adds	r3, #72	@ 0x48
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f002 f9e7 	bl	801516c <pvPortMalloc>
 8012d9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012da0:	69bb      	ldr	r3, [r7, #24]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d011      	beq.n	8012dca <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012da6:	69bb      	ldr	r3, [r7, #24]
 8012da8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	3348      	adds	r3, #72	@ 0x48
 8012dae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012db0:	69bb      	ldr	r3, [r7, #24]
 8012db2:	2200      	movs	r2, #0
 8012db4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012db8:	79fa      	ldrb	r2, [r7, #7]
 8012dba:	69bb      	ldr	r3, [r7, #24]
 8012dbc:	9300      	str	r3, [sp, #0]
 8012dbe:	4613      	mov	r3, r2
 8012dc0:	697a      	ldr	r2, [r7, #20]
 8012dc2:	68b9      	ldr	r1, [r7, #8]
 8012dc4:	68f8      	ldr	r0, [r7, #12]
 8012dc6:	f000 f805 	bl	8012dd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012dca:	69bb      	ldr	r3, [r7, #24]
	}
 8012dcc:	4618      	mov	r0, r3
 8012dce:	3720      	adds	r7, #32
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd80      	pop	{r7, pc}

08012dd4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b084      	sub	sp, #16
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	60f8      	str	r0, [r7, #12]
 8012ddc:	60b9      	str	r1, [r7, #8]
 8012dde:	607a      	str	r2, [r7, #4]
 8012de0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d103      	bne.n	8012df0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012de8:	69bb      	ldr	r3, [r7, #24]
 8012dea:	69ba      	ldr	r2, [r7, #24]
 8012dec:	601a      	str	r2, [r3, #0]
 8012dee:	e002      	b.n	8012df6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012df0:	69bb      	ldr	r3, [r7, #24]
 8012df2:	687a      	ldr	r2, [r7, #4]
 8012df4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012df6:	69bb      	ldr	r3, [r7, #24]
 8012df8:	68fa      	ldr	r2, [r7, #12]
 8012dfa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012dfc:	69bb      	ldr	r3, [r7, #24]
 8012dfe:	68ba      	ldr	r2, [r7, #8]
 8012e00:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012e02:	2101      	movs	r1, #1
 8012e04:	69b8      	ldr	r0, [r7, #24]
 8012e06:	f7ff fec3 	bl	8012b90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012e0a:	bf00      	nop
 8012e0c:	3710      	adds	r7, #16
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	bd80      	pop	{r7, pc}

08012e12 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012e12:	b580      	push	{r7, lr}
 8012e14:	b082      	sub	sp, #8
 8012e16:	af00      	add	r7, sp, #0
 8012e18:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d00e      	beq.n	8012e3e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2200      	movs	r2, #0
 8012e24:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	2200      	movs	r2, #0
 8012e2a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2200      	movs	r2, #0
 8012e30:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012e32:	2300      	movs	r3, #0
 8012e34:	2200      	movs	r2, #0
 8012e36:	2100      	movs	r1, #0
 8012e38:	6878      	ldr	r0, [r7, #4]
 8012e3a:	f000 f837 	bl	8012eac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012e3e:	bf00      	nop
 8012e40:	3708      	adds	r7, #8
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd80      	pop	{r7, pc}

08012e46 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012e46:	b580      	push	{r7, lr}
 8012e48:	b086      	sub	sp, #24
 8012e4a:	af00      	add	r7, sp, #0
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012e50:	2301      	movs	r3, #1
 8012e52:	617b      	str	r3, [r7, #20]
 8012e54:	2300      	movs	r3, #0
 8012e56:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012e58:	79fb      	ldrb	r3, [r7, #7]
 8012e5a:	461a      	mov	r2, r3
 8012e5c:	6939      	ldr	r1, [r7, #16]
 8012e5e:	6978      	ldr	r0, [r7, #20]
 8012e60:	f7ff ff7d 	bl	8012d5e <xQueueGenericCreate>
 8012e64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012e66:	68f8      	ldr	r0, [r7, #12]
 8012e68:	f7ff ffd3 	bl	8012e12 <prvInitialiseMutex>

		return xNewQueue;
 8012e6c:	68fb      	ldr	r3, [r7, #12]
	}
 8012e6e:	4618      	mov	r0, r3
 8012e70:	3718      	adds	r7, #24
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd80      	pop	{r7, pc}

08012e76 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012e76:	b580      	push	{r7, lr}
 8012e78:	b088      	sub	sp, #32
 8012e7a:	af02      	add	r7, sp, #8
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	6039      	str	r1, [r7, #0]
 8012e80:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012e82:	2301      	movs	r3, #1
 8012e84:	617b      	str	r3, [r7, #20]
 8012e86:	2300      	movs	r3, #0
 8012e88:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012e8a:	79fb      	ldrb	r3, [r7, #7]
 8012e8c:	9300      	str	r3, [sp, #0]
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	2200      	movs	r2, #0
 8012e92:	6939      	ldr	r1, [r7, #16]
 8012e94:	6978      	ldr	r0, [r7, #20]
 8012e96:	f7ff fee5 	bl	8012c64 <xQueueGenericCreateStatic>
 8012e9a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012e9c:	68f8      	ldr	r0, [r7, #12]
 8012e9e:	f7ff ffb8 	bl	8012e12 <prvInitialiseMutex>

		return xNewQueue;
 8012ea2:	68fb      	ldr	r3, [r7, #12]
	}
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	3718      	adds	r7, #24
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}

08012eac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b08e      	sub	sp, #56	@ 0x38
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	60f8      	str	r0, [r7, #12]
 8012eb4:	60b9      	str	r1, [r7, #8]
 8012eb6:	607a      	str	r2, [r7, #4]
 8012eb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d10b      	bne.n	8012ee0 <xQueueGenericSend+0x34>
	__asm volatile
 8012ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ecc:	f383 8811 	msr	BASEPRI, r3
 8012ed0:	f3bf 8f6f 	isb	sy
 8012ed4:	f3bf 8f4f 	dsb	sy
 8012ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012eda:	bf00      	nop
 8012edc:	bf00      	nop
 8012ede:	e7fd      	b.n	8012edc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012ee0:	68bb      	ldr	r3, [r7, #8]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d103      	bne.n	8012eee <xQueueGenericSend+0x42>
 8012ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d101      	bne.n	8012ef2 <xQueueGenericSend+0x46>
 8012eee:	2301      	movs	r3, #1
 8012ef0:	e000      	b.n	8012ef4 <xQueueGenericSend+0x48>
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d10b      	bne.n	8012f10 <xQueueGenericSend+0x64>
	__asm volatile
 8012ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012efc:	f383 8811 	msr	BASEPRI, r3
 8012f00:	f3bf 8f6f 	isb	sy
 8012f04:	f3bf 8f4f 	dsb	sy
 8012f08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012f0a:	bf00      	nop
 8012f0c:	bf00      	nop
 8012f0e:	e7fd      	b.n	8012f0c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	2b02      	cmp	r3, #2
 8012f14:	d103      	bne.n	8012f1e <xQueueGenericSend+0x72>
 8012f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f1a:	2b01      	cmp	r3, #1
 8012f1c:	d101      	bne.n	8012f22 <xQueueGenericSend+0x76>
 8012f1e:	2301      	movs	r3, #1
 8012f20:	e000      	b.n	8012f24 <xQueueGenericSend+0x78>
 8012f22:	2300      	movs	r3, #0
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d10b      	bne.n	8012f40 <xQueueGenericSend+0x94>
	__asm volatile
 8012f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f2c:	f383 8811 	msr	BASEPRI, r3
 8012f30:	f3bf 8f6f 	isb	sy
 8012f34:	f3bf 8f4f 	dsb	sy
 8012f38:	623b      	str	r3, [r7, #32]
}
 8012f3a:	bf00      	nop
 8012f3c:	bf00      	nop
 8012f3e:	e7fd      	b.n	8012f3c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012f40:	f001 fc9a 	bl	8014878 <xTaskGetSchedulerState>
 8012f44:	4603      	mov	r3, r0
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d102      	bne.n	8012f50 <xQueueGenericSend+0xa4>
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d101      	bne.n	8012f54 <xQueueGenericSend+0xa8>
 8012f50:	2301      	movs	r3, #1
 8012f52:	e000      	b.n	8012f56 <xQueueGenericSend+0xaa>
 8012f54:	2300      	movs	r3, #0
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d10b      	bne.n	8012f72 <xQueueGenericSend+0xc6>
	__asm volatile
 8012f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f5e:	f383 8811 	msr	BASEPRI, r3
 8012f62:	f3bf 8f6f 	isb	sy
 8012f66:	f3bf 8f4f 	dsb	sy
 8012f6a:	61fb      	str	r3, [r7, #28]
}
 8012f6c:	bf00      	nop
 8012f6e:	bf00      	nop
 8012f70:	e7fd      	b.n	8012f6e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012f72:	f001 ffd9 	bl	8014f28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f7e:	429a      	cmp	r2, r3
 8012f80:	d302      	bcc.n	8012f88 <xQueueGenericSend+0xdc>
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	2b02      	cmp	r3, #2
 8012f86:	d129      	bne.n	8012fdc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012f88:	683a      	ldr	r2, [r7, #0]
 8012f8a:	68b9      	ldr	r1, [r7, #8]
 8012f8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012f8e:	f000 fcab 	bl	80138e8 <prvCopyDataToQueue>
 8012f92:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d010      	beq.n	8012fbe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f9e:	3324      	adds	r3, #36	@ 0x24
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f001 faa9 	bl	80144f8 <xTaskRemoveFromEventList>
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d013      	beq.n	8012fd4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012fac:	4b3f      	ldr	r3, [pc, #252]	@ (80130ac <xQueueGenericSend+0x200>)
 8012fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012fb2:	601a      	str	r2, [r3, #0]
 8012fb4:	f3bf 8f4f 	dsb	sy
 8012fb8:	f3bf 8f6f 	isb	sy
 8012fbc:	e00a      	b.n	8012fd4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d007      	beq.n	8012fd4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012fc4:	4b39      	ldr	r3, [pc, #228]	@ (80130ac <xQueueGenericSend+0x200>)
 8012fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012fca:	601a      	str	r2, [r3, #0]
 8012fcc:	f3bf 8f4f 	dsb	sy
 8012fd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012fd4:	f001 ffda 	bl	8014f8c <vPortExitCritical>
				return pdPASS;
 8012fd8:	2301      	movs	r3, #1
 8012fda:	e063      	b.n	80130a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d103      	bne.n	8012fea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012fe2:	f001 ffd3 	bl	8014f8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	e05c      	b.n	80130a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d106      	bne.n	8012ffe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012ff0:	f107 0314 	add.w	r3, r7, #20
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f001 fae3 	bl	80145c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012ffe:	f001 ffc5 	bl	8014f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013002:	f001 f86f 	bl	80140e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013006:	f001 ff8f 	bl	8014f28 <vPortEnterCritical>
 801300a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801300c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013010:	b25b      	sxtb	r3, r3
 8013012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013016:	d103      	bne.n	8013020 <xQueueGenericSend+0x174>
 8013018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801301a:	2200      	movs	r2, #0
 801301c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013022:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013026:	b25b      	sxtb	r3, r3
 8013028:	f1b3 3fff 	cmp.w	r3, #4294967295
 801302c:	d103      	bne.n	8013036 <xQueueGenericSend+0x18a>
 801302e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013030:	2200      	movs	r2, #0
 8013032:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013036:	f001 ffa9 	bl	8014f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801303a:	1d3a      	adds	r2, r7, #4
 801303c:	f107 0314 	add.w	r3, r7, #20
 8013040:	4611      	mov	r1, r2
 8013042:	4618      	mov	r0, r3
 8013044:	f001 fad2 	bl	80145ec <xTaskCheckForTimeOut>
 8013048:	4603      	mov	r3, r0
 801304a:	2b00      	cmp	r3, #0
 801304c:	d124      	bne.n	8013098 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801304e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013050:	f000 fd42 	bl	8013ad8 <prvIsQueueFull>
 8013054:	4603      	mov	r3, r0
 8013056:	2b00      	cmp	r3, #0
 8013058:	d018      	beq.n	801308c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801305a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801305c:	3310      	adds	r3, #16
 801305e:	687a      	ldr	r2, [r7, #4]
 8013060:	4611      	mov	r1, r2
 8013062:	4618      	mov	r0, r3
 8013064:	f001 fa22 	bl	80144ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013068:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801306a:	f000 fccd 	bl	8013a08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801306e:	f001 f847 	bl	8014100 <xTaskResumeAll>
 8013072:	4603      	mov	r3, r0
 8013074:	2b00      	cmp	r3, #0
 8013076:	f47f af7c 	bne.w	8012f72 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801307a:	4b0c      	ldr	r3, [pc, #48]	@ (80130ac <xQueueGenericSend+0x200>)
 801307c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013080:	601a      	str	r2, [r3, #0]
 8013082:	f3bf 8f4f 	dsb	sy
 8013086:	f3bf 8f6f 	isb	sy
 801308a:	e772      	b.n	8012f72 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801308c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801308e:	f000 fcbb 	bl	8013a08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013092:	f001 f835 	bl	8014100 <xTaskResumeAll>
 8013096:	e76c      	b.n	8012f72 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013098:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801309a:	f000 fcb5 	bl	8013a08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801309e:	f001 f82f 	bl	8014100 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80130a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80130a4:	4618      	mov	r0, r3
 80130a6:	3738      	adds	r7, #56	@ 0x38
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}
 80130ac:	e000ed04 	.word	0xe000ed04

080130b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b090      	sub	sp, #64	@ 0x40
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	60f8      	str	r0, [r7, #12]
 80130b8:	60b9      	str	r1, [r7, #8]
 80130ba:	607a      	str	r2, [r7, #4]
 80130bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80130c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d10b      	bne.n	80130e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80130c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130cc:	f383 8811 	msr	BASEPRI, r3
 80130d0:	f3bf 8f6f 	isb	sy
 80130d4:	f3bf 8f4f 	dsb	sy
 80130d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80130da:	bf00      	nop
 80130dc:	bf00      	nop
 80130de:	e7fd      	b.n	80130dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80130e0:	68bb      	ldr	r3, [r7, #8]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d103      	bne.n	80130ee <xQueueGenericSendFromISR+0x3e>
 80130e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d101      	bne.n	80130f2 <xQueueGenericSendFromISR+0x42>
 80130ee:	2301      	movs	r3, #1
 80130f0:	e000      	b.n	80130f4 <xQueueGenericSendFromISR+0x44>
 80130f2:	2300      	movs	r3, #0
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d10b      	bne.n	8013110 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80130f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130fc:	f383 8811 	msr	BASEPRI, r3
 8013100:	f3bf 8f6f 	isb	sy
 8013104:	f3bf 8f4f 	dsb	sy
 8013108:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801310a:	bf00      	nop
 801310c:	bf00      	nop
 801310e:	e7fd      	b.n	801310c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	2b02      	cmp	r3, #2
 8013114:	d103      	bne.n	801311e <xQueueGenericSendFromISR+0x6e>
 8013116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801311a:	2b01      	cmp	r3, #1
 801311c:	d101      	bne.n	8013122 <xQueueGenericSendFromISR+0x72>
 801311e:	2301      	movs	r3, #1
 8013120:	e000      	b.n	8013124 <xQueueGenericSendFromISR+0x74>
 8013122:	2300      	movs	r3, #0
 8013124:	2b00      	cmp	r3, #0
 8013126:	d10b      	bne.n	8013140 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8013128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801312c:	f383 8811 	msr	BASEPRI, r3
 8013130:	f3bf 8f6f 	isb	sy
 8013134:	f3bf 8f4f 	dsb	sy
 8013138:	623b      	str	r3, [r7, #32]
}
 801313a:	bf00      	nop
 801313c:	bf00      	nop
 801313e:	e7fd      	b.n	801313c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013140:	f001 ffd2 	bl	80150e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013144:	f3ef 8211 	mrs	r2, BASEPRI
 8013148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801314c:	f383 8811 	msr	BASEPRI, r3
 8013150:	f3bf 8f6f 	isb	sy
 8013154:	f3bf 8f4f 	dsb	sy
 8013158:	61fa      	str	r2, [r7, #28]
 801315a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801315c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801315e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013168:	429a      	cmp	r2, r3
 801316a:	d302      	bcc.n	8013172 <xQueueGenericSendFromISR+0xc2>
 801316c:	683b      	ldr	r3, [r7, #0]
 801316e:	2b02      	cmp	r3, #2
 8013170:	d12f      	bne.n	80131d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013174:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013178:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801317c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801317e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013180:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013182:	683a      	ldr	r2, [r7, #0]
 8013184:	68b9      	ldr	r1, [r7, #8]
 8013186:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013188:	f000 fbae 	bl	80138e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801318c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8013190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013194:	d112      	bne.n	80131bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801319a:	2b00      	cmp	r3, #0
 801319c:	d016      	beq.n	80131cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801319e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131a0:	3324      	adds	r3, #36	@ 0x24
 80131a2:	4618      	mov	r0, r3
 80131a4:	f001 f9a8 	bl	80144f8 <xTaskRemoveFromEventList>
 80131a8:	4603      	mov	r3, r0
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d00e      	beq.n	80131cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d00b      	beq.n	80131cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2201      	movs	r2, #1
 80131b8:	601a      	str	r2, [r3, #0]
 80131ba:	e007      	b.n	80131cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80131bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80131c0:	3301      	adds	r3, #1
 80131c2:	b2db      	uxtb	r3, r3
 80131c4:	b25a      	sxtb	r2, r3
 80131c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80131cc:	2301      	movs	r3, #1
 80131ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80131d0:	e001      	b.n	80131d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80131d2:	2300      	movs	r3, #0
 80131d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80131e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80131e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3740      	adds	r7, #64	@ 0x40
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}

080131ec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b08e      	sub	sp, #56	@ 0x38
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
 80131f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80131fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d10b      	bne.n	8013218 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8013200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013204:	f383 8811 	msr	BASEPRI, r3
 8013208:	f3bf 8f6f 	isb	sy
 801320c:	f3bf 8f4f 	dsb	sy
 8013210:	623b      	str	r3, [r7, #32]
}
 8013212:	bf00      	nop
 8013214:	bf00      	nop
 8013216:	e7fd      	b.n	8013214 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801321c:	2b00      	cmp	r3, #0
 801321e:	d00b      	beq.n	8013238 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8013220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013224:	f383 8811 	msr	BASEPRI, r3
 8013228:	f3bf 8f6f 	isb	sy
 801322c:	f3bf 8f4f 	dsb	sy
 8013230:	61fb      	str	r3, [r7, #28]
}
 8013232:	bf00      	nop
 8013234:	bf00      	nop
 8013236:	e7fd      	b.n	8013234 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d103      	bne.n	8013248 <xQueueGiveFromISR+0x5c>
 8013240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013242:	689b      	ldr	r3, [r3, #8]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d101      	bne.n	801324c <xQueueGiveFromISR+0x60>
 8013248:	2301      	movs	r3, #1
 801324a:	e000      	b.n	801324e <xQueueGiveFromISR+0x62>
 801324c:	2300      	movs	r3, #0
 801324e:	2b00      	cmp	r3, #0
 8013250:	d10b      	bne.n	801326a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8013252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013256:	f383 8811 	msr	BASEPRI, r3
 801325a:	f3bf 8f6f 	isb	sy
 801325e:	f3bf 8f4f 	dsb	sy
 8013262:	61bb      	str	r3, [r7, #24]
}
 8013264:	bf00      	nop
 8013266:	bf00      	nop
 8013268:	e7fd      	b.n	8013266 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801326a:	f001 ff3d 	bl	80150e8 <vPortValidateInterruptPriority>
	__asm volatile
 801326e:	f3ef 8211 	mrs	r2, BASEPRI
 8013272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013276:	f383 8811 	msr	BASEPRI, r3
 801327a:	f3bf 8f6f 	isb	sy
 801327e:	f3bf 8f4f 	dsb	sy
 8013282:	617a      	str	r2, [r7, #20]
 8013284:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013286:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013288:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801328a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801328c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801328e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013294:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013296:	429a      	cmp	r2, r3
 8013298:	d22b      	bcs.n	80132f2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801329a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801329c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80132a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80132a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132a6:	1c5a      	adds	r2, r3, #1
 80132a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80132ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80132b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132b4:	d112      	bne.n	80132dc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80132b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d016      	beq.n	80132ec <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80132be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132c0:	3324      	adds	r3, #36	@ 0x24
 80132c2:	4618      	mov	r0, r3
 80132c4:	f001 f918 	bl	80144f8 <xTaskRemoveFromEventList>
 80132c8:	4603      	mov	r3, r0
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d00e      	beq.n	80132ec <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d00b      	beq.n	80132ec <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	2201      	movs	r2, #1
 80132d8:	601a      	str	r2, [r3, #0]
 80132da:	e007      	b.n	80132ec <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80132dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80132e0:	3301      	adds	r3, #1
 80132e2:	b2db      	uxtb	r3, r3
 80132e4:	b25a      	sxtb	r2, r3
 80132e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80132ec:	2301      	movs	r3, #1
 80132ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80132f0:	e001      	b.n	80132f6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80132f2:	2300      	movs	r3, #0
 80132f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80132f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132f8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	f383 8811 	msr	BASEPRI, r3
}
 8013300:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013304:	4618      	mov	r0, r3
 8013306:	3738      	adds	r7, #56	@ 0x38
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}

0801330c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b08c      	sub	sp, #48	@ 0x30
 8013310:	af00      	add	r7, sp, #0
 8013312:	60f8      	str	r0, [r7, #12]
 8013314:	60b9      	str	r1, [r7, #8]
 8013316:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013318:	2300      	movs	r3, #0
 801331a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013322:	2b00      	cmp	r3, #0
 8013324:	d10b      	bne.n	801333e <xQueueReceive+0x32>
	__asm volatile
 8013326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801332a:	f383 8811 	msr	BASEPRI, r3
 801332e:	f3bf 8f6f 	isb	sy
 8013332:	f3bf 8f4f 	dsb	sy
 8013336:	623b      	str	r3, [r7, #32]
}
 8013338:	bf00      	nop
 801333a:	bf00      	nop
 801333c:	e7fd      	b.n	801333a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801333e:	68bb      	ldr	r3, [r7, #8]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d103      	bne.n	801334c <xQueueReceive+0x40>
 8013344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013348:	2b00      	cmp	r3, #0
 801334a:	d101      	bne.n	8013350 <xQueueReceive+0x44>
 801334c:	2301      	movs	r3, #1
 801334e:	e000      	b.n	8013352 <xQueueReceive+0x46>
 8013350:	2300      	movs	r3, #0
 8013352:	2b00      	cmp	r3, #0
 8013354:	d10b      	bne.n	801336e <xQueueReceive+0x62>
	__asm volatile
 8013356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801335a:	f383 8811 	msr	BASEPRI, r3
 801335e:	f3bf 8f6f 	isb	sy
 8013362:	f3bf 8f4f 	dsb	sy
 8013366:	61fb      	str	r3, [r7, #28]
}
 8013368:	bf00      	nop
 801336a:	bf00      	nop
 801336c:	e7fd      	b.n	801336a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801336e:	f001 fa83 	bl	8014878 <xTaskGetSchedulerState>
 8013372:	4603      	mov	r3, r0
 8013374:	2b00      	cmp	r3, #0
 8013376:	d102      	bne.n	801337e <xQueueReceive+0x72>
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d101      	bne.n	8013382 <xQueueReceive+0x76>
 801337e:	2301      	movs	r3, #1
 8013380:	e000      	b.n	8013384 <xQueueReceive+0x78>
 8013382:	2300      	movs	r3, #0
 8013384:	2b00      	cmp	r3, #0
 8013386:	d10b      	bne.n	80133a0 <xQueueReceive+0x94>
	__asm volatile
 8013388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801338c:	f383 8811 	msr	BASEPRI, r3
 8013390:	f3bf 8f6f 	isb	sy
 8013394:	f3bf 8f4f 	dsb	sy
 8013398:	61bb      	str	r3, [r7, #24]
}
 801339a:	bf00      	nop
 801339c:	bf00      	nop
 801339e:	e7fd      	b.n	801339c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80133a0:	f001 fdc2 	bl	8014f28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80133aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d01f      	beq.n	80133f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80133b0:	68b9      	ldr	r1, [r7, #8]
 80133b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80133b4:	f000 fb02 	bl	80139bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80133b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133ba:	1e5a      	subs	r2, r3, #1
 80133bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133c2:	691b      	ldr	r3, [r3, #16]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d00f      	beq.n	80133e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133ca:	3310      	adds	r3, #16
 80133cc:	4618      	mov	r0, r3
 80133ce:	f001 f893 	bl	80144f8 <xTaskRemoveFromEventList>
 80133d2:	4603      	mov	r3, r0
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d007      	beq.n	80133e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80133d8:	4b3c      	ldr	r3, [pc, #240]	@ (80134cc <xQueueReceive+0x1c0>)
 80133da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80133de:	601a      	str	r2, [r3, #0]
 80133e0:	f3bf 8f4f 	dsb	sy
 80133e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80133e8:	f001 fdd0 	bl	8014f8c <vPortExitCritical>
				return pdPASS;
 80133ec:	2301      	movs	r3, #1
 80133ee:	e069      	b.n	80134c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d103      	bne.n	80133fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80133f6:	f001 fdc9 	bl	8014f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80133fa:	2300      	movs	r3, #0
 80133fc:	e062      	b.n	80134c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80133fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013400:	2b00      	cmp	r3, #0
 8013402:	d106      	bne.n	8013412 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013404:	f107 0310 	add.w	r3, r7, #16
 8013408:	4618      	mov	r0, r3
 801340a:	f001 f8d9 	bl	80145c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801340e:	2301      	movs	r3, #1
 8013410:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013412:	f001 fdbb 	bl	8014f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013416:	f000 fe65 	bl	80140e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801341a:	f001 fd85 	bl	8014f28 <vPortEnterCritical>
 801341e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013420:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013424:	b25b      	sxtb	r3, r3
 8013426:	f1b3 3fff 	cmp.w	r3, #4294967295
 801342a:	d103      	bne.n	8013434 <xQueueReceive+0x128>
 801342c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801342e:	2200      	movs	r2, #0
 8013430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013436:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801343a:	b25b      	sxtb	r3, r3
 801343c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013440:	d103      	bne.n	801344a <xQueueReceive+0x13e>
 8013442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013444:	2200      	movs	r2, #0
 8013446:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801344a:	f001 fd9f 	bl	8014f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801344e:	1d3a      	adds	r2, r7, #4
 8013450:	f107 0310 	add.w	r3, r7, #16
 8013454:	4611      	mov	r1, r2
 8013456:	4618      	mov	r0, r3
 8013458:	f001 f8c8 	bl	80145ec <xTaskCheckForTimeOut>
 801345c:	4603      	mov	r3, r0
 801345e:	2b00      	cmp	r3, #0
 8013460:	d123      	bne.n	80134aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013464:	f000 fb22 	bl	8013aac <prvIsQueueEmpty>
 8013468:	4603      	mov	r3, r0
 801346a:	2b00      	cmp	r3, #0
 801346c:	d017      	beq.n	801349e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801346e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013470:	3324      	adds	r3, #36	@ 0x24
 8013472:	687a      	ldr	r2, [r7, #4]
 8013474:	4611      	mov	r1, r2
 8013476:	4618      	mov	r0, r3
 8013478:	f001 f818 	bl	80144ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801347c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801347e:	f000 fac3 	bl	8013a08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013482:	f000 fe3d 	bl	8014100 <xTaskResumeAll>
 8013486:	4603      	mov	r3, r0
 8013488:	2b00      	cmp	r3, #0
 801348a:	d189      	bne.n	80133a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801348c:	4b0f      	ldr	r3, [pc, #60]	@ (80134cc <xQueueReceive+0x1c0>)
 801348e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013492:	601a      	str	r2, [r3, #0]
 8013494:	f3bf 8f4f 	dsb	sy
 8013498:	f3bf 8f6f 	isb	sy
 801349c:	e780      	b.n	80133a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801349e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80134a0:	f000 fab2 	bl	8013a08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80134a4:	f000 fe2c 	bl	8014100 <xTaskResumeAll>
 80134a8:	e77a      	b.n	80133a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80134aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80134ac:	f000 faac 	bl	8013a08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80134b0:	f000 fe26 	bl	8014100 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80134b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80134b6:	f000 faf9 	bl	8013aac <prvIsQueueEmpty>
 80134ba:	4603      	mov	r3, r0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	f43f af6f 	beq.w	80133a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80134c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80134c4:	4618      	mov	r0, r3
 80134c6:	3730      	adds	r7, #48	@ 0x30
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}
 80134cc:	e000ed04 	.word	0xe000ed04

080134d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b08e      	sub	sp, #56	@ 0x38
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
 80134d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80134da:	2300      	movs	r3, #0
 80134dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80134e2:	2300      	movs	r3, #0
 80134e4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80134e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d10b      	bne.n	8013504 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80134ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134f0:	f383 8811 	msr	BASEPRI, r3
 80134f4:	f3bf 8f6f 	isb	sy
 80134f8:	f3bf 8f4f 	dsb	sy
 80134fc:	623b      	str	r3, [r7, #32]
}
 80134fe:	bf00      	nop
 8013500:	bf00      	nop
 8013502:	e7fd      	b.n	8013500 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013508:	2b00      	cmp	r3, #0
 801350a:	d00b      	beq.n	8013524 <xQueueSemaphoreTake+0x54>
	__asm volatile
 801350c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013510:	f383 8811 	msr	BASEPRI, r3
 8013514:	f3bf 8f6f 	isb	sy
 8013518:	f3bf 8f4f 	dsb	sy
 801351c:	61fb      	str	r3, [r7, #28]
}
 801351e:	bf00      	nop
 8013520:	bf00      	nop
 8013522:	e7fd      	b.n	8013520 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013524:	f001 f9a8 	bl	8014878 <xTaskGetSchedulerState>
 8013528:	4603      	mov	r3, r0
 801352a:	2b00      	cmp	r3, #0
 801352c:	d102      	bne.n	8013534 <xQueueSemaphoreTake+0x64>
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d101      	bne.n	8013538 <xQueueSemaphoreTake+0x68>
 8013534:	2301      	movs	r3, #1
 8013536:	e000      	b.n	801353a <xQueueSemaphoreTake+0x6a>
 8013538:	2300      	movs	r3, #0
 801353a:	2b00      	cmp	r3, #0
 801353c:	d10b      	bne.n	8013556 <xQueueSemaphoreTake+0x86>
	__asm volatile
 801353e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013542:	f383 8811 	msr	BASEPRI, r3
 8013546:	f3bf 8f6f 	isb	sy
 801354a:	f3bf 8f4f 	dsb	sy
 801354e:	61bb      	str	r3, [r7, #24]
}
 8013550:	bf00      	nop
 8013552:	bf00      	nop
 8013554:	e7fd      	b.n	8013552 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013556:	f001 fce7 	bl	8014f28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801355a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801355c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801355e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013562:	2b00      	cmp	r3, #0
 8013564:	d024      	beq.n	80135b0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013568:	1e5a      	subs	r2, r3, #1
 801356a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801356c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801356e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d104      	bne.n	8013580 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013576:	f001 fb2b 	bl	8014bd0 <pvTaskIncrementMutexHeldCount>
 801357a:	4602      	mov	r2, r0
 801357c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801357e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013582:	691b      	ldr	r3, [r3, #16]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d00f      	beq.n	80135a8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801358a:	3310      	adds	r3, #16
 801358c:	4618      	mov	r0, r3
 801358e:	f000 ffb3 	bl	80144f8 <xTaskRemoveFromEventList>
 8013592:	4603      	mov	r3, r0
 8013594:	2b00      	cmp	r3, #0
 8013596:	d007      	beq.n	80135a8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013598:	4b54      	ldr	r3, [pc, #336]	@ (80136ec <xQueueSemaphoreTake+0x21c>)
 801359a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801359e:	601a      	str	r2, [r3, #0]
 80135a0:	f3bf 8f4f 	dsb	sy
 80135a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80135a8:	f001 fcf0 	bl	8014f8c <vPortExitCritical>
				return pdPASS;
 80135ac:	2301      	movs	r3, #1
 80135ae:	e098      	b.n	80136e2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80135b0:	683b      	ldr	r3, [r7, #0]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d112      	bne.n	80135dc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80135b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d00b      	beq.n	80135d4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80135bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135c0:	f383 8811 	msr	BASEPRI, r3
 80135c4:	f3bf 8f6f 	isb	sy
 80135c8:	f3bf 8f4f 	dsb	sy
 80135cc:	617b      	str	r3, [r7, #20]
}
 80135ce:	bf00      	nop
 80135d0:	bf00      	nop
 80135d2:	e7fd      	b.n	80135d0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80135d4:	f001 fcda 	bl	8014f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80135d8:	2300      	movs	r3, #0
 80135da:	e082      	b.n	80136e2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80135dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d106      	bne.n	80135f0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80135e2:	f107 030c 	add.w	r3, r7, #12
 80135e6:	4618      	mov	r0, r3
 80135e8:	f000 ffea 	bl	80145c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80135ec:	2301      	movs	r3, #1
 80135ee:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80135f0:	f001 fccc 	bl	8014f8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80135f4:	f000 fd76 	bl	80140e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80135f8:	f001 fc96 	bl	8014f28 <vPortEnterCritical>
 80135fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013602:	b25b      	sxtb	r3, r3
 8013604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013608:	d103      	bne.n	8013612 <xQueueSemaphoreTake+0x142>
 801360a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801360c:	2200      	movs	r2, #0
 801360e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013614:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013618:	b25b      	sxtb	r3, r3
 801361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801361e:	d103      	bne.n	8013628 <xQueueSemaphoreTake+0x158>
 8013620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013622:	2200      	movs	r2, #0
 8013624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013628:	f001 fcb0 	bl	8014f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801362c:	463a      	mov	r2, r7
 801362e:	f107 030c 	add.w	r3, r7, #12
 8013632:	4611      	mov	r1, r2
 8013634:	4618      	mov	r0, r3
 8013636:	f000 ffd9 	bl	80145ec <xTaskCheckForTimeOut>
 801363a:	4603      	mov	r3, r0
 801363c:	2b00      	cmp	r3, #0
 801363e:	d132      	bne.n	80136a6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013640:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013642:	f000 fa33 	bl	8013aac <prvIsQueueEmpty>
 8013646:	4603      	mov	r3, r0
 8013648:	2b00      	cmp	r3, #0
 801364a:	d026      	beq.n	801369a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801364c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d109      	bne.n	8013668 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8013654:	f001 fc68 	bl	8014f28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801365a:	689b      	ldr	r3, [r3, #8]
 801365c:	4618      	mov	r0, r3
 801365e:	f001 f929 	bl	80148b4 <xTaskPriorityInherit>
 8013662:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8013664:	f001 fc92 	bl	8014f8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801366a:	3324      	adds	r3, #36	@ 0x24
 801366c:	683a      	ldr	r2, [r7, #0]
 801366e:	4611      	mov	r1, r2
 8013670:	4618      	mov	r0, r3
 8013672:	f000 ff1b 	bl	80144ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013676:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013678:	f000 f9c6 	bl	8013a08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801367c:	f000 fd40 	bl	8014100 <xTaskResumeAll>
 8013680:	4603      	mov	r3, r0
 8013682:	2b00      	cmp	r3, #0
 8013684:	f47f af67 	bne.w	8013556 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8013688:	4b18      	ldr	r3, [pc, #96]	@ (80136ec <xQueueSemaphoreTake+0x21c>)
 801368a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801368e:	601a      	str	r2, [r3, #0]
 8013690:	f3bf 8f4f 	dsb	sy
 8013694:	f3bf 8f6f 	isb	sy
 8013698:	e75d      	b.n	8013556 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801369a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801369c:	f000 f9b4 	bl	8013a08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80136a0:	f000 fd2e 	bl	8014100 <xTaskResumeAll>
 80136a4:	e757      	b.n	8013556 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80136a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80136a8:	f000 f9ae 	bl	8013a08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80136ac:	f000 fd28 	bl	8014100 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80136b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80136b2:	f000 f9fb 	bl	8013aac <prvIsQueueEmpty>
 80136b6:	4603      	mov	r3, r0
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	f43f af4c 	beq.w	8013556 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80136be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d00d      	beq.n	80136e0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80136c4:	f001 fc30 	bl	8014f28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80136c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80136ca:	f000 f8f5 	bl	80138b8 <prvGetDisinheritPriorityAfterTimeout>
 80136ce:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80136d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136d2:	689b      	ldr	r3, [r3, #8]
 80136d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80136d6:	4618      	mov	r0, r3
 80136d8:	f001 f9ea 	bl	8014ab0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80136dc:	f001 fc56 	bl	8014f8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80136e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3738      	adds	r7, #56	@ 0x38
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}
 80136ea:	bf00      	nop
 80136ec:	e000ed04 	.word	0xe000ed04

080136f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b08e      	sub	sp, #56	@ 0x38
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	60f8      	str	r0, [r7, #12]
 80136f8:	60b9      	str	r1, [r7, #8]
 80136fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013702:	2b00      	cmp	r3, #0
 8013704:	d10b      	bne.n	801371e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8013706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801370a:	f383 8811 	msr	BASEPRI, r3
 801370e:	f3bf 8f6f 	isb	sy
 8013712:	f3bf 8f4f 	dsb	sy
 8013716:	623b      	str	r3, [r7, #32]
}
 8013718:	bf00      	nop
 801371a:	bf00      	nop
 801371c:	e7fd      	b.n	801371a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d103      	bne.n	801372c <xQueueReceiveFromISR+0x3c>
 8013724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013728:	2b00      	cmp	r3, #0
 801372a:	d101      	bne.n	8013730 <xQueueReceiveFromISR+0x40>
 801372c:	2301      	movs	r3, #1
 801372e:	e000      	b.n	8013732 <xQueueReceiveFromISR+0x42>
 8013730:	2300      	movs	r3, #0
 8013732:	2b00      	cmp	r3, #0
 8013734:	d10b      	bne.n	801374e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8013736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801373a:	f383 8811 	msr	BASEPRI, r3
 801373e:	f3bf 8f6f 	isb	sy
 8013742:	f3bf 8f4f 	dsb	sy
 8013746:	61fb      	str	r3, [r7, #28]
}
 8013748:	bf00      	nop
 801374a:	bf00      	nop
 801374c:	e7fd      	b.n	801374a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801374e:	f001 fccb 	bl	80150e8 <vPortValidateInterruptPriority>
	__asm volatile
 8013752:	f3ef 8211 	mrs	r2, BASEPRI
 8013756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801375a:	f383 8811 	msr	BASEPRI, r3
 801375e:	f3bf 8f6f 	isb	sy
 8013762:	f3bf 8f4f 	dsb	sy
 8013766:	61ba      	str	r2, [r7, #24]
 8013768:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801376a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801376c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801376e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013772:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013776:	2b00      	cmp	r3, #0
 8013778:	d02f      	beq.n	80137da <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801377a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801377c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013780:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013784:	68b9      	ldr	r1, [r7, #8]
 8013786:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013788:	f000 f918 	bl	80139bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801378c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801378e:	1e5a      	subs	r2, r3, #1
 8013790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013792:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013794:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801379c:	d112      	bne.n	80137c4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801379e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137a0:	691b      	ldr	r3, [r3, #16]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d016      	beq.n	80137d4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80137a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137a8:	3310      	adds	r3, #16
 80137aa:	4618      	mov	r0, r3
 80137ac:	f000 fea4 	bl	80144f8 <xTaskRemoveFromEventList>
 80137b0:	4603      	mov	r3, r0
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d00e      	beq.n	80137d4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d00b      	beq.n	80137d4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	2201      	movs	r2, #1
 80137c0:	601a      	str	r2, [r3, #0]
 80137c2:	e007      	b.n	80137d4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80137c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80137c8:	3301      	adds	r3, #1
 80137ca:	b2db      	uxtb	r3, r3
 80137cc:	b25a      	sxtb	r2, r3
 80137ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80137d4:	2301      	movs	r3, #1
 80137d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80137d8:	e001      	b.n	80137de <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80137da:	2300      	movs	r3, #0
 80137dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80137de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80137e2:	693b      	ldr	r3, [r7, #16]
 80137e4:	f383 8811 	msr	BASEPRI, r3
}
 80137e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80137ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80137ec:	4618      	mov	r0, r3
 80137ee:	3738      	adds	r7, #56	@ 0x38
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}

080137f4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b084      	sub	sp, #16
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d10b      	bne.n	801381a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8013802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013806:	f383 8811 	msr	BASEPRI, r3
 801380a:	f3bf 8f6f 	isb	sy
 801380e:	f3bf 8f4f 	dsb	sy
 8013812:	60bb      	str	r3, [r7, #8]
}
 8013814:	bf00      	nop
 8013816:	bf00      	nop
 8013818:	e7fd      	b.n	8013816 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 801381a:	f001 fb85 	bl	8014f28 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013822:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8013824:	f001 fbb2 	bl	8014f8c <vPortExitCritical>

	return uxReturn;
 8013828:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801382a:	4618      	mov	r0, r3
 801382c:	3710      	adds	r7, #16
 801382e:	46bd      	mov	sp, r7
 8013830:	bd80      	pop	{r7, pc}

08013832 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8013832:	b480      	push	{r7}
 8013834:	b087      	sub	sp, #28
 8013836:	af00      	add	r7, sp, #0
 8013838:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d10b      	bne.n	801385c <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8013844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013848:	f383 8811 	msr	BASEPRI, r3
 801384c:	f3bf 8f6f 	isb	sy
 8013850:	f3bf 8f4f 	dsb	sy
 8013854:	60fb      	str	r3, [r7, #12]
}
 8013856:	bf00      	nop
 8013858:	bf00      	nop
 801385a:	e7fd      	b.n	8013858 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 801385c:	697b      	ldr	r3, [r7, #20]
 801385e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013860:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8013862:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013864:	4618      	mov	r0, r3
 8013866:	371c      	adds	r7, #28
 8013868:	46bd      	mov	sp, r7
 801386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386e:	4770      	bx	lr

08013870 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b084      	sub	sp, #16
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d10b      	bne.n	801389a <vQueueDelete+0x2a>
	__asm volatile
 8013882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013886:	f383 8811 	msr	BASEPRI, r3
 801388a:	f3bf 8f6f 	isb	sy
 801388e:	f3bf 8f4f 	dsb	sy
 8013892:	60bb      	str	r3, [r7, #8]
}
 8013894:	bf00      	nop
 8013896:	bf00      	nop
 8013898:	e7fd      	b.n	8013896 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801389a:	68f8      	ldr	r0, [r7, #12]
 801389c:	f000 f934 	bl	8013b08 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d102      	bne.n	80138b0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80138aa:	68f8      	ldr	r0, [r7, #12]
 80138ac:	f001 fd2c 	bl	8015308 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80138b0:	bf00      	nop
 80138b2:	3710      	adds	r7, #16
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}

080138b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80138b8:	b480      	push	{r7}
 80138ba:	b085      	sub	sp, #20
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d006      	beq.n	80138d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	f1c3 0307 	rsb	r3, r3, #7
 80138d2:	60fb      	str	r3, [r7, #12]
 80138d4:	e001      	b.n	80138da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80138d6:	2300      	movs	r3, #0
 80138d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80138da:	68fb      	ldr	r3, [r7, #12]
	}
 80138dc:	4618      	mov	r0, r3
 80138de:	3714      	adds	r7, #20
 80138e0:	46bd      	mov	sp, r7
 80138e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e6:	4770      	bx	lr

080138e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b086      	sub	sp, #24
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	60f8      	str	r0, [r7, #12]
 80138f0:	60b9      	str	r1, [r7, #8]
 80138f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80138f4:	2300      	movs	r3, #0
 80138f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80138fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013902:	2b00      	cmp	r3, #0
 8013904:	d10d      	bne.n	8013922 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d14d      	bne.n	80139aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	689b      	ldr	r3, [r3, #8]
 8013912:	4618      	mov	r0, r3
 8013914:	f001 f844 	bl	80149a0 <xTaskPriorityDisinherit>
 8013918:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	2200      	movs	r2, #0
 801391e:	609a      	str	r2, [r3, #8]
 8013920:	e043      	b.n	80139aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d119      	bne.n	801395c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	6858      	ldr	r0, [r3, #4]
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013930:	461a      	mov	r2, r3
 8013932:	68b9      	ldr	r1, [r7, #8]
 8013934:	f011 fe23 	bl	802557e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	685a      	ldr	r2, [r3, #4]
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013940:	441a      	add	r2, r3
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	685a      	ldr	r2, [r3, #4]
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	689b      	ldr	r3, [r3, #8]
 801394e:	429a      	cmp	r2, r3
 8013950:	d32b      	bcc.n	80139aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	681a      	ldr	r2, [r3, #0]
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	605a      	str	r2, [r3, #4]
 801395a:	e026      	b.n	80139aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	68d8      	ldr	r0, [r3, #12]
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013964:	461a      	mov	r2, r3
 8013966:	68b9      	ldr	r1, [r7, #8]
 8013968:	f011 fe09 	bl	802557e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	68da      	ldr	r2, [r3, #12]
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013974:	425b      	negs	r3, r3
 8013976:	441a      	add	r2, r3
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	68da      	ldr	r2, [r3, #12]
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	429a      	cmp	r2, r3
 8013986:	d207      	bcs.n	8013998 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	689a      	ldr	r2, [r3, #8]
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013990:	425b      	negs	r3, r3
 8013992:	441a      	add	r2, r3
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	2b02      	cmp	r3, #2
 801399c:	d105      	bne.n	80139aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801399e:	693b      	ldr	r3, [r7, #16]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d002      	beq.n	80139aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80139a4:	693b      	ldr	r3, [r7, #16]
 80139a6:	3b01      	subs	r3, #1
 80139a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80139aa:	693b      	ldr	r3, [r7, #16]
 80139ac:	1c5a      	adds	r2, r3, #1
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80139b2:	697b      	ldr	r3, [r7, #20]
}
 80139b4:	4618      	mov	r0, r3
 80139b6:	3718      	adds	r7, #24
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}

080139bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b082      	sub	sp, #8
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
 80139c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d018      	beq.n	8013a00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	68da      	ldr	r2, [r3, #12]
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80139d6:	441a      	add	r2, r3
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	68da      	ldr	r2, [r3, #12]
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	689b      	ldr	r3, [r3, #8]
 80139e4:	429a      	cmp	r2, r3
 80139e6:	d303      	bcc.n	80139f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	681a      	ldr	r2, [r3, #0]
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	68d9      	ldr	r1, [r3, #12]
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80139f8:	461a      	mov	r2, r3
 80139fa:	6838      	ldr	r0, [r7, #0]
 80139fc:	f011 fdbf 	bl	802557e <memcpy>
	}
}
 8013a00:	bf00      	nop
 8013a02:	3708      	adds	r7, #8
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}

08013a08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b084      	sub	sp, #16
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013a10:	f001 fa8a 	bl	8014f28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013a1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013a1c:	e011      	b.n	8013a42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d012      	beq.n	8013a4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	3324      	adds	r3, #36	@ 0x24
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f000 fd64 	bl	80144f8 <xTaskRemoveFromEventList>
 8013a30:	4603      	mov	r3, r0
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d001      	beq.n	8013a3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013a36:	f000 fe3d 	bl	80146b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013a3a:	7bfb      	ldrb	r3, [r7, #15]
 8013a3c:	3b01      	subs	r3, #1
 8013a3e:	b2db      	uxtb	r3, r3
 8013a40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	dce9      	bgt.n	8013a1e <prvUnlockQueue+0x16>
 8013a4a:	e000      	b.n	8013a4e <prvUnlockQueue+0x46>
					break;
 8013a4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	22ff      	movs	r2, #255	@ 0xff
 8013a52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013a56:	f001 fa99 	bl	8014f8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013a5a:	f001 fa65 	bl	8014f28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013a64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013a66:	e011      	b.n	8013a8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	691b      	ldr	r3, [r3, #16]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d012      	beq.n	8013a96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	3310      	adds	r3, #16
 8013a74:	4618      	mov	r0, r3
 8013a76:	f000 fd3f 	bl	80144f8 <xTaskRemoveFromEventList>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d001      	beq.n	8013a84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013a80:	f000 fe18 	bl	80146b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013a84:	7bbb      	ldrb	r3, [r7, #14]
 8013a86:	3b01      	subs	r3, #1
 8013a88:	b2db      	uxtb	r3, r3
 8013a8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013a8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	dce9      	bgt.n	8013a68 <prvUnlockQueue+0x60>
 8013a94:	e000      	b.n	8013a98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013a96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	22ff      	movs	r2, #255	@ 0xff
 8013a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013aa0:	f001 fa74 	bl	8014f8c <vPortExitCritical>
}
 8013aa4:	bf00      	nop
 8013aa6:	3710      	adds	r7, #16
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bd80      	pop	{r7, pc}

08013aac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b084      	sub	sp, #16
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013ab4:	f001 fa38 	bl	8014f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d102      	bne.n	8013ac6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013ac0:	2301      	movs	r3, #1
 8013ac2:	60fb      	str	r3, [r7, #12]
 8013ac4:	e001      	b.n	8013aca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013aca:	f001 fa5f 	bl	8014f8c <vPortExitCritical>

	return xReturn;
 8013ace:	68fb      	ldr	r3, [r7, #12]
}
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	3710      	adds	r7, #16
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}

08013ad8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b084      	sub	sp, #16
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013ae0:	f001 fa22 	bl	8014f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013aec:	429a      	cmp	r2, r3
 8013aee:	d102      	bne.n	8013af6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013af0:	2301      	movs	r3, #1
 8013af2:	60fb      	str	r3, [r7, #12]
 8013af4:	e001      	b.n	8013afa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013af6:	2300      	movs	r3, #0
 8013af8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013afa:	f001 fa47 	bl	8014f8c <vPortExitCritical>

	return xReturn;
 8013afe:	68fb      	ldr	r3, [r7, #12]
}
 8013b00:	4618      	mov	r0, r3
 8013b02:	3710      	adds	r7, #16
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}

08013b08 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013b08:	b480      	push	{r7}
 8013b0a:	b085      	sub	sp, #20
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013b10:	2300      	movs	r3, #0
 8013b12:	60fb      	str	r3, [r7, #12]
 8013b14:	e016      	b.n	8013b44 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013b16:	4a10      	ldr	r2, [pc, #64]	@ (8013b58 <vQueueUnregisterQueue+0x50>)
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	00db      	lsls	r3, r3, #3
 8013b1c:	4413      	add	r3, r2
 8013b1e:	685b      	ldr	r3, [r3, #4]
 8013b20:	687a      	ldr	r2, [r7, #4]
 8013b22:	429a      	cmp	r2, r3
 8013b24:	d10b      	bne.n	8013b3e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013b26:	4a0c      	ldr	r2, [pc, #48]	@ (8013b58 <vQueueUnregisterQueue+0x50>)
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2100      	movs	r1, #0
 8013b2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013b30:	4a09      	ldr	r2, [pc, #36]	@ (8013b58 <vQueueUnregisterQueue+0x50>)
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	00db      	lsls	r3, r3, #3
 8013b36:	4413      	add	r3, r2
 8013b38:	2200      	movs	r2, #0
 8013b3a:	605a      	str	r2, [r3, #4]
				break;
 8013b3c:	e006      	b.n	8013b4c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	3301      	adds	r3, #1
 8013b42:	60fb      	str	r3, [r7, #12]
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	2b07      	cmp	r3, #7
 8013b48:	d9e5      	bls.n	8013b16 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013b4a:	bf00      	nop
 8013b4c:	bf00      	nop
 8013b4e:	3714      	adds	r7, #20
 8013b50:	46bd      	mov	sp, r7
 8013b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b56:	4770      	bx	lr
 8013b58:	24001364 	.word	0x24001364

08013b5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b08e      	sub	sp, #56	@ 0x38
 8013b60:	af04      	add	r7, sp, #16
 8013b62:	60f8      	str	r0, [r7, #12]
 8013b64:	60b9      	str	r1, [r7, #8]
 8013b66:	607a      	str	r2, [r7, #4]
 8013b68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d10b      	bne.n	8013b88 <xTaskCreateStatic+0x2c>
	__asm volatile
 8013b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b74:	f383 8811 	msr	BASEPRI, r3
 8013b78:	f3bf 8f6f 	isb	sy
 8013b7c:	f3bf 8f4f 	dsb	sy
 8013b80:	623b      	str	r3, [r7, #32]
}
 8013b82:	bf00      	nop
 8013b84:	bf00      	nop
 8013b86:	e7fd      	b.n	8013b84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d10b      	bne.n	8013ba6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8013b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b92:	f383 8811 	msr	BASEPRI, r3
 8013b96:	f3bf 8f6f 	isb	sy
 8013b9a:	f3bf 8f4f 	dsb	sy
 8013b9e:	61fb      	str	r3, [r7, #28]
}
 8013ba0:	bf00      	nop
 8013ba2:	bf00      	nop
 8013ba4:	e7fd      	b.n	8013ba2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013ba6:	2354      	movs	r3, #84	@ 0x54
 8013ba8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013baa:	693b      	ldr	r3, [r7, #16]
 8013bac:	2b54      	cmp	r3, #84	@ 0x54
 8013bae:	d00b      	beq.n	8013bc8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8013bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bb4:	f383 8811 	msr	BASEPRI, r3
 8013bb8:	f3bf 8f6f 	isb	sy
 8013bbc:	f3bf 8f4f 	dsb	sy
 8013bc0:	61bb      	str	r3, [r7, #24]
}
 8013bc2:	bf00      	nop
 8013bc4:	bf00      	nop
 8013bc6:	e7fd      	b.n	8013bc4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013bc8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d01e      	beq.n	8013c0e <xTaskCreateStatic+0xb2>
 8013bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d01b      	beq.n	8013c0e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bd8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013bde:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013be2:	2202      	movs	r2, #2
 8013be4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013be8:	2300      	movs	r3, #0
 8013bea:	9303      	str	r3, [sp, #12]
 8013bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bee:	9302      	str	r3, [sp, #8]
 8013bf0:	f107 0314 	add.w	r3, r7, #20
 8013bf4:	9301      	str	r3, [sp, #4]
 8013bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bf8:	9300      	str	r3, [sp, #0]
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	687a      	ldr	r2, [r7, #4]
 8013bfe:	68b9      	ldr	r1, [r7, #8]
 8013c00:	68f8      	ldr	r0, [r7, #12]
 8013c02:	f000 f850 	bl	8013ca6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013c06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013c08:	f000 f8d6 	bl	8013db8 <prvAddNewTaskToReadyList>
 8013c0c:	e001      	b.n	8013c12 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013c12:	697b      	ldr	r3, [r7, #20]
	}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3728      	adds	r7, #40	@ 0x28
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}

08013c1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b08c      	sub	sp, #48	@ 0x30
 8013c20:	af04      	add	r7, sp, #16
 8013c22:	60f8      	str	r0, [r7, #12]
 8013c24:	60b9      	str	r1, [r7, #8]
 8013c26:	603b      	str	r3, [r7, #0]
 8013c28:	4613      	mov	r3, r2
 8013c2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013c2c:	88fb      	ldrh	r3, [r7, #6]
 8013c2e:	009b      	lsls	r3, r3, #2
 8013c30:	4618      	mov	r0, r3
 8013c32:	f001 fa9b 	bl	801516c <pvPortMalloc>
 8013c36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013c38:	697b      	ldr	r3, [r7, #20]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d00e      	beq.n	8013c5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013c3e:	2054      	movs	r0, #84	@ 0x54
 8013c40:	f001 fa94 	bl	801516c <pvPortMalloc>
 8013c44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013c46:	69fb      	ldr	r3, [r7, #28]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d003      	beq.n	8013c54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013c4c:	69fb      	ldr	r3, [r7, #28]
 8013c4e:	697a      	ldr	r2, [r7, #20]
 8013c50:	631a      	str	r2, [r3, #48]	@ 0x30
 8013c52:	e005      	b.n	8013c60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013c54:	6978      	ldr	r0, [r7, #20]
 8013c56:	f001 fb57 	bl	8015308 <vPortFree>
 8013c5a:	e001      	b.n	8013c60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013c60:	69fb      	ldr	r3, [r7, #28]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d017      	beq.n	8013c96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013c66:	69fb      	ldr	r3, [r7, #28]
 8013c68:	2200      	movs	r2, #0
 8013c6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013c6e:	88fa      	ldrh	r2, [r7, #6]
 8013c70:	2300      	movs	r3, #0
 8013c72:	9303      	str	r3, [sp, #12]
 8013c74:	69fb      	ldr	r3, [r7, #28]
 8013c76:	9302      	str	r3, [sp, #8]
 8013c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c7a:	9301      	str	r3, [sp, #4]
 8013c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c7e:	9300      	str	r3, [sp, #0]
 8013c80:	683b      	ldr	r3, [r7, #0]
 8013c82:	68b9      	ldr	r1, [r7, #8]
 8013c84:	68f8      	ldr	r0, [r7, #12]
 8013c86:	f000 f80e 	bl	8013ca6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013c8a:	69f8      	ldr	r0, [r7, #28]
 8013c8c:	f000 f894 	bl	8013db8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013c90:	2301      	movs	r3, #1
 8013c92:	61bb      	str	r3, [r7, #24]
 8013c94:	e002      	b.n	8013c9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013c96:	f04f 33ff 	mov.w	r3, #4294967295
 8013c9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013c9c:	69bb      	ldr	r3, [r7, #24]
	}
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	3720      	adds	r7, #32
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd80      	pop	{r7, pc}

08013ca6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013ca6:	b580      	push	{r7, lr}
 8013ca8:	b088      	sub	sp, #32
 8013caa:	af00      	add	r7, sp, #0
 8013cac:	60f8      	str	r0, [r7, #12]
 8013cae:	60b9      	str	r1, [r7, #8]
 8013cb0:	607a      	str	r2, [r7, #4]
 8013cb2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013cb8:	6879      	ldr	r1, [r7, #4]
 8013cba:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013cbe:	440b      	add	r3, r1
 8013cc0:	009b      	lsls	r3, r3, #2
 8013cc2:	4413      	add	r3, r2
 8013cc4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013cc6:	69bb      	ldr	r3, [r7, #24]
 8013cc8:	f023 0307 	bic.w	r3, r3, #7
 8013ccc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013cce:	69bb      	ldr	r3, [r7, #24]
 8013cd0:	f003 0307 	and.w	r3, r3, #7
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d00b      	beq.n	8013cf0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8013cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cdc:	f383 8811 	msr	BASEPRI, r3
 8013ce0:	f3bf 8f6f 	isb	sy
 8013ce4:	f3bf 8f4f 	dsb	sy
 8013ce8:	617b      	str	r3, [r7, #20]
}
 8013cea:	bf00      	nop
 8013cec:	bf00      	nop
 8013cee:	e7fd      	b.n	8013cec <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013cf0:	68bb      	ldr	r3, [r7, #8]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d01f      	beq.n	8013d36 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	61fb      	str	r3, [r7, #28]
 8013cfa:	e012      	b.n	8013d22 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013cfc:	68ba      	ldr	r2, [r7, #8]
 8013cfe:	69fb      	ldr	r3, [r7, #28]
 8013d00:	4413      	add	r3, r2
 8013d02:	7819      	ldrb	r1, [r3, #0]
 8013d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013d06:	69fb      	ldr	r3, [r7, #28]
 8013d08:	4413      	add	r3, r2
 8013d0a:	3334      	adds	r3, #52	@ 0x34
 8013d0c:	460a      	mov	r2, r1
 8013d0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013d10:	68ba      	ldr	r2, [r7, #8]
 8013d12:	69fb      	ldr	r3, [r7, #28]
 8013d14:	4413      	add	r3, r2
 8013d16:	781b      	ldrb	r3, [r3, #0]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d006      	beq.n	8013d2a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013d1c:	69fb      	ldr	r3, [r7, #28]
 8013d1e:	3301      	adds	r3, #1
 8013d20:	61fb      	str	r3, [r7, #28]
 8013d22:	69fb      	ldr	r3, [r7, #28]
 8013d24:	2b0f      	cmp	r3, #15
 8013d26:	d9e9      	bls.n	8013cfc <prvInitialiseNewTask+0x56>
 8013d28:	e000      	b.n	8013d2c <prvInitialiseNewTask+0x86>
			{
				break;
 8013d2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d2e:	2200      	movs	r2, #0
 8013d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013d34:	e003      	b.n	8013d3e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d38:	2200      	movs	r2, #0
 8013d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d40:	2b06      	cmp	r3, #6
 8013d42:	d901      	bls.n	8013d48 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013d44:	2306      	movs	r3, #6
 8013d46:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013d52:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d56:	2200      	movs	r2, #0
 8013d58:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d5c:	3304      	adds	r3, #4
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f7fe fe81 	bl	8012a66 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d66:	3318      	adds	r3, #24
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f7fe fe7c 	bl	8012a66 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013d72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d76:	f1c3 0207 	rsb	r2, r3, #7
 8013d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013d82:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d86:	2200      	movs	r2, #0
 8013d88:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013d92:	683a      	ldr	r2, [r7, #0]
 8013d94:	68f9      	ldr	r1, [r7, #12]
 8013d96:	69b8      	ldr	r0, [r7, #24]
 8013d98:	f000 ff94 	bl	8014cc4 <pxPortInitialiseStack>
 8013d9c:	4602      	mov	r2, r0
 8013d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013da0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d002      	beq.n	8013dae <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013daa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013dac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013dae:	bf00      	nop
 8013db0:	3720      	adds	r7, #32
 8013db2:	46bd      	mov	sp, r7
 8013db4:	bd80      	pop	{r7, pc}
	...

08013db8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b082      	sub	sp, #8
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013dc0:	f001 f8b2 	bl	8014f28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8013e70 <prvAddNewTaskToReadyList+0xb8>)
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	3301      	adds	r3, #1
 8013dca:	4a29      	ldr	r2, [pc, #164]	@ (8013e70 <prvAddNewTaskToReadyList+0xb8>)
 8013dcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013dce:	4b29      	ldr	r3, [pc, #164]	@ (8013e74 <prvAddNewTaskToReadyList+0xbc>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d109      	bne.n	8013dea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013dd6:	4a27      	ldr	r2, [pc, #156]	@ (8013e74 <prvAddNewTaskToReadyList+0xbc>)
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013ddc:	4b24      	ldr	r3, [pc, #144]	@ (8013e70 <prvAddNewTaskToReadyList+0xb8>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	2b01      	cmp	r3, #1
 8013de2:	d110      	bne.n	8013e06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013de4:	f000 fc8a 	bl	80146fc <prvInitialiseTaskLists>
 8013de8:	e00d      	b.n	8013e06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013dea:	4b23      	ldr	r3, [pc, #140]	@ (8013e78 <prvAddNewTaskToReadyList+0xc0>)
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d109      	bne.n	8013e06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013df2:	4b20      	ldr	r3, [pc, #128]	@ (8013e74 <prvAddNewTaskToReadyList+0xbc>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d802      	bhi.n	8013e06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013e00:	4a1c      	ldr	r2, [pc, #112]	@ (8013e74 <prvAddNewTaskToReadyList+0xbc>)
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013e06:	4b1d      	ldr	r3, [pc, #116]	@ (8013e7c <prvAddNewTaskToReadyList+0xc4>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8013e7c <prvAddNewTaskToReadyList+0xc4>)
 8013e0e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e14:	2201      	movs	r2, #1
 8013e16:	409a      	lsls	r2, r3
 8013e18:	4b19      	ldr	r3, [pc, #100]	@ (8013e80 <prvAddNewTaskToReadyList+0xc8>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	4313      	orrs	r3, r2
 8013e1e:	4a18      	ldr	r2, [pc, #96]	@ (8013e80 <prvAddNewTaskToReadyList+0xc8>)
 8013e20:	6013      	str	r3, [r2, #0]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e26:	4613      	mov	r3, r2
 8013e28:	009b      	lsls	r3, r3, #2
 8013e2a:	4413      	add	r3, r2
 8013e2c:	009b      	lsls	r3, r3, #2
 8013e2e:	4a15      	ldr	r2, [pc, #84]	@ (8013e84 <prvAddNewTaskToReadyList+0xcc>)
 8013e30:	441a      	add	r2, r3
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	3304      	adds	r3, #4
 8013e36:	4619      	mov	r1, r3
 8013e38:	4610      	mov	r0, r2
 8013e3a:	f7fe fe21 	bl	8012a80 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013e3e:	f001 f8a5 	bl	8014f8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013e42:	4b0d      	ldr	r3, [pc, #52]	@ (8013e78 <prvAddNewTaskToReadyList+0xc0>)
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d00e      	beq.n	8013e68 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8013e74 <prvAddNewTaskToReadyList+0xbc>)
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e54:	429a      	cmp	r2, r3
 8013e56:	d207      	bcs.n	8013e68 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013e58:	4b0b      	ldr	r3, [pc, #44]	@ (8013e88 <prvAddNewTaskToReadyList+0xd0>)
 8013e5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013e5e:	601a      	str	r2, [r3, #0]
 8013e60:	f3bf 8f4f 	dsb	sy
 8013e64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013e68:	bf00      	nop
 8013e6a:	3708      	adds	r7, #8
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}
 8013e70:	240014a4 	.word	0x240014a4
 8013e74:	240013a4 	.word	0x240013a4
 8013e78:	240014b0 	.word	0x240014b0
 8013e7c:	240014c0 	.word	0x240014c0
 8013e80:	240014ac 	.word	0x240014ac
 8013e84:	240013a8 	.word	0x240013a8
 8013e88:	e000ed04 	.word	0xe000ed04

08013e8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b084      	sub	sp, #16
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013e94:	2300      	movs	r3, #0
 8013e96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d018      	beq.n	8013ed0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013e9e:	4b14      	ldr	r3, [pc, #80]	@ (8013ef0 <vTaskDelay+0x64>)
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d00b      	beq.n	8013ebe <vTaskDelay+0x32>
	__asm volatile
 8013ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013eaa:	f383 8811 	msr	BASEPRI, r3
 8013eae:	f3bf 8f6f 	isb	sy
 8013eb2:	f3bf 8f4f 	dsb	sy
 8013eb6:	60bb      	str	r3, [r7, #8]
}
 8013eb8:	bf00      	nop
 8013eba:	bf00      	nop
 8013ebc:	e7fd      	b.n	8013eba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013ebe:	f000 f911 	bl	80140e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013ec2:	2100      	movs	r1, #0
 8013ec4:	6878      	ldr	r0, [r7, #4]
 8013ec6:	f000 fe97 	bl	8014bf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013eca:	f000 f919 	bl	8014100 <xTaskResumeAll>
 8013ece:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d107      	bne.n	8013ee6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8013ed6:	4b07      	ldr	r3, [pc, #28]	@ (8013ef4 <vTaskDelay+0x68>)
 8013ed8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013edc:	601a      	str	r2, [r3, #0]
 8013ede:	f3bf 8f4f 	dsb	sy
 8013ee2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013ee6:	bf00      	nop
 8013ee8:	3710      	adds	r7, #16
 8013eea:	46bd      	mov	sp, r7
 8013eec:	bd80      	pop	{r7, pc}
 8013eee:	bf00      	nop
 8013ef0:	240014cc 	.word	0x240014cc
 8013ef4:	e000ed04 	.word	0xe000ed04

08013ef8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b084      	sub	sp, #16
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013f00:	f001 f812 	bl	8014f28 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d102      	bne.n	8013f10 <vTaskSuspend+0x18>
 8013f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8014000 <vTaskSuspend+0x108>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	e000      	b.n	8013f12 <vTaskSuspend+0x1a>
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	3304      	adds	r3, #4
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f7fe fe0e 	bl	8012b3a <uxListRemove>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d115      	bne.n	8013f50 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f28:	4936      	ldr	r1, [pc, #216]	@ (8014004 <vTaskSuspend+0x10c>)
 8013f2a:	4613      	mov	r3, r2
 8013f2c:	009b      	lsls	r3, r3, #2
 8013f2e:	4413      	add	r3, r2
 8013f30:	009b      	lsls	r3, r3, #2
 8013f32:	440b      	add	r3, r1
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d10a      	bne.n	8013f50 <vTaskSuspend+0x58>
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f3e:	2201      	movs	r2, #1
 8013f40:	fa02 f303 	lsl.w	r3, r2, r3
 8013f44:	43da      	mvns	r2, r3
 8013f46:	4b30      	ldr	r3, [pc, #192]	@ (8014008 <vTaskSuspend+0x110>)
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	4013      	ands	r3, r2
 8013f4c:	4a2e      	ldr	r2, [pc, #184]	@ (8014008 <vTaskSuspend+0x110>)
 8013f4e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d004      	beq.n	8013f62 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	3318      	adds	r3, #24
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	f7fe fdec 	bl	8012b3a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	3304      	adds	r3, #4
 8013f66:	4619      	mov	r1, r3
 8013f68:	4828      	ldr	r0, [pc, #160]	@ (801400c <vTaskSuspend+0x114>)
 8013f6a:	f7fe fd89 	bl	8012a80 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8013f74:	b2db      	uxtb	r3, r3
 8013f76:	2b01      	cmp	r3, #1
 8013f78:	d103      	bne.n	8013f82 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8013f82:	f001 f803 	bl	8014f8c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8013f86:	4b22      	ldr	r3, [pc, #136]	@ (8014010 <vTaskSuspend+0x118>)
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d005      	beq.n	8013f9a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8013f8e:	f000 ffcb 	bl	8014f28 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8013f92:	f000 fc51 	bl	8014838 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8013f96:	f000 fff9 	bl	8014f8c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8013f9a:	4b19      	ldr	r3, [pc, #100]	@ (8014000 <vTaskSuspend+0x108>)
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	68fa      	ldr	r2, [r7, #12]
 8013fa0:	429a      	cmp	r2, r3
 8013fa2:	d128      	bne.n	8013ff6 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8013fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8014010 <vTaskSuspend+0x118>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d018      	beq.n	8013fde <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8013fac:	4b19      	ldr	r3, [pc, #100]	@ (8014014 <vTaskSuspend+0x11c>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d00b      	beq.n	8013fcc <vTaskSuspend+0xd4>
	__asm volatile
 8013fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fb8:	f383 8811 	msr	BASEPRI, r3
 8013fbc:	f3bf 8f6f 	isb	sy
 8013fc0:	f3bf 8f4f 	dsb	sy
 8013fc4:	60bb      	str	r3, [r7, #8]
}
 8013fc6:	bf00      	nop
 8013fc8:	bf00      	nop
 8013fca:	e7fd      	b.n	8013fc8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8013fcc:	4b12      	ldr	r3, [pc, #72]	@ (8014018 <vTaskSuspend+0x120>)
 8013fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013fd2:	601a      	str	r2, [r3, #0]
 8013fd4:	f3bf 8f4f 	dsb	sy
 8013fd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013fdc:	e00b      	b.n	8013ff6 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8013fde:	4b0b      	ldr	r3, [pc, #44]	@ (801400c <vTaskSuspend+0x114>)
 8013fe0:	681a      	ldr	r2, [r3, #0]
 8013fe2:	4b0e      	ldr	r3, [pc, #56]	@ (801401c <vTaskSuspend+0x124>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d103      	bne.n	8013ff2 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8013fea:	4b05      	ldr	r3, [pc, #20]	@ (8014000 <vTaskSuspend+0x108>)
 8013fec:	2200      	movs	r2, #0
 8013fee:	601a      	str	r2, [r3, #0]
	}
 8013ff0:	e001      	b.n	8013ff6 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8013ff2:	f000 f9ff 	bl	80143f4 <vTaskSwitchContext>
	}
 8013ff6:	bf00      	nop
 8013ff8:	3710      	adds	r7, #16
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	bd80      	pop	{r7, pc}
 8013ffe:	bf00      	nop
 8014000:	240013a4 	.word	0x240013a4
 8014004:	240013a8 	.word	0x240013a8
 8014008:	240014ac 	.word	0x240014ac
 801400c:	24001490 	.word	0x24001490
 8014010:	240014b0 	.word	0x240014b0
 8014014:	240014cc 	.word	0x240014cc
 8014018:	e000ed04 	.word	0xe000ed04
 801401c:	240014a4 	.word	0x240014a4

08014020 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b08a      	sub	sp, #40	@ 0x28
 8014024:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014026:	2300      	movs	r3, #0
 8014028:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801402a:	2300      	movs	r3, #0
 801402c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801402e:	463a      	mov	r2, r7
 8014030:	1d39      	adds	r1, r7, #4
 8014032:	f107 0308 	add.w	r3, r7, #8
 8014036:	4618      	mov	r0, r3
 8014038:	f7ee fb7e 	bl	8002738 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801403c:	6839      	ldr	r1, [r7, #0]
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	68ba      	ldr	r2, [r7, #8]
 8014042:	9202      	str	r2, [sp, #8]
 8014044:	9301      	str	r3, [sp, #4]
 8014046:	2300      	movs	r3, #0
 8014048:	9300      	str	r3, [sp, #0]
 801404a:	2300      	movs	r3, #0
 801404c:	460a      	mov	r2, r1
 801404e:	491f      	ldr	r1, [pc, #124]	@ (80140cc <vTaskStartScheduler+0xac>)
 8014050:	481f      	ldr	r0, [pc, #124]	@ (80140d0 <vTaskStartScheduler+0xb0>)
 8014052:	f7ff fd83 	bl	8013b5c <xTaskCreateStatic>
 8014056:	4603      	mov	r3, r0
 8014058:	4a1e      	ldr	r2, [pc, #120]	@ (80140d4 <vTaskStartScheduler+0xb4>)
 801405a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801405c:	4b1d      	ldr	r3, [pc, #116]	@ (80140d4 <vTaskStartScheduler+0xb4>)
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d002      	beq.n	801406a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014064:	2301      	movs	r3, #1
 8014066:	617b      	str	r3, [r7, #20]
 8014068:	e001      	b.n	801406e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801406a:	2300      	movs	r3, #0
 801406c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801406e:	697b      	ldr	r3, [r7, #20]
 8014070:	2b01      	cmp	r3, #1
 8014072:	d116      	bne.n	80140a2 <vTaskStartScheduler+0x82>
	__asm volatile
 8014074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014078:	f383 8811 	msr	BASEPRI, r3
 801407c:	f3bf 8f6f 	isb	sy
 8014080:	f3bf 8f4f 	dsb	sy
 8014084:	613b      	str	r3, [r7, #16]
}
 8014086:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014088:	4b13      	ldr	r3, [pc, #76]	@ (80140d8 <vTaskStartScheduler+0xb8>)
 801408a:	f04f 32ff 	mov.w	r2, #4294967295
 801408e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014090:	4b12      	ldr	r3, [pc, #72]	@ (80140dc <vTaskStartScheduler+0xbc>)
 8014092:	2201      	movs	r2, #1
 8014094:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014096:	4b12      	ldr	r3, [pc, #72]	@ (80140e0 <vTaskStartScheduler+0xc0>)
 8014098:	2200      	movs	r2, #0
 801409a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801409c:	f000 fea0 	bl	8014de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80140a0:	e00f      	b.n	80140c2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80140a2:	697b      	ldr	r3, [r7, #20]
 80140a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140a8:	d10b      	bne.n	80140c2 <vTaskStartScheduler+0xa2>
	__asm volatile
 80140aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140ae:	f383 8811 	msr	BASEPRI, r3
 80140b2:	f3bf 8f6f 	isb	sy
 80140b6:	f3bf 8f4f 	dsb	sy
 80140ba:	60fb      	str	r3, [r7, #12]
}
 80140bc:	bf00      	nop
 80140be:	bf00      	nop
 80140c0:	e7fd      	b.n	80140be <vTaskStartScheduler+0x9e>
}
 80140c2:	bf00      	nop
 80140c4:	3718      	adds	r7, #24
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}
 80140ca:	bf00      	nop
 80140cc:	08029450 	.word	0x08029450
 80140d0:	080146cd 	.word	0x080146cd
 80140d4:	240014c8 	.word	0x240014c8
 80140d8:	240014c4 	.word	0x240014c4
 80140dc:	240014b0 	.word	0x240014b0
 80140e0:	240014a8 	.word	0x240014a8

080140e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80140e4:	b480      	push	{r7}
 80140e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80140e8:	4b04      	ldr	r3, [pc, #16]	@ (80140fc <vTaskSuspendAll+0x18>)
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	3301      	adds	r3, #1
 80140ee:	4a03      	ldr	r2, [pc, #12]	@ (80140fc <vTaskSuspendAll+0x18>)
 80140f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80140f2:	bf00      	nop
 80140f4:	46bd      	mov	sp, r7
 80140f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140fa:	4770      	bx	lr
 80140fc:	240014cc 	.word	0x240014cc

08014100 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b084      	sub	sp, #16
 8014104:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014106:	2300      	movs	r3, #0
 8014108:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801410a:	2300      	movs	r3, #0
 801410c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801410e:	4b42      	ldr	r3, [pc, #264]	@ (8014218 <xTaskResumeAll+0x118>)
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d10b      	bne.n	801412e <xTaskResumeAll+0x2e>
	__asm volatile
 8014116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801411a:	f383 8811 	msr	BASEPRI, r3
 801411e:	f3bf 8f6f 	isb	sy
 8014122:	f3bf 8f4f 	dsb	sy
 8014126:	603b      	str	r3, [r7, #0]
}
 8014128:	bf00      	nop
 801412a:	bf00      	nop
 801412c:	e7fd      	b.n	801412a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801412e:	f000 fefb 	bl	8014f28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014132:	4b39      	ldr	r3, [pc, #228]	@ (8014218 <xTaskResumeAll+0x118>)
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	3b01      	subs	r3, #1
 8014138:	4a37      	ldr	r2, [pc, #220]	@ (8014218 <xTaskResumeAll+0x118>)
 801413a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801413c:	4b36      	ldr	r3, [pc, #216]	@ (8014218 <xTaskResumeAll+0x118>)
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d161      	bne.n	8014208 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014144:	4b35      	ldr	r3, [pc, #212]	@ (801421c <xTaskResumeAll+0x11c>)
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d05d      	beq.n	8014208 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801414c:	e02e      	b.n	80141ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801414e:	4b34      	ldr	r3, [pc, #208]	@ (8014220 <xTaskResumeAll+0x120>)
 8014150:	68db      	ldr	r3, [r3, #12]
 8014152:	68db      	ldr	r3, [r3, #12]
 8014154:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	3318      	adds	r3, #24
 801415a:	4618      	mov	r0, r3
 801415c:	f7fe fced 	bl	8012b3a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	3304      	adds	r3, #4
 8014164:	4618      	mov	r0, r3
 8014166:	f7fe fce8 	bl	8012b3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801416e:	2201      	movs	r2, #1
 8014170:	409a      	lsls	r2, r3
 8014172:	4b2c      	ldr	r3, [pc, #176]	@ (8014224 <xTaskResumeAll+0x124>)
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	4313      	orrs	r3, r2
 8014178:	4a2a      	ldr	r2, [pc, #168]	@ (8014224 <xTaskResumeAll+0x124>)
 801417a:	6013      	str	r3, [r2, #0]
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014180:	4613      	mov	r3, r2
 8014182:	009b      	lsls	r3, r3, #2
 8014184:	4413      	add	r3, r2
 8014186:	009b      	lsls	r3, r3, #2
 8014188:	4a27      	ldr	r2, [pc, #156]	@ (8014228 <xTaskResumeAll+0x128>)
 801418a:	441a      	add	r2, r3
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	3304      	adds	r3, #4
 8014190:	4619      	mov	r1, r3
 8014192:	4610      	mov	r0, r2
 8014194:	f7fe fc74 	bl	8012a80 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801419c:	4b23      	ldr	r3, [pc, #140]	@ (801422c <xTaskResumeAll+0x12c>)
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141a2:	429a      	cmp	r2, r3
 80141a4:	d302      	bcc.n	80141ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80141a6:	4b22      	ldr	r3, [pc, #136]	@ (8014230 <xTaskResumeAll+0x130>)
 80141a8:	2201      	movs	r2, #1
 80141aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80141ac:	4b1c      	ldr	r3, [pc, #112]	@ (8014220 <xTaskResumeAll+0x120>)
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d1cc      	bne.n	801414e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d001      	beq.n	80141be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80141ba:	f000 fb3d 	bl	8014838 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80141be:	4b1d      	ldr	r3, [pc, #116]	@ (8014234 <xTaskResumeAll+0x134>)
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d010      	beq.n	80141ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80141ca:	f000 f859 	bl	8014280 <xTaskIncrementTick>
 80141ce:	4603      	mov	r3, r0
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d002      	beq.n	80141da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80141d4:	4b16      	ldr	r3, [pc, #88]	@ (8014230 <xTaskResumeAll+0x130>)
 80141d6:	2201      	movs	r2, #1
 80141d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	3b01      	subs	r3, #1
 80141de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d1f1      	bne.n	80141ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80141e6:	4b13      	ldr	r3, [pc, #76]	@ (8014234 <xTaskResumeAll+0x134>)
 80141e8:	2200      	movs	r2, #0
 80141ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80141ec:	4b10      	ldr	r3, [pc, #64]	@ (8014230 <xTaskResumeAll+0x130>)
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d009      	beq.n	8014208 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80141f4:	2301      	movs	r3, #1
 80141f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80141f8:	4b0f      	ldr	r3, [pc, #60]	@ (8014238 <xTaskResumeAll+0x138>)
 80141fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80141fe:	601a      	str	r2, [r3, #0]
 8014200:	f3bf 8f4f 	dsb	sy
 8014204:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014208:	f000 fec0 	bl	8014f8c <vPortExitCritical>

	return xAlreadyYielded;
 801420c:	68bb      	ldr	r3, [r7, #8]
}
 801420e:	4618      	mov	r0, r3
 8014210:	3710      	adds	r7, #16
 8014212:	46bd      	mov	sp, r7
 8014214:	bd80      	pop	{r7, pc}
 8014216:	bf00      	nop
 8014218:	240014cc 	.word	0x240014cc
 801421c:	240014a4 	.word	0x240014a4
 8014220:	24001464 	.word	0x24001464
 8014224:	240014ac 	.word	0x240014ac
 8014228:	240013a8 	.word	0x240013a8
 801422c:	240013a4 	.word	0x240013a4
 8014230:	240014b8 	.word	0x240014b8
 8014234:	240014b4 	.word	0x240014b4
 8014238:	e000ed04 	.word	0xe000ed04

0801423c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801423c:	b480      	push	{r7}
 801423e:	b083      	sub	sp, #12
 8014240:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014242:	4b05      	ldr	r3, [pc, #20]	@ (8014258 <xTaskGetTickCount+0x1c>)
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014248:	687b      	ldr	r3, [r7, #4]
}
 801424a:	4618      	mov	r0, r3
 801424c:	370c      	adds	r7, #12
 801424e:	46bd      	mov	sp, r7
 8014250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014254:	4770      	bx	lr
 8014256:	bf00      	nop
 8014258:	240014a8 	.word	0x240014a8

0801425c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b082      	sub	sp, #8
 8014260:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014262:	f000 ff41 	bl	80150e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8014266:	2300      	movs	r3, #0
 8014268:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801426a:	4b04      	ldr	r3, [pc, #16]	@ (801427c <xTaskGetTickCountFromISR+0x20>)
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014270:	683b      	ldr	r3, [r7, #0]
}
 8014272:	4618      	mov	r0, r3
 8014274:	3708      	adds	r7, #8
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}
 801427a:	bf00      	nop
 801427c:	240014a8 	.word	0x240014a8

08014280 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b086      	sub	sp, #24
 8014284:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014286:	2300      	movs	r3, #0
 8014288:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801428a:	4b4f      	ldr	r3, [pc, #316]	@ (80143c8 <xTaskIncrementTick+0x148>)
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	2b00      	cmp	r3, #0
 8014290:	f040 808f 	bne.w	80143b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014294:	4b4d      	ldr	r3, [pc, #308]	@ (80143cc <xTaskIncrementTick+0x14c>)
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	3301      	adds	r3, #1
 801429a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801429c:	4a4b      	ldr	r2, [pc, #300]	@ (80143cc <xTaskIncrementTick+0x14c>)
 801429e:	693b      	ldr	r3, [r7, #16]
 80142a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80142a2:	693b      	ldr	r3, [r7, #16]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d121      	bne.n	80142ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80142a8:	4b49      	ldr	r3, [pc, #292]	@ (80143d0 <xTaskIncrementTick+0x150>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d00b      	beq.n	80142ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80142b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142b6:	f383 8811 	msr	BASEPRI, r3
 80142ba:	f3bf 8f6f 	isb	sy
 80142be:	f3bf 8f4f 	dsb	sy
 80142c2:	603b      	str	r3, [r7, #0]
}
 80142c4:	bf00      	nop
 80142c6:	bf00      	nop
 80142c8:	e7fd      	b.n	80142c6 <xTaskIncrementTick+0x46>
 80142ca:	4b41      	ldr	r3, [pc, #260]	@ (80143d0 <xTaskIncrementTick+0x150>)
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	60fb      	str	r3, [r7, #12]
 80142d0:	4b40      	ldr	r3, [pc, #256]	@ (80143d4 <xTaskIncrementTick+0x154>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	4a3e      	ldr	r2, [pc, #248]	@ (80143d0 <xTaskIncrementTick+0x150>)
 80142d6:	6013      	str	r3, [r2, #0]
 80142d8:	4a3e      	ldr	r2, [pc, #248]	@ (80143d4 <xTaskIncrementTick+0x154>)
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	6013      	str	r3, [r2, #0]
 80142de:	4b3e      	ldr	r3, [pc, #248]	@ (80143d8 <xTaskIncrementTick+0x158>)
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	3301      	adds	r3, #1
 80142e4:	4a3c      	ldr	r2, [pc, #240]	@ (80143d8 <xTaskIncrementTick+0x158>)
 80142e6:	6013      	str	r3, [r2, #0]
 80142e8:	f000 faa6 	bl	8014838 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80142ec:	4b3b      	ldr	r3, [pc, #236]	@ (80143dc <xTaskIncrementTick+0x15c>)
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	693a      	ldr	r2, [r7, #16]
 80142f2:	429a      	cmp	r2, r3
 80142f4:	d348      	bcc.n	8014388 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80142f6:	4b36      	ldr	r3, [pc, #216]	@ (80143d0 <xTaskIncrementTick+0x150>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d104      	bne.n	801430a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014300:	4b36      	ldr	r3, [pc, #216]	@ (80143dc <xTaskIncrementTick+0x15c>)
 8014302:	f04f 32ff 	mov.w	r2, #4294967295
 8014306:	601a      	str	r2, [r3, #0]
					break;
 8014308:	e03e      	b.n	8014388 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801430a:	4b31      	ldr	r3, [pc, #196]	@ (80143d0 <xTaskIncrementTick+0x150>)
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	68db      	ldr	r3, [r3, #12]
 8014310:	68db      	ldr	r3, [r3, #12]
 8014312:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	685b      	ldr	r3, [r3, #4]
 8014318:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801431a:	693a      	ldr	r2, [r7, #16]
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	429a      	cmp	r2, r3
 8014320:	d203      	bcs.n	801432a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014322:	4a2e      	ldr	r2, [pc, #184]	@ (80143dc <xTaskIncrementTick+0x15c>)
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014328:	e02e      	b.n	8014388 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801432a:	68bb      	ldr	r3, [r7, #8]
 801432c:	3304      	adds	r3, #4
 801432e:	4618      	mov	r0, r3
 8014330:	f7fe fc03 	bl	8012b3a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014338:	2b00      	cmp	r3, #0
 801433a:	d004      	beq.n	8014346 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801433c:	68bb      	ldr	r3, [r7, #8]
 801433e:	3318      	adds	r3, #24
 8014340:	4618      	mov	r0, r3
 8014342:	f7fe fbfa 	bl	8012b3a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801434a:	2201      	movs	r2, #1
 801434c:	409a      	lsls	r2, r3
 801434e:	4b24      	ldr	r3, [pc, #144]	@ (80143e0 <xTaskIncrementTick+0x160>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	4313      	orrs	r3, r2
 8014354:	4a22      	ldr	r2, [pc, #136]	@ (80143e0 <xTaskIncrementTick+0x160>)
 8014356:	6013      	str	r3, [r2, #0]
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801435c:	4613      	mov	r3, r2
 801435e:	009b      	lsls	r3, r3, #2
 8014360:	4413      	add	r3, r2
 8014362:	009b      	lsls	r3, r3, #2
 8014364:	4a1f      	ldr	r2, [pc, #124]	@ (80143e4 <xTaskIncrementTick+0x164>)
 8014366:	441a      	add	r2, r3
 8014368:	68bb      	ldr	r3, [r7, #8]
 801436a:	3304      	adds	r3, #4
 801436c:	4619      	mov	r1, r3
 801436e:	4610      	mov	r0, r2
 8014370:	f7fe fb86 	bl	8012a80 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014378:	4b1b      	ldr	r3, [pc, #108]	@ (80143e8 <xTaskIncrementTick+0x168>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801437e:	429a      	cmp	r2, r3
 8014380:	d3b9      	bcc.n	80142f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8014382:	2301      	movs	r3, #1
 8014384:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014386:	e7b6      	b.n	80142f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014388:	4b17      	ldr	r3, [pc, #92]	@ (80143e8 <xTaskIncrementTick+0x168>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801438e:	4915      	ldr	r1, [pc, #84]	@ (80143e4 <xTaskIncrementTick+0x164>)
 8014390:	4613      	mov	r3, r2
 8014392:	009b      	lsls	r3, r3, #2
 8014394:	4413      	add	r3, r2
 8014396:	009b      	lsls	r3, r3, #2
 8014398:	440b      	add	r3, r1
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	2b01      	cmp	r3, #1
 801439e:	d901      	bls.n	80143a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80143a0:	2301      	movs	r3, #1
 80143a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80143a4:	4b11      	ldr	r3, [pc, #68]	@ (80143ec <xTaskIncrementTick+0x16c>)
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d007      	beq.n	80143bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80143ac:	2301      	movs	r3, #1
 80143ae:	617b      	str	r3, [r7, #20]
 80143b0:	e004      	b.n	80143bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80143b2:	4b0f      	ldr	r3, [pc, #60]	@ (80143f0 <xTaskIncrementTick+0x170>)
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	3301      	adds	r3, #1
 80143b8:	4a0d      	ldr	r2, [pc, #52]	@ (80143f0 <xTaskIncrementTick+0x170>)
 80143ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80143bc:	697b      	ldr	r3, [r7, #20]
}
 80143be:	4618      	mov	r0, r3
 80143c0:	3718      	adds	r7, #24
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}
 80143c6:	bf00      	nop
 80143c8:	240014cc 	.word	0x240014cc
 80143cc:	240014a8 	.word	0x240014a8
 80143d0:	2400145c 	.word	0x2400145c
 80143d4:	24001460 	.word	0x24001460
 80143d8:	240014bc 	.word	0x240014bc
 80143dc:	240014c4 	.word	0x240014c4
 80143e0:	240014ac 	.word	0x240014ac
 80143e4:	240013a8 	.word	0x240013a8
 80143e8:	240013a4 	.word	0x240013a4
 80143ec:	240014b8 	.word	0x240014b8
 80143f0:	240014b4 	.word	0x240014b4

080143f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80143f4:	b480      	push	{r7}
 80143f6:	b087      	sub	sp, #28
 80143f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80143fa:	4b27      	ldr	r3, [pc, #156]	@ (8014498 <vTaskSwitchContext+0xa4>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d003      	beq.n	801440a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014402:	4b26      	ldr	r3, [pc, #152]	@ (801449c <vTaskSwitchContext+0xa8>)
 8014404:	2201      	movs	r2, #1
 8014406:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014408:	e040      	b.n	801448c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801440a:	4b24      	ldr	r3, [pc, #144]	@ (801449c <vTaskSwitchContext+0xa8>)
 801440c:	2200      	movs	r2, #0
 801440e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014410:	4b23      	ldr	r3, [pc, #140]	@ (80144a0 <vTaskSwitchContext+0xac>)
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	fab3 f383 	clz	r3, r3
 801441c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801441e:	7afb      	ldrb	r3, [r7, #11]
 8014420:	f1c3 031f 	rsb	r3, r3, #31
 8014424:	617b      	str	r3, [r7, #20]
 8014426:	491f      	ldr	r1, [pc, #124]	@ (80144a4 <vTaskSwitchContext+0xb0>)
 8014428:	697a      	ldr	r2, [r7, #20]
 801442a:	4613      	mov	r3, r2
 801442c:	009b      	lsls	r3, r3, #2
 801442e:	4413      	add	r3, r2
 8014430:	009b      	lsls	r3, r3, #2
 8014432:	440b      	add	r3, r1
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d10b      	bne.n	8014452 <vTaskSwitchContext+0x5e>
	__asm volatile
 801443a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801443e:	f383 8811 	msr	BASEPRI, r3
 8014442:	f3bf 8f6f 	isb	sy
 8014446:	f3bf 8f4f 	dsb	sy
 801444a:	607b      	str	r3, [r7, #4]
}
 801444c:	bf00      	nop
 801444e:	bf00      	nop
 8014450:	e7fd      	b.n	801444e <vTaskSwitchContext+0x5a>
 8014452:	697a      	ldr	r2, [r7, #20]
 8014454:	4613      	mov	r3, r2
 8014456:	009b      	lsls	r3, r3, #2
 8014458:	4413      	add	r3, r2
 801445a:	009b      	lsls	r3, r3, #2
 801445c:	4a11      	ldr	r2, [pc, #68]	@ (80144a4 <vTaskSwitchContext+0xb0>)
 801445e:	4413      	add	r3, r2
 8014460:	613b      	str	r3, [r7, #16]
 8014462:	693b      	ldr	r3, [r7, #16]
 8014464:	685b      	ldr	r3, [r3, #4]
 8014466:	685a      	ldr	r2, [r3, #4]
 8014468:	693b      	ldr	r3, [r7, #16]
 801446a:	605a      	str	r2, [r3, #4]
 801446c:	693b      	ldr	r3, [r7, #16]
 801446e:	685a      	ldr	r2, [r3, #4]
 8014470:	693b      	ldr	r3, [r7, #16]
 8014472:	3308      	adds	r3, #8
 8014474:	429a      	cmp	r2, r3
 8014476:	d104      	bne.n	8014482 <vTaskSwitchContext+0x8e>
 8014478:	693b      	ldr	r3, [r7, #16]
 801447a:	685b      	ldr	r3, [r3, #4]
 801447c:	685a      	ldr	r2, [r3, #4]
 801447e:	693b      	ldr	r3, [r7, #16]
 8014480:	605a      	str	r2, [r3, #4]
 8014482:	693b      	ldr	r3, [r7, #16]
 8014484:	685b      	ldr	r3, [r3, #4]
 8014486:	68db      	ldr	r3, [r3, #12]
 8014488:	4a07      	ldr	r2, [pc, #28]	@ (80144a8 <vTaskSwitchContext+0xb4>)
 801448a:	6013      	str	r3, [r2, #0]
}
 801448c:	bf00      	nop
 801448e:	371c      	adds	r7, #28
 8014490:	46bd      	mov	sp, r7
 8014492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014496:	4770      	bx	lr
 8014498:	240014cc 	.word	0x240014cc
 801449c:	240014b8 	.word	0x240014b8
 80144a0:	240014ac 	.word	0x240014ac
 80144a4:	240013a8 	.word	0x240013a8
 80144a8:	240013a4 	.word	0x240013a4

080144ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b084      	sub	sp, #16
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
 80144b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d10b      	bne.n	80144d4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80144bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144c0:	f383 8811 	msr	BASEPRI, r3
 80144c4:	f3bf 8f6f 	isb	sy
 80144c8:	f3bf 8f4f 	dsb	sy
 80144cc:	60fb      	str	r3, [r7, #12]
}
 80144ce:	bf00      	nop
 80144d0:	bf00      	nop
 80144d2:	e7fd      	b.n	80144d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80144d4:	4b07      	ldr	r3, [pc, #28]	@ (80144f4 <vTaskPlaceOnEventList+0x48>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	3318      	adds	r3, #24
 80144da:	4619      	mov	r1, r3
 80144dc:	6878      	ldr	r0, [r7, #4]
 80144de:	f7fe faf3 	bl	8012ac8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80144e2:	2101      	movs	r1, #1
 80144e4:	6838      	ldr	r0, [r7, #0]
 80144e6:	f000 fb87 	bl	8014bf8 <prvAddCurrentTaskToDelayedList>
}
 80144ea:	bf00      	nop
 80144ec:	3710      	adds	r7, #16
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd80      	pop	{r7, pc}
 80144f2:	bf00      	nop
 80144f4:	240013a4 	.word	0x240013a4

080144f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b086      	sub	sp, #24
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	68db      	ldr	r3, [r3, #12]
 8014504:	68db      	ldr	r3, [r3, #12]
 8014506:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014508:	693b      	ldr	r3, [r7, #16]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d10b      	bne.n	8014526 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801450e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014512:	f383 8811 	msr	BASEPRI, r3
 8014516:	f3bf 8f6f 	isb	sy
 801451a:	f3bf 8f4f 	dsb	sy
 801451e:	60fb      	str	r3, [r7, #12]
}
 8014520:	bf00      	nop
 8014522:	bf00      	nop
 8014524:	e7fd      	b.n	8014522 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014526:	693b      	ldr	r3, [r7, #16]
 8014528:	3318      	adds	r3, #24
 801452a:	4618      	mov	r0, r3
 801452c:	f7fe fb05 	bl	8012b3a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014530:	4b1d      	ldr	r3, [pc, #116]	@ (80145a8 <xTaskRemoveFromEventList+0xb0>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d11c      	bne.n	8014572 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014538:	693b      	ldr	r3, [r7, #16]
 801453a:	3304      	adds	r3, #4
 801453c:	4618      	mov	r0, r3
 801453e:	f7fe fafc 	bl	8012b3a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014542:	693b      	ldr	r3, [r7, #16]
 8014544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014546:	2201      	movs	r2, #1
 8014548:	409a      	lsls	r2, r3
 801454a:	4b18      	ldr	r3, [pc, #96]	@ (80145ac <xTaskRemoveFromEventList+0xb4>)
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	4313      	orrs	r3, r2
 8014550:	4a16      	ldr	r2, [pc, #88]	@ (80145ac <xTaskRemoveFromEventList+0xb4>)
 8014552:	6013      	str	r3, [r2, #0]
 8014554:	693b      	ldr	r3, [r7, #16]
 8014556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014558:	4613      	mov	r3, r2
 801455a:	009b      	lsls	r3, r3, #2
 801455c:	4413      	add	r3, r2
 801455e:	009b      	lsls	r3, r3, #2
 8014560:	4a13      	ldr	r2, [pc, #76]	@ (80145b0 <xTaskRemoveFromEventList+0xb8>)
 8014562:	441a      	add	r2, r3
 8014564:	693b      	ldr	r3, [r7, #16]
 8014566:	3304      	adds	r3, #4
 8014568:	4619      	mov	r1, r3
 801456a:	4610      	mov	r0, r2
 801456c:	f7fe fa88 	bl	8012a80 <vListInsertEnd>
 8014570:	e005      	b.n	801457e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014572:	693b      	ldr	r3, [r7, #16]
 8014574:	3318      	adds	r3, #24
 8014576:	4619      	mov	r1, r3
 8014578:	480e      	ldr	r0, [pc, #56]	@ (80145b4 <xTaskRemoveFromEventList+0xbc>)
 801457a:	f7fe fa81 	bl	8012a80 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801457e:	693b      	ldr	r3, [r7, #16]
 8014580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014582:	4b0d      	ldr	r3, [pc, #52]	@ (80145b8 <xTaskRemoveFromEventList+0xc0>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014588:	429a      	cmp	r2, r3
 801458a:	d905      	bls.n	8014598 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801458c:	2301      	movs	r3, #1
 801458e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014590:	4b0a      	ldr	r3, [pc, #40]	@ (80145bc <xTaskRemoveFromEventList+0xc4>)
 8014592:	2201      	movs	r2, #1
 8014594:	601a      	str	r2, [r3, #0]
 8014596:	e001      	b.n	801459c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014598:	2300      	movs	r3, #0
 801459a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801459c:	697b      	ldr	r3, [r7, #20]
}
 801459e:	4618      	mov	r0, r3
 80145a0:	3718      	adds	r7, #24
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bd80      	pop	{r7, pc}
 80145a6:	bf00      	nop
 80145a8:	240014cc 	.word	0x240014cc
 80145ac:	240014ac 	.word	0x240014ac
 80145b0:	240013a8 	.word	0x240013a8
 80145b4:	24001464 	.word	0x24001464
 80145b8:	240013a4 	.word	0x240013a4
 80145bc:	240014b8 	.word	0x240014b8

080145c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80145c0:	b480      	push	{r7}
 80145c2:	b083      	sub	sp, #12
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80145c8:	4b06      	ldr	r3, [pc, #24]	@ (80145e4 <vTaskInternalSetTimeOutState+0x24>)
 80145ca:	681a      	ldr	r2, [r3, #0]
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80145d0:	4b05      	ldr	r3, [pc, #20]	@ (80145e8 <vTaskInternalSetTimeOutState+0x28>)
 80145d2:	681a      	ldr	r2, [r3, #0]
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	605a      	str	r2, [r3, #4]
}
 80145d8:	bf00      	nop
 80145da:	370c      	adds	r7, #12
 80145dc:	46bd      	mov	sp, r7
 80145de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e2:	4770      	bx	lr
 80145e4:	240014bc 	.word	0x240014bc
 80145e8:	240014a8 	.word	0x240014a8

080145ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b088      	sub	sp, #32
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
 80145f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d10b      	bne.n	8014614 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80145fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014600:	f383 8811 	msr	BASEPRI, r3
 8014604:	f3bf 8f6f 	isb	sy
 8014608:	f3bf 8f4f 	dsb	sy
 801460c:	613b      	str	r3, [r7, #16]
}
 801460e:	bf00      	nop
 8014610:	bf00      	nop
 8014612:	e7fd      	b.n	8014610 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014614:	683b      	ldr	r3, [r7, #0]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d10b      	bne.n	8014632 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801461a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801461e:	f383 8811 	msr	BASEPRI, r3
 8014622:	f3bf 8f6f 	isb	sy
 8014626:	f3bf 8f4f 	dsb	sy
 801462a:	60fb      	str	r3, [r7, #12]
}
 801462c:	bf00      	nop
 801462e:	bf00      	nop
 8014630:	e7fd      	b.n	801462e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8014632:	f000 fc79 	bl	8014f28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014636:	4b1d      	ldr	r3, [pc, #116]	@ (80146ac <xTaskCheckForTimeOut+0xc0>)
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	685b      	ldr	r3, [r3, #4]
 8014640:	69ba      	ldr	r2, [r7, #24]
 8014642:	1ad3      	subs	r3, r2, r3
 8014644:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014646:	683b      	ldr	r3, [r7, #0]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801464e:	d102      	bne.n	8014656 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014650:	2300      	movs	r3, #0
 8014652:	61fb      	str	r3, [r7, #28]
 8014654:	e023      	b.n	801469e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	681a      	ldr	r2, [r3, #0]
 801465a:	4b15      	ldr	r3, [pc, #84]	@ (80146b0 <xTaskCheckForTimeOut+0xc4>)
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	429a      	cmp	r2, r3
 8014660:	d007      	beq.n	8014672 <xTaskCheckForTimeOut+0x86>
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	685b      	ldr	r3, [r3, #4]
 8014666:	69ba      	ldr	r2, [r7, #24]
 8014668:	429a      	cmp	r2, r3
 801466a:	d302      	bcc.n	8014672 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801466c:	2301      	movs	r3, #1
 801466e:	61fb      	str	r3, [r7, #28]
 8014670:	e015      	b.n	801469e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	697a      	ldr	r2, [r7, #20]
 8014678:	429a      	cmp	r2, r3
 801467a:	d20b      	bcs.n	8014694 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801467c:	683b      	ldr	r3, [r7, #0]
 801467e:	681a      	ldr	r2, [r3, #0]
 8014680:	697b      	ldr	r3, [r7, #20]
 8014682:	1ad2      	subs	r2, r2, r3
 8014684:	683b      	ldr	r3, [r7, #0]
 8014686:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	f7ff ff99 	bl	80145c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801468e:	2300      	movs	r3, #0
 8014690:	61fb      	str	r3, [r7, #28]
 8014692:	e004      	b.n	801469e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014694:	683b      	ldr	r3, [r7, #0]
 8014696:	2200      	movs	r2, #0
 8014698:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801469a:	2301      	movs	r3, #1
 801469c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801469e:	f000 fc75 	bl	8014f8c <vPortExitCritical>

	return xReturn;
 80146a2:	69fb      	ldr	r3, [r7, #28]
}
 80146a4:	4618      	mov	r0, r3
 80146a6:	3720      	adds	r7, #32
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}
 80146ac:	240014a8 	.word	0x240014a8
 80146b0:	240014bc 	.word	0x240014bc

080146b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80146b4:	b480      	push	{r7}
 80146b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80146b8:	4b03      	ldr	r3, [pc, #12]	@ (80146c8 <vTaskMissedYield+0x14>)
 80146ba:	2201      	movs	r2, #1
 80146bc:	601a      	str	r2, [r3, #0]
}
 80146be:	bf00      	nop
 80146c0:	46bd      	mov	sp, r7
 80146c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c6:	4770      	bx	lr
 80146c8:	240014b8 	.word	0x240014b8

080146cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b082      	sub	sp, #8
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80146d4:	f000 f852 	bl	801477c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80146d8:	4b06      	ldr	r3, [pc, #24]	@ (80146f4 <prvIdleTask+0x28>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	2b01      	cmp	r3, #1
 80146de:	d9f9      	bls.n	80146d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80146e0:	4b05      	ldr	r3, [pc, #20]	@ (80146f8 <prvIdleTask+0x2c>)
 80146e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80146e6:	601a      	str	r2, [r3, #0]
 80146e8:	f3bf 8f4f 	dsb	sy
 80146ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80146f0:	e7f0      	b.n	80146d4 <prvIdleTask+0x8>
 80146f2:	bf00      	nop
 80146f4:	240013a8 	.word	0x240013a8
 80146f8:	e000ed04 	.word	0xe000ed04

080146fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b082      	sub	sp, #8
 8014700:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014702:	2300      	movs	r3, #0
 8014704:	607b      	str	r3, [r7, #4]
 8014706:	e00c      	b.n	8014722 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014708:	687a      	ldr	r2, [r7, #4]
 801470a:	4613      	mov	r3, r2
 801470c:	009b      	lsls	r3, r3, #2
 801470e:	4413      	add	r3, r2
 8014710:	009b      	lsls	r3, r3, #2
 8014712:	4a12      	ldr	r2, [pc, #72]	@ (801475c <prvInitialiseTaskLists+0x60>)
 8014714:	4413      	add	r3, r2
 8014716:	4618      	mov	r0, r3
 8014718:	f7fe f985 	bl	8012a26 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	3301      	adds	r3, #1
 8014720:	607b      	str	r3, [r7, #4]
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2b06      	cmp	r3, #6
 8014726:	d9ef      	bls.n	8014708 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014728:	480d      	ldr	r0, [pc, #52]	@ (8014760 <prvInitialiseTaskLists+0x64>)
 801472a:	f7fe f97c 	bl	8012a26 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801472e:	480d      	ldr	r0, [pc, #52]	@ (8014764 <prvInitialiseTaskLists+0x68>)
 8014730:	f7fe f979 	bl	8012a26 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014734:	480c      	ldr	r0, [pc, #48]	@ (8014768 <prvInitialiseTaskLists+0x6c>)
 8014736:	f7fe f976 	bl	8012a26 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801473a:	480c      	ldr	r0, [pc, #48]	@ (801476c <prvInitialiseTaskLists+0x70>)
 801473c:	f7fe f973 	bl	8012a26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014740:	480b      	ldr	r0, [pc, #44]	@ (8014770 <prvInitialiseTaskLists+0x74>)
 8014742:	f7fe f970 	bl	8012a26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014746:	4b0b      	ldr	r3, [pc, #44]	@ (8014774 <prvInitialiseTaskLists+0x78>)
 8014748:	4a05      	ldr	r2, [pc, #20]	@ (8014760 <prvInitialiseTaskLists+0x64>)
 801474a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801474c:	4b0a      	ldr	r3, [pc, #40]	@ (8014778 <prvInitialiseTaskLists+0x7c>)
 801474e:	4a05      	ldr	r2, [pc, #20]	@ (8014764 <prvInitialiseTaskLists+0x68>)
 8014750:	601a      	str	r2, [r3, #0]
}
 8014752:	bf00      	nop
 8014754:	3708      	adds	r7, #8
 8014756:	46bd      	mov	sp, r7
 8014758:	bd80      	pop	{r7, pc}
 801475a:	bf00      	nop
 801475c:	240013a8 	.word	0x240013a8
 8014760:	24001434 	.word	0x24001434
 8014764:	24001448 	.word	0x24001448
 8014768:	24001464 	.word	0x24001464
 801476c:	24001478 	.word	0x24001478
 8014770:	24001490 	.word	0x24001490
 8014774:	2400145c 	.word	0x2400145c
 8014778:	24001460 	.word	0x24001460

0801477c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b082      	sub	sp, #8
 8014780:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014782:	e019      	b.n	80147b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014784:	f000 fbd0 	bl	8014f28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014788:	4b10      	ldr	r3, [pc, #64]	@ (80147cc <prvCheckTasksWaitingTermination+0x50>)
 801478a:	68db      	ldr	r3, [r3, #12]
 801478c:	68db      	ldr	r3, [r3, #12]
 801478e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	3304      	adds	r3, #4
 8014794:	4618      	mov	r0, r3
 8014796:	f7fe f9d0 	bl	8012b3a <uxListRemove>
				--uxCurrentNumberOfTasks;
 801479a:	4b0d      	ldr	r3, [pc, #52]	@ (80147d0 <prvCheckTasksWaitingTermination+0x54>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	3b01      	subs	r3, #1
 80147a0:	4a0b      	ldr	r2, [pc, #44]	@ (80147d0 <prvCheckTasksWaitingTermination+0x54>)
 80147a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80147a4:	4b0b      	ldr	r3, [pc, #44]	@ (80147d4 <prvCheckTasksWaitingTermination+0x58>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	3b01      	subs	r3, #1
 80147aa:	4a0a      	ldr	r2, [pc, #40]	@ (80147d4 <prvCheckTasksWaitingTermination+0x58>)
 80147ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80147ae:	f000 fbed 	bl	8014f8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80147b2:	6878      	ldr	r0, [r7, #4]
 80147b4:	f000 f810 	bl	80147d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80147b8:	4b06      	ldr	r3, [pc, #24]	@ (80147d4 <prvCheckTasksWaitingTermination+0x58>)
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d1e1      	bne.n	8014784 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80147c0:	bf00      	nop
 80147c2:	bf00      	nop
 80147c4:	3708      	adds	r7, #8
 80147c6:	46bd      	mov	sp, r7
 80147c8:	bd80      	pop	{r7, pc}
 80147ca:	bf00      	nop
 80147cc:	24001478 	.word	0x24001478
 80147d0:	240014a4 	.word	0x240014a4
 80147d4:	2400148c 	.word	0x2400148c

080147d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b084      	sub	sp, #16
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d108      	bne.n	80147fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80147ee:	4618      	mov	r0, r3
 80147f0:	f000 fd8a 	bl	8015308 <vPortFree>
				vPortFree( pxTCB );
 80147f4:	6878      	ldr	r0, [r7, #4]
 80147f6:	f000 fd87 	bl	8015308 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80147fa:	e019      	b.n	8014830 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8014802:	2b01      	cmp	r3, #1
 8014804:	d103      	bne.n	801480e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014806:	6878      	ldr	r0, [r7, #4]
 8014808:	f000 fd7e 	bl	8015308 <vPortFree>
	}
 801480c:	e010      	b.n	8014830 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8014814:	2b02      	cmp	r3, #2
 8014816:	d00b      	beq.n	8014830 <prvDeleteTCB+0x58>
	__asm volatile
 8014818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801481c:	f383 8811 	msr	BASEPRI, r3
 8014820:	f3bf 8f6f 	isb	sy
 8014824:	f3bf 8f4f 	dsb	sy
 8014828:	60fb      	str	r3, [r7, #12]
}
 801482a:	bf00      	nop
 801482c:	bf00      	nop
 801482e:	e7fd      	b.n	801482c <prvDeleteTCB+0x54>
	}
 8014830:	bf00      	nop
 8014832:	3710      	adds	r7, #16
 8014834:	46bd      	mov	sp, r7
 8014836:	bd80      	pop	{r7, pc}

08014838 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014838:	b480      	push	{r7}
 801483a:	b083      	sub	sp, #12
 801483c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801483e:	4b0c      	ldr	r3, [pc, #48]	@ (8014870 <prvResetNextTaskUnblockTime+0x38>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d104      	bne.n	8014852 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014848:	4b0a      	ldr	r3, [pc, #40]	@ (8014874 <prvResetNextTaskUnblockTime+0x3c>)
 801484a:	f04f 32ff 	mov.w	r2, #4294967295
 801484e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014850:	e008      	b.n	8014864 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014852:	4b07      	ldr	r3, [pc, #28]	@ (8014870 <prvResetNextTaskUnblockTime+0x38>)
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	68db      	ldr	r3, [r3, #12]
 8014858:	68db      	ldr	r3, [r3, #12]
 801485a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	685b      	ldr	r3, [r3, #4]
 8014860:	4a04      	ldr	r2, [pc, #16]	@ (8014874 <prvResetNextTaskUnblockTime+0x3c>)
 8014862:	6013      	str	r3, [r2, #0]
}
 8014864:	bf00      	nop
 8014866:	370c      	adds	r7, #12
 8014868:	46bd      	mov	sp, r7
 801486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486e:	4770      	bx	lr
 8014870:	2400145c 	.word	0x2400145c
 8014874:	240014c4 	.word	0x240014c4

08014878 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014878:	b480      	push	{r7}
 801487a:	b083      	sub	sp, #12
 801487c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801487e:	4b0b      	ldr	r3, [pc, #44]	@ (80148ac <xTaskGetSchedulerState+0x34>)
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d102      	bne.n	801488c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014886:	2301      	movs	r3, #1
 8014888:	607b      	str	r3, [r7, #4]
 801488a:	e008      	b.n	801489e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801488c:	4b08      	ldr	r3, [pc, #32]	@ (80148b0 <xTaskGetSchedulerState+0x38>)
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d102      	bne.n	801489a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014894:	2302      	movs	r3, #2
 8014896:	607b      	str	r3, [r7, #4]
 8014898:	e001      	b.n	801489e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801489a:	2300      	movs	r3, #0
 801489c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801489e:	687b      	ldr	r3, [r7, #4]
	}
 80148a0:	4618      	mov	r0, r3
 80148a2:	370c      	adds	r7, #12
 80148a4:	46bd      	mov	sp, r7
 80148a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148aa:	4770      	bx	lr
 80148ac:	240014b0 	.word	0x240014b0
 80148b0:	240014cc 	.word	0x240014cc

080148b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b084      	sub	sp, #16
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80148c0:	2300      	movs	r3, #0
 80148c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d05e      	beq.n	8014988 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80148ca:	68bb      	ldr	r3, [r7, #8]
 80148cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148ce:	4b31      	ldr	r3, [pc, #196]	@ (8014994 <xTaskPriorityInherit+0xe0>)
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148d4:	429a      	cmp	r2, r3
 80148d6:	d24e      	bcs.n	8014976 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	699b      	ldr	r3, [r3, #24]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	db06      	blt.n	80148ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80148e0:	4b2c      	ldr	r3, [pc, #176]	@ (8014994 <xTaskPriorityInherit+0xe0>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148e6:	f1c3 0207 	rsb	r2, r3, #7
 80148ea:	68bb      	ldr	r3, [r7, #8]
 80148ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80148ee:	68bb      	ldr	r3, [r7, #8]
 80148f0:	6959      	ldr	r1, [r3, #20]
 80148f2:	68bb      	ldr	r3, [r7, #8]
 80148f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148f6:	4613      	mov	r3, r2
 80148f8:	009b      	lsls	r3, r3, #2
 80148fa:	4413      	add	r3, r2
 80148fc:	009b      	lsls	r3, r3, #2
 80148fe:	4a26      	ldr	r2, [pc, #152]	@ (8014998 <xTaskPriorityInherit+0xe4>)
 8014900:	4413      	add	r3, r2
 8014902:	4299      	cmp	r1, r3
 8014904:	d12f      	bne.n	8014966 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014906:	68bb      	ldr	r3, [r7, #8]
 8014908:	3304      	adds	r3, #4
 801490a:	4618      	mov	r0, r3
 801490c:	f7fe f915 	bl	8012b3a <uxListRemove>
 8014910:	4603      	mov	r3, r0
 8014912:	2b00      	cmp	r3, #0
 8014914:	d10a      	bne.n	801492c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8014916:	68bb      	ldr	r3, [r7, #8]
 8014918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801491a:	2201      	movs	r2, #1
 801491c:	fa02 f303 	lsl.w	r3, r2, r3
 8014920:	43da      	mvns	r2, r3
 8014922:	4b1e      	ldr	r3, [pc, #120]	@ (801499c <xTaskPriorityInherit+0xe8>)
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	4013      	ands	r3, r2
 8014928:	4a1c      	ldr	r2, [pc, #112]	@ (801499c <xTaskPriorityInherit+0xe8>)
 801492a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801492c:	4b19      	ldr	r3, [pc, #100]	@ (8014994 <xTaskPriorityInherit+0xe0>)
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014932:	68bb      	ldr	r3, [r7, #8]
 8014934:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014936:	68bb      	ldr	r3, [r7, #8]
 8014938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801493a:	2201      	movs	r2, #1
 801493c:	409a      	lsls	r2, r3
 801493e:	4b17      	ldr	r3, [pc, #92]	@ (801499c <xTaskPriorityInherit+0xe8>)
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	4313      	orrs	r3, r2
 8014944:	4a15      	ldr	r2, [pc, #84]	@ (801499c <xTaskPriorityInherit+0xe8>)
 8014946:	6013      	str	r3, [r2, #0]
 8014948:	68bb      	ldr	r3, [r7, #8]
 801494a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801494c:	4613      	mov	r3, r2
 801494e:	009b      	lsls	r3, r3, #2
 8014950:	4413      	add	r3, r2
 8014952:	009b      	lsls	r3, r3, #2
 8014954:	4a10      	ldr	r2, [pc, #64]	@ (8014998 <xTaskPriorityInherit+0xe4>)
 8014956:	441a      	add	r2, r3
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	3304      	adds	r3, #4
 801495c:	4619      	mov	r1, r3
 801495e:	4610      	mov	r0, r2
 8014960:	f7fe f88e 	bl	8012a80 <vListInsertEnd>
 8014964:	e004      	b.n	8014970 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014966:	4b0b      	ldr	r3, [pc, #44]	@ (8014994 <xTaskPriorityInherit+0xe0>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014970:	2301      	movs	r3, #1
 8014972:	60fb      	str	r3, [r7, #12]
 8014974:	e008      	b.n	8014988 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014976:	68bb      	ldr	r3, [r7, #8]
 8014978:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801497a:	4b06      	ldr	r3, [pc, #24]	@ (8014994 <xTaskPriorityInherit+0xe0>)
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014980:	429a      	cmp	r2, r3
 8014982:	d201      	bcs.n	8014988 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014984:	2301      	movs	r3, #1
 8014986:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014988:	68fb      	ldr	r3, [r7, #12]
	}
 801498a:	4618      	mov	r0, r3
 801498c:	3710      	adds	r7, #16
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}
 8014992:	bf00      	nop
 8014994:	240013a4 	.word	0x240013a4
 8014998:	240013a8 	.word	0x240013a8
 801499c:	240014ac 	.word	0x240014ac

080149a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b086      	sub	sp, #24
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80149ac:	2300      	movs	r3, #0
 80149ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d070      	beq.n	8014a98 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80149b6:	4b3b      	ldr	r3, [pc, #236]	@ (8014aa4 <xTaskPriorityDisinherit+0x104>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	693a      	ldr	r2, [r7, #16]
 80149bc:	429a      	cmp	r2, r3
 80149be:	d00b      	beq.n	80149d8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80149c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149c4:	f383 8811 	msr	BASEPRI, r3
 80149c8:	f3bf 8f6f 	isb	sy
 80149cc:	f3bf 8f4f 	dsb	sy
 80149d0:	60fb      	str	r3, [r7, #12]
}
 80149d2:	bf00      	nop
 80149d4:	bf00      	nop
 80149d6:	e7fd      	b.n	80149d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80149d8:	693b      	ldr	r3, [r7, #16]
 80149da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d10b      	bne.n	80149f8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80149e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149e4:	f383 8811 	msr	BASEPRI, r3
 80149e8:	f3bf 8f6f 	isb	sy
 80149ec:	f3bf 8f4f 	dsb	sy
 80149f0:	60bb      	str	r3, [r7, #8]
}
 80149f2:	bf00      	nop
 80149f4:	bf00      	nop
 80149f6:	e7fd      	b.n	80149f4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80149f8:	693b      	ldr	r3, [r7, #16]
 80149fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80149fc:	1e5a      	subs	r2, r3, #1
 80149fe:	693b      	ldr	r3, [r7, #16]
 8014a00:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014a02:	693b      	ldr	r3, [r7, #16]
 8014a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a06:	693b      	ldr	r3, [r7, #16]
 8014a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014a0a:	429a      	cmp	r2, r3
 8014a0c:	d044      	beq.n	8014a98 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014a0e:	693b      	ldr	r3, [r7, #16]
 8014a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d140      	bne.n	8014a98 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014a16:	693b      	ldr	r3, [r7, #16]
 8014a18:	3304      	adds	r3, #4
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	f7fe f88d 	bl	8012b3a <uxListRemove>
 8014a20:	4603      	mov	r3, r0
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d115      	bne.n	8014a52 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014a26:	693b      	ldr	r3, [r7, #16]
 8014a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a2a:	491f      	ldr	r1, [pc, #124]	@ (8014aa8 <xTaskPriorityDisinherit+0x108>)
 8014a2c:	4613      	mov	r3, r2
 8014a2e:	009b      	lsls	r3, r3, #2
 8014a30:	4413      	add	r3, r2
 8014a32:	009b      	lsls	r3, r3, #2
 8014a34:	440b      	add	r3, r1
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d10a      	bne.n	8014a52 <xTaskPriorityDisinherit+0xb2>
 8014a3c:	693b      	ldr	r3, [r7, #16]
 8014a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a40:	2201      	movs	r2, #1
 8014a42:	fa02 f303 	lsl.w	r3, r2, r3
 8014a46:	43da      	mvns	r2, r3
 8014a48:	4b18      	ldr	r3, [pc, #96]	@ (8014aac <xTaskPriorityDisinherit+0x10c>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	4013      	ands	r3, r2
 8014a4e:	4a17      	ldr	r2, [pc, #92]	@ (8014aac <xTaskPriorityDisinherit+0x10c>)
 8014a50:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014a52:	693b      	ldr	r3, [r7, #16]
 8014a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014a56:	693b      	ldr	r3, [r7, #16]
 8014a58:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a5a:	693b      	ldr	r3, [r7, #16]
 8014a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a5e:	f1c3 0207 	rsb	r2, r3, #7
 8014a62:	693b      	ldr	r3, [r7, #16]
 8014a64:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014a66:	693b      	ldr	r3, [r7, #16]
 8014a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a6a:	2201      	movs	r2, #1
 8014a6c:	409a      	lsls	r2, r3
 8014a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8014aac <xTaskPriorityDisinherit+0x10c>)
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	4313      	orrs	r3, r2
 8014a74:	4a0d      	ldr	r2, [pc, #52]	@ (8014aac <xTaskPriorityDisinherit+0x10c>)
 8014a76:	6013      	str	r3, [r2, #0]
 8014a78:	693b      	ldr	r3, [r7, #16]
 8014a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a7c:	4613      	mov	r3, r2
 8014a7e:	009b      	lsls	r3, r3, #2
 8014a80:	4413      	add	r3, r2
 8014a82:	009b      	lsls	r3, r3, #2
 8014a84:	4a08      	ldr	r2, [pc, #32]	@ (8014aa8 <xTaskPriorityDisinherit+0x108>)
 8014a86:	441a      	add	r2, r3
 8014a88:	693b      	ldr	r3, [r7, #16]
 8014a8a:	3304      	adds	r3, #4
 8014a8c:	4619      	mov	r1, r3
 8014a8e:	4610      	mov	r0, r2
 8014a90:	f7fd fff6 	bl	8012a80 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014a94:	2301      	movs	r3, #1
 8014a96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014a98:	697b      	ldr	r3, [r7, #20]
	}
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	3718      	adds	r7, #24
 8014a9e:	46bd      	mov	sp, r7
 8014aa0:	bd80      	pop	{r7, pc}
 8014aa2:	bf00      	nop
 8014aa4:	240013a4 	.word	0x240013a4
 8014aa8:	240013a8 	.word	0x240013a8
 8014aac:	240014ac 	.word	0x240014ac

08014ab0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b088      	sub	sp, #32
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
 8014ab8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014abe:	2301      	movs	r3, #1
 8014ac0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d079      	beq.n	8014bbc <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014ac8:	69bb      	ldr	r3, [r7, #24]
 8014aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d10b      	bne.n	8014ae8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8014ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ad4:	f383 8811 	msr	BASEPRI, r3
 8014ad8:	f3bf 8f6f 	isb	sy
 8014adc:	f3bf 8f4f 	dsb	sy
 8014ae0:	60fb      	str	r3, [r7, #12]
}
 8014ae2:	bf00      	nop
 8014ae4:	bf00      	nop
 8014ae6:	e7fd      	b.n	8014ae4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014ae8:	69bb      	ldr	r3, [r7, #24]
 8014aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014aec:	683a      	ldr	r2, [r7, #0]
 8014aee:	429a      	cmp	r2, r3
 8014af0:	d902      	bls.n	8014af8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014af2:	683b      	ldr	r3, [r7, #0]
 8014af4:	61fb      	str	r3, [r7, #28]
 8014af6:	e002      	b.n	8014afe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014af8:	69bb      	ldr	r3, [r7, #24]
 8014afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014afc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014afe:	69bb      	ldr	r3, [r7, #24]
 8014b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b02:	69fa      	ldr	r2, [r7, #28]
 8014b04:	429a      	cmp	r2, r3
 8014b06:	d059      	beq.n	8014bbc <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014b08:	69bb      	ldr	r3, [r7, #24]
 8014b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014b0c:	697a      	ldr	r2, [r7, #20]
 8014b0e:	429a      	cmp	r2, r3
 8014b10:	d154      	bne.n	8014bbc <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014b12:	4b2c      	ldr	r3, [pc, #176]	@ (8014bc4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	69ba      	ldr	r2, [r7, #24]
 8014b18:	429a      	cmp	r2, r3
 8014b1a:	d10b      	bne.n	8014b34 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8014b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b20:	f383 8811 	msr	BASEPRI, r3
 8014b24:	f3bf 8f6f 	isb	sy
 8014b28:	f3bf 8f4f 	dsb	sy
 8014b2c:	60bb      	str	r3, [r7, #8]
}
 8014b2e:	bf00      	nop
 8014b30:	bf00      	nop
 8014b32:	e7fd      	b.n	8014b30 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014b34:	69bb      	ldr	r3, [r7, #24]
 8014b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b38:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014b3a:	69bb      	ldr	r3, [r7, #24]
 8014b3c:	69fa      	ldr	r2, [r7, #28]
 8014b3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014b40:	69bb      	ldr	r3, [r7, #24]
 8014b42:	699b      	ldr	r3, [r3, #24]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	db04      	blt.n	8014b52 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b48:	69fb      	ldr	r3, [r7, #28]
 8014b4a:	f1c3 0207 	rsb	r2, r3, #7
 8014b4e:	69bb      	ldr	r3, [r7, #24]
 8014b50:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014b52:	69bb      	ldr	r3, [r7, #24]
 8014b54:	6959      	ldr	r1, [r3, #20]
 8014b56:	693a      	ldr	r2, [r7, #16]
 8014b58:	4613      	mov	r3, r2
 8014b5a:	009b      	lsls	r3, r3, #2
 8014b5c:	4413      	add	r3, r2
 8014b5e:	009b      	lsls	r3, r3, #2
 8014b60:	4a19      	ldr	r2, [pc, #100]	@ (8014bc8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8014b62:	4413      	add	r3, r2
 8014b64:	4299      	cmp	r1, r3
 8014b66:	d129      	bne.n	8014bbc <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014b68:	69bb      	ldr	r3, [r7, #24]
 8014b6a:	3304      	adds	r3, #4
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f7fd ffe4 	bl	8012b3a <uxListRemove>
 8014b72:	4603      	mov	r3, r0
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d10a      	bne.n	8014b8e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8014b78:	69bb      	ldr	r3, [r7, #24]
 8014b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b7c:	2201      	movs	r2, #1
 8014b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8014b82:	43da      	mvns	r2, r3
 8014b84:	4b11      	ldr	r3, [pc, #68]	@ (8014bcc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	4013      	ands	r3, r2
 8014b8a:	4a10      	ldr	r2, [pc, #64]	@ (8014bcc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8014b8c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014b8e:	69bb      	ldr	r3, [r7, #24]
 8014b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b92:	2201      	movs	r2, #1
 8014b94:	409a      	lsls	r2, r3
 8014b96:	4b0d      	ldr	r3, [pc, #52]	@ (8014bcc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	4313      	orrs	r3, r2
 8014b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8014bcc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8014b9e:	6013      	str	r3, [r2, #0]
 8014ba0:	69bb      	ldr	r3, [r7, #24]
 8014ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ba4:	4613      	mov	r3, r2
 8014ba6:	009b      	lsls	r3, r3, #2
 8014ba8:	4413      	add	r3, r2
 8014baa:	009b      	lsls	r3, r3, #2
 8014bac:	4a06      	ldr	r2, [pc, #24]	@ (8014bc8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8014bae:	441a      	add	r2, r3
 8014bb0:	69bb      	ldr	r3, [r7, #24]
 8014bb2:	3304      	adds	r3, #4
 8014bb4:	4619      	mov	r1, r3
 8014bb6:	4610      	mov	r0, r2
 8014bb8:	f7fd ff62 	bl	8012a80 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014bbc:	bf00      	nop
 8014bbe:	3720      	adds	r7, #32
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	bd80      	pop	{r7, pc}
 8014bc4:	240013a4 	.word	0x240013a4
 8014bc8:	240013a8 	.word	0x240013a8
 8014bcc:	240014ac 	.word	0x240014ac

08014bd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014bd0:	b480      	push	{r7}
 8014bd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014bd4:	4b07      	ldr	r3, [pc, #28]	@ (8014bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d004      	beq.n	8014be6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014bdc:	4b05      	ldr	r3, [pc, #20]	@ (8014bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014be2:	3201      	adds	r2, #1
 8014be4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8014be6:	4b03      	ldr	r3, [pc, #12]	@ (8014bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8014be8:	681b      	ldr	r3, [r3, #0]
	}
 8014bea:	4618      	mov	r0, r3
 8014bec:	46bd      	mov	sp, r7
 8014bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf2:	4770      	bx	lr
 8014bf4:	240013a4 	.word	0x240013a4

08014bf8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b084      	sub	sp, #16
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
 8014c00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014c02:	4b29      	ldr	r3, [pc, #164]	@ (8014ca8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014c08:	4b28      	ldr	r3, [pc, #160]	@ (8014cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	3304      	adds	r3, #4
 8014c0e:	4618      	mov	r0, r3
 8014c10:	f7fd ff93 	bl	8012b3a <uxListRemove>
 8014c14:	4603      	mov	r3, r0
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d10b      	bne.n	8014c32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014c1a:	4b24      	ldr	r3, [pc, #144]	@ (8014cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c20:	2201      	movs	r2, #1
 8014c22:	fa02 f303 	lsl.w	r3, r2, r3
 8014c26:	43da      	mvns	r2, r3
 8014c28:	4b21      	ldr	r3, [pc, #132]	@ (8014cb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	4013      	ands	r3, r2
 8014c2e:	4a20      	ldr	r2, [pc, #128]	@ (8014cb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014c30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c38:	d10a      	bne.n	8014c50 <prvAddCurrentTaskToDelayedList+0x58>
 8014c3a:	683b      	ldr	r3, [r7, #0]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d007      	beq.n	8014c50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c40:	4b1a      	ldr	r3, [pc, #104]	@ (8014cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	3304      	adds	r3, #4
 8014c46:	4619      	mov	r1, r3
 8014c48:	481a      	ldr	r0, [pc, #104]	@ (8014cb4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014c4a:	f7fd ff19 	bl	8012a80 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014c4e:	e026      	b.n	8014c9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014c50:	68fa      	ldr	r2, [r7, #12]
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	4413      	add	r3, r2
 8014c56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014c58:	4b14      	ldr	r3, [pc, #80]	@ (8014cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	68ba      	ldr	r2, [r7, #8]
 8014c5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014c60:	68ba      	ldr	r2, [r7, #8]
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	429a      	cmp	r2, r3
 8014c66:	d209      	bcs.n	8014c7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c68:	4b13      	ldr	r3, [pc, #76]	@ (8014cb8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014c6a:	681a      	ldr	r2, [r3, #0]
 8014c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8014cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	3304      	adds	r3, #4
 8014c72:	4619      	mov	r1, r3
 8014c74:	4610      	mov	r0, r2
 8014c76:	f7fd ff27 	bl	8012ac8 <vListInsert>
}
 8014c7a:	e010      	b.n	8014c9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8014cbc <prvAddCurrentTaskToDelayedList+0xc4>)
 8014c7e:	681a      	ldr	r2, [r3, #0]
 8014c80:	4b0a      	ldr	r3, [pc, #40]	@ (8014cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	3304      	adds	r3, #4
 8014c86:	4619      	mov	r1, r3
 8014c88:	4610      	mov	r0, r2
 8014c8a:	f7fd ff1d 	bl	8012ac8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8014cc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	68ba      	ldr	r2, [r7, #8]
 8014c94:	429a      	cmp	r2, r3
 8014c96:	d202      	bcs.n	8014c9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014c98:	4a09      	ldr	r2, [pc, #36]	@ (8014cc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014c9a:	68bb      	ldr	r3, [r7, #8]
 8014c9c:	6013      	str	r3, [r2, #0]
}
 8014c9e:	bf00      	nop
 8014ca0:	3710      	adds	r7, #16
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	bd80      	pop	{r7, pc}
 8014ca6:	bf00      	nop
 8014ca8:	240014a8 	.word	0x240014a8
 8014cac:	240013a4 	.word	0x240013a4
 8014cb0:	240014ac 	.word	0x240014ac
 8014cb4:	24001490 	.word	0x24001490
 8014cb8:	24001460 	.word	0x24001460
 8014cbc:	2400145c 	.word	0x2400145c
 8014cc0:	240014c4 	.word	0x240014c4

08014cc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014cc4:	b480      	push	{r7}
 8014cc6:	b085      	sub	sp, #20
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	60f8      	str	r0, [r7, #12]
 8014ccc:	60b9      	str	r1, [r7, #8]
 8014cce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	3b04      	subs	r3, #4
 8014cd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	3b04      	subs	r3, #4
 8014ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014ce4:	68bb      	ldr	r3, [r7, #8]
 8014ce6:	f023 0201 	bic.w	r2, r3, #1
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	3b04      	subs	r3, #4
 8014cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8014d28 <pxPortInitialiseStack+0x64>)
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	3b14      	subs	r3, #20
 8014cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014d00:	687a      	ldr	r2, [r7, #4]
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	3b04      	subs	r3, #4
 8014d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	f06f 0202 	mvn.w	r2, #2
 8014d12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	3b20      	subs	r3, #32
 8014d18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014d1a:	68fb      	ldr	r3, [r7, #12]
}
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	3714      	adds	r7, #20
 8014d20:	46bd      	mov	sp, r7
 8014d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d26:	4770      	bx	lr
 8014d28:	08014d2d 	.word	0x08014d2d

08014d2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014d2c:	b480      	push	{r7}
 8014d2e:	b085      	sub	sp, #20
 8014d30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014d32:	2300      	movs	r3, #0
 8014d34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014d36:	4b13      	ldr	r3, [pc, #76]	@ (8014d84 <prvTaskExitError+0x58>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d3e:	d00b      	beq.n	8014d58 <prvTaskExitError+0x2c>
	__asm volatile
 8014d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d44:	f383 8811 	msr	BASEPRI, r3
 8014d48:	f3bf 8f6f 	isb	sy
 8014d4c:	f3bf 8f4f 	dsb	sy
 8014d50:	60fb      	str	r3, [r7, #12]
}
 8014d52:	bf00      	nop
 8014d54:	bf00      	nop
 8014d56:	e7fd      	b.n	8014d54 <prvTaskExitError+0x28>
	__asm volatile
 8014d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d5c:	f383 8811 	msr	BASEPRI, r3
 8014d60:	f3bf 8f6f 	isb	sy
 8014d64:	f3bf 8f4f 	dsb	sy
 8014d68:	60bb      	str	r3, [r7, #8]
}
 8014d6a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014d6c:	bf00      	nop
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d0fc      	beq.n	8014d6e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014d74:	bf00      	nop
 8014d76:	bf00      	nop
 8014d78:	3714      	adds	r7, #20
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d80:	4770      	bx	lr
 8014d82:	bf00      	nop
 8014d84:	24000200 	.word	0x24000200
	...

08014d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014d90:	4b07      	ldr	r3, [pc, #28]	@ (8014db0 <pxCurrentTCBConst2>)
 8014d92:	6819      	ldr	r1, [r3, #0]
 8014d94:	6808      	ldr	r0, [r1, #0]
 8014d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d9a:	f380 8809 	msr	PSP, r0
 8014d9e:	f3bf 8f6f 	isb	sy
 8014da2:	f04f 0000 	mov.w	r0, #0
 8014da6:	f380 8811 	msr	BASEPRI, r0
 8014daa:	4770      	bx	lr
 8014dac:	f3af 8000 	nop.w

08014db0 <pxCurrentTCBConst2>:
 8014db0:	240013a4 	.word	0x240013a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014db4:	bf00      	nop
 8014db6:	bf00      	nop

08014db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014db8:	4808      	ldr	r0, [pc, #32]	@ (8014ddc <prvPortStartFirstTask+0x24>)
 8014dba:	6800      	ldr	r0, [r0, #0]
 8014dbc:	6800      	ldr	r0, [r0, #0]
 8014dbe:	f380 8808 	msr	MSP, r0
 8014dc2:	f04f 0000 	mov.w	r0, #0
 8014dc6:	f380 8814 	msr	CONTROL, r0
 8014dca:	b662      	cpsie	i
 8014dcc:	b661      	cpsie	f
 8014dce:	f3bf 8f4f 	dsb	sy
 8014dd2:	f3bf 8f6f 	isb	sy
 8014dd6:	df00      	svc	0
 8014dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014dda:	bf00      	nop
 8014ddc:	e000ed08 	.word	0xe000ed08

08014de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b086      	sub	sp, #24
 8014de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014de6:	4b47      	ldr	r3, [pc, #284]	@ (8014f04 <xPortStartScheduler+0x124>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	4a47      	ldr	r2, [pc, #284]	@ (8014f08 <xPortStartScheduler+0x128>)
 8014dec:	4293      	cmp	r3, r2
 8014dee:	d10b      	bne.n	8014e08 <xPortStartScheduler+0x28>
	__asm volatile
 8014df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014df4:	f383 8811 	msr	BASEPRI, r3
 8014df8:	f3bf 8f6f 	isb	sy
 8014dfc:	f3bf 8f4f 	dsb	sy
 8014e00:	613b      	str	r3, [r7, #16]
}
 8014e02:	bf00      	nop
 8014e04:	bf00      	nop
 8014e06:	e7fd      	b.n	8014e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014e08:	4b3e      	ldr	r3, [pc, #248]	@ (8014f04 <xPortStartScheduler+0x124>)
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8014f0c <xPortStartScheduler+0x12c>)
 8014e0e:	4293      	cmp	r3, r2
 8014e10:	d10b      	bne.n	8014e2a <xPortStartScheduler+0x4a>
	__asm volatile
 8014e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e16:	f383 8811 	msr	BASEPRI, r3
 8014e1a:	f3bf 8f6f 	isb	sy
 8014e1e:	f3bf 8f4f 	dsb	sy
 8014e22:	60fb      	str	r3, [r7, #12]
}
 8014e24:	bf00      	nop
 8014e26:	bf00      	nop
 8014e28:	e7fd      	b.n	8014e26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014e2a:	4b39      	ldr	r3, [pc, #228]	@ (8014f10 <xPortStartScheduler+0x130>)
 8014e2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	781b      	ldrb	r3, [r3, #0]
 8014e32:	b2db      	uxtb	r3, r3
 8014e34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014e36:	697b      	ldr	r3, [r7, #20]
 8014e38:	22ff      	movs	r2, #255	@ 0xff
 8014e3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014e3c:	697b      	ldr	r3, [r7, #20]
 8014e3e:	781b      	ldrb	r3, [r3, #0]
 8014e40:	b2db      	uxtb	r3, r3
 8014e42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014e44:	78fb      	ldrb	r3, [r7, #3]
 8014e46:	b2db      	uxtb	r3, r3
 8014e48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8014e4c:	b2da      	uxtb	r2, r3
 8014e4e:	4b31      	ldr	r3, [pc, #196]	@ (8014f14 <xPortStartScheduler+0x134>)
 8014e50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014e52:	4b31      	ldr	r3, [pc, #196]	@ (8014f18 <xPortStartScheduler+0x138>)
 8014e54:	2207      	movs	r2, #7
 8014e56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014e58:	e009      	b.n	8014e6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8014e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8014f18 <xPortStartScheduler+0x138>)
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	3b01      	subs	r3, #1
 8014e60:	4a2d      	ldr	r2, [pc, #180]	@ (8014f18 <xPortStartScheduler+0x138>)
 8014e62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014e64:	78fb      	ldrb	r3, [r7, #3]
 8014e66:	b2db      	uxtb	r3, r3
 8014e68:	005b      	lsls	r3, r3, #1
 8014e6a:	b2db      	uxtb	r3, r3
 8014e6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014e6e:	78fb      	ldrb	r3, [r7, #3]
 8014e70:	b2db      	uxtb	r3, r3
 8014e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014e76:	2b80      	cmp	r3, #128	@ 0x80
 8014e78:	d0ef      	beq.n	8014e5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014e7a:	4b27      	ldr	r3, [pc, #156]	@ (8014f18 <xPortStartScheduler+0x138>)
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	f1c3 0307 	rsb	r3, r3, #7
 8014e82:	2b04      	cmp	r3, #4
 8014e84:	d00b      	beq.n	8014e9e <xPortStartScheduler+0xbe>
	__asm volatile
 8014e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e8a:	f383 8811 	msr	BASEPRI, r3
 8014e8e:	f3bf 8f6f 	isb	sy
 8014e92:	f3bf 8f4f 	dsb	sy
 8014e96:	60bb      	str	r3, [r7, #8]
}
 8014e98:	bf00      	nop
 8014e9a:	bf00      	nop
 8014e9c:	e7fd      	b.n	8014e9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8014f18 <xPortStartScheduler+0x138>)
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	021b      	lsls	r3, r3, #8
 8014ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8014f18 <xPortStartScheduler+0x138>)
 8014ea6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8014f18 <xPortStartScheduler+0x138>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014eb0:	4a19      	ldr	r2, [pc, #100]	@ (8014f18 <xPortStartScheduler+0x138>)
 8014eb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	b2da      	uxtb	r2, r3
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014ebc:	4b17      	ldr	r3, [pc, #92]	@ (8014f1c <xPortStartScheduler+0x13c>)
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	4a16      	ldr	r2, [pc, #88]	@ (8014f1c <xPortStartScheduler+0x13c>)
 8014ec2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8014ec6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014ec8:	4b14      	ldr	r3, [pc, #80]	@ (8014f1c <xPortStartScheduler+0x13c>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	4a13      	ldr	r2, [pc, #76]	@ (8014f1c <xPortStartScheduler+0x13c>)
 8014ece:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014ed2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014ed4:	f000 f8da 	bl	801508c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014ed8:	4b11      	ldr	r3, [pc, #68]	@ (8014f20 <xPortStartScheduler+0x140>)
 8014eda:	2200      	movs	r2, #0
 8014edc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014ede:	f000 f8f9 	bl	80150d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014ee2:	4b10      	ldr	r3, [pc, #64]	@ (8014f24 <xPortStartScheduler+0x144>)
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8014f24 <xPortStartScheduler+0x144>)
 8014ee8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8014eec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014eee:	f7ff ff63 	bl	8014db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014ef2:	f7ff fa7f 	bl	80143f4 <vTaskSwitchContext>
	prvTaskExitError();
 8014ef6:	f7ff ff19 	bl	8014d2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014efa:	2300      	movs	r3, #0
}
 8014efc:	4618      	mov	r0, r3
 8014efe:	3718      	adds	r7, #24
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}
 8014f04:	e000ed00 	.word	0xe000ed00
 8014f08:	410fc271 	.word	0x410fc271
 8014f0c:	410fc270 	.word	0x410fc270
 8014f10:	e000e400 	.word	0xe000e400
 8014f14:	240014d0 	.word	0x240014d0
 8014f18:	240014d4 	.word	0x240014d4
 8014f1c:	e000ed20 	.word	0xe000ed20
 8014f20:	24000200 	.word	0x24000200
 8014f24:	e000ef34 	.word	0xe000ef34

08014f28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014f28:	b480      	push	{r7}
 8014f2a:	b083      	sub	sp, #12
 8014f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8014f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f32:	f383 8811 	msr	BASEPRI, r3
 8014f36:	f3bf 8f6f 	isb	sy
 8014f3a:	f3bf 8f4f 	dsb	sy
 8014f3e:	607b      	str	r3, [r7, #4]
}
 8014f40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014f42:	4b10      	ldr	r3, [pc, #64]	@ (8014f84 <vPortEnterCritical+0x5c>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	3301      	adds	r3, #1
 8014f48:	4a0e      	ldr	r2, [pc, #56]	@ (8014f84 <vPortEnterCritical+0x5c>)
 8014f4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8014f84 <vPortEnterCritical+0x5c>)
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	2b01      	cmp	r3, #1
 8014f52:	d110      	bne.n	8014f76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014f54:	4b0c      	ldr	r3, [pc, #48]	@ (8014f88 <vPortEnterCritical+0x60>)
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	b2db      	uxtb	r3, r3
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d00b      	beq.n	8014f76 <vPortEnterCritical+0x4e>
	__asm volatile
 8014f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f62:	f383 8811 	msr	BASEPRI, r3
 8014f66:	f3bf 8f6f 	isb	sy
 8014f6a:	f3bf 8f4f 	dsb	sy
 8014f6e:	603b      	str	r3, [r7, #0]
}
 8014f70:	bf00      	nop
 8014f72:	bf00      	nop
 8014f74:	e7fd      	b.n	8014f72 <vPortEnterCritical+0x4a>
	}
}
 8014f76:	bf00      	nop
 8014f78:	370c      	adds	r7, #12
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f80:	4770      	bx	lr
 8014f82:	bf00      	nop
 8014f84:	24000200 	.word	0x24000200
 8014f88:	e000ed04 	.word	0xe000ed04

08014f8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014f8c:	b480      	push	{r7}
 8014f8e:	b083      	sub	sp, #12
 8014f90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014f92:	4b12      	ldr	r3, [pc, #72]	@ (8014fdc <vPortExitCritical+0x50>)
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d10b      	bne.n	8014fb2 <vPortExitCritical+0x26>
	__asm volatile
 8014f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f9e:	f383 8811 	msr	BASEPRI, r3
 8014fa2:	f3bf 8f6f 	isb	sy
 8014fa6:	f3bf 8f4f 	dsb	sy
 8014faa:	607b      	str	r3, [r7, #4]
}
 8014fac:	bf00      	nop
 8014fae:	bf00      	nop
 8014fb0:	e7fd      	b.n	8014fae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8014fdc <vPortExitCritical+0x50>)
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	3b01      	subs	r3, #1
 8014fb8:	4a08      	ldr	r2, [pc, #32]	@ (8014fdc <vPortExitCritical+0x50>)
 8014fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014fbc:	4b07      	ldr	r3, [pc, #28]	@ (8014fdc <vPortExitCritical+0x50>)
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d105      	bne.n	8014fd0 <vPortExitCritical+0x44>
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	f383 8811 	msr	BASEPRI, r3
}
 8014fce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014fd0:	bf00      	nop
 8014fd2:	370c      	adds	r7, #12
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fda:	4770      	bx	lr
 8014fdc:	24000200 	.word	0x24000200

08014fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014fe0:	f3ef 8009 	mrs	r0, PSP
 8014fe4:	f3bf 8f6f 	isb	sy
 8014fe8:	4b15      	ldr	r3, [pc, #84]	@ (8015040 <pxCurrentTCBConst>)
 8014fea:	681a      	ldr	r2, [r3, #0]
 8014fec:	f01e 0f10 	tst.w	lr, #16
 8014ff0:	bf08      	it	eq
 8014ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ffa:	6010      	str	r0, [r2, #0]
 8014ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015000:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015004:	f380 8811 	msr	BASEPRI, r0
 8015008:	f3bf 8f4f 	dsb	sy
 801500c:	f3bf 8f6f 	isb	sy
 8015010:	f7ff f9f0 	bl	80143f4 <vTaskSwitchContext>
 8015014:	f04f 0000 	mov.w	r0, #0
 8015018:	f380 8811 	msr	BASEPRI, r0
 801501c:	bc09      	pop	{r0, r3}
 801501e:	6819      	ldr	r1, [r3, #0]
 8015020:	6808      	ldr	r0, [r1, #0]
 8015022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015026:	f01e 0f10 	tst.w	lr, #16
 801502a:	bf08      	it	eq
 801502c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015030:	f380 8809 	msr	PSP, r0
 8015034:	f3bf 8f6f 	isb	sy
 8015038:	4770      	bx	lr
 801503a:	bf00      	nop
 801503c:	f3af 8000 	nop.w

08015040 <pxCurrentTCBConst>:
 8015040:	240013a4 	.word	0x240013a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015044:	bf00      	nop
 8015046:	bf00      	nop

08015048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b082      	sub	sp, #8
 801504c:	af00      	add	r7, sp, #0
	__asm volatile
 801504e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015052:	f383 8811 	msr	BASEPRI, r3
 8015056:	f3bf 8f6f 	isb	sy
 801505a:	f3bf 8f4f 	dsb	sy
 801505e:	607b      	str	r3, [r7, #4]
}
 8015060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015062:	f7ff f90d 	bl	8014280 <xTaskIncrementTick>
 8015066:	4603      	mov	r3, r0
 8015068:	2b00      	cmp	r3, #0
 801506a:	d003      	beq.n	8015074 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801506c:	4b06      	ldr	r3, [pc, #24]	@ (8015088 <SysTick_Handler+0x40>)
 801506e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015072:	601a      	str	r2, [r3, #0]
 8015074:	2300      	movs	r3, #0
 8015076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015078:	683b      	ldr	r3, [r7, #0]
 801507a:	f383 8811 	msr	BASEPRI, r3
}
 801507e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015080:	bf00      	nop
 8015082:	3708      	adds	r7, #8
 8015084:	46bd      	mov	sp, r7
 8015086:	bd80      	pop	{r7, pc}
 8015088:	e000ed04 	.word	0xe000ed04

0801508c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801508c:	b480      	push	{r7}
 801508e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015090:	4b0b      	ldr	r3, [pc, #44]	@ (80150c0 <vPortSetupTimerInterrupt+0x34>)
 8015092:	2200      	movs	r2, #0
 8015094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015096:	4b0b      	ldr	r3, [pc, #44]	@ (80150c4 <vPortSetupTimerInterrupt+0x38>)
 8015098:	2200      	movs	r2, #0
 801509a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801509c:	4b0a      	ldr	r3, [pc, #40]	@ (80150c8 <vPortSetupTimerInterrupt+0x3c>)
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	4a0a      	ldr	r2, [pc, #40]	@ (80150cc <vPortSetupTimerInterrupt+0x40>)
 80150a2:	fba2 2303 	umull	r2, r3, r2, r3
 80150a6:	099b      	lsrs	r3, r3, #6
 80150a8:	4a09      	ldr	r2, [pc, #36]	@ (80150d0 <vPortSetupTimerInterrupt+0x44>)
 80150aa:	3b01      	subs	r3, #1
 80150ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80150ae:	4b04      	ldr	r3, [pc, #16]	@ (80150c0 <vPortSetupTimerInterrupt+0x34>)
 80150b0:	2207      	movs	r2, #7
 80150b2:	601a      	str	r2, [r3, #0]
}
 80150b4:	bf00      	nop
 80150b6:	46bd      	mov	sp, r7
 80150b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150bc:	4770      	bx	lr
 80150be:	bf00      	nop
 80150c0:	e000e010 	.word	0xe000e010
 80150c4:	e000e018 	.word	0xe000e018
 80150c8:	240001dc 	.word	0x240001dc
 80150cc:	10624dd3 	.word	0x10624dd3
 80150d0:	e000e014 	.word	0xe000e014

080150d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80150d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80150e4 <vPortEnableVFP+0x10>
 80150d8:	6801      	ldr	r1, [r0, #0]
 80150da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80150de:	6001      	str	r1, [r0, #0]
 80150e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80150e2:	bf00      	nop
 80150e4:	e000ed88 	.word	0xe000ed88

080150e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80150e8:	b480      	push	{r7}
 80150ea:	b085      	sub	sp, #20
 80150ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80150ee:	f3ef 8305 	mrs	r3, IPSR
 80150f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	2b0f      	cmp	r3, #15
 80150f8:	d915      	bls.n	8015126 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80150fa:	4a18      	ldr	r2, [pc, #96]	@ (801515c <vPortValidateInterruptPriority+0x74>)
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	4413      	add	r3, r2
 8015100:	781b      	ldrb	r3, [r3, #0]
 8015102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015104:	4b16      	ldr	r3, [pc, #88]	@ (8015160 <vPortValidateInterruptPriority+0x78>)
 8015106:	781b      	ldrb	r3, [r3, #0]
 8015108:	7afa      	ldrb	r2, [r7, #11]
 801510a:	429a      	cmp	r2, r3
 801510c:	d20b      	bcs.n	8015126 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801510e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015112:	f383 8811 	msr	BASEPRI, r3
 8015116:	f3bf 8f6f 	isb	sy
 801511a:	f3bf 8f4f 	dsb	sy
 801511e:	607b      	str	r3, [r7, #4]
}
 8015120:	bf00      	nop
 8015122:	bf00      	nop
 8015124:	e7fd      	b.n	8015122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015126:	4b0f      	ldr	r3, [pc, #60]	@ (8015164 <vPortValidateInterruptPriority+0x7c>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801512e:	4b0e      	ldr	r3, [pc, #56]	@ (8015168 <vPortValidateInterruptPriority+0x80>)
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	429a      	cmp	r2, r3
 8015134:	d90b      	bls.n	801514e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8015136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801513a:	f383 8811 	msr	BASEPRI, r3
 801513e:	f3bf 8f6f 	isb	sy
 8015142:	f3bf 8f4f 	dsb	sy
 8015146:	603b      	str	r3, [r7, #0]
}
 8015148:	bf00      	nop
 801514a:	bf00      	nop
 801514c:	e7fd      	b.n	801514a <vPortValidateInterruptPriority+0x62>
	}
 801514e:	bf00      	nop
 8015150:	3714      	adds	r7, #20
 8015152:	46bd      	mov	sp, r7
 8015154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015158:	4770      	bx	lr
 801515a:	bf00      	nop
 801515c:	e000e3f0 	.word	0xe000e3f0
 8015160:	240014d0 	.word	0x240014d0
 8015164:	e000ed0c 	.word	0xe000ed0c
 8015168:	240014d4 	.word	0x240014d4

0801516c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b08a      	sub	sp, #40	@ 0x28
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015174:	2300      	movs	r3, #0
 8015176:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015178:	f7fe ffb4 	bl	80140e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801517c:	4b5c      	ldr	r3, [pc, #368]	@ (80152f0 <pvPortMalloc+0x184>)
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d101      	bne.n	8015188 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015184:	f000 f924 	bl	80153d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015188:	4b5a      	ldr	r3, [pc, #360]	@ (80152f4 <pvPortMalloc+0x188>)
 801518a:	681a      	ldr	r2, [r3, #0]
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	4013      	ands	r3, r2
 8015190:	2b00      	cmp	r3, #0
 8015192:	f040 8095 	bne.w	80152c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d01e      	beq.n	80151da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801519c:	2208      	movs	r2, #8
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	4413      	add	r3, r2
 80151a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	f003 0307 	and.w	r3, r3, #7
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d015      	beq.n	80151da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	f023 0307 	bic.w	r3, r3, #7
 80151b4:	3308      	adds	r3, #8
 80151b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	f003 0307 	and.w	r3, r3, #7
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d00b      	beq.n	80151da <pvPortMalloc+0x6e>
	__asm volatile
 80151c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151c6:	f383 8811 	msr	BASEPRI, r3
 80151ca:	f3bf 8f6f 	isb	sy
 80151ce:	f3bf 8f4f 	dsb	sy
 80151d2:	617b      	str	r3, [r7, #20]
}
 80151d4:	bf00      	nop
 80151d6:	bf00      	nop
 80151d8:	e7fd      	b.n	80151d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d06f      	beq.n	80152c0 <pvPortMalloc+0x154>
 80151e0:	4b45      	ldr	r3, [pc, #276]	@ (80152f8 <pvPortMalloc+0x18c>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	687a      	ldr	r2, [r7, #4]
 80151e6:	429a      	cmp	r2, r3
 80151e8:	d86a      	bhi.n	80152c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80151ea:	4b44      	ldr	r3, [pc, #272]	@ (80152fc <pvPortMalloc+0x190>)
 80151ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80151ee:	4b43      	ldr	r3, [pc, #268]	@ (80152fc <pvPortMalloc+0x190>)
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80151f4:	e004      	b.n	8015200 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80151f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80151fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015202:	685b      	ldr	r3, [r3, #4]
 8015204:	687a      	ldr	r2, [r7, #4]
 8015206:	429a      	cmp	r2, r3
 8015208:	d903      	bls.n	8015212 <pvPortMalloc+0xa6>
 801520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d1f1      	bne.n	80151f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015212:	4b37      	ldr	r3, [pc, #220]	@ (80152f0 <pvPortMalloc+0x184>)
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015218:	429a      	cmp	r2, r3
 801521a:	d051      	beq.n	80152c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801521c:	6a3b      	ldr	r3, [r7, #32]
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	2208      	movs	r2, #8
 8015222:	4413      	add	r3, r2
 8015224:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015228:	681a      	ldr	r2, [r3, #0]
 801522a:	6a3b      	ldr	r3, [r7, #32]
 801522c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015230:	685a      	ldr	r2, [r3, #4]
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	1ad2      	subs	r2, r2, r3
 8015236:	2308      	movs	r3, #8
 8015238:	005b      	lsls	r3, r3, #1
 801523a:	429a      	cmp	r2, r3
 801523c:	d920      	bls.n	8015280 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801523e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	4413      	add	r3, r2
 8015244:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015246:	69bb      	ldr	r3, [r7, #24]
 8015248:	f003 0307 	and.w	r3, r3, #7
 801524c:	2b00      	cmp	r3, #0
 801524e:	d00b      	beq.n	8015268 <pvPortMalloc+0xfc>
	__asm volatile
 8015250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015254:	f383 8811 	msr	BASEPRI, r3
 8015258:	f3bf 8f6f 	isb	sy
 801525c:	f3bf 8f4f 	dsb	sy
 8015260:	613b      	str	r3, [r7, #16]
}
 8015262:	bf00      	nop
 8015264:	bf00      	nop
 8015266:	e7fd      	b.n	8015264 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801526a:	685a      	ldr	r2, [r3, #4]
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	1ad2      	subs	r2, r2, r3
 8015270:	69bb      	ldr	r3, [r7, #24]
 8015272:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015276:	687a      	ldr	r2, [r7, #4]
 8015278:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801527a:	69b8      	ldr	r0, [r7, #24]
 801527c:	f000 f90a 	bl	8015494 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015280:	4b1d      	ldr	r3, [pc, #116]	@ (80152f8 <pvPortMalloc+0x18c>)
 8015282:	681a      	ldr	r2, [r3, #0]
 8015284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015286:	685b      	ldr	r3, [r3, #4]
 8015288:	1ad3      	subs	r3, r2, r3
 801528a:	4a1b      	ldr	r2, [pc, #108]	@ (80152f8 <pvPortMalloc+0x18c>)
 801528c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801528e:	4b1a      	ldr	r3, [pc, #104]	@ (80152f8 <pvPortMalloc+0x18c>)
 8015290:	681a      	ldr	r2, [r3, #0]
 8015292:	4b1b      	ldr	r3, [pc, #108]	@ (8015300 <pvPortMalloc+0x194>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	429a      	cmp	r2, r3
 8015298:	d203      	bcs.n	80152a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801529a:	4b17      	ldr	r3, [pc, #92]	@ (80152f8 <pvPortMalloc+0x18c>)
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	4a18      	ldr	r2, [pc, #96]	@ (8015300 <pvPortMalloc+0x194>)
 80152a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80152a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152a4:	685a      	ldr	r2, [r3, #4]
 80152a6:	4b13      	ldr	r3, [pc, #76]	@ (80152f4 <pvPortMalloc+0x188>)
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	431a      	orrs	r2, r3
 80152ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80152b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152b2:	2200      	movs	r2, #0
 80152b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80152b6:	4b13      	ldr	r3, [pc, #76]	@ (8015304 <pvPortMalloc+0x198>)
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	3301      	adds	r3, #1
 80152bc:	4a11      	ldr	r2, [pc, #68]	@ (8015304 <pvPortMalloc+0x198>)
 80152be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80152c0:	f7fe ff1e 	bl	8014100 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80152c4:	69fb      	ldr	r3, [r7, #28]
 80152c6:	f003 0307 	and.w	r3, r3, #7
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d00b      	beq.n	80152e6 <pvPortMalloc+0x17a>
	__asm volatile
 80152ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152d2:	f383 8811 	msr	BASEPRI, r3
 80152d6:	f3bf 8f6f 	isb	sy
 80152da:	f3bf 8f4f 	dsb	sy
 80152de:	60fb      	str	r3, [r7, #12]
}
 80152e0:	bf00      	nop
 80152e2:	bf00      	nop
 80152e4:	e7fd      	b.n	80152e2 <pvPortMalloc+0x176>
	return pvReturn;
 80152e6:	69fb      	ldr	r3, [r7, #28]
}
 80152e8:	4618      	mov	r0, r3
 80152ea:	3728      	adds	r7, #40	@ 0x28
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd80      	pop	{r7, pc}
 80152f0:	24008ce0 	.word	0x24008ce0
 80152f4:	24008cf4 	.word	0x24008cf4
 80152f8:	24008ce4 	.word	0x24008ce4
 80152fc:	24008cd8 	.word	0x24008cd8
 8015300:	24008ce8 	.word	0x24008ce8
 8015304:	24008cec 	.word	0x24008cec

08015308 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b086      	sub	sp, #24
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d04f      	beq.n	80153ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801531a:	2308      	movs	r3, #8
 801531c:	425b      	negs	r3, r3
 801531e:	697a      	ldr	r2, [r7, #20]
 8015320:	4413      	add	r3, r2
 8015322:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015324:	697b      	ldr	r3, [r7, #20]
 8015326:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015328:	693b      	ldr	r3, [r7, #16]
 801532a:	685a      	ldr	r2, [r3, #4]
 801532c:	4b25      	ldr	r3, [pc, #148]	@ (80153c4 <vPortFree+0xbc>)
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	4013      	ands	r3, r2
 8015332:	2b00      	cmp	r3, #0
 8015334:	d10b      	bne.n	801534e <vPortFree+0x46>
	__asm volatile
 8015336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801533a:	f383 8811 	msr	BASEPRI, r3
 801533e:	f3bf 8f6f 	isb	sy
 8015342:	f3bf 8f4f 	dsb	sy
 8015346:	60fb      	str	r3, [r7, #12]
}
 8015348:	bf00      	nop
 801534a:	bf00      	nop
 801534c:	e7fd      	b.n	801534a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801534e:	693b      	ldr	r3, [r7, #16]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d00b      	beq.n	801536e <vPortFree+0x66>
	__asm volatile
 8015356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801535a:	f383 8811 	msr	BASEPRI, r3
 801535e:	f3bf 8f6f 	isb	sy
 8015362:	f3bf 8f4f 	dsb	sy
 8015366:	60bb      	str	r3, [r7, #8]
}
 8015368:	bf00      	nop
 801536a:	bf00      	nop
 801536c:	e7fd      	b.n	801536a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801536e:	693b      	ldr	r3, [r7, #16]
 8015370:	685a      	ldr	r2, [r3, #4]
 8015372:	4b14      	ldr	r3, [pc, #80]	@ (80153c4 <vPortFree+0xbc>)
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	4013      	ands	r3, r2
 8015378:	2b00      	cmp	r3, #0
 801537a:	d01e      	beq.n	80153ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d11a      	bne.n	80153ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015384:	693b      	ldr	r3, [r7, #16]
 8015386:	685a      	ldr	r2, [r3, #4]
 8015388:	4b0e      	ldr	r3, [pc, #56]	@ (80153c4 <vPortFree+0xbc>)
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	43db      	mvns	r3, r3
 801538e:	401a      	ands	r2, r3
 8015390:	693b      	ldr	r3, [r7, #16]
 8015392:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015394:	f7fe fea6 	bl	80140e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015398:	693b      	ldr	r3, [r7, #16]
 801539a:	685a      	ldr	r2, [r3, #4]
 801539c:	4b0a      	ldr	r3, [pc, #40]	@ (80153c8 <vPortFree+0xc0>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	4413      	add	r3, r2
 80153a2:	4a09      	ldr	r2, [pc, #36]	@ (80153c8 <vPortFree+0xc0>)
 80153a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80153a6:	6938      	ldr	r0, [r7, #16]
 80153a8:	f000 f874 	bl	8015494 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80153ac:	4b07      	ldr	r3, [pc, #28]	@ (80153cc <vPortFree+0xc4>)
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	3301      	adds	r3, #1
 80153b2:	4a06      	ldr	r2, [pc, #24]	@ (80153cc <vPortFree+0xc4>)
 80153b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80153b6:	f7fe fea3 	bl	8014100 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80153ba:	bf00      	nop
 80153bc:	3718      	adds	r7, #24
 80153be:	46bd      	mov	sp, r7
 80153c0:	bd80      	pop	{r7, pc}
 80153c2:	bf00      	nop
 80153c4:	24008cf4 	.word	0x24008cf4
 80153c8:	24008ce4 	.word	0x24008ce4
 80153cc:	24008cf0 	.word	0x24008cf0

080153d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80153d0:	b480      	push	{r7}
 80153d2:	b085      	sub	sp, #20
 80153d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80153d6:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80153da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80153dc:	4b27      	ldr	r3, [pc, #156]	@ (801547c <prvHeapInit+0xac>)
 80153de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	f003 0307 	and.w	r3, r3, #7
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d00c      	beq.n	8015404 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	3307      	adds	r3, #7
 80153ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	f023 0307 	bic.w	r3, r3, #7
 80153f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80153f8:	68ba      	ldr	r2, [r7, #8]
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	1ad3      	subs	r3, r2, r3
 80153fe:	4a1f      	ldr	r2, [pc, #124]	@ (801547c <prvHeapInit+0xac>)
 8015400:	4413      	add	r3, r2
 8015402:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015408:	4a1d      	ldr	r2, [pc, #116]	@ (8015480 <prvHeapInit+0xb0>)
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801540e:	4b1c      	ldr	r3, [pc, #112]	@ (8015480 <prvHeapInit+0xb0>)
 8015410:	2200      	movs	r2, #0
 8015412:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	68ba      	ldr	r2, [r7, #8]
 8015418:	4413      	add	r3, r2
 801541a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801541c:	2208      	movs	r2, #8
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	1a9b      	subs	r3, r3, r2
 8015422:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	f023 0307 	bic.w	r3, r3, #7
 801542a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	4a15      	ldr	r2, [pc, #84]	@ (8015484 <prvHeapInit+0xb4>)
 8015430:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015432:	4b14      	ldr	r3, [pc, #80]	@ (8015484 <prvHeapInit+0xb4>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	2200      	movs	r2, #0
 8015438:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801543a:	4b12      	ldr	r3, [pc, #72]	@ (8015484 <prvHeapInit+0xb4>)
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	2200      	movs	r2, #0
 8015440:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015446:	683b      	ldr	r3, [r7, #0]
 8015448:	68fa      	ldr	r2, [r7, #12]
 801544a:	1ad2      	subs	r2, r2, r3
 801544c:	683b      	ldr	r3, [r7, #0]
 801544e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015450:	4b0c      	ldr	r3, [pc, #48]	@ (8015484 <prvHeapInit+0xb4>)
 8015452:	681a      	ldr	r2, [r3, #0]
 8015454:	683b      	ldr	r3, [r7, #0]
 8015456:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015458:	683b      	ldr	r3, [r7, #0]
 801545a:	685b      	ldr	r3, [r3, #4]
 801545c:	4a0a      	ldr	r2, [pc, #40]	@ (8015488 <prvHeapInit+0xb8>)
 801545e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015460:	683b      	ldr	r3, [r7, #0]
 8015462:	685b      	ldr	r3, [r3, #4]
 8015464:	4a09      	ldr	r2, [pc, #36]	@ (801548c <prvHeapInit+0xbc>)
 8015466:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015468:	4b09      	ldr	r3, [pc, #36]	@ (8015490 <prvHeapInit+0xc0>)
 801546a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801546e:	601a      	str	r2, [r3, #0]
}
 8015470:	bf00      	nop
 8015472:	3714      	adds	r7, #20
 8015474:	46bd      	mov	sp, r7
 8015476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547a:	4770      	bx	lr
 801547c:	240014d8 	.word	0x240014d8
 8015480:	24008cd8 	.word	0x24008cd8
 8015484:	24008ce0 	.word	0x24008ce0
 8015488:	24008ce8 	.word	0x24008ce8
 801548c:	24008ce4 	.word	0x24008ce4
 8015490:	24008cf4 	.word	0x24008cf4

08015494 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015494:	b480      	push	{r7}
 8015496:	b085      	sub	sp, #20
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801549c:	4b28      	ldr	r3, [pc, #160]	@ (8015540 <prvInsertBlockIntoFreeList+0xac>)
 801549e:	60fb      	str	r3, [r7, #12]
 80154a0:	e002      	b.n	80154a8 <prvInsertBlockIntoFreeList+0x14>
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	60fb      	str	r3, [r7, #12]
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	687a      	ldr	r2, [r7, #4]
 80154ae:	429a      	cmp	r2, r3
 80154b0:	d8f7      	bhi.n	80154a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	685b      	ldr	r3, [r3, #4]
 80154ba:	68ba      	ldr	r2, [r7, #8]
 80154bc:	4413      	add	r3, r2
 80154be:	687a      	ldr	r2, [r7, #4]
 80154c0:	429a      	cmp	r2, r3
 80154c2:	d108      	bne.n	80154d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	685a      	ldr	r2, [r3, #4]
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	685b      	ldr	r3, [r3, #4]
 80154cc:	441a      	add	r2, r3
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	68ba      	ldr	r2, [r7, #8]
 80154e0:	441a      	add	r2, r3
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	429a      	cmp	r2, r3
 80154e8:	d118      	bne.n	801551c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	681a      	ldr	r2, [r3, #0]
 80154ee:	4b15      	ldr	r3, [pc, #84]	@ (8015544 <prvInsertBlockIntoFreeList+0xb0>)
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	429a      	cmp	r2, r3
 80154f4:	d00d      	beq.n	8015512 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	685a      	ldr	r2, [r3, #4]
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	685b      	ldr	r3, [r3, #4]
 8015500:	441a      	add	r2, r3
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	681a      	ldr	r2, [r3, #0]
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	601a      	str	r2, [r3, #0]
 8015510:	e008      	b.n	8015524 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015512:	4b0c      	ldr	r3, [pc, #48]	@ (8015544 <prvInsertBlockIntoFreeList+0xb0>)
 8015514:	681a      	ldr	r2, [r3, #0]
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	601a      	str	r2, [r3, #0]
 801551a:	e003      	b.n	8015524 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	681a      	ldr	r2, [r3, #0]
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015524:	68fa      	ldr	r2, [r7, #12]
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	429a      	cmp	r2, r3
 801552a:	d002      	beq.n	8015532 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	687a      	ldr	r2, [r7, #4]
 8015530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015532:	bf00      	nop
 8015534:	3714      	adds	r7, #20
 8015536:	46bd      	mov	sp, r7
 8015538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553c:	4770      	bx	lr
 801553e:	bf00      	nop
 8015540:	24008cd8 	.word	0x24008cd8
 8015544:	24008ce0 	.word	0x24008ce0

08015548 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8015548:	b580      	push	{r7, lr}
 801554a:	b084      	sub	sp, #16
 801554c:	af00      	add	r7, sp, #0
 801554e:	6078      	str	r0, [r7, #4]
 8015550:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8015552:	683b      	ldr	r3, [r7, #0]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	330c      	adds	r3, #12
 8015558:	461a      	mov	r2, r3
 801555a:	6839      	ldr	r1, [r7, #0]
 801555c:	6878      	ldr	r0, [r7, #4]
 801555e:	f003 f9f7 	bl	8018950 <tcpip_send_msg_wait_sem>
 8015562:	4603      	mov	r3, r0
 8015564:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8015566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d103      	bne.n	8015576 <netconn_apimsg+0x2e>
    return apimsg->err;
 801556e:	683b      	ldr	r3, [r7, #0]
 8015570:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015574:	e001      	b.n	801557a <netconn_apimsg+0x32>
  }
  return err;
 8015576:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801557a:	4618      	mov	r0, r3
 801557c:	3710      	adds	r7, #16
 801557e:	46bd      	mov	sp, r7
 8015580:	bd80      	pop	{r7, pc}
	...

08015584 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b08c      	sub	sp, #48	@ 0x30
 8015588:	af00      	add	r7, sp, #0
 801558a:	4603      	mov	r3, r0
 801558c:	603a      	str	r2, [r7, #0]
 801558e:	71fb      	strb	r3, [r7, #7]
 8015590:	460b      	mov	r3, r1
 8015592:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8015594:	79fb      	ldrb	r3, [r7, #7]
 8015596:	6839      	ldr	r1, [r7, #0]
 8015598:	4618      	mov	r0, r3
 801559a:	f001 f82f 	bl	80165fc <netconn_alloc>
 801559e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 80155a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d054      	beq.n	8015650 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80155a6:	79bb      	ldrb	r3, [r7, #6]
 80155a8:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80155aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ac:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80155ae:	f107 0308 	add.w	r3, r7, #8
 80155b2:	4619      	mov	r1, r3
 80155b4:	4829      	ldr	r0, [pc, #164]	@ (801565c <netconn_new_with_proto_and_callback+0xd8>)
 80155b6:	f7ff ffc7 	bl	8015548 <netconn_apimsg>
 80155ba:	4603      	mov	r3, r0
 80155bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 80155c0:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d043      	beq.n	8015650 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80155c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ca:	685b      	ldr	r3, [r3, #4]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d005      	beq.n	80155dc <netconn_new_with_proto_and_callback+0x58>
 80155d0:	4b23      	ldr	r3, [pc, #140]	@ (8015660 <netconn_new_with_proto_and_callback+0xdc>)
 80155d2:	22a3      	movs	r2, #163	@ 0xa3
 80155d4:	4923      	ldr	r1, [pc, #140]	@ (8015664 <netconn_new_with_proto_and_callback+0xe0>)
 80155d6:	4824      	ldr	r0, [pc, #144]	@ (8015668 <netconn_new_with_proto_and_callback+0xe4>)
 80155d8:	f00f fe44 	bl	8025264 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80155dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155de:	3310      	adds	r3, #16
 80155e0:	4618      	mov	r0, r3
 80155e2:	f00e fc8a 	bl	8023efa <sys_mbox_valid>
 80155e6:	4603      	mov	r3, r0
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d105      	bne.n	80155f8 <netconn_new_with_proto_and_callback+0x74>
 80155ec:	4b1c      	ldr	r3, [pc, #112]	@ (8015660 <netconn_new_with_proto_and_callback+0xdc>)
 80155ee:	22a4      	movs	r2, #164	@ 0xa4
 80155f0:	491e      	ldr	r1, [pc, #120]	@ (801566c <netconn_new_with_proto_and_callback+0xe8>)
 80155f2:	481d      	ldr	r0, [pc, #116]	@ (8015668 <netconn_new_with_proto_and_callback+0xe4>)
 80155f4:	f00f fe36 	bl	8025264 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80155f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155fa:	3314      	adds	r3, #20
 80155fc:	4618      	mov	r0, r3
 80155fe:	f00e fc7c 	bl	8023efa <sys_mbox_valid>
 8015602:	4603      	mov	r3, r0
 8015604:	2b00      	cmp	r3, #0
 8015606:	d005      	beq.n	8015614 <netconn_new_with_proto_and_callback+0x90>
 8015608:	4b15      	ldr	r3, [pc, #84]	@ (8015660 <netconn_new_with_proto_and_callback+0xdc>)
 801560a:	22a6      	movs	r2, #166	@ 0xa6
 801560c:	4918      	ldr	r1, [pc, #96]	@ (8015670 <netconn_new_with_proto_and_callback+0xec>)
 801560e:	4816      	ldr	r0, [pc, #88]	@ (8015668 <netconn_new_with_proto_and_callback+0xe4>)
 8015610:	f00f fe28 	bl	8025264 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8015614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015616:	330c      	adds	r3, #12
 8015618:	4618      	mov	r0, r3
 801561a:	f00e fcff 	bl	802401c <sys_sem_valid>
 801561e:	4603      	mov	r3, r0
 8015620:	2b00      	cmp	r3, #0
 8015622:	d105      	bne.n	8015630 <netconn_new_with_proto_and_callback+0xac>
 8015624:	4b0e      	ldr	r3, [pc, #56]	@ (8015660 <netconn_new_with_proto_and_callback+0xdc>)
 8015626:	22a9      	movs	r2, #169	@ 0xa9
 8015628:	4912      	ldr	r1, [pc, #72]	@ (8015674 <netconn_new_with_proto_and_callback+0xf0>)
 801562a:	480f      	ldr	r0, [pc, #60]	@ (8015668 <netconn_new_with_proto_and_callback+0xe4>)
 801562c:	f00f fe1a 	bl	8025264 <iprintf>
      sys_sem_free(&conn->op_completed);
 8015630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015632:	330c      	adds	r3, #12
 8015634:	4618      	mov	r0, r3
 8015636:	f00e fce4 	bl	8024002 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 801563a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801563c:	3310      	adds	r3, #16
 801563e:	4618      	mov	r0, r3
 8015640:	f00e fbd4 	bl	8023dec <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8015644:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015646:	2007      	movs	r0, #7
 8015648:	f003 ffe8 	bl	801961c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 801564c:	2300      	movs	r3, #0
 801564e:	e000      	b.n	8015652 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8015650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8015652:	4618      	mov	r0, r3
 8015654:	3730      	adds	r7, #48	@ 0x30
 8015656:	46bd      	mov	sp, r7
 8015658:	bd80      	pop	{r7, pc}
 801565a:	bf00      	nop
 801565c:	080165d1 	.word	0x080165d1
 8015660:	08029458 	.word	0x08029458
 8015664:	0802948c 	.word	0x0802948c
 8015668:	080294b0 	.word	0x080294b0
 801566c:	080294d8 	.word	0x080294d8
 8015670:	080294f0 	.word	0x080294f0
 8015674:	08029514 	.word	0x08029514

08015678 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b08c      	sub	sp, #48	@ 0x30
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d101      	bne.n	801568a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8015686:	2300      	movs	r3, #0
 8015688:	e014      	b.n	80156b4 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801568e:	2329      	movs	r3, #41	@ 0x29
 8015690:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8015692:	f107 030c 	add.w	r3, r7, #12
 8015696:	4619      	mov	r1, r3
 8015698:	4808      	ldr	r0, [pc, #32]	@ (80156bc <netconn_prepare_delete+0x44>)
 801569a:	f7ff ff55 	bl	8015548 <netconn_apimsg>
 801569e:	4603      	mov	r3, r0
 80156a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80156a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d002      	beq.n	80156b2 <netconn_prepare_delete+0x3a>
    return err;
 80156ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80156b0:	e000      	b.n	80156b4 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80156b2:	2300      	movs	r3, #0
}
 80156b4:	4618      	mov	r0, r3
 80156b6:	3730      	adds	r7, #48	@ 0x30
 80156b8:	46bd      	mov	sp, r7
 80156ba:	bd80      	pop	{r7, pc}
 80156bc:	08016b3d 	.word	0x08016b3d

080156c0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b084      	sub	sp, #16
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d101      	bne.n	80156d2 <netconn_delete+0x12>
    return ERR_OK;
 80156ce:	2300      	movs	r3, #0
 80156d0:	e00d      	b.n	80156ee <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80156d2:	6878      	ldr	r0, [r7, #4]
 80156d4:	f7ff ffd0 	bl	8015678 <netconn_prepare_delete>
 80156d8:	4603      	mov	r3, r0
 80156da:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80156dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d102      	bne.n	80156ea <netconn_delete+0x2a>
    netconn_free(conn);
 80156e4:	6878      	ldr	r0, [r7, #4]
 80156e6:	f000 fff7 	bl	80166d8 <netconn_free>
  }
  return err;
 80156ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80156ee:	4618      	mov	r0, r3
 80156f0:	3710      	adds	r7, #16
 80156f2:	46bd      	mov	sp, r7
 80156f4:	bd80      	pop	{r7, pc}
	...

080156f8 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b08e      	sub	sp, #56	@ 0x38
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	60f8      	str	r0, [r7, #12]
 8015700:	60b9      	str	r1, [r7, #8]
 8015702:	607a      	str	r2, [r7, #4]
 8015704:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d109      	bne.n	8015720 <netconn_getaddr+0x28>
 801570c:	4b1d      	ldr	r3, [pc, #116]	@ (8015784 <netconn_getaddr+0x8c>)
 801570e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8015712:	491d      	ldr	r1, [pc, #116]	@ (8015788 <netconn_getaddr+0x90>)
 8015714:	481d      	ldr	r0, [pc, #116]	@ (801578c <netconn_getaddr+0x94>)
 8015716:	f00f fda5 	bl	8025264 <iprintf>
 801571a:	f06f 030f 	mvn.w	r3, #15
 801571e:	e02d      	b.n	801577c <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8015720:	68bb      	ldr	r3, [r7, #8]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d109      	bne.n	801573a <netconn_getaddr+0x42>
 8015726:	4b17      	ldr	r3, [pc, #92]	@ (8015784 <netconn_getaddr+0x8c>)
 8015728:	f240 1213 	movw	r2, #275	@ 0x113
 801572c:	4918      	ldr	r1, [pc, #96]	@ (8015790 <netconn_getaddr+0x98>)
 801572e:	4817      	ldr	r0, [pc, #92]	@ (801578c <netconn_getaddr+0x94>)
 8015730:	f00f fd98 	bl	8025264 <iprintf>
 8015734:	f06f 030f 	mvn.w	r3, #15
 8015738:	e020      	b.n	801577c <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d109      	bne.n	8015754 <netconn_getaddr+0x5c>
 8015740:	4b10      	ldr	r3, [pc, #64]	@ (8015784 <netconn_getaddr+0x8c>)
 8015742:	f44f 728a 	mov.w	r2, #276	@ 0x114
 8015746:	4913      	ldr	r1, [pc, #76]	@ (8015794 <netconn_getaddr+0x9c>)
 8015748:	4810      	ldr	r0, [pc, #64]	@ (801578c <netconn_getaddr+0x94>)
 801574a:	f00f fd8b 	bl	8025264 <iprintf>
 801574e:	f06f 030f 	mvn.w	r3, #15
 8015752:	e013      	b.n	801577c <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8015758:	78fb      	ldrb	r3, [r7, #3]
 801575a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 801575e:	68bb      	ldr	r3, [r7, #8]
 8015760:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8015766:	f107 0314 	add.w	r3, r7, #20
 801576a:	4619      	mov	r1, r3
 801576c:	480a      	ldr	r0, [pc, #40]	@ (8015798 <netconn_getaddr+0xa0>)
 801576e:	f7ff feeb 	bl	8015548 <netconn_apimsg>
 8015772:	4603      	mov	r3, r0
 8015774:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8015778:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801577c:	4618      	mov	r0, r3
 801577e:	3738      	adds	r7, #56	@ 0x38
 8015780:	46bd      	mov	sp, r7
 8015782:	bd80      	pop	{r7, pc}
 8015784:	08029458 	.word	0x08029458
 8015788:	08029530 	.word	0x08029530
 801578c:	080294b0 	.word	0x080294b0
 8015790:	08029550 	.word	0x08029550
 8015794:	08029570 	.word	0x08029570
 8015798:	0801732d 	.word	0x0801732d

0801579c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b08e      	sub	sp, #56	@ 0x38
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	60f8      	str	r0, [r7, #12]
 80157a4:	60b9      	str	r1, [r7, #8]
 80157a6:	4613      	mov	r3, r2
 80157a8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d109      	bne.n	80157c4 <netconn_bind+0x28>
 80157b0:	4b11      	ldr	r3, [pc, #68]	@ (80157f8 <netconn_bind+0x5c>)
 80157b2:	f44f 729c 	mov.w	r2, #312	@ 0x138
 80157b6:	4911      	ldr	r1, [pc, #68]	@ (80157fc <netconn_bind+0x60>)
 80157b8:	4811      	ldr	r0, [pc, #68]	@ (8015800 <netconn_bind+0x64>)
 80157ba:	f00f fd53 	bl	8025264 <iprintf>
 80157be:	f06f 030f 	mvn.w	r3, #15
 80157c2:	e015      	b.n	80157f0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80157c4:	68bb      	ldr	r3, [r7, #8]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d101      	bne.n	80157ce <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80157ca:	4b0e      	ldr	r3, [pc, #56]	@ (8015804 <netconn_bind+0x68>)
 80157cc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80157d2:	68bb      	ldr	r3, [r7, #8]
 80157d4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80157d6:	88fb      	ldrh	r3, [r7, #6]
 80157d8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80157da:	f107 0314 	add.w	r3, r7, #20
 80157de:	4619      	mov	r1, r3
 80157e0:	4809      	ldr	r0, [pc, #36]	@ (8015808 <netconn_bind+0x6c>)
 80157e2:	f7ff feb1 	bl	8015548 <netconn_apimsg>
 80157e6:	4603      	mov	r3, r0
 80157e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80157ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80157f0:	4618      	mov	r0, r3
 80157f2:	3738      	adds	r7, #56	@ 0x38
 80157f4:	46bd      	mov	sp, r7
 80157f6:	bd80      	pop	{r7, pc}
 80157f8:	08029458 	.word	0x08029458
 80157fc:	08029590 	.word	0x08029590
 8015800:	080294b0 	.word	0x080294b0
 8015804:	0802cf18 	.word	0x0802cf18
 8015808:	08016d05 	.word	0x08016d05

0801580c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 801580c:	b580      	push	{r7, lr}
 801580e:	b088      	sub	sp, #32
 8015810:	af00      	add	r7, sp, #0
 8015812:	60f8      	str	r0, [r7, #12]
 8015814:	60b9      	str	r1, [r7, #8]
 8015816:	4613      	mov	r3, r2
 8015818:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 801581a:	2300      	movs	r3, #0
 801581c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801581e:	68bb      	ldr	r3, [r7, #8]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d109      	bne.n	8015838 <netconn_recv_data+0x2c>
 8015824:	4b58      	ldr	r3, [pc, #352]	@ (8015988 <netconn_recv_data+0x17c>)
 8015826:	f44f 7212 	mov.w	r2, #584	@ 0x248
 801582a:	4958      	ldr	r1, [pc, #352]	@ (801598c <netconn_recv_data+0x180>)
 801582c:	4858      	ldr	r0, [pc, #352]	@ (8015990 <netconn_recv_data+0x184>)
 801582e:	f00f fd19 	bl	8025264 <iprintf>
 8015832:	f06f 030f 	mvn.w	r3, #15
 8015836:	e0a2      	b.n	801597e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8015838:	68bb      	ldr	r3, [r7, #8]
 801583a:	2200      	movs	r2, #0
 801583c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d109      	bne.n	8015858 <netconn_recv_data+0x4c>
 8015844:	4b50      	ldr	r3, [pc, #320]	@ (8015988 <netconn_recv_data+0x17c>)
 8015846:	f240 224a 	movw	r2, #586	@ 0x24a
 801584a:	4952      	ldr	r1, [pc, #328]	@ (8015994 <netconn_recv_data+0x188>)
 801584c:	4850      	ldr	r0, [pc, #320]	@ (8015990 <netconn_recv_data+0x184>)
 801584e:	f00f fd09 	bl	8025264 <iprintf>
 8015852:	f06f 030f 	mvn.w	r3, #15
 8015856:	e092      	b.n	801597e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	3310      	adds	r3, #16
 801585c:	4618      	mov	r0, r3
 801585e:	f00e fb4c 	bl	8023efa <sys_mbox_valid>
 8015862:	4603      	mov	r3, r0
 8015864:	2b00      	cmp	r3, #0
 8015866:	d10e      	bne.n	8015886 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8015868:	68f8      	ldr	r0, [r7, #12]
 801586a:	f000 fb01 	bl	8015e70 <netconn_err>
 801586e:	4603      	mov	r3, r0
 8015870:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8015872:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d002      	beq.n	8015880 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 801587a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801587e:	e07e      	b.n	801597e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8015880:	f06f 030a 	mvn.w	r3, #10
 8015884:	e07b      	b.n	801597e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	7f1b      	ldrb	r3, [r3, #28]
 801588a:	f003 0302 	and.w	r3, r3, #2
 801588e:	2b00      	cmp	r3, #0
 8015890:	d10f      	bne.n	80158b2 <netconn_recv_data+0xa6>
 8015892:	79fb      	ldrb	r3, [r7, #7]
 8015894:	f003 0304 	and.w	r3, r3, #4
 8015898:	2b00      	cmp	r3, #0
 801589a:	d10a      	bne.n	80158b2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	7f1b      	ldrb	r3, [r3, #28]
 80158a0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d104      	bne.n	80158b2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d023      	beq.n	80158fa <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	3310      	adds	r3, #16
 80158b6:	f107 0218 	add.w	r2, r7, #24
 80158ba:	4611      	mov	r1, r2
 80158bc:	4618      	mov	r0, r3
 80158be:	f00e fb00 	bl	8023ec2 <sys_arch_mbox_tryfetch>
 80158c2:	4603      	mov	r3, r0
 80158c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158c8:	d11f      	bne.n	801590a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80158ca:	68f8      	ldr	r0, [r7, #12]
 80158cc:	f000 fad0 	bl	8015e70 <netconn_err>
 80158d0:	4603      	mov	r3, r0
 80158d2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80158d4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d002      	beq.n	80158e2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80158dc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80158e0:	e04d      	b.n	801597e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	7f1b      	ldrb	r3, [r3, #28]
 80158e6:	f003 0301 	and.w	r3, r3, #1
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d002      	beq.n	80158f4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80158ee:	f06f 030a 	mvn.w	r3, #10
 80158f2:	e044      	b.n	801597e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80158f4:	f06f 0306 	mvn.w	r3, #6
 80158f8:	e041      	b.n	801597e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	3310      	adds	r3, #16
 80158fe:	f107 0118 	add.w	r1, r7, #24
 8015902:	2200      	movs	r2, #0
 8015904:	4618      	mov	r0, r3
 8015906:	f00e fa9d 	bl	8023e44 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	781b      	ldrb	r3, [r3, #0]
 801590e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015912:	2b10      	cmp	r3, #16
 8015914:	d117      	bne.n	8015946 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8015916:	69bb      	ldr	r3, [r7, #24]
 8015918:	f107 0217 	add.w	r2, r7, #23
 801591c:	4611      	mov	r1, r2
 801591e:	4618      	mov	r0, r3
 8015920:	f000 faf8 	bl	8015f14 <lwip_netconn_is_err_msg>
 8015924:	4603      	mov	r3, r0
 8015926:	2b00      	cmp	r3, #0
 8015928:	d009      	beq.n	801593e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 801592a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801592e:	f113 0f0f 	cmn.w	r3, #15
 8015932:	d101      	bne.n	8015938 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8015934:	2300      	movs	r3, #0
 8015936:	e022      	b.n	801597e <netconn_recv_data+0x172>
      }
      return err;
 8015938:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801593c:	e01f      	b.n	801597e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 801593e:	69bb      	ldr	r3, [r7, #24]
 8015940:	891b      	ldrh	r3, [r3, #8]
 8015942:	83fb      	strh	r3, [r7, #30]
 8015944:	e00d      	b.n	8015962 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8015946:	69bb      	ldr	r3, [r7, #24]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d106      	bne.n	801595a <netconn_recv_data+0x14e>
 801594c:	4b0e      	ldr	r3, [pc, #56]	@ (8015988 <netconn_recv_data+0x17c>)
 801594e:	f240 2291 	movw	r2, #657	@ 0x291
 8015952:	4911      	ldr	r1, [pc, #68]	@ (8015998 <netconn_recv_data+0x18c>)
 8015954:	480e      	ldr	r0, [pc, #56]	@ (8015990 <netconn_recv_data+0x184>)
 8015956:	f00f fc85 	bl	8025264 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 801595a:	69bb      	ldr	r3, [r7, #24]
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	891b      	ldrh	r3, [r3, #8]
 8015960:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015966:	2b00      	cmp	r3, #0
 8015968:	d005      	beq.n	8015976 <netconn_recv_data+0x16a>
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801596e:	8bfa      	ldrh	r2, [r7, #30]
 8015970:	2101      	movs	r1, #1
 8015972:	68f8      	ldr	r0, [r7, #12]
 8015974:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8015976:	69ba      	ldr	r2, [r7, #24]
 8015978:	68bb      	ldr	r3, [r7, #8]
 801597a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 801597c:	2300      	movs	r3, #0
}
 801597e:	4618      	mov	r0, r3
 8015980:	3720      	adds	r7, #32
 8015982:	46bd      	mov	sp, r7
 8015984:	bd80      	pop	{r7, pc}
 8015986:	bf00      	nop
 8015988:	08029458 	.word	0x08029458
 801598c:	08029670 	.word	0x08029670
 8015990:	080294b0 	.word	0x080294b0
 8015994:	08029690 	.word	0x08029690
 8015998:	080296ac 	.word	0x080296ac

0801599c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b084      	sub	sp, #16
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	60f8      	str	r0, [r7, #12]
 80159a4:	60b9      	str	r1, [r7, #8]
 80159a6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d005      	beq.n	80159ba <netconn_tcp_recvd_msg+0x1e>
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80159b6:	2b10      	cmp	r3, #16
 80159b8:	d009      	beq.n	80159ce <netconn_tcp_recvd_msg+0x32>
 80159ba:	4b0c      	ldr	r3, [pc, #48]	@ (80159ec <netconn_tcp_recvd_msg+0x50>)
 80159bc:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80159c0:	490b      	ldr	r1, [pc, #44]	@ (80159f0 <netconn_tcp_recvd_msg+0x54>)
 80159c2:	480c      	ldr	r0, [pc, #48]	@ (80159f4 <netconn_tcp_recvd_msg+0x58>)
 80159c4:	f00f fc4e 	bl	8025264 <iprintf>
 80159c8:	f06f 030f 	mvn.w	r3, #15
 80159cc:	e00a      	b.n	80159e4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	68fa      	ldr	r2, [r7, #12]
 80159d2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	68ba      	ldr	r2, [r7, #8]
 80159d8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80159da:	6879      	ldr	r1, [r7, #4]
 80159dc:	4806      	ldr	r0, [pc, #24]	@ (80159f8 <netconn_tcp_recvd_msg+0x5c>)
 80159de:	f7ff fdb3 	bl	8015548 <netconn_apimsg>
 80159e2:	4603      	mov	r3, r0
}
 80159e4:	4618      	mov	r0, r3
 80159e6:	3710      	adds	r7, #16
 80159e8:	46bd      	mov	sp, r7
 80159ea:	bd80      	pop	{r7, pc}
 80159ec:	08029458 	.word	0x08029458
 80159f0:	080296b8 	.word	0x080296b8
 80159f4:	080294b0 	.word	0x080294b0
 80159f8:	08016e13 	.word	0x08016e13

080159fc <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b08c      	sub	sp, #48	@ 0x30
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
 8015a04:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d005      	beq.n	8015a18 <netconn_tcp_recvd+0x1c>
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	781b      	ldrb	r3, [r3, #0]
 8015a10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015a14:	2b10      	cmp	r3, #16
 8015a16:	d009      	beq.n	8015a2c <netconn_tcp_recvd+0x30>
 8015a18:	4b0c      	ldr	r3, [pc, #48]	@ (8015a4c <netconn_tcp_recvd+0x50>)
 8015a1a:	f240 22b5 	movw	r2, #693	@ 0x2b5
 8015a1e:	490c      	ldr	r1, [pc, #48]	@ (8015a50 <netconn_tcp_recvd+0x54>)
 8015a20:	480c      	ldr	r0, [pc, #48]	@ (8015a54 <netconn_tcp_recvd+0x58>)
 8015a22:	f00f fc1f 	bl	8025264 <iprintf>
 8015a26:	f06f 030f 	mvn.w	r3, #15
 8015a2a:	e00b      	b.n	8015a44 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8015a2c:	f107 030c 	add.w	r3, r7, #12
 8015a30:	461a      	mov	r2, r3
 8015a32:	6839      	ldr	r1, [r7, #0]
 8015a34:	6878      	ldr	r0, [r7, #4]
 8015a36:	f7ff ffb1 	bl	801599c <netconn_tcp_recvd_msg>
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8015a40:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8015a44:	4618      	mov	r0, r3
 8015a46:	3730      	adds	r7, #48	@ 0x30
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	bd80      	pop	{r7, pc}
 8015a4c:	08029458 	.word	0x08029458
 8015a50:	080296b8 	.word	0x080296b8
 8015a54:	080294b0 	.word	0x080294b0

08015a58 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b090      	sub	sp, #64	@ 0x40
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	60f8      	str	r0, [r7, #12]
 8015a60:	60b9      	str	r1, [r7, #8]
 8015a62:	4613      	mov	r3, r2
 8015a64:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	3310      	adds	r3, #16
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f00e fa45 	bl	8023efa <sys_mbox_valid>
 8015a70:	4603      	mov	r3, r0
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d102      	bne.n	8015a7c <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8015a76:	f06f 030a 	mvn.w	r3, #10
 8015a7a:	e06d      	b.n	8015b58 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	7f1b      	ldrb	r3, [r3, #28]
 8015a80:	b25b      	sxtb	r3, r3
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	da07      	bge.n	8015a96 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	7f1b      	ldrb	r3, [r3, #28]
 8015a8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015a8e:	b2da      	uxtb	r2, r3
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8015a94:	e039      	b.n	8015b0a <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8015a96:	79fb      	ldrb	r3, [r7, #7]
 8015a98:	461a      	mov	r2, r3
 8015a9a:	68b9      	ldr	r1, [r7, #8]
 8015a9c:	68f8      	ldr	r0, [r7, #12]
 8015a9e:	f7ff feb5 	bl	801580c <netconn_recv_data>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8015aa8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d002      	beq.n	8015ab6 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8015ab0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8015ab4:	e050      	b.n	8015b58 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8015ab6:	68bb      	ldr	r3, [r7, #8]
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8015abc:	79fb      	ldrb	r3, [r7, #7]
 8015abe:	f003 0308 	and.w	r3, r3, #8
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d10e      	bne.n	8015ae4 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8015ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d002      	beq.n	8015ad2 <netconn_recv_data_tcp+0x7a>
 8015acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ace:	891b      	ldrh	r3, [r3, #8]
 8015ad0:	e000      	b.n	8015ad4 <netconn_recv_data_tcp+0x7c>
 8015ad2:	2301      	movs	r3, #1
 8015ad4:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8015ad6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015ad8:	f107 0214 	add.w	r2, r7, #20
 8015adc:	4619      	mov	r1, r3
 8015ade:	68f8      	ldr	r0, [r7, #12]
 8015ae0:	f7ff ff5c 	bl	801599c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8015ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d134      	bne.n	8015b54 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8015aea:	79fb      	ldrb	r3, [r7, #7]
 8015aec:	f003 0310 	and.w	r3, r3, #16
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d009      	beq.n	8015b08 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	7f1b      	ldrb	r3, [r3, #28]
 8015af8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8015afc:	b2da      	uxtb	r2, r3
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8015b02:	f06f 0306 	mvn.w	r3, #6
 8015b06:	e027      	b.n	8015b58 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8015b08:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d005      	beq.n	8015b1e <netconn_recv_data_tcp+0xc6>
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b16:	2200      	movs	r2, #0
 8015b18:	2101      	movs	r1, #1
 8015b1a:	68f8      	ldr	r0, [r7, #12]
 8015b1c:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	685b      	ldr	r3, [r3, #4]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d10f      	bne.n	8015b46 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8015b26:	68f8      	ldr	r0, [r7, #12]
 8015b28:	f000 f9a2 	bl	8015e70 <netconn_err>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8015b32:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d002      	beq.n	8015b40 <netconn_recv_data_tcp+0xe8>
          return err;
 8015b3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8015b3e:	e00b      	b.n	8015b58 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8015b40:	f06f 030d 	mvn.w	r3, #13
 8015b44:	e008      	b.n	8015b58 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8015b46:	2101      	movs	r1, #1
 8015b48:	68f8      	ldr	r0, [r7, #12]
 8015b4a:	f000 f961 	bl	8015e10 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8015b4e:	f06f 030e 	mvn.w	r3, #14
 8015b52:	e001      	b.n	8015b58 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8015b54:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8015b58:	4618      	mov	r0, r3
 8015b5a:	3740      	adds	r7, #64	@ 0x40
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	bd80      	pop	{r7, pc}

08015b60 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b084      	sub	sp, #16
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	60f8      	str	r0, [r7, #12]
 8015b68:	60b9      	str	r1, [r7, #8]
 8015b6a:	4613      	mov	r3, r2
 8015b6c:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d005      	beq.n	8015b80 <netconn_recv_tcp_pbuf_flags+0x20>
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	781b      	ldrb	r3, [r3, #0]
 8015b78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015b7c:	2b10      	cmp	r3, #16
 8015b7e:	d009      	beq.n	8015b94 <netconn_recv_tcp_pbuf_flags+0x34>
 8015b80:	4b0a      	ldr	r3, [pc, #40]	@ (8015bac <netconn_recv_tcp_pbuf_flags+0x4c>)
 8015b82:	f240 3225 	movw	r2, #805	@ 0x325
 8015b86:	490a      	ldr	r1, [pc, #40]	@ (8015bb0 <netconn_recv_tcp_pbuf_flags+0x50>)
 8015b88:	480a      	ldr	r0, [pc, #40]	@ (8015bb4 <netconn_recv_tcp_pbuf_flags+0x54>)
 8015b8a:	f00f fb6b 	bl	8025264 <iprintf>
 8015b8e:	f06f 030f 	mvn.w	r3, #15
 8015b92:	e006      	b.n	8015ba2 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8015b94:	79fb      	ldrb	r3, [r7, #7]
 8015b96:	461a      	mov	r2, r3
 8015b98:	68b9      	ldr	r1, [r7, #8]
 8015b9a:	68f8      	ldr	r0, [r7, #12]
 8015b9c:	f7ff ff5c 	bl	8015a58 <netconn_recv_data_tcp>
 8015ba0:	4603      	mov	r3, r0
}
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	3710      	adds	r7, #16
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	bd80      	pop	{r7, pc}
 8015baa:	bf00      	nop
 8015bac:	08029458 	.word	0x08029458
 8015bb0:	080296b8 	.word	0x080296b8
 8015bb4:	080294b0 	.word	0x080294b0

08015bb8 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b084      	sub	sp, #16
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	60f8      	str	r0, [r7, #12]
 8015bc0:	60b9      	str	r1, [r7, #8]
 8015bc2:	4613      	mov	r3, r2
 8015bc4:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d005      	beq.n	8015bd8 <netconn_recv_udp_raw_netbuf_flags+0x20>
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	781b      	ldrb	r3, [r3, #0]
 8015bd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015bd4:	2b10      	cmp	r3, #16
 8015bd6:	d109      	bne.n	8015bec <netconn_recv_udp_raw_netbuf_flags+0x34>
 8015bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8015c04 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 8015bda:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 8015bde:	490a      	ldr	r1, [pc, #40]	@ (8015c08 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 8015be0:	480a      	ldr	r0, [pc, #40]	@ (8015c0c <netconn_recv_udp_raw_netbuf_flags+0x54>)
 8015be2:	f00f fb3f 	bl	8025264 <iprintf>
 8015be6:	f06f 030f 	mvn.w	r3, #15
 8015bea:	e006      	b.n	8015bfa <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8015bec:	79fb      	ldrb	r3, [r7, #7]
 8015bee:	461a      	mov	r2, r3
 8015bf0:	68b9      	ldr	r1, [r7, #8]
 8015bf2:	68f8      	ldr	r0, [r7, #12]
 8015bf4:	f7ff fe0a 	bl	801580c <netconn_recv_data>
 8015bf8:	4603      	mov	r3, r0
}
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	3710      	adds	r7, #16
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}
 8015c02:	bf00      	nop
 8015c04:	08029458 	.word	0x08029458
 8015c08:	080296dc 	.word	0x080296dc
 8015c0c:	080294b0 	.word	0x080294b0

08015c10 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b08c      	sub	sp, #48	@ 0x30
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
 8015c18:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d109      	bne.n	8015c34 <netconn_send+0x24>
 8015c20:	4b0e      	ldr	r3, [pc, #56]	@ (8015c5c <netconn_send+0x4c>)
 8015c22:	f240 32b2 	movw	r2, #946	@ 0x3b2
 8015c26:	490e      	ldr	r1, [pc, #56]	@ (8015c60 <netconn_send+0x50>)
 8015c28:	480e      	ldr	r0, [pc, #56]	@ (8015c64 <netconn_send+0x54>)
 8015c2a:	f00f fb1b 	bl	8025264 <iprintf>
 8015c2e:	f06f 030f 	mvn.w	r3, #15
 8015c32:	e00e      	b.n	8015c52 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8015c38:	683b      	ldr	r3, [r7, #0]
 8015c3a:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8015c3c:	f107 030c 	add.w	r3, r7, #12
 8015c40:	4619      	mov	r1, r3
 8015c42:	4809      	ldr	r0, [pc, #36]	@ (8015c68 <netconn_send+0x58>)
 8015c44:	f7ff fc80 	bl	8015548 <netconn_apimsg>
 8015c48:	4603      	mov	r3, r0
 8015c4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8015c4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8015c52:	4618      	mov	r0, r3
 8015c54:	3730      	adds	r7, #48	@ 0x30
 8015c56:	46bd      	mov	sp, r7
 8015c58:	bd80      	pop	{r7, pc}
 8015c5a:	bf00      	nop
 8015c5c:	08029458 	.word	0x08029458
 8015c60:	08029714 	.word	0x08029714
 8015c64:	080294b0 	.word	0x080294b0
 8015c68:	08016d79 	.word	0x08016d79

08015c6c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b088      	sub	sp, #32
 8015c70:	af02      	add	r7, sp, #8
 8015c72:	60f8      	str	r0, [r7, #12]
 8015c74:	60b9      	str	r1, [r7, #8]
 8015c76:	607a      	str	r2, [r7, #4]
 8015c78:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8015c7a:	68bb      	ldr	r3, [r7, #8]
 8015c7c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8015c82:	78fa      	ldrb	r2, [r7, #3]
 8015c84:	f107 0110 	add.w	r1, r7, #16
 8015c88:	6a3b      	ldr	r3, [r7, #32]
 8015c8a:	9300      	str	r3, [sp, #0]
 8015c8c:	4613      	mov	r3, r2
 8015c8e:	2201      	movs	r2, #1
 8015c90:	68f8      	ldr	r0, [r7, #12]
 8015c92:	f000 f805 	bl	8015ca0 <netconn_write_vectors_partly>
 8015c96:	4603      	mov	r3, r0
}
 8015c98:	4618      	mov	r0, r3
 8015c9a:	3718      	adds	r7, #24
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	bd80      	pop	{r7, pc}

08015ca0 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b092      	sub	sp, #72	@ 0x48
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	60f8      	str	r0, [r7, #12]
 8015ca8:	60b9      	str	r1, [r7, #8]
 8015caa:	4611      	mov	r1, r2
 8015cac:	461a      	mov	r2, r3
 8015cae:	460b      	mov	r3, r1
 8015cb0:	80fb      	strh	r3, [r7, #6]
 8015cb2:	4613      	mov	r3, r2
 8015cb4:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d109      	bne.n	8015cd0 <netconn_write_vectors_partly+0x30>
 8015cbc:	4b4e      	ldr	r3, [pc, #312]	@ (8015df8 <netconn_write_vectors_partly+0x158>)
 8015cbe:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8015cc2:	494e      	ldr	r1, [pc, #312]	@ (8015dfc <netconn_write_vectors_partly+0x15c>)
 8015cc4:	484e      	ldr	r0, [pc, #312]	@ (8015e00 <netconn_write_vectors_partly+0x160>)
 8015cc6:	f00f facd 	bl	8025264 <iprintf>
 8015cca:	f06f 030f 	mvn.w	r3, #15
 8015cce:	e08e      	b.n	8015dee <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	781b      	ldrb	r3, [r3, #0]
 8015cd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015cd8:	2b10      	cmp	r3, #16
 8015cda:	d009      	beq.n	8015cf0 <netconn_write_vectors_partly+0x50>
 8015cdc:	4b46      	ldr	r3, [pc, #280]	@ (8015df8 <netconn_write_vectors_partly+0x158>)
 8015cde:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8015ce2:	4948      	ldr	r1, [pc, #288]	@ (8015e04 <netconn_write_vectors_partly+0x164>)
 8015ce4:	4846      	ldr	r0, [pc, #280]	@ (8015e00 <netconn_write_vectors_partly+0x160>)
 8015ce6:	f00f fabd 	bl	8025264 <iprintf>
 8015cea:	f06f 0305 	mvn.w	r3, #5
 8015cee:	e07e      	b.n	8015dee <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	7f1b      	ldrb	r3, [r3, #28]
 8015cf4:	f003 0302 	and.w	r3, r3, #2
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d104      	bne.n	8015d06 <netconn_write_vectors_partly+0x66>
 8015cfc:	797b      	ldrb	r3, [r7, #5]
 8015cfe:	f003 0304 	and.w	r3, r3, #4
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d001      	beq.n	8015d0a <netconn_write_vectors_partly+0x6a>
 8015d06:	2301      	movs	r3, #1
 8015d08:	e000      	b.n	8015d0c <netconn_write_vectors_partly+0x6c>
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8015d10:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d005      	beq.n	8015d24 <netconn_write_vectors_partly+0x84>
 8015d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d102      	bne.n	8015d24 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8015d1e:	f06f 0305 	mvn.w	r3, #5
 8015d22:	e064      	b.n	8015dee <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8015d24:	2300      	movs	r3, #0
 8015d26:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 8015d28:	2300      	movs	r3, #0
 8015d2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8015d2c:	e015      	b.n	8015d5a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8015d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015d30:	00db      	lsls	r3, r3, #3
 8015d32:	68ba      	ldr	r2, [r7, #8]
 8015d34:	4413      	add	r3, r2
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015d3a:	4413      	add	r3, r2
 8015d3c:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 8015d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015d40:	00db      	lsls	r3, r3, #3
 8015d42:	68ba      	ldr	r2, [r7, #8]
 8015d44:	4413      	add	r3, r2
 8015d46:	685b      	ldr	r3, [r3, #4]
 8015d48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015d4a:	429a      	cmp	r2, r3
 8015d4c:	d202      	bcs.n	8015d54 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8015d4e:	f06f 0305 	mvn.w	r3, #5
 8015d52:	e04c      	b.n	8015dee <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8015d54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015d56:	3301      	adds	r3, #1
 8015d58:	643b      	str	r3, [r7, #64]	@ 0x40
 8015d5a:	88fb      	ldrh	r3, [r7, #6]
 8015d5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015d5e:	429a      	cmp	r2, r3
 8015d60:	dbe5      	blt.n	8015d2e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8015d62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d101      	bne.n	8015d6c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8015d68:	2300      	movs	r3, #0
 8015d6a:	e040      	b.n	8015dee <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8015d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	da0a      	bge.n	8015d88 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8015d72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d102      	bne.n	8015d7e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8015d78:	f06f 0305 	mvn.w	r3, #5
 8015d7c:	e037      	b.n	8015dee <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8015d7e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015d82:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8015d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d86:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8015d8c:	68bb      	ldr	r3, [r7, #8]
 8015d8e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8015d90:	88fb      	ldrh	r3, [r7, #6]
 8015d92:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8015d94:	2300      	movs	r3, #0
 8015d96:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8015d98:	797b      	ldrb	r3, [r7, #5]
 8015d9a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8015d9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015da0:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8015da2:	2300      	movs	r3, #0
 8015da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8015da6:	f107 0314 	add.w	r3, r7, #20
 8015daa:	4619      	mov	r1, r3
 8015dac:	4816      	ldr	r0, [pc, #88]	@ (8015e08 <netconn_write_vectors_partly+0x168>)
 8015dae:	f7ff fbcb 	bl	8015548 <netconn_apimsg>
 8015db2:	4603      	mov	r3, r0
 8015db4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8015db8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d114      	bne.n	8015dea <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8015dc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d002      	beq.n	8015dcc <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8015dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015dc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015dca:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8015dcc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d10a      	bne.n	8015dea <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8015dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015dd8:	429a      	cmp	r2, r3
 8015dda:	d006      	beq.n	8015dea <netconn_write_vectors_partly+0x14a>
 8015ddc:	4b06      	ldr	r3, [pc, #24]	@ (8015df8 <netconn_write_vectors_partly+0x158>)
 8015dde:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015de2:	490a      	ldr	r1, [pc, #40]	@ (8015e0c <netconn_write_vectors_partly+0x16c>)
 8015de4:	4806      	ldr	r0, [pc, #24]	@ (8015e00 <netconn_write_vectors_partly+0x160>)
 8015de6:	f00f fa3d 	bl	8025264 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8015dea:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8015dee:	4618      	mov	r0, r3
 8015df0:	3748      	adds	r7, #72	@ 0x48
 8015df2:	46bd      	mov	sp, r7
 8015df4:	bd80      	pop	{r7, pc}
 8015df6:	bf00      	nop
 8015df8:	08029458 	.word	0x08029458
 8015dfc:	08029730 	.word	0x08029730
 8015e00:	080294b0 	.word	0x080294b0
 8015e04:	0802974c 	.word	0x0802974c
 8015e08:	08017215 	.word	0x08017215
 8015e0c:	08029770 	.word	0x08029770

08015e10 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b08c      	sub	sp, #48	@ 0x30
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
 8015e18:	460b      	mov	r3, r1
 8015e1a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d109      	bne.n	8015e36 <netconn_close_shutdown+0x26>
 8015e22:	4b0f      	ldr	r3, [pc, #60]	@ (8015e60 <netconn_close_shutdown+0x50>)
 8015e24:	f240 4247 	movw	r2, #1095	@ 0x447
 8015e28:	490e      	ldr	r1, [pc, #56]	@ (8015e64 <netconn_close_shutdown+0x54>)
 8015e2a:	480f      	ldr	r0, [pc, #60]	@ (8015e68 <netconn_close_shutdown+0x58>)
 8015e2c:	f00f fa1a 	bl	8025264 <iprintf>
 8015e30:	f06f 030f 	mvn.w	r3, #15
 8015e34:	e010      	b.n	8015e58 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8015e3a:	78fb      	ldrb	r3, [r7, #3]
 8015e3c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8015e3e:	2329      	movs	r3, #41	@ 0x29
 8015e40:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8015e42:	f107 030c 	add.w	r3, r7, #12
 8015e46:	4619      	mov	r1, r3
 8015e48:	4808      	ldr	r0, [pc, #32]	@ (8015e6c <netconn_close_shutdown+0x5c>)
 8015e4a:	f7ff fb7d 	bl	8015548 <netconn_apimsg>
 8015e4e:	4603      	mov	r3, r0
 8015e50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8015e54:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8015e58:	4618      	mov	r0, r3
 8015e5a:	3730      	adds	r7, #48	@ 0x30
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	bd80      	pop	{r7, pc}
 8015e60:	08029458 	.word	0x08029458
 8015e64:	08029794 	.word	0x08029794
 8015e68:	080294b0 	.word	0x080294b0
 8015e6c:	08017439 	.word	0x08017439

08015e70 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b084      	sub	sp, #16
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d101      	bne.n	8015e82 <netconn_err+0x12>
    return ERR_OK;
 8015e7e:	2300      	movs	r3, #0
 8015e80:	e00d      	b.n	8015e9e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8015e82:	f00e f955 	bl	8024130 <sys_arch_protect>
 8015e86:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	7a1b      	ldrb	r3, [r3, #8]
 8015e8c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2200      	movs	r2, #0
 8015e92:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8015e94:	68f8      	ldr	r0, [r7, #12]
 8015e96:	f00e f959 	bl	802414c <sys_arch_unprotect>
  return err;
 8015e9a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	3710      	adds	r7, #16
 8015ea2:	46bd      	mov	sp, r7
 8015ea4:	bd80      	pop	{r7, pc}
	...

08015ea8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b082      	sub	sp, #8
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	4603      	mov	r3, r0
 8015eb0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8015eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015eb6:	f113 0f0d 	cmn.w	r3, #13
 8015eba:	d009      	beq.n	8015ed0 <lwip_netconn_err_to_msg+0x28>
 8015ebc:	f113 0f0d 	cmn.w	r3, #13
 8015ec0:	dc0c      	bgt.n	8015edc <lwip_netconn_err_to_msg+0x34>
 8015ec2:	f113 0f0f 	cmn.w	r3, #15
 8015ec6:	d007      	beq.n	8015ed8 <lwip_netconn_err_to_msg+0x30>
 8015ec8:	f113 0f0e 	cmn.w	r3, #14
 8015ecc:	d002      	beq.n	8015ed4 <lwip_netconn_err_to_msg+0x2c>
 8015ece:	e005      	b.n	8015edc <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8015ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8015efc <lwip_netconn_err_to_msg+0x54>)
 8015ed2:	e00e      	b.n	8015ef2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8015ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8015f00 <lwip_netconn_err_to_msg+0x58>)
 8015ed6:	e00c      	b.n	8015ef2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8015ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8015f04 <lwip_netconn_err_to_msg+0x5c>)
 8015eda:	e00a      	b.n	8015ef2 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8015edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d005      	beq.n	8015ef0 <lwip_netconn_err_to_msg+0x48>
 8015ee4:	4b08      	ldr	r3, [pc, #32]	@ (8015f08 <lwip_netconn_err_to_msg+0x60>)
 8015ee6:	227d      	movs	r2, #125	@ 0x7d
 8015ee8:	4908      	ldr	r1, [pc, #32]	@ (8015f0c <lwip_netconn_err_to_msg+0x64>)
 8015eea:	4809      	ldr	r0, [pc, #36]	@ (8015f10 <lwip_netconn_err_to_msg+0x68>)
 8015eec:	f00f f9ba 	bl	8025264 <iprintf>
      return NULL;
 8015ef0:	2300      	movs	r3, #0
  }
}
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	3708      	adds	r7, #8
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	bd80      	pop	{r7, pc}
 8015efa:	bf00      	nop
 8015efc:	0802cdc0 	.word	0x0802cdc0
 8015f00:	0802cdc1 	.word	0x0802cdc1
 8015f04:	0802cdc2 	.word	0x0802cdc2
 8015f08:	080297b0 	.word	0x080297b0
 8015f0c:	080297e4 	.word	0x080297e4
 8015f10:	080297f4 	.word	0x080297f4

08015f14 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b082      	sub	sp, #8
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
 8015f1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8015f1e:	683b      	ldr	r3, [r7, #0]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d105      	bne.n	8015f30 <lwip_netconn_is_err_msg+0x1c>
 8015f24:	4b12      	ldr	r3, [pc, #72]	@ (8015f70 <lwip_netconn_is_err_msg+0x5c>)
 8015f26:	2285      	movs	r2, #133	@ 0x85
 8015f28:	4912      	ldr	r1, [pc, #72]	@ (8015f74 <lwip_netconn_is_err_msg+0x60>)
 8015f2a:	4813      	ldr	r0, [pc, #76]	@ (8015f78 <lwip_netconn_is_err_msg+0x64>)
 8015f2c:	f00f f99a 	bl	8025264 <iprintf>

  if (msg == &netconn_aborted) {
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	4a12      	ldr	r2, [pc, #72]	@ (8015f7c <lwip_netconn_is_err_msg+0x68>)
 8015f34:	4293      	cmp	r3, r2
 8015f36:	d104      	bne.n	8015f42 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8015f38:	683b      	ldr	r3, [r7, #0]
 8015f3a:	22f3      	movs	r2, #243	@ 0xf3
 8015f3c:	701a      	strb	r2, [r3, #0]
    return 1;
 8015f3e:	2301      	movs	r3, #1
 8015f40:	e012      	b.n	8015f68 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	4a0e      	ldr	r2, [pc, #56]	@ (8015f80 <lwip_netconn_is_err_msg+0x6c>)
 8015f46:	4293      	cmp	r3, r2
 8015f48:	d104      	bne.n	8015f54 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8015f4a:	683b      	ldr	r3, [r7, #0]
 8015f4c:	22f2      	movs	r2, #242	@ 0xf2
 8015f4e:	701a      	strb	r2, [r3, #0]
    return 1;
 8015f50:	2301      	movs	r3, #1
 8015f52:	e009      	b.n	8015f68 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	4a0b      	ldr	r2, [pc, #44]	@ (8015f84 <lwip_netconn_is_err_msg+0x70>)
 8015f58:	4293      	cmp	r3, r2
 8015f5a:	d104      	bne.n	8015f66 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8015f5c:	683b      	ldr	r3, [r7, #0]
 8015f5e:	22f1      	movs	r2, #241	@ 0xf1
 8015f60:	701a      	strb	r2, [r3, #0]
    return 1;
 8015f62:	2301      	movs	r3, #1
 8015f64:	e000      	b.n	8015f68 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8015f66:	2300      	movs	r3, #0
}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	3708      	adds	r7, #8
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	bd80      	pop	{r7, pc}
 8015f70:	080297b0 	.word	0x080297b0
 8015f74:	0802981c 	.word	0x0802981c
 8015f78:	080297f4 	.word	0x080297f4
 8015f7c:	0802cdc0 	.word	0x0802cdc0
 8015f80:	0802cdc1 	.word	0x0802cdc1
 8015f84:	0802cdc2 	.word	0x0802cdc2

08015f88 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b088      	sub	sp, #32
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	60f8      	str	r0, [r7, #12]
 8015f90:	60b9      	str	r1, [r7, #8]
 8015f92:	607a      	str	r2, [r7, #4]
 8015f94:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8015f96:	68bb      	ldr	r3, [r7, #8]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d105      	bne.n	8015fa8 <recv_udp+0x20>
 8015f9c:	4b34      	ldr	r3, [pc, #208]	@ (8016070 <recv_udp+0xe8>)
 8015f9e:	22e5      	movs	r2, #229	@ 0xe5
 8015fa0:	4934      	ldr	r1, [pc, #208]	@ (8016074 <recv_udp+0xec>)
 8015fa2:	4835      	ldr	r0, [pc, #212]	@ (8016078 <recv_udp+0xf0>)
 8015fa4:	f00f f95e 	bl	8025264 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d105      	bne.n	8015fba <recv_udp+0x32>
 8015fae:	4b30      	ldr	r3, [pc, #192]	@ (8016070 <recv_udp+0xe8>)
 8015fb0:	22e6      	movs	r2, #230	@ 0xe6
 8015fb2:	4932      	ldr	r1, [pc, #200]	@ (801607c <recv_udp+0xf4>)
 8015fb4:	4830      	ldr	r0, [pc, #192]	@ (8016078 <recv_udp+0xf0>)
 8015fb6:	f00f f955 	bl	8025264 <iprintf>
  conn = (struct netconn *)arg;
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8015fbe:	69fb      	ldr	r3, [r7, #28]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d103      	bne.n	8015fcc <recv_udp+0x44>
    pbuf_free(p);
 8015fc4:	6878      	ldr	r0, [r7, #4]
 8015fc6:	f004 f9ff 	bl	801a3c8 <pbuf_free>
    return;
 8015fca:	e04d      	b.n	8016068 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8015fcc:	69fb      	ldr	r3, [r7, #28]
 8015fce:	685b      	ldr	r3, [r3, #4]
 8015fd0:	68ba      	ldr	r2, [r7, #8]
 8015fd2:	429a      	cmp	r2, r3
 8015fd4:	d005      	beq.n	8015fe2 <recv_udp+0x5a>
 8015fd6:	4b26      	ldr	r3, [pc, #152]	@ (8016070 <recv_udp+0xe8>)
 8015fd8:	22ee      	movs	r2, #238	@ 0xee
 8015fda:	4929      	ldr	r1, [pc, #164]	@ (8016080 <recv_udp+0xf8>)
 8015fdc:	4826      	ldr	r0, [pc, #152]	@ (8016078 <recv_udp+0xf0>)
 8015fde:	f00f f941 	bl	8025264 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8015fe2:	69fb      	ldr	r3, [r7, #28]
 8015fe4:	3310      	adds	r3, #16
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	f00d ff87 	bl	8023efa <sys_mbox_valid>
 8015fec:	4603      	mov	r3, r0
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d103      	bne.n	8015ffa <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8015ff2:	6878      	ldr	r0, [r7, #4]
 8015ff4:	f004 f9e8 	bl	801a3c8 <pbuf_free>
    return;
 8015ff8:	e036      	b.n	8016068 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8015ffa:	2006      	movs	r0, #6
 8015ffc:	f003 fa98 	bl	8019530 <memp_malloc>
 8016000:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8016002:	69bb      	ldr	r3, [r7, #24]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d103      	bne.n	8016010 <recv_udp+0x88>
    pbuf_free(p);
 8016008:	6878      	ldr	r0, [r7, #4]
 801600a:	f004 f9dd 	bl	801a3c8 <pbuf_free>
    return;
 801600e:	e02b      	b.n	8016068 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8016010:	69bb      	ldr	r3, [r7, #24]
 8016012:	687a      	ldr	r2, [r7, #4]
 8016014:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8016016:	69bb      	ldr	r3, [r7, #24]
 8016018:	687a      	ldr	r2, [r7, #4]
 801601a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 801601c:	683b      	ldr	r3, [r7, #0]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d002      	beq.n	8016028 <recv_udp+0xa0>
 8016022:	683b      	ldr	r3, [r7, #0]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	e000      	b.n	801602a <recv_udp+0xa2>
 8016028:	2300      	movs	r3, #0
 801602a:	69ba      	ldr	r2, [r7, #24]
 801602c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 801602e:	69bb      	ldr	r3, [r7, #24]
 8016030:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8016032:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	891b      	ldrh	r3, [r3, #8]
 8016038:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 801603a:	69fb      	ldr	r3, [r7, #28]
 801603c:	3310      	adds	r3, #16
 801603e:	69b9      	ldr	r1, [r7, #24]
 8016040:	4618      	mov	r0, r3
 8016042:	f00d fee5 	bl	8023e10 <sys_mbox_trypost>
 8016046:	4603      	mov	r3, r0
 8016048:	2b00      	cmp	r3, #0
 801604a:	d003      	beq.n	8016054 <recv_udp+0xcc>
    netbuf_delete(buf);
 801604c:	69b8      	ldr	r0, [r7, #24]
 801604e:	f001 fa9d 	bl	801758c <netbuf_delete>
    return;
 8016052:	e009      	b.n	8016068 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8016054:	69fb      	ldr	r3, [r7, #28]
 8016056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016058:	2b00      	cmp	r3, #0
 801605a:	d005      	beq.n	8016068 <recv_udp+0xe0>
 801605c:	69fb      	ldr	r3, [r7, #28]
 801605e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016060:	8afa      	ldrh	r2, [r7, #22]
 8016062:	2100      	movs	r1, #0
 8016064:	69f8      	ldr	r0, [r7, #28]
 8016066:	4798      	blx	r3
  }
}
 8016068:	3720      	adds	r7, #32
 801606a:	46bd      	mov	sp, r7
 801606c:	bd80      	pop	{r7, pc}
 801606e:	bf00      	nop
 8016070:	080297b0 	.word	0x080297b0
 8016074:	08029828 	.word	0x08029828
 8016078:	080297f4 	.word	0x080297f4
 801607c:	0802984c 	.word	0x0802984c
 8016080:	0802986c 	.word	0x0802986c

08016084 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b088      	sub	sp, #32
 8016088:	af00      	add	r7, sp, #0
 801608a:	60f8      	str	r0, [r7, #12]
 801608c:	60b9      	str	r1, [r7, #8]
 801608e:	607a      	str	r2, [r7, #4]
 8016090:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8016092:	68bb      	ldr	r3, [r7, #8]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d106      	bne.n	80160a6 <recv_tcp+0x22>
 8016098:	4b36      	ldr	r3, [pc, #216]	@ (8016174 <recv_tcp+0xf0>)
 801609a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 801609e:	4936      	ldr	r1, [pc, #216]	@ (8016178 <recv_tcp+0xf4>)
 80160a0:	4836      	ldr	r0, [pc, #216]	@ (801617c <recv_tcp+0xf8>)
 80160a2:	f00f f8df 	bl	8025264 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d106      	bne.n	80160ba <recv_tcp+0x36>
 80160ac:	4b31      	ldr	r3, [pc, #196]	@ (8016174 <recv_tcp+0xf0>)
 80160ae:	f240 122d 	movw	r2, #301	@ 0x12d
 80160b2:	4933      	ldr	r1, [pc, #204]	@ (8016180 <recv_tcp+0xfc>)
 80160b4:	4831      	ldr	r0, [pc, #196]	@ (801617c <recv_tcp+0xf8>)
 80160b6:	f00f f8d5 	bl	8025264 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80160ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d006      	beq.n	80160d0 <recv_tcp+0x4c>
 80160c2:	4b2c      	ldr	r3, [pc, #176]	@ (8016174 <recv_tcp+0xf0>)
 80160c4:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80160c8:	492e      	ldr	r1, [pc, #184]	@ (8016184 <recv_tcp+0x100>)
 80160ca:	482c      	ldr	r0, [pc, #176]	@ (801617c <recv_tcp+0xf8>)
 80160cc:	f00f f8ca 	bl	8025264 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80160d4:	697b      	ldr	r3, [r7, #20]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d102      	bne.n	80160e0 <recv_tcp+0x5c>
    return ERR_VAL;
 80160da:	f06f 0305 	mvn.w	r3, #5
 80160de:	e045      	b.n	801616c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80160e0:	697b      	ldr	r3, [r7, #20]
 80160e2:	685b      	ldr	r3, [r3, #4]
 80160e4:	68ba      	ldr	r2, [r7, #8]
 80160e6:	429a      	cmp	r2, r3
 80160e8:	d006      	beq.n	80160f8 <recv_tcp+0x74>
 80160ea:	4b22      	ldr	r3, [pc, #136]	@ (8016174 <recv_tcp+0xf0>)
 80160ec:	f240 1235 	movw	r2, #309	@ 0x135
 80160f0:	4925      	ldr	r1, [pc, #148]	@ (8016188 <recv_tcp+0x104>)
 80160f2:	4822      	ldr	r0, [pc, #136]	@ (801617c <recv_tcp+0xf8>)
 80160f4:	f00f f8b6 	bl	8025264 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80160f8:	697b      	ldr	r3, [r7, #20]
 80160fa:	3310      	adds	r3, #16
 80160fc:	4618      	mov	r0, r3
 80160fe:	f00d fefc 	bl	8023efa <sys_mbox_valid>
 8016102:	4603      	mov	r3, r0
 8016104:	2b00      	cmp	r3, #0
 8016106:	d10d      	bne.n	8016124 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d008      	beq.n	8016120 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	891b      	ldrh	r3, [r3, #8]
 8016112:	4619      	mov	r1, r3
 8016114:	68b8      	ldr	r0, [r7, #8]
 8016116:	f005 f855 	bl	801b1c4 <tcp_recved>
      pbuf_free(p);
 801611a:	6878      	ldr	r0, [r7, #4]
 801611c:	f004 f954 	bl	801a3c8 <pbuf_free>
    }
    return ERR_OK;
 8016120:	2300      	movs	r3, #0
 8016122:	e023      	b.n	801616c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d005      	beq.n	8016136 <recv_tcp+0xb2>
    msg = p;
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	891b      	ldrh	r3, [r3, #8]
 8016132:	83fb      	strh	r3, [r7, #30]
 8016134:	e003      	b.n	801613e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8016136:	4b15      	ldr	r3, [pc, #84]	@ (801618c <recv_tcp+0x108>)
 8016138:	61bb      	str	r3, [r7, #24]
    len = 0;
 801613a:	2300      	movs	r3, #0
 801613c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 801613e:	697b      	ldr	r3, [r7, #20]
 8016140:	3310      	adds	r3, #16
 8016142:	69b9      	ldr	r1, [r7, #24]
 8016144:	4618      	mov	r0, r3
 8016146:	f00d fe63 	bl	8023e10 <sys_mbox_trypost>
 801614a:	4603      	mov	r3, r0
 801614c:	2b00      	cmp	r3, #0
 801614e:	d002      	beq.n	8016156 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8016150:	f04f 33ff 	mov.w	r3, #4294967295
 8016154:	e00a      	b.n	801616c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8016156:	697b      	ldr	r3, [r7, #20]
 8016158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801615a:	2b00      	cmp	r3, #0
 801615c:	d005      	beq.n	801616a <recv_tcp+0xe6>
 801615e:	697b      	ldr	r3, [r7, #20]
 8016160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016162:	8bfa      	ldrh	r2, [r7, #30]
 8016164:	2100      	movs	r1, #0
 8016166:	6978      	ldr	r0, [r7, #20]
 8016168:	4798      	blx	r3
  }

  return ERR_OK;
 801616a:	2300      	movs	r3, #0
}
 801616c:	4618      	mov	r0, r3
 801616e:	3720      	adds	r7, #32
 8016170:	46bd      	mov	sp, r7
 8016172:	bd80      	pop	{r7, pc}
 8016174:	080297b0 	.word	0x080297b0
 8016178:	0802988c 	.word	0x0802988c
 801617c:	080297f4 	.word	0x080297f4
 8016180:	080298b0 	.word	0x080298b0
 8016184:	080298d0 	.word	0x080298d0
 8016188:	080298e8 	.word	0x080298e8
 801618c:	0802cdc2 	.word	0x0802cdc2

08016190 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8016190:	b580      	push	{r7, lr}
 8016192:	b084      	sub	sp, #16
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
 8016198:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d106      	bne.n	80161b2 <poll_tcp+0x22>
 80161a4:	4b29      	ldr	r3, [pc, #164]	@ (801624c <poll_tcp+0xbc>)
 80161a6:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 80161aa:	4929      	ldr	r1, [pc, #164]	@ (8016250 <poll_tcp+0xc0>)
 80161ac:	4829      	ldr	r0, [pc, #164]	@ (8016254 <poll_tcp+0xc4>)
 80161ae:	f00f f859 	bl	8025264 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	785b      	ldrb	r3, [r3, #1]
 80161b6:	2b01      	cmp	r3, #1
 80161b8:	d104      	bne.n	80161c4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80161ba:	2101      	movs	r1, #1
 80161bc:	68f8      	ldr	r0, [r7, #12]
 80161be:	f000 fe5d 	bl	8016e7c <lwip_netconn_do_writemore>
 80161c2:	e016      	b.n	80161f2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	785b      	ldrb	r3, [r3, #1]
 80161c8:	2b04      	cmp	r3, #4
 80161ca:	d112      	bne.n	80161f2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	6a1b      	ldr	r3, [r3, #32]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d00a      	beq.n	80161ea <poll_tcp+0x5a>
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	6a1b      	ldr	r3, [r3, #32]
 80161d8:	7a5b      	ldrb	r3, [r3, #9]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d005      	beq.n	80161ea <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	6a1b      	ldr	r3, [r3, #32]
 80161e2:	7a5a      	ldrb	r2, [r3, #9]
 80161e4:	3a01      	subs	r2, #1
 80161e6:	b2d2      	uxtb	r2, r2
 80161e8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80161ea:	2101      	movs	r1, #1
 80161ec:	68f8      	ldr	r0, [r7, #12]
 80161ee:	f000 fb3b 	bl	8016868 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	7f1b      	ldrb	r3, [r3, #28]
 80161f6:	f003 0310 	and.w	r3, r3, #16
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d021      	beq.n	8016242 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	685b      	ldr	r3, [r3, #4]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d01d      	beq.n	8016242 <poll_tcp+0xb2>
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	685b      	ldr	r3, [r3, #4]
 801620a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801620e:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8016212:	d316      	bcc.n	8016242 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	685b      	ldr	r3, [r3, #4]
 8016218:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801621c:	2b04      	cmp	r3, #4
 801621e:	d810      	bhi.n	8016242 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	7f1b      	ldrb	r3, [r3, #28]
 8016224:	f023 0310 	bic.w	r3, r3, #16
 8016228:	b2da      	uxtb	r2, r3
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016232:	2b00      	cmp	r3, #0
 8016234:	d005      	beq.n	8016242 <poll_tcp+0xb2>
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801623a:	2200      	movs	r2, #0
 801623c:	2102      	movs	r1, #2
 801623e:	68f8      	ldr	r0, [r7, #12]
 8016240:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8016242:	2300      	movs	r3, #0
}
 8016244:	4618      	mov	r0, r3
 8016246:	3710      	adds	r7, #16
 8016248:	46bd      	mov	sp, r7
 801624a:	bd80      	pop	{r7, pc}
 801624c:	080297b0 	.word	0x080297b0
 8016250:	08029908 	.word	0x08029908
 8016254:	080297f4 	.word	0x080297f4

08016258 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b086      	sub	sp, #24
 801625c:	af00      	add	r7, sp, #0
 801625e:	60f8      	str	r0, [r7, #12]
 8016260:	60b9      	str	r1, [r7, #8]
 8016262:	4613      	mov	r3, r2
 8016264:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801626a:	697b      	ldr	r3, [r7, #20]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d106      	bne.n	801627e <sent_tcp+0x26>
 8016270:	4b20      	ldr	r3, [pc, #128]	@ (80162f4 <sent_tcp+0x9c>)
 8016272:	f240 1293 	movw	r2, #403	@ 0x193
 8016276:	4920      	ldr	r1, [pc, #128]	@ (80162f8 <sent_tcp+0xa0>)
 8016278:	4820      	ldr	r0, [pc, #128]	@ (80162fc <sent_tcp+0xa4>)
 801627a:	f00e fff3 	bl	8025264 <iprintf>

  if (conn) {
 801627e:	697b      	ldr	r3, [r7, #20]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d032      	beq.n	80162ea <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8016284:	697b      	ldr	r3, [r7, #20]
 8016286:	785b      	ldrb	r3, [r3, #1]
 8016288:	2b01      	cmp	r3, #1
 801628a:	d104      	bne.n	8016296 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801628c:	2101      	movs	r1, #1
 801628e:	6978      	ldr	r0, [r7, #20]
 8016290:	f000 fdf4 	bl	8016e7c <lwip_netconn_do_writemore>
 8016294:	e007      	b.n	80162a6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8016296:	697b      	ldr	r3, [r7, #20]
 8016298:	785b      	ldrb	r3, [r3, #1]
 801629a:	2b04      	cmp	r3, #4
 801629c:	d103      	bne.n	80162a6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801629e:	2101      	movs	r1, #1
 80162a0:	6978      	ldr	r0, [r7, #20]
 80162a2:	f000 fae1 	bl	8016868 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80162a6:	697b      	ldr	r3, [r7, #20]
 80162a8:	685b      	ldr	r3, [r3, #4]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d01d      	beq.n	80162ea <sent_tcp+0x92>
 80162ae:	697b      	ldr	r3, [r7, #20]
 80162b0:	685b      	ldr	r3, [r3, #4]
 80162b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80162b6:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80162ba:	d316      	bcc.n	80162ea <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80162bc:	697b      	ldr	r3, [r7, #20]
 80162be:	685b      	ldr	r3, [r3, #4]
 80162c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80162c4:	2b04      	cmp	r3, #4
 80162c6:	d810      	bhi.n	80162ea <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80162c8:	697b      	ldr	r3, [r7, #20]
 80162ca:	7f1b      	ldrb	r3, [r3, #28]
 80162cc:	f023 0310 	bic.w	r3, r3, #16
 80162d0:	b2da      	uxtb	r2, r3
 80162d2:	697b      	ldr	r3, [r7, #20]
 80162d4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80162d6:	697b      	ldr	r3, [r7, #20]
 80162d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d005      	beq.n	80162ea <sent_tcp+0x92>
 80162de:	697b      	ldr	r3, [r7, #20]
 80162e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162e2:	88fa      	ldrh	r2, [r7, #6]
 80162e4:	2102      	movs	r1, #2
 80162e6:	6978      	ldr	r0, [r7, #20]
 80162e8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80162ea:	2300      	movs	r3, #0
}
 80162ec:	4618      	mov	r0, r3
 80162ee:	3718      	adds	r7, #24
 80162f0:	46bd      	mov	sp, r7
 80162f2:	bd80      	pop	{r7, pc}
 80162f4:	080297b0 	.word	0x080297b0
 80162f8:	08029908 	.word	0x08029908
 80162fc:	080297f4 	.word	0x080297f4

08016300 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b088      	sub	sp, #32
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
 8016308:	460b      	mov	r3, r1
 801630a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8016310:	69fb      	ldr	r3, [r7, #28]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d106      	bne.n	8016324 <err_tcp+0x24>
 8016316:	4b5f      	ldr	r3, [pc, #380]	@ (8016494 <err_tcp+0x194>)
 8016318:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801631c:	495e      	ldr	r1, [pc, #376]	@ (8016498 <err_tcp+0x198>)
 801631e:	485f      	ldr	r0, [pc, #380]	@ (801649c <err_tcp+0x19c>)
 8016320:	f00e ffa0 	bl	8025264 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8016324:	f00d ff04 	bl	8024130 <sys_arch_protect>
 8016328:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 801632a:	69fb      	ldr	r3, [r7, #28]
 801632c:	2200      	movs	r2, #0
 801632e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8016330:	69fb      	ldr	r3, [r7, #28]
 8016332:	78fa      	ldrb	r2, [r7, #3]
 8016334:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8016336:	69fb      	ldr	r3, [r7, #28]
 8016338:	7f1b      	ldrb	r3, [r3, #28]
 801633a:	f043 0301 	orr.w	r3, r3, #1
 801633e:	b2da      	uxtb	r2, r3
 8016340:	69fb      	ldr	r3, [r7, #28]
 8016342:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8016344:	69fb      	ldr	r3, [r7, #28]
 8016346:	785b      	ldrb	r3, [r3, #1]
 8016348:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 801634a:	69fb      	ldr	r3, [r7, #28]
 801634c:	2200      	movs	r2, #0
 801634e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8016350:	69b8      	ldr	r0, [r7, #24]
 8016352:	f00d fefb 	bl	802414c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8016356:	69fb      	ldr	r3, [r7, #28]
 8016358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801635a:	2b00      	cmp	r3, #0
 801635c:	d005      	beq.n	801636a <err_tcp+0x6a>
 801635e:	69fb      	ldr	r3, [r7, #28]
 8016360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016362:	2200      	movs	r2, #0
 8016364:	2104      	movs	r1, #4
 8016366:	69f8      	ldr	r0, [r7, #28]
 8016368:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801636a:	69fb      	ldr	r3, [r7, #28]
 801636c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801636e:	2b00      	cmp	r3, #0
 8016370:	d005      	beq.n	801637e <err_tcp+0x7e>
 8016372:	69fb      	ldr	r3, [r7, #28]
 8016374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016376:	2200      	movs	r2, #0
 8016378:	2100      	movs	r1, #0
 801637a:	69f8      	ldr	r0, [r7, #28]
 801637c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801637e:	69fb      	ldr	r3, [r7, #28]
 8016380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016382:	2b00      	cmp	r3, #0
 8016384:	d005      	beq.n	8016392 <err_tcp+0x92>
 8016386:	69fb      	ldr	r3, [r7, #28]
 8016388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801638a:	2200      	movs	r2, #0
 801638c:	2102      	movs	r1, #2
 801638e:	69f8      	ldr	r0, [r7, #28]
 8016390:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8016392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016396:	4618      	mov	r0, r3
 8016398:	f7ff fd86 	bl	8015ea8 <lwip_netconn_err_to_msg>
 801639c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801639e:	69fb      	ldr	r3, [r7, #28]
 80163a0:	3310      	adds	r3, #16
 80163a2:	4618      	mov	r0, r3
 80163a4:	f00d fda9 	bl	8023efa <sys_mbox_valid>
 80163a8:	4603      	mov	r3, r0
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d005      	beq.n	80163ba <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80163ae:	69fb      	ldr	r3, [r7, #28]
 80163b0:	3310      	adds	r3, #16
 80163b2:	6939      	ldr	r1, [r7, #16]
 80163b4:	4618      	mov	r0, r3
 80163b6:	f00d fd2b 	bl	8023e10 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80163ba:	69fb      	ldr	r3, [r7, #28]
 80163bc:	3314      	adds	r3, #20
 80163be:	4618      	mov	r0, r3
 80163c0:	f00d fd9b 	bl	8023efa <sys_mbox_valid>
 80163c4:	4603      	mov	r3, r0
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d005      	beq.n	80163d6 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80163ca:	69fb      	ldr	r3, [r7, #28]
 80163cc:	3314      	adds	r3, #20
 80163ce:	6939      	ldr	r1, [r7, #16]
 80163d0:	4618      	mov	r0, r3
 80163d2:	f00d fd1d 	bl	8023e10 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80163d6:	7dfb      	ldrb	r3, [r7, #23]
 80163d8:	2b01      	cmp	r3, #1
 80163da:	d005      	beq.n	80163e8 <err_tcp+0xe8>
 80163dc:	7dfb      	ldrb	r3, [r7, #23]
 80163de:	2b04      	cmp	r3, #4
 80163e0:	d002      	beq.n	80163e8 <err_tcp+0xe8>
 80163e2:	7dfb      	ldrb	r3, [r7, #23]
 80163e4:	2b03      	cmp	r3, #3
 80163e6:	d143      	bne.n	8016470 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80163e8:	69fb      	ldr	r3, [r7, #28]
 80163ea:	7f1b      	ldrb	r3, [r3, #28]
 80163ec:	f003 0304 	and.w	r3, r3, #4
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	bf14      	ite	ne
 80163f4:	2301      	movne	r3, #1
 80163f6:	2300      	moveq	r3, #0
 80163f8:	b2db      	uxtb	r3, r3
 80163fa:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80163fc:	69fb      	ldr	r3, [r7, #28]
 80163fe:	7f1b      	ldrb	r3, [r3, #28]
 8016400:	f023 0304 	bic.w	r3, r3, #4
 8016404:	b2da      	uxtb	r2, r3
 8016406:	69fb      	ldr	r3, [r7, #28]
 8016408:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d13b      	bne.n	8016488 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8016410:	69fb      	ldr	r3, [r7, #28]
 8016412:	6a1b      	ldr	r3, [r3, #32]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d106      	bne.n	8016426 <err_tcp+0x126>
 8016418:	4b1e      	ldr	r3, [pc, #120]	@ (8016494 <err_tcp+0x194>)
 801641a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801641e:	4920      	ldr	r1, [pc, #128]	@ (80164a0 <err_tcp+0x1a0>)
 8016420:	481e      	ldr	r0, [pc, #120]	@ (801649c <err_tcp+0x19c>)
 8016422:	f00e ff1f 	bl	8025264 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8016426:	7dfb      	ldrb	r3, [r7, #23]
 8016428:	2b04      	cmp	r3, #4
 801642a:	d104      	bne.n	8016436 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 801642c:	69fb      	ldr	r3, [r7, #28]
 801642e:	6a1b      	ldr	r3, [r3, #32]
 8016430:	2200      	movs	r2, #0
 8016432:	711a      	strb	r2, [r3, #4]
 8016434:	e003      	b.n	801643e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8016436:	69fb      	ldr	r3, [r7, #28]
 8016438:	6a1b      	ldr	r3, [r3, #32]
 801643a:	78fa      	ldrb	r2, [r7, #3]
 801643c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801643e:	69fb      	ldr	r3, [r7, #28]
 8016440:	6a1b      	ldr	r3, [r3, #32]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	330c      	adds	r3, #12
 8016446:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8016448:	68b8      	ldr	r0, [r7, #8]
 801644a:	f00d fde7 	bl	802401c <sys_sem_valid>
 801644e:	4603      	mov	r3, r0
 8016450:	2b00      	cmp	r3, #0
 8016452:	d106      	bne.n	8016462 <err_tcp+0x162>
 8016454:	4b0f      	ldr	r3, [pc, #60]	@ (8016494 <err_tcp+0x194>)
 8016456:	f240 12ef 	movw	r2, #495	@ 0x1ef
 801645a:	4912      	ldr	r1, [pc, #72]	@ (80164a4 <err_tcp+0x1a4>)
 801645c:	480f      	ldr	r0, [pc, #60]	@ (801649c <err_tcp+0x19c>)
 801645e:	f00e ff01 	bl	8025264 <iprintf>
      conn->current_msg = NULL;
 8016462:	69fb      	ldr	r3, [r7, #28]
 8016464:	2200      	movs	r2, #0
 8016466:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8016468:	68b8      	ldr	r0, [r7, #8]
 801646a:	f00d fdbd 	bl	8023fe8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 801646e:	e00b      	b.n	8016488 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8016470:	69fb      	ldr	r3, [r7, #28]
 8016472:	6a1b      	ldr	r3, [r3, #32]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d008      	beq.n	801648a <err_tcp+0x18a>
 8016478:	4b06      	ldr	r3, [pc, #24]	@ (8016494 <err_tcp+0x194>)
 801647a:	f240 12f7 	movw	r2, #503	@ 0x1f7
 801647e:	490a      	ldr	r1, [pc, #40]	@ (80164a8 <err_tcp+0x1a8>)
 8016480:	4806      	ldr	r0, [pc, #24]	@ (801649c <err_tcp+0x19c>)
 8016482:	f00e feef 	bl	8025264 <iprintf>
  }
}
 8016486:	e000      	b.n	801648a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8016488:	bf00      	nop
}
 801648a:	bf00      	nop
 801648c:	3720      	adds	r7, #32
 801648e:	46bd      	mov	sp, r7
 8016490:	bd80      	pop	{r7, pc}
 8016492:	bf00      	nop
 8016494:	080297b0 	.word	0x080297b0
 8016498:	08029908 	.word	0x08029908
 801649c:	080297f4 	.word	0x080297f4
 80164a0:	08029918 	.word	0x08029918
 80164a4:	08029934 	.word	0x08029934
 80164a8:	08029950 	.word	0x08029950

080164ac <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b084      	sub	sp, #16
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	685b      	ldr	r3, [r3, #4]
 80164b8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80164ba:	6879      	ldr	r1, [r7, #4]
 80164bc:	68f8      	ldr	r0, [r7, #12]
 80164be:	f005 fd49 	bl	801bf54 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80164c2:	490a      	ldr	r1, [pc, #40]	@ (80164ec <setup_tcp+0x40>)
 80164c4:	68f8      	ldr	r0, [r7, #12]
 80164c6:	f005 fd57 	bl	801bf78 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80164ca:	4909      	ldr	r1, [pc, #36]	@ (80164f0 <setup_tcp+0x44>)
 80164cc:	68f8      	ldr	r0, [r7, #12]
 80164ce:	f005 fd75 	bl	801bfbc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80164d2:	2202      	movs	r2, #2
 80164d4:	4907      	ldr	r1, [pc, #28]	@ (80164f4 <setup_tcp+0x48>)
 80164d6:	68f8      	ldr	r0, [r7, #12]
 80164d8:	f005 fdcc 	bl	801c074 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80164dc:	4906      	ldr	r1, [pc, #24]	@ (80164f8 <setup_tcp+0x4c>)
 80164de:	68f8      	ldr	r0, [r7, #12]
 80164e0:	f005 fd8e 	bl	801c000 <tcp_err>
}
 80164e4:	bf00      	nop
 80164e6:	3710      	adds	r7, #16
 80164e8:	46bd      	mov	sp, r7
 80164ea:	bd80      	pop	{r7, pc}
 80164ec:	08016085 	.word	0x08016085
 80164f0:	08016259 	.word	0x08016259
 80164f4:	08016191 	.word	0x08016191
 80164f8:	08016301 	.word	0x08016301

080164fc <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80164fc:	b590      	push	{r4, r7, lr}
 80164fe:	b085      	sub	sp, #20
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8016504:	2300      	movs	r3, #0
 8016506:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	685b      	ldr	r3, [r3, #4]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d006      	beq.n	8016520 <pcb_new+0x24>
 8016512:	4b2b      	ldr	r3, [pc, #172]	@ (80165c0 <pcb_new+0xc4>)
 8016514:	f240 2265 	movw	r2, #613	@ 0x265
 8016518:	492a      	ldr	r1, [pc, #168]	@ (80165c4 <pcb_new+0xc8>)
 801651a:	482b      	ldr	r0, [pc, #172]	@ (80165c8 <pcb_new+0xcc>)
 801651c:	f00e fea2 	bl	8025264 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	781b      	ldrb	r3, [r3, #0]
 8016526:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801652a:	2b10      	cmp	r3, #16
 801652c:	d022      	beq.n	8016574 <pcb_new+0x78>
 801652e:	2b20      	cmp	r3, #32
 8016530:	d133      	bne.n	801659a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	681c      	ldr	r4, [r3, #0]
 8016536:	7bfb      	ldrb	r3, [r7, #15]
 8016538:	4618      	mov	r0, r3
 801653a:	f00a ffce 	bl	80214da <udp_new_ip_type>
 801653e:	4603      	mov	r3, r0
 8016540:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	685b      	ldr	r3, [r3, #4]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d02a      	beq.n	80165a2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	781b      	ldrb	r3, [r3, #0]
 8016552:	2b22      	cmp	r3, #34	@ 0x22
 8016554:	d104      	bne.n	8016560 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	685b      	ldr	r3, [r3, #4]
 801655c:	2201      	movs	r2, #1
 801655e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	6858      	ldr	r0, [r3, #4]
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	461a      	mov	r2, r3
 801656c:	4917      	ldr	r1, [pc, #92]	@ (80165cc <pcb_new+0xd0>)
 801656e:	f00a ff3b 	bl	80213e8 <udp_recv>
      }
      break;
 8016572:	e016      	b.n	80165a2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	681c      	ldr	r4, [r3, #0]
 8016578:	7bfb      	ldrb	r3, [r7, #15]
 801657a:	4618      	mov	r0, r3
 801657c:	f005 fcdc 	bl	801bf38 <tcp_new_ip_type>
 8016580:	4603      	mov	r3, r0
 8016582:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	685b      	ldr	r3, [r3, #4]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d00b      	beq.n	80165a6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	4618      	mov	r0, r3
 8016594:	f7ff ff8a 	bl	80164ac <setup_tcp>
      }
      break;
 8016598:	e005      	b.n	80165a6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	22fa      	movs	r2, #250	@ 0xfa
 801659e:	711a      	strb	r2, [r3, #4]
      return;
 80165a0:	e00a      	b.n	80165b8 <pcb_new+0xbc>
      break;
 80165a2:	bf00      	nop
 80165a4:	e000      	b.n	80165a8 <pcb_new+0xac>
      break;
 80165a6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	685b      	ldr	r3, [r3, #4]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d102      	bne.n	80165b8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	22ff      	movs	r2, #255	@ 0xff
 80165b6:	711a      	strb	r2, [r3, #4]
  }
}
 80165b8:	3714      	adds	r7, #20
 80165ba:	46bd      	mov	sp, r7
 80165bc:	bd90      	pop	{r4, r7, pc}
 80165be:	bf00      	nop
 80165c0:	080297b0 	.word	0x080297b0
 80165c4:	08029994 	.word	0x08029994
 80165c8:	080297f4 	.word	0x080297f4
 80165cc:	08015f89 	.word	0x08015f89

080165d0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80165d0:	b580      	push	{r7, lr}
 80165d2:	b084      	sub	sp, #16
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	2200      	movs	r2, #0
 80165e0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	685b      	ldr	r3, [r3, #4]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d102      	bne.n	80165f2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80165ec:	68f8      	ldr	r0, [r7, #12]
 80165ee:	f7ff ff85 	bl	80164fc <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80165f2:	bf00      	nop
 80165f4:	3710      	adds	r7, #16
 80165f6:	46bd      	mov	sp, r7
 80165f8:	bd80      	pop	{r7, pc}
	...

080165fc <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	b086      	sub	sp, #24
 8016600:	af00      	add	r7, sp, #0
 8016602:	4603      	mov	r3, r0
 8016604:	6039      	str	r1, [r7, #0]
 8016606:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8016608:	2300      	movs	r3, #0
 801660a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 801660c:	2007      	movs	r0, #7
 801660e:	f002 ff8f 	bl	8019530 <memp_malloc>
 8016612:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d101      	bne.n	801661e <netconn_alloc+0x22>
    return NULL;
 801661a:	2300      	movs	r3, #0
 801661c:	e052      	b.n	80166c4 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	2200      	movs	r2, #0
 8016622:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	79fa      	ldrb	r2, [r7, #7]
 8016628:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	2200      	movs	r2, #0
 801662e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8016630:	79fb      	ldrb	r3, [r7, #7]
 8016632:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016636:	2b10      	cmp	r3, #16
 8016638:	d004      	beq.n	8016644 <netconn_alloc+0x48>
 801663a:	2b20      	cmp	r3, #32
 801663c:	d105      	bne.n	801664a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 801663e:	2306      	movs	r3, #6
 8016640:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8016642:	e00a      	b.n	801665a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8016644:	2306      	movs	r3, #6
 8016646:	617b      	str	r3, [r7, #20]
      break;
 8016648:	e007      	b.n	801665a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 801664a:	4b20      	ldr	r3, [pc, #128]	@ (80166cc <netconn_alloc+0xd0>)
 801664c:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8016650:	491f      	ldr	r1, [pc, #124]	@ (80166d0 <netconn_alloc+0xd4>)
 8016652:	4820      	ldr	r0, [pc, #128]	@ (80166d4 <netconn_alloc+0xd8>)
 8016654:	f00e fe06 	bl	8025264 <iprintf>
      goto free_and_return;
 8016658:	e02f      	b.n	80166ba <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	3310      	adds	r3, #16
 801665e:	6979      	ldr	r1, [r7, #20]
 8016660:	4618      	mov	r0, r3
 8016662:	f00d fba1 	bl	8023da8 <sys_mbox_new>
 8016666:	4603      	mov	r3, r0
 8016668:	2b00      	cmp	r3, #0
 801666a:	d125      	bne.n	80166b8 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	330c      	adds	r3, #12
 8016670:	2100      	movs	r1, #0
 8016672:	4618      	mov	r0, r3
 8016674:	f00d fc5f 	bl	8023f36 <sys_sem_new>
 8016678:	4603      	mov	r3, r0
 801667a:	2b00      	cmp	r3, #0
 801667c:	d005      	beq.n	801668a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	3310      	adds	r3, #16
 8016682:	4618      	mov	r0, r3
 8016684:	f00d fbb2 	bl	8023dec <sys_mbox_free>
    goto free_and_return;
 8016688:	e017      	b.n	80166ba <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	3314      	adds	r3, #20
 801668e:	4618      	mov	r0, r3
 8016690:	f00d fc44 	bl	8023f1c <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	2200      	movs	r2, #0
 8016698:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	f04f 32ff 	mov.w	r2, #4294967295
 80166a0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	683a      	ldr	r2, [r7, #0]
 80166a6:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	2200      	movs	r2, #0
 80166ac:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	7cfa      	ldrb	r2, [r7, #19]
 80166b2:	771a      	strb	r2, [r3, #28]
  return conn;
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	e005      	b.n	80166c4 <netconn_alloc+0xc8>
    goto free_and_return;
 80166b8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80166ba:	68f9      	ldr	r1, [r7, #12]
 80166bc:	2007      	movs	r0, #7
 80166be:	f002 ffad 	bl	801961c <memp_free>
  return NULL;
 80166c2:	2300      	movs	r3, #0
}
 80166c4:	4618      	mov	r0, r3
 80166c6:	3718      	adds	r7, #24
 80166c8:	46bd      	mov	sp, r7
 80166ca:	bd80      	pop	{r7, pc}
 80166cc:	080297b0 	.word	0x080297b0
 80166d0:	080299b4 	.word	0x080299b4
 80166d4:	080297f4 	.word	0x080297f4

080166d8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80166d8:	b580      	push	{r7, lr}
 80166da:	b082      	sub	sp, #8
 80166dc:	af00      	add	r7, sp, #0
 80166de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	685b      	ldr	r3, [r3, #4]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d006      	beq.n	80166f6 <netconn_free+0x1e>
 80166e8:	4b1b      	ldr	r3, [pc, #108]	@ (8016758 <netconn_free+0x80>)
 80166ea:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80166ee:	491b      	ldr	r1, [pc, #108]	@ (801675c <netconn_free+0x84>)
 80166f0:	481b      	ldr	r0, [pc, #108]	@ (8016760 <netconn_free+0x88>)
 80166f2:	f00e fdb7 	bl	8025264 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	3310      	adds	r3, #16
 80166fa:	4618      	mov	r0, r3
 80166fc:	f00d fbfd 	bl	8023efa <sys_mbox_valid>
 8016700:	4603      	mov	r3, r0
 8016702:	2b00      	cmp	r3, #0
 8016704:	d006      	beq.n	8016714 <netconn_free+0x3c>
 8016706:	4b14      	ldr	r3, [pc, #80]	@ (8016758 <netconn_free+0x80>)
 8016708:	f240 3223 	movw	r2, #803	@ 0x323
 801670c:	4915      	ldr	r1, [pc, #84]	@ (8016764 <netconn_free+0x8c>)
 801670e:	4814      	ldr	r0, [pc, #80]	@ (8016760 <netconn_free+0x88>)
 8016710:	f00e fda8 	bl	8025264 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	3314      	adds	r3, #20
 8016718:	4618      	mov	r0, r3
 801671a:	f00d fbee 	bl	8023efa <sys_mbox_valid>
 801671e:	4603      	mov	r3, r0
 8016720:	2b00      	cmp	r3, #0
 8016722:	d006      	beq.n	8016732 <netconn_free+0x5a>
 8016724:	4b0c      	ldr	r3, [pc, #48]	@ (8016758 <netconn_free+0x80>)
 8016726:	f240 3226 	movw	r2, #806	@ 0x326
 801672a:	490f      	ldr	r1, [pc, #60]	@ (8016768 <netconn_free+0x90>)
 801672c:	480c      	ldr	r0, [pc, #48]	@ (8016760 <netconn_free+0x88>)
 801672e:	f00e fd99 	bl	8025264 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	330c      	adds	r3, #12
 8016736:	4618      	mov	r0, r3
 8016738:	f00d fc63 	bl	8024002 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	330c      	adds	r3, #12
 8016740:	4618      	mov	r0, r3
 8016742:	f00d fc7c 	bl	802403e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8016746:	6879      	ldr	r1, [r7, #4]
 8016748:	2007      	movs	r0, #7
 801674a:	f002 ff67 	bl	801961c <memp_free>
}
 801674e:	bf00      	nop
 8016750:	3708      	adds	r7, #8
 8016752:	46bd      	mov	sp, r7
 8016754:	bd80      	pop	{r7, pc}
 8016756:	bf00      	nop
 8016758:	080297b0 	.word	0x080297b0
 801675c:	080299dc 	.word	0x080299dc
 8016760:	080297f4 	.word	0x080297f4
 8016764:	08029a0c 	.word	0x08029a0c
 8016768:	08029a48 	.word	0x08029a48

0801676c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 801676c:	b580      	push	{r7, lr}
 801676e:	b086      	sub	sp, #24
 8016770:	af00      	add	r7, sp, #0
 8016772:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	3310      	adds	r3, #16
 8016778:	4618      	mov	r0, r3
 801677a:	f00d fbbe 	bl	8023efa <sys_mbox_valid>
 801677e:	4603      	mov	r3, r0
 8016780:	2b00      	cmp	r3, #0
 8016782:	d02f      	beq.n	80167e4 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8016784:	e018      	b.n	80167b8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	781b      	ldrb	r3, [r3, #0]
 801678a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801678e:	2b10      	cmp	r3, #16
 8016790:	d10e      	bne.n	80167b0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8016792:	693b      	ldr	r3, [r7, #16]
 8016794:	f107 020f 	add.w	r2, r7, #15
 8016798:	4611      	mov	r1, r2
 801679a:	4618      	mov	r0, r3
 801679c:	f7ff fbba 	bl	8015f14 <lwip_netconn_is_err_msg>
 80167a0:	4603      	mov	r3, r0
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d108      	bne.n	80167b8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80167a6:	693b      	ldr	r3, [r7, #16]
 80167a8:	4618      	mov	r0, r3
 80167aa:	f003 fe0d 	bl	801a3c8 <pbuf_free>
 80167ae:	e003      	b.n	80167b8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80167b0:	693b      	ldr	r3, [r7, #16]
 80167b2:	4618      	mov	r0, r3
 80167b4:	f000 feea 	bl	801758c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	3310      	adds	r3, #16
 80167bc:	f107 0210 	add.w	r2, r7, #16
 80167c0:	4611      	mov	r1, r2
 80167c2:	4618      	mov	r0, r3
 80167c4:	f00d fb7d 	bl	8023ec2 <sys_arch_mbox_tryfetch>
 80167c8:	4603      	mov	r3, r0
 80167ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167ce:	d1da      	bne.n	8016786 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	3310      	adds	r3, #16
 80167d4:	4618      	mov	r0, r3
 80167d6:	f00d fb09 	bl	8023dec <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	3310      	adds	r3, #16
 80167de:	4618      	mov	r0, r3
 80167e0:	f00d fb9c 	bl	8023f1c <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	3314      	adds	r3, #20
 80167e8:	4618      	mov	r0, r3
 80167ea:	f00d fb86 	bl	8023efa <sys_mbox_valid>
 80167ee:	4603      	mov	r3, r0
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d034      	beq.n	801685e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80167f4:	e01d      	b.n	8016832 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80167f6:	693b      	ldr	r3, [r7, #16]
 80167f8:	f107 020e 	add.w	r2, r7, #14
 80167fc:	4611      	mov	r1, r2
 80167fe:	4618      	mov	r0, r3
 8016800:	f7ff fb88 	bl	8015f14 <lwip_netconn_is_err_msg>
 8016804:	4603      	mov	r3, r0
 8016806:	2b00      	cmp	r3, #0
 8016808:	d113      	bne.n	8016832 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 801680a:	693b      	ldr	r3, [r7, #16]
 801680c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 801680e:	6978      	ldr	r0, [r7, #20]
 8016810:	f7ff ffac 	bl	801676c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8016814:	697b      	ldr	r3, [r7, #20]
 8016816:	685b      	ldr	r3, [r3, #4]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d007      	beq.n	801682c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 801681c:	697b      	ldr	r3, [r7, #20]
 801681e:	685b      	ldr	r3, [r3, #4]
 8016820:	4618      	mov	r0, r3
 8016822:	f004 fbd1 	bl	801afc8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8016826:	697b      	ldr	r3, [r7, #20]
 8016828:	2200      	movs	r2, #0
 801682a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 801682c:	6978      	ldr	r0, [r7, #20]
 801682e:	f7ff ff53 	bl	80166d8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	3314      	adds	r3, #20
 8016836:	f107 0210 	add.w	r2, r7, #16
 801683a:	4611      	mov	r1, r2
 801683c:	4618      	mov	r0, r3
 801683e:	f00d fb40 	bl	8023ec2 <sys_arch_mbox_tryfetch>
 8016842:	4603      	mov	r3, r0
 8016844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016848:	d1d5      	bne.n	80167f6 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	3314      	adds	r3, #20
 801684e:	4618      	mov	r0, r3
 8016850:	f00d facc 	bl	8023dec <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	3314      	adds	r3, #20
 8016858:	4618      	mov	r0, r3
 801685a:	f00d fb5f 	bl	8023f1c <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 801685e:	bf00      	nop
 8016860:	3718      	adds	r7, #24
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}
	...

08016868 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b086      	sub	sp, #24
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
 8016870:	460b      	mov	r3, r1
 8016872:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8016874:	2300      	movs	r3, #0
 8016876:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d106      	bne.n	801688c <lwip_netconn_do_close_internal+0x24>
 801687e:	4b87      	ldr	r3, [pc, #540]	@ (8016a9c <lwip_netconn_do_close_internal+0x234>)
 8016880:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8016884:	4986      	ldr	r1, [pc, #536]	@ (8016aa0 <lwip_netconn_do_close_internal+0x238>)
 8016886:	4887      	ldr	r0, [pc, #540]	@ (8016aa4 <lwip_netconn_do_close_internal+0x23c>)
 8016888:	f00e fcec 	bl	8025264 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	781b      	ldrb	r3, [r3, #0]
 8016890:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016894:	2b10      	cmp	r3, #16
 8016896:	d006      	beq.n	80168a6 <lwip_netconn_do_close_internal+0x3e>
 8016898:	4b80      	ldr	r3, [pc, #512]	@ (8016a9c <lwip_netconn_do_close_internal+0x234>)
 801689a:	f240 32a3 	movw	r2, #931	@ 0x3a3
 801689e:	4982      	ldr	r1, [pc, #520]	@ (8016aa8 <lwip_netconn_do_close_internal+0x240>)
 80168a0:	4880      	ldr	r0, [pc, #512]	@ (8016aa4 <lwip_netconn_do_close_internal+0x23c>)
 80168a2:	f00e fcdf 	bl	8025264 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	785b      	ldrb	r3, [r3, #1]
 80168aa:	2b04      	cmp	r3, #4
 80168ac:	d006      	beq.n	80168bc <lwip_netconn_do_close_internal+0x54>
 80168ae:	4b7b      	ldr	r3, [pc, #492]	@ (8016a9c <lwip_netconn_do_close_internal+0x234>)
 80168b0:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 80168b4:	497d      	ldr	r1, [pc, #500]	@ (8016aac <lwip_netconn_do_close_internal+0x244>)
 80168b6:	487b      	ldr	r0, [pc, #492]	@ (8016aa4 <lwip_netconn_do_close_internal+0x23c>)
 80168b8:	f00e fcd4 	bl	8025264 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	685b      	ldr	r3, [r3, #4]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d106      	bne.n	80168d2 <lwip_netconn_do_close_internal+0x6a>
 80168c4:	4b75      	ldr	r3, [pc, #468]	@ (8016a9c <lwip_netconn_do_close_internal+0x234>)
 80168c6:	f240 32a5 	movw	r2, #933	@ 0x3a5
 80168ca:	4979      	ldr	r1, [pc, #484]	@ (8016ab0 <lwip_netconn_do_close_internal+0x248>)
 80168cc:	4875      	ldr	r0, [pc, #468]	@ (8016aa4 <lwip_netconn_do_close_internal+0x23c>)
 80168ce:	f00e fcc9 	bl	8025264 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	6a1b      	ldr	r3, [r3, #32]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d106      	bne.n	80168e8 <lwip_netconn_do_close_internal+0x80>
 80168da:	4b70      	ldr	r3, [pc, #448]	@ (8016a9c <lwip_netconn_do_close_internal+0x234>)
 80168dc:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80168e0:	4974      	ldr	r1, [pc, #464]	@ (8016ab4 <lwip_netconn_do_close_internal+0x24c>)
 80168e2:	4870      	ldr	r0, [pc, #448]	@ (8016aa4 <lwip_netconn_do_close_internal+0x23c>)
 80168e4:	f00e fcbe 	bl	8025264 <iprintf>

  tpcb = conn->pcb.tcp;
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	685b      	ldr	r3, [r3, #4]
 80168ec:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	6a1b      	ldr	r3, [r3, #32]
 80168f2:	7a1b      	ldrb	r3, [r3, #8]
 80168f4:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80168f6:	7bfb      	ldrb	r3, [r7, #15]
 80168f8:	f003 0301 	and.w	r3, r3, #1
 80168fc:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80168fe:	7bfb      	ldrb	r3, [r7, #15]
 8016900:	f003 0302 	and.w	r3, r3, #2
 8016904:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8016906:	7bfb      	ldrb	r3, [r7, #15]
 8016908:	2b03      	cmp	r3, #3
 801690a:	d102      	bne.n	8016912 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 801690c:	2301      	movs	r3, #1
 801690e:	75bb      	strb	r3, [r7, #22]
 8016910:	e01f      	b.n	8016952 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8016912:	7bbb      	ldrb	r3, [r7, #14]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d00e      	beq.n	8016936 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8016918:	693b      	ldr	r3, [r7, #16]
 801691a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 801691c:	2b05      	cmp	r3, #5
 801691e:	d007      	beq.n	8016930 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8016920:	693b      	ldr	r3, [r7, #16]
 8016922:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8016924:	2b06      	cmp	r3, #6
 8016926:	d003      	beq.n	8016930 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8016928:	693b      	ldr	r3, [r7, #16]
 801692a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 801692c:	2b08      	cmp	r3, #8
 801692e:	d102      	bne.n	8016936 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8016930:	2301      	movs	r3, #1
 8016932:	75bb      	strb	r3, [r7, #22]
 8016934:	e00d      	b.n	8016952 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8016936:	7b7b      	ldrb	r3, [r7, #13]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d008      	beq.n	801694e <lwip_netconn_do_close_internal+0xe6>
 801693c:	693b      	ldr	r3, [r7, #16]
 801693e:	8b5b      	ldrh	r3, [r3, #26]
 8016940:	f003 0310 	and.w	r3, r3, #16
 8016944:	2b00      	cmp	r3, #0
 8016946:	d002      	beq.n	801694e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8016948:	2301      	movs	r3, #1
 801694a:	75bb      	strb	r3, [r7, #22]
 801694c:	e001      	b.n	8016952 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 801694e:	2300      	movs	r3, #0
 8016950:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8016952:	7dbb      	ldrb	r3, [r7, #22]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d003      	beq.n	8016960 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8016958:	2100      	movs	r1, #0
 801695a:	6938      	ldr	r0, [r7, #16]
 801695c:	f005 fafa 	bl	801bf54 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8016960:	693b      	ldr	r3, [r7, #16]
 8016962:	7d1b      	ldrb	r3, [r3, #20]
 8016964:	2b01      	cmp	r3, #1
 8016966:	d104      	bne.n	8016972 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8016968:	2100      	movs	r1, #0
 801696a:	6938      	ldr	r0, [r7, #16]
 801696c:	f005 fb6a 	bl	801c044 <tcp_accept>
 8016970:	e01d      	b.n	80169ae <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8016972:	7bbb      	ldrb	r3, [r7, #14]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d007      	beq.n	8016988 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8016978:	2100      	movs	r1, #0
 801697a:	6938      	ldr	r0, [r7, #16]
 801697c:	f005 fafc 	bl	801bf78 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8016980:	2100      	movs	r1, #0
 8016982:	6938      	ldr	r0, [r7, #16]
 8016984:	f005 fb5e 	bl	801c044 <tcp_accept>
    }
    if (shut_tx) {
 8016988:	7b7b      	ldrb	r3, [r7, #13]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d003      	beq.n	8016996 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 801698e:	2100      	movs	r1, #0
 8016990:	6938      	ldr	r0, [r7, #16]
 8016992:	f005 fb13 	bl	801bfbc <tcp_sent>
    }
    if (shut_close) {
 8016996:	7dbb      	ldrb	r3, [r7, #22]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d008      	beq.n	80169ae <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 801699c:	2200      	movs	r2, #0
 801699e:	2100      	movs	r1, #0
 80169a0:	6938      	ldr	r0, [r7, #16]
 80169a2:	f005 fb67 	bl	801c074 <tcp_poll>
      tcp_err(tpcb, NULL);
 80169a6:	2100      	movs	r1, #0
 80169a8:	6938      	ldr	r0, [r7, #16]
 80169aa:	f005 fb29 	bl	801c000 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80169ae:	7dbb      	ldrb	r3, [r7, #22]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d005      	beq.n	80169c0 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80169b4:	6938      	ldr	r0, [r7, #16]
 80169b6:	f004 f9c1 	bl	801ad3c <tcp_close>
 80169ba:	4603      	mov	r3, r0
 80169bc:	75fb      	strb	r3, [r7, #23]
 80169be:	e007      	b.n	80169d0 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80169c0:	7bbb      	ldrb	r3, [r7, #14]
 80169c2:	7b7a      	ldrb	r2, [r7, #13]
 80169c4:	4619      	mov	r1, r3
 80169c6:	6938      	ldr	r0, [r7, #16]
 80169c8:	f004 f9e4 	bl	801ad94 <tcp_shutdown>
 80169cc:	4603      	mov	r3, r0
 80169ce:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80169d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d102      	bne.n	80169de <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80169d8:	2301      	movs	r3, #1
 80169da:	757b      	strb	r3, [r7, #21]
 80169dc:	e016      	b.n	8016a0c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80169de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80169e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169e6:	d10f      	bne.n	8016a08 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	6a1b      	ldr	r3, [r3, #32]
 80169ec:	7a5b      	ldrb	r3, [r3, #9]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d10c      	bne.n	8016a0c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80169f2:	2301      	movs	r3, #1
 80169f4:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80169f6:	7dbb      	ldrb	r3, [r7, #22]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d007      	beq.n	8016a0c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80169fc:	6938      	ldr	r0, [r7, #16]
 80169fe:	f004 fae3 	bl	801afc8 <tcp_abort>
          err = ERR_OK;
 8016a02:	2300      	movs	r3, #0
 8016a04:	75fb      	strb	r3, [r7, #23]
 8016a06:	e001      	b.n	8016a0c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8016a08:	2301      	movs	r3, #1
 8016a0a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8016a0c:	7d7b      	ldrb	r3, [r7, #21]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d052      	beq.n	8016ab8 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	6a1b      	ldr	r3, [r3, #32]
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	330c      	adds	r3, #12
 8016a1a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	6a1b      	ldr	r3, [r3, #32]
 8016a20:	7dfa      	ldrb	r2, [r7, #23]
 8016a22:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	2200      	movs	r2, #0
 8016a28:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8016a30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d129      	bne.n	8016a8c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8016a38:	7dbb      	ldrb	r3, [r7, #22]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d00c      	beq.n	8016a58 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	2200      	movs	r2, #0
 8016a42:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d005      	beq.n	8016a58 <lwip_netconn_do_close_internal+0x1f0>
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a50:	2200      	movs	r2, #0
 8016a52:	2104      	movs	r1, #4
 8016a54:	6878      	ldr	r0, [r7, #4]
 8016a56:	4798      	blx	r3
      }
      if (shut_rx) {
 8016a58:	7bbb      	ldrb	r3, [r7, #14]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d009      	beq.n	8016a72 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d005      	beq.n	8016a72 <lwip_netconn_do_close_internal+0x20a>
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a6a:	2200      	movs	r2, #0
 8016a6c:	2100      	movs	r1, #0
 8016a6e:	6878      	ldr	r0, [r7, #4]
 8016a70:	4798      	blx	r3
      }
      if (shut_tx) {
 8016a72:	7b7b      	ldrb	r3, [r7, #13]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d009      	beq.n	8016a8c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d005      	beq.n	8016a8c <lwip_netconn_do_close_internal+0x224>
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a84:	2200      	movs	r2, #0
 8016a86:	2102      	movs	r1, #2
 8016a88:	6878      	ldr	r0, [r7, #4]
 8016a8a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8016a8c:	78fb      	ldrb	r3, [r7, #3]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d002      	beq.n	8016a98 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8016a92:	68b8      	ldr	r0, [r7, #8]
 8016a94:	f00d faa8 	bl	8023fe8 <sys_sem_signal>
    }
    return ERR_OK;
 8016a98:	2300      	movs	r3, #0
 8016a9a:	e03c      	b.n	8016b16 <lwip_netconn_do_close_internal+0x2ae>
 8016a9c:	080297b0 	.word	0x080297b0
 8016aa0:	08029a84 	.word	0x08029a84
 8016aa4:	080297f4 	.word	0x080297f4
 8016aa8:	08029a94 	.word	0x08029a94
 8016aac:	08029ab4 	.word	0x08029ab4
 8016ab0:	08029ad8 	.word	0x08029ad8
 8016ab4:	08029918 	.word	0x08029918
  }
  if (!close_finished) {
 8016ab8:	7d7b      	ldrb	r3, [r7, #21]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d11e      	bne.n	8016afc <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8016abe:	693b      	ldr	r3, [r7, #16]
 8016ac0:	7d1b      	ldrb	r3, [r3, #20]
 8016ac2:	2b01      	cmp	r3, #1
 8016ac4:	d106      	bne.n	8016ad4 <lwip_netconn_do_close_internal+0x26c>
 8016ac6:	4b16      	ldr	r3, [pc, #88]	@ (8016b20 <lwip_netconn_do_close_internal+0x2b8>)
 8016ac8:	f240 4241 	movw	r2, #1089	@ 0x441
 8016acc:	4915      	ldr	r1, [pc, #84]	@ (8016b24 <lwip_netconn_do_close_internal+0x2bc>)
 8016ace:	4816      	ldr	r0, [pc, #88]	@ (8016b28 <lwip_netconn_do_close_internal+0x2c0>)
 8016ad0:	f00e fbc8 	bl	8025264 <iprintf>
    if (shut_tx) {
 8016ad4:	7b7b      	ldrb	r3, [r7, #13]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d003      	beq.n	8016ae2 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8016ada:	4914      	ldr	r1, [pc, #80]	@ (8016b2c <lwip_netconn_do_close_internal+0x2c4>)
 8016adc:	6938      	ldr	r0, [r7, #16]
 8016ade:	f005 fa6d 	bl	801bfbc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8016ae2:	2201      	movs	r2, #1
 8016ae4:	4912      	ldr	r1, [pc, #72]	@ (8016b30 <lwip_netconn_do_close_internal+0x2c8>)
 8016ae6:	6938      	ldr	r0, [r7, #16]
 8016ae8:	f005 fac4 	bl	801c074 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8016aec:	4911      	ldr	r1, [pc, #68]	@ (8016b34 <lwip_netconn_do_close_internal+0x2cc>)
 8016aee:	6938      	ldr	r0, [r7, #16]
 8016af0:	f005 fa86 	bl	801c000 <tcp_err>
    tcp_arg(tpcb, conn);
 8016af4:	6879      	ldr	r1, [r7, #4]
 8016af6:	6938      	ldr	r0, [r7, #16]
 8016af8:	f005 fa2c 	bl	801bf54 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8016afc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d106      	bne.n	8016b12 <lwip_netconn_do_close_internal+0x2aa>
 8016b04:	4b06      	ldr	r3, [pc, #24]	@ (8016b20 <lwip_netconn_do_close_internal+0x2b8>)
 8016b06:	f240 424d 	movw	r2, #1101	@ 0x44d
 8016b0a:	490b      	ldr	r1, [pc, #44]	@ (8016b38 <lwip_netconn_do_close_internal+0x2d0>)
 8016b0c:	4806      	ldr	r0, [pc, #24]	@ (8016b28 <lwip_netconn_do_close_internal+0x2c0>)
 8016b0e:	f00e fba9 	bl	8025264 <iprintf>
  return err;
 8016b12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016b16:	4618      	mov	r0, r3
 8016b18:	3718      	adds	r7, #24
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bd80      	pop	{r7, pc}
 8016b1e:	bf00      	nop
 8016b20:	080297b0 	.word	0x080297b0
 8016b24:	08029aec 	.word	0x08029aec
 8016b28:	080297f4 	.word	0x080297f4
 8016b2c:	08016259 	.word	0x08016259
 8016b30:	08016191 	.word	0x08016191
 8016b34:	08016301 	.word	0x08016301
 8016b38:	08029b10 	.word	0x08029b10

08016b3c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b084      	sub	sp, #16
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	785b      	ldrb	r3, [r3, #1]
 8016b4e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8016b50:	7afb      	ldrb	r3, [r7, #11]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d00d      	beq.n	8016b72 <lwip_netconn_do_delconn+0x36>
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	781b      	ldrb	r3, [r3, #0]
 8016b5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016b60:	2b10      	cmp	r3, #16
 8016b62:	d006      	beq.n	8016b72 <lwip_netconn_do_delconn+0x36>
 8016b64:	4b60      	ldr	r3, [pc, #384]	@ (8016ce8 <lwip_netconn_do_delconn+0x1ac>)
 8016b66:	f240 425e 	movw	r2, #1118	@ 0x45e
 8016b6a:	4960      	ldr	r1, [pc, #384]	@ (8016cec <lwip_netconn_do_delconn+0x1b0>)
 8016b6c:	4860      	ldr	r0, [pc, #384]	@ (8016cf0 <lwip_netconn_do_delconn+0x1b4>)
 8016b6e:	f00e fb79 	bl	8025264 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8016b72:	7afb      	ldrb	r3, [r7, #11]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d005      	beq.n	8016b84 <lwip_netconn_do_delconn+0x48>
 8016b78:	7afb      	ldrb	r3, [r7, #11]
 8016b7a:	2b02      	cmp	r3, #2
 8016b7c:	d002      	beq.n	8016b84 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8016b7e:	7afb      	ldrb	r3, [r7, #11]
 8016b80:	2b03      	cmp	r3, #3
 8016b82:	d109      	bne.n	8016b98 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8016b84:	7afb      	ldrb	r3, [r7, #11]
 8016b86:	2b03      	cmp	r3, #3
 8016b88:	d10a      	bne.n	8016ba0 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	7f1b      	ldrb	r3, [r3, #28]
 8016b90:	f003 0304 	and.w	r3, r3, #4
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d103      	bne.n	8016ba0 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	22fb      	movs	r2, #251	@ 0xfb
 8016b9c:	711a      	strb	r2, [r3, #4]
 8016b9e:	e097      	b.n	8016cd0 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8016ba0:	7afb      	ldrb	r3, [r7, #11]
 8016ba2:	2b03      	cmp	r3, #3
 8016ba4:	d10d      	bne.n	8016bc2 <lwip_netconn_do_delconn+0x86>
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	7f1b      	ldrb	r3, [r3, #28]
 8016bac:	f003 0304 	and.w	r3, r3, #4
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d106      	bne.n	8016bc2 <lwip_netconn_do_delconn+0x86>
 8016bb4:	4b4c      	ldr	r3, [pc, #304]	@ (8016ce8 <lwip_netconn_do_delconn+0x1ac>)
 8016bb6:	f240 427a 	movw	r2, #1146	@ 0x47a
 8016bba:	494e      	ldr	r1, [pc, #312]	@ (8016cf4 <lwip_netconn_do_delconn+0x1b8>)
 8016bbc:	484c      	ldr	r0, [pc, #304]	@ (8016cf0 <lwip_netconn_do_delconn+0x1b4>)
 8016bbe:	f00e fb51 	bl	8025264 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	4618      	mov	r0, r3
 8016bce:	f7ff fdcd 	bl	801676c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	685b      	ldr	r3, [r3, #4]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d05f      	beq.n	8016c9c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	781b      	ldrb	r3, [r3, #0]
 8016be2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016be6:	2b10      	cmp	r3, #16
 8016be8:	d00d      	beq.n	8016c06 <lwip_netconn_do_delconn+0xca>
 8016bea:	2b20      	cmp	r3, #32
 8016bec:	d151      	bne.n	8016c92 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	685b      	ldr	r3, [r3, #4]
 8016bf4:	2200      	movs	r2, #0
 8016bf6:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	685b      	ldr	r3, [r3, #4]
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f00a fc12 	bl	8021428 <udp_remove>
          break;
 8016c04:	e046      	b.n	8016c94 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	6a1b      	ldr	r3, [r3, #32]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d006      	beq.n	8016c1e <lwip_netconn_do_delconn+0xe2>
 8016c10:	4b35      	ldr	r3, [pc, #212]	@ (8016ce8 <lwip_netconn_do_delconn+0x1ac>)
 8016c12:	f240 4294 	movw	r2, #1172	@ 0x494
 8016c16:	4938      	ldr	r1, [pc, #224]	@ (8016cf8 <lwip_netconn_do_delconn+0x1bc>)
 8016c18:	4835      	ldr	r0, [pc, #212]	@ (8016cf0 <lwip_netconn_do_delconn+0x1b4>)
 8016c1a:	f00e fb23 	bl	8025264 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	2204      	movs	r2, #4
 8016c24:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	2203      	movs	r2, #3
 8016c2a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	68fa      	ldr	r2, [r7, #12]
 8016c32:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	2100      	movs	r1, #0
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	f7ff fe14 	bl	8016868 <lwip_netconn_do_close_internal>
 8016c40:	4603      	mov	r3, r0
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d04b      	beq.n	8016cde <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	785b      	ldrb	r3, [r3, #1]
 8016c4c:	2b04      	cmp	r3, #4
 8016c4e:	d006      	beq.n	8016c5e <lwip_netconn_do_delconn+0x122>
 8016c50:	4b25      	ldr	r3, [pc, #148]	@ (8016ce8 <lwip_netconn_do_delconn+0x1ac>)
 8016c52:	f240 429a 	movw	r2, #1178	@ 0x49a
 8016c56:	4929      	ldr	r1, [pc, #164]	@ (8016cfc <lwip_netconn_do_delconn+0x1c0>)
 8016c58:	4825      	ldr	r0, [pc, #148]	@ (8016cf0 <lwip_netconn_do_delconn+0x1b4>)
 8016c5a:	f00e fb03 	bl	8025264 <iprintf>
            UNLOCK_TCPIP_CORE();
 8016c5e:	4828      	ldr	r0, [pc, #160]	@ (8016d00 <lwip_netconn_do_delconn+0x1c4>)
 8016c60:	f00d fa33 	bl	80240ca <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	330c      	adds	r3, #12
 8016c6a:	2100      	movs	r1, #0
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	f00d f98a 	bl	8023f86 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8016c72:	4823      	ldr	r0, [pc, #140]	@ (8016d00 <lwip_netconn_do_delconn+0x1c4>)
 8016c74:	f00d fa1a 	bl	80240ac <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	785b      	ldrb	r3, [r3, #1]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d02d      	beq.n	8016cde <lwip_netconn_do_delconn+0x1a2>
 8016c82:	4b19      	ldr	r3, [pc, #100]	@ (8016ce8 <lwip_netconn_do_delconn+0x1ac>)
 8016c84:	f240 429e 	movw	r2, #1182	@ 0x49e
 8016c88:	491c      	ldr	r1, [pc, #112]	@ (8016cfc <lwip_netconn_do_delconn+0x1c0>)
 8016c8a:	4819      	ldr	r0, [pc, #100]	@ (8016cf0 <lwip_netconn_do_delconn+0x1b4>)
 8016c8c:	f00e faea 	bl	8025264 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8016c90:	e025      	b.n	8016cde <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8016c92:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	2200      	movs	r2, #0
 8016c9a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d007      	beq.n	8016cb6 <lwip_netconn_do_delconn+0x17a>
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016cac:	68fa      	ldr	r2, [r7, #12]
 8016cae:	6810      	ldr	r0, [r2, #0]
 8016cb0:	2200      	movs	r2, #0
 8016cb2:	2100      	movs	r1, #0
 8016cb4:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d007      	beq.n	8016cd0 <lwip_netconn_do_delconn+0x194>
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016cc6:	68fa      	ldr	r2, [r7, #12]
 8016cc8:	6810      	ldr	r0, [r2, #0]
 8016cca:	2200      	movs	r2, #0
 8016ccc:	2102      	movs	r1, #2
 8016cce:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	330c      	adds	r3, #12
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	f00d f9a0 	bl	802401c <sys_sem_valid>
 8016cdc:	e000      	b.n	8016ce0 <lwip_netconn_do_delconn+0x1a4>
          return;
 8016cde:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8016ce0:	3710      	adds	r7, #16
 8016ce2:	46bd      	mov	sp, r7
 8016ce4:	bd80      	pop	{r7, pc}
 8016ce6:	bf00      	nop
 8016ce8:	080297b0 	.word	0x080297b0
 8016cec:	08029b20 	.word	0x08029b20
 8016cf0:	080297f4 	.word	0x080297f4
 8016cf4:	08029b34 	.word	0x08029b34
 8016cf8:	08029b54 	.word	0x08029b54
 8016cfc:	08029b70 	.word	0x08029b70
 8016d00:	24008d48 	.word	0x24008d48

08016d04 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b084      	sub	sp, #16
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8016d10:	68bb      	ldr	r3, [r7, #8]
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	685b      	ldr	r3, [r3, #4]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d025      	beq.n	8016d66 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016d1a:	68bb      	ldr	r3, [r7, #8]
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	781b      	ldrb	r3, [r3, #0]
 8016d20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016d24:	2b10      	cmp	r3, #16
 8016d26:	d00e      	beq.n	8016d46 <lwip_netconn_do_bind+0x42>
 8016d28:	2b20      	cmp	r3, #32
 8016d2a:	d119      	bne.n	8016d60 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8016d2c:	68bb      	ldr	r3, [r7, #8]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	6858      	ldr	r0, [r3, #4]
 8016d32:	68bb      	ldr	r3, [r7, #8]
 8016d34:	6899      	ldr	r1, [r3, #8]
 8016d36:	68bb      	ldr	r3, [r7, #8]
 8016d38:	899b      	ldrh	r3, [r3, #12]
 8016d3a:	461a      	mov	r2, r3
 8016d3c:	f00a facc 	bl	80212d8 <udp_bind>
 8016d40:	4603      	mov	r3, r0
 8016d42:	73fb      	strb	r3, [r7, #15]
        break;
 8016d44:	e011      	b.n	8016d6a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8016d46:	68bb      	ldr	r3, [r7, #8]
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	6858      	ldr	r0, [r3, #4]
 8016d4c:	68bb      	ldr	r3, [r7, #8]
 8016d4e:	6899      	ldr	r1, [r3, #8]
 8016d50:	68bb      	ldr	r3, [r7, #8]
 8016d52:	899b      	ldrh	r3, [r3, #12]
 8016d54:	461a      	mov	r2, r3
 8016d56:	f004 f943 	bl	801afe0 <tcp_bind>
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	73fb      	strb	r3, [r7, #15]
        break;
 8016d5e:	e004      	b.n	8016d6a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8016d60:	23fa      	movs	r3, #250	@ 0xfa
 8016d62:	73fb      	strb	r3, [r7, #15]
        break;
 8016d64:	e001      	b.n	8016d6a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8016d66:	23fa      	movs	r3, #250	@ 0xfa
 8016d68:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8016d6a:	68bb      	ldr	r3, [r7, #8]
 8016d6c:	7bfa      	ldrb	r2, [r7, #15]
 8016d6e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8016d70:	bf00      	nop
 8016d72:	3710      	adds	r7, #16
 8016d74:	46bd      	mov	sp, r7
 8016d76:	bd80      	pop	{r7, pc}

08016d78 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b084      	sub	sp, #16
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8016d84:	68bb      	ldr	r3, [r7, #8]
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	4618      	mov	r0, r3
 8016d8a:	f7ff f871 	bl	8015e70 <netconn_err>
 8016d8e:	4603      	mov	r3, r0
 8016d90:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8016d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d134      	bne.n	8016e04 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8016d9a:	68bb      	ldr	r3, [r7, #8]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	685b      	ldr	r3, [r3, #4]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d02d      	beq.n	8016e00 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016da4:	68bb      	ldr	r3, [r7, #8]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	781b      	ldrb	r3, [r3, #0]
 8016daa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016dae:	2b20      	cmp	r3, #32
 8016db0:	d123      	bne.n	8016dfa <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8016db2:	68bb      	ldr	r3, [r7, #8]
 8016db4:	689b      	ldr	r3, [r3, #8]
 8016db6:	689b      	ldr	r3, [r3, #8]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d10c      	bne.n	8016dd6 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8016dbc:	68bb      	ldr	r3, [r7, #8]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	685a      	ldr	r2, [r3, #4]
 8016dc2:	68bb      	ldr	r3, [r7, #8]
 8016dc4:	689b      	ldr	r3, [r3, #8]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	4619      	mov	r1, r3
 8016dca:	4610      	mov	r0, r2
 8016dcc:	f00a f89a 	bl	8020f04 <udp_send>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8016dd4:	e016      	b.n	8016e04 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8016dd6:	68bb      	ldr	r3, [r7, #8]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	6858      	ldr	r0, [r3, #4]
 8016ddc:	68bb      	ldr	r3, [r7, #8]
 8016dde:	689b      	ldr	r3, [r3, #8]
 8016de0:	6819      	ldr	r1, [r3, #0]
 8016de2:	68bb      	ldr	r3, [r7, #8]
 8016de4:	689b      	ldr	r3, [r3, #8]
 8016de6:	f103 0208 	add.w	r2, r3, #8
 8016dea:	68bb      	ldr	r3, [r7, #8]
 8016dec:	689b      	ldr	r3, [r3, #8]
 8016dee:	899b      	ldrh	r3, [r3, #12]
 8016df0:	f00a f8bc 	bl	8020f6c <udp_sendto>
 8016df4:	4603      	mov	r3, r0
 8016df6:	73fb      	strb	r3, [r7, #15]
          break;
 8016df8:	e004      	b.n	8016e04 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8016dfa:	23f5      	movs	r3, #245	@ 0xf5
 8016dfc:	73fb      	strb	r3, [r7, #15]
          break;
 8016dfe:	e001      	b.n	8016e04 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8016e00:	23f5      	movs	r3, #245	@ 0xf5
 8016e02:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8016e04:	68bb      	ldr	r3, [r7, #8]
 8016e06:	7bfa      	ldrb	r2, [r7, #15]
 8016e08:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8016e0a:	bf00      	nop
 8016e0c:	3710      	adds	r7, #16
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}

08016e12 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8016e12:	b580      	push	{r7, lr}
 8016e14:	b086      	sub	sp, #24
 8016e16:	af00      	add	r7, sp, #0
 8016e18:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8016e1e:	693b      	ldr	r3, [r7, #16]
 8016e20:	2200      	movs	r2, #0
 8016e22:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8016e24:	693b      	ldr	r3, [r7, #16]
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	685b      	ldr	r3, [r3, #4]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d022      	beq.n	8016e74 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8016e2e:	693b      	ldr	r3, [r7, #16]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	781b      	ldrb	r3, [r3, #0]
 8016e34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016e38:	2b10      	cmp	r3, #16
 8016e3a:	d11b      	bne.n	8016e74 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8016e3c:	693b      	ldr	r3, [r7, #16]
 8016e3e:	689b      	ldr	r3, [r3, #8]
 8016e40:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8016e42:	697b      	ldr	r3, [r7, #20]
 8016e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016e48:	d202      	bcs.n	8016e50 <lwip_netconn_do_recv+0x3e>
 8016e4a:	697b      	ldr	r3, [r7, #20]
 8016e4c:	b29b      	uxth	r3, r3
 8016e4e:	e001      	b.n	8016e54 <lwip_netconn_do_recv+0x42>
 8016e50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016e54:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8016e56:	693b      	ldr	r3, [r7, #16]
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	685b      	ldr	r3, [r3, #4]
 8016e5c:	89fa      	ldrh	r2, [r7, #14]
 8016e5e:	4611      	mov	r1, r2
 8016e60:	4618      	mov	r0, r3
 8016e62:	f004 f9af 	bl	801b1c4 <tcp_recved>
        remaining -= recved;
 8016e66:	89fb      	ldrh	r3, [r7, #14]
 8016e68:	697a      	ldr	r2, [r7, #20]
 8016e6a:	1ad3      	subs	r3, r2, r3
 8016e6c:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8016e6e:	697b      	ldr	r3, [r7, #20]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d1e6      	bne.n	8016e42 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8016e74:	bf00      	nop
 8016e76:	3718      	adds	r7, #24
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	bd80      	pop	{r7, pc}

08016e7c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b088      	sub	sp, #32
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	6078      	str	r0, [r7, #4]
 8016e84:	460b      	mov	r3, r1
 8016e86:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8016e88:	2300      	movs	r3, #0
 8016e8a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d106      	bne.n	8016ea0 <lwip_netconn_do_writemore+0x24>
 8016e92:	4b96      	ldr	r3, [pc, #600]	@ (80170ec <lwip_netconn_do_writemore+0x270>)
 8016e94:	f240 6273 	movw	r2, #1651	@ 0x673
 8016e98:	4995      	ldr	r1, [pc, #596]	@ (80170f0 <lwip_netconn_do_writemore+0x274>)
 8016e9a:	4896      	ldr	r0, [pc, #600]	@ (80170f4 <lwip_netconn_do_writemore+0x278>)
 8016e9c:	f00e f9e2 	bl	8025264 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	785b      	ldrb	r3, [r3, #1]
 8016ea4:	2b01      	cmp	r3, #1
 8016ea6:	d006      	beq.n	8016eb6 <lwip_netconn_do_writemore+0x3a>
 8016ea8:	4b90      	ldr	r3, [pc, #576]	@ (80170ec <lwip_netconn_do_writemore+0x270>)
 8016eaa:	f240 6274 	movw	r2, #1652	@ 0x674
 8016eae:	4992      	ldr	r1, [pc, #584]	@ (80170f8 <lwip_netconn_do_writemore+0x27c>)
 8016eb0:	4890      	ldr	r0, [pc, #576]	@ (80170f4 <lwip_netconn_do_writemore+0x278>)
 8016eb2:	f00e f9d7 	bl	8025264 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	6a1b      	ldr	r3, [r3, #32]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d106      	bne.n	8016ecc <lwip_netconn_do_writemore+0x50>
 8016ebe:	4b8b      	ldr	r3, [pc, #556]	@ (80170ec <lwip_netconn_do_writemore+0x270>)
 8016ec0:	f240 6275 	movw	r2, #1653	@ 0x675
 8016ec4:	498d      	ldr	r1, [pc, #564]	@ (80170fc <lwip_netconn_do_writemore+0x280>)
 8016ec6:	488b      	ldr	r0, [pc, #556]	@ (80170f4 <lwip_netconn_do_writemore+0x278>)
 8016ec8:	f00e f9cc 	bl	8025264 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	685b      	ldr	r3, [r3, #4]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d106      	bne.n	8016ee2 <lwip_netconn_do_writemore+0x66>
 8016ed4:	4b85      	ldr	r3, [pc, #532]	@ (80170ec <lwip_netconn_do_writemore+0x270>)
 8016ed6:	f240 6276 	movw	r2, #1654	@ 0x676
 8016eda:	4989      	ldr	r1, [pc, #548]	@ (8017100 <lwip_netconn_do_writemore+0x284>)
 8016edc:	4885      	ldr	r0, [pc, #532]	@ (80170f4 <lwip_netconn_do_writemore+0x278>)
 8016ede:	f00e f9c1 	bl	8025264 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	6a1b      	ldr	r3, [r3, #32]
 8016ee6:	699a      	ldr	r2, [r3, #24]
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	6a1b      	ldr	r3, [r3, #32]
 8016eec:	695b      	ldr	r3, [r3, #20]
 8016eee:	429a      	cmp	r2, r3
 8016ef0:	d306      	bcc.n	8016f00 <lwip_netconn_do_writemore+0x84>
 8016ef2:	4b7e      	ldr	r3, [pc, #504]	@ (80170ec <lwip_netconn_do_writemore+0x270>)
 8016ef4:	f240 6277 	movw	r2, #1655	@ 0x677
 8016ef8:	4982      	ldr	r1, [pc, #520]	@ (8017104 <lwip_netconn_do_writemore+0x288>)
 8016efa:	487e      	ldr	r0, [pc, #504]	@ (80170f4 <lwip_netconn_do_writemore+0x278>)
 8016efc:	f00e f9b2 	bl	8025264 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	6a1b      	ldr	r3, [r3, #32]
 8016f04:	899b      	ldrh	r3, [r3, #12]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d106      	bne.n	8016f18 <lwip_netconn_do_writemore+0x9c>
 8016f0a:	4b78      	ldr	r3, [pc, #480]	@ (80170ec <lwip_netconn_do_writemore+0x270>)
 8016f0c:	f240 6279 	movw	r2, #1657	@ 0x679
 8016f10:	497d      	ldr	r1, [pc, #500]	@ (8017108 <lwip_netconn_do_writemore+0x28c>)
 8016f12:	4878      	ldr	r0, [pc, #480]	@ (80170f4 <lwip_netconn_do_writemore+0x278>)
 8016f14:	f00e f9a6 	bl	8025264 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	6a1b      	ldr	r3, [r3, #32]
 8016f1c:	7f1b      	ldrb	r3, [r3, #28]
 8016f1e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	7f1b      	ldrb	r3, [r3, #28]
 8016f24:	f003 0302 	and.w	r3, r3, #2
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d104      	bne.n	8016f36 <lwip_netconn_do_writemore+0xba>
 8016f2c:	7ebb      	ldrb	r3, [r7, #26]
 8016f2e:	f003 0304 	and.w	r3, r3, #4
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d001      	beq.n	8016f3a <lwip_netconn_do_writemore+0xbe>
 8016f36:	2301      	movs	r3, #1
 8016f38:	e000      	b.n	8016f3c <lwip_netconn_do_writemore+0xc0>
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	6a1b      	ldr	r3, [r3, #32]
 8016f42:	689b      	ldr	r3, [r3, #8]
 8016f44:	681a      	ldr	r2, [r3, #0]
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	6a1b      	ldr	r3, [r3, #32]
 8016f4a:	691b      	ldr	r3, [r3, #16]
 8016f4c:	4413      	add	r3, r2
 8016f4e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	6a1b      	ldr	r3, [r3, #32]
 8016f54:	689b      	ldr	r3, [r3, #8]
 8016f56:	685a      	ldr	r2, [r3, #4]
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	6a1b      	ldr	r3, [r3, #32]
 8016f5c:	691b      	ldr	r3, [r3, #16]
 8016f5e:	1ad3      	subs	r3, r2, r3
 8016f60:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8016f62:	693b      	ldr	r3, [r7, #16]
 8016f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016f68:	d307      	bcc.n	8016f7a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8016f6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016f6e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8016f70:	7ebb      	ldrb	r3, [r7, #26]
 8016f72:	f043 0302 	orr.w	r3, r3, #2
 8016f76:	76bb      	strb	r3, [r7, #26]
 8016f78:	e001      	b.n	8016f7e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8016f7a:	693b      	ldr	r3, [r7, #16]
 8016f7c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	685b      	ldr	r3, [r3, #4]
 8016f82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8016f86:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8016f88:	89fa      	ldrh	r2, [r7, #14]
 8016f8a:	8bbb      	ldrh	r3, [r7, #28]
 8016f8c:	429a      	cmp	r2, r3
 8016f8e:	d216      	bcs.n	8016fbe <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8016f90:	89fb      	ldrh	r3, [r7, #14]
 8016f92:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8016f94:	7e3b      	ldrb	r3, [r7, #24]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d00d      	beq.n	8016fb6 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8016f9a:	8bbb      	ldrh	r3, [r7, #28]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d10e      	bne.n	8016fbe <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	6a1b      	ldr	r3, [r3, #32]
 8016fa4:	699b      	ldr	r3, [r3, #24]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d102      	bne.n	8016fb0 <lwip_netconn_do_writemore+0x134>
 8016faa:	f06f 0306 	mvn.w	r3, #6
 8016fae:	e000      	b.n	8016fb2 <lwip_netconn_do_writemore+0x136>
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8016fb4:	e07d      	b.n	80170b2 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8016fb6:	7ebb      	ldrb	r3, [r7, #26]
 8016fb8:	f043 0302 	orr.w	r3, r3, #2
 8016fbc:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	6a1b      	ldr	r3, [r3, #32]
 8016fc2:	691a      	ldr	r2, [r3, #16]
 8016fc4:	8bbb      	ldrh	r3, [r7, #28]
 8016fc6:	441a      	add	r2, r3
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	6a1b      	ldr	r3, [r3, #32]
 8016fcc:	689b      	ldr	r3, [r3, #8]
 8016fce:	685b      	ldr	r3, [r3, #4]
 8016fd0:	429a      	cmp	r2, r3
 8016fd2:	d906      	bls.n	8016fe2 <lwip_netconn_do_writemore+0x166>
 8016fd4:	4b45      	ldr	r3, [pc, #276]	@ (80170ec <lwip_netconn_do_writemore+0x270>)
 8016fd6:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8016fda:	494c      	ldr	r1, [pc, #304]	@ (801710c <lwip_netconn_do_writemore+0x290>)
 8016fdc:	4845      	ldr	r0, [pc, #276]	@ (80170f4 <lwip_netconn_do_writemore+0x278>)
 8016fde:	f00e f941 	bl	8025264 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8016fe2:	8bbb      	ldrh	r3, [r7, #28]
 8016fe4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016fe8:	4293      	cmp	r3, r2
 8016fea:	d103      	bne.n	8016ff4 <lwip_netconn_do_writemore+0x178>
 8016fec:	693b      	ldr	r3, [r7, #16]
 8016fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016ff2:	d209      	bcs.n	8017008 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8016ff4:	693b      	ldr	r3, [r7, #16]
 8016ff6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8016ff8:	8bba      	ldrh	r2, [r7, #28]
 8016ffa:	429a      	cmp	r2, r3
 8016ffc:	d10b      	bne.n	8017016 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	6a1b      	ldr	r3, [r3, #32]
 8017002:	899b      	ldrh	r3, [r3, #12]
 8017004:	2b01      	cmp	r3, #1
 8017006:	d906      	bls.n	8017016 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8017008:	2301      	movs	r3, #1
 801700a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 801700c:	7ebb      	ldrb	r3, [r7, #26]
 801700e:	f043 0302 	orr.w	r3, r3, #2
 8017012:	76bb      	strb	r3, [r7, #26]
 8017014:	e001      	b.n	801701a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8017016:	2300      	movs	r3, #0
 8017018:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	6858      	ldr	r0, [r3, #4]
 801701e:	7ebb      	ldrb	r3, [r7, #26]
 8017020:	8bba      	ldrh	r2, [r7, #28]
 8017022:	6979      	ldr	r1, [r7, #20]
 8017024:	f007 fed2 	bl	801edcc <tcp_write>
 8017028:	4603      	mov	r3, r0
 801702a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 801702c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017030:	2b00      	cmp	r3, #0
 8017032:	d12c      	bne.n	801708e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	6a1b      	ldr	r3, [r3, #32]
 8017038:	6999      	ldr	r1, [r3, #24]
 801703a:	8bba      	ldrh	r2, [r7, #28]
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	6a1b      	ldr	r3, [r3, #32]
 8017040:	440a      	add	r2, r1
 8017042:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	6a1b      	ldr	r3, [r3, #32]
 8017048:	6919      	ldr	r1, [r3, #16]
 801704a:	8bba      	ldrh	r2, [r7, #28]
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	6a1b      	ldr	r3, [r3, #32]
 8017050:	440a      	add	r2, r1
 8017052:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	6a1b      	ldr	r3, [r3, #32]
 8017058:	691a      	ldr	r2, [r3, #16]
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	6a1b      	ldr	r3, [r3, #32]
 801705e:	689b      	ldr	r3, [r3, #8]
 8017060:	685b      	ldr	r3, [r3, #4]
 8017062:	429a      	cmp	r2, r3
 8017064:	d113      	bne.n	801708e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	6a1b      	ldr	r3, [r3, #32]
 801706a:	899a      	ldrh	r2, [r3, #12]
 801706c:	3a01      	subs	r2, #1
 801706e:	b292      	uxth	r2, r2
 8017070:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	6a1b      	ldr	r3, [r3, #32]
 8017076:	899b      	ldrh	r3, [r3, #12]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d008      	beq.n	801708e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	6a1b      	ldr	r3, [r3, #32]
 8017080:	689a      	ldr	r2, [r3, #8]
 8017082:	3208      	adds	r2, #8
 8017084:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	6a1b      	ldr	r3, [r3, #32]
 801708a:	2200      	movs	r2, #0
 801708c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 801708e:	7e7b      	ldrb	r3, [r7, #25]
 8017090:	2b00      	cmp	r3, #0
 8017092:	d004      	beq.n	801709e <lwip_netconn_do_writemore+0x222>
 8017094:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017098:	2b00      	cmp	r3, #0
 801709a:	f43f af50 	beq.w	8016f3e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 801709e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d004      	beq.n	80170b0 <lwip_netconn_do_writemore+0x234>
 80170a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80170aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170ae:	d146      	bne.n	801713e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80170b0:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80170b2:	7e3b      	ldrb	r3, [r7, #24]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d02b      	beq.n	8017110 <lwip_netconn_do_writemore+0x294>
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	6a1b      	ldr	r3, [r3, #32]
 80170bc:	699a      	ldr	r2, [r3, #24]
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	6a1b      	ldr	r3, [r3, #32]
 80170c2:	695b      	ldr	r3, [r3, #20]
 80170c4:	429a      	cmp	r2, r3
 80170c6:	d223      	bcs.n	8017110 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d005      	beq.n	80170dc <lwip_netconn_do_writemore+0x260>
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170d4:	2200      	movs	r2, #0
 80170d6:	2103      	movs	r1, #3
 80170d8:	6878      	ldr	r0, [r7, #4]
 80170da:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	7f1b      	ldrb	r3, [r3, #28]
 80170e0:	f043 0310 	orr.w	r3, r3, #16
 80170e4:	b2da      	uxtb	r2, r3
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	771a      	strb	r2, [r3, #28]
 80170ea:	e028      	b.n	801713e <lwip_netconn_do_writemore+0x2c2>
 80170ec:	080297b0 	.word	0x080297b0
 80170f0:	08029908 	.word	0x08029908
 80170f4:	080297f4 	.word	0x080297f4
 80170f8:	08029c10 	.word	0x08029c10
 80170fc:	08029918 	.word	0x08029918
 8017100:	08029c30 	.word	0x08029c30
 8017104:	08029c48 	.word	0x08029c48
 8017108:	08029c88 	.word	0x08029c88
 801710c:	08029cb0 	.word	0x08029cb0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	685b      	ldr	r3, [r3, #4]
 8017114:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017118:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 801711c:	d305      	bcc.n	801712a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	685b      	ldr	r3, [r3, #4]
 8017122:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8017126:	2b04      	cmp	r3, #4
 8017128:	d909      	bls.n	801713e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801712e:	2b00      	cmp	r3, #0
 8017130:	d005      	beq.n	801713e <lwip_netconn_do_writemore+0x2c2>
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017136:	2200      	movs	r2, #0
 8017138:	2103      	movs	r1, #3
 801713a:	6878      	ldr	r0, [r7, #4]
 801713c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 801713e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d11d      	bne.n	8017182 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	6a1b      	ldr	r3, [r3, #32]
 801714a:	699a      	ldr	r2, [r3, #24]
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	6a1b      	ldr	r3, [r3, #32]
 8017150:	695b      	ldr	r3, [r3, #20]
 8017152:	429a      	cmp	r2, r3
 8017154:	d002      	beq.n	801715c <lwip_netconn_do_writemore+0x2e0>
 8017156:	7e3b      	ldrb	r3, [r7, #24]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d001      	beq.n	8017160 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 801715c:	2301      	movs	r3, #1
 801715e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	685b      	ldr	r3, [r3, #4]
 8017164:	4618      	mov	r0, r3
 8017166:	f008 fc1b 	bl	801f9a0 <tcp_output>
 801716a:	4603      	mov	r3, r0
 801716c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 801716e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8017172:	f113 0f04 	cmn.w	r3, #4
 8017176:	d12c      	bne.n	80171d2 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8017178:	7b3b      	ldrb	r3, [r7, #12]
 801717a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801717c:	2301      	movs	r3, #1
 801717e:	76fb      	strb	r3, [r7, #27]
 8017180:	e027      	b.n	80171d2 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8017182:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017186:	f1b3 3fff 	cmp.w	r3, #4294967295
 801718a:	d120      	bne.n	80171ce <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	685b      	ldr	r3, [r3, #4]
 8017190:	4618      	mov	r0, r3
 8017192:	f008 fc05 	bl	801f9a0 <tcp_output>
 8017196:	4603      	mov	r3, r0
 8017198:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 801719a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801719e:	f113 0f04 	cmn.w	r3, #4
 80171a2:	d104      	bne.n	80171ae <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80171a4:	7b7b      	ldrb	r3, [r7, #13]
 80171a6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80171a8:	2301      	movs	r3, #1
 80171aa:	76fb      	strb	r3, [r7, #27]
 80171ac:	e011      	b.n	80171d2 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80171ae:	7e3b      	ldrb	r3, [r7, #24]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d00e      	beq.n	80171d2 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	6a1b      	ldr	r3, [r3, #32]
 80171b8:	699b      	ldr	r3, [r3, #24]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d102      	bne.n	80171c4 <lwip_netconn_do_writemore+0x348>
 80171be:	f06f 0306 	mvn.w	r3, #6
 80171c2:	e000      	b.n	80171c6 <lwip_netconn_do_writemore+0x34a>
 80171c4:	2300      	movs	r3, #0
 80171c6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80171c8:	2301      	movs	r3, #1
 80171ca:	76fb      	strb	r3, [r7, #27]
 80171cc:	e001      	b.n	80171d2 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80171ce:	2301      	movs	r3, #1
 80171d0:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80171d2:	7efb      	ldrb	r3, [r7, #27]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d015      	beq.n	8017204 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	6a1b      	ldr	r3, [r3, #32]
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	330c      	adds	r3, #12
 80171e0:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	6a1b      	ldr	r3, [r3, #32]
 80171e6:	7ffa      	ldrb	r2, [r7, #31]
 80171e8:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	2200      	movs	r2, #0
 80171ee:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	2200      	movs	r2, #0
 80171f4:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80171f6:	78fb      	ldrb	r3, [r7, #3]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d006      	beq.n	801720a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80171fc:	68b8      	ldr	r0, [r7, #8]
 80171fe:	f00c fef3 	bl	8023fe8 <sys_sem_signal>
 8017202:	e002      	b.n	801720a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8017204:	f04f 33ff 	mov.w	r3, #4294967295
 8017208:	e000      	b.n	801720c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 801720a:	2300      	movs	r3, #0
}
 801720c:	4618      	mov	r0, r3
 801720e:	3720      	adds	r7, #32
 8017210:	46bd      	mov	sp, r7
 8017212:	bd80      	pop	{r7, pc}

08017214 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8017214:	b580      	push	{r7, lr}
 8017216:	b084      	sub	sp, #16
 8017218:	af00      	add	r7, sp, #0
 801721a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8017220:	68bb      	ldr	r3, [r7, #8]
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	4618      	mov	r0, r3
 8017226:	f7fe fe23 	bl	8015e70 <netconn_err>
 801722a:	4603      	mov	r3, r0
 801722c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801722e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017232:	2b00      	cmp	r3, #0
 8017234:	d166      	bne.n	8017304 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8017236:	68bb      	ldr	r3, [r7, #8]
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	781b      	ldrb	r3, [r3, #0]
 801723c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017240:	2b10      	cmp	r3, #16
 8017242:	d15d      	bne.n	8017300 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8017244:	68bb      	ldr	r3, [r7, #8]
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	785b      	ldrb	r3, [r3, #1]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d002      	beq.n	8017254 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 801724e:	23fb      	movs	r3, #251	@ 0xfb
 8017250:	73fb      	strb	r3, [r7, #15]
 8017252:	e057      	b.n	8017304 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8017254:	68bb      	ldr	r3, [r7, #8]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	685b      	ldr	r3, [r3, #4]
 801725a:	2b00      	cmp	r3, #0
 801725c:	d04d      	beq.n	80172fa <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 801725e:	68bb      	ldr	r3, [r7, #8]
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	2201      	movs	r2, #1
 8017264:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8017266:	68bb      	ldr	r3, [r7, #8]
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	6a1b      	ldr	r3, [r3, #32]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d006      	beq.n	801727e <lwip_netconn_do_write+0x6a>
 8017270:	4b28      	ldr	r3, [pc, #160]	@ (8017314 <lwip_netconn_do_write+0x100>)
 8017272:	f240 7223 	movw	r2, #1827	@ 0x723
 8017276:	4928      	ldr	r1, [pc, #160]	@ (8017318 <lwip_netconn_do_write+0x104>)
 8017278:	4828      	ldr	r0, [pc, #160]	@ (801731c <lwip_netconn_do_write+0x108>)
 801727a:	f00d fff3 	bl	8025264 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 801727e:	68bb      	ldr	r3, [r7, #8]
 8017280:	695b      	ldr	r3, [r3, #20]
 8017282:	2b00      	cmp	r3, #0
 8017284:	d106      	bne.n	8017294 <lwip_netconn_do_write+0x80>
 8017286:	4b23      	ldr	r3, [pc, #140]	@ (8017314 <lwip_netconn_do_write+0x100>)
 8017288:	f240 7224 	movw	r2, #1828	@ 0x724
 801728c:	4924      	ldr	r1, [pc, #144]	@ (8017320 <lwip_netconn_do_write+0x10c>)
 801728e:	4823      	ldr	r0, [pc, #140]	@ (801731c <lwip_netconn_do_write+0x108>)
 8017290:	f00d ffe8 	bl	8025264 <iprintf>
        msg->conn->current_msg = msg;
 8017294:	68bb      	ldr	r3, [r7, #8]
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	68ba      	ldr	r2, [r7, #8]
 801729a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 801729c:	68bb      	ldr	r3, [r7, #8]
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	2100      	movs	r1, #0
 80172a2:	4618      	mov	r0, r3
 80172a4:	f7ff fdea 	bl	8016e7c <lwip_netconn_do_writemore>
 80172a8:	4603      	mov	r3, r0
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d02e      	beq.n	801730c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80172ae:	68bb      	ldr	r3, [r7, #8]
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	785b      	ldrb	r3, [r3, #1]
 80172b4:	2b01      	cmp	r3, #1
 80172b6:	d006      	beq.n	80172c6 <lwip_netconn_do_write+0xb2>
 80172b8:	4b16      	ldr	r3, [pc, #88]	@ (8017314 <lwip_netconn_do_write+0x100>)
 80172ba:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 80172be:	4919      	ldr	r1, [pc, #100]	@ (8017324 <lwip_netconn_do_write+0x110>)
 80172c0:	4816      	ldr	r0, [pc, #88]	@ (801731c <lwip_netconn_do_write+0x108>)
 80172c2:	f00d ffcf 	bl	8025264 <iprintf>
          UNLOCK_TCPIP_CORE();
 80172c6:	4818      	ldr	r0, [pc, #96]	@ (8017328 <lwip_netconn_do_write+0x114>)
 80172c8:	f00c feff 	bl	80240ca <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80172cc:	68bb      	ldr	r3, [r7, #8]
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	330c      	adds	r3, #12
 80172d2:	2100      	movs	r1, #0
 80172d4:	4618      	mov	r0, r3
 80172d6:	f00c fe56 	bl	8023f86 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80172da:	4813      	ldr	r0, [pc, #76]	@ (8017328 <lwip_netconn_do_write+0x114>)
 80172dc:	f00c fee6 	bl	80240ac <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80172e0:	68bb      	ldr	r3, [r7, #8]
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	785b      	ldrb	r3, [r3, #1]
 80172e6:	2b01      	cmp	r3, #1
 80172e8:	d110      	bne.n	801730c <lwip_netconn_do_write+0xf8>
 80172ea:	4b0a      	ldr	r3, [pc, #40]	@ (8017314 <lwip_netconn_do_write+0x100>)
 80172ec:	f240 722c 	movw	r2, #1836	@ 0x72c
 80172f0:	490c      	ldr	r1, [pc, #48]	@ (8017324 <lwip_netconn_do_write+0x110>)
 80172f2:	480a      	ldr	r0, [pc, #40]	@ (801731c <lwip_netconn_do_write+0x108>)
 80172f4:	f00d ffb6 	bl	8025264 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80172f8:	e008      	b.n	801730c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80172fa:	23f5      	movs	r3, #245	@ 0xf5
 80172fc:	73fb      	strb	r3, [r7, #15]
 80172fe:	e001      	b.n	8017304 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8017300:	23fa      	movs	r3, #250	@ 0xfa
 8017302:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8017304:	68bb      	ldr	r3, [r7, #8]
 8017306:	7bfa      	ldrb	r2, [r7, #15]
 8017308:	711a      	strb	r2, [r3, #4]
 801730a:	e000      	b.n	801730e <lwip_netconn_do_write+0xfa>
        return;
 801730c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 801730e:	3710      	adds	r7, #16
 8017310:	46bd      	mov	sp, r7
 8017312:	bd80      	pop	{r7, pc}
 8017314:	080297b0 	.word	0x080297b0
 8017318:	08029b54 	.word	0x08029b54
 801731c:	080297f4 	.word	0x080297f4
 8017320:	08029cdc 	.word	0x08029cdc
 8017324:	08029b70 	.word	0x08029b70
 8017328:	24008d48 	.word	0x24008d48

0801732c <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b084      	sub	sp, #16
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	685b      	ldr	r3, [r3, #4]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d06b      	beq.n	801741a <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	7c1b      	ldrb	r3, [r3, #16]
 8017346:	2b00      	cmp	r3, #0
 8017348:	d007      	beq.n	801735a <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	685a      	ldr	r2, [r3, #4]
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	689b      	ldr	r3, [r3, #8]
 8017354:	6812      	ldr	r2, [r2, #0]
 8017356:	601a      	str	r2, [r3, #0]
 8017358:	e006      	b.n	8017368 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	685a      	ldr	r2, [r3, #4]
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	689b      	ldr	r3, [r3, #8]
 8017364:	6852      	ldr	r2, [r2, #4]
 8017366:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	2200      	movs	r2, #0
 801736c:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	781b      	ldrb	r3, [r3, #0]
 8017374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017378:	2b10      	cmp	r3, #16
 801737a:	d021      	beq.n	80173c0 <lwip_netconn_do_getaddr+0x94>
 801737c:	2b20      	cmp	r3, #32
 801737e:	d144      	bne.n	801740a <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	7c1b      	ldrb	r3, [r3, #16]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d007      	beq.n	8017398 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	685a      	ldr	r2, [r3, #4]
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	68db      	ldr	r3, [r3, #12]
 8017392:	8a52      	ldrh	r2, [r2, #18]
 8017394:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 8017396:	e044      	b.n	8017422 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	685b      	ldr	r3, [r3, #4]
 801739e:	7c1b      	ldrb	r3, [r3, #16]
 80173a0:	f003 0304 	and.w	r3, r3, #4
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d103      	bne.n	80173b0 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	22f5      	movs	r2, #245	@ 0xf5
 80173ac:	711a      	strb	r2, [r3, #4]
        break;
 80173ae:	e038      	b.n	8017422 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	685a      	ldr	r2, [r3, #4]
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	68db      	ldr	r3, [r3, #12]
 80173ba:	8a92      	ldrh	r2, [r2, #20]
 80173bc:	801a      	strh	r2, [r3, #0]
        break;
 80173be:	e030      	b.n	8017422 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	7c1b      	ldrb	r3, [r3, #16]
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d10f      	bne.n	80173e8 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	685b      	ldr	r3, [r3, #4]
 80173ce:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d005      	beq.n	80173e0 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	685b      	ldr	r3, [r3, #4]
 80173da:	7d1b      	ldrb	r3, [r3, #20]
 80173dc:	2b01      	cmp	r3, #1
 80173de:	d103      	bne.n	80173e8 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	22f5      	movs	r2, #245	@ 0xf5
 80173e4:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 80173e6:	e01c      	b.n	8017422 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	7c1b      	ldrb	r3, [r3, #16]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d004      	beq.n	80173fa <lwip_netconn_do_getaddr+0xce>
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	685b      	ldr	r3, [r3, #4]
 80173f6:	8adb      	ldrh	r3, [r3, #22]
 80173f8:	e003      	b.n	8017402 <lwip_netconn_do_getaddr+0xd6>
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	685b      	ldr	r3, [r3, #4]
 8017400:	8b1b      	ldrh	r3, [r3, #24]
 8017402:	68fa      	ldr	r2, [r7, #12]
 8017404:	68d2      	ldr	r2, [r2, #12]
 8017406:	8013      	strh	r3, [r2, #0]
        break;
 8017408:	e00b      	b.n	8017422 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 801740a:	4b08      	ldr	r3, [pc, #32]	@ (801742c <lwip_netconn_do_getaddr+0x100>)
 801740c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8017410:	4907      	ldr	r1, [pc, #28]	@ (8017430 <lwip_netconn_do_getaddr+0x104>)
 8017412:	4808      	ldr	r0, [pc, #32]	@ (8017434 <lwip_netconn_do_getaddr+0x108>)
 8017414:	f00d ff26 	bl	8025264 <iprintf>
        break;
 8017418:	e003      	b.n	8017422 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	22f5      	movs	r2, #245	@ 0xf5
 801741e:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 8017420:	bf00      	nop
 8017422:	bf00      	nop
 8017424:	3710      	adds	r7, #16
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}
 801742a:	bf00      	nop
 801742c:	080297b0 	.word	0x080297b0
 8017430:	08029cf0 	.word	0x08029cf0
 8017434:	080297f4 	.word	0x080297f4

08017438 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8017438:	b580      	push	{r7, lr}
 801743a:	b084      	sub	sp, #16
 801743c:	af00      	add	r7, sp, #0
 801743e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	785b      	ldrb	r3, [r3, #1]
 801744a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	685b      	ldr	r3, [r3, #4]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d069      	beq.n	801752a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	781b      	ldrb	r3, [r3, #0]
 801745c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8017460:	2b10      	cmp	r3, #16
 8017462:	d162      	bne.n	801752a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8017468:	2b03      	cmp	r3, #3
 801746a:	d002      	beq.n	8017472 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 801746c:	7afb      	ldrb	r3, [r7, #11]
 801746e:	2b02      	cmp	r3, #2
 8017470:	d05b      	beq.n	801752a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8017472:	7afb      	ldrb	r3, [r7, #11]
 8017474:	2b03      	cmp	r3, #3
 8017476:	d103      	bne.n	8017480 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	22f5      	movs	r2, #245	@ 0xf5
 801747c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801747e:	e059      	b.n	8017534 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8017480:	7afb      	ldrb	r3, [r7, #11]
 8017482:	2b01      	cmp	r3, #1
 8017484:	d103      	bne.n	801748e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	22fb      	movs	r2, #251	@ 0xfb
 801748a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801748c:	e052      	b.n	8017534 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	7a1b      	ldrb	r3, [r3, #8]
 8017492:	f003 0301 	and.w	r3, r3, #1
 8017496:	2b00      	cmp	r3, #0
 8017498:	d004      	beq.n	80174a4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	4618      	mov	r0, r3
 80174a0:	f7ff f964 	bl	801676c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	6a1b      	ldr	r3, [r3, #32]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d006      	beq.n	80174bc <lwip_netconn_do_close+0x84>
 80174ae:	4b23      	ldr	r3, [pc, #140]	@ (801753c <lwip_netconn_do_close+0x104>)
 80174b0:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 80174b4:	4922      	ldr	r1, [pc, #136]	@ (8017540 <lwip_netconn_do_close+0x108>)
 80174b6:	4823      	ldr	r0, [pc, #140]	@ (8017544 <lwip_netconn_do_close+0x10c>)
 80174b8:	f00d fed4 	bl	8025264 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	2204      	movs	r2, #4
 80174c2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	68fa      	ldr	r2, [r7, #12]
 80174ca:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	2100      	movs	r1, #0
 80174d2:	4618      	mov	r0, r3
 80174d4:	f7ff f9c8 	bl	8016868 <lwip_netconn_do_close_internal>
 80174d8:	4603      	mov	r3, r0
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d029      	beq.n	8017532 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80174de:	68fb      	ldr	r3, [r7, #12]
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	785b      	ldrb	r3, [r3, #1]
 80174e4:	2b04      	cmp	r3, #4
 80174e6:	d006      	beq.n	80174f6 <lwip_netconn_do_close+0xbe>
 80174e8:	4b14      	ldr	r3, [pc, #80]	@ (801753c <lwip_netconn_do_close+0x104>)
 80174ea:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 80174ee:	4916      	ldr	r1, [pc, #88]	@ (8017548 <lwip_netconn_do_close+0x110>)
 80174f0:	4814      	ldr	r0, [pc, #80]	@ (8017544 <lwip_netconn_do_close+0x10c>)
 80174f2:	f00d feb7 	bl	8025264 <iprintf>
        UNLOCK_TCPIP_CORE();
 80174f6:	4815      	ldr	r0, [pc, #84]	@ (801754c <lwip_netconn_do_close+0x114>)
 80174f8:	f00c fde7 	bl	80240ca <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	330c      	adds	r3, #12
 8017502:	2100      	movs	r1, #0
 8017504:	4618      	mov	r0, r3
 8017506:	f00c fd3e 	bl	8023f86 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 801750a:	4810      	ldr	r0, [pc, #64]	@ (801754c <lwip_netconn_do_close+0x114>)
 801750c:	f00c fdce 	bl	80240ac <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	785b      	ldrb	r3, [r3, #1]
 8017516:	2b00      	cmp	r3, #0
 8017518:	d00b      	beq.n	8017532 <lwip_netconn_do_close+0xfa>
 801751a:	4b08      	ldr	r3, [pc, #32]	@ (801753c <lwip_netconn_do_close+0x104>)
 801751c:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8017520:	4909      	ldr	r1, [pc, #36]	@ (8017548 <lwip_netconn_do_close+0x110>)
 8017522:	4808      	ldr	r0, [pc, #32]	@ (8017544 <lwip_netconn_do_close+0x10c>)
 8017524:	f00d fe9e 	bl	8025264 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8017528:	e003      	b.n	8017532 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	22f5      	movs	r2, #245	@ 0xf5
 801752e:	711a      	strb	r2, [r3, #4]
 8017530:	e000      	b.n	8017534 <lwip_netconn_do_close+0xfc>
      return;
 8017532:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8017534:	3710      	adds	r7, #16
 8017536:	46bd      	mov	sp, r7
 8017538:	bd80      	pop	{r7, pc}
 801753a:	bf00      	nop
 801753c:	080297b0 	.word	0x080297b0
 8017540:	08029b54 	.word	0x08029b54
 8017544:	080297f4 	.word	0x080297f4
 8017548:	08029b70 	.word	0x08029b70
 801754c:	24008d48 	.word	0x24008d48

08017550 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8017550:	b480      	push	{r7}
 8017552:	b083      	sub	sp, #12
 8017554:	af00      	add	r7, sp, #0
 8017556:	4603      	mov	r3, r0
 8017558:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 801755a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801755e:	2b00      	cmp	r3, #0
 8017560:	dc04      	bgt.n	801756c <err_to_errno+0x1c>
 8017562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017566:	f113 0f10 	cmn.w	r3, #16
 801756a:	da01      	bge.n	8017570 <err_to_errno+0x20>
    return EIO;
 801756c:	2305      	movs	r3, #5
 801756e:	e005      	b.n	801757c <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8017570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017574:	425b      	negs	r3, r3
 8017576:	4a04      	ldr	r2, [pc, #16]	@ (8017588 <err_to_errno+0x38>)
 8017578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 801757c:	4618      	mov	r0, r3
 801757e:	370c      	adds	r7, #12
 8017580:	46bd      	mov	sp, r7
 8017582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017586:	4770      	bx	lr
 8017588:	0802cdc4 	.word	0x0802cdc4

0801758c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 801758c:	b580      	push	{r7, lr}
 801758e:	b082      	sub	sp, #8
 8017590:	af00      	add	r7, sp, #0
 8017592:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d013      	beq.n	80175c2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d00b      	beq.n	80175ba <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	4618      	mov	r0, r3
 80175a8:	f002 ff0e 	bl	801a3c8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	2200      	movs	r2, #0
 80175b0:	605a      	str	r2, [r3, #4]
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	685a      	ldr	r2, [r3, #4]
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80175ba:	6879      	ldr	r1, [r7, #4]
 80175bc:	2006      	movs	r0, #6
 80175be:	f002 f82d 	bl	801961c <memp_free>
  }
}
 80175c2:	bf00      	nop
 80175c4:	3708      	adds	r7, #8
 80175c6:	46bd      	mov	sp, r7
 80175c8:	bd80      	pop	{r7, pc}
	...

080175cc <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 80175cc:	b580      	push	{r7, lr}
 80175ce:	b082      	sub	sp, #8
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d106      	bne.n	80175e8 <netbuf_free+0x1c>
 80175da:	4b0d      	ldr	r3, [pc, #52]	@ (8017610 <netbuf_free+0x44>)
 80175dc:	2281      	movs	r2, #129	@ 0x81
 80175de:	490d      	ldr	r1, [pc, #52]	@ (8017614 <netbuf_free+0x48>)
 80175e0:	480d      	ldr	r0, [pc, #52]	@ (8017618 <netbuf_free+0x4c>)
 80175e2:	f00d fe3f 	bl	8025264 <iprintf>
 80175e6:	e00f      	b.n	8017608 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d004      	beq.n	80175fa <netbuf_free+0x2e>
    pbuf_free(buf->p);
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	4618      	mov	r0, r3
 80175f6:	f002 fee7 	bl	801a3c8 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	2200      	movs	r2, #0
 80175fe:	605a      	str	r2, [r3, #4]
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	685a      	ldr	r2, [r3, #4]
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8017608:	3708      	adds	r7, #8
 801760a:	46bd      	mov	sp, r7
 801760c:	bd80      	pop	{r7, pc}
 801760e:	bf00      	nop
 8017610:	08029d08 	.word	0x08029d08
 8017614:	08029da4 	.word	0x08029da4
 8017618:	08029d58 	.word	0x08029d58

0801761c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b084      	sub	sp, #16
 8017620:	af00      	add	r7, sp, #0
 8017622:	60f8      	str	r0, [r7, #12]
 8017624:	60b9      	str	r1, [r7, #8]
 8017626:	4613      	mov	r3, r2
 8017628:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	2b00      	cmp	r3, #0
 801762e:	d108      	bne.n	8017642 <netbuf_ref+0x26>
 8017630:	4b1c      	ldr	r3, [pc, #112]	@ (80176a4 <netbuf_ref+0x88>)
 8017632:	2299      	movs	r2, #153	@ 0x99
 8017634:	491c      	ldr	r1, [pc, #112]	@ (80176a8 <netbuf_ref+0x8c>)
 8017636:	481d      	ldr	r0, [pc, #116]	@ (80176ac <netbuf_ref+0x90>)
 8017638:	f00d fe14 	bl	8025264 <iprintf>
 801763c:	f06f 030f 	mvn.w	r3, #15
 8017640:	e02b      	b.n	801769a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d004      	beq.n	8017654 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	4618      	mov	r0, r3
 8017650:	f002 feba 	bl	801a3c8 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8017654:	2241      	movs	r2, #65	@ 0x41
 8017656:	2100      	movs	r1, #0
 8017658:	2036      	movs	r0, #54	@ 0x36
 801765a:	f002 fb9f 	bl	8019d9c <pbuf_alloc>
 801765e:	4602      	mov	r2, r0
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d105      	bne.n	8017678 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	2200      	movs	r2, #0
 8017670:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8017672:	f04f 33ff 	mov.w	r3, #4294967295
 8017676:	e010      	b.n	801769a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	68ba      	ldr	r2, [r7, #8]
 801767e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	88fa      	ldrh	r2, [r7, #6]
 8017686:	811a      	strh	r2, [r3, #8]
 8017688:	68fa      	ldr	r2, [r7, #12]
 801768a:	6812      	ldr	r2, [r2, #0]
 801768c:	891b      	ldrh	r3, [r3, #8]
 801768e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	681a      	ldr	r2, [r3, #0]
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8017698:	2300      	movs	r3, #0
}
 801769a:	4618      	mov	r0, r3
 801769c:	3710      	adds	r7, #16
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}
 80176a2:	bf00      	nop
 80176a4:	08029d08 	.word	0x08029d08
 80176a8:	08029dc0 	.word	0x08029dc0
 80176ac:	08029d58 	.word	0x08029d58

080176b0 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 80176b0:	b480      	push	{r7}
 80176b2:	b085      	sub	sp, #20
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	db02      	blt.n	80176c8 <tryget_socket_unconn_nouse+0x18>
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	2b03      	cmp	r3, #3
 80176c6:	dd01      	ble.n	80176cc <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 80176c8:	2300      	movs	r3, #0
 80176ca:	e003      	b.n	80176d4 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	011b      	lsls	r3, r3, #4
 80176d0:	4a03      	ldr	r2, [pc, #12]	@ (80176e0 <tryget_socket_unconn_nouse+0x30>)
 80176d2:	4413      	add	r3, r2
}
 80176d4:	4618      	mov	r0, r3
 80176d6:	3714      	adds	r7, #20
 80176d8:	46bd      	mov	sp, r7
 80176da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176de:	4770      	bx	lr
 80176e0:	24008cf8 	.word	0x24008cf8

080176e4 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b084      	sub	sp, #16
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 80176ec:	6878      	ldr	r0, [r7, #4]
 80176ee:	f7ff ffdf 	bl	80176b0 <tryget_socket_unconn_nouse>
 80176f2:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 80176f4:	68fb      	ldr	r3, [r7, #12]
}
 80176f6:	4618      	mov	r0, r3
 80176f8:	3710      	adds	r7, #16
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bd80      	pop	{r7, pc}

080176fe <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 80176fe:	b580      	push	{r7, lr}
 8017700:	b084      	sub	sp, #16
 8017702:	af00      	add	r7, sp, #0
 8017704:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 8017706:	6878      	ldr	r0, [r7, #4]
 8017708:	f7ff ffec 	bl	80176e4 <tryget_socket_unconn>
 801770c:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d005      	beq.n	8017720 <tryget_socket+0x22>
    if (sock->conn) {
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d001      	beq.n	8017720 <tryget_socket+0x22>
      return sock;
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	e000      	b.n	8017722 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 8017720:	2300      	movs	r3, #0
}
 8017722:	4618      	mov	r0, r3
 8017724:	3710      	adds	r7, #16
 8017726:	46bd      	mov	sp, r7
 8017728:	bd80      	pop	{r7, pc}
	...

0801772c <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 801772c:	b580      	push	{r7, lr}
 801772e:	b084      	sub	sp, #16
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 8017734:	6878      	ldr	r0, [r7, #4]
 8017736:	f7ff ffe2 	bl	80176fe <tryget_socket>
 801773a:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	2b00      	cmp	r3, #0
 8017740:	d104      	bne.n	801774c <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 8017742:	4b05      	ldr	r3, [pc, #20]	@ (8017758 <get_socket+0x2c>)
 8017744:	2209      	movs	r2, #9
 8017746:	601a      	str	r2, [r3, #0]
    return NULL;
 8017748:	2300      	movs	r3, #0
 801774a:	e000      	b.n	801774e <get_socket+0x22>
  }
  return sock;
 801774c:	68fb      	ldr	r3, [r7, #12]
}
 801774e:	4618      	mov	r0, r3
 8017750:	3710      	adds	r7, #16
 8017752:	46bd      	mov	sp, r7
 8017754:	bd80      	pop	{r7, pc}
 8017756:	bf00      	nop
 8017758:	2400bfa8 	.word	0x2400bfa8

0801775c <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 801775c:	b580      	push	{r7, lr}
 801775e:	b084      	sub	sp, #16
 8017760:	af00      	add	r7, sp, #0
 8017762:	6078      	str	r0, [r7, #4]
 8017764:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8017766:	2300      	movs	r3, #0
 8017768:	60fb      	str	r3, [r7, #12]
 801776a:	e052      	b.n	8017812 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 801776c:	f00c fce0 	bl	8024130 <sys_arch_protect>
 8017770:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 8017772:	4a2c      	ldr	r2, [pc, #176]	@ (8017824 <alloc_socket+0xc8>)
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	011b      	lsls	r3, r3, #4
 8017778:	4413      	add	r3, r2
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d142      	bne.n	8017806 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8017780:	4a28      	ldr	r2, [pc, #160]	@ (8017824 <alloc_socket+0xc8>)
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	011b      	lsls	r3, r3, #4
 8017786:	4413      	add	r3, r2
 8017788:	687a      	ldr	r2, [r7, #4]
 801778a:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 801778c:	68b8      	ldr	r0, [r7, #8]
 801778e:	f00c fcdd 	bl	802414c <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 8017792:	4a24      	ldr	r2, [pc, #144]	@ (8017824 <alloc_socket+0xc8>)
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	011b      	lsls	r3, r3, #4
 8017798:	4413      	add	r3, r2
 801779a:	3304      	adds	r3, #4
 801779c:	2200      	movs	r2, #0
 801779e:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 80177a0:	4a20      	ldr	r2, [pc, #128]	@ (8017824 <alloc_socket+0xc8>)
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	011b      	lsls	r3, r3, #4
 80177a6:	4413      	add	r3, r2
 80177a8:	330e      	adds	r3, #14
 80177aa:	781b      	ldrb	r3, [r3, #0]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d006      	beq.n	80177be <alloc_socket+0x62>
 80177b0:	4b1d      	ldr	r3, [pc, #116]	@ (8017828 <alloc_socket+0xcc>)
 80177b2:	f240 220e 	movw	r2, #526	@ 0x20e
 80177b6:	491d      	ldr	r1, [pc, #116]	@ (801782c <alloc_socket+0xd0>)
 80177b8:	481d      	ldr	r0, [pc, #116]	@ (8017830 <alloc_socket+0xd4>)
 80177ba:	f00d fd53 	bl	8025264 <iprintf>
      sockets[i].rcvevent   = 0;
 80177be:	4a19      	ldr	r2, [pc, #100]	@ (8017824 <alloc_socket+0xc8>)
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	011b      	lsls	r3, r3, #4
 80177c4:	4413      	add	r3, r2
 80177c6:	3308      	adds	r3, #8
 80177c8:	2200      	movs	r2, #0
 80177ca:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	781b      	ldrb	r3, [r3, #0]
 80177d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80177d4:	2b10      	cmp	r3, #16
 80177d6:	d102      	bne.n	80177de <alloc_socket+0x82>
 80177d8:	683b      	ldr	r3, [r7, #0]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d001      	beq.n	80177e2 <alloc_socket+0x86>
 80177de:	2301      	movs	r3, #1
 80177e0:	e000      	b.n	80177e4 <alloc_socket+0x88>
 80177e2:	2300      	movs	r3, #0
 80177e4:	b299      	uxth	r1, r3
 80177e6:	4a0f      	ldr	r2, [pc, #60]	@ (8017824 <alloc_socket+0xc8>)
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	011b      	lsls	r3, r3, #4
 80177ec:	4413      	add	r3, r2
 80177ee:	330a      	adds	r3, #10
 80177f0:	460a      	mov	r2, r1
 80177f2:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 80177f4:	4a0b      	ldr	r2, [pc, #44]	@ (8017824 <alloc_socket+0xc8>)
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	011b      	lsls	r3, r3, #4
 80177fa:	4413      	add	r3, r2
 80177fc:	330c      	adds	r3, #12
 80177fe:	2200      	movs	r2, #0
 8017800:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	e00a      	b.n	801781c <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 8017806:	68b8      	ldr	r0, [r7, #8]
 8017808:	f00c fca0 	bl	802414c <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	3301      	adds	r3, #1
 8017810:	60fb      	str	r3, [r7, #12]
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	2b03      	cmp	r3, #3
 8017816:	dda9      	ble.n	801776c <alloc_socket+0x10>
  }
  return -1;
 8017818:	f04f 33ff 	mov.w	r3, #4294967295
}
 801781c:	4618      	mov	r0, r3
 801781e:	3710      	adds	r7, #16
 8017820:	46bd      	mov	sp, r7
 8017822:	bd80      	pop	{r7, pc}
 8017824:	24008cf8 	.word	0x24008cf8
 8017828:	08029ea0 	.word	0x08029ea0
 801782c:	08029ed4 	.word	0x08029ed4
 8017830:	08029ef4 	.word	0x08029ef4

08017834 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 8017834:	b480      	push	{r7}
 8017836:	b085      	sub	sp, #20
 8017838:	af00      	add	r7, sp, #0
 801783a:	60f8      	str	r0, [r7, #12]
 801783c:	60b9      	str	r1, [r7, #8]
 801783e:	607a      	str	r2, [r7, #4]
 8017840:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 8017842:	683b      	ldr	r3, [r7, #0]
 8017844:	68fa      	ldr	r2, [r7, #12]
 8017846:	6852      	ldr	r2, [r2, #4]
 8017848:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	2200      	movs	r2, #0
 801784e:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	681a      	ldr	r2, [r3, #0]
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	2200      	movs	r2, #0
 801785c:	601a      	str	r2, [r3, #0]
  return 1;
 801785e:	2301      	movs	r3, #1
}
 8017860:	4618      	mov	r0, r3
 8017862:	3714      	adds	r7, #20
 8017864:	46bd      	mov	sp, r7
 8017866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786a:	4770      	bx	lr

0801786c <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b084      	sub	sp, #16
 8017870:	af00      	add	r7, sp, #0
 8017872:	60f8      	str	r0, [r7, #12]
 8017874:	60b9      	str	r1, [r7, #8]
 8017876:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d00d      	beq.n	801789c <free_socket_free_elements+0x30>
    if (is_tcp) {
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d005      	beq.n	8017892 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	4618      	mov	r0, r3
 801788c:	f002 fd9c 	bl	801a3c8 <pbuf_free>
 8017890:	e004      	b.n	801789c <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	4618      	mov	r0, r3
 8017898:	f7ff fe78 	bl	801758c <netbuf_delete>
    }
  }
  if (conn != NULL) {
 801789c:	68bb      	ldr	r3, [r7, #8]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d002      	beq.n	80178a8 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 80178a2:	68b8      	ldr	r0, [r7, #8]
 80178a4:	f7fd ff0c 	bl	80156c0 <netconn_delete>
  }
}
 80178a8:	bf00      	nop
 80178aa:	3710      	adds	r7, #16
 80178ac:	46bd      	mov	sp, r7
 80178ae:	bd80      	pop	{r7, pc}

080178b0 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b086      	sub	sp, #24
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]
 80178b8:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 80178ba:	f00c fc39 	bl	8024130 <sys_arch_protect>
 80178be:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 80178c0:	f107 0308 	add.w	r3, r7, #8
 80178c4:	f107 020c 	add.w	r2, r7, #12
 80178c8:	6839      	ldr	r1, [r7, #0]
 80178ca:	6878      	ldr	r0, [r7, #4]
 80178cc:	f7ff ffb2 	bl	8017834 <free_socket_locked>
 80178d0:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 80178d2:	6978      	ldr	r0, [r7, #20]
 80178d4:	f00c fc3a 	bl	802414c <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 80178d8:	693b      	ldr	r3, [r7, #16]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d006      	beq.n	80178ec <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	f107 0208 	add.w	r2, r7, #8
 80178e4:	4619      	mov	r1, r3
 80178e6:	6838      	ldr	r0, [r7, #0]
 80178e8:	f7ff ffc0 	bl	801786c <free_socket_free_elements>
  }
}
 80178ec:	bf00      	nop
 80178ee:	3718      	adds	r7, #24
 80178f0:	46bd      	mov	sp, r7
 80178f2:	bd80      	pop	{r7, pc}

080178f4 <lwip_bind>:
  return newsock;
}

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 80178f4:	b580      	push	{r7, lr}
 80178f6:	b08a      	sub	sp, #40	@ 0x28
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	60f8      	str	r0, [r7, #12]
 80178fc:	60b9      	str	r1, [r7, #8]
 80178fe:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 8017900:	68f8      	ldr	r0, [r7, #12]
 8017902:	f7ff ff13 	bl	801772c <get_socket>
 8017906:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!sock) {
 8017908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801790a:	2b00      	cmp	r3, #0
 801790c:	d102      	bne.n	8017914 <lwip_bind+0x20>
    return -1;
 801790e:	f04f 33ff 	mov.w	r3, #4294967295
 8017912:	e051      	b.n	80179b8 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	2b10      	cmp	r3, #16
 8017918:	d108      	bne.n	801792c <lwip_bind+0x38>
 801791a:	68bb      	ldr	r3, [r7, #8]
 801791c:	785b      	ldrb	r3, [r3, #1]
 801791e:	2b02      	cmp	r3, #2
 8017920:	d104      	bne.n	801792c <lwip_bind+0x38>
 8017922:	68bb      	ldr	r3, [r7, #8]
 8017924:	f003 0303 	and.w	r3, r3, #3
 8017928:	2b00      	cmp	r3, #0
 801792a:	d014      	beq.n	8017956 <lwip_bind+0x62>
 801792c:	4b24      	ldr	r3, [pc, #144]	@ (80179c0 <lwip_bind+0xcc>)
 801792e:	f240 22e2 	movw	r2, #738	@ 0x2e2
 8017932:	4924      	ldr	r1, [pc, #144]	@ (80179c4 <lwip_bind+0xd0>)
 8017934:	4824      	ldr	r0, [pc, #144]	@ (80179c8 <lwip_bind+0xd4>)
 8017936:	f00d fc95 	bl	8025264 <iprintf>
 801793a:	f06f 000f 	mvn.w	r0, #15
 801793e:	f7ff fe07 	bl	8017550 <err_to_errno>
 8017942:	6178      	str	r0, [r7, #20]
 8017944:	697b      	ldr	r3, [r7, #20]
 8017946:	2b00      	cmp	r3, #0
 8017948:	d002      	beq.n	8017950 <lwip_bind+0x5c>
 801794a:	4a20      	ldr	r2, [pc, #128]	@ (80179cc <lwip_bind+0xd8>)
 801794c:	697b      	ldr	r3, [r7, #20]
 801794e:	6013      	str	r3, [r2, #0]
 8017950:	f04f 33ff 	mov.w	r3, #4294967295
 8017954:	e030      	b.n	80179b8 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8017956:	68bb      	ldr	r3, [r7, #8]
 8017958:	685b      	ldr	r3, [r3, #4]
 801795a:	613b      	str	r3, [r7, #16]
 801795c:	68bb      	ldr	r3, [r7, #8]
 801795e:	885b      	ldrh	r3, [r3, #2]
 8017960:	4618      	mov	r0, r3
 8017962:	f001 f855 	bl	8018a10 <lwip_htons>
 8017966:	4603      	mov	r3, r0
 8017968:	847b      	strh	r3, [r7, #34]	@ 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 801796a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017970:	f107 0110 	add.w	r1, r7, #16
 8017974:	4618      	mov	r0, r3
 8017976:	f7fd ff11 	bl	801579c <netconn_bind>
 801797a:	4603      	mov	r3, r0
 801797c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

  if (err != ERR_OK) {
 8017980:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8017984:	2b00      	cmp	r3, #0
 8017986:	d00e      	beq.n	80179a6 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8017988:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 801798c:	4618      	mov	r0, r3
 801798e:	f7ff fddf 	bl	8017550 <err_to_errno>
 8017992:	61b8      	str	r0, [r7, #24]
 8017994:	69bb      	ldr	r3, [r7, #24]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d002      	beq.n	80179a0 <lwip_bind+0xac>
 801799a:	4a0c      	ldr	r2, [pc, #48]	@ (80179cc <lwip_bind+0xd8>)
 801799c:	69bb      	ldr	r3, [r7, #24]
 801799e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 80179a0:	f04f 33ff 	mov.w	r3, #4294967295
 80179a4:	e008      	b.n	80179b8 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 80179a6:	2300      	movs	r3, #0
 80179a8:	61fb      	str	r3, [r7, #28]
 80179aa:	69fb      	ldr	r3, [r7, #28]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d002      	beq.n	80179b6 <lwip_bind+0xc2>
 80179b0:	4a06      	ldr	r2, [pc, #24]	@ (80179cc <lwip_bind+0xd8>)
 80179b2:	69fb      	ldr	r3, [r7, #28]
 80179b4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 80179b6:	2300      	movs	r3, #0
}
 80179b8:	4618      	mov	r0, r3
 80179ba:	3728      	adds	r7, #40	@ 0x28
 80179bc:	46bd      	mov	sp, r7
 80179be:	bd80      	pop	{r7, pc}
 80179c0:	08029ea0 	.word	0x08029ea0
 80179c4:	08029f44 	.word	0x08029f44
 80179c8:	08029ef4 	.word	0x08029ef4
 80179cc:	2400bfa8 	.word	0x2400bfa8

080179d0 <lwip_close>:

int
lwip_close(int s)
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b086      	sub	sp, #24
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 80179d8:	2300      	movs	r3, #0
 80179da:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 80179dc:	6878      	ldr	r0, [r7, #4]
 80179de:	f7ff fea5 	bl	801772c <get_socket>
 80179e2:	6138      	str	r0, [r7, #16]
  if (!sock) {
 80179e4:	693b      	ldr	r3, [r7, #16]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d102      	bne.n	80179f0 <lwip_close+0x20>
    return -1;
 80179ea:	f04f 33ff 	mov.w	r3, #4294967295
 80179ee:	e039      	b.n	8017a64 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 80179f0:	693b      	ldr	r3, [r7, #16]
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d00b      	beq.n	8017a10 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 80179f8:	693b      	ldr	r3, [r7, #16]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	781b      	ldrb	r3, [r3, #0]
 80179fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017a02:	2b10      	cmp	r3, #16
 8017a04:	bf0c      	ite	eq
 8017a06:	2301      	moveq	r3, #1
 8017a08:	2300      	movne	r3, #0
 8017a0a:	b2db      	uxtb	r3, r3
 8017a0c:	617b      	str	r3, [r7, #20]
 8017a0e:	e00a      	b.n	8017a26 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 8017a10:	693b      	ldr	r3, [r7, #16]
 8017a12:	685b      	ldr	r3, [r3, #4]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d006      	beq.n	8017a26 <lwip_close+0x56>
 8017a18:	4b14      	ldr	r3, [pc, #80]	@ (8017a6c <lwip_close+0x9c>)
 8017a1a:	f44f 7245 	mov.w	r2, #788	@ 0x314
 8017a1e:	4914      	ldr	r1, [pc, #80]	@ (8017a70 <lwip_close+0xa0>)
 8017a20:	4814      	ldr	r0, [pc, #80]	@ (8017a74 <lwip_close+0xa4>)
 8017a22:	f00d fc1f 	bl	8025264 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 8017a26:	693b      	ldr	r3, [r7, #16]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	f7fd fe24 	bl	8015678 <netconn_prepare_delete>
 8017a30:	4603      	mov	r3, r0
 8017a32:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d00e      	beq.n	8017a5a <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 8017a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017a40:	4618      	mov	r0, r3
 8017a42:	f7ff fd85 	bl	8017550 <err_to_errno>
 8017a46:	60b8      	str	r0, [r7, #8]
 8017a48:	68bb      	ldr	r3, [r7, #8]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d002      	beq.n	8017a54 <lwip_close+0x84>
 8017a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8017a78 <lwip_close+0xa8>)
 8017a50:	68bb      	ldr	r3, [r7, #8]
 8017a52:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8017a54:	f04f 33ff 	mov.w	r3, #4294967295
 8017a58:	e004      	b.n	8017a64 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 8017a5a:	6979      	ldr	r1, [r7, #20]
 8017a5c:	6938      	ldr	r0, [r7, #16]
 8017a5e:	f7ff ff27 	bl	80178b0 <free_socket>
  set_errno(0);
  return 0;
 8017a62:	2300      	movs	r3, #0
}
 8017a64:	4618      	mov	r0, r3
 8017a66:	3718      	adds	r7, #24
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	bd80      	pop	{r7, pc}
 8017a6c:	08029ea0 	.word	0x08029ea0
 8017a70:	08029f60 	.word	0x08029f60
 8017a74:	08029ef4 	.word	0x08029ef4
 8017a78:	2400bfa8 	.word	0x2400bfa8

08017a7c <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b08c      	sub	sp, #48	@ 0x30
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	60f8      	str	r0, [r7, #12]
 8017a84:	60b9      	str	r1, [r7, #8]
 8017a86:	607a      	str	r2, [r7, #4]
 8017a88:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 8017a8a:	2308      	movs	r3, #8
 8017a8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  ssize_t recvd = 0;
 8017a90:	2300      	movs	r3, #0
 8017a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	db01      	blt.n	8017a9e <lwip_recv_tcp+0x22>
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	e001      	b.n	8017aa2 <lwip_recv_tcp+0x26>
 8017a9e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017aa2:	627b      	str	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d106      	bne.n	8017ab8 <lwip_recv_tcp+0x3c>
 8017aaa:	4b74      	ldr	r3, [pc, #464]	@ (8017c7c <lwip_recv_tcp+0x200>)
 8017aac:	f240 329e 	movw	r2, #926	@ 0x39e
 8017ab0:	4973      	ldr	r1, [pc, #460]	@ (8017c80 <lwip_recv_tcp+0x204>)
 8017ab2:	4874      	ldr	r0, [pc, #464]	@ (8017c84 <lwip_recv_tcp+0x208>)
 8017ab4:	f00d fbd6 	bl	8025264 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	781b      	ldrb	r3, [r3, #0]
 8017abe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017ac2:	2b10      	cmp	r3, #16
 8017ac4:	d006      	beq.n	8017ad4 <lwip_recv_tcp+0x58>
 8017ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8017c7c <lwip_recv_tcp+0x200>)
 8017ac8:	f240 329f 	movw	r2, #927	@ 0x39f
 8017acc:	496e      	ldr	r1, [pc, #440]	@ (8017c88 <lwip_recv_tcp+0x20c>)
 8017ace:	486d      	ldr	r0, [pc, #436]	@ (8017c84 <lwip_recv_tcp+0x208>)
 8017ad0:	f00d fbc8 	bl	8025264 <iprintf>

  if (flags & MSG_DONTWAIT) {
 8017ad4:	683b      	ldr	r3, [r7, #0]
 8017ad6:	f003 0308 	and.w	r3, r3, #8
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d005      	beq.n	8017aea <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 8017ade:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017ae2:	f043 0304 	orr.w	r3, r3, #4
 8017ae6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	685b      	ldr	r3, [r3, #4]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d003      	beq.n	8017afa <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	685b      	ldr	r3, [r3, #4]
 8017af6:	617b      	str	r3, [r7, #20]
 8017af8:	e036      	b.n	8017b68 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	681b      	ldr	r3, [r3, #0]
 8017afe:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8017b02:	f107 0114 	add.w	r1, r7, #20
 8017b06:	4618      	mov	r0, r3
 8017b08:	f7fe f82a 	bl	8015b60 <netconn_recv_tcp_pbuf_flags>
 8017b0c:	4603      	mov	r3, r0
 8017b0e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 8017b12:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d019      	beq.n	8017b4e <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 8017b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	f300 808d 	bgt.w	8017c3c <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 8017b22:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8017b26:	4618      	mov	r0, r3
 8017b28:	f7ff fd12 	bl	8017550 <err_to_errno>
 8017b2c:	61f8      	str	r0, [r7, #28]
 8017b2e:	69fb      	ldr	r3, [r7, #28]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d002      	beq.n	8017b3a <lwip_recv_tcp+0xbe>
 8017b34:	4a55      	ldr	r2, [pc, #340]	@ (8017c8c <lwip_recv_tcp+0x210>)
 8017b36:	69fb      	ldr	r3, [r7, #28]
 8017b38:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 8017b3a:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8017b3e:	f113 0f0f 	cmn.w	r3, #15
 8017b42:	d101      	bne.n	8017b48 <lwip_recv_tcp+0xcc>
          return 0;
 8017b44:	2300      	movs	r3, #0
 8017b46:	e094      	b.n	8017c72 <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 8017b48:	f04f 33ff 	mov.w	r3, #4294967295
 8017b4c:	e091      	b.n	8017c72 <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 8017b4e:	697b      	ldr	r3, [r7, #20]
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d106      	bne.n	8017b62 <lwip_recv_tcp+0xe6>
 8017b54:	4b49      	ldr	r3, [pc, #292]	@ (8017c7c <lwip_recv_tcp+0x200>)
 8017b56:	f240 32c5 	movw	r2, #965	@ 0x3c5
 8017b5a:	494d      	ldr	r1, [pc, #308]	@ (8017c90 <lwip_recv_tcp+0x214>)
 8017b5c:	4849      	ldr	r0, [pc, #292]	@ (8017c84 <lwip_recv_tcp+0x208>)
 8017b5e:	f00d fb81 	bl	8025264 <iprintf>
      sock->lastdata.pbuf = p;
 8017b62:	697a      	ldr	r2, [r7, #20]
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 8017b68:	697b      	ldr	r3, [r7, #20]
 8017b6a:	891b      	ldrh	r3, [r3, #8]
 8017b6c:	461a      	mov	r2, r3
 8017b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b70:	4293      	cmp	r3, r2
 8017b72:	dd03      	ble.n	8017b7c <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 8017b74:	697b      	ldr	r3, [r7, #20]
 8017b76:	891b      	ldrh	r3, [r3, #8]
 8017b78:	847b      	strh	r3, [r7, #34]	@ 0x22
 8017b7a:	e001      	b.n	8017b80 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 8017b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b7e:	847b      	strh	r3, [r7, #34]	@ 0x22
    }
    if (recvd + copylen < recvd) {
 8017b80:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b84:	4413      	add	r3, r2
 8017b86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017b88:	429a      	cmp	r2, r3
 8017b8a:	dd03      	ble.n	8017b94 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 8017b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b8e:	b29b      	uxth	r3, r3
 8017b90:	43db      	mvns	r3, r3
 8017b92:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8017b94:	6978      	ldr	r0, [r7, #20]
 8017b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b98:	68ba      	ldr	r2, [r7, #8]
 8017b9a:	18d1      	adds	r1, r2, r3
 8017b9c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017b9e:	2300      	movs	r3, #0
 8017ba0:	f002 fe18 	bl	801a7d4 <pbuf_copy_partial>

    recvd += copylen;
 8017ba4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017ba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017ba8:	4413      	add	r3, r2
 8017baa:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8017bac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017bb0:	429a      	cmp	r2, r3
 8017bb2:	da06      	bge.n	8017bc2 <lwip_recv_tcp+0x146>
 8017bb4:	4b31      	ldr	r3, [pc, #196]	@ (8017c7c <lwip_recv_tcp+0x200>)
 8017bb6:	f240 32dd 	movw	r2, #989	@ 0x3dd
 8017bba:	4936      	ldr	r1, [pc, #216]	@ (8017c94 <lwip_recv_tcp+0x218>)
 8017bbc:	4831      	ldr	r0, [pc, #196]	@ (8017c84 <lwip_recv_tcp+0x208>)
 8017bbe:	f00d fb51 	bl	8025264 <iprintf>
    recv_left -= copylen;
 8017bc2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017bc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017bc6:	1ad3      	subs	r3, r2, r3
 8017bc8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 8017bca:	683b      	ldr	r3, [r7, #0]
 8017bcc:	f003 0301 	and.w	r3, r3, #1
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d123      	bne.n	8017c1c <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8017bd4:	697b      	ldr	r3, [r7, #20]
 8017bd6:	891b      	ldrh	r3, [r3, #8]
 8017bd8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017bda:	429a      	cmp	r2, r3
 8017bdc:	d906      	bls.n	8017bec <lwip_recv_tcp+0x170>
 8017bde:	4b27      	ldr	r3, [pc, #156]	@ (8017c7c <lwip_recv_tcp+0x200>)
 8017be0:	f240 32e3 	movw	r2, #995	@ 0x3e3
 8017be4:	492c      	ldr	r1, [pc, #176]	@ (8017c98 <lwip_recv_tcp+0x21c>)
 8017be6:	4827      	ldr	r0, [pc, #156]	@ (8017c84 <lwip_recv_tcp+0x208>)
 8017be8:	f00d fb3c 	bl	8025264 <iprintf>
      if (p->tot_len - copylen > 0) {
 8017bec:	697b      	ldr	r3, [r7, #20]
 8017bee:	891b      	ldrh	r3, [r3, #8]
 8017bf0:	461a      	mov	r2, r3
 8017bf2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017bf4:	1ad3      	subs	r3, r2, r3
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	dd09      	ble.n	8017c0e <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8017bfa:	697b      	ldr	r3, [r7, #20]
 8017bfc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017bfe:	4611      	mov	r1, r2
 8017c00:	4618      	mov	r0, r3
 8017c02:	f002 fbae 	bl	801a362 <pbuf_free_header>
 8017c06:	4602      	mov	r2, r0
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	605a      	str	r2, [r3, #4]
 8017c0c:	e006      	b.n	8017c1c <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	2200      	movs	r2, #0
 8017c12:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 8017c14:	697b      	ldr	r3, [r7, #20]
 8017c16:	4618      	mov	r0, r3
 8017c18:	f002 fbd6 	bl	801a3c8 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8017c1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017c20:	f043 0314 	orr.w	r3, r3, #20
 8017c24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8017c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	dd08      	ble.n	8017c40 <lwip_recv_tcp+0x1c4>
 8017c2e:	683b      	ldr	r3, [r7, #0]
 8017c30:	f003 0301 	and.w	r3, r3, #1
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	f43f af58 	beq.w	8017aea <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 8017c3a:	e001      	b.n	8017c40 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 8017c3c:	bf00      	nop
 8017c3e:	e000      	b.n	8017c42 <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 8017c40:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8017c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	dd0b      	ble.n	8017c60 <lwip_recv_tcp+0x1e4>
 8017c48:	683b      	ldr	r3, [r7, #0]
 8017c4a:	f003 0301 	and.w	r3, r3, #1
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d106      	bne.n	8017c60 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 8017c52:	68fb      	ldr	r3, [r7, #12]
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017c58:	4611      	mov	r1, r2
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	f7fd fece 	bl	80159fc <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 8017c60:	2300      	movs	r3, #0
 8017c62:	61bb      	str	r3, [r7, #24]
 8017c64:	69bb      	ldr	r3, [r7, #24]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d002      	beq.n	8017c70 <lwip_recv_tcp+0x1f4>
 8017c6a:	4a08      	ldr	r2, [pc, #32]	@ (8017c8c <lwip_recv_tcp+0x210>)
 8017c6c:	69bb      	ldr	r3, [r7, #24]
 8017c6e:	6013      	str	r3, [r2, #0]
  return recvd;
 8017c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8017c72:	4618      	mov	r0, r3
 8017c74:	3730      	adds	r7, #48	@ 0x30
 8017c76:	46bd      	mov	sp, r7
 8017c78:	bd80      	pop	{r7, pc}
 8017c7a:	bf00      	nop
 8017c7c:	08029ea0 	.word	0x08029ea0
 8017c80:	08029f98 	.word	0x08029f98
 8017c84:	08029ef4 	.word	0x08029ef4
 8017c88:	08029fa8 	.word	0x08029fa8
 8017c8c:	2400bfa8 	.word	0x2400bfa8
 8017c90:	08029fcc 	.word	0x08029fcc
 8017c94:	08029fd8 	.word	0x08029fd8
 8017c98:	0802a000 	.word	0x0802a000

08017c9c <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 8017c9c:	b590      	push	{r4, r7, lr}
 8017c9e:	b08b      	sub	sp, #44	@ 0x2c
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	60f8      	str	r0, [r7, #12]
 8017ca4:	60b9      	str	r1, [r7, #8]
 8017ca6:	603b      	str	r3, [r7, #0]
 8017ca8:	4613      	mov	r3, r2
 8017caa:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 8017cac:	2300      	movs	r3, #0
 8017cae:	627b      	str	r3, [r7, #36]	@ 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 8017cb0:	68bb      	ldr	r3, [r7, #8]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d106      	bne.n	8017cc4 <lwip_sock_make_addr+0x28>
 8017cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8017d64 <lwip_sock_make_addr+0xc8>)
 8017cb8:	f240 4207 	movw	r2, #1031	@ 0x407
 8017cbc:	492a      	ldr	r1, [pc, #168]	@ (8017d68 <lwip_sock_make_addr+0xcc>)
 8017cbe:	482b      	ldr	r0, [pc, #172]	@ (8017d6c <lwip_sock_make_addr+0xd0>)
 8017cc0:	f00d fad0 	bl	8025264 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 8017cc4:	683b      	ldr	r3, [r7, #0]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d106      	bne.n	8017cd8 <lwip_sock_make_addr+0x3c>
 8017cca:	4b26      	ldr	r3, [pc, #152]	@ (8017d64 <lwip_sock_make_addr+0xc8>)
 8017ccc:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 8017cd0:	4927      	ldr	r1, [pc, #156]	@ (8017d70 <lwip_sock_make_addr+0xd4>)
 8017cd2:	4826      	ldr	r0, [pc, #152]	@ (8017d6c <lwip_sock_make_addr+0xd0>)
 8017cd4:	f00d fac6 	bl	8025264 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8017cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d106      	bne.n	8017cec <lwip_sock_make_addr+0x50>
 8017cde:	4b21      	ldr	r3, [pc, #132]	@ (8017d64 <lwip_sock_make_addr+0xc8>)
 8017ce0:	f240 4209 	movw	r2, #1033	@ 0x409
 8017ce4:	4923      	ldr	r1, [pc, #140]	@ (8017d74 <lwip_sock_make_addr+0xd8>)
 8017ce6:	4821      	ldr	r0, [pc, #132]	@ (8017d6c <lwip_sock_make_addr+0xd0>)
 8017ce8:	f00d fabc 	bl	8025264 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8017cec:	f107 0314 	add.w	r3, r7, #20
 8017cf0:	2210      	movs	r2, #16
 8017cf2:	701a      	strb	r2, [r3, #0]
 8017cf4:	f107 0314 	add.w	r3, r7, #20
 8017cf8:	2202      	movs	r2, #2
 8017cfa:	705a      	strb	r2, [r3, #1]
 8017cfc:	f107 0414 	add.w	r4, r7, #20
 8017d00:	88fb      	ldrh	r3, [r7, #6]
 8017d02:	4618      	mov	r0, r3
 8017d04:	f000 fe84 	bl	8018a10 <lwip_htons>
 8017d08:	4603      	mov	r3, r0
 8017d0a:	8063      	strh	r3, [r4, #2]
 8017d0c:	f107 0314 	add.w	r3, r7, #20
 8017d10:	68ba      	ldr	r2, [r7, #8]
 8017d12:	6812      	ldr	r2, [r2, #0]
 8017d14:	605a      	str	r2, [r3, #4]
 8017d16:	f107 0314 	add.w	r3, r7, #20
 8017d1a:	3308      	adds	r3, #8
 8017d1c:	2208      	movs	r2, #8
 8017d1e:	2100      	movs	r1, #0
 8017d20:	4618      	mov	r0, r3
 8017d22:	f00d fb8b 	bl	802543c <memset>
  if (*fromlen < saddr.sa.sa_len) {
 8017d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	7d3a      	ldrb	r2, [r7, #20]
 8017d2c:	4293      	cmp	r3, r2
 8017d2e:	d202      	bcs.n	8017d36 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 8017d30:	2301      	movs	r3, #1
 8017d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8017d34:	e008      	b.n	8017d48 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 8017d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	7d3a      	ldrb	r2, [r7, #20]
 8017d3c:	4293      	cmp	r3, r2
 8017d3e:	d903      	bls.n	8017d48 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 8017d40:	7d3b      	ldrb	r3, [r7, #20]
 8017d42:	461a      	mov	r2, r3
 8017d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d46:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 8017d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d4a:	681a      	ldr	r2, [r3, #0]
 8017d4c:	f107 0314 	add.w	r3, r7, #20
 8017d50:	4619      	mov	r1, r3
 8017d52:	6838      	ldr	r0, [r7, #0]
 8017d54:	f00d fc13 	bl	802557e <memcpy>
  return truncated;
 8017d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	372c      	adds	r7, #44	@ 0x2c
 8017d5e:	46bd      	mov	sp, r7
 8017d60:	bd90      	pop	{r4, r7, pc}
 8017d62:	bf00      	nop
 8017d64:	08029ea0 	.word	0x08029ea0
 8017d68:	0802a010 	.word	0x0802a010
 8017d6c:	08029ef4 	.word	0x08029ef4
 8017d70:	0802a024 	.word	0x0802a024
 8017d74:	0802a034 	.word	0x0802a034

08017d78 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b088      	sub	sp, #32
 8017d7c:	af02      	add	r7, sp, #8
 8017d7e:	60f8      	str	r0, [r7, #12]
 8017d80:	60b9      	str	r1, [r7, #8]
 8017d82:	607a      	str	r2, [r7, #4]
 8017d84:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d101      	bne.n	8017d90 <lwip_recv_tcp_from+0x18>
    return 0;
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	e021      	b.n	8017dd4 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 8017d90:	68bb      	ldr	r3, [r7, #8]
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d01d      	beq.n	8017dd2 <lwip_recv_tcp_from+0x5a>
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d01a      	beq.n	8017dd2 <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	6818      	ldr	r0, [r3, #0]
 8017da0:	f107 0216 	add.w	r2, r7, #22
 8017da4:	f107 0110 	add.w	r1, r7, #16
 8017da8:	2300      	movs	r3, #0
 8017daa:	f7fd fca5 	bl	80156f8 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 8017dae:	68bb      	ldr	r3, [r7, #8]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d00e      	beq.n	8017dd2 <lwip_recv_tcp_from+0x5a>
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d00b      	beq.n	8017dd2 <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	6818      	ldr	r0, [r3, #0]
 8017dbe:	8afa      	ldrh	r2, [r7, #22]
 8017dc0:	f107 0110 	add.w	r1, r7, #16
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	9300      	str	r3, [sp, #0]
 8017dc8:	68bb      	ldr	r3, [r7, #8]
 8017dca:	f7ff ff67 	bl	8017c9c <lwip_sock_make_addr>
 8017dce:	4603      	mov	r3, r0
 8017dd0:	e000      	b.n	8017dd4 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 8017dd2:	2300      	movs	r3, #0
}
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	3718      	adds	r7, #24
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	bd80      	pop	{r7, pc}

08017ddc <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 8017ddc:	b590      	push	{r4, r7, lr}
 8017dde:	b08d      	sub	sp, #52	@ 0x34
 8017de0:	af02      	add	r7, sp, #8
 8017de2:	60f8      	str	r0, [r7, #12]
 8017de4:	60b9      	str	r1, [r7, #8]
 8017de6:	607a      	str	r2, [r7, #4]
 8017de8:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	689b      	ldr	r3, [r3, #8]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d10d      	bne.n	8017e0e <lwip_recvfrom_udp_raw+0x32>
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	68db      	ldr	r3, [r3, #12]
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	dd09      	ble.n	8017e0e <lwip_recvfrom_udp_raw+0x32>
 8017dfa:	4b5e      	ldr	r3, [pc, #376]	@ (8017f74 <lwip_recvfrom_udp_raw+0x198>)
 8017dfc:	f240 4249 	movw	r2, #1097	@ 0x449
 8017e00:	495d      	ldr	r1, [pc, #372]	@ (8017f78 <lwip_recvfrom_udp_raw+0x19c>)
 8017e02:	485e      	ldr	r0, [pc, #376]	@ (8017f7c <lwip_recvfrom_udp_raw+0x1a0>)
 8017e04:	f00d fa2e 	bl	8025264 <iprintf>
 8017e08:	f06f 030f 	mvn.w	r3, #15
 8017e0c:	e0ad      	b.n	8017f6a <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 8017e0e:	68bb      	ldr	r3, [r7, #8]
 8017e10:	f003 0308 	and.w	r3, r3, #8
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d003      	beq.n	8017e20 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 8017e18:	2304      	movs	r3, #4
 8017e1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017e1e:	e002      	b.n	8017e26 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 8017e20:	2300      	movs	r3, #0
 8017e22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	685b      	ldr	r3, [r3, #4]
 8017e2a:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 8017e2c:	693b      	ldr	r3, [r7, #16]
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d11e      	bne.n	8017e70 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8017e3a:	f107 0110 	add.w	r1, r7, #16
 8017e3e:	4618      	mov	r0, r3
 8017e40:	f7fd feba 	bl	8015bb8 <netconn_recv_udp_raw_netbuf_flags>
 8017e44:	4603      	mov	r3, r0
 8017e46:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 8017e48:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d002      	beq.n	8017e56 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 8017e50:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017e54:	e089      	b.n	8017f6a <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8017e56:	693b      	ldr	r3, [r7, #16]
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d106      	bne.n	8017e6a <lwip_recvfrom_udp_raw+0x8e>
 8017e5c:	4b45      	ldr	r3, [pc, #276]	@ (8017f74 <lwip_recvfrom_udp_raw+0x198>)
 8017e5e:	f240 425e 	movw	r2, #1118	@ 0x45e
 8017e62:	4947      	ldr	r1, [pc, #284]	@ (8017f80 <lwip_recvfrom_udp_raw+0x1a4>)
 8017e64:	4845      	ldr	r0, [pc, #276]	@ (8017f7c <lwip_recvfrom_udp_raw+0x1a0>)
 8017e66:	f00d f9fd 	bl	8025264 <iprintf>
    sock->lastdata.netbuf = buf;
 8017e6a:	693a      	ldr	r2, [r7, #16]
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 8017e70:	693b      	ldr	r3, [r7, #16]
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	891b      	ldrh	r3, [r3, #8]
 8017e76:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 8017e78:	2300      	movs	r3, #0
 8017e7a:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	61fb      	str	r3, [r7, #28]
 8017e80:	e029      	b.n	8017ed6 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 8017e82:	8b3a      	ldrh	r2, [r7, #24]
 8017e84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017e86:	1ad3      	subs	r3, r2, r3
 8017e88:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	689a      	ldr	r2, [r3, #8]
 8017e8e:	69fb      	ldr	r3, [r7, #28]
 8017e90:	00db      	lsls	r3, r3, #3
 8017e92:	4413      	add	r3, r2
 8017e94:	685a      	ldr	r2, [r3, #4]
 8017e96:	8afb      	ldrh	r3, [r7, #22]
 8017e98:	429a      	cmp	r2, r3
 8017e9a:	d902      	bls.n	8017ea2 <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 8017e9c:	8afb      	ldrh	r3, [r7, #22]
 8017e9e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8017ea0:	e006      	b.n	8017eb0 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	689a      	ldr	r2, [r3, #8]
 8017ea6:	69fb      	ldr	r3, [r7, #28]
 8017ea8:	00db      	lsls	r3, r3, #3
 8017eaa:	4413      	add	r3, r2
 8017eac:	685b      	ldr	r3, [r3, #4]
 8017eae:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8017eb0:	693b      	ldr	r3, [r7, #16]
 8017eb2:	6818      	ldr	r0, [r3, #0]
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	689a      	ldr	r2, [r3, #8]
 8017eb8:	69fb      	ldr	r3, [r7, #28]
 8017eba:	00db      	lsls	r3, r3, #3
 8017ebc:	4413      	add	r3, r2
 8017ebe:	6819      	ldr	r1, [r3, #0]
 8017ec0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017ec2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017ec4:	f002 fc86 	bl	801a7d4 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 8017ec8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017eca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017ecc:	4413      	add	r3, r2
 8017ece:	847b      	strh	r3, [r7, #34]	@ 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8017ed0:	69fb      	ldr	r3, [r7, #28]
 8017ed2:	3301      	adds	r3, #1
 8017ed4:	61fb      	str	r3, [r7, #28]
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	68db      	ldr	r3, [r3, #12]
 8017eda:	69fa      	ldr	r2, [r7, #28]
 8017edc:	429a      	cmp	r2, r3
 8017ede:	da03      	bge.n	8017ee8 <lwip_recvfrom_udp_raw+0x10c>
 8017ee0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017ee2:	8b3b      	ldrh	r3, [r7, #24]
 8017ee4:	429a      	cmp	r2, r3
 8017ee6:	d3cc      	bcc.n	8017e82 <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d01a      	beq.n	8017f26 <lwip_recvfrom_udp_raw+0x14a>
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	685b      	ldr	r3, [r3, #4]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d016      	beq.n	8017f26 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d012      	beq.n	8017f26 <lwip_recvfrom_udp_raw+0x14a>
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	685b      	ldr	r3, [r3, #4]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d00e      	beq.n	8017f26 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	6818      	ldr	r0, [r3, #0]
 8017f0c:	693b      	ldr	r3, [r7, #16]
 8017f0e:	f103 0108 	add.w	r1, r3, #8
 8017f12:	693b      	ldr	r3, [r7, #16]
 8017f14:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	3304      	adds	r3, #4
 8017f1e:	9300      	str	r3, [sp, #0]
 8017f20:	4623      	mov	r3, r4
 8017f22:	f7ff febb 	bl	8017c9c <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	2200      	movs	r2, #0
 8017f2a:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	691b      	ldr	r3, [r3, #16]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d007      	beq.n	8017f44 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 8017f34:	2300      	movs	r3, #0
 8017f36:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 8017f38:	7d7b      	ldrb	r3, [r7, #21]
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d102      	bne.n	8017f44 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	2200      	movs	r2, #0
 8017f42:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 8017f44:	68bb      	ldr	r3, [r7, #8]
 8017f46:	f003 0301 	and.w	r3, r3, #1
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d106      	bne.n	8017f5c <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	2200      	movs	r2, #0
 8017f52:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 8017f54:	693b      	ldr	r3, [r7, #16]
 8017f56:	4618      	mov	r0, r3
 8017f58:	f7ff fb18 	bl	801758c <netbuf_delete>
  }
  if (datagram_len) {
 8017f5c:	683b      	ldr	r3, [r7, #0]
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d002      	beq.n	8017f68 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 8017f62:	683b      	ldr	r3, [r7, #0]
 8017f64:	8b3a      	ldrh	r2, [r7, #24]
 8017f66:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 8017f68:	2300      	movs	r3, #0
}
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	372c      	adds	r7, #44	@ 0x2c
 8017f6e:	46bd      	mov	sp, r7
 8017f70:	bd90      	pop	{r4, r7, pc}
 8017f72:	bf00      	nop
 8017f74:	08029ea0 	.word	0x08029ea0
 8017f78:	0802a044 	.word	0x0802a044
 8017f7c:	08029ef4 	.word	0x08029ef4
 8017f80:	0802a070 	.word	0x0802a070

08017f84 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b096      	sub	sp, #88	@ 0x58
 8017f88:	af02      	add	r7, sp, #8
 8017f8a:	60f8      	str	r0, [r7, #12]
 8017f8c:	60b9      	str	r1, [r7, #8]
 8017f8e:	607a      	str	r2, [r7, #4]
 8017f90:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 8017f92:	68f8      	ldr	r0, [r7, #12]
 8017f94:	f7ff fbca 	bl	801772c <get_socket>
 8017f98:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (!sock) {
 8017f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d102      	bne.n	8017fa6 <lwip_recvfrom+0x22>
    return -1;
 8017fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8017fa4:	e078      	b.n	8018098 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8017fa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	781b      	ldrb	r3, [r3, #0]
 8017fac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017fb0:	2b10      	cmp	r3, #16
 8017fb2:	d112      	bne.n	8017fda <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 8017fb4:	683b      	ldr	r3, [r7, #0]
 8017fb6:	687a      	ldr	r2, [r7, #4]
 8017fb8:	68b9      	ldr	r1, [r7, #8]
 8017fba:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8017fbc:	f7ff fd5e 	bl	8017a7c <lwip_recv_tcp>
 8017fc0:	6478      	str	r0, [r7, #68]	@ 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 8017fc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017fc4:	9301      	str	r3, [sp, #4]
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	9300      	str	r3, [sp, #0]
 8017fca:	4b35      	ldr	r3, [pc, #212]	@ (80180a0 <lwip_recvfrom+0x11c>)
 8017fcc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8017fce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8017fd0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8017fd2:	f7ff fed1 	bl	8017d78 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 8017fd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017fd8:	e05e      	b.n	8018098 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 8017fda:	2300      	movs	r3, #0
 8017fdc:	877b      	strh	r3, [r7, #58]	@ 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 8017fde:	68bb      	ldr	r3, [r7, #8]
 8017fe0:	633b      	str	r3, [r7, #48]	@ 0x30
    vec.iov_len = len;
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	637b      	str	r3, [r7, #52]	@ 0x34
    msg.msg_control = NULL;
 8017fe6:	2300      	movs	r3, #0
 8017fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    msg.msg_controllen = 0;
 8017fea:	2300      	movs	r3, #0
 8017fec:	62bb      	str	r3, [r7, #40]	@ 0x28
    msg.msg_flags = 0;
 8017fee:	2300      	movs	r3, #0
 8017ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    msg.msg_iov = &vec;
 8017ff2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017ff6:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 8017ff8:	2301      	movs	r3, #1
 8017ffa:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 8017ffc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017ffe:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 8018000:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018002:	2b00      	cmp	r3, #0
 8018004:	d002      	beq.n	801800c <lwip_recvfrom+0x88>
 8018006:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	e000      	b.n	801800e <lwip_recvfrom+0x8a>
 801800c:	2300      	movs	r3, #0
 801800e:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 8018010:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 8018014:	f107 0214 	add.w	r2, r7, #20
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	9300      	str	r3, [sp, #0]
 801801c:	460b      	mov	r3, r1
 801801e:	6839      	ldr	r1, [r7, #0]
 8018020:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8018022:	f7ff fedb 	bl	8017ddc <lwip_recvfrom_udp_raw>
 8018026:	4603      	mov	r3, r0
 8018028:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    if (err != ERR_OK) {
 801802c:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 8018030:	2b00      	cmp	r3, #0
 8018032:	d00e      	beq.n	8018052 <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 8018034:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 8018038:	4618      	mov	r0, r3
 801803a:	f7ff fa89 	bl	8017550 <err_to_errno>
 801803e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8018040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018042:	2b00      	cmp	r3, #0
 8018044:	d002      	beq.n	801804c <lwip_recvfrom+0xc8>
 8018046:	4a17      	ldr	r2, [pc, #92]	@ (80180a4 <lwip_recvfrom+0x120>)
 8018048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801804a:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 801804c:	f04f 33ff 	mov.w	r3, #4294967295
 8018050:	e022      	b.n	8018098 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 8018052:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018054:	461a      	mov	r2, r3
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	4293      	cmp	r3, r2
 801805a:	bf28      	it	cs
 801805c:	4613      	movcs	r3, r2
 801805e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8018062:	4293      	cmp	r3, r2
 8018064:	d206      	bcs.n	8018074 <lwip_recvfrom+0xf0>
 8018066:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018068:	461a      	mov	r2, r3
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	4293      	cmp	r3, r2
 801806e:	bf28      	it	cs
 8018070:	4613      	movcs	r3, r2
 8018072:	e001      	b.n	8018078 <lwip_recvfrom+0xf4>
 8018074:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018078:	647b      	str	r3, [r7, #68]	@ 0x44
    if (fromlen) {
 801807a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801807c:	2b00      	cmp	r3, #0
 801807e:	d002      	beq.n	8018086 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 8018080:	69ba      	ldr	r2, [r7, #24]
 8018082:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018084:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 8018086:	2300      	movs	r3, #0
 8018088:	643b      	str	r3, [r7, #64]	@ 0x40
 801808a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801808c:	2b00      	cmp	r3, #0
 801808e:	d002      	beq.n	8018096 <lwip_recvfrom+0x112>
 8018090:	4a04      	ldr	r2, [pc, #16]	@ (80180a4 <lwip_recvfrom+0x120>)
 8018092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018094:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 8018096:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8018098:	4618      	mov	r0, r3
 801809a:	3750      	adds	r7, #80	@ 0x50
 801809c:	46bd      	mov	sp, r7
 801809e:	bd80      	pop	{r7, pc}
 80180a0:	0802a07c 	.word	0x0802a07c
 80180a4:	2400bfa8 	.word	0x2400bfa8

080180a8 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 80180a8:	b580      	push	{r7, lr}
 80180aa:	b08a      	sub	sp, #40	@ 0x28
 80180ac:	af02      	add	r7, sp, #8
 80180ae:	60f8      	str	r0, [r7, #12]
 80180b0:	60b9      	str	r1, [r7, #8]
 80180b2:	607a      	str	r2, [r7, #4]
 80180b4:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 80180b6:	68f8      	ldr	r0, [r7, #12]
 80180b8:	f7ff fb38 	bl	801772c <get_socket>
 80180bc:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 80180be:	69fb      	ldr	r3, [r7, #28]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d102      	bne.n	80180ca <lwip_send+0x22>
    return -1;
 80180c4:	f04f 33ff 	mov.w	r3, #4294967295
 80180c8:	e046      	b.n	8018158 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80180ca:	69fb      	ldr	r3, [r7, #28]
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	781b      	ldrb	r3, [r3, #0]
 80180d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80180d4:	2b10      	cmp	r3, #16
 80180d6:	d00b      	beq.n	80180f0 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 80180d8:	2300      	movs	r3, #0
 80180da:	9301      	str	r3, [sp, #4]
 80180dc:	2300      	movs	r3, #0
 80180de:	9300      	str	r3, [sp, #0]
 80180e0:	683b      	ldr	r3, [r7, #0]
 80180e2:	687a      	ldr	r2, [r7, #4]
 80180e4:	68b9      	ldr	r1, [r7, #8]
 80180e6:	68f8      	ldr	r0, [r7, #12]
 80180e8:	f000 f83c 	bl	8018164 <lwip_sendto>
 80180ec:	4603      	mov	r3, r0
 80180ee:	e033      	b.n	8018158 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80180f0:	683b      	ldr	r3, [r7, #0]
 80180f2:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d001      	beq.n	80180fe <lwip_send+0x56>
 80180fa:	2203      	movs	r2, #3
 80180fc:	e000      	b.n	8018100 <lwip_send+0x58>
 80180fe:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8018100:	683b      	ldr	r3, [r7, #0]
 8018102:	105b      	asrs	r3, r3, #1
 8018104:	b25b      	sxtb	r3, r3
 8018106:	f003 0304 	and.w	r3, r3, #4
 801810a:	b25b      	sxtb	r3, r3
 801810c:	4313      	orrs	r3, r2
 801810e:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 8018110:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 8018112:	2300      	movs	r3, #0
 8018114:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8018116:	69fb      	ldr	r3, [r7, #28]
 8018118:	6818      	ldr	r0, [r3, #0]
 801811a:	7efa      	ldrb	r2, [r7, #27]
 801811c:	f107 0310 	add.w	r3, r7, #16
 8018120:	9300      	str	r3, [sp, #0]
 8018122:	4613      	mov	r3, r2
 8018124:	687a      	ldr	r2, [r7, #4]
 8018126:	68b9      	ldr	r1, [r7, #8]
 8018128:	f7fd fda0 	bl	8015c6c <netconn_write_partly>
 801812c:	4603      	mov	r3, r0
 801812e:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 8018130:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018134:	4618      	mov	r0, r3
 8018136:	f7ff fa0b 	bl	8017550 <err_to_errno>
 801813a:	6178      	str	r0, [r7, #20]
 801813c:	697b      	ldr	r3, [r7, #20]
 801813e:	2b00      	cmp	r3, #0
 8018140:	d002      	beq.n	8018148 <lwip_send+0xa0>
 8018142:	4a07      	ldr	r2, [pc, #28]	@ (8018160 <lwip_send+0xb8>)
 8018144:	697b      	ldr	r3, [r7, #20]
 8018146:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 8018148:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d101      	bne.n	8018154 <lwip_send+0xac>
 8018150:	693b      	ldr	r3, [r7, #16]
 8018152:	e001      	b.n	8018158 <lwip_send+0xb0>
 8018154:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018158:	4618      	mov	r0, r3
 801815a:	3720      	adds	r7, #32
 801815c:	46bd      	mov	sp, r7
 801815e:	bd80      	pop	{r7, pc}
 8018160:	2400bfa8 	.word	0x2400bfa8

08018164 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 8018164:	b580      	push	{r7, lr}
 8018166:	b08e      	sub	sp, #56	@ 0x38
 8018168:	af00      	add	r7, sp, #0
 801816a:	60f8      	str	r0, [r7, #12]
 801816c:	60b9      	str	r1, [r7, #8]
 801816e:	607a      	str	r2, [r7, #4]
 8018170:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 8018172:	68f8      	ldr	r0, [r7, #12]
 8018174:	f7ff fada 	bl	801772c <get_socket>
 8018178:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 801817a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801817c:	2b00      	cmp	r3, #0
 801817e:	d102      	bne.n	8018186 <lwip_sendto+0x22>
    return -1;
 8018180:	f04f 33ff 	mov.w	r3, #4294967295
 8018184:	e093      	b.n	80182ae <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8018186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	781b      	ldrb	r3, [r3, #0]
 801818c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018190:	2b10      	cmp	r3, #16
 8018192:	d107      	bne.n	80181a4 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 8018194:	683b      	ldr	r3, [r7, #0]
 8018196:	687a      	ldr	r2, [r7, #4]
 8018198:	68b9      	ldr	r1, [r7, #8]
 801819a:	68f8      	ldr	r0, [r7, #12]
 801819c:	f7ff ff84 	bl	80180a8 <lwip_send>
 80181a0:	4603      	mov	r3, r0
 80181a2:	e084      	b.n	80182ae <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80181aa:	d30a      	bcc.n	80181c2 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 80181ac:	235a      	movs	r3, #90	@ 0x5a
 80181ae:	623b      	str	r3, [r7, #32]
 80181b0:	6a3b      	ldr	r3, [r7, #32]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d002      	beq.n	80181bc <lwip_sendto+0x58>
 80181b6:	4a40      	ldr	r2, [pc, #256]	@ (80182b8 <lwip_sendto+0x154>)
 80181b8:	6a3b      	ldr	r3, [r7, #32]
 80181ba:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 80181bc:	f04f 33ff 	mov.w	r3, #4294967295
 80181c0:	e075      	b.n	80182ae <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 80181c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d102      	bne.n	80181d2 <lwip_sendto+0x6e>
 80181cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d023      	beq.n	801821a <lwip_sendto+0xb6>
 80181d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80181d4:	2b10      	cmp	r3, #16
 80181d6:	d10b      	bne.n	80181f0 <lwip_sendto+0x8c>
 80181d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d008      	beq.n	80181f0 <lwip_sendto+0x8c>
 80181de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80181e0:	785b      	ldrb	r3, [r3, #1]
 80181e2:	2b02      	cmp	r3, #2
 80181e4:	d104      	bne.n	80181f0 <lwip_sendto+0x8c>
 80181e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80181e8:	f003 0303 	and.w	r3, r3, #3
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d014      	beq.n	801821a <lwip_sendto+0xb6>
 80181f0:	4b32      	ldr	r3, [pc, #200]	@ (80182bc <lwip_sendto+0x158>)
 80181f2:	f240 6252 	movw	r2, #1618	@ 0x652
 80181f6:	4932      	ldr	r1, [pc, #200]	@ (80182c0 <lwip_sendto+0x15c>)
 80181f8:	4832      	ldr	r0, [pc, #200]	@ (80182c4 <lwip_sendto+0x160>)
 80181fa:	f00d f833 	bl	8025264 <iprintf>
 80181fe:	f06f 000f 	mvn.w	r0, #15
 8018202:	f7ff f9a5 	bl	8017550 <err_to_errno>
 8018206:	62b8      	str	r0, [r7, #40]	@ 0x28
 8018208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801820a:	2b00      	cmp	r3, #0
 801820c:	d002      	beq.n	8018214 <lwip_sendto+0xb0>
 801820e:	4a2a      	ldr	r2, [pc, #168]	@ (80182b8 <lwip_sendto+0x154>)
 8018210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018212:	6013      	str	r3, [r2, #0]
 8018214:	f04f 33ff 	mov.w	r3, #4294967295
 8018218:	e049      	b.n	80182ae <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 801821a:	2300      	movs	r3, #0
 801821c:	617b      	str	r3, [r7, #20]
 801821e:	697b      	ldr	r3, [r7, #20]
 8018220:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 8018222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018224:	2b00      	cmp	r3, #0
 8018226:	d00a      	beq.n	801823e <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8018228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801822a:	685b      	ldr	r3, [r3, #4]
 801822c:	61bb      	str	r3, [r7, #24]
 801822e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018230:	885b      	ldrh	r3, [r3, #2]
 8018232:	4618      	mov	r0, r3
 8018234:	f000 fbec 	bl	8018a10 <lwip_htons>
 8018238:	4603      	mov	r3, r0
 801823a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 801823c:	e003      	b.n	8018246 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 801823e:	2300      	movs	r3, #0
 8018240:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8018242:	2300      	movs	r3, #0
 8018244:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 8018246:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018248:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 801824a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801824c:	f107 0310 	add.w	r3, r7, #16
 8018250:	68b9      	ldr	r1, [r7, #8]
 8018252:	4618      	mov	r0, r3
 8018254:	f7ff f9e2 	bl	801761c <netbuf_ref>
 8018258:	4603      	mov	r3, r0
 801825a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 801825e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8018262:	2b00      	cmp	r3, #0
 8018264:	d10a      	bne.n	801827c <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8018266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	f107 0210 	add.w	r2, r7, #16
 801826e:	4611      	mov	r1, r2
 8018270:	4618      	mov	r0, r3
 8018272:	f7fd fccd 	bl	8015c10 <netconn_send>
 8018276:	4603      	mov	r3, r0
 8018278:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 801827c:	f107 0310 	add.w	r3, r7, #16
 8018280:	4618      	mov	r0, r3
 8018282:	f7ff f9a3 	bl	80175cc <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8018286:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801828a:	4618      	mov	r0, r3
 801828c:	f7ff f960 	bl	8017550 <err_to_errno>
 8018290:	6278      	str	r0, [r7, #36]	@ 0x24
 8018292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018294:	2b00      	cmp	r3, #0
 8018296:	d002      	beq.n	801829e <lwip_sendto+0x13a>
 8018298:	4a07      	ldr	r2, [pc, #28]	@ (80182b8 <lwip_sendto+0x154>)
 801829a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801829c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 801829e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d101      	bne.n	80182aa <lwip_sendto+0x146>
 80182a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80182a8:	e001      	b.n	80182ae <lwip_sendto+0x14a>
 80182aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80182ae:	4618      	mov	r0, r3
 80182b0:	3738      	adds	r7, #56	@ 0x38
 80182b2:	46bd      	mov	sp, r7
 80182b4:	bd80      	pop	{r7, pc}
 80182b6:	bf00      	nop
 80182b8:	2400bfa8 	.word	0x2400bfa8
 80182bc:	08029ea0 	.word	0x08029ea0
 80182c0:	0802a180 	.word	0x0802a180
 80182c4:	08029ef4 	.word	0x08029ef4

080182c8 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b086      	sub	sp, #24
 80182cc:	af00      	add	r7, sp, #0
 80182ce:	60f8      	str	r0, [r7, #12]
 80182d0:	60b9      	str	r1, [r7, #8]
 80182d2:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 80182d4:	68bb      	ldr	r3, [r7, #8]
 80182d6:	2b03      	cmp	r3, #3
 80182d8:	d009      	beq.n	80182ee <lwip_socket+0x26>
 80182da:	68bb      	ldr	r3, [r7, #8]
 80182dc:	2b03      	cmp	r3, #3
 80182de:	dc23      	bgt.n	8018328 <lwip_socket+0x60>
 80182e0:	68bb      	ldr	r3, [r7, #8]
 80182e2:	2b01      	cmp	r3, #1
 80182e4:	d019      	beq.n	801831a <lwip_socket+0x52>
 80182e6:	68bb      	ldr	r3, [r7, #8]
 80182e8:	2b02      	cmp	r3, #2
 80182ea:	d009      	beq.n	8018300 <lwip_socket+0x38>
 80182ec:	e01c      	b.n	8018328 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	b2db      	uxtb	r3, r3
 80182f2:	4a22      	ldr	r2, [pc, #136]	@ (801837c <lwip_socket+0xb4>)
 80182f4:	4619      	mov	r1, r3
 80182f6:	2040      	movs	r0, #64	@ 0x40
 80182f8:	f7fd f944 	bl	8015584 <netconn_new_with_proto_and_callback>
 80182fc:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 80182fe:	e019      	b.n	8018334 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	2b88      	cmp	r3, #136	@ 0x88
 8018304:	d101      	bne.n	801830a <lwip_socket+0x42>
 8018306:	2321      	movs	r3, #33	@ 0x21
 8018308:	e000      	b.n	801830c <lwip_socket+0x44>
 801830a:	2320      	movs	r3, #32
 801830c:	4a1b      	ldr	r2, [pc, #108]	@ (801837c <lwip_socket+0xb4>)
 801830e:	2100      	movs	r1, #0
 8018310:	4618      	mov	r0, r3
 8018312:	f7fd f937 	bl	8015584 <netconn_new_with_proto_and_callback>
 8018316:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8018318:	e00c      	b.n	8018334 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 801831a:	4a18      	ldr	r2, [pc, #96]	@ (801837c <lwip_socket+0xb4>)
 801831c:	2100      	movs	r1, #0
 801831e:	2010      	movs	r0, #16
 8018320:	f7fd f930 	bl	8015584 <netconn_new_with_proto_and_callback>
 8018324:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8018326:	e005      	b.n	8018334 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 8018328:	4b15      	ldr	r3, [pc, #84]	@ (8018380 <lwip_socket+0xb8>)
 801832a:	2216      	movs	r2, #22
 801832c:	601a      	str	r2, [r3, #0]
      return -1;
 801832e:	f04f 33ff 	mov.w	r3, #4294967295
 8018332:	e01e      	b.n	8018372 <lwip_socket+0xaa>
  }

  if (!conn) {
 8018334:	697b      	ldr	r3, [r7, #20]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d105      	bne.n	8018346 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 801833a:	4b11      	ldr	r3, [pc, #68]	@ (8018380 <lwip_socket+0xb8>)
 801833c:	2269      	movs	r2, #105	@ 0x69
 801833e:	601a      	str	r2, [r3, #0]
    return -1;
 8018340:	f04f 33ff 	mov.w	r3, #4294967295
 8018344:	e015      	b.n	8018372 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 8018346:	2100      	movs	r1, #0
 8018348:	6978      	ldr	r0, [r7, #20]
 801834a:	f7ff fa07 	bl	801775c <alloc_socket>
 801834e:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8018350:	693b      	ldr	r3, [r7, #16]
 8018352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018356:	d108      	bne.n	801836a <lwip_socket+0xa2>
    netconn_delete(conn);
 8018358:	6978      	ldr	r0, [r7, #20]
 801835a:	f7fd f9b1 	bl	80156c0 <netconn_delete>
    set_errno(ENFILE);
 801835e:	4b08      	ldr	r3, [pc, #32]	@ (8018380 <lwip_socket+0xb8>)
 8018360:	2217      	movs	r2, #23
 8018362:	601a      	str	r2, [r3, #0]
    return -1;
 8018364:	f04f 33ff 	mov.w	r3, #4294967295
 8018368:	e003      	b.n	8018372 <lwip_socket+0xaa>
  }
  conn->socket = i;
 801836a:	697b      	ldr	r3, [r7, #20]
 801836c:	693a      	ldr	r2, [r7, #16]
 801836e:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8018370:	693b      	ldr	r3, [r7, #16]
}
 8018372:	4618      	mov	r0, r3
 8018374:	3718      	adds	r7, #24
 8018376:	46bd      	mov	sp, r7
 8018378:	bd80      	pop	{r7, pc}
 801837a:	bf00      	nop
 801837c:	0801840d 	.word	0x0801840d
 8018380:	2400bfa8 	.word	0x2400bfa8

08018384 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 8018384:	b480      	push	{r7}
 8018386:	b087      	sub	sp, #28
 8018388:	af00      	add	r7, sp, #0
 801838a:	60f8      	str	r0, [r7, #12]
 801838c:	60b9      	str	r1, [r7, #8]
 801838e:	607a      	str	r2, [r7, #4]
 8018390:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8018392:	2300      	movs	r3, #0
 8018394:	617b      	str	r3, [r7, #20]
 8018396:	e02c      	b.n	80183f2 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	695a      	ldr	r2, [r3, #20]
 801839c:	697b      	ldr	r3, [r7, #20]
 801839e:	00db      	lsls	r3, r3, #3
 80183a0:	4413      	add	r3, r2
 80183a2:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 80183a4:	693b      	ldr	r3, [r7, #16]
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	68ba      	ldr	r2, [r7, #8]
 80183aa:	429a      	cmp	r2, r3
 80183ac:	d11e      	bne.n	80183ec <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d009      	beq.n	80183c8 <lwip_poll_should_wake+0x44>
 80183b4:	693b      	ldr	r3, [r7, #16]
 80183b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80183ba:	b29b      	uxth	r3, r3
 80183bc:	f003 0301 	and.w	r3, r3, #1
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d001      	beq.n	80183c8 <lwip_poll_should_wake+0x44>
        return 1;
 80183c4:	2301      	movs	r3, #1
 80183c6:	e01a      	b.n	80183fe <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 80183c8:	683b      	ldr	r3, [r7, #0]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d009      	beq.n	80183e2 <lwip_poll_should_wake+0x5e>
 80183ce:	693b      	ldr	r3, [r7, #16]
 80183d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80183d4:	b29b      	uxth	r3, r3
 80183d6:	f003 0302 	and.w	r3, r3, #2
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d001      	beq.n	80183e2 <lwip_poll_should_wake+0x5e>
        return 1;
 80183de:	2301      	movs	r3, #1
 80183e0:	e00d      	b.n	80183fe <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 80183e2:	6a3b      	ldr	r3, [r7, #32]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d001      	beq.n	80183ec <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 80183e8:	2301      	movs	r3, #1
 80183ea:	e008      	b.n	80183fe <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 80183ec:	697b      	ldr	r3, [r7, #20]
 80183ee:	3301      	adds	r3, #1
 80183f0:	617b      	str	r3, [r7, #20]
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	699b      	ldr	r3, [r3, #24]
 80183f6:	697a      	ldr	r2, [r7, #20]
 80183f8:	429a      	cmp	r2, r3
 80183fa:	d3cd      	bcc.n	8018398 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 80183fc:	2300      	movs	r3, #0
}
 80183fe:	4618      	mov	r0, r3
 8018400:	371c      	adds	r7, #28
 8018402:	46bd      	mov	sp, r7
 8018404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018408:	4770      	bx	lr
	...

0801840c <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b08a      	sub	sp, #40	@ 0x28
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]
 8018414:	460b      	mov	r3, r1
 8018416:	70fb      	strb	r3, [r7, #3]
 8018418:	4613      	mov	r3, r2
 801841a:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	2b00      	cmp	r3, #0
 8018420:	f000 80a4 	beq.w	801856c <event_callback+0x160>
    s = conn->socket;
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	699b      	ldr	r3, [r3, #24]
 8018428:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 801842a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801842c:	2b00      	cmp	r3, #0
 801842e:	da18      	bge.n	8018462 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8018430:	f00b fe7e 	bl	8024130 <sys_arch_protect>
 8018434:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	699b      	ldr	r3, [r3, #24]
 801843a:	2b00      	cmp	r3, #0
 801843c:	da0b      	bge.n	8018456 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 801843e:	78fb      	ldrb	r3, [r7, #3]
 8018440:	2b00      	cmp	r3, #0
 8018442:	d104      	bne.n	801844e <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	699b      	ldr	r3, [r3, #24]
 8018448:	1e5a      	subs	r2, r3, #1
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 801844e:	69f8      	ldr	r0, [r7, #28]
 8018450:	f00b fe7c 	bl	802414c <sys_arch_unprotect>
        return;
 8018454:	e08d      	b.n	8018572 <event_callback+0x166>
      }
      s = conn->socket;
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	699b      	ldr	r3, [r3, #24]
 801845a:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 801845c:	69f8      	ldr	r0, [r7, #28]
 801845e:	f00b fe75 	bl	802414c <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8018462:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018464:	f7ff f962 	bl	801772c <get_socket>
 8018468:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 801846a:	69bb      	ldr	r3, [r7, #24]
 801846c:	2b00      	cmp	r3, #0
 801846e:	d07f      	beq.n	8018570 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 8018470:	2301      	movs	r3, #1
 8018472:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 8018474:	f00b fe5c 	bl	8024130 <sys_arch_protect>
 8018478:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 801847a:	78fb      	ldrb	r3, [r7, #3]
 801847c:	2b04      	cmp	r3, #4
 801847e:	d83e      	bhi.n	80184fe <event_callback+0xf2>
 8018480:	a201      	add	r2, pc, #4	@ (adr r2, 8018488 <event_callback+0x7c>)
 8018482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018486:	bf00      	nop
 8018488:	0801849d 	.word	0x0801849d
 801848c:	080184bf 	.word	0x080184bf
 8018490:	080184d7 	.word	0x080184d7
 8018494:	080184eb 	.word	0x080184eb
 8018498:	080184f7 	.word	0x080184f7
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 801849c:	69bb      	ldr	r3, [r7, #24]
 801849e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80184a2:	b29b      	uxth	r3, r3
 80184a4:	3301      	adds	r3, #1
 80184a6:	b29b      	uxth	r3, r3
 80184a8:	b21a      	sxth	r2, r3
 80184aa:	69bb      	ldr	r3, [r7, #24]
 80184ac:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 80184ae:	69bb      	ldr	r3, [r7, #24]
 80184b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80184b4:	2b01      	cmp	r3, #1
 80184b6:	dd2a      	ble.n	801850e <event_callback+0x102>
        check_waiters = 0;
 80184b8:	2300      	movs	r3, #0
 80184ba:	623b      	str	r3, [r7, #32]
      }
      break;
 80184bc:	e027      	b.n	801850e <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 80184be:	69bb      	ldr	r3, [r7, #24]
 80184c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80184c4:	b29b      	uxth	r3, r3
 80184c6:	3b01      	subs	r3, #1
 80184c8:	b29b      	uxth	r3, r3
 80184ca:	b21a      	sxth	r2, r3
 80184cc:	69bb      	ldr	r3, [r7, #24]
 80184ce:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 80184d0:	2300      	movs	r3, #0
 80184d2:	623b      	str	r3, [r7, #32]
      break;
 80184d4:	e01c      	b.n	8018510 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 80184d6:	69bb      	ldr	r3, [r7, #24]
 80184d8:	895b      	ldrh	r3, [r3, #10]
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d001      	beq.n	80184e2 <event_callback+0xd6>
        check_waiters = 0;
 80184de:	2300      	movs	r3, #0
 80184e0:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 80184e2:	69bb      	ldr	r3, [r7, #24]
 80184e4:	2201      	movs	r2, #1
 80184e6:	815a      	strh	r2, [r3, #10]
      break;
 80184e8:	e012      	b.n	8018510 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 80184ea:	69bb      	ldr	r3, [r7, #24]
 80184ec:	2200      	movs	r2, #0
 80184ee:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 80184f0:	2300      	movs	r3, #0
 80184f2:	623b      	str	r3, [r7, #32]
      break;
 80184f4:	e00c      	b.n	8018510 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 80184f6:	69bb      	ldr	r3, [r7, #24]
 80184f8:	2201      	movs	r2, #1
 80184fa:	819a      	strh	r2, [r3, #12]
      break;
 80184fc:	e008      	b.n	8018510 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 80184fe:	4b1e      	ldr	r3, [pc, #120]	@ (8018578 <event_callback+0x16c>)
 8018500:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 8018504:	491d      	ldr	r1, [pc, #116]	@ (801857c <event_callback+0x170>)
 8018506:	481e      	ldr	r0, [pc, #120]	@ (8018580 <event_callback+0x174>)
 8018508:	f00c feac 	bl	8025264 <iprintf>
      break;
 801850c:	e000      	b.n	8018510 <event_callback+0x104>
      break;
 801850e:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8018510:	69bb      	ldr	r3, [r7, #24]
 8018512:	7b9b      	ldrb	r3, [r3, #14]
 8018514:	2b00      	cmp	r3, #0
 8018516:	d025      	beq.n	8018564 <event_callback+0x158>
 8018518:	6a3b      	ldr	r3, [r7, #32]
 801851a:	2b00      	cmp	r3, #0
 801851c:	d022      	beq.n	8018564 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 801851e:	69bb      	ldr	r3, [r7, #24]
 8018520:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018524:	2b00      	cmp	r3, #0
 8018526:	bfcc      	ite	gt
 8018528:	2301      	movgt	r3, #1
 801852a:	2300      	movle	r3, #0
 801852c:	b2db      	uxtb	r3, r3
 801852e:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 8018530:	69bb      	ldr	r3, [r7, #24]
 8018532:	895b      	ldrh	r3, [r3, #10]
 8018534:	2b00      	cmp	r3, #0
 8018536:	bf14      	ite	ne
 8018538:	2301      	movne	r3, #1
 801853a:	2300      	moveq	r3, #0
 801853c:	b2db      	uxtb	r3, r3
 801853e:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 8018540:	69bb      	ldr	r3, [r7, #24]
 8018542:	899b      	ldrh	r3, [r3, #12]
 8018544:	2b00      	cmp	r3, #0
 8018546:	bf14      	ite	ne
 8018548:	2301      	movne	r3, #1
 801854a:	2300      	moveq	r3, #0
 801854c:	b2db      	uxtb	r3, r3
 801854e:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8018550:	69f8      	ldr	r0, [r7, #28]
 8018552:	f00b fdfb 	bl	802414c <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	693a      	ldr	r2, [r7, #16]
 801855a:	6979      	ldr	r1, [r7, #20]
 801855c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801855e:	f000 f811 	bl	8018584 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 8018562:	e006      	b.n	8018572 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8018564:	69f8      	ldr	r0, [r7, #28]
 8018566:	f00b fdf1 	bl	802414c <sys_arch_unprotect>
 801856a:	e002      	b.n	8018572 <event_callback+0x166>
    return;
 801856c:	bf00      	nop
 801856e:	e000      	b.n	8018572 <event_callback+0x166>
      return;
 8018570:	bf00      	nop
  }
  done_socket(sock);
}
 8018572:	3728      	adds	r7, #40	@ 0x28
 8018574:	46bd      	mov	sp, r7
 8018576:	bd80      	pop	{r7, pc}
 8018578:	08029ea0 	.word	0x08029ea0
 801857c:	0802a21c 	.word	0x0802a21c
 8018580:	08029ef4 	.word	0x08029ef4

08018584 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 8018584:	b580      	push	{r7, lr}
 8018586:	b088      	sub	sp, #32
 8018588:	af02      	add	r7, sp, #8
 801858a:	60f8      	str	r0, [r7, #12]
 801858c:	60b9      	str	r1, [r7, #8]
 801858e:	607a      	str	r2, [r7, #4]
 8018590:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8018592:	4b42      	ldr	r3, [pc, #264]	@ (801869c <select_check_waiters+0x118>)
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	617b      	str	r3, [r7, #20]
 8018598:	e078      	b.n	801868c <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 801859a:	697b      	ldr	r3, [r7, #20]
 801859c:	69db      	ldr	r3, [r3, #28]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d171      	bne.n	8018686 <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 80185a2:	2300      	movs	r3, #0
 80185a4:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 80185a6:	697b      	ldr	r3, [r7, #20]
 80185a8:	695b      	ldr	r3, [r3, #20]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d009      	beq.n	80185c2 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 80185ae:	683b      	ldr	r3, [r7, #0]
 80185b0:	9300      	str	r3, [sp, #0]
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	68ba      	ldr	r2, [r7, #8]
 80185b6:	68f9      	ldr	r1, [r7, #12]
 80185b8:	6978      	ldr	r0, [r7, #20]
 80185ba:	f7ff fee3 	bl	8018384 <lwip_poll_should_wake>
 80185be:	6138      	str	r0, [r7, #16]
 80185c0:	e056      	b.n	8018670 <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 80185c2:	68bb      	ldr	r3, [r7, #8]
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d017      	beq.n	80185f8 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 80185c8:	697b      	ldr	r3, [r7, #20]
 80185ca:	689b      	ldr	r3, [r3, #8]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d013      	beq.n	80185f8 <select_check_waiters+0x74>
 80185d0:	697b      	ldr	r3, [r7, #20]
 80185d2:	689a      	ldr	r2, [r3, #8]
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	da00      	bge.n	80185dc <select_check_waiters+0x58>
 80185da:	331f      	adds	r3, #31
 80185dc:	115b      	asrs	r3, r3, #5
 80185de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	f003 031f 	and.w	r3, r3, #31
 80185e8:	fa22 f303 	lsr.w	r3, r2, r3
 80185ec:	f003 0301 	and.w	r3, r3, #1
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d001      	beq.n	80185f8 <select_check_waiters+0x74>
            do_signal = 1;
 80185f4:	2301      	movs	r3, #1
 80185f6:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d01a      	beq.n	8018634 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 80185fe:	693b      	ldr	r3, [r7, #16]
 8018600:	2b00      	cmp	r3, #0
 8018602:	d117      	bne.n	8018634 <select_check_waiters+0xb0>
 8018604:	697b      	ldr	r3, [r7, #20]
 8018606:	68db      	ldr	r3, [r3, #12]
 8018608:	2b00      	cmp	r3, #0
 801860a:	d013      	beq.n	8018634 <select_check_waiters+0xb0>
 801860c:	697b      	ldr	r3, [r7, #20]
 801860e:	68da      	ldr	r2, [r3, #12]
 8018610:	68fb      	ldr	r3, [r7, #12]
 8018612:	2b00      	cmp	r3, #0
 8018614:	da00      	bge.n	8018618 <select_check_waiters+0x94>
 8018616:	331f      	adds	r3, #31
 8018618:	115b      	asrs	r3, r3, #5
 801861a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	f003 031f 	and.w	r3, r3, #31
 8018624:	fa22 f303 	lsr.w	r3, r2, r3
 8018628:	f003 0301 	and.w	r3, r3, #1
 801862c:	2b00      	cmp	r3, #0
 801862e:	d001      	beq.n	8018634 <select_check_waiters+0xb0>
            do_signal = 1;
 8018630:	2301      	movs	r3, #1
 8018632:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 8018634:	683b      	ldr	r3, [r7, #0]
 8018636:	2b00      	cmp	r3, #0
 8018638:	d01a      	beq.n	8018670 <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 801863a:	693b      	ldr	r3, [r7, #16]
 801863c:	2b00      	cmp	r3, #0
 801863e:	d117      	bne.n	8018670 <select_check_waiters+0xec>
 8018640:	697b      	ldr	r3, [r7, #20]
 8018642:	691b      	ldr	r3, [r3, #16]
 8018644:	2b00      	cmp	r3, #0
 8018646:	d013      	beq.n	8018670 <select_check_waiters+0xec>
 8018648:	697b      	ldr	r3, [r7, #20]
 801864a:	691a      	ldr	r2, [r3, #16]
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	2b00      	cmp	r3, #0
 8018650:	da00      	bge.n	8018654 <select_check_waiters+0xd0>
 8018652:	331f      	adds	r3, #31
 8018654:	115b      	asrs	r3, r3, #5
 8018656:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	f003 031f 	and.w	r3, r3, #31
 8018660:	fa22 f303 	lsr.w	r3, r2, r3
 8018664:	f003 0301 	and.w	r3, r3, #1
 8018668:	2b00      	cmp	r3, #0
 801866a:	d001      	beq.n	8018670 <select_check_waiters+0xec>
            do_signal = 1;
 801866c:	2301      	movs	r3, #1
 801866e:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 8018670:	693b      	ldr	r3, [r7, #16]
 8018672:	2b00      	cmp	r3, #0
 8018674:	d007      	beq.n	8018686 <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 8018676:	697b      	ldr	r3, [r7, #20]
 8018678:	2201      	movs	r2, #1
 801867a:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 801867c:	697b      	ldr	r3, [r7, #20]
 801867e:	3320      	adds	r3, #32
 8018680:	4618      	mov	r0, r3
 8018682:	f00b fcb1 	bl	8023fe8 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8018686:	697b      	ldr	r3, [r7, #20]
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	617b      	str	r3, [r7, #20]
 801868c:	697b      	ldr	r3, [r7, #20]
 801868e:	2b00      	cmp	r3, #0
 8018690:	d183      	bne.n	801859a <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 8018692:	bf00      	nop
 8018694:	bf00      	nop
 8018696:	3718      	adds	r7, #24
 8018698:	46bd      	mov	sp, r7
 801869a:	bd80      	pop	{r7, pc}
 801869c:	24008d38 	.word	0x24008d38

080186a0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b084      	sub	sp, #16
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	6078      	str	r0, [r7, #4]
 80186a8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80186aa:	f008 fa31 	bl	8020b10 <sys_timeouts_sleeptime>
 80186ae:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186b6:	d10b      	bne.n	80186d0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80186b8:	4813      	ldr	r0, [pc, #76]	@ (8018708 <tcpip_timeouts_mbox_fetch+0x68>)
 80186ba:	f00b fd06 	bl	80240ca <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80186be:	2200      	movs	r2, #0
 80186c0:	6839      	ldr	r1, [r7, #0]
 80186c2:	6878      	ldr	r0, [r7, #4]
 80186c4:	f00b fbbe 	bl	8023e44 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80186c8:	480f      	ldr	r0, [pc, #60]	@ (8018708 <tcpip_timeouts_mbox_fetch+0x68>)
 80186ca:	f00b fcef 	bl	80240ac <sys_mutex_lock>
    return;
 80186ce:	e018      	b.n	8018702 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d102      	bne.n	80186dc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80186d6:	f008 f9e1 	bl	8020a9c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80186da:	e7e6      	b.n	80186aa <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80186dc:	480a      	ldr	r0, [pc, #40]	@ (8018708 <tcpip_timeouts_mbox_fetch+0x68>)
 80186de:	f00b fcf4 	bl	80240ca <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80186e2:	68fa      	ldr	r2, [r7, #12]
 80186e4:	6839      	ldr	r1, [r7, #0]
 80186e6:	6878      	ldr	r0, [r7, #4]
 80186e8:	f00b fbac 	bl	8023e44 <sys_arch_mbox_fetch>
 80186ec:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80186ee:	4806      	ldr	r0, [pc, #24]	@ (8018708 <tcpip_timeouts_mbox_fetch+0x68>)
 80186f0:	f00b fcdc 	bl	80240ac <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80186f4:	68bb      	ldr	r3, [r7, #8]
 80186f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186fa:	d102      	bne.n	8018702 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80186fc:	f008 f9ce 	bl	8020a9c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8018700:	e7d3      	b.n	80186aa <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8018702:	3710      	adds	r7, #16
 8018704:	46bd      	mov	sp, r7
 8018706:	bd80      	pop	{r7, pc}
 8018708:	24008d48 	.word	0x24008d48

0801870c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801870c:	b580      	push	{r7, lr}
 801870e:	b084      	sub	sp, #16
 8018710:	af00      	add	r7, sp, #0
 8018712:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8018714:	4810      	ldr	r0, [pc, #64]	@ (8018758 <tcpip_thread+0x4c>)
 8018716:	f00b fcc9 	bl	80240ac <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801871a:	4b10      	ldr	r3, [pc, #64]	@ (801875c <tcpip_thread+0x50>)
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	2b00      	cmp	r3, #0
 8018720:	d005      	beq.n	801872e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8018722:	4b0e      	ldr	r3, [pc, #56]	@ (801875c <tcpip_thread+0x50>)
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	4a0e      	ldr	r2, [pc, #56]	@ (8018760 <tcpip_thread+0x54>)
 8018728:	6812      	ldr	r2, [r2, #0]
 801872a:	4610      	mov	r0, r2
 801872c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801872e:	f107 030c 	add.w	r3, r7, #12
 8018732:	4619      	mov	r1, r3
 8018734:	480b      	ldr	r0, [pc, #44]	@ (8018764 <tcpip_thread+0x58>)
 8018736:	f7ff ffb3 	bl	80186a0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	2b00      	cmp	r3, #0
 801873e:	d106      	bne.n	801874e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8018740:	4b09      	ldr	r3, [pc, #36]	@ (8018768 <tcpip_thread+0x5c>)
 8018742:	2291      	movs	r2, #145	@ 0x91
 8018744:	4909      	ldr	r1, [pc, #36]	@ (801876c <tcpip_thread+0x60>)
 8018746:	480a      	ldr	r0, [pc, #40]	@ (8018770 <tcpip_thread+0x64>)
 8018748:	f00c fd8c 	bl	8025264 <iprintf>
      continue;
 801874c:	e003      	b.n	8018756 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	4618      	mov	r0, r3
 8018752:	f000 f80f 	bl	8018774 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8018756:	e7ea      	b.n	801872e <tcpip_thread+0x22>
 8018758:	24008d48 	.word	0x24008d48
 801875c:	24008d3c 	.word	0x24008d3c
 8018760:	24008d40 	.word	0x24008d40
 8018764:	24008d44 	.word	0x24008d44
 8018768:	0802a270 	.word	0x0802a270
 801876c:	0802a2a0 	.word	0x0802a2a0
 8018770:	0802a2c0 	.word	0x0802a2c0

08018774 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8018774:	b580      	push	{r7, lr}
 8018776:	b082      	sub	sp, #8
 8018778:	af00      	add	r7, sp, #0
 801877a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	781b      	ldrb	r3, [r3, #0]
 8018780:	2b02      	cmp	r3, #2
 8018782:	d026      	beq.n	80187d2 <tcpip_thread_handle_msg+0x5e>
 8018784:	2b02      	cmp	r3, #2
 8018786:	dc2b      	bgt.n	80187e0 <tcpip_thread_handle_msg+0x6c>
 8018788:	2b00      	cmp	r3, #0
 801878a:	d002      	beq.n	8018792 <tcpip_thread_handle_msg+0x1e>
 801878c:	2b01      	cmp	r3, #1
 801878e:	d015      	beq.n	80187bc <tcpip_thread_handle_msg+0x48>
 8018790:	e026      	b.n	80187e0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	68db      	ldr	r3, [r3, #12]
 8018796:	687a      	ldr	r2, [r7, #4]
 8018798:	6850      	ldr	r0, [r2, #4]
 801879a:	687a      	ldr	r2, [r7, #4]
 801879c:	6892      	ldr	r2, [r2, #8]
 801879e:	4611      	mov	r1, r2
 80187a0:	4798      	blx	r3
 80187a2:	4603      	mov	r3, r0
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d004      	beq.n	80187b2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	685b      	ldr	r3, [r3, #4]
 80187ac:	4618      	mov	r0, r3
 80187ae:	f001 fe0b 	bl	801a3c8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80187b2:	6879      	ldr	r1, [r7, #4]
 80187b4:	2009      	movs	r0, #9
 80187b6:	f000 ff31 	bl	801961c <memp_free>
      break;
 80187ba:	e018      	b.n	80187ee <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	685b      	ldr	r3, [r3, #4]
 80187c0:	687a      	ldr	r2, [r7, #4]
 80187c2:	6892      	ldr	r2, [r2, #8]
 80187c4:	4610      	mov	r0, r2
 80187c6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80187c8:	6879      	ldr	r1, [r7, #4]
 80187ca:	2008      	movs	r0, #8
 80187cc:	f000 ff26 	bl	801961c <memp_free>
      break;
 80187d0:	e00d      	b.n	80187ee <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	685b      	ldr	r3, [r3, #4]
 80187d6:	687a      	ldr	r2, [r7, #4]
 80187d8:	6892      	ldr	r2, [r2, #8]
 80187da:	4610      	mov	r0, r2
 80187dc:	4798      	blx	r3
      break;
 80187de:	e006      	b.n	80187ee <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80187e0:	4b05      	ldr	r3, [pc, #20]	@ (80187f8 <tcpip_thread_handle_msg+0x84>)
 80187e2:	22cf      	movs	r2, #207	@ 0xcf
 80187e4:	4905      	ldr	r1, [pc, #20]	@ (80187fc <tcpip_thread_handle_msg+0x88>)
 80187e6:	4806      	ldr	r0, [pc, #24]	@ (8018800 <tcpip_thread_handle_msg+0x8c>)
 80187e8:	f00c fd3c 	bl	8025264 <iprintf>
      break;
 80187ec:	bf00      	nop
  }
}
 80187ee:	bf00      	nop
 80187f0:	3708      	adds	r7, #8
 80187f2:	46bd      	mov	sp, r7
 80187f4:	bd80      	pop	{r7, pc}
 80187f6:	bf00      	nop
 80187f8:	0802a270 	.word	0x0802a270
 80187fc:	0802a2a0 	.word	0x0802a2a0
 8018800:	0802a2c0 	.word	0x0802a2c0

08018804 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8018804:	b580      	push	{r7, lr}
 8018806:	b086      	sub	sp, #24
 8018808:	af00      	add	r7, sp, #0
 801880a:	60f8      	str	r0, [r7, #12]
 801880c:	60b9      	str	r1, [r7, #8]
 801880e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8018810:	481a      	ldr	r0, [pc, #104]	@ (801887c <tcpip_inpkt+0x78>)
 8018812:	f00b fb72 	bl	8023efa <sys_mbox_valid>
 8018816:	4603      	mov	r3, r0
 8018818:	2b00      	cmp	r3, #0
 801881a:	d105      	bne.n	8018828 <tcpip_inpkt+0x24>
 801881c:	4b18      	ldr	r3, [pc, #96]	@ (8018880 <tcpip_inpkt+0x7c>)
 801881e:	22fc      	movs	r2, #252	@ 0xfc
 8018820:	4918      	ldr	r1, [pc, #96]	@ (8018884 <tcpip_inpkt+0x80>)
 8018822:	4819      	ldr	r0, [pc, #100]	@ (8018888 <tcpip_inpkt+0x84>)
 8018824:	f00c fd1e 	bl	8025264 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8018828:	2009      	movs	r0, #9
 801882a:	f000 fe81 	bl	8019530 <memp_malloc>
 801882e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8018830:	697b      	ldr	r3, [r7, #20]
 8018832:	2b00      	cmp	r3, #0
 8018834:	d102      	bne.n	801883c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8018836:	f04f 33ff 	mov.w	r3, #4294967295
 801883a:	e01a      	b.n	8018872 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801883c:	697b      	ldr	r3, [r7, #20]
 801883e:	2200      	movs	r2, #0
 8018840:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8018842:	697b      	ldr	r3, [r7, #20]
 8018844:	68fa      	ldr	r2, [r7, #12]
 8018846:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8018848:	697b      	ldr	r3, [r7, #20]
 801884a:	68ba      	ldr	r2, [r7, #8]
 801884c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801884e:	697b      	ldr	r3, [r7, #20]
 8018850:	687a      	ldr	r2, [r7, #4]
 8018852:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8018854:	6979      	ldr	r1, [r7, #20]
 8018856:	4809      	ldr	r0, [pc, #36]	@ (801887c <tcpip_inpkt+0x78>)
 8018858:	f00b fada 	bl	8023e10 <sys_mbox_trypost>
 801885c:	4603      	mov	r3, r0
 801885e:	2b00      	cmp	r3, #0
 8018860:	d006      	beq.n	8018870 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8018862:	6979      	ldr	r1, [r7, #20]
 8018864:	2009      	movs	r0, #9
 8018866:	f000 fed9 	bl	801961c <memp_free>
    return ERR_MEM;
 801886a:	f04f 33ff 	mov.w	r3, #4294967295
 801886e:	e000      	b.n	8018872 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8018870:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8018872:	4618      	mov	r0, r3
 8018874:	3718      	adds	r7, #24
 8018876:	46bd      	mov	sp, r7
 8018878:	bd80      	pop	{r7, pc}
 801887a:	bf00      	nop
 801887c:	24008d44 	.word	0x24008d44
 8018880:	0802a270 	.word	0x0802a270
 8018884:	0802a2e8 	.word	0x0802a2e8
 8018888:	0802a2c0 	.word	0x0802a2c0

0801888c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801888c:	b580      	push	{r7, lr}
 801888e:	b082      	sub	sp, #8
 8018890:	af00      	add	r7, sp, #0
 8018892:	6078      	str	r0, [r7, #4]
 8018894:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8018896:	683b      	ldr	r3, [r7, #0]
 8018898:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801889c:	f003 0318 	and.w	r3, r3, #24
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d006      	beq.n	80188b2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80188a4:	4a08      	ldr	r2, [pc, #32]	@ (80188c8 <tcpip_input+0x3c>)
 80188a6:	6839      	ldr	r1, [r7, #0]
 80188a8:	6878      	ldr	r0, [r7, #4]
 80188aa:	f7ff ffab 	bl	8018804 <tcpip_inpkt>
 80188ae:	4603      	mov	r3, r0
 80188b0:	e005      	b.n	80188be <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80188b2:	4a06      	ldr	r2, [pc, #24]	@ (80188cc <tcpip_input+0x40>)
 80188b4:	6839      	ldr	r1, [r7, #0]
 80188b6:	6878      	ldr	r0, [r7, #4]
 80188b8:	f7ff ffa4 	bl	8018804 <tcpip_inpkt>
 80188bc:	4603      	mov	r3, r0
}
 80188be:	4618      	mov	r0, r3
 80188c0:	3708      	adds	r7, #8
 80188c2:	46bd      	mov	sp, r7
 80188c4:	bd80      	pop	{r7, pc}
 80188c6:	bf00      	nop
 80188c8:	08023bfd 	.word	0x08023bfd
 80188cc:	08022889 	.word	0x08022889

080188d0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b084      	sub	sp, #16
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	6078      	str	r0, [r7, #4]
 80188d8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80188da:	4819      	ldr	r0, [pc, #100]	@ (8018940 <tcpip_try_callback+0x70>)
 80188dc:	f00b fb0d 	bl	8023efa <sys_mbox_valid>
 80188e0:	4603      	mov	r3, r0
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d106      	bne.n	80188f4 <tcpip_try_callback+0x24>
 80188e6:	4b17      	ldr	r3, [pc, #92]	@ (8018944 <tcpip_try_callback+0x74>)
 80188e8:	f240 125d 	movw	r2, #349	@ 0x15d
 80188ec:	4916      	ldr	r1, [pc, #88]	@ (8018948 <tcpip_try_callback+0x78>)
 80188ee:	4817      	ldr	r0, [pc, #92]	@ (801894c <tcpip_try_callback+0x7c>)
 80188f0:	f00c fcb8 	bl	8025264 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80188f4:	2008      	movs	r0, #8
 80188f6:	f000 fe1b 	bl	8019530 <memp_malloc>
 80188fa:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d102      	bne.n	8018908 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8018902:	f04f 33ff 	mov.w	r3, #4294967295
 8018906:	e017      	b.n	8018938 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	2201      	movs	r2, #1
 801890c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	687a      	ldr	r2, [r7, #4]
 8018912:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	683a      	ldr	r2, [r7, #0]
 8018918:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801891a:	68f9      	ldr	r1, [r7, #12]
 801891c:	4808      	ldr	r0, [pc, #32]	@ (8018940 <tcpip_try_callback+0x70>)
 801891e:	f00b fa77 	bl	8023e10 <sys_mbox_trypost>
 8018922:	4603      	mov	r3, r0
 8018924:	2b00      	cmp	r3, #0
 8018926:	d006      	beq.n	8018936 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8018928:	68f9      	ldr	r1, [r7, #12]
 801892a:	2008      	movs	r0, #8
 801892c:	f000 fe76 	bl	801961c <memp_free>
    return ERR_MEM;
 8018930:	f04f 33ff 	mov.w	r3, #4294967295
 8018934:	e000      	b.n	8018938 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8018936:	2300      	movs	r3, #0
}
 8018938:	4618      	mov	r0, r3
 801893a:	3710      	adds	r7, #16
 801893c:	46bd      	mov	sp, r7
 801893e:	bd80      	pop	{r7, pc}
 8018940:	24008d44 	.word	0x24008d44
 8018944:	0802a270 	.word	0x0802a270
 8018948:	0802a2e8 	.word	0x0802a2e8
 801894c:	0802a2c0 	.word	0x0802a2c0

08018950 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8018950:	b580      	push	{r7, lr}
 8018952:	b084      	sub	sp, #16
 8018954:	af00      	add	r7, sp, #0
 8018956:	60f8      	str	r0, [r7, #12]
 8018958:	60b9      	str	r1, [r7, #8]
 801895a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 801895c:	4806      	ldr	r0, [pc, #24]	@ (8018978 <tcpip_send_msg_wait_sem+0x28>)
 801895e:	f00b fba5 	bl	80240ac <sys_mutex_lock>
  fn(apimsg);
 8018962:	68fb      	ldr	r3, [r7, #12]
 8018964:	68b8      	ldr	r0, [r7, #8]
 8018966:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8018968:	4803      	ldr	r0, [pc, #12]	@ (8018978 <tcpip_send_msg_wait_sem+0x28>)
 801896a:	f00b fbae 	bl	80240ca <sys_mutex_unlock>
  return ERR_OK;
 801896e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8018970:	4618      	mov	r0, r3
 8018972:	3710      	adds	r7, #16
 8018974:	46bd      	mov	sp, r7
 8018976:	bd80      	pop	{r7, pc}
 8018978:	24008d48 	.word	0x24008d48

0801897c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b084      	sub	sp, #16
 8018980:	af02      	add	r7, sp, #8
 8018982:	6078      	str	r0, [r7, #4]
 8018984:	6039      	str	r1, [r7, #0]
  lwip_init();
 8018986:	f000 f92d 	bl	8018be4 <lwip_init>

  tcpip_init_done = initfunc;
 801898a:	4a17      	ldr	r2, [pc, #92]	@ (80189e8 <tcpip_init+0x6c>)
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8018990:	4a16      	ldr	r2, [pc, #88]	@ (80189ec <tcpip_init+0x70>)
 8018992:	683b      	ldr	r3, [r7, #0]
 8018994:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8018996:	2106      	movs	r1, #6
 8018998:	4815      	ldr	r0, [pc, #84]	@ (80189f0 <tcpip_init+0x74>)
 801899a:	f00b fa05 	bl	8023da8 <sys_mbox_new>
 801899e:	4603      	mov	r3, r0
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d006      	beq.n	80189b2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80189a4:	4b13      	ldr	r3, [pc, #76]	@ (80189f4 <tcpip_init+0x78>)
 80189a6:	f240 2261 	movw	r2, #609	@ 0x261
 80189aa:	4913      	ldr	r1, [pc, #76]	@ (80189f8 <tcpip_init+0x7c>)
 80189ac:	4813      	ldr	r0, [pc, #76]	@ (80189fc <tcpip_init+0x80>)
 80189ae:	f00c fc59 	bl	8025264 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80189b2:	4813      	ldr	r0, [pc, #76]	@ (8018a00 <tcpip_init+0x84>)
 80189b4:	f00b fb5e 	bl	8024074 <sys_mutex_new>
 80189b8:	4603      	mov	r3, r0
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d006      	beq.n	80189cc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80189be:	4b0d      	ldr	r3, [pc, #52]	@ (80189f4 <tcpip_init+0x78>)
 80189c0:	f240 2265 	movw	r2, #613	@ 0x265
 80189c4:	490f      	ldr	r1, [pc, #60]	@ (8018a04 <tcpip_init+0x88>)
 80189c6:	480d      	ldr	r0, [pc, #52]	@ (80189fc <tcpip_init+0x80>)
 80189c8:	f00c fc4c 	bl	8025264 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80189cc:	2300      	movs	r3, #0
 80189ce:	9300      	str	r3, [sp, #0]
 80189d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80189d4:	2200      	movs	r2, #0
 80189d6:	490c      	ldr	r1, [pc, #48]	@ (8018a08 <tcpip_init+0x8c>)
 80189d8:	480c      	ldr	r0, [pc, #48]	@ (8018a0c <tcpip_init+0x90>)
 80189da:	f00b fb83 	bl	80240e4 <sys_thread_new>
}
 80189de:	bf00      	nop
 80189e0:	3708      	adds	r7, #8
 80189e2:	46bd      	mov	sp, r7
 80189e4:	bd80      	pop	{r7, pc}
 80189e6:	bf00      	nop
 80189e8:	24008d3c 	.word	0x24008d3c
 80189ec:	24008d40 	.word	0x24008d40
 80189f0:	24008d44 	.word	0x24008d44
 80189f4:	0802a270 	.word	0x0802a270
 80189f8:	0802a2f8 	.word	0x0802a2f8
 80189fc:	0802a2c0 	.word	0x0802a2c0
 8018a00:	24008d48 	.word	0x24008d48
 8018a04:	0802a31c 	.word	0x0802a31c
 8018a08:	0801870d 	.word	0x0801870d
 8018a0c:	0802a340 	.word	0x0802a340

08018a10 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8018a10:	b480      	push	{r7}
 8018a12:	b083      	sub	sp, #12
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	4603      	mov	r3, r0
 8018a18:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8018a1a:	88fb      	ldrh	r3, [r7, #6]
 8018a1c:	021b      	lsls	r3, r3, #8
 8018a1e:	b21a      	sxth	r2, r3
 8018a20:	88fb      	ldrh	r3, [r7, #6]
 8018a22:	0a1b      	lsrs	r3, r3, #8
 8018a24:	b29b      	uxth	r3, r3
 8018a26:	b21b      	sxth	r3, r3
 8018a28:	4313      	orrs	r3, r2
 8018a2a:	b21b      	sxth	r3, r3
 8018a2c:	b29b      	uxth	r3, r3
}
 8018a2e:	4618      	mov	r0, r3
 8018a30:	370c      	adds	r7, #12
 8018a32:	46bd      	mov	sp, r7
 8018a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a38:	4770      	bx	lr

08018a3a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8018a3a:	b480      	push	{r7}
 8018a3c:	b083      	sub	sp, #12
 8018a3e:	af00      	add	r7, sp, #0
 8018a40:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	061a      	lsls	r2, r3, #24
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	021b      	lsls	r3, r3, #8
 8018a4a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8018a4e:	431a      	orrs	r2, r3
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	0a1b      	lsrs	r3, r3, #8
 8018a54:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8018a58:	431a      	orrs	r2, r3
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	0e1b      	lsrs	r3, r3, #24
 8018a5e:	4313      	orrs	r3, r2
}
 8018a60:	4618      	mov	r0, r3
 8018a62:	370c      	adds	r7, #12
 8018a64:	46bd      	mov	sp, r7
 8018a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a6a:	4770      	bx	lr

08018a6c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8018a6c:	b480      	push	{r7}
 8018a6e:	b089      	sub	sp, #36	@ 0x24
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	6078      	str	r0, [r7, #4]
 8018a74:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8018a7a:	2300      	movs	r3, #0
 8018a7c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8018a7e:	2300      	movs	r3, #0
 8018a80:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8018a82:	69fb      	ldr	r3, [r7, #28]
 8018a84:	f003 0301 	and.w	r3, r3, #1
 8018a88:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8018a8a:	693b      	ldr	r3, [r7, #16]
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d00d      	beq.n	8018aac <lwip_standard_chksum+0x40>
 8018a90:	683b      	ldr	r3, [r7, #0]
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	dd0a      	ble.n	8018aac <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8018a96:	69fa      	ldr	r2, [r7, #28]
 8018a98:	1c53      	adds	r3, r2, #1
 8018a9a:	61fb      	str	r3, [r7, #28]
 8018a9c:	f107 030e 	add.w	r3, r7, #14
 8018aa0:	3301      	adds	r3, #1
 8018aa2:	7812      	ldrb	r2, [r2, #0]
 8018aa4:	701a      	strb	r2, [r3, #0]
    len--;
 8018aa6:	683b      	ldr	r3, [r7, #0]
 8018aa8:	3b01      	subs	r3, #1
 8018aaa:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8018aac:	69fb      	ldr	r3, [r7, #28]
 8018aae:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8018ab0:	e00a      	b.n	8018ac8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8018ab2:	69bb      	ldr	r3, [r7, #24]
 8018ab4:	1c9a      	adds	r2, r3, #2
 8018ab6:	61ba      	str	r2, [r7, #24]
 8018ab8:	881b      	ldrh	r3, [r3, #0]
 8018aba:	461a      	mov	r2, r3
 8018abc:	697b      	ldr	r3, [r7, #20]
 8018abe:	4413      	add	r3, r2
 8018ac0:	617b      	str	r3, [r7, #20]
    len -= 2;
 8018ac2:	683b      	ldr	r3, [r7, #0]
 8018ac4:	3b02      	subs	r3, #2
 8018ac6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8018ac8:	683b      	ldr	r3, [r7, #0]
 8018aca:	2b01      	cmp	r3, #1
 8018acc:	dcf1      	bgt.n	8018ab2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8018ace:	683b      	ldr	r3, [r7, #0]
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	dd04      	ble.n	8018ade <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8018ad4:	f107 030e 	add.w	r3, r7, #14
 8018ad8:	69ba      	ldr	r2, [r7, #24]
 8018ada:	7812      	ldrb	r2, [r2, #0]
 8018adc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8018ade:	89fb      	ldrh	r3, [r7, #14]
 8018ae0:	461a      	mov	r2, r3
 8018ae2:	697b      	ldr	r3, [r7, #20]
 8018ae4:	4413      	add	r3, r2
 8018ae6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8018ae8:	697b      	ldr	r3, [r7, #20]
 8018aea:	0c1a      	lsrs	r2, r3, #16
 8018aec:	697b      	ldr	r3, [r7, #20]
 8018aee:	b29b      	uxth	r3, r3
 8018af0:	4413      	add	r3, r2
 8018af2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8018af4:	697b      	ldr	r3, [r7, #20]
 8018af6:	0c1a      	lsrs	r2, r3, #16
 8018af8:	697b      	ldr	r3, [r7, #20]
 8018afa:	b29b      	uxth	r3, r3
 8018afc:	4413      	add	r3, r2
 8018afe:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8018b00:	693b      	ldr	r3, [r7, #16]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d007      	beq.n	8018b16 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8018b06:	697b      	ldr	r3, [r7, #20]
 8018b08:	021b      	lsls	r3, r3, #8
 8018b0a:	b29a      	uxth	r2, r3
 8018b0c:	697b      	ldr	r3, [r7, #20]
 8018b0e:	0a1b      	lsrs	r3, r3, #8
 8018b10:	b2db      	uxtb	r3, r3
 8018b12:	4313      	orrs	r3, r2
 8018b14:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8018b16:	697b      	ldr	r3, [r7, #20]
 8018b18:	b29b      	uxth	r3, r3
}
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	3724      	adds	r7, #36	@ 0x24
 8018b1e:	46bd      	mov	sp, r7
 8018b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b24:	4770      	bx	lr

08018b26 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8018b26:	b580      	push	{r7, lr}
 8018b28:	b082      	sub	sp, #8
 8018b2a:	af00      	add	r7, sp, #0
 8018b2c:	6078      	str	r0, [r7, #4]
 8018b2e:	460b      	mov	r3, r1
 8018b30:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8018b32:	887b      	ldrh	r3, [r7, #2]
 8018b34:	4619      	mov	r1, r3
 8018b36:	6878      	ldr	r0, [r7, #4]
 8018b38:	f7ff ff98 	bl	8018a6c <lwip_standard_chksum>
 8018b3c:	4603      	mov	r3, r0
 8018b3e:	43db      	mvns	r3, r3
 8018b40:	b29b      	uxth	r3, r3
}
 8018b42:	4618      	mov	r0, r3
 8018b44:	3708      	adds	r7, #8
 8018b46:	46bd      	mov	sp, r7
 8018b48:	bd80      	pop	{r7, pc}

08018b4a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8018b4a:	b580      	push	{r7, lr}
 8018b4c:	b086      	sub	sp, #24
 8018b4e:	af00      	add	r7, sp, #0
 8018b50:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8018b52:	2300      	movs	r3, #0
 8018b54:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8018b56:	2300      	movs	r3, #0
 8018b58:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	613b      	str	r3, [r7, #16]
 8018b5e:	e02b      	b.n	8018bb8 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8018b60:	693b      	ldr	r3, [r7, #16]
 8018b62:	685a      	ldr	r2, [r3, #4]
 8018b64:	693b      	ldr	r3, [r7, #16]
 8018b66:	895b      	ldrh	r3, [r3, #10]
 8018b68:	4619      	mov	r1, r3
 8018b6a:	4610      	mov	r0, r2
 8018b6c:	f7ff ff7e 	bl	8018a6c <lwip_standard_chksum>
 8018b70:	4603      	mov	r3, r0
 8018b72:	461a      	mov	r2, r3
 8018b74:	697b      	ldr	r3, [r7, #20]
 8018b76:	4413      	add	r3, r2
 8018b78:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8018b7a:	697b      	ldr	r3, [r7, #20]
 8018b7c:	0c1a      	lsrs	r2, r3, #16
 8018b7e:	697b      	ldr	r3, [r7, #20]
 8018b80:	b29b      	uxth	r3, r3
 8018b82:	4413      	add	r3, r2
 8018b84:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8018b86:	693b      	ldr	r3, [r7, #16]
 8018b88:	895b      	ldrh	r3, [r3, #10]
 8018b8a:	f003 0301 	and.w	r3, r3, #1
 8018b8e:	b29b      	uxth	r3, r3
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d00e      	beq.n	8018bb2 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	bf0c      	ite	eq
 8018b9a:	2301      	moveq	r3, #1
 8018b9c:	2300      	movne	r3, #0
 8018b9e:	b2db      	uxtb	r3, r3
 8018ba0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8018ba2:	697b      	ldr	r3, [r7, #20]
 8018ba4:	021b      	lsls	r3, r3, #8
 8018ba6:	b29a      	uxth	r2, r3
 8018ba8:	697b      	ldr	r3, [r7, #20]
 8018baa:	0a1b      	lsrs	r3, r3, #8
 8018bac:	b2db      	uxtb	r3, r3
 8018bae:	4313      	orrs	r3, r2
 8018bb0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8018bb2:	693b      	ldr	r3, [r7, #16]
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	613b      	str	r3, [r7, #16]
 8018bb8:	693b      	ldr	r3, [r7, #16]
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d1d0      	bne.n	8018b60 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d007      	beq.n	8018bd4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8018bc4:	697b      	ldr	r3, [r7, #20]
 8018bc6:	021b      	lsls	r3, r3, #8
 8018bc8:	b29a      	uxth	r2, r3
 8018bca:	697b      	ldr	r3, [r7, #20]
 8018bcc:	0a1b      	lsrs	r3, r3, #8
 8018bce:	b2db      	uxtb	r3, r3
 8018bd0:	4313      	orrs	r3, r2
 8018bd2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8018bd4:	697b      	ldr	r3, [r7, #20]
 8018bd6:	b29b      	uxth	r3, r3
 8018bd8:	43db      	mvns	r3, r3
 8018bda:	b29b      	uxth	r3, r3
}
 8018bdc:	4618      	mov	r0, r3
 8018bde:	3718      	adds	r7, #24
 8018be0:	46bd      	mov	sp, r7
 8018be2:	bd80      	pop	{r7, pc}

08018be4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b082      	sub	sp, #8
 8018be8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8018bea:	2300      	movs	r3, #0
 8018bec:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8018bee:	f00b fa33 	bl	8024058 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8018bf2:	f000 f8d5 	bl	8018da0 <mem_init>
  memp_init();
 8018bf6:	f000 fc2d 	bl	8019454 <memp_init>
  pbuf_init();
  netif_init();
 8018bfa:	f000 fd39 	bl	8019670 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8018bfe:	f007 ffbf 	bl	8020b80 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8018c02:	f001 fe8b 	bl	801a91c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8018c06:	f007 ff01 	bl	8020a0c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8018c0a:	bf00      	nop
 8018c0c:	3708      	adds	r7, #8
 8018c0e:	46bd      	mov	sp, r7
 8018c10:	bd80      	pop	{r7, pc}
	...

08018c14 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8018c14:	b480      	push	{r7}
 8018c16:	b083      	sub	sp, #12
 8018c18:	af00      	add	r7, sp, #0
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8018c1e:	4b05      	ldr	r3, [pc, #20]	@ (8018c34 <ptr_to_mem+0x20>)
 8018c20:	681a      	ldr	r2, [r3, #0]
 8018c22:	88fb      	ldrh	r3, [r7, #6]
 8018c24:	4413      	add	r3, r2
}
 8018c26:	4618      	mov	r0, r3
 8018c28:	370c      	adds	r7, #12
 8018c2a:	46bd      	mov	sp, r7
 8018c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c30:	4770      	bx	lr
 8018c32:	bf00      	nop
 8018c34:	24008d64 	.word	0x24008d64

08018c38 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8018c38:	b480      	push	{r7}
 8018c3a:	b083      	sub	sp, #12
 8018c3c:	af00      	add	r7, sp, #0
 8018c3e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8018c40:	4b05      	ldr	r3, [pc, #20]	@ (8018c58 <mem_to_ptr+0x20>)
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	687a      	ldr	r2, [r7, #4]
 8018c46:	1ad3      	subs	r3, r2, r3
 8018c48:	b29b      	uxth	r3, r3
}
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	370c      	adds	r7, #12
 8018c4e:	46bd      	mov	sp, r7
 8018c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c54:	4770      	bx	lr
 8018c56:	bf00      	nop
 8018c58:	24008d64 	.word	0x24008d64

08018c5c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8018c5c:	b590      	push	{r4, r7, lr}
 8018c5e:	b085      	sub	sp, #20
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8018c64:	4b45      	ldr	r3, [pc, #276]	@ (8018d7c <plug_holes+0x120>)
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	687a      	ldr	r2, [r7, #4]
 8018c6a:	429a      	cmp	r2, r3
 8018c6c:	d206      	bcs.n	8018c7c <plug_holes+0x20>
 8018c6e:	4b44      	ldr	r3, [pc, #272]	@ (8018d80 <plug_holes+0x124>)
 8018c70:	f240 12df 	movw	r2, #479	@ 0x1df
 8018c74:	4943      	ldr	r1, [pc, #268]	@ (8018d84 <plug_holes+0x128>)
 8018c76:	4844      	ldr	r0, [pc, #272]	@ (8018d88 <plug_holes+0x12c>)
 8018c78:	f00c faf4 	bl	8025264 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8018c7c:	4b43      	ldr	r3, [pc, #268]	@ (8018d8c <plug_holes+0x130>)
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	687a      	ldr	r2, [r7, #4]
 8018c82:	429a      	cmp	r2, r3
 8018c84:	d306      	bcc.n	8018c94 <plug_holes+0x38>
 8018c86:	4b3e      	ldr	r3, [pc, #248]	@ (8018d80 <plug_holes+0x124>)
 8018c88:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8018c8c:	4940      	ldr	r1, [pc, #256]	@ (8018d90 <plug_holes+0x134>)
 8018c8e:	483e      	ldr	r0, [pc, #248]	@ (8018d88 <plug_holes+0x12c>)
 8018c90:	f00c fae8 	bl	8025264 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	791b      	ldrb	r3, [r3, #4]
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d006      	beq.n	8018caa <plug_holes+0x4e>
 8018c9c:	4b38      	ldr	r3, [pc, #224]	@ (8018d80 <plug_holes+0x124>)
 8018c9e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8018ca2:	493c      	ldr	r1, [pc, #240]	@ (8018d94 <plug_holes+0x138>)
 8018ca4:	4838      	ldr	r0, [pc, #224]	@ (8018d88 <plug_holes+0x12c>)
 8018ca6:	f00c fadd 	bl	8025264 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	881b      	ldrh	r3, [r3, #0]
 8018cae:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8018cb2:	d906      	bls.n	8018cc2 <plug_holes+0x66>
 8018cb4:	4b32      	ldr	r3, [pc, #200]	@ (8018d80 <plug_holes+0x124>)
 8018cb6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8018cba:	4937      	ldr	r1, [pc, #220]	@ (8018d98 <plug_holes+0x13c>)
 8018cbc:	4832      	ldr	r0, [pc, #200]	@ (8018d88 <plug_holes+0x12c>)
 8018cbe:	f00c fad1 	bl	8025264 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	881b      	ldrh	r3, [r3, #0]
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	f7ff ffa4 	bl	8018c14 <ptr_to_mem>
 8018ccc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8018cce:	687a      	ldr	r2, [r7, #4]
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	429a      	cmp	r2, r3
 8018cd4:	d024      	beq.n	8018d20 <plug_holes+0xc4>
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	791b      	ldrb	r3, [r3, #4]
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d120      	bne.n	8018d20 <plug_holes+0xc4>
 8018cde:	4b2b      	ldr	r3, [pc, #172]	@ (8018d8c <plug_holes+0x130>)
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	68fa      	ldr	r2, [r7, #12]
 8018ce4:	429a      	cmp	r2, r3
 8018ce6:	d01b      	beq.n	8018d20 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8018ce8:	4b2c      	ldr	r3, [pc, #176]	@ (8018d9c <plug_holes+0x140>)
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	68fa      	ldr	r2, [r7, #12]
 8018cee:	429a      	cmp	r2, r3
 8018cf0:	d102      	bne.n	8018cf8 <plug_holes+0x9c>
      lfree = mem;
 8018cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8018d9c <plug_holes+0x140>)
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8018cf8:	68fb      	ldr	r3, [r7, #12]
 8018cfa:	881a      	ldrh	r2, [r3, #0]
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	881b      	ldrh	r3, [r3, #0]
 8018d04:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8018d08:	d00a      	beq.n	8018d20 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	881b      	ldrh	r3, [r3, #0]
 8018d0e:	4618      	mov	r0, r3
 8018d10:	f7ff ff80 	bl	8018c14 <ptr_to_mem>
 8018d14:	4604      	mov	r4, r0
 8018d16:	6878      	ldr	r0, [r7, #4]
 8018d18:	f7ff ff8e 	bl	8018c38 <mem_to_ptr>
 8018d1c:	4603      	mov	r3, r0
 8018d1e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	885b      	ldrh	r3, [r3, #2]
 8018d24:	4618      	mov	r0, r3
 8018d26:	f7ff ff75 	bl	8018c14 <ptr_to_mem>
 8018d2a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8018d2c:	68ba      	ldr	r2, [r7, #8]
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	429a      	cmp	r2, r3
 8018d32:	d01f      	beq.n	8018d74 <plug_holes+0x118>
 8018d34:	68bb      	ldr	r3, [r7, #8]
 8018d36:	791b      	ldrb	r3, [r3, #4]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d11b      	bne.n	8018d74 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8018d3c:	4b17      	ldr	r3, [pc, #92]	@ (8018d9c <plug_holes+0x140>)
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	687a      	ldr	r2, [r7, #4]
 8018d42:	429a      	cmp	r2, r3
 8018d44:	d102      	bne.n	8018d4c <plug_holes+0xf0>
      lfree = pmem;
 8018d46:	4a15      	ldr	r2, [pc, #84]	@ (8018d9c <plug_holes+0x140>)
 8018d48:	68bb      	ldr	r3, [r7, #8]
 8018d4a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	881a      	ldrh	r2, [r3, #0]
 8018d50:	68bb      	ldr	r3, [r7, #8]
 8018d52:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	881b      	ldrh	r3, [r3, #0]
 8018d58:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8018d5c:	d00a      	beq.n	8018d74 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	881b      	ldrh	r3, [r3, #0]
 8018d62:	4618      	mov	r0, r3
 8018d64:	f7ff ff56 	bl	8018c14 <ptr_to_mem>
 8018d68:	4604      	mov	r4, r0
 8018d6a:	68b8      	ldr	r0, [r7, #8]
 8018d6c:	f7ff ff64 	bl	8018c38 <mem_to_ptr>
 8018d70:	4603      	mov	r3, r0
 8018d72:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8018d74:	bf00      	nop
 8018d76:	3714      	adds	r7, #20
 8018d78:	46bd      	mov	sp, r7
 8018d7a:	bd90      	pop	{r4, r7, pc}
 8018d7c:	24008d64 	.word	0x24008d64
 8018d80:	0802a350 	.word	0x0802a350
 8018d84:	0802a380 	.word	0x0802a380
 8018d88:	0802a398 	.word	0x0802a398
 8018d8c:	24008d68 	.word	0x24008d68
 8018d90:	0802a3c0 	.word	0x0802a3c0
 8018d94:	0802a3dc 	.word	0x0802a3dc
 8018d98:	0802a3f8 	.word	0x0802a3f8
 8018d9c:	24008d70 	.word	0x24008d70

08018da0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8018da0:	b580      	push	{r7, lr}
 8018da2:	b082      	sub	sp, #8
 8018da4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8018da6:	4b1d      	ldr	r3, [pc, #116]	@ (8018e1c <mem_init+0x7c>)
 8018da8:	4a1d      	ldr	r2, [pc, #116]	@ (8018e20 <mem_init+0x80>)
 8018daa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8018dac:	4b1b      	ldr	r3, [pc, #108]	@ (8018e1c <mem_init+0x7c>)
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8018db8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	2200      	movs	r2, #0
 8018dbe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8018dc6:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8018dca:	f7ff ff23 	bl	8018c14 <ptr_to_mem>
 8018dce:	4603      	mov	r3, r0
 8018dd0:	4a14      	ldr	r2, [pc, #80]	@ (8018e24 <mem_init+0x84>)
 8018dd2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8018dd4:	4b13      	ldr	r3, [pc, #76]	@ (8018e24 <mem_init+0x84>)
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	2201      	movs	r2, #1
 8018dda:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8018ddc:	4b11      	ldr	r3, [pc, #68]	@ (8018e24 <mem_init+0x84>)
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8018de4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8018de6:	4b0f      	ldr	r3, [pc, #60]	@ (8018e24 <mem_init+0x84>)
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8018dee:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8018df0:	4b0a      	ldr	r3, [pc, #40]	@ (8018e1c <mem_init+0x7c>)
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	4a0c      	ldr	r2, [pc, #48]	@ (8018e28 <mem_init+0x88>)
 8018df6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8018df8:	480c      	ldr	r0, [pc, #48]	@ (8018e2c <mem_init+0x8c>)
 8018dfa:	f00b f93b 	bl	8024074 <sys_mutex_new>
 8018dfe:	4603      	mov	r3, r0
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d006      	beq.n	8018e12 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8018e04:	4b0a      	ldr	r3, [pc, #40]	@ (8018e30 <mem_init+0x90>)
 8018e06:	f240 221f 	movw	r2, #543	@ 0x21f
 8018e0a:	490a      	ldr	r1, [pc, #40]	@ (8018e34 <mem_init+0x94>)
 8018e0c:	480a      	ldr	r0, [pc, #40]	@ (8018e38 <mem_init+0x98>)
 8018e0e:	f00c fa29 	bl	8025264 <iprintf>
  }
}
 8018e12:	bf00      	nop
 8018e14:	3708      	adds	r7, #8
 8018e16:	46bd      	mov	sp, r7
 8018e18:	bd80      	pop	{r7, pc}
 8018e1a:	bf00      	nop
 8018e1c:	24008d64 	.word	0x24008d64
 8018e20:	30002000 	.word	0x30002000
 8018e24:	24008d68 	.word	0x24008d68
 8018e28:	24008d70 	.word	0x24008d70
 8018e2c:	24008d6c 	.word	0x24008d6c
 8018e30:	0802a350 	.word	0x0802a350
 8018e34:	0802a424 	.word	0x0802a424
 8018e38:	0802a398 	.word	0x0802a398

08018e3c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8018e3c:	b580      	push	{r7, lr}
 8018e3e:	b086      	sub	sp, #24
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8018e44:	6878      	ldr	r0, [r7, #4]
 8018e46:	f7ff fef7 	bl	8018c38 <mem_to_ptr>
 8018e4a:	4603      	mov	r3, r0
 8018e4c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	881b      	ldrh	r3, [r3, #0]
 8018e52:	4618      	mov	r0, r3
 8018e54:	f7ff fede 	bl	8018c14 <ptr_to_mem>
 8018e58:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	885b      	ldrh	r3, [r3, #2]
 8018e5e:	4618      	mov	r0, r3
 8018e60:	f7ff fed8 	bl	8018c14 <ptr_to_mem>
 8018e64:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	881b      	ldrh	r3, [r3, #0]
 8018e6a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8018e6e:	d818      	bhi.n	8018ea2 <mem_link_valid+0x66>
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	885b      	ldrh	r3, [r3, #2]
 8018e74:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8018e78:	d813      	bhi.n	8018ea2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8018e7e:	8afa      	ldrh	r2, [r7, #22]
 8018e80:	429a      	cmp	r2, r3
 8018e82:	d004      	beq.n	8018e8e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	881b      	ldrh	r3, [r3, #0]
 8018e88:	8afa      	ldrh	r2, [r7, #22]
 8018e8a:	429a      	cmp	r2, r3
 8018e8c:	d109      	bne.n	8018ea2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8018e8e:	4b08      	ldr	r3, [pc, #32]	@ (8018eb0 <mem_link_valid+0x74>)
 8018e90:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8018e92:	693a      	ldr	r2, [r7, #16]
 8018e94:	429a      	cmp	r2, r3
 8018e96:	d006      	beq.n	8018ea6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8018e98:	693b      	ldr	r3, [r7, #16]
 8018e9a:	885b      	ldrh	r3, [r3, #2]
 8018e9c:	8afa      	ldrh	r2, [r7, #22]
 8018e9e:	429a      	cmp	r2, r3
 8018ea0:	d001      	beq.n	8018ea6 <mem_link_valid+0x6a>
    return 0;
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	e000      	b.n	8018ea8 <mem_link_valid+0x6c>
  }
  return 1;
 8018ea6:	2301      	movs	r3, #1
}
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	3718      	adds	r7, #24
 8018eac:	46bd      	mov	sp, r7
 8018eae:	bd80      	pop	{r7, pc}
 8018eb0:	24008d68 	.word	0x24008d68

08018eb4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8018eb4:	b580      	push	{r7, lr}
 8018eb6:	b088      	sub	sp, #32
 8018eb8:	af00      	add	r7, sp, #0
 8018eba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d070      	beq.n	8018fa4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	f003 0303 	and.w	r3, r3, #3
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d00d      	beq.n	8018ee8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8018ecc:	4b37      	ldr	r3, [pc, #220]	@ (8018fac <mem_free+0xf8>)
 8018ece:	f240 2273 	movw	r2, #627	@ 0x273
 8018ed2:	4937      	ldr	r1, [pc, #220]	@ (8018fb0 <mem_free+0xfc>)
 8018ed4:	4837      	ldr	r0, [pc, #220]	@ (8018fb4 <mem_free+0x100>)
 8018ed6:	f00c f9c5 	bl	8025264 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018eda:	f00b f929 	bl	8024130 <sys_arch_protect>
 8018ede:	60f8      	str	r0, [r7, #12]
 8018ee0:	68f8      	ldr	r0, [r7, #12]
 8018ee2:	f00b f933 	bl	802414c <sys_arch_unprotect>
    return;
 8018ee6:	e05e      	b.n	8018fa6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	3b08      	subs	r3, #8
 8018eec:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8018eee:	4b32      	ldr	r3, [pc, #200]	@ (8018fb8 <mem_free+0x104>)
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	69fa      	ldr	r2, [r7, #28]
 8018ef4:	429a      	cmp	r2, r3
 8018ef6:	d306      	bcc.n	8018f06 <mem_free+0x52>
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	f103 020c 	add.w	r2, r3, #12
 8018efe:	4b2f      	ldr	r3, [pc, #188]	@ (8018fbc <mem_free+0x108>)
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	429a      	cmp	r2, r3
 8018f04:	d90d      	bls.n	8018f22 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8018f06:	4b29      	ldr	r3, [pc, #164]	@ (8018fac <mem_free+0xf8>)
 8018f08:	f240 227f 	movw	r2, #639	@ 0x27f
 8018f0c:	492c      	ldr	r1, [pc, #176]	@ (8018fc0 <mem_free+0x10c>)
 8018f0e:	4829      	ldr	r0, [pc, #164]	@ (8018fb4 <mem_free+0x100>)
 8018f10:	f00c f9a8 	bl	8025264 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018f14:	f00b f90c 	bl	8024130 <sys_arch_protect>
 8018f18:	6138      	str	r0, [r7, #16]
 8018f1a:	6938      	ldr	r0, [r7, #16]
 8018f1c:	f00b f916 	bl	802414c <sys_arch_unprotect>
    return;
 8018f20:	e041      	b.n	8018fa6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8018f22:	4828      	ldr	r0, [pc, #160]	@ (8018fc4 <mem_free+0x110>)
 8018f24:	f00b f8c2 	bl	80240ac <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8018f28:	69fb      	ldr	r3, [r7, #28]
 8018f2a:	791b      	ldrb	r3, [r3, #4]
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d110      	bne.n	8018f52 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8018f30:	4b1e      	ldr	r3, [pc, #120]	@ (8018fac <mem_free+0xf8>)
 8018f32:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8018f36:	4924      	ldr	r1, [pc, #144]	@ (8018fc8 <mem_free+0x114>)
 8018f38:	481e      	ldr	r0, [pc, #120]	@ (8018fb4 <mem_free+0x100>)
 8018f3a:	f00c f993 	bl	8025264 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8018f3e:	4821      	ldr	r0, [pc, #132]	@ (8018fc4 <mem_free+0x110>)
 8018f40:	f00b f8c3 	bl	80240ca <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018f44:	f00b f8f4 	bl	8024130 <sys_arch_protect>
 8018f48:	6178      	str	r0, [r7, #20]
 8018f4a:	6978      	ldr	r0, [r7, #20]
 8018f4c:	f00b f8fe 	bl	802414c <sys_arch_unprotect>
    return;
 8018f50:	e029      	b.n	8018fa6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8018f52:	69f8      	ldr	r0, [r7, #28]
 8018f54:	f7ff ff72 	bl	8018e3c <mem_link_valid>
 8018f58:	4603      	mov	r3, r0
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d110      	bne.n	8018f80 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8018f5e:	4b13      	ldr	r3, [pc, #76]	@ (8018fac <mem_free+0xf8>)
 8018f60:	f240 2295 	movw	r2, #661	@ 0x295
 8018f64:	4919      	ldr	r1, [pc, #100]	@ (8018fcc <mem_free+0x118>)
 8018f66:	4813      	ldr	r0, [pc, #76]	@ (8018fb4 <mem_free+0x100>)
 8018f68:	f00c f97c 	bl	8025264 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8018f6c:	4815      	ldr	r0, [pc, #84]	@ (8018fc4 <mem_free+0x110>)
 8018f6e:	f00b f8ac 	bl	80240ca <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018f72:	f00b f8dd 	bl	8024130 <sys_arch_protect>
 8018f76:	61b8      	str	r0, [r7, #24]
 8018f78:	69b8      	ldr	r0, [r7, #24]
 8018f7a:	f00b f8e7 	bl	802414c <sys_arch_unprotect>
    return;
 8018f7e:	e012      	b.n	8018fa6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8018f80:	69fb      	ldr	r3, [r7, #28]
 8018f82:	2200      	movs	r2, #0
 8018f84:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8018f86:	4b12      	ldr	r3, [pc, #72]	@ (8018fd0 <mem_free+0x11c>)
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	69fa      	ldr	r2, [r7, #28]
 8018f8c:	429a      	cmp	r2, r3
 8018f8e:	d202      	bcs.n	8018f96 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8018f90:	4a0f      	ldr	r2, [pc, #60]	@ (8018fd0 <mem_free+0x11c>)
 8018f92:	69fb      	ldr	r3, [r7, #28]
 8018f94:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8018f96:	69f8      	ldr	r0, [r7, #28]
 8018f98:	f7ff fe60 	bl	8018c5c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8018f9c:	4809      	ldr	r0, [pc, #36]	@ (8018fc4 <mem_free+0x110>)
 8018f9e:	f00b f894 	bl	80240ca <sys_mutex_unlock>
 8018fa2:	e000      	b.n	8018fa6 <mem_free+0xf2>
    return;
 8018fa4:	bf00      	nop
}
 8018fa6:	3720      	adds	r7, #32
 8018fa8:	46bd      	mov	sp, r7
 8018faa:	bd80      	pop	{r7, pc}
 8018fac:	0802a350 	.word	0x0802a350
 8018fb0:	0802a440 	.word	0x0802a440
 8018fb4:	0802a398 	.word	0x0802a398
 8018fb8:	24008d64 	.word	0x24008d64
 8018fbc:	24008d68 	.word	0x24008d68
 8018fc0:	0802a464 	.word	0x0802a464
 8018fc4:	24008d6c 	.word	0x24008d6c
 8018fc8:	0802a480 	.word	0x0802a480
 8018fcc:	0802a4a8 	.word	0x0802a4a8
 8018fd0:	24008d70 	.word	0x24008d70

08018fd4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8018fd4:	b580      	push	{r7, lr}
 8018fd6:	b088      	sub	sp, #32
 8018fd8:	af00      	add	r7, sp, #0
 8018fda:	6078      	str	r0, [r7, #4]
 8018fdc:	460b      	mov	r3, r1
 8018fde:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8018fe0:	887b      	ldrh	r3, [r7, #2]
 8018fe2:	3303      	adds	r3, #3
 8018fe4:	b29b      	uxth	r3, r3
 8018fe6:	f023 0303 	bic.w	r3, r3, #3
 8018fea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8018fec:	8bfb      	ldrh	r3, [r7, #30]
 8018fee:	2b0b      	cmp	r3, #11
 8018ff0:	d801      	bhi.n	8018ff6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8018ff2:	230c      	movs	r3, #12
 8018ff4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8018ff6:	8bfb      	ldrh	r3, [r7, #30]
 8018ff8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8018ffc:	d803      	bhi.n	8019006 <mem_trim+0x32>
 8018ffe:	8bfa      	ldrh	r2, [r7, #30]
 8019000:	887b      	ldrh	r3, [r7, #2]
 8019002:	429a      	cmp	r2, r3
 8019004:	d201      	bcs.n	801900a <mem_trim+0x36>
    return NULL;
 8019006:	2300      	movs	r3, #0
 8019008:	e0d8      	b.n	80191bc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801900a:	4b6e      	ldr	r3, [pc, #440]	@ (80191c4 <mem_trim+0x1f0>)
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	687a      	ldr	r2, [r7, #4]
 8019010:	429a      	cmp	r2, r3
 8019012:	d304      	bcc.n	801901e <mem_trim+0x4a>
 8019014:	4b6c      	ldr	r3, [pc, #432]	@ (80191c8 <mem_trim+0x1f4>)
 8019016:	681b      	ldr	r3, [r3, #0]
 8019018:	687a      	ldr	r2, [r7, #4]
 801901a:	429a      	cmp	r2, r3
 801901c:	d306      	bcc.n	801902c <mem_trim+0x58>
 801901e:	4b6b      	ldr	r3, [pc, #428]	@ (80191cc <mem_trim+0x1f8>)
 8019020:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8019024:	496a      	ldr	r1, [pc, #424]	@ (80191d0 <mem_trim+0x1fc>)
 8019026:	486b      	ldr	r0, [pc, #428]	@ (80191d4 <mem_trim+0x200>)
 8019028:	f00c f91c 	bl	8025264 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801902c:	4b65      	ldr	r3, [pc, #404]	@ (80191c4 <mem_trim+0x1f0>)
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	687a      	ldr	r2, [r7, #4]
 8019032:	429a      	cmp	r2, r3
 8019034:	d304      	bcc.n	8019040 <mem_trim+0x6c>
 8019036:	4b64      	ldr	r3, [pc, #400]	@ (80191c8 <mem_trim+0x1f4>)
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	687a      	ldr	r2, [r7, #4]
 801903c:	429a      	cmp	r2, r3
 801903e:	d307      	bcc.n	8019050 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8019040:	f00b f876 	bl	8024130 <sys_arch_protect>
 8019044:	60b8      	str	r0, [r7, #8]
 8019046:	68b8      	ldr	r0, [r7, #8]
 8019048:	f00b f880 	bl	802414c <sys_arch_unprotect>
    return rmem;
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	e0b5      	b.n	80191bc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	3b08      	subs	r3, #8
 8019054:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8019056:	69b8      	ldr	r0, [r7, #24]
 8019058:	f7ff fdee 	bl	8018c38 <mem_to_ptr>
 801905c:	4603      	mov	r3, r0
 801905e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8019060:	69bb      	ldr	r3, [r7, #24]
 8019062:	881a      	ldrh	r2, [r3, #0]
 8019064:	8afb      	ldrh	r3, [r7, #22]
 8019066:	1ad3      	subs	r3, r2, r3
 8019068:	b29b      	uxth	r3, r3
 801906a:	3b08      	subs	r3, #8
 801906c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801906e:	8bfa      	ldrh	r2, [r7, #30]
 8019070:	8abb      	ldrh	r3, [r7, #20]
 8019072:	429a      	cmp	r2, r3
 8019074:	d906      	bls.n	8019084 <mem_trim+0xb0>
 8019076:	4b55      	ldr	r3, [pc, #340]	@ (80191cc <mem_trim+0x1f8>)
 8019078:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 801907c:	4956      	ldr	r1, [pc, #344]	@ (80191d8 <mem_trim+0x204>)
 801907e:	4855      	ldr	r0, [pc, #340]	@ (80191d4 <mem_trim+0x200>)
 8019080:	f00c f8f0 	bl	8025264 <iprintf>
  if (newsize > size) {
 8019084:	8bfa      	ldrh	r2, [r7, #30]
 8019086:	8abb      	ldrh	r3, [r7, #20]
 8019088:	429a      	cmp	r2, r3
 801908a:	d901      	bls.n	8019090 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801908c:	2300      	movs	r3, #0
 801908e:	e095      	b.n	80191bc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8019090:	8bfa      	ldrh	r2, [r7, #30]
 8019092:	8abb      	ldrh	r3, [r7, #20]
 8019094:	429a      	cmp	r2, r3
 8019096:	d101      	bne.n	801909c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	e08f      	b.n	80191bc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801909c:	484f      	ldr	r0, [pc, #316]	@ (80191dc <mem_trim+0x208>)
 801909e:	f00b f805 	bl	80240ac <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80190a2:	69bb      	ldr	r3, [r7, #24]
 80190a4:	881b      	ldrh	r3, [r3, #0]
 80190a6:	4618      	mov	r0, r3
 80190a8:	f7ff fdb4 	bl	8018c14 <ptr_to_mem>
 80190ac:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80190ae:	693b      	ldr	r3, [r7, #16]
 80190b0:	791b      	ldrb	r3, [r3, #4]
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d13f      	bne.n	8019136 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80190b6:	69bb      	ldr	r3, [r7, #24]
 80190b8:	881b      	ldrh	r3, [r3, #0]
 80190ba:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80190be:	d106      	bne.n	80190ce <mem_trim+0xfa>
 80190c0:	4b42      	ldr	r3, [pc, #264]	@ (80191cc <mem_trim+0x1f8>)
 80190c2:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80190c6:	4946      	ldr	r1, [pc, #280]	@ (80191e0 <mem_trim+0x20c>)
 80190c8:	4842      	ldr	r0, [pc, #264]	@ (80191d4 <mem_trim+0x200>)
 80190ca:	f00c f8cb 	bl	8025264 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80190ce:	693b      	ldr	r3, [r7, #16]
 80190d0:	881b      	ldrh	r3, [r3, #0]
 80190d2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80190d4:	8afa      	ldrh	r2, [r7, #22]
 80190d6:	8bfb      	ldrh	r3, [r7, #30]
 80190d8:	4413      	add	r3, r2
 80190da:	b29b      	uxth	r3, r3
 80190dc:	3308      	adds	r3, #8
 80190de:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80190e0:	4b40      	ldr	r3, [pc, #256]	@ (80191e4 <mem_trim+0x210>)
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	693a      	ldr	r2, [r7, #16]
 80190e6:	429a      	cmp	r2, r3
 80190e8:	d106      	bne.n	80190f8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80190ea:	89fb      	ldrh	r3, [r7, #14]
 80190ec:	4618      	mov	r0, r3
 80190ee:	f7ff fd91 	bl	8018c14 <ptr_to_mem>
 80190f2:	4603      	mov	r3, r0
 80190f4:	4a3b      	ldr	r2, [pc, #236]	@ (80191e4 <mem_trim+0x210>)
 80190f6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80190f8:	89fb      	ldrh	r3, [r7, #14]
 80190fa:	4618      	mov	r0, r3
 80190fc:	f7ff fd8a 	bl	8018c14 <ptr_to_mem>
 8019100:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8019102:	693b      	ldr	r3, [r7, #16]
 8019104:	2200      	movs	r2, #0
 8019106:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8019108:	693b      	ldr	r3, [r7, #16]
 801910a:	89ba      	ldrh	r2, [r7, #12]
 801910c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801910e:	693b      	ldr	r3, [r7, #16]
 8019110:	8afa      	ldrh	r2, [r7, #22]
 8019112:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8019114:	69bb      	ldr	r3, [r7, #24]
 8019116:	89fa      	ldrh	r2, [r7, #14]
 8019118:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801911a:	693b      	ldr	r3, [r7, #16]
 801911c:	881b      	ldrh	r3, [r3, #0]
 801911e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8019122:	d047      	beq.n	80191b4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8019124:	693b      	ldr	r3, [r7, #16]
 8019126:	881b      	ldrh	r3, [r3, #0]
 8019128:	4618      	mov	r0, r3
 801912a:	f7ff fd73 	bl	8018c14 <ptr_to_mem>
 801912e:	4602      	mov	r2, r0
 8019130:	89fb      	ldrh	r3, [r7, #14]
 8019132:	8053      	strh	r3, [r2, #2]
 8019134:	e03e      	b.n	80191b4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8019136:	8bfb      	ldrh	r3, [r7, #30]
 8019138:	f103 0214 	add.w	r2, r3, #20
 801913c:	8abb      	ldrh	r3, [r7, #20]
 801913e:	429a      	cmp	r2, r3
 8019140:	d838      	bhi.n	80191b4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019142:	8afa      	ldrh	r2, [r7, #22]
 8019144:	8bfb      	ldrh	r3, [r7, #30]
 8019146:	4413      	add	r3, r2
 8019148:	b29b      	uxth	r3, r3
 801914a:	3308      	adds	r3, #8
 801914c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801914e:	69bb      	ldr	r3, [r7, #24]
 8019150:	881b      	ldrh	r3, [r3, #0]
 8019152:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8019156:	d106      	bne.n	8019166 <mem_trim+0x192>
 8019158:	4b1c      	ldr	r3, [pc, #112]	@ (80191cc <mem_trim+0x1f8>)
 801915a:	f240 3216 	movw	r2, #790	@ 0x316
 801915e:	4920      	ldr	r1, [pc, #128]	@ (80191e0 <mem_trim+0x20c>)
 8019160:	481c      	ldr	r0, [pc, #112]	@ (80191d4 <mem_trim+0x200>)
 8019162:	f00c f87f 	bl	8025264 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8019166:	89fb      	ldrh	r3, [r7, #14]
 8019168:	4618      	mov	r0, r3
 801916a:	f7ff fd53 	bl	8018c14 <ptr_to_mem>
 801916e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8019170:	4b1c      	ldr	r3, [pc, #112]	@ (80191e4 <mem_trim+0x210>)
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	693a      	ldr	r2, [r7, #16]
 8019176:	429a      	cmp	r2, r3
 8019178:	d202      	bcs.n	8019180 <mem_trim+0x1ac>
      lfree = mem2;
 801917a:	4a1a      	ldr	r2, [pc, #104]	@ (80191e4 <mem_trim+0x210>)
 801917c:	693b      	ldr	r3, [r7, #16]
 801917e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8019180:	693b      	ldr	r3, [r7, #16]
 8019182:	2200      	movs	r2, #0
 8019184:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8019186:	69bb      	ldr	r3, [r7, #24]
 8019188:	881a      	ldrh	r2, [r3, #0]
 801918a:	693b      	ldr	r3, [r7, #16]
 801918c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801918e:	693b      	ldr	r3, [r7, #16]
 8019190:	8afa      	ldrh	r2, [r7, #22]
 8019192:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8019194:	69bb      	ldr	r3, [r7, #24]
 8019196:	89fa      	ldrh	r2, [r7, #14]
 8019198:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801919a:	693b      	ldr	r3, [r7, #16]
 801919c:	881b      	ldrh	r3, [r3, #0]
 801919e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80191a2:	d007      	beq.n	80191b4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80191a4:	693b      	ldr	r3, [r7, #16]
 80191a6:	881b      	ldrh	r3, [r3, #0]
 80191a8:	4618      	mov	r0, r3
 80191aa:	f7ff fd33 	bl	8018c14 <ptr_to_mem>
 80191ae:	4602      	mov	r2, r0
 80191b0:	89fb      	ldrh	r3, [r7, #14]
 80191b2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80191b4:	4809      	ldr	r0, [pc, #36]	@ (80191dc <mem_trim+0x208>)
 80191b6:	f00a ff88 	bl	80240ca <sys_mutex_unlock>
  return rmem;
 80191ba:	687b      	ldr	r3, [r7, #4]
}
 80191bc:	4618      	mov	r0, r3
 80191be:	3720      	adds	r7, #32
 80191c0:	46bd      	mov	sp, r7
 80191c2:	bd80      	pop	{r7, pc}
 80191c4:	24008d64 	.word	0x24008d64
 80191c8:	24008d68 	.word	0x24008d68
 80191cc:	0802a350 	.word	0x0802a350
 80191d0:	0802a4dc 	.word	0x0802a4dc
 80191d4:	0802a398 	.word	0x0802a398
 80191d8:	0802a4f4 	.word	0x0802a4f4
 80191dc:	24008d6c 	.word	0x24008d6c
 80191e0:	0802a514 	.word	0x0802a514
 80191e4:	24008d70 	.word	0x24008d70

080191e8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80191e8:	b580      	push	{r7, lr}
 80191ea:	b088      	sub	sp, #32
 80191ec:	af00      	add	r7, sp, #0
 80191ee:	4603      	mov	r3, r0
 80191f0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80191f2:	88fb      	ldrh	r3, [r7, #6]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d101      	bne.n	80191fc <mem_malloc+0x14>
    return NULL;
 80191f8:	2300      	movs	r3, #0
 80191fa:	e0e2      	b.n	80193c2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80191fc:	88fb      	ldrh	r3, [r7, #6]
 80191fe:	3303      	adds	r3, #3
 8019200:	b29b      	uxth	r3, r3
 8019202:	f023 0303 	bic.w	r3, r3, #3
 8019206:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8019208:	8bbb      	ldrh	r3, [r7, #28]
 801920a:	2b0b      	cmp	r3, #11
 801920c:	d801      	bhi.n	8019212 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801920e:	230c      	movs	r3, #12
 8019210:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8019212:	8bbb      	ldrh	r3, [r7, #28]
 8019214:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8019218:	d803      	bhi.n	8019222 <mem_malloc+0x3a>
 801921a:	8bba      	ldrh	r2, [r7, #28]
 801921c:	88fb      	ldrh	r3, [r7, #6]
 801921e:	429a      	cmp	r2, r3
 8019220:	d201      	bcs.n	8019226 <mem_malloc+0x3e>
    return NULL;
 8019222:	2300      	movs	r3, #0
 8019224:	e0cd      	b.n	80193c2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8019226:	4869      	ldr	r0, [pc, #420]	@ (80193cc <mem_malloc+0x1e4>)
 8019228:	f00a ff40 	bl	80240ac <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801922c:	4b68      	ldr	r3, [pc, #416]	@ (80193d0 <mem_malloc+0x1e8>)
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	4618      	mov	r0, r3
 8019232:	f7ff fd01 	bl	8018c38 <mem_to_ptr>
 8019236:	4603      	mov	r3, r0
 8019238:	83fb      	strh	r3, [r7, #30]
 801923a:	e0b7      	b.n	80193ac <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801923c:	8bfb      	ldrh	r3, [r7, #30]
 801923e:	4618      	mov	r0, r3
 8019240:	f7ff fce8 	bl	8018c14 <ptr_to_mem>
 8019244:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8019246:	697b      	ldr	r3, [r7, #20]
 8019248:	791b      	ldrb	r3, [r3, #4]
 801924a:	2b00      	cmp	r3, #0
 801924c:	f040 80a7 	bne.w	801939e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8019250:	697b      	ldr	r3, [r7, #20]
 8019252:	881b      	ldrh	r3, [r3, #0]
 8019254:	461a      	mov	r2, r3
 8019256:	8bfb      	ldrh	r3, [r7, #30]
 8019258:	1ad3      	subs	r3, r2, r3
 801925a:	f1a3 0208 	sub.w	r2, r3, #8
 801925e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8019260:	429a      	cmp	r2, r3
 8019262:	f0c0 809c 	bcc.w	801939e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8019266:	697b      	ldr	r3, [r7, #20]
 8019268:	881b      	ldrh	r3, [r3, #0]
 801926a:	461a      	mov	r2, r3
 801926c:	8bfb      	ldrh	r3, [r7, #30]
 801926e:	1ad3      	subs	r3, r2, r3
 8019270:	f1a3 0208 	sub.w	r2, r3, #8
 8019274:	8bbb      	ldrh	r3, [r7, #28]
 8019276:	3314      	adds	r3, #20
 8019278:	429a      	cmp	r2, r3
 801927a:	d333      	bcc.n	80192e4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801927c:	8bfa      	ldrh	r2, [r7, #30]
 801927e:	8bbb      	ldrh	r3, [r7, #28]
 8019280:	4413      	add	r3, r2
 8019282:	b29b      	uxth	r3, r3
 8019284:	3308      	adds	r3, #8
 8019286:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8019288:	8a7b      	ldrh	r3, [r7, #18]
 801928a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801928e:	d106      	bne.n	801929e <mem_malloc+0xb6>
 8019290:	4b50      	ldr	r3, [pc, #320]	@ (80193d4 <mem_malloc+0x1ec>)
 8019292:	f240 3287 	movw	r2, #903	@ 0x387
 8019296:	4950      	ldr	r1, [pc, #320]	@ (80193d8 <mem_malloc+0x1f0>)
 8019298:	4850      	ldr	r0, [pc, #320]	@ (80193dc <mem_malloc+0x1f4>)
 801929a:	f00b ffe3 	bl	8025264 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801929e:	8a7b      	ldrh	r3, [r7, #18]
 80192a0:	4618      	mov	r0, r3
 80192a2:	f7ff fcb7 	bl	8018c14 <ptr_to_mem>
 80192a6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	2200      	movs	r2, #0
 80192ac:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80192ae:	697b      	ldr	r3, [r7, #20]
 80192b0:	881a      	ldrh	r2, [r3, #0]
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	8bfa      	ldrh	r2, [r7, #30]
 80192ba:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80192bc:	697b      	ldr	r3, [r7, #20]
 80192be:	8a7a      	ldrh	r2, [r7, #18]
 80192c0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80192c2:	697b      	ldr	r3, [r7, #20]
 80192c4:	2201      	movs	r2, #1
 80192c6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	881b      	ldrh	r3, [r3, #0]
 80192cc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80192d0:	d00b      	beq.n	80192ea <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80192d2:	68fb      	ldr	r3, [r7, #12]
 80192d4:	881b      	ldrh	r3, [r3, #0]
 80192d6:	4618      	mov	r0, r3
 80192d8:	f7ff fc9c 	bl	8018c14 <ptr_to_mem>
 80192dc:	4602      	mov	r2, r0
 80192de:	8a7b      	ldrh	r3, [r7, #18]
 80192e0:	8053      	strh	r3, [r2, #2]
 80192e2:	e002      	b.n	80192ea <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80192e4:	697b      	ldr	r3, [r7, #20]
 80192e6:	2201      	movs	r2, #1
 80192e8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80192ea:	4b39      	ldr	r3, [pc, #228]	@ (80193d0 <mem_malloc+0x1e8>)
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	697a      	ldr	r2, [r7, #20]
 80192f0:	429a      	cmp	r2, r3
 80192f2:	d127      	bne.n	8019344 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80192f4:	4b36      	ldr	r3, [pc, #216]	@ (80193d0 <mem_malloc+0x1e8>)
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80192fa:	e005      	b.n	8019308 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80192fc:	69bb      	ldr	r3, [r7, #24]
 80192fe:	881b      	ldrh	r3, [r3, #0]
 8019300:	4618      	mov	r0, r3
 8019302:	f7ff fc87 	bl	8018c14 <ptr_to_mem>
 8019306:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8019308:	69bb      	ldr	r3, [r7, #24]
 801930a:	791b      	ldrb	r3, [r3, #4]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d004      	beq.n	801931a <mem_malloc+0x132>
 8019310:	4b33      	ldr	r3, [pc, #204]	@ (80193e0 <mem_malloc+0x1f8>)
 8019312:	681b      	ldr	r3, [r3, #0]
 8019314:	69ba      	ldr	r2, [r7, #24]
 8019316:	429a      	cmp	r2, r3
 8019318:	d1f0      	bne.n	80192fc <mem_malloc+0x114>
          }
          lfree = cur;
 801931a:	4a2d      	ldr	r2, [pc, #180]	@ (80193d0 <mem_malloc+0x1e8>)
 801931c:	69bb      	ldr	r3, [r7, #24]
 801931e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8019320:	4b2b      	ldr	r3, [pc, #172]	@ (80193d0 <mem_malloc+0x1e8>)
 8019322:	681a      	ldr	r2, [r3, #0]
 8019324:	4b2e      	ldr	r3, [pc, #184]	@ (80193e0 <mem_malloc+0x1f8>)
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	429a      	cmp	r2, r3
 801932a:	d00b      	beq.n	8019344 <mem_malloc+0x15c>
 801932c:	4b28      	ldr	r3, [pc, #160]	@ (80193d0 <mem_malloc+0x1e8>)
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	791b      	ldrb	r3, [r3, #4]
 8019332:	2b00      	cmp	r3, #0
 8019334:	d006      	beq.n	8019344 <mem_malloc+0x15c>
 8019336:	4b27      	ldr	r3, [pc, #156]	@ (80193d4 <mem_malloc+0x1ec>)
 8019338:	f240 32b5 	movw	r2, #949	@ 0x3b5
 801933c:	4929      	ldr	r1, [pc, #164]	@ (80193e4 <mem_malloc+0x1fc>)
 801933e:	4827      	ldr	r0, [pc, #156]	@ (80193dc <mem_malloc+0x1f4>)
 8019340:	f00b ff90 	bl	8025264 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8019344:	4821      	ldr	r0, [pc, #132]	@ (80193cc <mem_malloc+0x1e4>)
 8019346:	f00a fec0 	bl	80240ca <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801934a:	8bba      	ldrh	r2, [r7, #28]
 801934c:	697b      	ldr	r3, [r7, #20]
 801934e:	4413      	add	r3, r2
 8019350:	3308      	adds	r3, #8
 8019352:	4a23      	ldr	r2, [pc, #140]	@ (80193e0 <mem_malloc+0x1f8>)
 8019354:	6812      	ldr	r2, [r2, #0]
 8019356:	4293      	cmp	r3, r2
 8019358:	d906      	bls.n	8019368 <mem_malloc+0x180>
 801935a:	4b1e      	ldr	r3, [pc, #120]	@ (80193d4 <mem_malloc+0x1ec>)
 801935c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8019360:	4921      	ldr	r1, [pc, #132]	@ (80193e8 <mem_malloc+0x200>)
 8019362:	481e      	ldr	r0, [pc, #120]	@ (80193dc <mem_malloc+0x1f4>)
 8019364:	f00b ff7e 	bl	8025264 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8019368:	697b      	ldr	r3, [r7, #20]
 801936a:	f003 0303 	and.w	r3, r3, #3
 801936e:	2b00      	cmp	r3, #0
 8019370:	d006      	beq.n	8019380 <mem_malloc+0x198>
 8019372:	4b18      	ldr	r3, [pc, #96]	@ (80193d4 <mem_malloc+0x1ec>)
 8019374:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8019378:	491c      	ldr	r1, [pc, #112]	@ (80193ec <mem_malloc+0x204>)
 801937a:	4818      	ldr	r0, [pc, #96]	@ (80193dc <mem_malloc+0x1f4>)
 801937c:	f00b ff72 	bl	8025264 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8019380:	697b      	ldr	r3, [r7, #20]
 8019382:	f003 0303 	and.w	r3, r3, #3
 8019386:	2b00      	cmp	r3, #0
 8019388:	d006      	beq.n	8019398 <mem_malloc+0x1b0>
 801938a:	4b12      	ldr	r3, [pc, #72]	@ (80193d4 <mem_malloc+0x1ec>)
 801938c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8019390:	4917      	ldr	r1, [pc, #92]	@ (80193f0 <mem_malloc+0x208>)
 8019392:	4812      	ldr	r0, [pc, #72]	@ (80193dc <mem_malloc+0x1f4>)
 8019394:	f00b ff66 	bl	8025264 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8019398:	697b      	ldr	r3, [r7, #20]
 801939a:	3308      	adds	r3, #8
 801939c:	e011      	b.n	80193c2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801939e:	8bfb      	ldrh	r3, [r7, #30]
 80193a0:	4618      	mov	r0, r3
 80193a2:	f7ff fc37 	bl	8018c14 <ptr_to_mem>
 80193a6:	4603      	mov	r3, r0
 80193a8:	881b      	ldrh	r3, [r3, #0]
 80193aa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80193ac:	8bfa      	ldrh	r2, [r7, #30]
 80193ae:	8bbb      	ldrh	r3, [r7, #28]
 80193b0:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 80193b4:	429a      	cmp	r2, r3
 80193b6:	f4ff af41 	bcc.w	801923c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80193ba:	4804      	ldr	r0, [pc, #16]	@ (80193cc <mem_malloc+0x1e4>)
 80193bc:	f00a fe85 	bl	80240ca <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80193c0:	2300      	movs	r3, #0
}
 80193c2:	4618      	mov	r0, r3
 80193c4:	3720      	adds	r7, #32
 80193c6:	46bd      	mov	sp, r7
 80193c8:	bd80      	pop	{r7, pc}
 80193ca:	bf00      	nop
 80193cc:	24008d6c 	.word	0x24008d6c
 80193d0:	24008d70 	.word	0x24008d70
 80193d4:	0802a350 	.word	0x0802a350
 80193d8:	0802a514 	.word	0x0802a514
 80193dc:	0802a398 	.word	0x0802a398
 80193e0:	24008d68 	.word	0x24008d68
 80193e4:	0802a528 	.word	0x0802a528
 80193e8:	0802a544 	.word	0x0802a544
 80193ec:	0802a574 	.word	0x0802a574
 80193f0:	0802a5a4 	.word	0x0802a5a4

080193f4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80193f4:	b480      	push	{r7}
 80193f6:	b085      	sub	sp, #20
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	689b      	ldr	r3, [r3, #8]
 8019400:	2200      	movs	r2, #0
 8019402:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	685b      	ldr	r3, [r3, #4]
 8019408:	3303      	adds	r3, #3
 801940a:	f023 0303 	bic.w	r3, r3, #3
 801940e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8019410:	2300      	movs	r3, #0
 8019412:	60fb      	str	r3, [r7, #12]
 8019414:	e011      	b.n	801943a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	689b      	ldr	r3, [r3, #8]
 801941a:	681a      	ldr	r2, [r3, #0]
 801941c:	68bb      	ldr	r3, [r7, #8]
 801941e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	689b      	ldr	r3, [r3, #8]
 8019424:	68ba      	ldr	r2, [r7, #8]
 8019426:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	881b      	ldrh	r3, [r3, #0]
 801942c:	461a      	mov	r2, r3
 801942e:	68bb      	ldr	r3, [r7, #8]
 8019430:	4413      	add	r3, r2
 8019432:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	3301      	adds	r3, #1
 8019438:	60fb      	str	r3, [r7, #12]
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	885b      	ldrh	r3, [r3, #2]
 801943e:	461a      	mov	r2, r3
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	4293      	cmp	r3, r2
 8019444:	dbe7      	blt.n	8019416 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8019446:	bf00      	nop
 8019448:	bf00      	nop
 801944a:	3714      	adds	r7, #20
 801944c:	46bd      	mov	sp, r7
 801944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019452:	4770      	bx	lr

08019454 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8019454:	b580      	push	{r7, lr}
 8019456:	b082      	sub	sp, #8
 8019458:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801945a:	2300      	movs	r3, #0
 801945c:	80fb      	strh	r3, [r7, #6]
 801945e:	e009      	b.n	8019474 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8019460:	88fb      	ldrh	r3, [r7, #6]
 8019462:	4a08      	ldr	r2, [pc, #32]	@ (8019484 <memp_init+0x30>)
 8019464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019468:	4618      	mov	r0, r3
 801946a:	f7ff ffc3 	bl	80193f4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801946e:	88fb      	ldrh	r3, [r7, #6]
 8019470:	3301      	adds	r3, #1
 8019472:	80fb      	strh	r3, [r7, #6]
 8019474:	88fb      	ldrh	r3, [r7, #6]
 8019476:	2b0c      	cmp	r3, #12
 8019478:	d9f2      	bls.n	8019460 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801947a:	bf00      	nop
 801947c:	bf00      	nop
 801947e:	3708      	adds	r7, #8
 8019480:	46bd      	mov	sp, r7
 8019482:	bd80      	pop	{r7, pc}
 8019484:	0802cea4 	.word	0x0802cea4

08019488 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8019488:	b580      	push	{r7, lr}
 801948a:	b084      	sub	sp, #16
 801948c:	af00      	add	r7, sp, #0
 801948e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8019490:	f00a fe4e 	bl	8024130 <sys_arch_protect>
 8019494:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	689b      	ldr	r3, [r3, #8]
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801949e:	68bb      	ldr	r3, [r7, #8]
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d015      	beq.n	80194d0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	689b      	ldr	r3, [r3, #8]
 80194a8:	68ba      	ldr	r2, [r7, #8]
 80194aa:	6812      	ldr	r2, [r2, #0]
 80194ac:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80194ae:	68bb      	ldr	r3, [r7, #8]
 80194b0:	f003 0303 	and.w	r3, r3, #3
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d006      	beq.n	80194c6 <do_memp_malloc_pool+0x3e>
 80194b8:	4b09      	ldr	r3, [pc, #36]	@ (80194e0 <do_memp_malloc_pool+0x58>)
 80194ba:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80194be:	4909      	ldr	r1, [pc, #36]	@ (80194e4 <do_memp_malloc_pool+0x5c>)
 80194c0:	4809      	ldr	r0, [pc, #36]	@ (80194e8 <do_memp_malloc_pool+0x60>)
 80194c2:	f00b fecf 	bl	8025264 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80194c6:	68f8      	ldr	r0, [r7, #12]
 80194c8:	f00a fe40 	bl	802414c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80194cc:	68bb      	ldr	r3, [r7, #8]
 80194ce:	e003      	b.n	80194d8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80194d0:	68f8      	ldr	r0, [r7, #12]
 80194d2:	f00a fe3b 	bl	802414c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80194d6:	2300      	movs	r3, #0
}
 80194d8:	4618      	mov	r0, r3
 80194da:	3710      	adds	r7, #16
 80194dc:	46bd      	mov	sp, r7
 80194de:	bd80      	pop	{r7, pc}
 80194e0:	0802a5c8 	.word	0x0802a5c8
 80194e4:	0802a5f8 	.word	0x0802a5f8
 80194e8:	0802a61c 	.word	0x0802a61c

080194ec <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b082      	sub	sp, #8
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d106      	bne.n	8019508 <memp_malloc_pool+0x1c>
 80194fa:	4b0a      	ldr	r3, [pc, #40]	@ (8019524 <memp_malloc_pool+0x38>)
 80194fc:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8019500:	4909      	ldr	r1, [pc, #36]	@ (8019528 <memp_malloc_pool+0x3c>)
 8019502:	480a      	ldr	r0, [pc, #40]	@ (801952c <memp_malloc_pool+0x40>)
 8019504:	f00b feae 	bl	8025264 <iprintf>
  if (desc == NULL) {
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	2b00      	cmp	r3, #0
 801950c:	d101      	bne.n	8019512 <memp_malloc_pool+0x26>
    return NULL;
 801950e:	2300      	movs	r3, #0
 8019510:	e003      	b.n	801951a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8019512:	6878      	ldr	r0, [r7, #4]
 8019514:	f7ff ffb8 	bl	8019488 <do_memp_malloc_pool>
 8019518:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801951a:	4618      	mov	r0, r3
 801951c:	3708      	adds	r7, #8
 801951e:	46bd      	mov	sp, r7
 8019520:	bd80      	pop	{r7, pc}
 8019522:	bf00      	nop
 8019524:	0802a5c8 	.word	0x0802a5c8
 8019528:	0802a644 	.word	0x0802a644
 801952c:	0802a61c 	.word	0x0802a61c

08019530 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8019530:	b580      	push	{r7, lr}
 8019532:	b084      	sub	sp, #16
 8019534:	af00      	add	r7, sp, #0
 8019536:	4603      	mov	r3, r0
 8019538:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801953a:	79fb      	ldrb	r3, [r7, #7]
 801953c:	2b0c      	cmp	r3, #12
 801953e:	d908      	bls.n	8019552 <memp_malloc+0x22>
 8019540:	4b0a      	ldr	r3, [pc, #40]	@ (801956c <memp_malloc+0x3c>)
 8019542:	f240 1257 	movw	r2, #343	@ 0x157
 8019546:	490a      	ldr	r1, [pc, #40]	@ (8019570 <memp_malloc+0x40>)
 8019548:	480a      	ldr	r0, [pc, #40]	@ (8019574 <memp_malloc+0x44>)
 801954a:	f00b fe8b 	bl	8025264 <iprintf>
 801954e:	2300      	movs	r3, #0
 8019550:	e008      	b.n	8019564 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8019552:	79fb      	ldrb	r3, [r7, #7]
 8019554:	4a08      	ldr	r2, [pc, #32]	@ (8019578 <memp_malloc+0x48>)
 8019556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801955a:	4618      	mov	r0, r3
 801955c:	f7ff ff94 	bl	8019488 <do_memp_malloc_pool>
 8019560:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8019562:	68fb      	ldr	r3, [r7, #12]
}
 8019564:	4618      	mov	r0, r3
 8019566:	3710      	adds	r7, #16
 8019568:	46bd      	mov	sp, r7
 801956a:	bd80      	pop	{r7, pc}
 801956c:	0802a5c8 	.word	0x0802a5c8
 8019570:	0802a658 	.word	0x0802a658
 8019574:	0802a61c 	.word	0x0802a61c
 8019578:	0802cea4 	.word	0x0802cea4

0801957c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801957c:	b580      	push	{r7, lr}
 801957e:	b084      	sub	sp, #16
 8019580:	af00      	add	r7, sp, #0
 8019582:	6078      	str	r0, [r7, #4]
 8019584:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8019586:	683b      	ldr	r3, [r7, #0]
 8019588:	f003 0303 	and.w	r3, r3, #3
 801958c:	2b00      	cmp	r3, #0
 801958e:	d006      	beq.n	801959e <do_memp_free_pool+0x22>
 8019590:	4b0d      	ldr	r3, [pc, #52]	@ (80195c8 <do_memp_free_pool+0x4c>)
 8019592:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8019596:	490d      	ldr	r1, [pc, #52]	@ (80195cc <do_memp_free_pool+0x50>)
 8019598:	480d      	ldr	r0, [pc, #52]	@ (80195d0 <do_memp_free_pool+0x54>)
 801959a:	f00b fe63 	bl	8025264 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801959e:	683b      	ldr	r3, [r7, #0]
 80195a0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80195a2:	f00a fdc5 	bl	8024130 <sys_arch_protect>
 80195a6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	689b      	ldr	r3, [r3, #8]
 80195ac:	681a      	ldr	r2, [r3, #0]
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	689b      	ldr	r3, [r3, #8]
 80195b6:	68fa      	ldr	r2, [r7, #12]
 80195b8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80195ba:	68b8      	ldr	r0, [r7, #8]
 80195bc:	f00a fdc6 	bl	802414c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80195c0:	bf00      	nop
 80195c2:	3710      	adds	r7, #16
 80195c4:	46bd      	mov	sp, r7
 80195c6:	bd80      	pop	{r7, pc}
 80195c8:	0802a5c8 	.word	0x0802a5c8
 80195cc:	0802a678 	.word	0x0802a678
 80195d0:	0802a61c 	.word	0x0802a61c

080195d4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80195d4:	b580      	push	{r7, lr}
 80195d6:	b082      	sub	sp, #8
 80195d8:	af00      	add	r7, sp, #0
 80195da:	6078      	str	r0, [r7, #4]
 80195dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d106      	bne.n	80195f2 <memp_free_pool+0x1e>
 80195e4:	4b0a      	ldr	r3, [pc, #40]	@ (8019610 <memp_free_pool+0x3c>)
 80195e6:	f240 1295 	movw	r2, #405	@ 0x195
 80195ea:	490a      	ldr	r1, [pc, #40]	@ (8019614 <memp_free_pool+0x40>)
 80195ec:	480a      	ldr	r0, [pc, #40]	@ (8019618 <memp_free_pool+0x44>)
 80195ee:	f00b fe39 	bl	8025264 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d007      	beq.n	8019608 <memp_free_pool+0x34>
 80195f8:	683b      	ldr	r3, [r7, #0]
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d004      	beq.n	8019608 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80195fe:	6839      	ldr	r1, [r7, #0]
 8019600:	6878      	ldr	r0, [r7, #4]
 8019602:	f7ff ffbb 	bl	801957c <do_memp_free_pool>
 8019606:	e000      	b.n	801960a <memp_free_pool+0x36>
    return;
 8019608:	bf00      	nop
}
 801960a:	3708      	adds	r7, #8
 801960c:	46bd      	mov	sp, r7
 801960e:	bd80      	pop	{r7, pc}
 8019610:	0802a5c8 	.word	0x0802a5c8
 8019614:	0802a644 	.word	0x0802a644
 8019618:	0802a61c 	.word	0x0802a61c

0801961c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801961c:	b580      	push	{r7, lr}
 801961e:	b082      	sub	sp, #8
 8019620:	af00      	add	r7, sp, #0
 8019622:	4603      	mov	r3, r0
 8019624:	6039      	str	r1, [r7, #0]
 8019626:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8019628:	79fb      	ldrb	r3, [r7, #7]
 801962a:	2b0c      	cmp	r3, #12
 801962c:	d907      	bls.n	801963e <memp_free+0x22>
 801962e:	4b0c      	ldr	r3, [pc, #48]	@ (8019660 <memp_free+0x44>)
 8019630:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8019634:	490b      	ldr	r1, [pc, #44]	@ (8019664 <memp_free+0x48>)
 8019636:	480c      	ldr	r0, [pc, #48]	@ (8019668 <memp_free+0x4c>)
 8019638:	f00b fe14 	bl	8025264 <iprintf>
 801963c:	e00c      	b.n	8019658 <memp_free+0x3c>

  if (mem == NULL) {
 801963e:	683b      	ldr	r3, [r7, #0]
 8019640:	2b00      	cmp	r3, #0
 8019642:	d008      	beq.n	8019656 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8019644:	79fb      	ldrb	r3, [r7, #7]
 8019646:	4a09      	ldr	r2, [pc, #36]	@ (801966c <memp_free+0x50>)
 8019648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801964c:	6839      	ldr	r1, [r7, #0]
 801964e:	4618      	mov	r0, r3
 8019650:	f7ff ff94 	bl	801957c <do_memp_free_pool>
 8019654:	e000      	b.n	8019658 <memp_free+0x3c>
    return;
 8019656:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8019658:	3708      	adds	r7, #8
 801965a:	46bd      	mov	sp, r7
 801965c:	bd80      	pop	{r7, pc}
 801965e:	bf00      	nop
 8019660:	0802a5c8 	.word	0x0802a5c8
 8019664:	0802a698 	.word	0x0802a698
 8019668:	0802a61c 	.word	0x0802a61c
 801966c:	0802cea4 	.word	0x0802cea4

08019670 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8019670:	b480      	push	{r7}
 8019672:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8019674:	bf00      	nop
 8019676:	46bd      	mov	sp, r7
 8019678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801967c:	4770      	bx	lr
	...

08019680 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8019680:	b580      	push	{r7, lr}
 8019682:	b086      	sub	sp, #24
 8019684:	af00      	add	r7, sp, #0
 8019686:	60f8      	str	r0, [r7, #12]
 8019688:	60b9      	str	r1, [r7, #8]
 801968a:	607a      	str	r2, [r7, #4]
 801968c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	2b00      	cmp	r3, #0
 8019692:	d108      	bne.n	80196a6 <netif_add+0x26>
 8019694:	4b57      	ldr	r3, [pc, #348]	@ (80197f4 <netif_add+0x174>)
 8019696:	f240 1227 	movw	r2, #295	@ 0x127
 801969a:	4957      	ldr	r1, [pc, #348]	@ (80197f8 <netif_add+0x178>)
 801969c:	4857      	ldr	r0, [pc, #348]	@ (80197fc <netif_add+0x17c>)
 801969e:	f00b fde1 	bl	8025264 <iprintf>
 80196a2:	2300      	movs	r3, #0
 80196a4:	e0a2      	b.n	80197ec <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80196a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d108      	bne.n	80196be <netif_add+0x3e>
 80196ac:	4b51      	ldr	r3, [pc, #324]	@ (80197f4 <netif_add+0x174>)
 80196ae:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80196b2:	4953      	ldr	r1, [pc, #332]	@ (8019800 <netif_add+0x180>)
 80196b4:	4851      	ldr	r0, [pc, #324]	@ (80197fc <netif_add+0x17c>)
 80196b6:	f00b fdd5 	bl	8025264 <iprintf>
 80196ba:	2300      	movs	r3, #0
 80196bc:	e096      	b.n	80197ec <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80196be:	68bb      	ldr	r3, [r7, #8]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d101      	bne.n	80196c8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80196c4:	4b4f      	ldr	r3, [pc, #316]	@ (8019804 <netif_add+0x184>)
 80196c6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d101      	bne.n	80196d2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80196ce:	4b4d      	ldr	r3, [pc, #308]	@ (8019804 <netif_add+0x184>)
 80196d0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80196d2:	683b      	ldr	r3, [r7, #0]
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d101      	bne.n	80196dc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80196d8:	4b4a      	ldr	r3, [pc, #296]	@ (8019804 <netif_add+0x184>)
 80196da:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	2200      	movs	r2, #0
 80196e0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80196e2:	68fb      	ldr	r3, [r7, #12]
 80196e4:	2200      	movs	r2, #0
 80196e6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80196e8:	68fb      	ldr	r3, [r7, #12]
 80196ea:	2200      	movs	r2, #0
 80196ec:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80196ee:	68fb      	ldr	r3, [r7, #12]
 80196f0:	4a45      	ldr	r2, [pc, #276]	@ (8019808 <netif_add+0x188>)
 80196f2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	2200      	movs	r2, #0
 80196f8:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	2200      	movs	r2, #0
 80196fe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	2200      	movs	r2, #0
 8019706:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	6a3a      	ldr	r2, [r7, #32]
 801970c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801970e:	4b3f      	ldr	r3, [pc, #252]	@ (801980c <netif_add+0x18c>)
 8019710:	781a      	ldrb	r2, [r3, #0]
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801971c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801971e:	683b      	ldr	r3, [r7, #0]
 8019720:	687a      	ldr	r2, [r7, #4]
 8019722:	68b9      	ldr	r1, [r7, #8]
 8019724:	68f8      	ldr	r0, [r7, #12]
 8019726:	f000 f913 	bl	8019950 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801972a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801972c:	68f8      	ldr	r0, [r7, #12]
 801972e:	4798      	blx	r3
 8019730:	4603      	mov	r3, r0
 8019732:	2b00      	cmp	r3, #0
 8019734:	d001      	beq.n	801973a <netif_add+0xba>
    return NULL;
 8019736:	2300      	movs	r3, #0
 8019738:	e058      	b.n	80197ec <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019740:	2bff      	cmp	r3, #255	@ 0xff
 8019742:	d103      	bne.n	801974c <netif_add+0xcc>
        netif->num = 0;
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	2200      	movs	r2, #0
 8019748:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 801974c:	2300      	movs	r3, #0
 801974e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8019750:	4b2f      	ldr	r3, [pc, #188]	@ (8019810 <netif_add+0x190>)
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	617b      	str	r3, [r7, #20]
 8019756:	e02b      	b.n	80197b0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8019758:	697a      	ldr	r2, [r7, #20]
 801975a:	68fb      	ldr	r3, [r7, #12]
 801975c:	429a      	cmp	r2, r3
 801975e:	d106      	bne.n	801976e <netif_add+0xee>
 8019760:	4b24      	ldr	r3, [pc, #144]	@ (80197f4 <netif_add+0x174>)
 8019762:	f240 128b 	movw	r2, #395	@ 0x18b
 8019766:	492b      	ldr	r1, [pc, #172]	@ (8019814 <netif_add+0x194>)
 8019768:	4824      	ldr	r0, [pc, #144]	@ (80197fc <netif_add+0x17c>)
 801976a:	f00b fd7b 	bl	8025264 <iprintf>
        num_netifs++;
 801976e:	693b      	ldr	r3, [r7, #16]
 8019770:	3301      	adds	r3, #1
 8019772:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8019774:	693b      	ldr	r3, [r7, #16]
 8019776:	2bff      	cmp	r3, #255	@ 0xff
 8019778:	dd06      	ble.n	8019788 <netif_add+0x108>
 801977a:	4b1e      	ldr	r3, [pc, #120]	@ (80197f4 <netif_add+0x174>)
 801977c:	f240 128d 	movw	r2, #397	@ 0x18d
 8019780:	4925      	ldr	r1, [pc, #148]	@ (8019818 <netif_add+0x198>)
 8019782:	481e      	ldr	r0, [pc, #120]	@ (80197fc <netif_add+0x17c>)
 8019784:	f00b fd6e 	bl	8025264 <iprintf>
        if (netif2->num == netif->num) {
 8019788:	697b      	ldr	r3, [r7, #20]
 801978a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019794:	429a      	cmp	r2, r3
 8019796:	d108      	bne.n	80197aa <netif_add+0x12a>
          netif->num++;
 8019798:	68fb      	ldr	r3, [r7, #12]
 801979a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801979e:	3301      	adds	r3, #1
 80197a0:	b2da      	uxtb	r2, r3
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80197a8:	e005      	b.n	80197b6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80197aa:	697b      	ldr	r3, [r7, #20]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	617b      	str	r3, [r7, #20]
 80197b0:	697b      	ldr	r3, [r7, #20]
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d1d0      	bne.n	8019758 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80197b6:	697b      	ldr	r3, [r7, #20]
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d1be      	bne.n	801973a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80197c2:	2bfe      	cmp	r3, #254	@ 0xfe
 80197c4:	d103      	bne.n	80197ce <netif_add+0x14e>
    netif_num = 0;
 80197c6:	4b11      	ldr	r3, [pc, #68]	@ (801980c <netif_add+0x18c>)
 80197c8:	2200      	movs	r2, #0
 80197ca:	701a      	strb	r2, [r3, #0]
 80197cc:	e006      	b.n	80197dc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80197d4:	3301      	adds	r3, #1
 80197d6:	b2da      	uxtb	r2, r3
 80197d8:	4b0c      	ldr	r3, [pc, #48]	@ (801980c <netif_add+0x18c>)
 80197da:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80197dc:	4b0c      	ldr	r3, [pc, #48]	@ (8019810 <netif_add+0x190>)
 80197de:	681a      	ldr	r2, [r3, #0]
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80197e4:	4a0a      	ldr	r2, [pc, #40]	@ (8019810 <netif_add+0x190>)
 80197e6:	68fb      	ldr	r3, [r7, #12]
 80197e8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80197ea:	68fb      	ldr	r3, [r7, #12]
}
 80197ec:	4618      	mov	r0, r3
 80197ee:	3718      	adds	r7, #24
 80197f0:	46bd      	mov	sp, r7
 80197f2:	bd80      	pop	{r7, pc}
 80197f4:	0802a6b4 	.word	0x0802a6b4
 80197f8:	0802a748 	.word	0x0802a748
 80197fc:	0802a704 	.word	0x0802a704
 8019800:	0802a764 	.word	0x0802a764
 8019804:	0802cf18 	.word	0x0802cf18
 8019808:	08019c2b 	.word	0x08019c2b
 801980c:	2400be48 	.word	0x2400be48
 8019810:	2400be40 	.word	0x2400be40
 8019814:	0802a788 	.word	0x0802a788
 8019818:	0802a79c 	.word	0x0802a79c

0801981c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801981c:	b580      	push	{r7, lr}
 801981e:	b082      	sub	sp, #8
 8019820:	af00      	add	r7, sp, #0
 8019822:	6078      	str	r0, [r7, #4]
 8019824:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8019826:	6839      	ldr	r1, [r7, #0]
 8019828:	6878      	ldr	r0, [r7, #4]
 801982a:	f002 fdc9 	bl	801c3c0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801982e:	6839      	ldr	r1, [r7, #0]
 8019830:	6878      	ldr	r0, [r7, #4]
 8019832:	f007 fe5f 	bl	80214f4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8019836:	bf00      	nop
 8019838:	3708      	adds	r7, #8
 801983a:	46bd      	mov	sp, r7
 801983c:	bd80      	pop	{r7, pc}
	...

08019840 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8019840:	b580      	push	{r7, lr}
 8019842:	b086      	sub	sp, #24
 8019844:	af00      	add	r7, sp, #0
 8019846:	60f8      	str	r0, [r7, #12]
 8019848:	60b9      	str	r1, [r7, #8]
 801984a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801984c:	68bb      	ldr	r3, [r7, #8]
 801984e:	2b00      	cmp	r3, #0
 8019850:	d106      	bne.n	8019860 <netif_do_set_ipaddr+0x20>
 8019852:	4b1d      	ldr	r3, [pc, #116]	@ (80198c8 <netif_do_set_ipaddr+0x88>)
 8019854:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8019858:	491c      	ldr	r1, [pc, #112]	@ (80198cc <netif_do_set_ipaddr+0x8c>)
 801985a:	481d      	ldr	r0, [pc, #116]	@ (80198d0 <netif_do_set_ipaddr+0x90>)
 801985c:	f00b fd02 	bl	8025264 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	2b00      	cmp	r3, #0
 8019864:	d106      	bne.n	8019874 <netif_do_set_ipaddr+0x34>
 8019866:	4b18      	ldr	r3, [pc, #96]	@ (80198c8 <netif_do_set_ipaddr+0x88>)
 8019868:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 801986c:	4917      	ldr	r1, [pc, #92]	@ (80198cc <netif_do_set_ipaddr+0x8c>)
 801986e:	4818      	ldr	r0, [pc, #96]	@ (80198d0 <netif_do_set_ipaddr+0x90>)
 8019870:	f00b fcf8 	bl	8025264 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8019874:	68bb      	ldr	r3, [r7, #8]
 8019876:	681a      	ldr	r2, [r3, #0]
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	3304      	adds	r3, #4
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	429a      	cmp	r2, r3
 8019880:	d01c      	beq.n	80198bc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8019882:	68bb      	ldr	r3, [r7, #8]
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	3304      	adds	r3, #4
 801988c:	681a      	ldr	r2, [r3, #0]
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8019892:	f107 0314 	add.w	r3, r7, #20
 8019896:	4619      	mov	r1, r3
 8019898:	6878      	ldr	r0, [r7, #4]
 801989a:	f7ff ffbf 	bl	801981c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801989e:	68bb      	ldr	r3, [r7, #8]
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d002      	beq.n	80198aa <netif_do_set_ipaddr+0x6a>
 80198a4:	68bb      	ldr	r3, [r7, #8]
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	e000      	b.n	80198ac <netif_do_set_ipaddr+0x6c>
 80198aa:	2300      	movs	r3, #0
 80198ac:	68fa      	ldr	r2, [r7, #12]
 80198ae:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80198b0:	2101      	movs	r1, #1
 80198b2:	68f8      	ldr	r0, [r7, #12]
 80198b4:	f000 f8d2 	bl	8019a5c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80198b8:	2301      	movs	r3, #1
 80198ba:	e000      	b.n	80198be <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80198bc:	2300      	movs	r3, #0
}
 80198be:	4618      	mov	r0, r3
 80198c0:	3718      	adds	r7, #24
 80198c2:	46bd      	mov	sp, r7
 80198c4:	bd80      	pop	{r7, pc}
 80198c6:	bf00      	nop
 80198c8:	0802a6b4 	.word	0x0802a6b4
 80198cc:	0802a7cc 	.word	0x0802a7cc
 80198d0:	0802a704 	.word	0x0802a704

080198d4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80198d4:	b480      	push	{r7}
 80198d6:	b085      	sub	sp, #20
 80198d8:	af00      	add	r7, sp, #0
 80198da:	60f8      	str	r0, [r7, #12]
 80198dc:	60b9      	str	r1, [r7, #8]
 80198de:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80198e0:	68bb      	ldr	r3, [r7, #8]
 80198e2:	681a      	ldr	r2, [r3, #0]
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	3308      	adds	r3, #8
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	429a      	cmp	r2, r3
 80198ec:	d00a      	beq.n	8019904 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80198ee:	68bb      	ldr	r3, [r7, #8]
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d002      	beq.n	80198fa <netif_do_set_netmask+0x26>
 80198f4:	68bb      	ldr	r3, [r7, #8]
 80198f6:	681b      	ldr	r3, [r3, #0]
 80198f8:	e000      	b.n	80198fc <netif_do_set_netmask+0x28>
 80198fa:	2300      	movs	r3, #0
 80198fc:	68fa      	ldr	r2, [r7, #12]
 80198fe:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8019900:	2301      	movs	r3, #1
 8019902:	e000      	b.n	8019906 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8019904:	2300      	movs	r3, #0
}
 8019906:	4618      	mov	r0, r3
 8019908:	3714      	adds	r7, #20
 801990a:	46bd      	mov	sp, r7
 801990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019910:	4770      	bx	lr

08019912 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8019912:	b480      	push	{r7}
 8019914:	b085      	sub	sp, #20
 8019916:	af00      	add	r7, sp, #0
 8019918:	60f8      	str	r0, [r7, #12]
 801991a:	60b9      	str	r1, [r7, #8]
 801991c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801991e:	68bb      	ldr	r3, [r7, #8]
 8019920:	681a      	ldr	r2, [r3, #0]
 8019922:	68fb      	ldr	r3, [r7, #12]
 8019924:	330c      	adds	r3, #12
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	429a      	cmp	r2, r3
 801992a:	d00a      	beq.n	8019942 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801992c:	68bb      	ldr	r3, [r7, #8]
 801992e:	2b00      	cmp	r3, #0
 8019930:	d002      	beq.n	8019938 <netif_do_set_gw+0x26>
 8019932:	68bb      	ldr	r3, [r7, #8]
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	e000      	b.n	801993a <netif_do_set_gw+0x28>
 8019938:	2300      	movs	r3, #0
 801993a:	68fa      	ldr	r2, [r7, #12]
 801993c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801993e:	2301      	movs	r3, #1
 8019940:	e000      	b.n	8019944 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8019942:	2300      	movs	r3, #0
}
 8019944:	4618      	mov	r0, r3
 8019946:	3714      	adds	r7, #20
 8019948:	46bd      	mov	sp, r7
 801994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801994e:	4770      	bx	lr

08019950 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8019950:	b580      	push	{r7, lr}
 8019952:	b088      	sub	sp, #32
 8019954:	af00      	add	r7, sp, #0
 8019956:	60f8      	str	r0, [r7, #12]
 8019958:	60b9      	str	r1, [r7, #8]
 801995a:	607a      	str	r2, [r7, #4]
 801995c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801995e:	2300      	movs	r3, #0
 8019960:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8019962:	2300      	movs	r3, #0
 8019964:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019966:	68bb      	ldr	r3, [r7, #8]
 8019968:	2b00      	cmp	r3, #0
 801996a:	d101      	bne.n	8019970 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801996c:	4b1c      	ldr	r3, [pc, #112]	@ (80199e0 <netif_set_addr+0x90>)
 801996e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	2b00      	cmp	r3, #0
 8019974:	d101      	bne.n	801997a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8019976:	4b1a      	ldr	r3, [pc, #104]	@ (80199e0 <netif_set_addr+0x90>)
 8019978:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801997a:	683b      	ldr	r3, [r7, #0]
 801997c:	2b00      	cmp	r3, #0
 801997e:	d101      	bne.n	8019984 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8019980:	4b17      	ldr	r3, [pc, #92]	@ (80199e0 <netif_set_addr+0x90>)
 8019982:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8019984:	68bb      	ldr	r3, [r7, #8]
 8019986:	2b00      	cmp	r3, #0
 8019988:	d003      	beq.n	8019992 <netif_set_addr+0x42>
 801998a:	68bb      	ldr	r3, [r7, #8]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	2b00      	cmp	r3, #0
 8019990:	d101      	bne.n	8019996 <netif_set_addr+0x46>
 8019992:	2301      	movs	r3, #1
 8019994:	e000      	b.n	8019998 <netif_set_addr+0x48>
 8019996:	2300      	movs	r3, #0
 8019998:	617b      	str	r3, [r7, #20]
  if (remove) {
 801999a:	697b      	ldr	r3, [r7, #20]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d006      	beq.n	80199ae <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80199a0:	f107 0310 	add.w	r3, r7, #16
 80199a4:	461a      	mov	r2, r3
 80199a6:	68b9      	ldr	r1, [r7, #8]
 80199a8:	68f8      	ldr	r0, [r7, #12]
 80199aa:	f7ff ff49 	bl	8019840 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80199ae:	69fa      	ldr	r2, [r7, #28]
 80199b0:	6879      	ldr	r1, [r7, #4]
 80199b2:	68f8      	ldr	r0, [r7, #12]
 80199b4:	f7ff ff8e 	bl	80198d4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80199b8:	69ba      	ldr	r2, [r7, #24]
 80199ba:	6839      	ldr	r1, [r7, #0]
 80199bc:	68f8      	ldr	r0, [r7, #12]
 80199be:	f7ff ffa8 	bl	8019912 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80199c2:	697b      	ldr	r3, [r7, #20]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d106      	bne.n	80199d6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80199c8:	f107 0310 	add.w	r3, r7, #16
 80199cc:	461a      	mov	r2, r3
 80199ce:	68b9      	ldr	r1, [r7, #8]
 80199d0:	68f8      	ldr	r0, [r7, #12]
 80199d2:	f7ff ff35 	bl	8019840 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80199d6:	bf00      	nop
 80199d8:	3720      	adds	r7, #32
 80199da:	46bd      	mov	sp, r7
 80199dc:	bd80      	pop	{r7, pc}
 80199de:	bf00      	nop
 80199e0:	0802cf18 	.word	0x0802cf18

080199e4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80199e4:	b480      	push	{r7}
 80199e6:	b083      	sub	sp, #12
 80199e8:	af00      	add	r7, sp, #0
 80199ea:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80199ec:	4a04      	ldr	r2, [pc, #16]	@ (8019a00 <netif_set_default+0x1c>)
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80199f2:	bf00      	nop
 80199f4:	370c      	adds	r7, #12
 80199f6:	46bd      	mov	sp, r7
 80199f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199fc:	4770      	bx	lr
 80199fe:	bf00      	nop
 8019a00:	2400be44 	.word	0x2400be44

08019a04 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8019a04:	b580      	push	{r7, lr}
 8019a06:	b082      	sub	sp, #8
 8019a08:	af00      	add	r7, sp, #0
 8019a0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	2b00      	cmp	r3, #0
 8019a10:	d107      	bne.n	8019a22 <netif_set_up+0x1e>
 8019a12:	4b0f      	ldr	r3, [pc, #60]	@ (8019a50 <netif_set_up+0x4c>)
 8019a14:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8019a18:	490e      	ldr	r1, [pc, #56]	@ (8019a54 <netif_set_up+0x50>)
 8019a1a:	480f      	ldr	r0, [pc, #60]	@ (8019a58 <netif_set_up+0x54>)
 8019a1c:	f00b fc22 	bl	8025264 <iprintf>
 8019a20:	e013      	b.n	8019a4a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019a28:	f003 0301 	and.w	r3, r3, #1
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d10c      	bne.n	8019a4a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019a36:	f043 0301 	orr.w	r3, r3, #1
 8019a3a:	b2da      	uxtb	r2, r3
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8019a42:	2103      	movs	r1, #3
 8019a44:	6878      	ldr	r0, [r7, #4]
 8019a46:	f000 f809 	bl	8019a5c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8019a4a:	3708      	adds	r7, #8
 8019a4c:	46bd      	mov	sp, r7
 8019a4e:	bd80      	pop	{r7, pc}
 8019a50:	0802a6b4 	.word	0x0802a6b4
 8019a54:	0802a83c 	.word	0x0802a83c
 8019a58:	0802a704 	.word	0x0802a704

08019a5c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8019a5c:	b580      	push	{r7, lr}
 8019a5e:	b082      	sub	sp, #8
 8019a60:	af00      	add	r7, sp, #0
 8019a62:	6078      	str	r0, [r7, #4]
 8019a64:	460b      	mov	r3, r1
 8019a66:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d106      	bne.n	8019a7c <netif_issue_reports+0x20>
 8019a6e:	4b18      	ldr	r3, [pc, #96]	@ (8019ad0 <netif_issue_reports+0x74>)
 8019a70:	f240 326d 	movw	r2, #877	@ 0x36d
 8019a74:	4917      	ldr	r1, [pc, #92]	@ (8019ad4 <netif_issue_reports+0x78>)
 8019a76:	4818      	ldr	r0, [pc, #96]	@ (8019ad8 <netif_issue_reports+0x7c>)
 8019a78:	f00b fbf4 	bl	8025264 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019a82:	f003 0304 	and.w	r3, r3, #4
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d01e      	beq.n	8019ac8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019a90:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d017      	beq.n	8019ac8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8019a98:	78fb      	ldrb	r3, [r7, #3]
 8019a9a:	f003 0301 	and.w	r3, r3, #1
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d013      	beq.n	8019aca <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	3304      	adds	r3, #4
 8019aa6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d00e      	beq.n	8019aca <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019ab2:	f003 0308 	and.w	r3, r3, #8
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d007      	beq.n	8019aca <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	3304      	adds	r3, #4
 8019abe:	4619      	mov	r1, r3
 8019ac0:	6878      	ldr	r0, [r7, #4]
 8019ac2:	f008 fc81 	bl	80223c8 <etharp_request>
 8019ac6:	e000      	b.n	8019aca <netif_issue_reports+0x6e>
    return;
 8019ac8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8019aca:	3708      	adds	r7, #8
 8019acc:	46bd      	mov	sp, r7
 8019ace:	bd80      	pop	{r7, pc}
 8019ad0:	0802a6b4 	.word	0x0802a6b4
 8019ad4:	0802a858 	.word	0x0802a858
 8019ad8:	0802a704 	.word	0x0802a704

08019adc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8019adc:	b580      	push	{r7, lr}
 8019ade:	b082      	sub	sp, #8
 8019ae0:	af00      	add	r7, sp, #0
 8019ae2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d107      	bne.n	8019afa <netif_set_down+0x1e>
 8019aea:	4b12      	ldr	r3, [pc, #72]	@ (8019b34 <netif_set_down+0x58>)
 8019aec:	f240 329b 	movw	r2, #923	@ 0x39b
 8019af0:	4911      	ldr	r1, [pc, #68]	@ (8019b38 <netif_set_down+0x5c>)
 8019af2:	4812      	ldr	r0, [pc, #72]	@ (8019b3c <netif_set_down+0x60>)
 8019af4:	f00b fbb6 	bl	8025264 <iprintf>
 8019af8:	e019      	b.n	8019b2e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019b00:	f003 0301 	and.w	r3, r3, #1
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d012      	beq.n	8019b2e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019b0e:	f023 0301 	bic.w	r3, r3, #1
 8019b12:	b2da      	uxtb	r2, r3
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019b20:	f003 0308 	and.w	r3, r3, #8
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d002      	beq.n	8019b2e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8019b28:	6878      	ldr	r0, [r7, #4]
 8019b2a:	f008 f80b 	bl	8021b44 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8019b2e:	3708      	adds	r7, #8
 8019b30:	46bd      	mov	sp, r7
 8019b32:	bd80      	pop	{r7, pc}
 8019b34:	0802a6b4 	.word	0x0802a6b4
 8019b38:	0802a87c 	.word	0x0802a87c
 8019b3c:	0802a704 	.word	0x0802a704

08019b40 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8019b40:	b580      	push	{r7, lr}
 8019b42:	b082      	sub	sp, #8
 8019b44:	af00      	add	r7, sp, #0
 8019b46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d107      	bne.n	8019b5e <netif_set_link_up+0x1e>
 8019b4e:	4b13      	ldr	r3, [pc, #76]	@ (8019b9c <netif_set_link_up+0x5c>)
 8019b50:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8019b54:	4912      	ldr	r1, [pc, #72]	@ (8019ba0 <netif_set_link_up+0x60>)
 8019b56:	4813      	ldr	r0, [pc, #76]	@ (8019ba4 <netif_set_link_up+0x64>)
 8019b58:	f00b fb84 	bl	8025264 <iprintf>
 8019b5c:	e01b      	b.n	8019b96 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019b64:	f003 0304 	and.w	r3, r3, #4
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d114      	bne.n	8019b96 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019b72:	f043 0304 	orr.w	r3, r3, #4
 8019b76:	b2da      	uxtb	r2, r3
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8019b7e:	2103      	movs	r1, #3
 8019b80:	6878      	ldr	r0, [r7, #4]
 8019b82:	f7ff ff6b 	bl	8019a5c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	69db      	ldr	r3, [r3, #28]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d003      	beq.n	8019b96 <netif_set_link_up+0x56>
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	69db      	ldr	r3, [r3, #28]
 8019b92:	6878      	ldr	r0, [r7, #4]
 8019b94:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8019b96:	3708      	adds	r7, #8
 8019b98:	46bd      	mov	sp, r7
 8019b9a:	bd80      	pop	{r7, pc}
 8019b9c:	0802a6b4 	.word	0x0802a6b4
 8019ba0:	0802a89c 	.word	0x0802a89c
 8019ba4:	0802a704 	.word	0x0802a704

08019ba8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8019ba8:	b580      	push	{r7, lr}
 8019baa:	b082      	sub	sp, #8
 8019bac:	af00      	add	r7, sp, #0
 8019bae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d107      	bne.n	8019bc6 <netif_set_link_down+0x1e>
 8019bb6:	4b11      	ldr	r3, [pc, #68]	@ (8019bfc <netif_set_link_down+0x54>)
 8019bb8:	f240 4206 	movw	r2, #1030	@ 0x406
 8019bbc:	4910      	ldr	r1, [pc, #64]	@ (8019c00 <netif_set_link_down+0x58>)
 8019bbe:	4811      	ldr	r0, [pc, #68]	@ (8019c04 <netif_set_link_down+0x5c>)
 8019bc0:	f00b fb50 	bl	8025264 <iprintf>
 8019bc4:	e017      	b.n	8019bf6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019bcc:	f003 0304 	and.w	r3, r3, #4
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d010      	beq.n	8019bf6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019bda:	f023 0304 	bic.w	r3, r3, #4
 8019bde:	b2da      	uxtb	r2, r3
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	69db      	ldr	r3, [r3, #28]
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d003      	beq.n	8019bf6 <netif_set_link_down+0x4e>
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	69db      	ldr	r3, [r3, #28]
 8019bf2:	6878      	ldr	r0, [r7, #4]
 8019bf4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8019bf6:	3708      	adds	r7, #8
 8019bf8:	46bd      	mov	sp, r7
 8019bfa:	bd80      	pop	{r7, pc}
 8019bfc:	0802a6b4 	.word	0x0802a6b4
 8019c00:	0802a8c0 	.word	0x0802a8c0
 8019c04:	0802a704 	.word	0x0802a704

08019c08 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8019c08:	b480      	push	{r7}
 8019c0a:	b083      	sub	sp, #12
 8019c0c:	af00      	add	r7, sp, #0
 8019c0e:	6078      	str	r0, [r7, #4]
 8019c10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d002      	beq.n	8019c1e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	683a      	ldr	r2, [r7, #0]
 8019c1c:	61da      	str	r2, [r3, #28]
  }
}
 8019c1e:	bf00      	nop
 8019c20:	370c      	adds	r7, #12
 8019c22:	46bd      	mov	sp, r7
 8019c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c28:	4770      	bx	lr

08019c2a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8019c2a:	b480      	push	{r7}
 8019c2c:	b085      	sub	sp, #20
 8019c2e:	af00      	add	r7, sp, #0
 8019c30:	60f8      	str	r0, [r7, #12]
 8019c32:	60b9      	str	r1, [r7, #8]
 8019c34:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8019c36:	f06f 030b 	mvn.w	r3, #11
}
 8019c3a:	4618      	mov	r0, r3
 8019c3c:	3714      	adds	r7, #20
 8019c3e:	46bd      	mov	sp, r7
 8019c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c44:	4770      	bx	lr
	...

08019c48 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8019c48:	b480      	push	{r7}
 8019c4a:	b085      	sub	sp, #20
 8019c4c:	af00      	add	r7, sp, #0
 8019c4e:	4603      	mov	r3, r0
 8019c50:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8019c52:	79fb      	ldrb	r3, [r7, #7]
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d013      	beq.n	8019c80 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8019c58:	4b0d      	ldr	r3, [pc, #52]	@ (8019c90 <netif_get_by_index+0x48>)
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	60fb      	str	r3, [r7, #12]
 8019c5e:	e00c      	b.n	8019c7a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019c66:	3301      	adds	r3, #1
 8019c68:	b2db      	uxtb	r3, r3
 8019c6a:	79fa      	ldrb	r2, [r7, #7]
 8019c6c:	429a      	cmp	r2, r3
 8019c6e:	d101      	bne.n	8019c74 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	e006      	b.n	8019c82 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8019c74:	68fb      	ldr	r3, [r7, #12]
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	60fb      	str	r3, [r7, #12]
 8019c7a:	68fb      	ldr	r3, [r7, #12]
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d1ef      	bne.n	8019c60 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8019c80:	2300      	movs	r3, #0
}
 8019c82:	4618      	mov	r0, r3
 8019c84:	3714      	adds	r7, #20
 8019c86:	46bd      	mov	sp, r7
 8019c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c8c:	4770      	bx	lr
 8019c8e:	bf00      	nop
 8019c90:	2400be40 	.word	0x2400be40

08019c94 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8019c94:	b580      	push	{r7, lr}
 8019c96:	b082      	sub	sp, #8
 8019c98:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8019c9a:	f00a fa49 	bl	8024130 <sys_arch_protect>
 8019c9e:	6038      	str	r0, [r7, #0]
 8019ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8019cd8 <pbuf_free_ooseq+0x44>)
 8019ca2:	2200      	movs	r2, #0
 8019ca4:	701a      	strb	r2, [r3, #0]
 8019ca6:	6838      	ldr	r0, [r7, #0]
 8019ca8:	f00a fa50 	bl	802414c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8019cac:	4b0b      	ldr	r3, [pc, #44]	@ (8019cdc <pbuf_free_ooseq+0x48>)
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	607b      	str	r3, [r7, #4]
 8019cb2:	e00a      	b.n	8019cca <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d003      	beq.n	8019cc4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8019cbc:	6878      	ldr	r0, [r7, #4]
 8019cbe:	f002 fbbd 	bl	801c43c <tcp_free_ooseq>
      return;
 8019cc2:	e005      	b.n	8019cd0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	68db      	ldr	r3, [r3, #12]
 8019cc8:	607b      	str	r3, [r7, #4]
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d1f1      	bne.n	8019cb4 <pbuf_free_ooseq+0x20>
    }
  }
}
 8019cd0:	3708      	adds	r7, #8
 8019cd2:	46bd      	mov	sp, r7
 8019cd4:	bd80      	pop	{r7, pc}
 8019cd6:	bf00      	nop
 8019cd8:	2400be49 	.word	0x2400be49
 8019cdc:	2400be58 	.word	0x2400be58

08019ce0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b082      	sub	sp, #8
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8019ce8:	f7ff ffd4 	bl	8019c94 <pbuf_free_ooseq>
}
 8019cec:	bf00      	nop
 8019cee:	3708      	adds	r7, #8
 8019cf0:	46bd      	mov	sp, r7
 8019cf2:	bd80      	pop	{r7, pc}

08019cf4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8019cf4:	b580      	push	{r7, lr}
 8019cf6:	b082      	sub	sp, #8
 8019cf8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8019cfa:	f00a fa19 	bl	8024130 <sys_arch_protect>
 8019cfe:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8019d00:	4b0f      	ldr	r3, [pc, #60]	@ (8019d40 <pbuf_pool_is_empty+0x4c>)
 8019d02:	781b      	ldrb	r3, [r3, #0]
 8019d04:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8019d06:	4b0e      	ldr	r3, [pc, #56]	@ (8019d40 <pbuf_pool_is_empty+0x4c>)
 8019d08:	2201      	movs	r2, #1
 8019d0a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8019d0c:	6878      	ldr	r0, [r7, #4]
 8019d0e:	f00a fa1d 	bl	802414c <sys_arch_unprotect>

  if (!queued) {
 8019d12:	78fb      	ldrb	r3, [r7, #3]
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d10f      	bne.n	8019d38 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8019d18:	2100      	movs	r1, #0
 8019d1a:	480a      	ldr	r0, [pc, #40]	@ (8019d44 <pbuf_pool_is_empty+0x50>)
 8019d1c:	f7fe fdd8 	bl	80188d0 <tcpip_try_callback>
 8019d20:	4603      	mov	r3, r0
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d008      	beq.n	8019d38 <pbuf_pool_is_empty+0x44>
 8019d26:	f00a fa03 	bl	8024130 <sys_arch_protect>
 8019d2a:	6078      	str	r0, [r7, #4]
 8019d2c:	4b04      	ldr	r3, [pc, #16]	@ (8019d40 <pbuf_pool_is_empty+0x4c>)
 8019d2e:	2200      	movs	r2, #0
 8019d30:	701a      	strb	r2, [r3, #0]
 8019d32:	6878      	ldr	r0, [r7, #4]
 8019d34:	f00a fa0a 	bl	802414c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8019d38:	bf00      	nop
 8019d3a:	3708      	adds	r7, #8
 8019d3c:	46bd      	mov	sp, r7
 8019d3e:	bd80      	pop	{r7, pc}
 8019d40:	2400be49 	.word	0x2400be49
 8019d44:	08019ce1 	.word	0x08019ce1

08019d48 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8019d48:	b480      	push	{r7}
 8019d4a:	b085      	sub	sp, #20
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	60f8      	str	r0, [r7, #12]
 8019d50:	60b9      	str	r1, [r7, #8]
 8019d52:	4611      	mov	r1, r2
 8019d54:	461a      	mov	r2, r3
 8019d56:	460b      	mov	r3, r1
 8019d58:	80fb      	strh	r3, [r7, #6]
 8019d5a:	4613      	mov	r3, r2
 8019d5c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8019d5e:	68fb      	ldr	r3, [r7, #12]
 8019d60:	2200      	movs	r2, #0
 8019d62:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	68ba      	ldr	r2, [r7, #8]
 8019d68:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8019d6a:	68fb      	ldr	r3, [r7, #12]
 8019d6c:	88fa      	ldrh	r2, [r7, #6]
 8019d6e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	88ba      	ldrh	r2, [r7, #4]
 8019d74:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8019d76:	8b3b      	ldrh	r3, [r7, #24]
 8019d78:	b2da      	uxtb	r2, r3
 8019d7a:	68fb      	ldr	r3, [r7, #12]
 8019d7c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	7f3a      	ldrb	r2, [r7, #28]
 8019d82:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	2201      	movs	r2, #1
 8019d88:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8019d8a:	68fb      	ldr	r3, [r7, #12]
 8019d8c:	2200      	movs	r2, #0
 8019d8e:	73da      	strb	r2, [r3, #15]
}
 8019d90:	bf00      	nop
 8019d92:	3714      	adds	r7, #20
 8019d94:	46bd      	mov	sp, r7
 8019d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d9a:	4770      	bx	lr

08019d9c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8019d9c:	b580      	push	{r7, lr}
 8019d9e:	b08c      	sub	sp, #48	@ 0x30
 8019da0:	af02      	add	r7, sp, #8
 8019da2:	4603      	mov	r3, r0
 8019da4:	71fb      	strb	r3, [r7, #7]
 8019da6:	460b      	mov	r3, r1
 8019da8:	80bb      	strh	r3, [r7, #4]
 8019daa:	4613      	mov	r3, r2
 8019dac:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8019dae:	79fb      	ldrb	r3, [r7, #7]
 8019db0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8019db2:	887b      	ldrh	r3, [r7, #2]
 8019db4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8019db8:	d07f      	beq.n	8019eba <pbuf_alloc+0x11e>
 8019dba:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8019dbe:	f300 80c8 	bgt.w	8019f52 <pbuf_alloc+0x1b6>
 8019dc2:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8019dc6:	d010      	beq.n	8019dea <pbuf_alloc+0x4e>
 8019dc8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8019dcc:	f300 80c1 	bgt.w	8019f52 <pbuf_alloc+0x1b6>
 8019dd0:	2b01      	cmp	r3, #1
 8019dd2:	d002      	beq.n	8019dda <pbuf_alloc+0x3e>
 8019dd4:	2b41      	cmp	r3, #65	@ 0x41
 8019dd6:	f040 80bc 	bne.w	8019f52 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8019dda:	887a      	ldrh	r2, [r7, #2]
 8019ddc:	88bb      	ldrh	r3, [r7, #4]
 8019dde:	4619      	mov	r1, r3
 8019de0:	2000      	movs	r0, #0
 8019de2:	f000 f8d1 	bl	8019f88 <pbuf_alloc_reference>
 8019de6:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8019de8:	e0bd      	b.n	8019f66 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8019dea:	2300      	movs	r3, #0
 8019dec:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8019dee:	2300      	movs	r3, #0
 8019df0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8019df2:	88bb      	ldrh	r3, [r7, #4]
 8019df4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8019df6:	200c      	movs	r0, #12
 8019df8:	f7ff fb9a 	bl	8019530 <memp_malloc>
 8019dfc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8019dfe:	693b      	ldr	r3, [r7, #16]
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d109      	bne.n	8019e18 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8019e04:	f7ff ff76 	bl	8019cf4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8019e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d002      	beq.n	8019e14 <pbuf_alloc+0x78>
            pbuf_free(p);
 8019e0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019e10:	f000 fada 	bl	801a3c8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8019e14:	2300      	movs	r3, #0
 8019e16:	e0a7      	b.n	8019f68 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019e18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019e1a:	3303      	adds	r3, #3
 8019e1c:	b29b      	uxth	r3, r3
 8019e1e:	f023 0303 	bic.w	r3, r3, #3
 8019e22:	b29b      	uxth	r3, r3
 8019e24:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8019e28:	b29b      	uxth	r3, r3
 8019e2a:	8b7a      	ldrh	r2, [r7, #26]
 8019e2c:	4293      	cmp	r3, r2
 8019e2e:	bf28      	it	cs
 8019e30:	4613      	movcs	r3, r2
 8019e32:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8019e34:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019e36:	3310      	adds	r3, #16
 8019e38:	693a      	ldr	r2, [r7, #16]
 8019e3a:	4413      	add	r3, r2
 8019e3c:	3303      	adds	r3, #3
 8019e3e:	f023 0303 	bic.w	r3, r3, #3
 8019e42:	4618      	mov	r0, r3
 8019e44:	89f9      	ldrh	r1, [r7, #14]
 8019e46:	8b7a      	ldrh	r2, [r7, #26]
 8019e48:	2300      	movs	r3, #0
 8019e4a:	9301      	str	r3, [sp, #4]
 8019e4c:	887b      	ldrh	r3, [r7, #2]
 8019e4e:	9300      	str	r3, [sp, #0]
 8019e50:	460b      	mov	r3, r1
 8019e52:	4601      	mov	r1, r0
 8019e54:	6938      	ldr	r0, [r7, #16]
 8019e56:	f7ff ff77 	bl	8019d48 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8019e5a:	693b      	ldr	r3, [r7, #16]
 8019e5c:	685b      	ldr	r3, [r3, #4]
 8019e5e:	f003 0303 	and.w	r3, r3, #3
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d006      	beq.n	8019e74 <pbuf_alloc+0xd8>
 8019e66:	4b42      	ldr	r3, [pc, #264]	@ (8019f70 <pbuf_alloc+0x1d4>)
 8019e68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019e6c:	4941      	ldr	r1, [pc, #260]	@ (8019f74 <pbuf_alloc+0x1d8>)
 8019e6e:	4842      	ldr	r0, [pc, #264]	@ (8019f78 <pbuf_alloc+0x1dc>)
 8019e70:	f00b f9f8 	bl	8025264 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8019e74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019e76:	3303      	adds	r3, #3
 8019e78:	f023 0303 	bic.w	r3, r3, #3
 8019e7c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8019e80:	d106      	bne.n	8019e90 <pbuf_alloc+0xf4>
 8019e82:	4b3b      	ldr	r3, [pc, #236]	@ (8019f70 <pbuf_alloc+0x1d4>)
 8019e84:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8019e88:	493c      	ldr	r1, [pc, #240]	@ (8019f7c <pbuf_alloc+0x1e0>)
 8019e8a:	483b      	ldr	r0, [pc, #236]	@ (8019f78 <pbuf_alloc+0x1dc>)
 8019e8c:	f00b f9ea 	bl	8025264 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8019e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d102      	bne.n	8019e9c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8019e96:	693b      	ldr	r3, [r7, #16]
 8019e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8019e9a:	e002      	b.n	8019ea2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8019e9c:	69fb      	ldr	r3, [r7, #28]
 8019e9e:	693a      	ldr	r2, [r7, #16]
 8019ea0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8019ea2:	693b      	ldr	r3, [r7, #16]
 8019ea4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8019ea6:	8b7a      	ldrh	r2, [r7, #26]
 8019ea8:	89fb      	ldrh	r3, [r7, #14]
 8019eaa:	1ad3      	subs	r3, r2, r3
 8019eac:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8019eae:	2300      	movs	r3, #0
 8019eb0:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8019eb2:	8b7b      	ldrh	r3, [r7, #26]
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d19e      	bne.n	8019df6 <pbuf_alloc+0x5a>
      break;
 8019eb8:	e055      	b.n	8019f66 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8019eba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019ebc:	3303      	adds	r3, #3
 8019ebe:	b29b      	uxth	r3, r3
 8019ec0:	f023 0303 	bic.w	r3, r3, #3
 8019ec4:	b29a      	uxth	r2, r3
 8019ec6:	88bb      	ldrh	r3, [r7, #4]
 8019ec8:	3303      	adds	r3, #3
 8019eca:	b29b      	uxth	r3, r3
 8019ecc:	f023 0303 	bic.w	r3, r3, #3
 8019ed0:	b29b      	uxth	r3, r3
 8019ed2:	4413      	add	r3, r2
 8019ed4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8019ed6:	8b3b      	ldrh	r3, [r7, #24]
 8019ed8:	3310      	adds	r3, #16
 8019eda:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8019edc:	8b3a      	ldrh	r2, [r7, #24]
 8019ede:	88bb      	ldrh	r3, [r7, #4]
 8019ee0:	3303      	adds	r3, #3
 8019ee2:	f023 0303 	bic.w	r3, r3, #3
 8019ee6:	429a      	cmp	r2, r3
 8019ee8:	d306      	bcc.n	8019ef8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8019eea:	8afa      	ldrh	r2, [r7, #22]
 8019eec:	88bb      	ldrh	r3, [r7, #4]
 8019eee:	3303      	adds	r3, #3
 8019ef0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8019ef4:	429a      	cmp	r2, r3
 8019ef6:	d201      	bcs.n	8019efc <pbuf_alloc+0x160>
        return NULL;
 8019ef8:	2300      	movs	r3, #0
 8019efa:	e035      	b.n	8019f68 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8019efc:	8afb      	ldrh	r3, [r7, #22]
 8019efe:	4618      	mov	r0, r3
 8019f00:	f7ff f972 	bl	80191e8 <mem_malloc>
 8019f04:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8019f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d101      	bne.n	8019f10 <pbuf_alloc+0x174>
        return NULL;
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	e02b      	b.n	8019f68 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8019f10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019f12:	3310      	adds	r3, #16
 8019f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019f16:	4413      	add	r3, r2
 8019f18:	3303      	adds	r3, #3
 8019f1a:	f023 0303 	bic.w	r3, r3, #3
 8019f1e:	4618      	mov	r0, r3
 8019f20:	88b9      	ldrh	r1, [r7, #4]
 8019f22:	88ba      	ldrh	r2, [r7, #4]
 8019f24:	2300      	movs	r3, #0
 8019f26:	9301      	str	r3, [sp, #4]
 8019f28:	887b      	ldrh	r3, [r7, #2]
 8019f2a:	9300      	str	r3, [sp, #0]
 8019f2c:	460b      	mov	r3, r1
 8019f2e:	4601      	mov	r1, r0
 8019f30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019f32:	f7ff ff09 	bl	8019d48 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8019f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f38:	685b      	ldr	r3, [r3, #4]
 8019f3a:	f003 0303 	and.w	r3, r3, #3
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d010      	beq.n	8019f64 <pbuf_alloc+0x1c8>
 8019f42:	4b0b      	ldr	r3, [pc, #44]	@ (8019f70 <pbuf_alloc+0x1d4>)
 8019f44:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8019f48:	490d      	ldr	r1, [pc, #52]	@ (8019f80 <pbuf_alloc+0x1e4>)
 8019f4a:	480b      	ldr	r0, [pc, #44]	@ (8019f78 <pbuf_alloc+0x1dc>)
 8019f4c:	f00b f98a 	bl	8025264 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8019f50:	e008      	b.n	8019f64 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8019f52:	4b07      	ldr	r3, [pc, #28]	@ (8019f70 <pbuf_alloc+0x1d4>)
 8019f54:	f240 1227 	movw	r2, #295	@ 0x127
 8019f58:	490a      	ldr	r1, [pc, #40]	@ (8019f84 <pbuf_alloc+0x1e8>)
 8019f5a:	4807      	ldr	r0, [pc, #28]	@ (8019f78 <pbuf_alloc+0x1dc>)
 8019f5c:	f00b f982 	bl	8025264 <iprintf>
      return NULL;
 8019f60:	2300      	movs	r3, #0
 8019f62:	e001      	b.n	8019f68 <pbuf_alloc+0x1cc>
      break;
 8019f64:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8019f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8019f68:	4618      	mov	r0, r3
 8019f6a:	3728      	adds	r7, #40	@ 0x28
 8019f6c:	46bd      	mov	sp, r7
 8019f6e:	bd80      	pop	{r7, pc}
 8019f70:	0802a8e4 	.word	0x0802a8e4
 8019f74:	0802a914 	.word	0x0802a914
 8019f78:	0802a944 	.word	0x0802a944
 8019f7c:	0802a96c 	.word	0x0802a96c
 8019f80:	0802a9a0 	.word	0x0802a9a0
 8019f84:	0802a9cc 	.word	0x0802a9cc

08019f88 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	b086      	sub	sp, #24
 8019f8c:	af02      	add	r7, sp, #8
 8019f8e:	6078      	str	r0, [r7, #4]
 8019f90:	460b      	mov	r3, r1
 8019f92:	807b      	strh	r3, [r7, #2]
 8019f94:	4613      	mov	r3, r2
 8019f96:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8019f98:	883b      	ldrh	r3, [r7, #0]
 8019f9a:	2b41      	cmp	r3, #65	@ 0x41
 8019f9c:	d009      	beq.n	8019fb2 <pbuf_alloc_reference+0x2a>
 8019f9e:	883b      	ldrh	r3, [r7, #0]
 8019fa0:	2b01      	cmp	r3, #1
 8019fa2:	d006      	beq.n	8019fb2 <pbuf_alloc_reference+0x2a>
 8019fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8019fe4 <pbuf_alloc_reference+0x5c>)
 8019fa6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8019faa:	490f      	ldr	r1, [pc, #60]	@ (8019fe8 <pbuf_alloc_reference+0x60>)
 8019fac:	480f      	ldr	r0, [pc, #60]	@ (8019fec <pbuf_alloc_reference+0x64>)
 8019fae:	f00b f959 	bl	8025264 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8019fb2:	200b      	movs	r0, #11
 8019fb4:	f7ff fabc 	bl	8019530 <memp_malloc>
 8019fb8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d101      	bne.n	8019fc4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8019fc0:	2300      	movs	r3, #0
 8019fc2:	e00b      	b.n	8019fdc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8019fc4:	8879      	ldrh	r1, [r7, #2]
 8019fc6:	887a      	ldrh	r2, [r7, #2]
 8019fc8:	2300      	movs	r3, #0
 8019fca:	9301      	str	r3, [sp, #4]
 8019fcc:	883b      	ldrh	r3, [r7, #0]
 8019fce:	9300      	str	r3, [sp, #0]
 8019fd0:	460b      	mov	r3, r1
 8019fd2:	6879      	ldr	r1, [r7, #4]
 8019fd4:	68f8      	ldr	r0, [r7, #12]
 8019fd6:	f7ff feb7 	bl	8019d48 <pbuf_init_alloced_pbuf>
  return p;
 8019fda:	68fb      	ldr	r3, [r7, #12]
}
 8019fdc:	4618      	mov	r0, r3
 8019fde:	3710      	adds	r7, #16
 8019fe0:	46bd      	mov	sp, r7
 8019fe2:	bd80      	pop	{r7, pc}
 8019fe4:	0802a8e4 	.word	0x0802a8e4
 8019fe8:	0802a9e8 	.word	0x0802a9e8
 8019fec:	0802a944 	.word	0x0802a944

08019ff0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8019ff0:	b580      	push	{r7, lr}
 8019ff2:	b088      	sub	sp, #32
 8019ff4:	af02      	add	r7, sp, #8
 8019ff6:	607b      	str	r3, [r7, #4]
 8019ff8:	4603      	mov	r3, r0
 8019ffa:	73fb      	strb	r3, [r7, #15]
 8019ffc:	460b      	mov	r3, r1
 8019ffe:	81bb      	strh	r3, [r7, #12]
 801a000:	4613      	mov	r3, r2
 801a002:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801a004:	7bfb      	ldrb	r3, [r7, #15]
 801a006:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801a008:	8a7b      	ldrh	r3, [r7, #18]
 801a00a:	3303      	adds	r3, #3
 801a00c:	f023 0203 	bic.w	r2, r3, #3
 801a010:	89bb      	ldrh	r3, [r7, #12]
 801a012:	441a      	add	r2, r3
 801a014:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a016:	429a      	cmp	r2, r3
 801a018:	d901      	bls.n	801a01e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801a01a:	2300      	movs	r3, #0
 801a01c:	e018      	b.n	801a050 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801a01e:	6a3b      	ldr	r3, [r7, #32]
 801a020:	2b00      	cmp	r3, #0
 801a022:	d007      	beq.n	801a034 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801a024:	8a7b      	ldrh	r3, [r7, #18]
 801a026:	3303      	adds	r3, #3
 801a028:	f023 0303 	bic.w	r3, r3, #3
 801a02c:	6a3a      	ldr	r2, [r7, #32]
 801a02e:	4413      	add	r3, r2
 801a030:	617b      	str	r3, [r7, #20]
 801a032:	e001      	b.n	801a038 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801a034:	2300      	movs	r3, #0
 801a036:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801a038:	6878      	ldr	r0, [r7, #4]
 801a03a:	89b9      	ldrh	r1, [r7, #12]
 801a03c:	89ba      	ldrh	r2, [r7, #12]
 801a03e:	2302      	movs	r3, #2
 801a040:	9301      	str	r3, [sp, #4]
 801a042:	897b      	ldrh	r3, [r7, #10]
 801a044:	9300      	str	r3, [sp, #0]
 801a046:	460b      	mov	r3, r1
 801a048:	6979      	ldr	r1, [r7, #20]
 801a04a:	f7ff fe7d 	bl	8019d48 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801a04e:	687b      	ldr	r3, [r7, #4]
}
 801a050:	4618      	mov	r0, r3
 801a052:	3718      	adds	r7, #24
 801a054:	46bd      	mov	sp, r7
 801a056:	bd80      	pop	{r7, pc}

0801a058 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801a058:	b580      	push	{r7, lr}
 801a05a:	b084      	sub	sp, #16
 801a05c:	af00      	add	r7, sp, #0
 801a05e:	6078      	str	r0, [r7, #4]
 801a060:	460b      	mov	r3, r1
 801a062:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	2b00      	cmp	r3, #0
 801a068:	d106      	bne.n	801a078 <pbuf_realloc+0x20>
 801a06a:	4b3a      	ldr	r3, [pc, #232]	@ (801a154 <pbuf_realloc+0xfc>)
 801a06c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 801a070:	4939      	ldr	r1, [pc, #228]	@ (801a158 <pbuf_realloc+0x100>)
 801a072:	483a      	ldr	r0, [pc, #232]	@ (801a15c <pbuf_realloc+0x104>)
 801a074:	f00b f8f6 	bl	8025264 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	891b      	ldrh	r3, [r3, #8]
 801a07c:	887a      	ldrh	r2, [r7, #2]
 801a07e:	429a      	cmp	r2, r3
 801a080:	d263      	bcs.n	801a14a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	891a      	ldrh	r2, [r3, #8]
 801a086:	887b      	ldrh	r3, [r7, #2]
 801a088:	1ad3      	subs	r3, r2, r3
 801a08a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801a08c:	887b      	ldrh	r3, [r7, #2]
 801a08e:	817b      	strh	r3, [r7, #10]
  q = p;
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801a094:	e018      	b.n	801a0c8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801a096:	68fb      	ldr	r3, [r7, #12]
 801a098:	895b      	ldrh	r3, [r3, #10]
 801a09a:	897a      	ldrh	r2, [r7, #10]
 801a09c:	1ad3      	subs	r3, r2, r3
 801a09e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	891a      	ldrh	r2, [r3, #8]
 801a0a4:	893b      	ldrh	r3, [r7, #8]
 801a0a6:	1ad3      	subs	r3, r2, r3
 801a0a8:	b29a      	uxth	r2, r3
 801a0aa:	68fb      	ldr	r3, [r7, #12]
 801a0ac:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801a0b4:	68fb      	ldr	r3, [r7, #12]
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d106      	bne.n	801a0c8 <pbuf_realloc+0x70>
 801a0ba:	4b26      	ldr	r3, [pc, #152]	@ (801a154 <pbuf_realloc+0xfc>)
 801a0bc:	f240 12af 	movw	r2, #431	@ 0x1af
 801a0c0:	4927      	ldr	r1, [pc, #156]	@ (801a160 <pbuf_realloc+0x108>)
 801a0c2:	4826      	ldr	r0, [pc, #152]	@ (801a15c <pbuf_realloc+0x104>)
 801a0c4:	f00b f8ce 	bl	8025264 <iprintf>
  while (rem_len > q->len) {
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	895b      	ldrh	r3, [r3, #10]
 801a0cc:	897a      	ldrh	r2, [r7, #10]
 801a0ce:	429a      	cmp	r2, r3
 801a0d0:	d8e1      	bhi.n	801a096 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801a0d2:	68fb      	ldr	r3, [r7, #12]
 801a0d4:	7b1b      	ldrb	r3, [r3, #12]
 801a0d6:	f003 030f 	and.w	r3, r3, #15
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d121      	bne.n	801a122 <pbuf_realloc+0xca>
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	895b      	ldrh	r3, [r3, #10]
 801a0e2:	897a      	ldrh	r2, [r7, #10]
 801a0e4:	429a      	cmp	r2, r3
 801a0e6:	d01c      	beq.n	801a122 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	7b5b      	ldrb	r3, [r3, #13]
 801a0ec:	f003 0302 	and.w	r3, r3, #2
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d116      	bne.n	801a122 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	685a      	ldr	r2, [r3, #4]
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	1ad3      	subs	r3, r2, r3
 801a0fc:	b29a      	uxth	r2, r3
 801a0fe:	897b      	ldrh	r3, [r7, #10]
 801a100:	4413      	add	r3, r2
 801a102:	b29b      	uxth	r3, r3
 801a104:	4619      	mov	r1, r3
 801a106:	68f8      	ldr	r0, [r7, #12]
 801a108:	f7fe ff64 	bl	8018fd4 <mem_trim>
 801a10c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	2b00      	cmp	r3, #0
 801a112:	d106      	bne.n	801a122 <pbuf_realloc+0xca>
 801a114:	4b0f      	ldr	r3, [pc, #60]	@ (801a154 <pbuf_realloc+0xfc>)
 801a116:	f240 12bd 	movw	r2, #445	@ 0x1bd
 801a11a:	4912      	ldr	r1, [pc, #72]	@ (801a164 <pbuf_realloc+0x10c>)
 801a11c:	480f      	ldr	r0, [pc, #60]	@ (801a15c <pbuf_realloc+0x104>)
 801a11e:	f00b f8a1 	bl	8025264 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801a122:	68fb      	ldr	r3, [r7, #12]
 801a124:	897a      	ldrh	r2, [r7, #10]
 801a126:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801a128:	68fb      	ldr	r3, [r7, #12]
 801a12a:	895a      	ldrh	r2, [r3, #10]
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801a130:	68fb      	ldr	r3, [r7, #12]
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d004      	beq.n	801a142 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	4618      	mov	r0, r3
 801a13e:	f000 f943 	bl	801a3c8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801a142:	68fb      	ldr	r3, [r7, #12]
 801a144:	2200      	movs	r2, #0
 801a146:	601a      	str	r2, [r3, #0]
 801a148:	e000      	b.n	801a14c <pbuf_realloc+0xf4>
    return;
 801a14a:	bf00      	nop

}
 801a14c:	3710      	adds	r7, #16
 801a14e:	46bd      	mov	sp, r7
 801a150:	bd80      	pop	{r7, pc}
 801a152:	bf00      	nop
 801a154:	0802a8e4 	.word	0x0802a8e4
 801a158:	0802a9fc 	.word	0x0802a9fc
 801a15c:	0802a944 	.word	0x0802a944
 801a160:	0802aa14 	.word	0x0802aa14
 801a164:	0802aa2c 	.word	0x0802aa2c

0801a168 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801a168:	b580      	push	{r7, lr}
 801a16a:	b086      	sub	sp, #24
 801a16c:	af00      	add	r7, sp, #0
 801a16e:	60f8      	str	r0, [r7, #12]
 801a170:	60b9      	str	r1, [r7, #8]
 801a172:	4613      	mov	r3, r2
 801a174:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801a176:	68fb      	ldr	r3, [r7, #12]
 801a178:	2b00      	cmp	r3, #0
 801a17a:	d106      	bne.n	801a18a <pbuf_add_header_impl+0x22>
 801a17c:	4b2b      	ldr	r3, [pc, #172]	@ (801a22c <pbuf_add_header_impl+0xc4>)
 801a17e:	f240 12df 	movw	r2, #479	@ 0x1df
 801a182:	492b      	ldr	r1, [pc, #172]	@ (801a230 <pbuf_add_header_impl+0xc8>)
 801a184:	482b      	ldr	r0, [pc, #172]	@ (801a234 <pbuf_add_header_impl+0xcc>)
 801a186:	f00b f86d 	bl	8025264 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801a18a:	68fb      	ldr	r3, [r7, #12]
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d003      	beq.n	801a198 <pbuf_add_header_impl+0x30>
 801a190:	68bb      	ldr	r3, [r7, #8]
 801a192:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a196:	d301      	bcc.n	801a19c <pbuf_add_header_impl+0x34>
    return 1;
 801a198:	2301      	movs	r3, #1
 801a19a:	e043      	b.n	801a224 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801a19c:	68bb      	ldr	r3, [r7, #8]
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d101      	bne.n	801a1a6 <pbuf_add_header_impl+0x3e>
    return 0;
 801a1a2:	2300      	movs	r3, #0
 801a1a4:	e03e      	b.n	801a224 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801a1a6:	68bb      	ldr	r3, [r7, #8]
 801a1a8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	891a      	ldrh	r2, [r3, #8]
 801a1ae:	8a7b      	ldrh	r3, [r7, #18]
 801a1b0:	4413      	add	r3, r2
 801a1b2:	b29b      	uxth	r3, r3
 801a1b4:	8a7a      	ldrh	r2, [r7, #18]
 801a1b6:	429a      	cmp	r2, r3
 801a1b8:	d901      	bls.n	801a1be <pbuf_add_header_impl+0x56>
    return 1;
 801a1ba:	2301      	movs	r3, #1
 801a1bc:	e032      	b.n	801a224 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	7b1b      	ldrb	r3, [r3, #12]
 801a1c2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801a1c4:	8a3b      	ldrh	r3, [r7, #16]
 801a1c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	d00c      	beq.n	801a1e8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	685a      	ldr	r2, [r3, #4]
 801a1d2:	68bb      	ldr	r3, [r7, #8]
 801a1d4:	425b      	negs	r3, r3
 801a1d6:	4413      	add	r3, r2
 801a1d8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801a1da:	68fb      	ldr	r3, [r7, #12]
 801a1dc:	3310      	adds	r3, #16
 801a1de:	697a      	ldr	r2, [r7, #20]
 801a1e0:	429a      	cmp	r2, r3
 801a1e2:	d20d      	bcs.n	801a200 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801a1e4:	2301      	movs	r3, #1
 801a1e6:	e01d      	b.n	801a224 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801a1e8:	79fb      	ldrb	r3, [r7, #7]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d006      	beq.n	801a1fc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801a1ee:	68fb      	ldr	r3, [r7, #12]
 801a1f0:	685a      	ldr	r2, [r3, #4]
 801a1f2:	68bb      	ldr	r3, [r7, #8]
 801a1f4:	425b      	negs	r3, r3
 801a1f6:	4413      	add	r3, r2
 801a1f8:	617b      	str	r3, [r7, #20]
 801a1fa:	e001      	b.n	801a200 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801a1fc:	2301      	movs	r3, #1
 801a1fe:	e011      	b.n	801a224 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801a200:	68fb      	ldr	r3, [r7, #12]
 801a202:	697a      	ldr	r2, [r7, #20]
 801a204:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801a206:	68fb      	ldr	r3, [r7, #12]
 801a208:	895a      	ldrh	r2, [r3, #10]
 801a20a:	8a7b      	ldrh	r3, [r7, #18]
 801a20c:	4413      	add	r3, r2
 801a20e:	b29a      	uxth	r2, r3
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	891a      	ldrh	r2, [r3, #8]
 801a218:	8a7b      	ldrh	r3, [r7, #18]
 801a21a:	4413      	add	r3, r2
 801a21c:	b29a      	uxth	r2, r3
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	811a      	strh	r2, [r3, #8]


  return 0;
 801a222:	2300      	movs	r3, #0
}
 801a224:	4618      	mov	r0, r3
 801a226:	3718      	adds	r7, #24
 801a228:	46bd      	mov	sp, r7
 801a22a:	bd80      	pop	{r7, pc}
 801a22c:	0802a8e4 	.word	0x0802a8e4
 801a230:	0802aa48 	.word	0x0802aa48
 801a234:	0802a944 	.word	0x0802a944

0801a238 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801a238:	b580      	push	{r7, lr}
 801a23a:	b082      	sub	sp, #8
 801a23c:	af00      	add	r7, sp, #0
 801a23e:	6078      	str	r0, [r7, #4]
 801a240:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801a242:	2200      	movs	r2, #0
 801a244:	6839      	ldr	r1, [r7, #0]
 801a246:	6878      	ldr	r0, [r7, #4]
 801a248:	f7ff ff8e 	bl	801a168 <pbuf_add_header_impl>
 801a24c:	4603      	mov	r3, r0
}
 801a24e:	4618      	mov	r0, r3
 801a250:	3708      	adds	r7, #8
 801a252:	46bd      	mov	sp, r7
 801a254:	bd80      	pop	{r7, pc}
	...

0801a258 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801a258:	b580      	push	{r7, lr}
 801a25a:	b084      	sub	sp, #16
 801a25c:	af00      	add	r7, sp, #0
 801a25e:	6078      	str	r0, [r7, #4]
 801a260:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	2b00      	cmp	r3, #0
 801a266:	d106      	bne.n	801a276 <pbuf_remove_header+0x1e>
 801a268:	4b20      	ldr	r3, [pc, #128]	@ (801a2ec <pbuf_remove_header+0x94>)
 801a26a:	f240 224b 	movw	r2, #587	@ 0x24b
 801a26e:	4920      	ldr	r1, [pc, #128]	@ (801a2f0 <pbuf_remove_header+0x98>)
 801a270:	4820      	ldr	r0, [pc, #128]	@ (801a2f4 <pbuf_remove_header+0x9c>)
 801a272:	f00a fff7 	bl	8025264 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	2b00      	cmp	r3, #0
 801a27a:	d003      	beq.n	801a284 <pbuf_remove_header+0x2c>
 801a27c:	683b      	ldr	r3, [r7, #0]
 801a27e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a282:	d301      	bcc.n	801a288 <pbuf_remove_header+0x30>
    return 1;
 801a284:	2301      	movs	r3, #1
 801a286:	e02c      	b.n	801a2e2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801a288:	683b      	ldr	r3, [r7, #0]
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	d101      	bne.n	801a292 <pbuf_remove_header+0x3a>
    return 0;
 801a28e:	2300      	movs	r3, #0
 801a290:	e027      	b.n	801a2e2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801a292:	683b      	ldr	r3, [r7, #0]
 801a294:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	895b      	ldrh	r3, [r3, #10]
 801a29a:	89fa      	ldrh	r2, [r7, #14]
 801a29c:	429a      	cmp	r2, r3
 801a29e:	d908      	bls.n	801a2b2 <pbuf_remove_header+0x5a>
 801a2a0:	4b12      	ldr	r3, [pc, #72]	@ (801a2ec <pbuf_remove_header+0x94>)
 801a2a2:	f240 2255 	movw	r2, #597	@ 0x255
 801a2a6:	4914      	ldr	r1, [pc, #80]	@ (801a2f8 <pbuf_remove_header+0xa0>)
 801a2a8:	4812      	ldr	r0, [pc, #72]	@ (801a2f4 <pbuf_remove_header+0x9c>)
 801a2aa:	f00a ffdb 	bl	8025264 <iprintf>
 801a2ae:	2301      	movs	r3, #1
 801a2b0:	e017      	b.n	801a2e2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	685b      	ldr	r3, [r3, #4]
 801a2b6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	685a      	ldr	r2, [r3, #4]
 801a2bc:	683b      	ldr	r3, [r7, #0]
 801a2be:	441a      	add	r2, r3
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	895a      	ldrh	r2, [r3, #10]
 801a2c8:	89fb      	ldrh	r3, [r7, #14]
 801a2ca:	1ad3      	subs	r3, r2, r3
 801a2cc:	b29a      	uxth	r2, r3
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	891a      	ldrh	r2, [r3, #8]
 801a2d6:	89fb      	ldrh	r3, [r7, #14]
 801a2d8:	1ad3      	subs	r3, r2, r3
 801a2da:	b29a      	uxth	r2, r3
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801a2e0:	2300      	movs	r3, #0
}
 801a2e2:	4618      	mov	r0, r3
 801a2e4:	3710      	adds	r7, #16
 801a2e6:	46bd      	mov	sp, r7
 801a2e8:	bd80      	pop	{r7, pc}
 801a2ea:	bf00      	nop
 801a2ec:	0802a8e4 	.word	0x0802a8e4
 801a2f0:	0802aa48 	.word	0x0802aa48
 801a2f4:	0802a944 	.word	0x0802a944
 801a2f8:	0802aa54 	.word	0x0802aa54

0801a2fc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	b082      	sub	sp, #8
 801a300:	af00      	add	r7, sp, #0
 801a302:	6078      	str	r0, [r7, #4]
 801a304:	460b      	mov	r3, r1
 801a306:	807b      	strh	r3, [r7, #2]
 801a308:	4613      	mov	r3, r2
 801a30a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801a30c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a310:	2b00      	cmp	r3, #0
 801a312:	da08      	bge.n	801a326 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801a314:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a318:	425b      	negs	r3, r3
 801a31a:	4619      	mov	r1, r3
 801a31c:	6878      	ldr	r0, [r7, #4]
 801a31e:	f7ff ff9b 	bl	801a258 <pbuf_remove_header>
 801a322:	4603      	mov	r3, r0
 801a324:	e007      	b.n	801a336 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801a326:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a32a:	787a      	ldrb	r2, [r7, #1]
 801a32c:	4619      	mov	r1, r3
 801a32e:	6878      	ldr	r0, [r7, #4]
 801a330:	f7ff ff1a 	bl	801a168 <pbuf_add_header_impl>
 801a334:	4603      	mov	r3, r0
  }
}
 801a336:	4618      	mov	r0, r3
 801a338:	3708      	adds	r7, #8
 801a33a:	46bd      	mov	sp, r7
 801a33c:	bd80      	pop	{r7, pc}

0801a33e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801a33e:	b580      	push	{r7, lr}
 801a340:	b082      	sub	sp, #8
 801a342:	af00      	add	r7, sp, #0
 801a344:	6078      	str	r0, [r7, #4]
 801a346:	460b      	mov	r3, r1
 801a348:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801a34a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a34e:	2201      	movs	r2, #1
 801a350:	4619      	mov	r1, r3
 801a352:	6878      	ldr	r0, [r7, #4]
 801a354:	f7ff ffd2 	bl	801a2fc <pbuf_header_impl>
 801a358:	4603      	mov	r3, r0
}
 801a35a:	4618      	mov	r0, r3
 801a35c:	3708      	adds	r7, #8
 801a35e:	46bd      	mov	sp, r7
 801a360:	bd80      	pop	{r7, pc}

0801a362 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 801a362:	b580      	push	{r7, lr}
 801a364:	b086      	sub	sp, #24
 801a366:	af00      	add	r7, sp, #0
 801a368:	6078      	str	r0, [r7, #4]
 801a36a:	460b      	mov	r3, r1
 801a36c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 801a372:	887b      	ldrh	r3, [r7, #2]
 801a374:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801a376:	e01c      	b.n	801a3b2 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 801a378:	697b      	ldr	r3, [r7, #20]
 801a37a:	895b      	ldrh	r3, [r3, #10]
 801a37c:	8a7a      	ldrh	r2, [r7, #18]
 801a37e:	429a      	cmp	r2, r3
 801a380:	d310      	bcc.n	801a3a4 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 801a382:	697b      	ldr	r3, [r7, #20]
 801a384:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 801a386:	697b      	ldr	r3, [r7, #20]
 801a388:	895b      	ldrh	r3, [r3, #10]
 801a38a:	8a7a      	ldrh	r2, [r7, #18]
 801a38c:	1ad3      	subs	r3, r2, r3
 801a38e:	827b      	strh	r3, [r7, #18]
      p = p->next;
 801a390:	697b      	ldr	r3, [r7, #20]
 801a392:	681b      	ldr	r3, [r3, #0]
 801a394:	617b      	str	r3, [r7, #20]
      f->next = 0;
 801a396:	68fb      	ldr	r3, [r7, #12]
 801a398:	2200      	movs	r2, #0
 801a39a:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 801a39c:	68f8      	ldr	r0, [r7, #12]
 801a39e:	f000 f813 	bl	801a3c8 <pbuf_free>
 801a3a2:	e006      	b.n	801a3b2 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 801a3a4:	8a7b      	ldrh	r3, [r7, #18]
 801a3a6:	4619      	mov	r1, r3
 801a3a8:	6978      	ldr	r0, [r7, #20]
 801a3aa:	f7ff ff55 	bl	801a258 <pbuf_remove_header>
      free_left = 0;
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801a3b2:	8a7b      	ldrh	r3, [r7, #18]
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d002      	beq.n	801a3be <pbuf_free_header+0x5c>
 801a3b8:	697b      	ldr	r3, [r7, #20]
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d1dc      	bne.n	801a378 <pbuf_free_header+0x16>
    }
  }
  return p;
 801a3be:	697b      	ldr	r3, [r7, #20]
}
 801a3c0:	4618      	mov	r0, r3
 801a3c2:	3718      	adds	r7, #24
 801a3c4:	46bd      	mov	sp, r7
 801a3c6:	bd80      	pop	{r7, pc}

0801a3c8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801a3c8:	b580      	push	{r7, lr}
 801a3ca:	b088      	sub	sp, #32
 801a3cc:	af00      	add	r7, sp, #0
 801a3ce:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d10b      	bne.n	801a3ee <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d106      	bne.n	801a3ea <pbuf_free+0x22>
 801a3dc:	4b3b      	ldr	r3, [pc, #236]	@ (801a4cc <pbuf_free+0x104>)
 801a3de:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 801a3e2:	493b      	ldr	r1, [pc, #236]	@ (801a4d0 <pbuf_free+0x108>)
 801a3e4:	483b      	ldr	r0, [pc, #236]	@ (801a4d4 <pbuf_free+0x10c>)
 801a3e6:	f00a ff3d 	bl	8025264 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801a3ea:	2300      	movs	r3, #0
 801a3ec:	e069      	b.n	801a4c2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801a3ee:	2300      	movs	r3, #0
 801a3f0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801a3f2:	e062      	b.n	801a4ba <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801a3f4:	f009 fe9c 	bl	8024130 <sys_arch_protect>
 801a3f8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	7b9b      	ldrb	r3, [r3, #14]
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d106      	bne.n	801a410 <pbuf_free+0x48>
 801a402:	4b32      	ldr	r3, [pc, #200]	@ (801a4cc <pbuf_free+0x104>)
 801a404:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801a408:	4933      	ldr	r1, [pc, #204]	@ (801a4d8 <pbuf_free+0x110>)
 801a40a:	4832      	ldr	r0, [pc, #200]	@ (801a4d4 <pbuf_free+0x10c>)
 801a40c:	f00a ff2a 	bl	8025264 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	7b9b      	ldrb	r3, [r3, #14]
 801a414:	3b01      	subs	r3, #1
 801a416:	b2da      	uxtb	r2, r3
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	739a      	strb	r2, [r3, #14]
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	7b9b      	ldrb	r3, [r3, #14]
 801a420:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801a422:	69b8      	ldr	r0, [r7, #24]
 801a424:	f009 fe92 	bl	802414c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801a428:	7dfb      	ldrb	r3, [r7, #23]
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d143      	bne.n	801a4b6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	7b1b      	ldrb	r3, [r3, #12]
 801a438:	f003 030f 	and.w	r3, r3, #15
 801a43c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	7b5b      	ldrb	r3, [r3, #13]
 801a442:	f003 0302 	and.w	r3, r3, #2
 801a446:	2b00      	cmp	r3, #0
 801a448:	d011      	beq.n	801a46e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801a44e:	68bb      	ldr	r3, [r7, #8]
 801a450:	691b      	ldr	r3, [r3, #16]
 801a452:	2b00      	cmp	r3, #0
 801a454:	d106      	bne.n	801a464 <pbuf_free+0x9c>
 801a456:	4b1d      	ldr	r3, [pc, #116]	@ (801a4cc <pbuf_free+0x104>)
 801a458:	f240 22ff 	movw	r2, #767	@ 0x2ff
 801a45c:	491f      	ldr	r1, [pc, #124]	@ (801a4dc <pbuf_free+0x114>)
 801a45e:	481d      	ldr	r0, [pc, #116]	@ (801a4d4 <pbuf_free+0x10c>)
 801a460:	f00a ff00 	bl	8025264 <iprintf>
        pc->custom_free_function(p);
 801a464:	68bb      	ldr	r3, [r7, #8]
 801a466:	691b      	ldr	r3, [r3, #16]
 801a468:	6878      	ldr	r0, [r7, #4]
 801a46a:	4798      	blx	r3
 801a46c:	e01d      	b.n	801a4aa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801a46e:	7bfb      	ldrb	r3, [r7, #15]
 801a470:	2b02      	cmp	r3, #2
 801a472:	d104      	bne.n	801a47e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801a474:	6879      	ldr	r1, [r7, #4]
 801a476:	200c      	movs	r0, #12
 801a478:	f7ff f8d0 	bl	801961c <memp_free>
 801a47c:	e015      	b.n	801a4aa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801a47e:	7bfb      	ldrb	r3, [r7, #15]
 801a480:	2b01      	cmp	r3, #1
 801a482:	d104      	bne.n	801a48e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801a484:	6879      	ldr	r1, [r7, #4]
 801a486:	200b      	movs	r0, #11
 801a488:	f7ff f8c8 	bl	801961c <memp_free>
 801a48c:	e00d      	b.n	801a4aa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801a48e:	7bfb      	ldrb	r3, [r7, #15]
 801a490:	2b00      	cmp	r3, #0
 801a492:	d103      	bne.n	801a49c <pbuf_free+0xd4>
          mem_free(p);
 801a494:	6878      	ldr	r0, [r7, #4]
 801a496:	f7fe fd0d 	bl	8018eb4 <mem_free>
 801a49a:	e006      	b.n	801a4aa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801a49c:	4b0b      	ldr	r3, [pc, #44]	@ (801a4cc <pbuf_free+0x104>)
 801a49e:	f240 320f 	movw	r2, #783	@ 0x30f
 801a4a2:	490f      	ldr	r1, [pc, #60]	@ (801a4e0 <pbuf_free+0x118>)
 801a4a4:	480b      	ldr	r0, [pc, #44]	@ (801a4d4 <pbuf_free+0x10c>)
 801a4a6:	f00a fedd 	bl	8025264 <iprintf>
        }
      }
      count++;
 801a4aa:	7ffb      	ldrb	r3, [r7, #31]
 801a4ac:	3301      	adds	r3, #1
 801a4ae:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801a4b0:	693b      	ldr	r3, [r7, #16]
 801a4b2:	607b      	str	r3, [r7, #4]
 801a4b4:	e001      	b.n	801a4ba <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801a4b6:	2300      	movs	r3, #0
 801a4b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d199      	bne.n	801a3f4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801a4c0:	7ffb      	ldrb	r3, [r7, #31]
}
 801a4c2:	4618      	mov	r0, r3
 801a4c4:	3720      	adds	r7, #32
 801a4c6:	46bd      	mov	sp, r7
 801a4c8:	bd80      	pop	{r7, pc}
 801a4ca:	bf00      	nop
 801a4cc:	0802a8e4 	.word	0x0802a8e4
 801a4d0:	0802aa48 	.word	0x0802aa48
 801a4d4:	0802a944 	.word	0x0802a944
 801a4d8:	0802aa74 	.word	0x0802aa74
 801a4dc:	0802aa8c 	.word	0x0802aa8c
 801a4e0:	0802aab0 	.word	0x0802aab0

0801a4e4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801a4e4:	b480      	push	{r7}
 801a4e6:	b085      	sub	sp, #20
 801a4e8:	af00      	add	r7, sp, #0
 801a4ea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801a4ec:	2300      	movs	r3, #0
 801a4ee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801a4f0:	e005      	b.n	801a4fe <pbuf_clen+0x1a>
    ++len;
 801a4f2:	89fb      	ldrh	r3, [r7, #14]
 801a4f4:	3301      	adds	r3, #1
 801a4f6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	2b00      	cmp	r3, #0
 801a502:	d1f6      	bne.n	801a4f2 <pbuf_clen+0xe>
  }
  return len;
 801a504:	89fb      	ldrh	r3, [r7, #14]
}
 801a506:	4618      	mov	r0, r3
 801a508:	3714      	adds	r7, #20
 801a50a:	46bd      	mov	sp, r7
 801a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a510:	4770      	bx	lr
	...

0801a514 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801a514:	b580      	push	{r7, lr}
 801a516:	b084      	sub	sp, #16
 801a518:	af00      	add	r7, sp, #0
 801a51a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d016      	beq.n	801a550 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801a522:	f009 fe05 	bl	8024130 <sys_arch_protect>
 801a526:	60f8      	str	r0, [r7, #12]
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	7b9b      	ldrb	r3, [r3, #14]
 801a52c:	3301      	adds	r3, #1
 801a52e:	b2da      	uxtb	r2, r3
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	739a      	strb	r2, [r3, #14]
 801a534:	68f8      	ldr	r0, [r7, #12]
 801a536:	f009 fe09 	bl	802414c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	7b9b      	ldrb	r3, [r3, #14]
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d106      	bne.n	801a550 <pbuf_ref+0x3c>
 801a542:	4b05      	ldr	r3, [pc, #20]	@ (801a558 <pbuf_ref+0x44>)
 801a544:	f240 3242 	movw	r2, #834	@ 0x342
 801a548:	4904      	ldr	r1, [pc, #16]	@ (801a55c <pbuf_ref+0x48>)
 801a54a:	4805      	ldr	r0, [pc, #20]	@ (801a560 <pbuf_ref+0x4c>)
 801a54c:	f00a fe8a 	bl	8025264 <iprintf>
  }
}
 801a550:	bf00      	nop
 801a552:	3710      	adds	r7, #16
 801a554:	46bd      	mov	sp, r7
 801a556:	bd80      	pop	{r7, pc}
 801a558:	0802a8e4 	.word	0x0802a8e4
 801a55c:	0802aac4 	.word	0x0802aac4
 801a560:	0802a944 	.word	0x0802a944

0801a564 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801a564:	b580      	push	{r7, lr}
 801a566:	b084      	sub	sp, #16
 801a568:	af00      	add	r7, sp, #0
 801a56a:	6078      	str	r0, [r7, #4]
 801a56c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	2b00      	cmp	r3, #0
 801a572:	d002      	beq.n	801a57a <pbuf_cat+0x16>
 801a574:	683b      	ldr	r3, [r7, #0]
 801a576:	2b00      	cmp	r3, #0
 801a578:	d107      	bne.n	801a58a <pbuf_cat+0x26>
 801a57a:	4b20      	ldr	r3, [pc, #128]	@ (801a5fc <pbuf_cat+0x98>)
 801a57c:	f240 3259 	movw	r2, #857	@ 0x359
 801a580:	491f      	ldr	r1, [pc, #124]	@ (801a600 <pbuf_cat+0x9c>)
 801a582:	4820      	ldr	r0, [pc, #128]	@ (801a604 <pbuf_cat+0xa0>)
 801a584:	f00a fe6e 	bl	8025264 <iprintf>
 801a588:	e034      	b.n	801a5f4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	60fb      	str	r3, [r7, #12]
 801a58e:	e00a      	b.n	801a5a6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801a590:	68fb      	ldr	r3, [r7, #12]
 801a592:	891a      	ldrh	r2, [r3, #8]
 801a594:	683b      	ldr	r3, [r7, #0]
 801a596:	891b      	ldrh	r3, [r3, #8]
 801a598:	4413      	add	r3, r2
 801a59a:	b29a      	uxth	r2, r3
 801a59c:	68fb      	ldr	r3, [r7, #12]
 801a59e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801a5a0:	68fb      	ldr	r3, [r7, #12]
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	60fb      	str	r3, [r7, #12]
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d1f0      	bne.n	801a590 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	891a      	ldrh	r2, [r3, #8]
 801a5b2:	68fb      	ldr	r3, [r7, #12]
 801a5b4:	895b      	ldrh	r3, [r3, #10]
 801a5b6:	429a      	cmp	r2, r3
 801a5b8:	d006      	beq.n	801a5c8 <pbuf_cat+0x64>
 801a5ba:	4b10      	ldr	r3, [pc, #64]	@ (801a5fc <pbuf_cat+0x98>)
 801a5bc:	f240 3262 	movw	r2, #866	@ 0x362
 801a5c0:	4911      	ldr	r1, [pc, #68]	@ (801a608 <pbuf_cat+0xa4>)
 801a5c2:	4810      	ldr	r0, [pc, #64]	@ (801a604 <pbuf_cat+0xa0>)
 801a5c4:	f00a fe4e 	bl	8025264 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	681b      	ldr	r3, [r3, #0]
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d006      	beq.n	801a5de <pbuf_cat+0x7a>
 801a5d0:	4b0a      	ldr	r3, [pc, #40]	@ (801a5fc <pbuf_cat+0x98>)
 801a5d2:	f240 3263 	movw	r2, #867	@ 0x363
 801a5d6:	490d      	ldr	r1, [pc, #52]	@ (801a60c <pbuf_cat+0xa8>)
 801a5d8:	480a      	ldr	r0, [pc, #40]	@ (801a604 <pbuf_cat+0xa0>)
 801a5da:	f00a fe43 	bl	8025264 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	891a      	ldrh	r2, [r3, #8]
 801a5e2:	683b      	ldr	r3, [r7, #0]
 801a5e4:	891b      	ldrh	r3, [r3, #8]
 801a5e6:	4413      	add	r3, r2
 801a5e8:	b29a      	uxth	r2, r3
 801a5ea:	68fb      	ldr	r3, [r7, #12]
 801a5ec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801a5ee:	68fb      	ldr	r3, [r7, #12]
 801a5f0:	683a      	ldr	r2, [r7, #0]
 801a5f2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801a5f4:	3710      	adds	r7, #16
 801a5f6:	46bd      	mov	sp, r7
 801a5f8:	bd80      	pop	{r7, pc}
 801a5fa:	bf00      	nop
 801a5fc:	0802a8e4 	.word	0x0802a8e4
 801a600:	0802aad8 	.word	0x0802aad8
 801a604:	0802a944 	.word	0x0802a944
 801a608:	0802ab10 	.word	0x0802ab10
 801a60c:	0802ab40 	.word	0x0802ab40

0801a610 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801a610:	b580      	push	{r7, lr}
 801a612:	b082      	sub	sp, #8
 801a614:	af00      	add	r7, sp, #0
 801a616:	6078      	str	r0, [r7, #4]
 801a618:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801a61a:	6839      	ldr	r1, [r7, #0]
 801a61c:	6878      	ldr	r0, [r7, #4]
 801a61e:	f7ff ffa1 	bl	801a564 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801a622:	6838      	ldr	r0, [r7, #0]
 801a624:	f7ff ff76 	bl	801a514 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801a628:	bf00      	nop
 801a62a:	3708      	adds	r7, #8
 801a62c:	46bd      	mov	sp, r7
 801a62e:	bd80      	pop	{r7, pc}

0801a630 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801a630:	b580      	push	{r7, lr}
 801a632:	b086      	sub	sp, #24
 801a634:	af00      	add	r7, sp, #0
 801a636:	6078      	str	r0, [r7, #4]
 801a638:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801a63a:	2300      	movs	r3, #0
 801a63c:	617b      	str	r3, [r7, #20]
 801a63e:	2300      	movs	r3, #0
 801a640:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	2b00      	cmp	r3, #0
 801a646:	d008      	beq.n	801a65a <pbuf_copy+0x2a>
 801a648:	683b      	ldr	r3, [r7, #0]
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d005      	beq.n	801a65a <pbuf_copy+0x2a>
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	891a      	ldrh	r2, [r3, #8]
 801a652:	683b      	ldr	r3, [r7, #0]
 801a654:	891b      	ldrh	r3, [r3, #8]
 801a656:	429a      	cmp	r2, r3
 801a658:	d209      	bcs.n	801a66e <pbuf_copy+0x3e>
 801a65a:	4b57      	ldr	r3, [pc, #348]	@ (801a7b8 <pbuf_copy+0x188>)
 801a65c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 801a660:	4956      	ldr	r1, [pc, #344]	@ (801a7bc <pbuf_copy+0x18c>)
 801a662:	4857      	ldr	r0, [pc, #348]	@ (801a7c0 <pbuf_copy+0x190>)
 801a664:	f00a fdfe 	bl	8025264 <iprintf>
 801a668:	f06f 030f 	mvn.w	r3, #15
 801a66c:	e09f      	b.n	801a7ae <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	895b      	ldrh	r3, [r3, #10]
 801a672:	461a      	mov	r2, r3
 801a674:	697b      	ldr	r3, [r7, #20]
 801a676:	1ad2      	subs	r2, r2, r3
 801a678:	683b      	ldr	r3, [r7, #0]
 801a67a:	895b      	ldrh	r3, [r3, #10]
 801a67c:	4619      	mov	r1, r3
 801a67e:	693b      	ldr	r3, [r7, #16]
 801a680:	1acb      	subs	r3, r1, r3
 801a682:	429a      	cmp	r2, r3
 801a684:	d306      	bcc.n	801a694 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801a686:	683b      	ldr	r3, [r7, #0]
 801a688:	895b      	ldrh	r3, [r3, #10]
 801a68a:	461a      	mov	r2, r3
 801a68c:	693b      	ldr	r3, [r7, #16]
 801a68e:	1ad3      	subs	r3, r2, r3
 801a690:	60fb      	str	r3, [r7, #12]
 801a692:	e005      	b.n	801a6a0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	895b      	ldrh	r3, [r3, #10]
 801a698:	461a      	mov	r2, r3
 801a69a:	697b      	ldr	r3, [r7, #20]
 801a69c:	1ad3      	subs	r3, r2, r3
 801a69e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	685a      	ldr	r2, [r3, #4]
 801a6a4:	697b      	ldr	r3, [r7, #20]
 801a6a6:	18d0      	adds	r0, r2, r3
 801a6a8:	683b      	ldr	r3, [r7, #0]
 801a6aa:	685a      	ldr	r2, [r3, #4]
 801a6ac:	693b      	ldr	r3, [r7, #16]
 801a6ae:	4413      	add	r3, r2
 801a6b0:	68fa      	ldr	r2, [r7, #12]
 801a6b2:	4619      	mov	r1, r3
 801a6b4:	f00a ff63 	bl	802557e <memcpy>
    offset_to += len;
 801a6b8:	697a      	ldr	r2, [r7, #20]
 801a6ba:	68fb      	ldr	r3, [r7, #12]
 801a6bc:	4413      	add	r3, r2
 801a6be:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801a6c0:	693a      	ldr	r2, [r7, #16]
 801a6c2:	68fb      	ldr	r3, [r7, #12]
 801a6c4:	4413      	add	r3, r2
 801a6c6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	895b      	ldrh	r3, [r3, #10]
 801a6cc:	461a      	mov	r2, r3
 801a6ce:	697b      	ldr	r3, [r7, #20]
 801a6d0:	4293      	cmp	r3, r2
 801a6d2:	d906      	bls.n	801a6e2 <pbuf_copy+0xb2>
 801a6d4:	4b38      	ldr	r3, [pc, #224]	@ (801a7b8 <pbuf_copy+0x188>)
 801a6d6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801a6da:	493a      	ldr	r1, [pc, #232]	@ (801a7c4 <pbuf_copy+0x194>)
 801a6dc:	4838      	ldr	r0, [pc, #224]	@ (801a7c0 <pbuf_copy+0x190>)
 801a6de:	f00a fdc1 	bl	8025264 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801a6e2:	683b      	ldr	r3, [r7, #0]
 801a6e4:	895b      	ldrh	r3, [r3, #10]
 801a6e6:	461a      	mov	r2, r3
 801a6e8:	693b      	ldr	r3, [r7, #16]
 801a6ea:	4293      	cmp	r3, r2
 801a6ec:	d906      	bls.n	801a6fc <pbuf_copy+0xcc>
 801a6ee:	4b32      	ldr	r3, [pc, #200]	@ (801a7b8 <pbuf_copy+0x188>)
 801a6f0:	f240 32da 	movw	r2, #986	@ 0x3da
 801a6f4:	4934      	ldr	r1, [pc, #208]	@ (801a7c8 <pbuf_copy+0x198>)
 801a6f6:	4832      	ldr	r0, [pc, #200]	@ (801a7c0 <pbuf_copy+0x190>)
 801a6f8:	f00a fdb4 	bl	8025264 <iprintf>
    if (offset_from >= p_from->len) {
 801a6fc:	683b      	ldr	r3, [r7, #0]
 801a6fe:	895b      	ldrh	r3, [r3, #10]
 801a700:	461a      	mov	r2, r3
 801a702:	693b      	ldr	r3, [r7, #16]
 801a704:	4293      	cmp	r3, r2
 801a706:	d304      	bcc.n	801a712 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801a708:	2300      	movs	r3, #0
 801a70a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801a70c:	683b      	ldr	r3, [r7, #0]
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	895b      	ldrh	r3, [r3, #10]
 801a716:	461a      	mov	r2, r3
 801a718:	697b      	ldr	r3, [r7, #20]
 801a71a:	4293      	cmp	r3, r2
 801a71c:	d114      	bne.n	801a748 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801a71e:	2300      	movs	r3, #0
 801a720:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	d10c      	bne.n	801a748 <pbuf_copy+0x118>
 801a72e:	683b      	ldr	r3, [r7, #0]
 801a730:	2b00      	cmp	r3, #0
 801a732:	d009      	beq.n	801a748 <pbuf_copy+0x118>
 801a734:	4b20      	ldr	r3, [pc, #128]	@ (801a7b8 <pbuf_copy+0x188>)
 801a736:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801a73a:	4924      	ldr	r1, [pc, #144]	@ (801a7cc <pbuf_copy+0x19c>)
 801a73c:	4820      	ldr	r0, [pc, #128]	@ (801a7c0 <pbuf_copy+0x190>)
 801a73e:	f00a fd91 	bl	8025264 <iprintf>
 801a742:	f06f 030f 	mvn.w	r3, #15
 801a746:	e032      	b.n	801a7ae <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801a748:	683b      	ldr	r3, [r7, #0]
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d013      	beq.n	801a776 <pbuf_copy+0x146>
 801a74e:	683b      	ldr	r3, [r7, #0]
 801a750:	895a      	ldrh	r2, [r3, #10]
 801a752:	683b      	ldr	r3, [r7, #0]
 801a754:	891b      	ldrh	r3, [r3, #8]
 801a756:	429a      	cmp	r2, r3
 801a758:	d10d      	bne.n	801a776 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801a75a:	683b      	ldr	r3, [r7, #0]
 801a75c:	681b      	ldr	r3, [r3, #0]
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d009      	beq.n	801a776 <pbuf_copy+0x146>
 801a762:	4b15      	ldr	r3, [pc, #84]	@ (801a7b8 <pbuf_copy+0x188>)
 801a764:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801a768:	4919      	ldr	r1, [pc, #100]	@ (801a7d0 <pbuf_copy+0x1a0>)
 801a76a:	4815      	ldr	r0, [pc, #84]	@ (801a7c0 <pbuf_copy+0x190>)
 801a76c:	f00a fd7a 	bl	8025264 <iprintf>
 801a770:	f06f 0305 	mvn.w	r3, #5
 801a774:	e01b      	b.n	801a7ae <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d013      	beq.n	801a7a4 <pbuf_copy+0x174>
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	895a      	ldrh	r2, [r3, #10]
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	891b      	ldrh	r3, [r3, #8]
 801a784:	429a      	cmp	r2, r3
 801a786:	d10d      	bne.n	801a7a4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d009      	beq.n	801a7a4 <pbuf_copy+0x174>
 801a790:	4b09      	ldr	r3, [pc, #36]	@ (801a7b8 <pbuf_copy+0x188>)
 801a792:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801a796:	490e      	ldr	r1, [pc, #56]	@ (801a7d0 <pbuf_copy+0x1a0>)
 801a798:	4809      	ldr	r0, [pc, #36]	@ (801a7c0 <pbuf_copy+0x190>)
 801a79a:	f00a fd63 	bl	8025264 <iprintf>
 801a79e:	f06f 0305 	mvn.w	r3, #5
 801a7a2:	e004      	b.n	801a7ae <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801a7a4:	683b      	ldr	r3, [r7, #0]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	f47f af61 	bne.w	801a66e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801a7ac:	2300      	movs	r3, #0
}
 801a7ae:	4618      	mov	r0, r3
 801a7b0:	3718      	adds	r7, #24
 801a7b2:	46bd      	mov	sp, r7
 801a7b4:	bd80      	pop	{r7, pc}
 801a7b6:	bf00      	nop
 801a7b8:	0802a8e4 	.word	0x0802a8e4
 801a7bc:	0802ab8c 	.word	0x0802ab8c
 801a7c0:	0802a944 	.word	0x0802a944
 801a7c4:	0802abbc 	.word	0x0802abbc
 801a7c8:	0802abd4 	.word	0x0802abd4
 801a7cc:	0802abf0 	.word	0x0802abf0
 801a7d0:	0802ac00 	.word	0x0802ac00

0801a7d4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801a7d4:	b580      	push	{r7, lr}
 801a7d6:	b088      	sub	sp, #32
 801a7d8:	af00      	add	r7, sp, #0
 801a7da:	60f8      	str	r0, [r7, #12]
 801a7dc:	60b9      	str	r1, [r7, #8]
 801a7de:	4611      	mov	r1, r2
 801a7e0:	461a      	mov	r2, r3
 801a7e2:	460b      	mov	r3, r1
 801a7e4:	80fb      	strh	r3, [r7, #6]
 801a7e6:	4613      	mov	r3, r2
 801a7e8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801a7ea:	2300      	movs	r3, #0
 801a7ec:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801a7ee:	2300      	movs	r3, #0
 801a7f0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801a7f2:	68fb      	ldr	r3, [r7, #12]
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d108      	bne.n	801a80a <pbuf_copy_partial+0x36>
 801a7f8:	4b2b      	ldr	r3, [pc, #172]	@ (801a8a8 <pbuf_copy_partial+0xd4>)
 801a7fa:	f240 420a 	movw	r2, #1034	@ 0x40a
 801a7fe:	492b      	ldr	r1, [pc, #172]	@ (801a8ac <pbuf_copy_partial+0xd8>)
 801a800:	482b      	ldr	r0, [pc, #172]	@ (801a8b0 <pbuf_copy_partial+0xdc>)
 801a802:	f00a fd2f 	bl	8025264 <iprintf>
 801a806:	2300      	movs	r3, #0
 801a808:	e04a      	b.n	801a8a0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801a80a:	68bb      	ldr	r3, [r7, #8]
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d108      	bne.n	801a822 <pbuf_copy_partial+0x4e>
 801a810:	4b25      	ldr	r3, [pc, #148]	@ (801a8a8 <pbuf_copy_partial+0xd4>)
 801a812:	f240 420b 	movw	r2, #1035	@ 0x40b
 801a816:	4927      	ldr	r1, [pc, #156]	@ (801a8b4 <pbuf_copy_partial+0xe0>)
 801a818:	4825      	ldr	r0, [pc, #148]	@ (801a8b0 <pbuf_copy_partial+0xdc>)
 801a81a:	f00a fd23 	bl	8025264 <iprintf>
 801a81e:	2300      	movs	r3, #0
 801a820:	e03e      	b.n	801a8a0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801a822:	68fb      	ldr	r3, [r7, #12]
 801a824:	61fb      	str	r3, [r7, #28]
 801a826:	e034      	b.n	801a892 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801a828:	88bb      	ldrh	r3, [r7, #4]
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d00a      	beq.n	801a844 <pbuf_copy_partial+0x70>
 801a82e:	69fb      	ldr	r3, [r7, #28]
 801a830:	895b      	ldrh	r3, [r3, #10]
 801a832:	88ba      	ldrh	r2, [r7, #4]
 801a834:	429a      	cmp	r2, r3
 801a836:	d305      	bcc.n	801a844 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801a838:	69fb      	ldr	r3, [r7, #28]
 801a83a:	895b      	ldrh	r3, [r3, #10]
 801a83c:	88ba      	ldrh	r2, [r7, #4]
 801a83e:	1ad3      	subs	r3, r2, r3
 801a840:	80bb      	strh	r3, [r7, #4]
 801a842:	e023      	b.n	801a88c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801a844:	69fb      	ldr	r3, [r7, #28]
 801a846:	895a      	ldrh	r2, [r3, #10]
 801a848:	88bb      	ldrh	r3, [r7, #4]
 801a84a:	1ad3      	subs	r3, r2, r3
 801a84c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801a84e:	8b3a      	ldrh	r2, [r7, #24]
 801a850:	88fb      	ldrh	r3, [r7, #6]
 801a852:	429a      	cmp	r2, r3
 801a854:	d901      	bls.n	801a85a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801a856:	88fb      	ldrh	r3, [r7, #6]
 801a858:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801a85a:	8b7b      	ldrh	r3, [r7, #26]
 801a85c:	68ba      	ldr	r2, [r7, #8]
 801a85e:	18d0      	adds	r0, r2, r3
 801a860:	69fb      	ldr	r3, [r7, #28]
 801a862:	685a      	ldr	r2, [r3, #4]
 801a864:	88bb      	ldrh	r3, [r7, #4]
 801a866:	4413      	add	r3, r2
 801a868:	8b3a      	ldrh	r2, [r7, #24]
 801a86a:	4619      	mov	r1, r3
 801a86c:	f00a fe87 	bl	802557e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801a870:	8afa      	ldrh	r2, [r7, #22]
 801a872:	8b3b      	ldrh	r3, [r7, #24]
 801a874:	4413      	add	r3, r2
 801a876:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801a878:	8b7a      	ldrh	r2, [r7, #26]
 801a87a:	8b3b      	ldrh	r3, [r7, #24]
 801a87c:	4413      	add	r3, r2
 801a87e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801a880:	88fa      	ldrh	r2, [r7, #6]
 801a882:	8b3b      	ldrh	r3, [r7, #24]
 801a884:	1ad3      	subs	r3, r2, r3
 801a886:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801a888:	2300      	movs	r3, #0
 801a88a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801a88c:	69fb      	ldr	r3, [r7, #28]
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	61fb      	str	r3, [r7, #28]
 801a892:	88fb      	ldrh	r3, [r7, #6]
 801a894:	2b00      	cmp	r3, #0
 801a896:	d002      	beq.n	801a89e <pbuf_copy_partial+0xca>
 801a898:	69fb      	ldr	r3, [r7, #28]
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d1c4      	bne.n	801a828 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801a89e:	8afb      	ldrh	r3, [r7, #22]
}
 801a8a0:	4618      	mov	r0, r3
 801a8a2:	3720      	adds	r7, #32
 801a8a4:	46bd      	mov	sp, r7
 801a8a6:	bd80      	pop	{r7, pc}
 801a8a8:	0802a8e4 	.word	0x0802a8e4
 801a8ac:	0802ac2c 	.word	0x0802ac2c
 801a8b0:	0802a944 	.word	0x0802a944
 801a8b4:	0802ac4c 	.word	0x0802ac4c

0801a8b8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b084      	sub	sp, #16
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	4603      	mov	r3, r0
 801a8c0:	603a      	str	r2, [r7, #0]
 801a8c2:	71fb      	strb	r3, [r7, #7]
 801a8c4:	460b      	mov	r3, r1
 801a8c6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801a8c8:	683b      	ldr	r3, [r7, #0]
 801a8ca:	8919      	ldrh	r1, [r3, #8]
 801a8cc:	88ba      	ldrh	r2, [r7, #4]
 801a8ce:	79fb      	ldrb	r3, [r7, #7]
 801a8d0:	4618      	mov	r0, r3
 801a8d2:	f7ff fa63 	bl	8019d9c <pbuf_alloc>
 801a8d6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801a8d8:	68fb      	ldr	r3, [r7, #12]
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	d101      	bne.n	801a8e2 <pbuf_clone+0x2a>
    return NULL;
 801a8de:	2300      	movs	r3, #0
 801a8e0:	e011      	b.n	801a906 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801a8e2:	6839      	ldr	r1, [r7, #0]
 801a8e4:	68f8      	ldr	r0, [r7, #12]
 801a8e6:	f7ff fea3 	bl	801a630 <pbuf_copy>
 801a8ea:	4603      	mov	r3, r0
 801a8ec:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801a8ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d006      	beq.n	801a904 <pbuf_clone+0x4c>
 801a8f6:	4b06      	ldr	r3, [pc, #24]	@ (801a910 <pbuf_clone+0x58>)
 801a8f8:	f240 5224 	movw	r2, #1316	@ 0x524
 801a8fc:	4905      	ldr	r1, [pc, #20]	@ (801a914 <pbuf_clone+0x5c>)
 801a8fe:	4806      	ldr	r0, [pc, #24]	@ (801a918 <pbuf_clone+0x60>)
 801a900:	f00a fcb0 	bl	8025264 <iprintf>
  return q;
 801a904:	68fb      	ldr	r3, [r7, #12]
}
 801a906:	4618      	mov	r0, r3
 801a908:	3710      	adds	r7, #16
 801a90a:	46bd      	mov	sp, r7
 801a90c:	bd80      	pop	{r7, pc}
 801a90e:	bf00      	nop
 801a910:	0802a8e4 	.word	0x0802a8e4
 801a914:	0802ad58 	.word	0x0802ad58
 801a918:	0802a944 	.word	0x0802a944

0801a91c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801a920:	f009 fce2 	bl	80242e8 <rand>
 801a924:	4603      	mov	r3, r0
 801a926:	b29b      	uxth	r3, r3
 801a928:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801a92c:	b29b      	uxth	r3, r3
 801a92e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801a932:	b29a      	uxth	r2, r3
 801a934:	4b01      	ldr	r3, [pc, #4]	@ (801a93c <tcp_init+0x20>)
 801a936:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801a938:	bf00      	nop
 801a93a:	bd80      	pop	{r7, pc}
 801a93c:	24000204 	.word	0x24000204

0801a940 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801a940:	b580      	push	{r7, lr}
 801a942:	b082      	sub	sp, #8
 801a944:	af00      	add	r7, sp, #0
 801a946:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	7d1b      	ldrb	r3, [r3, #20]
 801a94c:	2b01      	cmp	r3, #1
 801a94e:	d105      	bne.n	801a95c <tcp_free+0x1c>
 801a950:	4b06      	ldr	r3, [pc, #24]	@ (801a96c <tcp_free+0x2c>)
 801a952:	22d4      	movs	r2, #212	@ 0xd4
 801a954:	4906      	ldr	r1, [pc, #24]	@ (801a970 <tcp_free+0x30>)
 801a956:	4807      	ldr	r0, [pc, #28]	@ (801a974 <tcp_free+0x34>)
 801a958:	f00a fc84 	bl	8025264 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801a95c:	6879      	ldr	r1, [r7, #4]
 801a95e:	2001      	movs	r0, #1
 801a960:	f7fe fe5c 	bl	801961c <memp_free>
}
 801a964:	bf00      	nop
 801a966:	3708      	adds	r7, #8
 801a968:	46bd      	mov	sp, r7
 801a96a:	bd80      	pop	{r7, pc}
 801a96c:	0802ade4 	.word	0x0802ade4
 801a970:	0802ae14 	.word	0x0802ae14
 801a974:	0802ae28 	.word	0x0802ae28

0801a978 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801a978:	b580      	push	{r7, lr}
 801a97a:	b082      	sub	sp, #8
 801a97c:	af00      	add	r7, sp, #0
 801a97e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	7d1b      	ldrb	r3, [r3, #20]
 801a984:	2b01      	cmp	r3, #1
 801a986:	d105      	bne.n	801a994 <tcp_free_listen+0x1c>
 801a988:	4b06      	ldr	r3, [pc, #24]	@ (801a9a4 <tcp_free_listen+0x2c>)
 801a98a:	22df      	movs	r2, #223	@ 0xdf
 801a98c:	4906      	ldr	r1, [pc, #24]	@ (801a9a8 <tcp_free_listen+0x30>)
 801a98e:	4807      	ldr	r0, [pc, #28]	@ (801a9ac <tcp_free_listen+0x34>)
 801a990:	f00a fc68 	bl	8025264 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801a994:	6879      	ldr	r1, [r7, #4]
 801a996:	2002      	movs	r0, #2
 801a998:	f7fe fe40 	bl	801961c <memp_free>
}
 801a99c:	bf00      	nop
 801a99e:	3708      	adds	r7, #8
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	bd80      	pop	{r7, pc}
 801a9a4:	0802ade4 	.word	0x0802ade4
 801a9a8:	0802ae50 	.word	0x0802ae50
 801a9ac:	0802ae28 	.word	0x0802ae28

0801a9b0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801a9b0:	b580      	push	{r7, lr}
 801a9b2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801a9b4:	f000 ffde 	bl	801b974 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801a9b8:	4b07      	ldr	r3, [pc, #28]	@ (801a9d8 <tcp_tmr+0x28>)
 801a9ba:	781b      	ldrb	r3, [r3, #0]
 801a9bc:	3301      	adds	r3, #1
 801a9be:	b2da      	uxtb	r2, r3
 801a9c0:	4b05      	ldr	r3, [pc, #20]	@ (801a9d8 <tcp_tmr+0x28>)
 801a9c2:	701a      	strb	r2, [r3, #0]
 801a9c4:	4b04      	ldr	r3, [pc, #16]	@ (801a9d8 <tcp_tmr+0x28>)
 801a9c6:	781b      	ldrb	r3, [r3, #0]
 801a9c8:	f003 0301 	and.w	r3, r3, #1
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d001      	beq.n	801a9d4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801a9d0:	f000 fc8e 	bl	801b2f0 <tcp_slowtmr>
  }
}
 801a9d4:	bf00      	nop
 801a9d6:	bd80      	pop	{r7, pc}
 801a9d8:	2400be61 	.word	0x2400be61

0801a9dc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801a9dc:	b580      	push	{r7, lr}
 801a9de:	b084      	sub	sp, #16
 801a9e0:	af00      	add	r7, sp, #0
 801a9e2:	6078      	str	r0, [r7, #4]
 801a9e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801a9e6:	683b      	ldr	r3, [r7, #0]
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d105      	bne.n	801a9f8 <tcp_remove_listener+0x1c>
 801a9ec:	4b0d      	ldr	r3, [pc, #52]	@ (801aa24 <tcp_remove_listener+0x48>)
 801a9ee:	22ff      	movs	r2, #255	@ 0xff
 801a9f0:	490d      	ldr	r1, [pc, #52]	@ (801aa28 <tcp_remove_listener+0x4c>)
 801a9f2:	480e      	ldr	r0, [pc, #56]	@ (801aa2c <tcp_remove_listener+0x50>)
 801a9f4:	f00a fc36 	bl	8025264 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	60fb      	str	r3, [r7, #12]
 801a9fc:	e00a      	b.n	801aa14 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801a9fe:	68fb      	ldr	r3, [r7, #12]
 801aa00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801aa02:	683a      	ldr	r2, [r7, #0]
 801aa04:	429a      	cmp	r2, r3
 801aa06:	d102      	bne.n	801aa0e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	68db      	ldr	r3, [r3, #12]
 801aa12:	60fb      	str	r3, [r7, #12]
 801aa14:	68fb      	ldr	r3, [r7, #12]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d1f1      	bne.n	801a9fe <tcp_remove_listener+0x22>
    }
  }
}
 801aa1a:	bf00      	nop
 801aa1c:	bf00      	nop
 801aa1e:	3710      	adds	r7, #16
 801aa20:	46bd      	mov	sp, r7
 801aa22:	bd80      	pop	{r7, pc}
 801aa24:	0802ade4 	.word	0x0802ade4
 801aa28:	0802ae6c 	.word	0x0802ae6c
 801aa2c:	0802ae28 	.word	0x0802ae28

0801aa30 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801aa30:	b580      	push	{r7, lr}
 801aa32:	b084      	sub	sp, #16
 801aa34:	af00      	add	r7, sp, #0
 801aa36:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d106      	bne.n	801aa4c <tcp_listen_closed+0x1c>
 801aa3e:	4b14      	ldr	r3, [pc, #80]	@ (801aa90 <tcp_listen_closed+0x60>)
 801aa40:	f240 1211 	movw	r2, #273	@ 0x111
 801aa44:	4913      	ldr	r1, [pc, #76]	@ (801aa94 <tcp_listen_closed+0x64>)
 801aa46:	4814      	ldr	r0, [pc, #80]	@ (801aa98 <tcp_listen_closed+0x68>)
 801aa48:	f00a fc0c 	bl	8025264 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	7d1b      	ldrb	r3, [r3, #20]
 801aa50:	2b01      	cmp	r3, #1
 801aa52:	d006      	beq.n	801aa62 <tcp_listen_closed+0x32>
 801aa54:	4b0e      	ldr	r3, [pc, #56]	@ (801aa90 <tcp_listen_closed+0x60>)
 801aa56:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801aa5a:	4910      	ldr	r1, [pc, #64]	@ (801aa9c <tcp_listen_closed+0x6c>)
 801aa5c:	480e      	ldr	r0, [pc, #56]	@ (801aa98 <tcp_listen_closed+0x68>)
 801aa5e:	f00a fc01 	bl	8025264 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801aa62:	2301      	movs	r3, #1
 801aa64:	60fb      	str	r3, [r7, #12]
 801aa66:	e00b      	b.n	801aa80 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801aa68:	4a0d      	ldr	r2, [pc, #52]	@ (801aaa0 <tcp_listen_closed+0x70>)
 801aa6a:	68fb      	ldr	r3, [r7, #12]
 801aa6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	6879      	ldr	r1, [r7, #4]
 801aa74:	4618      	mov	r0, r3
 801aa76:	f7ff ffb1 	bl	801a9dc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	3301      	adds	r3, #1
 801aa7e:	60fb      	str	r3, [r7, #12]
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	2b03      	cmp	r3, #3
 801aa84:	d9f0      	bls.n	801aa68 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801aa86:	bf00      	nop
 801aa88:	bf00      	nop
 801aa8a:	3710      	adds	r7, #16
 801aa8c:	46bd      	mov	sp, r7
 801aa8e:	bd80      	pop	{r7, pc}
 801aa90:	0802ade4 	.word	0x0802ade4
 801aa94:	0802ae94 	.word	0x0802ae94
 801aa98:	0802ae28 	.word	0x0802ae28
 801aa9c:	0802aea0 	.word	0x0802aea0
 801aaa0:	0802cef0 	.word	0x0802cef0

0801aaa4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801aaa4:	b5b0      	push	{r4, r5, r7, lr}
 801aaa6:	b088      	sub	sp, #32
 801aaa8:	af04      	add	r7, sp, #16
 801aaaa:	6078      	str	r0, [r7, #4]
 801aaac:	460b      	mov	r3, r1
 801aaae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	d106      	bne.n	801aac4 <tcp_close_shutdown+0x20>
 801aab6:	4b63      	ldr	r3, [pc, #396]	@ (801ac44 <tcp_close_shutdown+0x1a0>)
 801aab8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801aabc:	4962      	ldr	r1, [pc, #392]	@ (801ac48 <tcp_close_shutdown+0x1a4>)
 801aabe:	4863      	ldr	r0, [pc, #396]	@ (801ac4c <tcp_close_shutdown+0x1a8>)
 801aac0:	f00a fbd0 	bl	8025264 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801aac4:	78fb      	ldrb	r3, [r7, #3]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d066      	beq.n	801ab98 <tcp_close_shutdown+0xf4>
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	7d1b      	ldrb	r3, [r3, #20]
 801aace:	2b04      	cmp	r3, #4
 801aad0:	d003      	beq.n	801aada <tcp_close_shutdown+0x36>
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	7d1b      	ldrb	r3, [r3, #20]
 801aad6:	2b07      	cmp	r3, #7
 801aad8:	d15e      	bne.n	801ab98 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801aade:	2b00      	cmp	r3, #0
 801aae0:	d104      	bne.n	801aaec <tcp_close_shutdown+0x48>
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801aae6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801aaea:	d055      	beq.n	801ab98 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	8b5b      	ldrh	r3, [r3, #26]
 801aaf0:	f003 0310 	and.w	r3, r3, #16
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	d106      	bne.n	801ab06 <tcp_close_shutdown+0x62>
 801aaf8:	4b52      	ldr	r3, [pc, #328]	@ (801ac44 <tcp_close_shutdown+0x1a0>)
 801aafa:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801aafe:	4954      	ldr	r1, [pc, #336]	@ (801ac50 <tcp_close_shutdown+0x1ac>)
 801ab00:	4852      	ldr	r0, [pc, #328]	@ (801ac4c <tcp_close_shutdown+0x1a8>)
 801ab02:	f00a fbaf 	bl	8025264 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801ab0e:	687d      	ldr	r5, [r7, #4]
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	3304      	adds	r3, #4
 801ab14:	687a      	ldr	r2, [r7, #4]
 801ab16:	8ad2      	ldrh	r2, [r2, #22]
 801ab18:	6879      	ldr	r1, [r7, #4]
 801ab1a:	8b09      	ldrh	r1, [r1, #24]
 801ab1c:	9102      	str	r1, [sp, #8]
 801ab1e:	9201      	str	r2, [sp, #4]
 801ab20:	9300      	str	r3, [sp, #0]
 801ab22:	462b      	mov	r3, r5
 801ab24:	4622      	mov	r2, r4
 801ab26:	4601      	mov	r1, r0
 801ab28:	6878      	ldr	r0, [r7, #4]
 801ab2a:	f005 fced 	bl	8020508 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801ab2e:	6878      	ldr	r0, [r7, #4]
 801ab30:	f001 fad0 	bl	801c0d4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801ab34:	4b47      	ldr	r3, [pc, #284]	@ (801ac54 <tcp_close_shutdown+0x1b0>)
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	687a      	ldr	r2, [r7, #4]
 801ab3a:	429a      	cmp	r2, r3
 801ab3c:	d105      	bne.n	801ab4a <tcp_close_shutdown+0xa6>
 801ab3e:	4b45      	ldr	r3, [pc, #276]	@ (801ac54 <tcp_close_shutdown+0x1b0>)
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	68db      	ldr	r3, [r3, #12]
 801ab44:	4a43      	ldr	r2, [pc, #268]	@ (801ac54 <tcp_close_shutdown+0x1b0>)
 801ab46:	6013      	str	r3, [r2, #0]
 801ab48:	e013      	b.n	801ab72 <tcp_close_shutdown+0xce>
 801ab4a:	4b42      	ldr	r3, [pc, #264]	@ (801ac54 <tcp_close_shutdown+0x1b0>)
 801ab4c:	681b      	ldr	r3, [r3, #0]
 801ab4e:	60fb      	str	r3, [r7, #12]
 801ab50:	e00c      	b.n	801ab6c <tcp_close_shutdown+0xc8>
 801ab52:	68fb      	ldr	r3, [r7, #12]
 801ab54:	68db      	ldr	r3, [r3, #12]
 801ab56:	687a      	ldr	r2, [r7, #4]
 801ab58:	429a      	cmp	r2, r3
 801ab5a:	d104      	bne.n	801ab66 <tcp_close_shutdown+0xc2>
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	68da      	ldr	r2, [r3, #12]
 801ab60:	68fb      	ldr	r3, [r7, #12]
 801ab62:	60da      	str	r2, [r3, #12]
 801ab64:	e005      	b.n	801ab72 <tcp_close_shutdown+0xce>
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	68db      	ldr	r3, [r3, #12]
 801ab6a:	60fb      	str	r3, [r7, #12]
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d1ef      	bne.n	801ab52 <tcp_close_shutdown+0xae>
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	2200      	movs	r2, #0
 801ab76:	60da      	str	r2, [r3, #12]
 801ab78:	4b37      	ldr	r3, [pc, #220]	@ (801ac58 <tcp_close_shutdown+0x1b4>)
 801ab7a:	2201      	movs	r2, #1
 801ab7c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801ab7e:	4b37      	ldr	r3, [pc, #220]	@ (801ac5c <tcp_close_shutdown+0x1b8>)
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	687a      	ldr	r2, [r7, #4]
 801ab84:	429a      	cmp	r2, r3
 801ab86:	d102      	bne.n	801ab8e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801ab88:	f003 ff64 	bl	801ea54 <tcp_trigger_input_pcb_close>
 801ab8c:	e002      	b.n	801ab94 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801ab8e:	6878      	ldr	r0, [r7, #4]
 801ab90:	f7ff fed6 	bl	801a940 <tcp_free>
      }
      return ERR_OK;
 801ab94:	2300      	movs	r3, #0
 801ab96:	e050      	b.n	801ac3a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	7d1b      	ldrb	r3, [r3, #20]
 801ab9c:	2b02      	cmp	r3, #2
 801ab9e:	d03b      	beq.n	801ac18 <tcp_close_shutdown+0x174>
 801aba0:	2b02      	cmp	r3, #2
 801aba2:	dc44      	bgt.n	801ac2e <tcp_close_shutdown+0x18a>
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d002      	beq.n	801abae <tcp_close_shutdown+0x10a>
 801aba8:	2b01      	cmp	r3, #1
 801abaa:	d02a      	beq.n	801ac02 <tcp_close_shutdown+0x15e>
 801abac:	e03f      	b.n	801ac2e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	8adb      	ldrh	r3, [r3, #22]
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	d021      	beq.n	801abfa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801abb6:	4b2a      	ldr	r3, [pc, #168]	@ (801ac60 <tcp_close_shutdown+0x1bc>)
 801abb8:	681b      	ldr	r3, [r3, #0]
 801abba:	687a      	ldr	r2, [r7, #4]
 801abbc:	429a      	cmp	r2, r3
 801abbe:	d105      	bne.n	801abcc <tcp_close_shutdown+0x128>
 801abc0:	4b27      	ldr	r3, [pc, #156]	@ (801ac60 <tcp_close_shutdown+0x1bc>)
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	68db      	ldr	r3, [r3, #12]
 801abc6:	4a26      	ldr	r2, [pc, #152]	@ (801ac60 <tcp_close_shutdown+0x1bc>)
 801abc8:	6013      	str	r3, [r2, #0]
 801abca:	e013      	b.n	801abf4 <tcp_close_shutdown+0x150>
 801abcc:	4b24      	ldr	r3, [pc, #144]	@ (801ac60 <tcp_close_shutdown+0x1bc>)
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	60bb      	str	r3, [r7, #8]
 801abd2:	e00c      	b.n	801abee <tcp_close_shutdown+0x14a>
 801abd4:	68bb      	ldr	r3, [r7, #8]
 801abd6:	68db      	ldr	r3, [r3, #12]
 801abd8:	687a      	ldr	r2, [r7, #4]
 801abda:	429a      	cmp	r2, r3
 801abdc:	d104      	bne.n	801abe8 <tcp_close_shutdown+0x144>
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	68da      	ldr	r2, [r3, #12]
 801abe2:	68bb      	ldr	r3, [r7, #8]
 801abe4:	60da      	str	r2, [r3, #12]
 801abe6:	e005      	b.n	801abf4 <tcp_close_shutdown+0x150>
 801abe8:	68bb      	ldr	r3, [r7, #8]
 801abea:	68db      	ldr	r3, [r3, #12]
 801abec:	60bb      	str	r3, [r7, #8]
 801abee:	68bb      	ldr	r3, [r7, #8]
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d1ef      	bne.n	801abd4 <tcp_close_shutdown+0x130>
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	2200      	movs	r2, #0
 801abf8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801abfa:	6878      	ldr	r0, [r7, #4]
 801abfc:	f7ff fea0 	bl	801a940 <tcp_free>
      break;
 801ac00:	e01a      	b.n	801ac38 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801ac02:	6878      	ldr	r0, [r7, #4]
 801ac04:	f7ff ff14 	bl	801aa30 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801ac08:	6879      	ldr	r1, [r7, #4]
 801ac0a:	4816      	ldr	r0, [pc, #88]	@ (801ac64 <tcp_close_shutdown+0x1c0>)
 801ac0c:	f001 fab2 	bl	801c174 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801ac10:	6878      	ldr	r0, [r7, #4]
 801ac12:	f7ff feb1 	bl	801a978 <tcp_free_listen>
      break;
 801ac16:	e00f      	b.n	801ac38 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801ac18:	6879      	ldr	r1, [r7, #4]
 801ac1a:	480e      	ldr	r0, [pc, #56]	@ (801ac54 <tcp_close_shutdown+0x1b0>)
 801ac1c:	f001 faaa 	bl	801c174 <tcp_pcb_remove>
 801ac20:	4b0d      	ldr	r3, [pc, #52]	@ (801ac58 <tcp_close_shutdown+0x1b4>)
 801ac22:	2201      	movs	r2, #1
 801ac24:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801ac26:	6878      	ldr	r0, [r7, #4]
 801ac28:	f7ff fe8a 	bl	801a940 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801ac2c:	e004      	b.n	801ac38 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801ac2e:	6878      	ldr	r0, [r7, #4]
 801ac30:	f000 f81a 	bl	801ac68 <tcp_close_shutdown_fin>
 801ac34:	4603      	mov	r3, r0
 801ac36:	e000      	b.n	801ac3a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801ac38:	2300      	movs	r3, #0
}
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	3710      	adds	r7, #16
 801ac3e:	46bd      	mov	sp, r7
 801ac40:	bdb0      	pop	{r4, r5, r7, pc}
 801ac42:	bf00      	nop
 801ac44:	0802ade4 	.word	0x0802ade4
 801ac48:	0802aeb8 	.word	0x0802aeb8
 801ac4c:	0802ae28 	.word	0x0802ae28
 801ac50:	0802aed8 	.word	0x0802aed8
 801ac54:	2400be58 	.word	0x2400be58
 801ac58:	2400be60 	.word	0x2400be60
 801ac5c:	2400be98 	.word	0x2400be98
 801ac60:	2400be50 	.word	0x2400be50
 801ac64:	2400be54 	.word	0x2400be54

0801ac68 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801ac68:	b580      	push	{r7, lr}
 801ac6a:	b084      	sub	sp, #16
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d106      	bne.n	801ac84 <tcp_close_shutdown_fin+0x1c>
 801ac76:	4b2e      	ldr	r3, [pc, #184]	@ (801ad30 <tcp_close_shutdown_fin+0xc8>)
 801ac78:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801ac7c:	492d      	ldr	r1, [pc, #180]	@ (801ad34 <tcp_close_shutdown_fin+0xcc>)
 801ac7e:	482e      	ldr	r0, [pc, #184]	@ (801ad38 <tcp_close_shutdown_fin+0xd0>)
 801ac80:	f00a faf0 	bl	8025264 <iprintf>

  switch (pcb->state) {
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	7d1b      	ldrb	r3, [r3, #20]
 801ac88:	2b07      	cmp	r3, #7
 801ac8a:	d020      	beq.n	801acce <tcp_close_shutdown_fin+0x66>
 801ac8c:	2b07      	cmp	r3, #7
 801ac8e:	dc2b      	bgt.n	801ace8 <tcp_close_shutdown_fin+0x80>
 801ac90:	2b03      	cmp	r3, #3
 801ac92:	d002      	beq.n	801ac9a <tcp_close_shutdown_fin+0x32>
 801ac94:	2b04      	cmp	r3, #4
 801ac96:	d00d      	beq.n	801acb4 <tcp_close_shutdown_fin+0x4c>
 801ac98:	e026      	b.n	801ace8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801ac9a:	6878      	ldr	r0, [r7, #4]
 801ac9c:	f004 fd42 	bl	801f724 <tcp_send_fin>
 801aca0:	4603      	mov	r3, r0
 801aca2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801aca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d11f      	bne.n	801acec <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	2205      	movs	r2, #5
 801acb0:	751a      	strb	r2, [r3, #20]
      }
      break;
 801acb2:	e01b      	b.n	801acec <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801acb4:	6878      	ldr	r0, [r7, #4]
 801acb6:	f004 fd35 	bl	801f724 <tcp_send_fin>
 801acba:	4603      	mov	r3, r0
 801acbc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801acbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d114      	bne.n	801acf0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	2205      	movs	r2, #5
 801acca:	751a      	strb	r2, [r3, #20]
      }
      break;
 801accc:	e010      	b.n	801acf0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801acce:	6878      	ldr	r0, [r7, #4]
 801acd0:	f004 fd28 	bl	801f724 <tcp_send_fin>
 801acd4:	4603      	mov	r3, r0
 801acd6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801acd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d109      	bne.n	801acf4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	2209      	movs	r2, #9
 801ace4:	751a      	strb	r2, [r3, #20]
      }
      break;
 801ace6:	e005      	b.n	801acf4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801ace8:	2300      	movs	r3, #0
 801acea:	e01c      	b.n	801ad26 <tcp_close_shutdown_fin+0xbe>
      break;
 801acec:	bf00      	nop
 801acee:	e002      	b.n	801acf6 <tcp_close_shutdown_fin+0x8e>
      break;
 801acf0:	bf00      	nop
 801acf2:	e000      	b.n	801acf6 <tcp_close_shutdown_fin+0x8e>
      break;
 801acf4:	bf00      	nop
  }

  if (err == ERR_OK) {
 801acf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d103      	bne.n	801ad06 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801acfe:	6878      	ldr	r0, [r7, #4]
 801ad00:	f004 fe4e 	bl	801f9a0 <tcp_output>
 801ad04:	e00d      	b.n	801ad22 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801ad06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad0e:	d108      	bne.n	801ad22 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	8b5b      	ldrh	r3, [r3, #26]
 801ad14:	f043 0308 	orr.w	r3, r3, #8
 801ad18:	b29a      	uxth	r2, r3
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801ad1e:	2300      	movs	r3, #0
 801ad20:	e001      	b.n	801ad26 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801ad22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ad26:	4618      	mov	r0, r3
 801ad28:	3710      	adds	r7, #16
 801ad2a:	46bd      	mov	sp, r7
 801ad2c:	bd80      	pop	{r7, pc}
 801ad2e:	bf00      	nop
 801ad30:	0802ade4 	.word	0x0802ade4
 801ad34:	0802ae94 	.word	0x0802ae94
 801ad38:	0802ae28 	.word	0x0802ae28

0801ad3c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801ad3c:	b580      	push	{r7, lr}
 801ad3e:	b082      	sub	sp, #8
 801ad40:	af00      	add	r7, sp, #0
 801ad42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	d109      	bne.n	801ad5e <tcp_close+0x22>
 801ad4a:	4b0f      	ldr	r3, [pc, #60]	@ (801ad88 <tcp_close+0x4c>)
 801ad4c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 801ad50:	490e      	ldr	r1, [pc, #56]	@ (801ad8c <tcp_close+0x50>)
 801ad52:	480f      	ldr	r0, [pc, #60]	@ (801ad90 <tcp_close+0x54>)
 801ad54:	f00a fa86 	bl	8025264 <iprintf>
 801ad58:	f06f 030f 	mvn.w	r3, #15
 801ad5c:	e00f      	b.n	801ad7e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	7d1b      	ldrb	r3, [r3, #20]
 801ad62:	2b01      	cmp	r3, #1
 801ad64:	d006      	beq.n	801ad74 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	8b5b      	ldrh	r3, [r3, #26]
 801ad6a:	f043 0310 	orr.w	r3, r3, #16
 801ad6e:	b29a      	uxth	r2, r3
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801ad74:	2101      	movs	r1, #1
 801ad76:	6878      	ldr	r0, [r7, #4]
 801ad78:	f7ff fe94 	bl	801aaa4 <tcp_close_shutdown>
 801ad7c:	4603      	mov	r3, r0
}
 801ad7e:	4618      	mov	r0, r3
 801ad80:	3708      	adds	r7, #8
 801ad82:	46bd      	mov	sp, r7
 801ad84:	bd80      	pop	{r7, pc}
 801ad86:	bf00      	nop
 801ad88:	0802ade4 	.word	0x0802ade4
 801ad8c:	0802aef4 	.word	0x0802aef4
 801ad90:	0802ae28 	.word	0x0802ae28

0801ad94 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801ad94:	b580      	push	{r7, lr}
 801ad96:	b084      	sub	sp, #16
 801ad98:	af00      	add	r7, sp, #0
 801ad9a:	60f8      	str	r0, [r7, #12]
 801ad9c:	60b9      	str	r1, [r7, #8]
 801ad9e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801ada0:	68fb      	ldr	r3, [r7, #12]
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d109      	bne.n	801adba <tcp_shutdown+0x26>
 801ada6:	4b26      	ldr	r3, [pc, #152]	@ (801ae40 <tcp_shutdown+0xac>)
 801ada8:	f240 2207 	movw	r2, #519	@ 0x207
 801adac:	4925      	ldr	r1, [pc, #148]	@ (801ae44 <tcp_shutdown+0xb0>)
 801adae:	4826      	ldr	r0, [pc, #152]	@ (801ae48 <tcp_shutdown+0xb4>)
 801adb0:	f00a fa58 	bl	8025264 <iprintf>
 801adb4:	f06f 030f 	mvn.w	r3, #15
 801adb8:	e03d      	b.n	801ae36 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801adba:	68fb      	ldr	r3, [r7, #12]
 801adbc:	7d1b      	ldrb	r3, [r3, #20]
 801adbe:	2b01      	cmp	r3, #1
 801adc0:	d102      	bne.n	801adc8 <tcp_shutdown+0x34>
    return ERR_CONN;
 801adc2:	f06f 030a 	mvn.w	r3, #10
 801adc6:	e036      	b.n	801ae36 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 801adc8:	68bb      	ldr	r3, [r7, #8]
 801adca:	2b00      	cmp	r3, #0
 801adcc:	d01b      	beq.n	801ae06 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801adce:	68fb      	ldr	r3, [r7, #12]
 801add0:	8b5b      	ldrh	r3, [r3, #26]
 801add2:	f043 0310 	orr.w	r3, r3, #16
 801add6:	b29a      	uxth	r2, r3
 801add8:	68fb      	ldr	r3, [r7, #12]
 801adda:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d005      	beq.n	801adee <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801ade2:	2101      	movs	r1, #1
 801ade4:	68f8      	ldr	r0, [r7, #12]
 801ade6:	f7ff fe5d 	bl	801aaa4 <tcp_close_shutdown>
 801adea:	4603      	mov	r3, r0
 801adec:	e023      	b.n	801ae36 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801adee:	68fb      	ldr	r3, [r7, #12]
 801adf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d007      	beq.n	801ae06 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801adf6:	68fb      	ldr	r3, [r7, #12]
 801adf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801adfa:	4618      	mov	r0, r3
 801adfc:	f7ff fae4 	bl	801a3c8 <pbuf_free>
      pcb->refused_data = NULL;
 801ae00:	68fb      	ldr	r3, [r7, #12]
 801ae02:	2200      	movs	r2, #0
 801ae04:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	d013      	beq.n	801ae34 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801ae0c:	68fb      	ldr	r3, [r7, #12]
 801ae0e:	7d1b      	ldrb	r3, [r3, #20]
 801ae10:	2b04      	cmp	r3, #4
 801ae12:	dc02      	bgt.n	801ae1a <tcp_shutdown+0x86>
 801ae14:	2b03      	cmp	r3, #3
 801ae16:	da02      	bge.n	801ae1e <tcp_shutdown+0x8a>
 801ae18:	e009      	b.n	801ae2e <tcp_shutdown+0x9a>
 801ae1a:	2b07      	cmp	r3, #7
 801ae1c:	d107      	bne.n	801ae2e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801ae1e:	68bb      	ldr	r3, [r7, #8]
 801ae20:	b2db      	uxtb	r3, r3
 801ae22:	4619      	mov	r1, r3
 801ae24:	68f8      	ldr	r0, [r7, #12]
 801ae26:	f7ff fe3d 	bl	801aaa4 <tcp_close_shutdown>
 801ae2a:	4603      	mov	r3, r0
 801ae2c:	e003      	b.n	801ae36 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801ae2e:	f06f 030a 	mvn.w	r3, #10
 801ae32:	e000      	b.n	801ae36 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 801ae34:	2300      	movs	r3, #0
}
 801ae36:	4618      	mov	r0, r3
 801ae38:	3710      	adds	r7, #16
 801ae3a:	46bd      	mov	sp, r7
 801ae3c:	bd80      	pop	{r7, pc}
 801ae3e:	bf00      	nop
 801ae40:	0802ade4 	.word	0x0802ade4
 801ae44:	0802af0c 	.word	0x0802af0c
 801ae48:	0802ae28 	.word	0x0802ae28

0801ae4c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801ae4c:	b580      	push	{r7, lr}
 801ae4e:	b08e      	sub	sp, #56	@ 0x38
 801ae50:	af04      	add	r7, sp, #16
 801ae52:	6078      	str	r0, [r7, #4]
 801ae54:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d107      	bne.n	801ae6c <tcp_abandon+0x20>
 801ae5c:	4b52      	ldr	r3, [pc, #328]	@ (801afa8 <tcp_abandon+0x15c>)
 801ae5e:	f240 223d 	movw	r2, #573	@ 0x23d
 801ae62:	4952      	ldr	r1, [pc, #328]	@ (801afac <tcp_abandon+0x160>)
 801ae64:	4852      	ldr	r0, [pc, #328]	@ (801afb0 <tcp_abandon+0x164>)
 801ae66:	f00a f9fd 	bl	8025264 <iprintf>
 801ae6a:	e099      	b.n	801afa0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	7d1b      	ldrb	r3, [r3, #20]
 801ae70:	2b01      	cmp	r3, #1
 801ae72:	d106      	bne.n	801ae82 <tcp_abandon+0x36>
 801ae74:	4b4c      	ldr	r3, [pc, #304]	@ (801afa8 <tcp_abandon+0x15c>)
 801ae76:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801ae7a:	494e      	ldr	r1, [pc, #312]	@ (801afb4 <tcp_abandon+0x168>)
 801ae7c:	484c      	ldr	r0, [pc, #304]	@ (801afb0 <tcp_abandon+0x164>)
 801ae7e:	f00a f9f1 	bl	8025264 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	7d1b      	ldrb	r3, [r3, #20]
 801ae86:	2b0a      	cmp	r3, #10
 801ae88:	d107      	bne.n	801ae9a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801ae8a:	6879      	ldr	r1, [r7, #4]
 801ae8c:	484a      	ldr	r0, [pc, #296]	@ (801afb8 <tcp_abandon+0x16c>)
 801ae8e:	f001 f971 	bl	801c174 <tcp_pcb_remove>
    tcp_free(pcb);
 801ae92:	6878      	ldr	r0, [r7, #4]
 801ae94:	f7ff fd54 	bl	801a940 <tcp_free>
 801ae98:	e082      	b.n	801afa0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801ae9a:	2300      	movs	r3, #0
 801ae9c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801ae9e:	2300      	movs	r3, #0
 801aea0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801aea6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aeac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801aeb4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	691b      	ldr	r3, [r3, #16]
 801aeba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	7d1b      	ldrb	r3, [r3, #20]
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d126      	bne.n	801af12 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	8adb      	ldrh	r3, [r3, #22]
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	d02e      	beq.n	801af2a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801aecc:	4b3b      	ldr	r3, [pc, #236]	@ (801afbc <tcp_abandon+0x170>)
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	687a      	ldr	r2, [r7, #4]
 801aed2:	429a      	cmp	r2, r3
 801aed4:	d105      	bne.n	801aee2 <tcp_abandon+0x96>
 801aed6:	4b39      	ldr	r3, [pc, #228]	@ (801afbc <tcp_abandon+0x170>)
 801aed8:	681b      	ldr	r3, [r3, #0]
 801aeda:	68db      	ldr	r3, [r3, #12]
 801aedc:	4a37      	ldr	r2, [pc, #220]	@ (801afbc <tcp_abandon+0x170>)
 801aede:	6013      	str	r3, [r2, #0]
 801aee0:	e013      	b.n	801af0a <tcp_abandon+0xbe>
 801aee2:	4b36      	ldr	r3, [pc, #216]	@ (801afbc <tcp_abandon+0x170>)
 801aee4:	681b      	ldr	r3, [r3, #0]
 801aee6:	61fb      	str	r3, [r7, #28]
 801aee8:	e00c      	b.n	801af04 <tcp_abandon+0xb8>
 801aeea:	69fb      	ldr	r3, [r7, #28]
 801aeec:	68db      	ldr	r3, [r3, #12]
 801aeee:	687a      	ldr	r2, [r7, #4]
 801aef0:	429a      	cmp	r2, r3
 801aef2:	d104      	bne.n	801aefe <tcp_abandon+0xb2>
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	68da      	ldr	r2, [r3, #12]
 801aef8:	69fb      	ldr	r3, [r7, #28]
 801aefa:	60da      	str	r2, [r3, #12]
 801aefc:	e005      	b.n	801af0a <tcp_abandon+0xbe>
 801aefe:	69fb      	ldr	r3, [r7, #28]
 801af00:	68db      	ldr	r3, [r3, #12]
 801af02:	61fb      	str	r3, [r7, #28]
 801af04:	69fb      	ldr	r3, [r7, #28]
 801af06:	2b00      	cmp	r3, #0
 801af08:	d1ef      	bne.n	801aeea <tcp_abandon+0x9e>
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	2200      	movs	r2, #0
 801af0e:	60da      	str	r2, [r3, #12]
 801af10:	e00b      	b.n	801af2a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801af12:	683b      	ldr	r3, [r7, #0]
 801af14:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	8adb      	ldrh	r3, [r3, #22]
 801af1a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801af1c:	6879      	ldr	r1, [r7, #4]
 801af1e:	4828      	ldr	r0, [pc, #160]	@ (801afc0 <tcp_abandon+0x174>)
 801af20:	f001 f928 	bl	801c174 <tcp_pcb_remove>
 801af24:	4b27      	ldr	r3, [pc, #156]	@ (801afc4 <tcp_abandon+0x178>)
 801af26:	2201      	movs	r2, #1
 801af28:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801af2e:	2b00      	cmp	r3, #0
 801af30:	d004      	beq.n	801af3c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801af36:	4618      	mov	r0, r3
 801af38:	f000 fdfc 	bl	801bb34 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801af40:	2b00      	cmp	r3, #0
 801af42:	d004      	beq.n	801af4e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801af48:	4618      	mov	r0, r3
 801af4a:	f000 fdf3 	bl	801bb34 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801af52:	2b00      	cmp	r3, #0
 801af54:	d004      	beq.n	801af60 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801af5a:	4618      	mov	r0, r3
 801af5c:	f000 fdea 	bl	801bb34 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801af60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af62:	2b00      	cmp	r3, #0
 801af64:	d00e      	beq.n	801af84 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801af66:	6879      	ldr	r1, [r7, #4]
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	3304      	adds	r3, #4
 801af6c:	687a      	ldr	r2, [r7, #4]
 801af6e:	8b12      	ldrh	r2, [r2, #24]
 801af70:	9202      	str	r2, [sp, #8]
 801af72:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801af74:	9201      	str	r2, [sp, #4]
 801af76:	9300      	str	r3, [sp, #0]
 801af78:	460b      	mov	r3, r1
 801af7a:	697a      	ldr	r2, [r7, #20]
 801af7c:	69b9      	ldr	r1, [r7, #24]
 801af7e:	6878      	ldr	r0, [r7, #4]
 801af80:	f005 fac2 	bl	8020508 <tcp_rst>
    }
    last_state = pcb->state;
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	7d1b      	ldrb	r3, [r3, #20]
 801af88:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801af8a:	6878      	ldr	r0, [r7, #4]
 801af8c:	f7ff fcd8 	bl	801a940 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801af90:	693b      	ldr	r3, [r7, #16]
 801af92:	2b00      	cmp	r3, #0
 801af94:	d004      	beq.n	801afa0 <tcp_abandon+0x154>
 801af96:	693b      	ldr	r3, [r7, #16]
 801af98:	f06f 010c 	mvn.w	r1, #12
 801af9c:	68f8      	ldr	r0, [r7, #12]
 801af9e:	4798      	blx	r3
  }
}
 801afa0:	3728      	adds	r7, #40	@ 0x28
 801afa2:	46bd      	mov	sp, r7
 801afa4:	bd80      	pop	{r7, pc}
 801afa6:	bf00      	nop
 801afa8:	0802ade4 	.word	0x0802ade4
 801afac:	0802af28 	.word	0x0802af28
 801afb0:	0802ae28 	.word	0x0802ae28
 801afb4:	0802af44 	.word	0x0802af44
 801afb8:	2400be5c 	.word	0x2400be5c
 801afbc:	2400be50 	.word	0x2400be50
 801afc0:	2400be58 	.word	0x2400be58
 801afc4:	2400be60 	.word	0x2400be60

0801afc8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801afc8:	b580      	push	{r7, lr}
 801afca:	b082      	sub	sp, #8
 801afcc:	af00      	add	r7, sp, #0
 801afce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801afd0:	2101      	movs	r1, #1
 801afd2:	6878      	ldr	r0, [r7, #4]
 801afd4:	f7ff ff3a 	bl	801ae4c <tcp_abandon>
}
 801afd8:	bf00      	nop
 801afda:	3708      	adds	r7, #8
 801afdc:	46bd      	mov	sp, r7
 801afde:	bd80      	pop	{r7, pc}

0801afe0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801afe0:	b580      	push	{r7, lr}
 801afe2:	b088      	sub	sp, #32
 801afe4:	af00      	add	r7, sp, #0
 801afe6:	60f8      	str	r0, [r7, #12]
 801afe8:	60b9      	str	r1, [r7, #8]
 801afea:	4613      	mov	r3, r2
 801afec:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801afee:	2304      	movs	r3, #4
 801aff0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801aff2:	68bb      	ldr	r3, [r7, #8]
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	d101      	bne.n	801affc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801aff8:	4b3e      	ldr	r3, [pc, #248]	@ (801b0f4 <tcp_bind+0x114>)
 801affa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801affc:	68fb      	ldr	r3, [r7, #12]
 801affe:	2b00      	cmp	r3, #0
 801b000:	d109      	bne.n	801b016 <tcp_bind+0x36>
 801b002:	4b3d      	ldr	r3, [pc, #244]	@ (801b0f8 <tcp_bind+0x118>)
 801b004:	f240 22a9 	movw	r2, #681	@ 0x2a9
 801b008:	493c      	ldr	r1, [pc, #240]	@ (801b0fc <tcp_bind+0x11c>)
 801b00a:	483d      	ldr	r0, [pc, #244]	@ (801b100 <tcp_bind+0x120>)
 801b00c:	f00a f92a 	bl	8025264 <iprintf>
 801b010:	f06f 030f 	mvn.w	r3, #15
 801b014:	e06a      	b.n	801b0ec <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801b016:	68fb      	ldr	r3, [r7, #12]
 801b018:	7d1b      	ldrb	r3, [r3, #20]
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d009      	beq.n	801b032 <tcp_bind+0x52>
 801b01e:	4b36      	ldr	r3, [pc, #216]	@ (801b0f8 <tcp_bind+0x118>)
 801b020:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801b024:	4937      	ldr	r1, [pc, #220]	@ (801b104 <tcp_bind+0x124>)
 801b026:	4836      	ldr	r0, [pc, #216]	@ (801b100 <tcp_bind+0x120>)
 801b028:	f00a f91c 	bl	8025264 <iprintf>
 801b02c:	f06f 0305 	mvn.w	r3, #5
 801b030:	e05c      	b.n	801b0ec <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801b032:	88fb      	ldrh	r3, [r7, #6]
 801b034:	2b00      	cmp	r3, #0
 801b036:	d109      	bne.n	801b04c <tcp_bind+0x6c>
    port = tcp_new_port();
 801b038:	f000 f914 	bl	801b264 <tcp_new_port>
 801b03c:	4603      	mov	r3, r0
 801b03e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b040:	88fb      	ldrh	r3, [r7, #6]
 801b042:	2b00      	cmp	r3, #0
 801b044:	d135      	bne.n	801b0b2 <tcp_bind+0xd2>
      return ERR_BUF;
 801b046:	f06f 0301 	mvn.w	r3, #1
 801b04a:	e04f      	b.n	801b0ec <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801b04c:	2300      	movs	r3, #0
 801b04e:	61fb      	str	r3, [r7, #28]
 801b050:	e02b      	b.n	801b0aa <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b052:	4a2d      	ldr	r2, [pc, #180]	@ (801b108 <tcp_bind+0x128>)
 801b054:	69fb      	ldr	r3, [r7, #28]
 801b056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b05a:	681b      	ldr	r3, [r3, #0]
 801b05c:	61bb      	str	r3, [r7, #24]
 801b05e:	e01e      	b.n	801b09e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801b060:	69bb      	ldr	r3, [r7, #24]
 801b062:	8adb      	ldrh	r3, [r3, #22]
 801b064:	88fa      	ldrh	r2, [r7, #6]
 801b066:	429a      	cmp	r2, r3
 801b068:	d116      	bne.n	801b098 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801b06a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	d010      	beq.n	801b092 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801b070:	69bb      	ldr	r3, [r7, #24]
 801b072:	681b      	ldr	r3, [r3, #0]
 801b074:	2b00      	cmp	r3, #0
 801b076:	d00c      	beq.n	801b092 <tcp_bind+0xb2>
 801b078:	68bb      	ldr	r3, [r7, #8]
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	d009      	beq.n	801b092 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801b07e:	68bb      	ldr	r3, [r7, #8]
 801b080:	681b      	ldr	r3, [r3, #0]
 801b082:	2b00      	cmp	r3, #0
 801b084:	d005      	beq.n	801b092 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801b086:	69bb      	ldr	r3, [r7, #24]
 801b088:	681a      	ldr	r2, [r3, #0]
 801b08a:	68bb      	ldr	r3, [r7, #8]
 801b08c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801b08e:	429a      	cmp	r2, r3
 801b090:	d102      	bne.n	801b098 <tcp_bind+0xb8>
              return ERR_USE;
 801b092:	f06f 0307 	mvn.w	r3, #7
 801b096:	e029      	b.n	801b0ec <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b098:	69bb      	ldr	r3, [r7, #24]
 801b09a:	68db      	ldr	r3, [r3, #12]
 801b09c:	61bb      	str	r3, [r7, #24]
 801b09e:	69bb      	ldr	r3, [r7, #24]
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	d1dd      	bne.n	801b060 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801b0a4:	69fb      	ldr	r3, [r7, #28]
 801b0a6:	3301      	adds	r3, #1
 801b0a8:	61fb      	str	r3, [r7, #28]
 801b0aa:	69fa      	ldr	r2, [r7, #28]
 801b0ac:	697b      	ldr	r3, [r7, #20]
 801b0ae:	429a      	cmp	r2, r3
 801b0b0:	dbcf      	blt.n	801b052 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801b0b2:	68bb      	ldr	r3, [r7, #8]
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	d00c      	beq.n	801b0d2 <tcp_bind+0xf2>
 801b0b8:	68bb      	ldr	r3, [r7, #8]
 801b0ba:	681b      	ldr	r3, [r3, #0]
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d008      	beq.n	801b0d2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801b0c0:	68bb      	ldr	r3, [r7, #8]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d002      	beq.n	801b0cc <tcp_bind+0xec>
 801b0c6:	68bb      	ldr	r3, [r7, #8]
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	e000      	b.n	801b0ce <tcp_bind+0xee>
 801b0cc:	2300      	movs	r3, #0
 801b0ce:	68fa      	ldr	r2, [r7, #12]
 801b0d0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	88fa      	ldrh	r2, [r7, #6]
 801b0d6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801b0d8:	4b0c      	ldr	r3, [pc, #48]	@ (801b10c <tcp_bind+0x12c>)
 801b0da:	681a      	ldr	r2, [r3, #0]
 801b0dc:	68fb      	ldr	r3, [r7, #12]
 801b0de:	60da      	str	r2, [r3, #12]
 801b0e0:	4a0a      	ldr	r2, [pc, #40]	@ (801b10c <tcp_bind+0x12c>)
 801b0e2:	68fb      	ldr	r3, [r7, #12]
 801b0e4:	6013      	str	r3, [r2, #0]
 801b0e6:	f005 fbd1 	bl	802088c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801b0ea:	2300      	movs	r3, #0
}
 801b0ec:	4618      	mov	r0, r3
 801b0ee:	3720      	adds	r7, #32
 801b0f0:	46bd      	mov	sp, r7
 801b0f2:	bd80      	pop	{r7, pc}
 801b0f4:	0802cf18 	.word	0x0802cf18
 801b0f8:	0802ade4 	.word	0x0802ade4
 801b0fc:	0802af78 	.word	0x0802af78
 801b100:	0802ae28 	.word	0x0802ae28
 801b104:	0802af90 	.word	0x0802af90
 801b108:	0802cef0 	.word	0x0802cef0
 801b10c:	2400be50 	.word	0x2400be50

0801b110 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801b110:	b580      	push	{r7, lr}
 801b112:	b084      	sub	sp, #16
 801b114:	af00      	add	r7, sp, #0
 801b116:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d106      	bne.n	801b12c <tcp_update_rcv_ann_wnd+0x1c>
 801b11e:	4b25      	ldr	r3, [pc, #148]	@ (801b1b4 <tcp_update_rcv_ann_wnd+0xa4>)
 801b120:	f240 32a6 	movw	r2, #934	@ 0x3a6
 801b124:	4924      	ldr	r1, [pc, #144]	@ (801b1b8 <tcp_update_rcv_ann_wnd+0xa8>)
 801b126:	4825      	ldr	r0, [pc, #148]	@ (801b1bc <tcp_update_rcv_ann_wnd+0xac>)
 801b128:	f00a f89c 	bl	8025264 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b130:	687a      	ldr	r2, [r7, #4]
 801b132:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801b134:	4413      	add	r3, r2
 801b136:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b13c:	687a      	ldr	r2, [r7, #4]
 801b13e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801b140:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 801b144:	bf28      	it	cs
 801b146:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801b14a:	b292      	uxth	r2, r2
 801b14c:	4413      	add	r3, r2
 801b14e:	68fa      	ldr	r2, [r7, #12]
 801b150:	1ad3      	subs	r3, r2, r3
 801b152:	2b00      	cmp	r3, #0
 801b154:	db08      	blt.n	801b168 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b162:	68fa      	ldr	r2, [r7, #12]
 801b164:	1ad3      	subs	r3, r2, r3
 801b166:	e020      	b.n	801b1aa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b170:	1ad3      	subs	r3, r2, r3
 801b172:	2b00      	cmp	r3, #0
 801b174:	dd03      	ble.n	801b17e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	2200      	movs	r2, #0
 801b17a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801b17c:	e014      	b.n	801b1a8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b186:	1ad3      	subs	r3, r2, r3
 801b188:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801b18a:	68bb      	ldr	r3, [r7, #8]
 801b18c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b190:	d306      	bcc.n	801b1a0 <tcp_update_rcv_ann_wnd+0x90>
 801b192:	4b08      	ldr	r3, [pc, #32]	@ (801b1b4 <tcp_update_rcv_ann_wnd+0xa4>)
 801b194:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801b198:	4909      	ldr	r1, [pc, #36]	@ (801b1c0 <tcp_update_rcv_ann_wnd+0xb0>)
 801b19a:	4808      	ldr	r0, [pc, #32]	@ (801b1bc <tcp_update_rcv_ann_wnd+0xac>)
 801b19c:	f00a f862 	bl	8025264 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801b1a0:	68bb      	ldr	r3, [r7, #8]
 801b1a2:	b29a      	uxth	r2, r3
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801b1a8:	2300      	movs	r3, #0
  }
}
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	3710      	adds	r7, #16
 801b1ae:	46bd      	mov	sp, r7
 801b1b0:	bd80      	pop	{r7, pc}
 801b1b2:	bf00      	nop
 801b1b4:	0802ade4 	.word	0x0802ade4
 801b1b8:	0802b040 	.word	0x0802b040
 801b1bc:	0802ae28 	.word	0x0802ae28
 801b1c0:	0802b064 	.word	0x0802b064

0801b1c4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801b1c4:	b580      	push	{r7, lr}
 801b1c6:	b084      	sub	sp, #16
 801b1c8:	af00      	add	r7, sp, #0
 801b1ca:	6078      	str	r0, [r7, #4]
 801b1cc:	460b      	mov	r3, r1
 801b1ce:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d107      	bne.n	801b1e6 <tcp_recved+0x22>
 801b1d6:	4b1f      	ldr	r3, [pc, #124]	@ (801b254 <tcp_recved+0x90>)
 801b1d8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 801b1dc:	491e      	ldr	r1, [pc, #120]	@ (801b258 <tcp_recved+0x94>)
 801b1de:	481f      	ldr	r0, [pc, #124]	@ (801b25c <tcp_recved+0x98>)
 801b1e0:	f00a f840 	bl	8025264 <iprintf>
 801b1e4:	e032      	b.n	801b24c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	7d1b      	ldrb	r3, [r3, #20]
 801b1ea:	2b01      	cmp	r3, #1
 801b1ec:	d106      	bne.n	801b1fc <tcp_recved+0x38>
 801b1ee:	4b19      	ldr	r3, [pc, #100]	@ (801b254 <tcp_recved+0x90>)
 801b1f0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 801b1f4:	491a      	ldr	r1, [pc, #104]	@ (801b260 <tcp_recved+0x9c>)
 801b1f6:	4819      	ldr	r0, [pc, #100]	@ (801b25c <tcp_recved+0x98>)
 801b1f8:	f00a f834 	bl	8025264 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801b200:	887b      	ldrh	r3, [r7, #2]
 801b202:	4413      	add	r3, r2
 801b204:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801b206:	89fb      	ldrh	r3, [r7, #14]
 801b208:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801b20c:	d804      	bhi.n	801b218 <tcp_recved+0x54>
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801b212:	89fa      	ldrh	r2, [r7, #14]
 801b214:	429a      	cmp	r2, r3
 801b216:	d204      	bcs.n	801b222 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801b21e:	851a      	strh	r2, [r3, #40]	@ 0x28
 801b220:	e002      	b.n	801b228 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	89fa      	ldrh	r2, [r7, #14]
 801b226:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801b228:	6878      	ldr	r0, [r7, #4]
 801b22a:	f7ff ff71 	bl	801b110 <tcp_update_rcv_ann_wnd>
 801b22e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801b230:	68bb      	ldr	r3, [r7, #8]
 801b232:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801b236:	d309      	bcc.n	801b24c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	8b5b      	ldrh	r3, [r3, #26]
 801b23c:	f043 0302 	orr.w	r3, r3, #2
 801b240:	b29a      	uxth	r2, r3
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801b246:	6878      	ldr	r0, [r7, #4]
 801b248:	f004 fbaa 	bl	801f9a0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801b24c:	3710      	adds	r7, #16
 801b24e:	46bd      	mov	sp, r7
 801b250:	bd80      	pop	{r7, pc}
 801b252:	bf00      	nop
 801b254:	0802ade4 	.word	0x0802ade4
 801b258:	0802b080 	.word	0x0802b080
 801b25c:	0802ae28 	.word	0x0802ae28
 801b260:	0802b098 	.word	0x0802b098

0801b264 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801b264:	b480      	push	{r7}
 801b266:	b083      	sub	sp, #12
 801b268:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801b26a:	2300      	movs	r3, #0
 801b26c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801b26e:	4b1e      	ldr	r3, [pc, #120]	@ (801b2e8 <tcp_new_port+0x84>)
 801b270:	881b      	ldrh	r3, [r3, #0]
 801b272:	3301      	adds	r3, #1
 801b274:	b29a      	uxth	r2, r3
 801b276:	4b1c      	ldr	r3, [pc, #112]	@ (801b2e8 <tcp_new_port+0x84>)
 801b278:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801b27a:	4b1b      	ldr	r3, [pc, #108]	@ (801b2e8 <tcp_new_port+0x84>)
 801b27c:	881b      	ldrh	r3, [r3, #0]
 801b27e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b282:	4293      	cmp	r3, r2
 801b284:	d103      	bne.n	801b28e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801b286:	4b18      	ldr	r3, [pc, #96]	@ (801b2e8 <tcp_new_port+0x84>)
 801b288:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801b28c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801b28e:	2300      	movs	r3, #0
 801b290:	71fb      	strb	r3, [r7, #7]
 801b292:	e01e      	b.n	801b2d2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801b294:	79fb      	ldrb	r3, [r7, #7]
 801b296:	4a15      	ldr	r2, [pc, #84]	@ (801b2ec <tcp_new_port+0x88>)
 801b298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	603b      	str	r3, [r7, #0]
 801b2a0:	e011      	b.n	801b2c6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801b2a2:	683b      	ldr	r3, [r7, #0]
 801b2a4:	8ada      	ldrh	r2, [r3, #22]
 801b2a6:	4b10      	ldr	r3, [pc, #64]	@ (801b2e8 <tcp_new_port+0x84>)
 801b2a8:	881b      	ldrh	r3, [r3, #0]
 801b2aa:	429a      	cmp	r2, r3
 801b2ac:	d108      	bne.n	801b2c0 <tcp_new_port+0x5c>
        n++;
 801b2ae:	88bb      	ldrh	r3, [r7, #4]
 801b2b0:	3301      	adds	r3, #1
 801b2b2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801b2b4:	88bb      	ldrh	r3, [r7, #4]
 801b2b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b2ba:	d3d8      	bcc.n	801b26e <tcp_new_port+0xa>
          return 0;
 801b2bc:	2300      	movs	r3, #0
 801b2be:	e00d      	b.n	801b2dc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801b2c0:	683b      	ldr	r3, [r7, #0]
 801b2c2:	68db      	ldr	r3, [r3, #12]
 801b2c4:	603b      	str	r3, [r7, #0]
 801b2c6:	683b      	ldr	r3, [r7, #0]
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d1ea      	bne.n	801b2a2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801b2cc:	79fb      	ldrb	r3, [r7, #7]
 801b2ce:	3301      	adds	r3, #1
 801b2d0:	71fb      	strb	r3, [r7, #7]
 801b2d2:	79fb      	ldrb	r3, [r7, #7]
 801b2d4:	2b03      	cmp	r3, #3
 801b2d6:	d9dd      	bls.n	801b294 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801b2d8:	4b03      	ldr	r3, [pc, #12]	@ (801b2e8 <tcp_new_port+0x84>)
 801b2da:	881b      	ldrh	r3, [r3, #0]
}
 801b2dc:	4618      	mov	r0, r3
 801b2de:	370c      	adds	r7, #12
 801b2e0:	46bd      	mov	sp, r7
 801b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2e6:	4770      	bx	lr
 801b2e8:	24000204 	.word	0x24000204
 801b2ec:	0802cef0 	.word	0x0802cef0

0801b2f0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801b2f0:	b5b0      	push	{r4, r5, r7, lr}
 801b2f2:	b090      	sub	sp, #64	@ 0x40
 801b2f4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801b2f6:	2300      	movs	r3, #0
 801b2f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801b2fc:	4b95      	ldr	r3, [pc, #596]	@ (801b554 <tcp_slowtmr+0x264>)
 801b2fe:	681b      	ldr	r3, [r3, #0]
 801b300:	3301      	adds	r3, #1
 801b302:	4a94      	ldr	r2, [pc, #592]	@ (801b554 <tcp_slowtmr+0x264>)
 801b304:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801b306:	4b94      	ldr	r3, [pc, #592]	@ (801b558 <tcp_slowtmr+0x268>)
 801b308:	781b      	ldrb	r3, [r3, #0]
 801b30a:	3301      	adds	r3, #1
 801b30c:	b2da      	uxtb	r2, r3
 801b30e:	4b92      	ldr	r3, [pc, #584]	@ (801b558 <tcp_slowtmr+0x268>)
 801b310:	701a      	strb	r2, [r3, #0]
 801b312:	e000      	b.n	801b316 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 801b314:	bf00      	nop
  prev = NULL;
 801b316:	2300      	movs	r3, #0
 801b318:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801b31a:	4b90      	ldr	r3, [pc, #576]	@ (801b55c <tcp_slowtmr+0x26c>)
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801b320:	e29d      	b.n	801b85e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801b322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b324:	7d1b      	ldrb	r3, [r3, #20]
 801b326:	2b00      	cmp	r3, #0
 801b328:	d106      	bne.n	801b338 <tcp_slowtmr+0x48>
 801b32a:	4b8d      	ldr	r3, [pc, #564]	@ (801b560 <tcp_slowtmr+0x270>)
 801b32c:	f240 42be 	movw	r2, #1214	@ 0x4be
 801b330:	498c      	ldr	r1, [pc, #560]	@ (801b564 <tcp_slowtmr+0x274>)
 801b332:	488d      	ldr	r0, [pc, #564]	@ (801b568 <tcp_slowtmr+0x278>)
 801b334:	f009 ff96 	bl	8025264 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801b338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b33a:	7d1b      	ldrb	r3, [r3, #20]
 801b33c:	2b01      	cmp	r3, #1
 801b33e:	d106      	bne.n	801b34e <tcp_slowtmr+0x5e>
 801b340:	4b87      	ldr	r3, [pc, #540]	@ (801b560 <tcp_slowtmr+0x270>)
 801b342:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801b346:	4989      	ldr	r1, [pc, #548]	@ (801b56c <tcp_slowtmr+0x27c>)
 801b348:	4887      	ldr	r0, [pc, #540]	@ (801b568 <tcp_slowtmr+0x278>)
 801b34a:	f009 ff8b 	bl	8025264 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801b34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b350:	7d1b      	ldrb	r3, [r3, #20]
 801b352:	2b0a      	cmp	r3, #10
 801b354:	d106      	bne.n	801b364 <tcp_slowtmr+0x74>
 801b356:	4b82      	ldr	r3, [pc, #520]	@ (801b560 <tcp_slowtmr+0x270>)
 801b358:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801b35c:	4984      	ldr	r1, [pc, #528]	@ (801b570 <tcp_slowtmr+0x280>)
 801b35e:	4882      	ldr	r0, [pc, #520]	@ (801b568 <tcp_slowtmr+0x278>)
 801b360:	f009 ff80 	bl	8025264 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801b364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b366:	7f9a      	ldrb	r2, [r3, #30]
 801b368:	4b7b      	ldr	r3, [pc, #492]	@ (801b558 <tcp_slowtmr+0x268>)
 801b36a:	781b      	ldrb	r3, [r3, #0]
 801b36c:	429a      	cmp	r2, r3
 801b36e:	d105      	bne.n	801b37c <tcp_slowtmr+0x8c>
      prev = pcb;
 801b370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b372:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801b374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b376:	68db      	ldr	r3, [r3, #12]
 801b378:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801b37a:	e270      	b.n	801b85e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801b37c:	4b76      	ldr	r3, [pc, #472]	@ (801b558 <tcp_slowtmr+0x268>)
 801b37e:	781a      	ldrb	r2, [r3, #0]
 801b380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b382:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 801b384:	2300      	movs	r3, #0
 801b386:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801b38a:	2300      	movs	r3, #0
 801b38c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801b390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b392:	7d1b      	ldrb	r3, [r3, #20]
 801b394:	2b02      	cmp	r3, #2
 801b396:	d10a      	bne.n	801b3ae <tcp_slowtmr+0xbe>
 801b398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b39a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b39e:	2b05      	cmp	r3, #5
 801b3a0:	d905      	bls.n	801b3ae <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801b3a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b3a6:	3301      	adds	r3, #1
 801b3a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b3ac:	e11e      	b.n	801b5ec <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801b3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b3b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b3b4:	2b0b      	cmp	r3, #11
 801b3b6:	d905      	bls.n	801b3c4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 801b3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b3bc:	3301      	adds	r3, #1
 801b3be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b3c2:	e113      	b.n	801b5ec <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 801b3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b3c6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	d075      	beq.n	801b4ba <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801b3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b3d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	d006      	beq.n	801b3e4 <tcp_slowtmr+0xf4>
 801b3d6:	4b62      	ldr	r3, [pc, #392]	@ (801b560 <tcp_slowtmr+0x270>)
 801b3d8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801b3dc:	4965      	ldr	r1, [pc, #404]	@ (801b574 <tcp_slowtmr+0x284>)
 801b3de:	4862      	ldr	r0, [pc, #392]	@ (801b568 <tcp_slowtmr+0x278>)
 801b3e0:	f009 ff40 	bl	8025264 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801b3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b3e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	d106      	bne.n	801b3fa <tcp_slowtmr+0x10a>
 801b3ec:	4b5c      	ldr	r3, [pc, #368]	@ (801b560 <tcp_slowtmr+0x270>)
 801b3ee:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 801b3f2:	4961      	ldr	r1, [pc, #388]	@ (801b578 <tcp_slowtmr+0x288>)
 801b3f4:	485c      	ldr	r0, [pc, #368]	@ (801b568 <tcp_slowtmr+0x278>)
 801b3f6:	f009 ff35 	bl	8025264 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801b3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b3fc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b400:	2b0b      	cmp	r3, #11
 801b402:	d905      	bls.n	801b410 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 801b404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b408:	3301      	adds	r3, #1
 801b40a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b40e:	e0ed      	b.n	801b5ec <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801b410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b412:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801b416:	3b01      	subs	r3, #1
 801b418:	4a58      	ldr	r2, [pc, #352]	@ (801b57c <tcp_slowtmr+0x28c>)
 801b41a:	5cd3      	ldrb	r3, [r2, r3]
 801b41c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801b41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b420:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801b424:	7c7a      	ldrb	r2, [r7, #17]
 801b426:	429a      	cmp	r2, r3
 801b428:	d907      	bls.n	801b43a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801b42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b42c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801b430:	3301      	adds	r3, #1
 801b432:	b2da      	uxtb	r2, r3
 801b434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b436:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801b43a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b43c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801b440:	7c7a      	ldrb	r2, [r7, #17]
 801b442:	429a      	cmp	r2, r3
 801b444:	f200 80d2 	bhi.w	801b5ec <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801b448:	2301      	movs	r3, #1
 801b44a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801b44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b44e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b452:	2b00      	cmp	r3, #0
 801b454:	d108      	bne.n	801b468 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801b456:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b458:	f005 f94a 	bl	80206f0 <tcp_zero_window_probe>
 801b45c:	4603      	mov	r3, r0
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d014      	beq.n	801b48c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801b462:	2300      	movs	r3, #0
 801b464:	623b      	str	r3, [r7, #32]
 801b466:	e011      	b.n	801b48c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801b468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b46a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b46e:	4619      	mov	r1, r3
 801b470:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b472:	f004 f80f 	bl	801f494 <tcp_split_unsent_seg>
 801b476:	4603      	mov	r3, r0
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d107      	bne.n	801b48c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801b47c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b47e:	f004 fa8f 	bl	801f9a0 <tcp_output>
 801b482:	4603      	mov	r3, r0
 801b484:	2b00      	cmp	r3, #0
 801b486:	d101      	bne.n	801b48c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801b488:	2300      	movs	r3, #0
 801b48a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801b48c:	6a3b      	ldr	r3, [r7, #32]
 801b48e:	2b00      	cmp	r3, #0
 801b490:	f000 80ac 	beq.w	801b5ec <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 801b494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b496:	2200      	movs	r2, #0
 801b498:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801b49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b49e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801b4a2:	2b06      	cmp	r3, #6
 801b4a4:	f200 80a2 	bhi.w	801b5ec <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801b4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4aa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801b4ae:	3301      	adds	r3, #1
 801b4b0:	b2da      	uxtb	r2, r3
 801b4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4b4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 801b4b8:	e098      	b.n	801b5ec <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801b4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801b4c0:	2b00      	cmp	r3, #0
 801b4c2:	db0f      	blt.n	801b4e4 <tcp_slowtmr+0x1f4>
 801b4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801b4ca:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801b4ce:	4293      	cmp	r3, r2
 801b4d0:	d008      	beq.n	801b4e4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801b4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801b4d8:	b29b      	uxth	r3, r3
 801b4da:	3301      	adds	r3, #1
 801b4dc:	b29b      	uxth	r3, r3
 801b4de:	b21a      	sxth	r2, r3
 801b4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4e2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 801b4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4e6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801b4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4ec:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801b4f0:	429a      	cmp	r2, r3
 801b4f2:	db7b      	blt.n	801b5ec <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801b4f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b4f6:	f004 fd47 	bl	801ff88 <tcp_rexmit_rto_prepare>
 801b4fa:	4603      	mov	r3, r0
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d007      	beq.n	801b510 <tcp_slowtmr+0x220>
 801b500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b504:	2b00      	cmp	r3, #0
 801b506:	d171      	bne.n	801b5ec <tcp_slowtmr+0x2fc>
 801b508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b50a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d06d      	beq.n	801b5ec <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 801b510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b512:	7d1b      	ldrb	r3, [r3, #20]
 801b514:	2b02      	cmp	r3, #2
 801b516:	d03a      	beq.n	801b58e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801b518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b51a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b51e:	2b0c      	cmp	r3, #12
 801b520:	bf28      	it	cs
 801b522:	230c      	movcs	r3, #12
 801b524:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801b526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b528:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801b52c:	10db      	asrs	r3, r3, #3
 801b52e:	b21b      	sxth	r3, r3
 801b530:	461a      	mov	r2, r3
 801b532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b534:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801b538:	4413      	add	r3, r2
 801b53a:	7efa      	ldrb	r2, [r7, #27]
 801b53c:	4910      	ldr	r1, [pc, #64]	@ (801b580 <tcp_slowtmr+0x290>)
 801b53e:	5c8a      	ldrb	r2, [r1, r2]
 801b540:	4093      	lsls	r3, r2
 801b542:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801b544:	697b      	ldr	r3, [r7, #20]
 801b546:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801b54a:	4293      	cmp	r3, r2
 801b54c:	dc1a      	bgt.n	801b584 <tcp_slowtmr+0x294>
 801b54e:	697b      	ldr	r3, [r7, #20]
 801b550:	b21a      	sxth	r2, r3
 801b552:	e019      	b.n	801b588 <tcp_slowtmr+0x298>
 801b554:	2400be4c 	.word	0x2400be4c
 801b558:	2400be62 	.word	0x2400be62
 801b55c:	2400be58 	.word	0x2400be58
 801b560:	0802ade4 	.word	0x0802ade4
 801b564:	0802b128 	.word	0x0802b128
 801b568:	0802ae28 	.word	0x0802ae28
 801b56c:	0802b154 	.word	0x0802b154
 801b570:	0802b180 	.word	0x0802b180
 801b574:	0802b1b0 	.word	0x0802b1b0
 801b578:	0802b1e4 	.word	0x0802b1e4
 801b57c:	0802cee8 	.word	0x0802cee8
 801b580:	0802ced8 	.word	0x0802ced8
 801b584:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801b588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b58a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801b58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b590:	2200      	movs	r2, #0
 801b592:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801b594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b596:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801b59a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b59c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801b5a0:	4293      	cmp	r3, r2
 801b5a2:	bf28      	it	cs
 801b5a4:	4613      	movcs	r3, r2
 801b5a6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801b5a8:	8a7b      	ldrh	r3, [r7, #18]
 801b5aa:	085b      	lsrs	r3, r3, #1
 801b5ac:	b29a      	uxth	r2, r3
 801b5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5b0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801b5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801b5ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b5be:	005b      	lsls	r3, r3, #1
 801b5c0:	b29b      	uxth	r3, r3
 801b5c2:	429a      	cmp	r2, r3
 801b5c4:	d206      	bcs.n	801b5d4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801b5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b5ca:	005b      	lsls	r3, r3, #1
 801b5cc:	b29a      	uxth	r2, r3
 801b5ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5d0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 801b5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5d6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801b5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5da:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801b5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5e0:	2200      	movs	r2, #0
 801b5e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801b5e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b5e8:	f004 fd3e 	bl	8020068 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801b5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5ee:	7d1b      	ldrb	r3, [r3, #20]
 801b5f0:	2b06      	cmp	r3, #6
 801b5f2:	d111      	bne.n	801b618 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 801b5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5f6:	8b5b      	ldrh	r3, [r3, #26]
 801b5f8:	f003 0310 	and.w	r3, r3, #16
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d00b      	beq.n	801b618 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b600:	4b9c      	ldr	r3, [pc, #624]	@ (801b874 <tcp_slowtmr+0x584>)
 801b602:	681a      	ldr	r2, [r3, #0]
 801b604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b606:	6a1b      	ldr	r3, [r3, #32]
 801b608:	1ad3      	subs	r3, r2, r3
 801b60a:	2b28      	cmp	r3, #40	@ 0x28
 801b60c:	d904      	bls.n	801b618 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801b60e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b612:	3301      	adds	r3, #1
 801b614:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801b618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b61a:	7a5b      	ldrb	r3, [r3, #9]
 801b61c:	f003 0308 	and.w	r3, r3, #8
 801b620:	2b00      	cmp	r3, #0
 801b622:	d04a      	beq.n	801b6ba <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801b624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b626:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801b628:	2b04      	cmp	r3, #4
 801b62a:	d003      	beq.n	801b634 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801b62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b62e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801b630:	2b07      	cmp	r3, #7
 801b632:	d142      	bne.n	801b6ba <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b634:	4b8f      	ldr	r3, [pc, #572]	@ (801b874 <tcp_slowtmr+0x584>)
 801b636:	681a      	ldr	r2, [r3, #0]
 801b638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b63a:	6a1b      	ldr	r3, [r3, #32]
 801b63c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801b63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b640:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801b644:	4b8c      	ldr	r3, [pc, #560]	@ (801b878 <tcp_slowtmr+0x588>)
 801b646:	440b      	add	r3, r1
 801b648:	498c      	ldr	r1, [pc, #560]	@ (801b87c <tcp_slowtmr+0x58c>)
 801b64a:	fba1 1303 	umull	r1, r3, r1, r3
 801b64e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b650:	429a      	cmp	r2, r3
 801b652:	d90a      	bls.n	801b66a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 801b654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b658:	3301      	adds	r3, #1
 801b65a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801b65e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b662:	3301      	adds	r3, #1
 801b664:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801b668:	e027      	b.n	801b6ba <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b66a:	4b82      	ldr	r3, [pc, #520]	@ (801b874 <tcp_slowtmr+0x584>)
 801b66c:	681a      	ldr	r2, [r3, #0]
 801b66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b670:	6a1b      	ldr	r3, [r3, #32]
 801b672:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801b674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b676:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801b67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b67c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801b680:	4618      	mov	r0, r3
 801b682:	4b7f      	ldr	r3, [pc, #508]	@ (801b880 <tcp_slowtmr+0x590>)
 801b684:	fb00 f303 	mul.w	r3, r0, r3
 801b688:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801b68a:	497c      	ldr	r1, [pc, #496]	@ (801b87c <tcp_slowtmr+0x58c>)
 801b68c:	fba1 1303 	umull	r1, r3, r1, r3
 801b690:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b692:	429a      	cmp	r2, r3
 801b694:	d911      	bls.n	801b6ba <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801b696:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b698:	f004 ffea 	bl	8020670 <tcp_keepalive>
 801b69c:	4603      	mov	r3, r0
 801b69e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801b6a2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	d107      	bne.n	801b6ba <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801b6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6ac:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801b6b0:	3301      	adds	r3, #1
 801b6b2:	b2da      	uxtb	r2, r3
 801b6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6b6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801b6ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	d011      	beq.n	801b6e6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801b6c2:	4b6c      	ldr	r3, [pc, #432]	@ (801b874 <tcp_slowtmr+0x584>)
 801b6c4:	681a      	ldr	r2, [r3, #0]
 801b6c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6c8:	6a1b      	ldr	r3, [r3, #32]
 801b6ca:	1ad2      	subs	r2, r2, r3
 801b6cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6ce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801b6d2:	4619      	mov	r1, r3
 801b6d4:	460b      	mov	r3, r1
 801b6d6:	005b      	lsls	r3, r3, #1
 801b6d8:	440b      	add	r3, r1
 801b6da:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801b6dc:	429a      	cmp	r2, r3
 801b6de:	d302      	bcc.n	801b6e6 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 801b6e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b6e2:	f000 feab 	bl	801c43c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801b6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6e8:	7d1b      	ldrb	r3, [r3, #20]
 801b6ea:	2b03      	cmp	r3, #3
 801b6ec:	d10b      	bne.n	801b706 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b6ee:	4b61      	ldr	r3, [pc, #388]	@ (801b874 <tcp_slowtmr+0x584>)
 801b6f0:	681a      	ldr	r2, [r3, #0]
 801b6f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6f4:	6a1b      	ldr	r3, [r3, #32]
 801b6f6:	1ad3      	subs	r3, r2, r3
 801b6f8:	2b28      	cmp	r3, #40	@ 0x28
 801b6fa:	d904      	bls.n	801b706 <tcp_slowtmr+0x416>
        ++pcb_remove;
 801b6fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b700:	3301      	adds	r3, #1
 801b702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801b706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b708:	7d1b      	ldrb	r3, [r3, #20]
 801b70a:	2b09      	cmp	r3, #9
 801b70c:	d10b      	bne.n	801b726 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801b70e:	4b59      	ldr	r3, [pc, #356]	@ (801b874 <tcp_slowtmr+0x584>)
 801b710:	681a      	ldr	r2, [r3, #0]
 801b712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b714:	6a1b      	ldr	r3, [r3, #32]
 801b716:	1ad3      	subs	r3, r2, r3
 801b718:	2bf0      	cmp	r3, #240	@ 0xf0
 801b71a:	d904      	bls.n	801b726 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801b71c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b720:	3301      	adds	r3, #1
 801b722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801b726:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b72a:	2b00      	cmp	r3, #0
 801b72c:	d060      	beq.n	801b7f0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801b72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b734:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801b736:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b738:	f000 fccc 	bl	801c0d4 <tcp_pcb_purge>
      if (prev != NULL) {
 801b73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b73e:	2b00      	cmp	r3, #0
 801b740:	d010      	beq.n	801b764 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801b742:	4b50      	ldr	r3, [pc, #320]	@ (801b884 <tcp_slowtmr+0x594>)
 801b744:	681b      	ldr	r3, [r3, #0]
 801b746:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b748:	429a      	cmp	r2, r3
 801b74a:	d106      	bne.n	801b75a <tcp_slowtmr+0x46a>
 801b74c:	4b4e      	ldr	r3, [pc, #312]	@ (801b888 <tcp_slowtmr+0x598>)
 801b74e:	f240 526d 	movw	r2, #1389	@ 0x56d
 801b752:	494e      	ldr	r1, [pc, #312]	@ (801b88c <tcp_slowtmr+0x59c>)
 801b754:	484e      	ldr	r0, [pc, #312]	@ (801b890 <tcp_slowtmr+0x5a0>)
 801b756:	f009 fd85 	bl	8025264 <iprintf>
        prev->next = pcb->next;
 801b75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b75c:	68da      	ldr	r2, [r3, #12]
 801b75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b760:	60da      	str	r2, [r3, #12]
 801b762:	e00f      	b.n	801b784 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801b764:	4b47      	ldr	r3, [pc, #284]	@ (801b884 <tcp_slowtmr+0x594>)
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b76a:	429a      	cmp	r2, r3
 801b76c:	d006      	beq.n	801b77c <tcp_slowtmr+0x48c>
 801b76e:	4b46      	ldr	r3, [pc, #280]	@ (801b888 <tcp_slowtmr+0x598>)
 801b770:	f240 5271 	movw	r2, #1393	@ 0x571
 801b774:	4947      	ldr	r1, [pc, #284]	@ (801b894 <tcp_slowtmr+0x5a4>)
 801b776:	4846      	ldr	r0, [pc, #280]	@ (801b890 <tcp_slowtmr+0x5a0>)
 801b778:	f009 fd74 	bl	8025264 <iprintf>
        tcp_active_pcbs = pcb->next;
 801b77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b77e:	68db      	ldr	r3, [r3, #12]
 801b780:	4a40      	ldr	r2, [pc, #256]	@ (801b884 <tcp_slowtmr+0x594>)
 801b782:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 801b784:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d013      	beq.n	801b7b4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801b78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b78e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801b790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b792:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801b794:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801b796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b798:	3304      	adds	r3, #4
 801b79a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b79c:	8ad2      	ldrh	r2, [r2, #22]
 801b79e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b7a0:	8b09      	ldrh	r1, [r1, #24]
 801b7a2:	9102      	str	r1, [sp, #8]
 801b7a4:	9201      	str	r2, [sp, #4]
 801b7a6:	9300      	str	r3, [sp, #0]
 801b7a8:	462b      	mov	r3, r5
 801b7aa:	4622      	mov	r2, r4
 801b7ac:	4601      	mov	r1, r0
 801b7ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b7b0:	f004 feaa 	bl	8020508 <tcp_rst>
      err_arg = pcb->callback_arg;
 801b7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7b6:	691b      	ldr	r3, [r3, #16]
 801b7b8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801b7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7bc:	7d1b      	ldrb	r3, [r3, #20]
 801b7be:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801b7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7c2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801b7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7c6:	68db      	ldr	r3, [r3, #12]
 801b7c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801b7ca:	6838      	ldr	r0, [r7, #0]
 801b7cc:	f7ff f8b8 	bl	801a940 <tcp_free>
      tcp_active_pcbs_changed = 0;
 801b7d0:	4b31      	ldr	r3, [pc, #196]	@ (801b898 <tcp_slowtmr+0x5a8>)
 801b7d2:	2200      	movs	r2, #0
 801b7d4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801b7d6:	68fb      	ldr	r3, [r7, #12]
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d004      	beq.n	801b7e6 <tcp_slowtmr+0x4f6>
 801b7dc:	68fb      	ldr	r3, [r7, #12]
 801b7de:	f06f 010c 	mvn.w	r1, #12
 801b7e2:	68b8      	ldr	r0, [r7, #8]
 801b7e4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801b7e6:	4b2c      	ldr	r3, [pc, #176]	@ (801b898 <tcp_slowtmr+0x5a8>)
 801b7e8:	781b      	ldrb	r3, [r3, #0]
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	d037      	beq.n	801b85e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801b7ee:	e592      	b.n	801b316 <tcp_slowtmr+0x26>
      prev = pcb;
 801b7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801b7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7f6:	68db      	ldr	r3, [r3, #12]
 801b7f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801b7fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7fc:	7f1b      	ldrb	r3, [r3, #28]
 801b7fe:	3301      	adds	r3, #1
 801b800:	b2da      	uxtb	r2, r3
 801b802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b804:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801b806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b808:	7f1a      	ldrb	r2, [r3, #28]
 801b80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b80c:	7f5b      	ldrb	r3, [r3, #29]
 801b80e:	429a      	cmp	r2, r3
 801b810:	d325      	bcc.n	801b85e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801b812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b814:	2200      	movs	r2, #0
 801b816:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 801b818:	4b1f      	ldr	r3, [pc, #124]	@ (801b898 <tcp_slowtmr+0x5a8>)
 801b81a:	2200      	movs	r2, #0
 801b81c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801b81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b820:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801b824:	2b00      	cmp	r3, #0
 801b826:	d00b      	beq.n	801b840 <tcp_slowtmr+0x550>
 801b828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b82a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801b82e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b830:	6912      	ldr	r2, [r2, #16]
 801b832:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b834:	4610      	mov	r0, r2
 801b836:	4798      	blx	r3
 801b838:	4603      	mov	r3, r0
 801b83a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801b83e:	e002      	b.n	801b846 <tcp_slowtmr+0x556>
 801b840:	2300      	movs	r3, #0
 801b842:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801b846:	4b14      	ldr	r3, [pc, #80]	@ (801b898 <tcp_slowtmr+0x5a8>)
 801b848:	781b      	ldrb	r3, [r3, #0]
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	f47f ad62 	bne.w	801b314 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801b850:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801b854:	2b00      	cmp	r3, #0
 801b856:	d102      	bne.n	801b85e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801b858:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b85a:	f004 f8a1 	bl	801f9a0 <tcp_output>
  while (pcb != NULL) {
 801b85e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b860:	2b00      	cmp	r3, #0
 801b862:	f47f ad5e 	bne.w	801b322 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801b866:	2300      	movs	r3, #0
 801b868:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801b86a:	4b0c      	ldr	r3, [pc, #48]	@ (801b89c <tcp_slowtmr+0x5ac>)
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801b870:	e069      	b.n	801b946 <tcp_slowtmr+0x656>
 801b872:	bf00      	nop
 801b874:	2400be4c 	.word	0x2400be4c
 801b878:	000a4cb8 	.word	0x000a4cb8
 801b87c:	10624dd3 	.word	0x10624dd3
 801b880:	000124f8 	.word	0x000124f8
 801b884:	2400be58 	.word	0x2400be58
 801b888:	0802ade4 	.word	0x0802ade4
 801b88c:	0802b21c 	.word	0x0802b21c
 801b890:	0802ae28 	.word	0x0802ae28
 801b894:	0802b248 	.word	0x0802b248
 801b898:	2400be60 	.word	0x2400be60
 801b89c:	2400be5c 	.word	0x2400be5c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801b8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8a2:	7d1b      	ldrb	r3, [r3, #20]
 801b8a4:	2b0a      	cmp	r3, #10
 801b8a6:	d006      	beq.n	801b8b6 <tcp_slowtmr+0x5c6>
 801b8a8:	4b2b      	ldr	r3, [pc, #172]	@ (801b958 <tcp_slowtmr+0x668>)
 801b8aa:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801b8ae:	492b      	ldr	r1, [pc, #172]	@ (801b95c <tcp_slowtmr+0x66c>)
 801b8b0:	482b      	ldr	r0, [pc, #172]	@ (801b960 <tcp_slowtmr+0x670>)
 801b8b2:	f009 fcd7 	bl	8025264 <iprintf>
    pcb_remove = 0;
 801b8b6:	2300      	movs	r3, #0
 801b8b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801b8bc:	4b29      	ldr	r3, [pc, #164]	@ (801b964 <tcp_slowtmr+0x674>)
 801b8be:	681a      	ldr	r2, [r3, #0]
 801b8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8c2:	6a1b      	ldr	r3, [r3, #32]
 801b8c4:	1ad3      	subs	r3, r2, r3
 801b8c6:	2bf0      	cmp	r3, #240	@ 0xf0
 801b8c8:	d904      	bls.n	801b8d4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801b8ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b8ce:	3301      	adds	r3, #1
 801b8d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801b8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	d02f      	beq.n	801b93c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801b8dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b8de:	f000 fbf9 	bl	801c0d4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801b8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	d010      	beq.n	801b90a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801b8e8:	4b1f      	ldr	r3, [pc, #124]	@ (801b968 <tcp_slowtmr+0x678>)
 801b8ea:	681b      	ldr	r3, [r3, #0]
 801b8ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b8ee:	429a      	cmp	r2, r3
 801b8f0:	d106      	bne.n	801b900 <tcp_slowtmr+0x610>
 801b8f2:	4b19      	ldr	r3, [pc, #100]	@ (801b958 <tcp_slowtmr+0x668>)
 801b8f4:	f240 52af 	movw	r2, #1455	@ 0x5af
 801b8f8:	491c      	ldr	r1, [pc, #112]	@ (801b96c <tcp_slowtmr+0x67c>)
 801b8fa:	4819      	ldr	r0, [pc, #100]	@ (801b960 <tcp_slowtmr+0x670>)
 801b8fc:	f009 fcb2 	bl	8025264 <iprintf>
        prev->next = pcb->next;
 801b900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b902:	68da      	ldr	r2, [r3, #12]
 801b904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b906:	60da      	str	r2, [r3, #12]
 801b908:	e00f      	b.n	801b92a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801b90a:	4b17      	ldr	r3, [pc, #92]	@ (801b968 <tcp_slowtmr+0x678>)
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b910:	429a      	cmp	r2, r3
 801b912:	d006      	beq.n	801b922 <tcp_slowtmr+0x632>
 801b914:	4b10      	ldr	r3, [pc, #64]	@ (801b958 <tcp_slowtmr+0x668>)
 801b916:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801b91a:	4915      	ldr	r1, [pc, #84]	@ (801b970 <tcp_slowtmr+0x680>)
 801b91c:	4810      	ldr	r0, [pc, #64]	@ (801b960 <tcp_slowtmr+0x670>)
 801b91e:	f009 fca1 	bl	8025264 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801b922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b924:	68db      	ldr	r3, [r3, #12]
 801b926:	4a10      	ldr	r2, [pc, #64]	@ (801b968 <tcp_slowtmr+0x678>)
 801b928:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801b92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b92c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801b92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b930:	68db      	ldr	r3, [r3, #12]
 801b932:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801b934:	69f8      	ldr	r0, [r7, #28]
 801b936:	f7ff f803 	bl	801a940 <tcp_free>
 801b93a:	e004      	b.n	801b946 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 801b93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b93e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801b940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b942:	68db      	ldr	r3, [r3, #12]
 801b944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801b946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b948:	2b00      	cmp	r3, #0
 801b94a:	d1a9      	bne.n	801b8a0 <tcp_slowtmr+0x5b0>
    }
  }
}
 801b94c:	bf00      	nop
 801b94e:	bf00      	nop
 801b950:	3730      	adds	r7, #48	@ 0x30
 801b952:	46bd      	mov	sp, r7
 801b954:	bdb0      	pop	{r4, r5, r7, pc}
 801b956:	bf00      	nop
 801b958:	0802ade4 	.word	0x0802ade4
 801b95c:	0802b274 	.word	0x0802b274
 801b960:	0802ae28 	.word	0x0802ae28
 801b964:	2400be4c 	.word	0x2400be4c
 801b968:	2400be5c 	.word	0x2400be5c
 801b96c:	0802b2a4 	.word	0x0802b2a4
 801b970:	0802b2cc 	.word	0x0802b2cc

0801b974 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801b974:	b580      	push	{r7, lr}
 801b976:	b082      	sub	sp, #8
 801b978:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801b97a:	4b2d      	ldr	r3, [pc, #180]	@ (801ba30 <tcp_fasttmr+0xbc>)
 801b97c:	781b      	ldrb	r3, [r3, #0]
 801b97e:	3301      	adds	r3, #1
 801b980:	b2da      	uxtb	r2, r3
 801b982:	4b2b      	ldr	r3, [pc, #172]	@ (801ba30 <tcp_fasttmr+0xbc>)
 801b984:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801b986:	4b2b      	ldr	r3, [pc, #172]	@ (801ba34 <tcp_fasttmr+0xc0>)
 801b988:	681b      	ldr	r3, [r3, #0]
 801b98a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801b98c:	e048      	b.n	801ba20 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	7f9a      	ldrb	r2, [r3, #30]
 801b992:	4b27      	ldr	r3, [pc, #156]	@ (801ba30 <tcp_fasttmr+0xbc>)
 801b994:	781b      	ldrb	r3, [r3, #0]
 801b996:	429a      	cmp	r2, r3
 801b998:	d03f      	beq.n	801ba1a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801b99a:	4b25      	ldr	r3, [pc, #148]	@ (801ba30 <tcp_fasttmr+0xbc>)
 801b99c:	781a      	ldrb	r2, [r3, #0]
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	8b5b      	ldrh	r3, [r3, #26]
 801b9a6:	f003 0301 	and.w	r3, r3, #1
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d010      	beq.n	801b9d0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	8b5b      	ldrh	r3, [r3, #26]
 801b9b2:	f043 0302 	orr.w	r3, r3, #2
 801b9b6:	b29a      	uxth	r2, r3
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801b9bc:	6878      	ldr	r0, [r7, #4]
 801b9be:	f003 ffef 	bl	801f9a0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	8b5b      	ldrh	r3, [r3, #26]
 801b9c6:	f023 0303 	bic.w	r3, r3, #3
 801b9ca:	b29a      	uxth	r2, r3
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	8b5b      	ldrh	r3, [r3, #26]
 801b9d4:	f003 0308 	and.w	r3, r3, #8
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d009      	beq.n	801b9f0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	8b5b      	ldrh	r3, [r3, #26]
 801b9e0:	f023 0308 	bic.w	r3, r3, #8
 801b9e4:	b29a      	uxth	r2, r3
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801b9ea:	6878      	ldr	r0, [r7, #4]
 801b9ec:	f7ff f93c 	bl	801ac68 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	68db      	ldr	r3, [r3, #12]
 801b9f4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b9fa:	2b00      	cmp	r3, #0
 801b9fc:	d00a      	beq.n	801ba14 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801b9fe:	4b0e      	ldr	r3, [pc, #56]	@ (801ba38 <tcp_fasttmr+0xc4>)
 801ba00:	2200      	movs	r2, #0
 801ba02:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801ba04:	6878      	ldr	r0, [r7, #4]
 801ba06:	f000 f819 	bl	801ba3c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801ba0a:	4b0b      	ldr	r3, [pc, #44]	@ (801ba38 <tcp_fasttmr+0xc4>)
 801ba0c:	781b      	ldrb	r3, [r3, #0]
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d000      	beq.n	801ba14 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801ba12:	e7b8      	b.n	801b986 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801ba14:	683b      	ldr	r3, [r7, #0]
 801ba16:	607b      	str	r3, [r7, #4]
 801ba18:	e002      	b.n	801ba20 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	68db      	ldr	r3, [r3, #12]
 801ba1e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	2b00      	cmp	r3, #0
 801ba24:	d1b3      	bne.n	801b98e <tcp_fasttmr+0x1a>
    }
  }
}
 801ba26:	bf00      	nop
 801ba28:	bf00      	nop
 801ba2a:	3708      	adds	r7, #8
 801ba2c:	46bd      	mov	sp, r7
 801ba2e:	bd80      	pop	{r7, pc}
 801ba30:	2400be62 	.word	0x2400be62
 801ba34:	2400be58 	.word	0x2400be58
 801ba38:	2400be60 	.word	0x2400be60

0801ba3c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801ba3c:	b590      	push	{r4, r7, lr}
 801ba3e:	b085      	sub	sp, #20
 801ba40:	af00      	add	r7, sp, #0
 801ba42:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	d109      	bne.n	801ba5e <tcp_process_refused_data+0x22>
 801ba4a:	4b37      	ldr	r3, [pc, #220]	@ (801bb28 <tcp_process_refused_data+0xec>)
 801ba4c:	f240 6209 	movw	r2, #1545	@ 0x609
 801ba50:	4936      	ldr	r1, [pc, #216]	@ (801bb2c <tcp_process_refused_data+0xf0>)
 801ba52:	4837      	ldr	r0, [pc, #220]	@ (801bb30 <tcp_process_refused_data+0xf4>)
 801ba54:	f009 fc06 	bl	8025264 <iprintf>
 801ba58:	f06f 030f 	mvn.w	r3, #15
 801ba5c:	e060      	b.n	801bb20 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ba62:	7b5b      	ldrb	r3, [r3, #13]
 801ba64:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ba6a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	2200      	movs	r2, #0
 801ba70:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ba78:	2b00      	cmp	r3, #0
 801ba7a:	d00b      	beq.n	801ba94 <tcp_process_refused_data+0x58>
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	6918      	ldr	r0, [r3, #16]
 801ba86:	2300      	movs	r3, #0
 801ba88:	68ba      	ldr	r2, [r7, #8]
 801ba8a:	6879      	ldr	r1, [r7, #4]
 801ba8c:	47a0      	blx	r4
 801ba8e:	4603      	mov	r3, r0
 801ba90:	73fb      	strb	r3, [r7, #15]
 801ba92:	e007      	b.n	801baa4 <tcp_process_refused_data+0x68>
 801ba94:	2300      	movs	r3, #0
 801ba96:	68ba      	ldr	r2, [r7, #8]
 801ba98:	6879      	ldr	r1, [r7, #4]
 801ba9a:	2000      	movs	r0, #0
 801ba9c:	f000 f8a4 	bl	801bbe8 <tcp_recv_null>
 801baa0:	4603      	mov	r3, r0
 801baa2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801baa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d12a      	bne.n	801bb02 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801baac:	7bbb      	ldrb	r3, [r7, #14]
 801baae:	f003 0320 	and.w	r3, r3, #32
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d033      	beq.n	801bb1e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801bab6:	687b      	ldr	r3, [r7, #4]
 801bab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801baba:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801babe:	d005      	beq.n	801bacc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801bac4:	3301      	adds	r3, #1
 801bac6:	b29a      	uxth	r2, r3
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801bacc:	687b      	ldr	r3, [r7, #4]
 801bace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d00b      	beq.n	801baee <tcp_process_refused_data+0xb2>
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	6918      	ldr	r0, [r3, #16]
 801bae0:	2300      	movs	r3, #0
 801bae2:	2200      	movs	r2, #0
 801bae4:	6879      	ldr	r1, [r7, #4]
 801bae6:	47a0      	blx	r4
 801bae8:	4603      	mov	r3, r0
 801baea:	73fb      	strb	r3, [r7, #15]
 801baec:	e001      	b.n	801baf2 <tcp_process_refused_data+0xb6>
 801baee:	2300      	movs	r3, #0
 801baf0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801baf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801baf6:	f113 0f0d 	cmn.w	r3, #13
 801bafa:	d110      	bne.n	801bb1e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801bafc:	f06f 030c 	mvn.w	r3, #12
 801bb00:	e00e      	b.n	801bb20 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801bb02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bb06:	f113 0f0d 	cmn.w	r3, #13
 801bb0a:	d102      	bne.n	801bb12 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801bb0c:	f06f 030c 	mvn.w	r3, #12
 801bb10:	e006      	b.n	801bb20 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	68ba      	ldr	r2, [r7, #8]
 801bb16:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801bb18:	f06f 0304 	mvn.w	r3, #4
 801bb1c:	e000      	b.n	801bb20 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801bb1e:	2300      	movs	r3, #0
}
 801bb20:	4618      	mov	r0, r3
 801bb22:	3714      	adds	r7, #20
 801bb24:	46bd      	mov	sp, r7
 801bb26:	bd90      	pop	{r4, r7, pc}
 801bb28:	0802ade4 	.word	0x0802ade4
 801bb2c:	0802b2f4 	.word	0x0802b2f4
 801bb30:	0802ae28 	.word	0x0802ae28

0801bb34 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801bb34:	b580      	push	{r7, lr}
 801bb36:	b084      	sub	sp, #16
 801bb38:	af00      	add	r7, sp, #0
 801bb3a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801bb3c:	e007      	b.n	801bb4e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801bb44:	6878      	ldr	r0, [r7, #4]
 801bb46:	f000 f80a 	bl	801bb5e <tcp_seg_free>
    seg = next;
 801bb4a:	68fb      	ldr	r3, [r7, #12]
 801bb4c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	2b00      	cmp	r3, #0
 801bb52:	d1f4      	bne.n	801bb3e <tcp_segs_free+0xa>
  }
}
 801bb54:	bf00      	nop
 801bb56:	bf00      	nop
 801bb58:	3710      	adds	r7, #16
 801bb5a:	46bd      	mov	sp, r7
 801bb5c:	bd80      	pop	{r7, pc}

0801bb5e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801bb5e:	b580      	push	{r7, lr}
 801bb60:	b082      	sub	sp, #8
 801bb62:	af00      	add	r7, sp, #0
 801bb64:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801bb66:	687b      	ldr	r3, [r7, #4]
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	d00c      	beq.n	801bb86 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	685b      	ldr	r3, [r3, #4]
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d004      	beq.n	801bb7e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	685b      	ldr	r3, [r3, #4]
 801bb78:	4618      	mov	r0, r3
 801bb7a:	f7fe fc25 	bl	801a3c8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801bb7e:	6879      	ldr	r1, [r7, #4]
 801bb80:	2003      	movs	r0, #3
 801bb82:	f7fd fd4b 	bl	801961c <memp_free>
  }
}
 801bb86:	bf00      	nop
 801bb88:	3708      	adds	r7, #8
 801bb8a:	46bd      	mov	sp, r7
 801bb8c:	bd80      	pop	{r7, pc}
	...

0801bb90 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801bb90:	b580      	push	{r7, lr}
 801bb92:	b084      	sub	sp, #16
 801bb94:	af00      	add	r7, sp, #0
 801bb96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d106      	bne.n	801bbac <tcp_seg_copy+0x1c>
 801bb9e:	4b0f      	ldr	r3, [pc, #60]	@ (801bbdc <tcp_seg_copy+0x4c>)
 801bba0:	f240 6282 	movw	r2, #1666	@ 0x682
 801bba4:	490e      	ldr	r1, [pc, #56]	@ (801bbe0 <tcp_seg_copy+0x50>)
 801bba6:	480f      	ldr	r0, [pc, #60]	@ (801bbe4 <tcp_seg_copy+0x54>)
 801bba8:	f009 fb5c 	bl	8025264 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801bbac:	2003      	movs	r0, #3
 801bbae:	f7fd fcbf 	bl	8019530 <memp_malloc>
 801bbb2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801bbb4:	68fb      	ldr	r3, [r7, #12]
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d101      	bne.n	801bbbe <tcp_seg_copy+0x2e>
    return NULL;
 801bbba:	2300      	movs	r3, #0
 801bbbc:	e00a      	b.n	801bbd4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801bbbe:	2210      	movs	r2, #16
 801bbc0:	6879      	ldr	r1, [r7, #4]
 801bbc2:	68f8      	ldr	r0, [r7, #12]
 801bbc4:	f009 fcdb 	bl	802557e <memcpy>
  pbuf_ref(cseg->p);
 801bbc8:	68fb      	ldr	r3, [r7, #12]
 801bbca:	685b      	ldr	r3, [r3, #4]
 801bbcc:	4618      	mov	r0, r3
 801bbce:	f7fe fca1 	bl	801a514 <pbuf_ref>
  return cseg;
 801bbd2:	68fb      	ldr	r3, [r7, #12]
}
 801bbd4:	4618      	mov	r0, r3
 801bbd6:	3710      	adds	r7, #16
 801bbd8:	46bd      	mov	sp, r7
 801bbda:	bd80      	pop	{r7, pc}
 801bbdc:	0802ade4 	.word	0x0802ade4
 801bbe0:	0802b338 	.word	0x0802b338
 801bbe4:	0802ae28 	.word	0x0802ae28

0801bbe8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801bbe8:	b580      	push	{r7, lr}
 801bbea:	b084      	sub	sp, #16
 801bbec:	af00      	add	r7, sp, #0
 801bbee:	60f8      	str	r0, [r7, #12]
 801bbf0:	60b9      	str	r1, [r7, #8]
 801bbf2:	607a      	str	r2, [r7, #4]
 801bbf4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801bbf6:	68bb      	ldr	r3, [r7, #8]
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	d109      	bne.n	801bc10 <tcp_recv_null+0x28>
 801bbfc:	4b12      	ldr	r3, [pc, #72]	@ (801bc48 <tcp_recv_null+0x60>)
 801bbfe:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801bc02:	4912      	ldr	r1, [pc, #72]	@ (801bc4c <tcp_recv_null+0x64>)
 801bc04:	4812      	ldr	r0, [pc, #72]	@ (801bc50 <tcp_recv_null+0x68>)
 801bc06:	f009 fb2d 	bl	8025264 <iprintf>
 801bc0a:	f06f 030f 	mvn.w	r3, #15
 801bc0e:	e016      	b.n	801bc3e <tcp_recv_null+0x56>

  if (p != NULL) {
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d009      	beq.n	801bc2a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	891b      	ldrh	r3, [r3, #8]
 801bc1a:	4619      	mov	r1, r3
 801bc1c:	68b8      	ldr	r0, [r7, #8]
 801bc1e:	f7ff fad1 	bl	801b1c4 <tcp_recved>
    pbuf_free(p);
 801bc22:	6878      	ldr	r0, [r7, #4]
 801bc24:	f7fe fbd0 	bl	801a3c8 <pbuf_free>
 801bc28:	e008      	b.n	801bc3c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801bc2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d104      	bne.n	801bc3c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801bc32:	68b8      	ldr	r0, [r7, #8]
 801bc34:	f7ff f882 	bl	801ad3c <tcp_close>
 801bc38:	4603      	mov	r3, r0
 801bc3a:	e000      	b.n	801bc3e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801bc3c:	2300      	movs	r3, #0
}
 801bc3e:	4618      	mov	r0, r3
 801bc40:	3710      	adds	r7, #16
 801bc42:	46bd      	mov	sp, r7
 801bc44:	bd80      	pop	{r7, pc}
 801bc46:	bf00      	nop
 801bc48:	0802ade4 	.word	0x0802ade4
 801bc4c:	0802b354 	.word	0x0802b354
 801bc50:	0802ae28 	.word	0x0802ae28

0801bc54 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801bc54:	b580      	push	{r7, lr}
 801bc56:	b086      	sub	sp, #24
 801bc58:	af00      	add	r7, sp, #0
 801bc5a:	4603      	mov	r3, r0
 801bc5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801bc5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	db01      	blt.n	801bc6a <tcp_kill_prio+0x16>
 801bc66:	79fb      	ldrb	r3, [r7, #7]
 801bc68:	e000      	b.n	801bc6c <tcp_kill_prio+0x18>
 801bc6a:	237f      	movs	r3, #127	@ 0x7f
 801bc6c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801bc6e:	7afb      	ldrb	r3, [r7, #11]
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	d034      	beq.n	801bcde <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801bc74:	7afb      	ldrb	r3, [r7, #11]
 801bc76:	3b01      	subs	r3, #1
 801bc78:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801bc7a:	2300      	movs	r3, #0
 801bc7c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801bc7e:	2300      	movs	r3, #0
 801bc80:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bc82:	4b19      	ldr	r3, [pc, #100]	@ (801bce8 <tcp_kill_prio+0x94>)
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	617b      	str	r3, [r7, #20]
 801bc88:	e01f      	b.n	801bcca <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801bc8a:	697b      	ldr	r3, [r7, #20]
 801bc8c:	7d5b      	ldrb	r3, [r3, #21]
 801bc8e:	7afa      	ldrb	r2, [r7, #11]
 801bc90:	429a      	cmp	r2, r3
 801bc92:	d80c      	bhi.n	801bcae <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801bc94:	697b      	ldr	r3, [r7, #20]
 801bc96:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801bc98:	7afa      	ldrb	r2, [r7, #11]
 801bc9a:	429a      	cmp	r2, r3
 801bc9c:	d112      	bne.n	801bcc4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801bc9e:	4b13      	ldr	r3, [pc, #76]	@ (801bcec <tcp_kill_prio+0x98>)
 801bca0:	681a      	ldr	r2, [r3, #0]
 801bca2:	697b      	ldr	r3, [r7, #20]
 801bca4:	6a1b      	ldr	r3, [r3, #32]
 801bca6:	1ad3      	subs	r3, r2, r3
 801bca8:	68fa      	ldr	r2, [r7, #12]
 801bcaa:	429a      	cmp	r2, r3
 801bcac:	d80a      	bhi.n	801bcc4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801bcae:	4b0f      	ldr	r3, [pc, #60]	@ (801bcec <tcp_kill_prio+0x98>)
 801bcb0:	681a      	ldr	r2, [r3, #0]
 801bcb2:	697b      	ldr	r3, [r7, #20]
 801bcb4:	6a1b      	ldr	r3, [r3, #32]
 801bcb6:	1ad3      	subs	r3, r2, r3
 801bcb8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801bcba:	697b      	ldr	r3, [r7, #20]
 801bcbc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801bcbe:	697b      	ldr	r3, [r7, #20]
 801bcc0:	7d5b      	ldrb	r3, [r3, #21]
 801bcc2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bcc4:	697b      	ldr	r3, [r7, #20]
 801bcc6:	68db      	ldr	r3, [r3, #12]
 801bcc8:	617b      	str	r3, [r7, #20]
 801bcca:	697b      	ldr	r3, [r7, #20]
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d1dc      	bne.n	801bc8a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801bcd0:	693b      	ldr	r3, [r7, #16]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	d004      	beq.n	801bce0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801bcd6:	6938      	ldr	r0, [r7, #16]
 801bcd8:	f7ff f976 	bl	801afc8 <tcp_abort>
 801bcdc:	e000      	b.n	801bce0 <tcp_kill_prio+0x8c>
    return;
 801bcde:	bf00      	nop
  }
}
 801bce0:	3718      	adds	r7, #24
 801bce2:	46bd      	mov	sp, r7
 801bce4:	bd80      	pop	{r7, pc}
 801bce6:	bf00      	nop
 801bce8:	2400be58 	.word	0x2400be58
 801bcec:	2400be4c 	.word	0x2400be4c

0801bcf0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801bcf0:	b580      	push	{r7, lr}
 801bcf2:	b086      	sub	sp, #24
 801bcf4:	af00      	add	r7, sp, #0
 801bcf6:	4603      	mov	r3, r0
 801bcf8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801bcfa:	79fb      	ldrb	r3, [r7, #7]
 801bcfc:	2b08      	cmp	r3, #8
 801bcfe:	d009      	beq.n	801bd14 <tcp_kill_state+0x24>
 801bd00:	79fb      	ldrb	r3, [r7, #7]
 801bd02:	2b09      	cmp	r3, #9
 801bd04:	d006      	beq.n	801bd14 <tcp_kill_state+0x24>
 801bd06:	4b1a      	ldr	r3, [pc, #104]	@ (801bd70 <tcp_kill_state+0x80>)
 801bd08:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 801bd0c:	4919      	ldr	r1, [pc, #100]	@ (801bd74 <tcp_kill_state+0x84>)
 801bd0e:	481a      	ldr	r0, [pc, #104]	@ (801bd78 <tcp_kill_state+0x88>)
 801bd10:	f009 faa8 	bl	8025264 <iprintf>

  inactivity = 0;
 801bd14:	2300      	movs	r3, #0
 801bd16:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801bd18:	2300      	movs	r3, #0
 801bd1a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bd1c:	4b17      	ldr	r3, [pc, #92]	@ (801bd7c <tcp_kill_state+0x8c>)
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	617b      	str	r3, [r7, #20]
 801bd22:	e017      	b.n	801bd54 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801bd24:	697b      	ldr	r3, [r7, #20]
 801bd26:	7d1b      	ldrb	r3, [r3, #20]
 801bd28:	79fa      	ldrb	r2, [r7, #7]
 801bd2a:	429a      	cmp	r2, r3
 801bd2c:	d10f      	bne.n	801bd4e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801bd2e:	4b14      	ldr	r3, [pc, #80]	@ (801bd80 <tcp_kill_state+0x90>)
 801bd30:	681a      	ldr	r2, [r3, #0]
 801bd32:	697b      	ldr	r3, [r7, #20]
 801bd34:	6a1b      	ldr	r3, [r3, #32]
 801bd36:	1ad3      	subs	r3, r2, r3
 801bd38:	68fa      	ldr	r2, [r7, #12]
 801bd3a:	429a      	cmp	r2, r3
 801bd3c:	d807      	bhi.n	801bd4e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801bd3e:	4b10      	ldr	r3, [pc, #64]	@ (801bd80 <tcp_kill_state+0x90>)
 801bd40:	681a      	ldr	r2, [r3, #0]
 801bd42:	697b      	ldr	r3, [r7, #20]
 801bd44:	6a1b      	ldr	r3, [r3, #32]
 801bd46:	1ad3      	subs	r3, r2, r3
 801bd48:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801bd4a:	697b      	ldr	r3, [r7, #20]
 801bd4c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bd4e:	697b      	ldr	r3, [r7, #20]
 801bd50:	68db      	ldr	r3, [r3, #12]
 801bd52:	617b      	str	r3, [r7, #20]
 801bd54:	697b      	ldr	r3, [r7, #20]
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d1e4      	bne.n	801bd24 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801bd5a:	693b      	ldr	r3, [r7, #16]
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	d003      	beq.n	801bd68 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801bd60:	2100      	movs	r1, #0
 801bd62:	6938      	ldr	r0, [r7, #16]
 801bd64:	f7ff f872 	bl	801ae4c <tcp_abandon>
  }
}
 801bd68:	bf00      	nop
 801bd6a:	3718      	adds	r7, #24
 801bd6c:	46bd      	mov	sp, r7
 801bd6e:	bd80      	pop	{r7, pc}
 801bd70:	0802ade4 	.word	0x0802ade4
 801bd74:	0802b370 	.word	0x0802b370
 801bd78:	0802ae28 	.word	0x0802ae28
 801bd7c:	2400be58 	.word	0x2400be58
 801bd80:	2400be4c 	.word	0x2400be4c

0801bd84 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801bd84:	b580      	push	{r7, lr}
 801bd86:	b084      	sub	sp, #16
 801bd88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801bd8a:	2300      	movs	r3, #0
 801bd8c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801bd8e:	2300      	movs	r3, #0
 801bd90:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bd92:	4b12      	ldr	r3, [pc, #72]	@ (801bddc <tcp_kill_timewait+0x58>)
 801bd94:	681b      	ldr	r3, [r3, #0]
 801bd96:	60fb      	str	r3, [r7, #12]
 801bd98:	e012      	b.n	801bdc0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801bd9a:	4b11      	ldr	r3, [pc, #68]	@ (801bde0 <tcp_kill_timewait+0x5c>)
 801bd9c:	681a      	ldr	r2, [r3, #0]
 801bd9e:	68fb      	ldr	r3, [r7, #12]
 801bda0:	6a1b      	ldr	r3, [r3, #32]
 801bda2:	1ad3      	subs	r3, r2, r3
 801bda4:	687a      	ldr	r2, [r7, #4]
 801bda6:	429a      	cmp	r2, r3
 801bda8:	d807      	bhi.n	801bdba <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801bdaa:	4b0d      	ldr	r3, [pc, #52]	@ (801bde0 <tcp_kill_timewait+0x5c>)
 801bdac:	681a      	ldr	r2, [r3, #0]
 801bdae:	68fb      	ldr	r3, [r7, #12]
 801bdb0:	6a1b      	ldr	r3, [r3, #32]
 801bdb2:	1ad3      	subs	r3, r2, r3
 801bdb4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801bdb6:	68fb      	ldr	r3, [r7, #12]
 801bdb8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bdba:	68fb      	ldr	r3, [r7, #12]
 801bdbc:	68db      	ldr	r3, [r3, #12]
 801bdbe:	60fb      	str	r3, [r7, #12]
 801bdc0:	68fb      	ldr	r3, [r7, #12]
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	d1e9      	bne.n	801bd9a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801bdc6:	68bb      	ldr	r3, [r7, #8]
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	d002      	beq.n	801bdd2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801bdcc:	68b8      	ldr	r0, [r7, #8]
 801bdce:	f7ff f8fb 	bl	801afc8 <tcp_abort>
  }
}
 801bdd2:	bf00      	nop
 801bdd4:	3710      	adds	r7, #16
 801bdd6:	46bd      	mov	sp, r7
 801bdd8:	bd80      	pop	{r7, pc}
 801bdda:	bf00      	nop
 801bddc:	2400be5c 	.word	0x2400be5c
 801bde0:	2400be4c 	.word	0x2400be4c

0801bde4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801bde4:	b580      	push	{r7, lr}
 801bde6:	b082      	sub	sp, #8
 801bde8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801bdea:	4b10      	ldr	r3, [pc, #64]	@ (801be2c <tcp_handle_closepend+0x48>)
 801bdec:	681b      	ldr	r3, [r3, #0]
 801bdee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801bdf0:	e014      	b.n	801be1c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	68db      	ldr	r3, [r3, #12]
 801bdf6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	8b5b      	ldrh	r3, [r3, #26]
 801bdfc:	f003 0308 	and.w	r3, r3, #8
 801be00:	2b00      	cmp	r3, #0
 801be02:	d009      	beq.n	801be18 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	8b5b      	ldrh	r3, [r3, #26]
 801be08:	f023 0308 	bic.w	r3, r3, #8
 801be0c:	b29a      	uxth	r2, r3
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801be12:	6878      	ldr	r0, [r7, #4]
 801be14:	f7fe ff28 	bl	801ac68 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801be18:	683b      	ldr	r3, [r7, #0]
 801be1a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d1e7      	bne.n	801bdf2 <tcp_handle_closepend+0xe>
  }
}
 801be22:	bf00      	nop
 801be24:	bf00      	nop
 801be26:	3708      	adds	r7, #8
 801be28:	46bd      	mov	sp, r7
 801be2a:	bd80      	pop	{r7, pc}
 801be2c:	2400be58 	.word	0x2400be58

0801be30 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801be30:	b580      	push	{r7, lr}
 801be32:	b084      	sub	sp, #16
 801be34:	af00      	add	r7, sp, #0
 801be36:	4603      	mov	r3, r0
 801be38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801be3a:	2001      	movs	r0, #1
 801be3c:	f7fd fb78 	bl	8019530 <memp_malloc>
 801be40:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801be42:	68fb      	ldr	r3, [r7, #12]
 801be44:	2b00      	cmp	r3, #0
 801be46:	d126      	bne.n	801be96 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801be48:	f7ff ffcc 	bl	801bde4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801be4c:	f7ff ff9a 	bl	801bd84 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801be50:	2001      	movs	r0, #1
 801be52:	f7fd fb6d 	bl	8019530 <memp_malloc>
 801be56:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d11b      	bne.n	801be96 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801be5e:	2009      	movs	r0, #9
 801be60:	f7ff ff46 	bl	801bcf0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801be64:	2001      	movs	r0, #1
 801be66:	f7fd fb63 	bl	8019530 <memp_malloc>
 801be6a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801be6c:	68fb      	ldr	r3, [r7, #12]
 801be6e:	2b00      	cmp	r3, #0
 801be70:	d111      	bne.n	801be96 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801be72:	2008      	movs	r0, #8
 801be74:	f7ff ff3c 	bl	801bcf0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801be78:	2001      	movs	r0, #1
 801be7a:	f7fd fb59 	bl	8019530 <memp_malloc>
 801be7e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801be80:	68fb      	ldr	r3, [r7, #12]
 801be82:	2b00      	cmp	r3, #0
 801be84:	d107      	bne.n	801be96 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801be86:	79fb      	ldrb	r3, [r7, #7]
 801be88:	4618      	mov	r0, r3
 801be8a:	f7ff fee3 	bl	801bc54 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801be8e:	2001      	movs	r0, #1
 801be90:	f7fd fb4e 	bl	8019530 <memp_malloc>
 801be94:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801be96:	68fb      	ldr	r3, [r7, #12]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d03f      	beq.n	801bf1c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801be9c:	229c      	movs	r2, #156	@ 0x9c
 801be9e:	2100      	movs	r1, #0
 801bea0:	68f8      	ldr	r0, [r7, #12]
 801bea2:	f009 facb 	bl	802543c <memset>
    pcb->prio = prio;
 801bea6:	68fb      	ldr	r3, [r7, #12]
 801bea8:	79fa      	ldrb	r2, [r7, #7]
 801beaa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801beac:	68fb      	ldr	r3, [r7, #12]
 801beae:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801beb2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801beb6:	68fb      	ldr	r3, [r7, #12]
 801beb8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801bebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801bebe:	68fb      	ldr	r3, [r7, #12]
 801bec0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801bec2:	68fb      	ldr	r3, [r7, #12]
 801bec4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801bec6:	68fb      	ldr	r3, [r7, #12]
 801bec8:	22ff      	movs	r2, #255	@ 0xff
 801beca:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801becc:	68fb      	ldr	r3, [r7, #12]
 801bece:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801bed2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801bed4:	68fb      	ldr	r3, [r7, #12]
 801bed6:	2206      	movs	r2, #6
 801bed8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801bedc:	68fb      	ldr	r3, [r7, #12]
 801bede:	2206      	movs	r2, #6
 801bee0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801bee2:	68fb      	ldr	r3, [r7, #12]
 801bee4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bee8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801beea:	68fb      	ldr	r3, [r7, #12]
 801beec:	2201      	movs	r2, #1
 801beee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801bef2:	4b0d      	ldr	r3, [pc, #52]	@ (801bf28 <tcp_alloc+0xf8>)
 801bef4:	681a      	ldr	r2, [r3, #0]
 801bef6:	68fb      	ldr	r3, [r7, #12]
 801bef8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801befa:	4b0c      	ldr	r3, [pc, #48]	@ (801bf2c <tcp_alloc+0xfc>)
 801befc:	781a      	ldrb	r2, [r3, #0]
 801befe:	68fb      	ldr	r3, [r7, #12]
 801bf00:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801bf02:	68fb      	ldr	r3, [r7, #12]
 801bf04:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801bf08:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801bf0c:	68fb      	ldr	r3, [r7, #12]
 801bf0e:	4a08      	ldr	r2, [pc, #32]	@ (801bf30 <tcp_alloc+0x100>)
 801bf10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	4a07      	ldr	r2, [pc, #28]	@ (801bf34 <tcp_alloc+0x104>)
 801bf18:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801bf1c:	68fb      	ldr	r3, [r7, #12]
}
 801bf1e:	4618      	mov	r0, r3
 801bf20:	3710      	adds	r7, #16
 801bf22:	46bd      	mov	sp, r7
 801bf24:	bd80      	pop	{r7, pc}
 801bf26:	bf00      	nop
 801bf28:	2400be4c 	.word	0x2400be4c
 801bf2c:	2400be62 	.word	0x2400be62
 801bf30:	0801bbe9 	.word	0x0801bbe9
 801bf34:	006ddd00 	.word	0x006ddd00

0801bf38 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801bf38:	b580      	push	{r7, lr}
 801bf3a:	b084      	sub	sp, #16
 801bf3c:	af00      	add	r7, sp, #0
 801bf3e:	4603      	mov	r3, r0
 801bf40:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801bf42:	2040      	movs	r0, #64	@ 0x40
 801bf44:	f7ff ff74 	bl	801be30 <tcp_alloc>
 801bf48:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801bf4a:	68fb      	ldr	r3, [r7, #12]
}
 801bf4c:	4618      	mov	r0, r3
 801bf4e:	3710      	adds	r7, #16
 801bf50:	46bd      	mov	sp, r7
 801bf52:	bd80      	pop	{r7, pc}

0801bf54 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801bf54:	b480      	push	{r7}
 801bf56:	b083      	sub	sp, #12
 801bf58:	af00      	add	r7, sp, #0
 801bf5a:	6078      	str	r0, [r7, #4]
 801bf5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d002      	beq.n	801bf6a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	683a      	ldr	r2, [r7, #0]
 801bf68:	611a      	str	r2, [r3, #16]
  }
}
 801bf6a:	bf00      	nop
 801bf6c:	370c      	adds	r7, #12
 801bf6e:	46bd      	mov	sp, r7
 801bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf74:	4770      	bx	lr
	...

0801bf78 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801bf78:	b580      	push	{r7, lr}
 801bf7a:	b082      	sub	sp, #8
 801bf7c:	af00      	add	r7, sp, #0
 801bf7e:	6078      	str	r0, [r7, #4]
 801bf80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801bf82:	687b      	ldr	r3, [r7, #4]
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	d00e      	beq.n	801bfa6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	7d1b      	ldrb	r3, [r3, #20]
 801bf8c:	2b01      	cmp	r3, #1
 801bf8e:	d106      	bne.n	801bf9e <tcp_recv+0x26>
 801bf90:	4b07      	ldr	r3, [pc, #28]	@ (801bfb0 <tcp_recv+0x38>)
 801bf92:	f240 72df 	movw	r2, #2015	@ 0x7df
 801bf96:	4907      	ldr	r1, [pc, #28]	@ (801bfb4 <tcp_recv+0x3c>)
 801bf98:	4807      	ldr	r0, [pc, #28]	@ (801bfb8 <tcp_recv+0x40>)
 801bf9a:	f009 f963 	bl	8025264 <iprintf>
    pcb->recv = recv;
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	683a      	ldr	r2, [r7, #0]
 801bfa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801bfa6:	bf00      	nop
 801bfa8:	3708      	adds	r7, #8
 801bfaa:	46bd      	mov	sp, r7
 801bfac:	bd80      	pop	{r7, pc}
 801bfae:	bf00      	nop
 801bfb0:	0802ade4 	.word	0x0802ade4
 801bfb4:	0802b380 	.word	0x0802b380
 801bfb8:	0802ae28 	.word	0x0802ae28

0801bfbc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801bfbc:	b580      	push	{r7, lr}
 801bfbe:	b082      	sub	sp, #8
 801bfc0:	af00      	add	r7, sp, #0
 801bfc2:	6078      	str	r0, [r7, #4]
 801bfc4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	d00e      	beq.n	801bfea <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	7d1b      	ldrb	r3, [r3, #20]
 801bfd0:	2b01      	cmp	r3, #1
 801bfd2:	d106      	bne.n	801bfe2 <tcp_sent+0x26>
 801bfd4:	4b07      	ldr	r3, [pc, #28]	@ (801bff4 <tcp_sent+0x38>)
 801bfd6:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 801bfda:	4907      	ldr	r1, [pc, #28]	@ (801bff8 <tcp_sent+0x3c>)
 801bfdc:	4807      	ldr	r0, [pc, #28]	@ (801bffc <tcp_sent+0x40>)
 801bfde:	f009 f941 	bl	8025264 <iprintf>
    pcb->sent = sent;
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	683a      	ldr	r2, [r7, #0]
 801bfe6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801bfea:	bf00      	nop
 801bfec:	3708      	adds	r7, #8
 801bfee:	46bd      	mov	sp, r7
 801bff0:	bd80      	pop	{r7, pc}
 801bff2:	bf00      	nop
 801bff4:	0802ade4 	.word	0x0802ade4
 801bff8:	0802b3a8 	.word	0x0802b3a8
 801bffc:	0802ae28 	.word	0x0802ae28

0801c000 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801c000:	b580      	push	{r7, lr}
 801c002:	b082      	sub	sp, #8
 801c004:	af00      	add	r7, sp, #0
 801c006:	6078      	str	r0, [r7, #4]
 801c008:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	2b00      	cmp	r3, #0
 801c00e:	d00e      	beq.n	801c02e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	7d1b      	ldrb	r3, [r3, #20]
 801c014:	2b01      	cmp	r3, #1
 801c016:	d106      	bne.n	801c026 <tcp_err+0x26>
 801c018:	4b07      	ldr	r3, [pc, #28]	@ (801c038 <tcp_err+0x38>)
 801c01a:	f640 020d 	movw	r2, #2061	@ 0x80d
 801c01e:	4907      	ldr	r1, [pc, #28]	@ (801c03c <tcp_err+0x3c>)
 801c020:	4807      	ldr	r0, [pc, #28]	@ (801c040 <tcp_err+0x40>)
 801c022:	f009 f91f 	bl	8025264 <iprintf>
    pcb->errf = err;
 801c026:	687b      	ldr	r3, [r7, #4]
 801c028:	683a      	ldr	r2, [r7, #0]
 801c02a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801c02e:	bf00      	nop
 801c030:	3708      	adds	r7, #8
 801c032:	46bd      	mov	sp, r7
 801c034:	bd80      	pop	{r7, pc}
 801c036:	bf00      	nop
 801c038:	0802ade4 	.word	0x0802ade4
 801c03c:	0802b3d0 	.word	0x0802b3d0
 801c040:	0802ae28 	.word	0x0802ae28

0801c044 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801c044:	b480      	push	{r7}
 801c046:	b085      	sub	sp, #20
 801c048:	af00      	add	r7, sp, #0
 801c04a:	6078      	str	r0, [r7, #4]
 801c04c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	2b00      	cmp	r3, #0
 801c052:	d008      	beq.n	801c066 <tcp_accept+0x22>
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	7d1b      	ldrb	r3, [r3, #20]
 801c058:	2b01      	cmp	r3, #1
 801c05a:	d104      	bne.n	801c066 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801c060:	68fb      	ldr	r3, [r7, #12]
 801c062:	683a      	ldr	r2, [r7, #0]
 801c064:	619a      	str	r2, [r3, #24]
  }
}
 801c066:	bf00      	nop
 801c068:	3714      	adds	r7, #20
 801c06a:	46bd      	mov	sp, r7
 801c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c070:	4770      	bx	lr
	...

0801c074 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801c074:	b580      	push	{r7, lr}
 801c076:	b084      	sub	sp, #16
 801c078:	af00      	add	r7, sp, #0
 801c07a:	60f8      	str	r0, [r7, #12]
 801c07c:	60b9      	str	r1, [r7, #8]
 801c07e:	4613      	mov	r3, r2
 801c080:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801c082:	68fb      	ldr	r3, [r7, #12]
 801c084:	2b00      	cmp	r3, #0
 801c086:	d107      	bne.n	801c098 <tcp_poll+0x24>
 801c088:	4b0e      	ldr	r3, [pc, #56]	@ (801c0c4 <tcp_poll+0x50>)
 801c08a:	f640 023d 	movw	r2, #2109	@ 0x83d
 801c08e:	490e      	ldr	r1, [pc, #56]	@ (801c0c8 <tcp_poll+0x54>)
 801c090:	480e      	ldr	r0, [pc, #56]	@ (801c0cc <tcp_poll+0x58>)
 801c092:	f009 f8e7 	bl	8025264 <iprintf>
 801c096:	e011      	b.n	801c0bc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801c098:	68fb      	ldr	r3, [r7, #12]
 801c09a:	7d1b      	ldrb	r3, [r3, #20]
 801c09c:	2b01      	cmp	r3, #1
 801c09e:	d106      	bne.n	801c0ae <tcp_poll+0x3a>
 801c0a0:	4b08      	ldr	r3, [pc, #32]	@ (801c0c4 <tcp_poll+0x50>)
 801c0a2:	f640 023e 	movw	r2, #2110	@ 0x83e
 801c0a6:	490a      	ldr	r1, [pc, #40]	@ (801c0d0 <tcp_poll+0x5c>)
 801c0a8:	4808      	ldr	r0, [pc, #32]	@ (801c0cc <tcp_poll+0x58>)
 801c0aa:	f009 f8db 	bl	8025264 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801c0ae:	68fb      	ldr	r3, [r7, #12]
 801c0b0:	68ba      	ldr	r2, [r7, #8]
 801c0b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801c0b6:	68fb      	ldr	r3, [r7, #12]
 801c0b8:	79fa      	ldrb	r2, [r7, #7]
 801c0ba:	775a      	strb	r2, [r3, #29]
}
 801c0bc:	3710      	adds	r7, #16
 801c0be:	46bd      	mov	sp, r7
 801c0c0:	bd80      	pop	{r7, pc}
 801c0c2:	bf00      	nop
 801c0c4:	0802ade4 	.word	0x0802ade4
 801c0c8:	0802b3f8 	.word	0x0802b3f8
 801c0cc:	0802ae28 	.word	0x0802ae28
 801c0d0:	0802b410 	.word	0x0802b410

0801c0d4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801c0d4:	b580      	push	{r7, lr}
 801c0d6:	b082      	sub	sp, #8
 801c0d8:	af00      	add	r7, sp, #0
 801c0da:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	d107      	bne.n	801c0f2 <tcp_pcb_purge+0x1e>
 801c0e2:	4b21      	ldr	r3, [pc, #132]	@ (801c168 <tcp_pcb_purge+0x94>)
 801c0e4:	f640 0251 	movw	r2, #2129	@ 0x851
 801c0e8:	4920      	ldr	r1, [pc, #128]	@ (801c16c <tcp_pcb_purge+0x98>)
 801c0ea:	4821      	ldr	r0, [pc, #132]	@ (801c170 <tcp_pcb_purge+0x9c>)
 801c0ec:	f009 f8ba 	bl	8025264 <iprintf>
 801c0f0:	e037      	b.n	801c162 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801c0f2:	687b      	ldr	r3, [r7, #4]
 801c0f4:	7d1b      	ldrb	r3, [r3, #20]
 801c0f6:	2b00      	cmp	r3, #0
 801c0f8:	d033      	beq.n	801c162 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801c0fe:	2b0a      	cmp	r3, #10
 801c100:	d02f      	beq.n	801c162 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801c106:	2b01      	cmp	r3, #1
 801c108:	d02b      	beq.n	801c162 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d007      	beq.n	801c122 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c116:	4618      	mov	r0, r3
 801c118:	f7fe f956 	bl	801a3c8 <pbuf_free>
      pcb->refused_data = NULL;
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	2200      	movs	r2, #0
 801c120:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c126:	2b00      	cmp	r3, #0
 801c128:	d002      	beq.n	801c130 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801c12a:	6878      	ldr	r0, [r7, #4]
 801c12c:	f000 f986 	bl	801c43c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c136:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c13c:	4618      	mov	r0, r3
 801c13e:	f7ff fcf9 	bl	801bb34 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c146:	4618      	mov	r0, r3
 801c148:	f7ff fcf4 	bl	801bb34 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	2200      	movs	r2, #0
 801c150:	66da      	str	r2, [r3, #108]	@ 0x6c
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	2200      	movs	r2, #0
 801c15e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801c162:	3708      	adds	r7, #8
 801c164:	46bd      	mov	sp, r7
 801c166:	bd80      	pop	{r7, pc}
 801c168:	0802ade4 	.word	0x0802ade4
 801c16c:	0802b430 	.word	0x0802b430
 801c170:	0802ae28 	.word	0x0802ae28

0801c174 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801c174:	b580      	push	{r7, lr}
 801c176:	b084      	sub	sp, #16
 801c178:	af00      	add	r7, sp, #0
 801c17a:	6078      	str	r0, [r7, #4]
 801c17c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801c17e:	683b      	ldr	r3, [r7, #0]
 801c180:	2b00      	cmp	r3, #0
 801c182:	d106      	bne.n	801c192 <tcp_pcb_remove+0x1e>
 801c184:	4b3e      	ldr	r3, [pc, #248]	@ (801c280 <tcp_pcb_remove+0x10c>)
 801c186:	f640 0283 	movw	r2, #2179	@ 0x883
 801c18a:	493e      	ldr	r1, [pc, #248]	@ (801c284 <tcp_pcb_remove+0x110>)
 801c18c:	483e      	ldr	r0, [pc, #248]	@ (801c288 <tcp_pcb_remove+0x114>)
 801c18e:	f009 f869 	bl	8025264 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	2b00      	cmp	r3, #0
 801c196:	d106      	bne.n	801c1a6 <tcp_pcb_remove+0x32>
 801c198:	4b39      	ldr	r3, [pc, #228]	@ (801c280 <tcp_pcb_remove+0x10c>)
 801c19a:	f640 0284 	movw	r2, #2180	@ 0x884
 801c19e:	493b      	ldr	r1, [pc, #236]	@ (801c28c <tcp_pcb_remove+0x118>)
 801c1a0:	4839      	ldr	r0, [pc, #228]	@ (801c288 <tcp_pcb_remove+0x114>)
 801c1a2:	f009 f85f 	bl	8025264 <iprintf>

  TCP_RMV(pcblist, pcb);
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	681b      	ldr	r3, [r3, #0]
 801c1aa:	683a      	ldr	r2, [r7, #0]
 801c1ac:	429a      	cmp	r2, r3
 801c1ae:	d105      	bne.n	801c1bc <tcp_pcb_remove+0x48>
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	681b      	ldr	r3, [r3, #0]
 801c1b4:	68da      	ldr	r2, [r3, #12]
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	601a      	str	r2, [r3, #0]
 801c1ba:	e013      	b.n	801c1e4 <tcp_pcb_remove+0x70>
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	681b      	ldr	r3, [r3, #0]
 801c1c0:	60fb      	str	r3, [r7, #12]
 801c1c2:	e00c      	b.n	801c1de <tcp_pcb_remove+0x6a>
 801c1c4:	68fb      	ldr	r3, [r7, #12]
 801c1c6:	68db      	ldr	r3, [r3, #12]
 801c1c8:	683a      	ldr	r2, [r7, #0]
 801c1ca:	429a      	cmp	r2, r3
 801c1cc:	d104      	bne.n	801c1d8 <tcp_pcb_remove+0x64>
 801c1ce:	683b      	ldr	r3, [r7, #0]
 801c1d0:	68da      	ldr	r2, [r3, #12]
 801c1d2:	68fb      	ldr	r3, [r7, #12]
 801c1d4:	60da      	str	r2, [r3, #12]
 801c1d6:	e005      	b.n	801c1e4 <tcp_pcb_remove+0x70>
 801c1d8:	68fb      	ldr	r3, [r7, #12]
 801c1da:	68db      	ldr	r3, [r3, #12]
 801c1dc:	60fb      	str	r3, [r7, #12]
 801c1de:	68fb      	ldr	r3, [r7, #12]
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	d1ef      	bne.n	801c1c4 <tcp_pcb_remove+0x50>
 801c1e4:	683b      	ldr	r3, [r7, #0]
 801c1e6:	2200      	movs	r2, #0
 801c1e8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801c1ea:	6838      	ldr	r0, [r7, #0]
 801c1ec:	f7ff ff72 	bl	801c0d4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801c1f0:	683b      	ldr	r3, [r7, #0]
 801c1f2:	7d1b      	ldrb	r3, [r3, #20]
 801c1f4:	2b0a      	cmp	r3, #10
 801c1f6:	d013      	beq.n	801c220 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801c1f8:	683b      	ldr	r3, [r7, #0]
 801c1fa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801c1fc:	2b01      	cmp	r3, #1
 801c1fe:	d00f      	beq.n	801c220 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801c200:	683b      	ldr	r3, [r7, #0]
 801c202:	8b5b      	ldrh	r3, [r3, #26]
 801c204:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d009      	beq.n	801c220 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801c20c:	683b      	ldr	r3, [r7, #0]
 801c20e:	8b5b      	ldrh	r3, [r3, #26]
 801c210:	f043 0302 	orr.w	r3, r3, #2
 801c214:	b29a      	uxth	r2, r3
 801c216:	683b      	ldr	r3, [r7, #0]
 801c218:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801c21a:	6838      	ldr	r0, [r7, #0]
 801c21c:	f003 fbc0 	bl	801f9a0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801c220:	683b      	ldr	r3, [r7, #0]
 801c222:	7d1b      	ldrb	r3, [r3, #20]
 801c224:	2b01      	cmp	r3, #1
 801c226:	d020      	beq.n	801c26a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801c228:	683b      	ldr	r3, [r7, #0]
 801c22a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	d006      	beq.n	801c23e <tcp_pcb_remove+0xca>
 801c230:	4b13      	ldr	r3, [pc, #76]	@ (801c280 <tcp_pcb_remove+0x10c>)
 801c232:	f640 0293 	movw	r2, #2195	@ 0x893
 801c236:	4916      	ldr	r1, [pc, #88]	@ (801c290 <tcp_pcb_remove+0x11c>)
 801c238:	4813      	ldr	r0, [pc, #76]	@ (801c288 <tcp_pcb_remove+0x114>)
 801c23a:	f009 f813 	bl	8025264 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801c23e:	683b      	ldr	r3, [r7, #0]
 801c240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c242:	2b00      	cmp	r3, #0
 801c244:	d006      	beq.n	801c254 <tcp_pcb_remove+0xe0>
 801c246:	4b0e      	ldr	r3, [pc, #56]	@ (801c280 <tcp_pcb_remove+0x10c>)
 801c248:	f640 0294 	movw	r2, #2196	@ 0x894
 801c24c:	4911      	ldr	r1, [pc, #68]	@ (801c294 <tcp_pcb_remove+0x120>)
 801c24e:	480e      	ldr	r0, [pc, #56]	@ (801c288 <tcp_pcb_remove+0x114>)
 801c250:	f009 f808 	bl	8025264 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801c254:	683b      	ldr	r3, [r7, #0]
 801c256:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c258:	2b00      	cmp	r3, #0
 801c25a:	d006      	beq.n	801c26a <tcp_pcb_remove+0xf6>
 801c25c:	4b08      	ldr	r3, [pc, #32]	@ (801c280 <tcp_pcb_remove+0x10c>)
 801c25e:	f640 0296 	movw	r2, #2198	@ 0x896
 801c262:	490d      	ldr	r1, [pc, #52]	@ (801c298 <tcp_pcb_remove+0x124>)
 801c264:	4808      	ldr	r0, [pc, #32]	@ (801c288 <tcp_pcb_remove+0x114>)
 801c266:	f008 fffd 	bl	8025264 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801c26a:	683b      	ldr	r3, [r7, #0]
 801c26c:	2200      	movs	r2, #0
 801c26e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801c270:	683b      	ldr	r3, [r7, #0]
 801c272:	2200      	movs	r2, #0
 801c274:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801c276:	bf00      	nop
 801c278:	3710      	adds	r7, #16
 801c27a:	46bd      	mov	sp, r7
 801c27c:	bd80      	pop	{r7, pc}
 801c27e:	bf00      	nop
 801c280:	0802ade4 	.word	0x0802ade4
 801c284:	0802b44c 	.word	0x0802b44c
 801c288:	0802ae28 	.word	0x0802ae28
 801c28c:	0802b468 	.word	0x0802b468
 801c290:	0802b488 	.word	0x0802b488
 801c294:	0802b4a0 	.word	0x0802b4a0
 801c298:	0802b4bc 	.word	0x0802b4bc

0801c29c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801c29c:	b580      	push	{r7, lr}
 801c29e:	b082      	sub	sp, #8
 801c2a0:	af00      	add	r7, sp, #0
 801c2a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d106      	bne.n	801c2b8 <tcp_next_iss+0x1c>
 801c2aa:	4b0a      	ldr	r3, [pc, #40]	@ (801c2d4 <tcp_next_iss+0x38>)
 801c2ac:	f640 02af 	movw	r2, #2223	@ 0x8af
 801c2b0:	4909      	ldr	r1, [pc, #36]	@ (801c2d8 <tcp_next_iss+0x3c>)
 801c2b2:	480a      	ldr	r0, [pc, #40]	@ (801c2dc <tcp_next_iss+0x40>)
 801c2b4:	f008 ffd6 	bl	8025264 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801c2b8:	4b09      	ldr	r3, [pc, #36]	@ (801c2e0 <tcp_next_iss+0x44>)
 801c2ba:	681a      	ldr	r2, [r3, #0]
 801c2bc:	4b09      	ldr	r3, [pc, #36]	@ (801c2e4 <tcp_next_iss+0x48>)
 801c2be:	681b      	ldr	r3, [r3, #0]
 801c2c0:	4413      	add	r3, r2
 801c2c2:	4a07      	ldr	r2, [pc, #28]	@ (801c2e0 <tcp_next_iss+0x44>)
 801c2c4:	6013      	str	r3, [r2, #0]
  return iss;
 801c2c6:	4b06      	ldr	r3, [pc, #24]	@ (801c2e0 <tcp_next_iss+0x44>)
 801c2c8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801c2ca:	4618      	mov	r0, r3
 801c2cc:	3708      	adds	r7, #8
 801c2ce:	46bd      	mov	sp, r7
 801c2d0:	bd80      	pop	{r7, pc}
 801c2d2:	bf00      	nop
 801c2d4:	0802ade4 	.word	0x0802ade4
 801c2d8:	0802b4d4 	.word	0x0802b4d4
 801c2dc:	0802ae28 	.word	0x0802ae28
 801c2e0:	24000208 	.word	0x24000208
 801c2e4:	2400be4c 	.word	0x2400be4c

0801c2e8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801c2e8:	b580      	push	{r7, lr}
 801c2ea:	b086      	sub	sp, #24
 801c2ec:	af00      	add	r7, sp, #0
 801c2ee:	4603      	mov	r3, r0
 801c2f0:	60b9      	str	r1, [r7, #8]
 801c2f2:	607a      	str	r2, [r7, #4]
 801c2f4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	2b00      	cmp	r3, #0
 801c2fa:	d106      	bne.n	801c30a <tcp_eff_send_mss_netif+0x22>
 801c2fc:	4b14      	ldr	r3, [pc, #80]	@ (801c350 <tcp_eff_send_mss_netif+0x68>)
 801c2fe:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801c302:	4914      	ldr	r1, [pc, #80]	@ (801c354 <tcp_eff_send_mss_netif+0x6c>)
 801c304:	4814      	ldr	r0, [pc, #80]	@ (801c358 <tcp_eff_send_mss_netif+0x70>)
 801c306:	f008 ffad 	bl	8025264 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801c30a:	68bb      	ldr	r3, [r7, #8]
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	d101      	bne.n	801c314 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801c310:	89fb      	ldrh	r3, [r7, #14]
 801c312:	e019      	b.n	801c348 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801c314:	68bb      	ldr	r3, [r7, #8]
 801c316:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c318:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801c31a:	8afb      	ldrh	r3, [r7, #22]
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d012      	beq.n	801c346 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801c320:	2328      	movs	r3, #40	@ 0x28
 801c322:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801c324:	8afa      	ldrh	r2, [r7, #22]
 801c326:	8abb      	ldrh	r3, [r7, #20]
 801c328:	429a      	cmp	r2, r3
 801c32a:	d904      	bls.n	801c336 <tcp_eff_send_mss_netif+0x4e>
 801c32c:	8afa      	ldrh	r2, [r7, #22]
 801c32e:	8abb      	ldrh	r3, [r7, #20]
 801c330:	1ad3      	subs	r3, r2, r3
 801c332:	b29b      	uxth	r3, r3
 801c334:	e000      	b.n	801c338 <tcp_eff_send_mss_netif+0x50>
 801c336:	2300      	movs	r3, #0
 801c338:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801c33a:	8a7a      	ldrh	r2, [r7, #18]
 801c33c:	89fb      	ldrh	r3, [r7, #14]
 801c33e:	4293      	cmp	r3, r2
 801c340:	bf28      	it	cs
 801c342:	4613      	movcs	r3, r2
 801c344:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801c346:	89fb      	ldrh	r3, [r7, #14]
}
 801c348:	4618      	mov	r0, r3
 801c34a:	3718      	adds	r7, #24
 801c34c:	46bd      	mov	sp, r7
 801c34e:	bd80      	pop	{r7, pc}
 801c350:	0802ade4 	.word	0x0802ade4
 801c354:	0802b4f0 	.word	0x0802b4f0
 801c358:	0802ae28 	.word	0x0802ae28

0801c35c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801c35c:	b580      	push	{r7, lr}
 801c35e:	b084      	sub	sp, #16
 801c360:	af00      	add	r7, sp, #0
 801c362:	6078      	str	r0, [r7, #4]
 801c364:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801c366:	683b      	ldr	r3, [r7, #0]
 801c368:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801c36a:	687b      	ldr	r3, [r7, #4]
 801c36c:	2b00      	cmp	r3, #0
 801c36e:	d119      	bne.n	801c3a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801c370:	4b10      	ldr	r3, [pc, #64]	@ (801c3b4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801c372:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801c376:	4910      	ldr	r1, [pc, #64]	@ (801c3b8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801c378:	4810      	ldr	r0, [pc, #64]	@ (801c3bc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801c37a:	f008 ff73 	bl	8025264 <iprintf>

  while (pcb != NULL) {
 801c37e:	e011      	b.n	801c3a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801c380:	68fb      	ldr	r3, [r7, #12]
 801c382:	681a      	ldr	r2, [r3, #0]
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	681b      	ldr	r3, [r3, #0]
 801c388:	429a      	cmp	r2, r3
 801c38a:	d108      	bne.n	801c39e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	68db      	ldr	r3, [r3, #12]
 801c390:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801c392:	68f8      	ldr	r0, [r7, #12]
 801c394:	f7fe fe18 	bl	801afc8 <tcp_abort>
      pcb = next;
 801c398:	68bb      	ldr	r3, [r7, #8]
 801c39a:	60fb      	str	r3, [r7, #12]
 801c39c:	e002      	b.n	801c3a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801c39e:	68fb      	ldr	r3, [r7, #12]
 801c3a0:	68db      	ldr	r3, [r3, #12]
 801c3a2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801c3a4:	68fb      	ldr	r3, [r7, #12]
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d1ea      	bne.n	801c380 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801c3aa:	bf00      	nop
 801c3ac:	bf00      	nop
 801c3ae:	3710      	adds	r7, #16
 801c3b0:	46bd      	mov	sp, r7
 801c3b2:	bd80      	pop	{r7, pc}
 801c3b4:	0802ade4 	.word	0x0802ade4
 801c3b8:	0802b518 	.word	0x0802b518
 801c3bc:	0802ae28 	.word	0x0802ae28

0801c3c0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c3c0:	b580      	push	{r7, lr}
 801c3c2:	b084      	sub	sp, #16
 801c3c4:	af00      	add	r7, sp, #0
 801c3c6:	6078      	str	r0, [r7, #4]
 801c3c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d02a      	beq.n	801c426 <tcp_netif_ip_addr_changed+0x66>
 801c3d0:	687b      	ldr	r3, [r7, #4]
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	d026      	beq.n	801c426 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801c3d8:	4b15      	ldr	r3, [pc, #84]	@ (801c430 <tcp_netif_ip_addr_changed+0x70>)
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	4619      	mov	r1, r3
 801c3de:	6878      	ldr	r0, [r7, #4]
 801c3e0:	f7ff ffbc 	bl	801c35c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801c3e4:	4b13      	ldr	r3, [pc, #76]	@ (801c434 <tcp_netif_ip_addr_changed+0x74>)
 801c3e6:	681b      	ldr	r3, [r3, #0]
 801c3e8:	4619      	mov	r1, r3
 801c3ea:	6878      	ldr	r0, [r7, #4]
 801c3ec:	f7ff ffb6 	bl	801c35c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801c3f0:	683b      	ldr	r3, [r7, #0]
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	d017      	beq.n	801c426 <tcp_netif_ip_addr_changed+0x66>
 801c3f6:	683b      	ldr	r3, [r7, #0]
 801c3f8:	681b      	ldr	r3, [r3, #0]
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	d013      	beq.n	801c426 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c3fe:	4b0e      	ldr	r3, [pc, #56]	@ (801c438 <tcp_netif_ip_addr_changed+0x78>)
 801c400:	681b      	ldr	r3, [r3, #0]
 801c402:	60fb      	str	r3, [r7, #12]
 801c404:	e00c      	b.n	801c420 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801c406:	68fb      	ldr	r3, [r7, #12]
 801c408:	681a      	ldr	r2, [r3, #0]
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	429a      	cmp	r2, r3
 801c410:	d103      	bne.n	801c41a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801c412:	683b      	ldr	r3, [r7, #0]
 801c414:	681a      	ldr	r2, [r3, #0]
 801c416:	68fb      	ldr	r3, [r7, #12]
 801c418:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c41a:	68fb      	ldr	r3, [r7, #12]
 801c41c:	68db      	ldr	r3, [r3, #12]
 801c41e:	60fb      	str	r3, [r7, #12]
 801c420:	68fb      	ldr	r3, [r7, #12]
 801c422:	2b00      	cmp	r3, #0
 801c424:	d1ef      	bne.n	801c406 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801c426:	bf00      	nop
 801c428:	3710      	adds	r7, #16
 801c42a:	46bd      	mov	sp, r7
 801c42c:	bd80      	pop	{r7, pc}
 801c42e:	bf00      	nop
 801c430:	2400be58 	.word	0x2400be58
 801c434:	2400be50 	.word	0x2400be50
 801c438:	2400be54 	.word	0x2400be54

0801c43c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801c43c:	b580      	push	{r7, lr}
 801c43e:	b082      	sub	sp, #8
 801c440:	af00      	add	r7, sp, #0
 801c442:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d007      	beq.n	801c45c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c450:	4618      	mov	r0, r3
 801c452:	f7ff fb6f 	bl	801bb34 <tcp_segs_free>
    pcb->ooseq = NULL;
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	2200      	movs	r2, #0
 801c45a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801c45c:	bf00      	nop
 801c45e:	3708      	adds	r7, #8
 801c460:	46bd      	mov	sp, r7
 801c462:	bd80      	pop	{r7, pc}

0801c464 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801c464:	b590      	push	{r4, r7, lr}
 801c466:	b08d      	sub	sp, #52	@ 0x34
 801c468:	af04      	add	r7, sp, #16
 801c46a:	6078      	str	r0, [r7, #4]
 801c46c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	2b00      	cmp	r3, #0
 801c472:	d105      	bne.n	801c480 <tcp_input+0x1c>
 801c474:	4b9b      	ldr	r3, [pc, #620]	@ (801c6e4 <tcp_input+0x280>)
 801c476:	2283      	movs	r2, #131	@ 0x83
 801c478:	499b      	ldr	r1, [pc, #620]	@ (801c6e8 <tcp_input+0x284>)
 801c47a:	489c      	ldr	r0, [pc, #624]	@ (801c6ec <tcp_input+0x288>)
 801c47c:	f008 fef2 	bl	8025264 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	685b      	ldr	r3, [r3, #4]
 801c484:	4a9a      	ldr	r2, [pc, #616]	@ (801c6f0 <tcp_input+0x28c>)
 801c486:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	895b      	ldrh	r3, [r3, #10]
 801c48c:	2b13      	cmp	r3, #19
 801c48e:	f240 83d1 	bls.w	801cc34 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801c492:	4b98      	ldr	r3, [pc, #608]	@ (801c6f4 <tcp_input+0x290>)
 801c494:	695b      	ldr	r3, [r3, #20]
 801c496:	4a97      	ldr	r2, [pc, #604]	@ (801c6f4 <tcp_input+0x290>)
 801c498:	6812      	ldr	r2, [r2, #0]
 801c49a:	4611      	mov	r1, r2
 801c49c:	4618      	mov	r0, r3
 801c49e:	f006 fbef 	bl	8022c80 <ip4_addr_isbroadcast_u32>
 801c4a2:	4603      	mov	r3, r0
 801c4a4:	2b00      	cmp	r3, #0
 801c4a6:	f040 83c7 	bne.w	801cc38 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801c4aa:	4b92      	ldr	r3, [pc, #584]	@ (801c6f4 <tcp_input+0x290>)
 801c4ac:	695b      	ldr	r3, [r3, #20]
 801c4ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801c4b2:	2be0      	cmp	r3, #224	@ 0xe0
 801c4b4:	f000 83c0 	beq.w	801cc38 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801c4b8:	4b8d      	ldr	r3, [pc, #564]	@ (801c6f0 <tcp_input+0x28c>)
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	899b      	ldrh	r3, [r3, #12]
 801c4be:	b29b      	uxth	r3, r3
 801c4c0:	4618      	mov	r0, r3
 801c4c2:	f7fc faa5 	bl	8018a10 <lwip_htons>
 801c4c6:	4603      	mov	r3, r0
 801c4c8:	0b1b      	lsrs	r3, r3, #12
 801c4ca:	b29b      	uxth	r3, r3
 801c4cc:	b2db      	uxtb	r3, r3
 801c4ce:	009b      	lsls	r3, r3, #2
 801c4d0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801c4d2:	7cbb      	ldrb	r3, [r7, #18]
 801c4d4:	2b13      	cmp	r3, #19
 801c4d6:	f240 83b1 	bls.w	801cc3c <tcp_input+0x7d8>
 801c4da:	7cbb      	ldrb	r3, [r7, #18]
 801c4dc:	b29a      	uxth	r2, r3
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	891b      	ldrh	r3, [r3, #8]
 801c4e2:	429a      	cmp	r2, r3
 801c4e4:	f200 83aa 	bhi.w	801cc3c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801c4e8:	7cbb      	ldrb	r3, [r7, #18]
 801c4ea:	b29b      	uxth	r3, r3
 801c4ec:	3b14      	subs	r3, #20
 801c4ee:	b29a      	uxth	r2, r3
 801c4f0:	4b81      	ldr	r3, [pc, #516]	@ (801c6f8 <tcp_input+0x294>)
 801c4f2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801c4f4:	4b81      	ldr	r3, [pc, #516]	@ (801c6fc <tcp_input+0x298>)
 801c4f6:	2200      	movs	r2, #0
 801c4f8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	895a      	ldrh	r2, [r3, #10]
 801c4fe:	7cbb      	ldrb	r3, [r7, #18]
 801c500:	b29b      	uxth	r3, r3
 801c502:	429a      	cmp	r2, r3
 801c504:	d309      	bcc.n	801c51a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801c506:	4b7c      	ldr	r3, [pc, #496]	@ (801c6f8 <tcp_input+0x294>)
 801c508:	881a      	ldrh	r2, [r3, #0]
 801c50a:	4b7d      	ldr	r3, [pc, #500]	@ (801c700 <tcp_input+0x29c>)
 801c50c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801c50e:	7cbb      	ldrb	r3, [r7, #18]
 801c510:	4619      	mov	r1, r3
 801c512:	6878      	ldr	r0, [r7, #4]
 801c514:	f7fd fea0 	bl	801a258 <pbuf_remove_header>
 801c518:	e04e      	b.n	801c5b8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	2b00      	cmp	r3, #0
 801c520:	d105      	bne.n	801c52e <tcp_input+0xca>
 801c522:	4b70      	ldr	r3, [pc, #448]	@ (801c6e4 <tcp_input+0x280>)
 801c524:	22c2      	movs	r2, #194	@ 0xc2
 801c526:	4977      	ldr	r1, [pc, #476]	@ (801c704 <tcp_input+0x2a0>)
 801c528:	4870      	ldr	r0, [pc, #448]	@ (801c6ec <tcp_input+0x288>)
 801c52a:	f008 fe9b 	bl	8025264 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801c52e:	2114      	movs	r1, #20
 801c530:	6878      	ldr	r0, [r7, #4]
 801c532:	f7fd fe91 	bl	801a258 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801c536:	687b      	ldr	r3, [r7, #4]
 801c538:	895a      	ldrh	r2, [r3, #10]
 801c53a:	4b71      	ldr	r3, [pc, #452]	@ (801c700 <tcp_input+0x29c>)
 801c53c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801c53e:	4b6e      	ldr	r3, [pc, #440]	@ (801c6f8 <tcp_input+0x294>)
 801c540:	881a      	ldrh	r2, [r3, #0]
 801c542:	4b6f      	ldr	r3, [pc, #444]	@ (801c700 <tcp_input+0x29c>)
 801c544:	881b      	ldrh	r3, [r3, #0]
 801c546:	1ad3      	subs	r3, r2, r3
 801c548:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801c54a:	4b6d      	ldr	r3, [pc, #436]	@ (801c700 <tcp_input+0x29c>)
 801c54c:	881b      	ldrh	r3, [r3, #0]
 801c54e:	4619      	mov	r1, r3
 801c550:	6878      	ldr	r0, [r7, #4]
 801c552:	f7fd fe81 	bl	801a258 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	681b      	ldr	r3, [r3, #0]
 801c55a:	895b      	ldrh	r3, [r3, #10]
 801c55c:	8a3a      	ldrh	r2, [r7, #16]
 801c55e:	429a      	cmp	r2, r3
 801c560:	f200 836e 	bhi.w	801cc40 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	681b      	ldr	r3, [r3, #0]
 801c568:	685b      	ldr	r3, [r3, #4]
 801c56a:	4a64      	ldr	r2, [pc, #400]	@ (801c6fc <tcp_input+0x298>)
 801c56c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	681b      	ldr	r3, [r3, #0]
 801c572:	8a3a      	ldrh	r2, [r7, #16]
 801c574:	4611      	mov	r1, r2
 801c576:	4618      	mov	r0, r3
 801c578:	f7fd fe6e 	bl	801a258 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	891a      	ldrh	r2, [r3, #8]
 801c580:	8a3b      	ldrh	r3, [r7, #16]
 801c582:	1ad3      	subs	r3, r2, r3
 801c584:	b29a      	uxth	r2, r3
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	895b      	ldrh	r3, [r3, #10]
 801c58e:	2b00      	cmp	r3, #0
 801c590:	d005      	beq.n	801c59e <tcp_input+0x13a>
 801c592:	4b54      	ldr	r3, [pc, #336]	@ (801c6e4 <tcp_input+0x280>)
 801c594:	22df      	movs	r2, #223	@ 0xdf
 801c596:	495c      	ldr	r1, [pc, #368]	@ (801c708 <tcp_input+0x2a4>)
 801c598:	4854      	ldr	r0, [pc, #336]	@ (801c6ec <tcp_input+0x288>)
 801c59a:	f008 fe63 	bl	8025264 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	891a      	ldrh	r2, [r3, #8]
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	681b      	ldr	r3, [r3, #0]
 801c5a6:	891b      	ldrh	r3, [r3, #8]
 801c5a8:	429a      	cmp	r2, r3
 801c5aa:	d005      	beq.n	801c5b8 <tcp_input+0x154>
 801c5ac:	4b4d      	ldr	r3, [pc, #308]	@ (801c6e4 <tcp_input+0x280>)
 801c5ae:	22e0      	movs	r2, #224	@ 0xe0
 801c5b0:	4956      	ldr	r1, [pc, #344]	@ (801c70c <tcp_input+0x2a8>)
 801c5b2:	484e      	ldr	r0, [pc, #312]	@ (801c6ec <tcp_input+0x288>)
 801c5b4:	f008 fe56 	bl	8025264 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801c5b8:	4b4d      	ldr	r3, [pc, #308]	@ (801c6f0 <tcp_input+0x28c>)
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	881b      	ldrh	r3, [r3, #0]
 801c5be:	b29b      	uxth	r3, r3
 801c5c0:	4a4b      	ldr	r2, [pc, #300]	@ (801c6f0 <tcp_input+0x28c>)
 801c5c2:	6814      	ldr	r4, [r2, #0]
 801c5c4:	4618      	mov	r0, r3
 801c5c6:	f7fc fa23 	bl	8018a10 <lwip_htons>
 801c5ca:	4603      	mov	r3, r0
 801c5cc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801c5ce:	4b48      	ldr	r3, [pc, #288]	@ (801c6f0 <tcp_input+0x28c>)
 801c5d0:	681b      	ldr	r3, [r3, #0]
 801c5d2:	885b      	ldrh	r3, [r3, #2]
 801c5d4:	b29b      	uxth	r3, r3
 801c5d6:	4a46      	ldr	r2, [pc, #280]	@ (801c6f0 <tcp_input+0x28c>)
 801c5d8:	6814      	ldr	r4, [r2, #0]
 801c5da:	4618      	mov	r0, r3
 801c5dc:	f7fc fa18 	bl	8018a10 <lwip_htons>
 801c5e0:	4603      	mov	r3, r0
 801c5e2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801c5e4:	4b42      	ldr	r3, [pc, #264]	@ (801c6f0 <tcp_input+0x28c>)
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	685b      	ldr	r3, [r3, #4]
 801c5ea:	4a41      	ldr	r2, [pc, #260]	@ (801c6f0 <tcp_input+0x28c>)
 801c5ec:	6814      	ldr	r4, [r2, #0]
 801c5ee:	4618      	mov	r0, r3
 801c5f0:	f7fc fa23 	bl	8018a3a <lwip_htonl>
 801c5f4:	4603      	mov	r3, r0
 801c5f6:	6063      	str	r3, [r4, #4]
 801c5f8:	6863      	ldr	r3, [r4, #4]
 801c5fa:	4a45      	ldr	r2, [pc, #276]	@ (801c710 <tcp_input+0x2ac>)
 801c5fc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801c5fe:	4b3c      	ldr	r3, [pc, #240]	@ (801c6f0 <tcp_input+0x28c>)
 801c600:	681b      	ldr	r3, [r3, #0]
 801c602:	689b      	ldr	r3, [r3, #8]
 801c604:	4a3a      	ldr	r2, [pc, #232]	@ (801c6f0 <tcp_input+0x28c>)
 801c606:	6814      	ldr	r4, [r2, #0]
 801c608:	4618      	mov	r0, r3
 801c60a:	f7fc fa16 	bl	8018a3a <lwip_htonl>
 801c60e:	4603      	mov	r3, r0
 801c610:	60a3      	str	r3, [r4, #8]
 801c612:	68a3      	ldr	r3, [r4, #8]
 801c614:	4a3f      	ldr	r2, [pc, #252]	@ (801c714 <tcp_input+0x2b0>)
 801c616:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801c618:	4b35      	ldr	r3, [pc, #212]	@ (801c6f0 <tcp_input+0x28c>)
 801c61a:	681b      	ldr	r3, [r3, #0]
 801c61c:	89db      	ldrh	r3, [r3, #14]
 801c61e:	b29b      	uxth	r3, r3
 801c620:	4a33      	ldr	r2, [pc, #204]	@ (801c6f0 <tcp_input+0x28c>)
 801c622:	6814      	ldr	r4, [r2, #0]
 801c624:	4618      	mov	r0, r3
 801c626:	f7fc f9f3 	bl	8018a10 <lwip_htons>
 801c62a:	4603      	mov	r3, r0
 801c62c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801c62e:	4b30      	ldr	r3, [pc, #192]	@ (801c6f0 <tcp_input+0x28c>)
 801c630:	681b      	ldr	r3, [r3, #0]
 801c632:	899b      	ldrh	r3, [r3, #12]
 801c634:	b29b      	uxth	r3, r3
 801c636:	4618      	mov	r0, r3
 801c638:	f7fc f9ea 	bl	8018a10 <lwip_htons>
 801c63c:	4603      	mov	r3, r0
 801c63e:	b2db      	uxtb	r3, r3
 801c640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c644:	b2da      	uxtb	r2, r3
 801c646:	4b34      	ldr	r3, [pc, #208]	@ (801c718 <tcp_input+0x2b4>)
 801c648:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	891a      	ldrh	r2, [r3, #8]
 801c64e:	4b33      	ldr	r3, [pc, #204]	@ (801c71c <tcp_input+0x2b8>)
 801c650:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801c652:	4b31      	ldr	r3, [pc, #196]	@ (801c718 <tcp_input+0x2b4>)
 801c654:	781b      	ldrb	r3, [r3, #0]
 801c656:	f003 0303 	and.w	r3, r3, #3
 801c65a:	2b00      	cmp	r3, #0
 801c65c:	d00c      	beq.n	801c678 <tcp_input+0x214>
    tcplen++;
 801c65e:	4b2f      	ldr	r3, [pc, #188]	@ (801c71c <tcp_input+0x2b8>)
 801c660:	881b      	ldrh	r3, [r3, #0]
 801c662:	3301      	adds	r3, #1
 801c664:	b29a      	uxth	r2, r3
 801c666:	4b2d      	ldr	r3, [pc, #180]	@ (801c71c <tcp_input+0x2b8>)
 801c668:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	891a      	ldrh	r2, [r3, #8]
 801c66e:	4b2b      	ldr	r3, [pc, #172]	@ (801c71c <tcp_input+0x2b8>)
 801c670:	881b      	ldrh	r3, [r3, #0]
 801c672:	429a      	cmp	r2, r3
 801c674:	f200 82e6 	bhi.w	801cc44 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801c678:	2300      	movs	r3, #0
 801c67a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c67c:	4b28      	ldr	r3, [pc, #160]	@ (801c720 <tcp_input+0x2bc>)
 801c67e:	681b      	ldr	r3, [r3, #0]
 801c680:	61fb      	str	r3, [r7, #28]
 801c682:	e09d      	b.n	801c7c0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801c684:	69fb      	ldr	r3, [r7, #28]
 801c686:	7d1b      	ldrb	r3, [r3, #20]
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d105      	bne.n	801c698 <tcp_input+0x234>
 801c68c:	4b15      	ldr	r3, [pc, #84]	@ (801c6e4 <tcp_input+0x280>)
 801c68e:	22fb      	movs	r2, #251	@ 0xfb
 801c690:	4924      	ldr	r1, [pc, #144]	@ (801c724 <tcp_input+0x2c0>)
 801c692:	4816      	ldr	r0, [pc, #88]	@ (801c6ec <tcp_input+0x288>)
 801c694:	f008 fde6 	bl	8025264 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801c698:	69fb      	ldr	r3, [r7, #28]
 801c69a:	7d1b      	ldrb	r3, [r3, #20]
 801c69c:	2b0a      	cmp	r3, #10
 801c69e:	d105      	bne.n	801c6ac <tcp_input+0x248>
 801c6a0:	4b10      	ldr	r3, [pc, #64]	@ (801c6e4 <tcp_input+0x280>)
 801c6a2:	22fc      	movs	r2, #252	@ 0xfc
 801c6a4:	4920      	ldr	r1, [pc, #128]	@ (801c728 <tcp_input+0x2c4>)
 801c6a6:	4811      	ldr	r0, [pc, #68]	@ (801c6ec <tcp_input+0x288>)
 801c6a8:	f008 fddc 	bl	8025264 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801c6ac:	69fb      	ldr	r3, [r7, #28]
 801c6ae:	7d1b      	ldrb	r3, [r3, #20]
 801c6b0:	2b01      	cmp	r3, #1
 801c6b2:	d105      	bne.n	801c6c0 <tcp_input+0x25c>
 801c6b4:	4b0b      	ldr	r3, [pc, #44]	@ (801c6e4 <tcp_input+0x280>)
 801c6b6:	22fd      	movs	r2, #253	@ 0xfd
 801c6b8:	491c      	ldr	r1, [pc, #112]	@ (801c72c <tcp_input+0x2c8>)
 801c6ba:	480c      	ldr	r0, [pc, #48]	@ (801c6ec <tcp_input+0x288>)
 801c6bc:	f008 fdd2 	bl	8025264 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c6c0:	69fb      	ldr	r3, [r7, #28]
 801c6c2:	7a1b      	ldrb	r3, [r3, #8]
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d033      	beq.n	801c730 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c6c8:	69fb      	ldr	r3, [r7, #28]
 801c6ca:	7a1a      	ldrb	r2, [r3, #8]
 801c6cc:	4b09      	ldr	r3, [pc, #36]	@ (801c6f4 <tcp_input+0x290>)
 801c6ce:	685b      	ldr	r3, [r3, #4]
 801c6d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c6d4:	3301      	adds	r3, #1
 801c6d6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c6d8:	429a      	cmp	r2, r3
 801c6da:	d029      	beq.n	801c730 <tcp_input+0x2cc>
      prev = pcb;
 801c6dc:	69fb      	ldr	r3, [r7, #28]
 801c6de:	61bb      	str	r3, [r7, #24]
      continue;
 801c6e0:	e06b      	b.n	801c7ba <tcp_input+0x356>
 801c6e2:	bf00      	nop
 801c6e4:	0802b54c 	.word	0x0802b54c
 801c6e8:	0802b580 	.word	0x0802b580
 801c6ec:	0802b598 	.word	0x0802b598
 801c6f0:	2400be74 	.word	0x2400be74
 801c6f4:	24008d4c 	.word	0x24008d4c
 801c6f8:	2400be78 	.word	0x2400be78
 801c6fc:	2400be7c 	.word	0x2400be7c
 801c700:	2400be7a 	.word	0x2400be7a
 801c704:	0802b5c0 	.word	0x0802b5c0
 801c708:	0802b5d0 	.word	0x0802b5d0
 801c70c:	0802b5dc 	.word	0x0802b5dc
 801c710:	2400be84 	.word	0x2400be84
 801c714:	2400be88 	.word	0x2400be88
 801c718:	2400be90 	.word	0x2400be90
 801c71c:	2400be8e 	.word	0x2400be8e
 801c720:	2400be58 	.word	0x2400be58
 801c724:	0802b5fc 	.word	0x0802b5fc
 801c728:	0802b624 	.word	0x0802b624
 801c72c:	0802b650 	.word	0x0802b650
    }

    if (pcb->remote_port == tcphdr->src &&
 801c730:	69fb      	ldr	r3, [r7, #28]
 801c732:	8b1a      	ldrh	r2, [r3, #24]
 801c734:	4b72      	ldr	r3, [pc, #456]	@ (801c900 <tcp_input+0x49c>)
 801c736:	681b      	ldr	r3, [r3, #0]
 801c738:	881b      	ldrh	r3, [r3, #0]
 801c73a:	b29b      	uxth	r3, r3
 801c73c:	429a      	cmp	r2, r3
 801c73e:	d13a      	bne.n	801c7b6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801c740:	69fb      	ldr	r3, [r7, #28]
 801c742:	8ada      	ldrh	r2, [r3, #22]
 801c744:	4b6e      	ldr	r3, [pc, #440]	@ (801c900 <tcp_input+0x49c>)
 801c746:	681b      	ldr	r3, [r3, #0]
 801c748:	885b      	ldrh	r3, [r3, #2]
 801c74a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801c74c:	429a      	cmp	r2, r3
 801c74e:	d132      	bne.n	801c7b6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c750:	69fb      	ldr	r3, [r7, #28]
 801c752:	685a      	ldr	r2, [r3, #4]
 801c754:	4b6b      	ldr	r3, [pc, #428]	@ (801c904 <tcp_input+0x4a0>)
 801c756:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801c758:	429a      	cmp	r2, r3
 801c75a:	d12c      	bne.n	801c7b6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c75c:	69fb      	ldr	r3, [r7, #28]
 801c75e:	681a      	ldr	r2, [r3, #0]
 801c760:	4b68      	ldr	r3, [pc, #416]	@ (801c904 <tcp_input+0x4a0>)
 801c762:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c764:	429a      	cmp	r2, r3
 801c766:	d126      	bne.n	801c7b6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801c768:	69fb      	ldr	r3, [r7, #28]
 801c76a:	68db      	ldr	r3, [r3, #12]
 801c76c:	69fa      	ldr	r2, [r7, #28]
 801c76e:	429a      	cmp	r2, r3
 801c770:	d106      	bne.n	801c780 <tcp_input+0x31c>
 801c772:	4b65      	ldr	r3, [pc, #404]	@ (801c908 <tcp_input+0x4a4>)
 801c774:	f240 120d 	movw	r2, #269	@ 0x10d
 801c778:	4964      	ldr	r1, [pc, #400]	@ (801c90c <tcp_input+0x4a8>)
 801c77a:	4865      	ldr	r0, [pc, #404]	@ (801c910 <tcp_input+0x4ac>)
 801c77c:	f008 fd72 	bl	8025264 <iprintf>
      if (prev != NULL) {
 801c780:	69bb      	ldr	r3, [r7, #24]
 801c782:	2b00      	cmp	r3, #0
 801c784:	d00a      	beq.n	801c79c <tcp_input+0x338>
        prev->next = pcb->next;
 801c786:	69fb      	ldr	r3, [r7, #28]
 801c788:	68da      	ldr	r2, [r3, #12]
 801c78a:	69bb      	ldr	r3, [r7, #24]
 801c78c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801c78e:	4b61      	ldr	r3, [pc, #388]	@ (801c914 <tcp_input+0x4b0>)
 801c790:	681a      	ldr	r2, [r3, #0]
 801c792:	69fb      	ldr	r3, [r7, #28]
 801c794:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801c796:	4a5f      	ldr	r2, [pc, #380]	@ (801c914 <tcp_input+0x4b0>)
 801c798:	69fb      	ldr	r3, [r7, #28]
 801c79a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801c79c:	69fb      	ldr	r3, [r7, #28]
 801c79e:	68db      	ldr	r3, [r3, #12]
 801c7a0:	69fa      	ldr	r2, [r7, #28]
 801c7a2:	429a      	cmp	r2, r3
 801c7a4:	d111      	bne.n	801c7ca <tcp_input+0x366>
 801c7a6:	4b58      	ldr	r3, [pc, #352]	@ (801c908 <tcp_input+0x4a4>)
 801c7a8:	f240 1215 	movw	r2, #277	@ 0x115
 801c7ac:	495a      	ldr	r1, [pc, #360]	@ (801c918 <tcp_input+0x4b4>)
 801c7ae:	4858      	ldr	r0, [pc, #352]	@ (801c910 <tcp_input+0x4ac>)
 801c7b0:	f008 fd58 	bl	8025264 <iprintf>
      break;
 801c7b4:	e009      	b.n	801c7ca <tcp_input+0x366>
    }
    prev = pcb;
 801c7b6:	69fb      	ldr	r3, [r7, #28]
 801c7b8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c7ba:	69fb      	ldr	r3, [r7, #28]
 801c7bc:	68db      	ldr	r3, [r3, #12]
 801c7be:	61fb      	str	r3, [r7, #28]
 801c7c0:	69fb      	ldr	r3, [r7, #28]
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	f47f af5e 	bne.w	801c684 <tcp_input+0x220>
 801c7c8:	e000      	b.n	801c7cc <tcp_input+0x368>
      break;
 801c7ca:	bf00      	nop
  }

  if (pcb == NULL) {
 801c7cc:	69fb      	ldr	r3, [r7, #28]
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	f040 80aa 	bne.w	801c928 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c7d4:	4b51      	ldr	r3, [pc, #324]	@ (801c91c <tcp_input+0x4b8>)
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	61fb      	str	r3, [r7, #28]
 801c7da:	e03f      	b.n	801c85c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801c7dc:	69fb      	ldr	r3, [r7, #28]
 801c7de:	7d1b      	ldrb	r3, [r3, #20]
 801c7e0:	2b0a      	cmp	r3, #10
 801c7e2:	d006      	beq.n	801c7f2 <tcp_input+0x38e>
 801c7e4:	4b48      	ldr	r3, [pc, #288]	@ (801c908 <tcp_input+0x4a4>)
 801c7e6:	f240 121f 	movw	r2, #287	@ 0x11f
 801c7ea:	494d      	ldr	r1, [pc, #308]	@ (801c920 <tcp_input+0x4bc>)
 801c7ec:	4848      	ldr	r0, [pc, #288]	@ (801c910 <tcp_input+0x4ac>)
 801c7ee:	f008 fd39 	bl	8025264 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c7f2:	69fb      	ldr	r3, [r7, #28]
 801c7f4:	7a1b      	ldrb	r3, [r3, #8]
 801c7f6:	2b00      	cmp	r3, #0
 801c7f8:	d009      	beq.n	801c80e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c7fa:	69fb      	ldr	r3, [r7, #28]
 801c7fc:	7a1a      	ldrb	r2, [r3, #8]
 801c7fe:	4b41      	ldr	r3, [pc, #260]	@ (801c904 <tcp_input+0x4a0>)
 801c800:	685b      	ldr	r3, [r3, #4]
 801c802:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c806:	3301      	adds	r3, #1
 801c808:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c80a:	429a      	cmp	r2, r3
 801c80c:	d122      	bne.n	801c854 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801c80e:	69fb      	ldr	r3, [r7, #28]
 801c810:	8b1a      	ldrh	r2, [r3, #24]
 801c812:	4b3b      	ldr	r3, [pc, #236]	@ (801c900 <tcp_input+0x49c>)
 801c814:	681b      	ldr	r3, [r3, #0]
 801c816:	881b      	ldrh	r3, [r3, #0]
 801c818:	b29b      	uxth	r3, r3
 801c81a:	429a      	cmp	r2, r3
 801c81c:	d11b      	bne.n	801c856 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801c81e:	69fb      	ldr	r3, [r7, #28]
 801c820:	8ada      	ldrh	r2, [r3, #22]
 801c822:	4b37      	ldr	r3, [pc, #220]	@ (801c900 <tcp_input+0x49c>)
 801c824:	681b      	ldr	r3, [r3, #0]
 801c826:	885b      	ldrh	r3, [r3, #2]
 801c828:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801c82a:	429a      	cmp	r2, r3
 801c82c:	d113      	bne.n	801c856 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c82e:	69fb      	ldr	r3, [r7, #28]
 801c830:	685a      	ldr	r2, [r3, #4]
 801c832:	4b34      	ldr	r3, [pc, #208]	@ (801c904 <tcp_input+0x4a0>)
 801c834:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801c836:	429a      	cmp	r2, r3
 801c838:	d10d      	bne.n	801c856 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c83a:	69fb      	ldr	r3, [r7, #28]
 801c83c:	681a      	ldr	r2, [r3, #0]
 801c83e:	4b31      	ldr	r3, [pc, #196]	@ (801c904 <tcp_input+0x4a0>)
 801c840:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c842:	429a      	cmp	r2, r3
 801c844:	d107      	bne.n	801c856 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801c846:	69f8      	ldr	r0, [r7, #28]
 801c848:	f000 fb56 	bl	801cef8 <tcp_timewait_input>
        }
        pbuf_free(p);
 801c84c:	6878      	ldr	r0, [r7, #4]
 801c84e:	f7fd fdbb 	bl	801a3c8 <pbuf_free>
        return;
 801c852:	e1fd      	b.n	801cc50 <tcp_input+0x7ec>
        continue;
 801c854:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c856:	69fb      	ldr	r3, [r7, #28]
 801c858:	68db      	ldr	r3, [r3, #12]
 801c85a:	61fb      	str	r3, [r7, #28]
 801c85c:	69fb      	ldr	r3, [r7, #28]
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d1bc      	bne.n	801c7dc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801c862:	2300      	movs	r3, #0
 801c864:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c866:	4b2f      	ldr	r3, [pc, #188]	@ (801c924 <tcp_input+0x4c0>)
 801c868:	681b      	ldr	r3, [r3, #0]
 801c86a:	617b      	str	r3, [r7, #20]
 801c86c:	e02a      	b.n	801c8c4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801c86e:	697b      	ldr	r3, [r7, #20]
 801c870:	7a1b      	ldrb	r3, [r3, #8]
 801c872:	2b00      	cmp	r3, #0
 801c874:	d00c      	beq.n	801c890 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c876:	697b      	ldr	r3, [r7, #20]
 801c878:	7a1a      	ldrb	r2, [r3, #8]
 801c87a:	4b22      	ldr	r3, [pc, #136]	@ (801c904 <tcp_input+0x4a0>)
 801c87c:	685b      	ldr	r3, [r3, #4]
 801c87e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c882:	3301      	adds	r3, #1
 801c884:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801c886:	429a      	cmp	r2, r3
 801c888:	d002      	beq.n	801c890 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801c88a:	697b      	ldr	r3, [r7, #20]
 801c88c:	61bb      	str	r3, [r7, #24]
        continue;
 801c88e:	e016      	b.n	801c8be <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801c890:	697b      	ldr	r3, [r7, #20]
 801c892:	8ada      	ldrh	r2, [r3, #22]
 801c894:	4b1a      	ldr	r3, [pc, #104]	@ (801c900 <tcp_input+0x49c>)
 801c896:	681b      	ldr	r3, [r3, #0]
 801c898:	885b      	ldrh	r3, [r3, #2]
 801c89a:	b29b      	uxth	r3, r3
 801c89c:	429a      	cmp	r2, r3
 801c89e:	d10c      	bne.n	801c8ba <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801c8a0:	697b      	ldr	r3, [r7, #20]
 801c8a2:	681a      	ldr	r2, [r3, #0]
 801c8a4:	4b17      	ldr	r3, [pc, #92]	@ (801c904 <tcp_input+0x4a0>)
 801c8a6:	695b      	ldr	r3, [r3, #20]
 801c8a8:	429a      	cmp	r2, r3
 801c8aa:	d00f      	beq.n	801c8cc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801c8ac:	697b      	ldr	r3, [r7, #20]
 801c8ae:	2b00      	cmp	r3, #0
 801c8b0:	d00d      	beq.n	801c8ce <tcp_input+0x46a>
 801c8b2:	697b      	ldr	r3, [r7, #20]
 801c8b4:	681b      	ldr	r3, [r3, #0]
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	d009      	beq.n	801c8ce <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801c8ba:	697b      	ldr	r3, [r7, #20]
 801c8bc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c8be:	697b      	ldr	r3, [r7, #20]
 801c8c0:	68db      	ldr	r3, [r3, #12]
 801c8c2:	617b      	str	r3, [r7, #20]
 801c8c4:	697b      	ldr	r3, [r7, #20]
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	d1d1      	bne.n	801c86e <tcp_input+0x40a>
 801c8ca:	e000      	b.n	801c8ce <tcp_input+0x46a>
            break;
 801c8cc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801c8ce:	697b      	ldr	r3, [r7, #20]
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d029      	beq.n	801c928 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801c8d4:	69bb      	ldr	r3, [r7, #24]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d00a      	beq.n	801c8f0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801c8da:	697b      	ldr	r3, [r7, #20]
 801c8dc:	68da      	ldr	r2, [r3, #12]
 801c8de:	69bb      	ldr	r3, [r7, #24]
 801c8e0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801c8e2:	4b10      	ldr	r3, [pc, #64]	@ (801c924 <tcp_input+0x4c0>)
 801c8e4:	681a      	ldr	r2, [r3, #0]
 801c8e6:	697b      	ldr	r3, [r7, #20]
 801c8e8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801c8ea:	4a0e      	ldr	r2, [pc, #56]	@ (801c924 <tcp_input+0x4c0>)
 801c8ec:	697b      	ldr	r3, [r7, #20]
 801c8ee:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801c8f0:	6978      	ldr	r0, [r7, #20]
 801c8f2:	f000 fa03 	bl	801ccfc <tcp_listen_input>
      }
      pbuf_free(p);
 801c8f6:	6878      	ldr	r0, [r7, #4]
 801c8f8:	f7fd fd66 	bl	801a3c8 <pbuf_free>
      return;
 801c8fc:	e1a8      	b.n	801cc50 <tcp_input+0x7ec>
 801c8fe:	bf00      	nop
 801c900:	2400be74 	.word	0x2400be74
 801c904:	24008d4c 	.word	0x24008d4c
 801c908:	0802b54c 	.word	0x0802b54c
 801c90c:	0802b678 	.word	0x0802b678
 801c910:	0802b598 	.word	0x0802b598
 801c914:	2400be58 	.word	0x2400be58
 801c918:	0802b6a4 	.word	0x0802b6a4
 801c91c:	2400be5c 	.word	0x2400be5c
 801c920:	0802b6d0 	.word	0x0802b6d0
 801c924:	2400be54 	.word	0x2400be54
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801c928:	69fb      	ldr	r3, [r7, #28]
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	f000 8158 	beq.w	801cbe0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801c930:	4b95      	ldr	r3, [pc, #596]	@ (801cb88 <tcp_input+0x724>)
 801c932:	2200      	movs	r2, #0
 801c934:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	891a      	ldrh	r2, [r3, #8]
 801c93a:	4b93      	ldr	r3, [pc, #588]	@ (801cb88 <tcp_input+0x724>)
 801c93c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801c93e:	4a92      	ldr	r2, [pc, #584]	@ (801cb88 <tcp_input+0x724>)
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801c944:	4b91      	ldr	r3, [pc, #580]	@ (801cb8c <tcp_input+0x728>)
 801c946:	681b      	ldr	r3, [r3, #0]
 801c948:	4a8f      	ldr	r2, [pc, #572]	@ (801cb88 <tcp_input+0x724>)
 801c94a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801c94c:	4b90      	ldr	r3, [pc, #576]	@ (801cb90 <tcp_input+0x72c>)
 801c94e:	2200      	movs	r2, #0
 801c950:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801c952:	4b90      	ldr	r3, [pc, #576]	@ (801cb94 <tcp_input+0x730>)
 801c954:	2200      	movs	r2, #0
 801c956:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801c958:	4b8f      	ldr	r3, [pc, #572]	@ (801cb98 <tcp_input+0x734>)
 801c95a:	2200      	movs	r2, #0
 801c95c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801c95e:	4b8f      	ldr	r3, [pc, #572]	@ (801cb9c <tcp_input+0x738>)
 801c960:	781b      	ldrb	r3, [r3, #0]
 801c962:	f003 0308 	and.w	r3, r3, #8
 801c966:	2b00      	cmp	r3, #0
 801c968:	d006      	beq.n	801c978 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801c96a:	687b      	ldr	r3, [r7, #4]
 801c96c:	7b5b      	ldrb	r3, [r3, #13]
 801c96e:	f043 0301 	orr.w	r3, r3, #1
 801c972:	b2da      	uxtb	r2, r3
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801c978:	69fb      	ldr	r3, [r7, #28]
 801c97a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d017      	beq.n	801c9b0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801c980:	69f8      	ldr	r0, [r7, #28]
 801c982:	f7ff f85b 	bl	801ba3c <tcp_process_refused_data>
 801c986:	4603      	mov	r3, r0
 801c988:	f113 0f0d 	cmn.w	r3, #13
 801c98c:	d007      	beq.n	801c99e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801c98e:	69fb      	ldr	r3, [r7, #28]
 801c990:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801c992:	2b00      	cmp	r3, #0
 801c994:	d00c      	beq.n	801c9b0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801c996:	4b82      	ldr	r3, [pc, #520]	@ (801cba0 <tcp_input+0x73c>)
 801c998:	881b      	ldrh	r3, [r3, #0]
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	d008      	beq.n	801c9b0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801c99e:	69fb      	ldr	r3, [r7, #28]
 801c9a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	f040 80e3 	bne.w	801cb6e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801c9a8:	69f8      	ldr	r0, [r7, #28]
 801c9aa:	f003 fdff 	bl	80205ac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801c9ae:	e0de      	b.n	801cb6e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801c9b0:	4a7c      	ldr	r2, [pc, #496]	@ (801cba4 <tcp_input+0x740>)
 801c9b2:	69fb      	ldr	r3, [r7, #28]
 801c9b4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801c9b6:	69f8      	ldr	r0, [r7, #28]
 801c9b8:	f000 fb18 	bl	801cfec <tcp_process>
 801c9bc:	4603      	mov	r3, r0
 801c9be:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801c9c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c9c4:	f113 0f0d 	cmn.w	r3, #13
 801c9c8:	f000 80d3 	beq.w	801cb72 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801c9cc:	4b71      	ldr	r3, [pc, #452]	@ (801cb94 <tcp_input+0x730>)
 801c9ce:	781b      	ldrb	r3, [r3, #0]
 801c9d0:	f003 0308 	and.w	r3, r3, #8
 801c9d4:	2b00      	cmp	r3, #0
 801c9d6:	d015      	beq.n	801ca04 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801c9d8:	69fb      	ldr	r3, [r7, #28]
 801c9da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	d008      	beq.n	801c9f4 <tcp_input+0x590>
 801c9e2:	69fb      	ldr	r3, [r7, #28]
 801c9e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c9e8:	69fa      	ldr	r2, [r7, #28]
 801c9ea:	6912      	ldr	r2, [r2, #16]
 801c9ec:	f06f 010d 	mvn.w	r1, #13
 801c9f0:	4610      	mov	r0, r2
 801c9f2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801c9f4:	69f9      	ldr	r1, [r7, #28]
 801c9f6:	486c      	ldr	r0, [pc, #432]	@ (801cba8 <tcp_input+0x744>)
 801c9f8:	f7ff fbbc 	bl	801c174 <tcp_pcb_remove>
        tcp_free(pcb);
 801c9fc:	69f8      	ldr	r0, [r7, #28]
 801c9fe:	f7fd ff9f 	bl	801a940 <tcp_free>
 801ca02:	e0da      	b.n	801cbba <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801ca04:	2300      	movs	r3, #0
 801ca06:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801ca08:	4b63      	ldr	r3, [pc, #396]	@ (801cb98 <tcp_input+0x734>)
 801ca0a:	881b      	ldrh	r3, [r3, #0]
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	d01d      	beq.n	801ca4c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801ca10:	4b61      	ldr	r3, [pc, #388]	@ (801cb98 <tcp_input+0x734>)
 801ca12:	881b      	ldrh	r3, [r3, #0]
 801ca14:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801ca16:	69fb      	ldr	r3, [r7, #28]
 801ca18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	d00a      	beq.n	801ca36 <tcp_input+0x5d2>
 801ca20:	69fb      	ldr	r3, [r7, #28]
 801ca22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ca26:	69fa      	ldr	r2, [r7, #28]
 801ca28:	6910      	ldr	r0, [r2, #16]
 801ca2a:	89fa      	ldrh	r2, [r7, #14]
 801ca2c:	69f9      	ldr	r1, [r7, #28]
 801ca2e:	4798      	blx	r3
 801ca30:	4603      	mov	r3, r0
 801ca32:	74fb      	strb	r3, [r7, #19]
 801ca34:	e001      	b.n	801ca3a <tcp_input+0x5d6>
 801ca36:	2300      	movs	r3, #0
 801ca38:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801ca3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ca3e:	f113 0f0d 	cmn.w	r3, #13
 801ca42:	f000 8098 	beq.w	801cb76 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801ca46:	4b54      	ldr	r3, [pc, #336]	@ (801cb98 <tcp_input+0x734>)
 801ca48:	2200      	movs	r2, #0
 801ca4a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801ca4c:	69f8      	ldr	r0, [r7, #28]
 801ca4e:	f000 f915 	bl	801cc7c <tcp_input_delayed_close>
 801ca52:	4603      	mov	r3, r0
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	f040 8090 	bne.w	801cb7a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801ca5a:	4b4d      	ldr	r3, [pc, #308]	@ (801cb90 <tcp_input+0x72c>)
 801ca5c:	681b      	ldr	r3, [r3, #0]
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d041      	beq.n	801cae6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801ca62:	69fb      	ldr	r3, [r7, #28]
 801ca64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	d006      	beq.n	801ca78 <tcp_input+0x614>
 801ca6a:	4b50      	ldr	r3, [pc, #320]	@ (801cbac <tcp_input+0x748>)
 801ca6c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801ca70:	494f      	ldr	r1, [pc, #316]	@ (801cbb0 <tcp_input+0x74c>)
 801ca72:	4850      	ldr	r0, [pc, #320]	@ (801cbb4 <tcp_input+0x750>)
 801ca74:	f008 fbf6 	bl	8025264 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801ca78:	69fb      	ldr	r3, [r7, #28]
 801ca7a:	8b5b      	ldrh	r3, [r3, #26]
 801ca7c:	f003 0310 	and.w	r3, r3, #16
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	d008      	beq.n	801ca96 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801ca84:	4b42      	ldr	r3, [pc, #264]	@ (801cb90 <tcp_input+0x72c>)
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	4618      	mov	r0, r3
 801ca8a:	f7fd fc9d 	bl	801a3c8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801ca8e:	69f8      	ldr	r0, [r7, #28]
 801ca90:	f7fe fa9a 	bl	801afc8 <tcp_abort>
            goto aborted;
 801ca94:	e091      	b.n	801cbba <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801ca96:	69fb      	ldr	r3, [r7, #28]
 801ca98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d00c      	beq.n	801caba <tcp_input+0x656>
 801caa0:	69fb      	ldr	r3, [r7, #28]
 801caa2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801caa6:	69fb      	ldr	r3, [r7, #28]
 801caa8:	6918      	ldr	r0, [r3, #16]
 801caaa:	4b39      	ldr	r3, [pc, #228]	@ (801cb90 <tcp_input+0x72c>)
 801caac:	681a      	ldr	r2, [r3, #0]
 801caae:	2300      	movs	r3, #0
 801cab0:	69f9      	ldr	r1, [r7, #28]
 801cab2:	47a0      	blx	r4
 801cab4:	4603      	mov	r3, r0
 801cab6:	74fb      	strb	r3, [r7, #19]
 801cab8:	e008      	b.n	801cacc <tcp_input+0x668>
 801caba:	4b35      	ldr	r3, [pc, #212]	@ (801cb90 <tcp_input+0x72c>)
 801cabc:	681a      	ldr	r2, [r3, #0]
 801cabe:	2300      	movs	r3, #0
 801cac0:	69f9      	ldr	r1, [r7, #28]
 801cac2:	2000      	movs	r0, #0
 801cac4:	f7ff f890 	bl	801bbe8 <tcp_recv_null>
 801cac8:	4603      	mov	r3, r0
 801caca:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801cacc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cad0:	f113 0f0d 	cmn.w	r3, #13
 801cad4:	d053      	beq.n	801cb7e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801cad6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cada:	2b00      	cmp	r3, #0
 801cadc:	d003      	beq.n	801cae6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801cade:	4b2c      	ldr	r3, [pc, #176]	@ (801cb90 <tcp_input+0x72c>)
 801cae0:	681a      	ldr	r2, [r3, #0]
 801cae2:	69fb      	ldr	r3, [r7, #28]
 801cae4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801cae6:	4b2b      	ldr	r3, [pc, #172]	@ (801cb94 <tcp_input+0x730>)
 801cae8:	781b      	ldrb	r3, [r3, #0]
 801caea:	f003 0320 	and.w	r3, r3, #32
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d030      	beq.n	801cb54 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801caf2:	69fb      	ldr	r3, [r7, #28]
 801caf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d009      	beq.n	801cb0e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801cafa:	69fb      	ldr	r3, [r7, #28]
 801cafc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cafe:	7b5a      	ldrb	r2, [r3, #13]
 801cb00:	69fb      	ldr	r3, [r7, #28]
 801cb02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cb04:	f042 0220 	orr.w	r2, r2, #32
 801cb08:	b2d2      	uxtb	r2, r2
 801cb0a:	735a      	strb	r2, [r3, #13]
 801cb0c:	e022      	b.n	801cb54 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801cb0e:	69fb      	ldr	r3, [r7, #28]
 801cb10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801cb12:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801cb16:	d005      	beq.n	801cb24 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801cb18:	69fb      	ldr	r3, [r7, #28]
 801cb1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801cb1c:	3301      	adds	r3, #1
 801cb1e:	b29a      	uxth	r2, r3
 801cb20:	69fb      	ldr	r3, [r7, #28]
 801cb22:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801cb24:	69fb      	ldr	r3, [r7, #28]
 801cb26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801cb2a:	2b00      	cmp	r3, #0
 801cb2c:	d00b      	beq.n	801cb46 <tcp_input+0x6e2>
 801cb2e:	69fb      	ldr	r3, [r7, #28]
 801cb30:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801cb34:	69fb      	ldr	r3, [r7, #28]
 801cb36:	6918      	ldr	r0, [r3, #16]
 801cb38:	2300      	movs	r3, #0
 801cb3a:	2200      	movs	r2, #0
 801cb3c:	69f9      	ldr	r1, [r7, #28]
 801cb3e:	47a0      	blx	r4
 801cb40:	4603      	mov	r3, r0
 801cb42:	74fb      	strb	r3, [r7, #19]
 801cb44:	e001      	b.n	801cb4a <tcp_input+0x6e6>
 801cb46:	2300      	movs	r3, #0
 801cb48:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801cb4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cb4e:	f113 0f0d 	cmn.w	r3, #13
 801cb52:	d016      	beq.n	801cb82 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801cb54:	4b13      	ldr	r3, [pc, #76]	@ (801cba4 <tcp_input+0x740>)
 801cb56:	2200      	movs	r2, #0
 801cb58:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801cb5a:	69f8      	ldr	r0, [r7, #28]
 801cb5c:	f000 f88e 	bl	801cc7c <tcp_input_delayed_close>
 801cb60:	4603      	mov	r3, r0
 801cb62:	2b00      	cmp	r3, #0
 801cb64:	d128      	bne.n	801cbb8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801cb66:	69f8      	ldr	r0, [r7, #28]
 801cb68:	f002 ff1a 	bl	801f9a0 <tcp_output>
 801cb6c:	e025      	b.n	801cbba <tcp_input+0x756>
        goto aborted;
 801cb6e:	bf00      	nop
 801cb70:	e023      	b.n	801cbba <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801cb72:	bf00      	nop
 801cb74:	e021      	b.n	801cbba <tcp_input+0x756>
              goto aborted;
 801cb76:	bf00      	nop
 801cb78:	e01f      	b.n	801cbba <tcp_input+0x756>
          goto aborted;
 801cb7a:	bf00      	nop
 801cb7c:	e01d      	b.n	801cbba <tcp_input+0x756>
            goto aborted;
 801cb7e:	bf00      	nop
 801cb80:	e01b      	b.n	801cbba <tcp_input+0x756>
              goto aborted;
 801cb82:	bf00      	nop
 801cb84:	e019      	b.n	801cbba <tcp_input+0x756>
 801cb86:	bf00      	nop
 801cb88:	2400be64 	.word	0x2400be64
 801cb8c:	2400be74 	.word	0x2400be74
 801cb90:	2400be94 	.word	0x2400be94
 801cb94:	2400be91 	.word	0x2400be91
 801cb98:	2400be8c 	.word	0x2400be8c
 801cb9c:	2400be90 	.word	0x2400be90
 801cba0:	2400be8e 	.word	0x2400be8e
 801cba4:	2400be98 	.word	0x2400be98
 801cba8:	2400be58 	.word	0x2400be58
 801cbac:	0802b54c 	.word	0x0802b54c
 801cbb0:	0802b700 	.word	0x0802b700
 801cbb4:	0802b598 	.word	0x0802b598
          goto aborted;
 801cbb8:	bf00      	nop
    tcp_input_pcb = NULL;
 801cbba:	4b27      	ldr	r3, [pc, #156]	@ (801cc58 <tcp_input+0x7f4>)
 801cbbc:	2200      	movs	r2, #0
 801cbbe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801cbc0:	4b26      	ldr	r3, [pc, #152]	@ (801cc5c <tcp_input+0x7f8>)
 801cbc2:	2200      	movs	r2, #0
 801cbc4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801cbc6:	4b26      	ldr	r3, [pc, #152]	@ (801cc60 <tcp_input+0x7fc>)
 801cbc8:	685b      	ldr	r3, [r3, #4]
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d03f      	beq.n	801cc4e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801cbce:	4b24      	ldr	r3, [pc, #144]	@ (801cc60 <tcp_input+0x7fc>)
 801cbd0:	685b      	ldr	r3, [r3, #4]
 801cbd2:	4618      	mov	r0, r3
 801cbd4:	f7fd fbf8 	bl	801a3c8 <pbuf_free>
      inseg.p = NULL;
 801cbd8:	4b21      	ldr	r3, [pc, #132]	@ (801cc60 <tcp_input+0x7fc>)
 801cbda:	2200      	movs	r2, #0
 801cbdc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801cbde:	e036      	b.n	801cc4e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801cbe0:	4b20      	ldr	r3, [pc, #128]	@ (801cc64 <tcp_input+0x800>)
 801cbe2:	681b      	ldr	r3, [r3, #0]
 801cbe4:	899b      	ldrh	r3, [r3, #12]
 801cbe6:	b29b      	uxth	r3, r3
 801cbe8:	4618      	mov	r0, r3
 801cbea:	f7fb ff11 	bl	8018a10 <lwip_htons>
 801cbee:	4603      	mov	r3, r0
 801cbf0:	b2db      	uxtb	r3, r3
 801cbf2:	f003 0304 	and.w	r3, r3, #4
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	d118      	bne.n	801cc2c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cbfa:	4b1b      	ldr	r3, [pc, #108]	@ (801cc68 <tcp_input+0x804>)
 801cbfc:	6819      	ldr	r1, [r3, #0]
 801cbfe:	4b1b      	ldr	r3, [pc, #108]	@ (801cc6c <tcp_input+0x808>)
 801cc00:	881b      	ldrh	r3, [r3, #0]
 801cc02:	461a      	mov	r2, r3
 801cc04:	4b1a      	ldr	r3, [pc, #104]	@ (801cc70 <tcp_input+0x80c>)
 801cc06:	681b      	ldr	r3, [r3, #0]
 801cc08:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cc0a:	4b16      	ldr	r3, [pc, #88]	@ (801cc64 <tcp_input+0x800>)
 801cc0c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cc0e:	885b      	ldrh	r3, [r3, #2]
 801cc10:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cc12:	4a14      	ldr	r2, [pc, #80]	@ (801cc64 <tcp_input+0x800>)
 801cc14:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cc16:	8812      	ldrh	r2, [r2, #0]
 801cc18:	b292      	uxth	r2, r2
 801cc1a:	9202      	str	r2, [sp, #8]
 801cc1c:	9301      	str	r3, [sp, #4]
 801cc1e:	4b15      	ldr	r3, [pc, #84]	@ (801cc74 <tcp_input+0x810>)
 801cc20:	9300      	str	r3, [sp, #0]
 801cc22:	4b15      	ldr	r3, [pc, #84]	@ (801cc78 <tcp_input+0x814>)
 801cc24:	4602      	mov	r2, r0
 801cc26:	2000      	movs	r0, #0
 801cc28:	f003 fc6e 	bl	8020508 <tcp_rst>
    pbuf_free(p);
 801cc2c:	6878      	ldr	r0, [r7, #4]
 801cc2e:	f7fd fbcb 	bl	801a3c8 <pbuf_free>
  return;
 801cc32:	e00c      	b.n	801cc4e <tcp_input+0x7ea>
    goto dropped;
 801cc34:	bf00      	nop
 801cc36:	e006      	b.n	801cc46 <tcp_input+0x7e2>
    goto dropped;
 801cc38:	bf00      	nop
 801cc3a:	e004      	b.n	801cc46 <tcp_input+0x7e2>
    goto dropped;
 801cc3c:	bf00      	nop
 801cc3e:	e002      	b.n	801cc46 <tcp_input+0x7e2>
      goto dropped;
 801cc40:	bf00      	nop
 801cc42:	e000      	b.n	801cc46 <tcp_input+0x7e2>
      goto dropped;
 801cc44:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801cc46:	6878      	ldr	r0, [r7, #4]
 801cc48:	f7fd fbbe 	bl	801a3c8 <pbuf_free>
 801cc4c:	e000      	b.n	801cc50 <tcp_input+0x7ec>
  return;
 801cc4e:	bf00      	nop
}
 801cc50:	3724      	adds	r7, #36	@ 0x24
 801cc52:	46bd      	mov	sp, r7
 801cc54:	bd90      	pop	{r4, r7, pc}
 801cc56:	bf00      	nop
 801cc58:	2400be98 	.word	0x2400be98
 801cc5c:	2400be94 	.word	0x2400be94
 801cc60:	2400be64 	.word	0x2400be64
 801cc64:	2400be74 	.word	0x2400be74
 801cc68:	2400be88 	.word	0x2400be88
 801cc6c:	2400be8e 	.word	0x2400be8e
 801cc70:	2400be84 	.word	0x2400be84
 801cc74:	24008d5c 	.word	0x24008d5c
 801cc78:	24008d60 	.word	0x24008d60

0801cc7c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801cc7c:	b580      	push	{r7, lr}
 801cc7e:	b082      	sub	sp, #8
 801cc80:	af00      	add	r7, sp, #0
 801cc82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	d106      	bne.n	801cc98 <tcp_input_delayed_close+0x1c>
 801cc8a:	4b17      	ldr	r3, [pc, #92]	@ (801cce8 <tcp_input_delayed_close+0x6c>)
 801cc8c:	f240 225a 	movw	r2, #602	@ 0x25a
 801cc90:	4916      	ldr	r1, [pc, #88]	@ (801ccec <tcp_input_delayed_close+0x70>)
 801cc92:	4817      	ldr	r0, [pc, #92]	@ (801ccf0 <tcp_input_delayed_close+0x74>)
 801cc94:	f008 fae6 	bl	8025264 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801cc98:	4b16      	ldr	r3, [pc, #88]	@ (801ccf4 <tcp_input_delayed_close+0x78>)
 801cc9a:	781b      	ldrb	r3, [r3, #0]
 801cc9c:	f003 0310 	and.w	r3, r3, #16
 801cca0:	2b00      	cmp	r3, #0
 801cca2:	d01c      	beq.n	801ccde <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	8b5b      	ldrh	r3, [r3, #26]
 801cca8:	f003 0310 	and.w	r3, r3, #16
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d10d      	bne.n	801cccc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d008      	beq.n	801cccc <tcp_input_delayed_close+0x50>
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ccc0:	687a      	ldr	r2, [r7, #4]
 801ccc2:	6912      	ldr	r2, [r2, #16]
 801ccc4:	f06f 010e 	mvn.w	r1, #14
 801ccc8:	4610      	mov	r0, r2
 801ccca:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801cccc:	6879      	ldr	r1, [r7, #4]
 801ccce:	480a      	ldr	r0, [pc, #40]	@ (801ccf8 <tcp_input_delayed_close+0x7c>)
 801ccd0:	f7ff fa50 	bl	801c174 <tcp_pcb_remove>
    tcp_free(pcb);
 801ccd4:	6878      	ldr	r0, [r7, #4]
 801ccd6:	f7fd fe33 	bl	801a940 <tcp_free>
    return 1;
 801ccda:	2301      	movs	r3, #1
 801ccdc:	e000      	b.n	801cce0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801ccde:	2300      	movs	r3, #0
}
 801cce0:	4618      	mov	r0, r3
 801cce2:	3708      	adds	r7, #8
 801cce4:	46bd      	mov	sp, r7
 801cce6:	bd80      	pop	{r7, pc}
 801cce8:	0802b54c 	.word	0x0802b54c
 801ccec:	0802b71c 	.word	0x0802b71c
 801ccf0:	0802b598 	.word	0x0802b598
 801ccf4:	2400be91 	.word	0x2400be91
 801ccf8:	2400be58 	.word	0x2400be58

0801ccfc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801ccfc:	b590      	push	{r4, r7, lr}
 801ccfe:	b08b      	sub	sp, #44	@ 0x2c
 801cd00:	af04      	add	r7, sp, #16
 801cd02:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801cd04:	4b6f      	ldr	r3, [pc, #444]	@ (801cec4 <tcp_listen_input+0x1c8>)
 801cd06:	781b      	ldrb	r3, [r3, #0]
 801cd08:	f003 0304 	and.w	r3, r3, #4
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	f040 80d2 	bne.w	801ceb6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d106      	bne.n	801cd26 <tcp_listen_input+0x2a>
 801cd18:	4b6b      	ldr	r3, [pc, #428]	@ (801cec8 <tcp_listen_input+0x1cc>)
 801cd1a:	f240 2281 	movw	r2, #641	@ 0x281
 801cd1e:	496b      	ldr	r1, [pc, #428]	@ (801cecc <tcp_listen_input+0x1d0>)
 801cd20:	486b      	ldr	r0, [pc, #428]	@ (801ced0 <tcp_listen_input+0x1d4>)
 801cd22:	f008 fa9f 	bl	8025264 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801cd26:	4b67      	ldr	r3, [pc, #412]	@ (801cec4 <tcp_listen_input+0x1c8>)
 801cd28:	781b      	ldrb	r3, [r3, #0]
 801cd2a:	f003 0310 	and.w	r3, r3, #16
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d019      	beq.n	801cd66 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cd32:	4b68      	ldr	r3, [pc, #416]	@ (801ced4 <tcp_listen_input+0x1d8>)
 801cd34:	6819      	ldr	r1, [r3, #0]
 801cd36:	4b68      	ldr	r3, [pc, #416]	@ (801ced8 <tcp_listen_input+0x1dc>)
 801cd38:	881b      	ldrh	r3, [r3, #0]
 801cd3a:	461a      	mov	r2, r3
 801cd3c:	4b67      	ldr	r3, [pc, #412]	@ (801cedc <tcp_listen_input+0x1e0>)
 801cd3e:	681b      	ldr	r3, [r3, #0]
 801cd40:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cd42:	4b67      	ldr	r3, [pc, #412]	@ (801cee0 <tcp_listen_input+0x1e4>)
 801cd44:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cd46:	885b      	ldrh	r3, [r3, #2]
 801cd48:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cd4a:	4a65      	ldr	r2, [pc, #404]	@ (801cee0 <tcp_listen_input+0x1e4>)
 801cd4c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cd4e:	8812      	ldrh	r2, [r2, #0]
 801cd50:	b292      	uxth	r2, r2
 801cd52:	9202      	str	r2, [sp, #8]
 801cd54:	9301      	str	r3, [sp, #4]
 801cd56:	4b63      	ldr	r3, [pc, #396]	@ (801cee4 <tcp_listen_input+0x1e8>)
 801cd58:	9300      	str	r3, [sp, #0]
 801cd5a:	4b63      	ldr	r3, [pc, #396]	@ (801cee8 <tcp_listen_input+0x1ec>)
 801cd5c:	4602      	mov	r2, r0
 801cd5e:	6878      	ldr	r0, [r7, #4]
 801cd60:	f003 fbd2 	bl	8020508 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801cd64:	e0a9      	b.n	801ceba <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801cd66:	4b57      	ldr	r3, [pc, #348]	@ (801cec4 <tcp_listen_input+0x1c8>)
 801cd68:	781b      	ldrb	r3, [r3, #0]
 801cd6a:	f003 0302 	and.w	r3, r3, #2
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	f000 80a3 	beq.w	801ceba <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801cd74:	687b      	ldr	r3, [r7, #4]
 801cd76:	7d5b      	ldrb	r3, [r3, #21]
 801cd78:	4618      	mov	r0, r3
 801cd7a:	f7ff f859 	bl	801be30 <tcp_alloc>
 801cd7e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801cd80:	697b      	ldr	r3, [r7, #20]
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	d111      	bne.n	801cdaa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	699b      	ldr	r3, [r3, #24]
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d00a      	beq.n	801cda4 <tcp_listen_input+0xa8>
 801cd8e:	687b      	ldr	r3, [r7, #4]
 801cd90:	699b      	ldr	r3, [r3, #24]
 801cd92:	687a      	ldr	r2, [r7, #4]
 801cd94:	6910      	ldr	r0, [r2, #16]
 801cd96:	f04f 32ff 	mov.w	r2, #4294967295
 801cd9a:	2100      	movs	r1, #0
 801cd9c:	4798      	blx	r3
 801cd9e:	4603      	mov	r3, r0
 801cda0:	73bb      	strb	r3, [r7, #14]
      return;
 801cda2:	e08b      	b.n	801cebc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801cda4:	23f0      	movs	r3, #240	@ 0xf0
 801cda6:	73bb      	strb	r3, [r7, #14]
      return;
 801cda8:	e088      	b.n	801cebc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801cdaa:	4b50      	ldr	r3, [pc, #320]	@ (801ceec <tcp_listen_input+0x1f0>)
 801cdac:	695a      	ldr	r2, [r3, #20]
 801cdae:	697b      	ldr	r3, [r7, #20]
 801cdb0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801cdb2:	4b4e      	ldr	r3, [pc, #312]	@ (801ceec <tcp_listen_input+0x1f0>)
 801cdb4:	691a      	ldr	r2, [r3, #16]
 801cdb6:	697b      	ldr	r3, [r7, #20]
 801cdb8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	8ada      	ldrh	r2, [r3, #22]
 801cdbe:	697b      	ldr	r3, [r7, #20]
 801cdc0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801cdc2:	4b47      	ldr	r3, [pc, #284]	@ (801cee0 <tcp_listen_input+0x1e4>)
 801cdc4:	681b      	ldr	r3, [r3, #0]
 801cdc6:	881b      	ldrh	r3, [r3, #0]
 801cdc8:	b29a      	uxth	r2, r3
 801cdca:	697b      	ldr	r3, [r7, #20]
 801cdcc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801cdce:	697b      	ldr	r3, [r7, #20]
 801cdd0:	2203      	movs	r2, #3
 801cdd2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801cdd4:	4b41      	ldr	r3, [pc, #260]	@ (801cedc <tcp_listen_input+0x1e0>)
 801cdd6:	681b      	ldr	r3, [r3, #0]
 801cdd8:	1c5a      	adds	r2, r3, #1
 801cdda:	697b      	ldr	r3, [r7, #20]
 801cddc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801cdde:	697b      	ldr	r3, [r7, #20]
 801cde0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801cde2:	697b      	ldr	r3, [r7, #20]
 801cde4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801cde6:	6978      	ldr	r0, [r7, #20]
 801cde8:	f7ff fa58 	bl	801c29c <tcp_next_iss>
 801cdec:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801cdee:	697b      	ldr	r3, [r7, #20]
 801cdf0:	693a      	ldr	r2, [r7, #16]
 801cdf2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 801cdf4:	697b      	ldr	r3, [r7, #20]
 801cdf6:	693a      	ldr	r2, [r7, #16]
 801cdf8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801cdfa:	697b      	ldr	r3, [r7, #20]
 801cdfc:	693a      	ldr	r2, [r7, #16]
 801cdfe:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 801ce00:	697b      	ldr	r3, [r7, #20]
 801ce02:	693a      	ldr	r2, [r7, #16]
 801ce04:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801ce06:	4b35      	ldr	r3, [pc, #212]	@ (801cedc <tcp_listen_input+0x1e0>)
 801ce08:	681b      	ldr	r3, [r3, #0]
 801ce0a:	1e5a      	subs	r2, r3, #1
 801ce0c:	697b      	ldr	r3, [r7, #20]
 801ce0e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	691a      	ldr	r2, [r3, #16]
 801ce14:	697b      	ldr	r3, [r7, #20]
 801ce16:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801ce18:	697b      	ldr	r3, [r7, #20]
 801ce1a:	687a      	ldr	r2, [r7, #4]
 801ce1c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	7a5b      	ldrb	r3, [r3, #9]
 801ce22:	f003 030c 	and.w	r3, r3, #12
 801ce26:	b2da      	uxtb	r2, r3
 801ce28:	697b      	ldr	r3, [r7, #20]
 801ce2a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	7a1a      	ldrb	r2, [r3, #8]
 801ce30:	697b      	ldr	r3, [r7, #20]
 801ce32:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801ce34:	4b2e      	ldr	r3, [pc, #184]	@ (801cef0 <tcp_listen_input+0x1f4>)
 801ce36:	681a      	ldr	r2, [r3, #0]
 801ce38:	697b      	ldr	r3, [r7, #20]
 801ce3a:	60da      	str	r2, [r3, #12]
 801ce3c:	4a2c      	ldr	r2, [pc, #176]	@ (801cef0 <tcp_listen_input+0x1f4>)
 801ce3e:	697b      	ldr	r3, [r7, #20]
 801ce40:	6013      	str	r3, [r2, #0]
 801ce42:	f003 fd23 	bl	802088c <tcp_timer_needed>
 801ce46:	4b2b      	ldr	r3, [pc, #172]	@ (801cef4 <tcp_listen_input+0x1f8>)
 801ce48:	2201      	movs	r2, #1
 801ce4a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801ce4c:	6978      	ldr	r0, [r7, #20]
 801ce4e:	f001 fd8b 	bl	801e968 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801ce52:	4b23      	ldr	r3, [pc, #140]	@ (801cee0 <tcp_listen_input+0x1e4>)
 801ce54:	681b      	ldr	r3, [r3, #0]
 801ce56:	89db      	ldrh	r3, [r3, #14]
 801ce58:	b29a      	uxth	r2, r3
 801ce5a:	697b      	ldr	r3, [r7, #20]
 801ce5c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801ce60:	697b      	ldr	r3, [r7, #20]
 801ce62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801ce66:	697b      	ldr	r3, [r7, #20]
 801ce68:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801ce6c:	697b      	ldr	r3, [r7, #20]
 801ce6e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801ce70:	697b      	ldr	r3, [r7, #20]
 801ce72:	3304      	adds	r3, #4
 801ce74:	4618      	mov	r0, r3
 801ce76:	f005 fc6d 	bl	8022754 <ip4_route>
 801ce7a:	4601      	mov	r1, r0
 801ce7c:	697b      	ldr	r3, [r7, #20]
 801ce7e:	3304      	adds	r3, #4
 801ce80:	461a      	mov	r2, r3
 801ce82:	4620      	mov	r0, r4
 801ce84:	f7ff fa30 	bl	801c2e8 <tcp_eff_send_mss_netif>
 801ce88:	4603      	mov	r3, r0
 801ce8a:	461a      	mov	r2, r3
 801ce8c:	697b      	ldr	r3, [r7, #20]
 801ce8e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801ce90:	2112      	movs	r1, #18
 801ce92:	6978      	ldr	r0, [r7, #20]
 801ce94:	f002 fc96 	bl	801f7c4 <tcp_enqueue_flags>
 801ce98:	4603      	mov	r3, r0
 801ce9a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801ce9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d004      	beq.n	801ceae <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801cea4:	2100      	movs	r1, #0
 801cea6:	6978      	ldr	r0, [r7, #20]
 801cea8:	f7fd ffd0 	bl	801ae4c <tcp_abandon>
      return;
 801ceac:	e006      	b.n	801cebc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801ceae:	6978      	ldr	r0, [r7, #20]
 801ceb0:	f002 fd76 	bl	801f9a0 <tcp_output>
  return;
 801ceb4:	e001      	b.n	801ceba <tcp_listen_input+0x1be>
    return;
 801ceb6:	bf00      	nop
 801ceb8:	e000      	b.n	801cebc <tcp_listen_input+0x1c0>
  return;
 801ceba:	bf00      	nop
}
 801cebc:	371c      	adds	r7, #28
 801cebe:	46bd      	mov	sp, r7
 801cec0:	bd90      	pop	{r4, r7, pc}
 801cec2:	bf00      	nop
 801cec4:	2400be90 	.word	0x2400be90
 801cec8:	0802b54c 	.word	0x0802b54c
 801cecc:	0802b744 	.word	0x0802b744
 801ced0:	0802b598 	.word	0x0802b598
 801ced4:	2400be88 	.word	0x2400be88
 801ced8:	2400be8e 	.word	0x2400be8e
 801cedc:	2400be84 	.word	0x2400be84
 801cee0:	2400be74 	.word	0x2400be74
 801cee4:	24008d5c 	.word	0x24008d5c
 801cee8:	24008d60 	.word	0x24008d60
 801ceec:	24008d4c 	.word	0x24008d4c
 801cef0:	2400be58 	.word	0x2400be58
 801cef4:	2400be60 	.word	0x2400be60

0801cef8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801cef8:	b580      	push	{r7, lr}
 801cefa:	b086      	sub	sp, #24
 801cefc:	af04      	add	r7, sp, #16
 801cefe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801cf00:	4b2f      	ldr	r3, [pc, #188]	@ (801cfc0 <tcp_timewait_input+0xc8>)
 801cf02:	781b      	ldrb	r3, [r3, #0]
 801cf04:	f003 0304 	and.w	r3, r3, #4
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d153      	bne.n	801cfb4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	2b00      	cmp	r3, #0
 801cf10:	d106      	bne.n	801cf20 <tcp_timewait_input+0x28>
 801cf12:	4b2c      	ldr	r3, [pc, #176]	@ (801cfc4 <tcp_timewait_input+0xcc>)
 801cf14:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801cf18:	492b      	ldr	r1, [pc, #172]	@ (801cfc8 <tcp_timewait_input+0xd0>)
 801cf1a:	482c      	ldr	r0, [pc, #176]	@ (801cfcc <tcp_timewait_input+0xd4>)
 801cf1c:	f008 f9a2 	bl	8025264 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801cf20:	4b27      	ldr	r3, [pc, #156]	@ (801cfc0 <tcp_timewait_input+0xc8>)
 801cf22:	781b      	ldrb	r3, [r3, #0]
 801cf24:	f003 0302 	and.w	r3, r3, #2
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d02a      	beq.n	801cf82 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801cf2c:	4b28      	ldr	r3, [pc, #160]	@ (801cfd0 <tcp_timewait_input+0xd8>)
 801cf2e:	681a      	ldr	r2, [r3, #0]
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cf34:	1ad3      	subs	r3, r2, r3
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	db2d      	blt.n	801cf96 <tcp_timewait_input+0x9e>
 801cf3a:	4b25      	ldr	r3, [pc, #148]	@ (801cfd0 <tcp_timewait_input+0xd8>)
 801cf3c:	681a      	ldr	r2, [r3, #0]
 801cf3e:	687b      	ldr	r3, [r7, #4]
 801cf40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cf42:	6879      	ldr	r1, [r7, #4]
 801cf44:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801cf46:	440b      	add	r3, r1
 801cf48:	1ad3      	subs	r3, r2, r3
 801cf4a:	2b00      	cmp	r3, #0
 801cf4c:	dc23      	bgt.n	801cf96 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cf4e:	4b21      	ldr	r3, [pc, #132]	@ (801cfd4 <tcp_timewait_input+0xdc>)
 801cf50:	6819      	ldr	r1, [r3, #0]
 801cf52:	4b21      	ldr	r3, [pc, #132]	@ (801cfd8 <tcp_timewait_input+0xe0>)
 801cf54:	881b      	ldrh	r3, [r3, #0]
 801cf56:	461a      	mov	r2, r3
 801cf58:	4b1d      	ldr	r3, [pc, #116]	@ (801cfd0 <tcp_timewait_input+0xd8>)
 801cf5a:	681b      	ldr	r3, [r3, #0]
 801cf5c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cf5e:	4b1f      	ldr	r3, [pc, #124]	@ (801cfdc <tcp_timewait_input+0xe4>)
 801cf60:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cf62:	885b      	ldrh	r3, [r3, #2]
 801cf64:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cf66:	4a1d      	ldr	r2, [pc, #116]	@ (801cfdc <tcp_timewait_input+0xe4>)
 801cf68:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cf6a:	8812      	ldrh	r2, [r2, #0]
 801cf6c:	b292      	uxth	r2, r2
 801cf6e:	9202      	str	r2, [sp, #8]
 801cf70:	9301      	str	r3, [sp, #4]
 801cf72:	4b1b      	ldr	r3, [pc, #108]	@ (801cfe0 <tcp_timewait_input+0xe8>)
 801cf74:	9300      	str	r3, [sp, #0]
 801cf76:	4b1b      	ldr	r3, [pc, #108]	@ (801cfe4 <tcp_timewait_input+0xec>)
 801cf78:	4602      	mov	r2, r0
 801cf7a:	6878      	ldr	r0, [r7, #4]
 801cf7c:	f003 fac4 	bl	8020508 <tcp_rst>
      return;
 801cf80:	e01b      	b.n	801cfba <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801cf82:	4b0f      	ldr	r3, [pc, #60]	@ (801cfc0 <tcp_timewait_input+0xc8>)
 801cf84:	781b      	ldrb	r3, [r3, #0]
 801cf86:	f003 0301 	and.w	r3, r3, #1
 801cf8a:	2b00      	cmp	r3, #0
 801cf8c:	d003      	beq.n	801cf96 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801cf8e:	4b16      	ldr	r3, [pc, #88]	@ (801cfe8 <tcp_timewait_input+0xf0>)
 801cf90:	681a      	ldr	r2, [r3, #0]
 801cf92:	687b      	ldr	r3, [r7, #4]
 801cf94:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801cf96:	4b10      	ldr	r3, [pc, #64]	@ (801cfd8 <tcp_timewait_input+0xe0>)
 801cf98:	881b      	ldrh	r3, [r3, #0]
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	d00c      	beq.n	801cfb8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	8b5b      	ldrh	r3, [r3, #26]
 801cfa2:	f043 0302 	orr.w	r3, r3, #2
 801cfa6:	b29a      	uxth	r2, r3
 801cfa8:	687b      	ldr	r3, [r7, #4]
 801cfaa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801cfac:	6878      	ldr	r0, [r7, #4]
 801cfae:	f002 fcf7 	bl	801f9a0 <tcp_output>
  }
  return;
 801cfb2:	e001      	b.n	801cfb8 <tcp_timewait_input+0xc0>
    return;
 801cfb4:	bf00      	nop
 801cfb6:	e000      	b.n	801cfba <tcp_timewait_input+0xc2>
  return;
 801cfb8:	bf00      	nop
}
 801cfba:	3708      	adds	r7, #8
 801cfbc:	46bd      	mov	sp, r7
 801cfbe:	bd80      	pop	{r7, pc}
 801cfc0:	2400be90 	.word	0x2400be90
 801cfc4:	0802b54c 	.word	0x0802b54c
 801cfc8:	0802b764 	.word	0x0802b764
 801cfcc:	0802b598 	.word	0x0802b598
 801cfd0:	2400be84 	.word	0x2400be84
 801cfd4:	2400be88 	.word	0x2400be88
 801cfd8:	2400be8e 	.word	0x2400be8e
 801cfdc:	2400be74 	.word	0x2400be74
 801cfe0:	24008d5c 	.word	0x24008d5c
 801cfe4:	24008d60 	.word	0x24008d60
 801cfe8:	2400be4c 	.word	0x2400be4c

0801cfec <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801cfec:	b590      	push	{r4, r7, lr}
 801cfee:	b08d      	sub	sp, #52	@ 0x34
 801cff0:	af04      	add	r7, sp, #16
 801cff2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801cff4:	2300      	movs	r3, #0
 801cff6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801cff8:	2300      	movs	r3, #0
 801cffa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	2b00      	cmp	r3, #0
 801d000:	d106      	bne.n	801d010 <tcp_process+0x24>
 801d002:	4b9d      	ldr	r3, [pc, #628]	@ (801d278 <tcp_process+0x28c>)
 801d004:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801d008:	499c      	ldr	r1, [pc, #624]	@ (801d27c <tcp_process+0x290>)
 801d00a:	489d      	ldr	r0, [pc, #628]	@ (801d280 <tcp_process+0x294>)
 801d00c:	f008 f92a 	bl	8025264 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801d010:	4b9c      	ldr	r3, [pc, #624]	@ (801d284 <tcp_process+0x298>)
 801d012:	781b      	ldrb	r3, [r3, #0]
 801d014:	f003 0304 	and.w	r3, r3, #4
 801d018:	2b00      	cmp	r3, #0
 801d01a:	d04e      	beq.n	801d0ba <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	7d1b      	ldrb	r3, [r3, #20]
 801d020:	2b02      	cmp	r3, #2
 801d022:	d108      	bne.n	801d036 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d028:	4b97      	ldr	r3, [pc, #604]	@ (801d288 <tcp_process+0x29c>)
 801d02a:	681b      	ldr	r3, [r3, #0]
 801d02c:	429a      	cmp	r2, r3
 801d02e:	d123      	bne.n	801d078 <tcp_process+0x8c>
        acceptable = 1;
 801d030:	2301      	movs	r3, #1
 801d032:	76fb      	strb	r3, [r7, #27]
 801d034:	e020      	b.n	801d078 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801d036:	687b      	ldr	r3, [r7, #4]
 801d038:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d03a:	4b94      	ldr	r3, [pc, #592]	@ (801d28c <tcp_process+0x2a0>)
 801d03c:	681b      	ldr	r3, [r3, #0]
 801d03e:	429a      	cmp	r2, r3
 801d040:	d102      	bne.n	801d048 <tcp_process+0x5c>
        acceptable = 1;
 801d042:	2301      	movs	r3, #1
 801d044:	76fb      	strb	r3, [r7, #27]
 801d046:	e017      	b.n	801d078 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d048:	4b90      	ldr	r3, [pc, #576]	@ (801d28c <tcp_process+0x2a0>)
 801d04a:	681a      	ldr	r2, [r3, #0]
 801d04c:	687b      	ldr	r3, [r7, #4]
 801d04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d050:	1ad3      	subs	r3, r2, r3
 801d052:	2b00      	cmp	r3, #0
 801d054:	db10      	blt.n	801d078 <tcp_process+0x8c>
 801d056:	4b8d      	ldr	r3, [pc, #564]	@ (801d28c <tcp_process+0x2a0>)
 801d058:	681a      	ldr	r2, [r3, #0]
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d05e:	6879      	ldr	r1, [r7, #4]
 801d060:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801d062:	440b      	add	r3, r1
 801d064:	1ad3      	subs	r3, r2, r3
 801d066:	2b00      	cmp	r3, #0
 801d068:	dc06      	bgt.n	801d078 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801d06a:	687b      	ldr	r3, [r7, #4]
 801d06c:	8b5b      	ldrh	r3, [r3, #26]
 801d06e:	f043 0302 	orr.w	r3, r3, #2
 801d072:	b29a      	uxth	r2, r3
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801d078:	7efb      	ldrb	r3, [r7, #27]
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	d01b      	beq.n	801d0b6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	7d1b      	ldrb	r3, [r3, #20]
 801d082:	2b00      	cmp	r3, #0
 801d084:	d106      	bne.n	801d094 <tcp_process+0xa8>
 801d086:	4b7c      	ldr	r3, [pc, #496]	@ (801d278 <tcp_process+0x28c>)
 801d088:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801d08c:	4980      	ldr	r1, [pc, #512]	@ (801d290 <tcp_process+0x2a4>)
 801d08e:	487c      	ldr	r0, [pc, #496]	@ (801d280 <tcp_process+0x294>)
 801d090:	f008 f8e8 	bl	8025264 <iprintf>
      recv_flags |= TF_RESET;
 801d094:	4b7f      	ldr	r3, [pc, #508]	@ (801d294 <tcp_process+0x2a8>)
 801d096:	781b      	ldrb	r3, [r3, #0]
 801d098:	f043 0308 	orr.w	r3, r3, #8
 801d09c:	b2da      	uxtb	r2, r3
 801d09e:	4b7d      	ldr	r3, [pc, #500]	@ (801d294 <tcp_process+0x2a8>)
 801d0a0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	8b5b      	ldrh	r3, [r3, #26]
 801d0a6:	f023 0301 	bic.w	r3, r3, #1
 801d0aa:	b29a      	uxth	r2, r3
 801d0ac:	687b      	ldr	r3, [r7, #4]
 801d0ae:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801d0b0:	f06f 030d 	mvn.w	r3, #13
 801d0b4:	e37a      	b.n	801d7ac <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801d0b6:	2300      	movs	r3, #0
 801d0b8:	e378      	b.n	801d7ac <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801d0ba:	4b72      	ldr	r3, [pc, #456]	@ (801d284 <tcp_process+0x298>)
 801d0bc:	781b      	ldrb	r3, [r3, #0]
 801d0be:	f003 0302 	and.w	r3, r3, #2
 801d0c2:	2b00      	cmp	r3, #0
 801d0c4:	d010      	beq.n	801d0e8 <tcp_process+0xfc>
 801d0c6:	687b      	ldr	r3, [r7, #4]
 801d0c8:	7d1b      	ldrb	r3, [r3, #20]
 801d0ca:	2b02      	cmp	r3, #2
 801d0cc:	d00c      	beq.n	801d0e8 <tcp_process+0xfc>
 801d0ce:	687b      	ldr	r3, [r7, #4]
 801d0d0:	7d1b      	ldrb	r3, [r3, #20]
 801d0d2:	2b03      	cmp	r3, #3
 801d0d4:	d008      	beq.n	801d0e8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	8b5b      	ldrh	r3, [r3, #26]
 801d0da:	f043 0302 	orr.w	r3, r3, #2
 801d0de:	b29a      	uxth	r2, r3
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801d0e4:	2300      	movs	r3, #0
 801d0e6:	e361      	b.n	801d7ac <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801d0e8:	687b      	ldr	r3, [r7, #4]
 801d0ea:	8b5b      	ldrh	r3, [r3, #26]
 801d0ec:	f003 0310 	and.w	r3, r3, #16
 801d0f0:	2b00      	cmp	r3, #0
 801d0f2:	d103      	bne.n	801d0fc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801d0f4:	4b68      	ldr	r3, [pc, #416]	@ (801d298 <tcp_process+0x2ac>)
 801d0f6:	681a      	ldr	r2, [r3, #0]
 801d0f8:	687b      	ldr	r3, [r7, #4]
 801d0fa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801d0fc:	687b      	ldr	r3, [r7, #4]
 801d0fe:	2200      	movs	r2, #0
 801d100:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	2200      	movs	r2, #0
 801d108:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 801d10c:	6878      	ldr	r0, [r7, #4]
 801d10e:	f001 fc2b 	bl	801e968 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	7d1b      	ldrb	r3, [r3, #20]
 801d116:	3b02      	subs	r3, #2
 801d118:	2b07      	cmp	r3, #7
 801d11a:	f200 8337 	bhi.w	801d78c <tcp_process+0x7a0>
 801d11e:	a201      	add	r2, pc, #4	@ (adr r2, 801d124 <tcp_process+0x138>)
 801d120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d124:	0801d145 	.word	0x0801d145
 801d128:	0801d375 	.word	0x0801d375
 801d12c:	0801d4ed 	.word	0x0801d4ed
 801d130:	0801d517 	.word	0x0801d517
 801d134:	0801d63b 	.word	0x0801d63b
 801d138:	0801d4ed 	.word	0x0801d4ed
 801d13c:	0801d6c7 	.word	0x0801d6c7
 801d140:	0801d757 	.word	0x0801d757
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801d144:	4b4f      	ldr	r3, [pc, #316]	@ (801d284 <tcp_process+0x298>)
 801d146:	781b      	ldrb	r3, [r3, #0]
 801d148:	f003 0310 	and.w	r3, r3, #16
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	f000 80e4 	beq.w	801d31a <tcp_process+0x32e>
 801d152:	4b4c      	ldr	r3, [pc, #304]	@ (801d284 <tcp_process+0x298>)
 801d154:	781b      	ldrb	r3, [r3, #0]
 801d156:	f003 0302 	and.w	r3, r3, #2
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	f000 80dd 	beq.w	801d31a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801d160:	687b      	ldr	r3, [r7, #4]
 801d162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d164:	1c5a      	adds	r2, r3, #1
 801d166:	4b48      	ldr	r3, [pc, #288]	@ (801d288 <tcp_process+0x29c>)
 801d168:	681b      	ldr	r3, [r3, #0]
 801d16a:	429a      	cmp	r2, r3
 801d16c:	f040 80d5 	bne.w	801d31a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801d170:	4b46      	ldr	r3, [pc, #280]	@ (801d28c <tcp_process+0x2a0>)
 801d172:	681b      	ldr	r3, [r3, #0]
 801d174:	1c5a      	adds	r2, r3, #1
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801d17a:	687b      	ldr	r3, [r7, #4]
 801d17c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801d182:	4b41      	ldr	r3, [pc, #260]	@ (801d288 <tcp_process+0x29c>)
 801d184:	681a      	ldr	r2, [r3, #0]
 801d186:	687b      	ldr	r3, [r7, #4]
 801d188:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801d18a:	4b44      	ldr	r3, [pc, #272]	@ (801d29c <tcp_process+0x2b0>)
 801d18c:	681b      	ldr	r3, [r3, #0]
 801d18e:	89db      	ldrh	r3, [r3, #14]
 801d190:	b29a      	uxth	r2, r3
 801d192:	687b      	ldr	r3, [r7, #4]
 801d194:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801d198:	687b      	ldr	r3, [r7, #4]
 801d19a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801d1a4:	4b39      	ldr	r3, [pc, #228]	@ (801d28c <tcp_process+0x2a0>)
 801d1a6:	681b      	ldr	r3, [r3, #0]
 801d1a8:	1e5a      	subs	r2, r3, #1
 801d1aa:	687b      	ldr	r3, [r7, #4]
 801d1ac:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	2204      	movs	r2, #4
 801d1b2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801d1b4:	687b      	ldr	r3, [r7, #4]
 801d1b6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	3304      	adds	r3, #4
 801d1bc:	4618      	mov	r0, r3
 801d1be:	f005 fac9 	bl	8022754 <ip4_route>
 801d1c2:	4601      	mov	r1, r0
 801d1c4:	687b      	ldr	r3, [r7, #4]
 801d1c6:	3304      	adds	r3, #4
 801d1c8:	461a      	mov	r2, r3
 801d1ca:	4620      	mov	r0, r4
 801d1cc:	f7ff f88c 	bl	801c2e8 <tcp_eff_send_mss_netif>
 801d1d0:	4603      	mov	r3, r0
 801d1d2:	461a      	mov	r2, r3
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d1d8:	687b      	ldr	r3, [r7, #4]
 801d1da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d1dc:	009a      	lsls	r2, r3, #2
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d1e2:	005b      	lsls	r3, r3, #1
 801d1e4:	f241 111c 	movw	r1, #4380	@ 0x111c
 801d1e8:	428b      	cmp	r3, r1
 801d1ea:	bf38      	it	cc
 801d1ec:	460b      	movcc	r3, r1
 801d1ee:	429a      	cmp	r2, r3
 801d1f0:	d204      	bcs.n	801d1fc <tcp_process+0x210>
 801d1f2:	687b      	ldr	r3, [r7, #4]
 801d1f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d1f6:	009b      	lsls	r3, r3, #2
 801d1f8:	b29b      	uxth	r3, r3
 801d1fa:	e00d      	b.n	801d218 <tcp_process+0x22c>
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d200:	005b      	lsls	r3, r3, #1
 801d202:	f241 121c 	movw	r2, #4380	@ 0x111c
 801d206:	4293      	cmp	r3, r2
 801d208:	d904      	bls.n	801d214 <tcp_process+0x228>
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d20e:	005b      	lsls	r3, r3, #1
 801d210:	b29b      	uxth	r3, r3
 801d212:	e001      	b.n	801d218 <tcp_process+0x22c>
 801d214:	f241 131c 	movw	r3, #4380	@ 0x111c
 801d218:	687a      	ldr	r2, [r7, #4]
 801d21a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801d21e:	687b      	ldr	r3, [r7, #4]
 801d220:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801d224:	2b00      	cmp	r3, #0
 801d226:	d106      	bne.n	801d236 <tcp_process+0x24a>
 801d228:	4b13      	ldr	r3, [pc, #76]	@ (801d278 <tcp_process+0x28c>)
 801d22a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801d22e:	491c      	ldr	r1, [pc, #112]	@ (801d2a0 <tcp_process+0x2b4>)
 801d230:	4813      	ldr	r0, [pc, #76]	@ (801d280 <tcp_process+0x294>)
 801d232:	f008 f817 	bl	8025264 <iprintf>
        --pcb->snd_queuelen;
 801d236:	687b      	ldr	r3, [r7, #4]
 801d238:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801d23c:	3b01      	subs	r3, #1
 801d23e:	b29a      	uxth	r2, r3
 801d240:	687b      	ldr	r3, [r7, #4]
 801d242:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801d246:	687b      	ldr	r3, [r7, #4]
 801d248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d24a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801d24c:	69fb      	ldr	r3, [r7, #28]
 801d24e:	2b00      	cmp	r3, #0
 801d250:	d12a      	bne.n	801d2a8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d256:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801d258:	69fb      	ldr	r3, [r7, #28]
 801d25a:	2b00      	cmp	r3, #0
 801d25c:	d106      	bne.n	801d26c <tcp_process+0x280>
 801d25e:	4b06      	ldr	r3, [pc, #24]	@ (801d278 <tcp_process+0x28c>)
 801d260:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801d264:	490f      	ldr	r1, [pc, #60]	@ (801d2a4 <tcp_process+0x2b8>)
 801d266:	4806      	ldr	r0, [pc, #24]	@ (801d280 <tcp_process+0x294>)
 801d268:	f007 fffc 	bl	8025264 <iprintf>
          pcb->unsent = rseg->next;
 801d26c:	69fb      	ldr	r3, [r7, #28]
 801d26e:	681a      	ldr	r2, [r3, #0]
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	66da      	str	r2, [r3, #108]	@ 0x6c
 801d274:	e01c      	b.n	801d2b0 <tcp_process+0x2c4>
 801d276:	bf00      	nop
 801d278:	0802b54c 	.word	0x0802b54c
 801d27c:	0802b784 	.word	0x0802b784
 801d280:	0802b598 	.word	0x0802b598
 801d284:	2400be90 	.word	0x2400be90
 801d288:	2400be88 	.word	0x2400be88
 801d28c:	2400be84 	.word	0x2400be84
 801d290:	0802b7a0 	.word	0x0802b7a0
 801d294:	2400be91 	.word	0x2400be91
 801d298:	2400be4c 	.word	0x2400be4c
 801d29c:	2400be74 	.word	0x2400be74
 801d2a0:	0802b7c0 	.word	0x0802b7c0
 801d2a4:	0802b7d8 	.word	0x0802b7d8
        } else {
          pcb->unacked = rseg->next;
 801d2a8:	69fb      	ldr	r3, [r7, #28]
 801d2aa:	681a      	ldr	r2, [r3, #0]
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 801d2b0:	69f8      	ldr	r0, [r7, #28]
 801d2b2:	f7fe fc54 	bl	801bb5e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801d2b6:	687b      	ldr	r3, [r7, #4]
 801d2b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	d104      	bne.n	801d2c8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d2c4:	861a      	strh	r2, [r3, #48]	@ 0x30
 801d2c6:	e006      	b.n	801d2d6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	2200      	movs	r2, #0
 801d2cc:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801d2ce:	687b      	ldr	r3, [r7, #4]
 801d2d0:	2200      	movs	r2, #0
 801d2d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	d00a      	beq.n	801d2f6 <tcp_process+0x30a>
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d2e6:	687a      	ldr	r2, [r7, #4]
 801d2e8:	6910      	ldr	r0, [r2, #16]
 801d2ea:	2200      	movs	r2, #0
 801d2ec:	6879      	ldr	r1, [r7, #4]
 801d2ee:	4798      	blx	r3
 801d2f0:	4603      	mov	r3, r0
 801d2f2:	76bb      	strb	r3, [r7, #26]
 801d2f4:	e001      	b.n	801d2fa <tcp_process+0x30e>
 801d2f6:	2300      	movs	r3, #0
 801d2f8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801d2fa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801d2fe:	f113 0f0d 	cmn.w	r3, #13
 801d302:	d102      	bne.n	801d30a <tcp_process+0x31e>
          return ERR_ABRT;
 801d304:	f06f 030c 	mvn.w	r3, #12
 801d308:	e250      	b.n	801d7ac <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801d30a:	687b      	ldr	r3, [r7, #4]
 801d30c:	8b5b      	ldrh	r3, [r3, #26]
 801d30e:	f043 0302 	orr.w	r3, r3, #2
 801d312:	b29a      	uxth	r2, r3
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801d318:	e23a      	b.n	801d790 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801d31a:	4b98      	ldr	r3, [pc, #608]	@ (801d57c <tcp_process+0x590>)
 801d31c:	781b      	ldrb	r3, [r3, #0]
 801d31e:	f003 0310 	and.w	r3, r3, #16
 801d322:	2b00      	cmp	r3, #0
 801d324:	f000 8234 	beq.w	801d790 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d328:	4b95      	ldr	r3, [pc, #596]	@ (801d580 <tcp_process+0x594>)
 801d32a:	6819      	ldr	r1, [r3, #0]
 801d32c:	4b95      	ldr	r3, [pc, #596]	@ (801d584 <tcp_process+0x598>)
 801d32e:	881b      	ldrh	r3, [r3, #0]
 801d330:	461a      	mov	r2, r3
 801d332:	4b95      	ldr	r3, [pc, #596]	@ (801d588 <tcp_process+0x59c>)
 801d334:	681b      	ldr	r3, [r3, #0]
 801d336:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d338:	4b94      	ldr	r3, [pc, #592]	@ (801d58c <tcp_process+0x5a0>)
 801d33a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d33c:	885b      	ldrh	r3, [r3, #2]
 801d33e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d340:	4a92      	ldr	r2, [pc, #584]	@ (801d58c <tcp_process+0x5a0>)
 801d342:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d344:	8812      	ldrh	r2, [r2, #0]
 801d346:	b292      	uxth	r2, r2
 801d348:	9202      	str	r2, [sp, #8]
 801d34a:	9301      	str	r3, [sp, #4]
 801d34c:	4b90      	ldr	r3, [pc, #576]	@ (801d590 <tcp_process+0x5a4>)
 801d34e:	9300      	str	r3, [sp, #0]
 801d350:	4b90      	ldr	r3, [pc, #576]	@ (801d594 <tcp_process+0x5a8>)
 801d352:	4602      	mov	r2, r0
 801d354:	6878      	ldr	r0, [r7, #4]
 801d356:	f003 f8d7 	bl	8020508 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801d360:	2b05      	cmp	r3, #5
 801d362:	f200 8215 	bhi.w	801d790 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801d366:	687b      	ldr	r3, [r7, #4]
 801d368:	2200      	movs	r2, #0
 801d36a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801d36c:	6878      	ldr	r0, [r7, #4]
 801d36e:	f002 fea3 	bl	80200b8 <tcp_rexmit_rto>
      break;
 801d372:	e20d      	b.n	801d790 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801d374:	4b81      	ldr	r3, [pc, #516]	@ (801d57c <tcp_process+0x590>)
 801d376:	781b      	ldrb	r3, [r3, #0]
 801d378:	f003 0310 	and.w	r3, r3, #16
 801d37c:	2b00      	cmp	r3, #0
 801d37e:	f000 80a1 	beq.w	801d4c4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d382:	4b7f      	ldr	r3, [pc, #508]	@ (801d580 <tcp_process+0x594>)
 801d384:	681a      	ldr	r2, [r3, #0]
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d38a:	1ad3      	subs	r3, r2, r3
 801d38c:	3b01      	subs	r3, #1
 801d38e:	2b00      	cmp	r3, #0
 801d390:	db7e      	blt.n	801d490 <tcp_process+0x4a4>
 801d392:	4b7b      	ldr	r3, [pc, #492]	@ (801d580 <tcp_process+0x594>)
 801d394:	681a      	ldr	r2, [r3, #0]
 801d396:	687b      	ldr	r3, [r7, #4]
 801d398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d39a:	1ad3      	subs	r3, r2, r3
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	dc77      	bgt.n	801d490 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801d3a0:	687b      	ldr	r3, [r7, #4]
 801d3a2:	2204      	movs	r2, #4
 801d3a4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801d3a6:	687b      	ldr	r3, [r7, #4]
 801d3a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d3aa:	2b00      	cmp	r3, #0
 801d3ac:	d102      	bne.n	801d3b4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801d3ae:	23fa      	movs	r3, #250	@ 0xfa
 801d3b0:	76bb      	strb	r3, [r7, #26]
 801d3b2:	e01d      	b.n	801d3f0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801d3b4:	687b      	ldr	r3, [r7, #4]
 801d3b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d3b8:	699b      	ldr	r3, [r3, #24]
 801d3ba:	2b00      	cmp	r3, #0
 801d3bc:	d106      	bne.n	801d3cc <tcp_process+0x3e0>
 801d3be:	4b76      	ldr	r3, [pc, #472]	@ (801d598 <tcp_process+0x5ac>)
 801d3c0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801d3c4:	4975      	ldr	r1, [pc, #468]	@ (801d59c <tcp_process+0x5b0>)
 801d3c6:	4876      	ldr	r0, [pc, #472]	@ (801d5a0 <tcp_process+0x5b4>)
 801d3c8:	f007 ff4c 	bl	8025264 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801d3cc:	687b      	ldr	r3, [r7, #4]
 801d3ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d3d0:	699b      	ldr	r3, [r3, #24]
 801d3d2:	2b00      	cmp	r3, #0
 801d3d4:	d00a      	beq.n	801d3ec <tcp_process+0x400>
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d3da:	699b      	ldr	r3, [r3, #24]
 801d3dc:	687a      	ldr	r2, [r7, #4]
 801d3de:	6910      	ldr	r0, [r2, #16]
 801d3e0:	2200      	movs	r2, #0
 801d3e2:	6879      	ldr	r1, [r7, #4]
 801d3e4:	4798      	blx	r3
 801d3e6:	4603      	mov	r3, r0
 801d3e8:	76bb      	strb	r3, [r7, #26]
 801d3ea:	e001      	b.n	801d3f0 <tcp_process+0x404>
 801d3ec:	23f0      	movs	r3, #240	@ 0xf0
 801d3ee:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801d3f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801d3f4:	2b00      	cmp	r3, #0
 801d3f6:	d00a      	beq.n	801d40e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801d3f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801d3fc:	f113 0f0d 	cmn.w	r3, #13
 801d400:	d002      	beq.n	801d408 <tcp_process+0x41c>
              tcp_abort(pcb);
 801d402:	6878      	ldr	r0, [r7, #4]
 801d404:	f7fd fde0 	bl	801afc8 <tcp_abort>
            }
            return ERR_ABRT;
 801d408:	f06f 030c 	mvn.w	r3, #12
 801d40c:	e1ce      	b.n	801d7ac <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801d40e:	6878      	ldr	r0, [r7, #4]
 801d410:	f000 fae0 	bl	801d9d4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801d414:	4b63      	ldr	r3, [pc, #396]	@ (801d5a4 <tcp_process+0x5b8>)
 801d416:	881b      	ldrh	r3, [r3, #0]
 801d418:	2b00      	cmp	r3, #0
 801d41a:	d005      	beq.n	801d428 <tcp_process+0x43c>
            recv_acked--;
 801d41c:	4b61      	ldr	r3, [pc, #388]	@ (801d5a4 <tcp_process+0x5b8>)
 801d41e:	881b      	ldrh	r3, [r3, #0]
 801d420:	3b01      	subs	r3, #1
 801d422:	b29a      	uxth	r2, r3
 801d424:	4b5f      	ldr	r3, [pc, #380]	@ (801d5a4 <tcp_process+0x5b8>)
 801d426:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d42c:	009a      	lsls	r2, r3, #2
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d432:	005b      	lsls	r3, r3, #1
 801d434:	f241 111c 	movw	r1, #4380	@ 0x111c
 801d438:	428b      	cmp	r3, r1
 801d43a:	bf38      	it	cc
 801d43c:	460b      	movcc	r3, r1
 801d43e:	429a      	cmp	r2, r3
 801d440:	d204      	bcs.n	801d44c <tcp_process+0x460>
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d446:	009b      	lsls	r3, r3, #2
 801d448:	b29b      	uxth	r3, r3
 801d44a:	e00d      	b.n	801d468 <tcp_process+0x47c>
 801d44c:	687b      	ldr	r3, [r7, #4]
 801d44e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d450:	005b      	lsls	r3, r3, #1
 801d452:	f241 121c 	movw	r2, #4380	@ 0x111c
 801d456:	4293      	cmp	r3, r2
 801d458:	d904      	bls.n	801d464 <tcp_process+0x478>
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d45e:	005b      	lsls	r3, r3, #1
 801d460:	b29b      	uxth	r3, r3
 801d462:	e001      	b.n	801d468 <tcp_process+0x47c>
 801d464:	f241 131c 	movw	r3, #4380	@ 0x111c
 801d468:	687a      	ldr	r2, [r7, #4]
 801d46a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801d46e:	4b4e      	ldr	r3, [pc, #312]	@ (801d5a8 <tcp_process+0x5bc>)
 801d470:	781b      	ldrb	r3, [r3, #0]
 801d472:	f003 0320 	and.w	r3, r3, #32
 801d476:	2b00      	cmp	r3, #0
 801d478:	d037      	beq.n	801d4ea <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	8b5b      	ldrh	r3, [r3, #26]
 801d47e:	f043 0302 	orr.w	r3, r3, #2
 801d482:	b29a      	uxth	r2, r3
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	2207      	movs	r2, #7
 801d48c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801d48e:	e02c      	b.n	801d4ea <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d490:	4b3b      	ldr	r3, [pc, #236]	@ (801d580 <tcp_process+0x594>)
 801d492:	6819      	ldr	r1, [r3, #0]
 801d494:	4b3b      	ldr	r3, [pc, #236]	@ (801d584 <tcp_process+0x598>)
 801d496:	881b      	ldrh	r3, [r3, #0]
 801d498:	461a      	mov	r2, r3
 801d49a:	4b3b      	ldr	r3, [pc, #236]	@ (801d588 <tcp_process+0x59c>)
 801d49c:	681b      	ldr	r3, [r3, #0]
 801d49e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d4a0:	4b3a      	ldr	r3, [pc, #232]	@ (801d58c <tcp_process+0x5a0>)
 801d4a2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d4a4:	885b      	ldrh	r3, [r3, #2]
 801d4a6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d4a8:	4a38      	ldr	r2, [pc, #224]	@ (801d58c <tcp_process+0x5a0>)
 801d4aa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d4ac:	8812      	ldrh	r2, [r2, #0]
 801d4ae:	b292      	uxth	r2, r2
 801d4b0:	9202      	str	r2, [sp, #8]
 801d4b2:	9301      	str	r3, [sp, #4]
 801d4b4:	4b36      	ldr	r3, [pc, #216]	@ (801d590 <tcp_process+0x5a4>)
 801d4b6:	9300      	str	r3, [sp, #0]
 801d4b8:	4b36      	ldr	r3, [pc, #216]	@ (801d594 <tcp_process+0x5a8>)
 801d4ba:	4602      	mov	r2, r0
 801d4bc:	6878      	ldr	r0, [r7, #4]
 801d4be:	f003 f823 	bl	8020508 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801d4c2:	e167      	b.n	801d794 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801d4c4:	4b2d      	ldr	r3, [pc, #180]	@ (801d57c <tcp_process+0x590>)
 801d4c6:	781b      	ldrb	r3, [r3, #0]
 801d4c8:	f003 0302 	and.w	r3, r3, #2
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	f000 8161 	beq.w	801d794 <tcp_process+0x7a8>
 801d4d2:	687b      	ldr	r3, [r7, #4]
 801d4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d4d6:	1e5a      	subs	r2, r3, #1
 801d4d8:	4b2b      	ldr	r3, [pc, #172]	@ (801d588 <tcp_process+0x59c>)
 801d4da:	681b      	ldr	r3, [r3, #0]
 801d4dc:	429a      	cmp	r2, r3
 801d4de:	f040 8159 	bne.w	801d794 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801d4e2:	6878      	ldr	r0, [r7, #4]
 801d4e4:	f002 fe0a 	bl	80200fc <tcp_rexmit>
      break;
 801d4e8:	e154      	b.n	801d794 <tcp_process+0x7a8>
 801d4ea:	e153      	b.n	801d794 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801d4ec:	6878      	ldr	r0, [r7, #4]
 801d4ee:	f000 fa71 	bl	801d9d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801d4f2:	4b2d      	ldr	r3, [pc, #180]	@ (801d5a8 <tcp_process+0x5bc>)
 801d4f4:	781b      	ldrb	r3, [r3, #0]
 801d4f6:	f003 0320 	and.w	r3, r3, #32
 801d4fa:	2b00      	cmp	r3, #0
 801d4fc:	f000 814c 	beq.w	801d798 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801d500:	687b      	ldr	r3, [r7, #4]
 801d502:	8b5b      	ldrh	r3, [r3, #26]
 801d504:	f043 0302 	orr.w	r3, r3, #2
 801d508:	b29a      	uxth	r2, r3
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801d50e:	687b      	ldr	r3, [r7, #4]
 801d510:	2207      	movs	r2, #7
 801d512:	751a      	strb	r2, [r3, #20]
      }
      break;
 801d514:	e140      	b.n	801d798 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801d516:	6878      	ldr	r0, [r7, #4]
 801d518:	f000 fa5c 	bl	801d9d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801d51c:	4b22      	ldr	r3, [pc, #136]	@ (801d5a8 <tcp_process+0x5bc>)
 801d51e:	781b      	ldrb	r3, [r3, #0]
 801d520:	f003 0320 	and.w	r3, r3, #32
 801d524:	2b00      	cmp	r3, #0
 801d526:	d071      	beq.n	801d60c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d528:	4b14      	ldr	r3, [pc, #80]	@ (801d57c <tcp_process+0x590>)
 801d52a:	781b      	ldrb	r3, [r3, #0]
 801d52c:	f003 0310 	and.w	r3, r3, #16
 801d530:	2b00      	cmp	r3, #0
 801d532:	d060      	beq.n	801d5f6 <tcp_process+0x60a>
 801d534:	687b      	ldr	r3, [r7, #4]
 801d536:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d538:	4b11      	ldr	r3, [pc, #68]	@ (801d580 <tcp_process+0x594>)
 801d53a:	681b      	ldr	r3, [r3, #0]
 801d53c:	429a      	cmp	r2, r3
 801d53e:	d15a      	bne.n	801d5f6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d544:	2b00      	cmp	r3, #0
 801d546:	d156      	bne.n	801d5f6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801d548:	687b      	ldr	r3, [r7, #4]
 801d54a:	8b5b      	ldrh	r3, [r3, #26]
 801d54c:	f043 0302 	orr.w	r3, r3, #2
 801d550:	b29a      	uxth	r2, r3
 801d552:	687b      	ldr	r3, [r7, #4]
 801d554:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801d556:	6878      	ldr	r0, [r7, #4]
 801d558:	f7fe fdbc 	bl	801c0d4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801d55c:	4b13      	ldr	r3, [pc, #76]	@ (801d5ac <tcp_process+0x5c0>)
 801d55e:	681b      	ldr	r3, [r3, #0]
 801d560:	687a      	ldr	r2, [r7, #4]
 801d562:	429a      	cmp	r2, r3
 801d564:	d105      	bne.n	801d572 <tcp_process+0x586>
 801d566:	4b11      	ldr	r3, [pc, #68]	@ (801d5ac <tcp_process+0x5c0>)
 801d568:	681b      	ldr	r3, [r3, #0]
 801d56a:	68db      	ldr	r3, [r3, #12]
 801d56c:	4a0f      	ldr	r2, [pc, #60]	@ (801d5ac <tcp_process+0x5c0>)
 801d56e:	6013      	str	r3, [r2, #0]
 801d570:	e02e      	b.n	801d5d0 <tcp_process+0x5e4>
 801d572:	4b0e      	ldr	r3, [pc, #56]	@ (801d5ac <tcp_process+0x5c0>)
 801d574:	681b      	ldr	r3, [r3, #0]
 801d576:	617b      	str	r3, [r7, #20]
 801d578:	e027      	b.n	801d5ca <tcp_process+0x5de>
 801d57a:	bf00      	nop
 801d57c:	2400be90 	.word	0x2400be90
 801d580:	2400be88 	.word	0x2400be88
 801d584:	2400be8e 	.word	0x2400be8e
 801d588:	2400be84 	.word	0x2400be84
 801d58c:	2400be74 	.word	0x2400be74
 801d590:	24008d5c 	.word	0x24008d5c
 801d594:	24008d60 	.word	0x24008d60
 801d598:	0802b54c 	.word	0x0802b54c
 801d59c:	0802b7ec 	.word	0x0802b7ec
 801d5a0:	0802b598 	.word	0x0802b598
 801d5a4:	2400be8c 	.word	0x2400be8c
 801d5a8:	2400be91 	.word	0x2400be91
 801d5ac:	2400be58 	.word	0x2400be58
 801d5b0:	697b      	ldr	r3, [r7, #20]
 801d5b2:	68db      	ldr	r3, [r3, #12]
 801d5b4:	687a      	ldr	r2, [r7, #4]
 801d5b6:	429a      	cmp	r2, r3
 801d5b8:	d104      	bne.n	801d5c4 <tcp_process+0x5d8>
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	68da      	ldr	r2, [r3, #12]
 801d5be:	697b      	ldr	r3, [r7, #20]
 801d5c0:	60da      	str	r2, [r3, #12]
 801d5c2:	e005      	b.n	801d5d0 <tcp_process+0x5e4>
 801d5c4:	697b      	ldr	r3, [r7, #20]
 801d5c6:	68db      	ldr	r3, [r3, #12]
 801d5c8:	617b      	str	r3, [r7, #20]
 801d5ca:	697b      	ldr	r3, [r7, #20]
 801d5cc:	2b00      	cmp	r3, #0
 801d5ce:	d1ef      	bne.n	801d5b0 <tcp_process+0x5c4>
 801d5d0:	687b      	ldr	r3, [r7, #4]
 801d5d2:	2200      	movs	r2, #0
 801d5d4:	60da      	str	r2, [r3, #12]
 801d5d6:	4b77      	ldr	r3, [pc, #476]	@ (801d7b4 <tcp_process+0x7c8>)
 801d5d8:	2201      	movs	r2, #1
 801d5da:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	220a      	movs	r2, #10
 801d5e0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801d5e2:	4b75      	ldr	r3, [pc, #468]	@ (801d7b8 <tcp_process+0x7cc>)
 801d5e4:	681a      	ldr	r2, [r3, #0]
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	60da      	str	r2, [r3, #12]
 801d5ea:	4a73      	ldr	r2, [pc, #460]	@ (801d7b8 <tcp_process+0x7cc>)
 801d5ec:	687b      	ldr	r3, [r7, #4]
 801d5ee:	6013      	str	r3, [r2, #0]
 801d5f0:	f003 f94c 	bl	802088c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801d5f4:	e0d2      	b.n	801d79c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801d5f6:	687b      	ldr	r3, [r7, #4]
 801d5f8:	8b5b      	ldrh	r3, [r3, #26]
 801d5fa:	f043 0302 	orr.w	r3, r3, #2
 801d5fe:	b29a      	uxth	r2, r3
 801d600:	687b      	ldr	r3, [r7, #4]
 801d602:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801d604:	687b      	ldr	r3, [r7, #4]
 801d606:	2208      	movs	r2, #8
 801d608:	751a      	strb	r2, [r3, #20]
      break;
 801d60a:	e0c7      	b.n	801d79c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d60c:	4b6b      	ldr	r3, [pc, #428]	@ (801d7bc <tcp_process+0x7d0>)
 801d60e:	781b      	ldrb	r3, [r3, #0]
 801d610:	f003 0310 	and.w	r3, r3, #16
 801d614:	2b00      	cmp	r3, #0
 801d616:	f000 80c1 	beq.w	801d79c <tcp_process+0x7b0>
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d61e:	4b68      	ldr	r3, [pc, #416]	@ (801d7c0 <tcp_process+0x7d4>)
 801d620:	681b      	ldr	r3, [r3, #0]
 801d622:	429a      	cmp	r2, r3
 801d624:	f040 80ba 	bne.w	801d79c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801d628:	687b      	ldr	r3, [r7, #4]
 801d62a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d62c:	2b00      	cmp	r3, #0
 801d62e:	f040 80b5 	bne.w	801d79c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801d632:	687b      	ldr	r3, [r7, #4]
 801d634:	2206      	movs	r2, #6
 801d636:	751a      	strb	r2, [r3, #20]
      break;
 801d638:	e0b0      	b.n	801d79c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801d63a:	6878      	ldr	r0, [r7, #4]
 801d63c:	f000 f9ca 	bl	801d9d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801d640:	4b60      	ldr	r3, [pc, #384]	@ (801d7c4 <tcp_process+0x7d8>)
 801d642:	781b      	ldrb	r3, [r3, #0]
 801d644:	f003 0320 	and.w	r3, r3, #32
 801d648:	2b00      	cmp	r3, #0
 801d64a:	f000 80a9 	beq.w	801d7a0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801d64e:	687b      	ldr	r3, [r7, #4]
 801d650:	8b5b      	ldrh	r3, [r3, #26]
 801d652:	f043 0302 	orr.w	r3, r3, #2
 801d656:	b29a      	uxth	r2, r3
 801d658:	687b      	ldr	r3, [r7, #4]
 801d65a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801d65c:	6878      	ldr	r0, [r7, #4]
 801d65e:	f7fe fd39 	bl	801c0d4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801d662:	4b59      	ldr	r3, [pc, #356]	@ (801d7c8 <tcp_process+0x7dc>)
 801d664:	681b      	ldr	r3, [r3, #0]
 801d666:	687a      	ldr	r2, [r7, #4]
 801d668:	429a      	cmp	r2, r3
 801d66a:	d105      	bne.n	801d678 <tcp_process+0x68c>
 801d66c:	4b56      	ldr	r3, [pc, #344]	@ (801d7c8 <tcp_process+0x7dc>)
 801d66e:	681b      	ldr	r3, [r3, #0]
 801d670:	68db      	ldr	r3, [r3, #12]
 801d672:	4a55      	ldr	r2, [pc, #340]	@ (801d7c8 <tcp_process+0x7dc>)
 801d674:	6013      	str	r3, [r2, #0]
 801d676:	e013      	b.n	801d6a0 <tcp_process+0x6b4>
 801d678:	4b53      	ldr	r3, [pc, #332]	@ (801d7c8 <tcp_process+0x7dc>)
 801d67a:	681b      	ldr	r3, [r3, #0]
 801d67c:	613b      	str	r3, [r7, #16]
 801d67e:	e00c      	b.n	801d69a <tcp_process+0x6ae>
 801d680:	693b      	ldr	r3, [r7, #16]
 801d682:	68db      	ldr	r3, [r3, #12]
 801d684:	687a      	ldr	r2, [r7, #4]
 801d686:	429a      	cmp	r2, r3
 801d688:	d104      	bne.n	801d694 <tcp_process+0x6a8>
 801d68a:	687b      	ldr	r3, [r7, #4]
 801d68c:	68da      	ldr	r2, [r3, #12]
 801d68e:	693b      	ldr	r3, [r7, #16]
 801d690:	60da      	str	r2, [r3, #12]
 801d692:	e005      	b.n	801d6a0 <tcp_process+0x6b4>
 801d694:	693b      	ldr	r3, [r7, #16]
 801d696:	68db      	ldr	r3, [r3, #12]
 801d698:	613b      	str	r3, [r7, #16]
 801d69a:	693b      	ldr	r3, [r7, #16]
 801d69c:	2b00      	cmp	r3, #0
 801d69e:	d1ef      	bne.n	801d680 <tcp_process+0x694>
 801d6a0:	687b      	ldr	r3, [r7, #4]
 801d6a2:	2200      	movs	r2, #0
 801d6a4:	60da      	str	r2, [r3, #12]
 801d6a6:	4b43      	ldr	r3, [pc, #268]	@ (801d7b4 <tcp_process+0x7c8>)
 801d6a8:	2201      	movs	r2, #1
 801d6aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801d6ac:	687b      	ldr	r3, [r7, #4]
 801d6ae:	220a      	movs	r2, #10
 801d6b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d6b2:	4b41      	ldr	r3, [pc, #260]	@ (801d7b8 <tcp_process+0x7cc>)
 801d6b4:	681a      	ldr	r2, [r3, #0]
 801d6b6:	687b      	ldr	r3, [r7, #4]
 801d6b8:	60da      	str	r2, [r3, #12]
 801d6ba:	4a3f      	ldr	r2, [pc, #252]	@ (801d7b8 <tcp_process+0x7cc>)
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	6013      	str	r3, [r2, #0]
 801d6c0:	f003 f8e4 	bl	802088c <tcp_timer_needed>
      }
      break;
 801d6c4:	e06c      	b.n	801d7a0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801d6c6:	6878      	ldr	r0, [r7, #4]
 801d6c8:	f000 f984 	bl	801d9d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801d6cc:	4b3b      	ldr	r3, [pc, #236]	@ (801d7bc <tcp_process+0x7d0>)
 801d6ce:	781b      	ldrb	r3, [r3, #0]
 801d6d0:	f003 0310 	and.w	r3, r3, #16
 801d6d4:	2b00      	cmp	r3, #0
 801d6d6:	d065      	beq.n	801d7a4 <tcp_process+0x7b8>
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d6dc:	4b38      	ldr	r3, [pc, #224]	@ (801d7c0 <tcp_process+0x7d4>)
 801d6de:	681b      	ldr	r3, [r3, #0]
 801d6e0:	429a      	cmp	r2, r3
 801d6e2:	d15f      	bne.n	801d7a4 <tcp_process+0x7b8>
 801d6e4:	687b      	ldr	r3, [r7, #4]
 801d6e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d6e8:	2b00      	cmp	r3, #0
 801d6ea:	d15b      	bne.n	801d7a4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801d6ec:	6878      	ldr	r0, [r7, #4]
 801d6ee:	f7fe fcf1 	bl	801c0d4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801d6f2:	4b35      	ldr	r3, [pc, #212]	@ (801d7c8 <tcp_process+0x7dc>)
 801d6f4:	681b      	ldr	r3, [r3, #0]
 801d6f6:	687a      	ldr	r2, [r7, #4]
 801d6f8:	429a      	cmp	r2, r3
 801d6fa:	d105      	bne.n	801d708 <tcp_process+0x71c>
 801d6fc:	4b32      	ldr	r3, [pc, #200]	@ (801d7c8 <tcp_process+0x7dc>)
 801d6fe:	681b      	ldr	r3, [r3, #0]
 801d700:	68db      	ldr	r3, [r3, #12]
 801d702:	4a31      	ldr	r2, [pc, #196]	@ (801d7c8 <tcp_process+0x7dc>)
 801d704:	6013      	str	r3, [r2, #0]
 801d706:	e013      	b.n	801d730 <tcp_process+0x744>
 801d708:	4b2f      	ldr	r3, [pc, #188]	@ (801d7c8 <tcp_process+0x7dc>)
 801d70a:	681b      	ldr	r3, [r3, #0]
 801d70c:	60fb      	str	r3, [r7, #12]
 801d70e:	e00c      	b.n	801d72a <tcp_process+0x73e>
 801d710:	68fb      	ldr	r3, [r7, #12]
 801d712:	68db      	ldr	r3, [r3, #12]
 801d714:	687a      	ldr	r2, [r7, #4]
 801d716:	429a      	cmp	r2, r3
 801d718:	d104      	bne.n	801d724 <tcp_process+0x738>
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	68da      	ldr	r2, [r3, #12]
 801d71e:	68fb      	ldr	r3, [r7, #12]
 801d720:	60da      	str	r2, [r3, #12]
 801d722:	e005      	b.n	801d730 <tcp_process+0x744>
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	68db      	ldr	r3, [r3, #12]
 801d728:	60fb      	str	r3, [r7, #12]
 801d72a:	68fb      	ldr	r3, [r7, #12]
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	d1ef      	bne.n	801d710 <tcp_process+0x724>
 801d730:	687b      	ldr	r3, [r7, #4]
 801d732:	2200      	movs	r2, #0
 801d734:	60da      	str	r2, [r3, #12]
 801d736:	4b1f      	ldr	r3, [pc, #124]	@ (801d7b4 <tcp_process+0x7c8>)
 801d738:	2201      	movs	r2, #1
 801d73a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801d73c:	687b      	ldr	r3, [r7, #4]
 801d73e:	220a      	movs	r2, #10
 801d740:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d742:	4b1d      	ldr	r3, [pc, #116]	@ (801d7b8 <tcp_process+0x7cc>)
 801d744:	681a      	ldr	r2, [r3, #0]
 801d746:	687b      	ldr	r3, [r7, #4]
 801d748:	60da      	str	r2, [r3, #12]
 801d74a:	4a1b      	ldr	r2, [pc, #108]	@ (801d7b8 <tcp_process+0x7cc>)
 801d74c:	687b      	ldr	r3, [r7, #4]
 801d74e:	6013      	str	r3, [r2, #0]
 801d750:	f003 f89c 	bl	802088c <tcp_timer_needed>
      }
      break;
 801d754:	e026      	b.n	801d7a4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801d756:	6878      	ldr	r0, [r7, #4]
 801d758:	f000 f93c 	bl	801d9d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801d75c:	4b17      	ldr	r3, [pc, #92]	@ (801d7bc <tcp_process+0x7d0>)
 801d75e:	781b      	ldrb	r3, [r3, #0]
 801d760:	f003 0310 	and.w	r3, r3, #16
 801d764:	2b00      	cmp	r3, #0
 801d766:	d01f      	beq.n	801d7a8 <tcp_process+0x7bc>
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d76c:	4b14      	ldr	r3, [pc, #80]	@ (801d7c0 <tcp_process+0x7d4>)
 801d76e:	681b      	ldr	r3, [r3, #0]
 801d770:	429a      	cmp	r2, r3
 801d772:	d119      	bne.n	801d7a8 <tcp_process+0x7bc>
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d778:	2b00      	cmp	r3, #0
 801d77a:	d115      	bne.n	801d7a8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801d77c:	4b11      	ldr	r3, [pc, #68]	@ (801d7c4 <tcp_process+0x7d8>)
 801d77e:	781b      	ldrb	r3, [r3, #0]
 801d780:	f043 0310 	orr.w	r3, r3, #16
 801d784:	b2da      	uxtb	r2, r3
 801d786:	4b0f      	ldr	r3, [pc, #60]	@ (801d7c4 <tcp_process+0x7d8>)
 801d788:	701a      	strb	r2, [r3, #0]
      }
      break;
 801d78a:	e00d      	b.n	801d7a8 <tcp_process+0x7bc>
    default:
      break;
 801d78c:	bf00      	nop
 801d78e:	e00c      	b.n	801d7aa <tcp_process+0x7be>
      break;
 801d790:	bf00      	nop
 801d792:	e00a      	b.n	801d7aa <tcp_process+0x7be>
      break;
 801d794:	bf00      	nop
 801d796:	e008      	b.n	801d7aa <tcp_process+0x7be>
      break;
 801d798:	bf00      	nop
 801d79a:	e006      	b.n	801d7aa <tcp_process+0x7be>
      break;
 801d79c:	bf00      	nop
 801d79e:	e004      	b.n	801d7aa <tcp_process+0x7be>
      break;
 801d7a0:	bf00      	nop
 801d7a2:	e002      	b.n	801d7aa <tcp_process+0x7be>
      break;
 801d7a4:	bf00      	nop
 801d7a6:	e000      	b.n	801d7aa <tcp_process+0x7be>
      break;
 801d7a8:	bf00      	nop
  }
  return ERR_OK;
 801d7aa:	2300      	movs	r3, #0
}
 801d7ac:	4618      	mov	r0, r3
 801d7ae:	3724      	adds	r7, #36	@ 0x24
 801d7b0:	46bd      	mov	sp, r7
 801d7b2:	bd90      	pop	{r4, r7, pc}
 801d7b4:	2400be60 	.word	0x2400be60
 801d7b8:	2400be5c 	.word	0x2400be5c
 801d7bc:	2400be90 	.word	0x2400be90
 801d7c0:	2400be88 	.word	0x2400be88
 801d7c4:	2400be91 	.word	0x2400be91
 801d7c8:	2400be58 	.word	0x2400be58

0801d7cc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801d7cc:	b590      	push	{r4, r7, lr}
 801d7ce:	b085      	sub	sp, #20
 801d7d0:	af00      	add	r7, sp, #0
 801d7d2:	6078      	str	r0, [r7, #4]
 801d7d4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801d7d6:	687b      	ldr	r3, [r7, #4]
 801d7d8:	2b00      	cmp	r3, #0
 801d7da:	d106      	bne.n	801d7ea <tcp_oos_insert_segment+0x1e>
 801d7dc:	4b3b      	ldr	r3, [pc, #236]	@ (801d8cc <tcp_oos_insert_segment+0x100>)
 801d7de:	f240 421f 	movw	r2, #1055	@ 0x41f
 801d7e2:	493b      	ldr	r1, [pc, #236]	@ (801d8d0 <tcp_oos_insert_segment+0x104>)
 801d7e4:	483b      	ldr	r0, [pc, #236]	@ (801d8d4 <tcp_oos_insert_segment+0x108>)
 801d7e6:	f007 fd3d 	bl	8025264 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	68db      	ldr	r3, [r3, #12]
 801d7ee:	899b      	ldrh	r3, [r3, #12]
 801d7f0:	b29b      	uxth	r3, r3
 801d7f2:	4618      	mov	r0, r3
 801d7f4:	f7fb f90c 	bl	8018a10 <lwip_htons>
 801d7f8:	4603      	mov	r3, r0
 801d7fa:	b2db      	uxtb	r3, r3
 801d7fc:	f003 0301 	and.w	r3, r3, #1
 801d800:	2b00      	cmp	r3, #0
 801d802:	d028      	beq.n	801d856 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801d804:	6838      	ldr	r0, [r7, #0]
 801d806:	f7fe f995 	bl	801bb34 <tcp_segs_free>
    next = NULL;
 801d80a:	2300      	movs	r3, #0
 801d80c:	603b      	str	r3, [r7, #0]
 801d80e:	e056      	b.n	801d8be <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801d810:	683b      	ldr	r3, [r7, #0]
 801d812:	68db      	ldr	r3, [r3, #12]
 801d814:	899b      	ldrh	r3, [r3, #12]
 801d816:	b29b      	uxth	r3, r3
 801d818:	4618      	mov	r0, r3
 801d81a:	f7fb f8f9 	bl	8018a10 <lwip_htons>
 801d81e:	4603      	mov	r3, r0
 801d820:	b2db      	uxtb	r3, r3
 801d822:	f003 0301 	and.w	r3, r3, #1
 801d826:	2b00      	cmp	r3, #0
 801d828:	d00d      	beq.n	801d846 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801d82a:	687b      	ldr	r3, [r7, #4]
 801d82c:	68db      	ldr	r3, [r3, #12]
 801d82e:	899b      	ldrh	r3, [r3, #12]
 801d830:	b29c      	uxth	r4, r3
 801d832:	2001      	movs	r0, #1
 801d834:	f7fb f8ec 	bl	8018a10 <lwip_htons>
 801d838:	4603      	mov	r3, r0
 801d83a:	461a      	mov	r2, r3
 801d83c:	687b      	ldr	r3, [r7, #4]
 801d83e:	68db      	ldr	r3, [r3, #12]
 801d840:	4322      	orrs	r2, r4
 801d842:	b292      	uxth	r2, r2
 801d844:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801d846:	683b      	ldr	r3, [r7, #0]
 801d848:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801d84a:	683b      	ldr	r3, [r7, #0]
 801d84c:	681b      	ldr	r3, [r3, #0]
 801d84e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801d850:	68f8      	ldr	r0, [r7, #12]
 801d852:	f7fe f984 	bl	801bb5e <tcp_seg_free>
    while (next &&
 801d856:	683b      	ldr	r3, [r7, #0]
 801d858:	2b00      	cmp	r3, #0
 801d85a:	d00e      	beq.n	801d87a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	891b      	ldrh	r3, [r3, #8]
 801d860:	461a      	mov	r2, r3
 801d862:	4b1d      	ldr	r3, [pc, #116]	@ (801d8d8 <tcp_oos_insert_segment+0x10c>)
 801d864:	681b      	ldr	r3, [r3, #0]
 801d866:	441a      	add	r2, r3
 801d868:	683b      	ldr	r3, [r7, #0]
 801d86a:	68db      	ldr	r3, [r3, #12]
 801d86c:	685b      	ldr	r3, [r3, #4]
 801d86e:	6839      	ldr	r1, [r7, #0]
 801d870:	8909      	ldrh	r1, [r1, #8]
 801d872:	440b      	add	r3, r1
 801d874:	1ad3      	subs	r3, r2, r3
    while (next &&
 801d876:	2b00      	cmp	r3, #0
 801d878:	daca      	bge.n	801d810 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801d87a:	683b      	ldr	r3, [r7, #0]
 801d87c:	2b00      	cmp	r3, #0
 801d87e:	d01e      	beq.n	801d8be <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801d880:	687b      	ldr	r3, [r7, #4]
 801d882:	891b      	ldrh	r3, [r3, #8]
 801d884:	461a      	mov	r2, r3
 801d886:	4b14      	ldr	r3, [pc, #80]	@ (801d8d8 <tcp_oos_insert_segment+0x10c>)
 801d888:	681b      	ldr	r3, [r3, #0]
 801d88a:	441a      	add	r2, r3
 801d88c:	683b      	ldr	r3, [r7, #0]
 801d88e:	68db      	ldr	r3, [r3, #12]
 801d890:	685b      	ldr	r3, [r3, #4]
 801d892:	1ad3      	subs	r3, r2, r3
    if (next &&
 801d894:	2b00      	cmp	r3, #0
 801d896:	dd12      	ble.n	801d8be <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801d898:	683b      	ldr	r3, [r7, #0]
 801d89a:	68db      	ldr	r3, [r3, #12]
 801d89c:	685b      	ldr	r3, [r3, #4]
 801d89e:	b29a      	uxth	r2, r3
 801d8a0:	4b0d      	ldr	r3, [pc, #52]	@ (801d8d8 <tcp_oos_insert_segment+0x10c>)
 801d8a2:	681b      	ldr	r3, [r3, #0]
 801d8a4:	b29b      	uxth	r3, r3
 801d8a6:	1ad3      	subs	r3, r2, r3
 801d8a8:	b29a      	uxth	r2, r3
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	685a      	ldr	r2, [r3, #4]
 801d8b2:	687b      	ldr	r3, [r7, #4]
 801d8b4:	891b      	ldrh	r3, [r3, #8]
 801d8b6:	4619      	mov	r1, r3
 801d8b8:	4610      	mov	r0, r2
 801d8ba:	f7fc fbcd 	bl	801a058 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801d8be:	687b      	ldr	r3, [r7, #4]
 801d8c0:	683a      	ldr	r2, [r7, #0]
 801d8c2:	601a      	str	r2, [r3, #0]
}
 801d8c4:	bf00      	nop
 801d8c6:	3714      	adds	r7, #20
 801d8c8:	46bd      	mov	sp, r7
 801d8ca:	bd90      	pop	{r4, r7, pc}
 801d8cc:	0802b54c 	.word	0x0802b54c
 801d8d0:	0802b80c 	.word	0x0802b80c
 801d8d4:	0802b598 	.word	0x0802b598
 801d8d8:	2400be84 	.word	0x2400be84

0801d8dc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801d8dc:	b5b0      	push	{r4, r5, r7, lr}
 801d8de:	b086      	sub	sp, #24
 801d8e0:	af00      	add	r7, sp, #0
 801d8e2:	60f8      	str	r0, [r7, #12]
 801d8e4:	60b9      	str	r1, [r7, #8]
 801d8e6:	607a      	str	r2, [r7, #4]
 801d8e8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801d8ea:	e03e      	b.n	801d96a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801d8ec:	68bb      	ldr	r3, [r7, #8]
 801d8ee:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801d8f0:	68bb      	ldr	r3, [r7, #8]
 801d8f2:	681b      	ldr	r3, [r3, #0]
 801d8f4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801d8f6:	697b      	ldr	r3, [r7, #20]
 801d8f8:	685b      	ldr	r3, [r3, #4]
 801d8fa:	4618      	mov	r0, r3
 801d8fc:	f7fc fdf2 	bl	801a4e4 <pbuf_clen>
 801d900:	4603      	mov	r3, r0
 801d902:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801d904:	68fb      	ldr	r3, [r7, #12]
 801d906:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801d90a:	8a7a      	ldrh	r2, [r7, #18]
 801d90c:	429a      	cmp	r2, r3
 801d90e:	d906      	bls.n	801d91e <tcp_free_acked_segments+0x42>
 801d910:	4b2a      	ldr	r3, [pc, #168]	@ (801d9bc <tcp_free_acked_segments+0xe0>)
 801d912:	f240 4257 	movw	r2, #1111	@ 0x457
 801d916:	492a      	ldr	r1, [pc, #168]	@ (801d9c0 <tcp_free_acked_segments+0xe4>)
 801d918:	482a      	ldr	r0, [pc, #168]	@ (801d9c4 <tcp_free_acked_segments+0xe8>)
 801d91a:	f007 fca3 	bl	8025264 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801d91e:	68fb      	ldr	r3, [r7, #12]
 801d920:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 801d924:	8a7b      	ldrh	r3, [r7, #18]
 801d926:	1ad3      	subs	r3, r2, r3
 801d928:	b29a      	uxth	r2, r3
 801d92a:	68fb      	ldr	r3, [r7, #12]
 801d92c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801d930:	697b      	ldr	r3, [r7, #20]
 801d932:	891a      	ldrh	r2, [r3, #8]
 801d934:	4b24      	ldr	r3, [pc, #144]	@ (801d9c8 <tcp_free_acked_segments+0xec>)
 801d936:	881b      	ldrh	r3, [r3, #0]
 801d938:	4413      	add	r3, r2
 801d93a:	b29a      	uxth	r2, r3
 801d93c:	4b22      	ldr	r3, [pc, #136]	@ (801d9c8 <tcp_free_acked_segments+0xec>)
 801d93e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801d940:	6978      	ldr	r0, [r7, #20]
 801d942:	f7fe f90c 	bl	801bb5e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801d946:	68fb      	ldr	r3, [r7, #12]
 801d948:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801d94c:	2b00      	cmp	r3, #0
 801d94e:	d00c      	beq.n	801d96a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801d950:	68bb      	ldr	r3, [r7, #8]
 801d952:	2b00      	cmp	r3, #0
 801d954:	d109      	bne.n	801d96a <tcp_free_acked_segments+0x8e>
 801d956:	683b      	ldr	r3, [r7, #0]
 801d958:	2b00      	cmp	r3, #0
 801d95a:	d106      	bne.n	801d96a <tcp_free_acked_segments+0x8e>
 801d95c:	4b17      	ldr	r3, [pc, #92]	@ (801d9bc <tcp_free_acked_segments+0xe0>)
 801d95e:	f240 4261 	movw	r2, #1121	@ 0x461
 801d962:	491a      	ldr	r1, [pc, #104]	@ (801d9cc <tcp_free_acked_segments+0xf0>)
 801d964:	4817      	ldr	r0, [pc, #92]	@ (801d9c4 <tcp_free_acked_segments+0xe8>)
 801d966:	f007 fc7d 	bl	8025264 <iprintf>
  while (seg_list != NULL &&
 801d96a:	68bb      	ldr	r3, [r7, #8]
 801d96c:	2b00      	cmp	r3, #0
 801d96e:	d020      	beq.n	801d9b2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801d970:	68bb      	ldr	r3, [r7, #8]
 801d972:	68db      	ldr	r3, [r3, #12]
 801d974:	685b      	ldr	r3, [r3, #4]
 801d976:	4618      	mov	r0, r3
 801d978:	f7fb f85f 	bl	8018a3a <lwip_htonl>
 801d97c:	4604      	mov	r4, r0
 801d97e:	68bb      	ldr	r3, [r7, #8]
 801d980:	891b      	ldrh	r3, [r3, #8]
 801d982:	461d      	mov	r5, r3
 801d984:	68bb      	ldr	r3, [r7, #8]
 801d986:	68db      	ldr	r3, [r3, #12]
 801d988:	899b      	ldrh	r3, [r3, #12]
 801d98a:	b29b      	uxth	r3, r3
 801d98c:	4618      	mov	r0, r3
 801d98e:	f7fb f83f 	bl	8018a10 <lwip_htons>
 801d992:	4603      	mov	r3, r0
 801d994:	b2db      	uxtb	r3, r3
 801d996:	f003 0303 	and.w	r3, r3, #3
 801d99a:	2b00      	cmp	r3, #0
 801d99c:	d001      	beq.n	801d9a2 <tcp_free_acked_segments+0xc6>
 801d99e:	2301      	movs	r3, #1
 801d9a0:	e000      	b.n	801d9a4 <tcp_free_acked_segments+0xc8>
 801d9a2:	2300      	movs	r3, #0
 801d9a4:	442b      	add	r3, r5
 801d9a6:	18e2      	adds	r2, r4, r3
 801d9a8:	4b09      	ldr	r3, [pc, #36]	@ (801d9d0 <tcp_free_acked_segments+0xf4>)
 801d9aa:	681b      	ldr	r3, [r3, #0]
 801d9ac:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801d9ae:	2b00      	cmp	r3, #0
 801d9b0:	dd9c      	ble.n	801d8ec <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801d9b2:	68bb      	ldr	r3, [r7, #8]
}
 801d9b4:	4618      	mov	r0, r3
 801d9b6:	3718      	adds	r7, #24
 801d9b8:	46bd      	mov	sp, r7
 801d9ba:	bdb0      	pop	{r4, r5, r7, pc}
 801d9bc:	0802b54c 	.word	0x0802b54c
 801d9c0:	0802b834 	.word	0x0802b834
 801d9c4:	0802b598 	.word	0x0802b598
 801d9c8:	2400be8c 	.word	0x2400be8c
 801d9cc:	0802b85c 	.word	0x0802b85c
 801d9d0:	2400be88 	.word	0x2400be88

0801d9d4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801d9d4:	b5b0      	push	{r4, r5, r7, lr}
 801d9d6:	b094      	sub	sp, #80	@ 0x50
 801d9d8:	af00      	add	r7, sp, #0
 801d9da:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801d9dc:	2300      	movs	r3, #0
 801d9de:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	2b00      	cmp	r3, #0
 801d9e4:	d106      	bne.n	801d9f4 <tcp_receive+0x20>
 801d9e6:	4b91      	ldr	r3, [pc, #580]	@ (801dc2c <tcp_receive+0x258>)
 801d9e8:	f240 427b 	movw	r2, #1147	@ 0x47b
 801d9ec:	4990      	ldr	r1, [pc, #576]	@ (801dc30 <tcp_receive+0x25c>)
 801d9ee:	4891      	ldr	r0, [pc, #580]	@ (801dc34 <tcp_receive+0x260>)
 801d9f0:	f007 fc38 	bl	8025264 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801d9f4:	687b      	ldr	r3, [r7, #4]
 801d9f6:	7d1b      	ldrb	r3, [r3, #20]
 801d9f8:	2b03      	cmp	r3, #3
 801d9fa:	d806      	bhi.n	801da0a <tcp_receive+0x36>
 801d9fc:	4b8b      	ldr	r3, [pc, #556]	@ (801dc2c <tcp_receive+0x258>)
 801d9fe:	f240 427c 	movw	r2, #1148	@ 0x47c
 801da02:	498d      	ldr	r1, [pc, #564]	@ (801dc38 <tcp_receive+0x264>)
 801da04:	488b      	ldr	r0, [pc, #556]	@ (801dc34 <tcp_receive+0x260>)
 801da06:	f007 fc2d 	bl	8025264 <iprintf>

  if (flags & TCP_ACK) {
 801da0a:	4b8c      	ldr	r3, [pc, #560]	@ (801dc3c <tcp_receive+0x268>)
 801da0c:	781b      	ldrb	r3, [r3, #0]
 801da0e:	f003 0310 	and.w	r3, r3, #16
 801da12:	2b00      	cmp	r3, #0
 801da14:	f000 8264 	beq.w	801dee0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801da18:	687b      	ldr	r3, [r7, #4]
 801da1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801da1e:	461a      	mov	r2, r3
 801da20:	687b      	ldr	r3, [r7, #4]
 801da22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801da24:	4413      	add	r3, r2
 801da26:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801da2c:	4b84      	ldr	r3, [pc, #528]	@ (801dc40 <tcp_receive+0x26c>)
 801da2e:	681b      	ldr	r3, [r3, #0]
 801da30:	1ad3      	subs	r3, r2, r3
 801da32:	2b00      	cmp	r3, #0
 801da34:	db1b      	blt.n	801da6e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801da3a:	4b81      	ldr	r3, [pc, #516]	@ (801dc40 <tcp_receive+0x26c>)
 801da3c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801da3e:	429a      	cmp	r2, r3
 801da40:	d106      	bne.n	801da50 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801da42:	687b      	ldr	r3, [r7, #4]
 801da44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801da46:	4b7f      	ldr	r3, [pc, #508]	@ (801dc44 <tcp_receive+0x270>)
 801da48:	681b      	ldr	r3, [r3, #0]
 801da4a:	1ad3      	subs	r3, r2, r3
 801da4c:	2b00      	cmp	r3, #0
 801da4e:	db0e      	blt.n	801da6e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801da50:	687b      	ldr	r3, [r7, #4]
 801da52:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801da54:	4b7b      	ldr	r3, [pc, #492]	@ (801dc44 <tcp_receive+0x270>)
 801da56:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801da58:	429a      	cmp	r2, r3
 801da5a:	d125      	bne.n	801daa8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801da5c:	4b7a      	ldr	r3, [pc, #488]	@ (801dc48 <tcp_receive+0x274>)
 801da5e:	681b      	ldr	r3, [r3, #0]
 801da60:	89db      	ldrh	r3, [r3, #14]
 801da62:	b29a      	uxth	r2, r3
 801da64:	687b      	ldr	r3, [r7, #4]
 801da66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801da6a:	429a      	cmp	r2, r3
 801da6c:	d91c      	bls.n	801daa8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801da6e:	4b76      	ldr	r3, [pc, #472]	@ (801dc48 <tcp_receive+0x274>)
 801da70:	681b      	ldr	r3, [r3, #0]
 801da72:	89db      	ldrh	r3, [r3, #14]
 801da74:	b29a      	uxth	r2, r3
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801da82:	687b      	ldr	r3, [r7, #4]
 801da84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801da88:	429a      	cmp	r2, r3
 801da8a:	d205      	bcs.n	801da98 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801da98:	4b69      	ldr	r3, [pc, #420]	@ (801dc40 <tcp_receive+0x26c>)
 801da9a:	681a      	ldr	r2, [r3, #0]
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801daa0:	4b68      	ldr	r3, [pc, #416]	@ (801dc44 <tcp_receive+0x270>)
 801daa2:	681a      	ldr	r2, [r3, #0]
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801daa8:	4b66      	ldr	r3, [pc, #408]	@ (801dc44 <tcp_receive+0x270>)
 801daaa:	681a      	ldr	r2, [r3, #0]
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801dab0:	1ad3      	subs	r3, r2, r3
 801dab2:	2b00      	cmp	r3, #0
 801dab4:	dc58      	bgt.n	801db68 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801dab6:	4b65      	ldr	r3, [pc, #404]	@ (801dc4c <tcp_receive+0x278>)
 801dab8:	881b      	ldrh	r3, [r3, #0]
 801daba:	2b00      	cmp	r3, #0
 801dabc:	d14b      	bne.n	801db56 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801dabe:	687b      	ldr	r3, [r7, #4]
 801dac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dac2:	687a      	ldr	r2, [r7, #4]
 801dac4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801dac8:	4413      	add	r3, r2
 801daca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801dacc:	429a      	cmp	r2, r3
 801dace:	d142      	bne.n	801db56 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	db3d      	blt.n	801db56 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801dada:	687b      	ldr	r3, [r7, #4]
 801dadc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801dade:	4b59      	ldr	r3, [pc, #356]	@ (801dc44 <tcp_receive+0x270>)
 801dae0:	681b      	ldr	r3, [r3, #0]
 801dae2:	429a      	cmp	r2, r3
 801dae4:	d137      	bne.n	801db56 <tcp_receive+0x182>
              found_dupack = 1;
 801dae6:	2301      	movs	r3, #1
 801dae8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801daea:	687b      	ldr	r3, [r7, #4]
 801daec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801daf0:	2bff      	cmp	r3, #255	@ 0xff
 801daf2:	d007      	beq.n	801db04 <tcp_receive+0x130>
                ++pcb->dupacks;
 801daf4:	687b      	ldr	r3, [r7, #4]
 801daf6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801dafa:	3301      	adds	r3, #1
 801dafc:	b2da      	uxtb	r2, r3
 801dafe:	687b      	ldr	r3, [r7, #4]
 801db00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801db0a:	2b03      	cmp	r3, #3
 801db0c:	d91b      	bls.n	801db46 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801db0e:	687b      	ldr	r3, [r7, #4]
 801db10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801db18:	4413      	add	r3, r2
 801db1a:	b29a      	uxth	r2, r3
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801db22:	429a      	cmp	r2, r3
 801db24:	d30a      	bcc.n	801db3c <tcp_receive+0x168>
 801db26:	687b      	ldr	r3, [r7, #4]
 801db28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801db30:	4413      	add	r3, r2
 801db32:	b29a      	uxth	r2, r3
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801db3a:	e004      	b.n	801db46 <tcp_receive+0x172>
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801db42:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801db4c:	2b02      	cmp	r3, #2
 801db4e:	d902      	bls.n	801db56 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801db50:	6878      	ldr	r0, [r7, #4]
 801db52:	f002 fb3f 	bl	80201d4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801db56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801db58:	2b00      	cmp	r3, #0
 801db5a:	f040 8161 	bne.w	801de20 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801db5e:	687b      	ldr	r3, [r7, #4]
 801db60:	2200      	movs	r2, #0
 801db62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801db66:	e15b      	b.n	801de20 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801db68:	4b36      	ldr	r3, [pc, #216]	@ (801dc44 <tcp_receive+0x270>)
 801db6a:	681a      	ldr	r2, [r3, #0]
 801db6c:	687b      	ldr	r3, [r7, #4]
 801db6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801db70:	1ad3      	subs	r3, r2, r3
 801db72:	3b01      	subs	r3, #1
 801db74:	2b00      	cmp	r3, #0
 801db76:	f2c0 814e 	blt.w	801de16 <tcp_receive+0x442>
 801db7a:	4b32      	ldr	r3, [pc, #200]	@ (801dc44 <tcp_receive+0x270>)
 801db7c:	681a      	ldr	r2, [r3, #0]
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801db82:	1ad3      	subs	r3, r2, r3
 801db84:	2b00      	cmp	r3, #0
 801db86:	f300 8146 	bgt.w	801de16 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801db8a:	687b      	ldr	r3, [r7, #4]
 801db8c:	8b5b      	ldrh	r3, [r3, #26]
 801db8e:	f003 0304 	and.w	r3, r3, #4
 801db92:	2b00      	cmp	r3, #0
 801db94:	d010      	beq.n	801dbb8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	8b5b      	ldrh	r3, [r3, #26]
 801db9a:	f023 0304 	bic.w	r3, r3, #4
 801db9e:	b29a      	uxth	r2, r3
 801dba0:	687b      	ldr	r3, [r7, #4]
 801dba2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801dba4:	687b      	ldr	r3, [r7, #4]
 801dba6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	2200      	movs	r2, #0
 801dbb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801dbb8:	687b      	ldr	r3, [r7, #4]
 801dbba:	2200      	movs	r2, #0
 801dbbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801dbc0:	687b      	ldr	r3, [r7, #4]
 801dbc2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801dbc6:	10db      	asrs	r3, r3, #3
 801dbc8:	b21b      	sxth	r3, r3
 801dbca:	b29a      	uxth	r2, r3
 801dbcc:	687b      	ldr	r3, [r7, #4]
 801dbce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801dbd2:	b29b      	uxth	r3, r3
 801dbd4:	4413      	add	r3, r2
 801dbd6:	b29b      	uxth	r3, r3
 801dbd8:	b21a      	sxth	r2, r3
 801dbda:	687b      	ldr	r3, [r7, #4]
 801dbdc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801dbe0:	4b18      	ldr	r3, [pc, #96]	@ (801dc44 <tcp_receive+0x270>)
 801dbe2:	681b      	ldr	r3, [r3, #0]
 801dbe4:	b29a      	uxth	r2, r3
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801dbea:	b29b      	uxth	r3, r3
 801dbec:	1ad3      	subs	r3, r2, r3
 801dbee:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	2200      	movs	r2, #0
 801dbf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801dbf8:	4b12      	ldr	r3, [pc, #72]	@ (801dc44 <tcp_receive+0x270>)
 801dbfa:	681a      	ldr	r2, [r3, #0]
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	7d1b      	ldrb	r3, [r3, #20]
 801dc04:	2b03      	cmp	r3, #3
 801dc06:	f240 8097 	bls.w	801dd38 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801dc0a:	687b      	ldr	r3, [r7, #4]
 801dc0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801dc16:	429a      	cmp	r2, r3
 801dc18:	d245      	bcs.n	801dca6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	8b5b      	ldrh	r3, [r3, #26]
 801dc1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	d014      	beq.n	801dc50 <tcp_receive+0x27c>
 801dc26:	2301      	movs	r3, #1
 801dc28:	e013      	b.n	801dc52 <tcp_receive+0x27e>
 801dc2a:	bf00      	nop
 801dc2c:	0802b54c 	.word	0x0802b54c
 801dc30:	0802b87c 	.word	0x0802b87c
 801dc34:	0802b598 	.word	0x0802b598
 801dc38:	0802b898 	.word	0x0802b898
 801dc3c:	2400be90 	.word	0x2400be90
 801dc40:	2400be84 	.word	0x2400be84
 801dc44:	2400be88 	.word	0x2400be88
 801dc48:	2400be74 	.word	0x2400be74
 801dc4c:	2400be8e 	.word	0x2400be8e
 801dc50:	2302      	movs	r3, #2
 801dc52:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801dc56:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801dc5a:	b29a      	uxth	r2, r3
 801dc5c:	687b      	ldr	r3, [r7, #4]
 801dc5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dc60:	fb12 f303 	smulbb	r3, r2, r3
 801dc64:	b29b      	uxth	r3, r3
 801dc66:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801dc68:	4293      	cmp	r3, r2
 801dc6a:	bf28      	it	cs
 801dc6c:	4613      	movcs	r3, r2
 801dc6e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801dc70:	687b      	ldr	r3, [r7, #4]
 801dc72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801dc76:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801dc78:	4413      	add	r3, r2
 801dc7a:	b29a      	uxth	r2, r3
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801dc82:	429a      	cmp	r2, r3
 801dc84:	d309      	bcc.n	801dc9a <tcp_receive+0x2c6>
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801dc8c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801dc8e:	4413      	add	r3, r2
 801dc90:	b29a      	uxth	r2, r3
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801dc98:	e04e      	b.n	801dd38 <tcp_receive+0x364>
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801dca0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801dca4:	e048      	b.n	801dd38 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801dcac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801dcae:	4413      	add	r3, r2
 801dcb0:	b29a      	uxth	r2, r3
 801dcb2:	687b      	ldr	r3, [r7, #4]
 801dcb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801dcb8:	429a      	cmp	r2, r3
 801dcba:	d309      	bcc.n	801dcd0 <tcp_receive+0x2fc>
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801dcc2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801dcc4:	4413      	add	r3, r2
 801dcc6:	b29a      	uxth	r2, r3
 801dcc8:	687b      	ldr	r3, [r7, #4]
 801dcca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801dcce:	e004      	b.n	801dcda <tcp_receive+0x306>
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801dcd6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801dcda:	687b      	ldr	r3, [r7, #4]
 801dcdc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801dce6:	429a      	cmp	r2, r3
 801dce8:	d326      	bcc.n	801dd38 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801dcea:	687b      	ldr	r3, [r7, #4]
 801dcec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801dcf6:	1ad3      	subs	r3, r2, r3
 801dcf8:	b29a      	uxth	r2, r3
 801dcfa:	687b      	ldr	r3, [r7, #4]
 801dcfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801dd06:	687b      	ldr	r3, [r7, #4]
 801dd08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dd0a:	4413      	add	r3, r2
 801dd0c:	b29a      	uxth	r2, r3
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801dd14:	429a      	cmp	r2, r3
 801dd16:	d30a      	bcc.n	801dd2e <tcp_receive+0x35a>
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801dd1e:	687b      	ldr	r3, [r7, #4]
 801dd20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dd22:	4413      	add	r3, r2
 801dd24:	b29a      	uxth	r2, r3
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801dd2c:	e004      	b.n	801dd38 <tcp_receive+0x364>
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801dd34:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801dd38:	687b      	ldr	r3, [r7, #4]
 801dd3a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dd40:	4a98      	ldr	r2, [pc, #608]	@ (801dfa4 <tcp_receive+0x5d0>)
 801dd42:	6878      	ldr	r0, [r7, #4]
 801dd44:	f7ff fdca 	bl	801d8dc <tcp_free_acked_segments>
 801dd48:	4602      	mov	r2, r0
 801dd4a:	687b      	ldr	r3, [r7, #4]
 801dd4c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801dd4e:	687b      	ldr	r3, [r7, #4]
 801dd50:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dd56:	4a94      	ldr	r2, [pc, #592]	@ (801dfa8 <tcp_receive+0x5d4>)
 801dd58:	6878      	ldr	r0, [r7, #4]
 801dd5a:	f7ff fdbf 	bl	801d8dc <tcp_free_acked_segments>
 801dd5e:	4602      	mov	r2, r0
 801dd60:	687b      	ldr	r3, [r7, #4]
 801dd62:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	d104      	bne.n	801dd76 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801dd72:	861a      	strh	r2, [r3, #48]	@ 0x30
 801dd74:	e002      	b.n	801dd7c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801dd76:	687b      	ldr	r3, [r7, #4]
 801dd78:	2200      	movs	r2, #0
 801dd7a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801dd7c:	687b      	ldr	r3, [r7, #4]
 801dd7e:	2200      	movs	r2, #0
 801dd80:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801dd82:	687b      	ldr	r3, [r7, #4]
 801dd84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dd86:	2b00      	cmp	r3, #0
 801dd88:	d103      	bne.n	801dd92 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801dd8a:	687b      	ldr	r3, [r7, #4]
 801dd8c:	2200      	movs	r2, #0
 801dd8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801dd92:	687b      	ldr	r3, [r7, #4]
 801dd94:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801dd98:	4b84      	ldr	r3, [pc, #528]	@ (801dfac <tcp_receive+0x5d8>)
 801dd9a:	881b      	ldrh	r3, [r3, #0]
 801dd9c:	4413      	add	r3, r2
 801dd9e:	b29a      	uxth	r2, r3
 801dda0:	687b      	ldr	r3, [r7, #4]
 801dda2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801dda6:	687b      	ldr	r3, [r7, #4]
 801dda8:	8b5b      	ldrh	r3, [r3, #26]
 801ddaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	d035      	beq.n	801de1e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801ddb2:	687b      	ldr	r3, [r7, #4]
 801ddb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ddb6:	2b00      	cmp	r3, #0
 801ddb8:	d118      	bne.n	801ddec <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801ddba:	687b      	ldr	r3, [r7, #4]
 801ddbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ddbe:	2b00      	cmp	r3, #0
 801ddc0:	d00c      	beq.n	801dddc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801ddc2:	687b      	ldr	r3, [r7, #4]
 801ddc4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ddca:	68db      	ldr	r3, [r3, #12]
 801ddcc:	685b      	ldr	r3, [r3, #4]
 801ddce:	4618      	mov	r0, r3
 801ddd0:	f7fa fe33 	bl	8018a3a <lwip_htonl>
 801ddd4:	4603      	mov	r3, r0
 801ddd6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	dc20      	bgt.n	801de1e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	8b5b      	ldrh	r3, [r3, #26]
 801dde0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801dde4:	b29a      	uxth	r2, r3
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ddea:	e018      	b.n	801de1e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801ddf0:	687b      	ldr	r3, [r7, #4]
 801ddf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ddf4:	68db      	ldr	r3, [r3, #12]
 801ddf6:	685b      	ldr	r3, [r3, #4]
 801ddf8:	4618      	mov	r0, r3
 801ddfa:	f7fa fe1e 	bl	8018a3a <lwip_htonl>
 801ddfe:	4603      	mov	r3, r0
 801de00:	1ae3      	subs	r3, r4, r3
 801de02:	2b00      	cmp	r3, #0
 801de04:	dc0b      	bgt.n	801de1e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801de06:	687b      	ldr	r3, [r7, #4]
 801de08:	8b5b      	ldrh	r3, [r3, #26]
 801de0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801de0e:	b29a      	uxth	r2, r3
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801de14:	e003      	b.n	801de1e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801de16:	6878      	ldr	r0, [r7, #4]
 801de18:	f002 fbc8 	bl	80205ac <tcp_send_empty_ack>
 801de1c:	e000      	b.n	801de20 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801de1e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801de20:	687b      	ldr	r3, [r7, #4]
 801de22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801de24:	2b00      	cmp	r3, #0
 801de26:	d05b      	beq.n	801dee0 <tcp_receive+0x50c>
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801de2c:	4b60      	ldr	r3, [pc, #384]	@ (801dfb0 <tcp_receive+0x5dc>)
 801de2e:	681b      	ldr	r3, [r3, #0]
 801de30:	1ad3      	subs	r3, r2, r3
 801de32:	2b00      	cmp	r3, #0
 801de34:	da54      	bge.n	801dee0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801de36:	4b5f      	ldr	r3, [pc, #380]	@ (801dfb4 <tcp_receive+0x5e0>)
 801de38:	681b      	ldr	r3, [r3, #0]
 801de3a:	b29a      	uxth	r2, r3
 801de3c:	687b      	ldr	r3, [r7, #4]
 801de3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801de40:	b29b      	uxth	r3, r3
 801de42:	1ad3      	subs	r3, r2, r3
 801de44:	b29b      	uxth	r3, r3
 801de46:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801de4a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801de4e:	687b      	ldr	r3, [r7, #4]
 801de50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801de54:	10db      	asrs	r3, r3, #3
 801de56:	b21b      	sxth	r3, r3
 801de58:	b29b      	uxth	r3, r3
 801de5a:	1ad3      	subs	r3, r2, r3
 801de5c:	b29b      	uxth	r3, r3
 801de5e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801de68:	b29a      	uxth	r2, r3
 801de6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801de6e:	4413      	add	r3, r2
 801de70:	b29b      	uxth	r3, r3
 801de72:	b21a      	sxth	r2, r3
 801de74:	687b      	ldr	r3, [r7, #4]
 801de76:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801de78:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801de7c:	2b00      	cmp	r3, #0
 801de7e:	da05      	bge.n	801de8c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801de80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801de84:	425b      	negs	r3, r3
 801de86:	b29b      	uxth	r3, r3
 801de88:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801de8c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801de90:	687b      	ldr	r3, [r7, #4]
 801de92:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801de96:	109b      	asrs	r3, r3, #2
 801de98:	b21b      	sxth	r3, r3
 801de9a:	b29b      	uxth	r3, r3
 801de9c:	1ad3      	subs	r3, r2, r3
 801de9e:	b29b      	uxth	r3, r3
 801dea0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801dea4:	687b      	ldr	r3, [r7, #4]
 801dea6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801deaa:	b29a      	uxth	r2, r3
 801deac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801deb0:	4413      	add	r3, r2
 801deb2:	b29b      	uxth	r3, r3
 801deb4:	b21a      	sxth	r2, r3
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801deba:	687b      	ldr	r3, [r7, #4]
 801debc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801dec0:	10db      	asrs	r3, r3, #3
 801dec2:	b21b      	sxth	r3, r3
 801dec4:	b29a      	uxth	r2, r3
 801dec6:	687b      	ldr	r3, [r7, #4]
 801dec8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801decc:	b29b      	uxth	r3, r3
 801dece:	4413      	add	r3, r2
 801ded0:	b29b      	uxth	r3, r3
 801ded2:	b21a      	sxth	r2, r3
 801ded4:	687b      	ldr	r3, [r7, #4]
 801ded6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801deda:	687b      	ldr	r3, [r7, #4]
 801dedc:	2200      	movs	r2, #0
 801dede:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801dee0:	4b35      	ldr	r3, [pc, #212]	@ (801dfb8 <tcp_receive+0x5e4>)
 801dee2:	881b      	ldrh	r3, [r3, #0]
 801dee4:	2b00      	cmp	r3, #0
 801dee6:	f000 84df 	beq.w	801e8a8 <tcp_receive+0xed4>
 801deea:	687b      	ldr	r3, [r7, #4]
 801deec:	7d1b      	ldrb	r3, [r3, #20]
 801deee:	2b06      	cmp	r3, #6
 801def0:	f200 84da 	bhi.w	801e8a8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801def8:	4b30      	ldr	r3, [pc, #192]	@ (801dfbc <tcp_receive+0x5e8>)
 801defa:	681b      	ldr	r3, [r3, #0]
 801defc:	1ad3      	subs	r3, r2, r3
 801defe:	3b01      	subs	r3, #1
 801df00:	2b00      	cmp	r3, #0
 801df02:	f2c0 808f 	blt.w	801e024 <tcp_receive+0x650>
 801df06:	687b      	ldr	r3, [r7, #4]
 801df08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801df0a:	4b2b      	ldr	r3, [pc, #172]	@ (801dfb8 <tcp_receive+0x5e4>)
 801df0c:	881b      	ldrh	r3, [r3, #0]
 801df0e:	4619      	mov	r1, r3
 801df10:	4b2a      	ldr	r3, [pc, #168]	@ (801dfbc <tcp_receive+0x5e8>)
 801df12:	681b      	ldr	r3, [r3, #0]
 801df14:	440b      	add	r3, r1
 801df16:	1ad3      	subs	r3, r2, r3
 801df18:	3301      	adds	r3, #1
 801df1a:	2b00      	cmp	r3, #0
 801df1c:	f300 8082 	bgt.w	801e024 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801df20:	4b27      	ldr	r3, [pc, #156]	@ (801dfc0 <tcp_receive+0x5ec>)
 801df22:	685b      	ldr	r3, [r3, #4]
 801df24:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801df2a:	4b24      	ldr	r3, [pc, #144]	@ (801dfbc <tcp_receive+0x5e8>)
 801df2c:	681b      	ldr	r3, [r3, #0]
 801df2e:	1ad3      	subs	r3, r2, r3
 801df30:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801df32:	4b23      	ldr	r3, [pc, #140]	@ (801dfc0 <tcp_receive+0x5ec>)
 801df34:	685b      	ldr	r3, [r3, #4]
 801df36:	2b00      	cmp	r3, #0
 801df38:	d106      	bne.n	801df48 <tcp_receive+0x574>
 801df3a:	4b22      	ldr	r3, [pc, #136]	@ (801dfc4 <tcp_receive+0x5f0>)
 801df3c:	f240 5294 	movw	r2, #1428	@ 0x594
 801df40:	4921      	ldr	r1, [pc, #132]	@ (801dfc8 <tcp_receive+0x5f4>)
 801df42:	4822      	ldr	r0, [pc, #136]	@ (801dfcc <tcp_receive+0x5f8>)
 801df44:	f007 f98e 	bl	8025264 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801df48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801df4a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801df4e:	4293      	cmp	r3, r2
 801df50:	d906      	bls.n	801df60 <tcp_receive+0x58c>
 801df52:	4b1c      	ldr	r3, [pc, #112]	@ (801dfc4 <tcp_receive+0x5f0>)
 801df54:	f240 5295 	movw	r2, #1429	@ 0x595
 801df58:	491d      	ldr	r1, [pc, #116]	@ (801dfd0 <tcp_receive+0x5fc>)
 801df5a:	481c      	ldr	r0, [pc, #112]	@ (801dfcc <tcp_receive+0x5f8>)
 801df5c:	f007 f982 	bl	8025264 <iprintf>
      off = (u16_t)off32;
 801df60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801df62:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801df66:	4b16      	ldr	r3, [pc, #88]	@ (801dfc0 <tcp_receive+0x5ec>)
 801df68:	685b      	ldr	r3, [r3, #4]
 801df6a:	891b      	ldrh	r3, [r3, #8]
 801df6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801df70:	429a      	cmp	r2, r3
 801df72:	d906      	bls.n	801df82 <tcp_receive+0x5ae>
 801df74:	4b13      	ldr	r3, [pc, #76]	@ (801dfc4 <tcp_receive+0x5f0>)
 801df76:	f240 5297 	movw	r2, #1431	@ 0x597
 801df7a:	4916      	ldr	r1, [pc, #88]	@ (801dfd4 <tcp_receive+0x600>)
 801df7c:	4813      	ldr	r0, [pc, #76]	@ (801dfcc <tcp_receive+0x5f8>)
 801df7e:	f007 f971 	bl	8025264 <iprintf>
      inseg.len -= off;
 801df82:	4b0f      	ldr	r3, [pc, #60]	@ (801dfc0 <tcp_receive+0x5ec>)
 801df84:	891a      	ldrh	r2, [r3, #8]
 801df86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801df8a:	1ad3      	subs	r3, r2, r3
 801df8c:	b29a      	uxth	r2, r3
 801df8e:	4b0c      	ldr	r3, [pc, #48]	@ (801dfc0 <tcp_receive+0x5ec>)
 801df90:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801df92:	4b0b      	ldr	r3, [pc, #44]	@ (801dfc0 <tcp_receive+0x5ec>)
 801df94:	685b      	ldr	r3, [r3, #4]
 801df96:	891a      	ldrh	r2, [r3, #8]
 801df98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801df9c:	1ad3      	subs	r3, r2, r3
 801df9e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 801dfa0:	e02a      	b.n	801dff8 <tcp_receive+0x624>
 801dfa2:	bf00      	nop
 801dfa4:	0802b8b4 	.word	0x0802b8b4
 801dfa8:	0802b8bc 	.word	0x0802b8bc
 801dfac:	2400be8c 	.word	0x2400be8c
 801dfb0:	2400be88 	.word	0x2400be88
 801dfb4:	2400be4c 	.word	0x2400be4c
 801dfb8:	2400be8e 	.word	0x2400be8e
 801dfbc:	2400be84 	.word	0x2400be84
 801dfc0:	2400be64 	.word	0x2400be64
 801dfc4:	0802b54c 	.word	0x0802b54c
 801dfc8:	0802b8c4 	.word	0x0802b8c4
 801dfcc:	0802b598 	.word	0x0802b598
 801dfd0:	0802b8d4 	.word	0x0802b8d4
 801dfd4:	0802b8e4 	.word	0x0802b8e4
        off -= p->len;
 801dfd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dfda:	895b      	ldrh	r3, [r3, #10]
 801dfdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801dfe0:	1ad3      	subs	r3, r2, r3
 801dfe2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801dfe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dfe8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801dfea:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801dfec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dfee:	2200      	movs	r2, #0
 801dff0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801dff2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dff4:	681b      	ldr	r3, [r3, #0]
 801dff6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 801dff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dffa:	895b      	ldrh	r3, [r3, #10]
 801dffc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e000:	429a      	cmp	r2, r3
 801e002:	d8e9      	bhi.n	801dfd8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801e004:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e008:	4619      	mov	r1, r3
 801e00a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801e00c:	f7fc f924 	bl	801a258 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801e010:	687b      	ldr	r3, [r7, #4]
 801e012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e014:	4a90      	ldr	r2, [pc, #576]	@ (801e258 <tcp_receive+0x884>)
 801e016:	6013      	str	r3, [r2, #0]
 801e018:	4b90      	ldr	r3, [pc, #576]	@ (801e25c <tcp_receive+0x888>)
 801e01a:	68db      	ldr	r3, [r3, #12]
 801e01c:	4a8e      	ldr	r2, [pc, #568]	@ (801e258 <tcp_receive+0x884>)
 801e01e:	6812      	ldr	r2, [r2, #0]
 801e020:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e022:	e00d      	b.n	801e040 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801e024:	4b8c      	ldr	r3, [pc, #560]	@ (801e258 <tcp_receive+0x884>)
 801e026:	681a      	ldr	r2, [r3, #0]
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e02c:	1ad3      	subs	r3, r2, r3
 801e02e:	2b00      	cmp	r3, #0
 801e030:	da06      	bge.n	801e040 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801e032:	687b      	ldr	r3, [r7, #4]
 801e034:	8b5b      	ldrh	r3, [r3, #26]
 801e036:	f043 0302 	orr.w	r3, r3, #2
 801e03a:	b29a      	uxth	r2, r3
 801e03c:	687b      	ldr	r3, [r7, #4]
 801e03e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e040:	4b85      	ldr	r3, [pc, #532]	@ (801e258 <tcp_receive+0x884>)
 801e042:	681a      	ldr	r2, [r3, #0]
 801e044:	687b      	ldr	r3, [r7, #4]
 801e046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e048:	1ad3      	subs	r3, r2, r3
 801e04a:	2b00      	cmp	r3, #0
 801e04c:	f2c0 8427 	blt.w	801e89e <tcp_receive+0xeca>
 801e050:	4b81      	ldr	r3, [pc, #516]	@ (801e258 <tcp_receive+0x884>)
 801e052:	681a      	ldr	r2, [r3, #0]
 801e054:	687b      	ldr	r3, [r7, #4]
 801e056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e058:	6879      	ldr	r1, [r7, #4]
 801e05a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801e05c:	440b      	add	r3, r1
 801e05e:	1ad3      	subs	r3, r2, r3
 801e060:	3301      	adds	r3, #1
 801e062:	2b00      	cmp	r3, #0
 801e064:	f300 841b 	bgt.w	801e89e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801e068:	687b      	ldr	r3, [r7, #4]
 801e06a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e06c:	4b7a      	ldr	r3, [pc, #488]	@ (801e258 <tcp_receive+0x884>)
 801e06e:	681b      	ldr	r3, [r3, #0]
 801e070:	429a      	cmp	r2, r3
 801e072:	f040 8298 	bne.w	801e5a6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801e076:	4b79      	ldr	r3, [pc, #484]	@ (801e25c <tcp_receive+0x888>)
 801e078:	891c      	ldrh	r4, [r3, #8]
 801e07a:	4b78      	ldr	r3, [pc, #480]	@ (801e25c <tcp_receive+0x888>)
 801e07c:	68db      	ldr	r3, [r3, #12]
 801e07e:	899b      	ldrh	r3, [r3, #12]
 801e080:	b29b      	uxth	r3, r3
 801e082:	4618      	mov	r0, r3
 801e084:	f7fa fcc4 	bl	8018a10 <lwip_htons>
 801e088:	4603      	mov	r3, r0
 801e08a:	b2db      	uxtb	r3, r3
 801e08c:	f003 0303 	and.w	r3, r3, #3
 801e090:	2b00      	cmp	r3, #0
 801e092:	d001      	beq.n	801e098 <tcp_receive+0x6c4>
 801e094:	2301      	movs	r3, #1
 801e096:	e000      	b.n	801e09a <tcp_receive+0x6c6>
 801e098:	2300      	movs	r3, #0
 801e09a:	4423      	add	r3, r4
 801e09c:	b29a      	uxth	r2, r3
 801e09e:	4b70      	ldr	r3, [pc, #448]	@ (801e260 <tcp_receive+0x88c>)
 801e0a0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801e0a2:	687b      	ldr	r3, [r7, #4]
 801e0a4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801e0a6:	4b6e      	ldr	r3, [pc, #440]	@ (801e260 <tcp_receive+0x88c>)
 801e0a8:	881b      	ldrh	r3, [r3, #0]
 801e0aa:	429a      	cmp	r2, r3
 801e0ac:	d274      	bcs.n	801e198 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e0ae:	4b6b      	ldr	r3, [pc, #428]	@ (801e25c <tcp_receive+0x888>)
 801e0b0:	68db      	ldr	r3, [r3, #12]
 801e0b2:	899b      	ldrh	r3, [r3, #12]
 801e0b4:	b29b      	uxth	r3, r3
 801e0b6:	4618      	mov	r0, r3
 801e0b8:	f7fa fcaa 	bl	8018a10 <lwip_htons>
 801e0bc:	4603      	mov	r3, r0
 801e0be:	b2db      	uxtb	r3, r3
 801e0c0:	f003 0301 	and.w	r3, r3, #1
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	d01e      	beq.n	801e106 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801e0c8:	4b64      	ldr	r3, [pc, #400]	@ (801e25c <tcp_receive+0x888>)
 801e0ca:	68db      	ldr	r3, [r3, #12]
 801e0cc:	899b      	ldrh	r3, [r3, #12]
 801e0ce:	b29b      	uxth	r3, r3
 801e0d0:	b21b      	sxth	r3, r3
 801e0d2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801e0d6:	b21c      	sxth	r4, r3
 801e0d8:	4b60      	ldr	r3, [pc, #384]	@ (801e25c <tcp_receive+0x888>)
 801e0da:	68db      	ldr	r3, [r3, #12]
 801e0dc:	899b      	ldrh	r3, [r3, #12]
 801e0de:	b29b      	uxth	r3, r3
 801e0e0:	4618      	mov	r0, r3
 801e0e2:	f7fa fc95 	bl	8018a10 <lwip_htons>
 801e0e6:	4603      	mov	r3, r0
 801e0e8:	b2db      	uxtb	r3, r3
 801e0ea:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801e0ee:	b29b      	uxth	r3, r3
 801e0f0:	4618      	mov	r0, r3
 801e0f2:	f7fa fc8d 	bl	8018a10 <lwip_htons>
 801e0f6:	4603      	mov	r3, r0
 801e0f8:	b21b      	sxth	r3, r3
 801e0fa:	4323      	orrs	r3, r4
 801e0fc:	b21a      	sxth	r2, r3
 801e0fe:	4b57      	ldr	r3, [pc, #348]	@ (801e25c <tcp_receive+0x888>)
 801e100:	68db      	ldr	r3, [r3, #12]
 801e102:	b292      	uxth	r2, r2
 801e104:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801e106:	687b      	ldr	r3, [r7, #4]
 801e108:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801e10a:	4b54      	ldr	r3, [pc, #336]	@ (801e25c <tcp_receive+0x888>)
 801e10c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801e10e:	4b53      	ldr	r3, [pc, #332]	@ (801e25c <tcp_receive+0x888>)
 801e110:	68db      	ldr	r3, [r3, #12]
 801e112:	899b      	ldrh	r3, [r3, #12]
 801e114:	b29b      	uxth	r3, r3
 801e116:	4618      	mov	r0, r3
 801e118:	f7fa fc7a 	bl	8018a10 <lwip_htons>
 801e11c:	4603      	mov	r3, r0
 801e11e:	b2db      	uxtb	r3, r3
 801e120:	f003 0302 	and.w	r3, r3, #2
 801e124:	2b00      	cmp	r3, #0
 801e126:	d005      	beq.n	801e134 <tcp_receive+0x760>
            inseg.len -= 1;
 801e128:	4b4c      	ldr	r3, [pc, #304]	@ (801e25c <tcp_receive+0x888>)
 801e12a:	891b      	ldrh	r3, [r3, #8]
 801e12c:	3b01      	subs	r3, #1
 801e12e:	b29a      	uxth	r2, r3
 801e130:	4b4a      	ldr	r3, [pc, #296]	@ (801e25c <tcp_receive+0x888>)
 801e132:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801e134:	4b49      	ldr	r3, [pc, #292]	@ (801e25c <tcp_receive+0x888>)
 801e136:	685b      	ldr	r3, [r3, #4]
 801e138:	4a48      	ldr	r2, [pc, #288]	@ (801e25c <tcp_receive+0x888>)
 801e13a:	8912      	ldrh	r2, [r2, #8]
 801e13c:	4611      	mov	r1, r2
 801e13e:	4618      	mov	r0, r3
 801e140:	f7fb ff8a 	bl	801a058 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801e144:	4b45      	ldr	r3, [pc, #276]	@ (801e25c <tcp_receive+0x888>)
 801e146:	891c      	ldrh	r4, [r3, #8]
 801e148:	4b44      	ldr	r3, [pc, #272]	@ (801e25c <tcp_receive+0x888>)
 801e14a:	68db      	ldr	r3, [r3, #12]
 801e14c:	899b      	ldrh	r3, [r3, #12]
 801e14e:	b29b      	uxth	r3, r3
 801e150:	4618      	mov	r0, r3
 801e152:	f7fa fc5d 	bl	8018a10 <lwip_htons>
 801e156:	4603      	mov	r3, r0
 801e158:	b2db      	uxtb	r3, r3
 801e15a:	f003 0303 	and.w	r3, r3, #3
 801e15e:	2b00      	cmp	r3, #0
 801e160:	d001      	beq.n	801e166 <tcp_receive+0x792>
 801e162:	2301      	movs	r3, #1
 801e164:	e000      	b.n	801e168 <tcp_receive+0x794>
 801e166:	2300      	movs	r3, #0
 801e168:	4423      	add	r3, r4
 801e16a:	b29a      	uxth	r2, r3
 801e16c:	4b3c      	ldr	r3, [pc, #240]	@ (801e260 <tcp_receive+0x88c>)
 801e16e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e170:	4b3b      	ldr	r3, [pc, #236]	@ (801e260 <tcp_receive+0x88c>)
 801e172:	881b      	ldrh	r3, [r3, #0]
 801e174:	461a      	mov	r2, r3
 801e176:	4b38      	ldr	r3, [pc, #224]	@ (801e258 <tcp_receive+0x884>)
 801e178:	681b      	ldr	r3, [r3, #0]
 801e17a:	441a      	add	r2, r3
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e180:	6879      	ldr	r1, [r7, #4]
 801e182:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801e184:	440b      	add	r3, r1
 801e186:	429a      	cmp	r2, r3
 801e188:	d006      	beq.n	801e198 <tcp_receive+0x7c4>
 801e18a:	4b36      	ldr	r3, [pc, #216]	@ (801e264 <tcp_receive+0x890>)
 801e18c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 801e190:	4935      	ldr	r1, [pc, #212]	@ (801e268 <tcp_receive+0x894>)
 801e192:	4836      	ldr	r0, [pc, #216]	@ (801e26c <tcp_receive+0x898>)
 801e194:	f007 f866 	bl	8025264 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801e198:	687b      	ldr	r3, [r7, #4]
 801e19a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e19c:	2b00      	cmp	r3, #0
 801e19e:	f000 80e6 	beq.w	801e36e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e1a2:	4b2e      	ldr	r3, [pc, #184]	@ (801e25c <tcp_receive+0x888>)
 801e1a4:	68db      	ldr	r3, [r3, #12]
 801e1a6:	899b      	ldrh	r3, [r3, #12]
 801e1a8:	b29b      	uxth	r3, r3
 801e1aa:	4618      	mov	r0, r3
 801e1ac:	f7fa fc30 	bl	8018a10 <lwip_htons>
 801e1b0:	4603      	mov	r3, r0
 801e1b2:	b2db      	uxtb	r3, r3
 801e1b4:	f003 0301 	and.w	r3, r3, #1
 801e1b8:	2b00      	cmp	r3, #0
 801e1ba:	d010      	beq.n	801e1de <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801e1bc:	e00a      	b.n	801e1d4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801e1be:	687b      	ldr	r3, [r7, #4]
 801e1c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e1c2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e1c8:	681a      	ldr	r2, [r3, #0]
 801e1ca:	687b      	ldr	r3, [r7, #4]
 801e1cc:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801e1ce:	68f8      	ldr	r0, [r7, #12]
 801e1d0:	f7fd fcc5 	bl	801bb5e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801e1d4:	687b      	ldr	r3, [r7, #4]
 801e1d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e1d8:	2b00      	cmp	r3, #0
 801e1da:	d1f0      	bne.n	801e1be <tcp_receive+0x7ea>
 801e1dc:	e0c7      	b.n	801e36e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801e1de:	687b      	ldr	r3, [r7, #4]
 801e1e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801e1e4:	e051      	b.n	801e28a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801e1e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e1e8:	68db      	ldr	r3, [r3, #12]
 801e1ea:	899b      	ldrh	r3, [r3, #12]
 801e1ec:	b29b      	uxth	r3, r3
 801e1ee:	4618      	mov	r0, r3
 801e1f0:	f7fa fc0e 	bl	8018a10 <lwip_htons>
 801e1f4:	4603      	mov	r3, r0
 801e1f6:	b2db      	uxtb	r3, r3
 801e1f8:	f003 0301 	and.w	r3, r3, #1
 801e1fc:	2b00      	cmp	r3, #0
 801e1fe:	d03c      	beq.n	801e27a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801e200:	4b16      	ldr	r3, [pc, #88]	@ (801e25c <tcp_receive+0x888>)
 801e202:	68db      	ldr	r3, [r3, #12]
 801e204:	899b      	ldrh	r3, [r3, #12]
 801e206:	b29b      	uxth	r3, r3
 801e208:	4618      	mov	r0, r3
 801e20a:	f7fa fc01 	bl	8018a10 <lwip_htons>
 801e20e:	4603      	mov	r3, r0
 801e210:	b2db      	uxtb	r3, r3
 801e212:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801e216:	2b00      	cmp	r3, #0
 801e218:	d12f      	bne.n	801e27a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801e21a:	4b10      	ldr	r3, [pc, #64]	@ (801e25c <tcp_receive+0x888>)
 801e21c:	68db      	ldr	r3, [r3, #12]
 801e21e:	899b      	ldrh	r3, [r3, #12]
 801e220:	b29c      	uxth	r4, r3
 801e222:	2001      	movs	r0, #1
 801e224:	f7fa fbf4 	bl	8018a10 <lwip_htons>
 801e228:	4603      	mov	r3, r0
 801e22a:	461a      	mov	r2, r3
 801e22c:	4b0b      	ldr	r3, [pc, #44]	@ (801e25c <tcp_receive+0x888>)
 801e22e:	68db      	ldr	r3, [r3, #12]
 801e230:	4322      	orrs	r2, r4
 801e232:	b292      	uxth	r2, r2
 801e234:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801e236:	4b09      	ldr	r3, [pc, #36]	@ (801e25c <tcp_receive+0x888>)
 801e238:	891c      	ldrh	r4, [r3, #8]
 801e23a:	4b08      	ldr	r3, [pc, #32]	@ (801e25c <tcp_receive+0x888>)
 801e23c:	68db      	ldr	r3, [r3, #12]
 801e23e:	899b      	ldrh	r3, [r3, #12]
 801e240:	b29b      	uxth	r3, r3
 801e242:	4618      	mov	r0, r3
 801e244:	f7fa fbe4 	bl	8018a10 <lwip_htons>
 801e248:	4603      	mov	r3, r0
 801e24a:	b2db      	uxtb	r3, r3
 801e24c:	f003 0303 	and.w	r3, r3, #3
 801e250:	2b00      	cmp	r3, #0
 801e252:	d00d      	beq.n	801e270 <tcp_receive+0x89c>
 801e254:	2301      	movs	r3, #1
 801e256:	e00c      	b.n	801e272 <tcp_receive+0x89e>
 801e258:	2400be84 	.word	0x2400be84
 801e25c:	2400be64 	.word	0x2400be64
 801e260:	2400be8e 	.word	0x2400be8e
 801e264:	0802b54c 	.word	0x0802b54c
 801e268:	0802b8f4 	.word	0x0802b8f4
 801e26c:	0802b598 	.word	0x0802b598
 801e270:	2300      	movs	r3, #0
 801e272:	4423      	add	r3, r4
 801e274:	b29a      	uxth	r2, r3
 801e276:	4b98      	ldr	r3, [pc, #608]	@ (801e4d8 <tcp_receive+0xb04>)
 801e278:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801e27a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e27c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801e27e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e280:	681b      	ldr	r3, [r3, #0]
 801e282:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801e284:	6938      	ldr	r0, [r7, #16]
 801e286:	f7fd fc6a 	bl	801bb5e <tcp_seg_free>
            while (next &&
 801e28a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e28c:	2b00      	cmp	r3, #0
 801e28e:	d00e      	beq.n	801e2ae <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801e290:	4b91      	ldr	r3, [pc, #580]	@ (801e4d8 <tcp_receive+0xb04>)
 801e292:	881b      	ldrh	r3, [r3, #0]
 801e294:	461a      	mov	r2, r3
 801e296:	4b91      	ldr	r3, [pc, #580]	@ (801e4dc <tcp_receive+0xb08>)
 801e298:	681b      	ldr	r3, [r3, #0]
 801e29a:	441a      	add	r2, r3
 801e29c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e29e:	68db      	ldr	r3, [r3, #12]
 801e2a0:	685b      	ldr	r3, [r3, #4]
 801e2a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801e2a4:	8909      	ldrh	r1, [r1, #8]
 801e2a6:	440b      	add	r3, r1
 801e2a8:	1ad3      	subs	r3, r2, r3
            while (next &&
 801e2aa:	2b00      	cmp	r3, #0
 801e2ac:	da9b      	bge.n	801e1e6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801e2ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	d059      	beq.n	801e368 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801e2b4:	4b88      	ldr	r3, [pc, #544]	@ (801e4d8 <tcp_receive+0xb04>)
 801e2b6:	881b      	ldrh	r3, [r3, #0]
 801e2b8:	461a      	mov	r2, r3
 801e2ba:	4b88      	ldr	r3, [pc, #544]	@ (801e4dc <tcp_receive+0xb08>)
 801e2bc:	681b      	ldr	r3, [r3, #0]
 801e2be:	441a      	add	r2, r3
 801e2c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e2c2:	68db      	ldr	r3, [r3, #12]
 801e2c4:	685b      	ldr	r3, [r3, #4]
 801e2c6:	1ad3      	subs	r3, r2, r3
            if (next &&
 801e2c8:	2b00      	cmp	r3, #0
 801e2ca:	dd4d      	ble.n	801e368 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801e2cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e2ce:	68db      	ldr	r3, [r3, #12]
 801e2d0:	685b      	ldr	r3, [r3, #4]
 801e2d2:	b29a      	uxth	r2, r3
 801e2d4:	4b81      	ldr	r3, [pc, #516]	@ (801e4dc <tcp_receive+0xb08>)
 801e2d6:	681b      	ldr	r3, [r3, #0]
 801e2d8:	b29b      	uxth	r3, r3
 801e2da:	1ad3      	subs	r3, r2, r3
 801e2dc:	b29a      	uxth	r2, r3
 801e2de:	4b80      	ldr	r3, [pc, #512]	@ (801e4e0 <tcp_receive+0xb0c>)
 801e2e0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801e2e2:	4b7f      	ldr	r3, [pc, #508]	@ (801e4e0 <tcp_receive+0xb0c>)
 801e2e4:	68db      	ldr	r3, [r3, #12]
 801e2e6:	899b      	ldrh	r3, [r3, #12]
 801e2e8:	b29b      	uxth	r3, r3
 801e2ea:	4618      	mov	r0, r3
 801e2ec:	f7fa fb90 	bl	8018a10 <lwip_htons>
 801e2f0:	4603      	mov	r3, r0
 801e2f2:	b2db      	uxtb	r3, r3
 801e2f4:	f003 0302 	and.w	r3, r3, #2
 801e2f8:	2b00      	cmp	r3, #0
 801e2fa:	d005      	beq.n	801e308 <tcp_receive+0x934>
                inseg.len -= 1;
 801e2fc:	4b78      	ldr	r3, [pc, #480]	@ (801e4e0 <tcp_receive+0xb0c>)
 801e2fe:	891b      	ldrh	r3, [r3, #8]
 801e300:	3b01      	subs	r3, #1
 801e302:	b29a      	uxth	r2, r3
 801e304:	4b76      	ldr	r3, [pc, #472]	@ (801e4e0 <tcp_receive+0xb0c>)
 801e306:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801e308:	4b75      	ldr	r3, [pc, #468]	@ (801e4e0 <tcp_receive+0xb0c>)
 801e30a:	685b      	ldr	r3, [r3, #4]
 801e30c:	4a74      	ldr	r2, [pc, #464]	@ (801e4e0 <tcp_receive+0xb0c>)
 801e30e:	8912      	ldrh	r2, [r2, #8]
 801e310:	4611      	mov	r1, r2
 801e312:	4618      	mov	r0, r3
 801e314:	f7fb fea0 	bl	801a058 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801e318:	4b71      	ldr	r3, [pc, #452]	@ (801e4e0 <tcp_receive+0xb0c>)
 801e31a:	891c      	ldrh	r4, [r3, #8]
 801e31c:	4b70      	ldr	r3, [pc, #448]	@ (801e4e0 <tcp_receive+0xb0c>)
 801e31e:	68db      	ldr	r3, [r3, #12]
 801e320:	899b      	ldrh	r3, [r3, #12]
 801e322:	b29b      	uxth	r3, r3
 801e324:	4618      	mov	r0, r3
 801e326:	f7fa fb73 	bl	8018a10 <lwip_htons>
 801e32a:	4603      	mov	r3, r0
 801e32c:	b2db      	uxtb	r3, r3
 801e32e:	f003 0303 	and.w	r3, r3, #3
 801e332:	2b00      	cmp	r3, #0
 801e334:	d001      	beq.n	801e33a <tcp_receive+0x966>
 801e336:	2301      	movs	r3, #1
 801e338:	e000      	b.n	801e33c <tcp_receive+0x968>
 801e33a:	2300      	movs	r3, #0
 801e33c:	4423      	add	r3, r4
 801e33e:	b29a      	uxth	r2, r3
 801e340:	4b65      	ldr	r3, [pc, #404]	@ (801e4d8 <tcp_receive+0xb04>)
 801e342:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801e344:	4b64      	ldr	r3, [pc, #400]	@ (801e4d8 <tcp_receive+0xb04>)
 801e346:	881b      	ldrh	r3, [r3, #0]
 801e348:	461a      	mov	r2, r3
 801e34a:	4b64      	ldr	r3, [pc, #400]	@ (801e4dc <tcp_receive+0xb08>)
 801e34c:	681b      	ldr	r3, [r3, #0]
 801e34e:	441a      	add	r2, r3
 801e350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e352:	68db      	ldr	r3, [r3, #12]
 801e354:	685b      	ldr	r3, [r3, #4]
 801e356:	429a      	cmp	r2, r3
 801e358:	d006      	beq.n	801e368 <tcp_receive+0x994>
 801e35a:	4b62      	ldr	r3, [pc, #392]	@ (801e4e4 <tcp_receive+0xb10>)
 801e35c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801e360:	4961      	ldr	r1, [pc, #388]	@ (801e4e8 <tcp_receive+0xb14>)
 801e362:	4862      	ldr	r0, [pc, #392]	@ (801e4ec <tcp_receive+0xb18>)
 801e364:	f006 ff7e 	bl	8025264 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801e368:	687b      	ldr	r3, [r7, #4]
 801e36a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e36c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801e36e:	4b5a      	ldr	r3, [pc, #360]	@ (801e4d8 <tcp_receive+0xb04>)
 801e370:	881b      	ldrh	r3, [r3, #0]
 801e372:	461a      	mov	r2, r3
 801e374:	4b59      	ldr	r3, [pc, #356]	@ (801e4dc <tcp_receive+0xb08>)
 801e376:	681b      	ldr	r3, [r3, #0]
 801e378:	441a      	add	r2, r3
 801e37a:	687b      	ldr	r3, [r7, #4]
 801e37c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801e37e:	687b      	ldr	r3, [r7, #4]
 801e380:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801e382:	4b55      	ldr	r3, [pc, #340]	@ (801e4d8 <tcp_receive+0xb04>)
 801e384:	881b      	ldrh	r3, [r3, #0]
 801e386:	429a      	cmp	r2, r3
 801e388:	d206      	bcs.n	801e398 <tcp_receive+0x9c4>
 801e38a:	4b56      	ldr	r3, [pc, #344]	@ (801e4e4 <tcp_receive+0xb10>)
 801e38c:	f240 6207 	movw	r2, #1543	@ 0x607
 801e390:	4957      	ldr	r1, [pc, #348]	@ (801e4f0 <tcp_receive+0xb1c>)
 801e392:	4856      	ldr	r0, [pc, #344]	@ (801e4ec <tcp_receive+0xb18>)
 801e394:	f006 ff66 	bl	8025264 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801e398:	687b      	ldr	r3, [r7, #4]
 801e39a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801e39c:	4b4e      	ldr	r3, [pc, #312]	@ (801e4d8 <tcp_receive+0xb04>)
 801e39e:	881b      	ldrh	r3, [r3, #0]
 801e3a0:	1ad3      	subs	r3, r2, r3
 801e3a2:	b29a      	uxth	r2, r3
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801e3a8:	6878      	ldr	r0, [r7, #4]
 801e3aa:	f7fc feb1 	bl	801b110 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801e3ae:	4b4c      	ldr	r3, [pc, #304]	@ (801e4e0 <tcp_receive+0xb0c>)
 801e3b0:	685b      	ldr	r3, [r3, #4]
 801e3b2:	891b      	ldrh	r3, [r3, #8]
 801e3b4:	2b00      	cmp	r3, #0
 801e3b6:	d006      	beq.n	801e3c6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801e3b8:	4b49      	ldr	r3, [pc, #292]	@ (801e4e0 <tcp_receive+0xb0c>)
 801e3ba:	685b      	ldr	r3, [r3, #4]
 801e3bc:	4a4d      	ldr	r2, [pc, #308]	@ (801e4f4 <tcp_receive+0xb20>)
 801e3be:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801e3c0:	4b47      	ldr	r3, [pc, #284]	@ (801e4e0 <tcp_receive+0xb0c>)
 801e3c2:	2200      	movs	r2, #0
 801e3c4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e3c6:	4b46      	ldr	r3, [pc, #280]	@ (801e4e0 <tcp_receive+0xb0c>)
 801e3c8:	68db      	ldr	r3, [r3, #12]
 801e3ca:	899b      	ldrh	r3, [r3, #12]
 801e3cc:	b29b      	uxth	r3, r3
 801e3ce:	4618      	mov	r0, r3
 801e3d0:	f7fa fb1e 	bl	8018a10 <lwip_htons>
 801e3d4:	4603      	mov	r3, r0
 801e3d6:	b2db      	uxtb	r3, r3
 801e3d8:	f003 0301 	and.w	r3, r3, #1
 801e3dc:	2b00      	cmp	r3, #0
 801e3de:	f000 80b8 	beq.w	801e552 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801e3e2:	4b45      	ldr	r3, [pc, #276]	@ (801e4f8 <tcp_receive+0xb24>)
 801e3e4:	781b      	ldrb	r3, [r3, #0]
 801e3e6:	f043 0320 	orr.w	r3, r3, #32
 801e3ea:	b2da      	uxtb	r2, r3
 801e3ec:	4b42      	ldr	r3, [pc, #264]	@ (801e4f8 <tcp_receive+0xb24>)
 801e3ee:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801e3f0:	e0af      	b.n	801e552 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801e3f2:	687b      	ldr	r3, [r7, #4]
 801e3f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e3f6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801e3f8:	687b      	ldr	r3, [r7, #4]
 801e3fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e3fc:	68db      	ldr	r3, [r3, #12]
 801e3fe:	685b      	ldr	r3, [r3, #4]
 801e400:	4a36      	ldr	r2, [pc, #216]	@ (801e4dc <tcp_receive+0xb08>)
 801e402:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801e404:	68bb      	ldr	r3, [r7, #8]
 801e406:	891b      	ldrh	r3, [r3, #8]
 801e408:	461c      	mov	r4, r3
 801e40a:	68bb      	ldr	r3, [r7, #8]
 801e40c:	68db      	ldr	r3, [r3, #12]
 801e40e:	899b      	ldrh	r3, [r3, #12]
 801e410:	b29b      	uxth	r3, r3
 801e412:	4618      	mov	r0, r3
 801e414:	f7fa fafc 	bl	8018a10 <lwip_htons>
 801e418:	4603      	mov	r3, r0
 801e41a:	b2db      	uxtb	r3, r3
 801e41c:	f003 0303 	and.w	r3, r3, #3
 801e420:	2b00      	cmp	r3, #0
 801e422:	d001      	beq.n	801e428 <tcp_receive+0xa54>
 801e424:	2301      	movs	r3, #1
 801e426:	e000      	b.n	801e42a <tcp_receive+0xa56>
 801e428:	2300      	movs	r3, #0
 801e42a:	191a      	adds	r2, r3, r4
 801e42c:	687b      	ldr	r3, [r7, #4]
 801e42e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e430:	441a      	add	r2, r3
 801e432:	687b      	ldr	r3, [r7, #4]
 801e434:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801e43a:	461c      	mov	r4, r3
 801e43c:	68bb      	ldr	r3, [r7, #8]
 801e43e:	891b      	ldrh	r3, [r3, #8]
 801e440:	461d      	mov	r5, r3
 801e442:	68bb      	ldr	r3, [r7, #8]
 801e444:	68db      	ldr	r3, [r3, #12]
 801e446:	899b      	ldrh	r3, [r3, #12]
 801e448:	b29b      	uxth	r3, r3
 801e44a:	4618      	mov	r0, r3
 801e44c:	f7fa fae0 	bl	8018a10 <lwip_htons>
 801e450:	4603      	mov	r3, r0
 801e452:	b2db      	uxtb	r3, r3
 801e454:	f003 0303 	and.w	r3, r3, #3
 801e458:	2b00      	cmp	r3, #0
 801e45a:	d001      	beq.n	801e460 <tcp_receive+0xa8c>
 801e45c:	2301      	movs	r3, #1
 801e45e:	e000      	b.n	801e462 <tcp_receive+0xa8e>
 801e460:	2300      	movs	r3, #0
 801e462:	442b      	add	r3, r5
 801e464:	429c      	cmp	r4, r3
 801e466:	d206      	bcs.n	801e476 <tcp_receive+0xaa2>
 801e468:	4b1e      	ldr	r3, [pc, #120]	@ (801e4e4 <tcp_receive+0xb10>)
 801e46a:	f240 622b 	movw	r2, #1579	@ 0x62b
 801e46e:	4923      	ldr	r1, [pc, #140]	@ (801e4fc <tcp_receive+0xb28>)
 801e470:	481e      	ldr	r0, [pc, #120]	@ (801e4ec <tcp_receive+0xb18>)
 801e472:	f006 fef7 	bl	8025264 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801e476:	68bb      	ldr	r3, [r7, #8]
 801e478:	891b      	ldrh	r3, [r3, #8]
 801e47a:	461c      	mov	r4, r3
 801e47c:	68bb      	ldr	r3, [r7, #8]
 801e47e:	68db      	ldr	r3, [r3, #12]
 801e480:	899b      	ldrh	r3, [r3, #12]
 801e482:	b29b      	uxth	r3, r3
 801e484:	4618      	mov	r0, r3
 801e486:	f7fa fac3 	bl	8018a10 <lwip_htons>
 801e48a:	4603      	mov	r3, r0
 801e48c:	b2db      	uxtb	r3, r3
 801e48e:	f003 0303 	and.w	r3, r3, #3
 801e492:	2b00      	cmp	r3, #0
 801e494:	d001      	beq.n	801e49a <tcp_receive+0xac6>
 801e496:	2301      	movs	r3, #1
 801e498:	e000      	b.n	801e49c <tcp_receive+0xac8>
 801e49a:	2300      	movs	r3, #0
 801e49c:	1919      	adds	r1, r3, r4
 801e49e:	687b      	ldr	r3, [r7, #4]
 801e4a0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801e4a2:	b28b      	uxth	r3, r1
 801e4a4:	1ad3      	subs	r3, r2, r3
 801e4a6:	b29a      	uxth	r2, r3
 801e4a8:	687b      	ldr	r3, [r7, #4]
 801e4aa:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801e4ac:	6878      	ldr	r0, [r7, #4]
 801e4ae:	f7fc fe2f 	bl	801b110 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801e4b2:	68bb      	ldr	r3, [r7, #8]
 801e4b4:	685b      	ldr	r3, [r3, #4]
 801e4b6:	891b      	ldrh	r3, [r3, #8]
 801e4b8:	2b00      	cmp	r3, #0
 801e4ba:	d028      	beq.n	801e50e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801e4bc:	4b0d      	ldr	r3, [pc, #52]	@ (801e4f4 <tcp_receive+0xb20>)
 801e4be:	681b      	ldr	r3, [r3, #0]
 801e4c0:	2b00      	cmp	r3, #0
 801e4c2:	d01d      	beq.n	801e500 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801e4c4:	4b0b      	ldr	r3, [pc, #44]	@ (801e4f4 <tcp_receive+0xb20>)
 801e4c6:	681a      	ldr	r2, [r3, #0]
 801e4c8:	68bb      	ldr	r3, [r7, #8]
 801e4ca:	685b      	ldr	r3, [r3, #4]
 801e4cc:	4619      	mov	r1, r3
 801e4ce:	4610      	mov	r0, r2
 801e4d0:	f7fc f848 	bl	801a564 <pbuf_cat>
 801e4d4:	e018      	b.n	801e508 <tcp_receive+0xb34>
 801e4d6:	bf00      	nop
 801e4d8:	2400be8e 	.word	0x2400be8e
 801e4dc:	2400be84 	.word	0x2400be84
 801e4e0:	2400be64 	.word	0x2400be64
 801e4e4:	0802b54c 	.word	0x0802b54c
 801e4e8:	0802b92c 	.word	0x0802b92c
 801e4ec:	0802b598 	.word	0x0802b598
 801e4f0:	0802b968 	.word	0x0802b968
 801e4f4:	2400be94 	.word	0x2400be94
 801e4f8:	2400be91 	.word	0x2400be91
 801e4fc:	0802b988 	.word	0x0802b988
            } else {
              recv_data = cseg->p;
 801e500:	68bb      	ldr	r3, [r7, #8]
 801e502:	685b      	ldr	r3, [r3, #4]
 801e504:	4a70      	ldr	r2, [pc, #448]	@ (801e6c8 <tcp_receive+0xcf4>)
 801e506:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801e508:	68bb      	ldr	r3, [r7, #8]
 801e50a:	2200      	movs	r2, #0
 801e50c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801e50e:	68bb      	ldr	r3, [r7, #8]
 801e510:	68db      	ldr	r3, [r3, #12]
 801e512:	899b      	ldrh	r3, [r3, #12]
 801e514:	b29b      	uxth	r3, r3
 801e516:	4618      	mov	r0, r3
 801e518:	f7fa fa7a 	bl	8018a10 <lwip_htons>
 801e51c:	4603      	mov	r3, r0
 801e51e:	b2db      	uxtb	r3, r3
 801e520:	f003 0301 	and.w	r3, r3, #1
 801e524:	2b00      	cmp	r3, #0
 801e526:	d00d      	beq.n	801e544 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801e528:	4b68      	ldr	r3, [pc, #416]	@ (801e6cc <tcp_receive+0xcf8>)
 801e52a:	781b      	ldrb	r3, [r3, #0]
 801e52c:	f043 0320 	orr.w	r3, r3, #32
 801e530:	b2da      	uxtb	r2, r3
 801e532:	4b66      	ldr	r3, [pc, #408]	@ (801e6cc <tcp_receive+0xcf8>)
 801e534:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801e536:	687b      	ldr	r3, [r7, #4]
 801e538:	7d1b      	ldrb	r3, [r3, #20]
 801e53a:	2b04      	cmp	r3, #4
 801e53c:	d102      	bne.n	801e544 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801e53e:	687b      	ldr	r3, [r7, #4]
 801e540:	2207      	movs	r2, #7
 801e542:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801e544:	68bb      	ldr	r3, [r7, #8]
 801e546:	681a      	ldr	r2, [r3, #0]
 801e548:	687b      	ldr	r3, [r7, #4]
 801e54a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801e54c:	68b8      	ldr	r0, [r7, #8]
 801e54e:	f7fd fb06 	bl	801bb5e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801e552:	687b      	ldr	r3, [r7, #4]
 801e554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e556:	2b00      	cmp	r3, #0
 801e558:	d008      	beq.n	801e56c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801e55a:	687b      	ldr	r3, [r7, #4]
 801e55c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e55e:	68db      	ldr	r3, [r3, #12]
 801e560:	685a      	ldr	r2, [r3, #4]
 801e562:	687b      	ldr	r3, [r7, #4]
 801e564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801e566:	429a      	cmp	r2, r3
 801e568:	f43f af43 	beq.w	801e3f2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	8b5b      	ldrh	r3, [r3, #26]
 801e570:	f003 0301 	and.w	r3, r3, #1
 801e574:	2b00      	cmp	r3, #0
 801e576:	d00e      	beq.n	801e596 <tcp_receive+0xbc2>
 801e578:	687b      	ldr	r3, [r7, #4]
 801e57a:	8b5b      	ldrh	r3, [r3, #26]
 801e57c:	f023 0301 	bic.w	r3, r3, #1
 801e580:	b29a      	uxth	r2, r3
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	835a      	strh	r2, [r3, #26]
 801e586:	687b      	ldr	r3, [r7, #4]
 801e588:	8b5b      	ldrh	r3, [r3, #26]
 801e58a:	f043 0302 	orr.w	r3, r3, #2
 801e58e:	b29a      	uxth	r2, r3
 801e590:	687b      	ldr	r3, [r7, #4]
 801e592:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801e594:	e187      	b.n	801e8a6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 801e596:	687b      	ldr	r3, [r7, #4]
 801e598:	8b5b      	ldrh	r3, [r3, #26]
 801e59a:	f043 0301 	orr.w	r3, r3, #1
 801e59e:	b29a      	uxth	r2, r3
 801e5a0:	687b      	ldr	r3, [r7, #4]
 801e5a2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801e5a4:	e17f      	b.n	801e8a6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801e5a6:	687b      	ldr	r3, [r7, #4]
 801e5a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e5aa:	2b00      	cmp	r3, #0
 801e5ac:	d106      	bne.n	801e5bc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801e5ae:	4848      	ldr	r0, [pc, #288]	@ (801e6d0 <tcp_receive+0xcfc>)
 801e5b0:	f7fd faee 	bl	801bb90 <tcp_seg_copy>
 801e5b4:	4602      	mov	r2, r0
 801e5b6:	687b      	ldr	r3, [r7, #4]
 801e5b8:	675a      	str	r2, [r3, #116]	@ 0x74
 801e5ba:	e16c      	b.n	801e896 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801e5bc:	2300      	movs	r3, #0
 801e5be:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801e5c0:	687b      	ldr	r3, [r7, #4]
 801e5c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e5c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e5c6:	e156      	b.n	801e876 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801e5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e5ca:	68db      	ldr	r3, [r3, #12]
 801e5cc:	685a      	ldr	r2, [r3, #4]
 801e5ce:	4b41      	ldr	r3, [pc, #260]	@ (801e6d4 <tcp_receive+0xd00>)
 801e5d0:	681b      	ldr	r3, [r3, #0]
 801e5d2:	429a      	cmp	r2, r3
 801e5d4:	d11d      	bne.n	801e612 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801e5d6:	4b3e      	ldr	r3, [pc, #248]	@ (801e6d0 <tcp_receive+0xcfc>)
 801e5d8:	891a      	ldrh	r2, [r3, #8]
 801e5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e5dc:	891b      	ldrh	r3, [r3, #8]
 801e5de:	429a      	cmp	r2, r3
 801e5e0:	f240 814e 	bls.w	801e880 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e5e4:	483a      	ldr	r0, [pc, #232]	@ (801e6d0 <tcp_receive+0xcfc>)
 801e5e6:	f7fd fad3 	bl	801bb90 <tcp_seg_copy>
 801e5ea:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801e5ec:	697b      	ldr	r3, [r7, #20]
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	f000 8148 	beq.w	801e884 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 801e5f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d003      	beq.n	801e602 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801e5fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e5fc:	697a      	ldr	r2, [r7, #20]
 801e5fe:	601a      	str	r2, [r3, #0]
 801e600:	e002      	b.n	801e608 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801e602:	687b      	ldr	r3, [r7, #4]
 801e604:	697a      	ldr	r2, [r7, #20]
 801e606:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801e608:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801e60a:	6978      	ldr	r0, [r7, #20]
 801e60c:	f7ff f8de 	bl	801d7cc <tcp_oos_insert_segment>
                }
                break;
 801e610:	e138      	b.n	801e884 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801e612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e614:	2b00      	cmp	r3, #0
 801e616:	d117      	bne.n	801e648 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801e618:	4b2e      	ldr	r3, [pc, #184]	@ (801e6d4 <tcp_receive+0xd00>)
 801e61a:	681a      	ldr	r2, [r3, #0]
 801e61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e61e:	68db      	ldr	r3, [r3, #12]
 801e620:	685b      	ldr	r3, [r3, #4]
 801e622:	1ad3      	subs	r3, r2, r3
 801e624:	2b00      	cmp	r3, #0
 801e626:	da57      	bge.n	801e6d8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e628:	4829      	ldr	r0, [pc, #164]	@ (801e6d0 <tcp_receive+0xcfc>)
 801e62a:	f7fd fab1 	bl	801bb90 <tcp_seg_copy>
 801e62e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801e630:	69bb      	ldr	r3, [r7, #24]
 801e632:	2b00      	cmp	r3, #0
 801e634:	f000 8128 	beq.w	801e888 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801e638:	687b      	ldr	r3, [r7, #4]
 801e63a:	69ba      	ldr	r2, [r7, #24]
 801e63c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801e63e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801e640:	69b8      	ldr	r0, [r7, #24]
 801e642:	f7ff f8c3 	bl	801d7cc <tcp_oos_insert_segment>
                  }
                  break;
 801e646:	e11f      	b.n	801e888 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801e648:	4b22      	ldr	r3, [pc, #136]	@ (801e6d4 <tcp_receive+0xd00>)
 801e64a:	681a      	ldr	r2, [r3, #0]
 801e64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e64e:	68db      	ldr	r3, [r3, #12]
 801e650:	685b      	ldr	r3, [r3, #4]
 801e652:	1ad3      	subs	r3, r2, r3
 801e654:	3b01      	subs	r3, #1
 801e656:	2b00      	cmp	r3, #0
 801e658:	db3e      	blt.n	801e6d8 <tcp_receive+0xd04>
 801e65a:	4b1e      	ldr	r3, [pc, #120]	@ (801e6d4 <tcp_receive+0xd00>)
 801e65c:	681a      	ldr	r2, [r3, #0]
 801e65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e660:	68db      	ldr	r3, [r3, #12]
 801e662:	685b      	ldr	r3, [r3, #4]
 801e664:	1ad3      	subs	r3, r2, r3
 801e666:	3301      	adds	r3, #1
 801e668:	2b00      	cmp	r3, #0
 801e66a:	dc35      	bgt.n	801e6d8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e66c:	4818      	ldr	r0, [pc, #96]	@ (801e6d0 <tcp_receive+0xcfc>)
 801e66e:	f7fd fa8f 	bl	801bb90 <tcp_seg_copy>
 801e672:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801e674:	69fb      	ldr	r3, [r7, #28]
 801e676:	2b00      	cmp	r3, #0
 801e678:	f000 8108 	beq.w	801e88c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801e67c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e67e:	68db      	ldr	r3, [r3, #12]
 801e680:	685b      	ldr	r3, [r3, #4]
 801e682:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e684:	8912      	ldrh	r2, [r2, #8]
 801e686:	441a      	add	r2, r3
 801e688:	4b12      	ldr	r3, [pc, #72]	@ (801e6d4 <tcp_receive+0xd00>)
 801e68a:	681b      	ldr	r3, [r3, #0]
 801e68c:	1ad3      	subs	r3, r2, r3
 801e68e:	2b00      	cmp	r3, #0
 801e690:	dd12      	ble.n	801e6b8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801e692:	4b10      	ldr	r3, [pc, #64]	@ (801e6d4 <tcp_receive+0xd00>)
 801e694:	681b      	ldr	r3, [r3, #0]
 801e696:	b29a      	uxth	r2, r3
 801e698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e69a:	68db      	ldr	r3, [r3, #12]
 801e69c:	685b      	ldr	r3, [r3, #4]
 801e69e:	b29b      	uxth	r3, r3
 801e6a0:	1ad3      	subs	r3, r2, r3
 801e6a2:	b29a      	uxth	r2, r3
 801e6a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6a6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801e6a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6aa:	685a      	ldr	r2, [r3, #4]
 801e6ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6ae:	891b      	ldrh	r3, [r3, #8]
 801e6b0:	4619      	mov	r1, r3
 801e6b2:	4610      	mov	r0, r2
 801e6b4:	f7fb fcd0 	bl	801a058 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801e6b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6ba:	69fa      	ldr	r2, [r7, #28]
 801e6bc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801e6be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801e6c0:	69f8      	ldr	r0, [r7, #28]
 801e6c2:	f7ff f883 	bl	801d7cc <tcp_oos_insert_segment>
                  }
                  break;
 801e6c6:	e0e1      	b.n	801e88c <tcp_receive+0xeb8>
 801e6c8:	2400be94 	.word	0x2400be94
 801e6cc:	2400be91 	.word	0x2400be91
 801e6d0:	2400be64 	.word	0x2400be64
 801e6d4:	2400be84 	.word	0x2400be84
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801e6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e6da:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801e6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e6de:	681b      	ldr	r3, [r3, #0]
 801e6e0:	2b00      	cmp	r3, #0
 801e6e2:	f040 80c5 	bne.w	801e870 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801e6e6:	4b7f      	ldr	r3, [pc, #508]	@ (801e8e4 <tcp_receive+0xf10>)
 801e6e8:	681a      	ldr	r2, [r3, #0]
 801e6ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e6ec:	68db      	ldr	r3, [r3, #12]
 801e6ee:	685b      	ldr	r3, [r3, #4]
 801e6f0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801e6f2:	2b00      	cmp	r3, #0
 801e6f4:	f340 80bc 	ble.w	801e870 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801e6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e6fa:	68db      	ldr	r3, [r3, #12]
 801e6fc:	899b      	ldrh	r3, [r3, #12]
 801e6fe:	b29b      	uxth	r3, r3
 801e700:	4618      	mov	r0, r3
 801e702:	f7fa f985 	bl	8018a10 <lwip_htons>
 801e706:	4603      	mov	r3, r0
 801e708:	b2db      	uxtb	r3, r3
 801e70a:	f003 0301 	and.w	r3, r3, #1
 801e70e:	2b00      	cmp	r3, #0
 801e710:	f040 80be 	bne.w	801e890 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801e714:	4874      	ldr	r0, [pc, #464]	@ (801e8e8 <tcp_receive+0xf14>)
 801e716:	f7fd fa3b 	bl	801bb90 <tcp_seg_copy>
 801e71a:	4602      	mov	r2, r0
 801e71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e71e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801e720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e722:	681b      	ldr	r3, [r3, #0]
 801e724:	2b00      	cmp	r3, #0
 801e726:	f000 80b5 	beq.w	801e894 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801e72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e72c:	68db      	ldr	r3, [r3, #12]
 801e72e:	685b      	ldr	r3, [r3, #4]
 801e730:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e732:	8912      	ldrh	r2, [r2, #8]
 801e734:	441a      	add	r2, r3
 801e736:	4b6b      	ldr	r3, [pc, #428]	@ (801e8e4 <tcp_receive+0xf10>)
 801e738:	681b      	ldr	r3, [r3, #0]
 801e73a:	1ad3      	subs	r3, r2, r3
 801e73c:	2b00      	cmp	r3, #0
 801e73e:	dd12      	ble.n	801e766 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801e740:	4b68      	ldr	r3, [pc, #416]	@ (801e8e4 <tcp_receive+0xf10>)
 801e742:	681b      	ldr	r3, [r3, #0]
 801e744:	b29a      	uxth	r2, r3
 801e746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e748:	68db      	ldr	r3, [r3, #12]
 801e74a:	685b      	ldr	r3, [r3, #4]
 801e74c:	b29b      	uxth	r3, r3
 801e74e:	1ad3      	subs	r3, r2, r3
 801e750:	b29a      	uxth	r2, r3
 801e752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e754:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801e756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e758:	685a      	ldr	r2, [r3, #4]
 801e75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e75c:	891b      	ldrh	r3, [r3, #8]
 801e75e:	4619      	mov	r1, r3
 801e760:	4610      	mov	r0, r2
 801e762:	f7fb fc79 	bl	801a058 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801e766:	4b61      	ldr	r3, [pc, #388]	@ (801e8ec <tcp_receive+0xf18>)
 801e768:	881b      	ldrh	r3, [r3, #0]
 801e76a:	461a      	mov	r2, r3
 801e76c:	4b5d      	ldr	r3, [pc, #372]	@ (801e8e4 <tcp_receive+0xf10>)
 801e76e:	681b      	ldr	r3, [r3, #0]
 801e770:	441a      	add	r2, r3
 801e772:	687b      	ldr	r3, [r7, #4]
 801e774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e776:	6879      	ldr	r1, [r7, #4]
 801e778:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801e77a:	440b      	add	r3, r1
 801e77c:	1ad3      	subs	r3, r2, r3
 801e77e:	2b00      	cmp	r3, #0
 801e780:	f340 8088 	ble.w	801e894 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801e784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e786:	681b      	ldr	r3, [r3, #0]
 801e788:	68db      	ldr	r3, [r3, #12]
 801e78a:	899b      	ldrh	r3, [r3, #12]
 801e78c:	b29b      	uxth	r3, r3
 801e78e:	4618      	mov	r0, r3
 801e790:	f7fa f93e 	bl	8018a10 <lwip_htons>
 801e794:	4603      	mov	r3, r0
 801e796:	b2db      	uxtb	r3, r3
 801e798:	f003 0301 	and.w	r3, r3, #1
 801e79c:	2b00      	cmp	r3, #0
 801e79e:	d021      	beq.n	801e7e4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801e7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7a2:	681b      	ldr	r3, [r3, #0]
 801e7a4:	68db      	ldr	r3, [r3, #12]
 801e7a6:	899b      	ldrh	r3, [r3, #12]
 801e7a8:	b29b      	uxth	r3, r3
 801e7aa:	b21b      	sxth	r3, r3
 801e7ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801e7b0:	b21c      	sxth	r4, r3
 801e7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7b4:	681b      	ldr	r3, [r3, #0]
 801e7b6:	68db      	ldr	r3, [r3, #12]
 801e7b8:	899b      	ldrh	r3, [r3, #12]
 801e7ba:	b29b      	uxth	r3, r3
 801e7bc:	4618      	mov	r0, r3
 801e7be:	f7fa f927 	bl	8018a10 <lwip_htons>
 801e7c2:	4603      	mov	r3, r0
 801e7c4:	b2db      	uxtb	r3, r3
 801e7c6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801e7ca:	b29b      	uxth	r3, r3
 801e7cc:	4618      	mov	r0, r3
 801e7ce:	f7fa f91f 	bl	8018a10 <lwip_htons>
 801e7d2:	4603      	mov	r3, r0
 801e7d4:	b21b      	sxth	r3, r3
 801e7d6:	4323      	orrs	r3, r4
 801e7d8:	b21a      	sxth	r2, r3
 801e7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7dc:	681b      	ldr	r3, [r3, #0]
 801e7de:	68db      	ldr	r3, [r3, #12]
 801e7e0:	b292      	uxth	r2, r2
 801e7e2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801e7e4:	687b      	ldr	r3, [r7, #4]
 801e7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e7e8:	b29a      	uxth	r2, r3
 801e7ea:	687b      	ldr	r3, [r7, #4]
 801e7ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801e7ee:	4413      	add	r3, r2
 801e7f0:	b299      	uxth	r1, r3
 801e7f2:	4b3c      	ldr	r3, [pc, #240]	@ (801e8e4 <tcp_receive+0xf10>)
 801e7f4:	681b      	ldr	r3, [r3, #0]
 801e7f6:	b29a      	uxth	r2, r3
 801e7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7fa:	681b      	ldr	r3, [r3, #0]
 801e7fc:	1a8a      	subs	r2, r1, r2
 801e7fe:	b292      	uxth	r2, r2
 801e800:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801e802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e804:	681b      	ldr	r3, [r3, #0]
 801e806:	685a      	ldr	r2, [r3, #4]
 801e808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e80a:	681b      	ldr	r3, [r3, #0]
 801e80c:	891b      	ldrh	r3, [r3, #8]
 801e80e:	4619      	mov	r1, r3
 801e810:	4610      	mov	r0, r2
 801e812:	f7fb fc21 	bl	801a058 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801e816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e818:	681b      	ldr	r3, [r3, #0]
 801e81a:	891c      	ldrh	r4, [r3, #8]
 801e81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e81e:	681b      	ldr	r3, [r3, #0]
 801e820:	68db      	ldr	r3, [r3, #12]
 801e822:	899b      	ldrh	r3, [r3, #12]
 801e824:	b29b      	uxth	r3, r3
 801e826:	4618      	mov	r0, r3
 801e828:	f7fa f8f2 	bl	8018a10 <lwip_htons>
 801e82c:	4603      	mov	r3, r0
 801e82e:	b2db      	uxtb	r3, r3
 801e830:	f003 0303 	and.w	r3, r3, #3
 801e834:	2b00      	cmp	r3, #0
 801e836:	d001      	beq.n	801e83c <tcp_receive+0xe68>
 801e838:	2301      	movs	r3, #1
 801e83a:	e000      	b.n	801e83e <tcp_receive+0xe6a>
 801e83c:	2300      	movs	r3, #0
 801e83e:	4423      	add	r3, r4
 801e840:	b29a      	uxth	r2, r3
 801e842:	4b2a      	ldr	r3, [pc, #168]	@ (801e8ec <tcp_receive+0xf18>)
 801e844:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e846:	4b29      	ldr	r3, [pc, #164]	@ (801e8ec <tcp_receive+0xf18>)
 801e848:	881b      	ldrh	r3, [r3, #0]
 801e84a:	461a      	mov	r2, r3
 801e84c:	4b25      	ldr	r3, [pc, #148]	@ (801e8e4 <tcp_receive+0xf10>)
 801e84e:	681b      	ldr	r3, [r3, #0]
 801e850:	441a      	add	r2, r3
 801e852:	687b      	ldr	r3, [r7, #4]
 801e854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e856:	6879      	ldr	r1, [r7, #4]
 801e858:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801e85a:	440b      	add	r3, r1
 801e85c:	429a      	cmp	r2, r3
 801e85e:	d019      	beq.n	801e894 <tcp_receive+0xec0>
 801e860:	4b23      	ldr	r3, [pc, #140]	@ (801e8f0 <tcp_receive+0xf1c>)
 801e862:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801e866:	4923      	ldr	r1, [pc, #140]	@ (801e8f4 <tcp_receive+0xf20>)
 801e868:	4823      	ldr	r0, [pc, #140]	@ (801e8f8 <tcp_receive+0xf24>)
 801e86a:	f006 fcfb 	bl	8025264 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801e86e:	e011      	b.n	801e894 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801e870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e872:	681b      	ldr	r3, [r3, #0]
 801e874:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e878:	2b00      	cmp	r3, #0
 801e87a:	f47f aea5 	bne.w	801e5c8 <tcp_receive+0xbf4>
 801e87e:	e00a      	b.n	801e896 <tcp_receive+0xec2>
                break;
 801e880:	bf00      	nop
 801e882:	e008      	b.n	801e896 <tcp_receive+0xec2>
                break;
 801e884:	bf00      	nop
 801e886:	e006      	b.n	801e896 <tcp_receive+0xec2>
                  break;
 801e888:	bf00      	nop
 801e88a:	e004      	b.n	801e896 <tcp_receive+0xec2>
                  break;
 801e88c:	bf00      	nop
 801e88e:	e002      	b.n	801e896 <tcp_receive+0xec2>
                  break;
 801e890:	bf00      	nop
 801e892:	e000      	b.n	801e896 <tcp_receive+0xec2>
                break;
 801e894:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801e896:	6878      	ldr	r0, [r7, #4]
 801e898:	f001 fe88 	bl	80205ac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801e89c:	e003      	b.n	801e8a6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801e89e:	6878      	ldr	r0, [r7, #4]
 801e8a0:	f001 fe84 	bl	80205ac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e8a4:	e01a      	b.n	801e8dc <tcp_receive+0xf08>
 801e8a6:	e019      	b.n	801e8dc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801e8a8:	4b0e      	ldr	r3, [pc, #56]	@ (801e8e4 <tcp_receive+0xf10>)
 801e8aa:	681a      	ldr	r2, [r3, #0]
 801e8ac:	687b      	ldr	r3, [r7, #4]
 801e8ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e8b0:	1ad3      	subs	r3, r2, r3
 801e8b2:	2b00      	cmp	r3, #0
 801e8b4:	db0a      	blt.n	801e8cc <tcp_receive+0xef8>
 801e8b6:	4b0b      	ldr	r3, [pc, #44]	@ (801e8e4 <tcp_receive+0xf10>)
 801e8b8:	681a      	ldr	r2, [r3, #0]
 801e8ba:	687b      	ldr	r3, [r7, #4]
 801e8bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e8be:	6879      	ldr	r1, [r7, #4]
 801e8c0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801e8c2:	440b      	add	r3, r1
 801e8c4:	1ad3      	subs	r3, r2, r3
 801e8c6:	3301      	adds	r3, #1
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	dd07      	ble.n	801e8dc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801e8cc:	687b      	ldr	r3, [r7, #4]
 801e8ce:	8b5b      	ldrh	r3, [r3, #26]
 801e8d0:	f043 0302 	orr.w	r3, r3, #2
 801e8d4:	b29a      	uxth	r2, r3
 801e8d6:	687b      	ldr	r3, [r7, #4]
 801e8d8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801e8da:	e7ff      	b.n	801e8dc <tcp_receive+0xf08>
 801e8dc:	bf00      	nop
 801e8de:	3750      	adds	r7, #80	@ 0x50
 801e8e0:	46bd      	mov	sp, r7
 801e8e2:	bdb0      	pop	{r4, r5, r7, pc}
 801e8e4:	2400be84 	.word	0x2400be84
 801e8e8:	2400be64 	.word	0x2400be64
 801e8ec:	2400be8e 	.word	0x2400be8e
 801e8f0:	0802b54c 	.word	0x0802b54c
 801e8f4:	0802b8f4 	.word	0x0802b8f4
 801e8f8:	0802b598 	.word	0x0802b598

0801e8fc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801e8fc:	b480      	push	{r7}
 801e8fe:	b083      	sub	sp, #12
 801e900:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801e902:	4b15      	ldr	r3, [pc, #84]	@ (801e958 <tcp_get_next_optbyte+0x5c>)
 801e904:	881b      	ldrh	r3, [r3, #0]
 801e906:	1c5a      	adds	r2, r3, #1
 801e908:	b291      	uxth	r1, r2
 801e90a:	4a13      	ldr	r2, [pc, #76]	@ (801e958 <tcp_get_next_optbyte+0x5c>)
 801e90c:	8011      	strh	r1, [r2, #0]
 801e90e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801e910:	4b12      	ldr	r3, [pc, #72]	@ (801e95c <tcp_get_next_optbyte+0x60>)
 801e912:	681b      	ldr	r3, [r3, #0]
 801e914:	2b00      	cmp	r3, #0
 801e916:	d004      	beq.n	801e922 <tcp_get_next_optbyte+0x26>
 801e918:	4b11      	ldr	r3, [pc, #68]	@ (801e960 <tcp_get_next_optbyte+0x64>)
 801e91a:	881b      	ldrh	r3, [r3, #0]
 801e91c:	88fa      	ldrh	r2, [r7, #6]
 801e91e:	429a      	cmp	r2, r3
 801e920:	d208      	bcs.n	801e934 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801e922:	4b10      	ldr	r3, [pc, #64]	@ (801e964 <tcp_get_next_optbyte+0x68>)
 801e924:	681b      	ldr	r3, [r3, #0]
 801e926:	3314      	adds	r3, #20
 801e928:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801e92a:	88fb      	ldrh	r3, [r7, #6]
 801e92c:	683a      	ldr	r2, [r7, #0]
 801e92e:	4413      	add	r3, r2
 801e930:	781b      	ldrb	r3, [r3, #0]
 801e932:	e00b      	b.n	801e94c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801e934:	88fb      	ldrh	r3, [r7, #6]
 801e936:	b2da      	uxtb	r2, r3
 801e938:	4b09      	ldr	r3, [pc, #36]	@ (801e960 <tcp_get_next_optbyte+0x64>)
 801e93a:	881b      	ldrh	r3, [r3, #0]
 801e93c:	b2db      	uxtb	r3, r3
 801e93e:	1ad3      	subs	r3, r2, r3
 801e940:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801e942:	4b06      	ldr	r3, [pc, #24]	@ (801e95c <tcp_get_next_optbyte+0x60>)
 801e944:	681a      	ldr	r2, [r3, #0]
 801e946:	797b      	ldrb	r3, [r7, #5]
 801e948:	4413      	add	r3, r2
 801e94a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801e94c:	4618      	mov	r0, r3
 801e94e:	370c      	adds	r7, #12
 801e950:	46bd      	mov	sp, r7
 801e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e956:	4770      	bx	lr
 801e958:	2400be80 	.word	0x2400be80
 801e95c:	2400be7c 	.word	0x2400be7c
 801e960:	2400be7a 	.word	0x2400be7a
 801e964:	2400be74 	.word	0x2400be74

0801e968 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801e968:	b580      	push	{r7, lr}
 801e96a:	b084      	sub	sp, #16
 801e96c:	af00      	add	r7, sp, #0
 801e96e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801e970:	687b      	ldr	r3, [r7, #4]
 801e972:	2b00      	cmp	r3, #0
 801e974:	d106      	bne.n	801e984 <tcp_parseopt+0x1c>
 801e976:	4b32      	ldr	r3, [pc, #200]	@ (801ea40 <tcp_parseopt+0xd8>)
 801e978:	f240 727d 	movw	r2, #1917	@ 0x77d
 801e97c:	4931      	ldr	r1, [pc, #196]	@ (801ea44 <tcp_parseopt+0xdc>)
 801e97e:	4832      	ldr	r0, [pc, #200]	@ (801ea48 <tcp_parseopt+0xe0>)
 801e980:	f006 fc70 	bl	8025264 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801e984:	4b31      	ldr	r3, [pc, #196]	@ (801ea4c <tcp_parseopt+0xe4>)
 801e986:	881b      	ldrh	r3, [r3, #0]
 801e988:	2b00      	cmp	r3, #0
 801e98a:	d056      	beq.n	801ea3a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801e98c:	4b30      	ldr	r3, [pc, #192]	@ (801ea50 <tcp_parseopt+0xe8>)
 801e98e:	2200      	movs	r2, #0
 801e990:	801a      	strh	r2, [r3, #0]
 801e992:	e046      	b.n	801ea22 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 801e994:	f7ff ffb2 	bl	801e8fc <tcp_get_next_optbyte>
 801e998:	4603      	mov	r3, r0
 801e99a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801e99c:	7bfb      	ldrb	r3, [r7, #15]
 801e99e:	2b02      	cmp	r3, #2
 801e9a0:	d006      	beq.n	801e9b0 <tcp_parseopt+0x48>
 801e9a2:	2b02      	cmp	r3, #2
 801e9a4:	dc2a      	bgt.n	801e9fc <tcp_parseopt+0x94>
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	d042      	beq.n	801ea30 <tcp_parseopt+0xc8>
 801e9aa:	2b01      	cmp	r3, #1
 801e9ac:	d038      	beq.n	801ea20 <tcp_parseopt+0xb8>
 801e9ae:	e025      	b.n	801e9fc <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801e9b0:	f7ff ffa4 	bl	801e8fc <tcp_get_next_optbyte>
 801e9b4:	4603      	mov	r3, r0
 801e9b6:	2b04      	cmp	r3, #4
 801e9b8:	d13c      	bne.n	801ea34 <tcp_parseopt+0xcc>
 801e9ba:	4b25      	ldr	r3, [pc, #148]	@ (801ea50 <tcp_parseopt+0xe8>)
 801e9bc:	881b      	ldrh	r3, [r3, #0]
 801e9be:	3301      	adds	r3, #1
 801e9c0:	4a22      	ldr	r2, [pc, #136]	@ (801ea4c <tcp_parseopt+0xe4>)
 801e9c2:	8812      	ldrh	r2, [r2, #0]
 801e9c4:	4293      	cmp	r3, r2
 801e9c6:	da35      	bge.n	801ea34 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801e9c8:	f7ff ff98 	bl	801e8fc <tcp_get_next_optbyte>
 801e9cc:	4603      	mov	r3, r0
 801e9ce:	021b      	lsls	r3, r3, #8
 801e9d0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801e9d2:	f7ff ff93 	bl	801e8fc <tcp_get_next_optbyte>
 801e9d6:	4603      	mov	r3, r0
 801e9d8:	461a      	mov	r2, r3
 801e9da:	89bb      	ldrh	r3, [r7, #12]
 801e9dc:	4313      	orrs	r3, r2
 801e9de:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801e9e0:	89bb      	ldrh	r3, [r7, #12]
 801e9e2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801e9e6:	d804      	bhi.n	801e9f2 <tcp_parseopt+0x8a>
 801e9e8:	89bb      	ldrh	r3, [r7, #12]
 801e9ea:	2b00      	cmp	r3, #0
 801e9ec:	d001      	beq.n	801e9f2 <tcp_parseopt+0x8a>
 801e9ee:	89ba      	ldrh	r2, [r7, #12]
 801e9f0:	e001      	b.n	801e9f6 <tcp_parseopt+0x8e>
 801e9f2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801e9f6:	687b      	ldr	r3, [r7, #4]
 801e9f8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801e9fa:	e012      	b.n	801ea22 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801e9fc:	f7ff ff7e 	bl	801e8fc <tcp_get_next_optbyte>
 801ea00:	4603      	mov	r3, r0
 801ea02:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801ea04:	7afb      	ldrb	r3, [r7, #11]
 801ea06:	2b01      	cmp	r3, #1
 801ea08:	d916      	bls.n	801ea38 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801ea0a:	7afb      	ldrb	r3, [r7, #11]
 801ea0c:	b29a      	uxth	r2, r3
 801ea0e:	4b10      	ldr	r3, [pc, #64]	@ (801ea50 <tcp_parseopt+0xe8>)
 801ea10:	881b      	ldrh	r3, [r3, #0]
 801ea12:	4413      	add	r3, r2
 801ea14:	b29b      	uxth	r3, r3
 801ea16:	3b02      	subs	r3, #2
 801ea18:	b29a      	uxth	r2, r3
 801ea1a:	4b0d      	ldr	r3, [pc, #52]	@ (801ea50 <tcp_parseopt+0xe8>)
 801ea1c:	801a      	strh	r2, [r3, #0]
 801ea1e:	e000      	b.n	801ea22 <tcp_parseopt+0xba>
          break;
 801ea20:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ea22:	4b0b      	ldr	r3, [pc, #44]	@ (801ea50 <tcp_parseopt+0xe8>)
 801ea24:	881a      	ldrh	r2, [r3, #0]
 801ea26:	4b09      	ldr	r3, [pc, #36]	@ (801ea4c <tcp_parseopt+0xe4>)
 801ea28:	881b      	ldrh	r3, [r3, #0]
 801ea2a:	429a      	cmp	r2, r3
 801ea2c:	d3b2      	bcc.n	801e994 <tcp_parseopt+0x2c>
 801ea2e:	e004      	b.n	801ea3a <tcp_parseopt+0xd2>
          return;
 801ea30:	bf00      	nop
 801ea32:	e002      	b.n	801ea3a <tcp_parseopt+0xd2>
            return;
 801ea34:	bf00      	nop
 801ea36:	e000      	b.n	801ea3a <tcp_parseopt+0xd2>
            return;
 801ea38:	bf00      	nop
      }
    }
  }
}
 801ea3a:	3710      	adds	r7, #16
 801ea3c:	46bd      	mov	sp, r7
 801ea3e:	bd80      	pop	{r7, pc}
 801ea40:	0802b54c 	.word	0x0802b54c
 801ea44:	0802b9b0 	.word	0x0802b9b0
 801ea48:	0802b598 	.word	0x0802b598
 801ea4c:	2400be78 	.word	0x2400be78
 801ea50:	2400be80 	.word	0x2400be80

0801ea54 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801ea54:	b480      	push	{r7}
 801ea56:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801ea58:	4b05      	ldr	r3, [pc, #20]	@ (801ea70 <tcp_trigger_input_pcb_close+0x1c>)
 801ea5a:	781b      	ldrb	r3, [r3, #0]
 801ea5c:	f043 0310 	orr.w	r3, r3, #16
 801ea60:	b2da      	uxtb	r2, r3
 801ea62:	4b03      	ldr	r3, [pc, #12]	@ (801ea70 <tcp_trigger_input_pcb_close+0x1c>)
 801ea64:	701a      	strb	r2, [r3, #0]
}
 801ea66:	bf00      	nop
 801ea68:	46bd      	mov	sp, r7
 801ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea6e:	4770      	bx	lr
 801ea70:	2400be91 	.word	0x2400be91

0801ea74 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801ea74:	b580      	push	{r7, lr}
 801ea76:	b084      	sub	sp, #16
 801ea78:	af00      	add	r7, sp, #0
 801ea7a:	60f8      	str	r0, [r7, #12]
 801ea7c:	60b9      	str	r1, [r7, #8]
 801ea7e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801ea80:	68fb      	ldr	r3, [r7, #12]
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	d00a      	beq.n	801ea9c <tcp_route+0x28>
 801ea86:	68fb      	ldr	r3, [r7, #12]
 801ea88:	7a1b      	ldrb	r3, [r3, #8]
 801ea8a:	2b00      	cmp	r3, #0
 801ea8c:	d006      	beq.n	801ea9c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801ea8e:	68fb      	ldr	r3, [r7, #12]
 801ea90:	7a1b      	ldrb	r3, [r3, #8]
 801ea92:	4618      	mov	r0, r3
 801ea94:	f7fb f8d8 	bl	8019c48 <netif_get_by_index>
 801ea98:	4603      	mov	r3, r0
 801ea9a:	e003      	b.n	801eaa4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801ea9c:	6878      	ldr	r0, [r7, #4]
 801ea9e:	f003 fe59 	bl	8022754 <ip4_route>
 801eaa2:	4603      	mov	r3, r0
  }
}
 801eaa4:	4618      	mov	r0, r3
 801eaa6:	3710      	adds	r7, #16
 801eaa8:	46bd      	mov	sp, r7
 801eaaa:	bd80      	pop	{r7, pc}

0801eaac <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801eaac:	b590      	push	{r4, r7, lr}
 801eaae:	b087      	sub	sp, #28
 801eab0:	af00      	add	r7, sp, #0
 801eab2:	60f8      	str	r0, [r7, #12]
 801eab4:	60b9      	str	r1, [r7, #8]
 801eab6:	603b      	str	r3, [r7, #0]
 801eab8:	4613      	mov	r3, r2
 801eaba:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801eabc:	68fb      	ldr	r3, [r7, #12]
 801eabe:	2b00      	cmp	r3, #0
 801eac0:	d105      	bne.n	801eace <tcp_create_segment+0x22>
 801eac2:	4b43      	ldr	r3, [pc, #268]	@ (801ebd0 <tcp_create_segment+0x124>)
 801eac4:	22a3      	movs	r2, #163	@ 0xa3
 801eac6:	4943      	ldr	r1, [pc, #268]	@ (801ebd4 <tcp_create_segment+0x128>)
 801eac8:	4843      	ldr	r0, [pc, #268]	@ (801ebd8 <tcp_create_segment+0x12c>)
 801eaca:	f006 fbcb 	bl	8025264 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801eace:	68bb      	ldr	r3, [r7, #8]
 801ead0:	2b00      	cmp	r3, #0
 801ead2:	d105      	bne.n	801eae0 <tcp_create_segment+0x34>
 801ead4:	4b3e      	ldr	r3, [pc, #248]	@ (801ebd0 <tcp_create_segment+0x124>)
 801ead6:	22a4      	movs	r2, #164	@ 0xa4
 801ead8:	4940      	ldr	r1, [pc, #256]	@ (801ebdc <tcp_create_segment+0x130>)
 801eada:	483f      	ldr	r0, [pc, #252]	@ (801ebd8 <tcp_create_segment+0x12c>)
 801eadc:	f006 fbc2 	bl	8025264 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801eae0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801eae4:	009b      	lsls	r3, r3, #2
 801eae6:	b2db      	uxtb	r3, r3
 801eae8:	f003 0304 	and.w	r3, r3, #4
 801eaec:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801eaee:	2003      	movs	r0, #3
 801eaf0:	f7fa fd1e 	bl	8019530 <memp_malloc>
 801eaf4:	6138      	str	r0, [r7, #16]
 801eaf6:	693b      	ldr	r3, [r7, #16]
 801eaf8:	2b00      	cmp	r3, #0
 801eafa:	d104      	bne.n	801eb06 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801eafc:	68b8      	ldr	r0, [r7, #8]
 801eafe:	f7fb fc63 	bl	801a3c8 <pbuf_free>
    return NULL;
 801eb02:	2300      	movs	r3, #0
 801eb04:	e060      	b.n	801ebc8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801eb06:	693b      	ldr	r3, [r7, #16]
 801eb08:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801eb0c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801eb0e:	693b      	ldr	r3, [r7, #16]
 801eb10:	2200      	movs	r2, #0
 801eb12:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801eb14:	693b      	ldr	r3, [r7, #16]
 801eb16:	68ba      	ldr	r2, [r7, #8]
 801eb18:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801eb1a:	68bb      	ldr	r3, [r7, #8]
 801eb1c:	891a      	ldrh	r2, [r3, #8]
 801eb1e:	7dfb      	ldrb	r3, [r7, #23]
 801eb20:	b29b      	uxth	r3, r3
 801eb22:	429a      	cmp	r2, r3
 801eb24:	d205      	bcs.n	801eb32 <tcp_create_segment+0x86>
 801eb26:	4b2a      	ldr	r3, [pc, #168]	@ (801ebd0 <tcp_create_segment+0x124>)
 801eb28:	22b0      	movs	r2, #176	@ 0xb0
 801eb2a:	492d      	ldr	r1, [pc, #180]	@ (801ebe0 <tcp_create_segment+0x134>)
 801eb2c:	482a      	ldr	r0, [pc, #168]	@ (801ebd8 <tcp_create_segment+0x12c>)
 801eb2e:	f006 fb99 	bl	8025264 <iprintf>
  seg->len = p->tot_len - optlen;
 801eb32:	68bb      	ldr	r3, [r7, #8]
 801eb34:	891a      	ldrh	r2, [r3, #8]
 801eb36:	7dfb      	ldrb	r3, [r7, #23]
 801eb38:	b29b      	uxth	r3, r3
 801eb3a:	1ad3      	subs	r3, r2, r3
 801eb3c:	b29a      	uxth	r2, r3
 801eb3e:	693b      	ldr	r3, [r7, #16]
 801eb40:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801eb42:	2114      	movs	r1, #20
 801eb44:	68b8      	ldr	r0, [r7, #8]
 801eb46:	f7fb fb77 	bl	801a238 <pbuf_add_header>
 801eb4a:	4603      	mov	r3, r0
 801eb4c:	2b00      	cmp	r3, #0
 801eb4e:	d004      	beq.n	801eb5a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801eb50:	6938      	ldr	r0, [r7, #16]
 801eb52:	f7fd f804 	bl	801bb5e <tcp_seg_free>
    return NULL;
 801eb56:	2300      	movs	r3, #0
 801eb58:	e036      	b.n	801ebc8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801eb5a:	693b      	ldr	r3, [r7, #16]
 801eb5c:	685b      	ldr	r3, [r3, #4]
 801eb5e:	685a      	ldr	r2, [r3, #4]
 801eb60:	693b      	ldr	r3, [r7, #16]
 801eb62:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801eb64:	68fb      	ldr	r3, [r7, #12]
 801eb66:	8ada      	ldrh	r2, [r3, #22]
 801eb68:	693b      	ldr	r3, [r7, #16]
 801eb6a:	68dc      	ldr	r4, [r3, #12]
 801eb6c:	4610      	mov	r0, r2
 801eb6e:	f7f9 ff4f 	bl	8018a10 <lwip_htons>
 801eb72:	4603      	mov	r3, r0
 801eb74:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801eb76:	68fb      	ldr	r3, [r7, #12]
 801eb78:	8b1a      	ldrh	r2, [r3, #24]
 801eb7a:	693b      	ldr	r3, [r7, #16]
 801eb7c:	68dc      	ldr	r4, [r3, #12]
 801eb7e:	4610      	mov	r0, r2
 801eb80:	f7f9 ff46 	bl	8018a10 <lwip_htons>
 801eb84:	4603      	mov	r3, r0
 801eb86:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801eb88:	693b      	ldr	r3, [r7, #16]
 801eb8a:	68dc      	ldr	r4, [r3, #12]
 801eb8c:	6838      	ldr	r0, [r7, #0]
 801eb8e:	f7f9 ff54 	bl	8018a3a <lwip_htonl>
 801eb92:	4603      	mov	r3, r0
 801eb94:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801eb96:	7dfb      	ldrb	r3, [r7, #23]
 801eb98:	089b      	lsrs	r3, r3, #2
 801eb9a:	b2db      	uxtb	r3, r3
 801eb9c:	3305      	adds	r3, #5
 801eb9e:	b29b      	uxth	r3, r3
 801eba0:	031b      	lsls	r3, r3, #12
 801eba2:	b29a      	uxth	r2, r3
 801eba4:	79fb      	ldrb	r3, [r7, #7]
 801eba6:	b29b      	uxth	r3, r3
 801eba8:	4313      	orrs	r3, r2
 801ebaa:	b29a      	uxth	r2, r3
 801ebac:	693b      	ldr	r3, [r7, #16]
 801ebae:	68dc      	ldr	r4, [r3, #12]
 801ebb0:	4610      	mov	r0, r2
 801ebb2:	f7f9 ff2d 	bl	8018a10 <lwip_htons>
 801ebb6:	4603      	mov	r3, r0
 801ebb8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801ebba:	693b      	ldr	r3, [r7, #16]
 801ebbc:	68db      	ldr	r3, [r3, #12]
 801ebbe:	2200      	movs	r2, #0
 801ebc0:	749a      	strb	r2, [r3, #18]
 801ebc2:	2200      	movs	r2, #0
 801ebc4:	74da      	strb	r2, [r3, #19]
  return seg;
 801ebc6:	693b      	ldr	r3, [r7, #16]
}
 801ebc8:	4618      	mov	r0, r3
 801ebca:	371c      	adds	r7, #28
 801ebcc:	46bd      	mov	sp, r7
 801ebce:	bd90      	pop	{r4, r7, pc}
 801ebd0:	0802b9cc 	.word	0x0802b9cc
 801ebd4:	0802ba00 	.word	0x0802ba00
 801ebd8:	0802ba20 	.word	0x0802ba20
 801ebdc:	0802ba48 	.word	0x0802ba48
 801ebe0:	0802ba6c 	.word	0x0802ba6c

0801ebe4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801ebe4:	b580      	push	{r7, lr}
 801ebe6:	b086      	sub	sp, #24
 801ebe8:	af00      	add	r7, sp, #0
 801ebea:	607b      	str	r3, [r7, #4]
 801ebec:	4603      	mov	r3, r0
 801ebee:	73fb      	strb	r3, [r7, #15]
 801ebf0:	460b      	mov	r3, r1
 801ebf2:	81bb      	strh	r3, [r7, #12]
 801ebf4:	4613      	mov	r3, r2
 801ebf6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801ebf8:	89bb      	ldrh	r3, [r7, #12]
 801ebfa:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801ebfc:	687b      	ldr	r3, [r7, #4]
 801ebfe:	2b00      	cmp	r3, #0
 801ec00:	d105      	bne.n	801ec0e <tcp_pbuf_prealloc+0x2a>
 801ec02:	4b30      	ldr	r3, [pc, #192]	@ (801ecc4 <tcp_pbuf_prealloc+0xe0>)
 801ec04:	22e8      	movs	r2, #232	@ 0xe8
 801ec06:	4930      	ldr	r1, [pc, #192]	@ (801ecc8 <tcp_pbuf_prealloc+0xe4>)
 801ec08:	4830      	ldr	r0, [pc, #192]	@ (801eccc <tcp_pbuf_prealloc+0xe8>)
 801ec0a:	f006 fb2b 	bl	8025264 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801ec0e:	6a3b      	ldr	r3, [r7, #32]
 801ec10:	2b00      	cmp	r3, #0
 801ec12:	d105      	bne.n	801ec20 <tcp_pbuf_prealloc+0x3c>
 801ec14:	4b2b      	ldr	r3, [pc, #172]	@ (801ecc4 <tcp_pbuf_prealloc+0xe0>)
 801ec16:	22e9      	movs	r2, #233	@ 0xe9
 801ec18:	492d      	ldr	r1, [pc, #180]	@ (801ecd0 <tcp_pbuf_prealloc+0xec>)
 801ec1a:	482c      	ldr	r0, [pc, #176]	@ (801eccc <tcp_pbuf_prealloc+0xe8>)
 801ec1c:	f006 fb22 	bl	8025264 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801ec20:	89ba      	ldrh	r2, [r7, #12]
 801ec22:	897b      	ldrh	r3, [r7, #10]
 801ec24:	429a      	cmp	r2, r3
 801ec26:	d221      	bcs.n	801ec6c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801ec28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801ec2c:	f003 0302 	and.w	r3, r3, #2
 801ec30:	2b00      	cmp	r3, #0
 801ec32:	d111      	bne.n	801ec58 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801ec34:	6a3b      	ldr	r3, [r7, #32]
 801ec36:	8b5b      	ldrh	r3, [r3, #26]
 801ec38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801ec3c:	2b00      	cmp	r3, #0
 801ec3e:	d115      	bne.n	801ec6c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801ec40:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801ec44:	2b00      	cmp	r3, #0
 801ec46:	d007      	beq.n	801ec58 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801ec48:	6a3b      	ldr	r3, [r7, #32]
 801ec4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 801ec4c:	2b00      	cmp	r3, #0
 801ec4e:	d103      	bne.n	801ec58 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801ec50:	6a3b      	ldr	r3, [r7, #32]
 801ec52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 801ec54:	2b00      	cmp	r3, #0
 801ec56:	d009      	beq.n	801ec6c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801ec58:	89bb      	ldrh	r3, [r7, #12]
 801ec5a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801ec5e:	f023 0203 	bic.w	r2, r3, #3
 801ec62:	897b      	ldrh	r3, [r7, #10]
 801ec64:	4293      	cmp	r3, r2
 801ec66:	bf28      	it	cs
 801ec68:	4613      	movcs	r3, r2
 801ec6a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801ec6c:	8af9      	ldrh	r1, [r7, #22]
 801ec6e:	7bfb      	ldrb	r3, [r7, #15]
 801ec70:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ec74:	4618      	mov	r0, r3
 801ec76:	f7fb f891 	bl	8019d9c <pbuf_alloc>
 801ec7a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ec7c:	693b      	ldr	r3, [r7, #16]
 801ec7e:	2b00      	cmp	r3, #0
 801ec80:	d101      	bne.n	801ec86 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801ec82:	2300      	movs	r3, #0
 801ec84:	e019      	b.n	801ecba <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801ec86:	693b      	ldr	r3, [r7, #16]
 801ec88:	681b      	ldr	r3, [r3, #0]
 801ec8a:	2b00      	cmp	r3, #0
 801ec8c:	d006      	beq.n	801ec9c <tcp_pbuf_prealloc+0xb8>
 801ec8e:	4b0d      	ldr	r3, [pc, #52]	@ (801ecc4 <tcp_pbuf_prealloc+0xe0>)
 801ec90:	f240 120b 	movw	r2, #267	@ 0x10b
 801ec94:	490f      	ldr	r1, [pc, #60]	@ (801ecd4 <tcp_pbuf_prealloc+0xf0>)
 801ec96:	480d      	ldr	r0, [pc, #52]	@ (801eccc <tcp_pbuf_prealloc+0xe8>)
 801ec98:	f006 fae4 	bl	8025264 <iprintf>
  *oversize = p->len - length;
 801ec9c:	693b      	ldr	r3, [r7, #16]
 801ec9e:	895a      	ldrh	r2, [r3, #10]
 801eca0:	89bb      	ldrh	r3, [r7, #12]
 801eca2:	1ad3      	subs	r3, r2, r3
 801eca4:	b29a      	uxth	r2, r3
 801eca6:	687b      	ldr	r3, [r7, #4]
 801eca8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801ecaa:	693b      	ldr	r3, [r7, #16]
 801ecac:	89ba      	ldrh	r2, [r7, #12]
 801ecae:	811a      	strh	r2, [r3, #8]
 801ecb0:	693b      	ldr	r3, [r7, #16]
 801ecb2:	891a      	ldrh	r2, [r3, #8]
 801ecb4:	693b      	ldr	r3, [r7, #16]
 801ecb6:	815a      	strh	r2, [r3, #10]
  return p;
 801ecb8:	693b      	ldr	r3, [r7, #16]
}
 801ecba:	4618      	mov	r0, r3
 801ecbc:	3718      	adds	r7, #24
 801ecbe:	46bd      	mov	sp, r7
 801ecc0:	bd80      	pop	{r7, pc}
 801ecc2:	bf00      	nop
 801ecc4:	0802b9cc 	.word	0x0802b9cc
 801ecc8:	0802ba84 	.word	0x0802ba84
 801eccc:	0802ba20 	.word	0x0802ba20
 801ecd0:	0802baa8 	.word	0x0802baa8
 801ecd4:	0802bac8 	.word	0x0802bac8

0801ecd8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801ecd8:	b580      	push	{r7, lr}
 801ecda:	b082      	sub	sp, #8
 801ecdc:	af00      	add	r7, sp, #0
 801ecde:	6078      	str	r0, [r7, #4]
 801ece0:	460b      	mov	r3, r1
 801ece2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801ece4:	687b      	ldr	r3, [r7, #4]
 801ece6:	2b00      	cmp	r3, #0
 801ece8:	d106      	bne.n	801ecf8 <tcp_write_checks+0x20>
 801ecea:	4b33      	ldr	r3, [pc, #204]	@ (801edb8 <tcp_write_checks+0xe0>)
 801ecec:	f240 1233 	movw	r2, #307	@ 0x133
 801ecf0:	4932      	ldr	r1, [pc, #200]	@ (801edbc <tcp_write_checks+0xe4>)
 801ecf2:	4833      	ldr	r0, [pc, #204]	@ (801edc0 <tcp_write_checks+0xe8>)
 801ecf4:	f006 fab6 	bl	8025264 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801ecf8:	687b      	ldr	r3, [r7, #4]
 801ecfa:	7d1b      	ldrb	r3, [r3, #20]
 801ecfc:	2b04      	cmp	r3, #4
 801ecfe:	d00e      	beq.n	801ed1e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801ed00:	687b      	ldr	r3, [r7, #4]
 801ed02:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801ed04:	2b07      	cmp	r3, #7
 801ed06:	d00a      	beq.n	801ed1e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801ed08:	687b      	ldr	r3, [r7, #4]
 801ed0a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801ed0c:	2b02      	cmp	r3, #2
 801ed0e:	d006      	beq.n	801ed1e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801ed10:	687b      	ldr	r3, [r7, #4]
 801ed12:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801ed14:	2b03      	cmp	r3, #3
 801ed16:	d002      	beq.n	801ed1e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801ed18:	f06f 030a 	mvn.w	r3, #10
 801ed1c:	e048      	b.n	801edb0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801ed1e:	887b      	ldrh	r3, [r7, #2]
 801ed20:	2b00      	cmp	r3, #0
 801ed22:	d101      	bne.n	801ed28 <tcp_write_checks+0x50>
    return ERR_OK;
 801ed24:	2300      	movs	r3, #0
 801ed26:	e043      	b.n	801edb0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801ed28:	687b      	ldr	r3, [r7, #4]
 801ed2a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801ed2e:	887a      	ldrh	r2, [r7, #2]
 801ed30:	429a      	cmp	r2, r3
 801ed32:	d909      	bls.n	801ed48 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ed34:	687b      	ldr	r3, [r7, #4]
 801ed36:	8b5b      	ldrh	r3, [r3, #26]
 801ed38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ed3c:	b29a      	uxth	r2, r3
 801ed3e:	687b      	ldr	r3, [r7, #4]
 801ed40:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801ed42:	f04f 33ff 	mov.w	r3, #4294967295
 801ed46:	e033      	b.n	801edb0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801ed48:	687b      	ldr	r3, [r7, #4]
 801ed4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801ed4e:	2b08      	cmp	r3, #8
 801ed50:	d909      	bls.n	801ed66 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ed52:	687b      	ldr	r3, [r7, #4]
 801ed54:	8b5b      	ldrh	r3, [r3, #26]
 801ed56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ed5a:	b29a      	uxth	r2, r3
 801ed5c:	687b      	ldr	r3, [r7, #4]
 801ed5e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801ed60:	f04f 33ff 	mov.w	r3, #4294967295
 801ed64:	e024      	b.n	801edb0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801ed66:	687b      	ldr	r3, [r7, #4]
 801ed68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801ed6c:	2b00      	cmp	r3, #0
 801ed6e:	d00f      	beq.n	801ed90 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801ed70:	687b      	ldr	r3, [r7, #4]
 801ed72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ed74:	2b00      	cmp	r3, #0
 801ed76:	d11a      	bne.n	801edae <tcp_write_checks+0xd6>
 801ed78:	687b      	ldr	r3, [r7, #4]
 801ed7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ed7c:	2b00      	cmp	r3, #0
 801ed7e:	d116      	bne.n	801edae <tcp_write_checks+0xd6>
 801ed80:	4b0d      	ldr	r3, [pc, #52]	@ (801edb8 <tcp_write_checks+0xe0>)
 801ed82:	f240 1255 	movw	r2, #341	@ 0x155
 801ed86:	490f      	ldr	r1, [pc, #60]	@ (801edc4 <tcp_write_checks+0xec>)
 801ed88:	480d      	ldr	r0, [pc, #52]	@ (801edc0 <tcp_write_checks+0xe8>)
 801ed8a:	f006 fa6b 	bl	8025264 <iprintf>
 801ed8e:	e00e      	b.n	801edae <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ed94:	2b00      	cmp	r3, #0
 801ed96:	d103      	bne.n	801eda0 <tcp_write_checks+0xc8>
 801ed98:	687b      	ldr	r3, [r7, #4]
 801ed9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ed9c:	2b00      	cmp	r3, #0
 801ed9e:	d006      	beq.n	801edae <tcp_write_checks+0xd6>
 801eda0:	4b05      	ldr	r3, [pc, #20]	@ (801edb8 <tcp_write_checks+0xe0>)
 801eda2:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801eda6:	4908      	ldr	r1, [pc, #32]	@ (801edc8 <tcp_write_checks+0xf0>)
 801eda8:	4805      	ldr	r0, [pc, #20]	@ (801edc0 <tcp_write_checks+0xe8>)
 801edaa:	f006 fa5b 	bl	8025264 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801edae:	2300      	movs	r3, #0
}
 801edb0:	4618      	mov	r0, r3
 801edb2:	3708      	adds	r7, #8
 801edb4:	46bd      	mov	sp, r7
 801edb6:	bd80      	pop	{r7, pc}
 801edb8:	0802b9cc 	.word	0x0802b9cc
 801edbc:	0802badc 	.word	0x0802badc
 801edc0:	0802ba20 	.word	0x0802ba20
 801edc4:	0802bafc 	.word	0x0802bafc
 801edc8:	0802bb38 	.word	0x0802bb38

0801edcc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801edcc:	b590      	push	{r4, r7, lr}
 801edce:	b09b      	sub	sp, #108	@ 0x6c
 801edd0:	af04      	add	r7, sp, #16
 801edd2:	60f8      	str	r0, [r7, #12]
 801edd4:	60b9      	str	r1, [r7, #8]
 801edd6:	4611      	mov	r1, r2
 801edd8:	461a      	mov	r2, r3
 801edda:	460b      	mov	r3, r1
 801eddc:	80fb      	strh	r3, [r7, #6]
 801edde:	4613      	mov	r3, r2
 801ede0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801ede2:	2300      	movs	r3, #0
 801ede4:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801ede6:	2300      	movs	r3, #0
 801ede8:	653b      	str	r3, [r7, #80]	@ 0x50
 801edea:	2300      	movs	r3, #0
 801edec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801edee:	2300      	movs	r3, #0
 801edf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801edf2:	2300      	movs	r3, #0
 801edf4:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801edf6:	2300      	movs	r3, #0
 801edf8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801edfc:	2300      	movs	r3, #0
 801edfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801ee02:	2300      	movs	r3, #0
 801ee04:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801ee06:	2300      	movs	r3, #0
 801ee08:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801ee0a:	2300      	movs	r3, #0
 801ee0c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801ee0e:	68fb      	ldr	r3, [r7, #12]
 801ee10:	2b00      	cmp	r3, #0
 801ee12:	d109      	bne.n	801ee28 <tcp_write+0x5c>
 801ee14:	4ba4      	ldr	r3, [pc, #656]	@ (801f0a8 <tcp_write+0x2dc>)
 801ee16:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801ee1a:	49a4      	ldr	r1, [pc, #656]	@ (801f0ac <tcp_write+0x2e0>)
 801ee1c:	48a4      	ldr	r0, [pc, #656]	@ (801f0b0 <tcp_write+0x2e4>)
 801ee1e:	f006 fa21 	bl	8025264 <iprintf>
 801ee22:	f06f 030f 	mvn.w	r3, #15
 801ee26:	e32a      	b.n	801f47e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801ee28:	68fb      	ldr	r3, [r7, #12]
 801ee2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801ee2e:	085b      	lsrs	r3, r3, #1
 801ee30:	b29a      	uxth	r2, r3
 801ee32:	68fb      	ldr	r3, [r7, #12]
 801ee34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ee36:	4293      	cmp	r3, r2
 801ee38:	bf28      	it	cs
 801ee3a:	4613      	movcs	r3, r2
 801ee3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801ee3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ee40:	2b00      	cmp	r3, #0
 801ee42:	d102      	bne.n	801ee4a <tcp_write+0x7e>
 801ee44:	68fb      	ldr	r3, [r7, #12]
 801ee46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ee48:	e000      	b.n	801ee4c <tcp_write+0x80>
 801ee4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ee4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801ee4e:	68bb      	ldr	r3, [r7, #8]
 801ee50:	2b00      	cmp	r3, #0
 801ee52:	d109      	bne.n	801ee68 <tcp_write+0x9c>
 801ee54:	4b94      	ldr	r3, [pc, #592]	@ (801f0a8 <tcp_write+0x2dc>)
 801ee56:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801ee5a:	4996      	ldr	r1, [pc, #600]	@ (801f0b4 <tcp_write+0x2e8>)
 801ee5c:	4894      	ldr	r0, [pc, #592]	@ (801f0b0 <tcp_write+0x2e4>)
 801ee5e:	f006 fa01 	bl	8025264 <iprintf>
 801ee62:	f06f 030f 	mvn.w	r3, #15
 801ee66:	e30a      	b.n	801f47e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801ee68:	88fb      	ldrh	r3, [r7, #6]
 801ee6a:	4619      	mov	r1, r3
 801ee6c:	68f8      	ldr	r0, [r7, #12]
 801ee6e:	f7ff ff33 	bl	801ecd8 <tcp_write_checks>
 801ee72:	4603      	mov	r3, r0
 801ee74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801ee78:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801ee7c:	2b00      	cmp	r3, #0
 801ee7e:	d002      	beq.n	801ee86 <tcp_write+0xba>
    return err;
 801ee80:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801ee84:	e2fb      	b.n	801f47e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801ee86:	68fb      	ldr	r3, [r7, #12]
 801ee88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801ee8c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ee90:	2300      	movs	r3, #0
 801ee92:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801ee96:	68fb      	ldr	r3, [r7, #12]
 801ee98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ee9a:	2b00      	cmp	r3, #0
 801ee9c:	f000 80f6 	beq.w	801f08c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801eea0:	68fb      	ldr	r3, [r7, #12]
 801eea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801eea4:	653b      	str	r3, [r7, #80]	@ 0x50
 801eea6:	e002      	b.n	801eeae <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801eea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801eeaa:	681b      	ldr	r3, [r3, #0]
 801eeac:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801eeae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801eeb0:	681b      	ldr	r3, [r3, #0]
 801eeb2:	2b00      	cmp	r3, #0
 801eeb4:	d1f8      	bne.n	801eea8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801eeb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801eeb8:	7a9b      	ldrb	r3, [r3, #10]
 801eeba:	009b      	lsls	r3, r3, #2
 801eebc:	b29b      	uxth	r3, r3
 801eebe:	f003 0304 	and.w	r3, r3, #4
 801eec2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801eec4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801eec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801eec8:	891b      	ldrh	r3, [r3, #8]
 801eeca:	4619      	mov	r1, r3
 801eecc:	8c3b      	ldrh	r3, [r7, #32]
 801eece:	440b      	add	r3, r1
 801eed0:	429a      	cmp	r2, r3
 801eed2:	da06      	bge.n	801eee2 <tcp_write+0x116>
 801eed4:	4b74      	ldr	r3, [pc, #464]	@ (801f0a8 <tcp_write+0x2dc>)
 801eed6:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801eeda:	4977      	ldr	r1, [pc, #476]	@ (801f0b8 <tcp_write+0x2ec>)
 801eedc:	4874      	ldr	r0, [pc, #464]	@ (801f0b0 <tcp_write+0x2e4>)
 801eede:	f006 f9c1 	bl	8025264 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801eee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801eee4:	891a      	ldrh	r2, [r3, #8]
 801eee6:	8c3b      	ldrh	r3, [r7, #32]
 801eee8:	4413      	add	r3, r2
 801eeea:	b29b      	uxth	r3, r3
 801eeec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801eeee:	1ad3      	subs	r3, r2, r3
 801eef0:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801eef2:	68fb      	ldr	r3, [r7, #12]
 801eef4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801eef8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801eefa:	8a7b      	ldrh	r3, [r7, #18]
 801eefc:	2b00      	cmp	r3, #0
 801eefe:	d026      	beq.n	801ef4e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801ef00:	8a7b      	ldrh	r3, [r7, #18]
 801ef02:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801ef04:	429a      	cmp	r2, r3
 801ef06:	d206      	bcs.n	801ef16 <tcp_write+0x14a>
 801ef08:	4b67      	ldr	r3, [pc, #412]	@ (801f0a8 <tcp_write+0x2dc>)
 801ef0a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801ef0e:	496b      	ldr	r1, [pc, #428]	@ (801f0bc <tcp_write+0x2f0>)
 801ef10:	4867      	ldr	r0, [pc, #412]	@ (801f0b0 <tcp_write+0x2e4>)
 801ef12:	f006 f9a7 	bl	8025264 <iprintf>
      seg = last_unsent;
 801ef16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ef18:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801ef1a:	8a7b      	ldrh	r3, [r7, #18]
 801ef1c:	88fa      	ldrh	r2, [r7, #6]
 801ef1e:	4293      	cmp	r3, r2
 801ef20:	bf28      	it	cs
 801ef22:	4613      	movcs	r3, r2
 801ef24:	b29b      	uxth	r3, r3
 801ef26:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801ef28:	4293      	cmp	r3, r2
 801ef2a:	bf28      	it	cs
 801ef2c:	4613      	movcs	r3, r2
 801ef2e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801ef30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ef34:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ef36:	4413      	add	r3, r2
 801ef38:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801ef3c:	8a7a      	ldrh	r2, [r7, #18]
 801ef3e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ef40:	1ad3      	subs	r3, r2, r3
 801ef42:	b29b      	uxth	r3, r3
 801ef44:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801ef46:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801ef48:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ef4a:	1ad3      	subs	r3, r2, r3
 801ef4c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801ef4e:	8a7b      	ldrh	r3, [r7, #18]
 801ef50:	2b00      	cmp	r3, #0
 801ef52:	d00b      	beq.n	801ef6c <tcp_write+0x1a0>
 801ef54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ef58:	88fb      	ldrh	r3, [r7, #6]
 801ef5a:	429a      	cmp	r2, r3
 801ef5c:	d006      	beq.n	801ef6c <tcp_write+0x1a0>
 801ef5e:	4b52      	ldr	r3, [pc, #328]	@ (801f0a8 <tcp_write+0x2dc>)
 801ef60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801ef64:	4956      	ldr	r1, [pc, #344]	@ (801f0c0 <tcp_write+0x2f4>)
 801ef66:	4852      	ldr	r0, [pc, #328]	@ (801f0b0 <tcp_write+0x2e4>)
 801ef68:	f006 f97c 	bl	8025264 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801ef6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ef70:	88fb      	ldrh	r3, [r7, #6]
 801ef72:	429a      	cmp	r2, r3
 801ef74:	f080 8167 	bcs.w	801f246 <tcp_write+0x47a>
 801ef78:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ef7a:	2b00      	cmp	r3, #0
 801ef7c:	f000 8163 	beq.w	801f246 <tcp_write+0x47a>
 801ef80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ef82:	891b      	ldrh	r3, [r3, #8]
 801ef84:	2b00      	cmp	r3, #0
 801ef86:	f000 815e 	beq.w	801f246 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ef8a:	88fa      	ldrh	r2, [r7, #6]
 801ef8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ef90:	1ad2      	subs	r2, r2, r3
 801ef92:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ef94:	4293      	cmp	r3, r2
 801ef96:	bfa8      	it	ge
 801ef98:	4613      	movge	r3, r2
 801ef9a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801ef9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ef9e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801efa0:	797b      	ldrb	r3, [r7, #5]
 801efa2:	f003 0301 	and.w	r3, r3, #1
 801efa6:	2b00      	cmp	r3, #0
 801efa8:	d027      	beq.n	801effa <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801efaa:	f107 0012 	add.w	r0, r7, #18
 801efae:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801efb0:	8bf9      	ldrh	r1, [r7, #30]
 801efb2:	2301      	movs	r3, #1
 801efb4:	9302      	str	r3, [sp, #8]
 801efb6:	797b      	ldrb	r3, [r7, #5]
 801efb8:	9301      	str	r3, [sp, #4]
 801efba:	68fb      	ldr	r3, [r7, #12]
 801efbc:	9300      	str	r3, [sp, #0]
 801efbe:	4603      	mov	r3, r0
 801efc0:	2000      	movs	r0, #0
 801efc2:	f7ff fe0f 	bl	801ebe4 <tcp_pbuf_prealloc>
 801efc6:	6578      	str	r0, [r7, #84]	@ 0x54
 801efc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801efca:	2b00      	cmp	r3, #0
 801efcc:	f000 8225 	beq.w	801f41a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801efd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801efd2:	6858      	ldr	r0, [r3, #4]
 801efd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801efd8:	68ba      	ldr	r2, [r7, #8]
 801efda:	4413      	add	r3, r2
 801efdc:	8bfa      	ldrh	r2, [r7, #30]
 801efde:	4619      	mov	r1, r3
 801efe0:	f006 facd 	bl	802557e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801efe4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801efe6:	f7fb fa7d 	bl	801a4e4 <pbuf_clen>
 801efea:	4603      	mov	r3, r0
 801efec:	461a      	mov	r2, r3
 801efee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801eff2:	4413      	add	r3, r2
 801eff4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801eff8:	e041      	b.n	801f07e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801effa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801effc:	685b      	ldr	r3, [r3, #4]
 801effe:	637b      	str	r3, [r7, #52]	@ 0x34
 801f000:	e002      	b.n	801f008 <tcp_write+0x23c>
 801f002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f004:	681b      	ldr	r3, [r3, #0]
 801f006:	637b      	str	r3, [r7, #52]	@ 0x34
 801f008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f00a:	681b      	ldr	r3, [r3, #0]
 801f00c:	2b00      	cmp	r3, #0
 801f00e:	d1f8      	bne.n	801f002 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801f010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f012:	7b1b      	ldrb	r3, [r3, #12]
 801f014:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801f018:	2b00      	cmp	r3, #0
 801f01a:	d115      	bne.n	801f048 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801f01c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f01e:	685b      	ldr	r3, [r3, #4]
 801f020:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801f022:	8952      	ldrh	r2, [r2, #10]
 801f024:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801f026:	68ba      	ldr	r2, [r7, #8]
 801f028:	429a      	cmp	r2, r3
 801f02a:	d10d      	bne.n	801f048 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801f02c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f030:	2b00      	cmp	r3, #0
 801f032:	d006      	beq.n	801f042 <tcp_write+0x276>
 801f034:	4b1c      	ldr	r3, [pc, #112]	@ (801f0a8 <tcp_write+0x2dc>)
 801f036:	f240 2231 	movw	r2, #561	@ 0x231
 801f03a:	4922      	ldr	r1, [pc, #136]	@ (801f0c4 <tcp_write+0x2f8>)
 801f03c:	481c      	ldr	r0, [pc, #112]	@ (801f0b0 <tcp_write+0x2e4>)
 801f03e:	f006 f911 	bl	8025264 <iprintf>
          extendlen = seglen;
 801f042:	8bfb      	ldrh	r3, [r7, #30]
 801f044:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801f046:	e01a      	b.n	801f07e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801f048:	8bfb      	ldrh	r3, [r7, #30]
 801f04a:	2201      	movs	r2, #1
 801f04c:	4619      	mov	r1, r3
 801f04e:	2000      	movs	r0, #0
 801f050:	f7fa fea4 	bl	8019d9c <pbuf_alloc>
 801f054:	6578      	str	r0, [r7, #84]	@ 0x54
 801f056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f058:	2b00      	cmp	r3, #0
 801f05a:	f000 81e0 	beq.w	801f41e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801f05e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f062:	68ba      	ldr	r2, [r7, #8]
 801f064:	441a      	add	r2, r3
 801f066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f068:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801f06a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801f06c:	f7fb fa3a 	bl	801a4e4 <pbuf_clen>
 801f070:	4603      	mov	r3, r0
 801f072:	461a      	mov	r2, r3
 801f074:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801f078:	4413      	add	r3, r2
 801f07a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801f07e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f082:	8bfb      	ldrh	r3, [r7, #30]
 801f084:	4413      	add	r3, r2
 801f086:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801f08a:	e0dc      	b.n	801f246 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801f08c:	68fb      	ldr	r3, [r7, #12]
 801f08e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801f092:	2b00      	cmp	r3, #0
 801f094:	f000 80d7 	beq.w	801f246 <tcp_write+0x47a>
 801f098:	4b03      	ldr	r3, [pc, #12]	@ (801f0a8 <tcp_write+0x2dc>)
 801f09a:	f240 224a 	movw	r2, #586	@ 0x24a
 801f09e:	490a      	ldr	r1, [pc, #40]	@ (801f0c8 <tcp_write+0x2fc>)
 801f0a0:	4803      	ldr	r0, [pc, #12]	@ (801f0b0 <tcp_write+0x2e4>)
 801f0a2:	f006 f8df 	bl	8025264 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801f0a6:	e0ce      	b.n	801f246 <tcp_write+0x47a>
 801f0a8:	0802b9cc 	.word	0x0802b9cc
 801f0ac:	0802bb6c 	.word	0x0802bb6c
 801f0b0:	0802ba20 	.word	0x0802ba20
 801f0b4:	0802bb84 	.word	0x0802bb84
 801f0b8:	0802bbb8 	.word	0x0802bbb8
 801f0bc:	0802bbd0 	.word	0x0802bbd0
 801f0c0:	0802bbf0 	.word	0x0802bbf0
 801f0c4:	0802bc10 	.word	0x0802bc10
 801f0c8:	0802bc3c 	.word	0x0802bc3c
    struct pbuf *p;
    u16_t left = len - pos;
 801f0cc:	88fa      	ldrh	r2, [r7, #6]
 801f0ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f0d2:	1ad3      	subs	r3, r2, r3
 801f0d4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801f0d6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f0da:	b29b      	uxth	r3, r3
 801f0dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f0de:	1ad3      	subs	r3, r2, r3
 801f0e0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801f0e2:	8b7a      	ldrh	r2, [r7, #26]
 801f0e4:	8bbb      	ldrh	r3, [r7, #28]
 801f0e6:	4293      	cmp	r3, r2
 801f0e8:	bf28      	it	cs
 801f0ea:	4613      	movcs	r3, r2
 801f0ec:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801f0ee:	797b      	ldrb	r3, [r7, #5]
 801f0f0:	f003 0301 	and.w	r3, r3, #1
 801f0f4:	2b00      	cmp	r3, #0
 801f0f6:	d036      	beq.n	801f166 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801f0f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f0fc:	b29a      	uxth	r2, r3
 801f0fe:	8b3b      	ldrh	r3, [r7, #24]
 801f100:	4413      	add	r3, r2
 801f102:	b299      	uxth	r1, r3
 801f104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f106:	2b00      	cmp	r3, #0
 801f108:	bf0c      	ite	eq
 801f10a:	2301      	moveq	r3, #1
 801f10c:	2300      	movne	r3, #0
 801f10e:	b2db      	uxtb	r3, r3
 801f110:	f107 0012 	add.w	r0, r7, #18
 801f114:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f116:	9302      	str	r3, [sp, #8]
 801f118:	797b      	ldrb	r3, [r7, #5]
 801f11a:	9301      	str	r3, [sp, #4]
 801f11c:	68fb      	ldr	r3, [r7, #12]
 801f11e:	9300      	str	r3, [sp, #0]
 801f120:	4603      	mov	r3, r0
 801f122:	2036      	movs	r0, #54	@ 0x36
 801f124:	f7ff fd5e 	bl	801ebe4 <tcp_pbuf_prealloc>
 801f128:	6338      	str	r0, [r7, #48]	@ 0x30
 801f12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f12c:	2b00      	cmp	r3, #0
 801f12e:	f000 8178 	beq.w	801f422 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801f132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f134:	895b      	ldrh	r3, [r3, #10]
 801f136:	8b3a      	ldrh	r2, [r7, #24]
 801f138:	429a      	cmp	r2, r3
 801f13a:	d906      	bls.n	801f14a <tcp_write+0x37e>
 801f13c:	4b8c      	ldr	r3, [pc, #560]	@ (801f370 <tcp_write+0x5a4>)
 801f13e:	f240 2266 	movw	r2, #614	@ 0x266
 801f142:	498c      	ldr	r1, [pc, #560]	@ (801f374 <tcp_write+0x5a8>)
 801f144:	488c      	ldr	r0, [pc, #560]	@ (801f378 <tcp_write+0x5ac>)
 801f146:	f006 f88d 	bl	8025264 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801f14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f14c:	685a      	ldr	r2, [r3, #4]
 801f14e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f152:	18d0      	adds	r0, r2, r3
 801f154:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f158:	68ba      	ldr	r2, [r7, #8]
 801f15a:	4413      	add	r3, r2
 801f15c:	8b3a      	ldrh	r2, [r7, #24]
 801f15e:	4619      	mov	r1, r3
 801f160:	f006 fa0d 	bl	802557e <memcpy>
 801f164:	e02f      	b.n	801f1c6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801f166:	8a7b      	ldrh	r3, [r7, #18]
 801f168:	2b00      	cmp	r3, #0
 801f16a:	d006      	beq.n	801f17a <tcp_write+0x3ae>
 801f16c:	4b80      	ldr	r3, [pc, #512]	@ (801f370 <tcp_write+0x5a4>)
 801f16e:	f240 2271 	movw	r2, #625	@ 0x271
 801f172:	4982      	ldr	r1, [pc, #520]	@ (801f37c <tcp_write+0x5b0>)
 801f174:	4880      	ldr	r0, [pc, #512]	@ (801f378 <tcp_write+0x5ac>)
 801f176:	f006 f875 	bl	8025264 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801f17a:	8b3b      	ldrh	r3, [r7, #24]
 801f17c:	2201      	movs	r2, #1
 801f17e:	4619      	mov	r1, r3
 801f180:	2036      	movs	r0, #54	@ 0x36
 801f182:	f7fa fe0b 	bl	8019d9c <pbuf_alloc>
 801f186:	6178      	str	r0, [r7, #20]
 801f188:	697b      	ldr	r3, [r7, #20]
 801f18a:	2b00      	cmp	r3, #0
 801f18c:	f000 814b 	beq.w	801f426 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801f190:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f194:	68ba      	ldr	r2, [r7, #8]
 801f196:	441a      	add	r2, r3
 801f198:	697b      	ldr	r3, [r7, #20]
 801f19a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801f19c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f1a0:	b29b      	uxth	r3, r3
 801f1a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801f1a6:	4619      	mov	r1, r3
 801f1a8:	2036      	movs	r0, #54	@ 0x36
 801f1aa:	f7fa fdf7 	bl	8019d9c <pbuf_alloc>
 801f1ae:	6338      	str	r0, [r7, #48]	@ 0x30
 801f1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f1b2:	2b00      	cmp	r3, #0
 801f1b4:	d103      	bne.n	801f1be <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801f1b6:	6978      	ldr	r0, [r7, #20]
 801f1b8:	f7fb f906 	bl	801a3c8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801f1bc:	e136      	b.n	801f42c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801f1be:	6979      	ldr	r1, [r7, #20]
 801f1c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f1c2:	f7fb f9cf 	bl	801a564 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801f1c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f1c8:	f7fb f98c 	bl	801a4e4 <pbuf_clen>
 801f1cc:	4603      	mov	r3, r0
 801f1ce:	461a      	mov	r2, r3
 801f1d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801f1d4:	4413      	add	r3, r2
 801f1d6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801f1da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801f1de:	2b09      	cmp	r3, #9
 801f1e0:	d903      	bls.n	801f1ea <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801f1e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f1e4:	f7fb f8f0 	bl	801a3c8 <pbuf_free>
      goto memerr;
 801f1e8:	e120      	b.n	801f42c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801f1ea:	68fb      	ldr	r3, [r7, #12]
 801f1ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801f1ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f1f2:	441a      	add	r2, r3
 801f1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801f1f8:	9300      	str	r3, [sp, #0]
 801f1fa:	4613      	mov	r3, r2
 801f1fc:	2200      	movs	r2, #0
 801f1fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801f200:	68f8      	ldr	r0, [r7, #12]
 801f202:	f7ff fc53 	bl	801eaac <tcp_create_segment>
 801f206:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801f208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f20a:	2b00      	cmp	r3, #0
 801f20c:	f000 810d 	beq.w	801f42a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801f210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f212:	2b00      	cmp	r3, #0
 801f214:	d102      	bne.n	801f21c <tcp_write+0x450>
      queue = seg;
 801f216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f218:	647b      	str	r3, [r7, #68]	@ 0x44
 801f21a:	e00c      	b.n	801f236 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801f21c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f21e:	2b00      	cmp	r3, #0
 801f220:	d106      	bne.n	801f230 <tcp_write+0x464>
 801f222:	4b53      	ldr	r3, [pc, #332]	@ (801f370 <tcp_write+0x5a4>)
 801f224:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801f228:	4955      	ldr	r1, [pc, #340]	@ (801f380 <tcp_write+0x5b4>)
 801f22a:	4853      	ldr	r0, [pc, #332]	@ (801f378 <tcp_write+0x5ac>)
 801f22c:	f006 f81a 	bl	8025264 <iprintf>
      prev_seg->next = seg;
 801f230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f232:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801f234:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801f236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f238:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801f23a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f23e:	8b3b      	ldrh	r3, [r7, #24]
 801f240:	4413      	add	r3, r2
 801f242:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801f246:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f24a:	88fb      	ldrh	r3, [r7, #6]
 801f24c:	429a      	cmp	r2, r3
 801f24e:	f4ff af3d 	bcc.w	801f0cc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801f252:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f254:	2b00      	cmp	r3, #0
 801f256:	d02c      	beq.n	801f2b2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801f258:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f25a:	685b      	ldr	r3, [r3, #4]
 801f25c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f25e:	e01e      	b.n	801f29e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801f260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f262:	891a      	ldrh	r2, [r3, #8]
 801f264:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f266:	4413      	add	r3, r2
 801f268:	b29a      	uxth	r2, r3
 801f26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f26c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801f26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f270:	681b      	ldr	r3, [r3, #0]
 801f272:	2b00      	cmp	r3, #0
 801f274:	d110      	bne.n	801f298 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801f276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f278:	685b      	ldr	r3, [r3, #4]
 801f27a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f27c:	8952      	ldrh	r2, [r2, #10]
 801f27e:	4413      	add	r3, r2
 801f280:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801f282:	68b9      	ldr	r1, [r7, #8]
 801f284:	4618      	mov	r0, r3
 801f286:	f006 f97a 	bl	802557e <memcpy>
        p->len += oversize_used;
 801f28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f28c:	895a      	ldrh	r2, [r3, #10]
 801f28e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f290:	4413      	add	r3, r2
 801f292:	b29a      	uxth	r2, r3
 801f294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f296:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801f298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f29a:	681b      	ldr	r3, [r3, #0]
 801f29c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f2a0:	2b00      	cmp	r3, #0
 801f2a2:	d1dd      	bne.n	801f260 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801f2a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f2a6:	891a      	ldrh	r2, [r3, #8]
 801f2a8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f2aa:	4413      	add	r3, r2
 801f2ac:	b29a      	uxth	r2, r3
 801f2ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f2b0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801f2b2:	8a7a      	ldrh	r2, [r7, #18]
 801f2b4:	68fb      	ldr	r3, [r7, #12]
 801f2b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801f2ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f2bc:	2b00      	cmp	r3, #0
 801f2be:	d018      	beq.n	801f2f2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801f2c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f2c2:	2b00      	cmp	r3, #0
 801f2c4:	d106      	bne.n	801f2d4 <tcp_write+0x508>
 801f2c6:	4b2a      	ldr	r3, [pc, #168]	@ (801f370 <tcp_write+0x5a4>)
 801f2c8:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801f2cc:	492d      	ldr	r1, [pc, #180]	@ (801f384 <tcp_write+0x5b8>)
 801f2ce:	482a      	ldr	r0, [pc, #168]	@ (801f378 <tcp_write+0x5ac>)
 801f2d0:	f005 ffc8 	bl	8025264 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801f2d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f2d6:	685b      	ldr	r3, [r3, #4]
 801f2d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801f2da:	4618      	mov	r0, r3
 801f2dc:	f7fb f942 	bl	801a564 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801f2e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f2e2:	891a      	ldrh	r2, [r3, #8]
 801f2e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f2e6:	891b      	ldrh	r3, [r3, #8]
 801f2e8:	4413      	add	r3, r2
 801f2ea:	b29a      	uxth	r2, r3
 801f2ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f2ee:	811a      	strh	r2, [r3, #8]
 801f2f0:	e037      	b.n	801f362 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801f2f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	d034      	beq.n	801f362 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801f2f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f2fa:	2b00      	cmp	r3, #0
 801f2fc:	d003      	beq.n	801f306 <tcp_write+0x53a>
 801f2fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f300:	685b      	ldr	r3, [r3, #4]
 801f302:	2b00      	cmp	r3, #0
 801f304:	d106      	bne.n	801f314 <tcp_write+0x548>
 801f306:	4b1a      	ldr	r3, [pc, #104]	@ (801f370 <tcp_write+0x5a4>)
 801f308:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801f30c:	491e      	ldr	r1, [pc, #120]	@ (801f388 <tcp_write+0x5bc>)
 801f30e:	481a      	ldr	r0, [pc, #104]	@ (801f378 <tcp_write+0x5ac>)
 801f310:	f005 ffa8 	bl	8025264 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801f314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f316:	685b      	ldr	r3, [r3, #4]
 801f318:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f31a:	e009      	b.n	801f330 <tcp_write+0x564>
      p->tot_len += extendlen;
 801f31c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f31e:	891a      	ldrh	r2, [r3, #8]
 801f320:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f322:	4413      	add	r3, r2
 801f324:	b29a      	uxth	r2, r3
 801f326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f328:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801f32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f32c:	681b      	ldr	r3, [r3, #0]
 801f32e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f332:	681b      	ldr	r3, [r3, #0]
 801f334:	2b00      	cmp	r3, #0
 801f336:	d1f1      	bne.n	801f31c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801f338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f33a:	891a      	ldrh	r2, [r3, #8]
 801f33c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f33e:	4413      	add	r3, r2
 801f340:	b29a      	uxth	r2, r3
 801f342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f344:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801f346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f348:	895a      	ldrh	r2, [r3, #10]
 801f34a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f34c:	4413      	add	r3, r2
 801f34e:	b29a      	uxth	r2, r3
 801f350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f352:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801f354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f356:	891a      	ldrh	r2, [r3, #8]
 801f358:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f35a:	4413      	add	r3, r2
 801f35c:	b29a      	uxth	r2, r3
 801f35e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f360:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801f362:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f364:	2b00      	cmp	r3, #0
 801f366:	d111      	bne.n	801f38c <tcp_write+0x5c0>
    pcb->unsent = queue;
 801f368:	68fb      	ldr	r3, [r7, #12]
 801f36a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801f36c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801f36e:	e010      	b.n	801f392 <tcp_write+0x5c6>
 801f370:	0802b9cc 	.word	0x0802b9cc
 801f374:	0802bc6c 	.word	0x0802bc6c
 801f378:	0802ba20 	.word	0x0802ba20
 801f37c:	0802bcac 	.word	0x0802bcac
 801f380:	0802bcbc 	.word	0x0802bcbc
 801f384:	0802bcd0 	.word	0x0802bcd0
 801f388:	0802bd08 	.word	0x0802bd08
  } else {
    last_unsent->next = queue;
 801f38c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f38e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801f390:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801f392:	68fb      	ldr	r3, [r7, #12]
 801f394:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801f396:	88fb      	ldrh	r3, [r7, #6]
 801f398:	441a      	add	r2, r3
 801f39a:	68fb      	ldr	r3, [r7, #12]
 801f39c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801f39e:	68fb      	ldr	r3, [r7, #12]
 801f3a0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801f3a4:	88fb      	ldrh	r3, [r7, #6]
 801f3a6:	1ad3      	subs	r3, r2, r3
 801f3a8:	b29a      	uxth	r2, r3
 801f3aa:	68fb      	ldr	r3, [r7, #12]
 801f3ac:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 801f3b0:	68fb      	ldr	r3, [r7, #12]
 801f3b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801f3b6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801f3ba:	68fb      	ldr	r3, [r7, #12]
 801f3bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f3c0:	2b00      	cmp	r3, #0
 801f3c2:	d00e      	beq.n	801f3e2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801f3c4:	68fb      	ldr	r3, [r7, #12]
 801f3c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f3c8:	2b00      	cmp	r3, #0
 801f3ca:	d10a      	bne.n	801f3e2 <tcp_write+0x616>
 801f3cc:	68fb      	ldr	r3, [r7, #12]
 801f3ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f3d0:	2b00      	cmp	r3, #0
 801f3d2:	d106      	bne.n	801f3e2 <tcp_write+0x616>
 801f3d4:	4b2c      	ldr	r3, [pc, #176]	@ (801f488 <tcp_write+0x6bc>)
 801f3d6:	f240 3212 	movw	r2, #786	@ 0x312
 801f3da:	492c      	ldr	r1, [pc, #176]	@ (801f48c <tcp_write+0x6c0>)
 801f3dc:	482c      	ldr	r0, [pc, #176]	@ (801f490 <tcp_write+0x6c4>)
 801f3de:	f005 ff41 	bl	8025264 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801f3e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f3e4:	2b00      	cmp	r3, #0
 801f3e6:	d016      	beq.n	801f416 <tcp_write+0x64a>
 801f3e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f3ea:	68db      	ldr	r3, [r3, #12]
 801f3ec:	2b00      	cmp	r3, #0
 801f3ee:	d012      	beq.n	801f416 <tcp_write+0x64a>
 801f3f0:	797b      	ldrb	r3, [r7, #5]
 801f3f2:	f003 0302 	and.w	r3, r3, #2
 801f3f6:	2b00      	cmp	r3, #0
 801f3f8:	d10d      	bne.n	801f416 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801f3fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f3fc:	68db      	ldr	r3, [r3, #12]
 801f3fe:	899b      	ldrh	r3, [r3, #12]
 801f400:	b29c      	uxth	r4, r3
 801f402:	2008      	movs	r0, #8
 801f404:	f7f9 fb04 	bl	8018a10 <lwip_htons>
 801f408:	4603      	mov	r3, r0
 801f40a:	461a      	mov	r2, r3
 801f40c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f40e:	68db      	ldr	r3, [r3, #12]
 801f410:	4322      	orrs	r2, r4
 801f412:	b292      	uxth	r2, r2
 801f414:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801f416:	2300      	movs	r3, #0
 801f418:	e031      	b.n	801f47e <tcp_write+0x6b2>
          goto memerr;
 801f41a:	bf00      	nop
 801f41c:	e006      	b.n	801f42c <tcp_write+0x660>
            goto memerr;
 801f41e:	bf00      	nop
 801f420:	e004      	b.n	801f42c <tcp_write+0x660>
        goto memerr;
 801f422:	bf00      	nop
 801f424:	e002      	b.n	801f42c <tcp_write+0x660>
        goto memerr;
 801f426:	bf00      	nop
 801f428:	e000      	b.n	801f42c <tcp_write+0x660>
      goto memerr;
 801f42a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f42c:	68fb      	ldr	r3, [r7, #12]
 801f42e:	8b5b      	ldrh	r3, [r3, #26]
 801f430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f434:	b29a      	uxth	r2, r3
 801f436:	68fb      	ldr	r3, [r7, #12]
 801f438:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801f43a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f43c:	2b00      	cmp	r3, #0
 801f43e:	d002      	beq.n	801f446 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801f440:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801f442:	f7fa ffc1 	bl	801a3c8 <pbuf_free>
  }
  if (queue != NULL) {
 801f446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f448:	2b00      	cmp	r3, #0
 801f44a:	d002      	beq.n	801f452 <tcp_write+0x686>
    tcp_segs_free(queue);
 801f44c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801f44e:	f7fc fb71 	bl	801bb34 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801f452:	68fb      	ldr	r3, [r7, #12]
 801f454:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f458:	2b00      	cmp	r3, #0
 801f45a:	d00e      	beq.n	801f47a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801f45c:	68fb      	ldr	r3, [r7, #12]
 801f45e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f460:	2b00      	cmp	r3, #0
 801f462:	d10a      	bne.n	801f47a <tcp_write+0x6ae>
 801f464:	68fb      	ldr	r3, [r7, #12]
 801f466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f468:	2b00      	cmp	r3, #0
 801f46a:	d106      	bne.n	801f47a <tcp_write+0x6ae>
 801f46c:	4b06      	ldr	r3, [pc, #24]	@ (801f488 <tcp_write+0x6bc>)
 801f46e:	f240 3227 	movw	r2, #807	@ 0x327
 801f472:	4906      	ldr	r1, [pc, #24]	@ (801f48c <tcp_write+0x6c0>)
 801f474:	4806      	ldr	r0, [pc, #24]	@ (801f490 <tcp_write+0x6c4>)
 801f476:	f005 fef5 	bl	8025264 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801f47a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f47e:	4618      	mov	r0, r3
 801f480:	375c      	adds	r7, #92	@ 0x5c
 801f482:	46bd      	mov	sp, r7
 801f484:	bd90      	pop	{r4, r7, pc}
 801f486:	bf00      	nop
 801f488:	0802b9cc 	.word	0x0802b9cc
 801f48c:	0802bd40 	.word	0x0802bd40
 801f490:	0802ba20 	.word	0x0802ba20

0801f494 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801f494:	b590      	push	{r4, r7, lr}
 801f496:	b08b      	sub	sp, #44	@ 0x2c
 801f498:	af02      	add	r7, sp, #8
 801f49a:	6078      	str	r0, [r7, #4]
 801f49c:	460b      	mov	r3, r1
 801f49e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801f4a0:	2300      	movs	r3, #0
 801f4a2:	61fb      	str	r3, [r7, #28]
 801f4a4:	2300      	movs	r3, #0
 801f4a6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801f4a8:	2300      	movs	r3, #0
 801f4aa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	2b00      	cmp	r3, #0
 801f4b0:	d106      	bne.n	801f4c0 <tcp_split_unsent_seg+0x2c>
 801f4b2:	4b95      	ldr	r3, [pc, #596]	@ (801f708 <tcp_split_unsent_seg+0x274>)
 801f4b4:	f240 324b 	movw	r2, #843	@ 0x34b
 801f4b8:	4994      	ldr	r1, [pc, #592]	@ (801f70c <tcp_split_unsent_seg+0x278>)
 801f4ba:	4895      	ldr	r0, [pc, #596]	@ (801f710 <tcp_split_unsent_seg+0x27c>)
 801f4bc:	f005 fed2 	bl	8025264 <iprintf>

  useg = pcb->unsent;
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f4c4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801f4c6:	697b      	ldr	r3, [r7, #20]
 801f4c8:	2b00      	cmp	r3, #0
 801f4ca:	d102      	bne.n	801f4d2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801f4cc:	f04f 33ff 	mov.w	r3, #4294967295
 801f4d0:	e116      	b.n	801f700 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801f4d2:	887b      	ldrh	r3, [r7, #2]
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	d109      	bne.n	801f4ec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801f4d8:	4b8b      	ldr	r3, [pc, #556]	@ (801f708 <tcp_split_unsent_seg+0x274>)
 801f4da:	f240 3253 	movw	r2, #851	@ 0x353
 801f4de:	498d      	ldr	r1, [pc, #564]	@ (801f714 <tcp_split_unsent_seg+0x280>)
 801f4e0:	488b      	ldr	r0, [pc, #556]	@ (801f710 <tcp_split_unsent_seg+0x27c>)
 801f4e2:	f005 febf 	bl	8025264 <iprintf>
    return ERR_VAL;
 801f4e6:	f06f 0305 	mvn.w	r3, #5
 801f4ea:	e109      	b.n	801f700 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801f4ec:	697b      	ldr	r3, [r7, #20]
 801f4ee:	891b      	ldrh	r3, [r3, #8]
 801f4f0:	887a      	ldrh	r2, [r7, #2]
 801f4f2:	429a      	cmp	r2, r3
 801f4f4:	d301      	bcc.n	801f4fa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801f4f6:	2300      	movs	r3, #0
 801f4f8:	e102      	b.n	801f700 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801f4fa:	687b      	ldr	r3, [r7, #4]
 801f4fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f4fe:	887a      	ldrh	r2, [r7, #2]
 801f500:	429a      	cmp	r2, r3
 801f502:	d906      	bls.n	801f512 <tcp_split_unsent_seg+0x7e>
 801f504:	4b80      	ldr	r3, [pc, #512]	@ (801f708 <tcp_split_unsent_seg+0x274>)
 801f506:	f240 325b 	movw	r2, #859	@ 0x35b
 801f50a:	4983      	ldr	r1, [pc, #524]	@ (801f718 <tcp_split_unsent_seg+0x284>)
 801f50c:	4880      	ldr	r0, [pc, #512]	@ (801f710 <tcp_split_unsent_seg+0x27c>)
 801f50e:	f005 fea9 	bl	8025264 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801f512:	697b      	ldr	r3, [r7, #20]
 801f514:	891b      	ldrh	r3, [r3, #8]
 801f516:	2b00      	cmp	r3, #0
 801f518:	d106      	bne.n	801f528 <tcp_split_unsent_seg+0x94>
 801f51a:	4b7b      	ldr	r3, [pc, #492]	@ (801f708 <tcp_split_unsent_seg+0x274>)
 801f51c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801f520:	497e      	ldr	r1, [pc, #504]	@ (801f71c <tcp_split_unsent_seg+0x288>)
 801f522:	487b      	ldr	r0, [pc, #492]	@ (801f710 <tcp_split_unsent_seg+0x27c>)
 801f524:	f005 fe9e 	bl	8025264 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801f528:	697b      	ldr	r3, [r7, #20]
 801f52a:	7a9b      	ldrb	r3, [r3, #10]
 801f52c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801f52e:	7bfb      	ldrb	r3, [r7, #15]
 801f530:	009b      	lsls	r3, r3, #2
 801f532:	b2db      	uxtb	r3, r3
 801f534:	f003 0304 	and.w	r3, r3, #4
 801f538:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801f53a:	697b      	ldr	r3, [r7, #20]
 801f53c:	891a      	ldrh	r2, [r3, #8]
 801f53e:	887b      	ldrh	r3, [r7, #2]
 801f540:	1ad3      	subs	r3, r2, r3
 801f542:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801f544:	7bbb      	ldrb	r3, [r7, #14]
 801f546:	b29a      	uxth	r2, r3
 801f548:	89bb      	ldrh	r3, [r7, #12]
 801f54a:	4413      	add	r3, r2
 801f54c:	b29b      	uxth	r3, r3
 801f54e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801f552:	4619      	mov	r1, r3
 801f554:	2036      	movs	r0, #54	@ 0x36
 801f556:	f7fa fc21 	bl	8019d9c <pbuf_alloc>
 801f55a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f55c:	693b      	ldr	r3, [r7, #16]
 801f55e:	2b00      	cmp	r3, #0
 801f560:	f000 80b7 	beq.w	801f6d2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801f564:	697b      	ldr	r3, [r7, #20]
 801f566:	685b      	ldr	r3, [r3, #4]
 801f568:	891a      	ldrh	r2, [r3, #8]
 801f56a:	697b      	ldr	r3, [r7, #20]
 801f56c:	891b      	ldrh	r3, [r3, #8]
 801f56e:	1ad3      	subs	r3, r2, r3
 801f570:	b29a      	uxth	r2, r3
 801f572:	887b      	ldrh	r3, [r7, #2]
 801f574:	4413      	add	r3, r2
 801f576:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801f578:	697b      	ldr	r3, [r7, #20]
 801f57a:	6858      	ldr	r0, [r3, #4]
 801f57c:	693b      	ldr	r3, [r7, #16]
 801f57e:	685a      	ldr	r2, [r3, #4]
 801f580:	7bbb      	ldrb	r3, [r7, #14]
 801f582:	18d1      	adds	r1, r2, r3
 801f584:	897b      	ldrh	r3, [r7, #10]
 801f586:	89ba      	ldrh	r2, [r7, #12]
 801f588:	f7fb f924 	bl	801a7d4 <pbuf_copy_partial>
 801f58c:	4603      	mov	r3, r0
 801f58e:	461a      	mov	r2, r3
 801f590:	89bb      	ldrh	r3, [r7, #12]
 801f592:	4293      	cmp	r3, r2
 801f594:	f040 809f 	bne.w	801f6d6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801f598:	697b      	ldr	r3, [r7, #20]
 801f59a:	68db      	ldr	r3, [r3, #12]
 801f59c:	899b      	ldrh	r3, [r3, #12]
 801f59e:	b29b      	uxth	r3, r3
 801f5a0:	4618      	mov	r0, r3
 801f5a2:	f7f9 fa35 	bl	8018a10 <lwip_htons>
 801f5a6:	4603      	mov	r3, r0
 801f5a8:	b2db      	uxtb	r3, r3
 801f5aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f5ae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801f5b0:	2300      	movs	r3, #0
 801f5b2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801f5b4:	7efb      	ldrb	r3, [r7, #27]
 801f5b6:	f003 0308 	and.w	r3, r3, #8
 801f5ba:	2b00      	cmp	r3, #0
 801f5bc:	d007      	beq.n	801f5ce <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801f5be:	7efb      	ldrb	r3, [r7, #27]
 801f5c0:	f023 0308 	bic.w	r3, r3, #8
 801f5c4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801f5c6:	7ebb      	ldrb	r3, [r7, #26]
 801f5c8:	f043 0308 	orr.w	r3, r3, #8
 801f5cc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801f5ce:	7efb      	ldrb	r3, [r7, #27]
 801f5d0:	f003 0301 	and.w	r3, r3, #1
 801f5d4:	2b00      	cmp	r3, #0
 801f5d6:	d007      	beq.n	801f5e8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801f5d8:	7efb      	ldrb	r3, [r7, #27]
 801f5da:	f023 0301 	bic.w	r3, r3, #1
 801f5de:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801f5e0:	7ebb      	ldrb	r3, [r7, #26]
 801f5e2:	f043 0301 	orr.w	r3, r3, #1
 801f5e6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801f5e8:	697b      	ldr	r3, [r7, #20]
 801f5ea:	68db      	ldr	r3, [r3, #12]
 801f5ec:	685b      	ldr	r3, [r3, #4]
 801f5ee:	4618      	mov	r0, r3
 801f5f0:	f7f9 fa23 	bl	8018a3a <lwip_htonl>
 801f5f4:	4602      	mov	r2, r0
 801f5f6:	887b      	ldrh	r3, [r7, #2]
 801f5f8:	18d1      	adds	r1, r2, r3
 801f5fa:	7eba      	ldrb	r2, [r7, #26]
 801f5fc:	7bfb      	ldrb	r3, [r7, #15]
 801f5fe:	9300      	str	r3, [sp, #0]
 801f600:	460b      	mov	r3, r1
 801f602:	6939      	ldr	r1, [r7, #16]
 801f604:	6878      	ldr	r0, [r7, #4]
 801f606:	f7ff fa51 	bl	801eaac <tcp_create_segment>
 801f60a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801f60c:	69fb      	ldr	r3, [r7, #28]
 801f60e:	2b00      	cmp	r3, #0
 801f610:	d063      	beq.n	801f6da <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801f612:	697b      	ldr	r3, [r7, #20]
 801f614:	685b      	ldr	r3, [r3, #4]
 801f616:	4618      	mov	r0, r3
 801f618:	f7fa ff64 	bl	801a4e4 <pbuf_clen>
 801f61c:	4603      	mov	r3, r0
 801f61e:	461a      	mov	r2, r3
 801f620:	687b      	ldr	r3, [r7, #4]
 801f622:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f626:	1a9b      	subs	r3, r3, r2
 801f628:	b29a      	uxth	r2, r3
 801f62a:	687b      	ldr	r3, [r7, #4]
 801f62c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801f630:	697b      	ldr	r3, [r7, #20]
 801f632:	6858      	ldr	r0, [r3, #4]
 801f634:	697b      	ldr	r3, [r7, #20]
 801f636:	685b      	ldr	r3, [r3, #4]
 801f638:	891a      	ldrh	r2, [r3, #8]
 801f63a:	89bb      	ldrh	r3, [r7, #12]
 801f63c:	1ad3      	subs	r3, r2, r3
 801f63e:	b29b      	uxth	r3, r3
 801f640:	4619      	mov	r1, r3
 801f642:	f7fa fd09 	bl	801a058 <pbuf_realloc>
  useg->len -= remainder;
 801f646:	697b      	ldr	r3, [r7, #20]
 801f648:	891a      	ldrh	r2, [r3, #8]
 801f64a:	89bb      	ldrh	r3, [r7, #12]
 801f64c:	1ad3      	subs	r3, r2, r3
 801f64e:	b29a      	uxth	r2, r3
 801f650:	697b      	ldr	r3, [r7, #20]
 801f652:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801f654:	697b      	ldr	r3, [r7, #20]
 801f656:	68db      	ldr	r3, [r3, #12]
 801f658:	899b      	ldrh	r3, [r3, #12]
 801f65a:	b29c      	uxth	r4, r3
 801f65c:	7efb      	ldrb	r3, [r7, #27]
 801f65e:	b29b      	uxth	r3, r3
 801f660:	4618      	mov	r0, r3
 801f662:	f7f9 f9d5 	bl	8018a10 <lwip_htons>
 801f666:	4603      	mov	r3, r0
 801f668:	461a      	mov	r2, r3
 801f66a:	697b      	ldr	r3, [r7, #20]
 801f66c:	68db      	ldr	r3, [r3, #12]
 801f66e:	4322      	orrs	r2, r4
 801f670:	b292      	uxth	r2, r2
 801f672:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801f674:	697b      	ldr	r3, [r7, #20]
 801f676:	685b      	ldr	r3, [r3, #4]
 801f678:	4618      	mov	r0, r3
 801f67a:	f7fa ff33 	bl	801a4e4 <pbuf_clen>
 801f67e:	4603      	mov	r3, r0
 801f680:	461a      	mov	r2, r3
 801f682:	687b      	ldr	r3, [r7, #4]
 801f684:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f688:	4413      	add	r3, r2
 801f68a:	b29a      	uxth	r2, r3
 801f68c:	687b      	ldr	r3, [r7, #4]
 801f68e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801f692:	69fb      	ldr	r3, [r7, #28]
 801f694:	685b      	ldr	r3, [r3, #4]
 801f696:	4618      	mov	r0, r3
 801f698:	f7fa ff24 	bl	801a4e4 <pbuf_clen>
 801f69c:	4603      	mov	r3, r0
 801f69e:	461a      	mov	r2, r3
 801f6a0:	687b      	ldr	r3, [r7, #4]
 801f6a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f6a6:	4413      	add	r3, r2
 801f6a8:	b29a      	uxth	r2, r3
 801f6aa:	687b      	ldr	r3, [r7, #4]
 801f6ac:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801f6b0:	697b      	ldr	r3, [r7, #20]
 801f6b2:	681a      	ldr	r2, [r3, #0]
 801f6b4:	69fb      	ldr	r3, [r7, #28]
 801f6b6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801f6b8:	697b      	ldr	r3, [r7, #20]
 801f6ba:	69fa      	ldr	r2, [r7, #28]
 801f6bc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801f6be:	69fb      	ldr	r3, [r7, #28]
 801f6c0:	681b      	ldr	r3, [r3, #0]
 801f6c2:	2b00      	cmp	r3, #0
 801f6c4:	d103      	bne.n	801f6ce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801f6c6:	687b      	ldr	r3, [r7, #4]
 801f6c8:	2200      	movs	r2, #0
 801f6ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801f6ce:	2300      	movs	r3, #0
 801f6d0:	e016      	b.n	801f700 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801f6d2:	bf00      	nop
 801f6d4:	e002      	b.n	801f6dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 801f6d6:	bf00      	nop
 801f6d8:	e000      	b.n	801f6dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 801f6da:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801f6dc:	69fb      	ldr	r3, [r7, #28]
 801f6de:	2b00      	cmp	r3, #0
 801f6e0:	d006      	beq.n	801f6f0 <tcp_split_unsent_seg+0x25c>
 801f6e2:	4b09      	ldr	r3, [pc, #36]	@ (801f708 <tcp_split_unsent_seg+0x274>)
 801f6e4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801f6e8:	490d      	ldr	r1, [pc, #52]	@ (801f720 <tcp_split_unsent_seg+0x28c>)
 801f6ea:	4809      	ldr	r0, [pc, #36]	@ (801f710 <tcp_split_unsent_seg+0x27c>)
 801f6ec:	f005 fdba 	bl	8025264 <iprintf>
  if (p != NULL) {
 801f6f0:	693b      	ldr	r3, [r7, #16]
 801f6f2:	2b00      	cmp	r3, #0
 801f6f4:	d002      	beq.n	801f6fc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801f6f6:	6938      	ldr	r0, [r7, #16]
 801f6f8:	f7fa fe66 	bl	801a3c8 <pbuf_free>
  }

  return ERR_MEM;
 801f6fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f700:	4618      	mov	r0, r3
 801f702:	3724      	adds	r7, #36	@ 0x24
 801f704:	46bd      	mov	sp, r7
 801f706:	bd90      	pop	{r4, r7, pc}
 801f708:	0802b9cc 	.word	0x0802b9cc
 801f70c:	0802bd60 	.word	0x0802bd60
 801f710:	0802ba20 	.word	0x0802ba20
 801f714:	0802bd84 	.word	0x0802bd84
 801f718:	0802bda8 	.word	0x0802bda8
 801f71c:	0802bdb8 	.word	0x0802bdb8
 801f720:	0802bdc8 	.word	0x0802bdc8

0801f724 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801f724:	b590      	push	{r4, r7, lr}
 801f726:	b085      	sub	sp, #20
 801f728:	af00      	add	r7, sp, #0
 801f72a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801f72c:	687b      	ldr	r3, [r7, #4]
 801f72e:	2b00      	cmp	r3, #0
 801f730:	d106      	bne.n	801f740 <tcp_send_fin+0x1c>
 801f732:	4b21      	ldr	r3, [pc, #132]	@ (801f7b8 <tcp_send_fin+0x94>)
 801f734:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801f738:	4920      	ldr	r1, [pc, #128]	@ (801f7bc <tcp_send_fin+0x98>)
 801f73a:	4821      	ldr	r0, [pc, #132]	@ (801f7c0 <tcp_send_fin+0x9c>)
 801f73c:	f005 fd92 	bl	8025264 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801f740:	687b      	ldr	r3, [r7, #4]
 801f742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f744:	2b00      	cmp	r3, #0
 801f746:	d02e      	beq.n	801f7a6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f748:	687b      	ldr	r3, [r7, #4]
 801f74a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f74c:	60fb      	str	r3, [r7, #12]
 801f74e:	e002      	b.n	801f756 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801f750:	68fb      	ldr	r3, [r7, #12]
 801f752:	681b      	ldr	r3, [r3, #0]
 801f754:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f756:	68fb      	ldr	r3, [r7, #12]
 801f758:	681b      	ldr	r3, [r3, #0]
 801f75a:	2b00      	cmp	r3, #0
 801f75c:	d1f8      	bne.n	801f750 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801f75e:	68fb      	ldr	r3, [r7, #12]
 801f760:	68db      	ldr	r3, [r3, #12]
 801f762:	899b      	ldrh	r3, [r3, #12]
 801f764:	b29b      	uxth	r3, r3
 801f766:	4618      	mov	r0, r3
 801f768:	f7f9 f952 	bl	8018a10 <lwip_htons>
 801f76c:	4603      	mov	r3, r0
 801f76e:	b2db      	uxtb	r3, r3
 801f770:	f003 0307 	and.w	r3, r3, #7
 801f774:	2b00      	cmp	r3, #0
 801f776:	d116      	bne.n	801f7a6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801f778:	68fb      	ldr	r3, [r7, #12]
 801f77a:	68db      	ldr	r3, [r3, #12]
 801f77c:	899b      	ldrh	r3, [r3, #12]
 801f77e:	b29c      	uxth	r4, r3
 801f780:	2001      	movs	r0, #1
 801f782:	f7f9 f945 	bl	8018a10 <lwip_htons>
 801f786:	4603      	mov	r3, r0
 801f788:	461a      	mov	r2, r3
 801f78a:	68fb      	ldr	r3, [r7, #12]
 801f78c:	68db      	ldr	r3, [r3, #12]
 801f78e:	4322      	orrs	r2, r4
 801f790:	b292      	uxth	r2, r2
 801f792:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801f794:	687b      	ldr	r3, [r7, #4]
 801f796:	8b5b      	ldrh	r3, [r3, #26]
 801f798:	f043 0320 	orr.w	r3, r3, #32
 801f79c:	b29a      	uxth	r2, r3
 801f79e:	687b      	ldr	r3, [r7, #4]
 801f7a0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801f7a2:	2300      	movs	r3, #0
 801f7a4:	e004      	b.n	801f7b0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801f7a6:	2101      	movs	r1, #1
 801f7a8:	6878      	ldr	r0, [r7, #4]
 801f7aa:	f000 f80b 	bl	801f7c4 <tcp_enqueue_flags>
 801f7ae:	4603      	mov	r3, r0
}
 801f7b0:	4618      	mov	r0, r3
 801f7b2:	3714      	adds	r7, #20
 801f7b4:	46bd      	mov	sp, r7
 801f7b6:	bd90      	pop	{r4, r7, pc}
 801f7b8:	0802b9cc 	.word	0x0802b9cc
 801f7bc:	0802bdd4 	.word	0x0802bdd4
 801f7c0:	0802ba20 	.word	0x0802ba20

0801f7c4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801f7c4:	b580      	push	{r7, lr}
 801f7c6:	b08a      	sub	sp, #40	@ 0x28
 801f7c8:	af02      	add	r7, sp, #8
 801f7ca:	6078      	str	r0, [r7, #4]
 801f7cc:	460b      	mov	r3, r1
 801f7ce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801f7d0:	2300      	movs	r3, #0
 801f7d2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801f7d4:	2300      	movs	r3, #0
 801f7d6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801f7d8:	78fb      	ldrb	r3, [r7, #3]
 801f7da:	f003 0303 	and.w	r3, r3, #3
 801f7de:	2b00      	cmp	r3, #0
 801f7e0:	d106      	bne.n	801f7f0 <tcp_enqueue_flags+0x2c>
 801f7e2:	4b67      	ldr	r3, [pc, #412]	@ (801f980 <tcp_enqueue_flags+0x1bc>)
 801f7e4:	f240 4211 	movw	r2, #1041	@ 0x411
 801f7e8:	4966      	ldr	r1, [pc, #408]	@ (801f984 <tcp_enqueue_flags+0x1c0>)
 801f7ea:	4867      	ldr	r0, [pc, #412]	@ (801f988 <tcp_enqueue_flags+0x1c4>)
 801f7ec:	f005 fd3a 	bl	8025264 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801f7f0:	687b      	ldr	r3, [r7, #4]
 801f7f2:	2b00      	cmp	r3, #0
 801f7f4:	d106      	bne.n	801f804 <tcp_enqueue_flags+0x40>
 801f7f6:	4b62      	ldr	r3, [pc, #392]	@ (801f980 <tcp_enqueue_flags+0x1bc>)
 801f7f8:	f240 4213 	movw	r2, #1043	@ 0x413
 801f7fc:	4963      	ldr	r1, [pc, #396]	@ (801f98c <tcp_enqueue_flags+0x1c8>)
 801f7fe:	4862      	ldr	r0, [pc, #392]	@ (801f988 <tcp_enqueue_flags+0x1c4>)
 801f800:	f005 fd30 	bl	8025264 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801f804:	78fb      	ldrb	r3, [r7, #3]
 801f806:	f003 0302 	and.w	r3, r3, #2
 801f80a:	2b00      	cmp	r3, #0
 801f80c:	d001      	beq.n	801f812 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801f80e:	2301      	movs	r3, #1
 801f810:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801f812:	7ffb      	ldrb	r3, [r7, #31]
 801f814:	009b      	lsls	r3, r3, #2
 801f816:	b2db      	uxtb	r3, r3
 801f818:	f003 0304 	and.w	r3, r3, #4
 801f81c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801f81e:	7dfb      	ldrb	r3, [r7, #23]
 801f820:	b29b      	uxth	r3, r3
 801f822:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801f826:	4619      	mov	r1, r3
 801f828:	2036      	movs	r0, #54	@ 0x36
 801f82a:	f7fa fab7 	bl	8019d9c <pbuf_alloc>
 801f82e:	6138      	str	r0, [r7, #16]
 801f830:	693b      	ldr	r3, [r7, #16]
 801f832:	2b00      	cmp	r3, #0
 801f834:	d109      	bne.n	801f84a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f836:	687b      	ldr	r3, [r7, #4]
 801f838:	8b5b      	ldrh	r3, [r3, #26]
 801f83a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f83e:	b29a      	uxth	r2, r3
 801f840:	687b      	ldr	r3, [r7, #4]
 801f842:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801f844:	f04f 33ff 	mov.w	r3, #4294967295
 801f848:	e095      	b.n	801f976 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801f84a:	693b      	ldr	r3, [r7, #16]
 801f84c:	895a      	ldrh	r2, [r3, #10]
 801f84e:	7dfb      	ldrb	r3, [r7, #23]
 801f850:	b29b      	uxth	r3, r3
 801f852:	429a      	cmp	r2, r3
 801f854:	d206      	bcs.n	801f864 <tcp_enqueue_flags+0xa0>
 801f856:	4b4a      	ldr	r3, [pc, #296]	@ (801f980 <tcp_enqueue_flags+0x1bc>)
 801f858:	f240 4239 	movw	r2, #1081	@ 0x439
 801f85c:	494c      	ldr	r1, [pc, #304]	@ (801f990 <tcp_enqueue_flags+0x1cc>)
 801f85e:	484a      	ldr	r0, [pc, #296]	@ (801f988 <tcp_enqueue_flags+0x1c4>)
 801f860:	f005 fd00 	bl	8025264 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801f864:	687b      	ldr	r3, [r7, #4]
 801f866:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801f868:	78fa      	ldrb	r2, [r7, #3]
 801f86a:	7ffb      	ldrb	r3, [r7, #31]
 801f86c:	9300      	str	r3, [sp, #0]
 801f86e:	460b      	mov	r3, r1
 801f870:	6939      	ldr	r1, [r7, #16]
 801f872:	6878      	ldr	r0, [r7, #4]
 801f874:	f7ff f91a 	bl	801eaac <tcp_create_segment>
 801f878:	60f8      	str	r0, [r7, #12]
 801f87a:	68fb      	ldr	r3, [r7, #12]
 801f87c:	2b00      	cmp	r3, #0
 801f87e:	d109      	bne.n	801f894 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f880:	687b      	ldr	r3, [r7, #4]
 801f882:	8b5b      	ldrh	r3, [r3, #26]
 801f884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f888:	b29a      	uxth	r2, r3
 801f88a:	687b      	ldr	r3, [r7, #4]
 801f88c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801f88e:	f04f 33ff 	mov.w	r3, #4294967295
 801f892:	e070      	b.n	801f976 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801f894:	68fb      	ldr	r3, [r7, #12]
 801f896:	68db      	ldr	r3, [r3, #12]
 801f898:	f003 0303 	and.w	r3, r3, #3
 801f89c:	2b00      	cmp	r3, #0
 801f89e:	d006      	beq.n	801f8ae <tcp_enqueue_flags+0xea>
 801f8a0:	4b37      	ldr	r3, [pc, #220]	@ (801f980 <tcp_enqueue_flags+0x1bc>)
 801f8a2:	f240 4242 	movw	r2, #1090	@ 0x442
 801f8a6:	493b      	ldr	r1, [pc, #236]	@ (801f994 <tcp_enqueue_flags+0x1d0>)
 801f8a8:	4837      	ldr	r0, [pc, #220]	@ (801f988 <tcp_enqueue_flags+0x1c4>)
 801f8aa:	f005 fcdb 	bl	8025264 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801f8ae:	68fb      	ldr	r3, [r7, #12]
 801f8b0:	891b      	ldrh	r3, [r3, #8]
 801f8b2:	2b00      	cmp	r3, #0
 801f8b4:	d006      	beq.n	801f8c4 <tcp_enqueue_flags+0x100>
 801f8b6:	4b32      	ldr	r3, [pc, #200]	@ (801f980 <tcp_enqueue_flags+0x1bc>)
 801f8b8:	f240 4243 	movw	r2, #1091	@ 0x443
 801f8bc:	4936      	ldr	r1, [pc, #216]	@ (801f998 <tcp_enqueue_flags+0x1d4>)
 801f8be:	4832      	ldr	r0, [pc, #200]	@ (801f988 <tcp_enqueue_flags+0x1c4>)
 801f8c0:	f005 fcd0 	bl	8025264 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f8c8:	2b00      	cmp	r3, #0
 801f8ca:	d103      	bne.n	801f8d4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801f8cc:	687b      	ldr	r3, [r7, #4]
 801f8ce:	68fa      	ldr	r2, [r7, #12]
 801f8d0:	66da      	str	r2, [r3, #108]	@ 0x6c
 801f8d2:	e00d      	b.n	801f8f0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801f8d4:	687b      	ldr	r3, [r7, #4]
 801f8d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f8d8:	61bb      	str	r3, [r7, #24]
 801f8da:	e002      	b.n	801f8e2 <tcp_enqueue_flags+0x11e>
 801f8dc:	69bb      	ldr	r3, [r7, #24]
 801f8de:	681b      	ldr	r3, [r3, #0]
 801f8e0:	61bb      	str	r3, [r7, #24]
 801f8e2:	69bb      	ldr	r3, [r7, #24]
 801f8e4:	681b      	ldr	r3, [r3, #0]
 801f8e6:	2b00      	cmp	r3, #0
 801f8e8:	d1f8      	bne.n	801f8dc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801f8ea:	69bb      	ldr	r3, [r7, #24]
 801f8ec:	68fa      	ldr	r2, [r7, #12]
 801f8ee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801f8f0:	687b      	ldr	r3, [r7, #4]
 801f8f2:	2200      	movs	r2, #0
 801f8f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801f8f8:	78fb      	ldrb	r3, [r7, #3]
 801f8fa:	f003 0302 	and.w	r3, r3, #2
 801f8fe:	2b00      	cmp	r3, #0
 801f900:	d104      	bne.n	801f90c <tcp_enqueue_flags+0x148>
 801f902:	78fb      	ldrb	r3, [r7, #3]
 801f904:	f003 0301 	and.w	r3, r3, #1
 801f908:	2b00      	cmp	r3, #0
 801f90a:	d004      	beq.n	801f916 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801f90c:	687b      	ldr	r3, [r7, #4]
 801f90e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801f910:	1c5a      	adds	r2, r3, #1
 801f912:	687b      	ldr	r3, [r7, #4]
 801f914:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801f916:	78fb      	ldrb	r3, [r7, #3]
 801f918:	f003 0301 	and.w	r3, r3, #1
 801f91c:	2b00      	cmp	r3, #0
 801f91e:	d006      	beq.n	801f92e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801f920:	687b      	ldr	r3, [r7, #4]
 801f922:	8b5b      	ldrh	r3, [r3, #26]
 801f924:	f043 0320 	orr.w	r3, r3, #32
 801f928:	b29a      	uxth	r2, r3
 801f92a:	687b      	ldr	r3, [r7, #4]
 801f92c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801f92e:	68fb      	ldr	r3, [r7, #12]
 801f930:	685b      	ldr	r3, [r3, #4]
 801f932:	4618      	mov	r0, r3
 801f934:	f7fa fdd6 	bl	801a4e4 <pbuf_clen>
 801f938:	4603      	mov	r3, r0
 801f93a:	461a      	mov	r2, r3
 801f93c:	687b      	ldr	r3, [r7, #4]
 801f93e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f942:	4413      	add	r3, r2
 801f944:	b29a      	uxth	r2, r3
 801f946:	687b      	ldr	r3, [r7, #4]
 801f948:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801f94c:	687b      	ldr	r3, [r7, #4]
 801f94e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f952:	2b00      	cmp	r3, #0
 801f954:	d00e      	beq.n	801f974 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801f956:	687b      	ldr	r3, [r7, #4]
 801f958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f95a:	2b00      	cmp	r3, #0
 801f95c:	d10a      	bne.n	801f974 <tcp_enqueue_flags+0x1b0>
 801f95e:	687b      	ldr	r3, [r7, #4]
 801f960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f962:	2b00      	cmp	r3, #0
 801f964:	d106      	bne.n	801f974 <tcp_enqueue_flags+0x1b0>
 801f966:	4b06      	ldr	r3, [pc, #24]	@ (801f980 <tcp_enqueue_flags+0x1bc>)
 801f968:	f240 4265 	movw	r2, #1125	@ 0x465
 801f96c:	490b      	ldr	r1, [pc, #44]	@ (801f99c <tcp_enqueue_flags+0x1d8>)
 801f96e:	4806      	ldr	r0, [pc, #24]	@ (801f988 <tcp_enqueue_flags+0x1c4>)
 801f970:	f005 fc78 	bl	8025264 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801f974:	2300      	movs	r3, #0
}
 801f976:	4618      	mov	r0, r3
 801f978:	3720      	adds	r7, #32
 801f97a:	46bd      	mov	sp, r7
 801f97c:	bd80      	pop	{r7, pc}
 801f97e:	bf00      	nop
 801f980:	0802b9cc 	.word	0x0802b9cc
 801f984:	0802bdf0 	.word	0x0802bdf0
 801f988:	0802ba20 	.word	0x0802ba20
 801f98c:	0802be48 	.word	0x0802be48
 801f990:	0802be68 	.word	0x0802be68
 801f994:	0802bea4 	.word	0x0802bea4
 801f998:	0802bebc 	.word	0x0802bebc
 801f99c:	0802bee8 	.word	0x0802bee8

0801f9a0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801f9a0:	b5b0      	push	{r4, r5, r7, lr}
 801f9a2:	b08a      	sub	sp, #40	@ 0x28
 801f9a4:	af00      	add	r7, sp, #0
 801f9a6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801f9a8:	687b      	ldr	r3, [r7, #4]
 801f9aa:	2b00      	cmp	r3, #0
 801f9ac:	d106      	bne.n	801f9bc <tcp_output+0x1c>
 801f9ae:	4b8a      	ldr	r3, [pc, #552]	@ (801fbd8 <tcp_output+0x238>)
 801f9b0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801f9b4:	4989      	ldr	r1, [pc, #548]	@ (801fbdc <tcp_output+0x23c>)
 801f9b6:	488a      	ldr	r0, [pc, #552]	@ (801fbe0 <tcp_output+0x240>)
 801f9b8:	f005 fc54 	bl	8025264 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801f9bc:	687b      	ldr	r3, [r7, #4]
 801f9be:	7d1b      	ldrb	r3, [r3, #20]
 801f9c0:	2b01      	cmp	r3, #1
 801f9c2:	d106      	bne.n	801f9d2 <tcp_output+0x32>
 801f9c4:	4b84      	ldr	r3, [pc, #528]	@ (801fbd8 <tcp_output+0x238>)
 801f9c6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801f9ca:	4986      	ldr	r1, [pc, #536]	@ (801fbe4 <tcp_output+0x244>)
 801f9cc:	4884      	ldr	r0, [pc, #528]	@ (801fbe0 <tcp_output+0x240>)
 801f9ce:	f005 fc49 	bl	8025264 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801f9d2:	4b85      	ldr	r3, [pc, #532]	@ (801fbe8 <tcp_output+0x248>)
 801f9d4:	681b      	ldr	r3, [r3, #0]
 801f9d6:	687a      	ldr	r2, [r7, #4]
 801f9d8:	429a      	cmp	r2, r3
 801f9da:	d101      	bne.n	801f9e0 <tcp_output+0x40>
    return ERR_OK;
 801f9dc:	2300      	movs	r3, #0
 801f9de:	e1ce      	b.n	801fd7e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801f9e0:	687b      	ldr	r3, [r7, #4]
 801f9e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801f9e6:	687b      	ldr	r3, [r7, #4]
 801f9e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801f9ec:	4293      	cmp	r3, r2
 801f9ee:	bf28      	it	cs
 801f9f0:	4613      	movcs	r3, r2
 801f9f2:	b29b      	uxth	r3, r3
 801f9f4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801f9f6:	687b      	ldr	r3, [r7, #4]
 801f9f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f9fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801f9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f9fe:	2b00      	cmp	r3, #0
 801fa00:	d10b      	bne.n	801fa1a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801fa02:	687b      	ldr	r3, [r7, #4]
 801fa04:	8b5b      	ldrh	r3, [r3, #26]
 801fa06:	f003 0302 	and.w	r3, r3, #2
 801fa0a:	2b00      	cmp	r3, #0
 801fa0c:	f000 81aa 	beq.w	801fd64 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801fa10:	6878      	ldr	r0, [r7, #4]
 801fa12:	f000 fdcb 	bl	80205ac <tcp_send_empty_ack>
 801fa16:	4603      	mov	r3, r0
 801fa18:	e1b1      	b.n	801fd7e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801fa1a:	6879      	ldr	r1, [r7, #4]
 801fa1c:	687b      	ldr	r3, [r7, #4]
 801fa1e:	3304      	adds	r3, #4
 801fa20:	461a      	mov	r2, r3
 801fa22:	6878      	ldr	r0, [r7, #4]
 801fa24:	f7ff f826 	bl	801ea74 <tcp_route>
 801fa28:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801fa2a:	697b      	ldr	r3, [r7, #20]
 801fa2c:	2b00      	cmp	r3, #0
 801fa2e:	d102      	bne.n	801fa36 <tcp_output+0x96>
    return ERR_RTE;
 801fa30:	f06f 0303 	mvn.w	r3, #3
 801fa34:	e1a3      	b.n	801fd7e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801fa36:	687b      	ldr	r3, [r7, #4]
 801fa38:	2b00      	cmp	r3, #0
 801fa3a:	d003      	beq.n	801fa44 <tcp_output+0xa4>
 801fa3c:	687b      	ldr	r3, [r7, #4]
 801fa3e:	681b      	ldr	r3, [r3, #0]
 801fa40:	2b00      	cmp	r3, #0
 801fa42:	d111      	bne.n	801fa68 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801fa44:	697b      	ldr	r3, [r7, #20]
 801fa46:	2b00      	cmp	r3, #0
 801fa48:	d002      	beq.n	801fa50 <tcp_output+0xb0>
 801fa4a:	697b      	ldr	r3, [r7, #20]
 801fa4c:	3304      	adds	r3, #4
 801fa4e:	e000      	b.n	801fa52 <tcp_output+0xb2>
 801fa50:	2300      	movs	r3, #0
 801fa52:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801fa54:	693b      	ldr	r3, [r7, #16]
 801fa56:	2b00      	cmp	r3, #0
 801fa58:	d102      	bne.n	801fa60 <tcp_output+0xc0>
      return ERR_RTE;
 801fa5a:	f06f 0303 	mvn.w	r3, #3
 801fa5e:	e18e      	b.n	801fd7e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801fa60:	693b      	ldr	r3, [r7, #16]
 801fa62:	681a      	ldr	r2, [r3, #0]
 801fa64:	687b      	ldr	r3, [r7, #4]
 801fa66:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801fa68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fa6a:	68db      	ldr	r3, [r3, #12]
 801fa6c:	685b      	ldr	r3, [r3, #4]
 801fa6e:	4618      	mov	r0, r3
 801fa70:	f7f8 ffe3 	bl	8018a3a <lwip_htonl>
 801fa74:	4602      	mov	r2, r0
 801fa76:	687b      	ldr	r3, [r7, #4]
 801fa78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801fa7a:	1ad3      	subs	r3, r2, r3
 801fa7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fa7e:	8912      	ldrh	r2, [r2, #8]
 801fa80:	4413      	add	r3, r2
 801fa82:	69ba      	ldr	r2, [r7, #24]
 801fa84:	429a      	cmp	r2, r3
 801fa86:	d227      	bcs.n	801fad8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801fa88:	687b      	ldr	r3, [r7, #4]
 801fa8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801fa8e:	461a      	mov	r2, r3
 801fa90:	69bb      	ldr	r3, [r7, #24]
 801fa92:	4293      	cmp	r3, r2
 801fa94:	d114      	bne.n	801fac0 <tcp_output+0x120>
 801fa96:	687b      	ldr	r3, [r7, #4]
 801fa98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fa9a:	2b00      	cmp	r3, #0
 801fa9c:	d110      	bne.n	801fac0 <tcp_output+0x120>
 801fa9e:	687b      	ldr	r3, [r7, #4]
 801faa0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801faa4:	2b00      	cmp	r3, #0
 801faa6:	d10b      	bne.n	801fac0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801faa8:	687b      	ldr	r3, [r7, #4]
 801faaa:	2200      	movs	r2, #0
 801faac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801fab0:	687b      	ldr	r3, [r7, #4]
 801fab2:	2201      	movs	r2, #1
 801fab4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801fab8:	687b      	ldr	r3, [r7, #4]
 801faba:	2200      	movs	r2, #0
 801fabc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801fac0:	687b      	ldr	r3, [r7, #4]
 801fac2:	8b5b      	ldrh	r3, [r3, #26]
 801fac4:	f003 0302 	and.w	r3, r3, #2
 801fac8:	2b00      	cmp	r3, #0
 801faca:	f000 814d 	beq.w	801fd68 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801face:	6878      	ldr	r0, [r7, #4]
 801fad0:	f000 fd6c 	bl	80205ac <tcp_send_empty_ack>
 801fad4:	4603      	mov	r3, r0
 801fad6:	e152      	b.n	801fd7e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801fad8:	687b      	ldr	r3, [r7, #4]
 801fada:	2200      	movs	r2, #0
 801fadc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801fae0:	687b      	ldr	r3, [r7, #4]
 801fae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fae4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801fae6:	6a3b      	ldr	r3, [r7, #32]
 801fae8:	2b00      	cmp	r3, #0
 801faea:	f000 811c 	beq.w	801fd26 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801faee:	e002      	b.n	801faf6 <tcp_output+0x156>
 801faf0:	6a3b      	ldr	r3, [r7, #32]
 801faf2:	681b      	ldr	r3, [r3, #0]
 801faf4:	623b      	str	r3, [r7, #32]
 801faf6:	6a3b      	ldr	r3, [r7, #32]
 801faf8:	681b      	ldr	r3, [r3, #0]
 801fafa:	2b00      	cmp	r3, #0
 801fafc:	d1f8      	bne.n	801faf0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801fafe:	e112      	b.n	801fd26 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801fb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fb02:	68db      	ldr	r3, [r3, #12]
 801fb04:	899b      	ldrh	r3, [r3, #12]
 801fb06:	b29b      	uxth	r3, r3
 801fb08:	4618      	mov	r0, r3
 801fb0a:	f7f8 ff81 	bl	8018a10 <lwip_htons>
 801fb0e:	4603      	mov	r3, r0
 801fb10:	b2db      	uxtb	r3, r3
 801fb12:	f003 0304 	and.w	r3, r3, #4
 801fb16:	2b00      	cmp	r3, #0
 801fb18:	d006      	beq.n	801fb28 <tcp_output+0x188>
 801fb1a:	4b2f      	ldr	r3, [pc, #188]	@ (801fbd8 <tcp_output+0x238>)
 801fb1c:	f240 5236 	movw	r2, #1334	@ 0x536
 801fb20:	4932      	ldr	r1, [pc, #200]	@ (801fbec <tcp_output+0x24c>)
 801fb22:	482f      	ldr	r0, [pc, #188]	@ (801fbe0 <tcp_output+0x240>)
 801fb24:	f005 fb9e 	bl	8025264 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801fb28:	687b      	ldr	r3, [r7, #4]
 801fb2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fb2c:	2b00      	cmp	r3, #0
 801fb2e:	d01f      	beq.n	801fb70 <tcp_output+0x1d0>
 801fb30:	687b      	ldr	r3, [r7, #4]
 801fb32:	8b5b      	ldrh	r3, [r3, #26]
 801fb34:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801fb38:	2b00      	cmp	r3, #0
 801fb3a:	d119      	bne.n	801fb70 <tcp_output+0x1d0>
 801fb3c:	687b      	ldr	r3, [r7, #4]
 801fb3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	d00b      	beq.n	801fb5c <tcp_output+0x1bc>
 801fb44:	687b      	ldr	r3, [r7, #4]
 801fb46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fb48:	681b      	ldr	r3, [r3, #0]
 801fb4a:	2b00      	cmp	r3, #0
 801fb4c:	d110      	bne.n	801fb70 <tcp_output+0x1d0>
 801fb4e:	687b      	ldr	r3, [r7, #4]
 801fb50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fb52:	891a      	ldrh	r2, [r3, #8]
 801fb54:	687b      	ldr	r3, [r7, #4]
 801fb56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801fb58:	429a      	cmp	r2, r3
 801fb5a:	d209      	bcs.n	801fb70 <tcp_output+0x1d0>
 801fb5c:	687b      	ldr	r3, [r7, #4]
 801fb5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801fb62:	2b00      	cmp	r3, #0
 801fb64:	d004      	beq.n	801fb70 <tcp_output+0x1d0>
 801fb66:	687b      	ldr	r3, [r7, #4]
 801fb68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801fb6c:	2b08      	cmp	r3, #8
 801fb6e:	d901      	bls.n	801fb74 <tcp_output+0x1d4>
 801fb70:	2301      	movs	r3, #1
 801fb72:	e000      	b.n	801fb76 <tcp_output+0x1d6>
 801fb74:	2300      	movs	r3, #0
 801fb76:	2b00      	cmp	r3, #0
 801fb78:	d106      	bne.n	801fb88 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801fb7a:	687b      	ldr	r3, [r7, #4]
 801fb7c:	8b5b      	ldrh	r3, [r3, #26]
 801fb7e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801fb82:	2b00      	cmp	r3, #0
 801fb84:	f000 80e4 	beq.w	801fd50 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801fb88:	687b      	ldr	r3, [r7, #4]
 801fb8a:	7d1b      	ldrb	r3, [r3, #20]
 801fb8c:	2b02      	cmp	r3, #2
 801fb8e:	d00d      	beq.n	801fbac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801fb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fb92:	68db      	ldr	r3, [r3, #12]
 801fb94:	899b      	ldrh	r3, [r3, #12]
 801fb96:	b29c      	uxth	r4, r3
 801fb98:	2010      	movs	r0, #16
 801fb9a:	f7f8 ff39 	bl	8018a10 <lwip_htons>
 801fb9e:	4603      	mov	r3, r0
 801fba0:	461a      	mov	r2, r3
 801fba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fba4:	68db      	ldr	r3, [r3, #12]
 801fba6:	4322      	orrs	r2, r4
 801fba8:	b292      	uxth	r2, r2
 801fbaa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801fbac:	697a      	ldr	r2, [r7, #20]
 801fbae:	6879      	ldr	r1, [r7, #4]
 801fbb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801fbb2:	f000 f909 	bl	801fdc8 <tcp_output_segment>
 801fbb6:	4603      	mov	r3, r0
 801fbb8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801fbba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801fbbe:	2b00      	cmp	r3, #0
 801fbc0:	d016      	beq.n	801fbf0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801fbc2:	687b      	ldr	r3, [r7, #4]
 801fbc4:	8b5b      	ldrh	r3, [r3, #26]
 801fbc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fbca:	b29a      	uxth	r2, r3
 801fbcc:	687b      	ldr	r3, [r7, #4]
 801fbce:	835a      	strh	r2, [r3, #26]
      return err;
 801fbd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801fbd4:	e0d3      	b.n	801fd7e <tcp_output+0x3de>
 801fbd6:	bf00      	nop
 801fbd8:	0802b9cc 	.word	0x0802b9cc
 801fbdc:	0802bf10 	.word	0x0802bf10
 801fbe0:	0802ba20 	.word	0x0802ba20
 801fbe4:	0802bf28 	.word	0x0802bf28
 801fbe8:	2400be98 	.word	0x2400be98
 801fbec:	0802bf50 	.word	0x0802bf50
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801fbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fbf2:	681a      	ldr	r2, [r3, #0]
 801fbf4:	687b      	ldr	r3, [r7, #4]
 801fbf6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801fbf8:	687b      	ldr	r3, [r7, #4]
 801fbfa:	7d1b      	ldrb	r3, [r3, #20]
 801fbfc:	2b02      	cmp	r3, #2
 801fbfe:	d006      	beq.n	801fc0e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801fc00:	687b      	ldr	r3, [r7, #4]
 801fc02:	8b5b      	ldrh	r3, [r3, #26]
 801fc04:	f023 0303 	bic.w	r3, r3, #3
 801fc08:	b29a      	uxth	r2, r3
 801fc0a:	687b      	ldr	r3, [r7, #4]
 801fc0c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801fc0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fc10:	68db      	ldr	r3, [r3, #12]
 801fc12:	685b      	ldr	r3, [r3, #4]
 801fc14:	4618      	mov	r0, r3
 801fc16:	f7f8 ff10 	bl	8018a3a <lwip_htonl>
 801fc1a:	4604      	mov	r4, r0
 801fc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fc1e:	891b      	ldrh	r3, [r3, #8]
 801fc20:	461d      	mov	r5, r3
 801fc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fc24:	68db      	ldr	r3, [r3, #12]
 801fc26:	899b      	ldrh	r3, [r3, #12]
 801fc28:	b29b      	uxth	r3, r3
 801fc2a:	4618      	mov	r0, r3
 801fc2c:	f7f8 fef0 	bl	8018a10 <lwip_htons>
 801fc30:	4603      	mov	r3, r0
 801fc32:	b2db      	uxtb	r3, r3
 801fc34:	f003 0303 	and.w	r3, r3, #3
 801fc38:	2b00      	cmp	r3, #0
 801fc3a:	d001      	beq.n	801fc40 <tcp_output+0x2a0>
 801fc3c:	2301      	movs	r3, #1
 801fc3e:	e000      	b.n	801fc42 <tcp_output+0x2a2>
 801fc40:	2300      	movs	r3, #0
 801fc42:	442b      	add	r3, r5
 801fc44:	4423      	add	r3, r4
 801fc46:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801fc48:	687b      	ldr	r3, [r7, #4]
 801fc4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801fc4c:	68bb      	ldr	r3, [r7, #8]
 801fc4e:	1ad3      	subs	r3, r2, r3
 801fc50:	2b00      	cmp	r3, #0
 801fc52:	da02      	bge.n	801fc5a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801fc54:	687b      	ldr	r3, [r7, #4]
 801fc56:	68ba      	ldr	r2, [r7, #8]
 801fc58:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801fc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fc5c:	891b      	ldrh	r3, [r3, #8]
 801fc5e:	461c      	mov	r4, r3
 801fc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fc62:	68db      	ldr	r3, [r3, #12]
 801fc64:	899b      	ldrh	r3, [r3, #12]
 801fc66:	b29b      	uxth	r3, r3
 801fc68:	4618      	mov	r0, r3
 801fc6a:	f7f8 fed1 	bl	8018a10 <lwip_htons>
 801fc6e:	4603      	mov	r3, r0
 801fc70:	b2db      	uxtb	r3, r3
 801fc72:	f003 0303 	and.w	r3, r3, #3
 801fc76:	2b00      	cmp	r3, #0
 801fc78:	d001      	beq.n	801fc7e <tcp_output+0x2de>
 801fc7a:	2301      	movs	r3, #1
 801fc7c:	e000      	b.n	801fc80 <tcp_output+0x2e0>
 801fc7e:	2300      	movs	r3, #0
 801fc80:	4423      	add	r3, r4
 801fc82:	2b00      	cmp	r3, #0
 801fc84:	d049      	beq.n	801fd1a <tcp_output+0x37a>
      seg->next = NULL;
 801fc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fc88:	2200      	movs	r2, #0
 801fc8a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801fc8c:	687b      	ldr	r3, [r7, #4]
 801fc8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fc90:	2b00      	cmp	r3, #0
 801fc92:	d105      	bne.n	801fca0 <tcp_output+0x300>
        pcb->unacked = seg;
 801fc94:	687b      	ldr	r3, [r7, #4]
 801fc96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fc98:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801fc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fc9c:	623b      	str	r3, [r7, #32]
 801fc9e:	e03f      	b.n	801fd20 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801fca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fca2:	68db      	ldr	r3, [r3, #12]
 801fca4:	685b      	ldr	r3, [r3, #4]
 801fca6:	4618      	mov	r0, r3
 801fca8:	f7f8 fec7 	bl	8018a3a <lwip_htonl>
 801fcac:	4604      	mov	r4, r0
 801fcae:	6a3b      	ldr	r3, [r7, #32]
 801fcb0:	68db      	ldr	r3, [r3, #12]
 801fcb2:	685b      	ldr	r3, [r3, #4]
 801fcb4:	4618      	mov	r0, r3
 801fcb6:	f7f8 fec0 	bl	8018a3a <lwip_htonl>
 801fcba:	4603      	mov	r3, r0
 801fcbc:	1ae3      	subs	r3, r4, r3
 801fcbe:	2b00      	cmp	r3, #0
 801fcc0:	da24      	bge.n	801fd0c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801fcc2:	687b      	ldr	r3, [r7, #4]
 801fcc4:	3370      	adds	r3, #112	@ 0x70
 801fcc6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801fcc8:	e002      	b.n	801fcd0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801fcca:	69fb      	ldr	r3, [r7, #28]
 801fccc:	681b      	ldr	r3, [r3, #0]
 801fcce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801fcd0:	69fb      	ldr	r3, [r7, #28]
 801fcd2:	681b      	ldr	r3, [r3, #0]
 801fcd4:	2b00      	cmp	r3, #0
 801fcd6:	d011      	beq.n	801fcfc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801fcd8:	69fb      	ldr	r3, [r7, #28]
 801fcda:	681b      	ldr	r3, [r3, #0]
 801fcdc:	68db      	ldr	r3, [r3, #12]
 801fcde:	685b      	ldr	r3, [r3, #4]
 801fce0:	4618      	mov	r0, r3
 801fce2:	f7f8 feaa 	bl	8018a3a <lwip_htonl>
 801fce6:	4604      	mov	r4, r0
 801fce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fcea:	68db      	ldr	r3, [r3, #12]
 801fcec:	685b      	ldr	r3, [r3, #4]
 801fcee:	4618      	mov	r0, r3
 801fcf0:	f7f8 fea3 	bl	8018a3a <lwip_htonl>
 801fcf4:	4603      	mov	r3, r0
 801fcf6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801fcf8:	2b00      	cmp	r3, #0
 801fcfa:	dbe6      	blt.n	801fcca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801fcfc:	69fb      	ldr	r3, [r7, #28]
 801fcfe:	681a      	ldr	r2, [r3, #0]
 801fd00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd02:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801fd04:	69fb      	ldr	r3, [r7, #28]
 801fd06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fd08:	601a      	str	r2, [r3, #0]
 801fd0a:	e009      	b.n	801fd20 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801fd0c:	6a3b      	ldr	r3, [r7, #32]
 801fd0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fd10:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801fd12:	6a3b      	ldr	r3, [r7, #32]
 801fd14:	681b      	ldr	r3, [r3, #0]
 801fd16:	623b      	str	r3, [r7, #32]
 801fd18:	e002      	b.n	801fd20 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801fd1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801fd1c:	f7fb ff1f 	bl	801bb5e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fd24:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801fd26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd28:	2b00      	cmp	r3, #0
 801fd2a:	d012      	beq.n	801fd52 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801fd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd2e:	68db      	ldr	r3, [r3, #12]
 801fd30:	685b      	ldr	r3, [r3, #4]
 801fd32:	4618      	mov	r0, r3
 801fd34:	f7f8 fe81 	bl	8018a3a <lwip_htonl>
 801fd38:	4602      	mov	r2, r0
 801fd3a:	687b      	ldr	r3, [r7, #4]
 801fd3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801fd3e:	1ad3      	subs	r3, r2, r3
 801fd40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fd42:	8912      	ldrh	r2, [r2, #8]
 801fd44:	4413      	add	r3, r2
  while (seg != NULL &&
 801fd46:	69ba      	ldr	r2, [r7, #24]
 801fd48:	429a      	cmp	r2, r3
 801fd4a:	f4bf aed9 	bcs.w	801fb00 <tcp_output+0x160>
 801fd4e:	e000      	b.n	801fd52 <tcp_output+0x3b2>
      break;
 801fd50:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801fd52:	687b      	ldr	r3, [r7, #4]
 801fd54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fd56:	2b00      	cmp	r3, #0
 801fd58:	d108      	bne.n	801fd6c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801fd5a:	687b      	ldr	r3, [r7, #4]
 801fd5c:	2200      	movs	r2, #0
 801fd5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801fd62:	e004      	b.n	801fd6e <tcp_output+0x3ce>
    goto output_done;
 801fd64:	bf00      	nop
 801fd66:	e002      	b.n	801fd6e <tcp_output+0x3ce>
    goto output_done;
 801fd68:	bf00      	nop
 801fd6a:	e000      	b.n	801fd6e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801fd6c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801fd6e:	687b      	ldr	r3, [r7, #4]
 801fd70:	8b5b      	ldrh	r3, [r3, #26]
 801fd72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801fd76:	b29a      	uxth	r2, r3
 801fd78:	687b      	ldr	r3, [r7, #4]
 801fd7a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801fd7c:	2300      	movs	r3, #0
}
 801fd7e:	4618      	mov	r0, r3
 801fd80:	3728      	adds	r7, #40	@ 0x28
 801fd82:	46bd      	mov	sp, r7
 801fd84:	bdb0      	pop	{r4, r5, r7, pc}
 801fd86:	bf00      	nop

0801fd88 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801fd88:	b580      	push	{r7, lr}
 801fd8a:	b082      	sub	sp, #8
 801fd8c:	af00      	add	r7, sp, #0
 801fd8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801fd90:	687b      	ldr	r3, [r7, #4]
 801fd92:	2b00      	cmp	r3, #0
 801fd94:	d106      	bne.n	801fda4 <tcp_output_segment_busy+0x1c>
 801fd96:	4b09      	ldr	r3, [pc, #36]	@ (801fdbc <tcp_output_segment_busy+0x34>)
 801fd98:	f240 529a 	movw	r2, #1434	@ 0x59a
 801fd9c:	4908      	ldr	r1, [pc, #32]	@ (801fdc0 <tcp_output_segment_busy+0x38>)
 801fd9e:	4809      	ldr	r0, [pc, #36]	@ (801fdc4 <tcp_output_segment_busy+0x3c>)
 801fda0:	f005 fa60 	bl	8025264 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801fda4:	687b      	ldr	r3, [r7, #4]
 801fda6:	685b      	ldr	r3, [r3, #4]
 801fda8:	7b9b      	ldrb	r3, [r3, #14]
 801fdaa:	2b01      	cmp	r3, #1
 801fdac:	d001      	beq.n	801fdb2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801fdae:	2301      	movs	r3, #1
 801fdb0:	e000      	b.n	801fdb4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801fdb2:	2300      	movs	r3, #0
}
 801fdb4:	4618      	mov	r0, r3
 801fdb6:	3708      	adds	r7, #8
 801fdb8:	46bd      	mov	sp, r7
 801fdba:	bd80      	pop	{r7, pc}
 801fdbc:	0802b9cc 	.word	0x0802b9cc
 801fdc0:	0802bf68 	.word	0x0802bf68
 801fdc4:	0802ba20 	.word	0x0802ba20

0801fdc8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801fdc8:	b5b0      	push	{r4, r5, r7, lr}
 801fdca:	b08c      	sub	sp, #48	@ 0x30
 801fdcc:	af04      	add	r7, sp, #16
 801fdce:	60f8      	str	r0, [r7, #12]
 801fdd0:	60b9      	str	r1, [r7, #8]
 801fdd2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801fdd4:	68fb      	ldr	r3, [r7, #12]
 801fdd6:	2b00      	cmp	r3, #0
 801fdd8:	d106      	bne.n	801fde8 <tcp_output_segment+0x20>
 801fdda:	4b64      	ldr	r3, [pc, #400]	@ (801ff6c <tcp_output_segment+0x1a4>)
 801fddc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801fde0:	4963      	ldr	r1, [pc, #396]	@ (801ff70 <tcp_output_segment+0x1a8>)
 801fde2:	4864      	ldr	r0, [pc, #400]	@ (801ff74 <tcp_output_segment+0x1ac>)
 801fde4:	f005 fa3e 	bl	8025264 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801fde8:	68bb      	ldr	r3, [r7, #8]
 801fdea:	2b00      	cmp	r3, #0
 801fdec:	d106      	bne.n	801fdfc <tcp_output_segment+0x34>
 801fdee:	4b5f      	ldr	r3, [pc, #380]	@ (801ff6c <tcp_output_segment+0x1a4>)
 801fdf0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801fdf4:	4960      	ldr	r1, [pc, #384]	@ (801ff78 <tcp_output_segment+0x1b0>)
 801fdf6:	485f      	ldr	r0, [pc, #380]	@ (801ff74 <tcp_output_segment+0x1ac>)
 801fdf8:	f005 fa34 	bl	8025264 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801fdfc:	687b      	ldr	r3, [r7, #4]
 801fdfe:	2b00      	cmp	r3, #0
 801fe00:	d106      	bne.n	801fe10 <tcp_output_segment+0x48>
 801fe02:	4b5a      	ldr	r3, [pc, #360]	@ (801ff6c <tcp_output_segment+0x1a4>)
 801fe04:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801fe08:	495c      	ldr	r1, [pc, #368]	@ (801ff7c <tcp_output_segment+0x1b4>)
 801fe0a:	485a      	ldr	r0, [pc, #360]	@ (801ff74 <tcp_output_segment+0x1ac>)
 801fe0c:	f005 fa2a 	bl	8025264 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801fe10:	68f8      	ldr	r0, [r7, #12]
 801fe12:	f7ff ffb9 	bl	801fd88 <tcp_output_segment_busy>
 801fe16:	4603      	mov	r3, r0
 801fe18:	2b00      	cmp	r3, #0
 801fe1a:	d001      	beq.n	801fe20 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801fe1c:	2300      	movs	r3, #0
 801fe1e:	e0a1      	b.n	801ff64 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801fe20:	68bb      	ldr	r3, [r7, #8]
 801fe22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801fe24:	68fb      	ldr	r3, [r7, #12]
 801fe26:	68dc      	ldr	r4, [r3, #12]
 801fe28:	4610      	mov	r0, r2
 801fe2a:	f7f8 fe06 	bl	8018a3a <lwip_htonl>
 801fe2e:	4603      	mov	r3, r0
 801fe30:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801fe32:	68bb      	ldr	r3, [r7, #8]
 801fe34:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801fe36:	68fb      	ldr	r3, [r7, #12]
 801fe38:	68dc      	ldr	r4, [r3, #12]
 801fe3a:	4610      	mov	r0, r2
 801fe3c:	f7f8 fde8 	bl	8018a10 <lwip_htons>
 801fe40:	4603      	mov	r3, r0
 801fe42:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801fe44:	68bb      	ldr	r3, [r7, #8]
 801fe46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fe48:	68ba      	ldr	r2, [r7, #8]
 801fe4a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801fe4c:	441a      	add	r2, r3
 801fe4e:	68bb      	ldr	r3, [r7, #8]
 801fe50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801fe52:	68fb      	ldr	r3, [r7, #12]
 801fe54:	68db      	ldr	r3, [r3, #12]
 801fe56:	3314      	adds	r3, #20
 801fe58:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801fe5a:	68fb      	ldr	r3, [r7, #12]
 801fe5c:	7a9b      	ldrb	r3, [r3, #10]
 801fe5e:	f003 0301 	and.w	r3, r3, #1
 801fe62:	2b00      	cmp	r3, #0
 801fe64:	d015      	beq.n	801fe92 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801fe66:	68bb      	ldr	r3, [r7, #8]
 801fe68:	3304      	adds	r3, #4
 801fe6a:	461a      	mov	r2, r3
 801fe6c:	6879      	ldr	r1, [r7, #4]
 801fe6e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801fe72:	f7fc fa39 	bl	801c2e8 <tcp_eff_send_mss_netif>
 801fe76:	4603      	mov	r3, r0
 801fe78:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801fe7a:	8b7b      	ldrh	r3, [r7, #26]
 801fe7c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801fe80:	4618      	mov	r0, r3
 801fe82:	f7f8 fdda 	bl	8018a3a <lwip_htonl>
 801fe86:	4602      	mov	r2, r0
 801fe88:	69fb      	ldr	r3, [r7, #28]
 801fe8a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801fe8c:	69fb      	ldr	r3, [r7, #28]
 801fe8e:	3304      	adds	r3, #4
 801fe90:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801fe92:	68bb      	ldr	r3, [r7, #8]
 801fe94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801fe98:	2b00      	cmp	r3, #0
 801fe9a:	da02      	bge.n	801fea2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801fe9c:	68bb      	ldr	r3, [r7, #8]
 801fe9e:	2200      	movs	r2, #0
 801fea0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801fea2:	68bb      	ldr	r3, [r7, #8]
 801fea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fea6:	2b00      	cmp	r3, #0
 801fea8:	d10c      	bne.n	801fec4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801feaa:	4b35      	ldr	r3, [pc, #212]	@ (801ff80 <tcp_output_segment+0x1b8>)
 801feac:	681a      	ldr	r2, [r3, #0]
 801feae:	68bb      	ldr	r3, [r7, #8]
 801feb0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801feb2:	68fb      	ldr	r3, [r7, #12]
 801feb4:	68db      	ldr	r3, [r3, #12]
 801feb6:	685b      	ldr	r3, [r3, #4]
 801feb8:	4618      	mov	r0, r3
 801feba:	f7f8 fdbe 	bl	8018a3a <lwip_htonl>
 801febe:	4602      	mov	r2, r0
 801fec0:	68bb      	ldr	r3, [r7, #8]
 801fec2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801fec4:	68fb      	ldr	r3, [r7, #12]
 801fec6:	68da      	ldr	r2, [r3, #12]
 801fec8:	68fb      	ldr	r3, [r7, #12]
 801feca:	685b      	ldr	r3, [r3, #4]
 801fecc:	685b      	ldr	r3, [r3, #4]
 801fece:	1ad3      	subs	r3, r2, r3
 801fed0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801fed2:	68fb      	ldr	r3, [r7, #12]
 801fed4:	685b      	ldr	r3, [r3, #4]
 801fed6:	8959      	ldrh	r1, [r3, #10]
 801fed8:	68fb      	ldr	r3, [r7, #12]
 801feda:	685b      	ldr	r3, [r3, #4]
 801fedc:	8b3a      	ldrh	r2, [r7, #24]
 801fede:	1a8a      	subs	r2, r1, r2
 801fee0:	b292      	uxth	r2, r2
 801fee2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801fee4:	68fb      	ldr	r3, [r7, #12]
 801fee6:	685b      	ldr	r3, [r3, #4]
 801fee8:	8919      	ldrh	r1, [r3, #8]
 801feea:	68fb      	ldr	r3, [r7, #12]
 801feec:	685b      	ldr	r3, [r3, #4]
 801feee:	8b3a      	ldrh	r2, [r7, #24]
 801fef0:	1a8a      	subs	r2, r1, r2
 801fef2:	b292      	uxth	r2, r2
 801fef4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801fef6:	68fb      	ldr	r3, [r7, #12]
 801fef8:	685b      	ldr	r3, [r3, #4]
 801fefa:	68fa      	ldr	r2, [r7, #12]
 801fefc:	68d2      	ldr	r2, [r2, #12]
 801fefe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801ff00:	68fb      	ldr	r3, [r7, #12]
 801ff02:	68db      	ldr	r3, [r3, #12]
 801ff04:	2200      	movs	r2, #0
 801ff06:	741a      	strb	r2, [r3, #16]
 801ff08:	2200      	movs	r2, #0
 801ff0a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801ff0c:	68fb      	ldr	r3, [r7, #12]
 801ff0e:	68da      	ldr	r2, [r3, #12]
 801ff10:	68fb      	ldr	r3, [r7, #12]
 801ff12:	7a9b      	ldrb	r3, [r3, #10]
 801ff14:	f003 0301 	and.w	r3, r3, #1
 801ff18:	2b00      	cmp	r3, #0
 801ff1a:	d001      	beq.n	801ff20 <tcp_output_segment+0x158>
 801ff1c:	2318      	movs	r3, #24
 801ff1e:	e000      	b.n	801ff22 <tcp_output_segment+0x15a>
 801ff20:	2314      	movs	r3, #20
 801ff22:	4413      	add	r3, r2
 801ff24:	69fa      	ldr	r2, [r7, #28]
 801ff26:	429a      	cmp	r2, r3
 801ff28:	d006      	beq.n	801ff38 <tcp_output_segment+0x170>
 801ff2a:	4b10      	ldr	r3, [pc, #64]	@ (801ff6c <tcp_output_segment+0x1a4>)
 801ff2c:	f240 621c 	movw	r2, #1564	@ 0x61c
 801ff30:	4914      	ldr	r1, [pc, #80]	@ (801ff84 <tcp_output_segment+0x1bc>)
 801ff32:	4810      	ldr	r0, [pc, #64]	@ (801ff74 <tcp_output_segment+0x1ac>)
 801ff34:	f005 f996 	bl	8025264 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801ff38:	68fb      	ldr	r3, [r7, #12]
 801ff3a:	6858      	ldr	r0, [r3, #4]
 801ff3c:	68b9      	ldr	r1, [r7, #8]
 801ff3e:	68bb      	ldr	r3, [r7, #8]
 801ff40:	1d1c      	adds	r4, r3, #4
 801ff42:	68bb      	ldr	r3, [r7, #8]
 801ff44:	7add      	ldrb	r5, [r3, #11]
 801ff46:	68bb      	ldr	r3, [r7, #8]
 801ff48:	7a9b      	ldrb	r3, [r3, #10]
 801ff4a:	687a      	ldr	r2, [r7, #4]
 801ff4c:	9202      	str	r2, [sp, #8]
 801ff4e:	2206      	movs	r2, #6
 801ff50:	9201      	str	r2, [sp, #4]
 801ff52:	9300      	str	r3, [sp, #0]
 801ff54:	462b      	mov	r3, r5
 801ff56:	4622      	mov	r2, r4
 801ff58:	f002 fdba 	bl	8022ad0 <ip4_output_if>
 801ff5c:	4603      	mov	r3, r0
 801ff5e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801ff60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ff64:	4618      	mov	r0, r3
 801ff66:	3720      	adds	r7, #32
 801ff68:	46bd      	mov	sp, r7
 801ff6a:	bdb0      	pop	{r4, r5, r7, pc}
 801ff6c:	0802b9cc 	.word	0x0802b9cc
 801ff70:	0802bf90 	.word	0x0802bf90
 801ff74:	0802ba20 	.word	0x0802ba20
 801ff78:	0802bfb0 	.word	0x0802bfb0
 801ff7c:	0802bfd0 	.word	0x0802bfd0
 801ff80:	2400be4c 	.word	0x2400be4c
 801ff84:	0802bff4 	.word	0x0802bff4

0801ff88 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801ff88:	b5b0      	push	{r4, r5, r7, lr}
 801ff8a:	b084      	sub	sp, #16
 801ff8c:	af00      	add	r7, sp, #0
 801ff8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801ff90:	687b      	ldr	r3, [r7, #4]
 801ff92:	2b00      	cmp	r3, #0
 801ff94:	d106      	bne.n	801ffa4 <tcp_rexmit_rto_prepare+0x1c>
 801ff96:	4b31      	ldr	r3, [pc, #196]	@ (802005c <tcp_rexmit_rto_prepare+0xd4>)
 801ff98:	f240 6263 	movw	r2, #1635	@ 0x663
 801ff9c:	4930      	ldr	r1, [pc, #192]	@ (8020060 <tcp_rexmit_rto_prepare+0xd8>)
 801ff9e:	4831      	ldr	r0, [pc, #196]	@ (8020064 <tcp_rexmit_rto_prepare+0xdc>)
 801ffa0:	f005 f960 	bl	8025264 <iprintf>

  if (pcb->unacked == NULL) {
 801ffa4:	687b      	ldr	r3, [r7, #4]
 801ffa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ffa8:	2b00      	cmp	r3, #0
 801ffaa:	d102      	bne.n	801ffb2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801ffac:	f06f 0305 	mvn.w	r3, #5
 801ffb0:	e050      	b.n	8020054 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ffb2:	687b      	ldr	r3, [r7, #4]
 801ffb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ffb6:	60fb      	str	r3, [r7, #12]
 801ffb8:	e00b      	b.n	801ffd2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801ffba:	68f8      	ldr	r0, [r7, #12]
 801ffbc:	f7ff fee4 	bl	801fd88 <tcp_output_segment_busy>
 801ffc0:	4603      	mov	r3, r0
 801ffc2:	2b00      	cmp	r3, #0
 801ffc4:	d002      	beq.n	801ffcc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801ffc6:	f06f 0305 	mvn.w	r3, #5
 801ffca:	e043      	b.n	8020054 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ffcc:	68fb      	ldr	r3, [r7, #12]
 801ffce:	681b      	ldr	r3, [r3, #0]
 801ffd0:	60fb      	str	r3, [r7, #12]
 801ffd2:	68fb      	ldr	r3, [r7, #12]
 801ffd4:	681b      	ldr	r3, [r3, #0]
 801ffd6:	2b00      	cmp	r3, #0
 801ffd8:	d1ef      	bne.n	801ffba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801ffda:	68f8      	ldr	r0, [r7, #12]
 801ffdc:	f7ff fed4 	bl	801fd88 <tcp_output_segment_busy>
 801ffe0:	4603      	mov	r3, r0
 801ffe2:	2b00      	cmp	r3, #0
 801ffe4:	d002      	beq.n	801ffec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801ffe6:	f06f 0305 	mvn.w	r3, #5
 801ffea:	e033      	b.n	8020054 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801ffec:	687b      	ldr	r3, [r7, #4]
 801ffee:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801fff0:	68fb      	ldr	r3, [r7, #12]
 801fff2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801fff4:	687b      	ldr	r3, [r7, #4]
 801fff6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801fff8:	687b      	ldr	r3, [r7, #4]
 801fffa:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801fffc:	687b      	ldr	r3, [r7, #4]
 801fffe:	2200      	movs	r2, #0
 8020000:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8020002:	687b      	ldr	r3, [r7, #4]
 8020004:	8b5b      	ldrh	r3, [r3, #26]
 8020006:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 802000a:	b29a      	uxth	r2, r3
 802000c:	687b      	ldr	r3, [r7, #4]
 802000e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020010:	68fb      	ldr	r3, [r7, #12]
 8020012:	68db      	ldr	r3, [r3, #12]
 8020014:	685b      	ldr	r3, [r3, #4]
 8020016:	4618      	mov	r0, r3
 8020018:	f7f8 fd0f 	bl	8018a3a <lwip_htonl>
 802001c:	4604      	mov	r4, r0
 802001e:	68fb      	ldr	r3, [r7, #12]
 8020020:	891b      	ldrh	r3, [r3, #8]
 8020022:	461d      	mov	r5, r3
 8020024:	68fb      	ldr	r3, [r7, #12]
 8020026:	68db      	ldr	r3, [r3, #12]
 8020028:	899b      	ldrh	r3, [r3, #12]
 802002a:	b29b      	uxth	r3, r3
 802002c:	4618      	mov	r0, r3
 802002e:	f7f8 fcef 	bl	8018a10 <lwip_htons>
 8020032:	4603      	mov	r3, r0
 8020034:	b2db      	uxtb	r3, r3
 8020036:	f003 0303 	and.w	r3, r3, #3
 802003a:	2b00      	cmp	r3, #0
 802003c:	d001      	beq.n	8020042 <tcp_rexmit_rto_prepare+0xba>
 802003e:	2301      	movs	r3, #1
 8020040:	e000      	b.n	8020044 <tcp_rexmit_rto_prepare+0xbc>
 8020042:	2300      	movs	r3, #0
 8020044:	442b      	add	r3, r5
 8020046:	18e2      	adds	r2, r4, r3
 8020048:	687b      	ldr	r3, [r7, #4]
 802004a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 802004c:	687b      	ldr	r3, [r7, #4]
 802004e:	2200      	movs	r2, #0
 8020050:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8020052:	2300      	movs	r3, #0
}
 8020054:	4618      	mov	r0, r3
 8020056:	3710      	adds	r7, #16
 8020058:	46bd      	mov	sp, r7
 802005a:	bdb0      	pop	{r4, r5, r7, pc}
 802005c:	0802b9cc 	.word	0x0802b9cc
 8020060:	0802c008 	.word	0x0802c008
 8020064:	0802ba20 	.word	0x0802ba20

08020068 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8020068:	b580      	push	{r7, lr}
 802006a:	b082      	sub	sp, #8
 802006c:	af00      	add	r7, sp, #0
 802006e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8020070:	687b      	ldr	r3, [r7, #4]
 8020072:	2b00      	cmp	r3, #0
 8020074:	d106      	bne.n	8020084 <tcp_rexmit_rto_commit+0x1c>
 8020076:	4b0d      	ldr	r3, [pc, #52]	@ (80200ac <tcp_rexmit_rto_commit+0x44>)
 8020078:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 802007c:	490c      	ldr	r1, [pc, #48]	@ (80200b0 <tcp_rexmit_rto_commit+0x48>)
 802007e:	480d      	ldr	r0, [pc, #52]	@ (80200b4 <tcp_rexmit_rto_commit+0x4c>)
 8020080:	f005 f8f0 	bl	8025264 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8020084:	687b      	ldr	r3, [r7, #4]
 8020086:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 802008a:	2bff      	cmp	r3, #255	@ 0xff
 802008c:	d007      	beq.n	802009e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 802008e:	687b      	ldr	r3, [r7, #4]
 8020090:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8020094:	3301      	adds	r3, #1
 8020096:	b2da      	uxtb	r2, r3
 8020098:	687b      	ldr	r3, [r7, #4]
 802009a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 802009e:	6878      	ldr	r0, [r7, #4]
 80200a0:	f7ff fc7e 	bl	801f9a0 <tcp_output>
}
 80200a4:	bf00      	nop
 80200a6:	3708      	adds	r7, #8
 80200a8:	46bd      	mov	sp, r7
 80200aa:	bd80      	pop	{r7, pc}
 80200ac:	0802b9cc 	.word	0x0802b9cc
 80200b0:	0802c02c 	.word	0x0802c02c
 80200b4:	0802ba20 	.word	0x0802ba20

080200b8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80200b8:	b580      	push	{r7, lr}
 80200ba:	b082      	sub	sp, #8
 80200bc:	af00      	add	r7, sp, #0
 80200be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80200c0:	687b      	ldr	r3, [r7, #4]
 80200c2:	2b00      	cmp	r3, #0
 80200c4:	d106      	bne.n	80200d4 <tcp_rexmit_rto+0x1c>
 80200c6:	4b0a      	ldr	r3, [pc, #40]	@ (80200f0 <tcp_rexmit_rto+0x38>)
 80200c8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80200cc:	4909      	ldr	r1, [pc, #36]	@ (80200f4 <tcp_rexmit_rto+0x3c>)
 80200ce:	480a      	ldr	r0, [pc, #40]	@ (80200f8 <tcp_rexmit_rto+0x40>)
 80200d0:	f005 f8c8 	bl	8025264 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80200d4:	6878      	ldr	r0, [r7, #4]
 80200d6:	f7ff ff57 	bl	801ff88 <tcp_rexmit_rto_prepare>
 80200da:	4603      	mov	r3, r0
 80200dc:	2b00      	cmp	r3, #0
 80200de:	d102      	bne.n	80200e6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80200e0:	6878      	ldr	r0, [r7, #4]
 80200e2:	f7ff ffc1 	bl	8020068 <tcp_rexmit_rto_commit>
  }
}
 80200e6:	bf00      	nop
 80200e8:	3708      	adds	r7, #8
 80200ea:	46bd      	mov	sp, r7
 80200ec:	bd80      	pop	{r7, pc}
 80200ee:	bf00      	nop
 80200f0:	0802b9cc 	.word	0x0802b9cc
 80200f4:	0802c050 	.word	0x0802c050
 80200f8:	0802ba20 	.word	0x0802ba20

080200fc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80200fc:	b590      	push	{r4, r7, lr}
 80200fe:	b085      	sub	sp, #20
 8020100:	af00      	add	r7, sp, #0
 8020102:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8020104:	687b      	ldr	r3, [r7, #4]
 8020106:	2b00      	cmp	r3, #0
 8020108:	d106      	bne.n	8020118 <tcp_rexmit+0x1c>
 802010a:	4b2f      	ldr	r3, [pc, #188]	@ (80201c8 <tcp_rexmit+0xcc>)
 802010c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8020110:	492e      	ldr	r1, [pc, #184]	@ (80201cc <tcp_rexmit+0xd0>)
 8020112:	482f      	ldr	r0, [pc, #188]	@ (80201d0 <tcp_rexmit+0xd4>)
 8020114:	f005 f8a6 	bl	8025264 <iprintf>

  if (pcb->unacked == NULL) {
 8020118:	687b      	ldr	r3, [r7, #4]
 802011a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802011c:	2b00      	cmp	r3, #0
 802011e:	d102      	bne.n	8020126 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8020120:	f06f 0305 	mvn.w	r3, #5
 8020124:	e04c      	b.n	80201c0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8020126:	687b      	ldr	r3, [r7, #4]
 8020128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802012a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 802012c:	68b8      	ldr	r0, [r7, #8]
 802012e:	f7ff fe2b 	bl	801fd88 <tcp_output_segment_busy>
 8020132:	4603      	mov	r3, r0
 8020134:	2b00      	cmp	r3, #0
 8020136:	d002      	beq.n	802013e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8020138:	f06f 0305 	mvn.w	r3, #5
 802013c:	e040      	b.n	80201c0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 802013e:	68bb      	ldr	r3, [r7, #8]
 8020140:	681a      	ldr	r2, [r3, #0]
 8020142:	687b      	ldr	r3, [r7, #4]
 8020144:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8020146:	687b      	ldr	r3, [r7, #4]
 8020148:	336c      	adds	r3, #108	@ 0x6c
 802014a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 802014c:	e002      	b.n	8020154 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 802014e:	68fb      	ldr	r3, [r7, #12]
 8020150:	681b      	ldr	r3, [r3, #0]
 8020152:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8020154:	68fb      	ldr	r3, [r7, #12]
 8020156:	681b      	ldr	r3, [r3, #0]
 8020158:	2b00      	cmp	r3, #0
 802015a:	d011      	beq.n	8020180 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 802015c:	68fb      	ldr	r3, [r7, #12]
 802015e:	681b      	ldr	r3, [r3, #0]
 8020160:	68db      	ldr	r3, [r3, #12]
 8020162:	685b      	ldr	r3, [r3, #4]
 8020164:	4618      	mov	r0, r3
 8020166:	f7f8 fc68 	bl	8018a3a <lwip_htonl>
 802016a:	4604      	mov	r4, r0
 802016c:	68bb      	ldr	r3, [r7, #8]
 802016e:	68db      	ldr	r3, [r3, #12]
 8020170:	685b      	ldr	r3, [r3, #4]
 8020172:	4618      	mov	r0, r3
 8020174:	f7f8 fc61 	bl	8018a3a <lwip_htonl>
 8020178:	4603      	mov	r3, r0
 802017a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 802017c:	2b00      	cmp	r3, #0
 802017e:	dbe6      	blt.n	802014e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8020180:	68fb      	ldr	r3, [r7, #12]
 8020182:	681a      	ldr	r2, [r3, #0]
 8020184:	68bb      	ldr	r3, [r7, #8]
 8020186:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8020188:	68fb      	ldr	r3, [r7, #12]
 802018a:	68ba      	ldr	r2, [r7, #8]
 802018c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 802018e:	68bb      	ldr	r3, [r7, #8]
 8020190:	681b      	ldr	r3, [r3, #0]
 8020192:	2b00      	cmp	r3, #0
 8020194:	d103      	bne.n	802019e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8020196:	687b      	ldr	r3, [r7, #4]
 8020198:	2200      	movs	r2, #0
 802019a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 802019e:	687b      	ldr	r3, [r7, #4]
 80201a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80201a4:	2bff      	cmp	r3, #255	@ 0xff
 80201a6:	d007      	beq.n	80201b8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80201a8:	687b      	ldr	r3, [r7, #4]
 80201aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80201ae:	3301      	adds	r3, #1
 80201b0:	b2da      	uxtb	r2, r3
 80201b2:	687b      	ldr	r3, [r7, #4]
 80201b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80201b8:	687b      	ldr	r3, [r7, #4]
 80201ba:	2200      	movs	r2, #0
 80201bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80201be:	2300      	movs	r3, #0
}
 80201c0:	4618      	mov	r0, r3
 80201c2:	3714      	adds	r7, #20
 80201c4:	46bd      	mov	sp, r7
 80201c6:	bd90      	pop	{r4, r7, pc}
 80201c8:	0802b9cc 	.word	0x0802b9cc
 80201cc:	0802c06c 	.word	0x0802c06c
 80201d0:	0802ba20 	.word	0x0802ba20

080201d4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80201d4:	b580      	push	{r7, lr}
 80201d6:	b082      	sub	sp, #8
 80201d8:	af00      	add	r7, sp, #0
 80201da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80201dc:	687b      	ldr	r3, [r7, #4]
 80201de:	2b00      	cmp	r3, #0
 80201e0:	d106      	bne.n	80201f0 <tcp_rexmit_fast+0x1c>
 80201e2:	4b2a      	ldr	r3, [pc, #168]	@ (802028c <tcp_rexmit_fast+0xb8>)
 80201e4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80201e8:	4929      	ldr	r1, [pc, #164]	@ (8020290 <tcp_rexmit_fast+0xbc>)
 80201ea:	482a      	ldr	r0, [pc, #168]	@ (8020294 <tcp_rexmit_fast+0xc0>)
 80201ec:	f005 f83a 	bl	8025264 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80201f0:	687b      	ldr	r3, [r7, #4]
 80201f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80201f4:	2b00      	cmp	r3, #0
 80201f6:	d045      	beq.n	8020284 <tcp_rexmit_fast+0xb0>
 80201f8:	687b      	ldr	r3, [r7, #4]
 80201fa:	8b5b      	ldrh	r3, [r3, #26]
 80201fc:	f003 0304 	and.w	r3, r3, #4
 8020200:	2b00      	cmp	r3, #0
 8020202:	d13f      	bne.n	8020284 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8020204:	6878      	ldr	r0, [r7, #4]
 8020206:	f7ff ff79 	bl	80200fc <tcp_rexmit>
 802020a:	4603      	mov	r3, r0
 802020c:	2b00      	cmp	r3, #0
 802020e:	d139      	bne.n	8020284 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8020210:	687b      	ldr	r3, [r7, #4]
 8020212:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8020216:	687b      	ldr	r3, [r7, #4]
 8020218:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 802021c:	4293      	cmp	r3, r2
 802021e:	bf28      	it	cs
 8020220:	4613      	movcs	r3, r2
 8020222:	b29b      	uxth	r3, r3
 8020224:	2b00      	cmp	r3, #0
 8020226:	da00      	bge.n	802022a <tcp_rexmit_fast+0x56>
 8020228:	3301      	adds	r3, #1
 802022a:	105b      	asrs	r3, r3, #1
 802022c:	b29a      	uxth	r2, r3
 802022e:	687b      	ldr	r3, [r7, #4]
 8020230:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8020234:	687b      	ldr	r3, [r7, #4]
 8020236:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 802023a:	461a      	mov	r2, r3
 802023c:	687b      	ldr	r3, [r7, #4]
 802023e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020240:	005b      	lsls	r3, r3, #1
 8020242:	429a      	cmp	r2, r3
 8020244:	d206      	bcs.n	8020254 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8020246:	687b      	ldr	r3, [r7, #4]
 8020248:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 802024a:	005b      	lsls	r3, r3, #1
 802024c:	b29a      	uxth	r2, r3
 802024e:	687b      	ldr	r3, [r7, #4]
 8020250:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8020254:	687b      	ldr	r3, [r7, #4]
 8020256:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 802025a:	687b      	ldr	r3, [r7, #4]
 802025c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 802025e:	4619      	mov	r1, r3
 8020260:	0049      	lsls	r1, r1, #1
 8020262:	440b      	add	r3, r1
 8020264:	b29b      	uxth	r3, r3
 8020266:	4413      	add	r3, r2
 8020268:	b29a      	uxth	r2, r3
 802026a:	687b      	ldr	r3, [r7, #4]
 802026c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8020270:	687b      	ldr	r3, [r7, #4]
 8020272:	8b5b      	ldrh	r3, [r3, #26]
 8020274:	f043 0304 	orr.w	r3, r3, #4
 8020278:	b29a      	uxth	r2, r3
 802027a:	687b      	ldr	r3, [r7, #4]
 802027c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 802027e:	687b      	ldr	r3, [r7, #4]
 8020280:	2200      	movs	r2, #0
 8020282:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8020284:	bf00      	nop
 8020286:	3708      	adds	r7, #8
 8020288:	46bd      	mov	sp, r7
 802028a:	bd80      	pop	{r7, pc}
 802028c:	0802b9cc 	.word	0x0802b9cc
 8020290:	0802c084 	.word	0x0802c084
 8020294:	0802ba20 	.word	0x0802ba20

08020298 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8020298:	b580      	push	{r7, lr}
 802029a:	b086      	sub	sp, #24
 802029c:	af00      	add	r7, sp, #0
 802029e:	60f8      	str	r0, [r7, #12]
 80202a0:	607b      	str	r3, [r7, #4]
 80202a2:	460b      	mov	r3, r1
 80202a4:	817b      	strh	r3, [r7, #10]
 80202a6:	4613      	mov	r3, r2
 80202a8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80202aa:	897a      	ldrh	r2, [r7, #10]
 80202ac:	893b      	ldrh	r3, [r7, #8]
 80202ae:	4413      	add	r3, r2
 80202b0:	b29b      	uxth	r3, r3
 80202b2:	3314      	adds	r3, #20
 80202b4:	b29b      	uxth	r3, r3
 80202b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80202ba:	4619      	mov	r1, r3
 80202bc:	2022      	movs	r0, #34	@ 0x22
 80202be:	f7f9 fd6d 	bl	8019d9c <pbuf_alloc>
 80202c2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80202c4:	697b      	ldr	r3, [r7, #20]
 80202c6:	2b00      	cmp	r3, #0
 80202c8:	d04d      	beq.n	8020366 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80202ca:	897b      	ldrh	r3, [r7, #10]
 80202cc:	3313      	adds	r3, #19
 80202ce:	697a      	ldr	r2, [r7, #20]
 80202d0:	8952      	ldrh	r2, [r2, #10]
 80202d2:	4293      	cmp	r3, r2
 80202d4:	db06      	blt.n	80202e4 <tcp_output_alloc_header_common+0x4c>
 80202d6:	4b26      	ldr	r3, [pc, #152]	@ (8020370 <tcp_output_alloc_header_common+0xd8>)
 80202d8:	f240 7223 	movw	r2, #1827	@ 0x723
 80202dc:	4925      	ldr	r1, [pc, #148]	@ (8020374 <tcp_output_alloc_header_common+0xdc>)
 80202de:	4826      	ldr	r0, [pc, #152]	@ (8020378 <tcp_output_alloc_header_common+0xe0>)
 80202e0:	f004 ffc0 	bl	8025264 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80202e4:	697b      	ldr	r3, [r7, #20]
 80202e6:	685b      	ldr	r3, [r3, #4]
 80202e8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80202ea:	8c3b      	ldrh	r3, [r7, #32]
 80202ec:	4618      	mov	r0, r3
 80202ee:	f7f8 fb8f 	bl	8018a10 <lwip_htons>
 80202f2:	4603      	mov	r3, r0
 80202f4:	461a      	mov	r2, r3
 80202f6:	693b      	ldr	r3, [r7, #16]
 80202f8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80202fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80202fc:	4618      	mov	r0, r3
 80202fe:	f7f8 fb87 	bl	8018a10 <lwip_htons>
 8020302:	4603      	mov	r3, r0
 8020304:	461a      	mov	r2, r3
 8020306:	693b      	ldr	r3, [r7, #16]
 8020308:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 802030a:	693b      	ldr	r3, [r7, #16]
 802030c:	687a      	ldr	r2, [r7, #4]
 802030e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8020310:	68f8      	ldr	r0, [r7, #12]
 8020312:	f7f8 fb92 	bl	8018a3a <lwip_htonl>
 8020316:	4602      	mov	r2, r0
 8020318:	693b      	ldr	r3, [r7, #16]
 802031a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 802031c:	897b      	ldrh	r3, [r7, #10]
 802031e:	089b      	lsrs	r3, r3, #2
 8020320:	b29b      	uxth	r3, r3
 8020322:	3305      	adds	r3, #5
 8020324:	b29b      	uxth	r3, r3
 8020326:	031b      	lsls	r3, r3, #12
 8020328:	b29a      	uxth	r2, r3
 802032a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 802032e:	b29b      	uxth	r3, r3
 8020330:	4313      	orrs	r3, r2
 8020332:	b29b      	uxth	r3, r3
 8020334:	4618      	mov	r0, r3
 8020336:	f7f8 fb6b 	bl	8018a10 <lwip_htons>
 802033a:	4603      	mov	r3, r0
 802033c:	461a      	mov	r2, r3
 802033e:	693b      	ldr	r3, [r7, #16]
 8020340:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8020342:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8020344:	4618      	mov	r0, r3
 8020346:	f7f8 fb63 	bl	8018a10 <lwip_htons>
 802034a:	4603      	mov	r3, r0
 802034c:	461a      	mov	r2, r3
 802034e:	693b      	ldr	r3, [r7, #16]
 8020350:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8020352:	693b      	ldr	r3, [r7, #16]
 8020354:	2200      	movs	r2, #0
 8020356:	741a      	strb	r2, [r3, #16]
 8020358:	2200      	movs	r2, #0
 802035a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 802035c:	693b      	ldr	r3, [r7, #16]
 802035e:	2200      	movs	r2, #0
 8020360:	749a      	strb	r2, [r3, #18]
 8020362:	2200      	movs	r2, #0
 8020364:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8020366:	697b      	ldr	r3, [r7, #20]
}
 8020368:	4618      	mov	r0, r3
 802036a:	3718      	adds	r7, #24
 802036c:	46bd      	mov	sp, r7
 802036e:	bd80      	pop	{r7, pc}
 8020370:	0802b9cc 	.word	0x0802b9cc
 8020374:	0802c0a4 	.word	0x0802c0a4
 8020378:	0802ba20 	.word	0x0802ba20

0802037c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 802037c:	b5b0      	push	{r4, r5, r7, lr}
 802037e:	b08a      	sub	sp, #40	@ 0x28
 8020380:	af04      	add	r7, sp, #16
 8020382:	60f8      	str	r0, [r7, #12]
 8020384:	607b      	str	r3, [r7, #4]
 8020386:	460b      	mov	r3, r1
 8020388:	817b      	strh	r3, [r7, #10]
 802038a:	4613      	mov	r3, r2
 802038c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 802038e:	68fb      	ldr	r3, [r7, #12]
 8020390:	2b00      	cmp	r3, #0
 8020392:	d106      	bne.n	80203a2 <tcp_output_alloc_header+0x26>
 8020394:	4b15      	ldr	r3, [pc, #84]	@ (80203ec <tcp_output_alloc_header+0x70>)
 8020396:	f240 7242 	movw	r2, #1858	@ 0x742
 802039a:	4915      	ldr	r1, [pc, #84]	@ (80203f0 <tcp_output_alloc_header+0x74>)
 802039c:	4815      	ldr	r0, [pc, #84]	@ (80203f4 <tcp_output_alloc_header+0x78>)
 802039e:	f004 ff61 	bl	8025264 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80203a2:	68fb      	ldr	r3, [r7, #12]
 80203a4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80203a6:	68fb      	ldr	r3, [r7, #12]
 80203a8:	8adb      	ldrh	r3, [r3, #22]
 80203aa:	68fa      	ldr	r2, [r7, #12]
 80203ac:	8b12      	ldrh	r2, [r2, #24]
 80203ae:	68f9      	ldr	r1, [r7, #12]
 80203b0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80203b2:	893d      	ldrh	r5, [r7, #8]
 80203b4:	897c      	ldrh	r4, [r7, #10]
 80203b6:	9103      	str	r1, [sp, #12]
 80203b8:	2110      	movs	r1, #16
 80203ba:	9102      	str	r1, [sp, #8]
 80203bc:	9201      	str	r2, [sp, #4]
 80203be:	9300      	str	r3, [sp, #0]
 80203c0:	687b      	ldr	r3, [r7, #4]
 80203c2:	462a      	mov	r2, r5
 80203c4:	4621      	mov	r1, r4
 80203c6:	f7ff ff67 	bl	8020298 <tcp_output_alloc_header_common>
 80203ca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80203cc:	697b      	ldr	r3, [r7, #20]
 80203ce:	2b00      	cmp	r3, #0
 80203d0:	d006      	beq.n	80203e0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80203d2:	68fb      	ldr	r3, [r7, #12]
 80203d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80203d6:	68fa      	ldr	r2, [r7, #12]
 80203d8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80203da:	441a      	add	r2, r3
 80203dc:	68fb      	ldr	r3, [r7, #12]
 80203de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80203e0:	697b      	ldr	r3, [r7, #20]
}
 80203e2:	4618      	mov	r0, r3
 80203e4:	3718      	adds	r7, #24
 80203e6:	46bd      	mov	sp, r7
 80203e8:	bdb0      	pop	{r4, r5, r7, pc}
 80203ea:	bf00      	nop
 80203ec:	0802b9cc 	.word	0x0802b9cc
 80203f0:	0802c0d4 	.word	0x0802c0d4
 80203f4:	0802ba20 	.word	0x0802ba20

080203f8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80203f8:	b580      	push	{r7, lr}
 80203fa:	b088      	sub	sp, #32
 80203fc:	af00      	add	r7, sp, #0
 80203fe:	60f8      	str	r0, [r7, #12]
 8020400:	60b9      	str	r1, [r7, #8]
 8020402:	4611      	mov	r1, r2
 8020404:	461a      	mov	r2, r3
 8020406:	460b      	mov	r3, r1
 8020408:	71fb      	strb	r3, [r7, #7]
 802040a:	4613      	mov	r3, r2
 802040c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 802040e:	2300      	movs	r3, #0
 8020410:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8020412:	68bb      	ldr	r3, [r7, #8]
 8020414:	2b00      	cmp	r3, #0
 8020416:	d106      	bne.n	8020426 <tcp_output_fill_options+0x2e>
 8020418:	4b12      	ldr	r3, [pc, #72]	@ (8020464 <tcp_output_fill_options+0x6c>)
 802041a:	f240 7256 	movw	r2, #1878	@ 0x756
 802041e:	4912      	ldr	r1, [pc, #72]	@ (8020468 <tcp_output_fill_options+0x70>)
 8020420:	4812      	ldr	r0, [pc, #72]	@ (802046c <tcp_output_fill_options+0x74>)
 8020422:	f004 ff1f 	bl	8025264 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8020426:	68bb      	ldr	r3, [r7, #8]
 8020428:	685b      	ldr	r3, [r3, #4]
 802042a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 802042c:	69bb      	ldr	r3, [r7, #24]
 802042e:	3314      	adds	r3, #20
 8020430:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8020432:	8bfb      	ldrh	r3, [r7, #30]
 8020434:	009b      	lsls	r3, r3, #2
 8020436:	461a      	mov	r2, r3
 8020438:	79fb      	ldrb	r3, [r7, #7]
 802043a:	009b      	lsls	r3, r3, #2
 802043c:	f003 0304 	and.w	r3, r3, #4
 8020440:	4413      	add	r3, r2
 8020442:	3314      	adds	r3, #20
 8020444:	69ba      	ldr	r2, [r7, #24]
 8020446:	4413      	add	r3, r2
 8020448:	697a      	ldr	r2, [r7, #20]
 802044a:	429a      	cmp	r2, r3
 802044c:	d006      	beq.n	802045c <tcp_output_fill_options+0x64>
 802044e:	4b05      	ldr	r3, [pc, #20]	@ (8020464 <tcp_output_fill_options+0x6c>)
 8020450:	f240 7275 	movw	r2, #1909	@ 0x775
 8020454:	4906      	ldr	r1, [pc, #24]	@ (8020470 <tcp_output_fill_options+0x78>)
 8020456:	4805      	ldr	r0, [pc, #20]	@ (802046c <tcp_output_fill_options+0x74>)
 8020458:	f004 ff04 	bl	8025264 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 802045c:	bf00      	nop
 802045e:	3720      	adds	r7, #32
 8020460:	46bd      	mov	sp, r7
 8020462:	bd80      	pop	{r7, pc}
 8020464:	0802b9cc 	.word	0x0802b9cc
 8020468:	0802c0fc 	.word	0x0802c0fc
 802046c:	0802ba20 	.word	0x0802ba20
 8020470:	0802bff4 	.word	0x0802bff4

08020474 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8020474:	b580      	push	{r7, lr}
 8020476:	b08a      	sub	sp, #40	@ 0x28
 8020478:	af04      	add	r7, sp, #16
 802047a:	60f8      	str	r0, [r7, #12]
 802047c:	60b9      	str	r1, [r7, #8]
 802047e:	607a      	str	r2, [r7, #4]
 8020480:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8020482:	68bb      	ldr	r3, [r7, #8]
 8020484:	2b00      	cmp	r3, #0
 8020486:	d106      	bne.n	8020496 <tcp_output_control_segment+0x22>
 8020488:	4b1c      	ldr	r3, [pc, #112]	@ (80204fc <tcp_output_control_segment+0x88>)
 802048a:	f240 7287 	movw	r2, #1927	@ 0x787
 802048e:	491c      	ldr	r1, [pc, #112]	@ (8020500 <tcp_output_control_segment+0x8c>)
 8020490:	481c      	ldr	r0, [pc, #112]	@ (8020504 <tcp_output_control_segment+0x90>)
 8020492:	f004 fee7 	bl	8025264 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8020496:	683a      	ldr	r2, [r7, #0]
 8020498:	6879      	ldr	r1, [r7, #4]
 802049a:	68f8      	ldr	r0, [r7, #12]
 802049c:	f7fe faea 	bl	801ea74 <tcp_route>
 80204a0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80204a2:	693b      	ldr	r3, [r7, #16]
 80204a4:	2b00      	cmp	r3, #0
 80204a6:	d102      	bne.n	80204ae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80204a8:	23fc      	movs	r3, #252	@ 0xfc
 80204aa:	75fb      	strb	r3, [r7, #23]
 80204ac:	e01c      	b.n	80204e8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80204ae:	68fb      	ldr	r3, [r7, #12]
 80204b0:	2b00      	cmp	r3, #0
 80204b2:	d006      	beq.n	80204c2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80204b4:	68fb      	ldr	r3, [r7, #12]
 80204b6:	7adb      	ldrb	r3, [r3, #11]
 80204b8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80204ba:	68fb      	ldr	r3, [r7, #12]
 80204bc:	7a9b      	ldrb	r3, [r3, #10]
 80204be:	757b      	strb	r3, [r7, #21]
 80204c0:	e003      	b.n	80204ca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80204c2:	23ff      	movs	r3, #255	@ 0xff
 80204c4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80204c6:	2300      	movs	r3, #0
 80204c8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80204ca:	7dba      	ldrb	r2, [r7, #22]
 80204cc:	693b      	ldr	r3, [r7, #16]
 80204ce:	9302      	str	r3, [sp, #8]
 80204d0:	2306      	movs	r3, #6
 80204d2:	9301      	str	r3, [sp, #4]
 80204d4:	7d7b      	ldrb	r3, [r7, #21]
 80204d6:	9300      	str	r3, [sp, #0]
 80204d8:	4613      	mov	r3, r2
 80204da:	683a      	ldr	r2, [r7, #0]
 80204dc:	6879      	ldr	r1, [r7, #4]
 80204de:	68b8      	ldr	r0, [r7, #8]
 80204e0:	f002 faf6 	bl	8022ad0 <ip4_output_if>
 80204e4:	4603      	mov	r3, r0
 80204e6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80204e8:	68b8      	ldr	r0, [r7, #8]
 80204ea:	f7f9 ff6d 	bl	801a3c8 <pbuf_free>
  return err;
 80204ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80204f2:	4618      	mov	r0, r3
 80204f4:	3718      	adds	r7, #24
 80204f6:	46bd      	mov	sp, r7
 80204f8:	bd80      	pop	{r7, pc}
 80204fa:	bf00      	nop
 80204fc:	0802b9cc 	.word	0x0802b9cc
 8020500:	0802c124 	.word	0x0802c124
 8020504:	0802ba20 	.word	0x0802ba20

08020508 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8020508:	b590      	push	{r4, r7, lr}
 802050a:	b08b      	sub	sp, #44	@ 0x2c
 802050c:	af04      	add	r7, sp, #16
 802050e:	60f8      	str	r0, [r7, #12]
 8020510:	60b9      	str	r1, [r7, #8]
 8020512:	607a      	str	r2, [r7, #4]
 8020514:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8020516:	683b      	ldr	r3, [r7, #0]
 8020518:	2b00      	cmp	r3, #0
 802051a:	d106      	bne.n	802052a <tcp_rst+0x22>
 802051c:	4b1f      	ldr	r3, [pc, #124]	@ (802059c <tcp_rst+0x94>)
 802051e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8020522:	491f      	ldr	r1, [pc, #124]	@ (80205a0 <tcp_rst+0x98>)
 8020524:	481f      	ldr	r0, [pc, #124]	@ (80205a4 <tcp_rst+0x9c>)
 8020526:	f004 fe9d 	bl	8025264 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 802052a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802052c:	2b00      	cmp	r3, #0
 802052e:	d106      	bne.n	802053e <tcp_rst+0x36>
 8020530:	4b1a      	ldr	r3, [pc, #104]	@ (802059c <tcp_rst+0x94>)
 8020532:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8020536:	491c      	ldr	r1, [pc, #112]	@ (80205a8 <tcp_rst+0xa0>)
 8020538:	481a      	ldr	r0, [pc, #104]	@ (80205a4 <tcp_rst+0x9c>)
 802053a:	f004 fe93 	bl	8025264 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 802053e:	2300      	movs	r3, #0
 8020540:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8020542:	f246 0308 	movw	r3, #24584	@ 0x6008
 8020546:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8020548:	7dfb      	ldrb	r3, [r7, #23]
 802054a:	b29c      	uxth	r4, r3
 802054c:	68b8      	ldr	r0, [r7, #8]
 802054e:	f7f8 fa74 	bl	8018a3a <lwip_htonl>
 8020552:	4602      	mov	r2, r0
 8020554:	8abb      	ldrh	r3, [r7, #20]
 8020556:	9303      	str	r3, [sp, #12]
 8020558:	2314      	movs	r3, #20
 802055a:	9302      	str	r3, [sp, #8]
 802055c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 802055e:	9301      	str	r3, [sp, #4]
 8020560:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8020562:	9300      	str	r3, [sp, #0]
 8020564:	4613      	mov	r3, r2
 8020566:	2200      	movs	r2, #0
 8020568:	4621      	mov	r1, r4
 802056a:	6878      	ldr	r0, [r7, #4]
 802056c:	f7ff fe94 	bl	8020298 <tcp_output_alloc_header_common>
 8020570:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8020572:	693b      	ldr	r3, [r7, #16]
 8020574:	2b00      	cmp	r3, #0
 8020576:	d00c      	beq.n	8020592 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8020578:	7dfb      	ldrb	r3, [r7, #23]
 802057a:	2200      	movs	r2, #0
 802057c:	6939      	ldr	r1, [r7, #16]
 802057e:	68f8      	ldr	r0, [r7, #12]
 8020580:	f7ff ff3a 	bl	80203f8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8020584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020586:	683a      	ldr	r2, [r7, #0]
 8020588:	6939      	ldr	r1, [r7, #16]
 802058a:	68f8      	ldr	r0, [r7, #12]
 802058c:	f7ff ff72 	bl	8020474 <tcp_output_control_segment>
 8020590:	e000      	b.n	8020594 <tcp_rst+0x8c>
    return;
 8020592:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8020594:	371c      	adds	r7, #28
 8020596:	46bd      	mov	sp, r7
 8020598:	bd90      	pop	{r4, r7, pc}
 802059a:	bf00      	nop
 802059c:	0802b9cc 	.word	0x0802b9cc
 80205a0:	0802c150 	.word	0x0802c150
 80205a4:	0802ba20 	.word	0x0802ba20
 80205a8:	0802c16c 	.word	0x0802c16c

080205ac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80205ac:	b590      	push	{r4, r7, lr}
 80205ae:	b087      	sub	sp, #28
 80205b0:	af00      	add	r7, sp, #0
 80205b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80205b4:	2300      	movs	r3, #0
 80205b6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80205b8:	2300      	movs	r3, #0
 80205ba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80205bc:	687b      	ldr	r3, [r7, #4]
 80205be:	2b00      	cmp	r3, #0
 80205c0:	d106      	bne.n	80205d0 <tcp_send_empty_ack+0x24>
 80205c2:	4b28      	ldr	r3, [pc, #160]	@ (8020664 <tcp_send_empty_ack+0xb8>)
 80205c4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80205c8:	4927      	ldr	r1, [pc, #156]	@ (8020668 <tcp_send_empty_ack+0xbc>)
 80205ca:	4828      	ldr	r0, [pc, #160]	@ (802066c <tcp_send_empty_ack+0xc0>)
 80205cc:	f004 fe4a 	bl	8025264 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80205d0:	7dfb      	ldrb	r3, [r7, #23]
 80205d2:	009b      	lsls	r3, r3, #2
 80205d4:	b2db      	uxtb	r3, r3
 80205d6:	f003 0304 	and.w	r3, r3, #4
 80205da:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80205dc:	7d7b      	ldrb	r3, [r7, #21]
 80205de:	b29c      	uxth	r4, r3
 80205e0:	687b      	ldr	r3, [r7, #4]
 80205e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80205e4:	4618      	mov	r0, r3
 80205e6:	f7f8 fa28 	bl	8018a3a <lwip_htonl>
 80205ea:	4603      	mov	r3, r0
 80205ec:	2200      	movs	r2, #0
 80205ee:	4621      	mov	r1, r4
 80205f0:	6878      	ldr	r0, [r7, #4]
 80205f2:	f7ff fec3 	bl	802037c <tcp_output_alloc_header>
 80205f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80205f8:	693b      	ldr	r3, [r7, #16]
 80205fa:	2b00      	cmp	r3, #0
 80205fc:	d109      	bne.n	8020612 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80205fe:	687b      	ldr	r3, [r7, #4]
 8020600:	8b5b      	ldrh	r3, [r3, #26]
 8020602:	f043 0303 	orr.w	r3, r3, #3
 8020606:	b29a      	uxth	r2, r3
 8020608:	687b      	ldr	r3, [r7, #4]
 802060a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 802060c:	f06f 0301 	mvn.w	r3, #1
 8020610:	e023      	b.n	802065a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8020612:	7dbb      	ldrb	r3, [r7, #22]
 8020614:	7dfa      	ldrb	r2, [r7, #23]
 8020616:	6939      	ldr	r1, [r7, #16]
 8020618:	6878      	ldr	r0, [r7, #4]
 802061a:	f7ff feed 	bl	80203f8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 802061e:	687a      	ldr	r2, [r7, #4]
 8020620:	687b      	ldr	r3, [r7, #4]
 8020622:	3304      	adds	r3, #4
 8020624:	6939      	ldr	r1, [r7, #16]
 8020626:	6878      	ldr	r0, [r7, #4]
 8020628:	f7ff ff24 	bl	8020474 <tcp_output_control_segment>
 802062c:	4603      	mov	r3, r0
 802062e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8020630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020634:	2b00      	cmp	r3, #0
 8020636:	d007      	beq.n	8020648 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020638:	687b      	ldr	r3, [r7, #4]
 802063a:	8b5b      	ldrh	r3, [r3, #26]
 802063c:	f043 0303 	orr.w	r3, r3, #3
 8020640:	b29a      	uxth	r2, r3
 8020642:	687b      	ldr	r3, [r7, #4]
 8020644:	835a      	strh	r2, [r3, #26]
 8020646:	e006      	b.n	8020656 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020648:	687b      	ldr	r3, [r7, #4]
 802064a:	8b5b      	ldrh	r3, [r3, #26]
 802064c:	f023 0303 	bic.w	r3, r3, #3
 8020650:	b29a      	uxth	r2, r3
 8020652:	687b      	ldr	r3, [r7, #4]
 8020654:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8020656:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802065a:	4618      	mov	r0, r3
 802065c:	371c      	adds	r7, #28
 802065e:	46bd      	mov	sp, r7
 8020660:	bd90      	pop	{r4, r7, pc}
 8020662:	bf00      	nop
 8020664:	0802b9cc 	.word	0x0802b9cc
 8020668:	0802c188 	.word	0x0802c188
 802066c:	0802ba20 	.word	0x0802ba20

08020670 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8020670:	b590      	push	{r4, r7, lr}
 8020672:	b087      	sub	sp, #28
 8020674:	af00      	add	r7, sp, #0
 8020676:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8020678:	2300      	movs	r3, #0
 802067a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 802067c:	687b      	ldr	r3, [r7, #4]
 802067e:	2b00      	cmp	r3, #0
 8020680:	d106      	bne.n	8020690 <tcp_keepalive+0x20>
 8020682:	4b18      	ldr	r3, [pc, #96]	@ (80206e4 <tcp_keepalive+0x74>)
 8020684:	f640 0224 	movw	r2, #2084	@ 0x824
 8020688:	4917      	ldr	r1, [pc, #92]	@ (80206e8 <tcp_keepalive+0x78>)
 802068a:	4818      	ldr	r0, [pc, #96]	@ (80206ec <tcp_keepalive+0x7c>)
 802068c:	f004 fdea 	bl	8025264 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8020690:	7dfb      	ldrb	r3, [r7, #23]
 8020692:	b29c      	uxth	r4, r3
 8020694:	687b      	ldr	r3, [r7, #4]
 8020696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020698:	3b01      	subs	r3, #1
 802069a:	4618      	mov	r0, r3
 802069c:	f7f8 f9cd 	bl	8018a3a <lwip_htonl>
 80206a0:	4603      	mov	r3, r0
 80206a2:	2200      	movs	r2, #0
 80206a4:	4621      	mov	r1, r4
 80206a6:	6878      	ldr	r0, [r7, #4]
 80206a8:	f7ff fe68 	bl	802037c <tcp_output_alloc_header>
 80206ac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80206ae:	693b      	ldr	r3, [r7, #16]
 80206b0:	2b00      	cmp	r3, #0
 80206b2:	d102      	bne.n	80206ba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80206b4:	f04f 33ff 	mov.w	r3, #4294967295
 80206b8:	e010      	b.n	80206dc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80206ba:	7dfb      	ldrb	r3, [r7, #23]
 80206bc:	2200      	movs	r2, #0
 80206be:	6939      	ldr	r1, [r7, #16]
 80206c0:	6878      	ldr	r0, [r7, #4]
 80206c2:	f7ff fe99 	bl	80203f8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80206c6:	687a      	ldr	r2, [r7, #4]
 80206c8:	687b      	ldr	r3, [r7, #4]
 80206ca:	3304      	adds	r3, #4
 80206cc:	6939      	ldr	r1, [r7, #16]
 80206ce:	6878      	ldr	r0, [r7, #4]
 80206d0:	f7ff fed0 	bl	8020474 <tcp_output_control_segment>
 80206d4:	4603      	mov	r3, r0
 80206d6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80206d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80206dc:	4618      	mov	r0, r3
 80206de:	371c      	adds	r7, #28
 80206e0:	46bd      	mov	sp, r7
 80206e2:	bd90      	pop	{r4, r7, pc}
 80206e4:	0802b9cc 	.word	0x0802b9cc
 80206e8:	0802c1a8 	.word	0x0802c1a8
 80206ec:	0802ba20 	.word	0x0802ba20

080206f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80206f0:	b590      	push	{r4, r7, lr}
 80206f2:	b08b      	sub	sp, #44	@ 0x2c
 80206f4:	af00      	add	r7, sp, #0
 80206f6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80206f8:	2300      	movs	r3, #0
 80206fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80206fe:	687b      	ldr	r3, [r7, #4]
 8020700:	2b00      	cmp	r3, #0
 8020702:	d106      	bne.n	8020712 <tcp_zero_window_probe+0x22>
 8020704:	4b4c      	ldr	r3, [pc, #304]	@ (8020838 <tcp_zero_window_probe+0x148>)
 8020706:	f640 024f 	movw	r2, #2127	@ 0x84f
 802070a:	494c      	ldr	r1, [pc, #304]	@ (802083c <tcp_zero_window_probe+0x14c>)
 802070c:	484c      	ldr	r0, [pc, #304]	@ (8020840 <tcp_zero_window_probe+0x150>)
 802070e:	f004 fda9 	bl	8025264 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8020712:	687b      	ldr	r3, [r7, #4]
 8020714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020716:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8020718:	6a3b      	ldr	r3, [r7, #32]
 802071a:	2b00      	cmp	r3, #0
 802071c:	d101      	bne.n	8020722 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 802071e:	2300      	movs	r3, #0
 8020720:	e086      	b.n	8020830 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8020722:	687b      	ldr	r3, [r7, #4]
 8020724:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8020728:	2bff      	cmp	r3, #255	@ 0xff
 802072a:	d007      	beq.n	802073c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 802072c:	687b      	ldr	r3, [r7, #4]
 802072e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8020732:	3301      	adds	r3, #1
 8020734:	b2da      	uxtb	r2, r3
 8020736:	687b      	ldr	r3, [r7, #4]
 8020738:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 802073c:	6a3b      	ldr	r3, [r7, #32]
 802073e:	68db      	ldr	r3, [r3, #12]
 8020740:	899b      	ldrh	r3, [r3, #12]
 8020742:	b29b      	uxth	r3, r3
 8020744:	4618      	mov	r0, r3
 8020746:	f7f8 f963 	bl	8018a10 <lwip_htons>
 802074a:	4603      	mov	r3, r0
 802074c:	b2db      	uxtb	r3, r3
 802074e:	f003 0301 	and.w	r3, r3, #1
 8020752:	2b00      	cmp	r3, #0
 8020754:	d005      	beq.n	8020762 <tcp_zero_window_probe+0x72>
 8020756:	6a3b      	ldr	r3, [r7, #32]
 8020758:	891b      	ldrh	r3, [r3, #8]
 802075a:	2b00      	cmp	r3, #0
 802075c:	d101      	bne.n	8020762 <tcp_zero_window_probe+0x72>
 802075e:	2301      	movs	r3, #1
 8020760:	e000      	b.n	8020764 <tcp_zero_window_probe+0x74>
 8020762:	2300      	movs	r3, #0
 8020764:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8020766:	7ffb      	ldrb	r3, [r7, #31]
 8020768:	2b00      	cmp	r3, #0
 802076a:	bf0c      	ite	eq
 802076c:	2301      	moveq	r3, #1
 802076e:	2300      	movne	r3, #0
 8020770:	b2db      	uxtb	r3, r3
 8020772:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8020774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8020778:	b299      	uxth	r1, r3
 802077a:	6a3b      	ldr	r3, [r7, #32]
 802077c:	68db      	ldr	r3, [r3, #12]
 802077e:	685b      	ldr	r3, [r3, #4]
 8020780:	8bba      	ldrh	r2, [r7, #28]
 8020782:	6878      	ldr	r0, [r7, #4]
 8020784:	f7ff fdfa 	bl	802037c <tcp_output_alloc_header>
 8020788:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 802078a:	69bb      	ldr	r3, [r7, #24]
 802078c:	2b00      	cmp	r3, #0
 802078e:	d102      	bne.n	8020796 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8020790:	f04f 33ff 	mov.w	r3, #4294967295
 8020794:	e04c      	b.n	8020830 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8020796:	69bb      	ldr	r3, [r7, #24]
 8020798:	685b      	ldr	r3, [r3, #4]
 802079a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 802079c:	7ffb      	ldrb	r3, [r7, #31]
 802079e:	2b00      	cmp	r3, #0
 80207a0:	d011      	beq.n	80207c6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80207a2:	697b      	ldr	r3, [r7, #20]
 80207a4:	899b      	ldrh	r3, [r3, #12]
 80207a6:	b29b      	uxth	r3, r3
 80207a8:	b21b      	sxth	r3, r3
 80207aa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80207ae:	b21c      	sxth	r4, r3
 80207b0:	2011      	movs	r0, #17
 80207b2:	f7f8 f92d 	bl	8018a10 <lwip_htons>
 80207b6:	4603      	mov	r3, r0
 80207b8:	b21b      	sxth	r3, r3
 80207ba:	4323      	orrs	r3, r4
 80207bc:	b21b      	sxth	r3, r3
 80207be:	b29a      	uxth	r2, r3
 80207c0:	697b      	ldr	r3, [r7, #20]
 80207c2:	819a      	strh	r2, [r3, #12]
 80207c4:	e010      	b.n	80207e8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80207c6:	69bb      	ldr	r3, [r7, #24]
 80207c8:	685b      	ldr	r3, [r3, #4]
 80207ca:	3314      	adds	r3, #20
 80207cc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80207ce:	6a3b      	ldr	r3, [r7, #32]
 80207d0:	6858      	ldr	r0, [r3, #4]
 80207d2:	6a3b      	ldr	r3, [r7, #32]
 80207d4:	685b      	ldr	r3, [r3, #4]
 80207d6:	891a      	ldrh	r2, [r3, #8]
 80207d8:	6a3b      	ldr	r3, [r7, #32]
 80207da:	891b      	ldrh	r3, [r3, #8]
 80207dc:	1ad3      	subs	r3, r2, r3
 80207de:	b29b      	uxth	r3, r3
 80207e0:	2201      	movs	r2, #1
 80207e2:	6939      	ldr	r1, [r7, #16]
 80207e4:	f7f9 fff6 	bl	801a7d4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80207e8:	6a3b      	ldr	r3, [r7, #32]
 80207ea:	68db      	ldr	r3, [r3, #12]
 80207ec:	685b      	ldr	r3, [r3, #4]
 80207ee:	4618      	mov	r0, r3
 80207f0:	f7f8 f923 	bl	8018a3a <lwip_htonl>
 80207f4:	4603      	mov	r3, r0
 80207f6:	3301      	adds	r3, #1
 80207f8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80207fa:	687b      	ldr	r3, [r7, #4]
 80207fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80207fe:	68fb      	ldr	r3, [r7, #12]
 8020800:	1ad3      	subs	r3, r2, r3
 8020802:	2b00      	cmp	r3, #0
 8020804:	da02      	bge.n	802080c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8020806:	687b      	ldr	r3, [r7, #4]
 8020808:	68fa      	ldr	r2, [r7, #12]
 802080a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 802080c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8020810:	2200      	movs	r2, #0
 8020812:	69b9      	ldr	r1, [r7, #24]
 8020814:	6878      	ldr	r0, [r7, #4]
 8020816:	f7ff fdef 	bl	80203f8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 802081a:	687a      	ldr	r2, [r7, #4]
 802081c:	687b      	ldr	r3, [r7, #4]
 802081e:	3304      	adds	r3, #4
 8020820:	69b9      	ldr	r1, [r7, #24]
 8020822:	6878      	ldr	r0, [r7, #4]
 8020824:	f7ff fe26 	bl	8020474 <tcp_output_control_segment>
 8020828:	4603      	mov	r3, r0
 802082a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 802082c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8020830:	4618      	mov	r0, r3
 8020832:	372c      	adds	r7, #44	@ 0x2c
 8020834:	46bd      	mov	sp, r7
 8020836:	bd90      	pop	{r4, r7, pc}
 8020838:	0802b9cc 	.word	0x0802b9cc
 802083c:	0802c1c4 	.word	0x0802c1c4
 8020840:	0802ba20 	.word	0x0802ba20

08020844 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8020844:	b580      	push	{r7, lr}
 8020846:	b082      	sub	sp, #8
 8020848:	af00      	add	r7, sp, #0
 802084a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 802084c:	f7fa f8b0 	bl	801a9b0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8020850:	4b0a      	ldr	r3, [pc, #40]	@ (802087c <tcpip_tcp_timer+0x38>)
 8020852:	681b      	ldr	r3, [r3, #0]
 8020854:	2b00      	cmp	r3, #0
 8020856:	d103      	bne.n	8020860 <tcpip_tcp_timer+0x1c>
 8020858:	4b09      	ldr	r3, [pc, #36]	@ (8020880 <tcpip_tcp_timer+0x3c>)
 802085a:	681b      	ldr	r3, [r3, #0]
 802085c:	2b00      	cmp	r3, #0
 802085e:	d005      	beq.n	802086c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8020860:	2200      	movs	r2, #0
 8020862:	4908      	ldr	r1, [pc, #32]	@ (8020884 <tcpip_tcp_timer+0x40>)
 8020864:	20fa      	movs	r0, #250	@ 0xfa
 8020866:	f000 f8f3 	bl	8020a50 <sys_timeout>
 802086a:	e003      	b.n	8020874 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 802086c:	4b06      	ldr	r3, [pc, #24]	@ (8020888 <tcpip_tcp_timer+0x44>)
 802086e:	2200      	movs	r2, #0
 8020870:	601a      	str	r2, [r3, #0]
  }
}
 8020872:	bf00      	nop
 8020874:	bf00      	nop
 8020876:	3708      	adds	r7, #8
 8020878:	46bd      	mov	sp, r7
 802087a:	bd80      	pop	{r7, pc}
 802087c:	2400be58 	.word	0x2400be58
 8020880:	2400be5c 	.word	0x2400be5c
 8020884:	08020845 	.word	0x08020845
 8020888:	2400bea4 	.word	0x2400bea4

0802088c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 802088c:	b580      	push	{r7, lr}
 802088e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8020890:	4b0a      	ldr	r3, [pc, #40]	@ (80208bc <tcp_timer_needed+0x30>)
 8020892:	681b      	ldr	r3, [r3, #0]
 8020894:	2b00      	cmp	r3, #0
 8020896:	d10f      	bne.n	80208b8 <tcp_timer_needed+0x2c>
 8020898:	4b09      	ldr	r3, [pc, #36]	@ (80208c0 <tcp_timer_needed+0x34>)
 802089a:	681b      	ldr	r3, [r3, #0]
 802089c:	2b00      	cmp	r3, #0
 802089e:	d103      	bne.n	80208a8 <tcp_timer_needed+0x1c>
 80208a0:	4b08      	ldr	r3, [pc, #32]	@ (80208c4 <tcp_timer_needed+0x38>)
 80208a2:	681b      	ldr	r3, [r3, #0]
 80208a4:	2b00      	cmp	r3, #0
 80208a6:	d007      	beq.n	80208b8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80208a8:	4b04      	ldr	r3, [pc, #16]	@ (80208bc <tcp_timer_needed+0x30>)
 80208aa:	2201      	movs	r2, #1
 80208ac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80208ae:	2200      	movs	r2, #0
 80208b0:	4905      	ldr	r1, [pc, #20]	@ (80208c8 <tcp_timer_needed+0x3c>)
 80208b2:	20fa      	movs	r0, #250	@ 0xfa
 80208b4:	f000 f8cc 	bl	8020a50 <sys_timeout>
  }
}
 80208b8:	bf00      	nop
 80208ba:	bd80      	pop	{r7, pc}
 80208bc:	2400bea4 	.word	0x2400bea4
 80208c0:	2400be58 	.word	0x2400be58
 80208c4:	2400be5c 	.word	0x2400be5c
 80208c8:	08020845 	.word	0x08020845

080208cc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80208cc:	b580      	push	{r7, lr}
 80208ce:	b086      	sub	sp, #24
 80208d0:	af00      	add	r7, sp, #0
 80208d2:	60f8      	str	r0, [r7, #12]
 80208d4:	60b9      	str	r1, [r7, #8]
 80208d6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80208d8:	200a      	movs	r0, #10
 80208da:	f7f8 fe29 	bl	8019530 <memp_malloc>
 80208de:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80208e0:	693b      	ldr	r3, [r7, #16]
 80208e2:	2b00      	cmp	r3, #0
 80208e4:	d109      	bne.n	80208fa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80208e6:	693b      	ldr	r3, [r7, #16]
 80208e8:	2b00      	cmp	r3, #0
 80208ea:	d151      	bne.n	8020990 <sys_timeout_abs+0xc4>
 80208ec:	4b2a      	ldr	r3, [pc, #168]	@ (8020998 <sys_timeout_abs+0xcc>)
 80208ee:	22be      	movs	r2, #190	@ 0xbe
 80208f0:	492a      	ldr	r1, [pc, #168]	@ (802099c <sys_timeout_abs+0xd0>)
 80208f2:	482b      	ldr	r0, [pc, #172]	@ (80209a0 <sys_timeout_abs+0xd4>)
 80208f4:	f004 fcb6 	bl	8025264 <iprintf>
    return;
 80208f8:	e04a      	b.n	8020990 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80208fa:	693b      	ldr	r3, [r7, #16]
 80208fc:	2200      	movs	r2, #0
 80208fe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8020900:	693b      	ldr	r3, [r7, #16]
 8020902:	68ba      	ldr	r2, [r7, #8]
 8020904:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8020906:	693b      	ldr	r3, [r7, #16]
 8020908:	687a      	ldr	r2, [r7, #4]
 802090a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 802090c:	693b      	ldr	r3, [r7, #16]
 802090e:	68fa      	ldr	r2, [r7, #12]
 8020910:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8020912:	4b24      	ldr	r3, [pc, #144]	@ (80209a4 <sys_timeout_abs+0xd8>)
 8020914:	681b      	ldr	r3, [r3, #0]
 8020916:	2b00      	cmp	r3, #0
 8020918:	d103      	bne.n	8020922 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 802091a:	4a22      	ldr	r2, [pc, #136]	@ (80209a4 <sys_timeout_abs+0xd8>)
 802091c:	693b      	ldr	r3, [r7, #16]
 802091e:	6013      	str	r3, [r2, #0]
    return;
 8020920:	e037      	b.n	8020992 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8020922:	693b      	ldr	r3, [r7, #16]
 8020924:	685a      	ldr	r2, [r3, #4]
 8020926:	4b1f      	ldr	r3, [pc, #124]	@ (80209a4 <sys_timeout_abs+0xd8>)
 8020928:	681b      	ldr	r3, [r3, #0]
 802092a:	685b      	ldr	r3, [r3, #4]
 802092c:	1ad3      	subs	r3, r2, r3
 802092e:	0fdb      	lsrs	r3, r3, #31
 8020930:	f003 0301 	and.w	r3, r3, #1
 8020934:	b2db      	uxtb	r3, r3
 8020936:	2b00      	cmp	r3, #0
 8020938:	d007      	beq.n	802094a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 802093a:	4b1a      	ldr	r3, [pc, #104]	@ (80209a4 <sys_timeout_abs+0xd8>)
 802093c:	681a      	ldr	r2, [r3, #0]
 802093e:	693b      	ldr	r3, [r7, #16]
 8020940:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8020942:	4a18      	ldr	r2, [pc, #96]	@ (80209a4 <sys_timeout_abs+0xd8>)
 8020944:	693b      	ldr	r3, [r7, #16]
 8020946:	6013      	str	r3, [r2, #0]
 8020948:	e023      	b.n	8020992 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 802094a:	4b16      	ldr	r3, [pc, #88]	@ (80209a4 <sys_timeout_abs+0xd8>)
 802094c:	681b      	ldr	r3, [r3, #0]
 802094e:	617b      	str	r3, [r7, #20]
 8020950:	e01a      	b.n	8020988 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8020952:	697b      	ldr	r3, [r7, #20]
 8020954:	681b      	ldr	r3, [r3, #0]
 8020956:	2b00      	cmp	r3, #0
 8020958:	d00b      	beq.n	8020972 <sys_timeout_abs+0xa6>
 802095a:	693b      	ldr	r3, [r7, #16]
 802095c:	685a      	ldr	r2, [r3, #4]
 802095e:	697b      	ldr	r3, [r7, #20]
 8020960:	681b      	ldr	r3, [r3, #0]
 8020962:	685b      	ldr	r3, [r3, #4]
 8020964:	1ad3      	subs	r3, r2, r3
 8020966:	0fdb      	lsrs	r3, r3, #31
 8020968:	f003 0301 	and.w	r3, r3, #1
 802096c:	b2db      	uxtb	r3, r3
 802096e:	2b00      	cmp	r3, #0
 8020970:	d007      	beq.n	8020982 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8020972:	697b      	ldr	r3, [r7, #20]
 8020974:	681a      	ldr	r2, [r3, #0]
 8020976:	693b      	ldr	r3, [r7, #16]
 8020978:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 802097a:	697b      	ldr	r3, [r7, #20]
 802097c:	693a      	ldr	r2, [r7, #16]
 802097e:	601a      	str	r2, [r3, #0]
        break;
 8020980:	e007      	b.n	8020992 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8020982:	697b      	ldr	r3, [r7, #20]
 8020984:	681b      	ldr	r3, [r3, #0]
 8020986:	617b      	str	r3, [r7, #20]
 8020988:	697b      	ldr	r3, [r7, #20]
 802098a:	2b00      	cmp	r3, #0
 802098c:	d1e1      	bne.n	8020952 <sys_timeout_abs+0x86>
 802098e:	e000      	b.n	8020992 <sys_timeout_abs+0xc6>
    return;
 8020990:	bf00      	nop
      }
    }
  }
}
 8020992:	3718      	adds	r7, #24
 8020994:	46bd      	mov	sp, r7
 8020996:	bd80      	pop	{r7, pc}
 8020998:	0802c1e8 	.word	0x0802c1e8
 802099c:	0802c21c 	.word	0x0802c21c
 80209a0:	0802c25c 	.word	0x0802c25c
 80209a4:	2400be9c 	.word	0x2400be9c

080209a8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80209a8:	b580      	push	{r7, lr}
 80209aa:	b086      	sub	sp, #24
 80209ac:	af00      	add	r7, sp, #0
 80209ae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80209b0:	687b      	ldr	r3, [r7, #4]
 80209b2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80209b4:	697b      	ldr	r3, [r7, #20]
 80209b6:	685b      	ldr	r3, [r3, #4]
 80209b8:	4798      	blx	r3

  now = sys_now();
 80209ba:	f7f1 facb 	bl	8011f54 <sys_now>
 80209be:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80209c0:	697b      	ldr	r3, [r7, #20]
 80209c2:	681a      	ldr	r2, [r3, #0]
 80209c4:	4b0f      	ldr	r3, [pc, #60]	@ (8020a04 <lwip_cyclic_timer+0x5c>)
 80209c6:	681b      	ldr	r3, [r3, #0]
 80209c8:	4413      	add	r3, r2
 80209ca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80209cc:	68fa      	ldr	r2, [r7, #12]
 80209ce:	693b      	ldr	r3, [r7, #16]
 80209d0:	1ad3      	subs	r3, r2, r3
 80209d2:	0fdb      	lsrs	r3, r3, #31
 80209d4:	f003 0301 	and.w	r3, r3, #1
 80209d8:	b2db      	uxtb	r3, r3
 80209da:	2b00      	cmp	r3, #0
 80209dc:	d009      	beq.n	80209f2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80209de:	697b      	ldr	r3, [r7, #20]
 80209e0:	681a      	ldr	r2, [r3, #0]
 80209e2:	693b      	ldr	r3, [r7, #16]
 80209e4:	4413      	add	r3, r2
 80209e6:	687a      	ldr	r2, [r7, #4]
 80209e8:	4907      	ldr	r1, [pc, #28]	@ (8020a08 <lwip_cyclic_timer+0x60>)
 80209ea:	4618      	mov	r0, r3
 80209ec:	f7ff ff6e 	bl	80208cc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80209f0:	e004      	b.n	80209fc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80209f2:	687a      	ldr	r2, [r7, #4]
 80209f4:	4904      	ldr	r1, [pc, #16]	@ (8020a08 <lwip_cyclic_timer+0x60>)
 80209f6:	68f8      	ldr	r0, [r7, #12]
 80209f8:	f7ff ff68 	bl	80208cc <sys_timeout_abs>
}
 80209fc:	bf00      	nop
 80209fe:	3718      	adds	r7, #24
 8020a00:	46bd      	mov	sp, r7
 8020a02:	bd80      	pop	{r7, pc}
 8020a04:	2400bea0 	.word	0x2400bea0
 8020a08:	080209a9 	.word	0x080209a9

08020a0c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8020a0c:	b580      	push	{r7, lr}
 8020a0e:	b082      	sub	sp, #8
 8020a10:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8020a12:	2301      	movs	r3, #1
 8020a14:	607b      	str	r3, [r7, #4]
 8020a16:	e00e      	b.n	8020a36 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8020a18:	4a0b      	ldr	r2, [pc, #44]	@ (8020a48 <sys_timeouts_init+0x3c>)
 8020a1a:	687b      	ldr	r3, [r7, #4]
 8020a1c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8020a20:	687b      	ldr	r3, [r7, #4]
 8020a22:	00db      	lsls	r3, r3, #3
 8020a24:	4a08      	ldr	r2, [pc, #32]	@ (8020a48 <sys_timeouts_init+0x3c>)
 8020a26:	4413      	add	r3, r2
 8020a28:	461a      	mov	r2, r3
 8020a2a:	4908      	ldr	r1, [pc, #32]	@ (8020a4c <sys_timeouts_init+0x40>)
 8020a2c:	f000 f810 	bl	8020a50 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8020a30:	687b      	ldr	r3, [r7, #4]
 8020a32:	3301      	adds	r3, #1
 8020a34:	607b      	str	r3, [r7, #4]
 8020a36:	687b      	ldr	r3, [r7, #4]
 8020a38:	2b02      	cmp	r3, #2
 8020a3a:	d9ed      	bls.n	8020a18 <sys_timeouts_init+0xc>
  }
}
 8020a3c:	bf00      	nop
 8020a3e:	bf00      	nop
 8020a40:	3708      	adds	r7, #8
 8020a42:	46bd      	mov	sp, r7
 8020a44:	bd80      	pop	{r7, pc}
 8020a46:	bf00      	nop
 8020a48:	0802cf00 	.word	0x0802cf00
 8020a4c:	080209a9 	.word	0x080209a9

08020a50 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8020a50:	b580      	push	{r7, lr}
 8020a52:	b086      	sub	sp, #24
 8020a54:	af00      	add	r7, sp, #0
 8020a56:	60f8      	str	r0, [r7, #12]
 8020a58:	60b9      	str	r1, [r7, #8]
 8020a5a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020a5c:	68fb      	ldr	r3, [r7, #12]
 8020a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020a62:	d306      	bcc.n	8020a72 <sys_timeout+0x22>
 8020a64:	4b0a      	ldr	r3, [pc, #40]	@ (8020a90 <sys_timeout+0x40>)
 8020a66:	f240 1229 	movw	r2, #297	@ 0x129
 8020a6a:	490a      	ldr	r1, [pc, #40]	@ (8020a94 <sys_timeout+0x44>)
 8020a6c:	480a      	ldr	r0, [pc, #40]	@ (8020a98 <sys_timeout+0x48>)
 8020a6e:	f004 fbf9 	bl	8025264 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020a72:	f7f1 fa6f 	bl	8011f54 <sys_now>
 8020a76:	4602      	mov	r2, r0
 8020a78:	68fb      	ldr	r3, [r7, #12]
 8020a7a:	4413      	add	r3, r2
 8020a7c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020a7e:	687a      	ldr	r2, [r7, #4]
 8020a80:	68b9      	ldr	r1, [r7, #8]
 8020a82:	6978      	ldr	r0, [r7, #20]
 8020a84:	f7ff ff22 	bl	80208cc <sys_timeout_abs>
#endif
}
 8020a88:	bf00      	nop
 8020a8a:	3718      	adds	r7, #24
 8020a8c:	46bd      	mov	sp, r7
 8020a8e:	bd80      	pop	{r7, pc}
 8020a90:	0802c1e8 	.word	0x0802c1e8
 8020a94:	0802c284 	.word	0x0802c284
 8020a98:	0802c25c 	.word	0x0802c25c

08020a9c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8020a9c:	b580      	push	{r7, lr}
 8020a9e:	b084      	sub	sp, #16
 8020aa0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8020aa2:	f7f1 fa57 	bl	8011f54 <sys_now>
 8020aa6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8020aa8:	4b17      	ldr	r3, [pc, #92]	@ (8020b08 <sys_check_timeouts+0x6c>)
 8020aaa:	681b      	ldr	r3, [r3, #0]
 8020aac:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8020aae:	68bb      	ldr	r3, [r7, #8]
 8020ab0:	2b00      	cmp	r3, #0
 8020ab2:	d022      	beq.n	8020afa <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8020ab4:	68bb      	ldr	r3, [r7, #8]
 8020ab6:	685b      	ldr	r3, [r3, #4]
 8020ab8:	68fa      	ldr	r2, [r7, #12]
 8020aba:	1ad3      	subs	r3, r2, r3
 8020abc:	0fdb      	lsrs	r3, r3, #31
 8020abe:	f003 0301 	and.w	r3, r3, #1
 8020ac2:	b2db      	uxtb	r3, r3
 8020ac4:	2b00      	cmp	r3, #0
 8020ac6:	d11a      	bne.n	8020afe <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8020ac8:	68bb      	ldr	r3, [r7, #8]
 8020aca:	681b      	ldr	r3, [r3, #0]
 8020acc:	4a0e      	ldr	r2, [pc, #56]	@ (8020b08 <sys_check_timeouts+0x6c>)
 8020ace:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8020ad0:	68bb      	ldr	r3, [r7, #8]
 8020ad2:	689b      	ldr	r3, [r3, #8]
 8020ad4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8020ad6:	68bb      	ldr	r3, [r7, #8]
 8020ad8:	68db      	ldr	r3, [r3, #12]
 8020ada:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8020adc:	68bb      	ldr	r3, [r7, #8]
 8020ade:	685b      	ldr	r3, [r3, #4]
 8020ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8020b0c <sys_check_timeouts+0x70>)
 8020ae2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8020ae4:	68b9      	ldr	r1, [r7, #8]
 8020ae6:	200a      	movs	r0, #10
 8020ae8:	f7f8 fd98 	bl	801961c <memp_free>
    if (handler != NULL) {
 8020aec:	687b      	ldr	r3, [r7, #4]
 8020aee:	2b00      	cmp	r3, #0
 8020af0:	d0da      	beq.n	8020aa8 <sys_check_timeouts+0xc>
      handler(arg);
 8020af2:	687b      	ldr	r3, [r7, #4]
 8020af4:	6838      	ldr	r0, [r7, #0]
 8020af6:	4798      	blx	r3
  do {
 8020af8:	e7d6      	b.n	8020aa8 <sys_check_timeouts+0xc>
      return;
 8020afa:	bf00      	nop
 8020afc:	e000      	b.n	8020b00 <sys_check_timeouts+0x64>
      return;
 8020afe:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8020b00:	3710      	adds	r7, #16
 8020b02:	46bd      	mov	sp, r7
 8020b04:	bd80      	pop	{r7, pc}
 8020b06:	bf00      	nop
 8020b08:	2400be9c 	.word	0x2400be9c
 8020b0c:	2400bea0 	.word	0x2400bea0

08020b10 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8020b10:	b580      	push	{r7, lr}
 8020b12:	b082      	sub	sp, #8
 8020b14:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8020b16:	4b16      	ldr	r3, [pc, #88]	@ (8020b70 <sys_timeouts_sleeptime+0x60>)
 8020b18:	681b      	ldr	r3, [r3, #0]
 8020b1a:	2b00      	cmp	r3, #0
 8020b1c:	d102      	bne.n	8020b24 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8020b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8020b22:	e020      	b.n	8020b66 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8020b24:	f7f1 fa16 	bl	8011f54 <sys_now>
 8020b28:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8020b2a:	4b11      	ldr	r3, [pc, #68]	@ (8020b70 <sys_timeouts_sleeptime+0x60>)
 8020b2c:	681b      	ldr	r3, [r3, #0]
 8020b2e:	685a      	ldr	r2, [r3, #4]
 8020b30:	687b      	ldr	r3, [r7, #4]
 8020b32:	1ad3      	subs	r3, r2, r3
 8020b34:	0fdb      	lsrs	r3, r3, #31
 8020b36:	f003 0301 	and.w	r3, r3, #1
 8020b3a:	b2db      	uxtb	r3, r3
 8020b3c:	2b00      	cmp	r3, #0
 8020b3e:	d001      	beq.n	8020b44 <sys_timeouts_sleeptime+0x34>
    return 0;
 8020b40:	2300      	movs	r3, #0
 8020b42:	e010      	b.n	8020b66 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8020b44:	4b0a      	ldr	r3, [pc, #40]	@ (8020b70 <sys_timeouts_sleeptime+0x60>)
 8020b46:	681b      	ldr	r3, [r3, #0]
 8020b48:	685a      	ldr	r2, [r3, #4]
 8020b4a:	687b      	ldr	r3, [r7, #4]
 8020b4c:	1ad3      	subs	r3, r2, r3
 8020b4e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8020b50:	683b      	ldr	r3, [r7, #0]
 8020b52:	2b00      	cmp	r3, #0
 8020b54:	da06      	bge.n	8020b64 <sys_timeouts_sleeptime+0x54>
 8020b56:	4b07      	ldr	r3, [pc, #28]	@ (8020b74 <sys_timeouts_sleeptime+0x64>)
 8020b58:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8020b5c:	4906      	ldr	r1, [pc, #24]	@ (8020b78 <sys_timeouts_sleeptime+0x68>)
 8020b5e:	4807      	ldr	r0, [pc, #28]	@ (8020b7c <sys_timeouts_sleeptime+0x6c>)
 8020b60:	f004 fb80 	bl	8025264 <iprintf>
    return ret;
 8020b64:	683b      	ldr	r3, [r7, #0]
  }
}
 8020b66:	4618      	mov	r0, r3
 8020b68:	3708      	adds	r7, #8
 8020b6a:	46bd      	mov	sp, r7
 8020b6c:	bd80      	pop	{r7, pc}
 8020b6e:	bf00      	nop
 8020b70:	2400be9c 	.word	0x2400be9c
 8020b74:	0802c1e8 	.word	0x0802c1e8
 8020b78:	0802c2bc 	.word	0x0802c2bc
 8020b7c:	0802c25c 	.word	0x0802c25c

08020b80 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8020b80:	b580      	push	{r7, lr}
 8020b82:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8020b84:	f003 fbb0 	bl	80242e8 <rand>
 8020b88:	4603      	mov	r3, r0
 8020b8a:	b29b      	uxth	r3, r3
 8020b8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8020b90:	b29b      	uxth	r3, r3
 8020b92:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8020b96:	b29a      	uxth	r2, r3
 8020b98:	4b01      	ldr	r3, [pc, #4]	@ (8020ba0 <udp_init+0x20>)
 8020b9a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8020b9c:	bf00      	nop
 8020b9e:	bd80      	pop	{r7, pc}
 8020ba0:	2400020c 	.word	0x2400020c

08020ba4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8020ba4:	b480      	push	{r7}
 8020ba6:	b083      	sub	sp, #12
 8020ba8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8020baa:	2300      	movs	r3, #0
 8020bac:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8020bae:	4b17      	ldr	r3, [pc, #92]	@ (8020c0c <udp_new_port+0x68>)
 8020bb0:	881b      	ldrh	r3, [r3, #0]
 8020bb2:	1c5a      	adds	r2, r3, #1
 8020bb4:	b291      	uxth	r1, r2
 8020bb6:	4a15      	ldr	r2, [pc, #84]	@ (8020c0c <udp_new_port+0x68>)
 8020bb8:	8011      	strh	r1, [r2, #0]
 8020bba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020bbe:	4293      	cmp	r3, r2
 8020bc0:	d103      	bne.n	8020bca <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8020bc2:	4b12      	ldr	r3, [pc, #72]	@ (8020c0c <udp_new_port+0x68>)
 8020bc4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8020bc8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020bca:	4b11      	ldr	r3, [pc, #68]	@ (8020c10 <udp_new_port+0x6c>)
 8020bcc:	681b      	ldr	r3, [r3, #0]
 8020bce:	603b      	str	r3, [r7, #0]
 8020bd0:	e011      	b.n	8020bf6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8020bd2:	683b      	ldr	r3, [r7, #0]
 8020bd4:	8a5a      	ldrh	r2, [r3, #18]
 8020bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8020c0c <udp_new_port+0x68>)
 8020bd8:	881b      	ldrh	r3, [r3, #0]
 8020bda:	429a      	cmp	r2, r3
 8020bdc:	d108      	bne.n	8020bf0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8020bde:	88fb      	ldrh	r3, [r7, #6]
 8020be0:	3301      	adds	r3, #1
 8020be2:	80fb      	strh	r3, [r7, #6]
 8020be4:	88fb      	ldrh	r3, [r7, #6]
 8020be6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8020bea:	d3e0      	bcc.n	8020bae <udp_new_port+0xa>
        return 0;
 8020bec:	2300      	movs	r3, #0
 8020bee:	e007      	b.n	8020c00 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020bf0:	683b      	ldr	r3, [r7, #0]
 8020bf2:	68db      	ldr	r3, [r3, #12]
 8020bf4:	603b      	str	r3, [r7, #0]
 8020bf6:	683b      	ldr	r3, [r7, #0]
 8020bf8:	2b00      	cmp	r3, #0
 8020bfa:	d1ea      	bne.n	8020bd2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8020bfc:	4b03      	ldr	r3, [pc, #12]	@ (8020c0c <udp_new_port+0x68>)
 8020bfe:	881b      	ldrh	r3, [r3, #0]
}
 8020c00:	4618      	mov	r0, r3
 8020c02:	370c      	adds	r7, #12
 8020c04:	46bd      	mov	sp, r7
 8020c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c0a:	4770      	bx	lr
 8020c0c:	2400020c 	.word	0x2400020c
 8020c10:	2400bea8 	.word	0x2400bea8

08020c14 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8020c14:	b580      	push	{r7, lr}
 8020c16:	b084      	sub	sp, #16
 8020c18:	af00      	add	r7, sp, #0
 8020c1a:	60f8      	str	r0, [r7, #12]
 8020c1c:	60b9      	str	r1, [r7, #8]
 8020c1e:	4613      	mov	r3, r2
 8020c20:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8020c22:	68fb      	ldr	r3, [r7, #12]
 8020c24:	2b00      	cmp	r3, #0
 8020c26:	d105      	bne.n	8020c34 <udp_input_local_match+0x20>
 8020c28:	4b27      	ldr	r3, [pc, #156]	@ (8020cc8 <udp_input_local_match+0xb4>)
 8020c2a:	2287      	movs	r2, #135	@ 0x87
 8020c2c:	4927      	ldr	r1, [pc, #156]	@ (8020ccc <udp_input_local_match+0xb8>)
 8020c2e:	4828      	ldr	r0, [pc, #160]	@ (8020cd0 <udp_input_local_match+0xbc>)
 8020c30:	f004 fb18 	bl	8025264 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8020c34:	68bb      	ldr	r3, [r7, #8]
 8020c36:	2b00      	cmp	r3, #0
 8020c38:	d105      	bne.n	8020c46 <udp_input_local_match+0x32>
 8020c3a:	4b23      	ldr	r3, [pc, #140]	@ (8020cc8 <udp_input_local_match+0xb4>)
 8020c3c:	2288      	movs	r2, #136	@ 0x88
 8020c3e:	4925      	ldr	r1, [pc, #148]	@ (8020cd4 <udp_input_local_match+0xc0>)
 8020c40:	4823      	ldr	r0, [pc, #140]	@ (8020cd0 <udp_input_local_match+0xbc>)
 8020c42:	f004 fb0f 	bl	8025264 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8020c46:	68fb      	ldr	r3, [r7, #12]
 8020c48:	7a1b      	ldrb	r3, [r3, #8]
 8020c4a:	2b00      	cmp	r3, #0
 8020c4c:	d00b      	beq.n	8020c66 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8020c4e:	68fb      	ldr	r3, [r7, #12]
 8020c50:	7a1a      	ldrb	r2, [r3, #8]
 8020c52:	4b21      	ldr	r3, [pc, #132]	@ (8020cd8 <udp_input_local_match+0xc4>)
 8020c54:	685b      	ldr	r3, [r3, #4]
 8020c56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8020c5a:	3301      	adds	r3, #1
 8020c5c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8020c5e:	429a      	cmp	r2, r3
 8020c60:	d001      	beq.n	8020c66 <udp_input_local_match+0x52>
    return 0;
 8020c62:	2300      	movs	r3, #0
 8020c64:	e02b      	b.n	8020cbe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8020c66:	79fb      	ldrb	r3, [r7, #7]
 8020c68:	2b00      	cmp	r3, #0
 8020c6a:	d018      	beq.n	8020c9e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020c6c:	68fb      	ldr	r3, [r7, #12]
 8020c6e:	2b00      	cmp	r3, #0
 8020c70:	d013      	beq.n	8020c9a <udp_input_local_match+0x86>
 8020c72:	68fb      	ldr	r3, [r7, #12]
 8020c74:	681b      	ldr	r3, [r3, #0]
 8020c76:	2b00      	cmp	r3, #0
 8020c78:	d00f      	beq.n	8020c9a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8020c7a:	4b17      	ldr	r3, [pc, #92]	@ (8020cd8 <udp_input_local_match+0xc4>)
 8020c7c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020c82:	d00a      	beq.n	8020c9a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8020c84:	68fb      	ldr	r3, [r7, #12]
 8020c86:	681a      	ldr	r2, [r3, #0]
 8020c88:	4b13      	ldr	r3, [pc, #76]	@ (8020cd8 <udp_input_local_match+0xc4>)
 8020c8a:	695b      	ldr	r3, [r3, #20]
 8020c8c:	405a      	eors	r2, r3
 8020c8e:	68bb      	ldr	r3, [r7, #8]
 8020c90:	3308      	adds	r3, #8
 8020c92:	681b      	ldr	r3, [r3, #0]
 8020c94:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8020c96:	2b00      	cmp	r3, #0
 8020c98:	d110      	bne.n	8020cbc <udp_input_local_match+0xa8>
          return 1;
 8020c9a:	2301      	movs	r3, #1
 8020c9c:	e00f      	b.n	8020cbe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8020c9e:	68fb      	ldr	r3, [r7, #12]
 8020ca0:	2b00      	cmp	r3, #0
 8020ca2:	d009      	beq.n	8020cb8 <udp_input_local_match+0xa4>
 8020ca4:	68fb      	ldr	r3, [r7, #12]
 8020ca6:	681b      	ldr	r3, [r3, #0]
 8020ca8:	2b00      	cmp	r3, #0
 8020caa:	d005      	beq.n	8020cb8 <udp_input_local_match+0xa4>
 8020cac:	68fb      	ldr	r3, [r7, #12]
 8020cae:	681a      	ldr	r2, [r3, #0]
 8020cb0:	4b09      	ldr	r3, [pc, #36]	@ (8020cd8 <udp_input_local_match+0xc4>)
 8020cb2:	695b      	ldr	r3, [r3, #20]
 8020cb4:	429a      	cmp	r2, r3
 8020cb6:	d101      	bne.n	8020cbc <udp_input_local_match+0xa8>
        return 1;
 8020cb8:	2301      	movs	r3, #1
 8020cba:	e000      	b.n	8020cbe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8020cbc:	2300      	movs	r3, #0
}
 8020cbe:	4618      	mov	r0, r3
 8020cc0:	3710      	adds	r7, #16
 8020cc2:	46bd      	mov	sp, r7
 8020cc4:	bd80      	pop	{r7, pc}
 8020cc6:	bf00      	nop
 8020cc8:	0802c2d0 	.word	0x0802c2d0
 8020ccc:	0802c300 	.word	0x0802c300
 8020cd0:	0802c324 	.word	0x0802c324
 8020cd4:	0802c34c 	.word	0x0802c34c
 8020cd8:	24008d4c 	.word	0x24008d4c

08020cdc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8020cdc:	b590      	push	{r4, r7, lr}
 8020cde:	b08d      	sub	sp, #52	@ 0x34
 8020ce0:	af02      	add	r7, sp, #8
 8020ce2:	6078      	str	r0, [r7, #4]
 8020ce4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8020ce6:	2300      	movs	r3, #0
 8020ce8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8020cea:	687b      	ldr	r3, [r7, #4]
 8020cec:	2b00      	cmp	r3, #0
 8020cee:	d105      	bne.n	8020cfc <udp_input+0x20>
 8020cf0:	4b7c      	ldr	r3, [pc, #496]	@ (8020ee4 <udp_input+0x208>)
 8020cf2:	22cf      	movs	r2, #207	@ 0xcf
 8020cf4:	497c      	ldr	r1, [pc, #496]	@ (8020ee8 <udp_input+0x20c>)
 8020cf6:	487d      	ldr	r0, [pc, #500]	@ (8020eec <udp_input+0x210>)
 8020cf8:	f004 fab4 	bl	8025264 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8020cfc:	683b      	ldr	r3, [r7, #0]
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	d105      	bne.n	8020d0e <udp_input+0x32>
 8020d02:	4b78      	ldr	r3, [pc, #480]	@ (8020ee4 <udp_input+0x208>)
 8020d04:	22d0      	movs	r2, #208	@ 0xd0
 8020d06:	497a      	ldr	r1, [pc, #488]	@ (8020ef0 <udp_input+0x214>)
 8020d08:	4878      	ldr	r0, [pc, #480]	@ (8020eec <udp_input+0x210>)
 8020d0a:	f004 faab 	bl	8025264 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8020d0e:	687b      	ldr	r3, [r7, #4]
 8020d10:	895b      	ldrh	r3, [r3, #10]
 8020d12:	2b07      	cmp	r3, #7
 8020d14:	d803      	bhi.n	8020d1e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8020d16:	6878      	ldr	r0, [r7, #4]
 8020d18:	f7f9 fb56 	bl	801a3c8 <pbuf_free>
    goto end;
 8020d1c:	e0de      	b.n	8020edc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8020d1e:	687b      	ldr	r3, [r7, #4]
 8020d20:	685b      	ldr	r3, [r3, #4]
 8020d22:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8020d24:	4b73      	ldr	r3, [pc, #460]	@ (8020ef4 <udp_input+0x218>)
 8020d26:	695b      	ldr	r3, [r3, #20]
 8020d28:	4a72      	ldr	r2, [pc, #456]	@ (8020ef4 <udp_input+0x218>)
 8020d2a:	6812      	ldr	r2, [r2, #0]
 8020d2c:	4611      	mov	r1, r2
 8020d2e:	4618      	mov	r0, r3
 8020d30:	f001 ffa6 	bl	8022c80 <ip4_addr_isbroadcast_u32>
 8020d34:	4603      	mov	r3, r0
 8020d36:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8020d38:	697b      	ldr	r3, [r7, #20]
 8020d3a:	881b      	ldrh	r3, [r3, #0]
 8020d3c:	b29b      	uxth	r3, r3
 8020d3e:	4618      	mov	r0, r3
 8020d40:	f7f7 fe66 	bl	8018a10 <lwip_htons>
 8020d44:	4603      	mov	r3, r0
 8020d46:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8020d48:	697b      	ldr	r3, [r7, #20]
 8020d4a:	885b      	ldrh	r3, [r3, #2]
 8020d4c:	b29b      	uxth	r3, r3
 8020d4e:	4618      	mov	r0, r3
 8020d50:	f7f7 fe5e 	bl	8018a10 <lwip_htons>
 8020d54:	4603      	mov	r3, r0
 8020d56:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8020d58:	2300      	movs	r3, #0
 8020d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8020d5c:	2300      	movs	r3, #0
 8020d5e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8020d60:	2300      	movs	r3, #0
 8020d62:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020d64:	4b64      	ldr	r3, [pc, #400]	@ (8020ef8 <udp_input+0x21c>)
 8020d66:	681b      	ldr	r3, [r3, #0]
 8020d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8020d6a:	e054      	b.n	8020e16 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8020d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020d6e:	8a5b      	ldrh	r3, [r3, #18]
 8020d70:	89fa      	ldrh	r2, [r7, #14]
 8020d72:	429a      	cmp	r2, r3
 8020d74:	d14a      	bne.n	8020e0c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8020d76:	7cfb      	ldrb	r3, [r7, #19]
 8020d78:	461a      	mov	r2, r3
 8020d7a:	6839      	ldr	r1, [r7, #0]
 8020d7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8020d7e:	f7ff ff49 	bl	8020c14 <udp_input_local_match>
 8020d82:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8020d84:	2b00      	cmp	r3, #0
 8020d86:	d041      	beq.n	8020e0c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8020d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020d8a:	7c1b      	ldrb	r3, [r3, #16]
 8020d8c:	f003 0304 	and.w	r3, r3, #4
 8020d90:	2b00      	cmp	r3, #0
 8020d92:	d11d      	bne.n	8020dd0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8020d94:	69fb      	ldr	r3, [r7, #28]
 8020d96:	2b00      	cmp	r3, #0
 8020d98:	d102      	bne.n	8020da0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8020d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020d9c:	61fb      	str	r3, [r7, #28]
 8020d9e:	e017      	b.n	8020dd0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8020da0:	7cfb      	ldrb	r3, [r7, #19]
 8020da2:	2b00      	cmp	r3, #0
 8020da4:	d014      	beq.n	8020dd0 <udp_input+0xf4>
 8020da6:	4b53      	ldr	r3, [pc, #332]	@ (8020ef4 <udp_input+0x218>)
 8020da8:	695b      	ldr	r3, [r3, #20]
 8020daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020dae:	d10f      	bne.n	8020dd0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8020db0:	69fb      	ldr	r3, [r7, #28]
 8020db2:	681a      	ldr	r2, [r3, #0]
 8020db4:	683b      	ldr	r3, [r7, #0]
 8020db6:	3304      	adds	r3, #4
 8020db8:	681b      	ldr	r3, [r3, #0]
 8020dba:	429a      	cmp	r2, r3
 8020dbc:	d008      	beq.n	8020dd0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8020dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020dc0:	681a      	ldr	r2, [r3, #0]
 8020dc2:	683b      	ldr	r3, [r7, #0]
 8020dc4:	3304      	adds	r3, #4
 8020dc6:	681b      	ldr	r3, [r3, #0]
 8020dc8:	429a      	cmp	r2, r3
 8020dca:	d101      	bne.n	8020dd0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8020dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020dce:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8020dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020dd2:	8a9b      	ldrh	r3, [r3, #20]
 8020dd4:	8a3a      	ldrh	r2, [r7, #16]
 8020dd6:	429a      	cmp	r2, r3
 8020dd8:	d118      	bne.n	8020e0c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8020dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020ddc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8020dde:	2b00      	cmp	r3, #0
 8020de0:	d005      	beq.n	8020dee <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8020de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020de4:	685a      	ldr	r2, [r3, #4]
 8020de6:	4b43      	ldr	r3, [pc, #268]	@ (8020ef4 <udp_input+0x218>)
 8020de8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8020dea:	429a      	cmp	r2, r3
 8020dec:	d10e      	bne.n	8020e0c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8020dee:	6a3b      	ldr	r3, [r7, #32]
 8020df0:	2b00      	cmp	r3, #0
 8020df2:	d014      	beq.n	8020e1e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8020df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020df6:	68da      	ldr	r2, [r3, #12]
 8020df8:	6a3b      	ldr	r3, [r7, #32]
 8020dfa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8020dfc:	4b3e      	ldr	r3, [pc, #248]	@ (8020ef8 <udp_input+0x21c>)
 8020dfe:	681a      	ldr	r2, [r3, #0]
 8020e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e02:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8020e04:	4a3c      	ldr	r2, [pc, #240]	@ (8020ef8 <udp_input+0x21c>)
 8020e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e08:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8020e0a:	e008      	b.n	8020e1e <udp_input+0x142>
      }
    }

    prev = pcb;
 8020e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e0e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e12:	68db      	ldr	r3, [r3, #12]
 8020e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8020e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e18:	2b00      	cmp	r3, #0
 8020e1a:	d1a7      	bne.n	8020d6c <udp_input+0x90>
 8020e1c:	e000      	b.n	8020e20 <udp_input+0x144>
        break;
 8020e1e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8020e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e22:	2b00      	cmp	r3, #0
 8020e24:	d101      	bne.n	8020e2a <udp_input+0x14e>
    pcb = uncon_pcb;
 8020e26:	69fb      	ldr	r3, [r7, #28]
 8020e28:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8020e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e2c:	2b00      	cmp	r3, #0
 8020e2e:	d002      	beq.n	8020e36 <udp_input+0x15a>
    for_us = 1;
 8020e30:	2301      	movs	r3, #1
 8020e32:	76fb      	strb	r3, [r7, #27]
 8020e34:	e00a      	b.n	8020e4c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8020e36:	683b      	ldr	r3, [r7, #0]
 8020e38:	3304      	adds	r3, #4
 8020e3a:	681a      	ldr	r2, [r3, #0]
 8020e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8020ef4 <udp_input+0x218>)
 8020e3e:	695b      	ldr	r3, [r3, #20]
 8020e40:	429a      	cmp	r2, r3
 8020e42:	bf0c      	ite	eq
 8020e44:	2301      	moveq	r3, #1
 8020e46:	2300      	movne	r3, #0
 8020e48:	b2db      	uxtb	r3, r3
 8020e4a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8020e4c:	7efb      	ldrb	r3, [r7, #27]
 8020e4e:	2b00      	cmp	r3, #0
 8020e50:	d041      	beq.n	8020ed6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8020e52:	2108      	movs	r1, #8
 8020e54:	6878      	ldr	r0, [r7, #4]
 8020e56:	f7f9 f9ff 	bl	801a258 <pbuf_remove_header>
 8020e5a:	4603      	mov	r3, r0
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	d00a      	beq.n	8020e76 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8020e60:	4b20      	ldr	r3, [pc, #128]	@ (8020ee4 <udp_input+0x208>)
 8020e62:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8020e66:	4925      	ldr	r1, [pc, #148]	@ (8020efc <udp_input+0x220>)
 8020e68:	4820      	ldr	r0, [pc, #128]	@ (8020eec <udp_input+0x210>)
 8020e6a:	f004 f9fb 	bl	8025264 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8020e6e:	6878      	ldr	r0, [r7, #4]
 8020e70:	f7f9 faaa 	bl	801a3c8 <pbuf_free>
      goto end;
 8020e74:	e032      	b.n	8020edc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8020e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e78:	2b00      	cmp	r3, #0
 8020e7a:	d012      	beq.n	8020ea2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8020e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e7e:	699b      	ldr	r3, [r3, #24]
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	d00a      	beq.n	8020e9a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8020e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e86:	699c      	ldr	r4, [r3, #24]
 8020e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e8a:	69d8      	ldr	r0, [r3, #28]
 8020e8c:	8a3b      	ldrh	r3, [r7, #16]
 8020e8e:	9300      	str	r3, [sp, #0]
 8020e90:	4b1b      	ldr	r3, [pc, #108]	@ (8020f00 <udp_input+0x224>)
 8020e92:	687a      	ldr	r2, [r7, #4]
 8020e94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8020e96:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8020e98:	e021      	b.n	8020ede <udp_input+0x202>
        pbuf_free(p);
 8020e9a:	6878      	ldr	r0, [r7, #4]
 8020e9c:	f7f9 fa94 	bl	801a3c8 <pbuf_free>
        goto end;
 8020ea0:	e01c      	b.n	8020edc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8020ea2:	7cfb      	ldrb	r3, [r7, #19]
 8020ea4:	2b00      	cmp	r3, #0
 8020ea6:	d112      	bne.n	8020ece <udp_input+0x1f2>
 8020ea8:	4b12      	ldr	r3, [pc, #72]	@ (8020ef4 <udp_input+0x218>)
 8020eaa:	695b      	ldr	r3, [r3, #20]
 8020eac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8020eb0:	2be0      	cmp	r3, #224	@ 0xe0
 8020eb2:	d00c      	beq.n	8020ece <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8020eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8020ef4 <udp_input+0x218>)
 8020eb6:	899b      	ldrh	r3, [r3, #12]
 8020eb8:	3308      	adds	r3, #8
 8020eba:	b29b      	uxth	r3, r3
 8020ebc:	b21b      	sxth	r3, r3
 8020ebe:	4619      	mov	r1, r3
 8020ec0:	6878      	ldr	r0, [r7, #4]
 8020ec2:	f7f9 fa3c 	bl	801a33e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8020ec6:	2103      	movs	r1, #3
 8020ec8:	6878      	ldr	r0, [r7, #4]
 8020eca:	f001 fbaf 	bl	802262c <icmp_dest_unreach>
      pbuf_free(p);
 8020ece:	6878      	ldr	r0, [r7, #4]
 8020ed0:	f7f9 fa7a 	bl	801a3c8 <pbuf_free>
  return;
 8020ed4:	e003      	b.n	8020ede <udp_input+0x202>
    pbuf_free(p);
 8020ed6:	6878      	ldr	r0, [r7, #4]
 8020ed8:	f7f9 fa76 	bl	801a3c8 <pbuf_free>
  return;
 8020edc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8020ede:	372c      	adds	r7, #44	@ 0x2c
 8020ee0:	46bd      	mov	sp, r7
 8020ee2:	bd90      	pop	{r4, r7, pc}
 8020ee4:	0802c2d0 	.word	0x0802c2d0
 8020ee8:	0802c374 	.word	0x0802c374
 8020eec:	0802c324 	.word	0x0802c324
 8020ef0:	0802c38c 	.word	0x0802c38c
 8020ef4:	24008d4c 	.word	0x24008d4c
 8020ef8:	2400bea8 	.word	0x2400bea8
 8020efc:	0802c3a8 	.word	0x0802c3a8
 8020f00:	24008d5c 	.word	0x24008d5c

08020f04 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8020f04:	b580      	push	{r7, lr}
 8020f06:	b082      	sub	sp, #8
 8020f08:	af00      	add	r7, sp, #0
 8020f0a:	6078      	str	r0, [r7, #4]
 8020f0c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8020f0e:	687b      	ldr	r3, [r7, #4]
 8020f10:	2b00      	cmp	r3, #0
 8020f12:	d109      	bne.n	8020f28 <udp_send+0x24>
 8020f14:	4b11      	ldr	r3, [pc, #68]	@ (8020f5c <udp_send+0x58>)
 8020f16:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8020f1a:	4911      	ldr	r1, [pc, #68]	@ (8020f60 <udp_send+0x5c>)
 8020f1c:	4811      	ldr	r0, [pc, #68]	@ (8020f64 <udp_send+0x60>)
 8020f1e:	f004 f9a1 	bl	8025264 <iprintf>
 8020f22:	f06f 030f 	mvn.w	r3, #15
 8020f26:	e015      	b.n	8020f54 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8020f28:	683b      	ldr	r3, [r7, #0]
 8020f2a:	2b00      	cmp	r3, #0
 8020f2c:	d109      	bne.n	8020f42 <udp_send+0x3e>
 8020f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8020f5c <udp_send+0x58>)
 8020f30:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8020f34:	490c      	ldr	r1, [pc, #48]	@ (8020f68 <udp_send+0x64>)
 8020f36:	480b      	ldr	r0, [pc, #44]	@ (8020f64 <udp_send+0x60>)
 8020f38:	f004 f994 	bl	8025264 <iprintf>
 8020f3c:	f06f 030f 	mvn.w	r3, #15
 8020f40:	e008      	b.n	8020f54 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8020f42:	687b      	ldr	r3, [r7, #4]
 8020f44:	1d1a      	adds	r2, r3, #4
 8020f46:	687b      	ldr	r3, [r7, #4]
 8020f48:	8a9b      	ldrh	r3, [r3, #20]
 8020f4a:	6839      	ldr	r1, [r7, #0]
 8020f4c:	6878      	ldr	r0, [r7, #4]
 8020f4e:	f000 f80d 	bl	8020f6c <udp_sendto>
 8020f52:	4603      	mov	r3, r0
}
 8020f54:	4618      	mov	r0, r3
 8020f56:	3708      	adds	r7, #8
 8020f58:	46bd      	mov	sp, r7
 8020f5a:	bd80      	pop	{r7, pc}
 8020f5c:	0802c2d0 	.word	0x0802c2d0
 8020f60:	0802c3c4 	.word	0x0802c3c4
 8020f64:	0802c324 	.word	0x0802c324
 8020f68:	0802c3dc 	.word	0x0802c3dc

08020f6c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8020f6c:	b580      	push	{r7, lr}
 8020f6e:	b088      	sub	sp, #32
 8020f70:	af02      	add	r7, sp, #8
 8020f72:	60f8      	str	r0, [r7, #12]
 8020f74:	60b9      	str	r1, [r7, #8]
 8020f76:	607a      	str	r2, [r7, #4]
 8020f78:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8020f7a:	68fb      	ldr	r3, [r7, #12]
 8020f7c:	2b00      	cmp	r3, #0
 8020f7e:	d109      	bne.n	8020f94 <udp_sendto+0x28>
 8020f80:	4b23      	ldr	r3, [pc, #140]	@ (8021010 <udp_sendto+0xa4>)
 8020f82:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8020f86:	4923      	ldr	r1, [pc, #140]	@ (8021014 <udp_sendto+0xa8>)
 8020f88:	4823      	ldr	r0, [pc, #140]	@ (8021018 <udp_sendto+0xac>)
 8020f8a:	f004 f96b 	bl	8025264 <iprintf>
 8020f8e:	f06f 030f 	mvn.w	r3, #15
 8020f92:	e038      	b.n	8021006 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8020f94:	68bb      	ldr	r3, [r7, #8]
 8020f96:	2b00      	cmp	r3, #0
 8020f98:	d109      	bne.n	8020fae <udp_sendto+0x42>
 8020f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8021010 <udp_sendto+0xa4>)
 8020f9c:	f240 2219 	movw	r2, #537	@ 0x219
 8020fa0:	491e      	ldr	r1, [pc, #120]	@ (802101c <udp_sendto+0xb0>)
 8020fa2:	481d      	ldr	r0, [pc, #116]	@ (8021018 <udp_sendto+0xac>)
 8020fa4:	f004 f95e 	bl	8025264 <iprintf>
 8020fa8:	f06f 030f 	mvn.w	r3, #15
 8020fac:	e02b      	b.n	8021006 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8020fae:	687b      	ldr	r3, [r7, #4]
 8020fb0:	2b00      	cmp	r3, #0
 8020fb2:	d109      	bne.n	8020fc8 <udp_sendto+0x5c>
 8020fb4:	4b16      	ldr	r3, [pc, #88]	@ (8021010 <udp_sendto+0xa4>)
 8020fb6:	f240 221a 	movw	r2, #538	@ 0x21a
 8020fba:	4919      	ldr	r1, [pc, #100]	@ (8021020 <udp_sendto+0xb4>)
 8020fbc:	4816      	ldr	r0, [pc, #88]	@ (8021018 <udp_sendto+0xac>)
 8020fbe:	f004 f951 	bl	8025264 <iprintf>
 8020fc2:	f06f 030f 	mvn.w	r3, #15
 8020fc6:	e01e      	b.n	8021006 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8020fc8:	68fb      	ldr	r3, [r7, #12]
 8020fca:	7a1b      	ldrb	r3, [r3, #8]
 8020fcc:	2b00      	cmp	r3, #0
 8020fce:	d006      	beq.n	8020fde <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8020fd0:	68fb      	ldr	r3, [r7, #12]
 8020fd2:	7a1b      	ldrb	r3, [r3, #8]
 8020fd4:	4618      	mov	r0, r3
 8020fd6:	f7f8 fe37 	bl	8019c48 <netif_get_by_index>
 8020fda:	6178      	str	r0, [r7, #20]
 8020fdc:	e003      	b.n	8020fe6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8020fde:	6878      	ldr	r0, [r7, #4]
 8020fe0:	f001 fbb8 	bl	8022754 <ip4_route>
 8020fe4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8020fe6:	697b      	ldr	r3, [r7, #20]
 8020fe8:	2b00      	cmp	r3, #0
 8020fea:	d102      	bne.n	8020ff2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8020fec:	f06f 0303 	mvn.w	r3, #3
 8020ff0:	e009      	b.n	8021006 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8020ff2:	887a      	ldrh	r2, [r7, #2]
 8020ff4:	697b      	ldr	r3, [r7, #20]
 8020ff6:	9300      	str	r3, [sp, #0]
 8020ff8:	4613      	mov	r3, r2
 8020ffa:	687a      	ldr	r2, [r7, #4]
 8020ffc:	68b9      	ldr	r1, [r7, #8]
 8020ffe:	68f8      	ldr	r0, [r7, #12]
 8021000:	f000 f810 	bl	8021024 <udp_sendto_if>
 8021004:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8021006:	4618      	mov	r0, r3
 8021008:	3718      	adds	r7, #24
 802100a:	46bd      	mov	sp, r7
 802100c:	bd80      	pop	{r7, pc}
 802100e:	bf00      	nop
 8021010:	0802c2d0 	.word	0x0802c2d0
 8021014:	0802c3f4 	.word	0x0802c3f4
 8021018:	0802c324 	.word	0x0802c324
 802101c:	0802c40c 	.word	0x0802c40c
 8021020:	0802c428 	.word	0x0802c428

08021024 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8021024:	b580      	push	{r7, lr}
 8021026:	b088      	sub	sp, #32
 8021028:	af02      	add	r7, sp, #8
 802102a:	60f8      	str	r0, [r7, #12]
 802102c:	60b9      	str	r1, [r7, #8]
 802102e:	607a      	str	r2, [r7, #4]
 8021030:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8021032:	68fb      	ldr	r3, [r7, #12]
 8021034:	2b00      	cmp	r3, #0
 8021036:	d109      	bne.n	802104c <udp_sendto_if+0x28>
 8021038:	4b2e      	ldr	r3, [pc, #184]	@ (80210f4 <udp_sendto_if+0xd0>)
 802103a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 802103e:	492e      	ldr	r1, [pc, #184]	@ (80210f8 <udp_sendto_if+0xd4>)
 8021040:	482e      	ldr	r0, [pc, #184]	@ (80210fc <udp_sendto_if+0xd8>)
 8021042:	f004 f90f 	bl	8025264 <iprintf>
 8021046:	f06f 030f 	mvn.w	r3, #15
 802104a:	e04f      	b.n	80210ec <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 802104c:	68bb      	ldr	r3, [r7, #8]
 802104e:	2b00      	cmp	r3, #0
 8021050:	d109      	bne.n	8021066 <udp_sendto_if+0x42>
 8021052:	4b28      	ldr	r3, [pc, #160]	@ (80210f4 <udp_sendto_if+0xd0>)
 8021054:	f240 2281 	movw	r2, #641	@ 0x281
 8021058:	4929      	ldr	r1, [pc, #164]	@ (8021100 <udp_sendto_if+0xdc>)
 802105a:	4828      	ldr	r0, [pc, #160]	@ (80210fc <udp_sendto_if+0xd8>)
 802105c:	f004 f902 	bl	8025264 <iprintf>
 8021060:	f06f 030f 	mvn.w	r3, #15
 8021064:	e042      	b.n	80210ec <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021066:	687b      	ldr	r3, [r7, #4]
 8021068:	2b00      	cmp	r3, #0
 802106a:	d109      	bne.n	8021080 <udp_sendto_if+0x5c>
 802106c:	4b21      	ldr	r3, [pc, #132]	@ (80210f4 <udp_sendto_if+0xd0>)
 802106e:	f240 2282 	movw	r2, #642	@ 0x282
 8021072:	4924      	ldr	r1, [pc, #144]	@ (8021104 <udp_sendto_if+0xe0>)
 8021074:	4821      	ldr	r0, [pc, #132]	@ (80210fc <udp_sendto_if+0xd8>)
 8021076:	f004 f8f5 	bl	8025264 <iprintf>
 802107a:	f06f 030f 	mvn.w	r3, #15
 802107e:	e035      	b.n	80210ec <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8021080:	6a3b      	ldr	r3, [r7, #32]
 8021082:	2b00      	cmp	r3, #0
 8021084:	d109      	bne.n	802109a <udp_sendto_if+0x76>
 8021086:	4b1b      	ldr	r3, [pc, #108]	@ (80210f4 <udp_sendto_if+0xd0>)
 8021088:	f240 2283 	movw	r2, #643	@ 0x283
 802108c:	491e      	ldr	r1, [pc, #120]	@ (8021108 <udp_sendto_if+0xe4>)
 802108e:	481b      	ldr	r0, [pc, #108]	@ (80210fc <udp_sendto_if+0xd8>)
 8021090:	f004 f8e8 	bl	8025264 <iprintf>
 8021094:	f06f 030f 	mvn.w	r3, #15
 8021098:	e028      	b.n	80210ec <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 802109a:	68fb      	ldr	r3, [r7, #12]
 802109c:	2b00      	cmp	r3, #0
 802109e:	d009      	beq.n	80210b4 <udp_sendto_if+0x90>
 80210a0:	68fb      	ldr	r3, [r7, #12]
 80210a2:	681b      	ldr	r3, [r3, #0]
 80210a4:	2b00      	cmp	r3, #0
 80210a6:	d005      	beq.n	80210b4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80210a8:	68fb      	ldr	r3, [r7, #12]
 80210aa:	681b      	ldr	r3, [r3, #0]
 80210ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80210b0:	2be0      	cmp	r3, #224	@ 0xe0
 80210b2:	d103      	bne.n	80210bc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80210b4:	6a3b      	ldr	r3, [r7, #32]
 80210b6:	3304      	adds	r3, #4
 80210b8:	617b      	str	r3, [r7, #20]
 80210ba:	e00b      	b.n	80210d4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80210bc:	68fb      	ldr	r3, [r7, #12]
 80210be:	681a      	ldr	r2, [r3, #0]
 80210c0:	6a3b      	ldr	r3, [r7, #32]
 80210c2:	3304      	adds	r3, #4
 80210c4:	681b      	ldr	r3, [r3, #0]
 80210c6:	429a      	cmp	r2, r3
 80210c8:	d002      	beq.n	80210d0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80210ca:	f06f 0303 	mvn.w	r3, #3
 80210ce:	e00d      	b.n	80210ec <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80210d0:	68fb      	ldr	r3, [r7, #12]
 80210d2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80210d4:	887a      	ldrh	r2, [r7, #2]
 80210d6:	697b      	ldr	r3, [r7, #20]
 80210d8:	9301      	str	r3, [sp, #4]
 80210da:	6a3b      	ldr	r3, [r7, #32]
 80210dc:	9300      	str	r3, [sp, #0]
 80210de:	4613      	mov	r3, r2
 80210e0:	687a      	ldr	r2, [r7, #4]
 80210e2:	68b9      	ldr	r1, [r7, #8]
 80210e4:	68f8      	ldr	r0, [r7, #12]
 80210e6:	f000 f811 	bl	802110c <udp_sendto_if_src>
 80210ea:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80210ec:	4618      	mov	r0, r3
 80210ee:	3718      	adds	r7, #24
 80210f0:	46bd      	mov	sp, r7
 80210f2:	bd80      	pop	{r7, pc}
 80210f4:	0802c2d0 	.word	0x0802c2d0
 80210f8:	0802c444 	.word	0x0802c444
 80210fc:	0802c324 	.word	0x0802c324
 8021100:	0802c460 	.word	0x0802c460
 8021104:	0802c47c 	.word	0x0802c47c
 8021108:	0802c49c 	.word	0x0802c49c

0802110c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 802110c:	b580      	push	{r7, lr}
 802110e:	b08c      	sub	sp, #48	@ 0x30
 8021110:	af04      	add	r7, sp, #16
 8021112:	60f8      	str	r0, [r7, #12]
 8021114:	60b9      	str	r1, [r7, #8]
 8021116:	607a      	str	r2, [r7, #4]
 8021118:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 802111a:	68fb      	ldr	r3, [r7, #12]
 802111c:	2b00      	cmp	r3, #0
 802111e:	d109      	bne.n	8021134 <udp_sendto_if_src+0x28>
 8021120:	4b65      	ldr	r3, [pc, #404]	@ (80212b8 <udp_sendto_if_src+0x1ac>)
 8021122:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8021126:	4965      	ldr	r1, [pc, #404]	@ (80212bc <udp_sendto_if_src+0x1b0>)
 8021128:	4865      	ldr	r0, [pc, #404]	@ (80212c0 <udp_sendto_if_src+0x1b4>)
 802112a:	f004 f89b 	bl	8025264 <iprintf>
 802112e:	f06f 030f 	mvn.w	r3, #15
 8021132:	e0bc      	b.n	80212ae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8021134:	68bb      	ldr	r3, [r7, #8]
 8021136:	2b00      	cmp	r3, #0
 8021138:	d109      	bne.n	802114e <udp_sendto_if_src+0x42>
 802113a:	4b5f      	ldr	r3, [pc, #380]	@ (80212b8 <udp_sendto_if_src+0x1ac>)
 802113c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8021140:	4960      	ldr	r1, [pc, #384]	@ (80212c4 <udp_sendto_if_src+0x1b8>)
 8021142:	485f      	ldr	r0, [pc, #380]	@ (80212c0 <udp_sendto_if_src+0x1b4>)
 8021144:	f004 f88e 	bl	8025264 <iprintf>
 8021148:	f06f 030f 	mvn.w	r3, #15
 802114c:	e0af      	b.n	80212ae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 802114e:	687b      	ldr	r3, [r7, #4]
 8021150:	2b00      	cmp	r3, #0
 8021152:	d109      	bne.n	8021168 <udp_sendto_if_src+0x5c>
 8021154:	4b58      	ldr	r3, [pc, #352]	@ (80212b8 <udp_sendto_if_src+0x1ac>)
 8021156:	f240 22d3 	movw	r2, #723	@ 0x2d3
 802115a:	495b      	ldr	r1, [pc, #364]	@ (80212c8 <udp_sendto_if_src+0x1bc>)
 802115c:	4858      	ldr	r0, [pc, #352]	@ (80212c0 <udp_sendto_if_src+0x1b4>)
 802115e:	f004 f881 	bl	8025264 <iprintf>
 8021162:	f06f 030f 	mvn.w	r3, #15
 8021166:	e0a2      	b.n	80212ae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8021168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802116a:	2b00      	cmp	r3, #0
 802116c:	d109      	bne.n	8021182 <udp_sendto_if_src+0x76>
 802116e:	4b52      	ldr	r3, [pc, #328]	@ (80212b8 <udp_sendto_if_src+0x1ac>)
 8021170:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8021174:	4955      	ldr	r1, [pc, #340]	@ (80212cc <udp_sendto_if_src+0x1c0>)
 8021176:	4852      	ldr	r0, [pc, #328]	@ (80212c0 <udp_sendto_if_src+0x1b4>)
 8021178:	f004 f874 	bl	8025264 <iprintf>
 802117c:	f06f 030f 	mvn.w	r3, #15
 8021180:	e095      	b.n	80212ae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8021182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021184:	2b00      	cmp	r3, #0
 8021186:	d109      	bne.n	802119c <udp_sendto_if_src+0x90>
 8021188:	4b4b      	ldr	r3, [pc, #300]	@ (80212b8 <udp_sendto_if_src+0x1ac>)
 802118a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 802118e:	4950      	ldr	r1, [pc, #320]	@ (80212d0 <udp_sendto_if_src+0x1c4>)
 8021190:	484b      	ldr	r0, [pc, #300]	@ (80212c0 <udp_sendto_if_src+0x1b4>)
 8021192:	f004 f867 	bl	8025264 <iprintf>
 8021196:	f06f 030f 	mvn.w	r3, #15
 802119a:	e088      	b.n	80212ae <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 802119c:	68fb      	ldr	r3, [r7, #12]
 802119e:	8a5b      	ldrh	r3, [r3, #18]
 80211a0:	2b00      	cmp	r3, #0
 80211a2:	d10f      	bne.n	80211c4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80211a4:	68f9      	ldr	r1, [r7, #12]
 80211a6:	68fb      	ldr	r3, [r7, #12]
 80211a8:	8a5b      	ldrh	r3, [r3, #18]
 80211aa:	461a      	mov	r2, r3
 80211ac:	68f8      	ldr	r0, [r7, #12]
 80211ae:	f000 f893 	bl	80212d8 <udp_bind>
 80211b2:	4603      	mov	r3, r0
 80211b4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80211b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80211ba:	2b00      	cmp	r3, #0
 80211bc:	d002      	beq.n	80211c4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80211be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80211c2:	e074      	b.n	80212ae <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80211c4:	68bb      	ldr	r3, [r7, #8]
 80211c6:	891b      	ldrh	r3, [r3, #8]
 80211c8:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80211cc:	4293      	cmp	r3, r2
 80211ce:	d902      	bls.n	80211d6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80211d0:	f04f 33ff 	mov.w	r3, #4294967295
 80211d4:	e06b      	b.n	80212ae <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80211d6:	2108      	movs	r1, #8
 80211d8:	68b8      	ldr	r0, [r7, #8]
 80211da:	f7f9 f82d 	bl	801a238 <pbuf_add_header>
 80211de:	4603      	mov	r3, r0
 80211e0:	2b00      	cmp	r3, #0
 80211e2:	d015      	beq.n	8021210 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80211e4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80211e8:	2108      	movs	r1, #8
 80211ea:	2022      	movs	r0, #34	@ 0x22
 80211ec:	f7f8 fdd6 	bl	8019d9c <pbuf_alloc>
 80211f0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80211f2:	69fb      	ldr	r3, [r7, #28]
 80211f4:	2b00      	cmp	r3, #0
 80211f6:	d102      	bne.n	80211fe <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80211f8:	f04f 33ff 	mov.w	r3, #4294967295
 80211fc:	e057      	b.n	80212ae <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80211fe:	68bb      	ldr	r3, [r7, #8]
 8021200:	891b      	ldrh	r3, [r3, #8]
 8021202:	2b00      	cmp	r3, #0
 8021204:	d006      	beq.n	8021214 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8021206:	68b9      	ldr	r1, [r7, #8]
 8021208:	69f8      	ldr	r0, [r7, #28]
 802120a:	f7f9 fa01 	bl	801a610 <pbuf_chain>
 802120e:	e001      	b.n	8021214 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8021210:	68bb      	ldr	r3, [r7, #8]
 8021212:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8021214:	69fb      	ldr	r3, [r7, #28]
 8021216:	895b      	ldrh	r3, [r3, #10]
 8021218:	2b07      	cmp	r3, #7
 802121a:	d806      	bhi.n	802122a <udp_sendto_if_src+0x11e>
 802121c:	4b26      	ldr	r3, [pc, #152]	@ (80212b8 <udp_sendto_if_src+0x1ac>)
 802121e:	f240 320d 	movw	r2, #781	@ 0x30d
 8021222:	492c      	ldr	r1, [pc, #176]	@ (80212d4 <udp_sendto_if_src+0x1c8>)
 8021224:	4826      	ldr	r0, [pc, #152]	@ (80212c0 <udp_sendto_if_src+0x1b4>)
 8021226:	f004 f81d 	bl	8025264 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 802122a:	69fb      	ldr	r3, [r7, #28]
 802122c:	685b      	ldr	r3, [r3, #4]
 802122e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8021230:	68fb      	ldr	r3, [r7, #12]
 8021232:	8a5b      	ldrh	r3, [r3, #18]
 8021234:	4618      	mov	r0, r3
 8021236:	f7f7 fbeb 	bl	8018a10 <lwip_htons>
 802123a:	4603      	mov	r3, r0
 802123c:	461a      	mov	r2, r3
 802123e:	697b      	ldr	r3, [r7, #20]
 8021240:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8021242:	887b      	ldrh	r3, [r7, #2]
 8021244:	4618      	mov	r0, r3
 8021246:	f7f7 fbe3 	bl	8018a10 <lwip_htons>
 802124a:	4603      	mov	r3, r0
 802124c:	461a      	mov	r2, r3
 802124e:	697b      	ldr	r3, [r7, #20]
 8021250:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8021252:	697b      	ldr	r3, [r7, #20]
 8021254:	2200      	movs	r2, #0
 8021256:	719a      	strb	r2, [r3, #6]
 8021258:	2200      	movs	r2, #0
 802125a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 802125c:	69fb      	ldr	r3, [r7, #28]
 802125e:	891b      	ldrh	r3, [r3, #8]
 8021260:	4618      	mov	r0, r3
 8021262:	f7f7 fbd5 	bl	8018a10 <lwip_htons>
 8021266:	4603      	mov	r3, r0
 8021268:	461a      	mov	r2, r3
 802126a:	697b      	ldr	r3, [r7, #20]
 802126c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 802126e:	2311      	movs	r3, #17
 8021270:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8021272:	68fb      	ldr	r3, [r7, #12]
 8021274:	7adb      	ldrb	r3, [r3, #11]
 8021276:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8021278:	68fb      	ldr	r3, [r7, #12]
 802127a:	7a9b      	ldrb	r3, [r3, #10]
 802127c:	7cb9      	ldrb	r1, [r7, #18]
 802127e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021280:	9202      	str	r2, [sp, #8]
 8021282:	7cfa      	ldrb	r2, [r7, #19]
 8021284:	9201      	str	r2, [sp, #4]
 8021286:	9300      	str	r3, [sp, #0]
 8021288:	460b      	mov	r3, r1
 802128a:	687a      	ldr	r2, [r7, #4]
 802128c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802128e:	69f8      	ldr	r0, [r7, #28]
 8021290:	f001 fc48 	bl	8022b24 <ip4_output_if_src>
 8021294:	4603      	mov	r3, r0
 8021296:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8021298:	69fa      	ldr	r2, [r7, #28]
 802129a:	68bb      	ldr	r3, [r7, #8]
 802129c:	429a      	cmp	r2, r3
 802129e:	d004      	beq.n	80212aa <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80212a0:	69f8      	ldr	r0, [r7, #28]
 80212a2:	f7f9 f891 	bl	801a3c8 <pbuf_free>
    q = NULL;
 80212a6:	2300      	movs	r3, #0
 80212a8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80212aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80212ae:	4618      	mov	r0, r3
 80212b0:	3720      	adds	r7, #32
 80212b2:	46bd      	mov	sp, r7
 80212b4:	bd80      	pop	{r7, pc}
 80212b6:	bf00      	nop
 80212b8:	0802c2d0 	.word	0x0802c2d0
 80212bc:	0802c4bc 	.word	0x0802c4bc
 80212c0:	0802c324 	.word	0x0802c324
 80212c4:	0802c4dc 	.word	0x0802c4dc
 80212c8:	0802c4fc 	.word	0x0802c4fc
 80212cc:	0802c520 	.word	0x0802c520
 80212d0:	0802c544 	.word	0x0802c544
 80212d4:	0802c568 	.word	0x0802c568

080212d8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80212d8:	b580      	push	{r7, lr}
 80212da:	b086      	sub	sp, #24
 80212dc:	af00      	add	r7, sp, #0
 80212de:	60f8      	str	r0, [r7, #12]
 80212e0:	60b9      	str	r1, [r7, #8]
 80212e2:	4613      	mov	r3, r2
 80212e4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80212e6:	68bb      	ldr	r3, [r7, #8]
 80212e8:	2b00      	cmp	r3, #0
 80212ea:	d101      	bne.n	80212f0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80212ec:	4b39      	ldr	r3, [pc, #228]	@ (80213d4 <udp_bind+0xfc>)
 80212ee:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80212f0:	68fb      	ldr	r3, [r7, #12]
 80212f2:	2b00      	cmp	r3, #0
 80212f4:	d109      	bne.n	802130a <udp_bind+0x32>
 80212f6:	4b38      	ldr	r3, [pc, #224]	@ (80213d8 <udp_bind+0x100>)
 80212f8:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80212fc:	4937      	ldr	r1, [pc, #220]	@ (80213dc <udp_bind+0x104>)
 80212fe:	4838      	ldr	r0, [pc, #224]	@ (80213e0 <udp_bind+0x108>)
 8021300:	f003 ffb0 	bl	8025264 <iprintf>
 8021304:	f06f 030f 	mvn.w	r3, #15
 8021308:	e060      	b.n	80213cc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 802130a:	2300      	movs	r3, #0
 802130c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802130e:	4b35      	ldr	r3, [pc, #212]	@ (80213e4 <udp_bind+0x10c>)
 8021310:	681b      	ldr	r3, [r3, #0]
 8021312:	617b      	str	r3, [r7, #20]
 8021314:	e009      	b.n	802132a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8021316:	68fa      	ldr	r2, [r7, #12]
 8021318:	697b      	ldr	r3, [r7, #20]
 802131a:	429a      	cmp	r2, r3
 802131c:	d102      	bne.n	8021324 <udp_bind+0x4c>
      rebind = 1;
 802131e:	2301      	movs	r3, #1
 8021320:	74fb      	strb	r3, [r7, #19]
      break;
 8021322:	e005      	b.n	8021330 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021324:	697b      	ldr	r3, [r7, #20]
 8021326:	68db      	ldr	r3, [r3, #12]
 8021328:	617b      	str	r3, [r7, #20]
 802132a:	697b      	ldr	r3, [r7, #20]
 802132c:	2b00      	cmp	r3, #0
 802132e:	d1f2      	bne.n	8021316 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8021330:	88fb      	ldrh	r3, [r7, #6]
 8021332:	2b00      	cmp	r3, #0
 8021334:	d109      	bne.n	802134a <udp_bind+0x72>
    port = udp_new_port();
 8021336:	f7ff fc35 	bl	8020ba4 <udp_new_port>
 802133a:	4603      	mov	r3, r0
 802133c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 802133e:	88fb      	ldrh	r3, [r7, #6]
 8021340:	2b00      	cmp	r3, #0
 8021342:	d12c      	bne.n	802139e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8021344:	f06f 0307 	mvn.w	r3, #7
 8021348:	e040      	b.n	80213cc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802134a:	4b26      	ldr	r3, [pc, #152]	@ (80213e4 <udp_bind+0x10c>)
 802134c:	681b      	ldr	r3, [r3, #0]
 802134e:	617b      	str	r3, [r7, #20]
 8021350:	e022      	b.n	8021398 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8021352:	68fa      	ldr	r2, [r7, #12]
 8021354:	697b      	ldr	r3, [r7, #20]
 8021356:	429a      	cmp	r2, r3
 8021358:	d01b      	beq.n	8021392 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 802135a:	697b      	ldr	r3, [r7, #20]
 802135c:	8a5b      	ldrh	r3, [r3, #18]
 802135e:	88fa      	ldrh	r2, [r7, #6]
 8021360:	429a      	cmp	r2, r3
 8021362:	d116      	bne.n	8021392 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021364:	697b      	ldr	r3, [r7, #20]
 8021366:	681a      	ldr	r2, [r3, #0]
 8021368:	68bb      	ldr	r3, [r7, #8]
 802136a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 802136c:	429a      	cmp	r2, r3
 802136e:	d00d      	beq.n	802138c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021370:	68bb      	ldr	r3, [r7, #8]
 8021372:	2b00      	cmp	r3, #0
 8021374:	d00a      	beq.n	802138c <udp_bind+0xb4>
 8021376:	68bb      	ldr	r3, [r7, #8]
 8021378:	681b      	ldr	r3, [r3, #0]
 802137a:	2b00      	cmp	r3, #0
 802137c:	d006      	beq.n	802138c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 802137e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021380:	2b00      	cmp	r3, #0
 8021382:	d003      	beq.n	802138c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8021384:	697b      	ldr	r3, [r7, #20]
 8021386:	681b      	ldr	r3, [r3, #0]
 8021388:	2b00      	cmp	r3, #0
 802138a:	d102      	bne.n	8021392 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 802138c:	f06f 0307 	mvn.w	r3, #7
 8021390:	e01c      	b.n	80213cc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021392:	697b      	ldr	r3, [r7, #20]
 8021394:	68db      	ldr	r3, [r3, #12]
 8021396:	617b      	str	r3, [r7, #20]
 8021398:	697b      	ldr	r3, [r7, #20]
 802139a:	2b00      	cmp	r3, #0
 802139c:	d1d9      	bne.n	8021352 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 802139e:	68bb      	ldr	r3, [r7, #8]
 80213a0:	2b00      	cmp	r3, #0
 80213a2:	d002      	beq.n	80213aa <udp_bind+0xd2>
 80213a4:	68bb      	ldr	r3, [r7, #8]
 80213a6:	681b      	ldr	r3, [r3, #0]
 80213a8:	e000      	b.n	80213ac <udp_bind+0xd4>
 80213aa:	2300      	movs	r3, #0
 80213ac:	68fa      	ldr	r2, [r7, #12]
 80213ae:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80213b0:	68fb      	ldr	r3, [r7, #12]
 80213b2:	88fa      	ldrh	r2, [r7, #6]
 80213b4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80213b6:	7cfb      	ldrb	r3, [r7, #19]
 80213b8:	2b00      	cmp	r3, #0
 80213ba:	d106      	bne.n	80213ca <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80213bc:	4b09      	ldr	r3, [pc, #36]	@ (80213e4 <udp_bind+0x10c>)
 80213be:	681a      	ldr	r2, [r3, #0]
 80213c0:	68fb      	ldr	r3, [r7, #12]
 80213c2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80213c4:	4a07      	ldr	r2, [pc, #28]	@ (80213e4 <udp_bind+0x10c>)
 80213c6:	68fb      	ldr	r3, [r7, #12]
 80213c8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80213ca:	2300      	movs	r3, #0
}
 80213cc:	4618      	mov	r0, r3
 80213ce:	3718      	adds	r7, #24
 80213d0:	46bd      	mov	sp, r7
 80213d2:	bd80      	pop	{r7, pc}
 80213d4:	0802cf18 	.word	0x0802cf18
 80213d8:	0802c2d0 	.word	0x0802c2d0
 80213dc:	0802c598 	.word	0x0802c598
 80213e0:	0802c324 	.word	0x0802c324
 80213e4:	2400bea8 	.word	0x2400bea8

080213e8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80213e8:	b580      	push	{r7, lr}
 80213ea:	b084      	sub	sp, #16
 80213ec:	af00      	add	r7, sp, #0
 80213ee:	60f8      	str	r0, [r7, #12]
 80213f0:	60b9      	str	r1, [r7, #8]
 80213f2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80213f4:	68fb      	ldr	r3, [r7, #12]
 80213f6:	2b00      	cmp	r3, #0
 80213f8:	d107      	bne.n	802140a <udp_recv+0x22>
 80213fa:	4b08      	ldr	r3, [pc, #32]	@ (802141c <udp_recv+0x34>)
 80213fc:	f240 428a 	movw	r2, #1162	@ 0x48a
 8021400:	4907      	ldr	r1, [pc, #28]	@ (8021420 <udp_recv+0x38>)
 8021402:	4808      	ldr	r0, [pc, #32]	@ (8021424 <udp_recv+0x3c>)
 8021404:	f003 ff2e 	bl	8025264 <iprintf>
 8021408:	e005      	b.n	8021416 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 802140a:	68fb      	ldr	r3, [r7, #12]
 802140c:	68ba      	ldr	r2, [r7, #8]
 802140e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8021410:	68fb      	ldr	r3, [r7, #12]
 8021412:	687a      	ldr	r2, [r7, #4]
 8021414:	61da      	str	r2, [r3, #28]
}
 8021416:	3710      	adds	r7, #16
 8021418:	46bd      	mov	sp, r7
 802141a:	bd80      	pop	{r7, pc}
 802141c:	0802c2d0 	.word	0x0802c2d0
 8021420:	0802c604 	.word	0x0802c604
 8021424:	0802c324 	.word	0x0802c324

08021428 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8021428:	b580      	push	{r7, lr}
 802142a:	b084      	sub	sp, #16
 802142c:	af00      	add	r7, sp, #0
 802142e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8021430:	687b      	ldr	r3, [r7, #4]
 8021432:	2b00      	cmp	r3, #0
 8021434:	d107      	bne.n	8021446 <udp_remove+0x1e>
 8021436:	4b19      	ldr	r3, [pc, #100]	@ (802149c <udp_remove+0x74>)
 8021438:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 802143c:	4918      	ldr	r1, [pc, #96]	@ (80214a0 <udp_remove+0x78>)
 802143e:	4819      	ldr	r0, [pc, #100]	@ (80214a4 <udp_remove+0x7c>)
 8021440:	f003 ff10 	bl	8025264 <iprintf>
 8021444:	e026      	b.n	8021494 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8021446:	4b18      	ldr	r3, [pc, #96]	@ (80214a8 <udp_remove+0x80>)
 8021448:	681b      	ldr	r3, [r3, #0]
 802144a:	687a      	ldr	r2, [r7, #4]
 802144c:	429a      	cmp	r2, r3
 802144e:	d105      	bne.n	802145c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8021450:	4b15      	ldr	r3, [pc, #84]	@ (80214a8 <udp_remove+0x80>)
 8021452:	681b      	ldr	r3, [r3, #0]
 8021454:	68db      	ldr	r3, [r3, #12]
 8021456:	4a14      	ldr	r2, [pc, #80]	@ (80214a8 <udp_remove+0x80>)
 8021458:	6013      	str	r3, [r2, #0]
 802145a:	e017      	b.n	802148c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 802145c:	4b12      	ldr	r3, [pc, #72]	@ (80214a8 <udp_remove+0x80>)
 802145e:	681b      	ldr	r3, [r3, #0]
 8021460:	60fb      	str	r3, [r7, #12]
 8021462:	e010      	b.n	8021486 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8021464:	68fb      	ldr	r3, [r7, #12]
 8021466:	68db      	ldr	r3, [r3, #12]
 8021468:	2b00      	cmp	r3, #0
 802146a:	d009      	beq.n	8021480 <udp_remove+0x58>
 802146c:	68fb      	ldr	r3, [r7, #12]
 802146e:	68db      	ldr	r3, [r3, #12]
 8021470:	687a      	ldr	r2, [r7, #4]
 8021472:	429a      	cmp	r2, r3
 8021474:	d104      	bne.n	8021480 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8021476:	687b      	ldr	r3, [r7, #4]
 8021478:	68da      	ldr	r2, [r3, #12]
 802147a:	68fb      	ldr	r3, [r7, #12]
 802147c:	60da      	str	r2, [r3, #12]
        break;
 802147e:	e005      	b.n	802148c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8021480:	68fb      	ldr	r3, [r7, #12]
 8021482:	68db      	ldr	r3, [r3, #12]
 8021484:	60fb      	str	r3, [r7, #12]
 8021486:	68fb      	ldr	r3, [r7, #12]
 8021488:	2b00      	cmp	r3, #0
 802148a:	d1eb      	bne.n	8021464 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 802148c:	6879      	ldr	r1, [r7, #4]
 802148e:	2000      	movs	r0, #0
 8021490:	f7f8 f8c4 	bl	801961c <memp_free>
}
 8021494:	3710      	adds	r7, #16
 8021496:	46bd      	mov	sp, r7
 8021498:	bd80      	pop	{r7, pc}
 802149a:	bf00      	nop
 802149c:	0802c2d0 	.word	0x0802c2d0
 80214a0:	0802c61c 	.word	0x0802c61c
 80214a4:	0802c324 	.word	0x0802c324
 80214a8:	2400bea8 	.word	0x2400bea8

080214ac <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80214ac:	b580      	push	{r7, lr}
 80214ae:	b082      	sub	sp, #8
 80214b0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80214b2:	2000      	movs	r0, #0
 80214b4:	f7f8 f83c 	bl	8019530 <memp_malloc>
 80214b8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80214ba:	687b      	ldr	r3, [r7, #4]
 80214bc:	2b00      	cmp	r3, #0
 80214be:	d007      	beq.n	80214d0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80214c0:	2220      	movs	r2, #32
 80214c2:	2100      	movs	r1, #0
 80214c4:	6878      	ldr	r0, [r7, #4]
 80214c6:	f003 ffb9 	bl	802543c <memset>
    pcb->ttl = UDP_TTL;
 80214ca:	687b      	ldr	r3, [r7, #4]
 80214cc:	22ff      	movs	r2, #255	@ 0xff
 80214ce:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80214d0:	687b      	ldr	r3, [r7, #4]
}
 80214d2:	4618      	mov	r0, r3
 80214d4:	3708      	adds	r7, #8
 80214d6:	46bd      	mov	sp, r7
 80214d8:	bd80      	pop	{r7, pc}

080214da <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80214da:	b580      	push	{r7, lr}
 80214dc:	b084      	sub	sp, #16
 80214de:	af00      	add	r7, sp, #0
 80214e0:	4603      	mov	r3, r0
 80214e2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80214e4:	f7ff ffe2 	bl	80214ac <udp_new>
 80214e8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80214ea:	68fb      	ldr	r3, [r7, #12]
}
 80214ec:	4618      	mov	r0, r3
 80214ee:	3710      	adds	r7, #16
 80214f0:	46bd      	mov	sp, r7
 80214f2:	bd80      	pop	{r7, pc}

080214f4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80214f4:	b480      	push	{r7}
 80214f6:	b085      	sub	sp, #20
 80214f8:	af00      	add	r7, sp, #0
 80214fa:	6078      	str	r0, [r7, #4]
 80214fc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80214fe:	687b      	ldr	r3, [r7, #4]
 8021500:	2b00      	cmp	r3, #0
 8021502:	d01e      	beq.n	8021542 <udp_netif_ip_addr_changed+0x4e>
 8021504:	687b      	ldr	r3, [r7, #4]
 8021506:	681b      	ldr	r3, [r3, #0]
 8021508:	2b00      	cmp	r3, #0
 802150a:	d01a      	beq.n	8021542 <udp_netif_ip_addr_changed+0x4e>
 802150c:	683b      	ldr	r3, [r7, #0]
 802150e:	2b00      	cmp	r3, #0
 8021510:	d017      	beq.n	8021542 <udp_netif_ip_addr_changed+0x4e>
 8021512:	683b      	ldr	r3, [r7, #0]
 8021514:	681b      	ldr	r3, [r3, #0]
 8021516:	2b00      	cmp	r3, #0
 8021518:	d013      	beq.n	8021542 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 802151a:	4b0d      	ldr	r3, [pc, #52]	@ (8021550 <udp_netif_ip_addr_changed+0x5c>)
 802151c:	681b      	ldr	r3, [r3, #0]
 802151e:	60fb      	str	r3, [r7, #12]
 8021520:	e00c      	b.n	802153c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8021522:	68fb      	ldr	r3, [r7, #12]
 8021524:	681a      	ldr	r2, [r3, #0]
 8021526:	687b      	ldr	r3, [r7, #4]
 8021528:	681b      	ldr	r3, [r3, #0]
 802152a:	429a      	cmp	r2, r3
 802152c:	d103      	bne.n	8021536 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 802152e:	683b      	ldr	r3, [r7, #0]
 8021530:	681a      	ldr	r2, [r3, #0]
 8021532:	68fb      	ldr	r3, [r7, #12]
 8021534:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8021536:	68fb      	ldr	r3, [r7, #12]
 8021538:	68db      	ldr	r3, [r3, #12]
 802153a:	60fb      	str	r3, [r7, #12]
 802153c:	68fb      	ldr	r3, [r7, #12]
 802153e:	2b00      	cmp	r3, #0
 8021540:	d1ef      	bne.n	8021522 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8021542:	bf00      	nop
 8021544:	3714      	adds	r7, #20
 8021546:	46bd      	mov	sp, r7
 8021548:	f85d 7b04 	ldr.w	r7, [sp], #4
 802154c:	4770      	bx	lr
 802154e:	bf00      	nop
 8021550:	2400bea8 	.word	0x2400bea8

08021554 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8021554:	b580      	push	{r7, lr}
 8021556:	b082      	sub	sp, #8
 8021558:	af00      	add	r7, sp, #0
 802155a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 802155c:	4915      	ldr	r1, [pc, #84]	@ (80215b4 <etharp_free_entry+0x60>)
 802155e:	687a      	ldr	r2, [r7, #4]
 8021560:	4613      	mov	r3, r2
 8021562:	005b      	lsls	r3, r3, #1
 8021564:	4413      	add	r3, r2
 8021566:	00db      	lsls	r3, r3, #3
 8021568:	440b      	add	r3, r1
 802156a:	681b      	ldr	r3, [r3, #0]
 802156c:	2b00      	cmp	r3, #0
 802156e:	d013      	beq.n	8021598 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8021570:	4910      	ldr	r1, [pc, #64]	@ (80215b4 <etharp_free_entry+0x60>)
 8021572:	687a      	ldr	r2, [r7, #4]
 8021574:	4613      	mov	r3, r2
 8021576:	005b      	lsls	r3, r3, #1
 8021578:	4413      	add	r3, r2
 802157a:	00db      	lsls	r3, r3, #3
 802157c:	440b      	add	r3, r1
 802157e:	681b      	ldr	r3, [r3, #0]
 8021580:	4618      	mov	r0, r3
 8021582:	f7f8 ff21 	bl	801a3c8 <pbuf_free>
    arp_table[i].q = NULL;
 8021586:	490b      	ldr	r1, [pc, #44]	@ (80215b4 <etharp_free_entry+0x60>)
 8021588:	687a      	ldr	r2, [r7, #4]
 802158a:	4613      	mov	r3, r2
 802158c:	005b      	lsls	r3, r3, #1
 802158e:	4413      	add	r3, r2
 8021590:	00db      	lsls	r3, r3, #3
 8021592:	440b      	add	r3, r1
 8021594:	2200      	movs	r2, #0
 8021596:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8021598:	4906      	ldr	r1, [pc, #24]	@ (80215b4 <etharp_free_entry+0x60>)
 802159a:	687a      	ldr	r2, [r7, #4]
 802159c:	4613      	mov	r3, r2
 802159e:	005b      	lsls	r3, r3, #1
 80215a0:	4413      	add	r3, r2
 80215a2:	00db      	lsls	r3, r3, #3
 80215a4:	440b      	add	r3, r1
 80215a6:	3314      	adds	r3, #20
 80215a8:	2200      	movs	r2, #0
 80215aa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80215ac:	bf00      	nop
 80215ae:	3708      	adds	r7, #8
 80215b0:	46bd      	mov	sp, r7
 80215b2:	bd80      	pop	{r7, pc}
 80215b4:	2400beac 	.word	0x2400beac

080215b8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80215b8:	b580      	push	{r7, lr}
 80215ba:	b082      	sub	sp, #8
 80215bc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80215be:	2300      	movs	r3, #0
 80215c0:	607b      	str	r3, [r7, #4]
 80215c2:	e096      	b.n	80216f2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80215c4:	494f      	ldr	r1, [pc, #316]	@ (8021704 <etharp_tmr+0x14c>)
 80215c6:	687a      	ldr	r2, [r7, #4]
 80215c8:	4613      	mov	r3, r2
 80215ca:	005b      	lsls	r3, r3, #1
 80215cc:	4413      	add	r3, r2
 80215ce:	00db      	lsls	r3, r3, #3
 80215d0:	440b      	add	r3, r1
 80215d2:	3314      	adds	r3, #20
 80215d4:	781b      	ldrb	r3, [r3, #0]
 80215d6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80215d8:	78fb      	ldrb	r3, [r7, #3]
 80215da:	2b00      	cmp	r3, #0
 80215dc:	f000 8086 	beq.w	80216ec <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80215e0:	4948      	ldr	r1, [pc, #288]	@ (8021704 <etharp_tmr+0x14c>)
 80215e2:	687a      	ldr	r2, [r7, #4]
 80215e4:	4613      	mov	r3, r2
 80215e6:	005b      	lsls	r3, r3, #1
 80215e8:	4413      	add	r3, r2
 80215ea:	00db      	lsls	r3, r3, #3
 80215ec:	440b      	add	r3, r1
 80215ee:	3312      	adds	r3, #18
 80215f0:	881b      	ldrh	r3, [r3, #0]
 80215f2:	3301      	adds	r3, #1
 80215f4:	b298      	uxth	r0, r3
 80215f6:	4943      	ldr	r1, [pc, #268]	@ (8021704 <etharp_tmr+0x14c>)
 80215f8:	687a      	ldr	r2, [r7, #4]
 80215fa:	4613      	mov	r3, r2
 80215fc:	005b      	lsls	r3, r3, #1
 80215fe:	4413      	add	r3, r2
 8021600:	00db      	lsls	r3, r3, #3
 8021602:	440b      	add	r3, r1
 8021604:	3312      	adds	r3, #18
 8021606:	4602      	mov	r2, r0
 8021608:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802160a:	493e      	ldr	r1, [pc, #248]	@ (8021704 <etharp_tmr+0x14c>)
 802160c:	687a      	ldr	r2, [r7, #4]
 802160e:	4613      	mov	r3, r2
 8021610:	005b      	lsls	r3, r3, #1
 8021612:	4413      	add	r3, r2
 8021614:	00db      	lsls	r3, r3, #3
 8021616:	440b      	add	r3, r1
 8021618:	3312      	adds	r3, #18
 802161a:	881b      	ldrh	r3, [r3, #0]
 802161c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8021620:	d215      	bcs.n	802164e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8021622:	4938      	ldr	r1, [pc, #224]	@ (8021704 <etharp_tmr+0x14c>)
 8021624:	687a      	ldr	r2, [r7, #4]
 8021626:	4613      	mov	r3, r2
 8021628:	005b      	lsls	r3, r3, #1
 802162a:	4413      	add	r3, r2
 802162c:	00db      	lsls	r3, r3, #3
 802162e:	440b      	add	r3, r1
 8021630:	3314      	adds	r3, #20
 8021632:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8021634:	2b01      	cmp	r3, #1
 8021636:	d10e      	bne.n	8021656 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8021638:	4932      	ldr	r1, [pc, #200]	@ (8021704 <etharp_tmr+0x14c>)
 802163a:	687a      	ldr	r2, [r7, #4]
 802163c:	4613      	mov	r3, r2
 802163e:	005b      	lsls	r3, r3, #1
 8021640:	4413      	add	r3, r2
 8021642:	00db      	lsls	r3, r3, #3
 8021644:	440b      	add	r3, r1
 8021646:	3312      	adds	r3, #18
 8021648:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 802164a:	2b04      	cmp	r3, #4
 802164c:	d903      	bls.n	8021656 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 802164e:	6878      	ldr	r0, [r7, #4]
 8021650:	f7ff ff80 	bl	8021554 <etharp_free_entry>
 8021654:	e04a      	b.n	80216ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8021656:	492b      	ldr	r1, [pc, #172]	@ (8021704 <etharp_tmr+0x14c>)
 8021658:	687a      	ldr	r2, [r7, #4]
 802165a:	4613      	mov	r3, r2
 802165c:	005b      	lsls	r3, r3, #1
 802165e:	4413      	add	r3, r2
 8021660:	00db      	lsls	r3, r3, #3
 8021662:	440b      	add	r3, r1
 8021664:	3314      	adds	r3, #20
 8021666:	781b      	ldrb	r3, [r3, #0]
 8021668:	2b03      	cmp	r3, #3
 802166a:	d10a      	bne.n	8021682 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 802166c:	4925      	ldr	r1, [pc, #148]	@ (8021704 <etharp_tmr+0x14c>)
 802166e:	687a      	ldr	r2, [r7, #4]
 8021670:	4613      	mov	r3, r2
 8021672:	005b      	lsls	r3, r3, #1
 8021674:	4413      	add	r3, r2
 8021676:	00db      	lsls	r3, r3, #3
 8021678:	440b      	add	r3, r1
 802167a:	3314      	adds	r3, #20
 802167c:	2204      	movs	r2, #4
 802167e:	701a      	strb	r2, [r3, #0]
 8021680:	e034      	b.n	80216ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8021682:	4920      	ldr	r1, [pc, #128]	@ (8021704 <etharp_tmr+0x14c>)
 8021684:	687a      	ldr	r2, [r7, #4]
 8021686:	4613      	mov	r3, r2
 8021688:	005b      	lsls	r3, r3, #1
 802168a:	4413      	add	r3, r2
 802168c:	00db      	lsls	r3, r3, #3
 802168e:	440b      	add	r3, r1
 8021690:	3314      	adds	r3, #20
 8021692:	781b      	ldrb	r3, [r3, #0]
 8021694:	2b04      	cmp	r3, #4
 8021696:	d10a      	bne.n	80216ae <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8021698:	491a      	ldr	r1, [pc, #104]	@ (8021704 <etharp_tmr+0x14c>)
 802169a:	687a      	ldr	r2, [r7, #4]
 802169c:	4613      	mov	r3, r2
 802169e:	005b      	lsls	r3, r3, #1
 80216a0:	4413      	add	r3, r2
 80216a2:	00db      	lsls	r3, r3, #3
 80216a4:	440b      	add	r3, r1
 80216a6:	3314      	adds	r3, #20
 80216a8:	2202      	movs	r2, #2
 80216aa:	701a      	strb	r2, [r3, #0]
 80216ac:	e01e      	b.n	80216ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80216ae:	4915      	ldr	r1, [pc, #84]	@ (8021704 <etharp_tmr+0x14c>)
 80216b0:	687a      	ldr	r2, [r7, #4]
 80216b2:	4613      	mov	r3, r2
 80216b4:	005b      	lsls	r3, r3, #1
 80216b6:	4413      	add	r3, r2
 80216b8:	00db      	lsls	r3, r3, #3
 80216ba:	440b      	add	r3, r1
 80216bc:	3314      	adds	r3, #20
 80216be:	781b      	ldrb	r3, [r3, #0]
 80216c0:	2b01      	cmp	r3, #1
 80216c2:	d113      	bne.n	80216ec <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80216c4:	490f      	ldr	r1, [pc, #60]	@ (8021704 <etharp_tmr+0x14c>)
 80216c6:	687a      	ldr	r2, [r7, #4]
 80216c8:	4613      	mov	r3, r2
 80216ca:	005b      	lsls	r3, r3, #1
 80216cc:	4413      	add	r3, r2
 80216ce:	00db      	lsls	r3, r3, #3
 80216d0:	440b      	add	r3, r1
 80216d2:	3308      	adds	r3, #8
 80216d4:	6818      	ldr	r0, [r3, #0]
 80216d6:	687a      	ldr	r2, [r7, #4]
 80216d8:	4613      	mov	r3, r2
 80216da:	005b      	lsls	r3, r3, #1
 80216dc:	4413      	add	r3, r2
 80216de:	00db      	lsls	r3, r3, #3
 80216e0:	4a08      	ldr	r2, [pc, #32]	@ (8021704 <etharp_tmr+0x14c>)
 80216e2:	4413      	add	r3, r2
 80216e4:	3304      	adds	r3, #4
 80216e6:	4619      	mov	r1, r3
 80216e8:	f000 fe6e 	bl	80223c8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80216ec:	687b      	ldr	r3, [r7, #4]
 80216ee:	3301      	adds	r3, #1
 80216f0:	607b      	str	r3, [r7, #4]
 80216f2:	687b      	ldr	r3, [r7, #4]
 80216f4:	2b09      	cmp	r3, #9
 80216f6:	f77f af65 	ble.w	80215c4 <etharp_tmr+0xc>
      }
    }
  }
}
 80216fa:	bf00      	nop
 80216fc:	bf00      	nop
 80216fe:	3708      	adds	r7, #8
 8021700:	46bd      	mov	sp, r7
 8021702:	bd80      	pop	{r7, pc}
 8021704:	2400beac 	.word	0x2400beac

08021708 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8021708:	b580      	push	{r7, lr}
 802170a:	b08a      	sub	sp, #40	@ 0x28
 802170c:	af00      	add	r7, sp, #0
 802170e:	60f8      	str	r0, [r7, #12]
 8021710:	460b      	mov	r3, r1
 8021712:	607a      	str	r2, [r7, #4]
 8021714:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8021716:	230a      	movs	r3, #10
 8021718:	84fb      	strh	r3, [r7, #38]	@ 0x26
 802171a:	230a      	movs	r3, #10
 802171c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 802171e:	230a      	movs	r3, #10
 8021720:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8021722:	2300      	movs	r3, #0
 8021724:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8021726:	230a      	movs	r3, #10
 8021728:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 802172a:	2300      	movs	r3, #0
 802172c:	83bb      	strh	r3, [r7, #28]
 802172e:	2300      	movs	r3, #0
 8021730:	837b      	strh	r3, [r7, #26]
 8021732:	2300      	movs	r3, #0
 8021734:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021736:	2300      	movs	r3, #0
 8021738:	843b      	strh	r3, [r7, #32]
 802173a:	e0ae      	b.n	802189a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 802173c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021740:	49a6      	ldr	r1, [pc, #664]	@ (80219dc <etharp_find_entry+0x2d4>)
 8021742:	4613      	mov	r3, r2
 8021744:	005b      	lsls	r3, r3, #1
 8021746:	4413      	add	r3, r2
 8021748:	00db      	lsls	r3, r3, #3
 802174a:	440b      	add	r3, r1
 802174c:	3314      	adds	r3, #20
 802174e:	781b      	ldrb	r3, [r3, #0]
 8021750:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8021752:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8021756:	2b0a      	cmp	r3, #10
 8021758:	d105      	bne.n	8021766 <etharp_find_entry+0x5e>
 802175a:	7dfb      	ldrb	r3, [r7, #23]
 802175c:	2b00      	cmp	r3, #0
 802175e:	d102      	bne.n	8021766 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8021760:	8c3b      	ldrh	r3, [r7, #32]
 8021762:	847b      	strh	r3, [r7, #34]	@ 0x22
 8021764:	e095      	b.n	8021892 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8021766:	7dfb      	ldrb	r3, [r7, #23]
 8021768:	2b00      	cmp	r3, #0
 802176a:	f000 8092 	beq.w	8021892 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 802176e:	7dfb      	ldrb	r3, [r7, #23]
 8021770:	2b01      	cmp	r3, #1
 8021772:	d009      	beq.n	8021788 <etharp_find_entry+0x80>
 8021774:	7dfb      	ldrb	r3, [r7, #23]
 8021776:	2b01      	cmp	r3, #1
 8021778:	d806      	bhi.n	8021788 <etharp_find_entry+0x80>
 802177a:	4b99      	ldr	r3, [pc, #612]	@ (80219e0 <etharp_find_entry+0x2d8>)
 802177c:	f240 1223 	movw	r2, #291	@ 0x123
 8021780:	4998      	ldr	r1, [pc, #608]	@ (80219e4 <etharp_find_entry+0x2dc>)
 8021782:	4899      	ldr	r0, [pc, #612]	@ (80219e8 <etharp_find_entry+0x2e0>)
 8021784:	f003 fd6e 	bl	8025264 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8021788:	68fb      	ldr	r3, [r7, #12]
 802178a:	2b00      	cmp	r3, #0
 802178c:	d020      	beq.n	80217d0 <etharp_find_entry+0xc8>
 802178e:	68fb      	ldr	r3, [r7, #12]
 8021790:	6819      	ldr	r1, [r3, #0]
 8021792:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021796:	4891      	ldr	r0, [pc, #580]	@ (80219dc <etharp_find_entry+0x2d4>)
 8021798:	4613      	mov	r3, r2
 802179a:	005b      	lsls	r3, r3, #1
 802179c:	4413      	add	r3, r2
 802179e:	00db      	lsls	r3, r3, #3
 80217a0:	4403      	add	r3, r0
 80217a2:	3304      	adds	r3, #4
 80217a4:	681b      	ldr	r3, [r3, #0]
 80217a6:	4299      	cmp	r1, r3
 80217a8:	d112      	bne.n	80217d0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80217aa:	687b      	ldr	r3, [r7, #4]
 80217ac:	2b00      	cmp	r3, #0
 80217ae:	d00c      	beq.n	80217ca <etharp_find_entry+0xc2>
 80217b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80217b4:	4989      	ldr	r1, [pc, #548]	@ (80219dc <etharp_find_entry+0x2d4>)
 80217b6:	4613      	mov	r3, r2
 80217b8:	005b      	lsls	r3, r3, #1
 80217ba:	4413      	add	r3, r2
 80217bc:	00db      	lsls	r3, r3, #3
 80217be:	440b      	add	r3, r1
 80217c0:	3308      	adds	r3, #8
 80217c2:	681b      	ldr	r3, [r3, #0]
 80217c4:	687a      	ldr	r2, [r7, #4]
 80217c6:	429a      	cmp	r2, r3
 80217c8:	d102      	bne.n	80217d0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80217ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80217ce:	e100      	b.n	80219d2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80217d0:	7dfb      	ldrb	r3, [r7, #23]
 80217d2:	2b01      	cmp	r3, #1
 80217d4:	d140      	bne.n	8021858 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80217d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80217da:	4980      	ldr	r1, [pc, #512]	@ (80219dc <etharp_find_entry+0x2d4>)
 80217dc:	4613      	mov	r3, r2
 80217de:	005b      	lsls	r3, r3, #1
 80217e0:	4413      	add	r3, r2
 80217e2:	00db      	lsls	r3, r3, #3
 80217e4:	440b      	add	r3, r1
 80217e6:	681b      	ldr	r3, [r3, #0]
 80217e8:	2b00      	cmp	r3, #0
 80217ea:	d01a      	beq.n	8021822 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80217ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80217f0:	497a      	ldr	r1, [pc, #488]	@ (80219dc <etharp_find_entry+0x2d4>)
 80217f2:	4613      	mov	r3, r2
 80217f4:	005b      	lsls	r3, r3, #1
 80217f6:	4413      	add	r3, r2
 80217f8:	00db      	lsls	r3, r3, #3
 80217fa:	440b      	add	r3, r1
 80217fc:	3312      	adds	r3, #18
 80217fe:	881b      	ldrh	r3, [r3, #0]
 8021800:	8bba      	ldrh	r2, [r7, #28]
 8021802:	429a      	cmp	r2, r3
 8021804:	d845      	bhi.n	8021892 <etharp_find_entry+0x18a>
            old_queue = i;
 8021806:	8c3b      	ldrh	r3, [r7, #32]
 8021808:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 802180a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802180e:	4973      	ldr	r1, [pc, #460]	@ (80219dc <etharp_find_entry+0x2d4>)
 8021810:	4613      	mov	r3, r2
 8021812:	005b      	lsls	r3, r3, #1
 8021814:	4413      	add	r3, r2
 8021816:	00db      	lsls	r3, r3, #3
 8021818:	440b      	add	r3, r1
 802181a:	3312      	adds	r3, #18
 802181c:	881b      	ldrh	r3, [r3, #0]
 802181e:	83bb      	strh	r3, [r7, #28]
 8021820:	e037      	b.n	8021892 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8021822:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021826:	496d      	ldr	r1, [pc, #436]	@ (80219dc <etharp_find_entry+0x2d4>)
 8021828:	4613      	mov	r3, r2
 802182a:	005b      	lsls	r3, r3, #1
 802182c:	4413      	add	r3, r2
 802182e:	00db      	lsls	r3, r3, #3
 8021830:	440b      	add	r3, r1
 8021832:	3312      	adds	r3, #18
 8021834:	881b      	ldrh	r3, [r3, #0]
 8021836:	8b7a      	ldrh	r2, [r7, #26]
 8021838:	429a      	cmp	r2, r3
 802183a:	d82a      	bhi.n	8021892 <etharp_find_entry+0x18a>
            old_pending = i;
 802183c:	8c3b      	ldrh	r3, [r7, #32]
 802183e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8021840:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021844:	4965      	ldr	r1, [pc, #404]	@ (80219dc <etharp_find_entry+0x2d4>)
 8021846:	4613      	mov	r3, r2
 8021848:	005b      	lsls	r3, r3, #1
 802184a:	4413      	add	r3, r2
 802184c:	00db      	lsls	r3, r3, #3
 802184e:	440b      	add	r3, r1
 8021850:	3312      	adds	r3, #18
 8021852:	881b      	ldrh	r3, [r3, #0]
 8021854:	837b      	strh	r3, [r7, #26]
 8021856:	e01c      	b.n	8021892 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8021858:	7dfb      	ldrb	r3, [r7, #23]
 802185a:	2b01      	cmp	r3, #1
 802185c:	d919      	bls.n	8021892 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 802185e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021862:	495e      	ldr	r1, [pc, #376]	@ (80219dc <etharp_find_entry+0x2d4>)
 8021864:	4613      	mov	r3, r2
 8021866:	005b      	lsls	r3, r3, #1
 8021868:	4413      	add	r3, r2
 802186a:	00db      	lsls	r3, r3, #3
 802186c:	440b      	add	r3, r1
 802186e:	3312      	adds	r3, #18
 8021870:	881b      	ldrh	r3, [r3, #0]
 8021872:	8b3a      	ldrh	r2, [r7, #24]
 8021874:	429a      	cmp	r2, r3
 8021876:	d80c      	bhi.n	8021892 <etharp_find_entry+0x18a>
            old_stable = i;
 8021878:	8c3b      	ldrh	r3, [r7, #32]
 802187a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 802187c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021880:	4956      	ldr	r1, [pc, #344]	@ (80219dc <etharp_find_entry+0x2d4>)
 8021882:	4613      	mov	r3, r2
 8021884:	005b      	lsls	r3, r3, #1
 8021886:	4413      	add	r3, r2
 8021888:	00db      	lsls	r3, r3, #3
 802188a:	440b      	add	r3, r1
 802188c:	3312      	adds	r3, #18
 802188e:	881b      	ldrh	r3, [r3, #0]
 8021890:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021892:	8c3b      	ldrh	r3, [r7, #32]
 8021894:	3301      	adds	r3, #1
 8021896:	b29b      	uxth	r3, r3
 8021898:	843b      	strh	r3, [r7, #32]
 802189a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802189e:	2b09      	cmp	r3, #9
 80218a0:	f77f af4c 	ble.w	802173c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80218a4:	7afb      	ldrb	r3, [r7, #11]
 80218a6:	f003 0302 	and.w	r3, r3, #2
 80218aa:	2b00      	cmp	r3, #0
 80218ac:	d108      	bne.n	80218c0 <etharp_find_entry+0x1b8>
 80218ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80218b2:	2b0a      	cmp	r3, #10
 80218b4:	d107      	bne.n	80218c6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80218b6:	7afb      	ldrb	r3, [r7, #11]
 80218b8:	f003 0301 	and.w	r3, r3, #1
 80218bc:	2b00      	cmp	r3, #0
 80218be:	d102      	bne.n	80218c6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80218c0:	f04f 33ff 	mov.w	r3, #4294967295
 80218c4:	e085      	b.n	80219d2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80218c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80218ca:	2b09      	cmp	r3, #9
 80218cc:	dc02      	bgt.n	80218d4 <etharp_find_entry+0x1cc>
    i = empty;
 80218ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80218d0:	843b      	strh	r3, [r7, #32]
 80218d2:	e039      	b.n	8021948 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80218d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80218d8:	2b09      	cmp	r3, #9
 80218da:	dc14      	bgt.n	8021906 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80218dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80218de:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80218e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80218e4:	493d      	ldr	r1, [pc, #244]	@ (80219dc <etharp_find_entry+0x2d4>)
 80218e6:	4613      	mov	r3, r2
 80218e8:	005b      	lsls	r3, r3, #1
 80218ea:	4413      	add	r3, r2
 80218ec:	00db      	lsls	r3, r3, #3
 80218ee:	440b      	add	r3, r1
 80218f0:	681b      	ldr	r3, [r3, #0]
 80218f2:	2b00      	cmp	r3, #0
 80218f4:	d018      	beq.n	8021928 <etharp_find_entry+0x220>
 80218f6:	4b3a      	ldr	r3, [pc, #232]	@ (80219e0 <etharp_find_entry+0x2d8>)
 80218f8:	f240 126d 	movw	r2, #365	@ 0x16d
 80218fc:	493b      	ldr	r1, [pc, #236]	@ (80219ec <etharp_find_entry+0x2e4>)
 80218fe:	483a      	ldr	r0, [pc, #232]	@ (80219e8 <etharp_find_entry+0x2e0>)
 8021900:	f003 fcb0 	bl	8025264 <iprintf>
 8021904:	e010      	b.n	8021928 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8021906:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 802190a:	2b09      	cmp	r3, #9
 802190c:	dc02      	bgt.n	8021914 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 802190e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8021910:	843b      	strh	r3, [r7, #32]
 8021912:	e009      	b.n	8021928 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8021914:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8021918:	2b09      	cmp	r3, #9
 802191a:	dc02      	bgt.n	8021922 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 802191c:	8bfb      	ldrh	r3, [r7, #30]
 802191e:	843b      	strh	r3, [r7, #32]
 8021920:	e002      	b.n	8021928 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8021922:	f04f 33ff 	mov.w	r3, #4294967295
 8021926:	e054      	b.n	80219d2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8021928:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802192c:	2b09      	cmp	r3, #9
 802192e:	dd06      	ble.n	802193e <etharp_find_entry+0x236>
 8021930:	4b2b      	ldr	r3, [pc, #172]	@ (80219e0 <etharp_find_entry+0x2d8>)
 8021932:	f240 127f 	movw	r2, #383	@ 0x17f
 8021936:	492e      	ldr	r1, [pc, #184]	@ (80219f0 <etharp_find_entry+0x2e8>)
 8021938:	482b      	ldr	r0, [pc, #172]	@ (80219e8 <etharp_find_entry+0x2e0>)
 802193a:	f003 fc93 	bl	8025264 <iprintf>
    etharp_free_entry(i);
 802193e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021942:	4618      	mov	r0, r3
 8021944:	f7ff fe06 	bl	8021554 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8021948:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802194c:	2b09      	cmp	r3, #9
 802194e:	dd06      	ble.n	802195e <etharp_find_entry+0x256>
 8021950:	4b23      	ldr	r3, [pc, #140]	@ (80219e0 <etharp_find_entry+0x2d8>)
 8021952:	f240 1283 	movw	r2, #387	@ 0x183
 8021956:	4926      	ldr	r1, [pc, #152]	@ (80219f0 <etharp_find_entry+0x2e8>)
 8021958:	4823      	ldr	r0, [pc, #140]	@ (80219e8 <etharp_find_entry+0x2e0>)
 802195a:	f003 fc83 	bl	8025264 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 802195e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021962:	491e      	ldr	r1, [pc, #120]	@ (80219dc <etharp_find_entry+0x2d4>)
 8021964:	4613      	mov	r3, r2
 8021966:	005b      	lsls	r3, r3, #1
 8021968:	4413      	add	r3, r2
 802196a:	00db      	lsls	r3, r3, #3
 802196c:	440b      	add	r3, r1
 802196e:	3314      	adds	r3, #20
 8021970:	781b      	ldrb	r3, [r3, #0]
 8021972:	2b00      	cmp	r3, #0
 8021974:	d006      	beq.n	8021984 <etharp_find_entry+0x27c>
 8021976:	4b1a      	ldr	r3, [pc, #104]	@ (80219e0 <etharp_find_entry+0x2d8>)
 8021978:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 802197c:	491d      	ldr	r1, [pc, #116]	@ (80219f4 <etharp_find_entry+0x2ec>)
 802197e:	481a      	ldr	r0, [pc, #104]	@ (80219e8 <etharp_find_entry+0x2e0>)
 8021980:	f003 fc70 	bl	8025264 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8021984:	68fb      	ldr	r3, [r7, #12]
 8021986:	2b00      	cmp	r3, #0
 8021988:	d00b      	beq.n	80219a2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 802198a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802198e:	68fb      	ldr	r3, [r7, #12]
 8021990:	6819      	ldr	r1, [r3, #0]
 8021992:	4812      	ldr	r0, [pc, #72]	@ (80219dc <etharp_find_entry+0x2d4>)
 8021994:	4613      	mov	r3, r2
 8021996:	005b      	lsls	r3, r3, #1
 8021998:	4413      	add	r3, r2
 802199a:	00db      	lsls	r3, r3, #3
 802199c:	4403      	add	r3, r0
 802199e:	3304      	adds	r3, #4
 80219a0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80219a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80219a6:	490d      	ldr	r1, [pc, #52]	@ (80219dc <etharp_find_entry+0x2d4>)
 80219a8:	4613      	mov	r3, r2
 80219aa:	005b      	lsls	r3, r3, #1
 80219ac:	4413      	add	r3, r2
 80219ae:	00db      	lsls	r3, r3, #3
 80219b0:	440b      	add	r3, r1
 80219b2:	3312      	adds	r3, #18
 80219b4:	2200      	movs	r2, #0
 80219b6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80219b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80219bc:	4907      	ldr	r1, [pc, #28]	@ (80219dc <etharp_find_entry+0x2d4>)
 80219be:	4613      	mov	r3, r2
 80219c0:	005b      	lsls	r3, r3, #1
 80219c2:	4413      	add	r3, r2
 80219c4:	00db      	lsls	r3, r3, #3
 80219c6:	440b      	add	r3, r1
 80219c8:	3308      	adds	r3, #8
 80219ca:	687a      	ldr	r2, [r7, #4]
 80219cc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80219ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80219d2:	4618      	mov	r0, r3
 80219d4:	3728      	adds	r7, #40	@ 0x28
 80219d6:	46bd      	mov	sp, r7
 80219d8:	bd80      	pop	{r7, pc}
 80219da:	bf00      	nop
 80219dc:	2400beac 	.word	0x2400beac
 80219e0:	0802c634 	.word	0x0802c634
 80219e4:	0802c66c 	.word	0x0802c66c
 80219e8:	0802c6ac 	.word	0x0802c6ac
 80219ec:	0802c6d4 	.word	0x0802c6d4
 80219f0:	0802c6ec 	.word	0x0802c6ec
 80219f4:	0802c700 	.word	0x0802c700

080219f8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80219f8:	b580      	push	{r7, lr}
 80219fa:	b088      	sub	sp, #32
 80219fc:	af02      	add	r7, sp, #8
 80219fe:	60f8      	str	r0, [r7, #12]
 8021a00:	60b9      	str	r1, [r7, #8]
 8021a02:	607a      	str	r2, [r7, #4]
 8021a04:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8021a06:	68fb      	ldr	r3, [r7, #12]
 8021a08:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021a0c:	2b06      	cmp	r3, #6
 8021a0e:	d006      	beq.n	8021a1e <etharp_update_arp_entry+0x26>
 8021a10:	4b48      	ldr	r3, [pc, #288]	@ (8021b34 <etharp_update_arp_entry+0x13c>)
 8021a12:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8021a16:	4948      	ldr	r1, [pc, #288]	@ (8021b38 <etharp_update_arp_entry+0x140>)
 8021a18:	4848      	ldr	r0, [pc, #288]	@ (8021b3c <etharp_update_arp_entry+0x144>)
 8021a1a:	f003 fc23 	bl	8025264 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8021a1e:	68bb      	ldr	r3, [r7, #8]
 8021a20:	2b00      	cmp	r3, #0
 8021a22:	d012      	beq.n	8021a4a <etharp_update_arp_entry+0x52>
 8021a24:	68bb      	ldr	r3, [r7, #8]
 8021a26:	681b      	ldr	r3, [r3, #0]
 8021a28:	2b00      	cmp	r3, #0
 8021a2a:	d00e      	beq.n	8021a4a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8021a2c:	68bb      	ldr	r3, [r7, #8]
 8021a2e:	681b      	ldr	r3, [r3, #0]
 8021a30:	68f9      	ldr	r1, [r7, #12]
 8021a32:	4618      	mov	r0, r3
 8021a34:	f001 f924 	bl	8022c80 <ip4_addr_isbroadcast_u32>
 8021a38:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8021a3a:	2b00      	cmp	r3, #0
 8021a3c:	d105      	bne.n	8021a4a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8021a3e:	68bb      	ldr	r3, [r7, #8]
 8021a40:	681b      	ldr	r3, [r3, #0]
 8021a42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8021a46:	2be0      	cmp	r3, #224	@ 0xe0
 8021a48:	d102      	bne.n	8021a50 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8021a4a:	f06f 030f 	mvn.w	r3, #15
 8021a4e:	e06c      	b.n	8021b2a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8021a50:	78fb      	ldrb	r3, [r7, #3]
 8021a52:	68fa      	ldr	r2, [r7, #12]
 8021a54:	4619      	mov	r1, r3
 8021a56:	68b8      	ldr	r0, [r7, #8]
 8021a58:	f7ff fe56 	bl	8021708 <etharp_find_entry>
 8021a5c:	4603      	mov	r3, r0
 8021a5e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8021a60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8021a64:	2b00      	cmp	r3, #0
 8021a66:	da02      	bge.n	8021a6e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8021a68:	8afb      	ldrh	r3, [r7, #22]
 8021a6a:	b25b      	sxtb	r3, r3
 8021a6c:	e05d      	b.n	8021b2a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8021a6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021a72:	4933      	ldr	r1, [pc, #204]	@ (8021b40 <etharp_update_arp_entry+0x148>)
 8021a74:	4613      	mov	r3, r2
 8021a76:	005b      	lsls	r3, r3, #1
 8021a78:	4413      	add	r3, r2
 8021a7a:	00db      	lsls	r3, r3, #3
 8021a7c:	440b      	add	r3, r1
 8021a7e:	3314      	adds	r3, #20
 8021a80:	2202      	movs	r2, #2
 8021a82:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8021a84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021a88:	492d      	ldr	r1, [pc, #180]	@ (8021b40 <etharp_update_arp_entry+0x148>)
 8021a8a:	4613      	mov	r3, r2
 8021a8c:	005b      	lsls	r3, r3, #1
 8021a8e:	4413      	add	r3, r2
 8021a90:	00db      	lsls	r3, r3, #3
 8021a92:	440b      	add	r3, r1
 8021a94:	3308      	adds	r3, #8
 8021a96:	68fa      	ldr	r2, [r7, #12]
 8021a98:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8021a9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021a9e:	4613      	mov	r3, r2
 8021aa0:	005b      	lsls	r3, r3, #1
 8021aa2:	4413      	add	r3, r2
 8021aa4:	00db      	lsls	r3, r3, #3
 8021aa6:	3308      	adds	r3, #8
 8021aa8:	4a25      	ldr	r2, [pc, #148]	@ (8021b40 <etharp_update_arp_entry+0x148>)
 8021aaa:	4413      	add	r3, r2
 8021aac:	3304      	adds	r3, #4
 8021aae:	2206      	movs	r2, #6
 8021ab0:	6879      	ldr	r1, [r7, #4]
 8021ab2:	4618      	mov	r0, r3
 8021ab4:	f003 fd63 	bl	802557e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8021ab8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021abc:	4920      	ldr	r1, [pc, #128]	@ (8021b40 <etharp_update_arp_entry+0x148>)
 8021abe:	4613      	mov	r3, r2
 8021ac0:	005b      	lsls	r3, r3, #1
 8021ac2:	4413      	add	r3, r2
 8021ac4:	00db      	lsls	r3, r3, #3
 8021ac6:	440b      	add	r3, r1
 8021ac8:	3312      	adds	r3, #18
 8021aca:	2200      	movs	r2, #0
 8021acc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8021ace:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021ad2:	491b      	ldr	r1, [pc, #108]	@ (8021b40 <etharp_update_arp_entry+0x148>)
 8021ad4:	4613      	mov	r3, r2
 8021ad6:	005b      	lsls	r3, r3, #1
 8021ad8:	4413      	add	r3, r2
 8021ada:	00db      	lsls	r3, r3, #3
 8021adc:	440b      	add	r3, r1
 8021ade:	681b      	ldr	r3, [r3, #0]
 8021ae0:	2b00      	cmp	r3, #0
 8021ae2:	d021      	beq.n	8021b28 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8021ae4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021ae8:	4915      	ldr	r1, [pc, #84]	@ (8021b40 <etharp_update_arp_entry+0x148>)
 8021aea:	4613      	mov	r3, r2
 8021aec:	005b      	lsls	r3, r3, #1
 8021aee:	4413      	add	r3, r2
 8021af0:	00db      	lsls	r3, r3, #3
 8021af2:	440b      	add	r3, r1
 8021af4:	681b      	ldr	r3, [r3, #0]
 8021af6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8021af8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021afc:	4910      	ldr	r1, [pc, #64]	@ (8021b40 <etharp_update_arp_entry+0x148>)
 8021afe:	4613      	mov	r3, r2
 8021b00:	005b      	lsls	r3, r3, #1
 8021b02:	4413      	add	r3, r2
 8021b04:	00db      	lsls	r3, r3, #3
 8021b06:	440b      	add	r3, r1
 8021b08:	2200      	movs	r2, #0
 8021b0a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8021b0c:	68fb      	ldr	r3, [r7, #12]
 8021b0e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8021b12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021b16:	9300      	str	r3, [sp, #0]
 8021b18:	687b      	ldr	r3, [r7, #4]
 8021b1a:	6939      	ldr	r1, [r7, #16]
 8021b1c:	68f8      	ldr	r0, [r7, #12]
 8021b1e:	f002 f8fb 	bl	8023d18 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8021b22:	6938      	ldr	r0, [r7, #16]
 8021b24:	f7f8 fc50 	bl	801a3c8 <pbuf_free>
  }
  return ERR_OK;
 8021b28:	2300      	movs	r3, #0
}
 8021b2a:	4618      	mov	r0, r3
 8021b2c:	3718      	adds	r7, #24
 8021b2e:	46bd      	mov	sp, r7
 8021b30:	bd80      	pop	{r7, pc}
 8021b32:	bf00      	nop
 8021b34:	0802c634 	.word	0x0802c634
 8021b38:	0802c72c 	.word	0x0802c72c
 8021b3c:	0802c6ac 	.word	0x0802c6ac
 8021b40:	2400beac 	.word	0x2400beac

08021b44 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8021b44:	b580      	push	{r7, lr}
 8021b46:	b084      	sub	sp, #16
 8021b48:	af00      	add	r7, sp, #0
 8021b4a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021b4c:	2300      	movs	r3, #0
 8021b4e:	60fb      	str	r3, [r7, #12]
 8021b50:	e01e      	b.n	8021b90 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8021b52:	4913      	ldr	r1, [pc, #76]	@ (8021ba0 <etharp_cleanup_netif+0x5c>)
 8021b54:	68fa      	ldr	r2, [r7, #12]
 8021b56:	4613      	mov	r3, r2
 8021b58:	005b      	lsls	r3, r3, #1
 8021b5a:	4413      	add	r3, r2
 8021b5c:	00db      	lsls	r3, r3, #3
 8021b5e:	440b      	add	r3, r1
 8021b60:	3314      	adds	r3, #20
 8021b62:	781b      	ldrb	r3, [r3, #0]
 8021b64:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8021b66:	7afb      	ldrb	r3, [r7, #11]
 8021b68:	2b00      	cmp	r3, #0
 8021b6a:	d00e      	beq.n	8021b8a <etharp_cleanup_netif+0x46>
 8021b6c:	490c      	ldr	r1, [pc, #48]	@ (8021ba0 <etharp_cleanup_netif+0x5c>)
 8021b6e:	68fa      	ldr	r2, [r7, #12]
 8021b70:	4613      	mov	r3, r2
 8021b72:	005b      	lsls	r3, r3, #1
 8021b74:	4413      	add	r3, r2
 8021b76:	00db      	lsls	r3, r3, #3
 8021b78:	440b      	add	r3, r1
 8021b7a:	3308      	adds	r3, #8
 8021b7c:	681b      	ldr	r3, [r3, #0]
 8021b7e:	687a      	ldr	r2, [r7, #4]
 8021b80:	429a      	cmp	r2, r3
 8021b82:	d102      	bne.n	8021b8a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8021b84:	68f8      	ldr	r0, [r7, #12]
 8021b86:	f7ff fce5 	bl	8021554 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021b8a:	68fb      	ldr	r3, [r7, #12]
 8021b8c:	3301      	adds	r3, #1
 8021b8e:	60fb      	str	r3, [r7, #12]
 8021b90:	68fb      	ldr	r3, [r7, #12]
 8021b92:	2b09      	cmp	r3, #9
 8021b94:	dddd      	ble.n	8021b52 <etharp_cleanup_netif+0xe>
    }
  }
}
 8021b96:	bf00      	nop
 8021b98:	bf00      	nop
 8021b9a:	3710      	adds	r7, #16
 8021b9c:	46bd      	mov	sp, r7
 8021b9e:	bd80      	pop	{r7, pc}
 8021ba0:	2400beac 	.word	0x2400beac

08021ba4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8021ba4:	b5b0      	push	{r4, r5, r7, lr}
 8021ba6:	b08a      	sub	sp, #40	@ 0x28
 8021ba8:	af04      	add	r7, sp, #16
 8021baa:	6078      	str	r0, [r7, #4]
 8021bac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8021bae:	683b      	ldr	r3, [r7, #0]
 8021bb0:	2b00      	cmp	r3, #0
 8021bb2:	d107      	bne.n	8021bc4 <etharp_input+0x20>
 8021bb4:	4b3d      	ldr	r3, [pc, #244]	@ (8021cac <etharp_input+0x108>)
 8021bb6:	f240 228a 	movw	r2, #650	@ 0x28a
 8021bba:	493d      	ldr	r1, [pc, #244]	@ (8021cb0 <etharp_input+0x10c>)
 8021bbc:	483d      	ldr	r0, [pc, #244]	@ (8021cb4 <etharp_input+0x110>)
 8021bbe:	f003 fb51 	bl	8025264 <iprintf>
 8021bc2:	e06f      	b.n	8021ca4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8021bc4:	687b      	ldr	r3, [r7, #4]
 8021bc6:	685b      	ldr	r3, [r3, #4]
 8021bc8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8021bca:	693b      	ldr	r3, [r7, #16]
 8021bcc:	881b      	ldrh	r3, [r3, #0]
 8021bce:	b29b      	uxth	r3, r3
 8021bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021bd4:	d10c      	bne.n	8021bf0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8021bd6:	693b      	ldr	r3, [r7, #16]
 8021bd8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8021bda:	2b06      	cmp	r3, #6
 8021bdc:	d108      	bne.n	8021bf0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8021bde:	693b      	ldr	r3, [r7, #16]
 8021be0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8021be2:	2b04      	cmp	r3, #4
 8021be4:	d104      	bne.n	8021bf0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8021be6:	693b      	ldr	r3, [r7, #16]
 8021be8:	885b      	ldrh	r3, [r3, #2]
 8021bea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8021bec:	2b08      	cmp	r3, #8
 8021bee:	d003      	beq.n	8021bf8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8021bf0:	6878      	ldr	r0, [r7, #4]
 8021bf2:	f7f8 fbe9 	bl	801a3c8 <pbuf_free>
    return;
 8021bf6:	e055      	b.n	8021ca4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8021bf8:	693b      	ldr	r3, [r7, #16]
 8021bfa:	330e      	adds	r3, #14
 8021bfc:	681b      	ldr	r3, [r3, #0]
 8021bfe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8021c00:	693b      	ldr	r3, [r7, #16]
 8021c02:	3318      	adds	r3, #24
 8021c04:	681b      	ldr	r3, [r3, #0]
 8021c06:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021c08:	683b      	ldr	r3, [r7, #0]
 8021c0a:	3304      	adds	r3, #4
 8021c0c:	681b      	ldr	r3, [r3, #0]
 8021c0e:	2b00      	cmp	r3, #0
 8021c10:	d102      	bne.n	8021c18 <etharp_input+0x74>
    for_us = 0;
 8021c12:	2300      	movs	r3, #0
 8021c14:	75fb      	strb	r3, [r7, #23]
 8021c16:	e009      	b.n	8021c2c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8021c18:	68ba      	ldr	r2, [r7, #8]
 8021c1a:	683b      	ldr	r3, [r7, #0]
 8021c1c:	3304      	adds	r3, #4
 8021c1e:	681b      	ldr	r3, [r3, #0]
 8021c20:	429a      	cmp	r2, r3
 8021c22:	bf0c      	ite	eq
 8021c24:	2301      	moveq	r3, #1
 8021c26:	2300      	movne	r3, #0
 8021c28:	b2db      	uxtb	r3, r3
 8021c2a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8021c2c:	693b      	ldr	r3, [r7, #16]
 8021c2e:	f103 0208 	add.w	r2, r3, #8
 8021c32:	7dfb      	ldrb	r3, [r7, #23]
 8021c34:	2b00      	cmp	r3, #0
 8021c36:	d001      	beq.n	8021c3c <etharp_input+0x98>
 8021c38:	2301      	movs	r3, #1
 8021c3a:	e000      	b.n	8021c3e <etharp_input+0x9a>
 8021c3c:	2302      	movs	r3, #2
 8021c3e:	f107 010c 	add.w	r1, r7, #12
 8021c42:	6838      	ldr	r0, [r7, #0]
 8021c44:	f7ff fed8 	bl	80219f8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8021c48:	693b      	ldr	r3, [r7, #16]
 8021c4a:	88db      	ldrh	r3, [r3, #6]
 8021c4c:	b29b      	uxth	r3, r3
 8021c4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021c52:	d003      	beq.n	8021c5c <etharp_input+0xb8>
 8021c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021c58:	d01e      	beq.n	8021c98 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8021c5a:	e020      	b.n	8021c9e <etharp_input+0xfa>
      if (for_us) {
 8021c5c:	7dfb      	ldrb	r3, [r7, #23]
 8021c5e:	2b00      	cmp	r3, #0
 8021c60:	d01c      	beq.n	8021c9c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8021c62:	683b      	ldr	r3, [r7, #0]
 8021c64:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8021c68:	693b      	ldr	r3, [r7, #16]
 8021c6a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8021c6e:	683b      	ldr	r3, [r7, #0]
 8021c70:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8021c74:	683b      	ldr	r3, [r7, #0]
 8021c76:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8021c78:	693a      	ldr	r2, [r7, #16]
 8021c7a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8021c7c:	2102      	movs	r1, #2
 8021c7e:	9103      	str	r1, [sp, #12]
 8021c80:	f107 010c 	add.w	r1, r7, #12
 8021c84:	9102      	str	r1, [sp, #8]
 8021c86:	9201      	str	r2, [sp, #4]
 8021c88:	9300      	str	r3, [sp, #0]
 8021c8a:	462b      	mov	r3, r5
 8021c8c:	4622      	mov	r2, r4
 8021c8e:	4601      	mov	r1, r0
 8021c90:	6838      	ldr	r0, [r7, #0]
 8021c92:	f000 faeb 	bl	802226c <etharp_raw>
      break;
 8021c96:	e001      	b.n	8021c9c <etharp_input+0xf8>
      break;
 8021c98:	bf00      	nop
 8021c9a:	e000      	b.n	8021c9e <etharp_input+0xfa>
      break;
 8021c9c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8021c9e:	6878      	ldr	r0, [r7, #4]
 8021ca0:	f7f8 fb92 	bl	801a3c8 <pbuf_free>
}
 8021ca4:	3718      	adds	r7, #24
 8021ca6:	46bd      	mov	sp, r7
 8021ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8021caa:	bf00      	nop
 8021cac:	0802c634 	.word	0x0802c634
 8021cb0:	0802c784 	.word	0x0802c784
 8021cb4:	0802c6ac 	.word	0x0802c6ac

08021cb8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8021cb8:	b580      	push	{r7, lr}
 8021cba:	b086      	sub	sp, #24
 8021cbc:	af02      	add	r7, sp, #8
 8021cbe:	60f8      	str	r0, [r7, #12]
 8021cc0:	60b9      	str	r1, [r7, #8]
 8021cc2:	4613      	mov	r3, r2
 8021cc4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021cc6:	79fa      	ldrb	r2, [r7, #7]
 8021cc8:	4944      	ldr	r1, [pc, #272]	@ (8021ddc <etharp_output_to_arp_index+0x124>)
 8021cca:	4613      	mov	r3, r2
 8021ccc:	005b      	lsls	r3, r3, #1
 8021cce:	4413      	add	r3, r2
 8021cd0:	00db      	lsls	r3, r3, #3
 8021cd2:	440b      	add	r3, r1
 8021cd4:	3314      	adds	r3, #20
 8021cd6:	781b      	ldrb	r3, [r3, #0]
 8021cd8:	2b01      	cmp	r3, #1
 8021cda:	d806      	bhi.n	8021cea <etharp_output_to_arp_index+0x32>
 8021cdc:	4b40      	ldr	r3, [pc, #256]	@ (8021de0 <etharp_output_to_arp_index+0x128>)
 8021cde:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8021ce2:	4940      	ldr	r1, [pc, #256]	@ (8021de4 <etharp_output_to_arp_index+0x12c>)
 8021ce4:	4840      	ldr	r0, [pc, #256]	@ (8021de8 <etharp_output_to_arp_index+0x130>)
 8021ce6:	f003 fabd 	bl	8025264 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8021cea:	79fa      	ldrb	r2, [r7, #7]
 8021cec:	493b      	ldr	r1, [pc, #236]	@ (8021ddc <etharp_output_to_arp_index+0x124>)
 8021cee:	4613      	mov	r3, r2
 8021cf0:	005b      	lsls	r3, r3, #1
 8021cf2:	4413      	add	r3, r2
 8021cf4:	00db      	lsls	r3, r3, #3
 8021cf6:	440b      	add	r3, r1
 8021cf8:	3314      	adds	r3, #20
 8021cfa:	781b      	ldrb	r3, [r3, #0]
 8021cfc:	2b02      	cmp	r3, #2
 8021cfe:	d153      	bne.n	8021da8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8021d00:	79fa      	ldrb	r2, [r7, #7]
 8021d02:	4936      	ldr	r1, [pc, #216]	@ (8021ddc <etharp_output_to_arp_index+0x124>)
 8021d04:	4613      	mov	r3, r2
 8021d06:	005b      	lsls	r3, r3, #1
 8021d08:	4413      	add	r3, r2
 8021d0a:	00db      	lsls	r3, r3, #3
 8021d0c:	440b      	add	r3, r1
 8021d0e:	3312      	adds	r3, #18
 8021d10:	881b      	ldrh	r3, [r3, #0]
 8021d12:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8021d16:	d919      	bls.n	8021d4c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8021d18:	79fa      	ldrb	r2, [r7, #7]
 8021d1a:	4613      	mov	r3, r2
 8021d1c:	005b      	lsls	r3, r3, #1
 8021d1e:	4413      	add	r3, r2
 8021d20:	00db      	lsls	r3, r3, #3
 8021d22:	4a2e      	ldr	r2, [pc, #184]	@ (8021ddc <etharp_output_to_arp_index+0x124>)
 8021d24:	4413      	add	r3, r2
 8021d26:	3304      	adds	r3, #4
 8021d28:	4619      	mov	r1, r3
 8021d2a:	68f8      	ldr	r0, [r7, #12]
 8021d2c:	f000 fb4c 	bl	80223c8 <etharp_request>
 8021d30:	4603      	mov	r3, r0
 8021d32:	2b00      	cmp	r3, #0
 8021d34:	d138      	bne.n	8021da8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8021d36:	79fa      	ldrb	r2, [r7, #7]
 8021d38:	4928      	ldr	r1, [pc, #160]	@ (8021ddc <etharp_output_to_arp_index+0x124>)
 8021d3a:	4613      	mov	r3, r2
 8021d3c:	005b      	lsls	r3, r3, #1
 8021d3e:	4413      	add	r3, r2
 8021d40:	00db      	lsls	r3, r3, #3
 8021d42:	440b      	add	r3, r1
 8021d44:	3314      	adds	r3, #20
 8021d46:	2203      	movs	r2, #3
 8021d48:	701a      	strb	r2, [r3, #0]
 8021d4a:	e02d      	b.n	8021da8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8021d4c:	79fa      	ldrb	r2, [r7, #7]
 8021d4e:	4923      	ldr	r1, [pc, #140]	@ (8021ddc <etharp_output_to_arp_index+0x124>)
 8021d50:	4613      	mov	r3, r2
 8021d52:	005b      	lsls	r3, r3, #1
 8021d54:	4413      	add	r3, r2
 8021d56:	00db      	lsls	r3, r3, #3
 8021d58:	440b      	add	r3, r1
 8021d5a:	3312      	adds	r3, #18
 8021d5c:	881b      	ldrh	r3, [r3, #0]
 8021d5e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8021d62:	d321      	bcc.n	8021da8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021d64:	79fa      	ldrb	r2, [r7, #7]
 8021d66:	4613      	mov	r3, r2
 8021d68:	005b      	lsls	r3, r3, #1
 8021d6a:	4413      	add	r3, r2
 8021d6c:	00db      	lsls	r3, r3, #3
 8021d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8021ddc <etharp_output_to_arp_index+0x124>)
 8021d70:	4413      	add	r3, r2
 8021d72:	1d19      	adds	r1, r3, #4
 8021d74:	79fa      	ldrb	r2, [r7, #7]
 8021d76:	4613      	mov	r3, r2
 8021d78:	005b      	lsls	r3, r3, #1
 8021d7a:	4413      	add	r3, r2
 8021d7c:	00db      	lsls	r3, r3, #3
 8021d7e:	3308      	adds	r3, #8
 8021d80:	4a16      	ldr	r2, [pc, #88]	@ (8021ddc <etharp_output_to_arp_index+0x124>)
 8021d82:	4413      	add	r3, r2
 8021d84:	3304      	adds	r3, #4
 8021d86:	461a      	mov	r2, r3
 8021d88:	68f8      	ldr	r0, [r7, #12]
 8021d8a:	f000 fafb 	bl	8022384 <etharp_request_dst>
 8021d8e:	4603      	mov	r3, r0
 8021d90:	2b00      	cmp	r3, #0
 8021d92:	d109      	bne.n	8021da8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8021d94:	79fa      	ldrb	r2, [r7, #7]
 8021d96:	4911      	ldr	r1, [pc, #68]	@ (8021ddc <etharp_output_to_arp_index+0x124>)
 8021d98:	4613      	mov	r3, r2
 8021d9a:	005b      	lsls	r3, r3, #1
 8021d9c:	4413      	add	r3, r2
 8021d9e:	00db      	lsls	r3, r3, #3
 8021da0:	440b      	add	r3, r1
 8021da2:	3314      	adds	r3, #20
 8021da4:	2203      	movs	r2, #3
 8021da6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8021da8:	68fb      	ldr	r3, [r7, #12]
 8021daa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8021dae:	79fa      	ldrb	r2, [r7, #7]
 8021db0:	4613      	mov	r3, r2
 8021db2:	005b      	lsls	r3, r3, #1
 8021db4:	4413      	add	r3, r2
 8021db6:	00db      	lsls	r3, r3, #3
 8021db8:	3308      	adds	r3, #8
 8021dba:	4a08      	ldr	r2, [pc, #32]	@ (8021ddc <etharp_output_to_arp_index+0x124>)
 8021dbc:	4413      	add	r3, r2
 8021dbe:	3304      	adds	r3, #4
 8021dc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8021dc4:	9200      	str	r2, [sp, #0]
 8021dc6:	460a      	mov	r2, r1
 8021dc8:	68b9      	ldr	r1, [r7, #8]
 8021dca:	68f8      	ldr	r0, [r7, #12]
 8021dcc:	f001 ffa4 	bl	8023d18 <ethernet_output>
 8021dd0:	4603      	mov	r3, r0
}
 8021dd2:	4618      	mov	r0, r3
 8021dd4:	3710      	adds	r7, #16
 8021dd6:	46bd      	mov	sp, r7
 8021dd8:	bd80      	pop	{r7, pc}
 8021dda:	bf00      	nop
 8021ddc:	2400beac 	.word	0x2400beac
 8021de0:	0802c634 	.word	0x0802c634
 8021de4:	0802c7a4 	.word	0x0802c7a4
 8021de8:	0802c6ac 	.word	0x0802c6ac

08021dec <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8021dec:	b580      	push	{r7, lr}
 8021dee:	b08a      	sub	sp, #40	@ 0x28
 8021df0:	af02      	add	r7, sp, #8
 8021df2:	60f8      	str	r0, [r7, #12]
 8021df4:	60b9      	str	r1, [r7, #8]
 8021df6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8021df8:	687b      	ldr	r3, [r7, #4]
 8021dfa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8021dfc:	68fb      	ldr	r3, [r7, #12]
 8021dfe:	2b00      	cmp	r3, #0
 8021e00:	d106      	bne.n	8021e10 <etharp_output+0x24>
 8021e02:	4b73      	ldr	r3, [pc, #460]	@ (8021fd0 <etharp_output+0x1e4>)
 8021e04:	f240 321e 	movw	r2, #798	@ 0x31e
 8021e08:	4972      	ldr	r1, [pc, #456]	@ (8021fd4 <etharp_output+0x1e8>)
 8021e0a:	4873      	ldr	r0, [pc, #460]	@ (8021fd8 <etharp_output+0x1ec>)
 8021e0c:	f003 fa2a 	bl	8025264 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8021e10:	68bb      	ldr	r3, [r7, #8]
 8021e12:	2b00      	cmp	r3, #0
 8021e14:	d106      	bne.n	8021e24 <etharp_output+0x38>
 8021e16:	4b6e      	ldr	r3, [pc, #440]	@ (8021fd0 <etharp_output+0x1e4>)
 8021e18:	f240 321f 	movw	r2, #799	@ 0x31f
 8021e1c:	496f      	ldr	r1, [pc, #444]	@ (8021fdc <etharp_output+0x1f0>)
 8021e1e:	486e      	ldr	r0, [pc, #440]	@ (8021fd8 <etharp_output+0x1ec>)
 8021e20:	f003 fa20 	bl	8025264 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8021e24:	687b      	ldr	r3, [r7, #4]
 8021e26:	2b00      	cmp	r3, #0
 8021e28:	d106      	bne.n	8021e38 <etharp_output+0x4c>
 8021e2a:	4b69      	ldr	r3, [pc, #420]	@ (8021fd0 <etharp_output+0x1e4>)
 8021e2c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8021e30:	496b      	ldr	r1, [pc, #428]	@ (8021fe0 <etharp_output+0x1f4>)
 8021e32:	4869      	ldr	r0, [pc, #420]	@ (8021fd8 <etharp_output+0x1ec>)
 8021e34:	f003 fa16 	bl	8025264 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8021e38:	687b      	ldr	r3, [r7, #4]
 8021e3a:	681b      	ldr	r3, [r3, #0]
 8021e3c:	68f9      	ldr	r1, [r7, #12]
 8021e3e:	4618      	mov	r0, r3
 8021e40:	f000 ff1e 	bl	8022c80 <ip4_addr_isbroadcast_u32>
 8021e44:	4603      	mov	r3, r0
 8021e46:	2b00      	cmp	r3, #0
 8021e48:	d002      	beq.n	8021e50 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8021e4a:	4b66      	ldr	r3, [pc, #408]	@ (8021fe4 <etharp_output+0x1f8>)
 8021e4c:	61fb      	str	r3, [r7, #28]
 8021e4e:	e0af      	b.n	8021fb0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8021e50:	687b      	ldr	r3, [r7, #4]
 8021e52:	681b      	ldr	r3, [r3, #0]
 8021e54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021e58:	2be0      	cmp	r3, #224	@ 0xe0
 8021e5a:	d118      	bne.n	8021e8e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8021e5c:	2301      	movs	r3, #1
 8021e5e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8021e60:	2300      	movs	r3, #0
 8021e62:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8021e64:	235e      	movs	r3, #94	@ 0x5e
 8021e66:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8021e68:	687b      	ldr	r3, [r7, #4]
 8021e6a:	3301      	adds	r3, #1
 8021e6c:	781b      	ldrb	r3, [r3, #0]
 8021e6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021e72:	b2db      	uxtb	r3, r3
 8021e74:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8021e76:	687b      	ldr	r3, [r7, #4]
 8021e78:	3302      	adds	r3, #2
 8021e7a:	781b      	ldrb	r3, [r3, #0]
 8021e7c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8021e7e:	687b      	ldr	r3, [r7, #4]
 8021e80:	3303      	adds	r3, #3
 8021e82:	781b      	ldrb	r3, [r3, #0]
 8021e84:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8021e86:	f107 0310 	add.w	r3, r7, #16
 8021e8a:	61fb      	str	r3, [r7, #28]
 8021e8c:	e090      	b.n	8021fb0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8021e8e:	687b      	ldr	r3, [r7, #4]
 8021e90:	681a      	ldr	r2, [r3, #0]
 8021e92:	68fb      	ldr	r3, [r7, #12]
 8021e94:	3304      	adds	r3, #4
 8021e96:	681b      	ldr	r3, [r3, #0]
 8021e98:	405a      	eors	r2, r3
 8021e9a:	68fb      	ldr	r3, [r7, #12]
 8021e9c:	3308      	adds	r3, #8
 8021e9e:	681b      	ldr	r3, [r3, #0]
 8021ea0:	4013      	ands	r3, r2
 8021ea2:	2b00      	cmp	r3, #0
 8021ea4:	d012      	beq.n	8021ecc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8021ea6:	687b      	ldr	r3, [r7, #4]
 8021ea8:	681b      	ldr	r3, [r3, #0]
 8021eaa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8021eac:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8021eb0:	4293      	cmp	r3, r2
 8021eb2:	d00b      	beq.n	8021ecc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8021eb4:	68fb      	ldr	r3, [r7, #12]
 8021eb6:	330c      	adds	r3, #12
 8021eb8:	681b      	ldr	r3, [r3, #0]
 8021eba:	2b00      	cmp	r3, #0
 8021ebc:	d003      	beq.n	8021ec6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8021ebe:	68fb      	ldr	r3, [r7, #12]
 8021ec0:	330c      	adds	r3, #12
 8021ec2:	61bb      	str	r3, [r7, #24]
 8021ec4:	e002      	b.n	8021ecc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8021ec6:	f06f 0303 	mvn.w	r3, #3
 8021eca:	e07d      	b.n	8021fc8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8021ecc:	4b46      	ldr	r3, [pc, #280]	@ (8021fe8 <etharp_output+0x1fc>)
 8021ece:	781b      	ldrb	r3, [r3, #0]
 8021ed0:	4619      	mov	r1, r3
 8021ed2:	4a46      	ldr	r2, [pc, #280]	@ (8021fec <etharp_output+0x200>)
 8021ed4:	460b      	mov	r3, r1
 8021ed6:	005b      	lsls	r3, r3, #1
 8021ed8:	440b      	add	r3, r1
 8021eda:	00db      	lsls	r3, r3, #3
 8021edc:	4413      	add	r3, r2
 8021ede:	3314      	adds	r3, #20
 8021ee0:	781b      	ldrb	r3, [r3, #0]
 8021ee2:	2b01      	cmp	r3, #1
 8021ee4:	d925      	bls.n	8021f32 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8021ee6:	4b40      	ldr	r3, [pc, #256]	@ (8021fe8 <etharp_output+0x1fc>)
 8021ee8:	781b      	ldrb	r3, [r3, #0]
 8021eea:	4619      	mov	r1, r3
 8021eec:	4a3f      	ldr	r2, [pc, #252]	@ (8021fec <etharp_output+0x200>)
 8021eee:	460b      	mov	r3, r1
 8021ef0:	005b      	lsls	r3, r3, #1
 8021ef2:	440b      	add	r3, r1
 8021ef4:	00db      	lsls	r3, r3, #3
 8021ef6:	4413      	add	r3, r2
 8021ef8:	3308      	adds	r3, #8
 8021efa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8021efc:	68fa      	ldr	r2, [r7, #12]
 8021efe:	429a      	cmp	r2, r3
 8021f00:	d117      	bne.n	8021f32 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8021f02:	69bb      	ldr	r3, [r7, #24]
 8021f04:	681a      	ldr	r2, [r3, #0]
 8021f06:	4b38      	ldr	r3, [pc, #224]	@ (8021fe8 <etharp_output+0x1fc>)
 8021f08:	781b      	ldrb	r3, [r3, #0]
 8021f0a:	4618      	mov	r0, r3
 8021f0c:	4937      	ldr	r1, [pc, #220]	@ (8021fec <etharp_output+0x200>)
 8021f0e:	4603      	mov	r3, r0
 8021f10:	005b      	lsls	r3, r3, #1
 8021f12:	4403      	add	r3, r0
 8021f14:	00db      	lsls	r3, r3, #3
 8021f16:	440b      	add	r3, r1
 8021f18:	3304      	adds	r3, #4
 8021f1a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8021f1c:	429a      	cmp	r2, r3
 8021f1e:	d108      	bne.n	8021f32 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8021f20:	4b31      	ldr	r3, [pc, #196]	@ (8021fe8 <etharp_output+0x1fc>)
 8021f22:	781b      	ldrb	r3, [r3, #0]
 8021f24:	461a      	mov	r2, r3
 8021f26:	68b9      	ldr	r1, [r7, #8]
 8021f28:	68f8      	ldr	r0, [r7, #12]
 8021f2a:	f7ff fec5 	bl	8021cb8 <etharp_output_to_arp_index>
 8021f2e:	4603      	mov	r3, r0
 8021f30:	e04a      	b.n	8021fc8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8021f32:	2300      	movs	r3, #0
 8021f34:	75fb      	strb	r3, [r7, #23]
 8021f36:	e031      	b.n	8021f9c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8021f38:	7dfa      	ldrb	r2, [r7, #23]
 8021f3a:	492c      	ldr	r1, [pc, #176]	@ (8021fec <etharp_output+0x200>)
 8021f3c:	4613      	mov	r3, r2
 8021f3e:	005b      	lsls	r3, r3, #1
 8021f40:	4413      	add	r3, r2
 8021f42:	00db      	lsls	r3, r3, #3
 8021f44:	440b      	add	r3, r1
 8021f46:	3314      	adds	r3, #20
 8021f48:	781b      	ldrb	r3, [r3, #0]
 8021f4a:	2b01      	cmp	r3, #1
 8021f4c:	d923      	bls.n	8021f96 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8021f4e:	7dfa      	ldrb	r2, [r7, #23]
 8021f50:	4926      	ldr	r1, [pc, #152]	@ (8021fec <etharp_output+0x200>)
 8021f52:	4613      	mov	r3, r2
 8021f54:	005b      	lsls	r3, r3, #1
 8021f56:	4413      	add	r3, r2
 8021f58:	00db      	lsls	r3, r3, #3
 8021f5a:	440b      	add	r3, r1
 8021f5c:	3308      	adds	r3, #8
 8021f5e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8021f60:	68fa      	ldr	r2, [r7, #12]
 8021f62:	429a      	cmp	r2, r3
 8021f64:	d117      	bne.n	8021f96 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8021f66:	69bb      	ldr	r3, [r7, #24]
 8021f68:	6819      	ldr	r1, [r3, #0]
 8021f6a:	7dfa      	ldrb	r2, [r7, #23]
 8021f6c:	481f      	ldr	r0, [pc, #124]	@ (8021fec <etharp_output+0x200>)
 8021f6e:	4613      	mov	r3, r2
 8021f70:	005b      	lsls	r3, r3, #1
 8021f72:	4413      	add	r3, r2
 8021f74:	00db      	lsls	r3, r3, #3
 8021f76:	4403      	add	r3, r0
 8021f78:	3304      	adds	r3, #4
 8021f7a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8021f7c:	4299      	cmp	r1, r3
 8021f7e:	d10a      	bne.n	8021f96 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8021f80:	4a19      	ldr	r2, [pc, #100]	@ (8021fe8 <etharp_output+0x1fc>)
 8021f82:	7dfb      	ldrb	r3, [r7, #23]
 8021f84:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8021f86:	7dfb      	ldrb	r3, [r7, #23]
 8021f88:	461a      	mov	r2, r3
 8021f8a:	68b9      	ldr	r1, [r7, #8]
 8021f8c:	68f8      	ldr	r0, [r7, #12]
 8021f8e:	f7ff fe93 	bl	8021cb8 <etharp_output_to_arp_index>
 8021f92:	4603      	mov	r3, r0
 8021f94:	e018      	b.n	8021fc8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8021f96:	7dfb      	ldrb	r3, [r7, #23]
 8021f98:	3301      	adds	r3, #1
 8021f9a:	75fb      	strb	r3, [r7, #23]
 8021f9c:	7dfb      	ldrb	r3, [r7, #23]
 8021f9e:	2b09      	cmp	r3, #9
 8021fa0:	d9ca      	bls.n	8021f38 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8021fa2:	68ba      	ldr	r2, [r7, #8]
 8021fa4:	69b9      	ldr	r1, [r7, #24]
 8021fa6:	68f8      	ldr	r0, [r7, #12]
 8021fa8:	f000 f822 	bl	8021ff0 <etharp_query>
 8021fac:	4603      	mov	r3, r0
 8021fae:	e00b      	b.n	8021fc8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8021fb0:	68fb      	ldr	r3, [r7, #12]
 8021fb2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8021fb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021fba:	9300      	str	r3, [sp, #0]
 8021fbc:	69fb      	ldr	r3, [r7, #28]
 8021fbe:	68b9      	ldr	r1, [r7, #8]
 8021fc0:	68f8      	ldr	r0, [r7, #12]
 8021fc2:	f001 fea9 	bl	8023d18 <ethernet_output>
 8021fc6:	4603      	mov	r3, r0
}
 8021fc8:	4618      	mov	r0, r3
 8021fca:	3720      	adds	r7, #32
 8021fcc:	46bd      	mov	sp, r7
 8021fce:	bd80      	pop	{r7, pc}
 8021fd0:	0802c634 	.word	0x0802c634
 8021fd4:	0802c784 	.word	0x0802c784
 8021fd8:	0802c6ac 	.word	0x0802c6ac
 8021fdc:	0802c7d4 	.word	0x0802c7d4
 8021fe0:	0802c774 	.word	0x0802c774
 8021fe4:	0802cf1c 	.word	0x0802cf1c
 8021fe8:	2400bf9c 	.word	0x2400bf9c
 8021fec:	2400beac 	.word	0x2400beac

08021ff0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8021ff0:	b580      	push	{r7, lr}
 8021ff2:	b08c      	sub	sp, #48	@ 0x30
 8021ff4:	af02      	add	r7, sp, #8
 8021ff6:	60f8      	str	r0, [r7, #12]
 8021ff8:	60b9      	str	r1, [r7, #8]
 8021ffa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8021ffc:	68fb      	ldr	r3, [r7, #12]
 8021ffe:	3326      	adds	r3, #38	@ 0x26
 8022000:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8022002:	23ff      	movs	r3, #255	@ 0xff
 8022004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8022008:	2300      	movs	r3, #0
 802200a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802200c:	68bb      	ldr	r3, [r7, #8]
 802200e:	681b      	ldr	r3, [r3, #0]
 8022010:	68f9      	ldr	r1, [r7, #12]
 8022012:	4618      	mov	r0, r3
 8022014:	f000 fe34 	bl	8022c80 <ip4_addr_isbroadcast_u32>
 8022018:	4603      	mov	r3, r0
 802201a:	2b00      	cmp	r3, #0
 802201c:	d10c      	bne.n	8022038 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802201e:	68bb      	ldr	r3, [r7, #8]
 8022020:	681b      	ldr	r3, [r3, #0]
 8022022:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8022026:	2be0      	cmp	r3, #224	@ 0xe0
 8022028:	d006      	beq.n	8022038 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802202a:	68bb      	ldr	r3, [r7, #8]
 802202c:	2b00      	cmp	r3, #0
 802202e:	d003      	beq.n	8022038 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8022030:	68bb      	ldr	r3, [r7, #8]
 8022032:	681b      	ldr	r3, [r3, #0]
 8022034:	2b00      	cmp	r3, #0
 8022036:	d102      	bne.n	802203e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8022038:	f06f 030f 	mvn.w	r3, #15
 802203c:	e101      	b.n	8022242 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 802203e:	68fa      	ldr	r2, [r7, #12]
 8022040:	2101      	movs	r1, #1
 8022042:	68b8      	ldr	r0, [r7, #8]
 8022044:	f7ff fb60 	bl	8021708 <etharp_find_entry>
 8022048:	4603      	mov	r3, r0
 802204a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 802204c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8022050:	2b00      	cmp	r3, #0
 8022052:	da02      	bge.n	802205a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8022054:	8a7b      	ldrh	r3, [r7, #18]
 8022056:	b25b      	sxtb	r3, r3
 8022058:	e0f3      	b.n	8022242 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 802205a:	8a7b      	ldrh	r3, [r7, #18]
 802205c:	2b7e      	cmp	r3, #126	@ 0x7e
 802205e:	d906      	bls.n	802206e <etharp_query+0x7e>
 8022060:	4b7a      	ldr	r3, [pc, #488]	@ (802224c <etharp_query+0x25c>)
 8022062:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8022066:	497a      	ldr	r1, [pc, #488]	@ (8022250 <etharp_query+0x260>)
 8022068:	487a      	ldr	r0, [pc, #488]	@ (8022254 <etharp_query+0x264>)
 802206a:	f003 f8fb 	bl	8025264 <iprintf>
  i = (netif_addr_idx_t)i_err;
 802206e:	8a7b      	ldrh	r3, [r7, #18]
 8022070:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8022072:	7c7a      	ldrb	r2, [r7, #17]
 8022074:	4978      	ldr	r1, [pc, #480]	@ (8022258 <etharp_query+0x268>)
 8022076:	4613      	mov	r3, r2
 8022078:	005b      	lsls	r3, r3, #1
 802207a:	4413      	add	r3, r2
 802207c:	00db      	lsls	r3, r3, #3
 802207e:	440b      	add	r3, r1
 8022080:	3314      	adds	r3, #20
 8022082:	781b      	ldrb	r3, [r3, #0]
 8022084:	2b00      	cmp	r3, #0
 8022086:	d115      	bne.n	80220b4 <etharp_query+0xc4>
    is_new_entry = 1;
 8022088:	2301      	movs	r3, #1
 802208a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 802208c:	7c7a      	ldrb	r2, [r7, #17]
 802208e:	4972      	ldr	r1, [pc, #456]	@ (8022258 <etharp_query+0x268>)
 8022090:	4613      	mov	r3, r2
 8022092:	005b      	lsls	r3, r3, #1
 8022094:	4413      	add	r3, r2
 8022096:	00db      	lsls	r3, r3, #3
 8022098:	440b      	add	r3, r1
 802209a:	3314      	adds	r3, #20
 802209c:	2201      	movs	r2, #1
 802209e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80220a0:	7c7a      	ldrb	r2, [r7, #17]
 80220a2:	496d      	ldr	r1, [pc, #436]	@ (8022258 <etharp_query+0x268>)
 80220a4:	4613      	mov	r3, r2
 80220a6:	005b      	lsls	r3, r3, #1
 80220a8:	4413      	add	r3, r2
 80220aa:	00db      	lsls	r3, r3, #3
 80220ac:	440b      	add	r3, r1
 80220ae:	3308      	adds	r3, #8
 80220b0:	68fa      	ldr	r2, [r7, #12]
 80220b2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80220b4:	7c7a      	ldrb	r2, [r7, #17]
 80220b6:	4968      	ldr	r1, [pc, #416]	@ (8022258 <etharp_query+0x268>)
 80220b8:	4613      	mov	r3, r2
 80220ba:	005b      	lsls	r3, r3, #1
 80220bc:	4413      	add	r3, r2
 80220be:	00db      	lsls	r3, r3, #3
 80220c0:	440b      	add	r3, r1
 80220c2:	3314      	adds	r3, #20
 80220c4:	781b      	ldrb	r3, [r3, #0]
 80220c6:	2b01      	cmp	r3, #1
 80220c8:	d011      	beq.n	80220ee <etharp_query+0xfe>
 80220ca:	7c7a      	ldrb	r2, [r7, #17]
 80220cc:	4962      	ldr	r1, [pc, #392]	@ (8022258 <etharp_query+0x268>)
 80220ce:	4613      	mov	r3, r2
 80220d0:	005b      	lsls	r3, r3, #1
 80220d2:	4413      	add	r3, r2
 80220d4:	00db      	lsls	r3, r3, #3
 80220d6:	440b      	add	r3, r1
 80220d8:	3314      	adds	r3, #20
 80220da:	781b      	ldrb	r3, [r3, #0]
 80220dc:	2b01      	cmp	r3, #1
 80220de:	d806      	bhi.n	80220ee <etharp_query+0xfe>
 80220e0:	4b5a      	ldr	r3, [pc, #360]	@ (802224c <etharp_query+0x25c>)
 80220e2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80220e6:	495d      	ldr	r1, [pc, #372]	@ (802225c <etharp_query+0x26c>)
 80220e8:	485a      	ldr	r0, [pc, #360]	@ (8022254 <etharp_query+0x264>)
 80220ea:	f003 f8bb 	bl	8025264 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80220ee:	6a3b      	ldr	r3, [r7, #32]
 80220f0:	2b00      	cmp	r3, #0
 80220f2:	d102      	bne.n	80220fa <etharp_query+0x10a>
 80220f4:	687b      	ldr	r3, [r7, #4]
 80220f6:	2b00      	cmp	r3, #0
 80220f8:	d10c      	bne.n	8022114 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80220fa:	68b9      	ldr	r1, [r7, #8]
 80220fc:	68f8      	ldr	r0, [r7, #12]
 80220fe:	f000 f963 	bl	80223c8 <etharp_request>
 8022102:	4603      	mov	r3, r0
 8022104:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8022108:	687b      	ldr	r3, [r7, #4]
 802210a:	2b00      	cmp	r3, #0
 802210c:	d102      	bne.n	8022114 <etharp_query+0x124>
      return result;
 802210e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8022112:	e096      	b.n	8022242 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8022114:	687b      	ldr	r3, [r7, #4]
 8022116:	2b00      	cmp	r3, #0
 8022118:	d106      	bne.n	8022128 <etharp_query+0x138>
 802211a:	4b4c      	ldr	r3, [pc, #304]	@ (802224c <etharp_query+0x25c>)
 802211c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8022120:	494f      	ldr	r1, [pc, #316]	@ (8022260 <etharp_query+0x270>)
 8022122:	484c      	ldr	r0, [pc, #304]	@ (8022254 <etharp_query+0x264>)
 8022124:	f003 f89e 	bl	8025264 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8022128:	7c7a      	ldrb	r2, [r7, #17]
 802212a:	494b      	ldr	r1, [pc, #300]	@ (8022258 <etharp_query+0x268>)
 802212c:	4613      	mov	r3, r2
 802212e:	005b      	lsls	r3, r3, #1
 8022130:	4413      	add	r3, r2
 8022132:	00db      	lsls	r3, r3, #3
 8022134:	440b      	add	r3, r1
 8022136:	3314      	adds	r3, #20
 8022138:	781b      	ldrb	r3, [r3, #0]
 802213a:	2b01      	cmp	r3, #1
 802213c:	d917      	bls.n	802216e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 802213e:	4a49      	ldr	r2, [pc, #292]	@ (8022264 <etharp_query+0x274>)
 8022140:	7c7b      	ldrb	r3, [r7, #17]
 8022142:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8022144:	7c7a      	ldrb	r2, [r7, #17]
 8022146:	4613      	mov	r3, r2
 8022148:	005b      	lsls	r3, r3, #1
 802214a:	4413      	add	r3, r2
 802214c:	00db      	lsls	r3, r3, #3
 802214e:	3308      	adds	r3, #8
 8022150:	4a41      	ldr	r2, [pc, #260]	@ (8022258 <etharp_query+0x268>)
 8022152:	4413      	add	r3, r2
 8022154:	3304      	adds	r3, #4
 8022156:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 802215a:	9200      	str	r2, [sp, #0]
 802215c:	697a      	ldr	r2, [r7, #20]
 802215e:	6879      	ldr	r1, [r7, #4]
 8022160:	68f8      	ldr	r0, [r7, #12]
 8022162:	f001 fdd9 	bl	8023d18 <ethernet_output>
 8022166:	4603      	mov	r3, r0
 8022168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 802216c:	e067      	b.n	802223e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802216e:	7c7a      	ldrb	r2, [r7, #17]
 8022170:	4939      	ldr	r1, [pc, #228]	@ (8022258 <etharp_query+0x268>)
 8022172:	4613      	mov	r3, r2
 8022174:	005b      	lsls	r3, r3, #1
 8022176:	4413      	add	r3, r2
 8022178:	00db      	lsls	r3, r3, #3
 802217a:	440b      	add	r3, r1
 802217c:	3314      	adds	r3, #20
 802217e:	781b      	ldrb	r3, [r3, #0]
 8022180:	2b01      	cmp	r3, #1
 8022182:	d15c      	bne.n	802223e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8022184:	2300      	movs	r3, #0
 8022186:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8022188:	687b      	ldr	r3, [r7, #4]
 802218a:	61fb      	str	r3, [r7, #28]
    while (p) {
 802218c:	e01c      	b.n	80221c8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802218e:	69fb      	ldr	r3, [r7, #28]
 8022190:	895a      	ldrh	r2, [r3, #10]
 8022192:	69fb      	ldr	r3, [r7, #28]
 8022194:	891b      	ldrh	r3, [r3, #8]
 8022196:	429a      	cmp	r2, r3
 8022198:	d10a      	bne.n	80221b0 <etharp_query+0x1c0>
 802219a:	69fb      	ldr	r3, [r7, #28]
 802219c:	681b      	ldr	r3, [r3, #0]
 802219e:	2b00      	cmp	r3, #0
 80221a0:	d006      	beq.n	80221b0 <etharp_query+0x1c0>
 80221a2:	4b2a      	ldr	r3, [pc, #168]	@ (802224c <etharp_query+0x25c>)
 80221a4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80221a8:	492f      	ldr	r1, [pc, #188]	@ (8022268 <etharp_query+0x278>)
 80221aa:	482a      	ldr	r0, [pc, #168]	@ (8022254 <etharp_query+0x264>)
 80221ac:	f003 f85a 	bl	8025264 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80221b0:	69fb      	ldr	r3, [r7, #28]
 80221b2:	7b1b      	ldrb	r3, [r3, #12]
 80221b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80221b8:	2b00      	cmp	r3, #0
 80221ba:	d002      	beq.n	80221c2 <etharp_query+0x1d2>
        copy_needed = 1;
 80221bc:	2301      	movs	r3, #1
 80221be:	61bb      	str	r3, [r7, #24]
        break;
 80221c0:	e005      	b.n	80221ce <etharp_query+0x1de>
      }
      p = p->next;
 80221c2:	69fb      	ldr	r3, [r7, #28]
 80221c4:	681b      	ldr	r3, [r3, #0]
 80221c6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80221c8:	69fb      	ldr	r3, [r7, #28]
 80221ca:	2b00      	cmp	r3, #0
 80221cc:	d1df      	bne.n	802218e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80221ce:	69bb      	ldr	r3, [r7, #24]
 80221d0:	2b00      	cmp	r3, #0
 80221d2:	d007      	beq.n	80221e4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80221d4:	687a      	ldr	r2, [r7, #4]
 80221d6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80221da:	200e      	movs	r0, #14
 80221dc:	f7f8 fb6c 	bl	801a8b8 <pbuf_clone>
 80221e0:	61f8      	str	r0, [r7, #28]
 80221e2:	e004      	b.n	80221ee <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80221e4:	687b      	ldr	r3, [r7, #4]
 80221e6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80221e8:	69f8      	ldr	r0, [r7, #28]
 80221ea:	f7f8 f993 	bl	801a514 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80221ee:	69fb      	ldr	r3, [r7, #28]
 80221f0:	2b00      	cmp	r3, #0
 80221f2:	d021      	beq.n	8022238 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80221f4:	7c7a      	ldrb	r2, [r7, #17]
 80221f6:	4918      	ldr	r1, [pc, #96]	@ (8022258 <etharp_query+0x268>)
 80221f8:	4613      	mov	r3, r2
 80221fa:	005b      	lsls	r3, r3, #1
 80221fc:	4413      	add	r3, r2
 80221fe:	00db      	lsls	r3, r3, #3
 8022200:	440b      	add	r3, r1
 8022202:	681b      	ldr	r3, [r3, #0]
 8022204:	2b00      	cmp	r3, #0
 8022206:	d00a      	beq.n	802221e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8022208:	7c7a      	ldrb	r2, [r7, #17]
 802220a:	4913      	ldr	r1, [pc, #76]	@ (8022258 <etharp_query+0x268>)
 802220c:	4613      	mov	r3, r2
 802220e:	005b      	lsls	r3, r3, #1
 8022210:	4413      	add	r3, r2
 8022212:	00db      	lsls	r3, r3, #3
 8022214:	440b      	add	r3, r1
 8022216:	681b      	ldr	r3, [r3, #0]
 8022218:	4618      	mov	r0, r3
 802221a:	f7f8 f8d5 	bl	801a3c8 <pbuf_free>
      }
      arp_table[i].q = p;
 802221e:	7c7a      	ldrb	r2, [r7, #17]
 8022220:	490d      	ldr	r1, [pc, #52]	@ (8022258 <etharp_query+0x268>)
 8022222:	4613      	mov	r3, r2
 8022224:	005b      	lsls	r3, r3, #1
 8022226:	4413      	add	r3, r2
 8022228:	00db      	lsls	r3, r3, #3
 802222a:	440b      	add	r3, r1
 802222c:	69fa      	ldr	r2, [r7, #28]
 802222e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8022230:	2300      	movs	r3, #0
 8022232:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8022236:	e002      	b.n	802223e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8022238:	23ff      	movs	r3, #255	@ 0xff
 802223a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 802223e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8022242:	4618      	mov	r0, r3
 8022244:	3728      	adds	r7, #40	@ 0x28
 8022246:	46bd      	mov	sp, r7
 8022248:	bd80      	pop	{r7, pc}
 802224a:	bf00      	nop
 802224c:	0802c634 	.word	0x0802c634
 8022250:	0802c7e0 	.word	0x0802c7e0
 8022254:	0802c6ac 	.word	0x0802c6ac
 8022258:	2400beac 	.word	0x2400beac
 802225c:	0802c7f0 	.word	0x0802c7f0
 8022260:	0802c7d4 	.word	0x0802c7d4
 8022264:	2400bf9c 	.word	0x2400bf9c
 8022268:	0802c818 	.word	0x0802c818

0802226c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 802226c:	b580      	push	{r7, lr}
 802226e:	b08a      	sub	sp, #40	@ 0x28
 8022270:	af02      	add	r7, sp, #8
 8022272:	60f8      	str	r0, [r7, #12]
 8022274:	60b9      	str	r1, [r7, #8]
 8022276:	607a      	str	r2, [r7, #4]
 8022278:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 802227a:	2300      	movs	r3, #0
 802227c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 802227e:	68fb      	ldr	r3, [r7, #12]
 8022280:	2b00      	cmp	r3, #0
 8022282:	d106      	bne.n	8022292 <etharp_raw+0x26>
 8022284:	4b3a      	ldr	r3, [pc, #232]	@ (8022370 <etharp_raw+0x104>)
 8022286:	f240 4257 	movw	r2, #1111	@ 0x457
 802228a:	493a      	ldr	r1, [pc, #232]	@ (8022374 <etharp_raw+0x108>)
 802228c:	483a      	ldr	r0, [pc, #232]	@ (8022378 <etharp_raw+0x10c>)
 802228e:	f002 ffe9 	bl	8025264 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8022292:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8022296:	211c      	movs	r1, #28
 8022298:	200e      	movs	r0, #14
 802229a:	f7f7 fd7f 	bl	8019d9c <pbuf_alloc>
 802229e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80222a0:	69bb      	ldr	r3, [r7, #24]
 80222a2:	2b00      	cmp	r3, #0
 80222a4:	d102      	bne.n	80222ac <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80222a6:	f04f 33ff 	mov.w	r3, #4294967295
 80222aa:	e05d      	b.n	8022368 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80222ac:	69bb      	ldr	r3, [r7, #24]
 80222ae:	895b      	ldrh	r3, [r3, #10]
 80222b0:	2b1b      	cmp	r3, #27
 80222b2:	d806      	bhi.n	80222c2 <etharp_raw+0x56>
 80222b4:	4b2e      	ldr	r3, [pc, #184]	@ (8022370 <etharp_raw+0x104>)
 80222b6:	f240 4262 	movw	r2, #1122	@ 0x462
 80222ba:	4930      	ldr	r1, [pc, #192]	@ (802237c <etharp_raw+0x110>)
 80222bc:	482e      	ldr	r0, [pc, #184]	@ (8022378 <etharp_raw+0x10c>)
 80222be:	f002 ffd1 	bl	8025264 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80222c2:	69bb      	ldr	r3, [r7, #24]
 80222c4:	685b      	ldr	r3, [r3, #4]
 80222c6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80222c8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80222ca:	4618      	mov	r0, r3
 80222cc:	f7f6 fba0 	bl	8018a10 <lwip_htons>
 80222d0:	4603      	mov	r3, r0
 80222d2:	461a      	mov	r2, r3
 80222d4:	697b      	ldr	r3, [r7, #20]
 80222d6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80222d8:	68fb      	ldr	r3, [r7, #12]
 80222da:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80222de:	2b06      	cmp	r3, #6
 80222e0:	d006      	beq.n	80222f0 <etharp_raw+0x84>
 80222e2:	4b23      	ldr	r3, [pc, #140]	@ (8022370 <etharp_raw+0x104>)
 80222e4:	f240 4269 	movw	r2, #1129	@ 0x469
 80222e8:	4925      	ldr	r1, [pc, #148]	@ (8022380 <etharp_raw+0x114>)
 80222ea:	4823      	ldr	r0, [pc, #140]	@ (8022378 <etharp_raw+0x10c>)
 80222ec:	f002 ffba 	bl	8025264 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80222f0:	697b      	ldr	r3, [r7, #20]
 80222f2:	3308      	adds	r3, #8
 80222f4:	2206      	movs	r2, #6
 80222f6:	6839      	ldr	r1, [r7, #0]
 80222f8:	4618      	mov	r0, r3
 80222fa:	f003 f940 	bl	802557e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80222fe:	697b      	ldr	r3, [r7, #20]
 8022300:	3312      	adds	r3, #18
 8022302:	2206      	movs	r2, #6
 8022304:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8022306:	4618      	mov	r0, r3
 8022308:	f003 f939 	bl	802557e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 802230c:	697b      	ldr	r3, [r7, #20]
 802230e:	330e      	adds	r3, #14
 8022310:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022312:	6812      	ldr	r2, [r2, #0]
 8022314:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8022316:	697b      	ldr	r3, [r7, #20]
 8022318:	3318      	adds	r3, #24
 802231a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802231c:	6812      	ldr	r2, [r2, #0]
 802231e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8022320:	697b      	ldr	r3, [r7, #20]
 8022322:	2200      	movs	r2, #0
 8022324:	701a      	strb	r2, [r3, #0]
 8022326:	2200      	movs	r2, #0
 8022328:	f042 0201 	orr.w	r2, r2, #1
 802232c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802232e:	697b      	ldr	r3, [r7, #20]
 8022330:	2200      	movs	r2, #0
 8022332:	f042 0208 	orr.w	r2, r2, #8
 8022336:	709a      	strb	r2, [r3, #2]
 8022338:	2200      	movs	r2, #0
 802233a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 802233c:	697b      	ldr	r3, [r7, #20]
 802233e:	2206      	movs	r2, #6
 8022340:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8022342:	697b      	ldr	r3, [r7, #20]
 8022344:	2204      	movs	r2, #4
 8022346:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8022348:	f640 0306 	movw	r3, #2054	@ 0x806
 802234c:	9300      	str	r3, [sp, #0]
 802234e:	687b      	ldr	r3, [r7, #4]
 8022350:	68ba      	ldr	r2, [r7, #8]
 8022352:	69b9      	ldr	r1, [r7, #24]
 8022354:	68f8      	ldr	r0, [r7, #12]
 8022356:	f001 fcdf 	bl	8023d18 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 802235a:	69b8      	ldr	r0, [r7, #24]
 802235c:	f7f8 f834 	bl	801a3c8 <pbuf_free>
  p = NULL;
 8022360:	2300      	movs	r3, #0
 8022362:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8022364:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8022368:	4618      	mov	r0, r3
 802236a:	3720      	adds	r7, #32
 802236c:	46bd      	mov	sp, r7
 802236e:	bd80      	pop	{r7, pc}
 8022370:	0802c634 	.word	0x0802c634
 8022374:	0802c784 	.word	0x0802c784
 8022378:	0802c6ac 	.word	0x0802c6ac
 802237c:	0802c834 	.word	0x0802c834
 8022380:	0802c868 	.word	0x0802c868

08022384 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8022384:	b580      	push	{r7, lr}
 8022386:	b088      	sub	sp, #32
 8022388:	af04      	add	r7, sp, #16
 802238a:	60f8      	str	r0, [r7, #12]
 802238c:	60b9      	str	r1, [r7, #8]
 802238e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022390:	68fb      	ldr	r3, [r7, #12]
 8022392:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8022396:	68fb      	ldr	r3, [r7, #12]
 8022398:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 802239c:	68fb      	ldr	r3, [r7, #12]
 802239e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80223a0:	2201      	movs	r2, #1
 80223a2:	9203      	str	r2, [sp, #12]
 80223a4:	68ba      	ldr	r2, [r7, #8]
 80223a6:	9202      	str	r2, [sp, #8]
 80223a8:	4a06      	ldr	r2, [pc, #24]	@ (80223c4 <etharp_request_dst+0x40>)
 80223aa:	9201      	str	r2, [sp, #4]
 80223ac:	9300      	str	r3, [sp, #0]
 80223ae:	4603      	mov	r3, r0
 80223b0:	687a      	ldr	r2, [r7, #4]
 80223b2:	68f8      	ldr	r0, [r7, #12]
 80223b4:	f7ff ff5a 	bl	802226c <etharp_raw>
 80223b8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80223ba:	4618      	mov	r0, r3
 80223bc:	3710      	adds	r7, #16
 80223be:	46bd      	mov	sp, r7
 80223c0:	bd80      	pop	{r7, pc}
 80223c2:	bf00      	nop
 80223c4:	0802cf24 	.word	0x0802cf24

080223c8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80223c8:	b580      	push	{r7, lr}
 80223ca:	b082      	sub	sp, #8
 80223cc:	af00      	add	r7, sp, #0
 80223ce:	6078      	str	r0, [r7, #4]
 80223d0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80223d2:	4a05      	ldr	r2, [pc, #20]	@ (80223e8 <etharp_request+0x20>)
 80223d4:	6839      	ldr	r1, [r7, #0]
 80223d6:	6878      	ldr	r0, [r7, #4]
 80223d8:	f7ff ffd4 	bl	8022384 <etharp_request_dst>
 80223dc:	4603      	mov	r3, r0
}
 80223de:	4618      	mov	r0, r3
 80223e0:	3708      	adds	r7, #8
 80223e2:	46bd      	mov	sp, r7
 80223e4:	bd80      	pop	{r7, pc}
 80223e6:	bf00      	nop
 80223e8:	0802cf1c 	.word	0x0802cf1c

080223ec <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80223ec:	b580      	push	{r7, lr}
 80223ee:	b08e      	sub	sp, #56	@ 0x38
 80223f0:	af04      	add	r7, sp, #16
 80223f2:	6078      	str	r0, [r7, #4]
 80223f4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80223f6:	4b87      	ldr	r3, [pc, #540]	@ (8022614 <icmp_input+0x228>)
 80223f8:	689b      	ldr	r3, [r3, #8]
 80223fa:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80223fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80223fe:	781b      	ldrb	r3, [r3, #0]
 8022400:	f003 030f 	and.w	r3, r3, #15
 8022404:	b2db      	uxtb	r3, r3
 8022406:	009b      	lsls	r3, r3, #2
 8022408:	b2db      	uxtb	r3, r3
 802240a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 802240c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 802240e:	2b13      	cmp	r3, #19
 8022410:	f240 80e8 	bls.w	80225e4 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8022414:	687b      	ldr	r3, [r7, #4]
 8022416:	895b      	ldrh	r3, [r3, #10]
 8022418:	2b03      	cmp	r3, #3
 802241a:	f240 80e5 	bls.w	80225e8 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 802241e:	687b      	ldr	r3, [r7, #4]
 8022420:	685b      	ldr	r3, [r3, #4]
 8022422:	781b      	ldrb	r3, [r3, #0]
 8022424:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8022428:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 802242c:	2b00      	cmp	r3, #0
 802242e:	f000 80d2 	beq.w	80225d6 <icmp_input+0x1ea>
 8022432:	2b08      	cmp	r3, #8
 8022434:	f040 80d2 	bne.w	80225dc <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8022438:	4b77      	ldr	r3, [pc, #476]	@ (8022618 <icmp_input+0x22c>)
 802243a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802243c:	4b75      	ldr	r3, [pc, #468]	@ (8022614 <icmp_input+0x228>)
 802243e:	695b      	ldr	r3, [r3, #20]
 8022440:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8022444:	2be0      	cmp	r3, #224	@ 0xe0
 8022446:	f000 80d6 	beq.w	80225f6 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 802244a:	4b72      	ldr	r3, [pc, #456]	@ (8022614 <icmp_input+0x228>)
 802244c:	695b      	ldr	r3, [r3, #20]
 802244e:	4a71      	ldr	r2, [pc, #452]	@ (8022614 <icmp_input+0x228>)
 8022450:	6812      	ldr	r2, [r2, #0]
 8022452:	4611      	mov	r1, r2
 8022454:	4618      	mov	r0, r3
 8022456:	f000 fc13 	bl	8022c80 <ip4_addr_isbroadcast_u32>
 802245a:	4603      	mov	r3, r0
 802245c:	2b00      	cmp	r3, #0
 802245e:	f040 80cc 	bne.w	80225fa <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8022462:	687b      	ldr	r3, [r7, #4]
 8022464:	891b      	ldrh	r3, [r3, #8]
 8022466:	2b07      	cmp	r3, #7
 8022468:	f240 80c0 	bls.w	80225ec <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 802246c:	6878      	ldr	r0, [r7, #4]
 802246e:	f7f6 fb6c 	bl	8018b4a <inet_chksum_pbuf>
 8022472:	4603      	mov	r3, r0
 8022474:	2b00      	cmp	r3, #0
 8022476:	d003      	beq.n	8022480 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8022478:	6878      	ldr	r0, [r7, #4]
 802247a:	f7f7 ffa5 	bl	801a3c8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 802247e:	e0c5      	b.n	802260c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8022480:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022482:	330e      	adds	r3, #14
 8022484:	4619      	mov	r1, r3
 8022486:	6878      	ldr	r0, [r7, #4]
 8022488:	f7f7 fed6 	bl	801a238 <pbuf_add_header>
 802248c:	4603      	mov	r3, r0
 802248e:	2b00      	cmp	r3, #0
 8022490:	d04b      	beq.n	802252a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8022492:	687b      	ldr	r3, [r7, #4]
 8022494:	891a      	ldrh	r2, [r3, #8]
 8022496:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022498:	4413      	add	r3, r2
 802249a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 802249c:	687b      	ldr	r3, [r7, #4]
 802249e:	891b      	ldrh	r3, [r3, #8]
 80224a0:	8b7a      	ldrh	r2, [r7, #26]
 80224a2:	429a      	cmp	r2, r3
 80224a4:	f0c0 80ab 	bcc.w	80225fe <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80224a8:	8b7b      	ldrh	r3, [r7, #26]
 80224aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80224ae:	4619      	mov	r1, r3
 80224b0:	200e      	movs	r0, #14
 80224b2:	f7f7 fc73 	bl	8019d9c <pbuf_alloc>
 80224b6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80224b8:	697b      	ldr	r3, [r7, #20]
 80224ba:	2b00      	cmp	r3, #0
 80224bc:	f000 80a1 	beq.w	8022602 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80224c0:	697b      	ldr	r3, [r7, #20]
 80224c2:	895b      	ldrh	r3, [r3, #10]
 80224c4:	461a      	mov	r2, r3
 80224c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80224c8:	3308      	adds	r3, #8
 80224ca:	429a      	cmp	r2, r3
 80224cc:	d203      	bcs.n	80224d6 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80224ce:	6978      	ldr	r0, [r7, #20]
 80224d0:	f7f7 ff7a 	bl	801a3c8 <pbuf_free>
          goto icmperr;
 80224d4:	e096      	b.n	8022604 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80224d6:	697b      	ldr	r3, [r7, #20]
 80224d8:	685b      	ldr	r3, [r3, #4]
 80224da:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80224dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80224de:	4618      	mov	r0, r3
 80224e0:	f003 f84d 	bl	802557e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80224e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80224e6:	4619      	mov	r1, r3
 80224e8:	6978      	ldr	r0, [r7, #20]
 80224ea:	f7f7 feb5 	bl	801a258 <pbuf_remove_header>
 80224ee:	4603      	mov	r3, r0
 80224f0:	2b00      	cmp	r3, #0
 80224f2:	d009      	beq.n	8022508 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80224f4:	4b49      	ldr	r3, [pc, #292]	@ (802261c <icmp_input+0x230>)
 80224f6:	22b6      	movs	r2, #182	@ 0xb6
 80224f8:	4949      	ldr	r1, [pc, #292]	@ (8022620 <icmp_input+0x234>)
 80224fa:	484a      	ldr	r0, [pc, #296]	@ (8022624 <icmp_input+0x238>)
 80224fc:	f002 feb2 	bl	8025264 <iprintf>
          pbuf_free(r);
 8022500:	6978      	ldr	r0, [r7, #20]
 8022502:	f7f7 ff61 	bl	801a3c8 <pbuf_free>
          goto icmperr;
 8022506:	e07d      	b.n	8022604 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8022508:	6879      	ldr	r1, [r7, #4]
 802250a:	6978      	ldr	r0, [r7, #20]
 802250c:	f7f8 f890 	bl	801a630 <pbuf_copy>
 8022510:	4603      	mov	r3, r0
 8022512:	2b00      	cmp	r3, #0
 8022514:	d003      	beq.n	802251e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8022516:	6978      	ldr	r0, [r7, #20]
 8022518:	f7f7 ff56 	bl	801a3c8 <pbuf_free>
          goto icmperr;
 802251c:	e072      	b.n	8022604 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 802251e:	6878      	ldr	r0, [r7, #4]
 8022520:	f7f7 ff52 	bl	801a3c8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8022524:	697b      	ldr	r3, [r7, #20]
 8022526:	607b      	str	r3, [r7, #4]
 8022528:	e00f      	b.n	802254a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802252a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 802252c:	330e      	adds	r3, #14
 802252e:	4619      	mov	r1, r3
 8022530:	6878      	ldr	r0, [r7, #4]
 8022532:	f7f7 fe91 	bl	801a258 <pbuf_remove_header>
 8022536:	4603      	mov	r3, r0
 8022538:	2b00      	cmp	r3, #0
 802253a:	d006      	beq.n	802254a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 802253c:	4b37      	ldr	r3, [pc, #220]	@ (802261c <icmp_input+0x230>)
 802253e:	22c7      	movs	r2, #199	@ 0xc7
 8022540:	4939      	ldr	r1, [pc, #228]	@ (8022628 <icmp_input+0x23c>)
 8022542:	4838      	ldr	r0, [pc, #224]	@ (8022624 <icmp_input+0x238>)
 8022544:	f002 fe8e 	bl	8025264 <iprintf>
          goto icmperr;
 8022548:	e05c      	b.n	8022604 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 802254a:	687b      	ldr	r3, [r7, #4]
 802254c:	685b      	ldr	r3, [r3, #4]
 802254e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8022550:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022552:	4619      	mov	r1, r3
 8022554:	6878      	ldr	r0, [r7, #4]
 8022556:	f7f7 fe6f 	bl	801a238 <pbuf_add_header>
 802255a:	4603      	mov	r3, r0
 802255c:	2b00      	cmp	r3, #0
 802255e:	d13c      	bne.n	80225da <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8022560:	687b      	ldr	r3, [r7, #4]
 8022562:	685b      	ldr	r3, [r3, #4]
 8022564:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8022566:	69fb      	ldr	r3, [r7, #28]
 8022568:	681a      	ldr	r2, [r3, #0]
 802256a:	68fb      	ldr	r3, [r7, #12]
 802256c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 802256e:	4b29      	ldr	r3, [pc, #164]	@ (8022614 <icmp_input+0x228>)
 8022570:	691a      	ldr	r2, [r3, #16]
 8022572:	68fb      	ldr	r3, [r7, #12]
 8022574:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8022576:	693b      	ldr	r3, [r7, #16]
 8022578:	2200      	movs	r2, #0
 802257a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 802257c:	693b      	ldr	r3, [r7, #16]
 802257e:	885b      	ldrh	r3, [r3, #2]
 8022580:	b29b      	uxth	r3, r3
 8022582:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8022586:	4293      	cmp	r3, r2
 8022588:	d907      	bls.n	802259a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 802258a:	693b      	ldr	r3, [r7, #16]
 802258c:	885b      	ldrh	r3, [r3, #2]
 802258e:	b29b      	uxth	r3, r3
 8022590:	3309      	adds	r3, #9
 8022592:	b29a      	uxth	r2, r3
 8022594:	693b      	ldr	r3, [r7, #16]
 8022596:	805a      	strh	r2, [r3, #2]
 8022598:	e006      	b.n	80225a8 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 802259a:	693b      	ldr	r3, [r7, #16]
 802259c:	885b      	ldrh	r3, [r3, #2]
 802259e:	b29b      	uxth	r3, r3
 80225a0:	3308      	adds	r3, #8
 80225a2:	b29a      	uxth	r2, r3
 80225a4:	693b      	ldr	r3, [r7, #16]
 80225a6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80225a8:	68fb      	ldr	r3, [r7, #12]
 80225aa:	22ff      	movs	r2, #255	@ 0xff
 80225ac:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80225ae:	68fb      	ldr	r3, [r7, #12]
 80225b0:	2200      	movs	r2, #0
 80225b2:	729a      	strb	r2, [r3, #10]
 80225b4:	2200      	movs	r2, #0
 80225b6:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80225b8:	683b      	ldr	r3, [r7, #0]
 80225ba:	9302      	str	r3, [sp, #8]
 80225bc:	2301      	movs	r3, #1
 80225be:	9301      	str	r3, [sp, #4]
 80225c0:	2300      	movs	r3, #0
 80225c2:	9300      	str	r3, [sp, #0]
 80225c4:	23ff      	movs	r3, #255	@ 0xff
 80225c6:	2200      	movs	r2, #0
 80225c8:	69f9      	ldr	r1, [r7, #28]
 80225ca:	6878      	ldr	r0, [r7, #4]
 80225cc:	f000 fa80 	bl	8022ad0 <ip4_output_if>
 80225d0:	4603      	mov	r3, r0
 80225d2:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80225d4:	e001      	b.n	80225da <icmp_input+0x1ee>
      break;
 80225d6:	bf00      	nop
 80225d8:	e000      	b.n	80225dc <icmp_input+0x1f0>
      break;
 80225da:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80225dc:	6878      	ldr	r0, [r7, #4]
 80225de:	f7f7 fef3 	bl	801a3c8 <pbuf_free>
  return;
 80225e2:	e013      	b.n	802260c <icmp_input+0x220>
    goto lenerr;
 80225e4:	bf00      	nop
 80225e6:	e002      	b.n	80225ee <icmp_input+0x202>
    goto lenerr;
 80225e8:	bf00      	nop
 80225ea:	e000      	b.n	80225ee <icmp_input+0x202>
        goto lenerr;
 80225ec:	bf00      	nop
lenerr:
  pbuf_free(p);
 80225ee:	6878      	ldr	r0, [r7, #4]
 80225f0:	f7f7 feea 	bl	801a3c8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80225f4:	e00a      	b.n	802260c <icmp_input+0x220>
        goto icmperr;
 80225f6:	bf00      	nop
 80225f8:	e004      	b.n	8022604 <icmp_input+0x218>
        goto icmperr;
 80225fa:	bf00      	nop
 80225fc:	e002      	b.n	8022604 <icmp_input+0x218>
          goto icmperr;
 80225fe:	bf00      	nop
 8022600:	e000      	b.n	8022604 <icmp_input+0x218>
          goto icmperr;
 8022602:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8022604:	6878      	ldr	r0, [r7, #4]
 8022606:	f7f7 fedf 	bl	801a3c8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 802260a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 802260c:	3728      	adds	r7, #40	@ 0x28
 802260e:	46bd      	mov	sp, r7
 8022610:	bd80      	pop	{r7, pc}
 8022612:	bf00      	nop
 8022614:	24008d4c 	.word	0x24008d4c
 8022618:	24008d60 	.word	0x24008d60
 802261c:	0802c8ac 	.word	0x0802c8ac
 8022620:	0802c8e4 	.word	0x0802c8e4
 8022624:	0802c91c 	.word	0x0802c91c
 8022628:	0802c944 	.word	0x0802c944

0802262c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 802262c:	b580      	push	{r7, lr}
 802262e:	b082      	sub	sp, #8
 8022630:	af00      	add	r7, sp, #0
 8022632:	6078      	str	r0, [r7, #4]
 8022634:	460b      	mov	r3, r1
 8022636:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8022638:	78fb      	ldrb	r3, [r7, #3]
 802263a:	461a      	mov	r2, r3
 802263c:	2103      	movs	r1, #3
 802263e:	6878      	ldr	r0, [r7, #4]
 8022640:	f000 f814 	bl	802266c <icmp_send_response>
}
 8022644:	bf00      	nop
 8022646:	3708      	adds	r7, #8
 8022648:	46bd      	mov	sp, r7
 802264a:	bd80      	pop	{r7, pc}

0802264c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 802264c:	b580      	push	{r7, lr}
 802264e:	b082      	sub	sp, #8
 8022650:	af00      	add	r7, sp, #0
 8022652:	6078      	str	r0, [r7, #4]
 8022654:	460b      	mov	r3, r1
 8022656:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8022658:	78fb      	ldrb	r3, [r7, #3]
 802265a:	461a      	mov	r2, r3
 802265c:	210b      	movs	r1, #11
 802265e:	6878      	ldr	r0, [r7, #4]
 8022660:	f000 f804 	bl	802266c <icmp_send_response>
}
 8022664:	bf00      	nop
 8022666:	3708      	adds	r7, #8
 8022668:	46bd      	mov	sp, r7
 802266a:	bd80      	pop	{r7, pc}

0802266c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 802266c:	b580      	push	{r7, lr}
 802266e:	b08c      	sub	sp, #48	@ 0x30
 8022670:	af04      	add	r7, sp, #16
 8022672:	6078      	str	r0, [r7, #4]
 8022674:	460b      	mov	r3, r1
 8022676:	70fb      	strb	r3, [r7, #3]
 8022678:	4613      	mov	r3, r2
 802267a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 802267c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8022680:	2124      	movs	r1, #36	@ 0x24
 8022682:	2022      	movs	r0, #34	@ 0x22
 8022684:	f7f7 fb8a 	bl	8019d9c <pbuf_alloc>
 8022688:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 802268a:	69fb      	ldr	r3, [r7, #28]
 802268c:	2b00      	cmp	r3, #0
 802268e:	d056      	beq.n	802273e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8022690:	69fb      	ldr	r3, [r7, #28]
 8022692:	895b      	ldrh	r3, [r3, #10]
 8022694:	2b23      	cmp	r3, #35	@ 0x23
 8022696:	d806      	bhi.n	80226a6 <icmp_send_response+0x3a>
 8022698:	4b2b      	ldr	r3, [pc, #172]	@ (8022748 <icmp_send_response+0xdc>)
 802269a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 802269e:	492b      	ldr	r1, [pc, #172]	@ (802274c <icmp_send_response+0xe0>)
 80226a0:	482b      	ldr	r0, [pc, #172]	@ (8022750 <icmp_send_response+0xe4>)
 80226a2:	f002 fddf 	bl	8025264 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80226a6:	687b      	ldr	r3, [r7, #4]
 80226a8:	685b      	ldr	r3, [r3, #4]
 80226aa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80226ac:	69fb      	ldr	r3, [r7, #28]
 80226ae:	685b      	ldr	r3, [r3, #4]
 80226b0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80226b2:	697b      	ldr	r3, [r7, #20]
 80226b4:	78fa      	ldrb	r2, [r7, #3]
 80226b6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80226b8:	697b      	ldr	r3, [r7, #20]
 80226ba:	78ba      	ldrb	r2, [r7, #2]
 80226bc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80226be:	697b      	ldr	r3, [r7, #20]
 80226c0:	2200      	movs	r2, #0
 80226c2:	711a      	strb	r2, [r3, #4]
 80226c4:	2200      	movs	r2, #0
 80226c6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80226c8:	697b      	ldr	r3, [r7, #20]
 80226ca:	2200      	movs	r2, #0
 80226cc:	719a      	strb	r2, [r3, #6]
 80226ce:	2200      	movs	r2, #0
 80226d0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80226d2:	69fb      	ldr	r3, [r7, #28]
 80226d4:	685b      	ldr	r3, [r3, #4]
 80226d6:	f103 0008 	add.w	r0, r3, #8
 80226da:	687b      	ldr	r3, [r7, #4]
 80226dc:	685b      	ldr	r3, [r3, #4]
 80226de:	221c      	movs	r2, #28
 80226e0:	4619      	mov	r1, r3
 80226e2:	f002 ff4c 	bl	802557e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80226e6:	69bb      	ldr	r3, [r7, #24]
 80226e8:	68db      	ldr	r3, [r3, #12]
 80226ea:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80226ec:	f107 030c 	add.w	r3, r7, #12
 80226f0:	4618      	mov	r0, r3
 80226f2:	f000 f82f 	bl	8022754 <ip4_route>
 80226f6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80226f8:	693b      	ldr	r3, [r7, #16]
 80226fa:	2b00      	cmp	r3, #0
 80226fc:	d01b      	beq.n	8022736 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80226fe:	697b      	ldr	r3, [r7, #20]
 8022700:	2200      	movs	r2, #0
 8022702:	709a      	strb	r2, [r3, #2]
 8022704:	2200      	movs	r2, #0
 8022706:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8022708:	69fb      	ldr	r3, [r7, #28]
 802270a:	895b      	ldrh	r3, [r3, #10]
 802270c:	4619      	mov	r1, r3
 802270e:	6978      	ldr	r0, [r7, #20]
 8022710:	f7f6 fa09 	bl	8018b26 <inet_chksum>
 8022714:	4603      	mov	r3, r0
 8022716:	461a      	mov	r2, r3
 8022718:	697b      	ldr	r3, [r7, #20]
 802271a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 802271c:	f107 020c 	add.w	r2, r7, #12
 8022720:	693b      	ldr	r3, [r7, #16]
 8022722:	9302      	str	r3, [sp, #8]
 8022724:	2301      	movs	r3, #1
 8022726:	9301      	str	r3, [sp, #4]
 8022728:	2300      	movs	r3, #0
 802272a:	9300      	str	r3, [sp, #0]
 802272c:	23ff      	movs	r3, #255	@ 0xff
 802272e:	2100      	movs	r1, #0
 8022730:	69f8      	ldr	r0, [r7, #28]
 8022732:	f000 f9cd 	bl	8022ad0 <ip4_output_if>
  }
  pbuf_free(q);
 8022736:	69f8      	ldr	r0, [r7, #28]
 8022738:	f7f7 fe46 	bl	801a3c8 <pbuf_free>
 802273c:	e000      	b.n	8022740 <icmp_send_response+0xd4>
    return;
 802273e:	bf00      	nop
}
 8022740:	3720      	adds	r7, #32
 8022742:	46bd      	mov	sp, r7
 8022744:	bd80      	pop	{r7, pc}
 8022746:	bf00      	nop
 8022748:	0802c8ac 	.word	0x0802c8ac
 802274c:	0802c978 	.word	0x0802c978
 8022750:	0802c91c 	.word	0x0802c91c

08022754 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8022754:	b480      	push	{r7}
 8022756:	b085      	sub	sp, #20
 8022758:	af00      	add	r7, sp, #0
 802275a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 802275c:	4b33      	ldr	r3, [pc, #204]	@ (802282c <ip4_route+0xd8>)
 802275e:	681b      	ldr	r3, [r3, #0]
 8022760:	60fb      	str	r3, [r7, #12]
 8022762:	e036      	b.n	80227d2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8022764:	68fb      	ldr	r3, [r7, #12]
 8022766:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 802276a:	f003 0301 	and.w	r3, r3, #1
 802276e:	b2db      	uxtb	r3, r3
 8022770:	2b00      	cmp	r3, #0
 8022772:	d02b      	beq.n	80227cc <ip4_route+0x78>
 8022774:	68fb      	ldr	r3, [r7, #12]
 8022776:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 802277a:	089b      	lsrs	r3, r3, #2
 802277c:	f003 0301 	and.w	r3, r3, #1
 8022780:	b2db      	uxtb	r3, r3
 8022782:	2b00      	cmp	r3, #0
 8022784:	d022      	beq.n	80227cc <ip4_route+0x78>
 8022786:	68fb      	ldr	r3, [r7, #12]
 8022788:	3304      	adds	r3, #4
 802278a:	681b      	ldr	r3, [r3, #0]
 802278c:	2b00      	cmp	r3, #0
 802278e:	d01d      	beq.n	80227cc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8022790:	687b      	ldr	r3, [r7, #4]
 8022792:	681a      	ldr	r2, [r3, #0]
 8022794:	68fb      	ldr	r3, [r7, #12]
 8022796:	3304      	adds	r3, #4
 8022798:	681b      	ldr	r3, [r3, #0]
 802279a:	405a      	eors	r2, r3
 802279c:	68fb      	ldr	r3, [r7, #12]
 802279e:	3308      	adds	r3, #8
 80227a0:	681b      	ldr	r3, [r3, #0]
 80227a2:	4013      	ands	r3, r2
 80227a4:	2b00      	cmp	r3, #0
 80227a6:	d101      	bne.n	80227ac <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80227a8:	68fb      	ldr	r3, [r7, #12]
 80227aa:	e038      	b.n	802281e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80227ac:	68fb      	ldr	r3, [r7, #12]
 80227ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80227b2:	f003 0302 	and.w	r3, r3, #2
 80227b6:	2b00      	cmp	r3, #0
 80227b8:	d108      	bne.n	80227cc <ip4_route+0x78>
 80227ba:	687b      	ldr	r3, [r7, #4]
 80227bc:	681a      	ldr	r2, [r3, #0]
 80227be:	68fb      	ldr	r3, [r7, #12]
 80227c0:	330c      	adds	r3, #12
 80227c2:	681b      	ldr	r3, [r3, #0]
 80227c4:	429a      	cmp	r2, r3
 80227c6:	d101      	bne.n	80227cc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80227c8:	68fb      	ldr	r3, [r7, #12]
 80227ca:	e028      	b.n	802281e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80227cc:	68fb      	ldr	r3, [r7, #12]
 80227ce:	681b      	ldr	r3, [r3, #0]
 80227d0:	60fb      	str	r3, [r7, #12]
 80227d2:	68fb      	ldr	r3, [r7, #12]
 80227d4:	2b00      	cmp	r3, #0
 80227d6:	d1c5      	bne.n	8022764 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80227d8:	4b15      	ldr	r3, [pc, #84]	@ (8022830 <ip4_route+0xdc>)
 80227da:	681b      	ldr	r3, [r3, #0]
 80227dc:	2b00      	cmp	r3, #0
 80227de:	d01a      	beq.n	8022816 <ip4_route+0xc2>
 80227e0:	4b13      	ldr	r3, [pc, #76]	@ (8022830 <ip4_route+0xdc>)
 80227e2:	681b      	ldr	r3, [r3, #0]
 80227e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80227e8:	f003 0301 	and.w	r3, r3, #1
 80227ec:	2b00      	cmp	r3, #0
 80227ee:	d012      	beq.n	8022816 <ip4_route+0xc2>
 80227f0:	4b0f      	ldr	r3, [pc, #60]	@ (8022830 <ip4_route+0xdc>)
 80227f2:	681b      	ldr	r3, [r3, #0]
 80227f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80227f8:	f003 0304 	and.w	r3, r3, #4
 80227fc:	2b00      	cmp	r3, #0
 80227fe:	d00a      	beq.n	8022816 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8022800:	4b0b      	ldr	r3, [pc, #44]	@ (8022830 <ip4_route+0xdc>)
 8022802:	681b      	ldr	r3, [r3, #0]
 8022804:	3304      	adds	r3, #4
 8022806:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8022808:	2b00      	cmp	r3, #0
 802280a:	d004      	beq.n	8022816 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 802280c:	687b      	ldr	r3, [r7, #4]
 802280e:	681b      	ldr	r3, [r3, #0]
 8022810:	b2db      	uxtb	r3, r3
 8022812:	2b7f      	cmp	r3, #127	@ 0x7f
 8022814:	d101      	bne.n	802281a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8022816:	2300      	movs	r3, #0
 8022818:	e001      	b.n	802281e <ip4_route+0xca>
  }

  return netif_default;
 802281a:	4b05      	ldr	r3, [pc, #20]	@ (8022830 <ip4_route+0xdc>)
 802281c:	681b      	ldr	r3, [r3, #0]
}
 802281e:	4618      	mov	r0, r3
 8022820:	3714      	adds	r7, #20
 8022822:	46bd      	mov	sp, r7
 8022824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022828:	4770      	bx	lr
 802282a:	bf00      	nop
 802282c:	2400be40 	.word	0x2400be40
 8022830:	2400be44 	.word	0x2400be44

08022834 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8022834:	b580      	push	{r7, lr}
 8022836:	b082      	sub	sp, #8
 8022838:	af00      	add	r7, sp, #0
 802283a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 802283c:	687b      	ldr	r3, [r7, #4]
 802283e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8022842:	f003 0301 	and.w	r3, r3, #1
 8022846:	b2db      	uxtb	r3, r3
 8022848:	2b00      	cmp	r3, #0
 802284a:	d016      	beq.n	802287a <ip4_input_accept+0x46>
 802284c:	687b      	ldr	r3, [r7, #4]
 802284e:	3304      	adds	r3, #4
 8022850:	681b      	ldr	r3, [r3, #0]
 8022852:	2b00      	cmp	r3, #0
 8022854:	d011      	beq.n	802287a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022856:	4b0b      	ldr	r3, [pc, #44]	@ (8022884 <ip4_input_accept+0x50>)
 8022858:	695a      	ldr	r2, [r3, #20]
 802285a:	687b      	ldr	r3, [r7, #4]
 802285c:	3304      	adds	r3, #4
 802285e:	681b      	ldr	r3, [r3, #0]
 8022860:	429a      	cmp	r2, r3
 8022862:	d008      	beq.n	8022876 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8022864:	4b07      	ldr	r3, [pc, #28]	@ (8022884 <ip4_input_accept+0x50>)
 8022866:	695b      	ldr	r3, [r3, #20]
 8022868:	6879      	ldr	r1, [r7, #4]
 802286a:	4618      	mov	r0, r3
 802286c:	f000 fa08 	bl	8022c80 <ip4_addr_isbroadcast_u32>
 8022870:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022872:	2b00      	cmp	r3, #0
 8022874:	d001      	beq.n	802287a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8022876:	2301      	movs	r3, #1
 8022878:	e000      	b.n	802287c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 802287a:	2300      	movs	r3, #0
}
 802287c:	4618      	mov	r0, r3
 802287e:	3708      	adds	r7, #8
 8022880:	46bd      	mov	sp, r7
 8022882:	bd80      	pop	{r7, pc}
 8022884:	24008d4c 	.word	0x24008d4c

08022888 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8022888:	b580      	push	{r7, lr}
 802288a:	b086      	sub	sp, #24
 802288c:	af00      	add	r7, sp, #0
 802288e:	6078      	str	r0, [r7, #4]
 8022890:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8022892:	687b      	ldr	r3, [r7, #4]
 8022894:	685b      	ldr	r3, [r3, #4]
 8022896:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8022898:	697b      	ldr	r3, [r7, #20]
 802289a:	781b      	ldrb	r3, [r3, #0]
 802289c:	091b      	lsrs	r3, r3, #4
 802289e:	b2db      	uxtb	r3, r3
 80228a0:	2b04      	cmp	r3, #4
 80228a2:	d004      	beq.n	80228ae <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80228a4:	6878      	ldr	r0, [r7, #4]
 80228a6:	f7f7 fd8f 	bl	801a3c8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80228aa:	2300      	movs	r3, #0
 80228ac:	e107      	b.n	8022abe <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80228ae:	697b      	ldr	r3, [r7, #20]
 80228b0:	781b      	ldrb	r3, [r3, #0]
 80228b2:	f003 030f 	and.w	r3, r3, #15
 80228b6:	b2db      	uxtb	r3, r3
 80228b8:	009b      	lsls	r3, r3, #2
 80228ba:	b2db      	uxtb	r3, r3
 80228bc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80228be:	697b      	ldr	r3, [r7, #20]
 80228c0:	885b      	ldrh	r3, [r3, #2]
 80228c2:	b29b      	uxth	r3, r3
 80228c4:	4618      	mov	r0, r3
 80228c6:	f7f6 f8a3 	bl	8018a10 <lwip_htons>
 80228ca:	4603      	mov	r3, r0
 80228cc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80228ce:	687b      	ldr	r3, [r7, #4]
 80228d0:	891b      	ldrh	r3, [r3, #8]
 80228d2:	89ba      	ldrh	r2, [r7, #12]
 80228d4:	429a      	cmp	r2, r3
 80228d6:	d204      	bcs.n	80228e2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80228d8:	89bb      	ldrh	r3, [r7, #12]
 80228da:	4619      	mov	r1, r3
 80228dc:	6878      	ldr	r0, [r7, #4]
 80228de:	f7f7 fbbb 	bl	801a058 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80228e2:	687b      	ldr	r3, [r7, #4]
 80228e4:	895b      	ldrh	r3, [r3, #10]
 80228e6:	89fa      	ldrh	r2, [r7, #14]
 80228e8:	429a      	cmp	r2, r3
 80228ea:	d807      	bhi.n	80228fc <ip4_input+0x74>
 80228ec:	687b      	ldr	r3, [r7, #4]
 80228ee:	891b      	ldrh	r3, [r3, #8]
 80228f0:	89ba      	ldrh	r2, [r7, #12]
 80228f2:	429a      	cmp	r2, r3
 80228f4:	d802      	bhi.n	80228fc <ip4_input+0x74>
 80228f6:	89fb      	ldrh	r3, [r7, #14]
 80228f8:	2b13      	cmp	r3, #19
 80228fa:	d804      	bhi.n	8022906 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80228fc:	6878      	ldr	r0, [r7, #4]
 80228fe:	f7f7 fd63 	bl	801a3c8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8022902:	2300      	movs	r3, #0
 8022904:	e0db      	b.n	8022abe <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8022906:	697b      	ldr	r3, [r7, #20]
 8022908:	691b      	ldr	r3, [r3, #16]
 802290a:	4a6f      	ldr	r2, [pc, #444]	@ (8022ac8 <ip4_input+0x240>)
 802290c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 802290e:	697b      	ldr	r3, [r7, #20]
 8022910:	68db      	ldr	r3, [r3, #12]
 8022912:	4a6d      	ldr	r2, [pc, #436]	@ (8022ac8 <ip4_input+0x240>)
 8022914:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022916:	4b6c      	ldr	r3, [pc, #432]	@ (8022ac8 <ip4_input+0x240>)
 8022918:	695b      	ldr	r3, [r3, #20]
 802291a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 802291e:	2be0      	cmp	r3, #224	@ 0xe0
 8022920:	d112      	bne.n	8022948 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8022922:	683b      	ldr	r3, [r7, #0]
 8022924:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8022928:	f003 0301 	and.w	r3, r3, #1
 802292c:	b2db      	uxtb	r3, r3
 802292e:	2b00      	cmp	r3, #0
 8022930:	d007      	beq.n	8022942 <ip4_input+0xba>
 8022932:	683b      	ldr	r3, [r7, #0]
 8022934:	3304      	adds	r3, #4
 8022936:	681b      	ldr	r3, [r3, #0]
 8022938:	2b00      	cmp	r3, #0
 802293a:	d002      	beq.n	8022942 <ip4_input+0xba>
      netif = inp;
 802293c:	683b      	ldr	r3, [r7, #0]
 802293e:	613b      	str	r3, [r7, #16]
 8022940:	e02a      	b.n	8022998 <ip4_input+0x110>
    } else {
      netif = NULL;
 8022942:	2300      	movs	r3, #0
 8022944:	613b      	str	r3, [r7, #16]
 8022946:	e027      	b.n	8022998 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8022948:	6838      	ldr	r0, [r7, #0]
 802294a:	f7ff ff73 	bl	8022834 <ip4_input_accept>
 802294e:	4603      	mov	r3, r0
 8022950:	2b00      	cmp	r3, #0
 8022952:	d002      	beq.n	802295a <ip4_input+0xd2>
      netif = inp;
 8022954:	683b      	ldr	r3, [r7, #0]
 8022956:	613b      	str	r3, [r7, #16]
 8022958:	e01e      	b.n	8022998 <ip4_input+0x110>
    } else {
      netif = NULL;
 802295a:	2300      	movs	r3, #0
 802295c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 802295e:	4b5a      	ldr	r3, [pc, #360]	@ (8022ac8 <ip4_input+0x240>)
 8022960:	695b      	ldr	r3, [r3, #20]
 8022962:	b2db      	uxtb	r3, r3
 8022964:	2b7f      	cmp	r3, #127	@ 0x7f
 8022966:	d017      	beq.n	8022998 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8022968:	4b58      	ldr	r3, [pc, #352]	@ (8022acc <ip4_input+0x244>)
 802296a:	681b      	ldr	r3, [r3, #0]
 802296c:	613b      	str	r3, [r7, #16]
 802296e:	e00e      	b.n	802298e <ip4_input+0x106>
          if (netif == inp) {
 8022970:	693a      	ldr	r2, [r7, #16]
 8022972:	683b      	ldr	r3, [r7, #0]
 8022974:	429a      	cmp	r2, r3
 8022976:	d006      	beq.n	8022986 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8022978:	6938      	ldr	r0, [r7, #16]
 802297a:	f7ff ff5b 	bl	8022834 <ip4_input_accept>
 802297e:	4603      	mov	r3, r0
 8022980:	2b00      	cmp	r3, #0
 8022982:	d108      	bne.n	8022996 <ip4_input+0x10e>
 8022984:	e000      	b.n	8022988 <ip4_input+0x100>
            continue;
 8022986:	bf00      	nop
        NETIF_FOREACH(netif) {
 8022988:	693b      	ldr	r3, [r7, #16]
 802298a:	681b      	ldr	r3, [r3, #0]
 802298c:	613b      	str	r3, [r7, #16]
 802298e:	693b      	ldr	r3, [r7, #16]
 8022990:	2b00      	cmp	r3, #0
 8022992:	d1ed      	bne.n	8022970 <ip4_input+0xe8>
 8022994:	e000      	b.n	8022998 <ip4_input+0x110>
            break;
 8022996:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8022998:	4b4b      	ldr	r3, [pc, #300]	@ (8022ac8 <ip4_input+0x240>)
 802299a:	691b      	ldr	r3, [r3, #16]
 802299c:	6839      	ldr	r1, [r7, #0]
 802299e:	4618      	mov	r0, r3
 80229a0:	f000 f96e 	bl	8022c80 <ip4_addr_isbroadcast_u32>
 80229a4:	4603      	mov	r3, r0
 80229a6:	2b00      	cmp	r3, #0
 80229a8:	d105      	bne.n	80229b6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80229aa:	4b47      	ldr	r3, [pc, #284]	@ (8022ac8 <ip4_input+0x240>)
 80229ac:	691b      	ldr	r3, [r3, #16]
 80229ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80229b2:	2be0      	cmp	r3, #224	@ 0xe0
 80229b4:	d104      	bne.n	80229c0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80229b6:	6878      	ldr	r0, [r7, #4]
 80229b8:	f7f7 fd06 	bl	801a3c8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80229bc:	2300      	movs	r3, #0
 80229be:	e07e      	b.n	8022abe <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80229c0:	693b      	ldr	r3, [r7, #16]
 80229c2:	2b00      	cmp	r3, #0
 80229c4:	d104      	bne.n	80229d0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80229c6:	6878      	ldr	r0, [r7, #4]
 80229c8:	f7f7 fcfe 	bl	801a3c8 <pbuf_free>
    return ERR_OK;
 80229cc:	2300      	movs	r3, #0
 80229ce:	e076      	b.n	8022abe <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80229d0:	697b      	ldr	r3, [r7, #20]
 80229d2:	88db      	ldrh	r3, [r3, #6]
 80229d4:	b29b      	uxth	r3, r3
 80229d6:	461a      	mov	r2, r3
 80229d8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80229dc:	4013      	ands	r3, r2
 80229de:	2b00      	cmp	r3, #0
 80229e0:	d00b      	beq.n	80229fa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80229e2:	6878      	ldr	r0, [r7, #4]
 80229e4:	f000 fdd0 	bl	8023588 <ip4_reass>
 80229e8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80229ea:	687b      	ldr	r3, [r7, #4]
 80229ec:	2b00      	cmp	r3, #0
 80229ee:	d101      	bne.n	80229f4 <ip4_input+0x16c>
      return ERR_OK;
 80229f0:	2300      	movs	r3, #0
 80229f2:	e064      	b.n	8022abe <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80229f4:	687b      	ldr	r3, [r7, #4]
 80229f6:	685b      	ldr	r3, [r3, #4]
 80229f8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80229fa:	4a33      	ldr	r2, [pc, #204]	@ (8022ac8 <ip4_input+0x240>)
 80229fc:	693b      	ldr	r3, [r7, #16]
 80229fe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8022a00:	4a31      	ldr	r2, [pc, #196]	@ (8022ac8 <ip4_input+0x240>)
 8022a02:	683b      	ldr	r3, [r7, #0]
 8022a04:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8022a06:	4a30      	ldr	r2, [pc, #192]	@ (8022ac8 <ip4_input+0x240>)
 8022a08:	697b      	ldr	r3, [r7, #20]
 8022a0a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8022a0c:	697b      	ldr	r3, [r7, #20]
 8022a0e:	781b      	ldrb	r3, [r3, #0]
 8022a10:	f003 030f 	and.w	r3, r3, #15
 8022a14:	b2db      	uxtb	r3, r3
 8022a16:	009b      	lsls	r3, r3, #2
 8022a18:	b2db      	uxtb	r3, r3
 8022a1a:	461a      	mov	r2, r3
 8022a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8022ac8 <ip4_input+0x240>)
 8022a1e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8022a20:	89fb      	ldrh	r3, [r7, #14]
 8022a22:	4619      	mov	r1, r3
 8022a24:	6878      	ldr	r0, [r7, #4]
 8022a26:	f7f7 fc17 	bl	801a258 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8022a2a:	697b      	ldr	r3, [r7, #20]
 8022a2c:	7a5b      	ldrb	r3, [r3, #9]
 8022a2e:	2b11      	cmp	r3, #17
 8022a30:	d006      	beq.n	8022a40 <ip4_input+0x1b8>
 8022a32:	2b11      	cmp	r3, #17
 8022a34:	dc13      	bgt.n	8022a5e <ip4_input+0x1d6>
 8022a36:	2b01      	cmp	r3, #1
 8022a38:	d00c      	beq.n	8022a54 <ip4_input+0x1cc>
 8022a3a:	2b06      	cmp	r3, #6
 8022a3c:	d005      	beq.n	8022a4a <ip4_input+0x1c2>
 8022a3e:	e00e      	b.n	8022a5e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8022a40:	6839      	ldr	r1, [r7, #0]
 8022a42:	6878      	ldr	r0, [r7, #4]
 8022a44:	f7fe f94a 	bl	8020cdc <udp_input>
        break;
 8022a48:	e026      	b.n	8022a98 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8022a4a:	6839      	ldr	r1, [r7, #0]
 8022a4c:	6878      	ldr	r0, [r7, #4]
 8022a4e:	f7f9 fd09 	bl	801c464 <tcp_input>
        break;
 8022a52:	e021      	b.n	8022a98 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8022a54:	6839      	ldr	r1, [r7, #0]
 8022a56:	6878      	ldr	r0, [r7, #4]
 8022a58:	f7ff fcc8 	bl	80223ec <icmp_input>
        break;
 8022a5c:	e01c      	b.n	8022a98 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8022a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8022ac8 <ip4_input+0x240>)
 8022a60:	695b      	ldr	r3, [r3, #20]
 8022a62:	6939      	ldr	r1, [r7, #16]
 8022a64:	4618      	mov	r0, r3
 8022a66:	f000 f90b 	bl	8022c80 <ip4_addr_isbroadcast_u32>
 8022a6a:	4603      	mov	r3, r0
 8022a6c:	2b00      	cmp	r3, #0
 8022a6e:	d10f      	bne.n	8022a90 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022a70:	4b15      	ldr	r3, [pc, #84]	@ (8022ac8 <ip4_input+0x240>)
 8022a72:	695b      	ldr	r3, [r3, #20]
 8022a74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8022a78:	2be0      	cmp	r3, #224	@ 0xe0
 8022a7a:	d009      	beq.n	8022a90 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8022a7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8022a80:	4619      	mov	r1, r3
 8022a82:	6878      	ldr	r0, [r7, #4]
 8022a84:	f7f7 fc5b 	bl	801a33e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8022a88:	2102      	movs	r1, #2
 8022a8a:	6878      	ldr	r0, [r7, #4]
 8022a8c:	f7ff fdce 	bl	802262c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8022a90:	6878      	ldr	r0, [r7, #4]
 8022a92:	f7f7 fc99 	bl	801a3c8 <pbuf_free>
        break;
 8022a96:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8022a98:	4b0b      	ldr	r3, [pc, #44]	@ (8022ac8 <ip4_input+0x240>)
 8022a9a:	2200      	movs	r2, #0
 8022a9c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8022a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8022ac8 <ip4_input+0x240>)
 8022aa0:	2200      	movs	r2, #0
 8022aa2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8022aa4:	4b08      	ldr	r3, [pc, #32]	@ (8022ac8 <ip4_input+0x240>)
 8022aa6:	2200      	movs	r2, #0
 8022aa8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8022aaa:	4b07      	ldr	r3, [pc, #28]	@ (8022ac8 <ip4_input+0x240>)
 8022aac:	2200      	movs	r2, #0
 8022aae:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8022ab0:	4b05      	ldr	r3, [pc, #20]	@ (8022ac8 <ip4_input+0x240>)
 8022ab2:	2200      	movs	r2, #0
 8022ab4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8022ab6:	4b04      	ldr	r3, [pc, #16]	@ (8022ac8 <ip4_input+0x240>)
 8022ab8:	2200      	movs	r2, #0
 8022aba:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8022abc:	2300      	movs	r3, #0
}
 8022abe:	4618      	mov	r0, r3
 8022ac0:	3718      	adds	r7, #24
 8022ac2:	46bd      	mov	sp, r7
 8022ac4:	bd80      	pop	{r7, pc}
 8022ac6:	bf00      	nop
 8022ac8:	24008d4c 	.word	0x24008d4c
 8022acc:	2400be40 	.word	0x2400be40

08022ad0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8022ad0:	b580      	push	{r7, lr}
 8022ad2:	b08a      	sub	sp, #40	@ 0x28
 8022ad4:	af04      	add	r7, sp, #16
 8022ad6:	60f8      	str	r0, [r7, #12]
 8022ad8:	60b9      	str	r1, [r7, #8]
 8022ada:	607a      	str	r2, [r7, #4]
 8022adc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8022ade:	68bb      	ldr	r3, [r7, #8]
 8022ae0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8022ae2:	687b      	ldr	r3, [r7, #4]
 8022ae4:	2b00      	cmp	r3, #0
 8022ae6:	d009      	beq.n	8022afc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8022ae8:	68bb      	ldr	r3, [r7, #8]
 8022aea:	2b00      	cmp	r3, #0
 8022aec:	d003      	beq.n	8022af6 <ip4_output_if+0x26>
 8022aee:	68bb      	ldr	r3, [r7, #8]
 8022af0:	681b      	ldr	r3, [r3, #0]
 8022af2:	2b00      	cmp	r3, #0
 8022af4:	d102      	bne.n	8022afc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8022af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022af8:	3304      	adds	r3, #4
 8022afa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8022afc:	78fa      	ldrb	r2, [r7, #3]
 8022afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022b00:	9302      	str	r3, [sp, #8]
 8022b02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8022b06:	9301      	str	r3, [sp, #4]
 8022b08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8022b0c:	9300      	str	r3, [sp, #0]
 8022b0e:	4613      	mov	r3, r2
 8022b10:	687a      	ldr	r2, [r7, #4]
 8022b12:	6979      	ldr	r1, [r7, #20]
 8022b14:	68f8      	ldr	r0, [r7, #12]
 8022b16:	f000 f805 	bl	8022b24 <ip4_output_if_src>
 8022b1a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8022b1c:	4618      	mov	r0, r3
 8022b1e:	3718      	adds	r7, #24
 8022b20:	46bd      	mov	sp, r7
 8022b22:	bd80      	pop	{r7, pc}

08022b24 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8022b24:	b580      	push	{r7, lr}
 8022b26:	b088      	sub	sp, #32
 8022b28:	af00      	add	r7, sp, #0
 8022b2a:	60f8      	str	r0, [r7, #12]
 8022b2c:	60b9      	str	r1, [r7, #8]
 8022b2e:	607a      	str	r2, [r7, #4]
 8022b30:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8022b32:	68fb      	ldr	r3, [r7, #12]
 8022b34:	7b9b      	ldrb	r3, [r3, #14]
 8022b36:	2b01      	cmp	r3, #1
 8022b38:	d006      	beq.n	8022b48 <ip4_output_if_src+0x24>
 8022b3a:	4b4b      	ldr	r3, [pc, #300]	@ (8022c68 <ip4_output_if_src+0x144>)
 8022b3c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8022b40:	494a      	ldr	r1, [pc, #296]	@ (8022c6c <ip4_output_if_src+0x148>)
 8022b42:	484b      	ldr	r0, [pc, #300]	@ (8022c70 <ip4_output_if_src+0x14c>)
 8022b44:	f002 fb8e 	bl	8025264 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8022b48:	687b      	ldr	r3, [r7, #4]
 8022b4a:	2b00      	cmp	r3, #0
 8022b4c:	d060      	beq.n	8022c10 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8022b4e:	2314      	movs	r3, #20
 8022b50:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8022b52:	2114      	movs	r1, #20
 8022b54:	68f8      	ldr	r0, [r7, #12]
 8022b56:	f7f7 fb6f 	bl	801a238 <pbuf_add_header>
 8022b5a:	4603      	mov	r3, r0
 8022b5c:	2b00      	cmp	r3, #0
 8022b5e:	d002      	beq.n	8022b66 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8022b60:	f06f 0301 	mvn.w	r3, #1
 8022b64:	e07c      	b.n	8022c60 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8022b66:	68fb      	ldr	r3, [r7, #12]
 8022b68:	685b      	ldr	r3, [r3, #4]
 8022b6a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8022b6c:	68fb      	ldr	r3, [r7, #12]
 8022b6e:	895b      	ldrh	r3, [r3, #10]
 8022b70:	2b13      	cmp	r3, #19
 8022b72:	d806      	bhi.n	8022b82 <ip4_output_if_src+0x5e>
 8022b74:	4b3c      	ldr	r3, [pc, #240]	@ (8022c68 <ip4_output_if_src+0x144>)
 8022b76:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8022b7a:	493e      	ldr	r1, [pc, #248]	@ (8022c74 <ip4_output_if_src+0x150>)
 8022b7c:	483c      	ldr	r0, [pc, #240]	@ (8022c70 <ip4_output_if_src+0x14c>)
 8022b7e:	f002 fb71 	bl	8025264 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8022b82:	69fb      	ldr	r3, [r7, #28]
 8022b84:	78fa      	ldrb	r2, [r7, #3]
 8022b86:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8022b88:	69fb      	ldr	r3, [r7, #28]
 8022b8a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8022b8e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8022b90:	687b      	ldr	r3, [r7, #4]
 8022b92:	681a      	ldr	r2, [r3, #0]
 8022b94:	69fb      	ldr	r3, [r7, #28]
 8022b96:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8022b98:	8b7b      	ldrh	r3, [r7, #26]
 8022b9a:	089b      	lsrs	r3, r3, #2
 8022b9c:	b29b      	uxth	r3, r3
 8022b9e:	b2db      	uxtb	r3, r3
 8022ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022ba4:	b2da      	uxtb	r2, r3
 8022ba6:	69fb      	ldr	r3, [r7, #28]
 8022ba8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8022baa:	69fb      	ldr	r3, [r7, #28]
 8022bac:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8022bb0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8022bb2:	68fb      	ldr	r3, [r7, #12]
 8022bb4:	891b      	ldrh	r3, [r3, #8]
 8022bb6:	4618      	mov	r0, r3
 8022bb8:	f7f5 ff2a 	bl	8018a10 <lwip_htons>
 8022bbc:	4603      	mov	r3, r0
 8022bbe:	461a      	mov	r2, r3
 8022bc0:	69fb      	ldr	r3, [r7, #28]
 8022bc2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8022bc4:	69fb      	ldr	r3, [r7, #28]
 8022bc6:	2200      	movs	r2, #0
 8022bc8:	719a      	strb	r2, [r3, #6]
 8022bca:	2200      	movs	r2, #0
 8022bcc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8022bce:	4b2a      	ldr	r3, [pc, #168]	@ (8022c78 <ip4_output_if_src+0x154>)
 8022bd0:	881b      	ldrh	r3, [r3, #0]
 8022bd2:	4618      	mov	r0, r3
 8022bd4:	f7f5 ff1c 	bl	8018a10 <lwip_htons>
 8022bd8:	4603      	mov	r3, r0
 8022bda:	461a      	mov	r2, r3
 8022bdc:	69fb      	ldr	r3, [r7, #28]
 8022bde:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8022be0:	4b25      	ldr	r3, [pc, #148]	@ (8022c78 <ip4_output_if_src+0x154>)
 8022be2:	881b      	ldrh	r3, [r3, #0]
 8022be4:	3301      	adds	r3, #1
 8022be6:	b29a      	uxth	r2, r3
 8022be8:	4b23      	ldr	r3, [pc, #140]	@ (8022c78 <ip4_output_if_src+0x154>)
 8022bea:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8022bec:	68bb      	ldr	r3, [r7, #8]
 8022bee:	2b00      	cmp	r3, #0
 8022bf0:	d104      	bne.n	8022bfc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8022bf2:	4b22      	ldr	r3, [pc, #136]	@ (8022c7c <ip4_output_if_src+0x158>)
 8022bf4:	681a      	ldr	r2, [r3, #0]
 8022bf6:	69fb      	ldr	r3, [r7, #28]
 8022bf8:	60da      	str	r2, [r3, #12]
 8022bfa:	e003      	b.n	8022c04 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8022bfc:	68bb      	ldr	r3, [r7, #8]
 8022bfe:	681a      	ldr	r2, [r3, #0]
 8022c00:	69fb      	ldr	r3, [r7, #28]
 8022c02:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8022c04:	69fb      	ldr	r3, [r7, #28]
 8022c06:	2200      	movs	r2, #0
 8022c08:	729a      	strb	r2, [r3, #10]
 8022c0a:	2200      	movs	r2, #0
 8022c0c:	72da      	strb	r2, [r3, #11]
 8022c0e:	e00f      	b.n	8022c30 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8022c10:	68fb      	ldr	r3, [r7, #12]
 8022c12:	895b      	ldrh	r3, [r3, #10]
 8022c14:	2b13      	cmp	r3, #19
 8022c16:	d802      	bhi.n	8022c1e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8022c18:	f06f 0301 	mvn.w	r3, #1
 8022c1c:	e020      	b.n	8022c60 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8022c1e:	68fb      	ldr	r3, [r7, #12]
 8022c20:	685b      	ldr	r3, [r3, #4]
 8022c22:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8022c24:	69fb      	ldr	r3, [r7, #28]
 8022c26:	691b      	ldr	r3, [r3, #16]
 8022c28:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8022c2a:	f107 0314 	add.w	r3, r7, #20
 8022c2e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8022c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022c32:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8022c34:	2b00      	cmp	r3, #0
 8022c36:	d00c      	beq.n	8022c52 <ip4_output_if_src+0x12e>
 8022c38:	68fb      	ldr	r3, [r7, #12]
 8022c3a:	891a      	ldrh	r2, [r3, #8]
 8022c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022c3e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8022c40:	429a      	cmp	r2, r3
 8022c42:	d906      	bls.n	8022c52 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8022c44:	687a      	ldr	r2, [r7, #4]
 8022c46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8022c48:	68f8      	ldr	r0, [r7, #12]
 8022c4a:	f000 fe91 	bl	8023970 <ip4_frag>
 8022c4e:	4603      	mov	r3, r0
 8022c50:	e006      	b.n	8022c60 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8022c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022c54:	695b      	ldr	r3, [r3, #20]
 8022c56:	687a      	ldr	r2, [r7, #4]
 8022c58:	68f9      	ldr	r1, [r7, #12]
 8022c5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8022c5c:	4798      	blx	r3
 8022c5e:	4603      	mov	r3, r0
}
 8022c60:	4618      	mov	r0, r3
 8022c62:	3720      	adds	r7, #32
 8022c64:	46bd      	mov	sp, r7
 8022c66:	bd80      	pop	{r7, pc}
 8022c68:	0802c9a4 	.word	0x0802c9a4
 8022c6c:	0802c9d8 	.word	0x0802c9d8
 8022c70:	0802c9e4 	.word	0x0802c9e4
 8022c74:	0802ca0c 	.word	0x0802ca0c
 8022c78:	2400bf9e 	.word	0x2400bf9e
 8022c7c:	0802cf18 	.word	0x0802cf18

08022c80 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8022c80:	b480      	push	{r7}
 8022c82:	b085      	sub	sp, #20
 8022c84:	af00      	add	r7, sp, #0
 8022c86:	6078      	str	r0, [r7, #4]
 8022c88:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8022c8a:	687b      	ldr	r3, [r7, #4]
 8022c8c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8022c8e:	687b      	ldr	r3, [r7, #4]
 8022c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022c94:	d002      	beq.n	8022c9c <ip4_addr_isbroadcast_u32+0x1c>
 8022c96:	687b      	ldr	r3, [r7, #4]
 8022c98:	2b00      	cmp	r3, #0
 8022c9a:	d101      	bne.n	8022ca0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8022c9c:	2301      	movs	r3, #1
 8022c9e:	e02a      	b.n	8022cf6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8022ca0:	683b      	ldr	r3, [r7, #0]
 8022ca2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8022ca6:	f003 0302 	and.w	r3, r3, #2
 8022caa:	2b00      	cmp	r3, #0
 8022cac:	d101      	bne.n	8022cb2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8022cae:	2300      	movs	r3, #0
 8022cb0:	e021      	b.n	8022cf6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8022cb2:	683b      	ldr	r3, [r7, #0]
 8022cb4:	3304      	adds	r3, #4
 8022cb6:	681b      	ldr	r3, [r3, #0]
 8022cb8:	687a      	ldr	r2, [r7, #4]
 8022cba:	429a      	cmp	r2, r3
 8022cbc:	d101      	bne.n	8022cc2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8022cbe:	2300      	movs	r3, #0
 8022cc0:	e019      	b.n	8022cf6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8022cc2:	68fa      	ldr	r2, [r7, #12]
 8022cc4:	683b      	ldr	r3, [r7, #0]
 8022cc6:	3304      	adds	r3, #4
 8022cc8:	681b      	ldr	r3, [r3, #0]
 8022cca:	405a      	eors	r2, r3
 8022ccc:	683b      	ldr	r3, [r7, #0]
 8022cce:	3308      	adds	r3, #8
 8022cd0:	681b      	ldr	r3, [r3, #0]
 8022cd2:	4013      	ands	r3, r2
 8022cd4:	2b00      	cmp	r3, #0
 8022cd6:	d10d      	bne.n	8022cf4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8022cd8:	683b      	ldr	r3, [r7, #0]
 8022cda:	3308      	adds	r3, #8
 8022cdc:	681b      	ldr	r3, [r3, #0]
 8022cde:	43da      	mvns	r2, r3
 8022ce0:	687b      	ldr	r3, [r7, #4]
 8022ce2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8022ce4:	683b      	ldr	r3, [r7, #0]
 8022ce6:	3308      	adds	r3, #8
 8022ce8:	681b      	ldr	r3, [r3, #0]
 8022cea:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8022cec:	429a      	cmp	r2, r3
 8022cee:	d101      	bne.n	8022cf4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8022cf0:	2301      	movs	r3, #1
 8022cf2:	e000      	b.n	8022cf6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8022cf4:	2300      	movs	r3, #0
  }
}
 8022cf6:	4618      	mov	r0, r3
 8022cf8:	3714      	adds	r7, #20
 8022cfa:	46bd      	mov	sp, r7
 8022cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d00:	4770      	bx	lr

08022d02 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 8022d02:	b580      	push	{r7, lr}
 8022d04:	b084      	sub	sp, #16
 8022d06:	af00      	add	r7, sp, #0
 8022d08:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 8022d0a:	f107 030c 	add.w	r3, r7, #12
 8022d0e:	4619      	mov	r1, r3
 8022d10:	6878      	ldr	r0, [r7, #4]
 8022d12:	f000 f80b 	bl	8022d2c <ip4addr_aton>
 8022d16:	4603      	mov	r3, r0
 8022d18:	2b00      	cmp	r3, #0
 8022d1a:	d001      	beq.n	8022d20 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 8022d1c:	68fb      	ldr	r3, [r7, #12]
 8022d1e:	e001      	b.n	8022d24 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 8022d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8022d24:	4618      	mov	r0, r3
 8022d26:	3710      	adds	r7, #16
 8022d28:	46bd      	mov	sp, r7
 8022d2a:	bd80      	pop	{r7, pc}

08022d2c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8022d2c:	b580      	push	{r7, lr}
 8022d2e:	b08a      	sub	sp, #40	@ 0x28
 8022d30:	af00      	add	r7, sp, #0
 8022d32:	6078      	str	r0, [r7, #4]
 8022d34:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8022d36:	f107 030c 	add.w	r3, r7, #12
 8022d3a:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8022d3c:	687b      	ldr	r3, [r7, #4]
 8022d3e:	781b      	ldrb	r3, [r3, #0]
 8022d40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8022d44:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022d48:	3301      	adds	r3, #1
 8022d4a:	4a89      	ldr	r2, [pc, #548]	@ (8022f70 <ip4addr_aton+0x244>)
 8022d4c:	4413      	add	r3, r2
 8022d4e:	781b      	ldrb	r3, [r3, #0]
 8022d50:	f003 0304 	and.w	r3, r3, #4
 8022d54:	2b00      	cmp	r3, #0
 8022d56:	d101      	bne.n	8022d5c <ip4addr_aton+0x30>
      return 0;
 8022d58:	2300      	movs	r3, #0
 8022d5a:	e105      	b.n	8022f68 <ip4addr_aton+0x23c>
    }
    val = 0;
 8022d5c:	2300      	movs	r3, #0
 8022d5e:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 8022d60:	230a      	movs	r3, #10
 8022d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 8022d66:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022d6a:	2b30      	cmp	r3, #48	@ 0x30
 8022d6c:	d11c      	bne.n	8022da8 <ip4addr_aton+0x7c>
      c = *++cp;
 8022d6e:	687b      	ldr	r3, [r7, #4]
 8022d70:	3301      	adds	r3, #1
 8022d72:	607b      	str	r3, [r7, #4]
 8022d74:	687b      	ldr	r3, [r7, #4]
 8022d76:	781b      	ldrb	r3, [r3, #0]
 8022d78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 8022d7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022d80:	2b78      	cmp	r3, #120	@ 0x78
 8022d82:	d003      	beq.n	8022d8c <ip4addr_aton+0x60>
 8022d84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022d88:	2b58      	cmp	r3, #88	@ 0x58
 8022d8a:	d10a      	bne.n	8022da2 <ip4addr_aton+0x76>
        base = 16;
 8022d8c:	2310      	movs	r3, #16
 8022d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 8022d92:	687b      	ldr	r3, [r7, #4]
 8022d94:	3301      	adds	r3, #1
 8022d96:	607b      	str	r3, [r7, #4]
 8022d98:	687b      	ldr	r3, [r7, #4]
 8022d9a:	781b      	ldrb	r3, [r3, #0]
 8022d9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8022da0:	e002      	b.n	8022da8 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8022da2:	2308      	movs	r3, #8
 8022da4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8022da8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022dac:	3301      	adds	r3, #1
 8022dae:	4a70      	ldr	r2, [pc, #448]	@ (8022f70 <ip4addr_aton+0x244>)
 8022db0:	4413      	add	r3, r2
 8022db2:	781b      	ldrb	r3, [r3, #0]
 8022db4:	f003 0304 	and.w	r3, r3, #4
 8022db8:	2b00      	cmp	r3, #0
 8022dba:	d011      	beq.n	8022de0 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8022dbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8022dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022dc2:	fb03 f202 	mul.w	r2, r3, r2
 8022dc6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022dca:	4413      	add	r3, r2
 8022dcc:	3b30      	subs	r3, #48	@ 0x30
 8022dce:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8022dd0:	687b      	ldr	r3, [r7, #4]
 8022dd2:	3301      	adds	r3, #1
 8022dd4:	607b      	str	r3, [r7, #4]
 8022dd6:	687b      	ldr	r3, [r7, #4]
 8022dd8:	781b      	ldrb	r3, [r3, #0]
 8022dda:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8022dde:	e7e3      	b.n	8022da8 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8022de0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8022de4:	2b10      	cmp	r3, #16
 8022de6:	d127      	bne.n	8022e38 <ip4addr_aton+0x10c>
 8022de8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022dec:	3301      	adds	r3, #1
 8022dee:	4a60      	ldr	r2, [pc, #384]	@ (8022f70 <ip4addr_aton+0x244>)
 8022df0:	4413      	add	r3, r2
 8022df2:	781b      	ldrb	r3, [r3, #0]
 8022df4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8022df8:	2b00      	cmp	r3, #0
 8022dfa:	d01d      	beq.n	8022e38 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8022dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022dfe:	011b      	lsls	r3, r3, #4
 8022e00:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8022e04:	f102 010a 	add.w	r1, r2, #10
 8022e08:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8022e0c:	3201      	adds	r2, #1
 8022e0e:	4858      	ldr	r0, [pc, #352]	@ (8022f70 <ip4addr_aton+0x244>)
 8022e10:	4402      	add	r2, r0
 8022e12:	7812      	ldrb	r2, [r2, #0]
 8022e14:	f002 0203 	and.w	r2, r2, #3
 8022e18:	2a02      	cmp	r2, #2
 8022e1a:	d101      	bne.n	8022e20 <ip4addr_aton+0xf4>
 8022e1c:	2261      	movs	r2, #97	@ 0x61
 8022e1e:	e000      	b.n	8022e22 <ip4addr_aton+0xf6>
 8022e20:	2241      	movs	r2, #65	@ 0x41
 8022e22:	1a8a      	subs	r2, r1, r2
 8022e24:	4313      	orrs	r3, r2
 8022e26:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8022e28:	687b      	ldr	r3, [r7, #4]
 8022e2a:	3301      	adds	r3, #1
 8022e2c:	607b      	str	r3, [r7, #4]
 8022e2e:	687b      	ldr	r3, [r7, #4]
 8022e30:	781b      	ldrb	r3, [r3, #0]
 8022e32:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 8022e36:	e7b7      	b.n	8022da8 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8022e38:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022e3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8022e3e:	d114      	bne.n	8022e6a <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8022e40:	f107 030c 	add.w	r3, r7, #12
 8022e44:	330c      	adds	r3, #12
 8022e46:	69fa      	ldr	r2, [r7, #28]
 8022e48:	429a      	cmp	r2, r3
 8022e4a:	d301      	bcc.n	8022e50 <ip4addr_aton+0x124>
        return 0;
 8022e4c:	2300      	movs	r3, #0
 8022e4e:	e08b      	b.n	8022f68 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8022e50:	69fb      	ldr	r3, [r7, #28]
 8022e52:	1d1a      	adds	r2, r3, #4
 8022e54:	61fa      	str	r2, [r7, #28]
 8022e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022e58:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8022e5a:	687b      	ldr	r3, [r7, #4]
 8022e5c:	3301      	adds	r3, #1
 8022e5e:	607b      	str	r3, [r7, #4]
 8022e60:	687b      	ldr	r3, [r7, #4]
 8022e62:	781b      	ldrb	r3, [r3, #0]
 8022e64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 8022e68:	e76c      	b.n	8022d44 <ip4addr_aton+0x18>
    } else {
      break;
 8022e6a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8022e6c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022e70:	2b00      	cmp	r3, #0
 8022e72:	d00b      	beq.n	8022e8c <ip4addr_aton+0x160>
 8022e74:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022e78:	3301      	adds	r3, #1
 8022e7a:	4a3d      	ldr	r2, [pc, #244]	@ (8022f70 <ip4addr_aton+0x244>)
 8022e7c:	4413      	add	r3, r2
 8022e7e:	781b      	ldrb	r3, [r3, #0]
 8022e80:	f003 0308 	and.w	r3, r3, #8
 8022e84:	2b00      	cmp	r3, #0
 8022e86:	d101      	bne.n	8022e8c <ip4addr_aton+0x160>
    return 0;
 8022e88:	2300      	movs	r3, #0
 8022e8a:	e06d      	b.n	8022f68 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8022e8c:	f107 030c 	add.w	r3, r7, #12
 8022e90:	69fa      	ldr	r2, [r7, #28]
 8022e92:	1ad3      	subs	r3, r2, r3
 8022e94:	109b      	asrs	r3, r3, #2
 8022e96:	3301      	adds	r3, #1
 8022e98:	2b04      	cmp	r3, #4
 8022e9a:	d853      	bhi.n	8022f44 <ip4addr_aton+0x218>
 8022e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8022ea4 <ip4addr_aton+0x178>)
 8022e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022ea2:	bf00      	nop
 8022ea4:	08022eb9 	.word	0x08022eb9
 8022ea8:	08022f53 	.word	0x08022f53
 8022eac:	08022ebd 	.word	0x08022ebd
 8022eb0:	08022edf 	.word	0x08022edf
 8022eb4:	08022f0d 	.word	0x08022f0d

    case 0:
      return 0;       /* initial nondigit */
 8022eb8:	2300      	movs	r3, #0
 8022eba:	e055      	b.n	8022f68 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8022ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022ebe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8022ec2:	d301      	bcc.n	8022ec8 <ip4addr_aton+0x19c>
        return 0;
 8022ec4:	2300      	movs	r3, #0
 8022ec6:	e04f      	b.n	8022f68 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8022ec8:	68fb      	ldr	r3, [r7, #12]
 8022eca:	2bff      	cmp	r3, #255	@ 0xff
 8022ecc:	d901      	bls.n	8022ed2 <ip4addr_aton+0x1a6>
        return 0;
 8022ece:	2300      	movs	r3, #0
 8022ed0:	e04a      	b.n	8022f68 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8022ed2:	68fb      	ldr	r3, [r7, #12]
 8022ed4:	061b      	lsls	r3, r3, #24
 8022ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022ed8:	4313      	orrs	r3, r2
 8022eda:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8022edc:	e03a      	b.n	8022f54 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8022ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8022ee4:	d301      	bcc.n	8022eea <ip4addr_aton+0x1be>
        return 0;
 8022ee6:	2300      	movs	r3, #0
 8022ee8:	e03e      	b.n	8022f68 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8022eea:	68fb      	ldr	r3, [r7, #12]
 8022eec:	2bff      	cmp	r3, #255	@ 0xff
 8022eee:	d802      	bhi.n	8022ef6 <ip4addr_aton+0x1ca>
 8022ef0:	693b      	ldr	r3, [r7, #16]
 8022ef2:	2bff      	cmp	r3, #255	@ 0xff
 8022ef4:	d901      	bls.n	8022efa <ip4addr_aton+0x1ce>
        return 0;
 8022ef6:	2300      	movs	r3, #0
 8022ef8:	e036      	b.n	8022f68 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8022efa:	68fb      	ldr	r3, [r7, #12]
 8022efc:	061a      	lsls	r2, r3, #24
 8022efe:	693b      	ldr	r3, [r7, #16]
 8022f00:	041b      	lsls	r3, r3, #16
 8022f02:	4313      	orrs	r3, r2
 8022f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022f06:	4313      	orrs	r3, r2
 8022f08:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8022f0a:	e023      	b.n	8022f54 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8022f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022f0e:	2bff      	cmp	r3, #255	@ 0xff
 8022f10:	d901      	bls.n	8022f16 <ip4addr_aton+0x1ea>
        return 0;
 8022f12:	2300      	movs	r3, #0
 8022f14:	e028      	b.n	8022f68 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8022f16:	68fb      	ldr	r3, [r7, #12]
 8022f18:	2bff      	cmp	r3, #255	@ 0xff
 8022f1a:	d805      	bhi.n	8022f28 <ip4addr_aton+0x1fc>
 8022f1c:	693b      	ldr	r3, [r7, #16]
 8022f1e:	2bff      	cmp	r3, #255	@ 0xff
 8022f20:	d802      	bhi.n	8022f28 <ip4addr_aton+0x1fc>
 8022f22:	697b      	ldr	r3, [r7, #20]
 8022f24:	2bff      	cmp	r3, #255	@ 0xff
 8022f26:	d901      	bls.n	8022f2c <ip4addr_aton+0x200>
        return 0;
 8022f28:	2300      	movs	r3, #0
 8022f2a:	e01d      	b.n	8022f68 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8022f2c:	68fb      	ldr	r3, [r7, #12]
 8022f2e:	061a      	lsls	r2, r3, #24
 8022f30:	693b      	ldr	r3, [r7, #16]
 8022f32:	041b      	lsls	r3, r3, #16
 8022f34:	431a      	orrs	r2, r3
 8022f36:	697b      	ldr	r3, [r7, #20]
 8022f38:	021b      	lsls	r3, r3, #8
 8022f3a:	4313      	orrs	r3, r2
 8022f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022f3e:	4313      	orrs	r3, r2
 8022f40:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8022f42:	e007      	b.n	8022f54 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8022f44:	4b0b      	ldr	r3, [pc, #44]	@ (8022f74 <ip4addr_aton+0x248>)
 8022f46:	22f9      	movs	r2, #249	@ 0xf9
 8022f48:	490b      	ldr	r1, [pc, #44]	@ (8022f78 <ip4addr_aton+0x24c>)
 8022f4a:	480c      	ldr	r0, [pc, #48]	@ (8022f7c <ip4addr_aton+0x250>)
 8022f4c:	f002 f98a 	bl	8025264 <iprintf>
      break;
 8022f50:	e000      	b.n	8022f54 <ip4addr_aton+0x228>
      break;
 8022f52:	bf00      	nop
  }
  if (addr) {
 8022f54:	683b      	ldr	r3, [r7, #0]
 8022f56:	2b00      	cmp	r3, #0
 8022f58:	d005      	beq.n	8022f66 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8022f5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8022f5c:	f7f5 fd6d 	bl	8018a3a <lwip_htonl>
 8022f60:	4602      	mov	r2, r0
 8022f62:	683b      	ldr	r3, [r7, #0]
 8022f64:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8022f66:	2301      	movs	r3, #1
}
 8022f68:	4618      	mov	r0, r3
 8022f6a:	3728      	adds	r7, #40	@ 0x28
 8022f6c:	46bd      	mov	sp, r7
 8022f6e:	bd80      	pop	{r7, pc}
 8022f70:	0802cfa3 	.word	0x0802cfa3
 8022f74:	0802ca3c 	.word	0x0802ca3c
 8022f78:	0802ca78 	.word	0x0802ca78
 8022f7c:	0802ca84 	.word	0x0802ca84

08022f80 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8022f80:	b580      	push	{r7, lr}
 8022f82:	b084      	sub	sp, #16
 8022f84:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8022f86:	2300      	movs	r3, #0
 8022f88:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8022f8a:	4b12      	ldr	r3, [pc, #72]	@ (8022fd4 <ip_reass_tmr+0x54>)
 8022f8c:	681b      	ldr	r3, [r3, #0]
 8022f8e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8022f90:	e018      	b.n	8022fc4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8022f92:	68fb      	ldr	r3, [r7, #12]
 8022f94:	7fdb      	ldrb	r3, [r3, #31]
 8022f96:	2b00      	cmp	r3, #0
 8022f98:	d00b      	beq.n	8022fb2 <ip_reass_tmr+0x32>
      r->timer--;
 8022f9a:	68fb      	ldr	r3, [r7, #12]
 8022f9c:	7fdb      	ldrb	r3, [r3, #31]
 8022f9e:	3b01      	subs	r3, #1
 8022fa0:	b2da      	uxtb	r2, r3
 8022fa2:	68fb      	ldr	r3, [r7, #12]
 8022fa4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8022fa6:	68fb      	ldr	r3, [r7, #12]
 8022fa8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8022faa:	68fb      	ldr	r3, [r7, #12]
 8022fac:	681b      	ldr	r3, [r3, #0]
 8022fae:	60fb      	str	r3, [r7, #12]
 8022fb0:	e008      	b.n	8022fc4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8022fb2:	68fb      	ldr	r3, [r7, #12]
 8022fb4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8022fb6:	68fb      	ldr	r3, [r7, #12]
 8022fb8:	681b      	ldr	r3, [r3, #0]
 8022fba:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8022fbc:	68b9      	ldr	r1, [r7, #8]
 8022fbe:	6878      	ldr	r0, [r7, #4]
 8022fc0:	f000 f80a 	bl	8022fd8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8022fc4:	68fb      	ldr	r3, [r7, #12]
 8022fc6:	2b00      	cmp	r3, #0
 8022fc8:	d1e3      	bne.n	8022f92 <ip_reass_tmr+0x12>
    }
  }
}
 8022fca:	bf00      	nop
 8022fcc:	bf00      	nop
 8022fce:	3710      	adds	r7, #16
 8022fd0:	46bd      	mov	sp, r7
 8022fd2:	bd80      	pop	{r7, pc}
 8022fd4:	2400bfa0 	.word	0x2400bfa0

08022fd8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8022fd8:	b580      	push	{r7, lr}
 8022fda:	b088      	sub	sp, #32
 8022fdc:	af00      	add	r7, sp, #0
 8022fde:	6078      	str	r0, [r7, #4]
 8022fe0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8022fe2:	2300      	movs	r3, #0
 8022fe4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8022fe6:	683a      	ldr	r2, [r7, #0]
 8022fe8:	687b      	ldr	r3, [r7, #4]
 8022fea:	429a      	cmp	r2, r3
 8022fec:	d105      	bne.n	8022ffa <ip_reass_free_complete_datagram+0x22>
 8022fee:	4b45      	ldr	r3, [pc, #276]	@ (8023104 <ip_reass_free_complete_datagram+0x12c>)
 8022ff0:	22ab      	movs	r2, #171	@ 0xab
 8022ff2:	4945      	ldr	r1, [pc, #276]	@ (8023108 <ip_reass_free_complete_datagram+0x130>)
 8022ff4:	4845      	ldr	r0, [pc, #276]	@ (802310c <ip_reass_free_complete_datagram+0x134>)
 8022ff6:	f002 f935 	bl	8025264 <iprintf>
  if (prev != NULL) {
 8022ffa:	683b      	ldr	r3, [r7, #0]
 8022ffc:	2b00      	cmp	r3, #0
 8022ffe:	d00a      	beq.n	8023016 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8023000:	683b      	ldr	r3, [r7, #0]
 8023002:	681b      	ldr	r3, [r3, #0]
 8023004:	687a      	ldr	r2, [r7, #4]
 8023006:	429a      	cmp	r2, r3
 8023008:	d005      	beq.n	8023016 <ip_reass_free_complete_datagram+0x3e>
 802300a:	4b3e      	ldr	r3, [pc, #248]	@ (8023104 <ip_reass_free_complete_datagram+0x12c>)
 802300c:	22ad      	movs	r2, #173	@ 0xad
 802300e:	4940      	ldr	r1, [pc, #256]	@ (8023110 <ip_reass_free_complete_datagram+0x138>)
 8023010:	483e      	ldr	r0, [pc, #248]	@ (802310c <ip_reass_free_complete_datagram+0x134>)
 8023012:	f002 f927 	bl	8025264 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8023016:	687b      	ldr	r3, [r7, #4]
 8023018:	685b      	ldr	r3, [r3, #4]
 802301a:	685b      	ldr	r3, [r3, #4]
 802301c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 802301e:	697b      	ldr	r3, [r7, #20]
 8023020:	889b      	ldrh	r3, [r3, #4]
 8023022:	b29b      	uxth	r3, r3
 8023024:	2b00      	cmp	r3, #0
 8023026:	d12a      	bne.n	802307e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8023028:	687b      	ldr	r3, [r7, #4]
 802302a:	685b      	ldr	r3, [r3, #4]
 802302c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 802302e:	697b      	ldr	r3, [r7, #20]
 8023030:	681a      	ldr	r2, [r3, #0]
 8023032:	687b      	ldr	r3, [r7, #4]
 8023034:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8023036:	69bb      	ldr	r3, [r7, #24]
 8023038:	6858      	ldr	r0, [r3, #4]
 802303a:	687b      	ldr	r3, [r7, #4]
 802303c:	3308      	adds	r3, #8
 802303e:	2214      	movs	r2, #20
 8023040:	4619      	mov	r1, r3
 8023042:	f002 fa9c 	bl	802557e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8023046:	2101      	movs	r1, #1
 8023048:	69b8      	ldr	r0, [r7, #24]
 802304a:	f7ff faff 	bl	802264c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 802304e:	69b8      	ldr	r0, [r7, #24]
 8023050:	f7f7 fa48 	bl	801a4e4 <pbuf_clen>
 8023054:	4603      	mov	r3, r0
 8023056:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8023058:	8bfa      	ldrh	r2, [r7, #30]
 802305a:	8a7b      	ldrh	r3, [r7, #18]
 802305c:	4413      	add	r3, r2
 802305e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8023062:	db05      	blt.n	8023070 <ip_reass_free_complete_datagram+0x98>
 8023064:	4b27      	ldr	r3, [pc, #156]	@ (8023104 <ip_reass_free_complete_datagram+0x12c>)
 8023066:	22bc      	movs	r2, #188	@ 0xbc
 8023068:	492a      	ldr	r1, [pc, #168]	@ (8023114 <ip_reass_free_complete_datagram+0x13c>)
 802306a:	4828      	ldr	r0, [pc, #160]	@ (802310c <ip_reass_free_complete_datagram+0x134>)
 802306c:	f002 f8fa 	bl	8025264 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8023070:	8bfa      	ldrh	r2, [r7, #30]
 8023072:	8a7b      	ldrh	r3, [r7, #18]
 8023074:	4413      	add	r3, r2
 8023076:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8023078:	69b8      	ldr	r0, [r7, #24]
 802307a:	f7f7 f9a5 	bl	801a3c8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 802307e:	687b      	ldr	r3, [r7, #4]
 8023080:	685b      	ldr	r3, [r3, #4]
 8023082:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8023084:	e01f      	b.n	80230c6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8023086:	69bb      	ldr	r3, [r7, #24]
 8023088:	685b      	ldr	r3, [r3, #4]
 802308a:	617b      	str	r3, [r7, #20]
    pcur = p;
 802308c:	69bb      	ldr	r3, [r7, #24]
 802308e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8023090:	697b      	ldr	r3, [r7, #20]
 8023092:	681b      	ldr	r3, [r3, #0]
 8023094:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8023096:	68f8      	ldr	r0, [r7, #12]
 8023098:	f7f7 fa24 	bl	801a4e4 <pbuf_clen>
 802309c:	4603      	mov	r3, r0
 802309e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80230a0:	8bfa      	ldrh	r2, [r7, #30]
 80230a2:	8a7b      	ldrh	r3, [r7, #18]
 80230a4:	4413      	add	r3, r2
 80230a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80230aa:	db05      	blt.n	80230b8 <ip_reass_free_complete_datagram+0xe0>
 80230ac:	4b15      	ldr	r3, [pc, #84]	@ (8023104 <ip_reass_free_complete_datagram+0x12c>)
 80230ae:	22cc      	movs	r2, #204	@ 0xcc
 80230b0:	4918      	ldr	r1, [pc, #96]	@ (8023114 <ip_reass_free_complete_datagram+0x13c>)
 80230b2:	4816      	ldr	r0, [pc, #88]	@ (802310c <ip_reass_free_complete_datagram+0x134>)
 80230b4:	f002 f8d6 	bl	8025264 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80230b8:	8bfa      	ldrh	r2, [r7, #30]
 80230ba:	8a7b      	ldrh	r3, [r7, #18]
 80230bc:	4413      	add	r3, r2
 80230be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80230c0:	68f8      	ldr	r0, [r7, #12]
 80230c2:	f7f7 f981 	bl	801a3c8 <pbuf_free>
  while (p != NULL) {
 80230c6:	69bb      	ldr	r3, [r7, #24]
 80230c8:	2b00      	cmp	r3, #0
 80230ca:	d1dc      	bne.n	8023086 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80230cc:	6839      	ldr	r1, [r7, #0]
 80230ce:	6878      	ldr	r0, [r7, #4]
 80230d0:	f000 f8c2 	bl	8023258 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80230d4:	4b10      	ldr	r3, [pc, #64]	@ (8023118 <ip_reass_free_complete_datagram+0x140>)
 80230d6:	881b      	ldrh	r3, [r3, #0]
 80230d8:	8bfa      	ldrh	r2, [r7, #30]
 80230da:	429a      	cmp	r2, r3
 80230dc:	d905      	bls.n	80230ea <ip_reass_free_complete_datagram+0x112>
 80230de:	4b09      	ldr	r3, [pc, #36]	@ (8023104 <ip_reass_free_complete_datagram+0x12c>)
 80230e0:	22d2      	movs	r2, #210	@ 0xd2
 80230e2:	490e      	ldr	r1, [pc, #56]	@ (802311c <ip_reass_free_complete_datagram+0x144>)
 80230e4:	4809      	ldr	r0, [pc, #36]	@ (802310c <ip_reass_free_complete_datagram+0x134>)
 80230e6:	f002 f8bd 	bl	8025264 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80230ea:	4b0b      	ldr	r3, [pc, #44]	@ (8023118 <ip_reass_free_complete_datagram+0x140>)
 80230ec:	881a      	ldrh	r2, [r3, #0]
 80230ee:	8bfb      	ldrh	r3, [r7, #30]
 80230f0:	1ad3      	subs	r3, r2, r3
 80230f2:	b29a      	uxth	r2, r3
 80230f4:	4b08      	ldr	r3, [pc, #32]	@ (8023118 <ip_reass_free_complete_datagram+0x140>)
 80230f6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80230f8:	8bfb      	ldrh	r3, [r7, #30]
}
 80230fa:	4618      	mov	r0, r3
 80230fc:	3720      	adds	r7, #32
 80230fe:	46bd      	mov	sp, r7
 8023100:	bd80      	pop	{r7, pc}
 8023102:	bf00      	nop
 8023104:	0802caac 	.word	0x0802caac
 8023108:	0802cae8 	.word	0x0802cae8
 802310c:	0802caf4 	.word	0x0802caf4
 8023110:	0802cb1c 	.word	0x0802cb1c
 8023114:	0802cb30 	.word	0x0802cb30
 8023118:	2400bfa4 	.word	0x2400bfa4
 802311c:	0802cb50 	.word	0x0802cb50

08023120 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8023120:	b580      	push	{r7, lr}
 8023122:	b08a      	sub	sp, #40	@ 0x28
 8023124:	af00      	add	r7, sp, #0
 8023126:	6078      	str	r0, [r7, #4]
 8023128:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 802312a:	2300      	movs	r3, #0
 802312c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 802312e:	2300      	movs	r3, #0
 8023130:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8023132:	2300      	movs	r3, #0
 8023134:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8023136:	2300      	movs	r3, #0
 8023138:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 802313a:	2300      	movs	r3, #0
 802313c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 802313e:	4b28      	ldr	r3, [pc, #160]	@ (80231e0 <ip_reass_remove_oldest_datagram+0xc0>)
 8023140:	681b      	ldr	r3, [r3, #0]
 8023142:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8023144:	e030      	b.n	80231a8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8023146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023148:	695a      	ldr	r2, [r3, #20]
 802314a:	687b      	ldr	r3, [r7, #4]
 802314c:	68db      	ldr	r3, [r3, #12]
 802314e:	429a      	cmp	r2, r3
 8023150:	d10c      	bne.n	802316c <ip_reass_remove_oldest_datagram+0x4c>
 8023152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023154:	699a      	ldr	r2, [r3, #24]
 8023156:	687b      	ldr	r3, [r7, #4]
 8023158:	691b      	ldr	r3, [r3, #16]
 802315a:	429a      	cmp	r2, r3
 802315c:	d106      	bne.n	802316c <ip_reass_remove_oldest_datagram+0x4c>
 802315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023160:	899a      	ldrh	r2, [r3, #12]
 8023162:	687b      	ldr	r3, [r7, #4]
 8023164:	889b      	ldrh	r3, [r3, #4]
 8023166:	b29b      	uxth	r3, r3
 8023168:	429a      	cmp	r2, r3
 802316a:	d014      	beq.n	8023196 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 802316c:	693b      	ldr	r3, [r7, #16]
 802316e:	3301      	adds	r3, #1
 8023170:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8023172:	6a3b      	ldr	r3, [r7, #32]
 8023174:	2b00      	cmp	r3, #0
 8023176:	d104      	bne.n	8023182 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8023178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802317a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 802317c:	69fb      	ldr	r3, [r7, #28]
 802317e:	61bb      	str	r3, [r7, #24]
 8023180:	e009      	b.n	8023196 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8023182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023184:	7fda      	ldrb	r2, [r3, #31]
 8023186:	6a3b      	ldr	r3, [r7, #32]
 8023188:	7fdb      	ldrb	r3, [r3, #31]
 802318a:	429a      	cmp	r2, r3
 802318c:	d803      	bhi.n	8023196 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 802318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023190:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8023192:	69fb      	ldr	r3, [r7, #28]
 8023194:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8023196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023198:	681b      	ldr	r3, [r3, #0]
 802319a:	2b00      	cmp	r3, #0
 802319c:	d001      	beq.n	80231a2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 802319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80231a0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80231a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80231a4:	681b      	ldr	r3, [r3, #0]
 80231a6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80231a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80231aa:	2b00      	cmp	r3, #0
 80231ac:	d1cb      	bne.n	8023146 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80231ae:	6a3b      	ldr	r3, [r7, #32]
 80231b0:	2b00      	cmp	r3, #0
 80231b2:	d008      	beq.n	80231c6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80231b4:	69b9      	ldr	r1, [r7, #24]
 80231b6:	6a38      	ldr	r0, [r7, #32]
 80231b8:	f7ff ff0e 	bl	8022fd8 <ip_reass_free_complete_datagram>
 80231bc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80231be:	697a      	ldr	r2, [r7, #20]
 80231c0:	68fb      	ldr	r3, [r7, #12]
 80231c2:	4413      	add	r3, r2
 80231c4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80231c6:	697a      	ldr	r2, [r7, #20]
 80231c8:	683b      	ldr	r3, [r7, #0]
 80231ca:	429a      	cmp	r2, r3
 80231cc:	da02      	bge.n	80231d4 <ip_reass_remove_oldest_datagram+0xb4>
 80231ce:	693b      	ldr	r3, [r7, #16]
 80231d0:	2b01      	cmp	r3, #1
 80231d2:	dcac      	bgt.n	802312e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80231d4:	697b      	ldr	r3, [r7, #20]
}
 80231d6:	4618      	mov	r0, r3
 80231d8:	3728      	adds	r7, #40	@ 0x28
 80231da:	46bd      	mov	sp, r7
 80231dc:	bd80      	pop	{r7, pc}
 80231de:	bf00      	nop
 80231e0:	2400bfa0 	.word	0x2400bfa0

080231e4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80231e4:	b580      	push	{r7, lr}
 80231e6:	b084      	sub	sp, #16
 80231e8:	af00      	add	r7, sp, #0
 80231ea:	6078      	str	r0, [r7, #4]
 80231ec:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80231ee:	2004      	movs	r0, #4
 80231f0:	f7f6 f99e 	bl	8019530 <memp_malloc>
 80231f4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80231f6:	68fb      	ldr	r3, [r7, #12]
 80231f8:	2b00      	cmp	r3, #0
 80231fa:	d110      	bne.n	802321e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80231fc:	6839      	ldr	r1, [r7, #0]
 80231fe:	6878      	ldr	r0, [r7, #4]
 8023200:	f7ff ff8e 	bl	8023120 <ip_reass_remove_oldest_datagram>
 8023204:	4602      	mov	r2, r0
 8023206:	683b      	ldr	r3, [r7, #0]
 8023208:	4293      	cmp	r3, r2
 802320a:	dc03      	bgt.n	8023214 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802320c:	2004      	movs	r0, #4
 802320e:	f7f6 f98f 	bl	8019530 <memp_malloc>
 8023212:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8023214:	68fb      	ldr	r3, [r7, #12]
 8023216:	2b00      	cmp	r3, #0
 8023218:	d101      	bne.n	802321e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 802321a:	2300      	movs	r3, #0
 802321c:	e016      	b.n	802324c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 802321e:	2220      	movs	r2, #32
 8023220:	2100      	movs	r1, #0
 8023222:	68f8      	ldr	r0, [r7, #12]
 8023224:	f002 f90a 	bl	802543c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8023228:	68fb      	ldr	r3, [r7, #12]
 802322a:	220f      	movs	r2, #15
 802322c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 802322e:	4b09      	ldr	r3, [pc, #36]	@ (8023254 <ip_reass_enqueue_new_datagram+0x70>)
 8023230:	681a      	ldr	r2, [r3, #0]
 8023232:	68fb      	ldr	r3, [r7, #12]
 8023234:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8023236:	4a07      	ldr	r2, [pc, #28]	@ (8023254 <ip_reass_enqueue_new_datagram+0x70>)
 8023238:	68fb      	ldr	r3, [r7, #12]
 802323a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 802323c:	68fb      	ldr	r3, [r7, #12]
 802323e:	3308      	adds	r3, #8
 8023240:	2214      	movs	r2, #20
 8023242:	6879      	ldr	r1, [r7, #4]
 8023244:	4618      	mov	r0, r3
 8023246:	f002 f99a 	bl	802557e <memcpy>
  return ipr;
 802324a:	68fb      	ldr	r3, [r7, #12]
}
 802324c:	4618      	mov	r0, r3
 802324e:	3710      	adds	r7, #16
 8023250:	46bd      	mov	sp, r7
 8023252:	bd80      	pop	{r7, pc}
 8023254:	2400bfa0 	.word	0x2400bfa0

08023258 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8023258:	b580      	push	{r7, lr}
 802325a:	b082      	sub	sp, #8
 802325c:	af00      	add	r7, sp, #0
 802325e:	6078      	str	r0, [r7, #4]
 8023260:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8023262:	4b10      	ldr	r3, [pc, #64]	@ (80232a4 <ip_reass_dequeue_datagram+0x4c>)
 8023264:	681b      	ldr	r3, [r3, #0]
 8023266:	687a      	ldr	r2, [r7, #4]
 8023268:	429a      	cmp	r2, r3
 802326a:	d104      	bne.n	8023276 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 802326c:	687b      	ldr	r3, [r7, #4]
 802326e:	681b      	ldr	r3, [r3, #0]
 8023270:	4a0c      	ldr	r2, [pc, #48]	@ (80232a4 <ip_reass_dequeue_datagram+0x4c>)
 8023272:	6013      	str	r3, [r2, #0]
 8023274:	e00d      	b.n	8023292 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8023276:	683b      	ldr	r3, [r7, #0]
 8023278:	2b00      	cmp	r3, #0
 802327a:	d106      	bne.n	802328a <ip_reass_dequeue_datagram+0x32>
 802327c:	4b0a      	ldr	r3, [pc, #40]	@ (80232a8 <ip_reass_dequeue_datagram+0x50>)
 802327e:	f240 1245 	movw	r2, #325	@ 0x145
 8023282:	490a      	ldr	r1, [pc, #40]	@ (80232ac <ip_reass_dequeue_datagram+0x54>)
 8023284:	480a      	ldr	r0, [pc, #40]	@ (80232b0 <ip_reass_dequeue_datagram+0x58>)
 8023286:	f001 ffed 	bl	8025264 <iprintf>
    prev->next = ipr->next;
 802328a:	687b      	ldr	r3, [r7, #4]
 802328c:	681a      	ldr	r2, [r3, #0]
 802328e:	683b      	ldr	r3, [r7, #0]
 8023290:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8023292:	6879      	ldr	r1, [r7, #4]
 8023294:	2004      	movs	r0, #4
 8023296:	f7f6 f9c1 	bl	801961c <memp_free>
}
 802329a:	bf00      	nop
 802329c:	3708      	adds	r7, #8
 802329e:	46bd      	mov	sp, r7
 80232a0:	bd80      	pop	{r7, pc}
 80232a2:	bf00      	nop
 80232a4:	2400bfa0 	.word	0x2400bfa0
 80232a8:	0802caac 	.word	0x0802caac
 80232ac:	0802cb74 	.word	0x0802cb74
 80232b0:	0802caf4 	.word	0x0802caf4

080232b4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80232b4:	b580      	push	{r7, lr}
 80232b6:	b08c      	sub	sp, #48	@ 0x30
 80232b8:	af00      	add	r7, sp, #0
 80232ba:	60f8      	str	r0, [r7, #12]
 80232bc:	60b9      	str	r1, [r7, #8]
 80232be:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80232c0:	2300      	movs	r3, #0
 80232c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80232c4:	2301      	movs	r3, #1
 80232c6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80232c8:	68bb      	ldr	r3, [r7, #8]
 80232ca:	685b      	ldr	r3, [r3, #4]
 80232cc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80232ce:	69fb      	ldr	r3, [r7, #28]
 80232d0:	885b      	ldrh	r3, [r3, #2]
 80232d2:	b29b      	uxth	r3, r3
 80232d4:	4618      	mov	r0, r3
 80232d6:	f7f5 fb9b 	bl	8018a10 <lwip_htons>
 80232da:	4603      	mov	r3, r0
 80232dc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80232de:	69fb      	ldr	r3, [r7, #28]
 80232e0:	781b      	ldrb	r3, [r3, #0]
 80232e2:	f003 030f 	and.w	r3, r3, #15
 80232e6:	b2db      	uxtb	r3, r3
 80232e8:	009b      	lsls	r3, r3, #2
 80232ea:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80232ec:	7e7b      	ldrb	r3, [r7, #25]
 80232ee:	b29b      	uxth	r3, r3
 80232f0:	8b7a      	ldrh	r2, [r7, #26]
 80232f2:	429a      	cmp	r2, r3
 80232f4:	d202      	bcs.n	80232fc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80232f6:	f04f 33ff 	mov.w	r3, #4294967295
 80232fa:	e135      	b.n	8023568 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80232fc:	7e7b      	ldrb	r3, [r7, #25]
 80232fe:	b29b      	uxth	r3, r3
 8023300:	8b7a      	ldrh	r2, [r7, #26]
 8023302:	1ad3      	subs	r3, r2, r3
 8023304:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8023306:	69fb      	ldr	r3, [r7, #28]
 8023308:	88db      	ldrh	r3, [r3, #6]
 802330a:	b29b      	uxth	r3, r3
 802330c:	4618      	mov	r0, r3
 802330e:	f7f5 fb7f 	bl	8018a10 <lwip_htons>
 8023312:	4603      	mov	r3, r0
 8023314:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023318:	b29b      	uxth	r3, r3
 802331a:	00db      	lsls	r3, r3, #3
 802331c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 802331e:	68bb      	ldr	r3, [r7, #8]
 8023320:	685b      	ldr	r3, [r3, #4]
 8023322:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8023324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023326:	2200      	movs	r2, #0
 8023328:	701a      	strb	r2, [r3, #0]
 802332a:	2200      	movs	r2, #0
 802332c:	705a      	strb	r2, [r3, #1]
 802332e:	2200      	movs	r2, #0
 8023330:	709a      	strb	r2, [r3, #2]
 8023332:	2200      	movs	r2, #0
 8023334:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8023336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023338:	8afa      	ldrh	r2, [r7, #22]
 802333a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 802333c:	8afa      	ldrh	r2, [r7, #22]
 802333e:	8b7b      	ldrh	r3, [r7, #26]
 8023340:	4413      	add	r3, r2
 8023342:	b29a      	uxth	r2, r3
 8023344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023346:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8023348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802334a:	88db      	ldrh	r3, [r3, #6]
 802334c:	b29b      	uxth	r3, r3
 802334e:	8afa      	ldrh	r2, [r7, #22]
 8023350:	429a      	cmp	r2, r3
 8023352:	d902      	bls.n	802335a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023354:	f04f 33ff 	mov.w	r3, #4294967295
 8023358:	e106      	b.n	8023568 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 802335a:	68fb      	ldr	r3, [r7, #12]
 802335c:	685b      	ldr	r3, [r3, #4]
 802335e:	627b      	str	r3, [r7, #36]	@ 0x24
 8023360:	e068      	b.n	8023434 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8023362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023364:	685b      	ldr	r3, [r3, #4]
 8023366:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8023368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802336a:	889b      	ldrh	r3, [r3, #4]
 802336c:	b29a      	uxth	r2, r3
 802336e:	693b      	ldr	r3, [r7, #16]
 8023370:	889b      	ldrh	r3, [r3, #4]
 8023372:	b29b      	uxth	r3, r3
 8023374:	429a      	cmp	r2, r3
 8023376:	d235      	bcs.n	80233e4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8023378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802337a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802337c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 802337e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023380:	2b00      	cmp	r3, #0
 8023382:	d020      	beq.n	80233c6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8023384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023386:	889b      	ldrh	r3, [r3, #4]
 8023388:	b29a      	uxth	r2, r3
 802338a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802338c:	88db      	ldrh	r3, [r3, #6]
 802338e:	b29b      	uxth	r3, r3
 8023390:	429a      	cmp	r2, r3
 8023392:	d307      	bcc.n	80233a4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8023394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023396:	88db      	ldrh	r3, [r3, #6]
 8023398:	b29a      	uxth	r2, r3
 802339a:	693b      	ldr	r3, [r7, #16]
 802339c:	889b      	ldrh	r3, [r3, #4]
 802339e:	b29b      	uxth	r3, r3
 80233a0:	429a      	cmp	r2, r3
 80233a2:	d902      	bls.n	80233aa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80233a4:	f04f 33ff 	mov.w	r3, #4294967295
 80233a8:	e0de      	b.n	8023568 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80233aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80233ac:	68ba      	ldr	r2, [r7, #8]
 80233ae:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80233b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80233b2:	88db      	ldrh	r3, [r3, #6]
 80233b4:	b29a      	uxth	r2, r3
 80233b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80233b8:	889b      	ldrh	r3, [r3, #4]
 80233ba:	b29b      	uxth	r3, r3
 80233bc:	429a      	cmp	r2, r3
 80233be:	d03d      	beq.n	802343c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80233c0:	2300      	movs	r3, #0
 80233c2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80233c4:	e03a      	b.n	802343c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80233c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80233c8:	88db      	ldrh	r3, [r3, #6]
 80233ca:	b29a      	uxth	r2, r3
 80233cc:	693b      	ldr	r3, [r7, #16]
 80233ce:	889b      	ldrh	r3, [r3, #4]
 80233d0:	b29b      	uxth	r3, r3
 80233d2:	429a      	cmp	r2, r3
 80233d4:	d902      	bls.n	80233dc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80233d6:	f04f 33ff 	mov.w	r3, #4294967295
 80233da:	e0c5      	b.n	8023568 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80233dc:	68fb      	ldr	r3, [r7, #12]
 80233de:	68ba      	ldr	r2, [r7, #8]
 80233e0:	605a      	str	r2, [r3, #4]
      break;
 80233e2:	e02b      	b.n	802343c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80233e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80233e6:	889b      	ldrh	r3, [r3, #4]
 80233e8:	b29a      	uxth	r2, r3
 80233ea:	693b      	ldr	r3, [r7, #16]
 80233ec:	889b      	ldrh	r3, [r3, #4]
 80233ee:	b29b      	uxth	r3, r3
 80233f0:	429a      	cmp	r2, r3
 80233f2:	d102      	bne.n	80233fa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80233f4:	f04f 33ff 	mov.w	r3, #4294967295
 80233f8:	e0b6      	b.n	8023568 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80233fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80233fc:	889b      	ldrh	r3, [r3, #4]
 80233fe:	b29a      	uxth	r2, r3
 8023400:	693b      	ldr	r3, [r7, #16]
 8023402:	88db      	ldrh	r3, [r3, #6]
 8023404:	b29b      	uxth	r3, r3
 8023406:	429a      	cmp	r2, r3
 8023408:	d202      	bcs.n	8023410 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 802340a:	f04f 33ff 	mov.w	r3, #4294967295
 802340e:	e0ab      	b.n	8023568 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8023410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023412:	2b00      	cmp	r3, #0
 8023414:	d009      	beq.n	802342a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8023416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023418:	88db      	ldrh	r3, [r3, #6]
 802341a:	b29a      	uxth	r2, r3
 802341c:	693b      	ldr	r3, [r7, #16]
 802341e:	889b      	ldrh	r3, [r3, #4]
 8023420:	b29b      	uxth	r3, r3
 8023422:	429a      	cmp	r2, r3
 8023424:	d001      	beq.n	802342a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8023426:	2300      	movs	r3, #0
 8023428:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 802342a:	693b      	ldr	r3, [r7, #16]
 802342c:	681b      	ldr	r3, [r3, #0]
 802342e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8023430:	693b      	ldr	r3, [r7, #16]
 8023432:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8023434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023436:	2b00      	cmp	r3, #0
 8023438:	d193      	bne.n	8023362 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 802343a:	e000      	b.n	802343e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 802343c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 802343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023440:	2b00      	cmp	r3, #0
 8023442:	d12d      	bne.n	80234a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8023444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023446:	2b00      	cmp	r3, #0
 8023448:	d01c      	beq.n	8023484 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 802344a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802344c:	88db      	ldrh	r3, [r3, #6]
 802344e:	b29a      	uxth	r2, r3
 8023450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023452:	889b      	ldrh	r3, [r3, #4]
 8023454:	b29b      	uxth	r3, r3
 8023456:	429a      	cmp	r2, r3
 8023458:	d906      	bls.n	8023468 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 802345a:	4b45      	ldr	r3, [pc, #276]	@ (8023570 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802345c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8023460:	4944      	ldr	r1, [pc, #272]	@ (8023574 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8023462:	4845      	ldr	r0, [pc, #276]	@ (8023578 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023464:	f001 fefe 	bl	8025264 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8023468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802346a:	68ba      	ldr	r2, [r7, #8]
 802346c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 802346e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023470:	88db      	ldrh	r3, [r3, #6]
 8023472:	b29a      	uxth	r2, r3
 8023474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023476:	889b      	ldrh	r3, [r3, #4]
 8023478:	b29b      	uxth	r3, r3
 802347a:	429a      	cmp	r2, r3
 802347c:	d010      	beq.n	80234a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 802347e:	2300      	movs	r3, #0
 8023480:	623b      	str	r3, [r7, #32]
 8023482:	e00d      	b.n	80234a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8023484:	68fb      	ldr	r3, [r7, #12]
 8023486:	685b      	ldr	r3, [r3, #4]
 8023488:	2b00      	cmp	r3, #0
 802348a:	d006      	beq.n	802349a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 802348c:	4b38      	ldr	r3, [pc, #224]	@ (8023570 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802348e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8023492:	493a      	ldr	r1, [pc, #232]	@ (802357c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8023494:	4838      	ldr	r0, [pc, #224]	@ (8023578 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023496:	f001 fee5 	bl	8025264 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 802349a:	68fb      	ldr	r3, [r7, #12]
 802349c:	68ba      	ldr	r2, [r7, #8]
 802349e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80234a0:	687b      	ldr	r3, [r7, #4]
 80234a2:	2b00      	cmp	r3, #0
 80234a4:	d105      	bne.n	80234b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80234a6:	68fb      	ldr	r3, [r7, #12]
 80234a8:	7f9b      	ldrb	r3, [r3, #30]
 80234aa:	f003 0301 	and.w	r3, r3, #1
 80234ae:	2b00      	cmp	r3, #0
 80234b0:	d059      	beq.n	8023566 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80234b2:	6a3b      	ldr	r3, [r7, #32]
 80234b4:	2b00      	cmp	r3, #0
 80234b6:	d04f      	beq.n	8023558 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80234b8:	68fb      	ldr	r3, [r7, #12]
 80234ba:	685b      	ldr	r3, [r3, #4]
 80234bc:	2b00      	cmp	r3, #0
 80234be:	d006      	beq.n	80234ce <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80234c0:	68fb      	ldr	r3, [r7, #12]
 80234c2:	685b      	ldr	r3, [r3, #4]
 80234c4:	685b      	ldr	r3, [r3, #4]
 80234c6:	889b      	ldrh	r3, [r3, #4]
 80234c8:	b29b      	uxth	r3, r3
 80234ca:	2b00      	cmp	r3, #0
 80234cc:	d002      	beq.n	80234d4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80234ce:	2300      	movs	r3, #0
 80234d0:	623b      	str	r3, [r7, #32]
 80234d2:	e041      	b.n	8023558 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80234d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80234d6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80234d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80234da:	681b      	ldr	r3, [r3, #0]
 80234dc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80234de:	e012      	b.n	8023506 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80234e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80234e2:	685b      	ldr	r3, [r3, #4]
 80234e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80234e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80234e8:	88db      	ldrh	r3, [r3, #6]
 80234ea:	b29a      	uxth	r2, r3
 80234ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80234ee:	889b      	ldrh	r3, [r3, #4]
 80234f0:	b29b      	uxth	r3, r3
 80234f2:	429a      	cmp	r2, r3
 80234f4:	d002      	beq.n	80234fc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80234f6:	2300      	movs	r3, #0
 80234f8:	623b      	str	r3, [r7, #32]
            break;
 80234fa:	e007      	b.n	802350c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80234fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80234fe:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8023500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023502:	681b      	ldr	r3, [r3, #0]
 8023504:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8023506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023508:	2b00      	cmp	r3, #0
 802350a:	d1e9      	bne.n	80234e0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 802350c:	6a3b      	ldr	r3, [r7, #32]
 802350e:	2b00      	cmp	r3, #0
 8023510:	d022      	beq.n	8023558 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8023512:	68fb      	ldr	r3, [r7, #12]
 8023514:	685b      	ldr	r3, [r3, #4]
 8023516:	2b00      	cmp	r3, #0
 8023518:	d106      	bne.n	8023528 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 802351a:	4b15      	ldr	r3, [pc, #84]	@ (8023570 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802351c:	f240 12df 	movw	r2, #479	@ 0x1df
 8023520:	4917      	ldr	r1, [pc, #92]	@ (8023580 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8023522:	4815      	ldr	r0, [pc, #84]	@ (8023578 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023524:	f001 fe9e 	bl	8025264 <iprintf>
          LWIP_ASSERT("sanity check",
 8023528:	68fb      	ldr	r3, [r7, #12]
 802352a:	685b      	ldr	r3, [r3, #4]
 802352c:	685b      	ldr	r3, [r3, #4]
 802352e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023530:	429a      	cmp	r2, r3
 8023532:	d106      	bne.n	8023542 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8023534:	4b0e      	ldr	r3, [pc, #56]	@ (8023570 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8023536:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 802353a:	4911      	ldr	r1, [pc, #68]	@ (8023580 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 802353c:	480e      	ldr	r0, [pc, #56]	@ (8023578 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802353e:	f001 fe91 	bl	8025264 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8023542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023544:	681b      	ldr	r3, [r3, #0]
 8023546:	2b00      	cmp	r3, #0
 8023548:	d006      	beq.n	8023558 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 802354a:	4b09      	ldr	r3, [pc, #36]	@ (8023570 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802354c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8023550:	490c      	ldr	r1, [pc, #48]	@ (8023584 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8023552:	4809      	ldr	r0, [pc, #36]	@ (8023578 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023554:	f001 fe86 	bl	8025264 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8023558:	6a3b      	ldr	r3, [r7, #32]
 802355a:	2b00      	cmp	r3, #0
 802355c:	bf14      	ite	ne
 802355e:	2301      	movne	r3, #1
 8023560:	2300      	moveq	r3, #0
 8023562:	b2db      	uxtb	r3, r3
 8023564:	e000      	b.n	8023568 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8023566:	2300      	movs	r3, #0
}
 8023568:	4618      	mov	r0, r3
 802356a:	3730      	adds	r7, #48	@ 0x30
 802356c:	46bd      	mov	sp, r7
 802356e:	bd80      	pop	{r7, pc}
 8023570:	0802caac 	.word	0x0802caac
 8023574:	0802cb90 	.word	0x0802cb90
 8023578:	0802caf4 	.word	0x0802caf4
 802357c:	0802cbb0 	.word	0x0802cbb0
 8023580:	0802cbe8 	.word	0x0802cbe8
 8023584:	0802cbf8 	.word	0x0802cbf8

08023588 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8023588:	b580      	push	{r7, lr}
 802358a:	b08e      	sub	sp, #56	@ 0x38
 802358c:	af00      	add	r7, sp, #0
 802358e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8023590:	687b      	ldr	r3, [r7, #4]
 8023592:	685b      	ldr	r3, [r3, #4]
 8023594:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8023596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023598:	781b      	ldrb	r3, [r3, #0]
 802359a:	f003 030f 	and.w	r3, r3, #15
 802359e:	b2db      	uxtb	r3, r3
 80235a0:	009b      	lsls	r3, r3, #2
 80235a2:	b2db      	uxtb	r3, r3
 80235a4:	2b14      	cmp	r3, #20
 80235a6:	f040 8171 	bne.w	802388c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80235aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80235ac:	88db      	ldrh	r3, [r3, #6]
 80235ae:	b29b      	uxth	r3, r3
 80235b0:	4618      	mov	r0, r3
 80235b2:	f7f5 fa2d 	bl	8018a10 <lwip_htons>
 80235b6:	4603      	mov	r3, r0
 80235b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80235bc:	b29b      	uxth	r3, r3
 80235be:	00db      	lsls	r3, r3, #3
 80235c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80235c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80235c4:	885b      	ldrh	r3, [r3, #2]
 80235c6:	b29b      	uxth	r3, r3
 80235c8:	4618      	mov	r0, r3
 80235ca:	f7f5 fa21 	bl	8018a10 <lwip_htons>
 80235ce:	4603      	mov	r3, r0
 80235d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80235d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80235d4:	781b      	ldrb	r3, [r3, #0]
 80235d6:	f003 030f 	and.w	r3, r3, #15
 80235da:	b2db      	uxtb	r3, r3
 80235dc:	009b      	lsls	r3, r3, #2
 80235de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80235e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80235e6:	b29b      	uxth	r3, r3
 80235e8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80235ea:	429a      	cmp	r2, r3
 80235ec:	f0c0 8150 	bcc.w	8023890 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80235f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80235f4:	b29b      	uxth	r3, r3
 80235f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80235f8:	1ad3      	subs	r3, r2, r3
 80235fa:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80235fc:	6878      	ldr	r0, [r7, #4]
 80235fe:	f7f6 ff71 	bl	801a4e4 <pbuf_clen>
 8023602:	4603      	mov	r3, r0
 8023604:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8023606:	4b8c      	ldr	r3, [pc, #560]	@ (8023838 <ip4_reass+0x2b0>)
 8023608:	881b      	ldrh	r3, [r3, #0]
 802360a:	461a      	mov	r2, r3
 802360c:	8c3b      	ldrh	r3, [r7, #32]
 802360e:	4413      	add	r3, r2
 8023610:	2b0a      	cmp	r3, #10
 8023612:	dd10      	ble.n	8023636 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8023614:	8c3b      	ldrh	r3, [r7, #32]
 8023616:	4619      	mov	r1, r3
 8023618:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802361a:	f7ff fd81 	bl	8023120 <ip_reass_remove_oldest_datagram>
 802361e:	4603      	mov	r3, r0
 8023620:	2b00      	cmp	r3, #0
 8023622:	f000 8137 	beq.w	8023894 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8023626:	4b84      	ldr	r3, [pc, #528]	@ (8023838 <ip4_reass+0x2b0>)
 8023628:	881b      	ldrh	r3, [r3, #0]
 802362a:	461a      	mov	r2, r3
 802362c:	8c3b      	ldrh	r3, [r7, #32]
 802362e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8023630:	2b0a      	cmp	r3, #10
 8023632:	f300 812f 	bgt.w	8023894 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8023636:	4b81      	ldr	r3, [pc, #516]	@ (802383c <ip4_reass+0x2b4>)
 8023638:	681b      	ldr	r3, [r3, #0]
 802363a:	633b      	str	r3, [r7, #48]	@ 0x30
 802363c:	e015      	b.n	802366a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 802363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023640:	695a      	ldr	r2, [r3, #20]
 8023642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023644:	68db      	ldr	r3, [r3, #12]
 8023646:	429a      	cmp	r2, r3
 8023648:	d10c      	bne.n	8023664 <ip4_reass+0xdc>
 802364a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802364c:	699a      	ldr	r2, [r3, #24]
 802364e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023650:	691b      	ldr	r3, [r3, #16]
 8023652:	429a      	cmp	r2, r3
 8023654:	d106      	bne.n	8023664 <ip4_reass+0xdc>
 8023656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023658:	899a      	ldrh	r2, [r3, #12]
 802365a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802365c:	889b      	ldrh	r3, [r3, #4]
 802365e:	b29b      	uxth	r3, r3
 8023660:	429a      	cmp	r2, r3
 8023662:	d006      	beq.n	8023672 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8023664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023666:	681b      	ldr	r3, [r3, #0]
 8023668:	633b      	str	r3, [r7, #48]	@ 0x30
 802366a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802366c:	2b00      	cmp	r3, #0
 802366e:	d1e6      	bne.n	802363e <ip4_reass+0xb6>
 8023670:	e000      	b.n	8023674 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8023672:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8023674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023676:	2b00      	cmp	r3, #0
 8023678:	d109      	bne.n	802368e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 802367a:	8c3b      	ldrh	r3, [r7, #32]
 802367c:	4619      	mov	r1, r3
 802367e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8023680:	f7ff fdb0 	bl	80231e4 <ip_reass_enqueue_new_datagram>
 8023684:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8023686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023688:	2b00      	cmp	r3, #0
 802368a:	d11c      	bne.n	80236c6 <ip4_reass+0x13e>
      goto nullreturn;
 802368c:	e105      	b.n	802389a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802368e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023690:	88db      	ldrh	r3, [r3, #6]
 8023692:	b29b      	uxth	r3, r3
 8023694:	4618      	mov	r0, r3
 8023696:	f7f5 f9bb 	bl	8018a10 <lwip_htons>
 802369a:	4603      	mov	r3, r0
 802369c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80236a0:	2b00      	cmp	r3, #0
 80236a2:	d110      	bne.n	80236c6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80236a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80236a6:	89db      	ldrh	r3, [r3, #14]
 80236a8:	4618      	mov	r0, r3
 80236aa:	f7f5 f9b1 	bl	8018a10 <lwip_htons>
 80236ae:	4603      	mov	r3, r0
 80236b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80236b4:	2b00      	cmp	r3, #0
 80236b6:	d006      	beq.n	80236c6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80236b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80236ba:	3308      	adds	r3, #8
 80236bc:	2214      	movs	r2, #20
 80236be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80236c0:	4618      	mov	r0, r3
 80236c2:	f001 ff5c 	bl	802557e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80236c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80236c8:	88db      	ldrh	r3, [r3, #6]
 80236ca:	b29b      	uxth	r3, r3
 80236cc:	f003 0320 	and.w	r3, r3, #32
 80236d0:	2b00      	cmp	r3, #0
 80236d2:	bf0c      	ite	eq
 80236d4:	2301      	moveq	r3, #1
 80236d6:	2300      	movne	r3, #0
 80236d8:	b2db      	uxtb	r3, r3
 80236da:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80236dc:	69fb      	ldr	r3, [r7, #28]
 80236de:	2b00      	cmp	r3, #0
 80236e0:	d00e      	beq.n	8023700 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80236e2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80236e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80236e6:	4413      	add	r3, r2
 80236e8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80236ea:	8b7a      	ldrh	r2, [r7, #26]
 80236ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80236ee:	429a      	cmp	r2, r3
 80236f0:	f0c0 80a0 	bcc.w	8023834 <ip4_reass+0x2ac>
 80236f4:	8b7b      	ldrh	r3, [r7, #26]
 80236f6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80236fa:	4293      	cmp	r3, r2
 80236fc:	f200 809a 	bhi.w	8023834 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8023700:	69fa      	ldr	r2, [r7, #28]
 8023702:	6879      	ldr	r1, [r7, #4]
 8023704:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8023706:	f7ff fdd5 	bl	80232b4 <ip_reass_chain_frag_into_datagram_and_validate>
 802370a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 802370c:	697b      	ldr	r3, [r7, #20]
 802370e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023712:	f000 809b 	beq.w	802384c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8023716:	4b48      	ldr	r3, [pc, #288]	@ (8023838 <ip4_reass+0x2b0>)
 8023718:	881a      	ldrh	r2, [r3, #0]
 802371a:	8c3b      	ldrh	r3, [r7, #32]
 802371c:	4413      	add	r3, r2
 802371e:	b29a      	uxth	r2, r3
 8023720:	4b45      	ldr	r3, [pc, #276]	@ (8023838 <ip4_reass+0x2b0>)
 8023722:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8023724:	69fb      	ldr	r3, [r7, #28]
 8023726:	2b00      	cmp	r3, #0
 8023728:	d00d      	beq.n	8023746 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 802372a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 802372c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 802372e:	4413      	add	r3, r2
 8023730:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8023732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023734:	8a7a      	ldrh	r2, [r7, #18]
 8023736:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8023738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802373a:	7f9b      	ldrb	r3, [r3, #30]
 802373c:	f043 0301 	orr.w	r3, r3, #1
 8023740:	b2da      	uxtb	r2, r3
 8023742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023744:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8023746:	697b      	ldr	r3, [r7, #20]
 8023748:	2b01      	cmp	r3, #1
 802374a:	d171      	bne.n	8023830 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 802374c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802374e:	8b9b      	ldrh	r3, [r3, #28]
 8023750:	3314      	adds	r3, #20
 8023752:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8023754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023756:	685b      	ldr	r3, [r3, #4]
 8023758:	685b      	ldr	r3, [r3, #4]
 802375a:	681b      	ldr	r3, [r3, #0]
 802375c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 802375e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023760:	685b      	ldr	r3, [r3, #4]
 8023762:	685b      	ldr	r3, [r3, #4]
 8023764:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8023766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023768:	3308      	adds	r3, #8
 802376a:	2214      	movs	r2, #20
 802376c:	4619      	mov	r1, r3
 802376e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8023770:	f001 ff05 	bl	802557e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8023774:	8a3b      	ldrh	r3, [r7, #16]
 8023776:	4618      	mov	r0, r3
 8023778:	f7f5 f94a 	bl	8018a10 <lwip_htons>
 802377c:	4603      	mov	r3, r0
 802377e:	461a      	mov	r2, r3
 8023780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023782:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8023784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023786:	2200      	movs	r2, #0
 8023788:	719a      	strb	r2, [r3, #6]
 802378a:	2200      	movs	r2, #0
 802378c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 802378e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023790:	2200      	movs	r2, #0
 8023792:	729a      	strb	r2, [r3, #10]
 8023794:	2200      	movs	r2, #0
 8023796:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8023798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802379a:	685b      	ldr	r3, [r3, #4]
 802379c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 802379e:	e00d      	b.n	80237bc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80237a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80237a2:	685b      	ldr	r3, [r3, #4]
 80237a4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80237a6:	2114      	movs	r1, #20
 80237a8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80237aa:	f7f6 fd55 	bl	801a258 <pbuf_remove_header>
      pbuf_cat(p, r);
 80237ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80237b0:	6878      	ldr	r0, [r7, #4]
 80237b2:	f7f6 fed7 	bl	801a564 <pbuf_cat>
      r = iprh->next_pbuf;
 80237b6:	68fb      	ldr	r3, [r7, #12]
 80237b8:	681b      	ldr	r3, [r3, #0]
 80237ba:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80237bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80237be:	2b00      	cmp	r3, #0
 80237c0:	d1ee      	bne.n	80237a0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80237c2:	4b1e      	ldr	r3, [pc, #120]	@ (802383c <ip4_reass+0x2b4>)
 80237c4:	681b      	ldr	r3, [r3, #0]
 80237c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80237c8:	429a      	cmp	r2, r3
 80237ca:	d102      	bne.n	80237d2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80237cc:	2300      	movs	r3, #0
 80237ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80237d0:	e010      	b.n	80237f4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80237d2:	4b1a      	ldr	r3, [pc, #104]	@ (802383c <ip4_reass+0x2b4>)
 80237d4:	681b      	ldr	r3, [r3, #0]
 80237d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80237d8:	e007      	b.n	80237ea <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80237da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80237dc:	681b      	ldr	r3, [r3, #0]
 80237de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80237e0:	429a      	cmp	r2, r3
 80237e2:	d006      	beq.n	80237f2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80237e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80237e6:	681b      	ldr	r3, [r3, #0]
 80237e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80237ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80237ec:	2b00      	cmp	r3, #0
 80237ee:	d1f4      	bne.n	80237da <ip4_reass+0x252>
 80237f0:	e000      	b.n	80237f4 <ip4_reass+0x26c>
          break;
 80237f2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80237f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80237f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80237f8:	f7ff fd2e 	bl	8023258 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80237fc:	6878      	ldr	r0, [r7, #4]
 80237fe:	f7f6 fe71 	bl	801a4e4 <pbuf_clen>
 8023802:	4603      	mov	r3, r0
 8023804:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8023806:	4b0c      	ldr	r3, [pc, #48]	@ (8023838 <ip4_reass+0x2b0>)
 8023808:	881b      	ldrh	r3, [r3, #0]
 802380a:	8c3a      	ldrh	r2, [r7, #32]
 802380c:	429a      	cmp	r2, r3
 802380e:	d906      	bls.n	802381e <ip4_reass+0x296>
 8023810:	4b0b      	ldr	r3, [pc, #44]	@ (8023840 <ip4_reass+0x2b8>)
 8023812:	f240 229b 	movw	r2, #667	@ 0x29b
 8023816:	490b      	ldr	r1, [pc, #44]	@ (8023844 <ip4_reass+0x2bc>)
 8023818:	480b      	ldr	r0, [pc, #44]	@ (8023848 <ip4_reass+0x2c0>)
 802381a:	f001 fd23 	bl	8025264 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 802381e:	4b06      	ldr	r3, [pc, #24]	@ (8023838 <ip4_reass+0x2b0>)
 8023820:	881a      	ldrh	r2, [r3, #0]
 8023822:	8c3b      	ldrh	r3, [r7, #32]
 8023824:	1ad3      	subs	r3, r2, r3
 8023826:	b29a      	uxth	r2, r3
 8023828:	4b03      	ldr	r3, [pc, #12]	@ (8023838 <ip4_reass+0x2b0>)
 802382a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 802382c:	687b      	ldr	r3, [r7, #4]
 802382e:	e038      	b.n	80238a2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8023830:	2300      	movs	r3, #0
 8023832:	e036      	b.n	80238a2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8023834:	bf00      	nop
 8023836:	e00a      	b.n	802384e <ip4_reass+0x2c6>
 8023838:	2400bfa4 	.word	0x2400bfa4
 802383c:	2400bfa0 	.word	0x2400bfa0
 8023840:	0802caac 	.word	0x0802caac
 8023844:	0802cc1c 	.word	0x0802cc1c
 8023848:	0802caf4 	.word	0x0802caf4
    goto nullreturn_ipr;
 802384c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 802384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023850:	2b00      	cmp	r3, #0
 8023852:	d106      	bne.n	8023862 <ip4_reass+0x2da>
 8023854:	4b15      	ldr	r3, [pc, #84]	@ (80238ac <ip4_reass+0x324>)
 8023856:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 802385a:	4915      	ldr	r1, [pc, #84]	@ (80238b0 <ip4_reass+0x328>)
 802385c:	4815      	ldr	r0, [pc, #84]	@ (80238b4 <ip4_reass+0x32c>)
 802385e:	f001 fd01 	bl	8025264 <iprintf>
  if (ipr->p == NULL) {
 8023862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023864:	685b      	ldr	r3, [r3, #4]
 8023866:	2b00      	cmp	r3, #0
 8023868:	d116      	bne.n	8023898 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 802386a:	4b13      	ldr	r3, [pc, #76]	@ (80238b8 <ip4_reass+0x330>)
 802386c:	681b      	ldr	r3, [r3, #0]
 802386e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023870:	429a      	cmp	r2, r3
 8023872:	d006      	beq.n	8023882 <ip4_reass+0x2fa>
 8023874:	4b0d      	ldr	r3, [pc, #52]	@ (80238ac <ip4_reass+0x324>)
 8023876:	f240 22ab 	movw	r2, #683	@ 0x2ab
 802387a:	4910      	ldr	r1, [pc, #64]	@ (80238bc <ip4_reass+0x334>)
 802387c:	480d      	ldr	r0, [pc, #52]	@ (80238b4 <ip4_reass+0x32c>)
 802387e:	f001 fcf1 	bl	8025264 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8023882:	2100      	movs	r1, #0
 8023884:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8023886:	f7ff fce7 	bl	8023258 <ip_reass_dequeue_datagram>
 802388a:	e006      	b.n	802389a <ip4_reass+0x312>
    goto nullreturn;
 802388c:	bf00      	nop
 802388e:	e004      	b.n	802389a <ip4_reass+0x312>
    goto nullreturn;
 8023890:	bf00      	nop
 8023892:	e002      	b.n	802389a <ip4_reass+0x312>
      goto nullreturn;
 8023894:	bf00      	nop
 8023896:	e000      	b.n	802389a <ip4_reass+0x312>
  }

nullreturn:
 8023898:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 802389a:	6878      	ldr	r0, [r7, #4]
 802389c:	f7f6 fd94 	bl	801a3c8 <pbuf_free>
  return NULL;
 80238a0:	2300      	movs	r3, #0
}
 80238a2:	4618      	mov	r0, r3
 80238a4:	3738      	adds	r7, #56	@ 0x38
 80238a6:	46bd      	mov	sp, r7
 80238a8:	bd80      	pop	{r7, pc}
 80238aa:	bf00      	nop
 80238ac:	0802caac 	.word	0x0802caac
 80238b0:	0802cc38 	.word	0x0802cc38
 80238b4:	0802caf4 	.word	0x0802caf4
 80238b8:	2400bfa0 	.word	0x2400bfa0
 80238bc:	0802cc44 	.word	0x0802cc44

080238c0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80238c0:	b580      	push	{r7, lr}
 80238c2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80238c4:	2005      	movs	r0, #5
 80238c6:	f7f5 fe33 	bl	8019530 <memp_malloc>
 80238ca:	4603      	mov	r3, r0
}
 80238cc:	4618      	mov	r0, r3
 80238ce:	bd80      	pop	{r7, pc}

080238d0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80238d0:	b580      	push	{r7, lr}
 80238d2:	b082      	sub	sp, #8
 80238d4:	af00      	add	r7, sp, #0
 80238d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80238d8:	687b      	ldr	r3, [r7, #4]
 80238da:	2b00      	cmp	r3, #0
 80238dc:	d106      	bne.n	80238ec <ip_frag_free_pbuf_custom_ref+0x1c>
 80238de:	4b07      	ldr	r3, [pc, #28]	@ (80238fc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80238e0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80238e4:	4906      	ldr	r1, [pc, #24]	@ (8023900 <ip_frag_free_pbuf_custom_ref+0x30>)
 80238e6:	4807      	ldr	r0, [pc, #28]	@ (8023904 <ip_frag_free_pbuf_custom_ref+0x34>)
 80238e8:	f001 fcbc 	bl	8025264 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80238ec:	6879      	ldr	r1, [r7, #4]
 80238ee:	2005      	movs	r0, #5
 80238f0:	f7f5 fe94 	bl	801961c <memp_free>
}
 80238f4:	bf00      	nop
 80238f6:	3708      	adds	r7, #8
 80238f8:	46bd      	mov	sp, r7
 80238fa:	bd80      	pop	{r7, pc}
 80238fc:	0802caac 	.word	0x0802caac
 8023900:	0802cc64 	.word	0x0802cc64
 8023904:	0802caf4 	.word	0x0802caf4

08023908 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8023908:	b580      	push	{r7, lr}
 802390a:	b084      	sub	sp, #16
 802390c:	af00      	add	r7, sp, #0
 802390e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8023910:	687b      	ldr	r3, [r7, #4]
 8023912:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8023914:	68fb      	ldr	r3, [r7, #12]
 8023916:	2b00      	cmp	r3, #0
 8023918:	d106      	bne.n	8023928 <ipfrag_free_pbuf_custom+0x20>
 802391a:	4b11      	ldr	r3, [pc, #68]	@ (8023960 <ipfrag_free_pbuf_custom+0x58>)
 802391c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8023920:	4910      	ldr	r1, [pc, #64]	@ (8023964 <ipfrag_free_pbuf_custom+0x5c>)
 8023922:	4811      	ldr	r0, [pc, #68]	@ (8023968 <ipfrag_free_pbuf_custom+0x60>)
 8023924:	f001 fc9e 	bl	8025264 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8023928:	68fa      	ldr	r2, [r7, #12]
 802392a:	687b      	ldr	r3, [r7, #4]
 802392c:	429a      	cmp	r2, r3
 802392e:	d006      	beq.n	802393e <ipfrag_free_pbuf_custom+0x36>
 8023930:	4b0b      	ldr	r3, [pc, #44]	@ (8023960 <ipfrag_free_pbuf_custom+0x58>)
 8023932:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8023936:	490d      	ldr	r1, [pc, #52]	@ (802396c <ipfrag_free_pbuf_custom+0x64>)
 8023938:	480b      	ldr	r0, [pc, #44]	@ (8023968 <ipfrag_free_pbuf_custom+0x60>)
 802393a:	f001 fc93 	bl	8025264 <iprintf>
  if (pcr->original != NULL) {
 802393e:	68fb      	ldr	r3, [r7, #12]
 8023940:	695b      	ldr	r3, [r3, #20]
 8023942:	2b00      	cmp	r3, #0
 8023944:	d004      	beq.n	8023950 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8023946:	68fb      	ldr	r3, [r7, #12]
 8023948:	695b      	ldr	r3, [r3, #20]
 802394a:	4618      	mov	r0, r3
 802394c:	f7f6 fd3c 	bl	801a3c8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8023950:	68f8      	ldr	r0, [r7, #12]
 8023952:	f7ff ffbd 	bl	80238d0 <ip_frag_free_pbuf_custom_ref>
}
 8023956:	bf00      	nop
 8023958:	3710      	adds	r7, #16
 802395a:	46bd      	mov	sp, r7
 802395c:	bd80      	pop	{r7, pc}
 802395e:	bf00      	nop
 8023960:	0802caac 	.word	0x0802caac
 8023964:	0802cc70 	.word	0x0802cc70
 8023968:	0802caf4 	.word	0x0802caf4
 802396c:	0802cc7c 	.word	0x0802cc7c

08023970 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8023970:	b580      	push	{r7, lr}
 8023972:	b094      	sub	sp, #80	@ 0x50
 8023974:	af02      	add	r7, sp, #8
 8023976:	60f8      	str	r0, [r7, #12]
 8023978:	60b9      	str	r1, [r7, #8]
 802397a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 802397c:	2300      	movs	r3, #0
 802397e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8023982:	68bb      	ldr	r3, [r7, #8]
 8023984:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8023986:	3b14      	subs	r3, #20
 8023988:	2b00      	cmp	r3, #0
 802398a:	da00      	bge.n	802398e <ip4_frag+0x1e>
 802398c:	3307      	adds	r3, #7
 802398e:	10db      	asrs	r3, r3, #3
 8023990:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8023992:	2314      	movs	r3, #20
 8023994:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8023996:	68fb      	ldr	r3, [r7, #12]
 8023998:	685b      	ldr	r3, [r3, #4]
 802399a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 802399c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802399e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80239a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80239a2:	781b      	ldrb	r3, [r3, #0]
 80239a4:	f003 030f 	and.w	r3, r3, #15
 80239a8:	b2db      	uxtb	r3, r3
 80239aa:	009b      	lsls	r3, r3, #2
 80239ac:	b2db      	uxtb	r3, r3
 80239ae:	2b14      	cmp	r3, #20
 80239b0:	d002      	beq.n	80239b8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80239b2:	f06f 0305 	mvn.w	r3, #5
 80239b6:	e110      	b.n	8023bda <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80239b8:	68fb      	ldr	r3, [r7, #12]
 80239ba:	895b      	ldrh	r3, [r3, #10]
 80239bc:	2b13      	cmp	r3, #19
 80239be:	d809      	bhi.n	80239d4 <ip4_frag+0x64>
 80239c0:	4b88      	ldr	r3, [pc, #544]	@ (8023be4 <ip4_frag+0x274>)
 80239c2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80239c6:	4988      	ldr	r1, [pc, #544]	@ (8023be8 <ip4_frag+0x278>)
 80239c8:	4888      	ldr	r0, [pc, #544]	@ (8023bec <ip4_frag+0x27c>)
 80239ca:	f001 fc4b 	bl	8025264 <iprintf>
 80239ce:	f06f 0305 	mvn.w	r3, #5
 80239d2:	e102      	b.n	8023bda <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80239d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80239d6:	88db      	ldrh	r3, [r3, #6]
 80239d8:	b29b      	uxth	r3, r3
 80239da:	4618      	mov	r0, r3
 80239dc:	f7f5 f818 	bl	8018a10 <lwip_htons>
 80239e0:	4603      	mov	r3, r0
 80239e2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80239e4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80239e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80239ea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80239ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80239f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80239f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80239f6:	68fb      	ldr	r3, [r7, #12]
 80239f8:	891b      	ldrh	r3, [r3, #8]
 80239fa:	3b14      	subs	r3, #20
 80239fc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8023a00:	e0e1      	b.n	8023bc6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8023a02:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8023a04:	00db      	lsls	r3, r3, #3
 8023a06:	b29b      	uxth	r3, r3
 8023a08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8023a0c:	4293      	cmp	r3, r2
 8023a0e:	bf28      	it	cs
 8023a10:	4613      	movcs	r3, r2
 8023a12:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8023a14:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8023a18:	2114      	movs	r1, #20
 8023a1a:	200e      	movs	r0, #14
 8023a1c:	f7f6 f9be 	bl	8019d9c <pbuf_alloc>
 8023a20:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8023a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023a24:	2b00      	cmp	r3, #0
 8023a26:	f000 80d5 	beq.w	8023bd4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8023a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023a2c:	895b      	ldrh	r3, [r3, #10]
 8023a2e:	2b13      	cmp	r3, #19
 8023a30:	d806      	bhi.n	8023a40 <ip4_frag+0xd0>
 8023a32:	4b6c      	ldr	r3, [pc, #432]	@ (8023be4 <ip4_frag+0x274>)
 8023a34:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8023a38:	496d      	ldr	r1, [pc, #436]	@ (8023bf0 <ip4_frag+0x280>)
 8023a3a:	486c      	ldr	r0, [pc, #432]	@ (8023bec <ip4_frag+0x27c>)
 8023a3c:	f001 fc12 	bl	8025264 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8023a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023a42:	685b      	ldr	r3, [r3, #4]
 8023a44:	2214      	movs	r2, #20
 8023a46:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8023a48:	4618      	mov	r0, r3
 8023a4a:	f001 fd98 	bl	802557e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8023a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023a50:	685b      	ldr	r3, [r3, #4]
 8023a52:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8023a54:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8023a56:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8023a5a:	e064      	b.n	8023b26 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8023a5c:	68fb      	ldr	r3, [r7, #12]
 8023a5e:	895a      	ldrh	r2, [r3, #10]
 8023a60:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8023a62:	1ad3      	subs	r3, r2, r3
 8023a64:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8023a66:	68fb      	ldr	r3, [r7, #12]
 8023a68:	895b      	ldrh	r3, [r3, #10]
 8023a6a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8023a6c:	429a      	cmp	r2, r3
 8023a6e:	d906      	bls.n	8023a7e <ip4_frag+0x10e>
 8023a70:	4b5c      	ldr	r3, [pc, #368]	@ (8023be4 <ip4_frag+0x274>)
 8023a72:	f240 322d 	movw	r2, #813	@ 0x32d
 8023a76:	495f      	ldr	r1, [pc, #380]	@ (8023bf4 <ip4_frag+0x284>)
 8023a78:	485c      	ldr	r0, [pc, #368]	@ (8023bec <ip4_frag+0x27c>)
 8023a7a:	f001 fbf3 	bl	8025264 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8023a7e:	8bfa      	ldrh	r2, [r7, #30]
 8023a80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8023a84:	4293      	cmp	r3, r2
 8023a86:	bf28      	it	cs
 8023a88:	4613      	movcs	r3, r2
 8023a8a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8023a8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8023a92:	2b00      	cmp	r3, #0
 8023a94:	d105      	bne.n	8023aa2 <ip4_frag+0x132>
        poff = 0;
 8023a96:	2300      	movs	r3, #0
 8023a98:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8023a9a:	68fb      	ldr	r3, [r7, #12]
 8023a9c:	681b      	ldr	r3, [r3, #0]
 8023a9e:	60fb      	str	r3, [r7, #12]
        continue;
 8023aa0:	e041      	b.n	8023b26 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8023aa2:	f7ff ff0d 	bl	80238c0 <ip_frag_alloc_pbuf_custom_ref>
 8023aa6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8023aa8:	69bb      	ldr	r3, [r7, #24]
 8023aaa:	2b00      	cmp	r3, #0
 8023aac:	d103      	bne.n	8023ab6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8023aae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023ab0:	f7f6 fc8a 	bl	801a3c8 <pbuf_free>
        goto memerr;
 8023ab4:	e08f      	b.n	8023bd6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8023ab6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8023ab8:	68fb      	ldr	r3, [r7, #12]
 8023aba:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8023abc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8023abe:	4413      	add	r3, r2
 8023ac0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8023ac4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8023ac8:	9201      	str	r2, [sp, #4]
 8023aca:	9300      	str	r3, [sp, #0]
 8023acc:	4603      	mov	r3, r0
 8023ace:	2241      	movs	r2, #65	@ 0x41
 8023ad0:	2000      	movs	r0, #0
 8023ad2:	f7f6 fa8d 	bl	8019ff0 <pbuf_alloced_custom>
 8023ad6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8023ad8:	697b      	ldr	r3, [r7, #20]
 8023ada:	2b00      	cmp	r3, #0
 8023adc:	d106      	bne.n	8023aec <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8023ade:	69b8      	ldr	r0, [r7, #24]
 8023ae0:	f7ff fef6 	bl	80238d0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8023ae4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023ae6:	f7f6 fc6f 	bl	801a3c8 <pbuf_free>
        goto memerr;
 8023aea:	e074      	b.n	8023bd6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8023aec:	68f8      	ldr	r0, [r7, #12]
 8023aee:	f7f6 fd11 	bl	801a514 <pbuf_ref>
      pcr->original = p;
 8023af2:	69bb      	ldr	r3, [r7, #24]
 8023af4:	68fa      	ldr	r2, [r7, #12]
 8023af6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8023af8:	69bb      	ldr	r3, [r7, #24]
 8023afa:	4a3f      	ldr	r2, [pc, #252]	@ (8023bf8 <ip4_frag+0x288>)
 8023afc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8023afe:	6979      	ldr	r1, [r7, #20]
 8023b00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023b02:	f7f6 fd2f 	bl	801a564 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8023b06:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8023b0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8023b0e:	1ad3      	subs	r3, r2, r3
 8023b10:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8023b14:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8023b18:	2b00      	cmp	r3, #0
 8023b1a:	d004      	beq.n	8023b26 <ip4_frag+0x1b6>
        poff = 0;
 8023b1c:	2300      	movs	r3, #0
 8023b1e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8023b20:	68fb      	ldr	r3, [r7, #12]
 8023b22:	681b      	ldr	r3, [r3, #0]
 8023b24:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8023b26:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8023b2a:	2b00      	cmp	r3, #0
 8023b2c:	d196      	bne.n	8023a5c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8023b2e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8023b30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8023b34:	4413      	add	r3, r2
 8023b36:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8023b38:	68bb      	ldr	r3, [r7, #8]
 8023b3a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8023b3c:	f1a3 0213 	sub.w	r2, r3, #19
 8023b40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8023b44:	429a      	cmp	r2, r3
 8023b46:	bfcc      	ite	gt
 8023b48:	2301      	movgt	r3, #1
 8023b4a:	2300      	movle	r3, #0
 8023b4c:	b2db      	uxtb	r3, r3
 8023b4e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8023b50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8023b54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023b58:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8023b5a:	6a3b      	ldr	r3, [r7, #32]
 8023b5c:	2b00      	cmp	r3, #0
 8023b5e:	d002      	beq.n	8023b66 <ip4_frag+0x1f6>
 8023b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023b62:	2b00      	cmp	r3, #0
 8023b64:	d003      	beq.n	8023b6e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8023b66:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8023b68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8023b6c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8023b6e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8023b70:	4618      	mov	r0, r3
 8023b72:	f7f4 ff4d 	bl	8018a10 <lwip_htons>
 8023b76:	4603      	mov	r3, r0
 8023b78:	461a      	mov	r2, r3
 8023b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023b7c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8023b7e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8023b80:	3314      	adds	r3, #20
 8023b82:	b29b      	uxth	r3, r3
 8023b84:	4618      	mov	r0, r3
 8023b86:	f7f4 ff43 	bl	8018a10 <lwip_htons>
 8023b8a:	4603      	mov	r3, r0
 8023b8c:	461a      	mov	r2, r3
 8023b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023b90:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8023b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023b94:	2200      	movs	r2, #0
 8023b96:	729a      	strb	r2, [r3, #10]
 8023b98:	2200      	movs	r2, #0
 8023b9a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8023b9c:	68bb      	ldr	r3, [r7, #8]
 8023b9e:	695b      	ldr	r3, [r3, #20]
 8023ba0:	687a      	ldr	r2, [r7, #4]
 8023ba2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8023ba4:	68b8      	ldr	r0, [r7, #8]
 8023ba6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8023ba8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023baa:	f7f6 fc0d 	bl	801a3c8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8023bae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8023bb2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8023bb4:	1ad3      	subs	r3, r2, r3
 8023bb6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8023bba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8023bbe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8023bc0:	4413      	add	r3, r2
 8023bc2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8023bc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8023bca:	2b00      	cmp	r3, #0
 8023bcc:	f47f af19 	bne.w	8023a02 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8023bd0:	2300      	movs	r3, #0
 8023bd2:	e002      	b.n	8023bda <ip4_frag+0x26a>
      goto memerr;
 8023bd4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8023bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8023bda:	4618      	mov	r0, r3
 8023bdc:	3748      	adds	r7, #72	@ 0x48
 8023bde:	46bd      	mov	sp, r7
 8023be0:	bd80      	pop	{r7, pc}
 8023be2:	bf00      	nop
 8023be4:	0802caac 	.word	0x0802caac
 8023be8:	0802cc88 	.word	0x0802cc88
 8023bec:	0802caf4 	.word	0x0802caf4
 8023bf0:	0802cca4 	.word	0x0802cca4
 8023bf4:	0802ccc4 	.word	0x0802ccc4
 8023bf8:	08023909 	.word	0x08023909

08023bfc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8023bfc:	b580      	push	{r7, lr}
 8023bfe:	b086      	sub	sp, #24
 8023c00:	af00      	add	r7, sp, #0
 8023c02:	6078      	str	r0, [r7, #4]
 8023c04:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8023c06:	230e      	movs	r3, #14
 8023c08:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8023c0a:	687b      	ldr	r3, [r7, #4]
 8023c0c:	895b      	ldrh	r3, [r3, #10]
 8023c0e:	2b0e      	cmp	r3, #14
 8023c10:	d96e      	bls.n	8023cf0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8023c12:	687b      	ldr	r3, [r7, #4]
 8023c14:	7bdb      	ldrb	r3, [r3, #15]
 8023c16:	2b00      	cmp	r3, #0
 8023c18:	d106      	bne.n	8023c28 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8023c1a:	683b      	ldr	r3, [r7, #0]
 8023c1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8023c20:	3301      	adds	r3, #1
 8023c22:	b2da      	uxtb	r2, r3
 8023c24:	687b      	ldr	r3, [r7, #4]
 8023c26:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8023c28:	687b      	ldr	r3, [r7, #4]
 8023c2a:	685b      	ldr	r3, [r3, #4]
 8023c2c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8023c2e:	693b      	ldr	r3, [r7, #16]
 8023c30:	7b1a      	ldrb	r2, [r3, #12]
 8023c32:	7b5b      	ldrb	r3, [r3, #13]
 8023c34:	021b      	lsls	r3, r3, #8
 8023c36:	4313      	orrs	r3, r2
 8023c38:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8023c3a:	693b      	ldr	r3, [r7, #16]
 8023c3c:	781b      	ldrb	r3, [r3, #0]
 8023c3e:	f003 0301 	and.w	r3, r3, #1
 8023c42:	2b00      	cmp	r3, #0
 8023c44:	d023      	beq.n	8023c8e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8023c46:	693b      	ldr	r3, [r7, #16]
 8023c48:	781b      	ldrb	r3, [r3, #0]
 8023c4a:	2b01      	cmp	r3, #1
 8023c4c:	d10f      	bne.n	8023c6e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8023c4e:	693b      	ldr	r3, [r7, #16]
 8023c50:	785b      	ldrb	r3, [r3, #1]
 8023c52:	2b00      	cmp	r3, #0
 8023c54:	d11b      	bne.n	8023c8e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8023c56:	693b      	ldr	r3, [r7, #16]
 8023c58:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8023c5a:	2b5e      	cmp	r3, #94	@ 0x5e
 8023c5c:	d117      	bne.n	8023c8e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8023c5e:	687b      	ldr	r3, [r7, #4]
 8023c60:	7b5b      	ldrb	r3, [r3, #13]
 8023c62:	f043 0310 	orr.w	r3, r3, #16
 8023c66:	b2da      	uxtb	r2, r3
 8023c68:	687b      	ldr	r3, [r7, #4]
 8023c6a:	735a      	strb	r2, [r3, #13]
 8023c6c:	e00f      	b.n	8023c8e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8023c6e:	693b      	ldr	r3, [r7, #16]
 8023c70:	2206      	movs	r2, #6
 8023c72:	4928      	ldr	r1, [pc, #160]	@ (8023d14 <ethernet_input+0x118>)
 8023c74:	4618      	mov	r0, r3
 8023c76:	f001 fbb7 	bl	80253e8 <memcmp>
 8023c7a:	4603      	mov	r3, r0
 8023c7c:	2b00      	cmp	r3, #0
 8023c7e:	d106      	bne.n	8023c8e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8023c80:	687b      	ldr	r3, [r7, #4]
 8023c82:	7b5b      	ldrb	r3, [r3, #13]
 8023c84:	f043 0308 	orr.w	r3, r3, #8
 8023c88:	b2da      	uxtb	r2, r3
 8023c8a:	687b      	ldr	r3, [r7, #4]
 8023c8c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8023c8e:	89fb      	ldrh	r3, [r7, #14]
 8023c90:	2b08      	cmp	r3, #8
 8023c92:	d003      	beq.n	8023c9c <ethernet_input+0xa0>
 8023c94:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8023c98:	d014      	beq.n	8023cc4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8023c9a:	e032      	b.n	8023d02 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8023c9c:	683b      	ldr	r3, [r7, #0]
 8023c9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8023ca2:	f003 0308 	and.w	r3, r3, #8
 8023ca6:	2b00      	cmp	r3, #0
 8023ca8:	d024      	beq.n	8023cf4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8023caa:	8afb      	ldrh	r3, [r7, #22]
 8023cac:	4619      	mov	r1, r3
 8023cae:	6878      	ldr	r0, [r7, #4]
 8023cb0:	f7f6 fad2 	bl	801a258 <pbuf_remove_header>
 8023cb4:	4603      	mov	r3, r0
 8023cb6:	2b00      	cmp	r3, #0
 8023cb8:	d11e      	bne.n	8023cf8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8023cba:	6839      	ldr	r1, [r7, #0]
 8023cbc:	6878      	ldr	r0, [r7, #4]
 8023cbe:	f7fe fde3 	bl	8022888 <ip4_input>
      break;
 8023cc2:	e013      	b.n	8023cec <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8023cc4:	683b      	ldr	r3, [r7, #0]
 8023cc6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8023cca:	f003 0308 	and.w	r3, r3, #8
 8023cce:	2b00      	cmp	r3, #0
 8023cd0:	d014      	beq.n	8023cfc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8023cd2:	8afb      	ldrh	r3, [r7, #22]
 8023cd4:	4619      	mov	r1, r3
 8023cd6:	6878      	ldr	r0, [r7, #4]
 8023cd8:	f7f6 fabe 	bl	801a258 <pbuf_remove_header>
 8023cdc:	4603      	mov	r3, r0
 8023cde:	2b00      	cmp	r3, #0
 8023ce0:	d10e      	bne.n	8023d00 <ethernet_input+0x104>
        etharp_input(p, netif);
 8023ce2:	6839      	ldr	r1, [r7, #0]
 8023ce4:	6878      	ldr	r0, [r7, #4]
 8023ce6:	f7fd ff5d 	bl	8021ba4 <etharp_input>
      break;
 8023cea:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8023cec:	2300      	movs	r3, #0
 8023cee:	e00c      	b.n	8023d0a <ethernet_input+0x10e>
    goto free_and_return;
 8023cf0:	bf00      	nop
 8023cf2:	e006      	b.n	8023d02 <ethernet_input+0x106>
        goto free_and_return;
 8023cf4:	bf00      	nop
 8023cf6:	e004      	b.n	8023d02 <ethernet_input+0x106>
        goto free_and_return;
 8023cf8:	bf00      	nop
 8023cfa:	e002      	b.n	8023d02 <ethernet_input+0x106>
        goto free_and_return;
 8023cfc:	bf00      	nop
 8023cfe:	e000      	b.n	8023d02 <ethernet_input+0x106>
        goto free_and_return;
 8023d00:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8023d02:	6878      	ldr	r0, [r7, #4]
 8023d04:	f7f6 fb60 	bl	801a3c8 <pbuf_free>
  return ERR_OK;
 8023d08:	2300      	movs	r3, #0
}
 8023d0a:	4618      	mov	r0, r3
 8023d0c:	3718      	adds	r7, #24
 8023d0e:	46bd      	mov	sp, r7
 8023d10:	bd80      	pop	{r7, pc}
 8023d12:	bf00      	nop
 8023d14:	0802cf1c 	.word	0x0802cf1c

08023d18 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8023d18:	b580      	push	{r7, lr}
 8023d1a:	b086      	sub	sp, #24
 8023d1c:	af00      	add	r7, sp, #0
 8023d1e:	60f8      	str	r0, [r7, #12]
 8023d20:	60b9      	str	r1, [r7, #8]
 8023d22:	607a      	str	r2, [r7, #4]
 8023d24:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8023d26:	8c3b      	ldrh	r3, [r7, #32]
 8023d28:	4618      	mov	r0, r3
 8023d2a:	f7f4 fe71 	bl	8018a10 <lwip_htons>
 8023d2e:	4603      	mov	r3, r0
 8023d30:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8023d32:	210e      	movs	r1, #14
 8023d34:	68b8      	ldr	r0, [r7, #8]
 8023d36:	f7f6 fa7f 	bl	801a238 <pbuf_add_header>
 8023d3a:	4603      	mov	r3, r0
 8023d3c:	2b00      	cmp	r3, #0
 8023d3e:	d125      	bne.n	8023d8c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8023d40:	68bb      	ldr	r3, [r7, #8]
 8023d42:	685b      	ldr	r3, [r3, #4]
 8023d44:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8023d46:	693b      	ldr	r3, [r7, #16]
 8023d48:	8afa      	ldrh	r2, [r7, #22]
 8023d4a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8023d4c:	693b      	ldr	r3, [r7, #16]
 8023d4e:	2206      	movs	r2, #6
 8023d50:	6839      	ldr	r1, [r7, #0]
 8023d52:	4618      	mov	r0, r3
 8023d54:	f001 fc13 	bl	802557e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8023d58:	693b      	ldr	r3, [r7, #16]
 8023d5a:	3306      	adds	r3, #6
 8023d5c:	2206      	movs	r2, #6
 8023d5e:	6879      	ldr	r1, [r7, #4]
 8023d60:	4618      	mov	r0, r3
 8023d62:	f001 fc0c 	bl	802557e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8023d66:	68fb      	ldr	r3, [r7, #12]
 8023d68:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8023d6c:	2b06      	cmp	r3, #6
 8023d6e:	d006      	beq.n	8023d7e <ethernet_output+0x66>
 8023d70:	4b0a      	ldr	r3, [pc, #40]	@ (8023d9c <ethernet_output+0x84>)
 8023d72:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8023d76:	490a      	ldr	r1, [pc, #40]	@ (8023da0 <ethernet_output+0x88>)
 8023d78:	480a      	ldr	r0, [pc, #40]	@ (8023da4 <ethernet_output+0x8c>)
 8023d7a:	f001 fa73 	bl	8025264 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8023d7e:	68fb      	ldr	r3, [r7, #12]
 8023d80:	699b      	ldr	r3, [r3, #24]
 8023d82:	68b9      	ldr	r1, [r7, #8]
 8023d84:	68f8      	ldr	r0, [r7, #12]
 8023d86:	4798      	blx	r3
 8023d88:	4603      	mov	r3, r0
 8023d8a:	e002      	b.n	8023d92 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8023d8c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8023d8e:	f06f 0301 	mvn.w	r3, #1
}
 8023d92:	4618      	mov	r0, r3
 8023d94:	3718      	adds	r7, #24
 8023d96:	46bd      	mov	sp, r7
 8023d98:	bd80      	pop	{r7, pc}
 8023d9a:	bf00      	nop
 8023d9c:	0802ccd4 	.word	0x0802ccd4
 8023da0:	0802cd0c 	.word	0x0802cd0c
 8023da4:	0802cd40 	.word	0x0802cd40

08023da8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8023da8:	b580      	push	{r7, lr}
 8023daa:	b086      	sub	sp, #24
 8023dac:	af00      	add	r7, sp, #0
 8023dae:	6078      	str	r0, [r7, #4]
 8023db0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8023db2:	683b      	ldr	r3, [r7, #0]
 8023db4:	60bb      	str	r3, [r7, #8]
 8023db6:	2304      	movs	r3, #4
 8023db8:	60fb      	str	r3, [r7, #12]
 8023dba:	2300      	movs	r3, #0
 8023dbc:	613b      	str	r3, [r7, #16]
 8023dbe:	2300      	movs	r3, #0
 8023dc0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8023dc2:	f107 0308 	add.w	r3, r7, #8
 8023dc6:	2100      	movs	r1, #0
 8023dc8:	4618      	mov	r0, r3
 8023dca:	f7ee fd26 	bl	801281a <osMessageCreate>
 8023dce:	4602      	mov	r2, r0
 8023dd0:	687b      	ldr	r3, [r7, #4]
 8023dd2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8023dd4:	687b      	ldr	r3, [r7, #4]
 8023dd6:	681b      	ldr	r3, [r3, #0]
 8023dd8:	2b00      	cmp	r3, #0
 8023dda:	d102      	bne.n	8023de2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8023ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8023de0:	e000      	b.n	8023de4 <sys_mbox_new+0x3c>

  return ERR_OK;
 8023de2:	2300      	movs	r3, #0
}
 8023de4:	4618      	mov	r0, r3
 8023de6:	3718      	adds	r7, #24
 8023de8:	46bd      	mov	sp, r7
 8023dea:	bd80      	pop	{r7, pc}

08023dec <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8023dec:	b580      	push	{r7, lr}
 8023dee:	b082      	sub	sp, #8
 8023df0:	af00      	add	r7, sp, #0
 8023df2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8023df4:	687b      	ldr	r3, [r7, #4]
 8023df6:	681b      	ldr	r3, [r3, #0]
 8023df8:	4618      	mov	r0, r3
 8023dfa:	f7ee fdeb 	bl	80129d4 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8023dfe:	687b      	ldr	r3, [r7, #4]
 8023e00:	681b      	ldr	r3, [r3, #0]
 8023e02:	4618      	mov	r0, r3
 8023e04:	f7ee fdfc 	bl	8012a00 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8023e08:	bf00      	nop
 8023e0a:	3708      	adds	r7, #8
 8023e0c:	46bd      	mov	sp, r7
 8023e0e:	bd80      	pop	{r7, pc}

08023e10 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8023e10:	b580      	push	{r7, lr}
 8023e12:	b084      	sub	sp, #16
 8023e14:	af00      	add	r7, sp, #0
 8023e16:	6078      	str	r0, [r7, #4]
 8023e18:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8023e1a:	687b      	ldr	r3, [r7, #4]
 8023e1c:	681b      	ldr	r3, [r3, #0]
 8023e1e:	6839      	ldr	r1, [r7, #0]
 8023e20:	2200      	movs	r2, #0
 8023e22:	4618      	mov	r0, r3
 8023e24:	f7ee fd22 	bl	801286c <osMessagePut>
 8023e28:	4603      	mov	r3, r0
 8023e2a:	2b00      	cmp	r3, #0
 8023e2c:	d102      	bne.n	8023e34 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8023e2e:	2300      	movs	r3, #0
 8023e30:	73fb      	strb	r3, [r7, #15]
 8023e32:	e001      	b.n	8023e38 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8023e34:	23ff      	movs	r3, #255	@ 0xff
 8023e36:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8023e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8023e3c:	4618      	mov	r0, r3
 8023e3e:	3710      	adds	r7, #16
 8023e40:	46bd      	mov	sp, r7
 8023e42:	bd80      	pop	{r7, pc}

08023e44 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8023e44:	b580      	push	{r7, lr}
 8023e46:	b08c      	sub	sp, #48	@ 0x30
 8023e48:	af00      	add	r7, sp, #0
 8023e4a:	61f8      	str	r0, [r7, #28]
 8023e4c:	61b9      	str	r1, [r7, #24]
 8023e4e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8023e50:	f7ee fb0e 	bl	8012470 <osKernelSysTick>
 8023e54:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8023e56:	697b      	ldr	r3, [r7, #20]
 8023e58:	2b00      	cmp	r3, #0
 8023e5a:	d017      	beq.n	8023e8c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8023e5c:	69fb      	ldr	r3, [r7, #28]
 8023e5e:	6819      	ldr	r1, [r3, #0]
 8023e60:	f107 0320 	add.w	r3, r7, #32
 8023e64:	697a      	ldr	r2, [r7, #20]
 8023e66:	4618      	mov	r0, r3
 8023e68:	f7ee fd40 	bl	80128ec <osMessageGet>

    if(event.status == osEventMessage)
 8023e6c:	6a3b      	ldr	r3, [r7, #32]
 8023e6e:	2b10      	cmp	r3, #16
 8023e70:	d109      	bne.n	8023e86 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8023e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023e74:	461a      	mov	r2, r3
 8023e76:	69bb      	ldr	r3, [r7, #24]
 8023e78:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8023e7a:	f7ee faf9 	bl	8012470 <osKernelSysTick>
 8023e7e:	4602      	mov	r2, r0
 8023e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023e82:	1ad3      	subs	r3, r2, r3
 8023e84:	e019      	b.n	8023eba <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8023e86:	f04f 33ff 	mov.w	r3, #4294967295
 8023e8a:	e016      	b.n	8023eba <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8023e8c:	69fb      	ldr	r3, [r7, #28]
 8023e8e:	6819      	ldr	r1, [r3, #0]
 8023e90:	463b      	mov	r3, r7
 8023e92:	f04f 32ff 	mov.w	r2, #4294967295
 8023e96:	4618      	mov	r0, r3
 8023e98:	f7ee fd28 	bl	80128ec <osMessageGet>
 8023e9c:	f107 0320 	add.w	r3, r7, #32
 8023ea0:	463a      	mov	r2, r7
 8023ea2:	ca07      	ldmia	r2, {r0, r1, r2}
 8023ea4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8023ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023eaa:	461a      	mov	r2, r3
 8023eac:	69bb      	ldr	r3, [r7, #24]
 8023eae:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8023eb0:	f7ee fade 	bl	8012470 <osKernelSysTick>
 8023eb4:	4602      	mov	r2, r0
 8023eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023eb8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8023eba:	4618      	mov	r0, r3
 8023ebc:	3730      	adds	r7, #48	@ 0x30
 8023ebe:	46bd      	mov	sp, r7
 8023ec0:	bd80      	pop	{r7, pc}

08023ec2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8023ec2:	b580      	push	{r7, lr}
 8023ec4:	b086      	sub	sp, #24
 8023ec6:	af00      	add	r7, sp, #0
 8023ec8:	6078      	str	r0, [r7, #4]
 8023eca:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8023ecc:	687b      	ldr	r3, [r7, #4]
 8023ece:	6819      	ldr	r1, [r3, #0]
 8023ed0:	f107 030c 	add.w	r3, r7, #12
 8023ed4:	2200      	movs	r2, #0
 8023ed6:	4618      	mov	r0, r3
 8023ed8:	f7ee fd08 	bl	80128ec <osMessageGet>

  if(event.status == osEventMessage)
 8023edc:	68fb      	ldr	r3, [r7, #12]
 8023ede:	2b10      	cmp	r3, #16
 8023ee0:	d105      	bne.n	8023eee <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8023ee2:	693b      	ldr	r3, [r7, #16]
 8023ee4:	461a      	mov	r2, r3
 8023ee6:	683b      	ldr	r3, [r7, #0]
 8023ee8:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8023eea:	2300      	movs	r3, #0
 8023eec:	e001      	b.n	8023ef2 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8023eee:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8023ef2:	4618      	mov	r0, r3
 8023ef4:	3718      	adds	r7, #24
 8023ef6:	46bd      	mov	sp, r7
 8023ef8:	bd80      	pop	{r7, pc}

08023efa <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8023efa:	b480      	push	{r7}
 8023efc:	b083      	sub	sp, #12
 8023efe:	af00      	add	r7, sp, #0
 8023f00:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8023f02:	687b      	ldr	r3, [r7, #4]
 8023f04:	681b      	ldr	r3, [r3, #0]
 8023f06:	2b00      	cmp	r3, #0
 8023f08:	d101      	bne.n	8023f0e <sys_mbox_valid+0x14>
    return 0;
 8023f0a:	2300      	movs	r3, #0
 8023f0c:	e000      	b.n	8023f10 <sys_mbox_valid+0x16>
  else
    return 1;
 8023f0e:	2301      	movs	r3, #1
}
 8023f10:	4618      	mov	r0, r3
 8023f12:	370c      	adds	r7, #12
 8023f14:	46bd      	mov	sp, r7
 8023f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f1a:	4770      	bx	lr

08023f1c <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8023f1c:	b480      	push	{r7}
 8023f1e:	b083      	sub	sp, #12
 8023f20:	af00      	add	r7, sp, #0
 8023f22:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8023f24:	687b      	ldr	r3, [r7, #4]
 8023f26:	2200      	movs	r2, #0
 8023f28:	601a      	str	r2, [r3, #0]
}
 8023f2a:	bf00      	nop
 8023f2c:	370c      	adds	r7, #12
 8023f2e:	46bd      	mov	sp, r7
 8023f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f34:	4770      	bx	lr

08023f36 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8023f36:	b580      	push	{r7, lr}
 8023f38:	b084      	sub	sp, #16
 8023f3a:	af00      	add	r7, sp, #0
 8023f3c:	6078      	str	r0, [r7, #4]
 8023f3e:	460b      	mov	r3, r1
 8023f40:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8023f42:	2300      	movs	r3, #0
 8023f44:	60bb      	str	r3, [r7, #8]
 8023f46:	2300      	movs	r3, #0
 8023f48:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8023f4a:	f107 0308 	add.w	r3, r7, #8
 8023f4e:	2101      	movs	r1, #1
 8023f50:	4618      	mov	r0, r3
 8023f52:	f7ee fb99 	bl	8012688 <osSemaphoreCreate>
 8023f56:	4602      	mov	r2, r0
 8023f58:	687b      	ldr	r3, [r7, #4]
 8023f5a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8023f5c:	687b      	ldr	r3, [r7, #4]
 8023f5e:	681b      	ldr	r3, [r3, #0]
 8023f60:	2b00      	cmp	r3, #0
 8023f62:	d102      	bne.n	8023f6a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8023f64:	f04f 33ff 	mov.w	r3, #4294967295
 8023f68:	e009      	b.n	8023f7e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8023f6a:	78fb      	ldrb	r3, [r7, #3]
 8023f6c:	2b00      	cmp	r3, #0
 8023f6e:	d105      	bne.n	8023f7c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8023f70:	687b      	ldr	r3, [r7, #4]
 8023f72:	681b      	ldr	r3, [r3, #0]
 8023f74:	2100      	movs	r1, #0
 8023f76:	4618      	mov	r0, r3
 8023f78:	f7ee fbb8 	bl	80126ec <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8023f7c:	2300      	movs	r3, #0
}
 8023f7e:	4618      	mov	r0, r3
 8023f80:	3710      	adds	r7, #16
 8023f82:	46bd      	mov	sp, r7
 8023f84:	bd80      	pop	{r7, pc}

08023f86 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8023f86:	b580      	push	{r7, lr}
 8023f88:	b084      	sub	sp, #16
 8023f8a:	af00      	add	r7, sp, #0
 8023f8c:	6078      	str	r0, [r7, #4]
 8023f8e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8023f90:	f7ee fa6e 	bl	8012470 <osKernelSysTick>
 8023f94:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8023f96:	683b      	ldr	r3, [r7, #0]
 8023f98:	2b00      	cmp	r3, #0
 8023f9a:	d011      	beq.n	8023fc0 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8023f9c:	687b      	ldr	r3, [r7, #4]
 8023f9e:	681b      	ldr	r3, [r3, #0]
 8023fa0:	6839      	ldr	r1, [r7, #0]
 8023fa2:	4618      	mov	r0, r3
 8023fa4:	f7ee fba2 	bl	80126ec <osSemaphoreWait>
 8023fa8:	4603      	mov	r3, r0
 8023faa:	2b00      	cmp	r3, #0
 8023fac:	d105      	bne.n	8023fba <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8023fae:	f7ee fa5f 	bl	8012470 <osKernelSysTick>
 8023fb2:	4602      	mov	r2, r0
 8023fb4:	68fb      	ldr	r3, [r7, #12]
 8023fb6:	1ad3      	subs	r3, r2, r3
 8023fb8:	e012      	b.n	8023fe0 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8023fba:	f04f 33ff 	mov.w	r3, #4294967295
 8023fbe:	e00f      	b.n	8023fe0 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8023fc0:	bf00      	nop
 8023fc2:	687b      	ldr	r3, [r7, #4]
 8023fc4:	681b      	ldr	r3, [r3, #0]
 8023fc6:	f04f 31ff 	mov.w	r1, #4294967295
 8023fca:	4618      	mov	r0, r3
 8023fcc:	f7ee fb8e 	bl	80126ec <osSemaphoreWait>
 8023fd0:	4603      	mov	r3, r0
 8023fd2:	2b00      	cmp	r3, #0
 8023fd4:	d1f5      	bne.n	8023fc2 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8023fd6:	f7ee fa4b 	bl	8012470 <osKernelSysTick>
 8023fda:	4602      	mov	r2, r0
 8023fdc:	68fb      	ldr	r3, [r7, #12]
 8023fde:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8023fe0:	4618      	mov	r0, r3
 8023fe2:	3710      	adds	r7, #16
 8023fe4:	46bd      	mov	sp, r7
 8023fe6:	bd80      	pop	{r7, pc}

08023fe8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8023fe8:	b580      	push	{r7, lr}
 8023fea:	b082      	sub	sp, #8
 8023fec:	af00      	add	r7, sp, #0
 8023fee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8023ff0:	687b      	ldr	r3, [r7, #4]
 8023ff2:	681b      	ldr	r3, [r3, #0]
 8023ff4:	4618      	mov	r0, r3
 8023ff6:	f7ee fbc7 	bl	8012788 <osSemaphoreRelease>
}
 8023ffa:	bf00      	nop
 8023ffc:	3708      	adds	r7, #8
 8023ffe:	46bd      	mov	sp, r7
 8024000:	bd80      	pop	{r7, pc}

08024002 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8024002:	b580      	push	{r7, lr}
 8024004:	b082      	sub	sp, #8
 8024006:	af00      	add	r7, sp, #0
 8024008:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 802400a:	687b      	ldr	r3, [r7, #4]
 802400c:	681b      	ldr	r3, [r3, #0]
 802400e:	4618      	mov	r0, r3
 8024010:	f7ee fbf0 	bl	80127f4 <osSemaphoreDelete>
}
 8024014:	bf00      	nop
 8024016:	3708      	adds	r7, #8
 8024018:	46bd      	mov	sp, r7
 802401a:	bd80      	pop	{r7, pc}

0802401c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 802401c:	b480      	push	{r7}
 802401e:	b083      	sub	sp, #12
 8024020:	af00      	add	r7, sp, #0
 8024022:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8024024:	687b      	ldr	r3, [r7, #4]
 8024026:	681b      	ldr	r3, [r3, #0]
 8024028:	2b00      	cmp	r3, #0
 802402a:	d101      	bne.n	8024030 <sys_sem_valid+0x14>
    return 0;
 802402c:	2300      	movs	r3, #0
 802402e:	e000      	b.n	8024032 <sys_sem_valid+0x16>
  else
    return 1;
 8024030:	2301      	movs	r3, #1
}
 8024032:	4618      	mov	r0, r3
 8024034:	370c      	adds	r7, #12
 8024036:	46bd      	mov	sp, r7
 8024038:	f85d 7b04 	ldr.w	r7, [sp], #4
 802403c:	4770      	bx	lr

0802403e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 802403e:	b480      	push	{r7}
 8024040:	b083      	sub	sp, #12
 8024042:	af00      	add	r7, sp, #0
 8024044:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8024046:	687b      	ldr	r3, [r7, #4]
 8024048:	2200      	movs	r2, #0
 802404a:	601a      	str	r2, [r3, #0]
}
 802404c:	bf00      	nop
 802404e:	370c      	adds	r7, #12
 8024050:	46bd      	mov	sp, r7
 8024052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024056:	4770      	bx	lr

08024058 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8024058:	b580      	push	{r7, lr}
 802405a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 802405c:	4803      	ldr	r0, [pc, #12]	@ (802406c <sys_init+0x14>)
 802405e:	f7ee fa77 	bl	8012550 <osMutexCreate>
 8024062:	4603      	mov	r3, r0
 8024064:	4a02      	ldr	r2, [pc, #8]	@ (8024070 <sys_init+0x18>)
 8024066:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8024068:	bf00      	nop
 802406a:	bd80      	pop	{r7, pc}
 802406c:	0802cf2c 	.word	0x0802cf2c
 8024070:	2400bfac 	.word	0x2400bfac

08024074 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8024074:	b580      	push	{r7, lr}
 8024076:	b084      	sub	sp, #16
 8024078:	af00      	add	r7, sp, #0
 802407a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 802407c:	2300      	movs	r3, #0
 802407e:	60bb      	str	r3, [r7, #8]
 8024080:	2300      	movs	r3, #0
 8024082:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8024084:	f107 0308 	add.w	r3, r7, #8
 8024088:	4618      	mov	r0, r3
 802408a:	f7ee fa61 	bl	8012550 <osMutexCreate>
 802408e:	4602      	mov	r2, r0
 8024090:	687b      	ldr	r3, [r7, #4]
 8024092:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8024094:	687b      	ldr	r3, [r7, #4]
 8024096:	681b      	ldr	r3, [r3, #0]
 8024098:	2b00      	cmp	r3, #0
 802409a:	d102      	bne.n	80240a2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 802409c:	f04f 33ff 	mov.w	r3, #4294967295
 80240a0:	e000      	b.n	80240a4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80240a2:	2300      	movs	r3, #0
}
 80240a4:	4618      	mov	r0, r3
 80240a6:	3710      	adds	r7, #16
 80240a8:	46bd      	mov	sp, r7
 80240aa:	bd80      	pop	{r7, pc}

080240ac <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80240ac:	b580      	push	{r7, lr}
 80240ae:	b082      	sub	sp, #8
 80240b0:	af00      	add	r7, sp, #0
 80240b2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80240b4:	687b      	ldr	r3, [r7, #4]
 80240b6:	681b      	ldr	r3, [r3, #0]
 80240b8:	f04f 31ff 	mov.w	r1, #4294967295
 80240bc:	4618      	mov	r0, r3
 80240be:	f7ee fa5f 	bl	8012580 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80240c2:	bf00      	nop
 80240c4:	3708      	adds	r7, #8
 80240c6:	46bd      	mov	sp, r7
 80240c8:	bd80      	pop	{r7, pc}

080240ca <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80240ca:	b580      	push	{r7, lr}
 80240cc:	b082      	sub	sp, #8
 80240ce:	af00      	add	r7, sp, #0
 80240d0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80240d2:	687b      	ldr	r3, [r7, #4]
 80240d4:	681b      	ldr	r3, [r3, #0]
 80240d6:	4618      	mov	r0, r3
 80240d8:	f7ee faa0 	bl	801261c <osMutexRelease>
}
 80240dc:	bf00      	nop
 80240de:	3708      	adds	r7, #8
 80240e0:	46bd      	mov	sp, r7
 80240e2:	bd80      	pop	{r7, pc}

080240e4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80240e4:	b580      	push	{r7, lr}
 80240e6:	b08c      	sub	sp, #48	@ 0x30
 80240e8:	af00      	add	r7, sp, #0
 80240ea:	60f8      	str	r0, [r7, #12]
 80240ec:	60b9      	str	r1, [r7, #8]
 80240ee:	607a      	str	r2, [r7, #4]
 80240f0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80240f2:	f107 0314 	add.w	r3, r7, #20
 80240f6:	2200      	movs	r2, #0
 80240f8:	601a      	str	r2, [r3, #0]
 80240fa:	605a      	str	r2, [r3, #4]
 80240fc:	609a      	str	r2, [r3, #8]
 80240fe:	60da      	str	r2, [r3, #12]
 8024100:	611a      	str	r2, [r3, #16]
 8024102:	615a      	str	r2, [r3, #20]
 8024104:	619a      	str	r2, [r3, #24]
 8024106:	68fb      	ldr	r3, [r7, #12]
 8024108:	617b      	str	r3, [r7, #20]
 802410a:	68bb      	ldr	r3, [r7, #8]
 802410c:	61bb      	str	r3, [r7, #24]
 802410e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024110:	b21b      	sxth	r3, r3
 8024112:	83bb      	strh	r3, [r7, #28]
 8024114:	683b      	ldr	r3, [r7, #0]
 8024116:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8024118:	f107 0314 	add.w	r3, r7, #20
 802411c:	6879      	ldr	r1, [r7, #4]
 802411e:	4618      	mov	r0, r3
 8024120:	f7ee f9b6 	bl	8012490 <osThreadCreate>
 8024124:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8024126:	4618      	mov	r0, r3
 8024128:	3730      	adds	r7, #48	@ 0x30
 802412a:	46bd      	mov	sp, r7
 802412c:	bd80      	pop	{r7, pc}
	...

08024130 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8024130:	b580      	push	{r7, lr}
 8024132:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8024134:	4b04      	ldr	r3, [pc, #16]	@ (8024148 <sys_arch_protect+0x18>)
 8024136:	681b      	ldr	r3, [r3, #0]
 8024138:	f04f 31ff 	mov.w	r1, #4294967295
 802413c:	4618      	mov	r0, r3
 802413e:	f7ee fa1f 	bl	8012580 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8024142:	2301      	movs	r3, #1
}
 8024144:	4618      	mov	r0, r3
 8024146:	bd80      	pop	{r7, pc}
 8024148:	2400bfac 	.word	0x2400bfac

0802414c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 802414c:	b580      	push	{r7, lr}
 802414e:	b082      	sub	sp, #8
 8024150:	af00      	add	r7, sp, #0
 8024152:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8024154:	4b04      	ldr	r3, [pc, #16]	@ (8024168 <sys_arch_unprotect+0x1c>)
 8024156:	681b      	ldr	r3, [r3, #0]
 8024158:	4618      	mov	r0, r3
 802415a:	f7ee fa5f 	bl	801261c <osMutexRelease>
}
 802415e:	bf00      	nop
 8024160:	3708      	adds	r7, #8
 8024162:	46bd      	mov	sp, r7
 8024164:	bd80      	pop	{r7, pc}
 8024166:	bf00      	nop
 8024168:	2400bfac 	.word	0x2400bfac

0802416c <malloc>:
 802416c:	4b02      	ldr	r3, [pc, #8]	@ (8024178 <malloc+0xc>)
 802416e:	4601      	mov	r1, r0
 8024170:	6818      	ldr	r0, [r3, #0]
 8024172:	f000 b82d 	b.w	80241d0 <_malloc_r>
 8024176:	bf00      	nop
 8024178:	2400021c 	.word	0x2400021c

0802417c <free>:
 802417c:	4b02      	ldr	r3, [pc, #8]	@ (8024188 <free+0xc>)
 802417e:	4601      	mov	r1, r0
 8024180:	6818      	ldr	r0, [r3, #0]
 8024182:	f002 b80f 	b.w	80261a4 <_free_r>
 8024186:	bf00      	nop
 8024188:	2400021c 	.word	0x2400021c

0802418c <sbrk_aligned>:
 802418c:	b570      	push	{r4, r5, r6, lr}
 802418e:	4e0f      	ldr	r6, [pc, #60]	@ (80241cc <sbrk_aligned+0x40>)
 8024190:	460c      	mov	r4, r1
 8024192:	6831      	ldr	r1, [r6, #0]
 8024194:	4605      	mov	r5, r0
 8024196:	b911      	cbnz	r1, 802419e <sbrk_aligned+0x12>
 8024198:	f001 f9a2 	bl	80254e0 <_sbrk_r>
 802419c:	6030      	str	r0, [r6, #0]
 802419e:	4621      	mov	r1, r4
 80241a0:	4628      	mov	r0, r5
 80241a2:	f001 f99d 	bl	80254e0 <_sbrk_r>
 80241a6:	1c43      	adds	r3, r0, #1
 80241a8:	d103      	bne.n	80241b2 <sbrk_aligned+0x26>
 80241aa:	f04f 34ff 	mov.w	r4, #4294967295
 80241ae:	4620      	mov	r0, r4
 80241b0:	bd70      	pop	{r4, r5, r6, pc}
 80241b2:	1cc4      	adds	r4, r0, #3
 80241b4:	f024 0403 	bic.w	r4, r4, #3
 80241b8:	42a0      	cmp	r0, r4
 80241ba:	d0f8      	beq.n	80241ae <sbrk_aligned+0x22>
 80241bc:	1a21      	subs	r1, r4, r0
 80241be:	4628      	mov	r0, r5
 80241c0:	f001 f98e 	bl	80254e0 <_sbrk_r>
 80241c4:	3001      	adds	r0, #1
 80241c6:	d1f2      	bne.n	80241ae <sbrk_aligned+0x22>
 80241c8:	e7ef      	b.n	80241aa <sbrk_aligned+0x1e>
 80241ca:	bf00      	nop
 80241cc:	2400bfb0 	.word	0x2400bfb0

080241d0 <_malloc_r>:
 80241d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80241d4:	1ccd      	adds	r5, r1, #3
 80241d6:	f025 0503 	bic.w	r5, r5, #3
 80241da:	3508      	adds	r5, #8
 80241dc:	2d0c      	cmp	r5, #12
 80241de:	bf38      	it	cc
 80241e0:	250c      	movcc	r5, #12
 80241e2:	2d00      	cmp	r5, #0
 80241e4:	4606      	mov	r6, r0
 80241e6:	db01      	blt.n	80241ec <_malloc_r+0x1c>
 80241e8:	42a9      	cmp	r1, r5
 80241ea:	d904      	bls.n	80241f6 <_malloc_r+0x26>
 80241ec:	230c      	movs	r3, #12
 80241ee:	6033      	str	r3, [r6, #0]
 80241f0:	2000      	movs	r0, #0
 80241f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80241f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80242cc <_malloc_r+0xfc>
 80241fa:	f000 f869 	bl	80242d0 <__malloc_lock>
 80241fe:	f8d8 3000 	ldr.w	r3, [r8]
 8024202:	461c      	mov	r4, r3
 8024204:	bb44      	cbnz	r4, 8024258 <_malloc_r+0x88>
 8024206:	4629      	mov	r1, r5
 8024208:	4630      	mov	r0, r6
 802420a:	f7ff ffbf 	bl	802418c <sbrk_aligned>
 802420e:	1c43      	adds	r3, r0, #1
 8024210:	4604      	mov	r4, r0
 8024212:	d158      	bne.n	80242c6 <_malloc_r+0xf6>
 8024214:	f8d8 4000 	ldr.w	r4, [r8]
 8024218:	4627      	mov	r7, r4
 802421a:	2f00      	cmp	r7, #0
 802421c:	d143      	bne.n	80242a6 <_malloc_r+0xd6>
 802421e:	2c00      	cmp	r4, #0
 8024220:	d04b      	beq.n	80242ba <_malloc_r+0xea>
 8024222:	6823      	ldr	r3, [r4, #0]
 8024224:	4639      	mov	r1, r7
 8024226:	4630      	mov	r0, r6
 8024228:	eb04 0903 	add.w	r9, r4, r3
 802422c:	f001 f958 	bl	80254e0 <_sbrk_r>
 8024230:	4581      	cmp	r9, r0
 8024232:	d142      	bne.n	80242ba <_malloc_r+0xea>
 8024234:	6821      	ldr	r1, [r4, #0]
 8024236:	1a6d      	subs	r5, r5, r1
 8024238:	4629      	mov	r1, r5
 802423a:	4630      	mov	r0, r6
 802423c:	f7ff ffa6 	bl	802418c <sbrk_aligned>
 8024240:	3001      	adds	r0, #1
 8024242:	d03a      	beq.n	80242ba <_malloc_r+0xea>
 8024244:	6823      	ldr	r3, [r4, #0]
 8024246:	442b      	add	r3, r5
 8024248:	6023      	str	r3, [r4, #0]
 802424a:	f8d8 3000 	ldr.w	r3, [r8]
 802424e:	685a      	ldr	r2, [r3, #4]
 8024250:	bb62      	cbnz	r2, 80242ac <_malloc_r+0xdc>
 8024252:	f8c8 7000 	str.w	r7, [r8]
 8024256:	e00f      	b.n	8024278 <_malloc_r+0xa8>
 8024258:	6822      	ldr	r2, [r4, #0]
 802425a:	1b52      	subs	r2, r2, r5
 802425c:	d420      	bmi.n	80242a0 <_malloc_r+0xd0>
 802425e:	2a0b      	cmp	r2, #11
 8024260:	d917      	bls.n	8024292 <_malloc_r+0xc2>
 8024262:	1961      	adds	r1, r4, r5
 8024264:	42a3      	cmp	r3, r4
 8024266:	6025      	str	r5, [r4, #0]
 8024268:	bf18      	it	ne
 802426a:	6059      	strne	r1, [r3, #4]
 802426c:	6863      	ldr	r3, [r4, #4]
 802426e:	bf08      	it	eq
 8024270:	f8c8 1000 	streq.w	r1, [r8]
 8024274:	5162      	str	r2, [r4, r5]
 8024276:	604b      	str	r3, [r1, #4]
 8024278:	4630      	mov	r0, r6
 802427a:	f000 f82f 	bl	80242dc <__malloc_unlock>
 802427e:	f104 000b 	add.w	r0, r4, #11
 8024282:	1d23      	adds	r3, r4, #4
 8024284:	f020 0007 	bic.w	r0, r0, #7
 8024288:	1ac2      	subs	r2, r0, r3
 802428a:	bf1c      	itt	ne
 802428c:	1a1b      	subne	r3, r3, r0
 802428e:	50a3      	strne	r3, [r4, r2]
 8024290:	e7af      	b.n	80241f2 <_malloc_r+0x22>
 8024292:	6862      	ldr	r2, [r4, #4]
 8024294:	42a3      	cmp	r3, r4
 8024296:	bf0c      	ite	eq
 8024298:	f8c8 2000 	streq.w	r2, [r8]
 802429c:	605a      	strne	r2, [r3, #4]
 802429e:	e7eb      	b.n	8024278 <_malloc_r+0xa8>
 80242a0:	4623      	mov	r3, r4
 80242a2:	6864      	ldr	r4, [r4, #4]
 80242a4:	e7ae      	b.n	8024204 <_malloc_r+0x34>
 80242a6:	463c      	mov	r4, r7
 80242a8:	687f      	ldr	r7, [r7, #4]
 80242aa:	e7b6      	b.n	802421a <_malloc_r+0x4a>
 80242ac:	461a      	mov	r2, r3
 80242ae:	685b      	ldr	r3, [r3, #4]
 80242b0:	42a3      	cmp	r3, r4
 80242b2:	d1fb      	bne.n	80242ac <_malloc_r+0xdc>
 80242b4:	2300      	movs	r3, #0
 80242b6:	6053      	str	r3, [r2, #4]
 80242b8:	e7de      	b.n	8024278 <_malloc_r+0xa8>
 80242ba:	230c      	movs	r3, #12
 80242bc:	6033      	str	r3, [r6, #0]
 80242be:	4630      	mov	r0, r6
 80242c0:	f000 f80c 	bl	80242dc <__malloc_unlock>
 80242c4:	e794      	b.n	80241f0 <_malloc_r+0x20>
 80242c6:	6005      	str	r5, [r0, #0]
 80242c8:	e7d6      	b.n	8024278 <_malloc_r+0xa8>
 80242ca:	bf00      	nop
 80242cc:	2400bfb4 	.word	0x2400bfb4

080242d0 <__malloc_lock>:
 80242d0:	4801      	ldr	r0, [pc, #4]	@ (80242d8 <__malloc_lock+0x8>)
 80242d2:	f001 b952 	b.w	802557a <__retarget_lock_acquire_recursive>
 80242d6:	bf00      	nop
 80242d8:	2400c0f4 	.word	0x2400c0f4

080242dc <__malloc_unlock>:
 80242dc:	4801      	ldr	r0, [pc, #4]	@ (80242e4 <__malloc_unlock+0x8>)
 80242de:	f001 b94d 	b.w	802557c <__retarget_lock_release_recursive>
 80242e2:	bf00      	nop
 80242e4:	2400c0f4 	.word	0x2400c0f4

080242e8 <rand>:
 80242e8:	4b16      	ldr	r3, [pc, #88]	@ (8024344 <rand+0x5c>)
 80242ea:	b510      	push	{r4, lr}
 80242ec:	681c      	ldr	r4, [r3, #0]
 80242ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80242f0:	b9b3      	cbnz	r3, 8024320 <rand+0x38>
 80242f2:	2018      	movs	r0, #24
 80242f4:	f7ff ff3a 	bl	802416c <malloc>
 80242f8:	4602      	mov	r2, r0
 80242fa:	6320      	str	r0, [r4, #48]	@ 0x30
 80242fc:	b920      	cbnz	r0, 8024308 <rand+0x20>
 80242fe:	4b12      	ldr	r3, [pc, #72]	@ (8024348 <rand+0x60>)
 8024300:	4812      	ldr	r0, [pc, #72]	@ (802434c <rand+0x64>)
 8024302:	2152      	movs	r1, #82	@ 0x52
 8024304:	f001 f950 	bl	80255a8 <__assert_func>
 8024308:	4911      	ldr	r1, [pc, #68]	@ (8024350 <rand+0x68>)
 802430a:	4b12      	ldr	r3, [pc, #72]	@ (8024354 <rand+0x6c>)
 802430c:	e9c0 1300 	strd	r1, r3, [r0]
 8024310:	4b11      	ldr	r3, [pc, #68]	@ (8024358 <rand+0x70>)
 8024312:	6083      	str	r3, [r0, #8]
 8024314:	230b      	movs	r3, #11
 8024316:	8183      	strh	r3, [r0, #12]
 8024318:	2100      	movs	r1, #0
 802431a:	2001      	movs	r0, #1
 802431c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8024320:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8024322:	480e      	ldr	r0, [pc, #56]	@ (802435c <rand+0x74>)
 8024324:	690b      	ldr	r3, [r1, #16]
 8024326:	694c      	ldr	r4, [r1, #20]
 8024328:	4a0d      	ldr	r2, [pc, #52]	@ (8024360 <rand+0x78>)
 802432a:	4358      	muls	r0, r3
 802432c:	fb02 0004 	mla	r0, r2, r4, r0
 8024330:	fba3 3202 	umull	r3, r2, r3, r2
 8024334:	3301      	adds	r3, #1
 8024336:	eb40 0002 	adc.w	r0, r0, r2
 802433a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 802433e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8024342:	bd10      	pop	{r4, pc}
 8024344:	2400021c 	.word	0x2400021c
 8024348:	0802cf34 	.word	0x0802cf34
 802434c:	0802cf4b 	.word	0x0802cf4b
 8024350:	abcd330e 	.word	0xabcd330e
 8024354:	e66d1234 	.word	0xe66d1234
 8024358:	0005deec 	.word	0x0005deec
 802435c:	5851f42d 	.word	0x5851f42d
 8024360:	4c957f2d 	.word	0x4c957f2d

08024364 <_strtol_l.constprop.0>:
 8024364:	2b24      	cmp	r3, #36	@ 0x24
 8024366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802436a:	4686      	mov	lr, r0
 802436c:	4690      	mov	r8, r2
 802436e:	d801      	bhi.n	8024374 <_strtol_l.constprop.0+0x10>
 8024370:	2b01      	cmp	r3, #1
 8024372:	d106      	bne.n	8024382 <_strtol_l.constprop.0+0x1e>
 8024374:	f001 f8d6 	bl	8025524 <__errno>
 8024378:	2316      	movs	r3, #22
 802437a:	6003      	str	r3, [r0, #0]
 802437c:	2000      	movs	r0, #0
 802437e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024382:	4834      	ldr	r0, [pc, #208]	@ (8024454 <_strtol_l.constprop.0+0xf0>)
 8024384:	460d      	mov	r5, r1
 8024386:	462a      	mov	r2, r5
 8024388:	f815 4b01 	ldrb.w	r4, [r5], #1
 802438c:	5d06      	ldrb	r6, [r0, r4]
 802438e:	f016 0608 	ands.w	r6, r6, #8
 8024392:	d1f8      	bne.n	8024386 <_strtol_l.constprop.0+0x22>
 8024394:	2c2d      	cmp	r4, #45	@ 0x2d
 8024396:	d12d      	bne.n	80243f4 <_strtol_l.constprop.0+0x90>
 8024398:	782c      	ldrb	r4, [r5, #0]
 802439a:	2601      	movs	r6, #1
 802439c:	1c95      	adds	r5, r2, #2
 802439e:	f033 0210 	bics.w	r2, r3, #16
 80243a2:	d109      	bne.n	80243b8 <_strtol_l.constprop.0+0x54>
 80243a4:	2c30      	cmp	r4, #48	@ 0x30
 80243a6:	d12a      	bne.n	80243fe <_strtol_l.constprop.0+0x9a>
 80243a8:	782a      	ldrb	r2, [r5, #0]
 80243aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80243ae:	2a58      	cmp	r2, #88	@ 0x58
 80243b0:	d125      	bne.n	80243fe <_strtol_l.constprop.0+0x9a>
 80243b2:	786c      	ldrb	r4, [r5, #1]
 80243b4:	2310      	movs	r3, #16
 80243b6:	3502      	adds	r5, #2
 80243b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80243bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80243c0:	2200      	movs	r2, #0
 80243c2:	fbbc f9f3 	udiv	r9, ip, r3
 80243c6:	4610      	mov	r0, r2
 80243c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80243cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80243d0:	2f09      	cmp	r7, #9
 80243d2:	d81b      	bhi.n	802440c <_strtol_l.constprop.0+0xa8>
 80243d4:	463c      	mov	r4, r7
 80243d6:	42a3      	cmp	r3, r4
 80243d8:	dd27      	ble.n	802442a <_strtol_l.constprop.0+0xc6>
 80243da:	1c57      	adds	r7, r2, #1
 80243dc:	d007      	beq.n	80243ee <_strtol_l.constprop.0+0x8a>
 80243de:	4581      	cmp	r9, r0
 80243e0:	d320      	bcc.n	8024424 <_strtol_l.constprop.0+0xc0>
 80243e2:	d101      	bne.n	80243e8 <_strtol_l.constprop.0+0x84>
 80243e4:	45a2      	cmp	sl, r4
 80243e6:	db1d      	blt.n	8024424 <_strtol_l.constprop.0+0xc0>
 80243e8:	fb00 4003 	mla	r0, r0, r3, r4
 80243ec:	2201      	movs	r2, #1
 80243ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80243f2:	e7eb      	b.n	80243cc <_strtol_l.constprop.0+0x68>
 80243f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80243f6:	bf04      	itt	eq
 80243f8:	782c      	ldrbeq	r4, [r5, #0]
 80243fa:	1c95      	addeq	r5, r2, #2
 80243fc:	e7cf      	b.n	802439e <_strtol_l.constprop.0+0x3a>
 80243fe:	2b00      	cmp	r3, #0
 8024400:	d1da      	bne.n	80243b8 <_strtol_l.constprop.0+0x54>
 8024402:	2c30      	cmp	r4, #48	@ 0x30
 8024404:	bf0c      	ite	eq
 8024406:	2308      	moveq	r3, #8
 8024408:	230a      	movne	r3, #10
 802440a:	e7d5      	b.n	80243b8 <_strtol_l.constprop.0+0x54>
 802440c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8024410:	2f19      	cmp	r7, #25
 8024412:	d801      	bhi.n	8024418 <_strtol_l.constprop.0+0xb4>
 8024414:	3c37      	subs	r4, #55	@ 0x37
 8024416:	e7de      	b.n	80243d6 <_strtol_l.constprop.0+0x72>
 8024418:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802441c:	2f19      	cmp	r7, #25
 802441e:	d804      	bhi.n	802442a <_strtol_l.constprop.0+0xc6>
 8024420:	3c57      	subs	r4, #87	@ 0x57
 8024422:	e7d8      	b.n	80243d6 <_strtol_l.constprop.0+0x72>
 8024424:	f04f 32ff 	mov.w	r2, #4294967295
 8024428:	e7e1      	b.n	80243ee <_strtol_l.constprop.0+0x8a>
 802442a:	1c53      	adds	r3, r2, #1
 802442c:	d108      	bne.n	8024440 <_strtol_l.constprop.0+0xdc>
 802442e:	2322      	movs	r3, #34	@ 0x22
 8024430:	f8ce 3000 	str.w	r3, [lr]
 8024434:	4660      	mov	r0, ip
 8024436:	f1b8 0f00 	cmp.w	r8, #0
 802443a:	d0a0      	beq.n	802437e <_strtol_l.constprop.0+0x1a>
 802443c:	1e69      	subs	r1, r5, #1
 802443e:	e006      	b.n	802444e <_strtol_l.constprop.0+0xea>
 8024440:	b106      	cbz	r6, 8024444 <_strtol_l.constprop.0+0xe0>
 8024442:	4240      	negs	r0, r0
 8024444:	f1b8 0f00 	cmp.w	r8, #0
 8024448:	d099      	beq.n	802437e <_strtol_l.constprop.0+0x1a>
 802444a:	2a00      	cmp	r2, #0
 802444c:	d1f6      	bne.n	802443c <_strtol_l.constprop.0+0xd8>
 802444e:	f8c8 1000 	str.w	r1, [r8]
 8024452:	e794      	b.n	802437e <_strtol_l.constprop.0+0x1a>
 8024454:	0802cfa4 	.word	0x0802cfa4

08024458 <_strtol_r>:
 8024458:	f7ff bf84 	b.w	8024364 <_strtol_l.constprop.0>

0802445c <__cvt>:
 802445c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802445e:	ed2d 8b02 	vpush	{d8}
 8024462:	eeb0 8b40 	vmov.f64	d8, d0
 8024466:	b085      	sub	sp, #20
 8024468:	4617      	mov	r7, r2
 802446a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802446c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802446e:	ee18 2a90 	vmov	r2, s17
 8024472:	f025 0520 	bic.w	r5, r5, #32
 8024476:	2a00      	cmp	r2, #0
 8024478:	bfb6      	itet	lt
 802447a:	222d      	movlt	r2, #45	@ 0x2d
 802447c:	2200      	movge	r2, #0
 802447e:	eeb1 8b40 	vneglt.f64	d8, d0
 8024482:	2d46      	cmp	r5, #70	@ 0x46
 8024484:	460c      	mov	r4, r1
 8024486:	701a      	strb	r2, [r3, #0]
 8024488:	d004      	beq.n	8024494 <__cvt+0x38>
 802448a:	2d45      	cmp	r5, #69	@ 0x45
 802448c:	d100      	bne.n	8024490 <__cvt+0x34>
 802448e:	3401      	adds	r4, #1
 8024490:	2102      	movs	r1, #2
 8024492:	e000      	b.n	8024496 <__cvt+0x3a>
 8024494:	2103      	movs	r1, #3
 8024496:	ab03      	add	r3, sp, #12
 8024498:	9301      	str	r3, [sp, #4]
 802449a:	ab02      	add	r3, sp, #8
 802449c:	9300      	str	r3, [sp, #0]
 802449e:	4622      	mov	r2, r4
 80244a0:	4633      	mov	r3, r6
 80244a2:	eeb0 0b48 	vmov.f64	d0, d8
 80244a6:	f001 f927 	bl	80256f8 <_dtoa_r>
 80244aa:	2d47      	cmp	r5, #71	@ 0x47
 80244ac:	d114      	bne.n	80244d8 <__cvt+0x7c>
 80244ae:	07fb      	lsls	r3, r7, #31
 80244b0:	d50a      	bpl.n	80244c8 <__cvt+0x6c>
 80244b2:	1902      	adds	r2, r0, r4
 80244b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80244b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80244bc:	bf08      	it	eq
 80244be:	9203      	streq	r2, [sp, #12]
 80244c0:	2130      	movs	r1, #48	@ 0x30
 80244c2:	9b03      	ldr	r3, [sp, #12]
 80244c4:	4293      	cmp	r3, r2
 80244c6:	d319      	bcc.n	80244fc <__cvt+0xa0>
 80244c8:	9b03      	ldr	r3, [sp, #12]
 80244ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80244cc:	1a1b      	subs	r3, r3, r0
 80244ce:	6013      	str	r3, [r2, #0]
 80244d0:	b005      	add	sp, #20
 80244d2:	ecbd 8b02 	vpop	{d8}
 80244d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80244d8:	2d46      	cmp	r5, #70	@ 0x46
 80244da:	eb00 0204 	add.w	r2, r0, r4
 80244de:	d1e9      	bne.n	80244b4 <__cvt+0x58>
 80244e0:	7803      	ldrb	r3, [r0, #0]
 80244e2:	2b30      	cmp	r3, #48	@ 0x30
 80244e4:	d107      	bne.n	80244f6 <__cvt+0x9a>
 80244e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80244ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80244ee:	bf1c      	itt	ne
 80244f0:	f1c4 0401 	rsbne	r4, r4, #1
 80244f4:	6034      	strne	r4, [r6, #0]
 80244f6:	6833      	ldr	r3, [r6, #0]
 80244f8:	441a      	add	r2, r3
 80244fa:	e7db      	b.n	80244b4 <__cvt+0x58>
 80244fc:	1c5c      	adds	r4, r3, #1
 80244fe:	9403      	str	r4, [sp, #12]
 8024500:	7019      	strb	r1, [r3, #0]
 8024502:	e7de      	b.n	80244c2 <__cvt+0x66>

08024504 <__exponent>:
 8024504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024506:	2900      	cmp	r1, #0
 8024508:	bfba      	itte	lt
 802450a:	4249      	neglt	r1, r1
 802450c:	232d      	movlt	r3, #45	@ 0x2d
 802450e:	232b      	movge	r3, #43	@ 0x2b
 8024510:	2909      	cmp	r1, #9
 8024512:	7002      	strb	r2, [r0, #0]
 8024514:	7043      	strb	r3, [r0, #1]
 8024516:	dd29      	ble.n	802456c <__exponent+0x68>
 8024518:	f10d 0307 	add.w	r3, sp, #7
 802451c:	461d      	mov	r5, r3
 802451e:	270a      	movs	r7, #10
 8024520:	461a      	mov	r2, r3
 8024522:	fbb1 f6f7 	udiv	r6, r1, r7
 8024526:	fb07 1416 	mls	r4, r7, r6, r1
 802452a:	3430      	adds	r4, #48	@ 0x30
 802452c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8024530:	460c      	mov	r4, r1
 8024532:	2c63      	cmp	r4, #99	@ 0x63
 8024534:	f103 33ff 	add.w	r3, r3, #4294967295
 8024538:	4631      	mov	r1, r6
 802453a:	dcf1      	bgt.n	8024520 <__exponent+0x1c>
 802453c:	3130      	adds	r1, #48	@ 0x30
 802453e:	1e94      	subs	r4, r2, #2
 8024540:	f803 1c01 	strb.w	r1, [r3, #-1]
 8024544:	1c41      	adds	r1, r0, #1
 8024546:	4623      	mov	r3, r4
 8024548:	42ab      	cmp	r3, r5
 802454a:	d30a      	bcc.n	8024562 <__exponent+0x5e>
 802454c:	f10d 0309 	add.w	r3, sp, #9
 8024550:	1a9b      	subs	r3, r3, r2
 8024552:	42ac      	cmp	r4, r5
 8024554:	bf88      	it	hi
 8024556:	2300      	movhi	r3, #0
 8024558:	3302      	adds	r3, #2
 802455a:	4403      	add	r3, r0
 802455c:	1a18      	subs	r0, r3, r0
 802455e:	b003      	add	sp, #12
 8024560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024562:	f813 6b01 	ldrb.w	r6, [r3], #1
 8024566:	f801 6f01 	strb.w	r6, [r1, #1]!
 802456a:	e7ed      	b.n	8024548 <__exponent+0x44>
 802456c:	2330      	movs	r3, #48	@ 0x30
 802456e:	3130      	adds	r1, #48	@ 0x30
 8024570:	7083      	strb	r3, [r0, #2]
 8024572:	70c1      	strb	r1, [r0, #3]
 8024574:	1d03      	adds	r3, r0, #4
 8024576:	e7f1      	b.n	802455c <__exponent+0x58>

08024578 <_printf_float>:
 8024578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802457c:	b08d      	sub	sp, #52	@ 0x34
 802457e:	460c      	mov	r4, r1
 8024580:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8024584:	4616      	mov	r6, r2
 8024586:	461f      	mov	r7, r3
 8024588:	4605      	mov	r5, r0
 802458a:	f000 ff71 	bl	8025470 <_localeconv_r>
 802458e:	f8d0 b000 	ldr.w	fp, [r0]
 8024592:	4658      	mov	r0, fp
 8024594:	f7db fef4 	bl	8000380 <strlen>
 8024598:	2300      	movs	r3, #0
 802459a:	930a      	str	r3, [sp, #40]	@ 0x28
 802459c:	f8d8 3000 	ldr.w	r3, [r8]
 80245a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80245a4:	6822      	ldr	r2, [r4, #0]
 80245a6:	9005      	str	r0, [sp, #20]
 80245a8:	3307      	adds	r3, #7
 80245aa:	f023 0307 	bic.w	r3, r3, #7
 80245ae:	f103 0108 	add.w	r1, r3, #8
 80245b2:	f8c8 1000 	str.w	r1, [r8]
 80245b6:	ed93 0b00 	vldr	d0, [r3]
 80245ba:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8024818 <_printf_float+0x2a0>
 80245be:	eeb0 7bc0 	vabs.f64	d7, d0
 80245c2:	eeb4 7b46 	vcmp.f64	d7, d6
 80245c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80245ca:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80245ce:	dd24      	ble.n	802461a <_printf_float+0xa2>
 80245d0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80245d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80245d8:	d502      	bpl.n	80245e0 <_printf_float+0x68>
 80245da:	232d      	movs	r3, #45	@ 0x2d
 80245dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80245e0:	498f      	ldr	r1, [pc, #572]	@ (8024820 <_printf_float+0x2a8>)
 80245e2:	4b90      	ldr	r3, [pc, #576]	@ (8024824 <_printf_float+0x2ac>)
 80245e4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80245e8:	bf94      	ite	ls
 80245ea:	4688      	movls	r8, r1
 80245ec:	4698      	movhi	r8, r3
 80245ee:	f022 0204 	bic.w	r2, r2, #4
 80245f2:	2303      	movs	r3, #3
 80245f4:	6123      	str	r3, [r4, #16]
 80245f6:	6022      	str	r2, [r4, #0]
 80245f8:	f04f 0a00 	mov.w	sl, #0
 80245fc:	9700      	str	r7, [sp, #0]
 80245fe:	4633      	mov	r3, r6
 8024600:	aa0b      	add	r2, sp, #44	@ 0x2c
 8024602:	4621      	mov	r1, r4
 8024604:	4628      	mov	r0, r5
 8024606:	f000 f9d1 	bl	80249ac <_printf_common>
 802460a:	3001      	adds	r0, #1
 802460c:	f040 8089 	bne.w	8024722 <_printf_float+0x1aa>
 8024610:	f04f 30ff 	mov.w	r0, #4294967295
 8024614:	b00d      	add	sp, #52	@ 0x34
 8024616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802461a:	eeb4 0b40 	vcmp.f64	d0, d0
 802461e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024622:	d709      	bvc.n	8024638 <_printf_float+0xc0>
 8024624:	ee10 3a90 	vmov	r3, s1
 8024628:	2b00      	cmp	r3, #0
 802462a:	bfbc      	itt	lt
 802462c:	232d      	movlt	r3, #45	@ 0x2d
 802462e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8024632:	497d      	ldr	r1, [pc, #500]	@ (8024828 <_printf_float+0x2b0>)
 8024634:	4b7d      	ldr	r3, [pc, #500]	@ (802482c <_printf_float+0x2b4>)
 8024636:	e7d5      	b.n	80245e4 <_printf_float+0x6c>
 8024638:	6863      	ldr	r3, [r4, #4]
 802463a:	1c59      	adds	r1, r3, #1
 802463c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8024640:	d139      	bne.n	80246b6 <_printf_float+0x13e>
 8024642:	2306      	movs	r3, #6
 8024644:	6063      	str	r3, [r4, #4]
 8024646:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 802464a:	2300      	movs	r3, #0
 802464c:	6022      	str	r2, [r4, #0]
 802464e:	9303      	str	r3, [sp, #12]
 8024650:	ab0a      	add	r3, sp, #40	@ 0x28
 8024652:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8024656:	ab09      	add	r3, sp, #36	@ 0x24
 8024658:	9300      	str	r3, [sp, #0]
 802465a:	6861      	ldr	r1, [r4, #4]
 802465c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8024660:	4628      	mov	r0, r5
 8024662:	f7ff fefb 	bl	802445c <__cvt>
 8024666:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802466a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802466c:	4680      	mov	r8, r0
 802466e:	d129      	bne.n	80246c4 <_printf_float+0x14c>
 8024670:	1cc8      	adds	r0, r1, #3
 8024672:	db02      	blt.n	802467a <_printf_float+0x102>
 8024674:	6863      	ldr	r3, [r4, #4]
 8024676:	4299      	cmp	r1, r3
 8024678:	dd41      	ble.n	80246fe <_printf_float+0x186>
 802467a:	f1a9 0902 	sub.w	r9, r9, #2
 802467e:	fa5f f989 	uxtb.w	r9, r9
 8024682:	3901      	subs	r1, #1
 8024684:	464a      	mov	r2, r9
 8024686:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 802468a:	9109      	str	r1, [sp, #36]	@ 0x24
 802468c:	f7ff ff3a 	bl	8024504 <__exponent>
 8024690:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024692:	1813      	adds	r3, r2, r0
 8024694:	2a01      	cmp	r2, #1
 8024696:	4682      	mov	sl, r0
 8024698:	6123      	str	r3, [r4, #16]
 802469a:	dc02      	bgt.n	80246a2 <_printf_float+0x12a>
 802469c:	6822      	ldr	r2, [r4, #0]
 802469e:	07d2      	lsls	r2, r2, #31
 80246a0:	d501      	bpl.n	80246a6 <_printf_float+0x12e>
 80246a2:	3301      	adds	r3, #1
 80246a4:	6123      	str	r3, [r4, #16]
 80246a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80246aa:	2b00      	cmp	r3, #0
 80246ac:	d0a6      	beq.n	80245fc <_printf_float+0x84>
 80246ae:	232d      	movs	r3, #45	@ 0x2d
 80246b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80246b4:	e7a2      	b.n	80245fc <_printf_float+0x84>
 80246b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80246ba:	d1c4      	bne.n	8024646 <_printf_float+0xce>
 80246bc:	2b00      	cmp	r3, #0
 80246be:	d1c2      	bne.n	8024646 <_printf_float+0xce>
 80246c0:	2301      	movs	r3, #1
 80246c2:	e7bf      	b.n	8024644 <_printf_float+0xcc>
 80246c4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80246c8:	d9db      	bls.n	8024682 <_printf_float+0x10a>
 80246ca:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80246ce:	d118      	bne.n	8024702 <_printf_float+0x18a>
 80246d0:	2900      	cmp	r1, #0
 80246d2:	6863      	ldr	r3, [r4, #4]
 80246d4:	dd0b      	ble.n	80246ee <_printf_float+0x176>
 80246d6:	6121      	str	r1, [r4, #16]
 80246d8:	b913      	cbnz	r3, 80246e0 <_printf_float+0x168>
 80246da:	6822      	ldr	r2, [r4, #0]
 80246dc:	07d0      	lsls	r0, r2, #31
 80246de:	d502      	bpl.n	80246e6 <_printf_float+0x16e>
 80246e0:	3301      	adds	r3, #1
 80246e2:	440b      	add	r3, r1
 80246e4:	6123      	str	r3, [r4, #16]
 80246e6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80246e8:	f04f 0a00 	mov.w	sl, #0
 80246ec:	e7db      	b.n	80246a6 <_printf_float+0x12e>
 80246ee:	b913      	cbnz	r3, 80246f6 <_printf_float+0x17e>
 80246f0:	6822      	ldr	r2, [r4, #0]
 80246f2:	07d2      	lsls	r2, r2, #31
 80246f4:	d501      	bpl.n	80246fa <_printf_float+0x182>
 80246f6:	3302      	adds	r3, #2
 80246f8:	e7f4      	b.n	80246e4 <_printf_float+0x16c>
 80246fa:	2301      	movs	r3, #1
 80246fc:	e7f2      	b.n	80246e4 <_printf_float+0x16c>
 80246fe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8024702:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024704:	4299      	cmp	r1, r3
 8024706:	db05      	blt.n	8024714 <_printf_float+0x19c>
 8024708:	6823      	ldr	r3, [r4, #0]
 802470a:	6121      	str	r1, [r4, #16]
 802470c:	07d8      	lsls	r0, r3, #31
 802470e:	d5ea      	bpl.n	80246e6 <_printf_float+0x16e>
 8024710:	1c4b      	adds	r3, r1, #1
 8024712:	e7e7      	b.n	80246e4 <_printf_float+0x16c>
 8024714:	2900      	cmp	r1, #0
 8024716:	bfd4      	ite	le
 8024718:	f1c1 0202 	rsble	r2, r1, #2
 802471c:	2201      	movgt	r2, #1
 802471e:	4413      	add	r3, r2
 8024720:	e7e0      	b.n	80246e4 <_printf_float+0x16c>
 8024722:	6823      	ldr	r3, [r4, #0]
 8024724:	055a      	lsls	r2, r3, #21
 8024726:	d407      	bmi.n	8024738 <_printf_float+0x1c0>
 8024728:	6923      	ldr	r3, [r4, #16]
 802472a:	4642      	mov	r2, r8
 802472c:	4631      	mov	r1, r6
 802472e:	4628      	mov	r0, r5
 8024730:	47b8      	blx	r7
 8024732:	3001      	adds	r0, #1
 8024734:	d12a      	bne.n	802478c <_printf_float+0x214>
 8024736:	e76b      	b.n	8024610 <_printf_float+0x98>
 8024738:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 802473c:	f240 80e0 	bls.w	8024900 <_printf_float+0x388>
 8024740:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8024744:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8024748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802474c:	d133      	bne.n	80247b6 <_printf_float+0x23e>
 802474e:	4a38      	ldr	r2, [pc, #224]	@ (8024830 <_printf_float+0x2b8>)
 8024750:	2301      	movs	r3, #1
 8024752:	4631      	mov	r1, r6
 8024754:	4628      	mov	r0, r5
 8024756:	47b8      	blx	r7
 8024758:	3001      	adds	r0, #1
 802475a:	f43f af59 	beq.w	8024610 <_printf_float+0x98>
 802475e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8024762:	4543      	cmp	r3, r8
 8024764:	db02      	blt.n	802476c <_printf_float+0x1f4>
 8024766:	6823      	ldr	r3, [r4, #0]
 8024768:	07d8      	lsls	r0, r3, #31
 802476a:	d50f      	bpl.n	802478c <_printf_float+0x214>
 802476c:	9b05      	ldr	r3, [sp, #20]
 802476e:	465a      	mov	r2, fp
 8024770:	4631      	mov	r1, r6
 8024772:	4628      	mov	r0, r5
 8024774:	47b8      	blx	r7
 8024776:	3001      	adds	r0, #1
 8024778:	f43f af4a 	beq.w	8024610 <_printf_float+0x98>
 802477c:	f04f 0900 	mov.w	r9, #0
 8024780:	f108 38ff 	add.w	r8, r8, #4294967295
 8024784:	f104 0a1a 	add.w	sl, r4, #26
 8024788:	45c8      	cmp	r8, r9
 802478a:	dc09      	bgt.n	80247a0 <_printf_float+0x228>
 802478c:	6823      	ldr	r3, [r4, #0]
 802478e:	079b      	lsls	r3, r3, #30
 8024790:	f100 8107 	bmi.w	80249a2 <_printf_float+0x42a>
 8024794:	68e0      	ldr	r0, [r4, #12]
 8024796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024798:	4298      	cmp	r0, r3
 802479a:	bfb8      	it	lt
 802479c:	4618      	movlt	r0, r3
 802479e:	e739      	b.n	8024614 <_printf_float+0x9c>
 80247a0:	2301      	movs	r3, #1
 80247a2:	4652      	mov	r2, sl
 80247a4:	4631      	mov	r1, r6
 80247a6:	4628      	mov	r0, r5
 80247a8:	47b8      	blx	r7
 80247aa:	3001      	adds	r0, #1
 80247ac:	f43f af30 	beq.w	8024610 <_printf_float+0x98>
 80247b0:	f109 0901 	add.w	r9, r9, #1
 80247b4:	e7e8      	b.n	8024788 <_printf_float+0x210>
 80247b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80247b8:	2b00      	cmp	r3, #0
 80247ba:	dc3b      	bgt.n	8024834 <_printf_float+0x2bc>
 80247bc:	4a1c      	ldr	r2, [pc, #112]	@ (8024830 <_printf_float+0x2b8>)
 80247be:	2301      	movs	r3, #1
 80247c0:	4631      	mov	r1, r6
 80247c2:	4628      	mov	r0, r5
 80247c4:	47b8      	blx	r7
 80247c6:	3001      	adds	r0, #1
 80247c8:	f43f af22 	beq.w	8024610 <_printf_float+0x98>
 80247cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80247d0:	ea59 0303 	orrs.w	r3, r9, r3
 80247d4:	d102      	bne.n	80247dc <_printf_float+0x264>
 80247d6:	6823      	ldr	r3, [r4, #0]
 80247d8:	07d9      	lsls	r1, r3, #31
 80247da:	d5d7      	bpl.n	802478c <_printf_float+0x214>
 80247dc:	9b05      	ldr	r3, [sp, #20]
 80247de:	465a      	mov	r2, fp
 80247e0:	4631      	mov	r1, r6
 80247e2:	4628      	mov	r0, r5
 80247e4:	47b8      	blx	r7
 80247e6:	3001      	adds	r0, #1
 80247e8:	f43f af12 	beq.w	8024610 <_printf_float+0x98>
 80247ec:	f04f 0a00 	mov.w	sl, #0
 80247f0:	f104 0b1a 	add.w	fp, r4, #26
 80247f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80247f6:	425b      	negs	r3, r3
 80247f8:	4553      	cmp	r3, sl
 80247fa:	dc01      	bgt.n	8024800 <_printf_float+0x288>
 80247fc:	464b      	mov	r3, r9
 80247fe:	e794      	b.n	802472a <_printf_float+0x1b2>
 8024800:	2301      	movs	r3, #1
 8024802:	465a      	mov	r2, fp
 8024804:	4631      	mov	r1, r6
 8024806:	4628      	mov	r0, r5
 8024808:	47b8      	blx	r7
 802480a:	3001      	adds	r0, #1
 802480c:	f43f af00 	beq.w	8024610 <_printf_float+0x98>
 8024810:	f10a 0a01 	add.w	sl, sl, #1
 8024814:	e7ee      	b.n	80247f4 <_printf_float+0x27c>
 8024816:	bf00      	nop
 8024818:	ffffffff 	.word	0xffffffff
 802481c:	7fefffff 	.word	0x7fefffff
 8024820:	0802d0a4 	.word	0x0802d0a4
 8024824:	0802d0a8 	.word	0x0802d0a8
 8024828:	0802d0ac 	.word	0x0802d0ac
 802482c:	0802d0b0 	.word	0x0802d0b0
 8024830:	0802d367 	.word	0x0802d367
 8024834:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8024836:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 802483a:	4553      	cmp	r3, sl
 802483c:	bfa8      	it	ge
 802483e:	4653      	movge	r3, sl
 8024840:	2b00      	cmp	r3, #0
 8024842:	4699      	mov	r9, r3
 8024844:	dc37      	bgt.n	80248b6 <_printf_float+0x33e>
 8024846:	2300      	movs	r3, #0
 8024848:	9307      	str	r3, [sp, #28]
 802484a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802484e:	f104 021a 	add.w	r2, r4, #26
 8024852:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8024854:	9907      	ldr	r1, [sp, #28]
 8024856:	9306      	str	r3, [sp, #24]
 8024858:	eba3 0309 	sub.w	r3, r3, r9
 802485c:	428b      	cmp	r3, r1
 802485e:	dc31      	bgt.n	80248c4 <_printf_float+0x34c>
 8024860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024862:	459a      	cmp	sl, r3
 8024864:	dc3b      	bgt.n	80248de <_printf_float+0x366>
 8024866:	6823      	ldr	r3, [r4, #0]
 8024868:	07da      	lsls	r2, r3, #31
 802486a:	d438      	bmi.n	80248de <_printf_float+0x366>
 802486c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802486e:	ebaa 0903 	sub.w	r9, sl, r3
 8024872:	9b06      	ldr	r3, [sp, #24]
 8024874:	ebaa 0303 	sub.w	r3, sl, r3
 8024878:	4599      	cmp	r9, r3
 802487a:	bfa8      	it	ge
 802487c:	4699      	movge	r9, r3
 802487e:	f1b9 0f00 	cmp.w	r9, #0
 8024882:	dc34      	bgt.n	80248ee <_printf_float+0x376>
 8024884:	f04f 0800 	mov.w	r8, #0
 8024888:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802488c:	f104 0b1a 	add.w	fp, r4, #26
 8024890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024892:	ebaa 0303 	sub.w	r3, sl, r3
 8024896:	eba3 0309 	sub.w	r3, r3, r9
 802489a:	4543      	cmp	r3, r8
 802489c:	f77f af76 	ble.w	802478c <_printf_float+0x214>
 80248a0:	2301      	movs	r3, #1
 80248a2:	465a      	mov	r2, fp
 80248a4:	4631      	mov	r1, r6
 80248a6:	4628      	mov	r0, r5
 80248a8:	47b8      	blx	r7
 80248aa:	3001      	adds	r0, #1
 80248ac:	f43f aeb0 	beq.w	8024610 <_printf_float+0x98>
 80248b0:	f108 0801 	add.w	r8, r8, #1
 80248b4:	e7ec      	b.n	8024890 <_printf_float+0x318>
 80248b6:	4642      	mov	r2, r8
 80248b8:	4631      	mov	r1, r6
 80248ba:	4628      	mov	r0, r5
 80248bc:	47b8      	blx	r7
 80248be:	3001      	adds	r0, #1
 80248c0:	d1c1      	bne.n	8024846 <_printf_float+0x2ce>
 80248c2:	e6a5      	b.n	8024610 <_printf_float+0x98>
 80248c4:	2301      	movs	r3, #1
 80248c6:	4631      	mov	r1, r6
 80248c8:	4628      	mov	r0, r5
 80248ca:	9206      	str	r2, [sp, #24]
 80248cc:	47b8      	blx	r7
 80248ce:	3001      	adds	r0, #1
 80248d0:	f43f ae9e 	beq.w	8024610 <_printf_float+0x98>
 80248d4:	9b07      	ldr	r3, [sp, #28]
 80248d6:	9a06      	ldr	r2, [sp, #24]
 80248d8:	3301      	adds	r3, #1
 80248da:	9307      	str	r3, [sp, #28]
 80248dc:	e7b9      	b.n	8024852 <_printf_float+0x2da>
 80248de:	9b05      	ldr	r3, [sp, #20]
 80248e0:	465a      	mov	r2, fp
 80248e2:	4631      	mov	r1, r6
 80248e4:	4628      	mov	r0, r5
 80248e6:	47b8      	blx	r7
 80248e8:	3001      	adds	r0, #1
 80248ea:	d1bf      	bne.n	802486c <_printf_float+0x2f4>
 80248ec:	e690      	b.n	8024610 <_printf_float+0x98>
 80248ee:	9a06      	ldr	r2, [sp, #24]
 80248f0:	464b      	mov	r3, r9
 80248f2:	4442      	add	r2, r8
 80248f4:	4631      	mov	r1, r6
 80248f6:	4628      	mov	r0, r5
 80248f8:	47b8      	blx	r7
 80248fa:	3001      	adds	r0, #1
 80248fc:	d1c2      	bne.n	8024884 <_printf_float+0x30c>
 80248fe:	e687      	b.n	8024610 <_printf_float+0x98>
 8024900:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8024904:	f1b9 0f01 	cmp.w	r9, #1
 8024908:	dc01      	bgt.n	802490e <_printf_float+0x396>
 802490a:	07db      	lsls	r3, r3, #31
 802490c:	d536      	bpl.n	802497c <_printf_float+0x404>
 802490e:	2301      	movs	r3, #1
 8024910:	4642      	mov	r2, r8
 8024912:	4631      	mov	r1, r6
 8024914:	4628      	mov	r0, r5
 8024916:	47b8      	blx	r7
 8024918:	3001      	adds	r0, #1
 802491a:	f43f ae79 	beq.w	8024610 <_printf_float+0x98>
 802491e:	9b05      	ldr	r3, [sp, #20]
 8024920:	465a      	mov	r2, fp
 8024922:	4631      	mov	r1, r6
 8024924:	4628      	mov	r0, r5
 8024926:	47b8      	blx	r7
 8024928:	3001      	adds	r0, #1
 802492a:	f43f ae71 	beq.w	8024610 <_printf_float+0x98>
 802492e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8024932:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8024936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802493a:	f109 39ff 	add.w	r9, r9, #4294967295
 802493e:	d018      	beq.n	8024972 <_printf_float+0x3fa>
 8024940:	464b      	mov	r3, r9
 8024942:	f108 0201 	add.w	r2, r8, #1
 8024946:	4631      	mov	r1, r6
 8024948:	4628      	mov	r0, r5
 802494a:	47b8      	blx	r7
 802494c:	3001      	adds	r0, #1
 802494e:	d10c      	bne.n	802496a <_printf_float+0x3f2>
 8024950:	e65e      	b.n	8024610 <_printf_float+0x98>
 8024952:	2301      	movs	r3, #1
 8024954:	465a      	mov	r2, fp
 8024956:	4631      	mov	r1, r6
 8024958:	4628      	mov	r0, r5
 802495a:	47b8      	blx	r7
 802495c:	3001      	adds	r0, #1
 802495e:	f43f ae57 	beq.w	8024610 <_printf_float+0x98>
 8024962:	f108 0801 	add.w	r8, r8, #1
 8024966:	45c8      	cmp	r8, r9
 8024968:	dbf3      	blt.n	8024952 <_printf_float+0x3da>
 802496a:	4653      	mov	r3, sl
 802496c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8024970:	e6dc      	b.n	802472c <_printf_float+0x1b4>
 8024972:	f04f 0800 	mov.w	r8, #0
 8024976:	f104 0b1a 	add.w	fp, r4, #26
 802497a:	e7f4      	b.n	8024966 <_printf_float+0x3ee>
 802497c:	2301      	movs	r3, #1
 802497e:	4642      	mov	r2, r8
 8024980:	e7e1      	b.n	8024946 <_printf_float+0x3ce>
 8024982:	2301      	movs	r3, #1
 8024984:	464a      	mov	r2, r9
 8024986:	4631      	mov	r1, r6
 8024988:	4628      	mov	r0, r5
 802498a:	47b8      	blx	r7
 802498c:	3001      	adds	r0, #1
 802498e:	f43f ae3f 	beq.w	8024610 <_printf_float+0x98>
 8024992:	f108 0801 	add.w	r8, r8, #1
 8024996:	68e3      	ldr	r3, [r4, #12]
 8024998:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802499a:	1a5b      	subs	r3, r3, r1
 802499c:	4543      	cmp	r3, r8
 802499e:	dcf0      	bgt.n	8024982 <_printf_float+0x40a>
 80249a0:	e6f8      	b.n	8024794 <_printf_float+0x21c>
 80249a2:	f04f 0800 	mov.w	r8, #0
 80249a6:	f104 0919 	add.w	r9, r4, #25
 80249aa:	e7f4      	b.n	8024996 <_printf_float+0x41e>

080249ac <_printf_common>:
 80249ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80249b0:	4616      	mov	r6, r2
 80249b2:	4698      	mov	r8, r3
 80249b4:	688a      	ldr	r2, [r1, #8]
 80249b6:	690b      	ldr	r3, [r1, #16]
 80249b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80249bc:	4293      	cmp	r3, r2
 80249be:	bfb8      	it	lt
 80249c0:	4613      	movlt	r3, r2
 80249c2:	6033      	str	r3, [r6, #0]
 80249c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80249c8:	4607      	mov	r7, r0
 80249ca:	460c      	mov	r4, r1
 80249cc:	b10a      	cbz	r2, 80249d2 <_printf_common+0x26>
 80249ce:	3301      	adds	r3, #1
 80249d0:	6033      	str	r3, [r6, #0]
 80249d2:	6823      	ldr	r3, [r4, #0]
 80249d4:	0699      	lsls	r1, r3, #26
 80249d6:	bf42      	ittt	mi
 80249d8:	6833      	ldrmi	r3, [r6, #0]
 80249da:	3302      	addmi	r3, #2
 80249dc:	6033      	strmi	r3, [r6, #0]
 80249de:	6825      	ldr	r5, [r4, #0]
 80249e0:	f015 0506 	ands.w	r5, r5, #6
 80249e4:	d106      	bne.n	80249f4 <_printf_common+0x48>
 80249e6:	f104 0a19 	add.w	sl, r4, #25
 80249ea:	68e3      	ldr	r3, [r4, #12]
 80249ec:	6832      	ldr	r2, [r6, #0]
 80249ee:	1a9b      	subs	r3, r3, r2
 80249f0:	42ab      	cmp	r3, r5
 80249f2:	dc26      	bgt.n	8024a42 <_printf_common+0x96>
 80249f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80249f8:	6822      	ldr	r2, [r4, #0]
 80249fa:	3b00      	subs	r3, #0
 80249fc:	bf18      	it	ne
 80249fe:	2301      	movne	r3, #1
 8024a00:	0692      	lsls	r2, r2, #26
 8024a02:	d42b      	bmi.n	8024a5c <_printf_common+0xb0>
 8024a04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8024a08:	4641      	mov	r1, r8
 8024a0a:	4638      	mov	r0, r7
 8024a0c:	47c8      	blx	r9
 8024a0e:	3001      	adds	r0, #1
 8024a10:	d01e      	beq.n	8024a50 <_printf_common+0xa4>
 8024a12:	6823      	ldr	r3, [r4, #0]
 8024a14:	6922      	ldr	r2, [r4, #16]
 8024a16:	f003 0306 	and.w	r3, r3, #6
 8024a1a:	2b04      	cmp	r3, #4
 8024a1c:	bf02      	ittt	eq
 8024a1e:	68e5      	ldreq	r5, [r4, #12]
 8024a20:	6833      	ldreq	r3, [r6, #0]
 8024a22:	1aed      	subeq	r5, r5, r3
 8024a24:	68a3      	ldr	r3, [r4, #8]
 8024a26:	bf0c      	ite	eq
 8024a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024a2c:	2500      	movne	r5, #0
 8024a2e:	4293      	cmp	r3, r2
 8024a30:	bfc4      	itt	gt
 8024a32:	1a9b      	subgt	r3, r3, r2
 8024a34:	18ed      	addgt	r5, r5, r3
 8024a36:	2600      	movs	r6, #0
 8024a38:	341a      	adds	r4, #26
 8024a3a:	42b5      	cmp	r5, r6
 8024a3c:	d11a      	bne.n	8024a74 <_printf_common+0xc8>
 8024a3e:	2000      	movs	r0, #0
 8024a40:	e008      	b.n	8024a54 <_printf_common+0xa8>
 8024a42:	2301      	movs	r3, #1
 8024a44:	4652      	mov	r2, sl
 8024a46:	4641      	mov	r1, r8
 8024a48:	4638      	mov	r0, r7
 8024a4a:	47c8      	blx	r9
 8024a4c:	3001      	adds	r0, #1
 8024a4e:	d103      	bne.n	8024a58 <_printf_common+0xac>
 8024a50:	f04f 30ff 	mov.w	r0, #4294967295
 8024a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024a58:	3501      	adds	r5, #1
 8024a5a:	e7c6      	b.n	80249ea <_printf_common+0x3e>
 8024a5c:	18e1      	adds	r1, r4, r3
 8024a5e:	1c5a      	adds	r2, r3, #1
 8024a60:	2030      	movs	r0, #48	@ 0x30
 8024a62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8024a66:	4422      	add	r2, r4
 8024a68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8024a6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8024a70:	3302      	adds	r3, #2
 8024a72:	e7c7      	b.n	8024a04 <_printf_common+0x58>
 8024a74:	2301      	movs	r3, #1
 8024a76:	4622      	mov	r2, r4
 8024a78:	4641      	mov	r1, r8
 8024a7a:	4638      	mov	r0, r7
 8024a7c:	47c8      	blx	r9
 8024a7e:	3001      	adds	r0, #1
 8024a80:	d0e6      	beq.n	8024a50 <_printf_common+0xa4>
 8024a82:	3601      	adds	r6, #1
 8024a84:	e7d9      	b.n	8024a3a <_printf_common+0x8e>
	...

08024a88 <_printf_i>:
 8024a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024a8c:	7e0f      	ldrb	r7, [r1, #24]
 8024a8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024a90:	2f78      	cmp	r7, #120	@ 0x78
 8024a92:	4691      	mov	r9, r2
 8024a94:	4680      	mov	r8, r0
 8024a96:	460c      	mov	r4, r1
 8024a98:	469a      	mov	sl, r3
 8024a9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8024a9e:	d807      	bhi.n	8024ab0 <_printf_i+0x28>
 8024aa0:	2f62      	cmp	r7, #98	@ 0x62
 8024aa2:	d80a      	bhi.n	8024aba <_printf_i+0x32>
 8024aa4:	2f00      	cmp	r7, #0
 8024aa6:	f000 80d2 	beq.w	8024c4e <_printf_i+0x1c6>
 8024aaa:	2f58      	cmp	r7, #88	@ 0x58
 8024aac:	f000 80b9 	beq.w	8024c22 <_printf_i+0x19a>
 8024ab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024ab4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8024ab8:	e03a      	b.n	8024b30 <_printf_i+0xa8>
 8024aba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8024abe:	2b15      	cmp	r3, #21
 8024ac0:	d8f6      	bhi.n	8024ab0 <_printf_i+0x28>
 8024ac2:	a101      	add	r1, pc, #4	@ (adr r1, 8024ac8 <_printf_i+0x40>)
 8024ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024ac8:	08024b21 	.word	0x08024b21
 8024acc:	08024b35 	.word	0x08024b35
 8024ad0:	08024ab1 	.word	0x08024ab1
 8024ad4:	08024ab1 	.word	0x08024ab1
 8024ad8:	08024ab1 	.word	0x08024ab1
 8024adc:	08024ab1 	.word	0x08024ab1
 8024ae0:	08024b35 	.word	0x08024b35
 8024ae4:	08024ab1 	.word	0x08024ab1
 8024ae8:	08024ab1 	.word	0x08024ab1
 8024aec:	08024ab1 	.word	0x08024ab1
 8024af0:	08024ab1 	.word	0x08024ab1
 8024af4:	08024c35 	.word	0x08024c35
 8024af8:	08024b5f 	.word	0x08024b5f
 8024afc:	08024bef 	.word	0x08024bef
 8024b00:	08024ab1 	.word	0x08024ab1
 8024b04:	08024ab1 	.word	0x08024ab1
 8024b08:	08024c57 	.word	0x08024c57
 8024b0c:	08024ab1 	.word	0x08024ab1
 8024b10:	08024b5f 	.word	0x08024b5f
 8024b14:	08024ab1 	.word	0x08024ab1
 8024b18:	08024ab1 	.word	0x08024ab1
 8024b1c:	08024bf7 	.word	0x08024bf7
 8024b20:	6833      	ldr	r3, [r6, #0]
 8024b22:	1d1a      	adds	r2, r3, #4
 8024b24:	681b      	ldr	r3, [r3, #0]
 8024b26:	6032      	str	r2, [r6, #0]
 8024b28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024b2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8024b30:	2301      	movs	r3, #1
 8024b32:	e09d      	b.n	8024c70 <_printf_i+0x1e8>
 8024b34:	6833      	ldr	r3, [r6, #0]
 8024b36:	6820      	ldr	r0, [r4, #0]
 8024b38:	1d19      	adds	r1, r3, #4
 8024b3a:	6031      	str	r1, [r6, #0]
 8024b3c:	0606      	lsls	r6, r0, #24
 8024b3e:	d501      	bpl.n	8024b44 <_printf_i+0xbc>
 8024b40:	681d      	ldr	r5, [r3, #0]
 8024b42:	e003      	b.n	8024b4c <_printf_i+0xc4>
 8024b44:	0645      	lsls	r5, r0, #25
 8024b46:	d5fb      	bpl.n	8024b40 <_printf_i+0xb8>
 8024b48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8024b4c:	2d00      	cmp	r5, #0
 8024b4e:	da03      	bge.n	8024b58 <_printf_i+0xd0>
 8024b50:	232d      	movs	r3, #45	@ 0x2d
 8024b52:	426d      	negs	r5, r5
 8024b54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024b58:	4859      	ldr	r0, [pc, #356]	@ (8024cc0 <_printf_i+0x238>)
 8024b5a:	230a      	movs	r3, #10
 8024b5c:	e011      	b.n	8024b82 <_printf_i+0xfa>
 8024b5e:	6821      	ldr	r1, [r4, #0]
 8024b60:	6833      	ldr	r3, [r6, #0]
 8024b62:	0608      	lsls	r0, r1, #24
 8024b64:	f853 5b04 	ldr.w	r5, [r3], #4
 8024b68:	d402      	bmi.n	8024b70 <_printf_i+0xe8>
 8024b6a:	0649      	lsls	r1, r1, #25
 8024b6c:	bf48      	it	mi
 8024b6e:	b2ad      	uxthmi	r5, r5
 8024b70:	2f6f      	cmp	r7, #111	@ 0x6f
 8024b72:	4853      	ldr	r0, [pc, #332]	@ (8024cc0 <_printf_i+0x238>)
 8024b74:	6033      	str	r3, [r6, #0]
 8024b76:	bf14      	ite	ne
 8024b78:	230a      	movne	r3, #10
 8024b7a:	2308      	moveq	r3, #8
 8024b7c:	2100      	movs	r1, #0
 8024b7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8024b82:	6866      	ldr	r6, [r4, #4]
 8024b84:	60a6      	str	r6, [r4, #8]
 8024b86:	2e00      	cmp	r6, #0
 8024b88:	bfa2      	ittt	ge
 8024b8a:	6821      	ldrge	r1, [r4, #0]
 8024b8c:	f021 0104 	bicge.w	r1, r1, #4
 8024b90:	6021      	strge	r1, [r4, #0]
 8024b92:	b90d      	cbnz	r5, 8024b98 <_printf_i+0x110>
 8024b94:	2e00      	cmp	r6, #0
 8024b96:	d04b      	beq.n	8024c30 <_printf_i+0x1a8>
 8024b98:	4616      	mov	r6, r2
 8024b9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8024b9e:	fb03 5711 	mls	r7, r3, r1, r5
 8024ba2:	5dc7      	ldrb	r7, [r0, r7]
 8024ba4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8024ba8:	462f      	mov	r7, r5
 8024baa:	42bb      	cmp	r3, r7
 8024bac:	460d      	mov	r5, r1
 8024bae:	d9f4      	bls.n	8024b9a <_printf_i+0x112>
 8024bb0:	2b08      	cmp	r3, #8
 8024bb2:	d10b      	bne.n	8024bcc <_printf_i+0x144>
 8024bb4:	6823      	ldr	r3, [r4, #0]
 8024bb6:	07df      	lsls	r7, r3, #31
 8024bb8:	d508      	bpl.n	8024bcc <_printf_i+0x144>
 8024bba:	6923      	ldr	r3, [r4, #16]
 8024bbc:	6861      	ldr	r1, [r4, #4]
 8024bbe:	4299      	cmp	r1, r3
 8024bc0:	bfde      	ittt	le
 8024bc2:	2330      	movle	r3, #48	@ 0x30
 8024bc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8024bc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8024bcc:	1b92      	subs	r2, r2, r6
 8024bce:	6122      	str	r2, [r4, #16]
 8024bd0:	f8cd a000 	str.w	sl, [sp]
 8024bd4:	464b      	mov	r3, r9
 8024bd6:	aa03      	add	r2, sp, #12
 8024bd8:	4621      	mov	r1, r4
 8024bda:	4640      	mov	r0, r8
 8024bdc:	f7ff fee6 	bl	80249ac <_printf_common>
 8024be0:	3001      	adds	r0, #1
 8024be2:	d14a      	bne.n	8024c7a <_printf_i+0x1f2>
 8024be4:	f04f 30ff 	mov.w	r0, #4294967295
 8024be8:	b004      	add	sp, #16
 8024bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024bee:	6823      	ldr	r3, [r4, #0]
 8024bf0:	f043 0320 	orr.w	r3, r3, #32
 8024bf4:	6023      	str	r3, [r4, #0]
 8024bf6:	4833      	ldr	r0, [pc, #204]	@ (8024cc4 <_printf_i+0x23c>)
 8024bf8:	2778      	movs	r7, #120	@ 0x78
 8024bfa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8024bfe:	6823      	ldr	r3, [r4, #0]
 8024c00:	6831      	ldr	r1, [r6, #0]
 8024c02:	061f      	lsls	r7, r3, #24
 8024c04:	f851 5b04 	ldr.w	r5, [r1], #4
 8024c08:	d402      	bmi.n	8024c10 <_printf_i+0x188>
 8024c0a:	065f      	lsls	r7, r3, #25
 8024c0c:	bf48      	it	mi
 8024c0e:	b2ad      	uxthmi	r5, r5
 8024c10:	6031      	str	r1, [r6, #0]
 8024c12:	07d9      	lsls	r1, r3, #31
 8024c14:	bf44      	itt	mi
 8024c16:	f043 0320 	orrmi.w	r3, r3, #32
 8024c1a:	6023      	strmi	r3, [r4, #0]
 8024c1c:	b11d      	cbz	r5, 8024c26 <_printf_i+0x19e>
 8024c1e:	2310      	movs	r3, #16
 8024c20:	e7ac      	b.n	8024b7c <_printf_i+0xf4>
 8024c22:	4827      	ldr	r0, [pc, #156]	@ (8024cc0 <_printf_i+0x238>)
 8024c24:	e7e9      	b.n	8024bfa <_printf_i+0x172>
 8024c26:	6823      	ldr	r3, [r4, #0]
 8024c28:	f023 0320 	bic.w	r3, r3, #32
 8024c2c:	6023      	str	r3, [r4, #0]
 8024c2e:	e7f6      	b.n	8024c1e <_printf_i+0x196>
 8024c30:	4616      	mov	r6, r2
 8024c32:	e7bd      	b.n	8024bb0 <_printf_i+0x128>
 8024c34:	6833      	ldr	r3, [r6, #0]
 8024c36:	6825      	ldr	r5, [r4, #0]
 8024c38:	6961      	ldr	r1, [r4, #20]
 8024c3a:	1d18      	adds	r0, r3, #4
 8024c3c:	6030      	str	r0, [r6, #0]
 8024c3e:	062e      	lsls	r6, r5, #24
 8024c40:	681b      	ldr	r3, [r3, #0]
 8024c42:	d501      	bpl.n	8024c48 <_printf_i+0x1c0>
 8024c44:	6019      	str	r1, [r3, #0]
 8024c46:	e002      	b.n	8024c4e <_printf_i+0x1c6>
 8024c48:	0668      	lsls	r0, r5, #25
 8024c4a:	d5fb      	bpl.n	8024c44 <_printf_i+0x1bc>
 8024c4c:	8019      	strh	r1, [r3, #0]
 8024c4e:	2300      	movs	r3, #0
 8024c50:	6123      	str	r3, [r4, #16]
 8024c52:	4616      	mov	r6, r2
 8024c54:	e7bc      	b.n	8024bd0 <_printf_i+0x148>
 8024c56:	6833      	ldr	r3, [r6, #0]
 8024c58:	1d1a      	adds	r2, r3, #4
 8024c5a:	6032      	str	r2, [r6, #0]
 8024c5c:	681e      	ldr	r6, [r3, #0]
 8024c5e:	6862      	ldr	r2, [r4, #4]
 8024c60:	2100      	movs	r1, #0
 8024c62:	4630      	mov	r0, r6
 8024c64:	f7db fb3c 	bl	80002e0 <memchr>
 8024c68:	b108      	cbz	r0, 8024c6e <_printf_i+0x1e6>
 8024c6a:	1b80      	subs	r0, r0, r6
 8024c6c:	6060      	str	r0, [r4, #4]
 8024c6e:	6863      	ldr	r3, [r4, #4]
 8024c70:	6123      	str	r3, [r4, #16]
 8024c72:	2300      	movs	r3, #0
 8024c74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024c78:	e7aa      	b.n	8024bd0 <_printf_i+0x148>
 8024c7a:	6923      	ldr	r3, [r4, #16]
 8024c7c:	4632      	mov	r2, r6
 8024c7e:	4649      	mov	r1, r9
 8024c80:	4640      	mov	r0, r8
 8024c82:	47d0      	blx	sl
 8024c84:	3001      	adds	r0, #1
 8024c86:	d0ad      	beq.n	8024be4 <_printf_i+0x15c>
 8024c88:	6823      	ldr	r3, [r4, #0]
 8024c8a:	079b      	lsls	r3, r3, #30
 8024c8c:	d413      	bmi.n	8024cb6 <_printf_i+0x22e>
 8024c8e:	68e0      	ldr	r0, [r4, #12]
 8024c90:	9b03      	ldr	r3, [sp, #12]
 8024c92:	4298      	cmp	r0, r3
 8024c94:	bfb8      	it	lt
 8024c96:	4618      	movlt	r0, r3
 8024c98:	e7a6      	b.n	8024be8 <_printf_i+0x160>
 8024c9a:	2301      	movs	r3, #1
 8024c9c:	4632      	mov	r2, r6
 8024c9e:	4649      	mov	r1, r9
 8024ca0:	4640      	mov	r0, r8
 8024ca2:	47d0      	blx	sl
 8024ca4:	3001      	adds	r0, #1
 8024ca6:	d09d      	beq.n	8024be4 <_printf_i+0x15c>
 8024ca8:	3501      	adds	r5, #1
 8024caa:	68e3      	ldr	r3, [r4, #12]
 8024cac:	9903      	ldr	r1, [sp, #12]
 8024cae:	1a5b      	subs	r3, r3, r1
 8024cb0:	42ab      	cmp	r3, r5
 8024cb2:	dcf2      	bgt.n	8024c9a <_printf_i+0x212>
 8024cb4:	e7eb      	b.n	8024c8e <_printf_i+0x206>
 8024cb6:	2500      	movs	r5, #0
 8024cb8:	f104 0619 	add.w	r6, r4, #25
 8024cbc:	e7f5      	b.n	8024caa <_printf_i+0x222>
 8024cbe:	bf00      	nop
 8024cc0:	0802d0b4 	.word	0x0802d0b4
 8024cc4:	0802d0c5 	.word	0x0802d0c5

08024cc8 <_scanf_float>:
 8024cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ccc:	b087      	sub	sp, #28
 8024cce:	4617      	mov	r7, r2
 8024cd0:	9303      	str	r3, [sp, #12]
 8024cd2:	688b      	ldr	r3, [r1, #8]
 8024cd4:	1e5a      	subs	r2, r3, #1
 8024cd6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8024cda:	bf81      	itttt	hi
 8024cdc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8024ce0:	eb03 0b05 	addhi.w	fp, r3, r5
 8024ce4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8024ce8:	608b      	strhi	r3, [r1, #8]
 8024cea:	680b      	ldr	r3, [r1, #0]
 8024cec:	460a      	mov	r2, r1
 8024cee:	f04f 0500 	mov.w	r5, #0
 8024cf2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8024cf6:	f842 3b1c 	str.w	r3, [r2], #28
 8024cfa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8024cfe:	4680      	mov	r8, r0
 8024d00:	460c      	mov	r4, r1
 8024d02:	bf98      	it	ls
 8024d04:	f04f 0b00 	movls.w	fp, #0
 8024d08:	9201      	str	r2, [sp, #4]
 8024d0a:	4616      	mov	r6, r2
 8024d0c:	46aa      	mov	sl, r5
 8024d0e:	46a9      	mov	r9, r5
 8024d10:	9502      	str	r5, [sp, #8]
 8024d12:	68a2      	ldr	r2, [r4, #8]
 8024d14:	b152      	cbz	r2, 8024d2c <_scanf_float+0x64>
 8024d16:	683b      	ldr	r3, [r7, #0]
 8024d18:	781b      	ldrb	r3, [r3, #0]
 8024d1a:	2b4e      	cmp	r3, #78	@ 0x4e
 8024d1c:	d864      	bhi.n	8024de8 <_scanf_float+0x120>
 8024d1e:	2b40      	cmp	r3, #64	@ 0x40
 8024d20:	d83c      	bhi.n	8024d9c <_scanf_float+0xd4>
 8024d22:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8024d26:	b2c8      	uxtb	r0, r1
 8024d28:	280e      	cmp	r0, #14
 8024d2a:	d93a      	bls.n	8024da2 <_scanf_float+0xda>
 8024d2c:	f1b9 0f00 	cmp.w	r9, #0
 8024d30:	d003      	beq.n	8024d3a <_scanf_float+0x72>
 8024d32:	6823      	ldr	r3, [r4, #0]
 8024d34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8024d38:	6023      	str	r3, [r4, #0]
 8024d3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024d3e:	f1ba 0f01 	cmp.w	sl, #1
 8024d42:	f200 8117 	bhi.w	8024f74 <_scanf_float+0x2ac>
 8024d46:	9b01      	ldr	r3, [sp, #4]
 8024d48:	429e      	cmp	r6, r3
 8024d4a:	f200 8108 	bhi.w	8024f5e <_scanf_float+0x296>
 8024d4e:	2001      	movs	r0, #1
 8024d50:	b007      	add	sp, #28
 8024d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d56:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8024d5a:	2a0d      	cmp	r2, #13
 8024d5c:	d8e6      	bhi.n	8024d2c <_scanf_float+0x64>
 8024d5e:	a101      	add	r1, pc, #4	@ (adr r1, 8024d64 <_scanf_float+0x9c>)
 8024d60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8024d64:	08024eab 	.word	0x08024eab
 8024d68:	08024d2d 	.word	0x08024d2d
 8024d6c:	08024d2d 	.word	0x08024d2d
 8024d70:	08024d2d 	.word	0x08024d2d
 8024d74:	08024f0b 	.word	0x08024f0b
 8024d78:	08024ee3 	.word	0x08024ee3
 8024d7c:	08024d2d 	.word	0x08024d2d
 8024d80:	08024d2d 	.word	0x08024d2d
 8024d84:	08024eb9 	.word	0x08024eb9
 8024d88:	08024d2d 	.word	0x08024d2d
 8024d8c:	08024d2d 	.word	0x08024d2d
 8024d90:	08024d2d 	.word	0x08024d2d
 8024d94:	08024d2d 	.word	0x08024d2d
 8024d98:	08024e71 	.word	0x08024e71
 8024d9c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8024da0:	e7db      	b.n	8024d5a <_scanf_float+0x92>
 8024da2:	290e      	cmp	r1, #14
 8024da4:	d8c2      	bhi.n	8024d2c <_scanf_float+0x64>
 8024da6:	a001      	add	r0, pc, #4	@ (adr r0, 8024dac <_scanf_float+0xe4>)
 8024da8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8024dac:	08024e61 	.word	0x08024e61
 8024db0:	08024d2d 	.word	0x08024d2d
 8024db4:	08024e61 	.word	0x08024e61
 8024db8:	08024ef7 	.word	0x08024ef7
 8024dbc:	08024d2d 	.word	0x08024d2d
 8024dc0:	08024e09 	.word	0x08024e09
 8024dc4:	08024e47 	.word	0x08024e47
 8024dc8:	08024e47 	.word	0x08024e47
 8024dcc:	08024e47 	.word	0x08024e47
 8024dd0:	08024e47 	.word	0x08024e47
 8024dd4:	08024e47 	.word	0x08024e47
 8024dd8:	08024e47 	.word	0x08024e47
 8024ddc:	08024e47 	.word	0x08024e47
 8024de0:	08024e47 	.word	0x08024e47
 8024de4:	08024e47 	.word	0x08024e47
 8024de8:	2b6e      	cmp	r3, #110	@ 0x6e
 8024dea:	d809      	bhi.n	8024e00 <_scanf_float+0x138>
 8024dec:	2b60      	cmp	r3, #96	@ 0x60
 8024dee:	d8b2      	bhi.n	8024d56 <_scanf_float+0x8e>
 8024df0:	2b54      	cmp	r3, #84	@ 0x54
 8024df2:	d07b      	beq.n	8024eec <_scanf_float+0x224>
 8024df4:	2b59      	cmp	r3, #89	@ 0x59
 8024df6:	d199      	bne.n	8024d2c <_scanf_float+0x64>
 8024df8:	2d07      	cmp	r5, #7
 8024dfa:	d197      	bne.n	8024d2c <_scanf_float+0x64>
 8024dfc:	2508      	movs	r5, #8
 8024dfe:	e02c      	b.n	8024e5a <_scanf_float+0x192>
 8024e00:	2b74      	cmp	r3, #116	@ 0x74
 8024e02:	d073      	beq.n	8024eec <_scanf_float+0x224>
 8024e04:	2b79      	cmp	r3, #121	@ 0x79
 8024e06:	e7f6      	b.n	8024df6 <_scanf_float+0x12e>
 8024e08:	6821      	ldr	r1, [r4, #0]
 8024e0a:	05c8      	lsls	r0, r1, #23
 8024e0c:	d51b      	bpl.n	8024e46 <_scanf_float+0x17e>
 8024e0e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8024e12:	6021      	str	r1, [r4, #0]
 8024e14:	f109 0901 	add.w	r9, r9, #1
 8024e18:	f1bb 0f00 	cmp.w	fp, #0
 8024e1c:	d003      	beq.n	8024e26 <_scanf_float+0x15e>
 8024e1e:	3201      	adds	r2, #1
 8024e20:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024e24:	60a2      	str	r2, [r4, #8]
 8024e26:	68a3      	ldr	r3, [r4, #8]
 8024e28:	3b01      	subs	r3, #1
 8024e2a:	60a3      	str	r3, [r4, #8]
 8024e2c:	6923      	ldr	r3, [r4, #16]
 8024e2e:	3301      	adds	r3, #1
 8024e30:	6123      	str	r3, [r4, #16]
 8024e32:	687b      	ldr	r3, [r7, #4]
 8024e34:	3b01      	subs	r3, #1
 8024e36:	2b00      	cmp	r3, #0
 8024e38:	607b      	str	r3, [r7, #4]
 8024e3a:	f340 8087 	ble.w	8024f4c <_scanf_float+0x284>
 8024e3e:	683b      	ldr	r3, [r7, #0]
 8024e40:	3301      	adds	r3, #1
 8024e42:	603b      	str	r3, [r7, #0]
 8024e44:	e765      	b.n	8024d12 <_scanf_float+0x4a>
 8024e46:	eb1a 0105 	adds.w	r1, sl, r5
 8024e4a:	f47f af6f 	bne.w	8024d2c <_scanf_float+0x64>
 8024e4e:	6822      	ldr	r2, [r4, #0]
 8024e50:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8024e54:	6022      	str	r2, [r4, #0]
 8024e56:	460d      	mov	r5, r1
 8024e58:	468a      	mov	sl, r1
 8024e5a:	f806 3b01 	strb.w	r3, [r6], #1
 8024e5e:	e7e2      	b.n	8024e26 <_scanf_float+0x15e>
 8024e60:	6822      	ldr	r2, [r4, #0]
 8024e62:	0610      	lsls	r0, r2, #24
 8024e64:	f57f af62 	bpl.w	8024d2c <_scanf_float+0x64>
 8024e68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8024e6c:	6022      	str	r2, [r4, #0]
 8024e6e:	e7f4      	b.n	8024e5a <_scanf_float+0x192>
 8024e70:	f1ba 0f00 	cmp.w	sl, #0
 8024e74:	d10e      	bne.n	8024e94 <_scanf_float+0x1cc>
 8024e76:	f1b9 0f00 	cmp.w	r9, #0
 8024e7a:	d10e      	bne.n	8024e9a <_scanf_float+0x1d2>
 8024e7c:	6822      	ldr	r2, [r4, #0]
 8024e7e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8024e82:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8024e86:	d108      	bne.n	8024e9a <_scanf_float+0x1d2>
 8024e88:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8024e8c:	6022      	str	r2, [r4, #0]
 8024e8e:	f04f 0a01 	mov.w	sl, #1
 8024e92:	e7e2      	b.n	8024e5a <_scanf_float+0x192>
 8024e94:	f1ba 0f02 	cmp.w	sl, #2
 8024e98:	d055      	beq.n	8024f46 <_scanf_float+0x27e>
 8024e9a:	2d01      	cmp	r5, #1
 8024e9c:	d002      	beq.n	8024ea4 <_scanf_float+0x1dc>
 8024e9e:	2d04      	cmp	r5, #4
 8024ea0:	f47f af44 	bne.w	8024d2c <_scanf_float+0x64>
 8024ea4:	3501      	adds	r5, #1
 8024ea6:	b2ed      	uxtb	r5, r5
 8024ea8:	e7d7      	b.n	8024e5a <_scanf_float+0x192>
 8024eaa:	f1ba 0f01 	cmp.w	sl, #1
 8024eae:	f47f af3d 	bne.w	8024d2c <_scanf_float+0x64>
 8024eb2:	f04f 0a02 	mov.w	sl, #2
 8024eb6:	e7d0      	b.n	8024e5a <_scanf_float+0x192>
 8024eb8:	b97d      	cbnz	r5, 8024eda <_scanf_float+0x212>
 8024eba:	f1b9 0f00 	cmp.w	r9, #0
 8024ebe:	f47f af38 	bne.w	8024d32 <_scanf_float+0x6a>
 8024ec2:	6822      	ldr	r2, [r4, #0]
 8024ec4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8024ec8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8024ecc:	f040 8101 	bne.w	80250d2 <_scanf_float+0x40a>
 8024ed0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8024ed4:	6022      	str	r2, [r4, #0]
 8024ed6:	2501      	movs	r5, #1
 8024ed8:	e7bf      	b.n	8024e5a <_scanf_float+0x192>
 8024eda:	2d03      	cmp	r5, #3
 8024edc:	d0e2      	beq.n	8024ea4 <_scanf_float+0x1dc>
 8024ede:	2d05      	cmp	r5, #5
 8024ee0:	e7de      	b.n	8024ea0 <_scanf_float+0x1d8>
 8024ee2:	2d02      	cmp	r5, #2
 8024ee4:	f47f af22 	bne.w	8024d2c <_scanf_float+0x64>
 8024ee8:	2503      	movs	r5, #3
 8024eea:	e7b6      	b.n	8024e5a <_scanf_float+0x192>
 8024eec:	2d06      	cmp	r5, #6
 8024eee:	f47f af1d 	bne.w	8024d2c <_scanf_float+0x64>
 8024ef2:	2507      	movs	r5, #7
 8024ef4:	e7b1      	b.n	8024e5a <_scanf_float+0x192>
 8024ef6:	6822      	ldr	r2, [r4, #0]
 8024ef8:	0591      	lsls	r1, r2, #22
 8024efa:	f57f af17 	bpl.w	8024d2c <_scanf_float+0x64>
 8024efe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8024f02:	6022      	str	r2, [r4, #0]
 8024f04:	f8cd 9008 	str.w	r9, [sp, #8]
 8024f08:	e7a7      	b.n	8024e5a <_scanf_float+0x192>
 8024f0a:	6822      	ldr	r2, [r4, #0]
 8024f0c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8024f10:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8024f14:	d006      	beq.n	8024f24 <_scanf_float+0x25c>
 8024f16:	0550      	lsls	r0, r2, #21
 8024f18:	f57f af08 	bpl.w	8024d2c <_scanf_float+0x64>
 8024f1c:	f1b9 0f00 	cmp.w	r9, #0
 8024f20:	f000 80d7 	beq.w	80250d2 <_scanf_float+0x40a>
 8024f24:	0591      	lsls	r1, r2, #22
 8024f26:	bf58      	it	pl
 8024f28:	9902      	ldrpl	r1, [sp, #8]
 8024f2a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8024f2e:	bf58      	it	pl
 8024f30:	eba9 0101 	subpl.w	r1, r9, r1
 8024f34:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8024f38:	bf58      	it	pl
 8024f3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8024f3e:	6022      	str	r2, [r4, #0]
 8024f40:	f04f 0900 	mov.w	r9, #0
 8024f44:	e789      	b.n	8024e5a <_scanf_float+0x192>
 8024f46:	f04f 0a03 	mov.w	sl, #3
 8024f4a:	e786      	b.n	8024e5a <_scanf_float+0x192>
 8024f4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8024f50:	4639      	mov	r1, r7
 8024f52:	4640      	mov	r0, r8
 8024f54:	4798      	blx	r3
 8024f56:	2800      	cmp	r0, #0
 8024f58:	f43f aedb 	beq.w	8024d12 <_scanf_float+0x4a>
 8024f5c:	e6e6      	b.n	8024d2c <_scanf_float+0x64>
 8024f5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024f62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8024f66:	463a      	mov	r2, r7
 8024f68:	4640      	mov	r0, r8
 8024f6a:	4798      	blx	r3
 8024f6c:	6923      	ldr	r3, [r4, #16]
 8024f6e:	3b01      	subs	r3, #1
 8024f70:	6123      	str	r3, [r4, #16]
 8024f72:	e6e8      	b.n	8024d46 <_scanf_float+0x7e>
 8024f74:	1e6b      	subs	r3, r5, #1
 8024f76:	2b06      	cmp	r3, #6
 8024f78:	d824      	bhi.n	8024fc4 <_scanf_float+0x2fc>
 8024f7a:	2d02      	cmp	r5, #2
 8024f7c:	d836      	bhi.n	8024fec <_scanf_float+0x324>
 8024f7e:	9b01      	ldr	r3, [sp, #4]
 8024f80:	429e      	cmp	r6, r3
 8024f82:	f67f aee4 	bls.w	8024d4e <_scanf_float+0x86>
 8024f86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024f8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8024f8e:	463a      	mov	r2, r7
 8024f90:	4640      	mov	r0, r8
 8024f92:	4798      	blx	r3
 8024f94:	6923      	ldr	r3, [r4, #16]
 8024f96:	3b01      	subs	r3, #1
 8024f98:	6123      	str	r3, [r4, #16]
 8024f9a:	e7f0      	b.n	8024f7e <_scanf_float+0x2b6>
 8024f9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024fa0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8024fa4:	463a      	mov	r2, r7
 8024fa6:	4640      	mov	r0, r8
 8024fa8:	4798      	blx	r3
 8024faa:	6923      	ldr	r3, [r4, #16]
 8024fac:	3b01      	subs	r3, #1
 8024fae:	6123      	str	r3, [r4, #16]
 8024fb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024fb4:	fa5f fa8a 	uxtb.w	sl, sl
 8024fb8:	f1ba 0f02 	cmp.w	sl, #2
 8024fbc:	d1ee      	bne.n	8024f9c <_scanf_float+0x2d4>
 8024fbe:	3d03      	subs	r5, #3
 8024fc0:	b2ed      	uxtb	r5, r5
 8024fc2:	1b76      	subs	r6, r6, r5
 8024fc4:	6823      	ldr	r3, [r4, #0]
 8024fc6:	05da      	lsls	r2, r3, #23
 8024fc8:	d530      	bpl.n	802502c <_scanf_float+0x364>
 8024fca:	055b      	lsls	r3, r3, #21
 8024fcc:	d511      	bpl.n	8024ff2 <_scanf_float+0x32a>
 8024fce:	9b01      	ldr	r3, [sp, #4]
 8024fd0:	429e      	cmp	r6, r3
 8024fd2:	f67f aebc 	bls.w	8024d4e <_scanf_float+0x86>
 8024fd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024fda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8024fde:	463a      	mov	r2, r7
 8024fe0:	4640      	mov	r0, r8
 8024fe2:	4798      	blx	r3
 8024fe4:	6923      	ldr	r3, [r4, #16]
 8024fe6:	3b01      	subs	r3, #1
 8024fe8:	6123      	str	r3, [r4, #16]
 8024fea:	e7f0      	b.n	8024fce <_scanf_float+0x306>
 8024fec:	46aa      	mov	sl, r5
 8024fee:	46b3      	mov	fp, r6
 8024ff0:	e7de      	b.n	8024fb0 <_scanf_float+0x2e8>
 8024ff2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8024ff6:	6923      	ldr	r3, [r4, #16]
 8024ff8:	2965      	cmp	r1, #101	@ 0x65
 8024ffa:	f103 33ff 	add.w	r3, r3, #4294967295
 8024ffe:	f106 35ff 	add.w	r5, r6, #4294967295
 8025002:	6123      	str	r3, [r4, #16]
 8025004:	d00c      	beq.n	8025020 <_scanf_float+0x358>
 8025006:	2945      	cmp	r1, #69	@ 0x45
 8025008:	d00a      	beq.n	8025020 <_scanf_float+0x358>
 802500a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802500e:	463a      	mov	r2, r7
 8025010:	4640      	mov	r0, r8
 8025012:	4798      	blx	r3
 8025014:	6923      	ldr	r3, [r4, #16]
 8025016:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 802501a:	3b01      	subs	r3, #1
 802501c:	1eb5      	subs	r5, r6, #2
 802501e:	6123      	str	r3, [r4, #16]
 8025020:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8025024:	463a      	mov	r2, r7
 8025026:	4640      	mov	r0, r8
 8025028:	4798      	blx	r3
 802502a:	462e      	mov	r6, r5
 802502c:	6822      	ldr	r2, [r4, #0]
 802502e:	f012 0210 	ands.w	r2, r2, #16
 8025032:	d001      	beq.n	8025038 <_scanf_float+0x370>
 8025034:	2000      	movs	r0, #0
 8025036:	e68b      	b.n	8024d50 <_scanf_float+0x88>
 8025038:	7032      	strb	r2, [r6, #0]
 802503a:	6823      	ldr	r3, [r4, #0]
 802503c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8025040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8025044:	d11a      	bne.n	802507c <_scanf_float+0x3b4>
 8025046:	9b02      	ldr	r3, [sp, #8]
 8025048:	454b      	cmp	r3, r9
 802504a:	eba3 0209 	sub.w	r2, r3, r9
 802504e:	d121      	bne.n	8025094 <_scanf_float+0x3cc>
 8025050:	9901      	ldr	r1, [sp, #4]
 8025052:	2200      	movs	r2, #0
 8025054:	4640      	mov	r0, r8
 8025056:	f002 fb51 	bl	80276fc <_strtod_r>
 802505a:	9b03      	ldr	r3, [sp, #12]
 802505c:	6821      	ldr	r1, [r4, #0]
 802505e:	681b      	ldr	r3, [r3, #0]
 8025060:	f011 0f02 	tst.w	r1, #2
 8025064:	f103 0204 	add.w	r2, r3, #4
 8025068:	d01f      	beq.n	80250aa <_scanf_float+0x3e2>
 802506a:	9903      	ldr	r1, [sp, #12]
 802506c:	600a      	str	r2, [r1, #0]
 802506e:	681b      	ldr	r3, [r3, #0]
 8025070:	ed83 0b00 	vstr	d0, [r3]
 8025074:	68e3      	ldr	r3, [r4, #12]
 8025076:	3301      	adds	r3, #1
 8025078:	60e3      	str	r3, [r4, #12]
 802507a:	e7db      	b.n	8025034 <_scanf_float+0x36c>
 802507c:	9b04      	ldr	r3, [sp, #16]
 802507e:	2b00      	cmp	r3, #0
 8025080:	d0e6      	beq.n	8025050 <_scanf_float+0x388>
 8025082:	9905      	ldr	r1, [sp, #20]
 8025084:	230a      	movs	r3, #10
 8025086:	3101      	adds	r1, #1
 8025088:	4640      	mov	r0, r8
 802508a:	f7ff f9e5 	bl	8024458 <_strtol_r>
 802508e:	9b04      	ldr	r3, [sp, #16]
 8025090:	9e05      	ldr	r6, [sp, #20]
 8025092:	1ac2      	subs	r2, r0, r3
 8025094:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8025098:	429e      	cmp	r6, r3
 802509a:	bf28      	it	cs
 802509c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80250a0:	490d      	ldr	r1, [pc, #52]	@ (80250d8 <_scanf_float+0x410>)
 80250a2:	4630      	mov	r0, r6
 80250a4:	f000 f8f0 	bl	8025288 <siprintf>
 80250a8:	e7d2      	b.n	8025050 <_scanf_float+0x388>
 80250aa:	f011 0f04 	tst.w	r1, #4
 80250ae:	9903      	ldr	r1, [sp, #12]
 80250b0:	600a      	str	r2, [r1, #0]
 80250b2:	d1dc      	bne.n	802506e <_scanf_float+0x3a6>
 80250b4:	eeb4 0b40 	vcmp.f64	d0, d0
 80250b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80250bc:	681d      	ldr	r5, [r3, #0]
 80250be:	d705      	bvc.n	80250cc <_scanf_float+0x404>
 80250c0:	4806      	ldr	r0, [pc, #24]	@ (80250dc <_scanf_float+0x414>)
 80250c2:	f000 fa6b 	bl	802559c <nanf>
 80250c6:	ed85 0a00 	vstr	s0, [r5]
 80250ca:	e7d3      	b.n	8025074 <_scanf_float+0x3ac>
 80250cc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80250d0:	e7f9      	b.n	80250c6 <_scanf_float+0x3fe>
 80250d2:	f04f 0900 	mov.w	r9, #0
 80250d6:	e630      	b.n	8024d3a <_scanf_float+0x72>
 80250d8:	0802d0d6 	.word	0x0802d0d6
 80250dc:	0802d116 	.word	0x0802d116

080250e0 <std>:
 80250e0:	2300      	movs	r3, #0
 80250e2:	b510      	push	{r4, lr}
 80250e4:	4604      	mov	r4, r0
 80250e6:	e9c0 3300 	strd	r3, r3, [r0]
 80250ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80250ee:	6083      	str	r3, [r0, #8]
 80250f0:	8181      	strh	r1, [r0, #12]
 80250f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80250f4:	81c2      	strh	r2, [r0, #14]
 80250f6:	6183      	str	r3, [r0, #24]
 80250f8:	4619      	mov	r1, r3
 80250fa:	2208      	movs	r2, #8
 80250fc:	305c      	adds	r0, #92	@ 0x5c
 80250fe:	f000 f99d 	bl	802543c <memset>
 8025102:	4b0d      	ldr	r3, [pc, #52]	@ (8025138 <std+0x58>)
 8025104:	6263      	str	r3, [r4, #36]	@ 0x24
 8025106:	4b0d      	ldr	r3, [pc, #52]	@ (802513c <std+0x5c>)
 8025108:	62a3      	str	r3, [r4, #40]	@ 0x28
 802510a:	4b0d      	ldr	r3, [pc, #52]	@ (8025140 <std+0x60>)
 802510c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802510e:	4b0d      	ldr	r3, [pc, #52]	@ (8025144 <std+0x64>)
 8025110:	6323      	str	r3, [r4, #48]	@ 0x30
 8025112:	4b0d      	ldr	r3, [pc, #52]	@ (8025148 <std+0x68>)
 8025114:	6224      	str	r4, [r4, #32]
 8025116:	429c      	cmp	r4, r3
 8025118:	d006      	beq.n	8025128 <std+0x48>
 802511a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802511e:	4294      	cmp	r4, r2
 8025120:	d002      	beq.n	8025128 <std+0x48>
 8025122:	33d0      	adds	r3, #208	@ 0xd0
 8025124:	429c      	cmp	r4, r3
 8025126:	d105      	bne.n	8025134 <std+0x54>
 8025128:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802512c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025130:	f000 ba22 	b.w	8025578 <__retarget_lock_init_recursive>
 8025134:	bd10      	pop	{r4, pc}
 8025136:	bf00      	nop
 8025138:	0802531d 	.word	0x0802531d
 802513c:	08025343 	.word	0x08025343
 8025140:	0802537b 	.word	0x0802537b
 8025144:	0802539f 	.word	0x0802539f
 8025148:	2400bfb8 	.word	0x2400bfb8

0802514c <stdio_exit_handler>:
 802514c:	4a02      	ldr	r2, [pc, #8]	@ (8025158 <stdio_exit_handler+0xc>)
 802514e:	4903      	ldr	r1, [pc, #12]	@ (802515c <stdio_exit_handler+0x10>)
 8025150:	4803      	ldr	r0, [pc, #12]	@ (8025160 <stdio_exit_handler+0x14>)
 8025152:	f000 b869 	b.w	8025228 <_fwalk_sglue>
 8025156:	bf00      	nop
 8025158:	24000210 	.word	0x24000210
 802515c:	08028379 	.word	0x08028379
 8025160:	24000220 	.word	0x24000220

08025164 <cleanup_stdio>:
 8025164:	6841      	ldr	r1, [r0, #4]
 8025166:	4b0c      	ldr	r3, [pc, #48]	@ (8025198 <cleanup_stdio+0x34>)
 8025168:	4299      	cmp	r1, r3
 802516a:	b510      	push	{r4, lr}
 802516c:	4604      	mov	r4, r0
 802516e:	d001      	beq.n	8025174 <cleanup_stdio+0x10>
 8025170:	f003 f902 	bl	8028378 <_fflush_r>
 8025174:	68a1      	ldr	r1, [r4, #8]
 8025176:	4b09      	ldr	r3, [pc, #36]	@ (802519c <cleanup_stdio+0x38>)
 8025178:	4299      	cmp	r1, r3
 802517a:	d002      	beq.n	8025182 <cleanup_stdio+0x1e>
 802517c:	4620      	mov	r0, r4
 802517e:	f003 f8fb 	bl	8028378 <_fflush_r>
 8025182:	68e1      	ldr	r1, [r4, #12]
 8025184:	4b06      	ldr	r3, [pc, #24]	@ (80251a0 <cleanup_stdio+0x3c>)
 8025186:	4299      	cmp	r1, r3
 8025188:	d004      	beq.n	8025194 <cleanup_stdio+0x30>
 802518a:	4620      	mov	r0, r4
 802518c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025190:	f003 b8f2 	b.w	8028378 <_fflush_r>
 8025194:	bd10      	pop	{r4, pc}
 8025196:	bf00      	nop
 8025198:	2400bfb8 	.word	0x2400bfb8
 802519c:	2400c020 	.word	0x2400c020
 80251a0:	2400c088 	.word	0x2400c088

080251a4 <global_stdio_init.part.0>:
 80251a4:	b510      	push	{r4, lr}
 80251a6:	4b0b      	ldr	r3, [pc, #44]	@ (80251d4 <global_stdio_init.part.0+0x30>)
 80251a8:	4c0b      	ldr	r4, [pc, #44]	@ (80251d8 <global_stdio_init.part.0+0x34>)
 80251aa:	4a0c      	ldr	r2, [pc, #48]	@ (80251dc <global_stdio_init.part.0+0x38>)
 80251ac:	601a      	str	r2, [r3, #0]
 80251ae:	4620      	mov	r0, r4
 80251b0:	2200      	movs	r2, #0
 80251b2:	2104      	movs	r1, #4
 80251b4:	f7ff ff94 	bl	80250e0 <std>
 80251b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80251bc:	2201      	movs	r2, #1
 80251be:	2109      	movs	r1, #9
 80251c0:	f7ff ff8e 	bl	80250e0 <std>
 80251c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80251c8:	2202      	movs	r2, #2
 80251ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80251ce:	2112      	movs	r1, #18
 80251d0:	f7ff bf86 	b.w	80250e0 <std>
 80251d4:	2400c0f0 	.word	0x2400c0f0
 80251d8:	2400bfb8 	.word	0x2400bfb8
 80251dc:	0802514d 	.word	0x0802514d

080251e0 <__sfp_lock_acquire>:
 80251e0:	4801      	ldr	r0, [pc, #4]	@ (80251e8 <__sfp_lock_acquire+0x8>)
 80251e2:	f000 b9ca 	b.w	802557a <__retarget_lock_acquire_recursive>
 80251e6:	bf00      	nop
 80251e8:	2400c0f5 	.word	0x2400c0f5

080251ec <__sfp_lock_release>:
 80251ec:	4801      	ldr	r0, [pc, #4]	@ (80251f4 <__sfp_lock_release+0x8>)
 80251ee:	f000 b9c5 	b.w	802557c <__retarget_lock_release_recursive>
 80251f2:	bf00      	nop
 80251f4:	2400c0f5 	.word	0x2400c0f5

080251f8 <__sinit>:
 80251f8:	b510      	push	{r4, lr}
 80251fa:	4604      	mov	r4, r0
 80251fc:	f7ff fff0 	bl	80251e0 <__sfp_lock_acquire>
 8025200:	6a23      	ldr	r3, [r4, #32]
 8025202:	b11b      	cbz	r3, 802520c <__sinit+0x14>
 8025204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025208:	f7ff bff0 	b.w	80251ec <__sfp_lock_release>
 802520c:	4b04      	ldr	r3, [pc, #16]	@ (8025220 <__sinit+0x28>)
 802520e:	6223      	str	r3, [r4, #32]
 8025210:	4b04      	ldr	r3, [pc, #16]	@ (8025224 <__sinit+0x2c>)
 8025212:	681b      	ldr	r3, [r3, #0]
 8025214:	2b00      	cmp	r3, #0
 8025216:	d1f5      	bne.n	8025204 <__sinit+0xc>
 8025218:	f7ff ffc4 	bl	80251a4 <global_stdio_init.part.0>
 802521c:	e7f2      	b.n	8025204 <__sinit+0xc>
 802521e:	bf00      	nop
 8025220:	08025165 	.word	0x08025165
 8025224:	2400c0f0 	.word	0x2400c0f0

08025228 <_fwalk_sglue>:
 8025228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802522c:	4607      	mov	r7, r0
 802522e:	4688      	mov	r8, r1
 8025230:	4614      	mov	r4, r2
 8025232:	2600      	movs	r6, #0
 8025234:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025238:	f1b9 0901 	subs.w	r9, r9, #1
 802523c:	d505      	bpl.n	802524a <_fwalk_sglue+0x22>
 802523e:	6824      	ldr	r4, [r4, #0]
 8025240:	2c00      	cmp	r4, #0
 8025242:	d1f7      	bne.n	8025234 <_fwalk_sglue+0xc>
 8025244:	4630      	mov	r0, r6
 8025246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802524a:	89ab      	ldrh	r3, [r5, #12]
 802524c:	2b01      	cmp	r3, #1
 802524e:	d907      	bls.n	8025260 <_fwalk_sglue+0x38>
 8025250:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025254:	3301      	adds	r3, #1
 8025256:	d003      	beq.n	8025260 <_fwalk_sglue+0x38>
 8025258:	4629      	mov	r1, r5
 802525a:	4638      	mov	r0, r7
 802525c:	47c0      	blx	r8
 802525e:	4306      	orrs	r6, r0
 8025260:	3568      	adds	r5, #104	@ 0x68
 8025262:	e7e9      	b.n	8025238 <_fwalk_sglue+0x10>

08025264 <iprintf>:
 8025264:	b40f      	push	{r0, r1, r2, r3}
 8025266:	b507      	push	{r0, r1, r2, lr}
 8025268:	4906      	ldr	r1, [pc, #24]	@ (8025284 <iprintf+0x20>)
 802526a:	ab04      	add	r3, sp, #16
 802526c:	6808      	ldr	r0, [r1, #0]
 802526e:	f853 2b04 	ldr.w	r2, [r3], #4
 8025272:	6881      	ldr	r1, [r0, #8]
 8025274:	9301      	str	r3, [sp, #4]
 8025276:	f002 fd95 	bl	8027da4 <_vfiprintf_r>
 802527a:	b003      	add	sp, #12
 802527c:	f85d eb04 	ldr.w	lr, [sp], #4
 8025280:	b004      	add	sp, #16
 8025282:	4770      	bx	lr
 8025284:	2400021c 	.word	0x2400021c

08025288 <siprintf>:
 8025288:	b40e      	push	{r1, r2, r3}
 802528a:	b500      	push	{lr}
 802528c:	b09c      	sub	sp, #112	@ 0x70
 802528e:	ab1d      	add	r3, sp, #116	@ 0x74
 8025290:	9002      	str	r0, [sp, #8]
 8025292:	9006      	str	r0, [sp, #24]
 8025294:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8025298:	4809      	ldr	r0, [pc, #36]	@ (80252c0 <siprintf+0x38>)
 802529a:	9107      	str	r1, [sp, #28]
 802529c:	9104      	str	r1, [sp, #16]
 802529e:	4909      	ldr	r1, [pc, #36]	@ (80252c4 <siprintf+0x3c>)
 80252a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80252a4:	9105      	str	r1, [sp, #20]
 80252a6:	6800      	ldr	r0, [r0, #0]
 80252a8:	9301      	str	r3, [sp, #4]
 80252aa:	a902      	add	r1, sp, #8
 80252ac:	f002 fa88 	bl	80277c0 <_svfiprintf_r>
 80252b0:	9b02      	ldr	r3, [sp, #8]
 80252b2:	2200      	movs	r2, #0
 80252b4:	701a      	strb	r2, [r3, #0]
 80252b6:	b01c      	add	sp, #112	@ 0x70
 80252b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80252bc:	b003      	add	sp, #12
 80252be:	4770      	bx	lr
 80252c0:	2400021c 	.word	0x2400021c
 80252c4:	ffff0208 	.word	0xffff0208

080252c8 <siscanf>:
 80252c8:	b40e      	push	{r1, r2, r3}
 80252ca:	b530      	push	{r4, r5, lr}
 80252cc:	b09c      	sub	sp, #112	@ 0x70
 80252ce:	ac1f      	add	r4, sp, #124	@ 0x7c
 80252d0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80252d4:	f854 5b04 	ldr.w	r5, [r4], #4
 80252d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80252dc:	9002      	str	r0, [sp, #8]
 80252de:	9006      	str	r0, [sp, #24]
 80252e0:	f7db f84e 	bl	8000380 <strlen>
 80252e4:	4b0b      	ldr	r3, [pc, #44]	@ (8025314 <siscanf+0x4c>)
 80252e6:	9003      	str	r0, [sp, #12]
 80252e8:	9007      	str	r0, [sp, #28]
 80252ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80252ec:	480a      	ldr	r0, [pc, #40]	@ (8025318 <siscanf+0x50>)
 80252ee:	9401      	str	r4, [sp, #4]
 80252f0:	2300      	movs	r3, #0
 80252f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80252f4:	9314      	str	r3, [sp, #80]	@ 0x50
 80252f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80252fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80252fe:	462a      	mov	r2, r5
 8025300:	4623      	mov	r3, r4
 8025302:	a902      	add	r1, sp, #8
 8025304:	6800      	ldr	r0, [r0, #0]
 8025306:	f002 fbaf 	bl	8027a68 <__ssvfiscanf_r>
 802530a:	b01c      	add	sp, #112	@ 0x70
 802530c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025310:	b003      	add	sp, #12
 8025312:	4770      	bx	lr
 8025314:	0802533f 	.word	0x0802533f
 8025318:	2400021c 	.word	0x2400021c

0802531c <__sread>:
 802531c:	b510      	push	{r4, lr}
 802531e:	460c      	mov	r4, r1
 8025320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025324:	f000 f8ca 	bl	80254bc <_read_r>
 8025328:	2800      	cmp	r0, #0
 802532a:	bfab      	itete	ge
 802532c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802532e:	89a3      	ldrhlt	r3, [r4, #12]
 8025330:	181b      	addge	r3, r3, r0
 8025332:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8025336:	bfac      	ite	ge
 8025338:	6563      	strge	r3, [r4, #84]	@ 0x54
 802533a:	81a3      	strhlt	r3, [r4, #12]
 802533c:	bd10      	pop	{r4, pc}

0802533e <__seofread>:
 802533e:	2000      	movs	r0, #0
 8025340:	4770      	bx	lr

08025342 <__swrite>:
 8025342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025346:	461f      	mov	r7, r3
 8025348:	898b      	ldrh	r3, [r1, #12]
 802534a:	05db      	lsls	r3, r3, #23
 802534c:	4605      	mov	r5, r0
 802534e:	460c      	mov	r4, r1
 8025350:	4616      	mov	r6, r2
 8025352:	d505      	bpl.n	8025360 <__swrite+0x1e>
 8025354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025358:	2302      	movs	r3, #2
 802535a:	2200      	movs	r2, #0
 802535c:	f000 f89c 	bl	8025498 <_lseek_r>
 8025360:	89a3      	ldrh	r3, [r4, #12]
 8025362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025366:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802536a:	81a3      	strh	r3, [r4, #12]
 802536c:	4632      	mov	r2, r6
 802536e:	463b      	mov	r3, r7
 8025370:	4628      	mov	r0, r5
 8025372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025376:	f000 b8c3 	b.w	8025500 <_write_r>

0802537a <__sseek>:
 802537a:	b510      	push	{r4, lr}
 802537c:	460c      	mov	r4, r1
 802537e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025382:	f000 f889 	bl	8025498 <_lseek_r>
 8025386:	1c43      	adds	r3, r0, #1
 8025388:	89a3      	ldrh	r3, [r4, #12]
 802538a:	bf15      	itete	ne
 802538c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802538e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8025392:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8025396:	81a3      	strheq	r3, [r4, #12]
 8025398:	bf18      	it	ne
 802539a:	81a3      	strhne	r3, [r4, #12]
 802539c:	bd10      	pop	{r4, pc}

0802539e <__sclose>:
 802539e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80253a2:	f000 b869 	b.w	8025478 <_close_r>
	...

080253a8 <_vsiprintf_r>:
 80253a8:	b500      	push	{lr}
 80253aa:	b09b      	sub	sp, #108	@ 0x6c
 80253ac:	9100      	str	r1, [sp, #0]
 80253ae:	9104      	str	r1, [sp, #16]
 80253b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80253b4:	9105      	str	r1, [sp, #20]
 80253b6:	9102      	str	r1, [sp, #8]
 80253b8:	4905      	ldr	r1, [pc, #20]	@ (80253d0 <_vsiprintf_r+0x28>)
 80253ba:	9103      	str	r1, [sp, #12]
 80253bc:	4669      	mov	r1, sp
 80253be:	f002 f9ff 	bl	80277c0 <_svfiprintf_r>
 80253c2:	9b00      	ldr	r3, [sp, #0]
 80253c4:	2200      	movs	r2, #0
 80253c6:	701a      	strb	r2, [r3, #0]
 80253c8:	b01b      	add	sp, #108	@ 0x6c
 80253ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80253ce:	bf00      	nop
 80253d0:	ffff0208 	.word	0xffff0208

080253d4 <vsiprintf>:
 80253d4:	4613      	mov	r3, r2
 80253d6:	460a      	mov	r2, r1
 80253d8:	4601      	mov	r1, r0
 80253da:	4802      	ldr	r0, [pc, #8]	@ (80253e4 <vsiprintf+0x10>)
 80253dc:	6800      	ldr	r0, [r0, #0]
 80253de:	f7ff bfe3 	b.w	80253a8 <_vsiprintf_r>
 80253e2:	bf00      	nop
 80253e4:	2400021c 	.word	0x2400021c

080253e8 <memcmp>:
 80253e8:	b510      	push	{r4, lr}
 80253ea:	3901      	subs	r1, #1
 80253ec:	4402      	add	r2, r0
 80253ee:	4290      	cmp	r0, r2
 80253f0:	d101      	bne.n	80253f6 <memcmp+0xe>
 80253f2:	2000      	movs	r0, #0
 80253f4:	e005      	b.n	8025402 <memcmp+0x1a>
 80253f6:	7803      	ldrb	r3, [r0, #0]
 80253f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80253fc:	42a3      	cmp	r3, r4
 80253fe:	d001      	beq.n	8025404 <memcmp+0x1c>
 8025400:	1b18      	subs	r0, r3, r4
 8025402:	bd10      	pop	{r4, pc}
 8025404:	3001      	adds	r0, #1
 8025406:	e7f2      	b.n	80253ee <memcmp+0x6>

08025408 <memmove>:
 8025408:	4288      	cmp	r0, r1
 802540a:	b510      	push	{r4, lr}
 802540c:	eb01 0402 	add.w	r4, r1, r2
 8025410:	d902      	bls.n	8025418 <memmove+0x10>
 8025412:	4284      	cmp	r4, r0
 8025414:	4623      	mov	r3, r4
 8025416:	d807      	bhi.n	8025428 <memmove+0x20>
 8025418:	1e43      	subs	r3, r0, #1
 802541a:	42a1      	cmp	r1, r4
 802541c:	d008      	beq.n	8025430 <memmove+0x28>
 802541e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025422:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025426:	e7f8      	b.n	802541a <memmove+0x12>
 8025428:	4402      	add	r2, r0
 802542a:	4601      	mov	r1, r0
 802542c:	428a      	cmp	r2, r1
 802542e:	d100      	bne.n	8025432 <memmove+0x2a>
 8025430:	bd10      	pop	{r4, pc}
 8025432:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025436:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802543a:	e7f7      	b.n	802542c <memmove+0x24>

0802543c <memset>:
 802543c:	4402      	add	r2, r0
 802543e:	4603      	mov	r3, r0
 8025440:	4293      	cmp	r3, r2
 8025442:	d100      	bne.n	8025446 <memset+0xa>
 8025444:	4770      	bx	lr
 8025446:	f803 1b01 	strb.w	r1, [r3], #1
 802544a:	e7f9      	b.n	8025440 <memset+0x4>

0802544c <strncmp>:
 802544c:	b510      	push	{r4, lr}
 802544e:	b16a      	cbz	r2, 802546c <strncmp+0x20>
 8025450:	3901      	subs	r1, #1
 8025452:	1884      	adds	r4, r0, r2
 8025454:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025458:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802545c:	429a      	cmp	r2, r3
 802545e:	d103      	bne.n	8025468 <strncmp+0x1c>
 8025460:	42a0      	cmp	r0, r4
 8025462:	d001      	beq.n	8025468 <strncmp+0x1c>
 8025464:	2a00      	cmp	r2, #0
 8025466:	d1f5      	bne.n	8025454 <strncmp+0x8>
 8025468:	1ad0      	subs	r0, r2, r3
 802546a:	bd10      	pop	{r4, pc}
 802546c:	4610      	mov	r0, r2
 802546e:	e7fc      	b.n	802546a <strncmp+0x1e>

08025470 <_localeconv_r>:
 8025470:	4800      	ldr	r0, [pc, #0]	@ (8025474 <_localeconv_r+0x4>)
 8025472:	4770      	bx	lr
 8025474:	2400035c 	.word	0x2400035c

08025478 <_close_r>:
 8025478:	b538      	push	{r3, r4, r5, lr}
 802547a:	4d06      	ldr	r5, [pc, #24]	@ (8025494 <_close_r+0x1c>)
 802547c:	2300      	movs	r3, #0
 802547e:	4604      	mov	r4, r0
 8025480:	4608      	mov	r0, r1
 8025482:	602b      	str	r3, [r5, #0]
 8025484:	f7df ffae 	bl	80053e4 <_close>
 8025488:	1c43      	adds	r3, r0, #1
 802548a:	d102      	bne.n	8025492 <_close_r+0x1a>
 802548c:	682b      	ldr	r3, [r5, #0]
 802548e:	b103      	cbz	r3, 8025492 <_close_r+0x1a>
 8025490:	6023      	str	r3, [r4, #0]
 8025492:	bd38      	pop	{r3, r4, r5, pc}
 8025494:	2400bfa8 	.word	0x2400bfa8

08025498 <_lseek_r>:
 8025498:	b538      	push	{r3, r4, r5, lr}
 802549a:	4d07      	ldr	r5, [pc, #28]	@ (80254b8 <_lseek_r+0x20>)
 802549c:	4604      	mov	r4, r0
 802549e:	4608      	mov	r0, r1
 80254a0:	4611      	mov	r1, r2
 80254a2:	2200      	movs	r2, #0
 80254a4:	602a      	str	r2, [r5, #0]
 80254a6:	461a      	mov	r2, r3
 80254a8:	f7df ffc3 	bl	8005432 <_lseek>
 80254ac:	1c43      	adds	r3, r0, #1
 80254ae:	d102      	bne.n	80254b6 <_lseek_r+0x1e>
 80254b0:	682b      	ldr	r3, [r5, #0]
 80254b2:	b103      	cbz	r3, 80254b6 <_lseek_r+0x1e>
 80254b4:	6023      	str	r3, [r4, #0]
 80254b6:	bd38      	pop	{r3, r4, r5, pc}
 80254b8:	2400bfa8 	.word	0x2400bfa8

080254bc <_read_r>:
 80254bc:	b538      	push	{r3, r4, r5, lr}
 80254be:	4d07      	ldr	r5, [pc, #28]	@ (80254dc <_read_r+0x20>)
 80254c0:	4604      	mov	r4, r0
 80254c2:	4608      	mov	r0, r1
 80254c4:	4611      	mov	r1, r2
 80254c6:	2200      	movs	r2, #0
 80254c8:	602a      	str	r2, [r5, #0]
 80254ca:	461a      	mov	r2, r3
 80254cc:	f7df ff51 	bl	8005372 <_read>
 80254d0:	1c43      	adds	r3, r0, #1
 80254d2:	d102      	bne.n	80254da <_read_r+0x1e>
 80254d4:	682b      	ldr	r3, [r5, #0]
 80254d6:	b103      	cbz	r3, 80254da <_read_r+0x1e>
 80254d8:	6023      	str	r3, [r4, #0]
 80254da:	bd38      	pop	{r3, r4, r5, pc}
 80254dc:	2400bfa8 	.word	0x2400bfa8

080254e0 <_sbrk_r>:
 80254e0:	b538      	push	{r3, r4, r5, lr}
 80254e2:	4d06      	ldr	r5, [pc, #24]	@ (80254fc <_sbrk_r+0x1c>)
 80254e4:	2300      	movs	r3, #0
 80254e6:	4604      	mov	r4, r0
 80254e8:	4608      	mov	r0, r1
 80254ea:	602b      	str	r3, [r5, #0]
 80254ec:	f7df ffae 	bl	800544c <_sbrk>
 80254f0:	1c43      	adds	r3, r0, #1
 80254f2:	d102      	bne.n	80254fa <_sbrk_r+0x1a>
 80254f4:	682b      	ldr	r3, [r5, #0]
 80254f6:	b103      	cbz	r3, 80254fa <_sbrk_r+0x1a>
 80254f8:	6023      	str	r3, [r4, #0]
 80254fa:	bd38      	pop	{r3, r4, r5, pc}
 80254fc:	2400bfa8 	.word	0x2400bfa8

08025500 <_write_r>:
 8025500:	b538      	push	{r3, r4, r5, lr}
 8025502:	4d07      	ldr	r5, [pc, #28]	@ (8025520 <_write_r+0x20>)
 8025504:	4604      	mov	r4, r0
 8025506:	4608      	mov	r0, r1
 8025508:	4611      	mov	r1, r2
 802550a:	2200      	movs	r2, #0
 802550c:	602a      	str	r2, [r5, #0]
 802550e:	461a      	mov	r2, r3
 8025510:	f7df ff4c 	bl	80053ac <_write>
 8025514:	1c43      	adds	r3, r0, #1
 8025516:	d102      	bne.n	802551e <_write_r+0x1e>
 8025518:	682b      	ldr	r3, [r5, #0]
 802551a:	b103      	cbz	r3, 802551e <_write_r+0x1e>
 802551c:	6023      	str	r3, [r4, #0]
 802551e:	bd38      	pop	{r3, r4, r5, pc}
 8025520:	2400bfa8 	.word	0x2400bfa8

08025524 <__errno>:
 8025524:	4b01      	ldr	r3, [pc, #4]	@ (802552c <__errno+0x8>)
 8025526:	6818      	ldr	r0, [r3, #0]
 8025528:	4770      	bx	lr
 802552a:	bf00      	nop
 802552c:	2400021c 	.word	0x2400021c

08025530 <__libc_init_array>:
 8025530:	b570      	push	{r4, r5, r6, lr}
 8025532:	4d0d      	ldr	r5, [pc, #52]	@ (8025568 <__libc_init_array+0x38>)
 8025534:	4c0d      	ldr	r4, [pc, #52]	@ (802556c <__libc_init_array+0x3c>)
 8025536:	1b64      	subs	r4, r4, r5
 8025538:	10a4      	asrs	r4, r4, #2
 802553a:	2600      	movs	r6, #0
 802553c:	42a6      	cmp	r6, r4
 802553e:	d109      	bne.n	8025554 <__libc_init_array+0x24>
 8025540:	4d0b      	ldr	r5, [pc, #44]	@ (8025570 <__libc_init_array+0x40>)
 8025542:	4c0c      	ldr	r4, [pc, #48]	@ (8025574 <__libc_init_array+0x44>)
 8025544:	f003 fd46 	bl	8028fd4 <_init>
 8025548:	1b64      	subs	r4, r4, r5
 802554a:	10a4      	asrs	r4, r4, #2
 802554c:	2600      	movs	r6, #0
 802554e:	42a6      	cmp	r6, r4
 8025550:	d105      	bne.n	802555e <__libc_init_array+0x2e>
 8025552:	bd70      	pop	{r4, r5, r6, pc}
 8025554:	f855 3b04 	ldr.w	r3, [r5], #4
 8025558:	4798      	blx	r3
 802555a:	3601      	adds	r6, #1
 802555c:	e7ee      	b.n	802553c <__libc_init_array+0xc>
 802555e:	f855 3b04 	ldr.w	r3, [r5], #4
 8025562:	4798      	blx	r3
 8025564:	3601      	adds	r6, #1
 8025566:	e7f2      	b.n	802554e <__libc_init_array+0x1e>
 8025568:	0802d3dc 	.word	0x0802d3dc
 802556c:	0802d3dc 	.word	0x0802d3dc
 8025570:	0802d3dc 	.word	0x0802d3dc
 8025574:	0802d3e0 	.word	0x0802d3e0

08025578 <__retarget_lock_init_recursive>:
 8025578:	4770      	bx	lr

0802557a <__retarget_lock_acquire_recursive>:
 802557a:	4770      	bx	lr

0802557c <__retarget_lock_release_recursive>:
 802557c:	4770      	bx	lr

0802557e <memcpy>:
 802557e:	440a      	add	r2, r1
 8025580:	4291      	cmp	r1, r2
 8025582:	f100 33ff 	add.w	r3, r0, #4294967295
 8025586:	d100      	bne.n	802558a <memcpy+0xc>
 8025588:	4770      	bx	lr
 802558a:	b510      	push	{r4, lr}
 802558c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025590:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025594:	4291      	cmp	r1, r2
 8025596:	d1f9      	bne.n	802558c <memcpy+0xe>
 8025598:	bd10      	pop	{r4, pc}
	...

0802559c <nanf>:
 802559c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80255a4 <nanf+0x8>
 80255a0:	4770      	bx	lr
 80255a2:	bf00      	nop
 80255a4:	7fc00000 	.word	0x7fc00000

080255a8 <__assert_func>:
 80255a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80255aa:	4614      	mov	r4, r2
 80255ac:	461a      	mov	r2, r3
 80255ae:	4b09      	ldr	r3, [pc, #36]	@ (80255d4 <__assert_func+0x2c>)
 80255b0:	681b      	ldr	r3, [r3, #0]
 80255b2:	4605      	mov	r5, r0
 80255b4:	68d8      	ldr	r0, [r3, #12]
 80255b6:	b954      	cbnz	r4, 80255ce <__assert_func+0x26>
 80255b8:	4b07      	ldr	r3, [pc, #28]	@ (80255d8 <__assert_func+0x30>)
 80255ba:	461c      	mov	r4, r3
 80255bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80255c0:	9100      	str	r1, [sp, #0]
 80255c2:	462b      	mov	r3, r5
 80255c4:	4905      	ldr	r1, [pc, #20]	@ (80255dc <__assert_func+0x34>)
 80255c6:	f002 feff 	bl	80283c8 <fiprintf>
 80255ca:	f003 f821 	bl	8028610 <abort>
 80255ce:	4b04      	ldr	r3, [pc, #16]	@ (80255e0 <__assert_func+0x38>)
 80255d0:	e7f4      	b.n	80255bc <__assert_func+0x14>
 80255d2:	bf00      	nop
 80255d4:	2400021c 	.word	0x2400021c
 80255d8:	0802d116 	.word	0x0802d116
 80255dc:	0802d0e8 	.word	0x0802d0e8
 80255e0:	0802d0db 	.word	0x0802d0db

080255e4 <quorem>:
 80255e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255e8:	6903      	ldr	r3, [r0, #16]
 80255ea:	690c      	ldr	r4, [r1, #16]
 80255ec:	42a3      	cmp	r3, r4
 80255ee:	4607      	mov	r7, r0
 80255f0:	db7e      	blt.n	80256f0 <quorem+0x10c>
 80255f2:	3c01      	subs	r4, #1
 80255f4:	f101 0814 	add.w	r8, r1, #20
 80255f8:	00a3      	lsls	r3, r4, #2
 80255fa:	f100 0514 	add.w	r5, r0, #20
 80255fe:	9300      	str	r3, [sp, #0]
 8025600:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025604:	9301      	str	r3, [sp, #4]
 8025606:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802560a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802560e:	3301      	adds	r3, #1
 8025610:	429a      	cmp	r2, r3
 8025612:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8025616:	fbb2 f6f3 	udiv	r6, r2, r3
 802561a:	d32e      	bcc.n	802567a <quorem+0x96>
 802561c:	f04f 0a00 	mov.w	sl, #0
 8025620:	46c4      	mov	ip, r8
 8025622:	46ae      	mov	lr, r5
 8025624:	46d3      	mov	fp, sl
 8025626:	f85c 3b04 	ldr.w	r3, [ip], #4
 802562a:	b298      	uxth	r0, r3
 802562c:	fb06 a000 	mla	r0, r6, r0, sl
 8025630:	0c02      	lsrs	r2, r0, #16
 8025632:	0c1b      	lsrs	r3, r3, #16
 8025634:	fb06 2303 	mla	r3, r6, r3, r2
 8025638:	f8de 2000 	ldr.w	r2, [lr]
 802563c:	b280      	uxth	r0, r0
 802563e:	b292      	uxth	r2, r2
 8025640:	1a12      	subs	r2, r2, r0
 8025642:	445a      	add	r2, fp
 8025644:	f8de 0000 	ldr.w	r0, [lr]
 8025648:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802564c:	b29b      	uxth	r3, r3
 802564e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8025652:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8025656:	b292      	uxth	r2, r2
 8025658:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802565c:	45e1      	cmp	r9, ip
 802565e:	f84e 2b04 	str.w	r2, [lr], #4
 8025662:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8025666:	d2de      	bcs.n	8025626 <quorem+0x42>
 8025668:	9b00      	ldr	r3, [sp, #0]
 802566a:	58eb      	ldr	r3, [r5, r3]
 802566c:	b92b      	cbnz	r3, 802567a <quorem+0x96>
 802566e:	9b01      	ldr	r3, [sp, #4]
 8025670:	3b04      	subs	r3, #4
 8025672:	429d      	cmp	r5, r3
 8025674:	461a      	mov	r2, r3
 8025676:	d32f      	bcc.n	80256d8 <quorem+0xf4>
 8025678:	613c      	str	r4, [r7, #16]
 802567a:	4638      	mov	r0, r7
 802567c:	f001 f8a0 	bl	80267c0 <__mcmp>
 8025680:	2800      	cmp	r0, #0
 8025682:	db25      	blt.n	80256d0 <quorem+0xec>
 8025684:	4629      	mov	r1, r5
 8025686:	2000      	movs	r0, #0
 8025688:	f858 2b04 	ldr.w	r2, [r8], #4
 802568c:	f8d1 c000 	ldr.w	ip, [r1]
 8025690:	fa1f fe82 	uxth.w	lr, r2
 8025694:	fa1f f38c 	uxth.w	r3, ip
 8025698:	eba3 030e 	sub.w	r3, r3, lr
 802569c:	4403      	add	r3, r0
 802569e:	0c12      	lsrs	r2, r2, #16
 80256a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80256a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80256a8:	b29b      	uxth	r3, r3
 80256aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80256ae:	45c1      	cmp	r9, r8
 80256b0:	f841 3b04 	str.w	r3, [r1], #4
 80256b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80256b8:	d2e6      	bcs.n	8025688 <quorem+0xa4>
 80256ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80256be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80256c2:	b922      	cbnz	r2, 80256ce <quorem+0xea>
 80256c4:	3b04      	subs	r3, #4
 80256c6:	429d      	cmp	r5, r3
 80256c8:	461a      	mov	r2, r3
 80256ca:	d30b      	bcc.n	80256e4 <quorem+0x100>
 80256cc:	613c      	str	r4, [r7, #16]
 80256ce:	3601      	adds	r6, #1
 80256d0:	4630      	mov	r0, r6
 80256d2:	b003      	add	sp, #12
 80256d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80256d8:	6812      	ldr	r2, [r2, #0]
 80256da:	3b04      	subs	r3, #4
 80256dc:	2a00      	cmp	r2, #0
 80256de:	d1cb      	bne.n	8025678 <quorem+0x94>
 80256e0:	3c01      	subs	r4, #1
 80256e2:	e7c6      	b.n	8025672 <quorem+0x8e>
 80256e4:	6812      	ldr	r2, [r2, #0]
 80256e6:	3b04      	subs	r3, #4
 80256e8:	2a00      	cmp	r2, #0
 80256ea:	d1ef      	bne.n	80256cc <quorem+0xe8>
 80256ec:	3c01      	subs	r4, #1
 80256ee:	e7ea      	b.n	80256c6 <quorem+0xe2>
 80256f0:	2000      	movs	r0, #0
 80256f2:	e7ee      	b.n	80256d2 <quorem+0xee>
 80256f4:	0000      	movs	r0, r0
	...

080256f8 <_dtoa_r>:
 80256f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80256fc:	ed2d 8b02 	vpush	{d8}
 8025700:	69c7      	ldr	r7, [r0, #28]
 8025702:	b091      	sub	sp, #68	@ 0x44
 8025704:	ed8d 0b02 	vstr	d0, [sp, #8]
 8025708:	ec55 4b10 	vmov	r4, r5, d0
 802570c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 802570e:	9107      	str	r1, [sp, #28]
 8025710:	4681      	mov	r9, r0
 8025712:	9209      	str	r2, [sp, #36]	@ 0x24
 8025714:	930d      	str	r3, [sp, #52]	@ 0x34
 8025716:	b97f      	cbnz	r7, 8025738 <_dtoa_r+0x40>
 8025718:	2010      	movs	r0, #16
 802571a:	f7fe fd27 	bl	802416c <malloc>
 802571e:	4602      	mov	r2, r0
 8025720:	f8c9 001c 	str.w	r0, [r9, #28]
 8025724:	b920      	cbnz	r0, 8025730 <_dtoa_r+0x38>
 8025726:	4ba0      	ldr	r3, [pc, #640]	@ (80259a8 <_dtoa_r+0x2b0>)
 8025728:	21ef      	movs	r1, #239	@ 0xef
 802572a:	48a0      	ldr	r0, [pc, #640]	@ (80259ac <_dtoa_r+0x2b4>)
 802572c:	f7ff ff3c 	bl	80255a8 <__assert_func>
 8025730:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8025734:	6007      	str	r7, [r0, #0]
 8025736:	60c7      	str	r7, [r0, #12]
 8025738:	f8d9 301c 	ldr.w	r3, [r9, #28]
 802573c:	6819      	ldr	r1, [r3, #0]
 802573e:	b159      	cbz	r1, 8025758 <_dtoa_r+0x60>
 8025740:	685a      	ldr	r2, [r3, #4]
 8025742:	604a      	str	r2, [r1, #4]
 8025744:	2301      	movs	r3, #1
 8025746:	4093      	lsls	r3, r2
 8025748:	608b      	str	r3, [r1, #8]
 802574a:	4648      	mov	r0, r9
 802574c:	f000 fdb4 	bl	80262b8 <_Bfree>
 8025750:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8025754:	2200      	movs	r2, #0
 8025756:	601a      	str	r2, [r3, #0]
 8025758:	1e2b      	subs	r3, r5, #0
 802575a:	bfbb      	ittet	lt
 802575c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8025760:	9303      	strlt	r3, [sp, #12]
 8025762:	2300      	movge	r3, #0
 8025764:	2201      	movlt	r2, #1
 8025766:	bfac      	ite	ge
 8025768:	6033      	strge	r3, [r6, #0]
 802576a:	6032      	strlt	r2, [r6, #0]
 802576c:	4b90      	ldr	r3, [pc, #576]	@ (80259b0 <_dtoa_r+0x2b8>)
 802576e:	9e03      	ldr	r6, [sp, #12]
 8025770:	43b3      	bics	r3, r6
 8025772:	d110      	bne.n	8025796 <_dtoa_r+0x9e>
 8025774:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025776:	f242 730f 	movw	r3, #9999	@ 0x270f
 802577a:	6013      	str	r3, [r2, #0]
 802577c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8025780:	4323      	orrs	r3, r4
 8025782:	f000 84de 	beq.w	8026142 <_dtoa_r+0xa4a>
 8025786:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025788:	4f8a      	ldr	r7, [pc, #552]	@ (80259b4 <_dtoa_r+0x2bc>)
 802578a:	2b00      	cmp	r3, #0
 802578c:	f000 84e0 	beq.w	8026150 <_dtoa_r+0xa58>
 8025790:	1cfb      	adds	r3, r7, #3
 8025792:	f000 bcdb 	b.w	802614c <_dtoa_r+0xa54>
 8025796:	ed9d 8b02 	vldr	d8, [sp, #8]
 802579a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802579e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80257a2:	d10a      	bne.n	80257ba <_dtoa_r+0xc2>
 80257a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80257a6:	2301      	movs	r3, #1
 80257a8:	6013      	str	r3, [r2, #0]
 80257aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80257ac:	b113      	cbz	r3, 80257b4 <_dtoa_r+0xbc>
 80257ae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80257b0:	4b81      	ldr	r3, [pc, #516]	@ (80259b8 <_dtoa_r+0x2c0>)
 80257b2:	6013      	str	r3, [r2, #0]
 80257b4:	4f81      	ldr	r7, [pc, #516]	@ (80259bc <_dtoa_r+0x2c4>)
 80257b6:	f000 bccb 	b.w	8026150 <_dtoa_r+0xa58>
 80257ba:	aa0e      	add	r2, sp, #56	@ 0x38
 80257bc:	a90f      	add	r1, sp, #60	@ 0x3c
 80257be:	4648      	mov	r0, r9
 80257c0:	eeb0 0b48 	vmov.f64	d0, d8
 80257c4:	f001 f91c 	bl	8026a00 <__d2b>
 80257c8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80257cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80257ce:	9001      	str	r0, [sp, #4]
 80257d0:	2b00      	cmp	r3, #0
 80257d2:	d045      	beq.n	8025860 <_dtoa_r+0x168>
 80257d4:	eeb0 7b48 	vmov.f64	d7, d8
 80257d8:	ee18 1a90 	vmov	r1, s17
 80257dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80257e0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80257e4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80257e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80257ec:	2500      	movs	r5, #0
 80257ee:	ee07 1a90 	vmov	s15, r1
 80257f2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80257f6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8025990 <_dtoa_r+0x298>
 80257fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80257fe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8025998 <_dtoa_r+0x2a0>
 8025802:	eea7 6b05 	vfma.f64	d6, d7, d5
 8025806:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80259a0 <_dtoa_r+0x2a8>
 802580a:	ee07 3a90 	vmov	s15, r3
 802580e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8025812:	eeb0 7b46 	vmov.f64	d7, d6
 8025816:	eea4 7b05 	vfma.f64	d7, d4, d5
 802581a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802581e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8025822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025826:	ee16 8a90 	vmov	r8, s13
 802582a:	d508      	bpl.n	802583e <_dtoa_r+0x146>
 802582c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8025830:	eeb4 6b47 	vcmp.f64	d6, d7
 8025834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025838:	bf18      	it	ne
 802583a:	f108 38ff 	addne.w	r8, r8, #4294967295
 802583e:	f1b8 0f16 	cmp.w	r8, #22
 8025842:	d82b      	bhi.n	802589c <_dtoa_r+0x1a4>
 8025844:	495e      	ldr	r1, [pc, #376]	@ (80259c0 <_dtoa_r+0x2c8>)
 8025846:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 802584a:	ed91 7b00 	vldr	d7, [r1]
 802584e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8025852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025856:	d501      	bpl.n	802585c <_dtoa_r+0x164>
 8025858:	f108 38ff 	add.w	r8, r8, #4294967295
 802585c:	2100      	movs	r1, #0
 802585e:	e01e      	b.n	802589e <_dtoa_r+0x1a6>
 8025860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025862:	4413      	add	r3, r2
 8025864:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8025868:	2920      	cmp	r1, #32
 802586a:	bfc1      	itttt	gt
 802586c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8025870:	408e      	lslgt	r6, r1
 8025872:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8025876:	fa24 f101 	lsrgt.w	r1, r4, r1
 802587a:	bfd6      	itet	le
 802587c:	f1c1 0120 	rsble	r1, r1, #32
 8025880:	4331      	orrgt	r1, r6
 8025882:	fa04 f101 	lslle.w	r1, r4, r1
 8025886:	ee07 1a90 	vmov	s15, r1
 802588a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802588e:	3b01      	subs	r3, #1
 8025890:	ee17 1a90 	vmov	r1, s15
 8025894:	2501      	movs	r5, #1
 8025896:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 802589a:	e7a8      	b.n	80257ee <_dtoa_r+0xf6>
 802589c:	2101      	movs	r1, #1
 802589e:	1ad2      	subs	r2, r2, r3
 80258a0:	1e53      	subs	r3, r2, #1
 80258a2:	9306      	str	r3, [sp, #24]
 80258a4:	bf45      	ittet	mi
 80258a6:	f1c2 0301 	rsbmi	r3, r2, #1
 80258aa:	9305      	strmi	r3, [sp, #20]
 80258ac:	2300      	movpl	r3, #0
 80258ae:	2300      	movmi	r3, #0
 80258b0:	bf4c      	ite	mi
 80258b2:	9306      	strmi	r3, [sp, #24]
 80258b4:	9305      	strpl	r3, [sp, #20]
 80258b6:	f1b8 0f00 	cmp.w	r8, #0
 80258ba:	910c      	str	r1, [sp, #48]	@ 0x30
 80258bc:	db18      	blt.n	80258f0 <_dtoa_r+0x1f8>
 80258be:	9b06      	ldr	r3, [sp, #24]
 80258c0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80258c4:	4443      	add	r3, r8
 80258c6:	9306      	str	r3, [sp, #24]
 80258c8:	2300      	movs	r3, #0
 80258ca:	9a07      	ldr	r2, [sp, #28]
 80258cc:	2a09      	cmp	r2, #9
 80258ce:	d849      	bhi.n	8025964 <_dtoa_r+0x26c>
 80258d0:	2a05      	cmp	r2, #5
 80258d2:	bfc4      	itt	gt
 80258d4:	3a04      	subgt	r2, #4
 80258d6:	9207      	strgt	r2, [sp, #28]
 80258d8:	9a07      	ldr	r2, [sp, #28]
 80258da:	f1a2 0202 	sub.w	r2, r2, #2
 80258de:	bfcc      	ite	gt
 80258e0:	2400      	movgt	r4, #0
 80258e2:	2401      	movle	r4, #1
 80258e4:	2a03      	cmp	r2, #3
 80258e6:	d848      	bhi.n	802597a <_dtoa_r+0x282>
 80258e8:	e8df f002 	tbb	[pc, r2]
 80258ec:	3a2c2e0b 	.word	0x3a2c2e0b
 80258f0:	9b05      	ldr	r3, [sp, #20]
 80258f2:	2200      	movs	r2, #0
 80258f4:	eba3 0308 	sub.w	r3, r3, r8
 80258f8:	9305      	str	r3, [sp, #20]
 80258fa:	920a      	str	r2, [sp, #40]	@ 0x28
 80258fc:	f1c8 0300 	rsb	r3, r8, #0
 8025900:	e7e3      	b.n	80258ca <_dtoa_r+0x1d2>
 8025902:	2200      	movs	r2, #0
 8025904:	9208      	str	r2, [sp, #32]
 8025906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025908:	2a00      	cmp	r2, #0
 802590a:	dc39      	bgt.n	8025980 <_dtoa_r+0x288>
 802590c:	f04f 0b01 	mov.w	fp, #1
 8025910:	46da      	mov	sl, fp
 8025912:	465a      	mov	r2, fp
 8025914:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8025918:	f8d9 701c 	ldr.w	r7, [r9, #28]
 802591c:	2100      	movs	r1, #0
 802591e:	2004      	movs	r0, #4
 8025920:	f100 0614 	add.w	r6, r0, #20
 8025924:	4296      	cmp	r6, r2
 8025926:	d930      	bls.n	802598a <_dtoa_r+0x292>
 8025928:	6079      	str	r1, [r7, #4]
 802592a:	4648      	mov	r0, r9
 802592c:	9304      	str	r3, [sp, #16]
 802592e:	f000 fc83 	bl	8026238 <_Balloc>
 8025932:	9b04      	ldr	r3, [sp, #16]
 8025934:	4607      	mov	r7, r0
 8025936:	2800      	cmp	r0, #0
 8025938:	d146      	bne.n	80259c8 <_dtoa_r+0x2d0>
 802593a:	4b22      	ldr	r3, [pc, #136]	@ (80259c4 <_dtoa_r+0x2cc>)
 802593c:	4602      	mov	r2, r0
 802593e:	f240 11af 	movw	r1, #431	@ 0x1af
 8025942:	e6f2      	b.n	802572a <_dtoa_r+0x32>
 8025944:	2201      	movs	r2, #1
 8025946:	e7dd      	b.n	8025904 <_dtoa_r+0x20c>
 8025948:	2200      	movs	r2, #0
 802594a:	9208      	str	r2, [sp, #32]
 802594c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802594e:	eb08 0b02 	add.w	fp, r8, r2
 8025952:	f10b 0a01 	add.w	sl, fp, #1
 8025956:	4652      	mov	r2, sl
 8025958:	2a01      	cmp	r2, #1
 802595a:	bfb8      	it	lt
 802595c:	2201      	movlt	r2, #1
 802595e:	e7db      	b.n	8025918 <_dtoa_r+0x220>
 8025960:	2201      	movs	r2, #1
 8025962:	e7f2      	b.n	802594a <_dtoa_r+0x252>
 8025964:	2401      	movs	r4, #1
 8025966:	2200      	movs	r2, #0
 8025968:	e9cd 2407 	strd	r2, r4, [sp, #28]
 802596c:	f04f 3bff 	mov.w	fp, #4294967295
 8025970:	2100      	movs	r1, #0
 8025972:	46da      	mov	sl, fp
 8025974:	2212      	movs	r2, #18
 8025976:	9109      	str	r1, [sp, #36]	@ 0x24
 8025978:	e7ce      	b.n	8025918 <_dtoa_r+0x220>
 802597a:	2201      	movs	r2, #1
 802597c:	9208      	str	r2, [sp, #32]
 802597e:	e7f5      	b.n	802596c <_dtoa_r+0x274>
 8025980:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8025984:	46da      	mov	sl, fp
 8025986:	465a      	mov	r2, fp
 8025988:	e7c6      	b.n	8025918 <_dtoa_r+0x220>
 802598a:	3101      	adds	r1, #1
 802598c:	0040      	lsls	r0, r0, #1
 802598e:	e7c7      	b.n	8025920 <_dtoa_r+0x228>
 8025990:	636f4361 	.word	0x636f4361
 8025994:	3fd287a7 	.word	0x3fd287a7
 8025998:	8b60c8b3 	.word	0x8b60c8b3
 802599c:	3fc68a28 	.word	0x3fc68a28
 80259a0:	509f79fb 	.word	0x509f79fb
 80259a4:	3fd34413 	.word	0x3fd34413
 80259a8:	0802cf34 	.word	0x0802cf34
 80259ac:	0802d124 	.word	0x0802d124
 80259b0:	7ff00000 	.word	0x7ff00000
 80259b4:	0802d120 	.word	0x0802d120
 80259b8:	0802d368 	.word	0x0802d368
 80259bc:	0802d367 	.word	0x0802d367
 80259c0:	0802d220 	.word	0x0802d220
 80259c4:	0802d17c 	.word	0x0802d17c
 80259c8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80259cc:	f1ba 0f0e 	cmp.w	sl, #14
 80259d0:	6010      	str	r0, [r2, #0]
 80259d2:	d86f      	bhi.n	8025ab4 <_dtoa_r+0x3bc>
 80259d4:	2c00      	cmp	r4, #0
 80259d6:	d06d      	beq.n	8025ab4 <_dtoa_r+0x3bc>
 80259d8:	f1b8 0f00 	cmp.w	r8, #0
 80259dc:	f340 80c2 	ble.w	8025b64 <_dtoa_r+0x46c>
 80259e0:	4aca      	ldr	r2, [pc, #808]	@ (8025d0c <_dtoa_r+0x614>)
 80259e2:	f008 010f 	and.w	r1, r8, #15
 80259e6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80259ea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80259ee:	ed92 7b00 	vldr	d7, [r2]
 80259f2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80259f6:	f000 80a9 	beq.w	8025b4c <_dtoa_r+0x454>
 80259fa:	4ac5      	ldr	r2, [pc, #788]	@ (8025d10 <_dtoa_r+0x618>)
 80259fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8025a00:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8025a04:	ed8d 6b02 	vstr	d6, [sp, #8]
 8025a08:	f001 010f 	and.w	r1, r1, #15
 8025a0c:	2203      	movs	r2, #3
 8025a0e:	48c0      	ldr	r0, [pc, #768]	@ (8025d10 <_dtoa_r+0x618>)
 8025a10:	2900      	cmp	r1, #0
 8025a12:	f040 809d 	bne.w	8025b50 <_dtoa_r+0x458>
 8025a16:	ed9d 6b02 	vldr	d6, [sp, #8]
 8025a1a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8025a1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025a22:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8025a24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025a28:	2900      	cmp	r1, #0
 8025a2a:	f000 80c1 	beq.w	8025bb0 <_dtoa_r+0x4b8>
 8025a2e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8025a32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8025a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a3a:	f140 80b9 	bpl.w	8025bb0 <_dtoa_r+0x4b8>
 8025a3e:	f1ba 0f00 	cmp.w	sl, #0
 8025a42:	f000 80b5 	beq.w	8025bb0 <_dtoa_r+0x4b8>
 8025a46:	f1bb 0f00 	cmp.w	fp, #0
 8025a4a:	dd31      	ble.n	8025ab0 <_dtoa_r+0x3b8>
 8025a4c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8025a50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025a54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025a58:	f108 31ff 	add.w	r1, r8, #4294967295
 8025a5c:	9104      	str	r1, [sp, #16]
 8025a5e:	3201      	adds	r2, #1
 8025a60:	465c      	mov	r4, fp
 8025a62:	ed9d 6b02 	vldr	d6, [sp, #8]
 8025a66:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8025a6a:	ee07 2a90 	vmov	s15, r2
 8025a6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8025a72:	eea7 5b06 	vfma.f64	d5, d7, d6
 8025a76:	ee15 2a90 	vmov	r2, s11
 8025a7a:	ec51 0b15 	vmov	r0, r1, d5
 8025a7e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8025a82:	2c00      	cmp	r4, #0
 8025a84:	f040 8098 	bne.w	8025bb8 <_dtoa_r+0x4c0>
 8025a88:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8025a8c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8025a90:	ec41 0b17 	vmov	d7, r0, r1
 8025a94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a9c:	f300 8261 	bgt.w	8025f62 <_dtoa_r+0x86a>
 8025aa0:	eeb1 7b47 	vneg.f64	d7, d7
 8025aa4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025aac:	f100 80f5 	bmi.w	8025c9a <_dtoa_r+0x5a2>
 8025ab0:	ed8d 8b02 	vstr	d8, [sp, #8]
 8025ab4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025ab6:	2a00      	cmp	r2, #0
 8025ab8:	f2c0 812c 	blt.w	8025d14 <_dtoa_r+0x61c>
 8025abc:	f1b8 0f0e 	cmp.w	r8, #14
 8025ac0:	f300 8128 	bgt.w	8025d14 <_dtoa_r+0x61c>
 8025ac4:	4b91      	ldr	r3, [pc, #580]	@ (8025d0c <_dtoa_r+0x614>)
 8025ac6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8025aca:	ed93 6b00 	vldr	d6, [r3]
 8025ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025ad0:	2b00      	cmp	r3, #0
 8025ad2:	da03      	bge.n	8025adc <_dtoa_r+0x3e4>
 8025ad4:	f1ba 0f00 	cmp.w	sl, #0
 8025ad8:	f340 80d2 	ble.w	8025c80 <_dtoa_r+0x588>
 8025adc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8025ae0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025ae4:	463e      	mov	r6, r7
 8025ae6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8025aea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8025aee:	ee15 3a10 	vmov	r3, s10
 8025af2:	3330      	adds	r3, #48	@ 0x30
 8025af4:	f806 3b01 	strb.w	r3, [r6], #1
 8025af8:	1bf3      	subs	r3, r6, r7
 8025afa:	459a      	cmp	sl, r3
 8025afc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8025b00:	eea3 7b46 	vfms.f64	d7, d3, d6
 8025b04:	f040 80f8 	bne.w	8025cf8 <_dtoa_r+0x600>
 8025b08:	ee37 7b07 	vadd.f64	d7, d7, d7
 8025b0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8025b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b14:	f300 80dd 	bgt.w	8025cd2 <_dtoa_r+0x5da>
 8025b18:	eeb4 7b46 	vcmp.f64	d7, d6
 8025b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b20:	d104      	bne.n	8025b2c <_dtoa_r+0x434>
 8025b22:	ee15 3a10 	vmov	r3, s10
 8025b26:	07db      	lsls	r3, r3, #31
 8025b28:	f100 80d3 	bmi.w	8025cd2 <_dtoa_r+0x5da>
 8025b2c:	9901      	ldr	r1, [sp, #4]
 8025b2e:	4648      	mov	r0, r9
 8025b30:	f000 fbc2 	bl	80262b8 <_Bfree>
 8025b34:	2300      	movs	r3, #0
 8025b36:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025b38:	7033      	strb	r3, [r6, #0]
 8025b3a:	f108 0301 	add.w	r3, r8, #1
 8025b3e:	6013      	str	r3, [r2, #0]
 8025b40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025b42:	2b00      	cmp	r3, #0
 8025b44:	f000 8304 	beq.w	8026150 <_dtoa_r+0xa58>
 8025b48:	601e      	str	r6, [r3, #0]
 8025b4a:	e301      	b.n	8026150 <_dtoa_r+0xa58>
 8025b4c:	2202      	movs	r2, #2
 8025b4e:	e75e      	b.n	8025a0e <_dtoa_r+0x316>
 8025b50:	07cc      	lsls	r4, r1, #31
 8025b52:	d504      	bpl.n	8025b5e <_dtoa_r+0x466>
 8025b54:	ed90 6b00 	vldr	d6, [r0]
 8025b58:	3201      	adds	r2, #1
 8025b5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025b5e:	1049      	asrs	r1, r1, #1
 8025b60:	3008      	adds	r0, #8
 8025b62:	e755      	b.n	8025a10 <_dtoa_r+0x318>
 8025b64:	d022      	beq.n	8025bac <_dtoa_r+0x4b4>
 8025b66:	f1c8 0100 	rsb	r1, r8, #0
 8025b6a:	4a68      	ldr	r2, [pc, #416]	@ (8025d0c <_dtoa_r+0x614>)
 8025b6c:	f001 000f 	and.w	r0, r1, #15
 8025b70:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8025b74:	ed92 7b00 	vldr	d7, [r2]
 8025b78:	ee28 7b07 	vmul.f64	d7, d8, d7
 8025b7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025b80:	4863      	ldr	r0, [pc, #396]	@ (8025d10 <_dtoa_r+0x618>)
 8025b82:	1109      	asrs	r1, r1, #4
 8025b84:	2400      	movs	r4, #0
 8025b86:	2202      	movs	r2, #2
 8025b88:	b929      	cbnz	r1, 8025b96 <_dtoa_r+0x49e>
 8025b8a:	2c00      	cmp	r4, #0
 8025b8c:	f43f af49 	beq.w	8025a22 <_dtoa_r+0x32a>
 8025b90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025b94:	e745      	b.n	8025a22 <_dtoa_r+0x32a>
 8025b96:	07ce      	lsls	r6, r1, #31
 8025b98:	d505      	bpl.n	8025ba6 <_dtoa_r+0x4ae>
 8025b9a:	ed90 6b00 	vldr	d6, [r0]
 8025b9e:	3201      	adds	r2, #1
 8025ba0:	2401      	movs	r4, #1
 8025ba2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025ba6:	1049      	asrs	r1, r1, #1
 8025ba8:	3008      	adds	r0, #8
 8025baa:	e7ed      	b.n	8025b88 <_dtoa_r+0x490>
 8025bac:	2202      	movs	r2, #2
 8025bae:	e738      	b.n	8025a22 <_dtoa_r+0x32a>
 8025bb0:	f8cd 8010 	str.w	r8, [sp, #16]
 8025bb4:	4654      	mov	r4, sl
 8025bb6:	e754      	b.n	8025a62 <_dtoa_r+0x36a>
 8025bb8:	4a54      	ldr	r2, [pc, #336]	@ (8025d0c <_dtoa_r+0x614>)
 8025bba:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8025bbe:	ed12 4b02 	vldr	d4, [r2, #-8]
 8025bc2:	9a08      	ldr	r2, [sp, #32]
 8025bc4:	ec41 0b17 	vmov	d7, r0, r1
 8025bc8:	443c      	add	r4, r7
 8025bca:	b34a      	cbz	r2, 8025c20 <_dtoa_r+0x528>
 8025bcc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8025bd0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8025bd4:	463e      	mov	r6, r7
 8025bd6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8025bda:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8025bde:	ee35 7b47 	vsub.f64	d7, d5, d7
 8025be2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8025be6:	ee14 2a90 	vmov	r2, s9
 8025bea:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8025bee:	3230      	adds	r2, #48	@ 0x30
 8025bf0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8025bf4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025bfc:	f806 2b01 	strb.w	r2, [r6], #1
 8025c00:	d438      	bmi.n	8025c74 <_dtoa_r+0x57c>
 8025c02:	ee32 5b46 	vsub.f64	d5, d2, d6
 8025c06:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8025c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c0e:	d462      	bmi.n	8025cd6 <_dtoa_r+0x5de>
 8025c10:	42a6      	cmp	r6, r4
 8025c12:	f43f af4d 	beq.w	8025ab0 <_dtoa_r+0x3b8>
 8025c16:	ee27 7b03 	vmul.f64	d7, d7, d3
 8025c1a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8025c1e:	e7e0      	b.n	8025be2 <_dtoa_r+0x4ea>
 8025c20:	4621      	mov	r1, r4
 8025c22:	463e      	mov	r6, r7
 8025c24:	ee27 7b04 	vmul.f64	d7, d7, d4
 8025c28:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8025c2c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8025c30:	ee14 2a90 	vmov	r2, s9
 8025c34:	3230      	adds	r2, #48	@ 0x30
 8025c36:	f806 2b01 	strb.w	r2, [r6], #1
 8025c3a:	42a6      	cmp	r6, r4
 8025c3c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8025c40:	ee36 6b45 	vsub.f64	d6, d6, d5
 8025c44:	d119      	bne.n	8025c7a <_dtoa_r+0x582>
 8025c46:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8025c4a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8025c4e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8025c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c56:	dc3e      	bgt.n	8025cd6 <_dtoa_r+0x5de>
 8025c58:	ee35 5b47 	vsub.f64	d5, d5, d7
 8025c5c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8025c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c64:	f57f af24 	bpl.w	8025ab0 <_dtoa_r+0x3b8>
 8025c68:	460e      	mov	r6, r1
 8025c6a:	3901      	subs	r1, #1
 8025c6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8025c70:	2b30      	cmp	r3, #48	@ 0x30
 8025c72:	d0f9      	beq.n	8025c68 <_dtoa_r+0x570>
 8025c74:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8025c78:	e758      	b.n	8025b2c <_dtoa_r+0x434>
 8025c7a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8025c7e:	e7d5      	b.n	8025c2c <_dtoa_r+0x534>
 8025c80:	d10b      	bne.n	8025c9a <_dtoa_r+0x5a2>
 8025c82:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8025c86:	ee26 6b07 	vmul.f64	d6, d6, d7
 8025c8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025c8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c96:	f2c0 8161 	blt.w	8025f5c <_dtoa_r+0x864>
 8025c9a:	2400      	movs	r4, #0
 8025c9c:	4625      	mov	r5, r4
 8025c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025ca0:	43db      	mvns	r3, r3
 8025ca2:	9304      	str	r3, [sp, #16]
 8025ca4:	463e      	mov	r6, r7
 8025ca6:	f04f 0800 	mov.w	r8, #0
 8025caa:	4621      	mov	r1, r4
 8025cac:	4648      	mov	r0, r9
 8025cae:	f000 fb03 	bl	80262b8 <_Bfree>
 8025cb2:	2d00      	cmp	r5, #0
 8025cb4:	d0de      	beq.n	8025c74 <_dtoa_r+0x57c>
 8025cb6:	f1b8 0f00 	cmp.w	r8, #0
 8025cba:	d005      	beq.n	8025cc8 <_dtoa_r+0x5d0>
 8025cbc:	45a8      	cmp	r8, r5
 8025cbe:	d003      	beq.n	8025cc8 <_dtoa_r+0x5d0>
 8025cc0:	4641      	mov	r1, r8
 8025cc2:	4648      	mov	r0, r9
 8025cc4:	f000 faf8 	bl	80262b8 <_Bfree>
 8025cc8:	4629      	mov	r1, r5
 8025cca:	4648      	mov	r0, r9
 8025ccc:	f000 faf4 	bl	80262b8 <_Bfree>
 8025cd0:	e7d0      	b.n	8025c74 <_dtoa_r+0x57c>
 8025cd2:	f8cd 8010 	str.w	r8, [sp, #16]
 8025cd6:	4633      	mov	r3, r6
 8025cd8:	461e      	mov	r6, r3
 8025cda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025cde:	2a39      	cmp	r2, #57	@ 0x39
 8025ce0:	d106      	bne.n	8025cf0 <_dtoa_r+0x5f8>
 8025ce2:	429f      	cmp	r7, r3
 8025ce4:	d1f8      	bne.n	8025cd8 <_dtoa_r+0x5e0>
 8025ce6:	9a04      	ldr	r2, [sp, #16]
 8025ce8:	3201      	adds	r2, #1
 8025cea:	9204      	str	r2, [sp, #16]
 8025cec:	2230      	movs	r2, #48	@ 0x30
 8025cee:	703a      	strb	r2, [r7, #0]
 8025cf0:	781a      	ldrb	r2, [r3, #0]
 8025cf2:	3201      	adds	r2, #1
 8025cf4:	701a      	strb	r2, [r3, #0]
 8025cf6:	e7bd      	b.n	8025c74 <_dtoa_r+0x57c>
 8025cf8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8025cfc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d04:	f47f aeef 	bne.w	8025ae6 <_dtoa_r+0x3ee>
 8025d08:	e710      	b.n	8025b2c <_dtoa_r+0x434>
 8025d0a:	bf00      	nop
 8025d0c:	0802d220 	.word	0x0802d220
 8025d10:	0802d1f8 	.word	0x0802d1f8
 8025d14:	9908      	ldr	r1, [sp, #32]
 8025d16:	2900      	cmp	r1, #0
 8025d18:	f000 80e3 	beq.w	8025ee2 <_dtoa_r+0x7ea>
 8025d1c:	9907      	ldr	r1, [sp, #28]
 8025d1e:	2901      	cmp	r1, #1
 8025d20:	f300 80c8 	bgt.w	8025eb4 <_dtoa_r+0x7bc>
 8025d24:	2d00      	cmp	r5, #0
 8025d26:	f000 80c1 	beq.w	8025eac <_dtoa_r+0x7b4>
 8025d2a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8025d2e:	9e05      	ldr	r6, [sp, #20]
 8025d30:	461c      	mov	r4, r3
 8025d32:	9304      	str	r3, [sp, #16]
 8025d34:	9b05      	ldr	r3, [sp, #20]
 8025d36:	4413      	add	r3, r2
 8025d38:	9305      	str	r3, [sp, #20]
 8025d3a:	9b06      	ldr	r3, [sp, #24]
 8025d3c:	2101      	movs	r1, #1
 8025d3e:	4413      	add	r3, r2
 8025d40:	4648      	mov	r0, r9
 8025d42:	9306      	str	r3, [sp, #24]
 8025d44:	f000 fbb6 	bl	80264b4 <__i2b>
 8025d48:	9b04      	ldr	r3, [sp, #16]
 8025d4a:	4605      	mov	r5, r0
 8025d4c:	b166      	cbz	r6, 8025d68 <_dtoa_r+0x670>
 8025d4e:	9a06      	ldr	r2, [sp, #24]
 8025d50:	2a00      	cmp	r2, #0
 8025d52:	dd09      	ble.n	8025d68 <_dtoa_r+0x670>
 8025d54:	42b2      	cmp	r2, r6
 8025d56:	9905      	ldr	r1, [sp, #20]
 8025d58:	bfa8      	it	ge
 8025d5a:	4632      	movge	r2, r6
 8025d5c:	1a89      	subs	r1, r1, r2
 8025d5e:	9105      	str	r1, [sp, #20]
 8025d60:	9906      	ldr	r1, [sp, #24]
 8025d62:	1ab6      	subs	r6, r6, r2
 8025d64:	1a8a      	subs	r2, r1, r2
 8025d66:	9206      	str	r2, [sp, #24]
 8025d68:	b1fb      	cbz	r3, 8025daa <_dtoa_r+0x6b2>
 8025d6a:	9a08      	ldr	r2, [sp, #32]
 8025d6c:	2a00      	cmp	r2, #0
 8025d6e:	f000 80bc 	beq.w	8025eea <_dtoa_r+0x7f2>
 8025d72:	b19c      	cbz	r4, 8025d9c <_dtoa_r+0x6a4>
 8025d74:	4629      	mov	r1, r5
 8025d76:	4622      	mov	r2, r4
 8025d78:	4648      	mov	r0, r9
 8025d7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025d7c:	f000 fc5a 	bl	8026634 <__pow5mult>
 8025d80:	9a01      	ldr	r2, [sp, #4]
 8025d82:	4601      	mov	r1, r0
 8025d84:	4605      	mov	r5, r0
 8025d86:	4648      	mov	r0, r9
 8025d88:	f000 fbaa 	bl	80264e0 <__multiply>
 8025d8c:	9901      	ldr	r1, [sp, #4]
 8025d8e:	9004      	str	r0, [sp, #16]
 8025d90:	4648      	mov	r0, r9
 8025d92:	f000 fa91 	bl	80262b8 <_Bfree>
 8025d96:	9a04      	ldr	r2, [sp, #16]
 8025d98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025d9a:	9201      	str	r2, [sp, #4]
 8025d9c:	1b1a      	subs	r2, r3, r4
 8025d9e:	d004      	beq.n	8025daa <_dtoa_r+0x6b2>
 8025da0:	9901      	ldr	r1, [sp, #4]
 8025da2:	4648      	mov	r0, r9
 8025da4:	f000 fc46 	bl	8026634 <__pow5mult>
 8025da8:	9001      	str	r0, [sp, #4]
 8025daa:	2101      	movs	r1, #1
 8025dac:	4648      	mov	r0, r9
 8025dae:	f000 fb81 	bl	80264b4 <__i2b>
 8025db2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025db4:	4604      	mov	r4, r0
 8025db6:	2b00      	cmp	r3, #0
 8025db8:	f000 81d0 	beq.w	802615c <_dtoa_r+0xa64>
 8025dbc:	461a      	mov	r2, r3
 8025dbe:	4601      	mov	r1, r0
 8025dc0:	4648      	mov	r0, r9
 8025dc2:	f000 fc37 	bl	8026634 <__pow5mult>
 8025dc6:	9b07      	ldr	r3, [sp, #28]
 8025dc8:	2b01      	cmp	r3, #1
 8025dca:	4604      	mov	r4, r0
 8025dcc:	f300 8095 	bgt.w	8025efa <_dtoa_r+0x802>
 8025dd0:	9b02      	ldr	r3, [sp, #8]
 8025dd2:	2b00      	cmp	r3, #0
 8025dd4:	f040 808b 	bne.w	8025eee <_dtoa_r+0x7f6>
 8025dd8:	9b03      	ldr	r3, [sp, #12]
 8025dda:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8025dde:	2a00      	cmp	r2, #0
 8025de0:	f040 8087 	bne.w	8025ef2 <_dtoa_r+0x7fa>
 8025de4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8025de8:	0d12      	lsrs	r2, r2, #20
 8025dea:	0512      	lsls	r2, r2, #20
 8025dec:	2a00      	cmp	r2, #0
 8025dee:	f000 8082 	beq.w	8025ef6 <_dtoa_r+0x7fe>
 8025df2:	9b05      	ldr	r3, [sp, #20]
 8025df4:	3301      	adds	r3, #1
 8025df6:	9305      	str	r3, [sp, #20]
 8025df8:	9b06      	ldr	r3, [sp, #24]
 8025dfa:	3301      	adds	r3, #1
 8025dfc:	9306      	str	r3, [sp, #24]
 8025dfe:	2301      	movs	r3, #1
 8025e00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025e02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025e04:	2b00      	cmp	r3, #0
 8025e06:	f000 81af 	beq.w	8026168 <_dtoa_r+0xa70>
 8025e0a:	6922      	ldr	r2, [r4, #16]
 8025e0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8025e10:	6910      	ldr	r0, [r2, #16]
 8025e12:	f000 fb03 	bl	802641c <__hi0bits>
 8025e16:	f1c0 0020 	rsb	r0, r0, #32
 8025e1a:	9b06      	ldr	r3, [sp, #24]
 8025e1c:	4418      	add	r0, r3
 8025e1e:	f010 001f 	ands.w	r0, r0, #31
 8025e22:	d076      	beq.n	8025f12 <_dtoa_r+0x81a>
 8025e24:	f1c0 0220 	rsb	r2, r0, #32
 8025e28:	2a04      	cmp	r2, #4
 8025e2a:	dd69      	ble.n	8025f00 <_dtoa_r+0x808>
 8025e2c:	9b05      	ldr	r3, [sp, #20]
 8025e2e:	f1c0 001c 	rsb	r0, r0, #28
 8025e32:	4403      	add	r3, r0
 8025e34:	9305      	str	r3, [sp, #20]
 8025e36:	9b06      	ldr	r3, [sp, #24]
 8025e38:	4406      	add	r6, r0
 8025e3a:	4403      	add	r3, r0
 8025e3c:	9306      	str	r3, [sp, #24]
 8025e3e:	9b05      	ldr	r3, [sp, #20]
 8025e40:	2b00      	cmp	r3, #0
 8025e42:	dd05      	ble.n	8025e50 <_dtoa_r+0x758>
 8025e44:	9901      	ldr	r1, [sp, #4]
 8025e46:	461a      	mov	r2, r3
 8025e48:	4648      	mov	r0, r9
 8025e4a:	f000 fc4d 	bl	80266e8 <__lshift>
 8025e4e:	9001      	str	r0, [sp, #4]
 8025e50:	9b06      	ldr	r3, [sp, #24]
 8025e52:	2b00      	cmp	r3, #0
 8025e54:	dd05      	ble.n	8025e62 <_dtoa_r+0x76a>
 8025e56:	4621      	mov	r1, r4
 8025e58:	461a      	mov	r2, r3
 8025e5a:	4648      	mov	r0, r9
 8025e5c:	f000 fc44 	bl	80266e8 <__lshift>
 8025e60:	4604      	mov	r4, r0
 8025e62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025e64:	2b00      	cmp	r3, #0
 8025e66:	d056      	beq.n	8025f16 <_dtoa_r+0x81e>
 8025e68:	9801      	ldr	r0, [sp, #4]
 8025e6a:	4621      	mov	r1, r4
 8025e6c:	f000 fca8 	bl	80267c0 <__mcmp>
 8025e70:	2800      	cmp	r0, #0
 8025e72:	da50      	bge.n	8025f16 <_dtoa_r+0x81e>
 8025e74:	f108 33ff 	add.w	r3, r8, #4294967295
 8025e78:	9304      	str	r3, [sp, #16]
 8025e7a:	9901      	ldr	r1, [sp, #4]
 8025e7c:	2300      	movs	r3, #0
 8025e7e:	220a      	movs	r2, #10
 8025e80:	4648      	mov	r0, r9
 8025e82:	f000 fa3b 	bl	80262fc <__multadd>
 8025e86:	9b08      	ldr	r3, [sp, #32]
 8025e88:	9001      	str	r0, [sp, #4]
 8025e8a:	2b00      	cmp	r3, #0
 8025e8c:	f000 816e 	beq.w	802616c <_dtoa_r+0xa74>
 8025e90:	4629      	mov	r1, r5
 8025e92:	2300      	movs	r3, #0
 8025e94:	220a      	movs	r2, #10
 8025e96:	4648      	mov	r0, r9
 8025e98:	f000 fa30 	bl	80262fc <__multadd>
 8025e9c:	f1bb 0f00 	cmp.w	fp, #0
 8025ea0:	4605      	mov	r5, r0
 8025ea2:	dc64      	bgt.n	8025f6e <_dtoa_r+0x876>
 8025ea4:	9b07      	ldr	r3, [sp, #28]
 8025ea6:	2b02      	cmp	r3, #2
 8025ea8:	dc3e      	bgt.n	8025f28 <_dtoa_r+0x830>
 8025eaa:	e060      	b.n	8025f6e <_dtoa_r+0x876>
 8025eac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025eae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8025eb2:	e73c      	b.n	8025d2e <_dtoa_r+0x636>
 8025eb4:	f10a 34ff 	add.w	r4, sl, #4294967295
 8025eb8:	42a3      	cmp	r3, r4
 8025eba:	bfbf      	itttt	lt
 8025ebc:	1ae2      	sublt	r2, r4, r3
 8025ebe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8025ec0:	189b      	addlt	r3, r3, r2
 8025ec2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8025ec4:	bfae      	itee	ge
 8025ec6:	1b1c      	subge	r4, r3, r4
 8025ec8:	4623      	movlt	r3, r4
 8025eca:	2400      	movlt	r4, #0
 8025ecc:	f1ba 0f00 	cmp.w	sl, #0
 8025ed0:	bfb5      	itete	lt
 8025ed2:	9a05      	ldrlt	r2, [sp, #20]
 8025ed4:	9e05      	ldrge	r6, [sp, #20]
 8025ed6:	eba2 060a 	sublt.w	r6, r2, sl
 8025eda:	4652      	movge	r2, sl
 8025edc:	bfb8      	it	lt
 8025ede:	2200      	movlt	r2, #0
 8025ee0:	e727      	b.n	8025d32 <_dtoa_r+0x63a>
 8025ee2:	9e05      	ldr	r6, [sp, #20]
 8025ee4:	9d08      	ldr	r5, [sp, #32]
 8025ee6:	461c      	mov	r4, r3
 8025ee8:	e730      	b.n	8025d4c <_dtoa_r+0x654>
 8025eea:	461a      	mov	r2, r3
 8025eec:	e758      	b.n	8025da0 <_dtoa_r+0x6a8>
 8025eee:	2300      	movs	r3, #0
 8025ef0:	e786      	b.n	8025e00 <_dtoa_r+0x708>
 8025ef2:	9b02      	ldr	r3, [sp, #8]
 8025ef4:	e784      	b.n	8025e00 <_dtoa_r+0x708>
 8025ef6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8025ef8:	e783      	b.n	8025e02 <_dtoa_r+0x70a>
 8025efa:	2300      	movs	r3, #0
 8025efc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025efe:	e784      	b.n	8025e0a <_dtoa_r+0x712>
 8025f00:	d09d      	beq.n	8025e3e <_dtoa_r+0x746>
 8025f02:	9b05      	ldr	r3, [sp, #20]
 8025f04:	321c      	adds	r2, #28
 8025f06:	4413      	add	r3, r2
 8025f08:	9305      	str	r3, [sp, #20]
 8025f0a:	9b06      	ldr	r3, [sp, #24]
 8025f0c:	4416      	add	r6, r2
 8025f0e:	4413      	add	r3, r2
 8025f10:	e794      	b.n	8025e3c <_dtoa_r+0x744>
 8025f12:	4602      	mov	r2, r0
 8025f14:	e7f5      	b.n	8025f02 <_dtoa_r+0x80a>
 8025f16:	f1ba 0f00 	cmp.w	sl, #0
 8025f1a:	f8cd 8010 	str.w	r8, [sp, #16]
 8025f1e:	46d3      	mov	fp, sl
 8025f20:	dc21      	bgt.n	8025f66 <_dtoa_r+0x86e>
 8025f22:	9b07      	ldr	r3, [sp, #28]
 8025f24:	2b02      	cmp	r3, #2
 8025f26:	dd1e      	ble.n	8025f66 <_dtoa_r+0x86e>
 8025f28:	f1bb 0f00 	cmp.w	fp, #0
 8025f2c:	f47f aeb7 	bne.w	8025c9e <_dtoa_r+0x5a6>
 8025f30:	4621      	mov	r1, r4
 8025f32:	465b      	mov	r3, fp
 8025f34:	2205      	movs	r2, #5
 8025f36:	4648      	mov	r0, r9
 8025f38:	f000 f9e0 	bl	80262fc <__multadd>
 8025f3c:	4601      	mov	r1, r0
 8025f3e:	4604      	mov	r4, r0
 8025f40:	9801      	ldr	r0, [sp, #4]
 8025f42:	f000 fc3d 	bl	80267c0 <__mcmp>
 8025f46:	2800      	cmp	r0, #0
 8025f48:	f77f aea9 	ble.w	8025c9e <_dtoa_r+0x5a6>
 8025f4c:	463e      	mov	r6, r7
 8025f4e:	2331      	movs	r3, #49	@ 0x31
 8025f50:	f806 3b01 	strb.w	r3, [r6], #1
 8025f54:	9b04      	ldr	r3, [sp, #16]
 8025f56:	3301      	adds	r3, #1
 8025f58:	9304      	str	r3, [sp, #16]
 8025f5a:	e6a4      	b.n	8025ca6 <_dtoa_r+0x5ae>
 8025f5c:	f8cd 8010 	str.w	r8, [sp, #16]
 8025f60:	4654      	mov	r4, sl
 8025f62:	4625      	mov	r5, r4
 8025f64:	e7f2      	b.n	8025f4c <_dtoa_r+0x854>
 8025f66:	9b08      	ldr	r3, [sp, #32]
 8025f68:	2b00      	cmp	r3, #0
 8025f6a:	f000 8103 	beq.w	8026174 <_dtoa_r+0xa7c>
 8025f6e:	2e00      	cmp	r6, #0
 8025f70:	dd05      	ble.n	8025f7e <_dtoa_r+0x886>
 8025f72:	4629      	mov	r1, r5
 8025f74:	4632      	mov	r2, r6
 8025f76:	4648      	mov	r0, r9
 8025f78:	f000 fbb6 	bl	80266e8 <__lshift>
 8025f7c:	4605      	mov	r5, r0
 8025f7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025f80:	2b00      	cmp	r3, #0
 8025f82:	d058      	beq.n	8026036 <_dtoa_r+0x93e>
 8025f84:	6869      	ldr	r1, [r5, #4]
 8025f86:	4648      	mov	r0, r9
 8025f88:	f000 f956 	bl	8026238 <_Balloc>
 8025f8c:	4606      	mov	r6, r0
 8025f8e:	b928      	cbnz	r0, 8025f9c <_dtoa_r+0x8a4>
 8025f90:	4b82      	ldr	r3, [pc, #520]	@ (802619c <_dtoa_r+0xaa4>)
 8025f92:	4602      	mov	r2, r0
 8025f94:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8025f98:	f7ff bbc7 	b.w	802572a <_dtoa_r+0x32>
 8025f9c:	692a      	ldr	r2, [r5, #16]
 8025f9e:	3202      	adds	r2, #2
 8025fa0:	0092      	lsls	r2, r2, #2
 8025fa2:	f105 010c 	add.w	r1, r5, #12
 8025fa6:	300c      	adds	r0, #12
 8025fa8:	f7ff fae9 	bl	802557e <memcpy>
 8025fac:	2201      	movs	r2, #1
 8025fae:	4631      	mov	r1, r6
 8025fb0:	4648      	mov	r0, r9
 8025fb2:	f000 fb99 	bl	80266e8 <__lshift>
 8025fb6:	1c7b      	adds	r3, r7, #1
 8025fb8:	9305      	str	r3, [sp, #20]
 8025fba:	eb07 030b 	add.w	r3, r7, fp
 8025fbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8025fc0:	9b02      	ldr	r3, [sp, #8]
 8025fc2:	f003 0301 	and.w	r3, r3, #1
 8025fc6:	46a8      	mov	r8, r5
 8025fc8:	9308      	str	r3, [sp, #32]
 8025fca:	4605      	mov	r5, r0
 8025fcc:	9b05      	ldr	r3, [sp, #20]
 8025fce:	9801      	ldr	r0, [sp, #4]
 8025fd0:	4621      	mov	r1, r4
 8025fd2:	f103 3bff 	add.w	fp, r3, #4294967295
 8025fd6:	f7ff fb05 	bl	80255e4 <quorem>
 8025fda:	4641      	mov	r1, r8
 8025fdc:	9002      	str	r0, [sp, #8]
 8025fde:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8025fe2:	9801      	ldr	r0, [sp, #4]
 8025fe4:	f000 fbec 	bl	80267c0 <__mcmp>
 8025fe8:	462a      	mov	r2, r5
 8025fea:	9006      	str	r0, [sp, #24]
 8025fec:	4621      	mov	r1, r4
 8025fee:	4648      	mov	r0, r9
 8025ff0:	f000 fc02 	bl	80267f8 <__mdiff>
 8025ff4:	68c2      	ldr	r2, [r0, #12]
 8025ff6:	4606      	mov	r6, r0
 8025ff8:	b9fa      	cbnz	r2, 802603a <_dtoa_r+0x942>
 8025ffa:	4601      	mov	r1, r0
 8025ffc:	9801      	ldr	r0, [sp, #4]
 8025ffe:	f000 fbdf 	bl	80267c0 <__mcmp>
 8026002:	4602      	mov	r2, r0
 8026004:	4631      	mov	r1, r6
 8026006:	4648      	mov	r0, r9
 8026008:	920a      	str	r2, [sp, #40]	@ 0x28
 802600a:	f000 f955 	bl	80262b8 <_Bfree>
 802600e:	9b07      	ldr	r3, [sp, #28]
 8026010:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026012:	9e05      	ldr	r6, [sp, #20]
 8026014:	ea43 0102 	orr.w	r1, r3, r2
 8026018:	9b08      	ldr	r3, [sp, #32]
 802601a:	4319      	orrs	r1, r3
 802601c:	d10f      	bne.n	802603e <_dtoa_r+0x946>
 802601e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8026022:	d028      	beq.n	8026076 <_dtoa_r+0x97e>
 8026024:	9b06      	ldr	r3, [sp, #24]
 8026026:	2b00      	cmp	r3, #0
 8026028:	dd02      	ble.n	8026030 <_dtoa_r+0x938>
 802602a:	9b02      	ldr	r3, [sp, #8]
 802602c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8026030:	f88b a000 	strb.w	sl, [fp]
 8026034:	e639      	b.n	8025caa <_dtoa_r+0x5b2>
 8026036:	4628      	mov	r0, r5
 8026038:	e7bd      	b.n	8025fb6 <_dtoa_r+0x8be>
 802603a:	2201      	movs	r2, #1
 802603c:	e7e2      	b.n	8026004 <_dtoa_r+0x90c>
 802603e:	9b06      	ldr	r3, [sp, #24]
 8026040:	2b00      	cmp	r3, #0
 8026042:	db04      	blt.n	802604e <_dtoa_r+0x956>
 8026044:	9907      	ldr	r1, [sp, #28]
 8026046:	430b      	orrs	r3, r1
 8026048:	9908      	ldr	r1, [sp, #32]
 802604a:	430b      	orrs	r3, r1
 802604c:	d120      	bne.n	8026090 <_dtoa_r+0x998>
 802604e:	2a00      	cmp	r2, #0
 8026050:	ddee      	ble.n	8026030 <_dtoa_r+0x938>
 8026052:	9901      	ldr	r1, [sp, #4]
 8026054:	2201      	movs	r2, #1
 8026056:	4648      	mov	r0, r9
 8026058:	f000 fb46 	bl	80266e8 <__lshift>
 802605c:	4621      	mov	r1, r4
 802605e:	9001      	str	r0, [sp, #4]
 8026060:	f000 fbae 	bl	80267c0 <__mcmp>
 8026064:	2800      	cmp	r0, #0
 8026066:	dc03      	bgt.n	8026070 <_dtoa_r+0x978>
 8026068:	d1e2      	bne.n	8026030 <_dtoa_r+0x938>
 802606a:	f01a 0f01 	tst.w	sl, #1
 802606e:	d0df      	beq.n	8026030 <_dtoa_r+0x938>
 8026070:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8026074:	d1d9      	bne.n	802602a <_dtoa_r+0x932>
 8026076:	2339      	movs	r3, #57	@ 0x39
 8026078:	f88b 3000 	strb.w	r3, [fp]
 802607c:	4633      	mov	r3, r6
 802607e:	461e      	mov	r6, r3
 8026080:	3b01      	subs	r3, #1
 8026082:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8026086:	2a39      	cmp	r2, #57	@ 0x39
 8026088:	d053      	beq.n	8026132 <_dtoa_r+0xa3a>
 802608a:	3201      	adds	r2, #1
 802608c:	701a      	strb	r2, [r3, #0]
 802608e:	e60c      	b.n	8025caa <_dtoa_r+0x5b2>
 8026090:	2a00      	cmp	r2, #0
 8026092:	dd07      	ble.n	80260a4 <_dtoa_r+0x9ac>
 8026094:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8026098:	d0ed      	beq.n	8026076 <_dtoa_r+0x97e>
 802609a:	f10a 0301 	add.w	r3, sl, #1
 802609e:	f88b 3000 	strb.w	r3, [fp]
 80260a2:	e602      	b.n	8025caa <_dtoa_r+0x5b2>
 80260a4:	9b05      	ldr	r3, [sp, #20]
 80260a6:	9a05      	ldr	r2, [sp, #20]
 80260a8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80260ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80260ae:	4293      	cmp	r3, r2
 80260b0:	d029      	beq.n	8026106 <_dtoa_r+0xa0e>
 80260b2:	9901      	ldr	r1, [sp, #4]
 80260b4:	2300      	movs	r3, #0
 80260b6:	220a      	movs	r2, #10
 80260b8:	4648      	mov	r0, r9
 80260ba:	f000 f91f 	bl	80262fc <__multadd>
 80260be:	45a8      	cmp	r8, r5
 80260c0:	9001      	str	r0, [sp, #4]
 80260c2:	f04f 0300 	mov.w	r3, #0
 80260c6:	f04f 020a 	mov.w	r2, #10
 80260ca:	4641      	mov	r1, r8
 80260cc:	4648      	mov	r0, r9
 80260ce:	d107      	bne.n	80260e0 <_dtoa_r+0x9e8>
 80260d0:	f000 f914 	bl	80262fc <__multadd>
 80260d4:	4680      	mov	r8, r0
 80260d6:	4605      	mov	r5, r0
 80260d8:	9b05      	ldr	r3, [sp, #20]
 80260da:	3301      	adds	r3, #1
 80260dc:	9305      	str	r3, [sp, #20]
 80260de:	e775      	b.n	8025fcc <_dtoa_r+0x8d4>
 80260e0:	f000 f90c 	bl	80262fc <__multadd>
 80260e4:	4629      	mov	r1, r5
 80260e6:	4680      	mov	r8, r0
 80260e8:	2300      	movs	r3, #0
 80260ea:	220a      	movs	r2, #10
 80260ec:	4648      	mov	r0, r9
 80260ee:	f000 f905 	bl	80262fc <__multadd>
 80260f2:	4605      	mov	r5, r0
 80260f4:	e7f0      	b.n	80260d8 <_dtoa_r+0x9e0>
 80260f6:	f1bb 0f00 	cmp.w	fp, #0
 80260fa:	bfcc      	ite	gt
 80260fc:	465e      	movgt	r6, fp
 80260fe:	2601      	movle	r6, #1
 8026100:	443e      	add	r6, r7
 8026102:	f04f 0800 	mov.w	r8, #0
 8026106:	9901      	ldr	r1, [sp, #4]
 8026108:	2201      	movs	r2, #1
 802610a:	4648      	mov	r0, r9
 802610c:	f000 faec 	bl	80266e8 <__lshift>
 8026110:	4621      	mov	r1, r4
 8026112:	9001      	str	r0, [sp, #4]
 8026114:	f000 fb54 	bl	80267c0 <__mcmp>
 8026118:	2800      	cmp	r0, #0
 802611a:	dcaf      	bgt.n	802607c <_dtoa_r+0x984>
 802611c:	d102      	bne.n	8026124 <_dtoa_r+0xa2c>
 802611e:	f01a 0f01 	tst.w	sl, #1
 8026122:	d1ab      	bne.n	802607c <_dtoa_r+0x984>
 8026124:	4633      	mov	r3, r6
 8026126:	461e      	mov	r6, r3
 8026128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802612c:	2a30      	cmp	r2, #48	@ 0x30
 802612e:	d0fa      	beq.n	8026126 <_dtoa_r+0xa2e>
 8026130:	e5bb      	b.n	8025caa <_dtoa_r+0x5b2>
 8026132:	429f      	cmp	r7, r3
 8026134:	d1a3      	bne.n	802607e <_dtoa_r+0x986>
 8026136:	9b04      	ldr	r3, [sp, #16]
 8026138:	3301      	adds	r3, #1
 802613a:	9304      	str	r3, [sp, #16]
 802613c:	2331      	movs	r3, #49	@ 0x31
 802613e:	703b      	strb	r3, [r7, #0]
 8026140:	e5b3      	b.n	8025caa <_dtoa_r+0x5b2>
 8026142:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8026144:	4f16      	ldr	r7, [pc, #88]	@ (80261a0 <_dtoa_r+0xaa8>)
 8026146:	b11b      	cbz	r3, 8026150 <_dtoa_r+0xa58>
 8026148:	f107 0308 	add.w	r3, r7, #8
 802614c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 802614e:	6013      	str	r3, [r2, #0]
 8026150:	4638      	mov	r0, r7
 8026152:	b011      	add	sp, #68	@ 0x44
 8026154:	ecbd 8b02 	vpop	{d8}
 8026158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802615c:	9b07      	ldr	r3, [sp, #28]
 802615e:	2b01      	cmp	r3, #1
 8026160:	f77f ae36 	ble.w	8025dd0 <_dtoa_r+0x6d8>
 8026164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026166:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026168:	2001      	movs	r0, #1
 802616a:	e656      	b.n	8025e1a <_dtoa_r+0x722>
 802616c:	f1bb 0f00 	cmp.w	fp, #0
 8026170:	f77f aed7 	ble.w	8025f22 <_dtoa_r+0x82a>
 8026174:	463e      	mov	r6, r7
 8026176:	9801      	ldr	r0, [sp, #4]
 8026178:	4621      	mov	r1, r4
 802617a:	f7ff fa33 	bl	80255e4 <quorem>
 802617e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8026182:	f806 ab01 	strb.w	sl, [r6], #1
 8026186:	1bf2      	subs	r2, r6, r7
 8026188:	4593      	cmp	fp, r2
 802618a:	ddb4      	ble.n	80260f6 <_dtoa_r+0x9fe>
 802618c:	9901      	ldr	r1, [sp, #4]
 802618e:	2300      	movs	r3, #0
 8026190:	220a      	movs	r2, #10
 8026192:	4648      	mov	r0, r9
 8026194:	f000 f8b2 	bl	80262fc <__multadd>
 8026198:	9001      	str	r0, [sp, #4]
 802619a:	e7ec      	b.n	8026176 <_dtoa_r+0xa7e>
 802619c:	0802d17c 	.word	0x0802d17c
 80261a0:	0802d117 	.word	0x0802d117

080261a4 <_free_r>:
 80261a4:	b538      	push	{r3, r4, r5, lr}
 80261a6:	4605      	mov	r5, r0
 80261a8:	2900      	cmp	r1, #0
 80261aa:	d041      	beq.n	8026230 <_free_r+0x8c>
 80261ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80261b0:	1f0c      	subs	r4, r1, #4
 80261b2:	2b00      	cmp	r3, #0
 80261b4:	bfb8      	it	lt
 80261b6:	18e4      	addlt	r4, r4, r3
 80261b8:	f7fe f88a 	bl	80242d0 <__malloc_lock>
 80261bc:	4a1d      	ldr	r2, [pc, #116]	@ (8026234 <_free_r+0x90>)
 80261be:	6813      	ldr	r3, [r2, #0]
 80261c0:	b933      	cbnz	r3, 80261d0 <_free_r+0x2c>
 80261c2:	6063      	str	r3, [r4, #4]
 80261c4:	6014      	str	r4, [r2, #0]
 80261c6:	4628      	mov	r0, r5
 80261c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80261cc:	f7fe b886 	b.w	80242dc <__malloc_unlock>
 80261d0:	42a3      	cmp	r3, r4
 80261d2:	d908      	bls.n	80261e6 <_free_r+0x42>
 80261d4:	6820      	ldr	r0, [r4, #0]
 80261d6:	1821      	adds	r1, r4, r0
 80261d8:	428b      	cmp	r3, r1
 80261da:	bf01      	itttt	eq
 80261dc:	6819      	ldreq	r1, [r3, #0]
 80261de:	685b      	ldreq	r3, [r3, #4]
 80261e0:	1809      	addeq	r1, r1, r0
 80261e2:	6021      	streq	r1, [r4, #0]
 80261e4:	e7ed      	b.n	80261c2 <_free_r+0x1e>
 80261e6:	461a      	mov	r2, r3
 80261e8:	685b      	ldr	r3, [r3, #4]
 80261ea:	b10b      	cbz	r3, 80261f0 <_free_r+0x4c>
 80261ec:	42a3      	cmp	r3, r4
 80261ee:	d9fa      	bls.n	80261e6 <_free_r+0x42>
 80261f0:	6811      	ldr	r1, [r2, #0]
 80261f2:	1850      	adds	r0, r2, r1
 80261f4:	42a0      	cmp	r0, r4
 80261f6:	d10b      	bne.n	8026210 <_free_r+0x6c>
 80261f8:	6820      	ldr	r0, [r4, #0]
 80261fa:	4401      	add	r1, r0
 80261fc:	1850      	adds	r0, r2, r1
 80261fe:	4283      	cmp	r3, r0
 8026200:	6011      	str	r1, [r2, #0]
 8026202:	d1e0      	bne.n	80261c6 <_free_r+0x22>
 8026204:	6818      	ldr	r0, [r3, #0]
 8026206:	685b      	ldr	r3, [r3, #4]
 8026208:	6053      	str	r3, [r2, #4]
 802620a:	4408      	add	r0, r1
 802620c:	6010      	str	r0, [r2, #0]
 802620e:	e7da      	b.n	80261c6 <_free_r+0x22>
 8026210:	d902      	bls.n	8026218 <_free_r+0x74>
 8026212:	230c      	movs	r3, #12
 8026214:	602b      	str	r3, [r5, #0]
 8026216:	e7d6      	b.n	80261c6 <_free_r+0x22>
 8026218:	6820      	ldr	r0, [r4, #0]
 802621a:	1821      	adds	r1, r4, r0
 802621c:	428b      	cmp	r3, r1
 802621e:	bf04      	itt	eq
 8026220:	6819      	ldreq	r1, [r3, #0]
 8026222:	685b      	ldreq	r3, [r3, #4]
 8026224:	6063      	str	r3, [r4, #4]
 8026226:	bf04      	itt	eq
 8026228:	1809      	addeq	r1, r1, r0
 802622a:	6021      	streq	r1, [r4, #0]
 802622c:	6054      	str	r4, [r2, #4]
 802622e:	e7ca      	b.n	80261c6 <_free_r+0x22>
 8026230:	bd38      	pop	{r3, r4, r5, pc}
 8026232:	bf00      	nop
 8026234:	2400bfb4 	.word	0x2400bfb4

08026238 <_Balloc>:
 8026238:	b570      	push	{r4, r5, r6, lr}
 802623a:	69c6      	ldr	r6, [r0, #28]
 802623c:	4604      	mov	r4, r0
 802623e:	460d      	mov	r5, r1
 8026240:	b976      	cbnz	r6, 8026260 <_Balloc+0x28>
 8026242:	2010      	movs	r0, #16
 8026244:	f7fd ff92 	bl	802416c <malloc>
 8026248:	4602      	mov	r2, r0
 802624a:	61e0      	str	r0, [r4, #28]
 802624c:	b920      	cbnz	r0, 8026258 <_Balloc+0x20>
 802624e:	4b18      	ldr	r3, [pc, #96]	@ (80262b0 <_Balloc+0x78>)
 8026250:	4818      	ldr	r0, [pc, #96]	@ (80262b4 <_Balloc+0x7c>)
 8026252:	216b      	movs	r1, #107	@ 0x6b
 8026254:	f7ff f9a8 	bl	80255a8 <__assert_func>
 8026258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802625c:	6006      	str	r6, [r0, #0]
 802625e:	60c6      	str	r6, [r0, #12]
 8026260:	69e6      	ldr	r6, [r4, #28]
 8026262:	68f3      	ldr	r3, [r6, #12]
 8026264:	b183      	cbz	r3, 8026288 <_Balloc+0x50>
 8026266:	69e3      	ldr	r3, [r4, #28]
 8026268:	68db      	ldr	r3, [r3, #12]
 802626a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802626e:	b9b8      	cbnz	r0, 80262a0 <_Balloc+0x68>
 8026270:	2101      	movs	r1, #1
 8026272:	fa01 f605 	lsl.w	r6, r1, r5
 8026276:	1d72      	adds	r2, r6, #5
 8026278:	0092      	lsls	r2, r2, #2
 802627a:	4620      	mov	r0, r4
 802627c:	f002 f9cf 	bl	802861e <_calloc_r>
 8026280:	b160      	cbz	r0, 802629c <_Balloc+0x64>
 8026282:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8026286:	e00e      	b.n	80262a6 <_Balloc+0x6e>
 8026288:	2221      	movs	r2, #33	@ 0x21
 802628a:	2104      	movs	r1, #4
 802628c:	4620      	mov	r0, r4
 802628e:	f002 f9c6 	bl	802861e <_calloc_r>
 8026292:	69e3      	ldr	r3, [r4, #28]
 8026294:	60f0      	str	r0, [r6, #12]
 8026296:	68db      	ldr	r3, [r3, #12]
 8026298:	2b00      	cmp	r3, #0
 802629a:	d1e4      	bne.n	8026266 <_Balloc+0x2e>
 802629c:	2000      	movs	r0, #0
 802629e:	bd70      	pop	{r4, r5, r6, pc}
 80262a0:	6802      	ldr	r2, [r0, #0]
 80262a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80262a6:	2300      	movs	r3, #0
 80262a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80262ac:	e7f7      	b.n	802629e <_Balloc+0x66>
 80262ae:	bf00      	nop
 80262b0:	0802cf34 	.word	0x0802cf34
 80262b4:	0802d18d 	.word	0x0802d18d

080262b8 <_Bfree>:
 80262b8:	b570      	push	{r4, r5, r6, lr}
 80262ba:	69c6      	ldr	r6, [r0, #28]
 80262bc:	4605      	mov	r5, r0
 80262be:	460c      	mov	r4, r1
 80262c0:	b976      	cbnz	r6, 80262e0 <_Bfree+0x28>
 80262c2:	2010      	movs	r0, #16
 80262c4:	f7fd ff52 	bl	802416c <malloc>
 80262c8:	4602      	mov	r2, r0
 80262ca:	61e8      	str	r0, [r5, #28]
 80262cc:	b920      	cbnz	r0, 80262d8 <_Bfree+0x20>
 80262ce:	4b09      	ldr	r3, [pc, #36]	@ (80262f4 <_Bfree+0x3c>)
 80262d0:	4809      	ldr	r0, [pc, #36]	@ (80262f8 <_Bfree+0x40>)
 80262d2:	218f      	movs	r1, #143	@ 0x8f
 80262d4:	f7ff f968 	bl	80255a8 <__assert_func>
 80262d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80262dc:	6006      	str	r6, [r0, #0]
 80262de:	60c6      	str	r6, [r0, #12]
 80262e0:	b13c      	cbz	r4, 80262f2 <_Bfree+0x3a>
 80262e2:	69eb      	ldr	r3, [r5, #28]
 80262e4:	6862      	ldr	r2, [r4, #4]
 80262e6:	68db      	ldr	r3, [r3, #12]
 80262e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80262ec:	6021      	str	r1, [r4, #0]
 80262ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80262f2:	bd70      	pop	{r4, r5, r6, pc}
 80262f4:	0802cf34 	.word	0x0802cf34
 80262f8:	0802d18d 	.word	0x0802d18d

080262fc <__multadd>:
 80262fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026300:	690d      	ldr	r5, [r1, #16]
 8026302:	4607      	mov	r7, r0
 8026304:	460c      	mov	r4, r1
 8026306:	461e      	mov	r6, r3
 8026308:	f101 0c14 	add.w	ip, r1, #20
 802630c:	2000      	movs	r0, #0
 802630e:	f8dc 3000 	ldr.w	r3, [ip]
 8026312:	b299      	uxth	r1, r3
 8026314:	fb02 6101 	mla	r1, r2, r1, r6
 8026318:	0c1e      	lsrs	r6, r3, #16
 802631a:	0c0b      	lsrs	r3, r1, #16
 802631c:	fb02 3306 	mla	r3, r2, r6, r3
 8026320:	b289      	uxth	r1, r1
 8026322:	3001      	adds	r0, #1
 8026324:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026328:	4285      	cmp	r5, r0
 802632a:	f84c 1b04 	str.w	r1, [ip], #4
 802632e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8026332:	dcec      	bgt.n	802630e <__multadd+0x12>
 8026334:	b30e      	cbz	r6, 802637a <__multadd+0x7e>
 8026336:	68a3      	ldr	r3, [r4, #8]
 8026338:	42ab      	cmp	r3, r5
 802633a:	dc19      	bgt.n	8026370 <__multadd+0x74>
 802633c:	6861      	ldr	r1, [r4, #4]
 802633e:	4638      	mov	r0, r7
 8026340:	3101      	adds	r1, #1
 8026342:	f7ff ff79 	bl	8026238 <_Balloc>
 8026346:	4680      	mov	r8, r0
 8026348:	b928      	cbnz	r0, 8026356 <__multadd+0x5a>
 802634a:	4602      	mov	r2, r0
 802634c:	4b0c      	ldr	r3, [pc, #48]	@ (8026380 <__multadd+0x84>)
 802634e:	480d      	ldr	r0, [pc, #52]	@ (8026384 <__multadd+0x88>)
 8026350:	21ba      	movs	r1, #186	@ 0xba
 8026352:	f7ff f929 	bl	80255a8 <__assert_func>
 8026356:	6922      	ldr	r2, [r4, #16]
 8026358:	3202      	adds	r2, #2
 802635a:	f104 010c 	add.w	r1, r4, #12
 802635e:	0092      	lsls	r2, r2, #2
 8026360:	300c      	adds	r0, #12
 8026362:	f7ff f90c 	bl	802557e <memcpy>
 8026366:	4621      	mov	r1, r4
 8026368:	4638      	mov	r0, r7
 802636a:	f7ff ffa5 	bl	80262b8 <_Bfree>
 802636e:	4644      	mov	r4, r8
 8026370:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8026374:	3501      	adds	r5, #1
 8026376:	615e      	str	r6, [r3, #20]
 8026378:	6125      	str	r5, [r4, #16]
 802637a:	4620      	mov	r0, r4
 802637c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026380:	0802d17c 	.word	0x0802d17c
 8026384:	0802d18d 	.word	0x0802d18d

08026388 <__s2b>:
 8026388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802638c:	460c      	mov	r4, r1
 802638e:	4615      	mov	r5, r2
 8026390:	461f      	mov	r7, r3
 8026392:	2209      	movs	r2, #9
 8026394:	3308      	adds	r3, #8
 8026396:	4606      	mov	r6, r0
 8026398:	fb93 f3f2 	sdiv	r3, r3, r2
 802639c:	2100      	movs	r1, #0
 802639e:	2201      	movs	r2, #1
 80263a0:	429a      	cmp	r2, r3
 80263a2:	db09      	blt.n	80263b8 <__s2b+0x30>
 80263a4:	4630      	mov	r0, r6
 80263a6:	f7ff ff47 	bl	8026238 <_Balloc>
 80263aa:	b940      	cbnz	r0, 80263be <__s2b+0x36>
 80263ac:	4602      	mov	r2, r0
 80263ae:	4b19      	ldr	r3, [pc, #100]	@ (8026414 <__s2b+0x8c>)
 80263b0:	4819      	ldr	r0, [pc, #100]	@ (8026418 <__s2b+0x90>)
 80263b2:	21d3      	movs	r1, #211	@ 0xd3
 80263b4:	f7ff f8f8 	bl	80255a8 <__assert_func>
 80263b8:	0052      	lsls	r2, r2, #1
 80263ba:	3101      	adds	r1, #1
 80263bc:	e7f0      	b.n	80263a0 <__s2b+0x18>
 80263be:	9b08      	ldr	r3, [sp, #32]
 80263c0:	6143      	str	r3, [r0, #20]
 80263c2:	2d09      	cmp	r5, #9
 80263c4:	f04f 0301 	mov.w	r3, #1
 80263c8:	6103      	str	r3, [r0, #16]
 80263ca:	dd16      	ble.n	80263fa <__s2b+0x72>
 80263cc:	f104 0909 	add.w	r9, r4, #9
 80263d0:	46c8      	mov	r8, r9
 80263d2:	442c      	add	r4, r5
 80263d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80263d8:	4601      	mov	r1, r0
 80263da:	3b30      	subs	r3, #48	@ 0x30
 80263dc:	220a      	movs	r2, #10
 80263de:	4630      	mov	r0, r6
 80263e0:	f7ff ff8c 	bl	80262fc <__multadd>
 80263e4:	45a0      	cmp	r8, r4
 80263e6:	d1f5      	bne.n	80263d4 <__s2b+0x4c>
 80263e8:	f1a5 0408 	sub.w	r4, r5, #8
 80263ec:	444c      	add	r4, r9
 80263ee:	1b2d      	subs	r5, r5, r4
 80263f0:	1963      	adds	r3, r4, r5
 80263f2:	42bb      	cmp	r3, r7
 80263f4:	db04      	blt.n	8026400 <__s2b+0x78>
 80263f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80263fa:	340a      	adds	r4, #10
 80263fc:	2509      	movs	r5, #9
 80263fe:	e7f6      	b.n	80263ee <__s2b+0x66>
 8026400:	f814 3b01 	ldrb.w	r3, [r4], #1
 8026404:	4601      	mov	r1, r0
 8026406:	3b30      	subs	r3, #48	@ 0x30
 8026408:	220a      	movs	r2, #10
 802640a:	4630      	mov	r0, r6
 802640c:	f7ff ff76 	bl	80262fc <__multadd>
 8026410:	e7ee      	b.n	80263f0 <__s2b+0x68>
 8026412:	bf00      	nop
 8026414:	0802d17c 	.word	0x0802d17c
 8026418:	0802d18d 	.word	0x0802d18d

0802641c <__hi0bits>:
 802641c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8026420:	4603      	mov	r3, r0
 8026422:	bf36      	itet	cc
 8026424:	0403      	lslcc	r3, r0, #16
 8026426:	2000      	movcs	r0, #0
 8026428:	2010      	movcc	r0, #16
 802642a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802642e:	bf3c      	itt	cc
 8026430:	021b      	lslcc	r3, r3, #8
 8026432:	3008      	addcc	r0, #8
 8026434:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8026438:	bf3c      	itt	cc
 802643a:	011b      	lslcc	r3, r3, #4
 802643c:	3004      	addcc	r0, #4
 802643e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8026442:	bf3c      	itt	cc
 8026444:	009b      	lslcc	r3, r3, #2
 8026446:	3002      	addcc	r0, #2
 8026448:	2b00      	cmp	r3, #0
 802644a:	db05      	blt.n	8026458 <__hi0bits+0x3c>
 802644c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8026450:	f100 0001 	add.w	r0, r0, #1
 8026454:	bf08      	it	eq
 8026456:	2020      	moveq	r0, #32
 8026458:	4770      	bx	lr

0802645a <__lo0bits>:
 802645a:	6803      	ldr	r3, [r0, #0]
 802645c:	4602      	mov	r2, r0
 802645e:	f013 0007 	ands.w	r0, r3, #7
 8026462:	d00b      	beq.n	802647c <__lo0bits+0x22>
 8026464:	07d9      	lsls	r1, r3, #31
 8026466:	d421      	bmi.n	80264ac <__lo0bits+0x52>
 8026468:	0798      	lsls	r0, r3, #30
 802646a:	bf49      	itett	mi
 802646c:	085b      	lsrmi	r3, r3, #1
 802646e:	089b      	lsrpl	r3, r3, #2
 8026470:	2001      	movmi	r0, #1
 8026472:	6013      	strmi	r3, [r2, #0]
 8026474:	bf5c      	itt	pl
 8026476:	6013      	strpl	r3, [r2, #0]
 8026478:	2002      	movpl	r0, #2
 802647a:	4770      	bx	lr
 802647c:	b299      	uxth	r1, r3
 802647e:	b909      	cbnz	r1, 8026484 <__lo0bits+0x2a>
 8026480:	0c1b      	lsrs	r3, r3, #16
 8026482:	2010      	movs	r0, #16
 8026484:	b2d9      	uxtb	r1, r3
 8026486:	b909      	cbnz	r1, 802648c <__lo0bits+0x32>
 8026488:	3008      	adds	r0, #8
 802648a:	0a1b      	lsrs	r3, r3, #8
 802648c:	0719      	lsls	r1, r3, #28
 802648e:	bf04      	itt	eq
 8026490:	091b      	lsreq	r3, r3, #4
 8026492:	3004      	addeq	r0, #4
 8026494:	0799      	lsls	r1, r3, #30
 8026496:	bf04      	itt	eq
 8026498:	089b      	lsreq	r3, r3, #2
 802649a:	3002      	addeq	r0, #2
 802649c:	07d9      	lsls	r1, r3, #31
 802649e:	d403      	bmi.n	80264a8 <__lo0bits+0x4e>
 80264a0:	085b      	lsrs	r3, r3, #1
 80264a2:	f100 0001 	add.w	r0, r0, #1
 80264a6:	d003      	beq.n	80264b0 <__lo0bits+0x56>
 80264a8:	6013      	str	r3, [r2, #0]
 80264aa:	4770      	bx	lr
 80264ac:	2000      	movs	r0, #0
 80264ae:	4770      	bx	lr
 80264b0:	2020      	movs	r0, #32
 80264b2:	4770      	bx	lr

080264b4 <__i2b>:
 80264b4:	b510      	push	{r4, lr}
 80264b6:	460c      	mov	r4, r1
 80264b8:	2101      	movs	r1, #1
 80264ba:	f7ff febd 	bl	8026238 <_Balloc>
 80264be:	4602      	mov	r2, r0
 80264c0:	b928      	cbnz	r0, 80264ce <__i2b+0x1a>
 80264c2:	4b05      	ldr	r3, [pc, #20]	@ (80264d8 <__i2b+0x24>)
 80264c4:	4805      	ldr	r0, [pc, #20]	@ (80264dc <__i2b+0x28>)
 80264c6:	f240 1145 	movw	r1, #325	@ 0x145
 80264ca:	f7ff f86d 	bl	80255a8 <__assert_func>
 80264ce:	2301      	movs	r3, #1
 80264d0:	6144      	str	r4, [r0, #20]
 80264d2:	6103      	str	r3, [r0, #16]
 80264d4:	bd10      	pop	{r4, pc}
 80264d6:	bf00      	nop
 80264d8:	0802d17c 	.word	0x0802d17c
 80264dc:	0802d18d 	.word	0x0802d18d

080264e0 <__multiply>:
 80264e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264e4:	4614      	mov	r4, r2
 80264e6:	690a      	ldr	r2, [r1, #16]
 80264e8:	6923      	ldr	r3, [r4, #16]
 80264ea:	429a      	cmp	r2, r3
 80264ec:	bfa8      	it	ge
 80264ee:	4623      	movge	r3, r4
 80264f0:	460f      	mov	r7, r1
 80264f2:	bfa4      	itt	ge
 80264f4:	460c      	movge	r4, r1
 80264f6:	461f      	movge	r7, r3
 80264f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80264fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8026500:	68a3      	ldr	r3, [r4, #8]
 8026502:	6861      	ldr	r1, [r4, #4]
 8026504:	eb0a 0609 	add.w	r6, sl, r9
 8026508:	42b3      	cmp	r3, r6
 802650a:	b085      	sub	sp, #20
 802650c:	bfb8      	it	lt
 802650e:	3101      	addlt	r1, #1
 8026510:	f7ff fe92 	bl	8026238 <_Balloc>
 8026514:	b930      	cbnz	r0, 8026524 <__multiply+0x44>
 8026516:	4602      	mov	r2, r0
 8026518:	4b44      	ldr	r3, [pc, #272]	@ (802662c <__multiply+0x14c>)
 802651a:	4845      	ldr	r0, [pc, #276]	@ (8026630 <__multiply+0x150>)
 802651c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8026520:	f7ff f842 	bl	80255a8 <__assert_func>
 8026524:	f100 0514 	add.w	r5, r0, #20
 8026528:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802652c:	462b      	mov	r3, r5
 802652e:	2200      	movs	r2, #0
 8026530:	4543      	cmp	r3, r8
 8026532:	d321      	bcc.n	8026578 <__multiply+0x98>
 8026534:	f107 0114 	add.w	r1, r7, #20
 8026538:	f104 0214 	add.w	r2, r4, #20
 802653c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8026540:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8026544:	9302      	str	r3, [sp, #8]
 8026546:	1b13      	subs	r3, r2, r4
 8026548:	3b15      	subs	r3, #21
 802654a:	f023 0303 	bic.w	r3, r3, #3
 802654e:	3304      	adds	r3, #4
 8026550:	f104 0715 	add.w	r7, r4, #21
 8026554:	42ba      	cmp	r2, r7
 8026556:	bf38      	it	cc
 8026558:	2304      	movcc	r3, #4
 802655a:	9301      	str	r3, [sp, #4]
 802655c:	9b02      	ldr	r3, [sp, #8]
 802655e:	9103      	str	r1, [sp, #12]
 8026560:	428b      	cmp	r3, r1
 8026562:	d80c      	bhi.n	802657e <__multiply+0x9e>
 8026564:	2e00      	cmp	r6, #0
 8026566:	dd03      	ble.n	8026570 <__multiply+0x90>
 8026568:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802656c:	2b00      	cmp	r3, #0
 802656e:	d05b      	beq.n	8026628 <__multiply+0x148>
 8026570:	6106      	str	r6, [r0, #16]
 8026572:	b005      	add	sp, #20
 8026574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026578:	f843 2b04 	str.w	r2, [r3], #4
 802657c:	e7d8      	b.n	8026530 <__multiply+0x50>
 802657e:	f8b1 a000 	ldrh.w	sl, [r1]
 8026582:	f1ba 0f00 	cmp.w	sl, #0
 8026586:	d024      	beq.n	80265d2 <__multiply+0xf2>
 8026588:	f104 0e14 	add.w	lr, r4, #20
 802658c:	46a9      	mov	r9, r5
 802658e:	f04f 0c00 	mov.w	ip, #0
 8026592:	f85e 7b04 	ldr.w	r7, [lr], #4
 8026596:	f8d9 3000 	ldr.w	r3, [r9]
 802659a:	fa1f fb87 	uxth.w	fp, r7
 802659e:	b29b      	uxth	r3, r3
 80265a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80265a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80265a8:	f8d9 7000 	ldr.w	r7, [r9]
 80265ac:	4463      	add	r3, ip
 80265ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80265b2:	fb0a c70b 	mla	r7, sl, fp, ip
 80265b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80265ba:	b29b      	uxth	r3, r3
 80265bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80265c0:	4572      	cmp	r2, lr
 80265c2:	f849 3b04 	str.w	r3, [r9], #4
 80265c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80265ca:	d8e2      	bhi.n	8026592 <__multiply+0xb2>
 80265cc:	9b01      	ldr	r3, [sp, #4]
 80265ce:	f845 c003 	str.w	ip, [r5, r3]
 80265d2:	9b03      	ldr	r3, [sp, #12]
 80265d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80265d8:	3104      	adds	r1, #4
 80265da:	f1b9 0f00 	cmp.w	r9, #0
 80265de:	d021      	beq.n	8026624 <__multiply+0x144>
 80265e0:	682b      	ldr	r3, [r5, #0]
 80265e2:	f104 0c14 	add.w	ip, r4, #20
 80265e6:	46ae      	mov	lr, r5
 80265e8:	f04f 0a00 	mov.w	sl, #0
 80265ec:	f8bc b000 	ldrh.w	fp, [ip]
 80265f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80265f4:	fb09 770b 	mla	r7, r9, fp, r7
 80265f8:	4457      	add	r7, sl
 80265fa:	b29b      	uxth	r3, r3
 80265fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8026600:	f84e 3b04 	str.w	r3, [lr], #4
 8026604:	f85c 3b04 	ldr.w	r3, [ip], #4
 8026608:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802660c:	f8be 3000 	ldrh.w	r3, [lr]
 8026610:	fb09 330a 	mla	r3, r9, sl, r3
 8026614:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8026618:	4562      	cmp	r2, ip
 802661a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802661e:	d8e5      	bhi.n	80265ec <__multiply+0x10c>
 8026620:	9f01      	ldr	r7, [sp, #4]
 8026622:	51eb      	str	r3, [r5, r7]
 8026624:	3504      	adds	r5, #4
 8026626:	e799      	b.n	802655c <__multiply+0x7c>
 8026628:	3e01      	subs	r6, #1
 802662a:	e79b      	b.n	8026564 <__multiply+0x84>
 802662c:	0802d17c 	.word	0x0802d17c
 8026630:	0802d18d 	.word	0x0802d18d

08026634 <__pow5mult>:
 8026634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026638:	4615      	mov	r5, r2
 802663a:	f012 0203 	ands.w	r2, r2, #3
 802663e:	4607      	mov	r7, r0
 8026640:	460e      	mov	r6, r1
 8026642:	d007      	beq.n	8026654 <__pow5mult+0x20>
 8026644:	4c25      	ldr	r4, [pc, #148]	@ (80266dc <__pow5mult+0xa8>)
 8026646:	3a01      	subs	r2, #1
 8026648:	2300      	movs	r3, #0
 802664a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802664e:	f7ff fe55 	bl	80262fc <__multadd>
 8026652:	4606      	mov	r6, r0
 8026654:	10ad      	asrs	r5, r5, #2
 8026656:	d03d      	beq.n	80266d4 <__pow5mult+0xa0>
 8026658:	69fc      	ldr	r4, [r7, #28]
 802665a:	b97c      	cbnz	r4, 802667c <__pow5mult+0x48>
 802665c:	2010      	movs	r0, #16
 802665e:	f7fd fd85 	bl	802416c <malloc>
 8026662:	4602      	mov	r2, r0
 8026664:	61f8      	str	r0, [r7, #28]
 8026666:	b928      	cbnz	r0, 8026674 <__pow5mult+0x40>
 8026668:	4b1d      	ldr	r3, [pc, #116]	@ (80266e0 <__pow5mult+0xac>)
 802666a:	481e      	ldr	r0, [pc, #120]	@ (80266e4 <__pow5mult+0xb0>)
 802666c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8026670:	f7fe ff9a 	bl	80255a8 <__assert_func>
 8026674:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8026678:	6004      	str	r4, [r0, #0]
 802667a:	60c4      	str	r4, [r0, #12]
 802667c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8026680:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026684:	b94c      	cbnz	r4, 802669a <__pow5mult+0x66>
 8026686:	f240 2171 	movw	r1, #625	@ 0x271
 802668a:	4638      	mov	r0, r7
 802668c:	f7ff ff12 	bl	80264b4 <__i2b>
 8026690:	2300      	movs	r3, #0
 8026692:	f8c8 0008 	str.w	r0, [r8, #8]
 8026696:	4604      	mov	r4, r0
 8026698:	6003      	str	r3, [r0, #0]
 802669a:	f04f 0900 	mov.w	r9, #0
 802669e:	07eb      	lsls	r3, r5, #31
 80266a0:	d50a      	bpl.n	80266b8 <__pow5mult+0x84>
 80266a2:	4631      	mov	r1, r6
 80266a4:	4622      	mov	r2, r4
 80266a6:	4638      	mov	r0, r7
 80266a8:	f7ff ff1a 	bl	80264e0 <__multiply>
 80266ac:	4631      	mov	r1, r6
 80266ae:	4680      	mov	r8, r0
 80266b0:	4638      	mov	r0, r7
 80266b2:	f7ff fe01 	bl	80262b8 <_Bfree>
 80266b6:	4646      	mov	r6, r8
 80266b8:	106d      	asrs	r5, r5, #1
 80266ba:	d00b      	beq.n	80266d4 <__pow5mult+0xa0>
 80266bc:	6820      	ldr	r0, [r4, #0]
 80266be:	b938      	cbnz	r0, 80266d0 <__pow5mult+0x9c>
 80266c0:	4622      	mov	r2, r4
 80266c2:	4621      	mov	r1, r4
 80266c4:	4638      	mov	r0, r7
 80266c6:	f7ff ff0b 	bl	80264e0 <__multiply>
 80266ca:	6020      	str	r0, [r4, #0]
 80266cc:	f8c0 9000 	str.w	r9, [r0]
 80266d0:	4604      	mov	r4, r0
 80266d2:	e7e4      	b.n	802669e <__pow5mult+0x6a>
 80266d4:	4630      	mov	r0, r6
 80266d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80266da:	bf00      	nop
 80266dc:	0802d1e8 	.word	0x0802d1e8
 80266e0:	0802cf34 	.word	0x0802cf34
 80266e4:	0802d18d 	.word	0x0802d18d

080266e8 <__lshift>:
 80266e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80266ec:	460c      	mov	r4, r1
 80266ee:	6849      	ldr	r1, [r1, #4]
 80266f0:	6923      	ldr	r3, [r4, #16]
 80266f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80266f6:	68a3      	ldr	r3, [r4, #8]
 80266f8:	4607      	mov	r7, r0
 80266fa:	4691      	mov	r9, r2
 80266fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026700:	f108 0601 	add.w	r6, r8, #1
 8026704:	42b3      	cmp	r3, r6
 8026706:	db0b      	blt.n	8026720 <__lshift+0x38>
 8026708:	4638      	mov	r0, r7
 802670a:	f7ff fd95 	bl	8026238 <_Balloc>
 802670e:	4605      	mov	r5, r0
 8026710:	b948      	cbnz	r0, 8026726 <__lshift+0x3e>
 8026712:	4602      	mov	r2, r0
 8026714:	4b28      	ldr	r3, [pc, #160]	@ (80267b8 <__lshift+0xd0>)
 8026716:	4829      	ldr	r0, [pc, #164]	@ (80267bc <__lshift+0xd4>)
 8026718:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802671c:	f7fe ff44 	bl	80255a8 <__assert_func>
 8026720:	3101      	adds	r1, #1
 8026722:	005b      	lsls	r3, r3, #1
 8026724:	e7ee      	b.n	8026704 <__lshift+0x1c>
 8026726:	2300      	movs	r3, #0
 8026728:	f100 0114 	add.w	r1, r0, #20
 802672c:	f100 0210 	add.w	r2, r0, #16
 8026730:	4618      	mov	r0, r3
 8026732:	4553      	cmp	r3, sl
 8026734:	db33      	blt.n	802679e <__lshift+0xb6>
 8026736:	6920      	ldr	r0, [r4, #16]
 8026738:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802673c:	f104 0314 	add.w	r3, r4, #20
 8026740:	f019 091f 	ands.w	r9, r9, #31
 8026744:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8026748:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802674c:	d02b      	beq.n	80267a6 <__lshift+0xbe>
 802674e:	f1c9 0e20 	rsb	lr, r9, #32
 8026752:	468a      	mov	sl, r1
 8026754:	2200      	movs	r2, #0
 8026756:	6818      	ldr	r0, [r3, #0]
 8026758:	fa00 f009 	lsl.w	r0, r0, r9
 802675c:	4310      	orrs	r0, r2
 802675e:	f84a 0b04 	str.w	r0, [sl], #4
 8026762:	f853 2b04 	ldr.w	r2, [r3], #4
 8026766:	459c      	cmp	ip, r3
 8026768:	fa22 f20e 	lsr.w	r2, r2, lr
 802676c:	d8f3      	bhi.n	8026756 <__lshift+0x6e>
 802676e:	ebac 0304 	sub.w	r3, ip, r4
 8026772:	3b15      	subs	r3, #21
 8026774:	f023 0303 	bic.w	r3, r3, #3
 8026778:	3304      	adds	r3, #4
 802677a:	f104 0015 	add.w	r0, r4, #21
 802677e:	4584      	cmp	ip, r0
 8026780:	bf38      	it	cc
 8026782:	2304      	movcc	r3, #4
 8026784:	50ca      	str	r2, [r1, r3]
 8026786:	b10a      	cbz	r2, 802678c <__lshift+0xa4>
 8026788:	f108 0602 	add.w	r6, r8, #2
 802678c:	3e01      	subs	r6, #1
 802678e:	4638      	mov	r0, r7
 8026790:	612e      	str	r6, [r5, #16]
 8026792:	4621      	mov	r1, r4
 8026794:	f7ff fd90 	bl	80262b8 <_Bfree>
 8026798:	4628      	mov	r0, r5
 802679a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802679e:	f842 0f04 	str.w	r0, [r2, #4]!
 80267a2:	3301      	adds	r3, #1
 80267a4:	e7c5      	b.n	8026732 <__lshift+0x4a>
 80267a6:	3904      	subs	r1, #4
 80267a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80267ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80267b0:	459c      	cmp	ip, r3
 80267b2:	d8f9      	bhi.n	80267a8 <__lshift+0xc0>
 80267b4:	e7ea      	b.n	802678c <__lshift+0xa4>
 80267b6:	bf00      	nop
 80267b8:	0802d17c 	.word	0x0802d17c
 80267bc:	0802d18d 	.word	0x0802d18d

080267c0 <__mcmp>:
 80267c0:	690a      	ldr	r2, [r1, #16]
 80267c2:	4603      	mov	r3, r0
 80267c4:	6900      	ldr	r0, [r0, #16]
 80267c6:	1a80      	subs	r0, r0, r2
 80267c8:	b530      	push	{r4, r5, lr}
 80267ca:	d10e      	bne.n	80267ea <__mcmp+0x2a>
 80267cc:	3314      	adds	r3, #20
 80267ce:	3114      	adds	r1, #20
 80267d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80267d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80267d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80267dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80267e0:	4295      	cmp	r5, r2
 80267e2:	d003      	beq.n	80267ec <__mcmp+0x2c>
 80267e4:	d205      	bcs.n	80267f2 <__mcmp+0x32>
 80267e6:	f04f 30ff 	mov.w	r0, #4294967295
 80267ea:	bd30      	pop	{r4, r5, pc}
 80267ec:	42a3      	cmp	r3, r4
 80267ee:	d3f3      	bcc.n	80267d8 <__mcmp+0x18>
 80267f0:	e7fb      	b.n	80267ea <__mcmp+0x2a>
 80267f2:	2001      	movs	r0, #1
 80267f4:	e7f9      	b.n	80267ea <__mcmp+0x2a>
	...

080267f8 <__mdiff>:
 80267f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80267fc:	4689      	mov	r9, r1
 80267fe:	4606      	mov	r6, r0
 8026800:	4611      	mov	r1, r2
 8026802:	4648      	mov	r0, r9
 8026804:	4614      	mov	r4, r2
 8026806:	f7ff ffdb 	bl	80267c0 <__mcmp>
 802680a:	1e05      	subs	r5, r0, #0
 802680c:	d112      	bne.n	8026834 <__mdiff+0x3c>
 802680e:	4629      	mov	r1, r5
 8026810:	4630      	mov	r0, r6
 8026812:	f7ff fd11 	bl	8026238 <_Balloc>
 8026816:	4602      	mov	r2, r0
 8026818:	b928      	cbnz	r0, 8026826 <__mdiff+0x2e>
 802681a:	4b3f      	ldr	r3, [pc, #252]	@ (8026918 <__mdiff+0x120>)
 802681c:	f240 2137 	movw	r1, #567	@ 0x237
 8026820:	483e      	ldr	r0, [pc, #248]	@ (802691c <__mdiff+0x124>)
 8026822:	f7fe fec1 	bl	80255a8 <__assert_func>
 8026826:	2301      	movs	r3, #1
 8026828:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802682c:	4610      	mov	r0, r2
 802682e:	b003      	add	sp, #12
 8026830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026834:	bfbc      	itt	lt
 8026836:	464b      	movlt	r3, r9
 8026838:	46a1      	movlt	r9, r4
 802683a:	4630      	mov	r0, r6
 802683c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8026840:	bfba      	itte	lt
 8026842:	461c      	movlt	r4, r3
 8026844:	2501      	movlt	r5, #1
 8026846:	2500      	movge	r5, #0
 8026848:	f7ff fcf6 	bl	8026238 <_Balloc>
 802684c:	4602      	mov	r2, r0
 802684e:	b918      	cbnz	r0, 8026858 <__mdiff+0x60>
 8026850:	4b31      	ldr	r3, [pc, #196]	@ (8026918 <__mdiff+0x120>)
 8026852:	f240 2145 	movw	r1, #581	@ 0x245
 8026856:	e7e3      	b.n	8026820 <__mdiff+0x28>
 8026858:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802685c:	6926      	ldr	r6, [r4, #16]
 802685e:	60c5      	str	r5, [r0, #12]
 8026860:	f109 0310 	add.w	r3, r9, #16
 8026864:	f109 0514 	add.w	r5, r9, #20
 8026868:	f104 0e14 	add.w	lr, r4, #20
 802686c:	f100 0b14 	add.w	fp, r0, #20
 8026870:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8026874:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8026878:	9301      	str	r3, [sp, #4]
 802687a:	46d9      	mov	r9, fp
 802687c:	f04f 0c00 	mov.w	ip, #0
 8026880:	9b01      	ldr	r3, [sp, #4]
 8026882:	f85e 0b04 	ldr.w	r0, [lr], #4
 8026886:	f853 af04 	ldr.w	sl, [r3, #4]!
 802688a:	9301      	str	r3, [sp, #4]
 802688c:	fa1f f38a 	uxth.w	r3, sl
 8026890:	4619      	mov	r1, r3
 8026892:	b283      	uxth	r3, r0
 8026894:	1acb      	subs	r3, r1, r3
 8026896:	0c00      	lsrs	r0, r0, #16
 8026898:	4463      	add	r3, ip
 802689a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802689e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80268a2:	b29b      	uxth	r3, r3
 80268a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80268a8:	4576      	cmp	r6, lr
 80268aa:	f849 3b04 	str.w	r3, [r9], #4
 80268ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80268b2:	d8e5      	bhi.n	8026880 <__mdiff+0x88>
 80268b4:	1b33      	subs	r3, r6, r4
 80268b6:	3b15      	subs	r3, #21
 80268b8:	f023 0303 	bic.w	r3, r3, #3
 80268bc:	3415      	adds	r4, #21
 80268be:	3304      	adds	r3, #4
 80268c0:	42a6      	cmp	r6, r4
 80268c2:	bf38      	it	cc
 80268c4:	2304      	movcc	r3, #4
 80268c6:	441d      	add	r5, r3
 80268c8:	445b      	add	r3, fp
 80268ca:	461e      	mov	r6, r3
 80268cc:	462c      	mov	r4, r5
 80268ce:	4544      	cmp	r4, r8
 80268d0:	d30e      	bcc.n	80268f0 <__mdiff+0xf8>
 80268d2:	f108 0103 	add.w	r1, r8, #3
 80268d6:	1b49      	subs	r1, r1, r5
 80268d8:	f021 0103 	bic.w	r1, r1, #3
 80268dc:	3d03      	subs	r5, #3
 80268de:	45a8      	cmp	r8, r5
 80268e0:	bf38      	it	cc
 80268e2:	2100      	movcc	r1, #0
 80268e4:	440b      	add	r3, r1
 80268e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80268ea:	b191      	cbz	r1, 8026912 <__mdiff+0x11a>
 80268ec:	6117      	str	r7, [r2, #16]
 80268ee:	e79d      	b.n	802682c <__mdiff+0x34>
 80268f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80268f4:	46e6      	mov	lr, ip
 80268f6:	0c08      	lsrs	r0, r1, #16
 80268f8:	fa1c fc81 	uxtah	ip, ip, r1
 80268fc:	4471      	add	r1, lr
 80268fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8026902:	b289      	uxth	r1, r1
 8026904:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8026908:	f846 1b04 	str.w	r1, [r6], #4
 802690c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026910:	e7dd      	b.n	80268ce <__mdiff+0xd6>
 8026912:	3f01      	subs	r7, #1
 8026914:	e7e7      	b.n	80268e6 <__mdiff+0xee>
 8026916:	bf00      	nop
 8026918:	0802d17c 	.word	0x0802d17c
 802691c:	0802d18d 	.word	0x0802d18d

08026920 <__ulp>:
 8026920:	b082      	sub	sp, #8
 8026922:	ed8d 0b00 	vstr	d0, [sp]
 8026926:	9a01      	ldr	r2, [sp, #4]
 8026928:	4b0f      	ldr	r3, [pc, #60]	@ (8026968 <__ulp+0x48>)
 802692a:	4013      	ands	r3, r2
 802692c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8026930:	2b00      	cmp	r3, #0
 8026932:	dc08      	bgt.n	8026946 <__ulp+0x26>
 8026934:	425b      	negs	r3, r3
 8026936:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 802693a:	ea4f 5223 	mov.w	r2, r3, asr #20
 802693e:	da04      	bge.n	802694a <__ulp+0x2a>
 8026940:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8026944:	4113      	asrs	r3, r2
 8026946:	2200      	movs	r2, #0
 8026948:	e008      	b.n	802695c <__ulp+0x3c>
 802694a:	f1a2 0314 	sub.w	r3, r2, #20
 802694e:	2b1e      	cmp	r3, #30
 8026950:	bfda      	itte	le
 8026952:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8026956:	40da      	lsrle	r2, r3
 8026958:	2201      	movgt	r2, #1
 802695a:	2300      	movs	r3, #0
 802695c:	4619      	mov	r1, r3
 802695e:	4610      	mov	r0, r2
 8026960:	ec41 0b10 	vmov	d0, r0, r1
 8026964:	b002      	add	sp, #8
 8026966:	4770      	bx	lr
 8026968:	7ff00000 	.word	0x7ff00000

0802696c <__b2d>:
 802696c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026970:	6906      	ldr	r6, [r0, #16]
 8026972:	f100 0814 	add.w	r8, r0, #20
 8026976:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802697a:	1f37      	subs	r7, r6, #4
 802697c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8026980:	4610      	mov	r0, r2
 8026982:	f7ff fd4b 	bl	802641c <__hi0bits>
 8026986:	f1c0 0320 	rsb	r3, r0, #32
 802698a:	280a      	cmp	r0, #10
 802698c:	600b      	str	r3, [r1, #0]
 802698e:	491b      	ldr	r1, [pc, #108]	@ (80269fc <__b2d+0x90>)
 8026990:	dc15      	bgt.n	80269be <__b2d+0x52>
 8026992:	f1c0 0c0b 	rsb	ip, r0, #11
 8026996:	fa22 f30c 	lsr.w	r3, r2, ip
 802699a:	45b8      	cmp	r8, r7
 802699c:	ea43 0501 	orr.w	r5, r3, r1
 80269a0:	bf34      	ite	cc
 80269a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80269a6:	2300      	movcs	r3, #0
 80269a8:	3015      	adds	r0, #21
 80269aa:	fa02 f000 	lsl.w	r0, r2, r0
 80269ae:	fa23 f30c 	lsr.w	r3, r3, ip
 80269b2:	4303      	orrs	r3, r0
 80269b4:	461c      	mov	r4, r3
 80269b6:	ec45 4b10 	vmov	d0, r4, r5
 80269ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80269be:	45b8      	cmp	r8, r7
 80269c0:	bf3a      	itte	cc
 80269c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80269c6:	f1a6 0708 	subcc.w	r7, r6, #8
 80269ca:	2300      	movcs	r3, #0
 80269cc:	380b      	subs	r0, #11
 80269ce:	d012      	beq.n	80269f6 <__b2d+0x8a>
 80269d0:	f1c0 0120 	rsb	r1, r0, #32
 80269d4:	fa23 f401 	lsr.w	r4, r3, r1
 80269d8:	4082      	lsls	r2, r0
 80269da:	4322      	orrs	r2, r4
 80269dc:	4547      	cmp	r7, r8
 80269de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80269e2:	bf8c      	ite	hi
 80269e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80269e8:	2200      	movls	r2, #0
 80269ea:	4083      	lsls	r3, r0
 80269ec:	40ca      	lsrs	r2, r1
 80269ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80269f2:	4313      	orrs	r3, r2
 80269f4:	e7de      	b.n	80269b4 <__b2d+0x48>
 80269f6:	ea42 0501 	orr.w	r5, r2, r1
 80269fa:	e7db      	b.n	80269b4 <__b2d+0x48>
 80269fc:	3ff00000 	.word	0x3ff00000

08026a00 <__d2b>:
 8026a00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026a04:	460f      	mov	r7, r1
 8026a06:	2101      	movs	r1, #1
 8026a08:	ec59 8b10 	vmov	r8, r9, d0
 8026a0c:	4616      	mov	r6, r2
 8026a0e:	f7ff fc13 	bl	8026238 <_Balloc>
 8026a12:	4604      	mov	r4, r0
 8026a14:	b930      	cbnz	r0, 8026a24 <__d2b+0x24>
 8026a16:	4602      	mov	r2, r0
 8026a18:	4b23      	ldr	r3, [pc, #140]	@ (8026aa8 <__d2b+0xa8>)
 8026a1a:	4824      	ldr	r0, [pc, #144]	@ (8026aac <__d2b+0xac>)
 8026a1c:	f240 310f 	movw	r1, #783	@ 0x30f
 8026a20:	f7fe fdc2 	bl	80255a8 <__assert_func>
 8026a24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8026a28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8026a2c:	b10d      	cbz	r5, 8026a32 <__d2b+0x32>
 8026a2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8026a32:	9301      	str	r3, [sp, #4]
 8026a34:	f1b8 0300 	subs.w	r3, r8, #0
 8026a38:	d023      	beq.n	8026a82 <__d2b+0x82>
 8026a3a:	4668      	mov	r0, sp
 8026a3c:	9300      	str	r3, [sp, #0]
 8026a3e:	f7ff fd0c 	bl	802645a <__lo0bits>
 8026a42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8026a46:	b1d0      	cbz	r0, 8026a7e <__d2b+0x7e>
 8026a48:	f1c0 0320 	rsb	r3, r0, #32
 8026a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8026a50:	430b      	orrs	r3, r1
 8026a52:	40c2      	lsrs	r2, r0
 8026a54:	6163      	str	r3, [r4, #20]
 8026a56:	9201      	str	r2, [sp, #4]
 8026a58:	9b01      	ldr	r3, [sp, #4]
 8026a5a:	61a3      	str	r3, [r4, #24]
 8026a5c:	2b00      	cmp	r3, #0
 8026a5e:	bf0c      	ite	eq
 8026a60:	2201      	moveq	r2, #1
 8026a62:	2202      	movne	r2, #2
 8026a64:	6122      	str	r2, [r4, #16]
 8026a66:	b1a5      	cbz	r5, 8026a92 <__d2b+0x92>
 8026a68:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8026a6c:	4405      	add	r5, r0
 8026a6e:	603d      	str	r5, [r7, #0]
 8026a70:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8026a74:	6030      	str	r0, [r6, #0]
 8026a76:	4620      	mov	r0, r4
 8026a78:	b003      	add	sp, #12
 8026a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026a7e:	6161      	str	r1, [r4, #20]
 8026a80:	e7ea      	b.n	8026a58 <__d2b+0x58>
 8026a82:	a801      	add	r0, sp, #4
 8026a84:	f7ff fce9 	bl	802645a <__lo0bits>
 8026a88:	9b01      	ldr	r3, [sp, #4]
 8026a8a:	6163      	str	r3, [r4, #20]
 8026a8c:	3020      	adds	r0, #32
 8026a8e:	2201      	movs	r2, #1
 8026a90:	e7e8      	b.n	8026a64 <__d2b+0x64>
 8026a92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8026a96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8026a9a:	6038      	str	r0, [r7, #0]
 8026a9c:	6918      	ldr	r0, [r3, #16]
 8026a9e:	f7ff fcbd 	bl	802641c <__hi0bits>
 8026aa2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8026aa6:	e7e5      	b.n	8026a74 <__d2b+0x74>
 8026aa8:	0802d17c 	.word	0x0802d17c
 8026aac:	0802d18d 	.word	0x0802d18d

08026ab0 <__ratio>:
 8026ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ab4:	4688      	mov	r8, r1
 8026ab6:	4669      	mov	r1, sp
 8026ab8:	4681      	mov	r9, r0
 8026aba:	f7ff ff57 	bl	802696c <__b2d>
 8026abe:	a901      	add	r1, sp, #4
 8026ac0:	4640      	mov	r0, r8
 8026ac2:	ec55 4b10 	vmov	r4, r5, d0
 8026ac6:	f7ff ff51 	bl	802696c <__b2d>
 8026aca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8026ace:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8026ad2:	1ad2      	subs	r2, r2, r3
 8026ad4:	e9dd 3100 	ldrd	r3, r1, [sp]
 8026ad8:	1a5b      	subs	r3, r3, r1
 8026ada:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8026ade:	ec57 6b10 	vmov	r6, r7, d0
 8026ae2:	2b00      	cmp	r3, #0
 8026ae4:	bfd6      	itet	le
 8026ae6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8026aea:	462a      	movgt	r2, r5
 8026aec:	463a      	movle	r2, r7
 8026aee:	46ab      	mov	fp, r5
 8026af0:	46a2      	mov	sl, r4
 8026af2:	bfce      	itee	gt
 8026af4:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8026af8:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8026afc:	ee00 3a90 	vmovle	s1, r3
 8026b00:	ec4b ab17 	vmov	d7, sl, fp
 8026b04:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8026b08:	b003      	add	sp, #12
 8026b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026b0e <__copybits>:
 8026b0e:	3901      	subs	r1, #1
 8026b10:	b570      	push	{r4, r5, r6, lr}
 8026b12:	1149      	asrs	r1, r1, #5
 8026b14:	6914      	ldr	r4, [r2, #16]
 8026b16:	3101      	adds	r1, #1
 8026b18:	f102 0314 	add.w	r3, r2, #20
 8026b1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8026b20:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8026b24:	1f05      	subs	r5, r0, #4
 8026b26:	42a3      	cmp	r3, r4
 8026b28:	d30c      	bcc.n	8026b44 <__copybits+0x36>
 8026b2a:	1aa3      	subs	r3, r4, r2
 8026b2c:	3b11      	subs	r3, #17
 8026b2e:	f023 0303 	bic.w	r3, r3, #3
 8026b32:	3211      	adds	r2, #17
 8026b34:	42a2      	cmp	r2, r4
 8026b36:	bf88      	it	hi
 8026b38:	2300      	movhi	r3, #0
 8026b3a:	4418      	add	r0, r3
 8026b3c:	2300      	movs	r3, #0
 8026b3e:	4288      	cmp	r0, r1
 8026b40:	d305      	bcc.n	8026b4e <__copybits+0x40>
 8026b42:	bd70      	pop	{r4, r5, r6, pc}
 8026b44:	f853 6b04 	ldr.w	r6, [r3], #4
 8026b48:	f845 6f04 	str.w	r6, [r5, #4]!
 8026b4c:	e7eb      	b.n	8026b26 <__copybits+0x18>
 8026b4e:	f840 3b04 	str.w	r3, [r0], #4
 8026b52:	e7f4      	b.n	8026b3e <__copybits+0x30>

08026b54 <__any_on>:
 8026b54:	f100 0214 	add.w	r2, r0, #20
 8026b58:	6900      	ldr	r0, [r0, #16]
 8026b5a:	114b      	asrs	r3, r1, #5
 8026b5c:	4298      	cmp	r0, r3
 8026b5e:	b510      	push	{r4, lr}
 8026b60:	db11      	blt.n	8026b86 <__any_on+0x32>
 8026b62:	dd0a      	ble.n	8026b7a <__any_on+0x26>
 8026b64:	f011 011f 	ands.w	r1, r1, #31
 8026b68:	d007      	beq.n	8026b7a <__any_on+0x26>
 8026b6a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8026b6e:	fa24 f001 	lsr.w	r0, r4, r1
 8026b72:	fa00 f101 	lsl.w	r1, r0, r1
 8026b76:	428c      	cmp	r4, r1
 8026b78:	d10b      	bne.n	8026b92 <__any_on+0x3e>
 8026b7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026b7e:	4293      	cmp	r3, r2
 8026b80:	d803      	bhi.n	8026b8a <__any_on+0x36>
 8026b82:	2000      	movs	r0, #0
 8026b84:	bd10      	pop	{r4, pc}
 8026b86:	4603      	mov	r3, r0
 8026b88:	e7f7      	b.n	8026b7a <__any_on+0x26>
 8026b8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8026b8e:	2900      	cmp	r1, #0
 8026b90:	d0f5      	beq.n	8026b7e <__any_on+0x2a>
 8026b92:	2001      	movs	r0, #1
 8026b94:	e7f6      	b.n	8026b84 <__any_on+0x30>

08026b96 <sulp>:
 8026b96:	b570      	push	{r4, r5, r6, lr}
 8026b98:	4604      	mov	r4, r0
 8026b9a:	460d      	mov	r5, r1
 8026b9c:	4616      	mov	r6, r2
 8026b9e:	ec45 4b10 	vmov	d0, r4, r5
 8026ba2:	f7ff febd 	bl	8026920 <__ulp>
 8026ba6:	b17e      	cbz	r6, 8026bc8 <sulp+0x32>
 8026ba8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8026bac:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8026bb0:	2b00      	cmp	r3, #0
 8026bb2:	dd09      	ble.n	8026bc8 <sulp+0x32>
 8026bb4:	051b      	lsls	r3, r3, #20
 8026bb6:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8026bba:	2000      	movs	r0, #0
 8026bbc:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8026bc0:	ec41 0b17 	vmov	d7, r0, r1
 8026bc4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8026bc8:	bd70      	pop	{r4, r5, r6, pc}
 8026bca:	0000      	movs	r0, r0
 8026bcc:	0000      	movs	r0, r0
	...

08026bd0 <_strtod_l>:
 8026bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026bd4:	ed2d 8b0a 	vpush	{d8-d12}
 8026bd8:	b097      	sub	sp, #92	@ 0x5c
 8026bda:	4688      	mov	r8, r1
 8026bdc:	920e      	str	r2, [sp, #56]	@ 0x38
 8026bde:	2200      	movs	r2, #0
 8026be0:	9212      	str	r2, [sp, #72]	@ 0x48
 8026be2:	9005      	str	r0, [sp, #20]
 8026be4:	f04f 0a00 	mov.w	sl, #0
 8026be8:	f04f 0b00 	mov.w	fp, #0
 8026bec:	460a      	mov	r2, r1
 8026bee:	9211      	str	r2, [sp, #68]	@ 0x44
 8026bf0:	7811      	ldrb	r1, [r2, #0]
 8026bf2:	292b      	cmp	r1, #43	@ 0x2b
 8026bf4:	d04c      	beq.n	8026c90 <_strtod_l+0xc0>
 8026bf6:	d839      	bhi.n	8026c6c <_strtod_l+0x9c>
 8026bf8:	290d      	cmp	r1, #13
 8026bfa:	d833      	bhi.n	8026c64 <_strtod_l+0x94>
 8026bfc:	2908      	cmp	r1, #8
 8026bfe:	d833      	bhi.n	8026c68 <_strtod_l+0x98>
 8026c00:	2900      	cmp	r1, #0
 8026c02:	d03c      	beq.n	8026c7e <_strtod_l+0xae>
 8026c04:	2200      	movs	r2, #0
 8026c06:	9208      	str	r2, [sp, #32]
 8026c08:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8026c0a:	782a      	ldrb	r2, [r5, #0]
 8026c0c:	2a30      	cmp	r2, #48	@ 0x30
 8026c0e:	f040 80b5 	bne.w	8026d7c <_strtod_l+0x1ac>
 8026c12:	786a      	ldrb	r2, [r5, #1]
 8026c14:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8026c18:	2a58      	cmp	r2, #88	@ 0x58
 8026c1a:	d170      	bne.n	8026cfe <_strtod_l+0x12e>
 8026c1c:	9302      	str	r3, [sp, #8]
 8026c1e:	9b08      	ldr	r3, [sp, #32]
 8026c20:	9301      	str	r3, [sp, #4]
 8026c22:	ab12      	add	r3, sp, #72	@ 0x48
 8026c24:	9300      	str	r3, [sp, #0]
 8026c26:	4a8b      	ldr	r2, [pc, #556]	@ (8026e54 <_strtod_l+0x284>)
 8026c28:	9805      	ldr	r0, [sp, #20]
 8026c2a:	ab13      	add	r3, sp, #76	@ 0x4c
 8026c2c:	a911      	add	r1, sp, #68	@ 0x44
 8026c2e:	f001 fd71 	bl	8028714 <__gethex>
 8026c32:	f010 060f 	ands.w	r6, r0, #15
 8026c36:	4604      	mov	r4, r0
 8026c38:	d005      	beq.n	8026c46 <_strtod_l+0x76>
 8026c3a:	2e06      	cmp	r6, #6
 8026c3c:	d12a      	bne.n	8026c94 <_strtod_l+0xc4>
 8026c3e:	3501      	adds	r5, #1
 8026c40:	2300      	movs	r3, #0
 8026c42:	9511      	str	r5, [sp, #68]	@ 0x44
 8026c44:	9308      	str	r3, [sp, #32]
 8026c46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026c48:	2b00      	cmp	r3, #0
 8026c4a:	f040 852f 	bne.w	80276ac <_strtod_l+0xadc>
 8026c4e:	9b08      	ldr	r3, [sp, #32]
 8026c50:	ec4b ab10 	vmov	d0, sl, fp
 8026c54:	b1cb      	cbz	r3, 8026c8a <_strtod_l+0xba>
 8026c56:	eeb1 0b40 	vneg.f64	d0, d0
 8026c5a:	b017      	add	sp, #92	@ 0x5c
 8026c5c:	ecbd 8b0a 	vpop	{d8-d12}
 8026c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026c64:	2920      	cmp	r1, #32
 8026c66:	d1cd      	bne.n	8026c04 <_strtod_l+0x34>
 8026c68:	3201      	adds	r2, #1
 8026c6a:	e7c0      	b.n	8026bee <_strtod_l+0x1e>
 8026c6c:	292d      	cmp	r1, #45	@ 0x2d
 8026c6e:	d1c9      	bne.n	8026c04 <_strtod_l+0x34>
 8026c70:	2101      	movs	r1, #1
 8026c72:	9108      	str	r1, [sp, #32]
 8026c74:	1c51      	adds	r1, r2, #1
 8026c76:	9111      	str	r1, [sp, #68]	@ 0x44
 8026c78:	7852      	ldrb	r2, [r2, #1]
 8026c7a:	2a00      	cmp	r2, #0
 8026c7c:	d1c4      	bne.n	8026c08 <_strtod_l+0x38>
 8026c7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026c80:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8026c84:	2b00      	cmp	r3, #0
 8026c86:	f040 850f 	bne.w	80276a8 <_strtod_l+0xad8>
 8026c8a:	ec4b ab10 	vmov	d0, sl, fp
 8026c8e:	e7e4      	b.n	8026c5a <_strtod_l+0x8a>
 8026c90:	2100      	movs	r1, #0
 8026c92:	e7ee      	b.n	8026c72 <_strtod_l+0xa2>
 8026c94:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026c96:	b13a      	cbz	r2, 8026ca8 <_strtod_l+0xd8>
 8026c98:	2135      	movs	r1, #53	@ 0x35
 8026c9a:	a814      	add	r0, sp, #80	@ 0x50
 8026c9c:	f7ff ff37 	bl	8026b0e <__copybits>
 8026ca0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026ca2:	9805      	ldr	r0, [sp, #20]
 8026ca4:	f7ff fb08 	bl	80262b8 <_Bfree>
 8026ca8:	1e73      	subs	r3, r6, #1
 8026caa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8026cac:	2b04      	cmp	r3, #4
 8026cae:	d806      	bhi.n	8026cbe <_strtod_l+0xee>
 8026cb0:	e8df f003 	tbb	[pc, r3]
 8026cb4:	201d0314 	.word	0x201d0314
 8026cb8:	14          	.byte	0x14
 8026cb9:	00          	.byte	0x00
 8026cba:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8026cbe:	05e3      	lsls	r3, r4, #23
 8026cc0:	bf48      	it	mi
 8026cc2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8026cc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8026cca:	0d1b      	lsrs	r3, r3, #20
 8026ccc:	051b      	lsls	r3, r3, #20
 8026cce:	2b00      	cmp	r3, #0
 8026cd0:	d1b9      	bne.n	8026c46 <_strtod_l+0x76>
 8026cd2:	f7fe fc27 	bl	8025524 <__errno>
 8026cd6:	2322      	movs	r3, #34	@ 0x22
 8026cd8:	6003      	str	r3, [r0, #0]
 8026cda:	e7b4      	b.n	8026c46 <_strtod_l+0x76>
 8026cdc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8026ce0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8026ce4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8026ce8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8026cec:	e7e7      	b.n	8026cbe <_strtod_l+0xee>
 8026cee:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8026e5c <_strtod_l+0x28c>
 8026cf2:	e7e4      	b.n	8026cbe <_strtod_l+0xee>
 8026cf4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8026cf8:	f04f 3aff 	mov.w	sl, #4294967295
 8026cfc:	e7df      	b.n	8026cbe <_strtod_l+0xee>
 8026cfe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026d00:	1c5a      	adds	r2, r3, #1
 8026d02:	9211      	str	r2, [sp, #68]	@ 0x44
 8026d04:	785b      	ldrb	r3, [r3, #1]
 8026d06:	2b30      	cmp	r3, #48	@ 0x30
 8026d08:	d0f9      	beq.n	8026cfe <_strtod_l+0x12e>
 8026d0a:	2b00      	cmp	r3, #0
 8026d0c:	d09b      	beq.n	8026c46 <_strtod_l+0x76>
 8026d0e:	2301      	movs	r3, #1
 8026d10:	2600      	movs	r6, #0
 8026d12:	9307      	str	r3, [sp, #28]
 8026d14:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026d16:	930a      	str	r3, [sp, #40]	@ 0x28
 8026d18:	46b1      	mov	r9, r6
 8026d1a:	4635      	mov	r5, r6
 8026d1c:	220a      	movs	r2, #10
 8026d1e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8026d20:	7804      	ldrb	r4, [r0, #0]
 8026d22:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8026d26:	b2d9      	uxtb	r1, r3
 8026d28:	2909      	cmp	r1, #9
 8026d2a:	d929      	bls.n	8026d80 <_strtod_l+0x1b0>
 8026d2c:	494a      	ldr	r1, [pc, #296]	@ (8026e58 <_strtod_l+0x288>)
 8026d2e:	2201      	movs	r2, #1
 8026d30:	f7fe fb8c 	bl	802544c <strncmp>
 8026d34:	b378      	cbz	r0, 8026d96 <_strtod_l+0x1c6>
 8026d36:	2000      	movs	r0, #0
 8026d38:	4622      	mov	r2, r4
 8026d3a:	462b      	mov	r3, r5
 8026d3c:	4607      	mov	r7, r0
 8026d3e:	9006      	str	r0, [sp, #24]
 8026d40:	2a65      	cmp	r2, #101	@ 0x65
 8026d42:	d001      	beq.n	8026d48 <_strtod_l+0x178>
 8026d44:	2a45      	cmp	r2, #69	@ 0x45
 8026d46:	d117      	bne.n	8026d78 <_strtod_l+0x1a8>
 8026d48:	b91b      	cbnz	r3, 8026d52 <_strtod_l+0x182>
 8026d4a:	9b07      	ldr	r3, [sp, #28]
 8026d4c:	4303      	orrs	r3, r0
 8026d4e:	d096      	beq.n	8026c7e <_strtod_l+0xae>
 8026d50:	2300      	movs	r3, #0
 8026d52:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8026d56:	f108 0201 	add.w	r2, r8, #1
 8026d5a:	9211      	str	r2, [sp, #68]	@ 0x44
 8026d5c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8026d60:	2a2b      	cmp	r2, #43	@ 0x2b
 8026d62:	d06b      	beq.n	8026e3c <_strtod_l+0x26c>
 8026d64:	2a2d      	cmp	r2, #45	@ 0x2d
 8026d66:	d071      	beq.n	8026e4c <_strtod_l+0x27c>
 8026d68:	f04f 0e00 	mov.w	lr, #0
 8026d6c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8026d70:	2c09      	cmp	r4, #9
 8026d72:	d979      	bls.n	8026e68 <_strtod_l+0x298>
 8026d74:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8026d78:	2400      	movs	r4, #0
 8026d7a:	e094      	b.n	8026ea6 <_strtod_l+0x2d6>
 8026d7c:	2300      	movs	r3, #0
 8026d7e:	e7c7      	b.n	8026d10 <_strtod_l+0x140>
 8026d80:	2d08      	cmp	r5, #8
 8026d82:	f100 0001 	add.w	r0, r0, #1
 8026d86:	bfd4      	ite	le
 8026d88:	fb02 3909 	mlale	r9, r2, r9, r3
 8026d8c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8026d90:	3501      	adds	r5, #1
 8026d92:	9011      	str	r0, [sp, #68]	@ 0x44
 8026d94:	e7c3      	b.n	8026d1e <_strtod_l+0x14e>
 8026d96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026d98:	1c5a      	adds	r2, r3, #1
 8026d9a:	9211      	str	r2, [sp, #68]	@ 0x44
 8026d9c:	785a      	ldrb	r2, [r3, #1]
 8026d9e:	b375      	cbz	r5, 8026dfe <_strtod_l+0x22e>
 8026da0:	4607      	mov	r7, r0
 8026da2:	462b      	mov	r3, r5
 8026da4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8026da8:	2909      	cmp	r1, #9
 8026daa:	d913      	bls.n	8026dd4 <_strtod_l+0x204>
 8026dac:	2101      	movs	r1, #1
 8026dae:	9106      	str	r1, [sp, #24]
 8026db0:	e7c6      	b.n	8026d40 <_strtod_l+0x170>
 8026db2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026db4:	1c5a      	adds	r2, r3, #1
 8026db6:	9211      	str	r2, [sp, #68]	@ 0x44
 8026db8:	785a      	ldrb	r2, [r3, #1]
 8026dba:	3001      	adds	r0, #1
 8026dbc:	2a30      	cmp	r2, #48	@ 0x30
 8026dbe:	d0f8      	beq.n	8026db2 <_strtod_l+0x1e2>
 8026dc0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8026dc4:	2b08      	cmp	r3, #8
 8026dc6:	f200 8476 	bhi.w	80276b6 <_strtod_l+0xae6>
 8026dca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026dcc:	930a      	str	r3, [sp, #40]	@ 0x28
 8026dce:	4607      	mov	r7, r0
 8026dd0:	2000      	movs	r0, #0
 8026dd2:	4603      	mov	r3, r0
 8026dd4:	3a30      	subs	r2, #48	@ 0x30
 8026dd6:	f100 0101 	add.w	r1, r0, #1
 8026dda:	d023      	beq.n	8026e24 <_strtod_l+0x254>
 8026ddc:	440f      	add	r7, r1
 8026dde:	eb00 0c03 	add.w	ip, r0, r3
 8026de2:	4619      	mov	r1, r3
 8026de4:	240a      	movs	r4, #10
 8026de6:	4561      	cmp	r1, ip
 8026de8:	d10b      	bne.n	8026e02 <_strtod_l+0x232>
 8026dea:	1c5c      	adds	r4, r3, #1
 8026dec:	4403      	add	r3, r0
 8026dee:	2b08      	cmp	r3, #8
 8026df0:	4404      	add	r4, r0
 8026df2:	dc11      	bgt.n	8026e18 <_strtod_l+0x248>
 8026df4:	230a      	movs	r3, #10
 8026df6:	fb03 2909 	mla	r9, r3, r9, r2
 8026dfa:	2100      	movs	r1, #0
 8026dfc:	e013      	b.n	8026e26 <_strtod_l+0x256>
 8026dfe:	4628      	mov	r0, r5
 8026e00:	e7dc      	b.n	8026dbc <_strtod_l+0x1ec>
 8026e02:	2908      	cmp	r1, #8
 8026e04:	f101 0101 	add.w	r1, r1, #1
 8026e08:	dc02      	bgt.n	8026e10 <_strtod_l+0x240>
 8026e0a:	fb04 f909 	mul.w	r9, r4, r9
 8026e0e:	e7ea      	b.n	8026de6 <_strtod_l+0x216>
 8026e10:	2910      	cmp	r1, #16
 8026e12:	bfd8      	it	le
 8026e14:	4366      	mulle	r6, r4
 8026e16:	e7e6      	b.n	8026de6 <_strtod_l+0x216>
 8026e18:	2b0f      	cmp	r3, #15
 8026e1a:	dcee      	bgt.n	8026dfa <_strtod_l+0x22a>
 8026e1c:	230a      	movs	r3, #10
 8026e1e:	fb03 2606 	mla	r6, r3, r6, r2
 8026e22:	e7ea      	b.n	8026dfa <_strtod_l+0x22a>
 8026e24:	461c      	mov	r4, r3
 8026e26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026e28:	1c5a      	adds	r2, r3, #1
 8026e2a:	9211      	str	r2, [sp, #68]	@ 0x44
 8026e2c:	785a      	ldrb	r2, [r3, #1]
 8026e2e:	4608      	mov	r0, r1
 8026e30:	4623      	mov	r3, r4
 8026e32:	e7b7      	b.n	8026da4 <_strtod_l+0x1d4>
 8026e34:	2301      	movs	r3, #1
 8026e36:	2700      	movs	r7, #0
 8026e38:	9306      	str	r3, [sp, #24]
 8026e3a:	e786      	b.n	8026d4a <_strtod_l+0x17a>
 8026e3c:	f04f 0e00 	mov.w	lr, #0
 8026e40:	f108 0202 	add.w	r2, r8, #2
 8026e44:	9211      	str	r2, [sp, #68]	@ 0x44
 8026e46:	f898 2002 	ldrb.w	r2, [r8, #2]
 8026e4a:	e78f      	b.n	8026d6c <_strtod_l+0x19c>
 8026e4c:	f04f 0e01 	mov.w	lr, #1
 8026e50:	e7f6      	b.n	8026e40 <_strtod_l+0x270>
 8026e52:	bf00      	nop
 8026e54:	0802d300 	.word	0x0802d300
 8026e58:	0802d2e8 	.word	0x0802d2e8
 8026e5c:	7ff00000 	.word	0x7ff00000
 8026e60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026e62:	1c54      	adds	r4, r2, #1
 8026e64:	9411      	str	r4, [sp, #68]	@ 0x44
 8026e66:	7852      	ldrb	r2, [r2, #1]
 8026e68:	2a30      	cmp	r2, #48	@ 0x30
 8026e6a:	d0f9      	beq.n	8026e60 <_strtod_l+0x290>
 8026e6c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8026e70:	2c08      	cmp	r4, #8
 8026e72:	d881      	bhi.n	8026d78 <_strtod_l+0x1a8>
 8026e74:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8026e78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026e7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8026e7c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026e7e:	1c51      	adds	r1, r2, #1
 8026e80:	9111      	str	r1, [sp, #68]	@ 0x44
 8026e82:	7852      	ldrb	r2, [r2, #1]
 8026e84:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8026e88:	2c09      	cmp	r4, #9
 8026e8a:	d938      	bls.n	8026efe <_strtod_l+0x32e>
 8026e8c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026e8e:	1b0c      	subs	r4, r1, r4
 8026e90:	2c08      	cmp	r4, #8
 8026e92:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8026e96:	dc02      	bgt.n	8026e9e <_strtod_l+0x2ce>
 8026e98:	4564      	cmp	r4, ip
 8026e9a:	bfa8      	it	ge
 8026e9c:	4664      	movge	r4, ip
 8026e9e:	f1be 0f00 	cmp.w	lr, #0
 8026ea2:	d000      	beq.n	8026ea6 <_strtod_l+0x2d6>
 8026ea4:	4264      	negs	r4, r4
 8026ea6:	2b00      	cmp	r3, #0
 8026ea8:	d14e      	bne.n	8026f48 <_strtod_l+0x378>
 8026eaa:	9b07      	ldr	r3, [sp, #28]
 8026eac:	4318      	orrs	r0, r3
 8026eae:	f47f aeca 	bne.w	8026c46 <_strtod_l+0x76>
 8026eb2:	9b06      	ldr	r3, [sp, #24]
 8026eb4:	2b00      	cmp	r3, #0
 8026eb6:	f47f aee2 	bne.w	8026c7e <_strtod_l+0xae>
 8026eba:	2a69      	cmp	r2, #105	@ 0x69
 8026ebc:	d027      	beq.n	8026f0e <_strtod_l+0x33e>
 8026ebe:	dc24      	bgt.n	8026f0a <_strtod_l+0x33a>
 8026ec0:	2a49      	cmp	r2, #73	@ 0x49
 8026ec2:	d024      	beq.n	8026f0e <_strtod_l+0x33e>
 8026ec4:	2a4e      	cmp	r2, #78	@ 0x4e
 8026ec6:	f47f aeda 	bne.w	8026c7e <_strtod_l+0xae>
 8026eca:	4997      	ldr	r1, [pc, #604]	@ (8027128 <_strtod_l+0x558>)
 8026ecc:	a811      	add	r0, sp, #68	@ 0x44
 8026ece:	f001 fe43 	bl	8028b58 <__match>
 8026ed2:	2800      	cmp	r0, #0
 8026ed4:	f43f aed3 	beq.w	8026c7e <_strtod_l+0xae>
 8026ed8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026eda:	781b      	ldrb	r3, [r3, #0]
 8026edc:	2b28      	cmp	r3, #40	@ 0x28
 8026ede:	d12d      	bne.n	8026f3c <_strtod_l+0x36c>
 8026ee0:	4992      	ldr	r1, [pc, #584]	@ (802712c <_strtod_l+0x55c>)
 8026ee2:	aa14      	add	r2, sp, #80	@ 0x50
 8026ee4:	a811      	add	r0, sp, #68	@ 0x44
 8026ee6:	f001 fe4b 	bl	8028b80 <__hexnan>
 8026eea:	2805      	cmp	r0, #5
 8026eec:	d126      	bne.n	8026f3c <_strtod_l+0x36c>
 8026eee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026ef0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8026ef4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8026ef8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8026efc:	e6a3      	b.n	8026c46 <_strtod_l+0x76>
 8026efe:	240a      	movs	r4, #10
 8026f00:	fb04 2c0c 	mla	ip, r4, ip, r2
 8026f04:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8026f08:	e7b8      	b.n	8026e7c <_strtod_l+0x2ac>
 8026f0a:	2a6e      	cmp	r2, #110	@ 0x6e
 8026f0c:	e7db      	b.n	8026ec6 <_strtod_l+0x2f6>
 8026f0e:	4988      	ldr	r1, [pc, #544]	@ (8027130 <_strtod_l+0x560>)
 8026f10:	a811      	add	r0, sp, #68	@ 0x44
 8026f12:	f001 fe21 	bl	8028b58 <__match>
 8026f16:	2800      	cmp	r0, #0
 8026f18:	f43f aeb1 	beq.w	8026c7e <_strtod_l+0xae>
 8026f1c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026f1e:	4985      	ldr	r1, [pc, #532]	@ (8027134 <_strtod_l+0x564>)
 8026f20:	3b01      	subs	r3, #1
 8026f22:	a811      	add	r0, sp, #68	@ 0x44
 8026f24:	9311      	str	r3, [sp, #68]	@ 0x44
 8026f26:	f001 fe17 	bl	8028b58 <__match>
 8026f2a:	b910      	cbnz	r0, 8026f32 <_strtod_l+0x362>
 8026f2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026f2e:	3301      	adds	r3, #1
 8026f30:	9311      	str	r3, [sp, #68]	@ 0x44
 8026f32:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8027148 <_strtod_l+0x578>
 8026f36:	f04f 0a00 	mov.w	sl, #0
 8026f3a:	e684      	b.n	8026c46 <_strtod_l+0x76>
 8026f3c:	487e      	ldr	r0, [pc, #504]	@ (8027138 <_strtod_l+0x568>)
 8026f3e:	f001 fb5f 	bl	8028600 <nan>
 8026f42:	ec5b ab10 	vmov	sl, fp, d0
 8026f46:	e67e      	b.n	8026c46 <_strtod_l+0x76>
 8026f48:	ee07 9a90 	vmov	s15, r9
 8026f4c:	1be2      	subs	r2, r4, r7
 8026f4e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8026f52:	2d00      	cmp	r5, #0
 8026f54:	bf08      	it	eq
 8026f56:	461d      	moveq	r5, r3
 8026f58:	2b10      	cmp	r3, #16
 8026f5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8026f5c:	461a      	mov	r2, r3
 8026f5e:	bfa8      	it	ge
 8026f60:	2210      	movge	r2, #16
 8026f62:	2b09      	cmp	r3, #9
 8026f64:	ec5b ab17 	vmov	sl, fp, d7
 8026f68:	dc15      	bgt.n	8026f96 <_strtod_l+0x3c6>
 8026f6a:	1be1      	subs	r1, r4, r7
 8026f6c:	2900      	cmp	r1, #0
 8026f6e:	f43f ae6a 	beq.w	8026c46 <_strtod_l+0x76>
 8026f72:	eba4 0107 	sub.w	r1, r4, r7
 8026f76:	dd72      	ble.n	802705e <_strtod_l+0x48e>
 8026f78:	2916      	cmp	r1, #22
 8026f7a:	dc59      	bgt.n	8027030 <_strtod_l+0x460>
 8026f7c:	4b6f      	ldr	r3, [pc, #444]	@ (802713c <_strtod_l+0x56c>)
 8026f7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026f80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026f84:	ed93 7b00 	vldr	d7, [r3]
 8026f88:	ec4b ab16 	vmov	d6, sl, fp
 8026f8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026f90:	ec5b ab17 	vmov	sl, fp, d7
 8026f94:	e657      	b.n	8026c46 <_strtod_l+0x76>
 8026f96:	4969      	ldr	r1, [pc, #420]	@ (802713c <_strtod_l+0x56c>)
 8026f98:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8026f9c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8026fa0:	ee06 6a90 	vmov	s13, r6
 8026fa4:	2b0f      	cmp	r3, #15
 8026fa6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8026faa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8026fae:	ec5b ab16 	vmov	sl, fp, d6
 8026fb2:	ddda      	ble.n	8026f6a <_strtod_l+0x39a>
 8026fb4:	1a9a      	subs	r2, r3, r2
 8026fb6:	1be1      	subs	r1, r4, r7
 8026fb8:	440a      	add	r2, r1
 8026fba:	2a00      	cmp	r2, #0
 8026fbc:	f340 8094 	ble.w	80270e8 <_strtod_l+0x518>
 8026fc0:	f012 000f 	ands.w	r0, r2, #15
 8026fc4:	d00a      	beq.n	8026fdc <_strtod_l+0x40c>
 8026fc6:	495d      	ldr	r1, [pc, #372]	@ (802713c <_strtod_l+0x56c>)
 8026fc8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8026fcc:	ed91 7b00 	vldr	d7, [r1]
 8026fd0:	ec4b ab16 	vmov	d6, sl, fp
 8026fd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026fd8:	ec5b ab17 	vmov	sl, fp, d7
 8026fdc:	f032 020f 	bics.w	r2, r2, #15
 8026fe0:	d073      	beq.n	80270ca <_strtod_l+0x4fa>
 8026fe2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8026fe6:	dd47      	ble.n	8027078 <_strtod_l+0x4a8>
 8026fe8:	2400      	movs	r4, #0
 8026fea:	4625      	mov	r5, r4
 8026fec:	9407      	str	r4, [sp, #28]
 8026fee:	4626      	mov	r6, r4
 8026ff0:	9a05      	ldr	r2, [sp, #20]
 8026ff2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8027148 <_strtod_l+0x578>
 8026ff6:	2322      	movs	r3, #34	@ 0x22
 8026ff8:	6013      	str	r3, [r2, #0]
 8026ffa:	f04f 0a00 	mov.w	sl, #0
 8026ffe:	9b07      	ldr	r3, [sp, #28]
 8027000:	2b00      	cmp	r3, #0
 8027002:	f43f ae20 	beq.w	8026c46 <_strtod_l+0x76>
 8027006:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027008:	9805      	ldr	r0, [sp, #20]
 802700a:	f7ff f955 	bl	80262b8 <_Bfree>
 802700e:	9805      	ldr	r0, [sp, #20]
 8027010:	4631      	mov	r1, r6
 8027012:	f7ff f951 	bl	80262b8 <_Bfree>
 8027016:	9805      	ldr	r0, [sp, #20]
 8027018:	4629      	mov	r1, r5
 802701a:	f7ff f94d 	bl	80262b8 <_Bfree>
 802701e:	9907      	ldr	r1, [sp, #28]
 8027020:	9805      	ldr	r0, [sp, #20]
 8027022:	f7ff f949 	bl	80262b8 <_Bfree>
 8027026:	9805      	ldr	r0, [sp, #20]
 8027028:	4621      	mov	r1, r4
 802702a:	f7ff f945 	bl	80262b8 <_Bfree>
 802702e:	e60a      	b.n	8026c46 <_strtod_l+0x76>
 8027030:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8027034:	1be0      	subs	r0, r4, r7
 8027036:	4281      	cmp	r1, r0
 8027038:	dbbc      	blt.n	8026fb4 <_strtod_l+0x3e4>
 802703a:	4a40      	ldr	r2, [pc, #256]	@ (802713c <_strtod_l+0x56c>)
 802703c:	f1c3 030f 	rsb	r3, r3, #15
 8027040:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8027044:	ed91 7b00 	vldr	d7, [r1]
 8027048:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802704a:	ec4b ab16 	vmov	d6, sl, fp
 802704e:	1acb      	subs	r3, r1, r3
 8027050:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8027054:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027058:	ed92 6b00 	vldr	d6, [r2]
 802705c:	e796      	b.n	8026f8c <_strtod_l+0x3bc>
 802705e:	3116      	adds	r1, #22
 8027060:	dba8      	blt.n	8026fb4 <_strtod_l+0x3e4>
 8027062:	4b36      	ldr	r3, [pc, #216]	@ (802713c <_strtod_l+0x56c>)
 8027064:	1b3c      	subs	r4, r7, r4
 8027066:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 802706a:	ed94 7b00 	vldr	d7, [r4]
 802706e:	ec4b ab16 	vmov	d6, sl, fp
 8027072:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8027076:	e78b      	b.n	8026f90 <_strtod_l+0x3c0>
 8027078:	2000      	movs	r0, #0
 802707a:	ec4b ab17 	vmov	d7, sl, fp
 802707e:	4e30      	ldr	r6, [pc, #192]	@ (8027140 <_strtod_l+0x570>)
 8027080:	1112      	asrs	r2, r2, #4
 8027082:	4601      	mov	r1, r0
 8027084:	2a01      	cmp	r2, #1
 8027086:	dc23      	bgt.n	80270d0 <_strtod_l+0x500>
 8027088:	b108      	cbz	r0, 802708e <_strtod_l+0x4be>
 802708a:	ec5b ab17 	vmov	sl, fp, d7
 802708e:	4a2c      	ldr	r2, [pc, #176]	@ (8027140 <_strtod_l+0x570>)
 8027090:	482c      	ldr	r0, [pc, #176]	@ (8027144 <_strtod_l+0x574>)
 8027092:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8027096:	ed92 7b00 	vldr	d7, [r2]
 802709a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 802709e:	ec4b ab16 	vmov	d6, sl, fp
 80270a2:	4a29      	ldr	r2, [pc, #164]	@ (8027148 <_strtod_l+0x578>)
 80270a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80270a8:	ee17 1a90 	vmov	r1, s15
 80270ac:	400a      	ands	r2, r1
 80270ae:	4282      	cmp	r2, r0
 80270b0:	ec5b ab17 	vmov	sl, fp, d7
 80270b4:	d898      	bhi.n	8026fe8 <_strtod_l+0x418>
 80270b6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80270ba:	4282      	cmp	r2, r0
 80270bc:	bf86      	itte	hi
 80270be:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 802714c <_strtod_l+0x57c>
 80270c2:	f04f 3aff 	movhi.w	sl, #4294967295
 80270c6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80270ca:	2200      	movs	r2, #0
 80270cc:	9206      	str	r2, [sp, #24]
 80270ce:	e076      	b.n	80271be <_strtod_l+0x5ee>
 80270d0:	f012 0f01 	tst.w	r2, #1
 80270d4:	d004      	beq.n	80270e0 <_strtod_l+0x510>
 80270d6:	ed96 6b00 	vldr	d6, [r6]
 80270da:	2001      	movs	r0, #1
 80270dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80270e0:	3101      	adds	r1, #1
 80270e2:	1052      	asrs	r2, r2, #1
 80270e4:	3608      	adds	r6, #8
 80270e6:	e7cd      	b.n	8027084 <_strtod_l+0x4b4>
 80270e8:	d0ef      	beq.n	80270ca <_strtod_l+0x4fa>
 80270ea:	4252      	negs	r2, r2
 80270ec:	f012 000f 	ands.w	r0, r2, #15
 80270f0:	d00a      	beq.n	8027108 <_strtod_l+0x538>
 80270f2:	4912      	ldr	r1, [pc, #72]	@ (802713c <_strtod_l+0x56c>)
 80270f4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80270f8:	ed91 7b00 	vldr	d7, [r1]
 80270fc:	ec4b ab16 	vmov	d6, sl, fp
 8027100:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8027104:	ec5b ab17 	vmov	sl, fp, d7
 8027108:	1112      	asrs	r2, r2, #4
 802710a:	d0de      	beq.n	80270ca <_strtod_l+0x4fa>
 802710c:	2a1f      	cmp	r2, #31
 802710e:	dd1f      	ble.n	8027150 <_strtod_l+0x580>
 8027110:	2400      	movs	r4, #0
 8027112:	4625      	mov	r5, r4
 8027114:	9407      	str	r4, [sp, #28]
 8027116:	4626      	mov	r6, r4
 8027118:	9a05      	ldr	r2, [sp, #20]
 802711a:	2322      	movs	r3, #34	@ 0x22
 802711c:	f04f 0a00 	mov.w	sl, #0
 8027120:	f04f 0b00 	mov.w	fp, #0
 8027124:	6013      	str	r3, [r2, #0]
 8027126:	e76a      	b.n	8026ffe <_strtod_l+0x42e>
 8027128:	0802d0b1 	.word	0x0802d0b1
 802712c:	0802d2ec 	.word	0x0802d2ec
 8027130:	0802d0a9 	.word	0x0802d0a9
 8027134:	0802d11a 	.word	0x0802d11a
 8027138:	0802d116 	.word	0x0802d116
 802713c:	0802d220 	.word	0x0802d220
 8027140:	0802d1f8 	.word	0x0802d1f8
 8027144:	7ca00000 	.word	0x7ca00000
 8027148:	7ff00000 	.word	0x7ff00000
 802714c:	7fefffff 	.word	0x7fefffff
 8027150:	f012 0110 	ands.w	r1, r2, #16
 8027154:	bf18      	it	ne
 8027156:	216a      	movne	r1, #106	@ 0x6a
 8027158:	9106      	str	r1, [sp, #24]
 802715a:	ec4b ab17 	vmov	d7, sl, fp
 802715e:	49b0      	ldr	r1, [pc, #704]	@ (8027420 <_strtod_l+0x850>)
 8027160:	2000      	movs	r0, #0
 8027162:	07d6      	lsls	r6, r2, #31
 8027164:	d504      	bpl.n	8027170 <_strtod_l+0x5a0>
 8027166:	ed91 6b00 	vldr	d6, [r1]
 802716a:	2001      	movs	r0, #1
 802716c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027170:	1052      	asrs	r2, r2, #1
 8027172:	f101 0108 	add.w	r1, r1, #8
 8027176:	d1f4      	bne.n	8027162 <_strtod_l+0x592>
 8027178:	b108      	cbz	r0, 802717e <_strtod_l+0x5ae>
 802717a:	ec5b ab17 	vmov	sl, fp, d7
 802717e:	9a06      	ldr	r2, [sp, #24]
 8027180:	b1b2      	cbz	r2, 80271b0 <_strtod_l+0x5e0>
 8027182:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8027186:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 802718a:	2a00      	cmp	r2, #0
 802718c:	4658      	mov	r0, fp
 802718e:	dd0f      	ble.n	80271b0 <_strtod_l+0x5e0>
 8027190:	2a1f      	cmp	r2, #31
 8027192:	dd55      	ble.n	8027240 <_strtod_l+0x670>
 8027194:	2a34      	cmp	r2, #52	@ 0x34
 8027196:	bfde      	ittt	le
 8027198:	f04f 32ff 	movle.w	r2, #4294967295
 802719c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80271a0:	408a      	lslle	r2, r1
 80271a2:	f04f 0a00 	mov.w	sl, #0
 80271a6:	bfcc      	ite	gt
 80271a8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80271ac:	ea02 0b00 	andle.w	fp, r2, r0
 80271b0:	ec4b ab17 	vmov	d7, sl, fp
 80271b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80271b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80271bc:	d0a8      	beq.n	8027110 <_strtod_l+0x540>
 80271be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80271c0:	9805      	ldr	r0, [sp, #20]
 80271c2:	f8cd 9000 	str.w	r9, [sp]
 80271c6:	462a      	mov	r2, r5
 80271c8:	f7ff f8de 	bl	8026388 <__s2b>
 80271cc:	9007      	str	r0, [sp, #28]
 80271ce:	2800      	cmp	r0, #0
 80271d0:	f43f af0a 	beq.w	8026fe8 <_strtod_l+0x418>
 80271d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80271d6:	1b3f      	subs	r7, r7, r4
 80271d8:	2b00      	cmp	r3, #0
 80271da:	bfb4      	ite	lt
 80271dc:	463b      	movlt	r3, r7
 80271de:	2300      	movge	r3, #0
 80271e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80271e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80271e4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8027410 <_strtod_l+0x840>
 80271e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80271ec:	2400      	movs	r4, #0
 80271ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80271f0:	4625      	mov	r5, r4
 80271f2:	9b07      	ldr	r3, [sp, #28]
 80271f4:	9805      	ldr	r0, [sp, #20]
 80271f6:	6859      	ldr	r1, [r3, #4]
 80271f8:	f7ff f81e 	bl	8026238 <_Balloc>
 80271fc:	4606      	mov	r6, r0
 80271fe:	2800      	cmp	r0, #0
 8027200:	f43f aef6 	beq.w	8026ff0 <_strtod_l+0x420>
 8027204:	9b07      	ldr	r3, [sp, #28]
 8027206:	691a      	ldr	r2, [r3, #16]
 8027208:	ec4b ab19 	vmov	d9, sl, fp
 802720c:	3202      	adds	r2, #2
 802720e:	f103 010c 	add.w	r1, r3, #12
 8027212:	0092      	lsls	r2, r2, #2
 8027214:	300c      	adds	r0, #12
 8027216:	f7fe f9b2 	bl	802557e <memcpy>
 802721a:	eeb0 0b49 	vmov.f64	d0, d9
 802721e:	9805      	ldr	r0, [sp, #20]
 8027220:	aa14      	add	r2, sp, #80	@ 0x50
 8027222:	a913      	add	r1, sp, #76	@ 0x4c
 8027224:	f7ff fbec 	bl	8026a00 <__d2b>
 8027228:	9012      	str	r0, [sp, #72]	@ 0x48
 802722a:	2800      	cmp	r0, #0
 802722c:	f43f aee0 	beq.w	8026ff0 <_strtod_l+0x420>
 8027230:	9805      	ldr	r0, [sp, #20]
 8027232:	2101      	movs	r1, #1
 8027234:	f7ff f93e 	bl	80264b4 <__i2b>
 8027238:	4605      	mov	r5, r0
 802723a:	b940      	cbnz	r0, 802724e <_strtod_l+0x67e>
 802723c:	2500      	movs	r5, #0
 802723e:	e6d7      	b.n	8026ff0 <_strtod_l+0x420>
 8027240:	f04f 31ff 	mov.w	r1, #4294967295
 8027244:	fa01 f202 	lsl.w	r2, r1, r2
 8027248:	ea02 0a0a 	and.w	sl, r2, sl
 802724c:	e7b0      	b.n	80271b0 <_strtod_l+0x5e0>
 802724e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8027250:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027252:	2f00      	cmp	r7, #0
 8027254:	bfab      	itete	ge
 8027256:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8027258:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 802725a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 802725e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8027262:	bfac      	ite	ge
 8027264:	eb07 0903 	addge.w	r9, r7, r3
 8027268:	eba3 0807 	sublt.w	r8, r3, r7
 802726c:	9b06      	ldr	r3, [sp, #24]
 802726e:	1aff      	subs	r7, r7, r3
 8027270:	4417      	add	r7, r2
 8027272:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8027276:	4a6b      	ldr	r2, [pc, #428]	@ (8027424 <_strtod_l+0x854>)
 8027278:	3f01      	subs	r7, #1
 802727a:	4297      	cmp	r7, r2
 802727c:	da51      	bge.n	8027322 <_strtod_l+0x752>
 802727e:	1bd1      	subs	r1, r2, r7
 8027280:	291f      	cmp	r1, #31
 8027282:	eba3 0301 	sub.w	r3, r3, r1
 8027286:	f04f 0201 	mov.w	r2, #1
 802728a:	dc3e      	bgt.n	802730a <_strtod_l+0x73a>
 802728c:	408a      	lsls	r2, r1
 802728e:	920c      	str	r2, [sp, #48]	@ 0x30
 8027290:	2200      	movs	r2, #0
 8027292:	920b      	str	r2, [sp, #44]	@ 0x2c
 8027294:	eb09 0703 	add.w	r7, r9, r3
 8027298:	4498      	add	r8, r3
 802729a:	9b06      	ldr	r3, [sp, #24]
 802729c:	45b9      	cmp	r9, r7
 802729e:	4498      	add	r8, r3
 80272a0:	464b      	mov	r3, r9
 80272a2:	bfa8      	it	ge
 80272a4:	463b      	movge	r3, r7
 80272a6:	4543      	cmp	r3, r8
 80272a8:	bfa8      	it	ge
 80272aa:	4643      	movge	r3, r8
 80272ac:	2b00      	cmp	r3, #0
 80272ae:	bfc2      	ittt	gt
 80272b0:	1aff      	subgt	r7, r7, r3
 80272b2:	eba8 0803 	subgt.w	r8, r8, r3
 80272b6:	eba9 0903 	subgt.w	r9, r9, r3
 80272ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80272bc:	2b00      	cmp	r3, #0
 80272be:	dd16      	ble.n	80272ee <_strtod_l+0x71e>
 80272c0:	4629      	mov	r1, r5
 80272c2:	9805      	ldr	r0, [sp, #20]
 80272c4:	461a      	mov	r2, r3
 80272c6:	f7ff f9b5 	bl	8026634 <__pow5mult>
 80272ca:	4605      	mov	r5, r0
 80272cc:	2800      	cmp	r0, #0
 80272ce:	d0b5      	beq.n	802723c <_strtod_l+0x66c>
 80272d0:	4601      	mov	r1, r0
 80272d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80272d4:	9805      	ldr	r0, [sp, #20]
 80272d6:	f7ff f903 	bl	80264e0 <__multiply>
 80272da:	900f      	str	r0, [sp, #60]	@ 0x3c
 80272dc:	2800      	cmp	r0, #0
 80272de:	f43f ae87 	beq.w	8026ff0 <_strtod_l+0x420>
 80272e2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80272e4:	9805      	ldr	r0, [sp, #20]
 80272e6:	f7fe ffe7 	bl	80262b8 <_Bfree>
 80272ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80272ec:	9312      	str	r3, [sp, #72]	@ 0x48
 80272ee:	2f00      	cmp	r7, #0
 80272f0:	dc1b      	bgt.n	802732a <_strtod_l+0x75a>
 80272f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80272f4:	2b00      	cmp	r3, #0
 80272f6:	dd21      	ble.n	802733c <_strtod_l+0x76c>
 80272f8:	4631      	mov	r1, r6
 80272fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80272fc:	9805      	ldr	r0, [sp, #20]
 80272fe:	f7ff f999 	bl	8026634 <__pow5mult>
 8027302:	4606      	mov	r6, r0
 8027304:	b9d0      	cbnz	r0, 802733c <_strtod_l+0x76c>
 8027306:	2600      	movs	r6, #0
 8027308:	e672      	b.n	8026ff0 <_strtod_l+0x420>
 802730a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 802730e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8027312:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8027316:	37e2      	adds	r7, #226	@ 0xe2
 8027318:	fa02 f107 	lsl.w	r1, r2, r7
 802731c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802731e:	920c      	str	r2, [sp, #48]	@ 0x30
 8027320:	e7b8      	b.n	8027294 <_strtod_l+0x6c4>
 8027322:	2200      	movs	r2, #0
 8027324:	920b      	str	r2, [sp, #44]	@ 0x2c
 8027326:	2201      	movs	r2, #1
 8027328:	e7f9      	b.n	802731e <_strtod_l+0x74e>
 802732a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802732c:	9805      	ldr	r0, [sp, #20]
 802732e:	463a      	mov	r2, r7
 8027330:	f7ff f9da 	bl	80266e8 <__lshift>
 8027334:	9012      	str	r0, [sp, #72]	@ 0x48
 8027336:	2800      	cmp	r0, #0
 8027338:	d1db      	bne.n	80272f2 <_strtod_l+0x722>
 802733a:	e659      	b.n	8026ff0 <_strtod_l+0x420>
 802733c:	f1b8 0f00 	cmp.w	r8, #0
 8027340:	dd07      	ble.n	8027352 <_strtod_l+0x782>
 8027342:	4631      	mov	r1, r6
 8027344:	9805      	ldr	r0, [sp, #20]
 8027346:	4642      	mov	r2, r8
 8027348:	f7ff f9ce 	bl	80266e8 <__lshift>
 802734c:	4606      	mov	r6, r0
 802734e:	2800      	cmp	r0, #0
 8027350:	d0d9      	beq.n	8027306 <_strtod_l+0x736>
 8027352:	f1b9 0f00 	cmp.w	r9, #0
 8027356:	dd08      	ble.n	802736a <_strtod_l+0x79a>
 8027358:	4629      	mov	r1, r5
 802735a:	9805      	ldr	r0, [sp, #20]
 802735c:	464a      	mov	r2, r9
 802735e:	f7ff f9c3 	bl	80266e8 <__lshift>
 8027362:	4605      	mov	r5, r0
 8027364:	2800      	cmp	r0, #0
 8027366:	f43f ae43 	beq.w	8026ff0 <_strtod_l+0x420>
 802736a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802736c:	9805      	ldr	r0, [sp, #20]
 802736e:	4632      	mov	r2, r6
 8027370:	f7ff fa42 	bl	80267f8 <__mdiff>
 8027374:	4604      	mov	r4, r0
 8027376:	2800      	cmp	r0, #0
 8027378:	f43f ae3a 	beq.w	8026ff0 <_strtod_l+0x420>
 802737c:	2300      	movs	r3, #0
 802737e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8027382:	60c3      	str	r3, [r0, #12]
 8027384:	4629      	mov	r1, r5
 8027386:	f7ff fa1b 	bl	80267c0 <__mcmp>
 802738a:	2800      	cmp	r0, #0
 802738c:	da4e      	bge.n	802742c <_strtod_l+0x85c>
 802738e:	ea58 080a 	orrs.w	r8, r8, sl
 8027392:	d174      	bne.n	802747e <_strtod_l+0x8ae>
 8027394:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8027398:	2b00      	cmp	r3, #0
 802739a:	d170      	bne.n	802747e <_strtod_l+0x8ae>
 802739c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80273a0:	0d1b      	lsrs	r3, r3, #20
 80273a2:	051b      	lsls	r3, r3, #20
 80273a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80273a8:	d969      	bls.n	802747e <_strtod_l+0x8ae>
 80273aa:	6963      	ldr	r3, [r4, #20]
 80273ac:	b913      	cbnz	r3, 80273b4 <_strtod_l+0x7e4>
 80273ae:	6923      	ldr	r3, [r4, #16]
 80273b0:	2b01      	cmp	r3, #1
 80273b2:	dd64      	ble.n	802747e <_strtod_l+0x8ae>
 80273b4:	4621      	mov	r1, r4
 80273b6:	2201      	movs	r2, #1
 80273b8:	9805      	ldr	r0, [sp, #20]
 80273ba:	f7ff f995 	bl	80266e8 <__lshift>
 80273be:	4629      	mov	r1, r5
 80273c0:	4604      	mov	r4, r0
 80273c2:	f7ff f9fd 	bl	80267c0 <__mcmp>
 80273c6:	2800      	cmp	r0, #0
 80273c8:	dd59      	ble.n	802747e <_strtod_l+0x8ae>
 80273ca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80273ce:	9a06      	ldr	r2, [sp, #24]
 80273d0:	0d1b      	lsrs	r3, r3, #20
 80273d2:	051b      	lsls	r3, r3, #20
 80273d4:	2a00      	cmp	r2, #0
 80273d6:	d070      	beq.n	80274ba <_strtod_l+0x8ea>
 80273d8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80273dc:	d86d      	bhi.n	80274ba <_strtod_l+0x8ea>
 80273de:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80273e2:	f67f ae99 	bls.w	8027118 <_strtod_l+0x548>
 80273e6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8027418 <_strtod_l+0x848>
 80273ea:	ec4b ab16 	vmov	d6, sl, fp
 80273ee:	4b0e      	ldr	r3, [pc, #56]	@ (8027428 <_strtod_l+0x858>)
 80273f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80273f4:	ee17 2a90 	vmov	r2, s15
 80273f8:	4013      	ands	r3, r2
 80273fa:	ec5b ab17 	vmov	sl, fp, d7
 80273fe:	2b00      	cmp	r3, #0
 8027400:	f47f ae01 	bne.w	8027006 <_strtod_l+0x436>
 8027404:	9a05      	ldr	r2, [sp, #20]
 8027406:	2322      	movs	r3, #34	@ 0x22
 8027408:	6013      	str	r3, [r2, #0]
 802740a:	e5fc      	b.n	8027006 <_strtod_l+0x436>
 802740c:	f3af 8000 	nop.w
 8027410:	ffc00000 	.word	0xffc00000
 8027414:	41dfffff 	.word	0x41dfffff
 8027418:	00000000 	.word	0x00000000
 802741c:	39500000 	.word	0x39500000
 8027420:	0802d318 	.word	0x0802d318
 8027424:	fffffc02 	.word	0xfffffc02
 8027428:	7ff00000 	.word	0x7ff00000
 802742c:	46d9      	mov	r9, fp
 802742e:	d15d      	bne.n	80274ec <_strtod_l+0x91c>
 8027430:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8027434:	f1b8 0f00 	cmp.w	r8, #0
 8027438:	d02a      	beq.n	8027490 <_strtod_l+0x8c0>
 802743a:	4aab      	ldr	r2, [pc, #684]	@ (80276e8 <_strtod_l+0xb18>)
 802743c:	4293      	cmp	r3, r2
 802743e:	d12a      	bne.n	8027496 <_strtod_l+0x8c6>
 8027440:	9b06      	ldr	r3, [sp, #24]
 8027442:	4652      	mov	r2, sl
 8027444:	b1fb      	cbz	r3, 8027486 <_strtod_l+0x8b6>
 8027446:	4ba9      	ldr	r3, [pc, #676]	@ (80276ec <_strtod_l+0xb1c>)
 8027448:	ea0b 0303 	and.w	r3, fp, r3
 802744c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8027450:	f04f 31ff 	mov.w	r1, #4294967295
 8027454:	d81a      	bhi.n	802748c <_strtod_l+0x8bc>
 8027456:	0d1b      	lsrs	r3, r3, #20
 8027458:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802745c:	fa01 f303 	lsl.w	r3, r1, r3
 8027460:	429a      	cmp	r2, r3
 8027462:	d118      	bne.n	8027496 <_strtod_l+0x8c6>
 8027464:	4ba2      	ldr	r3, [pc, #648]	@ (80276f0 <_strtod_l+0xb20>)
 8027466:	4599      	cmp	r9, r3
 8027468:	d102      	bne.n	8027470 <_strtod_l+0x8a0>
 802746a:	3201      	adds	r2, #1
 802746c:	f43f adc0 	beq.w	8026ff0 <_strtod_l+0x420>
 8027470:	4b9e      	ldr	r3, [pc, #632]	@ (80276ec <_strtod_l+0xb1c>)
 8027472:	ea09 0303 	and.w	r3, r9, r3
 8027476:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 802747a:	f04f 0a00 	mov.w	sl, #0
 802747e:	9b06      	ldr	r3, [sp, #24]
 8027480:	2b00      	cmp	r3, #0
 8027482:	d1b0      	bne.n	80273e6 <_strtod_l+0x816>
 8027484:	e5bf      	b.n	8027006 <_strtod_l+0x436>
 8027486:	f04f 33ff 	mov.w	r3, #4294967295
 802748a:	e7e9      	b.n	8027460 <_strtod_l+0x890>
 802748c:	460b      	mov	r3, r1
 802748e:	e7e7      	b.n	8027460 <_strtod_l+0x890>
 8027490:	ea53 030a 	orrs.w	r3, r3, sl
 8027494:	d099      	beq.n	80273ca <_strtod_l+0x7fa>
 8027496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027498:	b1c3      	cbz	r3, 80274cc <_strtod_l+0x8fc>
 802749a:	ea13 0f09 	tst.w	r3, r9
 802749e:	d0ee      	beq.n	802747e <_strtod_l+0x8ae>
 80274a0:	9a06      	ldr	r2, [sp, #24]
 80274a2:	4650      	mov	r0, sl
 80274a4:	4659      	mov	r1, fp
 80274a6:	f1b8 0f00 	cmp.w	r8, #0
 80274aa:	d013      	beq.n	80274d4 <_strtod_l+0x904>
 80274ac:	f7ff fb73 	bl	8026b96 <sulp>
 80274b0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80274b4:	ec5b ab17 	vmov	sl, fp, d7
 80274b8:	e7e1      	b.n	802747e <_strtod_l+0x8ae>
 80274ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80274be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80274c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80274c6:	f04f 3aff 	mov.w	sl, #4294967295
 80274ca:	e7d8      	b.n	802747e <_strtod_l+0x8ae>
 80274cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80274ce:	ea13 0f0a 	tst.w	r3, sl
 80274d2:	e7e4      	b.n	802749e <_strtod_l+0x8ce>
 80274d4:	f7ff fb5f 	bl	8026b96 <sulp>
 80274d8:	ee39 0b40 	vsub.f64	d0, d9, d0
 80274dc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80274e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80274e4:	ec5b ab10 	vmov	sl, fp, d0
 80274e8:	d1c9      	bne.n	802747e <_strtod_l+0x8ae>
 80274ea:	e615      	b.n	8027118 <_strtod_l+0x548>
 80274ec:	4629      	mov	r1, r5
 80274ee:	4620      	mov	r0, r4
 80274f0:	f7ff fade 	bl	8026ab0 <__ratio>
 80274f4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80274f8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80274fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027500:	d85d      	bhi.n	80275be <_strtod_l+0x9ee>
 8027502:	f1b8 0f00 	cmp.w	r8, #0
 8027506:	d164      	bne.n	80275d2 <_strtod_l+0xa02>
 8027508:	f1ba 0f00 	cmp.w	sl, #0
 802750c:	d14b      	bne.n	80275a6 <_strtod_l+0x9d6>
 802750e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8027512:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8027516:	2b00      	cmp	r3, #0
 8027518:	d160      	bne.n	80275dc <_strtod_l+0xa0c>
 802751a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 802751e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8027522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027526:	d401      	bmi.n	802752c <_strtod_l+0x95c>
 8027528:	ee20 8b08 	vmul.f64	d8, d0, d8
 802752c:	eeb1 ab48 	vneg.f64	d10, d8
 8027530:	486e      	ldr	r0, [pc, #440]	@ (80276ec <_strtod_l+0xb1c>)
 8027532:	4970      	ldr	r1, [pc, #448]	@ (80276f4 <_strtod_l+0xb24>)
 8027534:	ea09 0700 	and.w	r7, r9, r0
 8027538:	428f      	cmp	r7, r1
 802753a:	ec53 2b1a 	vmov	r2, r3, d10
 802753e:	d17d      	bne.n	802763c <_strtod_l+0xa6c>
 8027540:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8027544:	ec4b ab1c 	vmov	d12, sl, fp
 8027548:	eeb0 0b4c 	vmov.f64	d0, d12
 802754c:	f7ff f9e8 	bl	8026920 <__ulp>
 8027550:	4866      	ldr	r0, [pc, #408]	@ (80276ec <_strtod_l+0xb1c>)
 8027552:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8027556:	ee1c 3a90 	vmov	r3, s25
 802755a:	4a67      	ldr	r2, [pc, #412]	@ (80276f8 <_strtod_l+0xb28>)
 802755c:	ea03 0100 	and.w	r1, r3, r0
 8027560:	4291      	cmp	r1, r2
 8027562:	ec5b ab1c 	vmov	sl, fp, d12
 8027566:	d93c      	bls.n	80275e2 <_strtod_l+0xa12>
 8027568:	ee19 2a90 	vmov	r2, s19
 802756c:	4b60      	ldr	r3, [pc, #384]	@ (80276f0 <_strtod_l+0xb20>)
 802756e:	429a      	cmp	r2, r3
 8027570:	d104      	bne.n	802757c <_strtod_l+0x9ac>
 8027572:	ee19 3a10 	vmov	r3, s18
 8027576:	3301      	adds	r3, #1
 8027578:	f43f ad3a 	beq.w	8026ff0 <_strtod_l+0x420>
 802757c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80276f0 <_strtod_l+0xb20>
 8027580:	f04f 3aff 	mov.w	sl, #4294967295
 8027584:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027586:	9805      	ldr	r0, [sp, #20]
 8027588:	f7fe fe96 	bl	80262b8 <_Bfree>
 802758c:	9805      	ldr	r0, [sp, #20]
 802758e:	4631      	mov	r1, r6
 8027590:	f7fe fe92 	bl	80262b8 <_Bfree>
 8027594:	9805      	ldr	r0, [sp, #20]
 8027596:	4629      	mov	r1, r5
 8027598:	f7fe fe8e 	bl	80262b8 <_Bfree>
 802759c:	9805      	ldr	r0, [sp, #20]
 802759e:	4621      	mov	r1, r4
 80275a0:	f7fe fe8a 	bl	80262b8 <_Bfree>
 80275a4:	e625      	b.n	80271f2 <_strtod_l+0x622>
 80275a6:	f1ba 0f01 	cmp.w	sl, #1
 80275aa:	d103      	bne.n	80275b4 <_strtod_l+0x9e4>
 80275ac:	f1bb 0f00 	cmp.w	fp, #0
 80275b0:	f43f adb2 	beq.w	8027118 <_strtod_l+0x548>
 80275b4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80275b8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80275bc:	e7b8      	b.n	8027530 <_strtod_l+0x960>
 80275be:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80275c2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80275c6:	f1b8 0f00 	cmp.w	r8, #0
 80275ca:	d0af      	beq.n	802752c <_strtod_l+0x95c>
 80275cc:	eeb0 ab48 	vmov.f64	d10, d8
 80275d0:	e7ae      	b.n	8027530 <_strtod_l+0x960>
 80275d2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80275d6:	eeb0 8b4a 	vmov.f64	d8, d10
 80275da:	e7a9      	b.n	8027530 <_strtod_l+0x960>
 80275dc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80275e0:	e7a6      	b.n	8027530 <_strtod_l+0x960>
 80275e2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80275e6:	9b06      	ldr	r3, [sp, #24]
 80275e8:	46d9      	mov	r9, fp
 80275ea:	2b00      	cmp	r3, #0
 80275ec:	d1ca      	bne.n	8027584 <_strtod_l+0x9b4>
 80275ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80275f2:	0d1b      	lsrs	r3, r3, #20
 80275f4:	051b      	lsls	r3, r3, #20
 80275f6:	429f      	cmp	r7, r3
 80275f8:	d1c4      	bne.n	8027584 <_strtod_l+0x9b4>
 80275fa:	ec51 0b18 	vmov	r0, r1, d8
 80275fe:	f7d9 f89b 	bl	8000738 <__aeabi_d2lz>
 8027602:	f7d9 f853 	bl	80006ac <__aeabi_l2d>
 8027606:	f3cb 0913 	ubfx	r9, fp, #0, #20
 802760a:	ec41 0b17 	vmov	d7, r0, r1
 802760e:	ea49 090a 	orr.w	r9, r9, sl
 8027612:	ea59 0908 	orrs.w	r9, r9, r8
 8027616:	ee38 8b47 	vsub.f64	d8, d8, d7
 802761a:	d03c      	beq.n	8027696 <_strtod_l+0xac6>
 802761c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80276d0 <_strtod_l+0xb00>
 8027620:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8027624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027628:	f53f aced 	bmi.w	8027006 <_strtod_l+0x436>
 802762c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80276d8 <_strtod_l+0xb08>
 8027630:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8027634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027638:	dda4      	ble.n	8027584 <_strtod_l+0x9b4>
 802763a:	e4e4      	b.n	8027006 <_strtod_l+0x436>
 802763c:	9906      	ldr	r1, [sp, #24]
 802763e:	b1e1      	cbz	r1, 802767a <_strtod_l+0xaaa>
 8027640:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8027644:	d819      	bhi.n	802767a <_strtod_l+0xaaa>
 8027646:	eeb4 8bcb 	vcmpe.f64	d8, d11
 802764a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802764e:	d811      	bhi.n	8027674 <_strtod_l+0xaa4>
 8027650:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8027654:	ee18 3a10 	vmov	r3, s16
 8027658:	2b01      	cmp	r3, #1
 802765a:	bf38      	it	cc
 802765c:	2301      	movcc	r3, #1
 802765e:	ee08 3a10 	vmov	s16, r3
 8027662:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8027666:	f1b8 0f00 	cmp.w	r8, #0
 802766a:	d111      	bne.n	8027690 <_strtod_l+0xac0>
 802766c:	eeb1 7b48 	vneg.f64	d7, d8
 8027670:	ec53 2b17 	vmov	r2, r3, d7
 8027674:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8027678:	1bcb      	subs	r3, r1, r7
 802767a:	eeb0 0b49 	vmov.f64	d0, d9
 802767e:	ec43 2b1a 	vmov	d10, r2, r3
 8027682:	f7ff f94d 	bl	8026920 <__ulp>
 8027686:	eeaa 9b00 	vfma.f64	d9, d10, d0
 802768a:	ec5b ab19 	vmov	sl, fp, d9
 802768e:	e7aa      	b.n	80275e6 <_strtod_l+0xa16>
 8027690:	eeb0 7b48 	vmov.f64	d7, d8
 8027694:	e7ec      	b.n	8027670 <_strtod_l+0xaa0>
 8027696:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80276e0 <_strtod_l+0xb10>
 802769a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802769e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80276a2:	f57f af6f 	bpl.w	8027584 <_strtod_l+0x9b4>
 80276a6:	e4ae      	b.n	8027006 <_strtod_l+0x436>
 80276a8:	2300      	movs	r3, #0
 80276aa:	9308      	str	r3, [sp, #32]
 80276ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80276ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80276b0:	6013      	str	r3, [r2, #0]
 80276b2:	f7ff bacc 	b.w	8026c4e <_strtod_l+0x7e>
 80276b6:	2a65      	cmp	r2, #101	@ 0x65
 80276b8:	f43f abbc 	beq.w	8026e34 <_strtod_l+0x264>
 80276bc:	2a45      	cmp	r2, #69	@ 0x45
 80276be:	f43f abb9 	beq.w	8026e34 <_strtod_l+0x264>
 80276c2:	2301      	movs	r3, #1
 80276c4:	9306      	str	r3, [sp, #24]
 80276c6:	f7ff bbf0 	b.w	8026eaa <_strtod_l+0x2da>
 80276ca:	bf00      	nop
 80276cc:	f3af 8000 	nop.w
 80276d0:	94a03595 	.word	0x94a03595
 80276d4:	3fdfffff 	.word	0x3fdfffff
 80276d8:	35afe535 	.word	0x35afe535
 80276dc:	3fe00000 	.word	0x3fe00000
 80276e0:	94a03595 	.word	0x94a03595
 80276e4:	3fcfffff 	.word	0x3fcfffff
 80276e8:	000fffff 	.word	0x000fffff
 80276ec:	7ff00000 	.word	0x7ff00000
 80276f0:	7fefffff 	.word	0x7fefffff
 80276f4:	7fe00000 	.word	0x7fe00000
 80276f8:	7c9fffff 	.word	0x7c9fffff

080276fc <_strtod_r>:
 80276fc:	4b01      	ldr	r3, [pc, #4]	@ (8027704 <_strtod_r+0x8>)
 80276fe:	f7ff ba67 	b.w	8026bd0 <_strtod_l>
 8027702:	bf00      	nop
 8027704:	2400026c 	.word	0x2400026c

08027708 <__ssputs_r>:
 8027708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802770c:	688e      	ldr	r6, [r1, #8]
 802770e:	461f      	mov	r7, r3
 8027710:	42be      	cmp	r6, r7
 8027712:	680b      	ldr	r3, [r1, #0]
 8027714:	4682      	mov	sl, r0
 8027716:	460c      	mov	r4, r1
 8027718:	4690      	mov	r8, r2
 802771a:	d82d      	bhi.n	8027778 <__ssputs_r+0x70>
 802771c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8027720:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8027724:	d026      	beq.n	8027774 <__ssputs_r+0x6c>
 8027726:	6965      	ldr	r5, [r4, #20]
 8027728:	6909      	ldr	r1, [r1, #16]
 802772a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802772e:	eba3 0901 	sub.w	r9, r3, r1
 8027732:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8027736:	1c7b      	adds	r3, r7, #1
 8027738:	444b      	add	r3, r9
 802773a:	106d      	asrs	r5, r5, #1
 802773c:	429d      	cmp	r5, r3
 802773e:	bf38      	it	cc
 8027740:	461d      	movcc	r5, r3
 8027742:	0553      	lsls	r3, r2, #21
 8027744:	d527      	bpl.n	8027796 <__ssputs_r+0x8e>
 8027746:	4629      	mov	r1, r5
 8027748:	f7fc fd42 	bl	80241d0 <_malloc_r>
 802774c:	4606      	mov	r6, r0
 802774e:	b360      	cbz	r0, 80277aa <__ssputs_r+0xa2>
 8027750:	6921      	ldr	r1, [r4, #16]
 8027752:	464a      	mov	r2, r9
 8027754:	f7fd ff13 	bl	802557e <memcpy>
 8027758:	89a3      	ldrh	r3, [r4, #12]
 802775a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802775e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8027762:	81a3      	strh	r3, [r4, #12]
 8027764:	6126      	str	r6, [r4, #16]
 8027766:	6165      	str	r5, [r4, #20]
 8027768:	444e      	add	r6, r9
 802776a:	eba5 0509 	sub.w	r5, r5, r9
 802776e:	6026      	str	r6, [r4, #0]
 8027770:	60a5      	str	r5, [r4, #8]
 8027772:	463e      	mov	r6, r7
 8027774:	42be      	cmp	r6, r7
 8027776:	d900      	bls.n	802777a <__ssputs_r+0x72>
 8027778:	463e      	mov	r6, r7
 802777a:	6820      	ldr	r0, [r4, #0]
 802777c:	4632      	mov	r2, r6
 802777e:	4641      	mov	r1, r8
 8027780:	f7fd fe42 	bl	8025408 <memmove>
 8027784:	68a3      	ldr	r3, [r4, #8]
 8027786:	1b9b      	subs	r3, r3, r6
 8027788:	60a3      	str	r3, [r4, #8]
 802778a:	6823      	ldr	r3, [r4, #0]
 802778c:	4433      	add	r3, r6
 802778e:	6023      	str	r3, [r4, #0]
 8027790:	2000      	movs	r0, #0
 8027792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027796:	462a      	mov	r2, r5
 8027798:	f001 fa9f 	bl	8028cda <_realloc_r>
 802779c:	4606      	mov	r6, r0
 802779e:	2800      	cmp	r0, #0
 80277a0:	d1e0      	bne.n	8027764 <__ssputs_r+0x5c>
 80277a2:	6921      	ldr	r1, [r4, #16]
 80277a4:	4650      	mov	r0, sl
 80277a6:	f7fe fcfd 	bl	80261a4 <_free_r>
 80277aa:	230c      	movs	r3, #12
 80277ac:	f8ca 3000 	str.w	r3, [sl]
 80277b0:	89a3      	ldrh	r3, [r4, #12]
 80277b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80277b6:	81a3      	strh	r3, [r4, #12]
 80277b8:	f04f 30ff 	mov.w	r0, #4294967295
 80277bc:	e7e9      	b.n	8027792 <__ssputs_r+0x8a>
	...

080277c0 <_svfiprintf_r>:
 80277c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80277c4:	4698      	mov	r8, r3
 80277c6:	898b      	ldrh	r3, [r1, #12]
 80277c8:	061b      	lsls	r3, r3, #24
 80277ca:	b09d      	sub	sp, #116	@ 0x74
 80277cc:	4607      	mov	r7, r0
 80277ce:	460d      	mov	r5, r1
 80277d0:	4614      	mov	r4, r2
 80277d2:	d510      	bpl.n	80277f6 <_svfiprintf_r+0x36>
 80277d4:	690b      	ldr	r3, [r1, #16]
 80277d6:	b973      	cbnz	r3, 80277f6 <_svfiprintf_r+0x36>
 80277d8:	2140      	movs	r1, #64	@ 0x40
 80277da:	f7fc fcf9 	bl	80241d0 <_malloc_r>
 80277de:	6028      	str	r0, [r5, #0]
 80277e0:	6128      	str	r0, [r5, #16]
 80277e2:	b930      	cbnz	r0, 80277f2 <_svfiprintf_r+0x32>
 80277e4:	230c      	movs	r3, #12
 80277e6:	603b      	str	r3, [r7, #0]
 80277e8:	f04f 30ff 	mov.w	r0, #4294967295
 80277ec:	b01d      	add	sp, #116	@ 0x74
 80277ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80277f2:	2340      	movs	r3, #64	@ 0x40
 80277f4:	616b      	str	r3, [r5, #20]
 80277f6:	2300      	movs	r3, #0
 80277f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80277fa:	2320      	movs	r3, #32
 80277fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8027800:	f8cd 800c 	str.w	r8, [sp, #12]
 8027804:	2330      	movs	r3, #48	@ 0x30
 8027806:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80279a4 <_svfiprintf_r+0x1e4>
 802780a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802780e:	f04f 0901 	mov.w	r9, #1
 8027812:	4623      	mov	r3, r4
 8027814:	469a      	mov	sl, r3
 8027816:	f813 2b01 	ldrb.w	r2, [r3], #1
 802781a:	b10a      	cbz	r2, 8027820 <_svfiprintf_r+0x60>
 802781c:	2a25      	cmp	r2, #37	@ 0x25
 802781e:	d1f9      	bne.n	8027814 <_svfiprintf_r+0x54>
 8027820:	ebba 0b04 	subs.w	fp, sl, r4
 8027824:	d00b      	beq.n	802783e <_svfiprintf_r+0x7e>
 8027826:	465b      	mov	r3, fp
 8027828:	4622      	mov	r2, r4
 802782a:	4629      	mov	r1, r5
 802782c:	4638      	mov	r0, r7
 802782e:	f7ff ff6b 	bl	8027708 <__ssputs_r>
 8027832:	3001      	adds	r0, #1
 8027834:	f000 80a7 	beq.w	8027986 <_svfiprintf_r+0x1c6>
 8027838:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802783a:	445a      	add	r2, fp
 802783c:	9209      	str	r2, [sp, #36]	@ 0x24
 802783e:	f89a 3000 	ldrb.w	r3, [sl]
 8027842:	2b00      	cmp	r3, #0
 8027844:	f000 809f 	beq.w	8027986 <_svfiprintf_r+0x1c6>
 8027848:	2300      	movs	r3, #0
 802784a:	f04f 32ff 	mov.w	r2, #4294967295
 802784e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027852:	f10a 0a01 	add.w	sl, sl, #1
 8027856:	9304      	str	r3, [sp, #16]
 8027858:	9307      	str	r3, [sp, #28]
 802785a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802785e:	931a      	str	r3, [sp, #104]	@ 0x68
 8027860:	4654      	mov	r4, sl
 8027862:	2205      	movs	r2, #5
 8027864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027868:	484e      	ldr	r0, [pc, #312]	@ (80279a4 <_svfiprintf_r+0x1e4>)
 802786a:	f7d8 fd39 	bl	80002e0 <memchr>
 802786e:	9a04      	ldr	r2, [sp, #16]
 8027870:	b9d8      	cbnz	r0, 80278aa <_svfiprintf_r+0xea>
 8027872:	06d0      	lsls	r0, r2, #27
 8027874:	bf44      	itt	mi
 8027876:	2320      	movmi	r3, #32
 8027878:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802787c:	0711      	lsls	r1, r2, #28
 802787e:	bf44      	itt	mi
 8027880:	232b      	movmi	r3, #43	@ 0x2b
 8027882:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027886:	f89a 3000 	ldrb.w	r3, [sl]
 802788a:	2b2a      	cmp	r3, #42	@ 0x2a
 802788c:	d015      	beq.n	80278ba <_svfiprintf_r+0xfa>
 802788e:	9a07      	ldr	r2, [sp, #28]
 8027890:	4654      	mov	r4, sl
 8027892:	2000      	movs	r0, #0
 8027894:	f04f 0c0a 	mov.w	ip, #10
 8027898:	4621      	mov	r1, r4
 802789a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802789e:	3b30      	subs	r3, #48	@ 0x30
 80278a0:	2b09      	cmp	r3, #9
 80278a2:	d94b      	bls.n	802793c <_svfiprintf_r+0x17c>
 80278a4:	b1b0      	cbz	r0, 80278d4 <_svfiprintf_r+0x114>
 80278a6:	9207      	str	r2, [sp, #28]
 80278a8:	e014      	b.n	80278d4 <_svfiprintf_r+0x114>
 80278aa:	eba0 0308 	sub.w	r3, r0, r8
 80278ae:	fa09 f303 	lsl.w	r3, r9, r3
 80278b2:	4313      	orrs	r3, r2
 80278b4:	9304      	str	r3, [sp, #16]
 80278b6:	46a2      	mov	sl, r4
 80278b8:	e7d2      	b.n	8027860 <_svfiprintf_r+0xa0>
 80278ba:	9b03      	ldr	r3, [sp, #12]
 80278bc:	1d19      	adds	r1, r3, #4
 80278be:	681b      	ldr	r3, [r3, #0]
 80278c0:	9103      	str	r1, [sp, #12]
 80278c2:	2b00      	cmp	r3, #0
 80278c4:	bfbb      	ittet	lt
 80278c6:	425b      	neglt	r3, r3
 80278c8:	f042 0202 	orrlt.w	r2, r2, #2
 80278cc:	9307      	strge	r3, [sp, #28]
 80278ce:	9307      	strlt	r3, [sp, #28]
 80278d0:	bfb8      	it	lt
 80278d2:	9204      	strlt	r2, [sp, #16]
 80278d4:	7823      	ldrb	r3, [r4, #0]
 80278d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80278d8:	d10a      	bne.n	80278f0 <_svfiprintf_r+0x130>
 80278da:	7863      	ldrb	r3, [r4, #1]
 80278dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80278de:	d132      	bne.n	8027946 <_svfiprintf_r+0x186>
 80278e0:	9b03      	ldr	r3, [sp, #12]
 80278e2:	1d1a      	adds	r2, r3, #4
 80278e4:	681b      	ldr	r3, [r3, #0]
 80278e6:	9203      	str	r2, [sp, #12]
 80278e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80278ec:	3402      	adds	r4, #2
 80278ee:	9305      	str	r3, [sp, #20]
 80278f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80279b4 <_svfiprintf_r+0x1f4>
 80278f4:	7821      	ldrb	r1, [r4, #0]
 80278f6:	2203      	movs	r2, #3
 80278f8:	4650      	mov	r0, sl
 80278fa:	f7d8 fcf1 	bl	80002e0 <memchr>
 80278fe:	b138      	cbz	r0, 8027910 <_svfiprintf_r+0x150>
 8027900:	9b04      	ldr	r3, [sp, #16]
 8027902:	eba0 000a 	sub.w	r0, r0, sl
 8027906:	2240      	movs	r2, #64	@ 0x40
 8027908:	4082      	lsls	r2, r0
 802790a:	4313      	orrs	r3, r2
 802790c:	3401      	adds	r4, #1
 802790e:	9304      	str	r3, [sp, #16]
 8027910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027914:	4824      	ldr	r0, [pc, #144]	@ (80279a8 <_svfiprintf_r+0x1e8>)
 8027916:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802791a:	2206      	movs	r2, #6
 802791c:	f7d8 fce0 	bl	80002e0 <memchr>
 8027920:	2800      	cmp	r0, #0
 8027922:	d036      	beq.n	8027992 <_svfiprintf_r+0x1d2>
 8027924:	4b21      	ldr	r3, [pc, #132]	@ (80279ac <_svfiprintf_r+0x1ec>)
 8027926:	bb1b      	cbnz	r3, 8027970 <_svfiprintf_r+0x1b0>
 8027928:	9b03      	ldr	r3, [sp, #12]
 802792a:	3307      	adds	r3, #7
 802792c:	f023 0307 	bic.w	r3, r3, #7
 8027930:	3308      	adds	r3, #8
 8027932:	9303      	str	r3, [sp, #12]
 8027934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027936:	4433      	add	r3, r6
 8027938:	9309      	str	r3, [sp, #36]	@ 0x24
 802793a:	e76a      	b.n	8027812 <_svfiprintf_r+0x52>
 802793c:	fb0c 3202 	mla	r2, ip, r2, r3
 8027940:	460c      	mov	r4, r1
 8027942:	2001      	movs	r0, #1
 8027944:	e7a8      	b.n	8027898 <_svfiprintf_r+0xd8>
 8027946:	2300      	movs	r3, #0
 8027948:	3401      	adds	r4, #1
 802794a:	9305      	str	r3, [sp, #20]
 802794c:	4619      	mov	r1, r3
 802794e:	f04f 0c0a 	mov.w	ip, #10
 8027952:	4620      	mov	r0, r4
 8027954:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027958:	3a30      	subs	r2, #48	@ 0x30
 802795a:	2a09      	cmp	r2, #9
 802795c:	d903      	bls.n	8027966 <_svfiprintf_r+0x1a6>
 802795e:	2b00      	cmp	r3, #0
 8027960:	d0c6      	beq.n	80278f0 <_svfiprintf_r+0x130>
 8027962:	9105      	str	r1, [sp, #20]
 8027964:	e7c4      	b.n	80278f0 <_svfiprintf_r+0x130>
 8027966:	fb0c 2101 	mla	r1, ip, r1, r2
 802796a:	4604      	mov	r4, r0
 802796c:	2301      	movs	r3, #1
 802796e:	e7f0      	b.n	8027952 <_svfiprintf_r+0x192>
 8027970:	ab03      	add	r3, sp, #12
 8027972:	9300      	str	r3, [sp, #0]
 8027974:	462a      	mov	r2, r5
 8027976:	4b0e      	ldr	r3, [pc, #56]	@ (80279b0 <_svfiprintf_r+0x1f0>)
 8027978:	a904      	add	r1, sp, #16
 802797a:	4638      	mov	r0, r7
 802797c:	f7fc fdfc 	bl	8024578 <_printf_float>
 8027980:	1c42      	adds	r2, r0, #1
 8027982:	4606      	mov	r6, r0
 8027984:	d1d6      	bne.n	8027934 <_svfiprintf_r+0x174>
 8027986:	89ab      	ldrh	r3, [r5, #12]
 8027988:	065b      	lsls	r3, r3, #25
 802798a:	f53f af2d 	bmi.w	80277e8 <_svfiprintf_r+0x28>
 802798e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027990:	e72c      	b.n	80277ec <_svfiprintf_r+0x2c>
 8027992:	ab03      	add	r3, sp, #12
 8027994:	9300      	str	r3, [sp, #0]
 8027996:	462a      	mov	r2, r5
 8027998:	4b05      	ldr	r3, [pc, #20]	@ (80279b0 <_svfiprintf_r+0x1f0>)
 802799a:	a904      	add	r1, sp, #16
 802799c:	4638      	mov	r0, r7
 802799e:	f7fd f873 	bl	8024a88 <_printf_i>
 80279a2:	e7ed      	b.n	8027980 <_svfiprintf_r+0x1c0>
 80279a4:	0802d340 	.word	0x0802d340
 80279a8:	0802d34a 	.word	0x0802d34a
 80279ac:	08024579 	.word	0x08024579
 80279b0:	08027709 	.word	0x08027709
 80279b4:	0802d346 	.word	0x0802d346

080279b8 <_sungetc_r>:
 80279b8:	b538      	push	{r3, r4, r5, lr}
 80279ba:	1c4b      	adds	r3, r1, #1
 80279bc:	4614      	mov	r4, r2
 80279be:	d103      	bne.n	80279c8 <_sungetc_r+0x10>
 80279c0:	f04f 35ff 	mov.w	r5, #4294967295
 80279c4:	4628      	mov	r0, r5
 80279c6:	bd38      	pop	{r3, r4, r5, pc}
 80279c8:	8993      	ldrh	r3, [r2, #12]
 80279ca:	f023 0320 	bic.w	r3, r3, #32
 80279ce:	8193      	strh	r3, [r2, #12]
 80279d0:	6853      	ldr	r3, [r2, #4]
 80279d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80279d4:	b2cd      	uxtb	r5, r1
 80279d6:	b18a      	cbz	r2, 80279fc <_sungetc_r+0x44>
 80279d8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80279da:	429a      	cmp	r2, r3
 80279dc:	dd08      	ble.n	80279f0 <_sungetc_r+0x38>
 80279de:	6823      	ldr	r3, [r4, #0]
 80279e0:	1e5a      	subs	r2, r3, #1
 80279e2:	6022      	str	r2, [r4, #0]
 80279e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80279e8:	6863      	ldr	r3, [r4, #4]
 80279ea:	3301      	adds	r3, #1
 80279ec:	6063      	str	r3, [r4, #4]
 80279ee:	e7e9      	b.n	80279c4 <_sungetc_r+0xc>
 80279f0:	4621      	mov	r1, r4
 80279f2:	f000 fd34 	bl	802845e <__submore>
 80279f6:	2800      	cmp	r0, #0
 80279f8:	d0f1      	beq.n	80279de <_sungetc_r+0x26>
 80279fa:	e7e1      	b.n	80279c0 <_sungetc_r+0x8>
 80279fc:	6921      	ldr	r1, [r4, #16]
 80279fe:	6822      	ldr	r2, [r4, #0]
 8027a00:	b141      	cbz	r1, 8027a14 <_sungetc_r+0x5c>
 8027a02:	4291      	cmp	r1, r2
 8027a04:	d206      	bcs.n	8027a14 <_sungetc_r+0x5c>
 8027a06:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8027a0a:	42a9      	cmp	r1, r5
 8027a0c:	d102      	bne.n	8027a14 <_sungetc_r+0x5c>
 8027a0e:	3a01      	subs	r2, #1
 8027a10:	6022      	str	r2, [r4, #0]
 8027a12:	e7ea      	b.n	80279ea <_sungetc_r+0x32>
 8027a14:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8027a18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8027a1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8027a1e:	2303      	movs	r3, #3
 8027a20:	63a3      	str	r3, [r4, #56]	@ 0x38
 8027a22:	4623      	mov	r3, r4
 8027a24:	f803 5f46 	strb.w	r5, [r3, #70]!
 8027a28:	6023      	str	r3, [r4, #0]
 8027a2a:	2301      	movs	r3, #1
 8027a2c:	e7de      	b.n	80279ec <_sungetc_r+0x34>

08027a2e <__ssrefill_r>:
 8027a2e:	b510      	push	{r4, lr}
 8027a30:	460c      	mov	r4, r1
 8027a32:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8027a34:	b169      	cbz	r1, 8027a52 <__ssrefill_r+0x24>
 8027a36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8027a3a:	4299      	cmp	r1, r3
 8027a3c:	d001      	beq.n	8027a42 <__ssrefill_r+0x14>
 8027a3e:	f7fe fbb1 	bl	80261a4 <_free_r>
 8027a42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8027a44:	6063      	str	r3, [r4, #4]
 8027a46:	2000      	movs	r0, #0
 8027a48:	6360      	str	r0, [r4, #52]	@ 0x34
 8027a4a:	b113      	cbz	r3, 8027a52 <__ssrefill_r+0x24>
 8027a4c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8027a4e:	6023      	str	r3, [r4, #0]
 8027a50:	bd10      	pop	{r4, pc}
 8027a52:	6923      	ldr	r3, [r4, #16]
 8027a54:	6023      	str	r3, [r4, #0]
 8027a56:	2300      	movs	r3, #0
 8027a58:	6063      	str	r3, [r4, #4]
 8027a5a:	89a3      	ldrh	r3, [r4, #12]
 8027a5c:	f043 0320 	orr.w	r3, r3, #32
 8027a60:	81a3      	strh	r3, [r4, #12]
 8027a62:	f04f 30ff 	mov.w	r0, #4294967295
 8027a66:	e7f3      	b.n	8027a50 <__ssrefill_r+0x22>

08027a68 <__ssvfiscanf_r>:
 8027a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027a6c:	460c      	mov	r4, r1
 8027a6e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8027a72:	2100      	movs	r1, #0
 8027a74:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8027a78:	49a5      	ldr	r1, [pc, #660]	@ (8027d10 <__ssvfiscanf_r+0x2a8>)
 8027a7a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8027a7c:	f10d 0804 	add.w	r8, sp, #4
 8027a80:	49a4      	ldr	r1, [pc, #656]	@ (8027d14 <__ssvfiscanf_r+0x2ac>)
 8027a82:	4fa5      	ldr	r7, [pc, #660]	@ (8027d18 <__ssvfiscanf_r+0x2b0>)
 8027a84:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8027a88:	4606      	mov	r6, r0
 8027a8a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8027a8c:	9300      	str	r3, [sp, #0]
 8027a8e:	7813      	ldrb	r3, [r2, #0]
 8027a90:	2b00      	cmp	r3, #0
 8027a92:	f000 8158 	beq.w	8027d46 <__ssvfiscanf_r+0x2de>
 8027a96:	5cf9      	ldrb	r1, [r7, r3]
 8027a98:	f011 0108 	ands.w	r1, r1, #8
 8027a9c:	f102 0501 	add.w	r5, r2, #1
 8027aa0:	d019      	beq.n	8027ad6 <__ssvfiscanf_r+0x6e>
 8027aa2:	6863      	ldr	r3, [r4, #4]
 8027aa4:	2b00      	cmp	r3, #0
 8027aa6:	dd0f      	ble.n	8027ac8 <__ssvfiscanf_r+0x60>
 8027aa8:	6823      	ldr	r3, [r4, #0]
 8027aaa:	781a      	ldrb	r2, [r3, #0]
 8027aac:	5cba      	ldrb	r2, [r7, r2]
 8027aae:	0712      	lsls	r2, r2, #28
 8027ab0:	d401      	bmi.n	8027ab6 <__ssvfiscanf_r+0x4e>
 8027ab2:	462a      	mov	r2, r5
 8027ab4:	e7eb      	b.n	8027a8e <__ssvfiscanf_r+0x26>
 8027ab6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8027ab8:	3201      	adds	r2, #1
 8027aba:	9245      	str	r2, [sp, #276]	@ 0x114
 8027abc:	6862      	ldr	r2, [r4, #4]
 8027abe:	3301      	adds	r3, #1
 8027ac0:	3a01      	subs	r2, #1
 8027ac2:	6062      	str	r2, [r4, #4]
 8027ac4:	6023      	str	r3, [r4, #0]
 8027ac6:	e7ec      	b.n	8027aa2 <__ssvfiscanf_r+0x3a>
 8027ac8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8027aca:	4621      	mov	r1, r4
 8027acc:	4630      	mov	r0, r6
 8027ace:	4798      	blx	r3
 8027ad0:	2800      	cmp	r0, #0
 8027ad2:	d0e9      	beq.n	8027aa8 <__ssvfiscanf_r+0x40>
 8027ad4:	e7ed      	b.n	8027ab2 <__ssvfiscanf_r+0x4a>
 8027ad6:	2b25      	cmp	r3, #37	@ 0x25
 8027ad8:	d012      	beq.n	8027b00 <__ssvfiscanf_r+0x98>
 8027ada:	4699      	mov	r9, r3
 8027adc:	6863      	ldr	r3, [r4, #4]
 8027ade:	2b00      	cmp	r3, #0
 8027ae0:	f340 8093 	ble.w	8027c0a <__ssvfiscanf_r+0x1a2>
 8027ae4:	6822      	ldr	r2, [r4, #0]
 8027ae6:	7813      	ldrb	r3, [r2, #0]
 8027ae8:	454b      	cmp	r3, r9
 8027aea:	f040 812c 	bne.w	8027d46 <__ssvfiscanf_r+0x2de>
 8027aee:	6863      	ldr	r3, [r4, #4]
 8027af0:	3b01      	subs	r3, #1
 8027af2:	6063      	str	r3, [r4, #4]
 8027af4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8027af6:	3201      	adds	r2, #1
 8027af8:	3301      	adds	r3, #1
 8027afa:	6022      	str	r2, [r4, #0]
 8027afc:	9345      	str	r3, [sp, #276]	@ 0x114
 8027afe:	e7d8      	b.n	8027ab2 <__ssvfiscanf_r+0x4a>
 8027b00:	9141      	str	r1, [sp, #260]	@ 0x104
 8027b02:	9143      	str	r1, [sp, #268]	@ 0x10c
 8027b04:	7853      	ldrb	r3, [r2, #1]
 8027b06:	2b2a      	cmp	r3, #42	@ 0x2a
 8027b08:	bf02      	ittt	eq
 8027b0a:	2310      	moveq	r3, #16
 8027b0c:	1c95      	addeq	r5, r2, #2
 8027b0e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8027b10:	220a      	movs	r2, #10
 8027b12:	46a9      	mov	r9, r5
 8027b14:	f819 1b01 	ldrb.w	r1, [r9], #1
 8027b18:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8027b1c:	2b09      	cmp	r3, #9
 8027b1e:	d91e      	bls.n	8027b5e <__ssvfiscanf_r+0xf6>
 8027b20:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8027d1c <__ssvfiscanf_r+0x2b4>
 8027b24:	2203      	movs	r2, #3
 8027b26:	4650      	mov	r0, sl
 8027b28:	f7d8 fbda 	bl	80002e0 <memchr>
 8027b2c:	b138      	cbz	r0, 8027b3e <__ssvfiscanf_r+0xd6>
 8027b2e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8027b30:	eba0 000a 	sub.w	r0, r0, sl
 8027b34:	2301      	movs	r3, #1
 8027b36:	4083      	lsls	r3, r0
 8027b38:	4313      	orrs	r3, r2
 8027b3a:	9341      	str	r3, [sp, #260]	@ 0x104
 8027b3c:	464d      	mov	r5, r9
 8027b3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8027b42:	2b78      	cmp	r3, #120	@ 0x78
 8027b44:	d806      	bhi.n	8027b54 <__ssvfiscanf_r+0xec>
 8027b46:	2b57      	cmp	r3, #87	@ 0x57
 8027b48:	d810      	bhi.n	8027b6c <__ssvfiscanf_r+0x104>
 8027b4a:	2b25      	cmp	r3, #37	@ 0x25
 8027b4c:	d0c5      	beq.n	8027ada <__ssvfiscanf_r+0x72>
 8027b4e:	d857      	bhi.n	8027c00 <__ssvfiscanf_r+0x198>
 8027b50:	2b00      	cmp	r3, #0
 8027b52:	d065      	beq.n	8027c20 <__ssvfiscanf_r+0x1b8>
 8027b54:	2303      	movs	r3, #3
 8027b56:	9347      	str	r3, [sp, #284]	@ 0x11c
 8027b58:	230a      	movs	r3, #10
 8027b5a:	9342      	str	r3, [sp, #264]	@ 0x108
 8027b5c:	e078      	b.n	8027c50 <__ssvfiscanf_r+0x1e8>
 8027b5e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8027b60:	fb02 1103 	mla	r1, r2, r3, r1
 8027b64:	3930      	subs	r1, #48	@ 0x30
 8027b66:	9143      	str	r1, [sp, #268]	@ 0x10c
 8027b68:	464d      	mov	r5, r9
 8027b6a:	e7d2      	b.n	8027b12 <__ssvfiscanf_r+0xaa>
 8027b6c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8027b70:	2a20      	cmp	r2, #32
 8027b72:	d8ef      	bhi.n	8027b54 <__ssvfiscanf_r+0xec>
 8027b74:	a101      	add	r1, pc, #4	@ (adr r1, 8027b7c <__ssvfiscanf_r+0x114>)
 8027b76:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8027b7a:	bf00      	nop
 8027b7c:	08027c2f 	.word	0x08027c2f
 8027b80:	08027b55 	.word	0x08027b55
 8027b84:	08027b55 	.word	0x08027b55
 8027b88:	08027c89 	.word	0x08027c89
 8027b8c:	08027b55 	.word	0x08027b55
 8027b90:	08027b55 	.word	0x08027b55
 8027b94:	08027b55 	.word	0x08027b55
 8027b98:	08027b55 	.word	0x08027b55
 8027b9c:	08027b55 	.word	0x08027b55
 8027ba0:	08027b55 	.word	0x08027b55
 8027ba4:	08027b55 	.word	0x08027b55
 8027ba8:	08027c9f 	.word	0x08027c9f
 8027bac:	08027c85 	.word	0x08027c85
 8027bb0:	08027c07 	.word	0x08027c07
 8027bb4:	08027c07 	.word	0x08027c07
 8027bb8:	08027c07 	.word	0x08027c07
 8027bbc:	08027b55 	.word	0x08027b55
 8027bc0:	08027c41 	.word	0x08027c41
 8027bc4:	08027b55 	.word	0x08027b55
 8027bc8:	08027b55 	.word	0x08027b55
 8027bcc:	08027b55 	.word	0x08027b55
 8027bd0:	08027b55 	.word	0x08027b55
 8027bd4:	08027caf 	.word	0x08027caf
 8027bd8:	08027c49 	.word	0x08027c49
 8027bdc:	08027c27 	.word	0x08027c27
 8027be0:	08027b55 	.word	0x08027b55
 8027be4:	08027b55 	.word	0x08027b55
 8027be8:	08027cab 	.word	0x08027cab
 8027bec:	08027b55 	.word	0x08027b55
 8027bf0:	08027c85 	.word	0x08027c85
 8027bf4:	08027b55 	.word	0x08027b55
 8027bf8:	08027b55 	.word	0x08027b55
 8027bfc:	08027c2f 	.word	0x08027c2f
 8027c00:	3b45      	subs	r3, #69	@ 0x45
 8027c02:	2b02      	cmp	r3, #2
 8027c04:	d8a6      	bhi.n	8027b54 <__ssvfiscanf_r+0xec>
 8027c06:	2305      	movs	r3, #5
 8027c08:	e021      	b.n	8027c4e <__ssvfiscanf_r+0x1e6>
 8027c0a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8027c0c:	4621      	mov	r1, r4
 8027c0e:	4630      	mov	r0, r6
 8027c10:	4798      	blx	r3
 8027c12:	2800      	cmp	r0, #0
 8027c14:	f43f af66 	beq.w	8027ae4 <__ssvfiscanf_r+0x7c>
 8027c18:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8027c1a:	2800      	cmp	r0, #0
 8027c1c:	f040 808b 	bne.w	8027d36 <__ssvfiscanf_r+0x2ce>
 8027c20:	f04f 30ff 	mov.w	r0, #4294967295
 8027c24:	e08b      	b.n	8027d3e <__ssvfiscanf_r+0x2d6>
 8027c26:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8027c28:	f042 0220 	orr.w	r2, r2, #32
 8027c2c:	9241      	str	r2, [sp, #260]	@ 0x104
 8027c2e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8027c30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8027c34:	9241      	str	r2, [sp, #260]	@ 0x104
 8027c36:	2210      	movs	r2, #16
 8027c38:	2b6e      	cmp	r3, #110	@ 0x6e
 8027c3a:	9242      	str	r2, [sp, #264]	@ 0x108
 8027c3c:	d902      	bls.n	8027c44 <__ssvfiscanf_r+0x1dc>
 8027c3e:	e005      	b.n	8027c4c <__ssvfiscanf_r+0x1e4>
 8027c40:	2300      	movs	r3, #0
 8027c42:	9342      	str	r3, [sp, #264]	@ 0x108
 8027c44:	2303      	movs	r3, #3
 8027c46:	e002      	b.n	8027c4e <__ssvfiscanf_r+0x1e6>
 8027c48:	2308      	movs	r3, #8
 8027c4a:	9342      	str	r3, [sp, #264]	@ 0x108
 8027c4c:	2304      	movs	r3, #4
 8027c4e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8027c50:	6863      	ldr	r3, [r4, #4]
 8027c52:	2b00      	cmp	r3, #0
 8027c54:	dd39      	ble.n	8027cca <__ssvfiscanf_r+0x262>
 8027c56:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8027c58:	0659      	lsls	r1, r3, #25
 8027c5a:	d404      	bmi.n	8027c66 <__ssvfiscanf_r+0x1fe>
 8027c5c:	6823      	ldr	r3, [r4, #0]
 8027c5e:	781a      	ldrb	r2, [r3, #0]
 8027c60:	5cba      	ldrb	r2, [r7, r2]
 8027c62:	0712      	lsls	r2, r2, #28
 8027c64:	d438      	bmi.n	8027cd8 <__ssvfiscanf_r+0x270>
 8027c66:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8027c68:	2b02      	cmp	r3, #2
 8027c6a:	dc47      	bgt.n	8027cfc <__ssvfiscanf_r+0x294>
 8027c6c:	466b      	mov	r3, sp
 8027c6e:	4622      	mov	r2, r4
 8027c70:	a941      	add	r1, sp, #260	@ 0x104
 8027c72:	4630      	mov	r0, r6
 8027c74:	f000 f9ae 	bl	8027fd4 <_scanf_chars>
 8027c78:	2801      	cmp	r0, #1
 8027c7a:	d064      	beq.n	8027d46 <__ssvfiscanf_r+0x2de>
 8027c7c:	2802      	cmp	r0, #2
 8027c7e:	f47f af18 	bne.w	8027ab2 <__ssvfiscanf_r+0x4a>
 8027c82:	e7c9      	b.n	8027c18 <__ssvfiscanf_r+0x1b0>
 8027c84:	220a      	movs	r2, #10
 8027c86:	e7d7      	b.n	8027c38 <__ssvfiscanf_r+0x1d0>
 8027c88:	4629      	mov	r1, r5
 8027c8a:	4640      	mov	r0, r8
 8027c8c:	f000 fbae 	bl	80283ec <__sccl>
 8027c90:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8027c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027c96:	9341      	str	r3, [sp, #260]	@ 0x104
 8027c98:	4605      	mov	r5, r0
 8027c9a:	2301      	movs	r3, #1
 8027c9c:	e7d7      	b.n	8027c4e <__ssvfiscanf_r+0x1e6>
 8027c9e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8027ca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027ca4:	9341      	str	r3, [sp, #260]	@ 0x104
 8027ca6:	2300      	movs	r3, #0
 8027ca8:	e7d1      	b.n	8027c4e <__ssvfiscanf_r+0x1e6>
 8027caa:	2302      	movs	r3, #2
 8027cac:	e7cf      	b.n	8027c4e <__ssvfiscanf_r+0x1e6>
 8027cae:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8027cb0:	06c3      	lsls	r3, r0, #27
 8027cb2:	f53f aefe 	bmi.w	8027ab2 <__ssvfiscanf_r+0x4a>
 8027cb6:	9b00      	ldr	r3, [sp, #0]
 8027cb8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8027cba:	1d19      	adds	r1, r3, #4
 8027cbc:	9100      	str	r1, [sp, #0]
 8027cbe:	681b      	ldr	r3, [r3, #0]
 8027cc0:	07c0      	lsls	r0, r0, #31
 8027cc2:	bf4c      	ite	mi
 8027cc4:	801a      	strhmi	r2, [r3, #0]
 8027cc6:	601a      	strpl	r2, [r3, #0]
 8027cc8:	e6f3      	b.n	8027ab2 <__ssvfiscanf_r+0x4a>
 8027cca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8027ccc:	4621      	mov	r1, r4
 8027cce:	4630      	mov	r0, r6
 8027cd0:	4798      	blx	r3
 8027cd2:	2800      	cmp	r0, #0
 8027cd4:	d0bf      	beq.n	8027c56 <__ssvfiscanf_r+0x1ee>
 8027cd6:	e79f      	b.n	8027c18 <__ssvfiscanf_r+0x1b0>
 8027cd8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8027cda:	3201      	adds	r2, #1
 8027cdc:	9245      	str	r2, [sp, #276]	@ 0x114
 8027cde:	6862      	ldr	r2, [r4, #4]
 8027ce0:	3a01      	subs	r2, #1
 8027ce2:	2a00      	cmp	r2, #0
 8027ce4:	6062      	str	r2, [r4, #4]
 8027ce6:	dd02      	ble.n	8027cee <__ssvfiscanf_r+0x286>
 8027ce8:	3301      	adds	r3, #1
 8027cea:	6023      	str	r3, [r4, #0]
 8027cec:	e7b6      	b.n	8027c5c <__ssvfiscanf_r+0x1f4>
 8027cee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8027cf0:	4621      	mov	r1, r4
 8027cf2:	4630      	mov	r0, r6
 8027cf4:	4798      	blx	r3
 8027cf6:	2800      	cmp	r0, #0
 8027cf8:	d0b0      	beq.n	8027c5c <__ssvfiscanf_r+0x1f4>
 8027cfa:	e78d      	b.n	8027c18 <__ssvfiscanf_r+0x1b0>
 8027cfc:	2b04      	cmp	r3, #4
 8027cfe:	dc0f      	bgt.n	8027d20 <__ssvfiscanf_r+0x2b8>
 8027d00:	466b      	mov	r3, sp
 8027d02:	4622      	mov	r2, r4
 8027d04:	a941      	add	r1, sp, #260	@ 0x104
 8027d06:	4630      	mov	r0, r6
 8027d08:	f000 f9be 	bl	8028088 <_scanf_i>
 8027d0c:	e7b4      	b.n	8027c78 <__ssvfiscanf_r+0x210>
 8027d0e:	bf00      	nop
 8027d10:	080279b9 	.word	0x080279b9
 8027d14:	08027a2f 	.word	0x08027a2f
 8027d18:	0802cfa4 	.word	0x0802cfa4
 8027d1c:	0802d346 	.word	0x0802d346
 8027d20:	4b0a      	ldr	r3, [pc, #40]	@ (8027d4c <__ssvfiscanf_r+0x2e4>)
 8027d22:	2b00      	cmp	r3, #0
 8027d24:	f43f aec5 	beq.w	8027ab2 <__ssvfiscanf_r+0x4a>
 8027d28:	466b      	mov	r3, sp
 8027d2a:	4622      	mov	r2, r4
 8027d2c:	a941      	add	r1, sp, #260	@ 0x104
 8027d2e:	4630      	mov	r0, r6
 8027d30:	f7fc ffca 	bl	8024cc8 <_scanf_float>
 8027d34:	e7a0      	b.n	8027c78 <__ssvfiscanf_r+0x210>
 8027d36:	89a3      	ldrh	r3, [r4, #12]
 8027d38:	065b      	lsls	r3, r3, #25
 8027d3a:	f53f af71 	bmi.w	8027c20 <__ssvfiscanf_r+0x1b8>
 8027d3e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8027d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027d46:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8027d48:	e7f9      	b.n	8027d3e <__ssvfiscanf_r+0x2d6>
 8027d4a:	bf00      	nop
 8027d4c:	08024cc9 	.word	0x08024cc9

08027d50 <__sfputc_r>:
 8027d50:	6893      	ldr	r3, [r2, #8]
 8027d52:	3b01      	subs	r3, #1
 8027d54:	2b00      	cmp	r3, #0
 8027d56:	b410      	push	{r4}
 8027d58:	6093      	str	r3, [r2, #8]
 8027d5a:	da08      	bge.n	8027d6e <__sfputc_r+0x1e>
 8027d5c:	6994      	ldr	r4, [r2, #24]
 8027d5e:	42a3      	cmp	r3, r4
 8027d60:	db01      	blt.n	8027d66 <__sfputc_r+0x16>
 8027d62:	290a      	cmp	r1, #10
 8027d64:	d103      	bne.n	8027d6e <__sfputc_r+0x1e>
 8027d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027d6a:	f000 bbb2 	b.w	80284d2 <__swbuf_r>
 8027d6e:	6813      	ldr	r3, [r2, #0]
 8027d70:	1c58      	adds	r0, r3, #1
 8027d72:	6010      	str	r0, [r2, #0]
 8027d74:	7019      	strb	r1, [r3, #0]
 8027d76:	4608      	mov	r0, r1
 8027d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027d7c:	4770      	bx	lr

08027d7e <__sfputs_r>:
 8027d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027d80:	4606      	mov	r6, r0
 8027d82:	460f      	mov	r7, r1
 8027d84:	4614      	mov	r4, r2
 8027d86:	18d5      	adds	r5, r2, r3
 8027d88:	42ac      	cmp	r4, r5
 8027d8a:	d101      	bne.n	8027d90 <__sfputs_r+0x12>
 8027d8c:	2000      	movs	r0, #0
 8027d8e:	e007      	b.n	8027da0 <__sfputs_r+0x22>
 8027d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027d94:	463a      	mov	r2, r7
 8027d96:	4630      	mov	r0, r6
 8027d98:	f7ff ffda 	bl	8027d50 <__sfputc_r>
 8027d9c:	1c43      	adds	r3, r0, #1
 8027d9e:	d1f3      	bne.n	8027d88 <__sfputs_r+0xa>
 8027da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027da4 <_vfiprintf_r>:
 8027da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027da8:	460d      	mov	r5, r1
 8027daa:	b09d      	sub	sp, #116	@ 0x74
 8027dac:	4614      	mov	r4, r2
 8027dae:	4698      	mov	r8, r3
 8027db0:	4606      	mov	r6, r0
 8027db2:	b118      	cbz	r0, 8027dbc <_vfiprintf_r+0x18>
 8027db4:	6a03      	ldr	r3, [r0, #32]
 8027db6:	b90b      	cbnz	r3, 8027dbc <_vfiprintf_r+0x18>
 8027db8:	f7fd fa1e 	bl	80251f8 <__sinit>
 8027dbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8027dbe:	07d9      	lsls	r1, r3, #31
 8027dc0:	d405      	bmi.n	8027dce <_vfiprintf_r+0x2a>
 8027dc2:	89ab      	ldrh	r3, [r5, #12]
 8027dc4:	059a      	lsls	r2, r3, #22
 8027dc6:	d402      	bmi.n	8027dce <_vfiprintf_r+0x2a>
 8027dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8027dca:	f7fd fbd6 	bl	802557a <__retarget_lock_acquire_recursive>
 8027dce:	89ab      	ldrh	r3, [r5, #12]
 8027dd0:	071b      	lsls	r3, r3, #28
 8027dd2:	d501      	bpl.n	8027dd8 <_vfiprintf_r+0x34>
 8027dd4:	692b      	ldr	r3, [r5, #16]
 8027dd6:	b99b      	cbnz	r3, 8027e00 <_vfiprintf_r+0x5c>
 8027dd8:	4629      	mov	r1, r5
 8027dda:	4630      	mov	r0, r6
 8027ddc:	f000 fbb8 	bl	8028550 <__swsetup_r>
 8027de0:	b170      	cbz	r0, 8027e00 <_vfiprintf_r+0x5c>
 8027de2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8027de4:	07dc      	lsls	r4, r3, #31
 8027de6:	d504      	bpl.n	8027df2 <_vfiprintf_r+0x4e>
 8027de8:	f04f 30ff 	mov.w	r0, #4294967295
 8027dec:	b01d      	add	sp, #116	@ 0x74
 8027dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027df2:	89ab      	ldrh	r3, [r5, #12]
 8027df4:	0598      	lsls	r0, r3, #22
 8027df6:	d4f7      	bmi.n	8027de8 <_vfiprintf_r+0x44>
 8027df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8027dfa:	f7fd fbbf 	bl	802557c <__retarget_lock_release_recursive>
 8027dfe:	e7f3      	b.n	8027de8 <_vfiprintf_r+0x44>
 8027e00:	2300      	movs	r3, #0
 8027e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8027e04:	2320      	movs	r3, #32
 8027e06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8027e0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8027e0e:	2330      	movs	r3, #48	@ 0x30
 8027e10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8027fc0 <_vfiprintf_r+0x21c>
 8027e14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8027e18:	f04f 0901 	mov.w	r9, #1
 8027e1c:	4623      	mov	r3, r4
 8027e1e:	469a      	mov	sl, r3
 8027e20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027e24:	b10a      	cbz	r2, 8027e2a <_vfiprintf_r+0x86>
 8027e26:	2a25      	cmp	r2, #37	@ 0x25
 8027e28:	d1f9      	bne.n	8027e1e <_vfiprintf_r+0x7a>
 8027e2a:	ebba 0b04 	subs.w	fp, sl, r4
 8027e2e:	d00b      	beq.n	8027e48 <_vfiprintf_r+0xa4>
 8027e30:	465b      	mov	r3, fp
 8027e32:	4622      	mov	r2, r4
 8027e34:	4629      	mov	r1, r5
 8027e36:	4630      	mov	r0, r6
 8027e38:	f7ff ffa1 	bl	8027d7e <__sfputs_r>
 8027e3c:	3001      	adds	r0, #1
 8027e3e:	f000 80a7 	beq.w	8027f90 <_vfiprintf_r+0x1ec>
 8027e42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027e44:	445a      	add	r2, fp
 8027e46:	9209      	str	r2, [sp, #36]	@ 0x24
 8027e48:	f89a 3000 	ldrb.w	r3, [sl]
 8027e4c:	2b00      	cmp	r3, #0
 8027e4e:	f000 809f 	beq.w	8027f90 <_vfiprintf_r+0x1ec>
 8027e52:	2300      	movs	r3, #0
 8027e54:	f04f 32ff 	mov.w	r2, #4294967295
 8027e58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027e5c:	f10a 0a01 	add.w	sl, sl, #1
 8027e60:	9304      	str	r3, [sp, #16]
 8027e62:	9307      	str	r3, [sp, #28]
 8027e64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8027e68:	931a      	str	r3, [sp, #104]	@ 0x68
 8027e6a:	4654      	mov	r4, sl
 8027e6c:	2205      	movs	r2, #5
 8027e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027e72:	4853      	ldr	r0, [pc, #332]	@ (8027fc0 <_vfiprintf_r+0x21c>)
 8027e74:	f7d8 fa34 	bl	80002e0 <memchr>
 8027e78:	9a04      	ldr	r2, [sp, #16]
 8027e7a:	b9d8      	cbnz	r0, 8027eb4 <_vfiprintf_r+0x110>
 8027e7c:	06d1      	lsls	r1, r2, #27
 8027e7e:	bf44      	itt	mi
 8027e80:	2320      	movmi	r3, #32
 8027e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027e86:	0713      	lsls	r3, r2, #28
 8027e88:	bf44      	itt	mi
 8027e8a:	232b      	movmi	r3, #43	@ 0x2b
 8027e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027e90:	f89a 3000 	ldrb.w	r3, [sl]
 8027e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8027e96:	d015      	beq.n	8027ec4 <_vfiprintf_r+0x120>
 8027e98:	9a07      	ldr	r2, [sp, #28]
 8027e9a:	4654      	mov	r4, sl
 8027e9c:	2000      	movs	r0, #0
 8027e9e:	f04f 0c0a 	mov.w	ip, #10
 8027ea2:	4621      	mov	r1, r4
 8027ea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027ea8:	3b30      	subs	r3, #48	@ 0x30
 8027eaa:	2b09      	cmp	r3, #9
 8027eac:	d94b      	bls.n	8027f46 <_vfiprintf_r+0x1a2>
 8027eae:	b1b0      	cbz	r0, 8027ede <_vfiprintf_r+0x13a>
 8027eb0:	9207      	str	r2, [sp, #28]
 8027eb2:	e014      	b.n	8027ede <_vfiprintf_r+0x13a>
 8027eb4:	eba0 0308 	sub.w	r3, r0, r8
 8027eb8:	fa09 f303 	lsl.w	r3, r9, r3
 8027ebc:	4313      	orrs	r3, r2
 8027ebe:	9304      	str	r3, [sp, #16]
 8027ec0:	46a2      	mov	sl, r4
 8027ec2:	e7d2      	b.n	8027e6a <_vfiprintf_r+0xc6>
 8027ec4:	9b03      	ldr	r3, [sp, #12]
 8027ec6:	1d19      	adds	r1, r3, #4
 8027ec8:	681b      	ldr	r3, [r3, #0]
 8027eca:	9103      	str	r1, [sp, #12]
 8027ecc:	2b00      	cmp	r3, #0
 8027ece:	bfbb      	ittet	lt
 8027ed0:	425b      	neglt	r3, r3
 8027ed2:	f042 0202 	orrlt.w	r2, r2, #2
 8027ed6:	9307      	strge	r3, [sp, #28]
 8027ed8:	9307      	strlt	r3, [sp, #28]
 8027eda:	bfb8      	it	lt
 8027edc:	9204      	strlt	r2, [sp, #16]
 8027ede:	7823      	ldrb	r3, [r4, #0]
 8027ee0:	2b2e      	cmp	r3, #46	@ 0x2e
 8027ee2:	d10a      	bne.n	8027efa <_vfiprintf_r+0x156>
 8027ee4:	7863      	ldrb	r3, [r4, #1]
 8027ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8027ee8:	d132      	bne.n	8027f50 <_vfiprintf_r+0x1ac>
 8027eea:	9b03      	ldr	r3, [sp, #12]
 8027eec:	1d1a      	adds	r2, r3, #4
 8027eee:	681b      	ldr	r3, [r3, #0]
 8027ef0:	9203      	str	r2, [sp, #12]
 8027ef2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8027ef6:	3402      	adds	r4, #2
 8027ef8:	9305      	str	r3, [sp, #20]
 8027efa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8027fd0 <_vfiprintf_r+0x22c>
 8027efe:	7821      	ldrb	r1, [r4, #0]
 8027f00:	2203      	movs	r2, #3
 8027f02:	4650      	mov	r0, sl
 8027f04:	f7d8 f9ec 	bl	80002e0 <memchr>
 8027f08:	b138      	cbz	r0, 8027f1a <_vfiprintf_r+0x176>
 8027f0a:	9b04      	ldr	r3, [sp, #16]
 8027f0c:	eba0 000a 	sub.w	r0, r0, sl
 8027f10:	2240      	movs	r2, #64	@ 0x40
 8027f12:	4082      	lsls	r2, r0
 8027f14:	4313      	orrs	r3, r2
 8027f16:	3401      	adds	r4, #1
 8027f18:	9304      	str	r3, [sp, #16]
 8027f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027f1e:	4829      	ldr	r0, [pc, #164]	@ (8027fc4 <_vfiprintf_r+0x220>)
 8027f20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8027f24:	2206      	movs	r2, #6
 8027f26:	f7d8 f9db 	bl	80002e0 <memchr>
 8027f2a:	2800      	cmp	r0, #0
 8027f2c:	d03f      	beq.n	8027fae <_vfiprintf_r+0x20a>
 8027f2e:	4b26      	ldr	r3, [pc, #152]	@ (8027fc8 <_vfiprintf_r+0x224>)
 8027f30:	bb1b      	cbnz	r3, 8027f7a <_vfiprintf_r+0x1d6>
 8027f32:	9b03      	ldr	r3, [sp, #12]
 8027f34:	3307      	adds	r3, #7
 8027f36:	f023 0307 	bic.w	r3, r3, #7
 8027f3a:	3308      	adds	r3, #8
 8027f3c:	9303      	str	r3, [sp, #12]
 8027f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027f40:	443b      	add	r3, r7
 8027f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8027f44:	e76a      	b.n	8027e1c <_vfiprintf_r+0x78>
 8027f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8027f4a:	460c      	mov	r4, r1
 8027f4c:	2001      	movs	r0, #1
 8027f4e:	e7a8      	b.n	8027ea2 <_vfiprintf_r+0xfe>
 8027f50:	2300      	movs	r3, #0
 8027f52:	3401      	adds	r4, #1
 8027f54:	9305      	str	r3, [sp, #20]
 8027f56:	4619      	mov	r1, r3
 8027f58:	f04f 0c0a 	mov.w	ip, #10
 8027f5c:	4620      	mov	r0, r4
 8027f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027f62:	3a30      	subs	r2, #48	@ 0x30
 8027f64:	2a09      	cmp	r2, #9
 8027f66:	d903      	bls.n	8027f70 <_vfiprintf_r+0x1cc>
 8027f68:	2b00      	cmp	r3, #0
 8027f6a:	d0c6      	beq.n	8027efa <_vfiprintf_r+0x156>
 8027f6c:	9105      	str	r1, [sp, #20]
 8027f6e:	e7c4      	b.n	8027efa <_vfiprintf_r+0x156>
 8027f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8027f74:	4604      	mov	r4, r0
 8027f76:	2301      	movs	r3, #1
 8027f78:	e7f0      	b.n	8027f5c <_vfiprintf_r+0x1b8>
 8027f7a:	ab03      	add	r3, sp, #12
 8027f7c:	9300      	str	r3, [sp, #0]
 8027f7e:	462a      	mov	r2, r5
 8027f80:	4b12      	ldr	r3, [pc, #72]	@ (8027fcc <_vfiprintf_r+0x228>)
 8027f82:	a904      	add	r1, sp, #16
 8027f84:	4630      	mov	r0, r6
 8027f86:	f7fc faf7 	bl	8024578 <_printf_float>
 8027f8a:	4607      	mov	r7, r0
 8027f8c:	1c78      	adds	r0, r7, #1
 8027f8e:	d1d6      	bne.n	8027f3e <_vfiprintf_r+0x19a>
 8027f90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8027f92:	07d9      	lsls	r1, r3, #31
 8027f94:	d405      	bmi.n	8027fa2 <_vfiprintf_r+0x1fe>
 8027f96:	89ab      	ldrh	r3, [r5, #12]
 8027f98:	059a      	lsls	r2, r3, #22
 8027f9a:	d402      	bmi.n	8027fa2 <_vfiprintf_r+0x1fe>
 8027f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8027f9e:	f7fd faed 	bl	802557c <__retarget_lock_release_recursive>
 8027fa2:	89ab      	ldrh	r3, [r5, #12]
 8027fa4:	065b      	lsls	r3, r3, #25
 8027fa6:	f53f af1f 	bmi.w	8027de8 <_vfiprintf_r+0x44>
 8027faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027fac:	e71e      	b.n	8027dec <_vfiprintf_r+0x48>
 8027fae:	ab03      	add	r3, sp, #12
 8027fb0:	9300      	str	r3, [sp, #0]
 8027fb2:	462a      	mov	r2, r5
 8027fb4:	4b05      	ldr	r3, [pc, #20]	@ (8027fcc <_vfiprintf_r+0x228>)
 8027fb6:	a904      	add	r1, sp, #16
 8027fb8:	4630      	mov	r0, r6
 8027fba:	f7fc fd65 	bl	8024a88 <_printf_i>
 8027fbe:	e7e4      	b.n	8027f8a <_vfiprintf_r+0x1e6>
 8027fc0:	0802d340 	.word	0x0802d340
 8027fc4:	0802d34a 	.word	0x0802d34a
 8027fc8:	08024579 	.word	0x08024579
 8027fcc:	08027d7f 	.word	0x08027d7f
 8027fd0:	0802d346 	.word	0x0802d346

08027fd4 <_scanf_chars>:
 8027fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027fd8:	4615      	mov	r5, r2
 8027fda:	688a      	ldr	r2, [r1, #8]
 8027fdc:	4680      	mov	r8, r0
 8027fde:	460c      	mov	r4, r1
 8027fe0:	b932      	cbnz	r2, 8027ff0 <_scanf_chars+0x1c>
 8027fe2:	698a      	ldr	r2, [r1, #24]
 8027fe4:	2a00      	cmp	r2, #0
 8027fe6:	bf14      	ite	ne
 8027fe8:	f04f 32ff 	movne.w	r2, #4294967295
 8027fec:	2201      	moveq	r2, #1
 8027fee:	608a      	str	r2, [r1, #8]
 8027ff0:	6822      	ldr	r2, [r4, #0]
 8027ff2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8028084 <_scanf_chars+0xb0>
 8027ff6:	06d1      	lsls	r1, r2, #27
 8027ff8:	bf5f      	itttt	pl
 8027ffa:	681a      	ldrpl	r2, [r3, #0]
 8027ffc:	1d11      	addpl	r1, r2, #4
 8027ffe:	6019      	strpl	r1, [r3, #0]
 8028000:	6816      	ldrpl	r6, [r2, #0]
 8028002:	2700      	movs	r7, #0
 8028004:	69a0      	ldr	r0, [r4, #24]
 8028006:	b188      	cbz	r0, 802802c <_scanf_chars+0x58>
 8028008:	2801      	cmp	r0, #1
 802800a:	d107      	bne.n	802801c <_scanf_chars+0x48>
 802800c:	682b      	ldr	r3, [r5, #0]
 802800e:	781a      	ldrb	r2, [r3, #0]
 8028010:	6963      	ldr	r3, [r4, #20]
 8028012:	5c9b      	ldrb	r3, [r3, r2]
 8028014:	b953      	cbnz	r3, 802802c <_scanf_chars+0x58>
 8028016:	2f00      	cmp	r7, #0
 8028018:	d031      	beq.n	802807e <_scanf_chars+0xaa>
 802801a:	e022      	b.n	8028062 <_scanf_chars+0x8e>
 802801c:	2802      	cmp	r0, #2
 802801e:	d120      	bne.n	8028062 <_scanf_chars+0x8e>
 8028020:	682b      	ldr	r3, [r5, #0]
 8028022:	781b      	ldrb	r3, [r3, #0]
 8028024:	f819 3003 	ldrb.w	r3, [r9, r3]
 8028028:	071b      	lsls	r3, r3, #28
 802802a:	d41a      	bmi.n	8028062 <_scanf_chars+0x8e>
 802802c:	6823      	ldr	r3, [r4, #0]
 802802e:	06da      	lsls	r2, r3, #27
 8028030:	bf5e      	ittt	pl
 8028032:	682b      	ldrpl	r3, [r5, #0]
 8028034:	781b      	ldrbpl	r3, [r3, #0]
 8028036:	f806 3b01 	strbpl.w	r3, [r6], #1
 802803a:	682a      	ldr	r2, [r5, #0]
 802803c:	686b      	ldr	r3, [r5, #4]
 802803e:	3201      	adds	r2, #1
 8028040:	602a      	str	r2, [r5, #0]
 8028042:	68a2      	ldr	r2, [r4, #8]
 8028044:	3b01      	subs	r3, #1
 8028046:	3a01      	subs	r2, #1
 8028048:	606b      	str	r3, [r5, #4]
 802804a:	3701      	adds	r7, #1
 802804c:	60a2      	str	r2, [r4, #8]
 802804e:	b142      	cbz	r2, 8028062 <_scanf_chars+0x8e>
 8028050:	2b00      	cmp	r3, #0
 8028052:	dcd7      	bgt.n	8028004 <_scanf_chars+0x30>
 8028054:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8028058:	4629      	mov	r1, r5
 802805a:	4640      	mov	r0, r8
 802805c:	4798      	blx	r3
 802805e:	2800      	cmp	r0, #0
 8028060:	d0d0      	beq.n	8028004 <_scanf_chars+0x30>
 8028062:	6823      	ldr	r3, [r4, #0]
 8028064:	f013 0310 	ands.w	r3, r3, #16
 8028068:	d105      	bne.n	8028076 <_scanf_chars+0xa2>
 802806a:	68e2      	ldr	r2, [r4, #12]
 802806c:	3201      	adds	r2, #1
 802806e:	60e2      	str	r2, [r4, #12]
 8028070:	69a2      	ldr	r2, [r4, #24]
 8028072:	b102      	cbz	r2, 8028076 <_scanf_chars+0xa2>
 8028074:	7033      	strb	r3, [r6, #0]
 8028076:	6923      	ldr	r3, [r4, #16]
 8028078:	443b      	add	r3, r7
 802807a:	6123      	str	r3, [r4, #16]
 802807c:	2000      	movs	r0, #0
 802807e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028082:	bf00      	nop
 8028084:	0802cfa4 	.word	0x0802cfa4

08028088 <_scanf_i>:
 8028088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802808c:	4698      	mov	r8, r3
 802808e:	4b74      	ldr	r3, [pc, #464]	@ (8028260 <_scanf_i+0x1d8>)
 8028090:	460c      	mov	r4, r1
 8028092:	4682      	mov	sl, r0
 8028094:	4616      	mov	r6, r2
 8028096:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802809a:	b087      	sub	sp, #28
 802809c:	ab03      	add	r3, sp, #12
 802809e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80280a2:	4b70      	ldr	r3, [pc, #448]	@ (8028264 <_scanf_i+0x1dc>)
 80280a4:	69a1      	ldr	r1, [r4, #24]
 80280a6:	4a70      	ldr	r2, [pc, #448]	@ (8028268 <_scanf_i+0x1e0>)
 80280a8:	2903      	cmp	r1, #3
 80280aa:	bf08      	it	eq
 80280ac:	461a      	moveq	r2, r3
 80280ae:	68a3      	ldr	r3, [r4, #8]
 80280b0:	9201      	str	r2, [sp, #4]
 80280b2:	1e5a      	subs	r2, r3, #1
 80280b4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80280b8:	bf88      	it	hi
 80280ba:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80280be:	4627      	mov	r7, r4
 80280c0:	bf82      	ittt	hi
 80280c2:	eb03 0905 	addhi.w	r9, r3, r5
 80280c6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80280ca:	60a3      	strhi	r3, [r4, #8]
 80280cc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80280d0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80280d4:	bf98      	it	ls
 80280d6:	f04f 0900 	movls.w	r9, #0
 80280da:	6023      	str	r3, [r4, #0]
 80280dc:	463d      	mov	r5, r7
 80280de:	f04f 0b00 	mov.w	fp, #0
 80280e2:	6831      	ldr	r1, [r6, #0]
 80280e4:	ab03      	add	r3, sp, #12
 80280e6:	7809      	ldrb	r1, [r1, #0]
 80280e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80280ec:	2202      	movs	r2, #2
 80280ee:	f7d8 f8f7 	bl	80002e0 <memchr>
 80280f2:	b328      	cbz	r0, 8028140 <_scanf_i+0xb8>
 80280f4:	f1bb 0f01 	cmp.w	fp, #1
 80280f8:	d159      	bne.n	80281ae <_scanf_i+0x126>
 80280fa:	6862      	ldr	r2, [r4, #4]
 80280fc:	b92a      	cbnz	r2, 802810a <_scanf_i+0x82>
 80280fe:	6822      	ldr	r2, [r4, #0]
 8028100:	2108      	movs	r1, #8
 8028102:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8028106:	6061      	str	r1, [r4, #4]
 8028108:	6022      	str	r2, [r4, #0]
 802810a:	6822      	ldr	r2, [r4, #0]
 802810c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8028110:	6022      	str	r2, [r4, #0]
 8028112:	68a2      	ldr	r2, [r4, #8]
 8028114:	1e51      	subs	r1, r2, #1
 8028116:	60a1      	str	r1, [r4, #8]
 8028118:	b192      	cbz	r2, 8028140 <_scanf_i+0xb8>
 802811a:	6832      	ldr	r2, [r6, #0]
 802811c:	1c51      	adds	r1, r2, #1
 802811e:	6031      	str	r1, [r6, #0]
 8028120:	7812      	ldrb	r2, [r2, #0]
 8028122:	f805 2b01 	strb.w	r2, [r5], #1
 8028126:	6872      	ldr	r2, [r6, #4]
 8028128:	3a01      	subs	r2, #1
 802812a:	2a00      	cmp	r2, #0
 802812c:	6072      	str	r2, [r6, #4]
 802812e:	dc07      	bgt.n	8028140 <_scanf_i+0xb8>
 8028130:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8028134:	4631      	mov	r1, r6
 8028136:	4650      	mov	r0, sl
 8028138:	4790      	blx	r2
 802813a:	2800      	cmp	r0, #0
 802813c:	f040 8085 	bne.w	802824a <_scanf_i+0x1c2>
 8028140:	f10b 0b01 	add.w	fp, fp, #1
 8028144:	f1bb 0f03 	cmp.w	fp, #3
 8028148:	d1cb      	bne.n	80280e2 <_scanf_i+0x5a>
 802814a:	6863      	ldr	r3, [r4, #4]
 802814c:	b90b      	cbnz	r3, 8028152 <_scanf_i+0xca>
 802814e:	230a      	movs	r3, #10
 8028150:	6063      	str	r3, [r4, #4]
 8028152:	6863      	ldr	r3, [r4, #4]
 8028154:	4945      	ldr	r1, [pc, #276]	@ (802826c <_scanf_i+0x1e4>)
 8028156:	6960      	ldr	r0, [r4, #20]
 8028158:	1ac9      	subs	r1, r1, r3
 802815a:	f000 f947 	bl	80283ec <__sccl>
 802815e:	f04f 0b00 	mov.w	fp, #0
 8028162:	68a3      	ldr	r3, [r4, #8]
 8028164:	6822      	ldr	r2, [r4, #0]
 8028166:	2b00      	cmp	r3, #0
 8028168:	d03d      	beq.n	80281e6 <_scanf_i+0x15e>
 802816a:	6831      	ldr	r1, [r6, #0]
 802816c:	6960      	ldr	r0, [r4, #20]
 802816e:	f891 c000 	ldrb.w	ip, [r1]
 8028172:	f810 000c 	ldrb.w	r0, [r0, ip]
 8028176:	2800      	cmp	r0, #0
 8028178:	d035      	beq.n	80281e6 <_scanf_i+0x15e>
 802817a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 802817e:	d124      	bne.n	80281ca <_scanf_i+0x142>
 8028180:	0510      	lsls	r0, r2, #20
 8028182:	d522      	bpl.n	80281ca <_scanf_i+0x142>
 8028184:	f10b 0b01 	add.w	fp, fp, #1
 8028188:	f1b9 0f00 	cmp.w	r9, #0
 802818c:	d003      	beq.n	8028196 <_scanf_i+0x10e>
 802818e:	3301      	adds	r3, #1
 8028190:	f109 39ff 	add.w	r9, r9, #4294967295
 8028194:	60a3      	str	r3, [r4, #8]
 8028196:	6873      	ldr	r3, [r6, #4]
 8028198:	3b01      	subs	r3, #1
 802819a:	2b00      	cmp	r3, #0
 802819c:	6073      	str	r3, [r6, #4]
 802819e:	dd1b      	ble.n	80281d8 <_scanf_i+0x150>
 80281a0:	6833      	ldr	r3, [r6, #0]
 80281a2:	3301      	adds	r3, #1
 80281a4:	6033      	str	r3, [r6, #0]
 80281a6:	68a3      	ldr	r3, [r4, #8]
 80281a8:	3b01      	subs	r3, #1
 80281aa:	60a3      	str	r3, [r4, #8]
 80281ac:	e7d9      	b.n	8028162 <_scanf_i+0xda>
 80281ae:	f1bb 0f02 	cmp.w	fp, #2
 80281b2:	d1ae      	bne.n	8028112 <_scanf_i+0x8a>
 80281b4:	6822      	ldr	r2, [r4, #0]
 80281b6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80281ba:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80281be:	d1bf      	bne.n	8028140 <_scanf_i+0xb8>
 80281c0:	2110      	movs	r1, #16
 80281c2:	6061      	str	r1, [r4, #4]
 80281c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80281c8:	e7a2      	b.n	8028110 <_scanf_i+0x88>
 80281ca:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80281ce:	6022      	str	r2, [r4, #0]
 80281d0:	780b      	ldrb	r3, [r1, #0]
 80281d2:	f805 3b01 	strb.w	r3, [r5], #1
 80281d6:	e7de      	b.n	8028196 <_scanf_i+0x10e>
 80281d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80281dc:	4631      	mov	r1, r6
 80281de:	4650      	mov	r0, sl
 80281e0:	4798      	blx	r3
 80281e2:	2800      	cmp	r0, #0
 80281e4:	d0df      	beq.n	80281a6 <_scanf_i+0x11e>
 80281e6:	6823      	ldr	r3, [r4, #0]
 80281e8:	05d9      	lsls	r1, r3, #23
 80281ea:	d50d      	bpl.n	8028208 <_scanf_i+0x180>
 80281ec:	42bd      	cmp	r5, r7
 80281ee:	d909      	bls.n	8028204 <_scanf_i+0x17c>
 80281f0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80281f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80281f8:	4632      	mov	r2, r6
 80281fa:	4650      	mov	r0, sl
 80281fc:	4798      	blx	r3
 80281fe:	f105 39ff 	add.w	r9, r5, #4294967295
 8028202:	464d      	mov	r5, r9
 8028204:	42bd      	cmp	r5, r7
 8028206:	d028      	beq.n	802825a <_scanf_i+0x1d2>
 8028208:	6822      	ldr	r2, [r4, #0]
 802820a:	f012 0210 	ands.w	r2, r2, #16
 802820e:	d113      	bne.n	8028238 <_scanf_i+0x1b0>
 8028210:	702a      	strb	r2, [r5, #0]
 8028212:	6863      	ldr	r3, [r4, #4]
 8028214:	9e01      	ldr	r6, [sp, #4]
 8028216:	4639      	mov	r1, r7
 8028218:	4650      	mov	r0, sl
 802821a:	47b0      	blx	r6
 802821c:	f8d8 3000 	ldr.w	r3, [r8]
 8028220:	6821      	ldr	r1, [r4, #0]
 8028222:	1d1a      	adds	r2, r3, #4
 8028224:	f8c8 2000 	str.w	r2, [r8]
 8028228:	f011 0f20 	tst.w	r1, #32
 802822c:	681b      	ldr	r3, [r3, #0]
 802822e:	d00f      	beq.n	8028250 <_scanf_i+0x1c8>
 8028230:	6018      	str	r0, [r3, #0]
 8028232:	68e3      	ldr	r3, [r4, #12]
 8028234:	3301      	adds	r3, #1
 8028236:	60e3      	str	r3, [r4, #12]
 8028238:	6923      	ldr	r3, [r4, #16]
 802823a:	1bed      	subs	r5, r5, r7
 802823c:	445d      	add	r5, fp
 802823e:	442b      	add	r3, r5
 8028240:	6123      	str	r3, [r4, #16]
 8028242:	2000      	movs	r0, #0
 8028244:	b007      	add	sp, #28
 8028246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802824a:	f04f 0b00 	mov.w	fp, #0
 802824e:	e7ca      	b.n	80281e6 <_scanf_i+0x15e>
 8028250:	07ca      	lsls	r2, r1, #31
 8028252:	bf4c      	ite	mi
 8028254:	8018      	strhmi	r0, [r3, #0]
 8028256:	6018      	strpl	r0, [r3, #0]
 8028258:	e7eb      	b.n	8028232 <_scanf_i+0x1aa>
 802825a:	2001      	movs	r0, #1
 802825c:	e7f2      	b.n	8028244 <_scanf_i+0x1bc>
 802825e:	bf00      	nop
 8028260:	0802cd68 	.word	0x0802cd68
 8028264:	08024459 	.word	0x08024459
 8028268:	08028e15 	.word	0x08028e15
 802826c:	0802d361 	.word	0x0802d361

08028270 <__sflush_r>:
 8028270:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8028274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028278:	0716      	lsls	r6, r2, #28
 802827a:	4605      	mov	r5, r0
 802827c:	460c      	mov	r4, r1
 802827e:	d454      	bmi.n	802832a <__sflush_r+0xba>
 8028280:	684b      	ldr	r3, [r1, #4]
 8028282:	2b00      	cmp	r3, #0
 8028284:	dc02      	bgt.n	802828c <__sflush_r+0x1c>
 8028286:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8028288:	2b00      	cmp	r3, #0
 802828a:	dd48      	ble.n	802831e <__sflush_r+0xae>
 802828c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802828e:	2e00      	cmp	r6, #0
 8028290:	d045      	beq.n	802831e <__sflush_r+0xae>
 8028292:	2300      	movs	r3, #0
 8028294:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8028298:	682f      	ldr	r7, [r5, #0]
 802829a:	6a21      	ldr	r1, [r4, #32]
 802829c:	602b      	str	r3, [r5, #0]
 802829e:	d030      	beq.n	8028302 <__sflush_r+0x92>
 80282a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80282a2:	89a3      	ldrh	r3, [r4, #12]
 80282a4:	0759      	lsls	r1, r3, #29
 80282a6:	d505      	bpl.n	80282b4 <__sflush_r+0x44>
 80282a8:	6863      	ldr	r3, [r4, #4]
 80282aa:	1ad2      	subs	r2, r2, r3
 80282ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80282ae:	b10b      	cbz	r3, 80282b4 <__sflush_r+0x44>
 80282b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80282b2:	1ad2      	subs	r2, r2, r3
 80282b4:	2300      	movs	r3, #0
 80282b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80282b8:	6a21      	ldr	r1, [r4, #32]
 80282ba:	4628      	mov	r0, r5
 80282bc:	47b0      	blx	r6
 80282be:	1c43      	adds	r3, r0, #1
 80282c0:	89a3      	ldrh	r3, [r4, #12]
 80282c2:	d106      	bne.n	80282d2 <__sflush_r+0x62>
 80282c4:	6829      	ldr	r1, [r5, #0]
 80282c6:	291d      	cmp	r1, #29
 80282c8:	d82b      	bhi.n	8028322 <__sflush_r+0xb2>
 80282ca:	4a2a      	ldr	r2, [pc, #168]	@ (8028374 <__sflush_r+0x104>)
 80282cc:	410a      	asrs	r2, r1
 80282ce:	07d6      	lsls	r6, r2, #31
 80282d0:	d427      	bmi.n	8028322 <__sflush_r+0xb2>
 80282d2:	2200      	movs	r2, #0
 80282d4:	6062      	str	r2, [r4, #4]
 80282d6:	04d9      	lsls	r1, r3, #19
 80282d8:	6922      	ldr	r2, [r4, #16]
 80282da:	6022      	str	r2, [r4, #0]
 80282dc:	d504      	bpl.n	80282e8 <__sflush_r+0x78>
 80282de:	1c42      	adds	r2, r0, #1
 80282e0:	d101      	bne.n	80282e6 <__sflush_r+0x76>
 80282e2:	682b      	ldr	r3, [r5, #0]
 80282e4:	b903      	cbnz	r3, 80282e8 <__sflush_r+0x78>
 80282e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80282e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80282ea:	602f      	str	r7, [r5, #0]
 80282ec:	b1b9      	cbz	r1, 802831e <__sflush_r+0xae>
 80282ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80282f2:	4299      	cmp	r1, r3
 80282f4:	d002      	beq.n	80282fc <__sflush_r+0x8c>
 80282f6:	4628      	mov	r0, r5
 80282f8:	f7fd ff54 	bl	80261a4 <_free_r>
 80282fc:	2300      	movs	r3, #0
 80282fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8028300:	e00d      	b.n	802831e <__sflush_r+0xae>
 8028302:	2301      	movs	r3, #1
 8028304:	4628      	mov	r0, r5
 8028306:	47b0      	blx	r6
 8028308:	4602      	mov	r2, r0
 802830a:	1c50      	adds	r0, r2, #1
 802830c:	d1c9      	bne.n	80282a2 <__sflush_r+0x32>
 802830e:	682b      	ldr	r3, [r5, #0]
 8028310:	2b00      	cmp	r3, #0
 8028312:	d0c6      	beq.n	80282a2 <__sflush_r+0x32>
 8028314:	2b1d      	cmp	r3, #29
 8028316:	d001      	beq.n	802831c <__sflush_r+0xac>
 8028318:	2b16      	cmp	r3, #22
 802831a:	d11e      	bne.n	802835a <__sflush_r+0xea>
 802831c:	602f      	str	r7, [r5, #0]
 802831e:	2000      	movs	r0, #0
 8028320:	e022      	b.n	8028368 <__sflush_r+0xf8>
 8028322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028326:	b21b      	sxth	r3, r3
 8028328:	e01b      	b.n	8028362 <__sflush_r+0xf2>
 802832a:	690f      	ldr	r7, [r1, #16]
 802832c:	2f00      	cmp	r7, #0
 802832e:	d0f6      	beq.n	802831e <__sflush_r+0xae>
 8028330:	0793      	lsls	r3, r2, #30
 8028332:	680e      	ldr	r6, [r1, #0]
 8028334:	bf08      	it	eq
 8028336:	694b      	ldreq	r3, [r1, #20]
 8028338:	600f      	str	r7, [r1, #0]
 802833a:	bf18      	it	ne
 802833c:	2300      	movne	r3, #0
 802833e:	eba6 0807 	sub.w	r8, r6, r7
 8028342:	608b      	str	r3, [r1, #8]
 8028344:	f1b8 0f00 	cmp.w	r8, #0
 8028348:	dde9      	ble.n	802831e <__sflush_r+0xae>
 802834a:	6a21      	ldr	r1, [r4, #32]
 802834c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802834e:	4643      	mov	r3, r8
 8028350:	463a      	mov	r2, r7
 8028352:	4628      	mov	r0, r5
 8028354:	47b0      	blx	r6
 8028356:	2800      	cmp	r0, #0
 8028358:	dc08      	bgt.n	802836c <__sflush_r+0xfc>
 802835a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802835e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028362:	81a3      	strh	r3, [r4, #12]
 8028364:	f04f 30ff 	mov.w	r0, #4294967295
 8028368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802836c:	4407      	add	r7, r0
 802836e:	eba8 0800 	sub.w	r8, r8, r0
 8028372:	e7e7      	b.n	8028344 <__sflush_r+0xd4>
 8028374:	dfbffffe 	.word	0xdfbffffe

08028378 <_fflush_r>:
 8028378:	b538      	push	{r3, r4, r5, lr}
 802837a:	690b      	ldr	r3, [r1, #16]
 802837c:	4605      	mov	r5, r0
 802837e:	460c      	mov	r4, r1
 8028380:	b913      	cbnz	r3, 8028388 <_fflush_r+0x10>
 8028382:	2500      	movs	r5, #0
 8028384:	4628      	mov	r0, r5
 8028386:	bd38      	pop	{r3, r4, r5, pc}
 8028388:	b118      	cbz	r0, 8028392 <_fflush_r+0x1a>
 802838a:	6a03      	ldr	r3, [r0, #32]
 802838c:	b90b      	cbnz	r3, 8028392 <_fflush_r+0x1a>
 802838e:	f7fc ff33 	bl	80251f8 <__sinit>
 8028392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028396:	2b00      	cmp	r3, #0
 8028398:	d0f3      	beq.n	8028382 <_fflush_r+0xa>
 802839a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802839c:	07d0      	lsls	r0, r2, #31
 802839e:	d404      	bmi.n	80283aa <_fflush_r+0x32>
 80283a0:	0599      	lsls	r1, r3, #22
 80283a2:	d402      	bmi.n	80283aa <_fflush_r+0x32>
 80283a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80283a6:	f7fd f8e8 	bl	802557a <__retarget_lock_acquire_recursive>
 80283aa:	4628      	mov	r0, r5
 80283ac:	4621      	mov	r1, r4
 80283ae:	f7ff ff5f 	bl	8028270 <__sflush_r>
 80283b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80283b4:	07da      	lsls	r2, r3, #31
 80283b6:	4605      	mov	r5, r0
 80283b8:	d4e4      	bmi.n	8028384 <_fflush_r+0xc>
 80283ba:	89a3      	ldrh	r3, [r4, #12]
 80283bc:	059b      	lsls	r3, r3, #22
 80283be:	d4e1      	bmi.n	8028384 <_fflush_r+0xc>
 80283c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80283c2:	f7fd f8db 	bl	802557c <__retarget_lock_release_recursive>
 80283c6:	e7dd      	b.n	8028384 <_fflush_r+0xc>

080283c8 <fiprintf>:
 80283c8:	b40e      	push	{r1, r2, r3}
 80283ca:	b503      	push	{r0, r1, lr}
 80283cc:	4601      	mov	r1, r0
 80283ce:	ab03      	add	r3, sp, #12
 80283d0:	4805      	ldr	r0, [pc, #20]	@ (80283e8 <fiprintf+0x20>)
 80283d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80283d6:	6800      	ldr	r0, [r0, #0]
 80283d8:	9301      	str	r3, [sp, #4]
 80283da:	f7ff fce3 	bl	8027da4 <_vfiprintf_r>
 80283de:	b002      	add	sp, #8
 80283e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80283e4:	b003      	add	sp, #12
 80283e6:	4770      	bx	lr
 80283e8:	2400021c 	.word	0x2400021c

080283ec <__sccl>:
 80283ec:	b570      	push	{r4, r5, r6, lr}
 80283ee:	780b      	ldrb	r3, [r1, #0]
 80283f0:	4604      	mov	r4, r0
 80283f2:	2b5e      	cmp	r3, #94	@ 0x5e
 80283f4:	bf0b      	itete	eq
 80283f6:	784b      	ldrbeq	r3, [r1, #1]
 80283f8:	1c4a      	addne	r2, r1, #1
 80283fa:	1c8a      	addeq	r2, r1, #2
 80283fc:	2100      	movne	r1, #0
 80283fe:	bf08      	it	eq
 8028400:	2101      	moveq	r1, #1
 8028402:	3801      	subs	r0, #1
 8028404:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8028408:	f800 1f01 	strb.w	r1, [r0, #1]!
 802840c:	42a8      	cmp	r0, r5
 802840e:	d1fb      	bne.n	8028408 <__sccl+0x1c>
 8028410:	b90b      	cbnz	r3, 8028416 <__sccl+0x2a>
 8028412:	1e50      	subs	r0, r2, #1
 8028414:	bd70      	pop	{r4, r5, r6, pc}
 8028416:	f081 0101 	eor.w	r1, r1, #1
 802841a:	54e1      	strb	r1, [r4, r3]
 802841c:	4610      	mov	r0, r2
 802841e:	4602      	mov	r2, r0
 8028420:	f812 5b01 	ldrb.w	r5, [r2], #1
 8028424:	2d2d      	cmp	r5, #45	@ 0x2d
 8028426:	d005      	beq.n	8028434 <__sccl+0x48>
 8028428:	2d5d      	cmp	r5, #93	@ 0x5d
 802842a:	d016      	beq.n	802845a <__sccl+0x6e>
 802842c:	2d00      	cmp	r5, #0
 802842e:	d0f1      	beq.n	8028414 <__sccl+0x28>
 8028430:	462b      	mov	r3, r5
 8028432:	e7f2      	b.n	802841a <__sccl+0x2e>
 8028434:	7846      	ldrb	r6, [r0, #1]
 8028436:	2e5d      	cmp	r6, #93	@ 0x5d
 8028438:	d0fa      	beq.n	8028430 <__sccl+0x44>
 802843a:	42b3      	cmp	r3, r6
 802843c:	dcf8      	bgt.n	8028430 <__sccl+0x44>
 802843e:	3002      	adds	r0, #2
 8028440:	461a      	mov	r2, r3
 8028442:	3201      	adds	r2, #1
 8028444:	4296      	cmp	r6, r2
 8028446:	54a1      	strb	r1, [r4, r2]
 8028448:	dcfb      	bgt.n	8028442 <__sccl+0x56>
 802844a:	1af2      	subs	r2, r6, r3
 802844c:	3a01      	subs	r2, #1
 802844e:	1c5d      	adds	r5, r3, #1
 8028450:	42b3      	cmp	r3, r6
 8028452:	bfa8      	it	ge
 8028454:	2200      	movge	r2, #0
 8028456:	18ab      	adds	r3, r5, r2
 8028458:	e7e1      	b.n	802841e <__sccl+0x32>
 802845a:	4610      	mov	r0, r2
 802845c:	e7da      	b.n	8028414 <__sccl+0x28>

0802845e <__submore>:
 802845e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028462:	460c      	mov	r4, r1
 8028464:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8028466:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802846a:	4299      	cmp	r1, r3
 802846c:	d11d      	bne.n	80284aa <__submore+0x4c>
 802846e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8028472:	f7fb fead 	bl	80241d0 <_malloc_r>
 8028476:	b918      	cbnz	r0, 8028480 <__submore+0x22>
 8028478:	f04f 30ff 	mov.w	r0, #4294967295
 802847c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028480:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8028484:	63a3      	str	r3, [r4, #56]	@ 0x38
 8028486:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 802848a:	6360      	str	r0, [r4, #52]	@ 0x34
 802848c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8028490:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8028494:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8028498:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 802849c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80284a0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80284a4:	6020      	str	r0, [r4, #0]
 80284a6:	2000      	movs	r0, #0
 80284a8:	e7e8      	b.n	802847c <__submore+0x1e>
 80284aa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80284ac:	0077      	lsls	r7, r6, #1
 80284ae:	463a      	mov	r2, r7
 80284b0:	f000 fc13 	bl	8028cda <_realloc_r>
 80284b4:	4605      	mov	r5, r0
 80284b6:	2800      	cmp	r0, #0
 80284b8:	d0de      	beq.n	8028478 <__submore+0x1a>
 80284ba:	eb00 0806 	add.w	r8, r0, r6
 80284be:	4601      	mov	r1, r0
 80284c0:	4632      	mov	r2, r6
 80284c2:	4640      	mov	r0, r8
 80284c4:	f7fd f85b 	bl	802557e <memcpy>
 80284c8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80284cc:	f8c4 8000 	str.w	r8, [r4]
 80284d0:	e7e9      	b.n	80284a6 <__submore+0x48>

080284d2 <__swbuf_r>:
 80284d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80284d4:	460e      	mov	r6, r1
 80284d6:	4614      	mov	r4, r2
 80284d8:	4605      	mov	r5, r0
 80284da:	b118      	cbz	r0, 80284e4 <__swbuf_r+0x12>
 80284dc:	6a03      	ldr	r3, [r0, #32]
 80284de:	b90b      	cbnz	r3, 80284e4 <__swbuf_r+0x12>
 80284e0:	f7fc fe8a 	bl	80251f8 <__sinit>
 80284e4:	69a3      	ldr	r3, [r4, #24]
 80284e6:	60a3      	str	r3, [r4, #8]
 80284e8:	89a3      	ldrh	r3, [r4, #12]
 80284ea:	071a      	lsls	r2, r3, #28
 80284ec:	d501      	bpl.n	80284f2 <__swbuf_r+0x20>
 80284ee:	6923      	ldr	r3, [r4, #16]
 80284f0:	b943      	cbnz	r3, 8028504 <__swbuf_r+0x32>
 80284f2:	4621      	mov	r1, r4
 80284f4:	4628      	mov	r0, r5
 80284f6:	f000 f82b 	bl	8028550 <__swsetup_r>
 80284fa:	b118      	cbz	r0, 8028504 <__swbuf_r+0x32>
 80284fc:	f04f 37ff 	mov.w	r7, #4294967295
 8028500:	4638      	mov	r0, r7
 8028502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028504:	6823      	ldr	r3, [r4, #0]
 8028506:	6922      	ldr	r2, [r4, #16]
 8028508:	1a98      	subs	r0, r3, r2
 802850a:	6963      	ldr	r3, [r4, #20]
 802850c:	b2f6      	uxtb	r6, r6
 802850e:	4283      	cmp	r3, r0
 8028510:	4637      	mov	r7, r6
 8028512:	dc05      	bgt.n	8028520 <__swbuf_r+0x4e>
 8028514:	4621      	mov	r1, r4
 8028516:	4628      	mov	r0, r5
 8028518:	f7ff ff2e 	bl	8028378 <_fflush_r>
 802851c:	2800      	cmp	r0, #0
 802851e:	d1ed      	bne.n	80284fc <__swbuf_r+0x2a>
 8028520:	68a3      	ldr	r3, [r4, #8]
 8028522:	3b01      	subs	r3, #1
 8028524:	60a3      	str	r3, [r4, #8]
 8028526:	6823      	ldr	r3, [r4, #0]
 8028528:	1c5a      	adds	r2, r3, #1
 802852a:	6022      	str	r2, [r4, #0]
 802852c:	701e      	strb	r6, [r3, #0]
 802852e:	6962      	ldr	r2, [r4, #20]
 8028530:	1c43      	adds	r3, r0, #1
 8028532:	429a      	cmp	r2, r3
 8028534:	d004      	beq.n	8028540 <__swbuf_r+0x6e>
 8028536:	89a3      	ldrh	r3, [r4, #12]
 8028538:	07db      	lsls	r3, r3, #31
 802853a:	d5e1      	bpl.n	8028500 <__swbuf_r+0x2e>
 802853c:	2e0a      	cmp	r6, #10
 802853e:	d1df      	bne.n	8028500 <__swbuf_r+0x2e>
 8028540:	4621      	mov	r1, r4
 8028542:	4628      	mov	r0, r5
 8028544:	f7ff ff18 	bl	8028378 <_fflush_r>
 8028548:	2800      	cmp	r0, #0
 802854a:	d0d9      	beq.n	8028500 <__swbuf_r+0x2e>
 802854c:	e7d6      	b.n	80284fc <__swbuf_r+0x2a>
	...

08028550 <__swsetup_r>:
 8028550:	b538      	push	{r3, r4, r5, lr}
 8028552:	4b29      	ldr	r3, [pc, #164]	@ (80285f8 <__swsetup_r+0xa8>)
 8028554:	4605      	mov	r5, r0
 8028556:	6818      	ldr	r0, [r3, #0]
 8028558:	460c      	mov	r4, r1
 802855a:	b118      	cbz	r0, 8028564 <__swsetup_r+0x14>
 802855c:	6a03      	ldr	r3, [r0, #32]
 802855e:	b90b      	cbnz	r3, 8028564 <__swsetup_r+0x14>
 8028560:	f7fc fe4a 	bl	80251f8 <__sinit>
 8028564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028568:	0719      	lsls	r1, r3, #28
 802856a:	d422      	bmi.n	80285b2 <__swsetup_r+0x62>
 802856c:	06da      	lsls	r2, r3, #27
 802856e:	d407      	bmi.n	8028580 <__swsetup_r+0x30>
 8028570:	2209      	movs	r2, #9
 8028572:	602a      	str	r2, [r5, #0]
 8028574:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028578:	81a3      	strh	r3, [r4, #12]
 802857a:	f04f 30ff 	mov.w	r0, #4294967295
 802857e:	e033      	b.n	80285e8 <__swsetup_r+0x98>
 8028580:	0758      	lsls	r0, r3, #29
 8028582:	d512      	bpl.n	80285aa <__swsetup_r+0x5a>
 8028584:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028586:	b141      	cbz	r1, 802859a <__swsetup_r+0x4a>
 8028588:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802858c:	4299      	cmp	r1, r3
 802858e:	d002      	beq.n	8028596 <__swsetup_r+0x46>
 8028590:	4628      	mov	r0, r5
 8028592:	f7fd fe07 	bl	80261a4 <_free_r>
 8028596:	2300      	movs	r3, #0
 8028598:	6363      	str	r3, [r4, #52]	@ 0x34
 802859a:	89a3      	ldrh	r3, [r4, #12]
 802859c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80285a0:	81a3      	strh	r3, [r4, #12]
 80285a2:	2300      	movs	r3, #0
 80285a4:	6063      	str	r3, [r4, #4]
 80285a6:	6923      	ldr	r3, [r4, #16]
 80285a8:	6023      	str	r3, [r4, #0]
 80285aa:	89a3      	ldrh	r3, [r4, #12]
 80285ac:	f043 0308 	orr.w	r3, r3, #8
 80285b0:	81a3      	strh	r3, [r4, #12]
 80285b2:	6923      	ldr	r3, [r4, #16]
 80285b4:	b94b      	cbnz	r3, 80285ca <__swsetup_r+0x7a>
 80285b6:	89a3      	ldrh	r3, [r4, #12]
 80285b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80285bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80285c0:	d003      	beq.n	80285ca <__swsetup_r+0x7a>
 80285c2:	4621      	mov	r1, r4
 80285c4:	4628      	mov	r0, r5
 80285c6:	f000 fc5a 	bl	8028e7e <__smakebuf_r>
 80285ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80285ce:	f013 0201 	ands.w	r2, r3, #1
 80285d2:	d00a      	beq.n	80285ea <__swsetup_r+0x9a>
 80285d4:	2200      	movs	r2, #0
 80285d6:	60a2      	str	r2, [r4, #8]
 80285d8:	6962      	ldr	r2, [r4, #20]
 80285da:	4252      	negs	r2, r2
 80285dc:	61a2      	str	r2, [r4, #24]
 80285de:	6922      	ldr	r2, [r4, #16]
 80285e0:	b942      	cbnz	r2, 80285f4 <__swsetup_r+0xa4>
 80285e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80285e6:	d1c5      	bne.n	8028574 <__swsetup_r+0x24>
 80285e8:	bd38      	pop	{r3, r4, r5, pc}
 80285ea:	0799      	lsls	r1, r3, #30
 80285ec:	bf58      	it	pl
 80285ee:	6962      	ldrpl	r2, [r4, #20]
 80285f0:	60a2      	str	r2, [r4, #8]
 80285f2:	e7f4      	b.n	80285de <__swsetup_r+0x8e>
 80285f4:	2000      	movs	r0, #0
 80285f6:	e7f7      	b.n	80285e8 <__swsetup_r+0x98>
 80285f8:	2400021c 	.word	0x2400021c
 80285fc:	00000000 	.word	0x00000000

08028600 <nan>:
 8028600:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8028608 <nan+0x8>
 8028604:	4770      	bx	lr
 8028606:	bf00      	nop
 8028608:	00000000 	.word	0x00000000
 802860c:	7ff80000 	.word	0x7ff80000

08028610 <abort>:
 8028610:	b508      	push	{r3, lr}
 8028612:	2006      	movs	r0, #6
 8028614:	f000 fc98 	bl	8028f48 <raise>
 8028618:	2001      	movs	r0, #1
 802861a:	f7dc fe9f 	bl	800535c <_exit>

0802861e <_calloc_r>:
 802861e:	b570      	push	{r4, r5, r6, lr}
 8028620:	fba1 5402 	umull	r5, r4, r1, r2
 8028624:	b93c      	cbnz	r4, 8028636 <_calloc_r+0x18>
 8028626:	4629      	mov	r1, r5
 8028628:	f7fb fdd2 	bl	80241d0 <_malloc_r>
 802862c:	4606      	mov	r6, r0
 802862e:	b928      	cbnz	r0, 802863c <_calloc_r+0x1e>
 8028630:	2600      	movs	r6, #0
 8028632:	4630      	mov	r0, r6
 8028634:	bd70      	pop	{r4, r5, r6, pc}
 8028636:	220c      	movs	r2, #12
 8028638:	6002      	str	r2, [r0, #0]
 802863a:	e7f9      	b.n	8028630 <_calloc_r+0x12>
 802863c:	462a      	mov	r2, r5
 802863e:	4621      	mov	r1, r4
 8028640:	f7fc fefc 	bl	802543c <memset>
 8028644:	e7f5      	b.n	8028632 <_calloc_r+0x14>

08028646 <rshift>:
 8028646:	6903      	ldr	r3, [r0, #16]
 8028648:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802864c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028650:	ea4f 1261 	mov.w	r2, r1, asr #5
 8028654:	f100 0414 	add.w	r4, r0, #20
 8028658:	dd45      	ble.n	80286e6 <rshift+0xa0>
 802865a:	f011 011f 	ands.w	r1, r1, #31
 802865e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8028662:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8028666:	d10c      	bne.n	8028682 <rshift+0x3c>
 8028668:	f100 0710 	add.w	r7, r0, #16
 802866c:	4629      	mov	r1, r5
 802866e:	42b1      	cmp	r1, r6
 8028670:	d334      	bcc.n	80286dc <rshift+0x96>
 8028672:	1a9b      	subs	r3, r3, r2
 8028674:	009b      	lsls	r3, r3, #2
 8028676:	1eea      	subs	r2, r5, #3
 8028678:	4296      	cmp	r6, r2
 802867a:	bf38      	it	cc
 802867c:	2300      	movcc	r3, #0
 802867e:	4423      	add	r3, r4
 8028680:	e015      	b.n	80286ae <rshift+0x68>
 8028682:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8028686:	f1c1 0820 	rsb	r8, r1, #32
 802868a:	40cf      	lsrs	r7, r1
 802868c:	f105 0e04 	add.w	lr, r5, #4
 8028690:	46a1      	mov	r9, r4
 8028692:	4576      	cmp	r6, lr
 8028694:	46f4      	mov	ip, lr
 8028696:	d815      	bhi.n	80286c4 <rshift+0x7e>
 8028698:	1a9a      	subs	r2, r3, r2
 802869a:	0092      	lsls	r2, r2, #2
 802869c:	3a04      	subs	r2, #4
 802869e:	3501      	adds	r5, #1
 80286a0:	42ae      	cmp	r6, r5
 80286a2:	bf38      	it	cc
 80286a4:	2200      	movcc	r2, #0
 80286a6:	18a3      	adds	r3, r4, r2
 80286a8:	50a7      	str	r7, [r4, r2]
 80286aa:	b107      	cbz	r7, 80286ae <rshift+0x68>
 80286ac:	3304      	adds	r3, #4
 80286ae:	1b1a      	subs	r2, r3, r4
 80286b0:	42a3      	cmp	r3, r4
 80286b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80286b6:	bf08      	it	eq
 80286b8:	2300      	moveq	r3, #0
 80286ba:	6102      	str	r2, [r0, #16]
 80286bc:	bf08      	it	eq
 80286be:	6143      	streq	r3, [r0, #20]
 80286c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80286c4:	f8dc c000 	ldr.w	ip, [ip]
 80286c8:	fa0c fc08 	lsl.w	ip, ip, r8
 80286cc:	ea4c 0707 	orr.w	r7, ip, r7
 80286d0:	f849 7b04 	str.w	r7, [r9], #4
 80286d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80286d8:	40cf      	lsrs	r7, r1
 80286da:	e7da      	b.n	8028692 <rshift+0x4c>
 80286dc:	f851 cb04 	ldr.w	ip, [r1], #4
 80286e0:	f847 cf04 	str.w	ip, [r7, #4]!
 80286e4:	e7c3      	b.n	802866e <rshift+0x28>
 80286e6:	4623      	mov	r3, r4
 80286e8:	e7e1      	b.n	80286ae <rshift+0x68>

080286ea <__hexdig_fun>:
 80286ea:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80286ee:	2b09      	cmp	r3, #9
 80286f0:	d802      	bhi.n	80286f8 <__hexdig_fun+0xe>
 80286f2:	3820      	subs	r0, #32
 80286f4:	b2c0      	uxtb	r0, r0
 80286f6:	4770      	bx	lr
 80286f8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80286fc:	2b05      	cmp	r3, #5
 80286fe:	d801      	bhi.n	8028704 <__hexdig_fun+0x1a>
 8028700:	3847      	subs	r0, #71	@ 0x47
 8028702:	e7f7      	b.n	80286f4 <__hexdig_fun+0xa>
 8028704:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8028708:	2b05      	cmp	r3, #5
 802870a:	d801      	bhi.n	8028710 <__hexdig_fun+0x26>
 802870c:	3827      	subs	r0, #39	@ 0x27
 802870e:	e7f1      	b.n	80286f4 <__hexdig_fun+0xa>
 8028710:	2000      	movs	r0, #0
 8028712:	4770      	bx	lr

08028714 <__gethex>:
 8028714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028718:	b085      	sub	sp, #20
 802871a:	468a      	mov	sl, r1
 802871c:	9302      	str	r3, [sp, #8]
 802871e:	680b      	ldr	r3, [r1, #0]
 8028720:	9001      	str	r0, [sp, #4]
 8028722:	4690      	mov	r8, r2
 8028724:	1c9c      	adds	r4, r3, #2
 8028726:	46a1      	mov	r9, r4
 8028728:	f814 0b01 	ldrb.w	r0, [r4], #1
 802872c:	2830      	cmp	r0, #48	@ 0x30
 802872e:	d0fa      	beq.n	8028726 <__gethex+0x12>
 8028730:	eba9 0303 	sub.w	r3, r9, r3
 8028734:	f1a3 0b02 	sub.w	fp, r3, #2
 8028738:	f7ff ffd7 	bl	80286ea <__hexdig_fun>
 802873c:	4605      	mov	r5, r0
 802873e:	2800      	cmp	r0, #0
 8028740:	d168      	bne.n	8028814 <__gethex+0x100>
 8028742:	49a0      	ldr	r1, [pc, #640]	@ (80289c4 <__gethex+0x2b0>)
 8028744:	2201      	movs	r2, #1
 8028746:	4648      	mov	r0, r9
 8028748:	f7fc fe80 	bl	802544c <strncmp>
 802874c:	4607      	mov	r7, r0
 802874e:	2800      	cmp	r0, #0
 8028750:	d167      	bne.n	8028822 <__gethex+0x10e>
 8028752:	f899 0001 	ldrb.w	r0, [r9, #1]
 8028756:	4626      	mov	r6, r4
 8028758:	f7ff ffc7 	bl	80286ea <__hexdig_fun>
 802875c:	2800      	cmp	r0, #0
 802875e:	d062      	beq.n	8028826 <__gethex+0x112>
 8028760:	4623      	mov	r3, r4
 8028762:	7818      	ldrb	r0, [r3, #0]
 8028764:	2830      	cmp	r0, #48	@ 0x30
 8028766:	4699      	mov	r9, r3
 8028768:	f103 0301 	add.w	r3, r3, #1
 802876c:	d0f9      	beq.n	8028762 <__gethex+0x4e>
 802876e:	f7ff ffbc 	bl	80286ea <__hexdig_fun>
 8028772:	fab0 f580 	clz	r5, r0
 8028776:	096d      	lsrs	r5, r5, #5
 8028778:	f04f 0b01 	mov.w	fp, #1
 802877c:	464a      	mov	r2, r9
 802877e:	4616      	mov	r6, r2
 8028780:	3201      	adds	r2, #1
 8028782:	7830      	ldrb	r0, [r6, #0]
 8028784:	f7ff ffb1 	bl	80286ea <__hexdig_fun>
 8028788:	2800      	cmp	r0, #0
 802878a:	d1f8      	bne.n	802877e <__gethex+0x6a>
 802878c:	498d      	ldr	r1, [pc, #564]	@ (80289c4 <__gethex+0x2b0>)
 802878e:	2201      	movs	r2, #1
 8028790:	4630      	mov	r0, r6
 8028792:	f7fc fe5b 	bl	802544c <strncmp>
 8028796:	2800      	cmp	r0, #0
 8028798:	d13f      	bne.n	802881a <__gethex+0x106>
 802879a:	b944      	cbnz	r4, 80287ae <__gethex+0x9a>
 802879c:	1c74      	adds	r4, r6, #1
 802879e:	4622      	mov	r2, r4
 80287a0:	4616      	mov	r6, r2
 80287a2:	3201      	adds	r2, #1
 80287a4:	7830      	ldrb	r0, [r6, #0]
 80287a6:	f7ff ffa0 	bl	80286ea <__hexdig_fun>
 80287aa:	2800      	cmp	r0, #0
 80287ac:	d1f8      	bne.n	80287a0 <__gethex+0x8c>
 80287ae:	1ba4      	subs	r4, r4, r6
 80287b0:	00a7      	lsls	r7, r4, #2
 80287b2:	7833      	ldrb	r3, [r6, #0]
 80287b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80287b8:	2b50      	cmp	r3, #80	@ 0x50
 80287ba:	d13e      	bne.n	802883a <__gethex+0x126>
 80287bc:	7873      	ldrb	r3, [r6, #1]
 80287be:	2b2b      	cmp	r3, #43	@ 0x2b
 80287c0:	d033      	beq.n	802882a <__gethex+0x116>
 80287c2:	2b2d      	cmp	r3, #45	@ 0x2d
 80287c4:	d034      	beq.n	8028830 <__gethex+0x11c>
 80287c6:	1c71      	adds	r1, r6, #1
 80287c8:	2400      	movs	r4, #0
 80287ca:	7808      	ldrb	r0, [r1, #0]
 80287cc:	f7ff ff8d 	bl	80286ea <__hexdig_fun>
 80287d0:	1e43      	subs	r3, r0, #1
 80287d2:	b2db      	uxtb	r3, r3
 80287d4:	2b18      	cmp	r3, #24
 80287d6:	d830      	bhi.n	802883a <__gethex+0x126>
 80287d8:	f1a0 0210 	sub.w	r2, r0, #16
 80287dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80287e0:	f7ff ff83 	bl	80286ea <__hexdig_fun>
 80287e4:	f100 3cff 	add.w	ip, r0, #4294967295
 80287e8:	fa5f fc8c 	uxtb.w	ip, ip
 80287ec:	f1bc 0f18 	cmp.w	ip, #24
 80287f0:	f04f 030a 	mov.w	r3, #10
 80287f4:	d91e      	bls.n	8028834 <__gethex+0x120>
 80287f6:	b104      	cbz	r4, 80287fa <__gethex+0xe6>
 80287f8:	4252      	negs	r2, r2
 80287fa:	4417      	add	r7, r2
 80287fc:	f8ca 1000 	str.w	r1, [sl]
 8028800:	b1ed      	cbz	r5, 802883e <__gethex+0x12a>
 8028802:	f1bb 0f00 	cmp.w	fp, #0
 8028806:	bf0c      	ite	eq
 8028808:	2506      	moveq	r5, #6
 802880a:	2500      	movne	r5, #0
 802880c:	4628      	mov	r0, r5
 802880e:	b005      	add	sp, #20
 8028810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028814:	2500      	movs	r5, #0
 8028816:	462c      	mov	r4, r5
 8028818:	e7b0      	b.n	802877c <__gethex+0x68>
 802881a:	2c00      	cmp	r4, #0
 802881c:	d1c7      	bne.n	80287ae <__gethex+0x9a>
 802881e:	4627      	mov	r7, r4
 8028820:	e7c7      	b.n	80287b2 <__gethex+0x9e>
 8028822:	464e      	mov	r6, r9
 8028824:	462f      	mov	r7, r5
 8028826:	2501      	movs	r5, #1
 8028828:	e7c3      	b.n	80287b2 <__gethex+0x9e>
 802882a:	2400      	movs	r4, #0
 802882c:	1cb1      	adds	r1, r6, #2
 802882e:	e7cc      	b.n	80287ca <__gethex+0xb6>
 8028830:	2401      	movs	r4, #1
 8028832:	e7fb      	b.n	802882c <__gethex+0x118>
 8028834:	fb03 0002 	mla	r0, r3, r2, r0
 8028838:	e7ce      	b.n	80287d8 <__gethex+0xc4>
 802883a:	4631      	mov	r1, r6
 802883c:	e7de      	b.n	80287fc <__gethex+0xe8>
 802883e:	eba6 0309 	sub.w	r3, r6, r9
 8028842:	3b01      	subs	r3, #1
 8028844:	4629      	mov	r1, r5
 8028846:	2b07      	cmp	r3, #7
 8028848:	dc0a      	bgt.n	8028860 <__gethex+0x14c>
 802884a:	9801      	ldr	r0, [sp, #4]
 802884c:	f7fd fcf4 	bl	8026238 <_Balloc>
 8028850:	4604      	mov	r4, r0
 8028852:	b940      	cbnz	r0, 8028866 <__gethex+0x152>
 8028854:	4b5c      	ldr	r3, [pc, #368]	@ (80289c8 <__gethex+0x2b4>)
 8028856:	4602      	mov	r2, r0
 8028858:	21e4      	movs	r1, #228	@ 0xe4
 802885a:	485c      	ldr	r0, [pc, #368]	@ (80289cc <__gethex+0x2b8>)
 802885c:	f7fc fea4 	bl	80255a8 <__assert_func>
 8028860:	3101      	adds	r1, #1
 8028862:	105b      	asrs	r3, r3, #1
 8028864:	e7ef      	b.n	8028846 <__gethex+0x132>
 8028866:	f100 0a14 	add.w	sl, r0, #20
 802886a:	2300      	movs	r3, #0
 802886c:	4655      	mov	r5, sl
 802886e:	469b      	mov	fp, r3
 8028870:	45b1      	cmp	r9, r6
 8028872:	d337      	bcc.n	80288e4 <__gethex+0x1d0>
 8028874:	f845 bb04 	str.w	fp, [r5], #4
 8028878:	eba5 050a 	sub.w	r5, r5, sl
 802887c:	10ad      	asrs	r5, r5, #2
 802887e:	6125      	str	r5, [r4, #16]
 8028880:	4658      	mov	r0, fp
 8028882:	f7fd fdcb 	bl	802641c <__hi0bits>
 8028886:	016d      	lsls	r5, r5, #5
 8028888:	f8d8 6000 	ldr.w	r6, [r8]
 802888c:	1a2d      	subs	r5, r5, r0
 802888e:	42b5      	cmp	r5, r6
 8028890:	dd54      	ble.n	802893c <__gethex+0x228>
 8028892:	1bad      	subs	r5, r5, r6
 8028894:	4629      	mov	r1, r5
 8028896:	4620      	mov	r0, r4
 8028898:	f7fe f95c 	bl	8026b54 <__any_on>
 802889c:	4681      	mov	r9, r0
 802889e:	b178      	cbz	r0, 80288c0 <__gethex+0x1ac>
 80288a0:	1e6b      	subs	r3, r5, #1
 80288a2:	1159      	asrs	r1, r3, #5
 80288a4:	f003 021f 	and.w	r2, r3, #31
 80288a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80288ac:	f04f 0901 	mov.w	r9, #1
 80288b0:	fa09 f202 	lsl.w	r2, r9, r2
 80288b4:	420a      	tst	r2, r1
 80288b6:	d003      	beq.n	80288c0 <__gethex+0x1ac>
 80288b8:	454b      	cmp	r3, r9
 80288ba:	dc36      	bgt.n	802892a <__gethex+0x216>
 80288bc:	f04f 0902 	mov.w	r9, #2
 80288c0:	4629      	mov	r1, r5
 80288c2:	4620      	mov	r0, r4
 80288c4:	f7ff febf 	bl	8028646 <rshift>
 80288c8:	442f      	add	r7, r5
 80288ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80288ce:	42bb      	cmp	r3, r7
 80288d0:	da42      	bge.n	8028958 <__gethex+0x244>
 80288d2:	9801      	ldr	r0, [sp, #4]
 80288d4:	4621      	mov	r1, r4
 80288d6:	f7fd fcef 	bl	80262b8 <_Bfree>
 80288da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80288dc:	2300      	movs	r3, #0
 80288de:	6013      	str	r3, [r2, #0]
 80288e0:	25a3      	movs	r5, #163	@ 0xa3
 80288e2:	e793      	b.n	802880c <__gethex+0xf8>
 80288e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80288e8:	2a2e      	cmp	r2, #46	@ 0x2e
 80288ea:	d012      	beq.n	8028912 <__gethex+0x1fe>
 80288ec:	2b20      	cmp	r3, #32
 80288ee:	d104      	bne.n	80288fa <__gethex+0x1e6>
 80288f0:	f845 bb04 	str.w	fp, [r5], #4
 80288f4:	f04f 0b00 	mov.w	fp, #0
 80288f8:	465b      	mov	r3, fp
 80288fa:	7830      	ldrb	r0, [r6, #0]
 80288fc:	9303      	str	r3, [sp, #12]
 80288fe:	f7ff fef4 	bl	80286ea <__hexdig_fun>
 8028902:	9b03      	ldr	r3, [sp, #12]
 8028904:	f000 000f 	and.w	r0, r0, #15
 8028908:	4098      	lsls	r0, r3
 802890a:	ea4b 0b00 	orr.w	fp, fp, r0
 802890e:	3304      	adds	r3, #4
 8028910:	e7ae      	b.n	8028870 <__gethex+0x15c>
 8028912:	45b1      	cmp	r9, r6
 8028914:	d8ea      	bhi.n	80288ec <__gethex+0x1d8>
 8028916:	492b      	ldr	r1, [pc, #172]	@ (80289c4 <__gethex+0x2b0>)
 8028918:	9303      	str	r3, [sp, #12]
 802891a:	2201      	movs	r2, #1
 802891c:	4630      	mov	r0, r6
 802891e:	f7fc fd95 	bl	802544c <strncmp>
 8028922:	9b03      	ldr	r3, [sp, #12]
 8028924:	2800      	cmp	r0, #0
 8028926:	d1e1      	bne.n	80288ec <__gethex+0x1d8>
 8028928:	e7a2      	b.n	8028870 <__gethex+0x15c>
 802892a:	1ea9      	subs	r1, r5, #2
 802892c:	4620      	mov	r0, r4
 802892e:	f7fe f911 	bl	8026b54 <__any_on>
 8028932:	2800      	cmp	r0, #0
 8028934:	d0c2      	beq.n	80288bc <__gethex+0x1a8>
 8028936:	f04f 0903 	mov.w	r9, #3
 802893a:	e7c1      	b.n	80288c0 <__gethex+0x1ac>
 802893c:	da09      	bge.n	8028952 <__gethex+0x23e>
 802893e:	1b75      	subs	r5, r6, r5
 8028940:	4621      	mov	r1, r4
 8028942:	9801      	ldr	r0, [sp, #4]
 8028944:	462a      	mov	r2, r5
 8028946:	f7fd fecf 	bl	80266e8 <__lshift>
 802894a:	1b7f      	subs	r7, r7, r5
 802894c:	4604      	mov	r4, r0
 802894e:	f100 0a14 	add.w	sl, r0, #20
 8028952:	f04f 0900 	mov.w	r9, #0
 8028956:	e7b8      	b.n	80288ca <__gethex+0x1b6>
 8028958:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802895c:	42bd      	cmp	r5, r7
 802895e:	dd6f      	ble.n	8028a40 <__gethex+0x32c>
 8028960:	1bed      	subs	r5, r5, r7
 8028962:	42ae      	cmp	r6, r5
 8028964:	dc34      	bgt.n	80289d0 <__gethex+0x2bc>
 8028966:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802896a:	2b02      	cmp	r3, #2
 802896c:	d022      	beq.n	80289b4 <__gethex+0x2a0>
 802896e:	2b03      	cmp	r3, #3
 8028970:	d024      	beq.n	80289bc <__gethex+0x2a8>
 8028972:	2b01      	cmp	r3, #1
 8028974:	d115      	bne.n	80289a2 <__gethex+0x28e>
 8028976:	42ae      	cmp	r6, r5
 8028978:	d113      	bne.n	80289a2 <__gethex+0x28e>
 802897a:	2e01      	cmp	r6, #1
 802897c:	d10b      	bne.n	8028996 <__gethex+0x282>
 802897e:	9a02      	ldr	r2, [sp, #8]
 8028980:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8028984:	6013      	str	r3, [r2, #0]
 8028986:	2301      	movs	r3, #1
 8028988:	6123      	str	r3, [r4, #16]
 802898a:	f8ca 3000 	str.w	r3, [sl]
 802898e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028990:	2562      	movs	r5, #98	@ 0x62
 8028992:	601c      	str	r4, [r3, #0]
 8028994:	e73a      	b.n	802880c <__gethex+0xf8>
 8028996:	1e71      	subs	r1, r6, #1
 8028998:	4620      	mov	r0, r4
 802899a:	f7fe f8db 	bl	8026b54 <__any_on>
 802899e:	2800      	cmp	r0, #0
 80289a0:	d1ed      	bne.n	802897e <__gethex+0x26a>
 80289a2:	9801      	ldr	r0, [sp, #4]
 80289a4:	4621      	mov	r1, r4
 80289a6:	f7fd fc87 	bl	80262b8 <_Bfree>
 80289aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80289ac:	2300      	movs	r3, #0
 80289ae:	6013      	str	r3, [r2, #0]
 80289b0:	2550      	movs	r5, #80	@ 0x50
 80289b2:	e72b      	b.n	802880c <__gethex+0xf8>
 80289b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80289b6:	2b00      	cmp	r3, #0
 80289b8:	d1f3      	bne.n	80289a2 <__gethex+0x28e>
 80289ba:	e7e0      	b.n	802897e <__gethex+0x26a>
 80289bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80289be:	2b00      	cmp	r3, #0
 80289c0:	d1dd      	bne.n	802897e <__gethex+0x26a>
 80289c2:	e7ee      	b.n	80289a2 <__gethex+0x28e>
 80289c4:	0802d2e8 	.word	0x0802d2e8
 80289c8:	0802d17c 	.word	0x0802d17c
 80289cc:	0802d374 	.word	0x0802d374
 80289d0:	1e6f      	subs	r7, r5, #1
 80289d2:	f1b9 0f00 	cmp.w	r9, #0
 80289d6:	d130      	bne.n	8028a3a <__gethex+0x326>
 80289d8:	b127      	cbz	r7, 80289e4 <__gethex+0x2d0>
 80289da:	4639      	mov	r1, r7
 80289dc:	4620      	mov	r0, r4
 80289de:	f7fe f8b9 	bl	8026b54 <__any_on>
 80289e2:	4681      	mov	r9, r0
 80289e4:	117a      	asrs	r2, r7, #5
 80289e6:	2301      	movs	r3, #1
 80289e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80289ec:	f007 071f 	and.w	r7, r7, #31
 80289f0:	40bb      	lsls	r3, r7
 80289f2:	4213      	tst	r3, r2
 80289f4:	4629      	mov	r1, r5
 80289f6:	4620      	mov	r0, r4
 80289f8:	bf18      	it	ne
 80289fa:	f049 0902 	orrne.w	r9, r9, #2
 80289fe:	f7ff fe22 	bl	8028646 <rshift>
 8028a02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8028a06:	1b76      	subs	r6, r6, r5
 8028a08:	2502      	movs	r5, #2
 8028a0a:	f1b9 0f00 	cmp.w	r9, #0
 8028a0e:	d047      	beq.n	8028aa0 <__gethex+0x38c>
 8028a10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8028a14:	2b02      	cmp	r3, #2
 8028a16:	d015      	beq.n	8028a44 <__gethex+0x330>
 8028a18:	2b03      	cmp	r3, #3
 8028a1a:	d017      	beq.n	8028a4c <__gethex+0x338>
 8028a1c:	2b01      	cmp	r3, #1
 8028a1e:	d109      	bne.n	8028a34 <__gethex+0x320>
 8028a20:	f019 0f02 	tst.w	r9, #2
 8028a24:	d006      	beq.n	8028a34 <__gethex+0x320>
 8028a26:	f8da 3000 	ldr.w	r3, [sl]
 8028a2a:	ea49 0903 	orr.w	r9, r9, r3
 8028a2e:	f019 0f01 	tst.w	r9, #1
 8028a32:	d10e      	bne.n	8028a52 <__gethex+0x33e>
 8028a34:	f045 0510 	orr.w	r5, r5, #16
 8028a38:	e032      	b.n	8028aa0 <__gethex+0x38c>
 8028a3a:	f04f 0901 	mov.w	r9, #1
 8028a3e:	e7d1      	b.n	80289e4 <__gethex+0x2d0>
 8028a40:	2501      	movs	r5, #1
 8028a42:	e7e2      	b.n	8028a0a <__gethex+0x2f6>
 8028a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028a46:	f1c3 0301 	rsb	r3, r3, #1
 8028a4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028a4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028a4e:	2b00      	cmp	r3, #0
 8028a50:	d0f0      	beq.n	8028a34 <__gethex+0x320>
 8028a52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8028a56:	f104 0314 	add.w	r3, r4, #20
 8028a5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8028a5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8028a62:	f04f 0c00 	mov.w	ip, #0
 8028a66:	4618      	mov	r0, r3
 8028a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8028a6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8028a70:	d01b      	beq.n	8028aaa <__gethex+0x396>
 8028a72:	3201      	adds	r2, #1
 8028a74:	6002      	str	r2, [r0, #0]
 8028a76:	2d02      	cmp	r5, #2
 8028a78:	f104 0314 	add.w	r3, r4, #20
 8028a7c:	d13c      	bne.n	8028af8 <__gethex+0x3e4>
 8028a7e:	f8d8 2000 	ldr.w	r2, [r8]
 8028a82:	3a01      	subs	r2, #1
 8028a84:	42b2      	cmp	r2, r6
 8028a86:	d109      	bne.n	8028a9c <__gethex+0x388>
 8028a88:	1171      	asrs	r1, r6, #5
 8028a8a:	2201      	movs	r2, #1
 8028a8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8028a90:	f006 061f 	and.w	r6, r6, #31
 8028a94:	fa02 f606 	lsl.w	r6, r2, r6
 8028a98:	421e      	tst	r6, r3
 8028a9a:	d13a      	bne.n	8028b12 <__gethex+0x3fe>
 8028a9c:	f045 0520 	orr.w	r5, r5, #32
 8028aa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028aa2:	601c      	str	r4, [r3, #0]
 8028aa4:	9b02      	ldr	r3, [sp, #8]
 8028aa6:	601f      	str	r7, [r3, #0]
 8028aa8:	e6b0      	b.n	802880c <__gethex+0xf8>
 8028aaa:	4299      	cmp	r1, r3
 8028aac:	f843 cc04 	str.w	ip, [r3, #-4]
 8028ab0:	d8d9      	bhi.n	8028a66 <__gethex+0x352>
 8028ab2:	68a3      	ldr	r3, [r4, #8]
 8028ab4:	459b      	cmp	fp, r3
 8028ab6:	db17      	blt.n	8028ae8 <__gethex+0x3d4>
 8028ab8:	6861      	ldr	r1, [r4, #4]
 8028aba:	9801      	ldr	r0, [sp, #4]
 8028abc:	3101      	adds	r1, #1
 8028abe:	f7fd fbbb 	bl	8026238 <_Balloc>
 8028ac2:	4681      	mov	r9, r0
 8028ac4:	b918      	cbnz	r0, 8028ace <__gethex+0x3ba>
 8028ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8028b30 <__gethex+0x41c>)
 8028ac8:	4602      	mov	r2, r0
 8028aca:	2184      	movs	r1, #132	@ 0x84
 8028acc:	e6c5      	b.n	802885a <__gethex+0x146>
 8028ace:	6922      	ldr	r2, [r4, #16]
 8028ad0:	3202      	adds	r2, #2
 8028ad2:	f104 010c 	add.w	r1, r4, #12
 8028ad6:	0092      	lsls	r2, r2, #2
 8028ad8:	300c      	adds	r0, #12
 8028ada:	f7fc fd50 	bl	802557e <memcpy>
 8028ade:	4621      	mov	r1, r4
 8028ae0:	9801      	ldr	r0, [sp, #4]
 8028ae2:	f7fd fbe9 	bl	80262b8 <_Bfree>
 8028ae6:	464c      	mov	r4, r9
 8028ae8:	6923      	ldr	r3, [r4, #16]
 8028aea:	1c5a      	adds	r2, r3, #1
 8028aec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8028af0:	6122      	str	r2, [r4, #16]
 8028af2:	2201      	movs	r2, #1
 8028af4:	615a      	str	r2, [r3, #20]
 8028af6:	e7be      	b.n	8028a76 <__gethex+0x362>
 8028af8:	6922      	ldr	r2, [r4, #16]
 8028afa:	455a      	cmp	r2, fp
 8028afc:	dd0b      	ble.n	8028b16 <__gethex+0x402>
 8028afe:	2101      	movs	r1, #1
 8028b00:	4620      	mov	r0, r4
 8028b02:	f7ff fda0 	bl	8028646 <rshift>
 8028b06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8028b0a:	3701      	adds	r7, #1
 8028b0c:	42bb      	cmp	r3, r7
 8028b0e:	f6ff aee0 	blt.w	80288d2 <__gethex+0x1be>
 8028b12:	2501      	movs	r5, #1
 8028b14:	e7c2      	b.n	8028a9c <__gethex+0x388>
 8028b16:	f016 061f 	ands.w	r6, r6, #31
 8028b1a:	d0fa      	beq.n	8028b12 <__gethex+0x3fe>
 8028b1c:	4453      	add	r3, sl
 8028b1e:	f1c6 0620 	rsb	r6, r6, #32
 8028b22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8028b26:	f7fd fc79 	bl	802641c <__hi0bits>
 8028b2a:	42b0      	cmp	r0, r6
 8028b2c:	dbe7      	blt.n	8028afe <__gethex+0x3ea>
 8028b2e:	e7f0      	b.n	8028b12 <__gethex+0x3fe>
 8028b30:	0802d17c 	.word	0x0802d17c

08028b34 <L_shift>:
 8028b34:	f1c2 0208 	rsb	r2, r2, #8
 8028b38:	0092      	lsls	r2, r2, #2
 8028b3a:	b570      	push	{r4, r5, r6, lr}
 8028b3c:	f1c2 0620 	rsb	r6, r2, #32
 8028b40:	6843      	ldr	r3, [r0, #4]
 8028b42:	6804      	ldr	r4, [r0, #0]
 8028b44:	fa03 f506 	lsl.w	r5, r3, r6
 8028b48:	432c      	orrs	r4, r5
 8028b4a:	40d3      	lsrs	r3, r2
 8028b4c:	6004      	str	r4, [r0, #0]
 8028b4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8028b52:	4288      	cmp	r0, r1
 8028b54:	d3f4      	bcc.n	8028b40 <L_shift+0xc>
 8028b56:	bd70      	pop	{r4, r5, r6, pc}

08028b58 <__match>:
 8028b58:	b530      	push	{r4, r5, lr}
 8028b5a:	6803      	ldr	r3, [r0, #0]
 8028b5c:	3301      	adds	r3, #1
 8028b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028b62:	b914      	cbnz	r4, 8028b6a <__match+0x12>
 8028b64:	6003      	str	r3, [r0, #0]
 8028b66:	2001      	movs	r0, #1
 8028b68:	bd30      	pop	{r4, r5, pc}
 8028b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028b6e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8028b72:	2d19      	cmp	r5, #25
 8028b74:	bf98      	it	ls
 8028b76:	3220      	addls	r2, #32
 8028b78:	42a2      	cmp	r2, r4
 8028b7a:	d0f0      	beq.n	8028b5e <__match+0x6>
 8028b7c:	2000      	movs	r0, #0
 8028b7e:	e7f3      	b.n	8028b68 <__match+0x10>

08028b80 <__hexnan>:
 8028b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b84:	680b      	ldr	r3, [r1, #0]
 8028b86:	6801      	ldr	r1, [r0, #0]
 8028b88:	115e      	asrs	r6, r3, #5
 8028b8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8028b8e:	f013 031f 	ands.w	r3, r3, #31
 8028b92:	b087      	sub	sp, #28
 8028b94:	bf18      	it	ne
 8028b96:	3604      	addne	r6, #4
 8028b98:	2500      	movs	r5, #0
 8028b9a:	1f37      	subs	r7, r6, #4
 8028b9c:	4682      	mov	sl, r0
 8028b9e:	4690      	mov	r8, r2
 8028ba0:	9301      	str	r3, [sp, #4]
 8028ba2:	f846 5c04 	str.w	r5, [r6, #-4]
 8028ba6:	46b9      	mov	r9, r7
 8028ba8:	463c      	mov	r4, r7
 8028baa:	9502      	str	r5, [sp, #8]
 8028bac:	46ab      	mov	fp, r5
 8028bae:	784a      	ldrb	r2, [r1, #1]
 8028bb0:	1c4b      	adds	r3, r1, #1
 8028bb2:	9303      	str	r3, [sp, #12]
 8028bb4:	b342      	cbz	r2, 8028c08 <__hexnan+0x88>
 8028bb6:	4610      	mov	r0, r2
 8028bb8:	9105      	str	r1, [sp, #20]
 8028bba:	9204      	str	r2, [sp, #16]
 8028bbc:	f7ff fd95 	bl	80286ea <__hexdig_fun>
 8028bc0:	2800      	cmp	r0, #0
 8028bc2:	d151      	bne.n	8028c68 <__hexnan+0xe8>
 8028bc4:	9a04      	ldr	r2, [sp, #16]
 8028bc6:	9905      	ldr	r1, [sp, #20]
 8028bc8:	2a20      	cmp	r2, #32
 8028bca:	d818      	bhi.n	8028bfe <__hexnan+0x7e>
 8028bcc:	9b02      	ldr	r3, [sp, #8]
 8028bce:	459b      	cmp	fp, r3
 8028bd0:	dd13      	ble.n	8028bfa <__hexnan+0x7a>
 8028bd2:	454c      	cmp	r4, r9
 8028bd4:	d206      	bcs.n	8028be4 <__hexnan+0x64>
 8028bd6:	2d07      	cmp	r5, #7
 8028bd8:	dc04      	bgt.n	8028be4 <__hexnan+0x64>
 8028bda:	462a      	mov	r2, r5
 8028bdc:	4649      	mov	r1, r9
 8028bde:	4620      	mov	r0, r4
 8028be0:	f7ff ffa8 	bl	8028b34 <L_shift>
 8028be4:	4544      	cmp	r4, r8
 8028be6:	d952      	bls.n	8028c8e <__hexnan+0x10e>
 8028be8:	2300      	movs	r3, #0
 8028bea:	f1a4 0904 	sub.w	r9, r4, #4
 8028bee:	f844 3c04 	str.w	r3, [r4, #-4]
 8028bf2:	f8cd b008 	str.w	fp, [sp, #8]
 8028bf6:	464c      	mov	r4, r9
 8028bf8:	461d      	mov	r5, r3
 8028bfa:	9903      	ldr	r1, [sp, #12]
 8028bfc:	e7d7      	b.n	8028bae <__hexnan+0x2e>
 8028bfe:	2a29      	cmp	r2, #41	@ 0x29
 8028c00:	d157      	bne.n	8028cb2 <__hexnan+0x132>
 8028c02:	3102      	adds	r1, #2
 8028c04:	f8ca 1000 	str.w	r1, [sl]
 8028c08:	f1bb 0f00 	cmp.w	fp, #0
 8028c0c:	d051      	beq.n	8028cb2 <__hexnan+0x132>
 8028c0e:	454c      	cmp	r4, r9
 8028c10:	d206      	bcs.n	8028c20 <__hexnan+0xa0>
 8028c12:	2d07      	cmp	r5, #7
 8028c14:	dc04      	bgt.n	8028c20 <__hexnan+0xa0>
 8028c16:	462a      	mov	r2, r5
 8028c18:	4649      	mov	r1, r9
 8028c1a:	4620      	mov	r0, r4
 8028c1c:	f7ff ff8a 	bl	8028b34 <L_shift>
 8028c20:	4544      	cmp	r4, r8
 8028c22:	d936      	bls.n	8028c92 <__hexnan+0x112>
 8028c24:	f1a8 0204 	sub.w	r2, r8, #4
 8028c28:	4623      	mov	r3, r4
 8028c2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8028c2e:	f842 1f04 	str.w	r1, [r2, #4]!
 8028c32:	429f      	cmp	r7, r3
 8028c34:	d2f9      	bcs.n	8028c2a <__hexnan+0xaa>
 8028c36:	1b3b      	subs	r3, r7, r4
 8028c38:	f023 0303 	bic.w	r3, r3, #3
 8028c3c:	3304      	adds	r3, #4
 8028c3e:	3401      	adds	r4, #1
 8028c40:	3e03      	subs	r6, #3
 8028c42:	42b4      	cmp	r4, r6
 8028c44:	bf88      	it	hi
 8028c46:	2304      	movhi	r3, #4
 8028c48:	4443      	add	r3, r8
 8028c4a:	2200      	movs	r2, #0
 8028c4c:	f843 2b04 	str.w	r2, [r3], #4
 8028c50:	429f      	cmp	r7, r3
 8028c52:	d2fb      	bcs.n	8028c4c <__hexnan+0xcc>
 8028c54:	683b      	ldr	r3, [r7, #0]
 8028c56:	b91b      	cbnz	r3, 8028c60 <__hexnan+0xe0>
 8028c58:	4547      	cmp	r7, r8
 8028c5a:	d128      	bne.n	8028cae <__hexnan+0x12e>
 8028c5c:	2301      	movs	r3, #1
 8028c5e:	603b      	str	r3, [r7, #0]
 8028c60:	2005      	movs	r0, #5
 8028c62:	b007      	add	sp, #28
 8028c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c68:	3501      	adds	r5, #1
 8028c6a:	2d08      	cmp	r5, #8
 8028c6c:	f10b 0b01 	add.w	fp, fp, #1
 8028c70:	dd06      	ble.n	8028c80 <__hexnan+0x100>
 8028c72:	4544      	cmp	r4, r8
 8028c74:	d9c1      	bls.n	8028bfa <__hexnan+0x7a>
 8028c76:	2300      	movs	r3, #0
 8028c78:	f844 3c04 	str.w	r3, [r4, #-4]
 8028c7c:	2501      	movs	r5, #1
 8028c7e:	3c04      	subs	r4, #4
 8028c80:	6822      	ldr	r2, [r4, #0]
 8028c82:	f000 000f 	and.w	r0, r0, #15
 8028c86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8028c8a:	6020      	str	r0, [r4, #0]
 8028c8c:	e7b5      	b.n	8028bfa <__hexnan+0x7a>
 8028c8e:	2508      	movs	r5, #8
 8028c90:	e7b3      	b.n	8028bfa <__hexnan+0x7a>
 8028c92:	9b01      	ldr	r3, [sp, #4]
 8028c94:	2b00      	cmp	r3, #0
 8028c96:	d0dd      	beq.n	8028c54 <__hexnan+0xd4>
 8028c98:	f1c3 0320 	rsb	r3, r3, #32
 8028c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8028ca0:	40da      	lsrs	r2, r3
 8028ca2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8028ca6:	4013      	ands	r3, r2
 8028ca8:	f846 3c04 	str.w	r3, [r6, #-4]
 8028cac:	e7d2      	b.n	8028c54 <__hexnan+0xd4>
 8028cae:	3f04      	subs	r7, #4
 8028cb0:	e7d0      	b.n	8028c54 <__hexnan+0xd4>
 8028cb2:	2004      	movs	r0, #4
 8028cb4:	e7d5      	b.n	8028c62 <__hexnan+0xe2>

08028cb6 <__ascii_mbtowc>:
 8028cb6:	b082      	sub	sp, #8
 8028cb8:	b901      	cbnz	r1, 8028cbc <__ascii_mbtowc+0x6>
 8028cba:	a901      	add	r1, sp, #4
 8028cbc:	b142      	cbz	r2, 8028cd0 <__ascii_mbtowc+0x1a>
 8028cbe:	b14b      	cbz	r3, 8028cd4 <__ascii_mbtowc+0x1e>
 8028cc0:	7813      	ldrb	r3, [r2, #0]
 8028cc2:	600b      	str	r3, [r1, #0]
 8028cc4:	7812      	ldrb	r2, [r2, #0]
 8028cc6:	1e10      	subs	r0, r2, #0
 8028cc8:	bf18      	it	ne
 8028cca:	2001      	movne	r0, #1
 8028ccc:	b002      	add	sp, #8
 8028cce:	4770      	bx	lr
 8028cd0:	4610      	mov	r0, r2
 8028cd2:	e7fb      	b.n	8028ccc <__ascii_mbtowc+0x16>
 8028cd4:	f06f 0001 	mvn.w	r0, #1
 8028cd8:	e7f8      	b.n	8028ccc <__ascii_mbtowc+0x16>

08028cda <_realloc_r>:
 8028cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028cde:	4680      	mov	r8, r0
 8028ce0:	4615      	mov	r5, r2
 8028ce2:	460c      	mov	r4, r1
 8028ce4:	b921      	cbnz	r1, 8028cf0 <_realloc_r+0x16>
 8028ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028cea:	4611      	mov	r1, r2
 8028cec:	f7fb ba70 	b.w	80241d0 <_malloc_r>
 8028cf0:	b92a      	cbnz	r2, 8028cfe <_realloc_r+0x24>
 8028cf2:	f7fd fa57 	bl	80261a4 <_free_r>
 8028cf6:	2400      	movs	r4, #0
 8028cf8:	4620      	mov	r0, r4
 8028cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028cfe:	f000 f961 	bl	8028fc4 <_malloc_usable_size_r>
 8028d02:	4285      	cmp	r5, r0
 8028d04:	4606      	mov	r6, r0
 8028d06:	d802      	bhi.n	8028d0e <_realloc_r+0x34>
 8028d08:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8028d0c:	d8f4      	bhi.n	8028cf8 <_realloc_r+0x1e>
 8028d0e:	4629      	mov	r1, r5
 8028d10:	4640      	mov	r0, r8
 8028d12:	f7fb fa5d 	bl	80241d0 <_malloc_r>
 8028d16:	4607      	mov	r7, r0
 8028d18:	2800      	cmp	r0, #0
 8028d1a:	d0ec      	beq.n	8028cf6 <_realloc_r+0x1c>
 8028d1c:	42b5      	cmp	r5, r6
 8028d1e:	462a      	mov	r2, r5
 8028d20:	4621      	mov	r1, r4
 8028d22:	bf28      	it	cs
 8028d24:	4632      	movcs	r2, r6
 8028d26:	f7fc fc2a 	bl	802557e <memcpy>
 8028d2a:	4621      	mov	r1, r4
 8028d2c:	4640      	mov	r0, r8
 8028d2e:	f7fd fa39 	bl	80261a4 <_free_r>
 8028d32:	463c      	mov	r4, r7
 8028d34:	e7e0      	b.n	8028cf8 <_realloc_r+0x1e>
	...

08028d38 <_strtoul_l.constprop.0>:
 8028d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028d3c:	4e34      	ldr	r6, [pc, #208]	@ (8028e10 <_strtoul_l.constprop.0+0xd8>)
 8028d3e:	4686      	mov	lr, r0
 8028d40:	460d      	mov	r5, r1
 8028d42:	4628      	mov	r0, r5
 8028d44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8028d48:	5d37      	ldrb	r7, [r6, r4]
 8028d4a:	f017 0708 	ands.w	r7, r7, #8
 8028d4e:	d1f8      	bne.n	8028d42 <_strtoul_l.constprop.0+0xa>
 8028d50:	2c2d      	cmp	r4, #45	@ 0x2d
 8028d52:	d12f      	bne.n	8028db4 <_strtoul_l.constprop.0+0x7c>
 8028d54:	782c      	ldrb	r4, [r5, #0]
 8028d56:	2701      	movs	r7, #1
 8028d58:	1c85      	adds	r5, r0, #2
 8028d5a:	f033 0010 	bics.w	r0, r3, #16
 8028d5e:	d109      	bne.n	8028d74 <_strtoul_l.constprop.0+0x3c>
 8028d60:	2c30      	cmp	r4, #48	@ 0x30
 8028d62:	d12c      	bne.n	8028dbe <_strtoul_l.constprop.0+0x86>
 8028d64:	7828      	ldrb	r0, [r5, #0]
 8028d66:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8028d6a:	2858      	cmp	r0, #88	@ 0x58
 8028d6c:	d127      	bne.n	8028dbe <_strtoul_l.constprop.0+0x86>
 8028d6e:	786c      	ldrb	r4, [r5, #1]
 8028d70:	2310      	movs	r3, #16
 8028d72:	3502      	adds	r5, #2
 8028d74:	f04f 38ff 	mov.w	r8, #4294967295
 8028d78:	2600      	movs	r6, #0
 8028d7a:	fbb8 f8f3 	udiv	r8, r8, r3
 8028d7e:	fb03 f908 	mul.w	r9, r3, r8
 8028d82:	ea6f 0909 	mvn.w	r9, r9
 8028d86:	4630      	mov	r0, r6
 8028d88:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8028d8c:	f1bc 0f09 	cmp.w	ip, #9
 8028d90:	d81c      	bhi.n	8028dcc <_strtoul_l.constprop.0+0x94>
 8028d92:	4664      	mov	r4, ip
 8028d94:	42a3      	cmp	r3, r4
 8028d96:	dd2a      	ble.n	8028dee <_strtoul_l.constprop.0+0xb6>
 8028d98:	f1b6 3fff 	cmp.w	r6, #4294967295
 8028d9c:	d007      	beq.n	8028dae <_strtoul_l.constprop.0+0x76>
 8028d9e:	4580      	cmp	r8, r0
 8028da0:	d322      	bcc.n	8028de8 <_strtoul_l.constprop.0+0xb0>
 8028da2:	d101      	bne.n	8028da8 <_strtoul_l.constprop.0+0x70>
 8028da4:	45a1      	cmp	r9, r4
 8028da6:	db1f      	blt.n	8028de8 <_strtoul_l.constprop.0+0xb0>
 8028da8:	fb00 4003 	mla	r0, r0, r3, r4
 8028dac:	2601      	movs	r6, #1
 8028dae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8028db2:	e7e9      	b.n	8028d88 <_strtoul_l.constprop.0+0x50>
 8028db4:	2c2b      	cmp	r4, #43	@ 0x2b
 8028db6:	bf04      	itt	eq
 8028db8:	782c      	ldrbeq	r4, [r5, #0]
 8028dba:	1c85      	addeq	r5, r0, #2
 8028dbc:	e7cd      	b.n	8028d5a <_strtoul_l.constprop.0+0x22>
 8028dbe:	2b00      	cmp	r3, #0
 8028dc0:	d1d8      	bne.n	8028d74 <_strtoul_l.constprop.0+0x3c>
 8028dc2:	2c30      	cmp	r4, #48	@ 0x30
 8028dc4:	bf0c      	ite	eq
 8028dc6:	2308      	moveq	r3, #8
 8028dc8:	230a      	movne	r3, #10
 8028dca:	e7d3      	b.n	8028d74 <_strtoul_l.constprop.0+0x3c>
 8028dcc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8028dd0:	f1bc 0f19 	cmp.w	ip, #25
 8028dd4:	d801      	bhi.n	8028dda <_strtoul_l.constprop.0+0xa2>
 8028dd6:	3c37      	subs	r4, #55	@ 0x37
 8028dd8:	e7dc      	b.n	8028d94 <_strtoul_l.constprop.0+0x5c>
 8028dda:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8028dde:	f1bc 0f19 	cmp.w	ip, #25
 8028de2:	d804      	bhi.n	8028dee <_strtoul_l.constprop.0+0xb6>
 8028de4:	3c57      	subs	r4, #87	@ 0x57
 8028de6:	e7d5      	b.n	8028d94 <_strtoul_l.constprop.0+0x5c>
 8028de8:	f04f 36ff 	mov.w	r6, #4294967295
 8028dec:	e7df      	b.n	8028dae <_strtoul_l.constprop.0+0x76>
 8028dee:	1c73      	adds	r3, r6, #1
 8028df0:	d106      	bne.n	8028e00 <_strtoul_l.constprop.0+0xc8>
 8028df2:	2322      	movs	r3, #34	@ 0x22
 8028df4:	f8ce 3000 	str.w	r3, [lr]
 8028df8:	4630      	mov	r0, r6
 8028dfa:	b932      	cbnz	r2, 8028e0a <_strtoul_l.constprop.0+0xd2>
 8028dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028e00:	b107      	cbz	r7, 8028e04 <_strtoul_l.constprop.0+0xcc>
 8028e02:	4240      	negs	r0, r0
 8028e04:	2a00      	cmp	r2, #0
 8028e06:	d0f9      	beq.n	8028dfc <_strtoul_l.constprop.0+0xc4>
 8028e08:	b106      	cbz	r6, 8028e0c <_strtoul_l.constprop.0+0xd4>
 8028e0a:	1e69      	subs	r1, r5, #1
 8028e0c:	6011      	str	r1, [r2, #0]
 8028e0e:	e7f5      	b.n	8028dfc <_strtoul_l.constprop.0+0xc4>
 8028e10:	0802cfa4 	.word	0x0802cfa4

08028e14 <_strtoul_r>:
 8028e14:	f7ff bf90 	b.w	8028d38 <_strtoul_l.constprop.0>

08028e18 <__ascii_wctomb>:
 8028e18:	4603      	mov	r3, r0
 8028e1a:	4608      	mov	r0, r1
 8028e1c:	b141      	cbz	r1, 8028e30 <__ascii_wctomb+0x18>
 8028e1e:	2aff      	cmp	r2, #255	@ 0xff
 8028e20:	d904      	bls.n	8028e2c <__ascii_wctomb+0x14>
 8028e22:	228a      	movs	r2, #138	@ 0x8a
 8028e24:	601a      	str	r2, [r3, #0]
 8028e26:	f04f 30ff 	mov.w	r0, #4294967295
 8028e2a:	4770      	bx	lr
 8028e2c:	700a      	strb	r2, [r1, #0]
 8028e2e:	2001      	movs	r0, #1
 8028e30:	4770      	bx	lr

08028e32 <__swhatbuf_r>:
 8028e32:	b570      	push	{r4, r5, r6, lr}
 8028e34:	460c      	mov	r4, r1
 8028e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028e3a:	2900      	cmp	r1, #0
 8028e3c:	b096      	sub	sp, #88	@ 0x58
 8028e3e:	4615      	mov	r5, r2
 8028e40:	461e      	mov	r6, r3
 8028e42:	da0d      	bge.n	8028e60 <__swhatbuf_r+0x2e>
 8028e44:	89a3      	ldrh	r3, [r4, #12]
 8028e46:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8028e4a:	f04f 0100 	mov.w	r1, #0
 8028e4e:	bf14      	ite	ne
 8028e50:	2340      	movne	r3, #64	@ 0x40
 8028e52:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8028e56:	2000      	movs	r0, #0
 8028e58:	6031      	str	r1, [r6, #0]
 8028e5a:	602b      	str	r3, [r5, #0]
 8028e5c:	b016      	add	sp, #88	@ 0x58
 8028e5e:	bd70      	pop	{r4, r5, r6, pc}
 8028e60:	466a      	mov	r2, sp
 8028e62:	f000 f879 	bl	8028f58 <_fstat_r>
 8028e66:	2800      	cmp	r0, #0
 8028e68:	dbec      	blt.n	8028e44 <__swhatbuf_r+0x12>
 8028e6a:	9901      	ldr	r1, [sp, #4]
 8028e6c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8028e70:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8028e74:	4259      	negs	r1, r3
 8028e76:	4159      	adcs	r1, r3
 8028e78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8028e7c:	e7eb      	b.n	8028e56 <__swhatbuf_r+0x24>

08028e7e <__smakebuf_r>:
 8028e7e:	898b      	ldrh	r3, [r1, #12]
 8028e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028e82:	079d      	lsls	r5, r3, #30
 8028e84:	4606      	mov	r6, r0
 8028e86:	460c      	mov	r4, r1
 8028e88:	d507      	bpl.n	8028e9a <__smakebuf_r+0x1c>
 8028e8a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8028e8e:	6023      	str	r3, [r4, #0]
 8028e90:	6123      	str	r3, [r4, #16]
 8028e92:	2301      	movs	r3, #1
 8028e94:	6163      	str	r3, [r4, #20]
 8028e96:	b003      	add	sp, #12
 8028e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028e9a:	ab01      	add	r3, sp, #4
 8028e9c:	466a      	mov	r2, sp
 8028e9e:	f7ff ffc8 	bl	8028e32 <__swhatbuf_r>
 8028ea2:	9f00      	ldr	r7, [sp, #0]
 8028ea4:	4605      	mov	r5, r0
 8028ea6:	4639      	mov	r1, r7
 8028ea8:	4630      	mov	r0, r6
 8028eaa:	f7fb f991 	bl	80241d0 <_malloc_r>
 8028eae:	b948      	cbnz	r0, 8028ec4 <__smakebuf_r+0x46>
 8028eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028eb4:	059a      	lsls	r2, r3, #22
 8028eb6:	d4ee      	bmi.n	8028e96 <__smakebuf_r+0x18>
 8028eb8:	f023 0303 	bic.w	r3, r3, #3
 8028ebc:	f043 0302 	orr.w	r3, r3, #2
 8028ec0:	81a3      	strh	r3, [r4, #12]
 8028ec2:	e7e2      	b.n	8028e8a <__smakebuf_r+0xc>
 8028ec4:	89a3      	ldrh	r3, [r4, #12]
 8028ec6:	6020      	str	r0, [r4, #0]
 8028ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8028ecc:	81a3      	strh	r3, [r4, #12]
 8028ece:	9b01      	ldr	r3, [sp, #4]
 8028ed0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8028ed4:	b15b      	cbz	r3, 8028eee <__smakebuf_r+0x70>
 8028ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028eda:	4630      	mov	r0, r6
 8028edc:	f000 f84e 	bl	8028f7c <_isatty_r>
 8028ee0:	b128      	cbz	r0, 8028eee <__smakebuf_r+0x70>
 8028ee2:	89a3      	ldrh	r3, [r4, #12]
 8028ee4:	f023 0303 	bic.w	r3, r3, #3
 8028ee8:	f043 0301 	orr.w	r3, r3, #1
 8028eec:	81a3      	strh	r3, [r4, #12]
 8028eee:	89a3      	ldrh	r3, [r4, #12]
 8028ef0:	431d      	orrs	r5, r3
 8028ef2:	81a5      	strh	r5, [r4, #12]
 8028ef4:	e7cf      	b.n	8028e96 <__smakebuf_r+0x18>

08028ef6 <_raise_r>:
 8028ef6:	291f      	cmp	r1, #31
 8028ef8:	b538      	push	{r3, r4, r5, lr}
 8028efa:	4605      	mov	r5, r0
 8028efc:	460c      	mov	r4, r1
 8028efe:	d904      	bls.n	8028f0a <_raise_r+0x14>
 8028f00:	2316      	movs	r3, #22
 8028f02:	6003      	str	r3, [r0, #0]
 8028f04:	f04f 30ff 	mov.w	r0, #4294967295
 8028f08:	bd38      	pop	{r3, r4, r5, pc}
 8028f0a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8028f0c:	b112      	cbz	r2, 8028f14 <_raise_r+0x1e>
 8028f0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028f12:	b94b      	cbnz	r3, 8028f28 <_raise_r+0x32>
 8028f14:	4628      	mov	r0, r5
 8028f16:	f000 f853 	bl	8028fc0 <_getpid_r>
 8028f1a:	4622      	mov	r2, r4
 8028f1c:	4601      	mov	r1, r0
 8028f1e:	4628      	mov	r0, r5
 8028f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028f24:	f000 b83a 	b.w	8028f9c <_kill_r>
 8028f28:	2b01      	cmp	r3, #1
 8028f2a:	d00a      	beq.n	8028f42 <_raise_r+0x4c>
 8028f2c:	1c59      	adds	r1, r3, #1
 8028f2e:	d103      	bne.n	8028f38 <_raise_r+0x42>
 8028f30:	2316      	movs	r3, #22
 8028f32:	6003      	str	r3, [r0, #0]
 8028f34:	2001      	movs	r0, #1
 8028f36:	e7e7      	b.n	8028f08 <_raise_r+0x12>
 8028f38:	2100      	movs	r1, #0
 8028f3a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8028f3e:	4620      	mov	r0, r4
 8028f40:	4798      	blx	r3
 8028f42:	2000      	movs	r0, #0
 8028f44:	e7e0      	b.n	8028f08 <_raise_r+0x12>
	...

08028f48 <raise>:
 8028f48:	4b02      	ldr	r3, [pc, #8]	@ (8028f54 <raise+0xc>)
 8028f4a:	4601      	mov	r1, r0
 8028f4c:	6818      	ldr	r0, [r3, #0]
 8028f4e:	f7ff bfd2 	b.w	8028ef6 <_raise_r>
 8028f52:	bf00      	nop
 8028f54:	2400021c 	.word	0x2400021c

08028f58 <_fstat_r>:
 8028f58:	b538      	push	{r3, r4, r5, lr}
 8028f5a:	4d07      	ldr	r5, [pc, #28]	@ (8028f78 <_fstat_r+0x20>)
 8028f5c:	2300      	movs	r3, #0
 8028f5e:	4604      	mov	r4, r0
 8028f60:	4608      	mov	r0, r1
 8028f62:	4611      	mov	r1, r2
 8028f64:	602b      	str	r3, [r5, #0]
 8028f66:	f7dc fa49 	bl	80053fc <_fstat>
 8028f6a:	1c43      	adds	r3, r0, #1
 8028f6c:	d102      	bne.n	8028f74 <_fstat_r+0x1c>
 8028f6e:	682b      	ldr	r3, [r5, #0]
 8028f70:	b103      	cbz	r3, 8028f74 <_fstat_r+0x1c>
 8028f72:	6023      	str	r3, [r4, #0]
 8028f74:	bd38      	pop	{r3, r4, r5, pc}
 8028f76:	bf00      	nop
 8028f78:	2400bfa8 	.word	0x2400bfa8

08028f7c <_isatty_r>:
 8028f7c:	b538      	push	{r3, r4, r5, lr}
 8028f7e:	4d06      	ldr	r5, [pc, #24]	@ (8028f98 <_isatty_r+0x1c>)
 8028f80:	2300      	movs	r3, #0
 8028f82:	4604      	mov	r4, r0
 8028f84:	4608      	mov	r0, r1
 8028f86:	602b      	str	r3, [r5, #0]
 8028f88:	f7dc fa48 	bl	800541c <_isatty>
 8028f8c:	1c43      	adds	r3, r0, #1
 8028f8e:	d102      	bne.n	8028f96 <_isatty_r+0x1a>
 8028f90:	682b      	ldr	r3, [r5, #0]
 8028f92:	b103      	cbz	r3, 8028f96 <_isatty_r+0x1a>
 8028f94:	6023      	str	r3, [r4, #0]
 8028f96:	bd38      	pop	{r3, r4, r5, pc}
 8028f98:	2400bfa8 	.word	0x2400bfa8

08028f9c <_kill_r>:
 8028f9c:	b538      	push	{r3, r4, r5, lr}
 8028f9e:	4d07      	ldr	r5, [pc, #28]	@ (8028fbc <_kill_r+0x20>)
 8028fa0:	2300      	movs	r3, #0
 8028fa2:	4604      	mov	r4, r0
 8028fa4:	4608      	mov	r0, r1
 8028fa6:	4611      	mov	r1, r2
 8028fa8:	602b      	str	r3, [r5, #0]
 8028faa:	f7dc f9c5 	bl	8005338 <_kill>
 8028fae:	1c43      	adds	r3, r0, #1
 8028fb0:	d102      	bne.n	8028fb8 <_kill_r+0x1c>
 8028fb2:	682b      	ldr	r3, [r5, #0]
 8028fb4:	b103      	cbz	r3, 8028fb8 <_kill_r+0x1c>
 8028fb6:	6023      	str	r3, [r4, #0]
 8028fb8:	bd38      	pop	{r3, r4, r5, pc}
 8028fba:	bf00      	nop
 8028fbc:	2400bfa8 	.word	0x2400bfa8

08028fc0 <_getpid_r>:
 8028fc0:	f7dc b9b2 	b.w	8005328 <_getpid>

08028fc4 <_malloc_usable_size_r>:
 8028fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028fc8:	1f18      	subs	r0, r3, #4
 8028fca:	2b00      	cmp	r3, #0
 8028fcc:	bfbc      	itt	lt
 8028fce:	580b      	ldrlt	r3, [r1, r0]
 8028fd0:	18c0      	addlt	r0, r0, r3
 8028fd2:	4770      	bx	lr

08028fd4 <_init>:
 8028fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028fd6:	bf00      	nop
 8028fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028fda:	bc08      	pop	{r3}
 8028fdc:	469e      	mov	lr, r3
 8028fde:	4770      	bx	lr

08028fe0 <_fini>:
 8028fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028fe2:	bf00      	nop
 8028fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028fe6:	bc08      	pop	{r3}
 8028fe8:	469e      	mov	lr, r3
 8028fea:	4770      	bx	lr
